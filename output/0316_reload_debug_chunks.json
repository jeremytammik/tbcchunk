[
  {
    "original_filename": "0316_reload_debug",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0316_reload_debug",
    "header_text": "Dynamically Load and Debug Plug-ins",
    "local_header_href": "#dynamically-load-and-debug-plug-ins",
    "chunk_text": "<h3>Dynamically Load and Debug Plug-ins</h3><p>I have two little updates on the article on John Morse's technique for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/reload-an-addin-to-debug.html\">\ndynamically loading a Revit add-in</a> without\n\nhaving to restart Revit.\n\n<h4>Debugging an Assembly Loaded from a Byte Array</h4>\n<p>First, the initial comments posted by Guy Robinson and John Morse on the topic led to some further insights, the gist of\nwhich seems to be that if you compile an add-in targeting AnyCPU then you should have not problems using this technique on x64 or x32 systems.\nThe problem comes when either you are trying to use it like 'Edit and Continue' or compiling to x64 specific assemblies.\nSome important background information on the issue is provided\n\n<a href=\"http://blogs.msdn.com/habibh/archive/2009/10/12/how-to-edit-code-when-debugging-a-64-bit-application.aspx\">here</a>.\n\n<p>Another point to note is that it is not necessary to define a custom interface like John did, because you can use the predefined IExternalCommand one just as it is as well.\n\n<p>Furthermore, Load(Bytes b) is just one method of loading assemblies, and you can also use LoadFrom in the right context and LoadFile.\nAll these methods have their advantages and disadvantages.\nFor example, using Load, any out of the box use of Assembly.ExecutingAssembly().Location will return the location of the loader assembly instead of the add-in.\nThe bottom line is that John's solution is not allencompassingly complete, as one might expect.\n\n<h4>Dynamically Load RevitPythonShell Plug-in for Debugging</h4>\n<p>Secondly, Daren Thomas, the author of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/revit-python-shell.html\">\nRevit Python shell</a>,\n\njust wrote and let me know that he was able to make use of John's technique to\n\n<a href=\"http://darenatwork.blogspot.com/2010/03/using-revitpythonshell-to-dynamically.html\">\ndynamically load plug-ins for debugging in RevitPythonShell</a> as well.\n\nCongratulations, Daren, and I am very glad to hear that it is working for you!\n\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0316_reload_debug",
    "header_text": "Debugging an Assembly Loaded from a Byte Array",
    "local_header_href": "#debugging-an-assembly-loaded-from-a-byte-array",
    "chunk_text": "<h4>Debugging an Assembly Loaded from a Byte Array</h4><p>First, the initial comments posted by Guy Robinson and John Morse on the topic led to some further insights, the gist of\nwhich seems to be that if you compile an add-in targeting AnyCPU then you should have not problems using this technique on x64 or x32 systems.\nThe problem comes when either you are trying to use it like 'Edit and Continue' or compiling to x64 specific assemblies.\nSome important background information on the issue is provided\n\n<a href=\"http://blogs.msdn.com/habibh/archive/2009/10/12/how-to-edit-code-when-debugging-a-64-bit-application.aspx\">here</a>.\n\n<p>Another point to note is that it is not necessary to define a custom interface like John did, because you can use the predefined IExternalCommand one just as it is as well.\n\n<p>Furthermore, Load(Bytes b) is just one method of loading assemblies, and you can also use LoadFrom in the right context and LoadFile.\nAll these methods have their advantages and disadvantages.\nFor example, using Load, any out of the box use of Assembly.ExecutingAssembly().Location will return the location of the loader assembly instead of the add-in.\nThe bottom line is that John's solution is not allencompassingly complete, as one might expect.\n\n<h4>Dynamically Load RevitPythonShell Plug-in for Debugging</h4>\n<p>Secondly, Daren Thomas, the author of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/revit-python-shell.html\">\nRevit Python shell</a>,\n\njust wrote and let me know that he was able to make use of John's technique to\n\n<a href=\"http://darenatwork.blogspot.com/2010/03/using-revitpythonshell-to-dynamically.html\">\ndynamically load plug-ins for debugging in RevitPythonShell</a> as well.\n\nCongratulations, Daren, and I am very glad to hear that it is working for you!\n\n</p></p></p></p>"
  },
  {
    "original_filename": "0316_reload_debug",
    "header_text": "Dynamically Load RevitPythonShell Plug-in for Debugging",
    "local_header_href": "#dynamically-load-revitpythonshell-plug-in-for-debugging",
    "chunk_text": "<h4>Dynamically Load RevitPythonShell Plug-in for Debugging</h4><p>Secondly, Daren Thomas, the author of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/revit-python-shell.html\">\nRevit Python shell</a>,\n\njust wrote and let me know that he was able to make use of John's technique to\n\n<a href=\"http://darenatwork.blogspot.com/2010/03/using-revitpythonshell-to-dynamically.html\">\ndynamically load plug-ins for debugging in RevitPythonShell</a> as well.\n\nCongratulations, Daren, and I am very glad to hear that it is working for you!\n\n</p>"
  }
]