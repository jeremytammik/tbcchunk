[
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Determining the Face Tangent at a Picked Point",
    "local_header_href": "#determining-the-face-tangent-at-a-picked-point",
    "chunk_text": "<h3>Determining the Face Tangent at a Picked Point</h3><p>Happy Valentine's Day!</p><center>\n<img alt=\"Happy Valentine's Day!\" src=\"img/moni_valentine_flowers2.jpg\" width=\"408\"/>\n</center><p>I keep repeating how much I love all kinds of geometric problems – besides my sweetheart, of course – merci filmool fier di scheeni Bliemli!</p><p>Unfortunately, there are far too few of them around  :-)</p><p>Happily, Jordi just raised one in the Revit API discussion forum thread on an\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/api-c-question/td-p/5506500\">\nAPI C# question</a>,\n\nproviding another welcome opportunity to make use of the Face Project and ComputeDerivatives methods:</p><p><strong>Question:</strong>\n\nI'm coding a plugin for Revit 2015 that inserts a family of my choice inside an existing project.</p><p>I want to insert the family directly on a face of an existing 3D item.\nBut depending on the situation I must insert it on different types of faces, such as planar faces or cylindrical.\nProblem is, I can't get my code to function on either; I don't know how to check for the type of face prior to my operations.</p><p>That's my code for cylindrical faces:</p><pre class=\"code\">\n  <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n    <span class=\"teal\">ObjectType</span>.Face, <span class=\"maroon\">\"Please pick a point on a \"</span>\n    + <span class=\"maroon\">\"face for family instance insertion\"</span> );\n \n  <span class=\"teal\">Element</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">GeometryObject</span> obj\n    = e.GetGeometryObjectFromReference( r );\n \n  <span class=\"green\">//PlanarFace face = obj as PlanarFace;</span>\n  <span class=\"teal\">CylindricalFace</span> face = obj <span class=\"blue\">as</span> <span class=\"teal\">CylindricalFace</span>;\n \n  <span class=\"teal\">XYZ</span> p = r.GlobalPoint;\n  <span class=\"teal\">XYZ</span> v = face.Axis.CrossProduct( <span class=\"teal\">XYZ</span>.BasisZ );\n  <span class=\"blue\">if</span>( v.IsZeroLength() )\n  {\n    v = face.Axis.CrossProduct( <span class=\"teal\">XYZ</span>.BasisX );\n  }\n  doc.Create.NewFamilyInstance( r, p, v, symbol );\n</pre><p>And that's my code for planar faces:</p><pre class=\"code\">\n  <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n    <span class=\"teal\">ObjectType</span>.Face, <span class=\"maroon\">\"Please pick a point on a \"</span>\n    + <span class=\"maroon\">\"face for family instance insertion\"</span> );\n \n  <span class=\"teal\">Element</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">GeometryObject</span> obj\n    = e.GetGeometryObjectFromReference( r );\n \n  <span class=\"teal\">PlanarFace</span> face = obj <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n  <span class=\"green\">//CylindricalFace face = obj as CylindricalFace;</span>\n \n  <span class=\"teal\">XYZ</span> p = r.GlobalPoint;\n  <span class=\"teal\">XYZ</span> v = face.Normal.CrossProduct( <span class=\"teal\">XYZ</span>.BasisZ );\n  <span class=\"blue\">if</span>( v.IsZeroLength() )\n  {\n    v = face.Normal.CrossProduct( <span class=\"teal\">XYZ</span>.BasisX );\n  }\n  doc.Create.NewFamilyInstance( r, p, v, symbol );\n</pre><p>Almost nothing changes except for the declaration of v with the change: Axis/Normal.</p><p>I've been using code from The Building Coder.\nI'm fairly new to programming and totally new to C#, and I've never used any API before.</p><p>I also have other questions:</p><ul>\n<li>Right now I'm typing the path and the name of the family item that I want to insert directly inside my code. Ideally, I'd like the user to pick the family when he starts the plugin, but I have no idea how to do that.</li>\n<li>Last thing I'd like to know is, after my family is inserted, how do I run automatically an interference check to see if there is any collision. The plugin is aimed to people totally new to geomatics, that have never used any software like AutoCAD, and I want them to push the least number of buttons possible to achieve their goal.</li>\n</ul><p><strong>Answer:</strong>\n\nThank you for your query.</p><p>Looks like a very cool project.</p><p>Congratulations on getting so far already.</p><p>Let me address your question in four steps:</p><ul>\n<li><a href=\"#2\">Dynamic face type checking</a></li>\n<li><a href=\"#3\">Arbitrary axis algorithm</a></li>\n<li><a href=\"#4\">Generic face tangent determination</a></li>\n<li><a href=\"#5\">Use UVPoint directly</a></li>\n<li><a href=\"#6\">Family path and name selection</a></li>\n<li><a href=\"#7\">Interference and collision checking</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Dynamic Face Type Checking",
    "local_header_href": "#dynamic-face-type-checking",
    "chunk_text": "<h4>Dynamic Face Type Checking</h4><p>You can easily check for the type of the face dynamically using something like this:</p><pre class=\"code\">\n  <span class=\"blue\">if</span>( obj <span class=\"blue\">is</span> <span class=\"teal\">PlanarFace</span> )\n  {\n    <span class=\"teal\">PlanarFace</span> planarFace = obj <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n \n    <span class=\"green\">// Handle planar face case ...</span>\n  }\n  <span class=\"blue\">else</span> <span class=\"blue\">if</span>( obj <span class=\"blue\">is</span> <span class=\"teal\">CylindricalFace</span> )\n  {\n    <span class=\"teal\">CylindricalFace</span> cylindricalFace = obj\n      <span class=\"blue\">as</span> <span class=\"teal\">CylindricalFace</span>;\n \n    <span class=\"green\">// Handle cylindrical face case ...</span>\n  }\n</pre><p>It might be better not to separate between planar and cylindrical faces, though.</p><p>All you want is the vector v, is it?</p><p>And you want v to be tangential to the face surface?</p><p>That can be achieved in a generic fashion, independent of the face type.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Arbitrary Axis Algorithm",
    "local_header_href": "#arbitrary-axis-algorithm",
    "chunk_text": "<h4>Arbitrary Axis Algorithm</h4><p>Actually, as far as I can tell, what you are after is just an arbitrary vector tangential to the face surface.</p><p>That reminds me of the age-old\n\n<a href=\"http://www.autodesk.com/techpubs/autocad/acadr14/dxf/arbitrary_axis_algorithm_al_u05_c.htm\">\nAutoCAD arbitrary axis algorithm</a> and\n\n<!--\nthe arbitrary axis algorithm is not really mentioned here after all:\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html\">Polygon Transformation</a>\n-->\n\nthe determination of a normal vector performed by the GetCurveNormal method:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/detail-curve-must-be-in-plane.html\">Detail curve must be in plane</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/model-curve-creator.html\">Model curve creator</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/plane-normal-and-points-on-plane.html\">Plane normal and points on plane</a></li>\n</ul><p>However, in this case, there is actually no need for all this, because the Revit API provides all we need built-in.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Generic Face Tangent Determination",
    "local_header_href": "#generic-face-tangent-determination",
    "chunk_text": "<h4>Generic Face Tangent Determination</h4><p>Given a Revit API geometric face, the easiest way to determine the tangent vectors at a given point is provided by the generic Face.ComputeDerivatives method.</p><p>The only little twist required to make use of it is that it takes a UV point in the 2D face coordinate system as an input argument.\nGiven the 3D global XYZ point returned by the reference returned by PickObject, we can use the Face.Project method to determine the corresponding UV point on the face.</p><p>Thus, ComputeDerivatives can be used to determine a face tangent for any kind of face like this:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Place an instance of the given family symbol</span>\n  <span class=\"gray\">///</span><span class=\"green\"> on a selected face of an existing 3D element.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">FamilyInstance</span> PlaceFamilyInstanceOnFace(\n    <span class=\"teal\">UIDocument</span> uidoc,\n    <span class=\"teal\">FamilySymbol</span> symbol )\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Face, <span class=\"maroon\">\"Please pick a point on \"</span>\n      + <span class=\"maroon\">\" a face for family instance insertion\"</span>);\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r.ElementId );\n \n    <span class=\"teal\">GeometryObject</span> obj\n      = e.GetGeometryObjectFromReference( r );\n \n    <span class=\"teal\">XYZ</span> p = r.GlobalPoint;\n \n    <span class=\"green\">// Better than specialised individual handlers</span>\n    <span class=\"green\">// for each specific case, handle the general </span>\n    <span class=\"green\">// case in a generic fashion.</span>\n \n    <span class=\"teal\">Face</span> face = obj <span class=\"blue\">as</span> <span class=\"teal\">Face</span>;\n    <span class=\"teal\">IntersectionResult</span> ir = face.Project( p );\n    <span class=\"teal\">UV</span> q = ir.UVPoint;\n    <span class=\"teal\">Transform</span> t = face.ComputeDerivatives( q );\n    <span class=\"teal\">XYZ</span> v = t.BasisX; <span class=\"green\">// or BasisY, or whatever...</span>\n \n    <span class=\"blue\">return</span> doc.Create.NewFamilyInstance(r, p, v, symbol);\n  }\n</pre><p>As you can see, this is elegant and generic – there is no need to care about the type of face at all, it works the same way for all, including face types that you may now even be aware of, e.g. conical, Hermite, revolved and ruled, and other unthinkable ones that might potentially be added in the future.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Use UVPoint Directly",
    "local_header_href": "#use-uvpoint-directly",
    "chunk_text": "<h4>Use UVPoint Directly</h4><p>Taking a second look at the possibilities offered, I notice that the PickPoint reference already provides direct access to the face UV point in case a surface has actually been selected, so there is no need for the projection of the 3D XYZ point and the code simplifies to this:</p><pre class=\"code\">\n  <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n    <span class=\"teal\">ObjectType</span>.Face, <span class=\"maroon\">\"Please pick a point on \"</span>\n    + <span class=\"maroon\">\" a face for family instance insertion\"</span> );\n \n  <span class=\"teal\">Element</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">GeometryObject</span> obj\n    = e.GetGeometryObjectFromReference( r );\n \n  <span class=\"teal\">Face</span> face = obj <span class=\"blue\">as</span> <span class=\"teal\">Face</span>;\n  <span class=\"teal\">UV</span> q = r.UVPoint;\n \n  <span class=\"teal\">Transform</span> t = face.ComputeDerivatives( q );\n  <span class=\"teal\">XYZ</span> v = t.BasisX; <span class=\"green\">// or BasisY, or whatever...</span>\n \n  <span class=\"blue\">return</span> doc.Create.NewFamilyInstance( r, p, v, symbol );\n</pre><p>Your other questions are pretty interesting as well.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Family Path and Name Selection",
    "local_header_href": "#family-path-and-name-selection",
    "chunk_text": "<h4>Family Path and Name Selection</h4><p>To pick the path and name of the family to insert, you can use the .NET OpenFileDialog to select a family definition RFA file as demonstrated by the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/text-file-driven-automatic-placement-of-family-instances.html\">\ntext file driven automatic placement of family instances</a> example\n\nthat uses it to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/text-file-driven-automatic-placement-of-family-instances.html\">\nselect an input text file</a>.\n\nOnce the family definition file is selected, you can load it with the LoadFamily method.\nThe Building Coder provides lots of examples of how to do that.</p><a name=\"7\"></a>"
  },
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Interference and Collision Checking",
    "local_header_href": "#interference-and-collision-checking",
    "chunk_text": "<h4>Interference and Collision Checking</h4><p>Running an interference check is only a little bit more work, and there are probably various ways to go at it,\nso I will just hint at one possible starting point here.\nThe first idea that comes to mind is the following:</p><ul>\n<li>Determine the solid of the inserted family instance.</li>\n<li>Instantiate an ElementIntersectsSolidFilter using that.</li>\n<li>Retrieve all elements passing the filter.</li>\n</ul><p><a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a>\n\nCmdCollectorPerformance external command is currently set up to call the GetInstancesIntersectingElement method to test and demonstrate use of the ElementIntersectsElementFilter, closely related to the ElementIntersectsSolidFilter, with a detailed analysis of the use and result provided by the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/determining-intersecting-elements-and-continued-futureproofing.html#3\">\ndetermining all family instances intersecting an element</a>.</p><p>Furthermore, The Building Coder provides a whole topic group on various aspects of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.48\">\nelement intersection and collision detection</a>.</p><p>I added all the code described above to the new method PlaceFamilyInstanceOnFace in the module\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdNewLightingFixture.cs\">\nCmdNewLightingFixture.cs</a> in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.117.3\">\nrelease 2015.0.117.3</a> of\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a>.</p><p>That should be more than enough to help you get on with the next steps of your add-in.\nGood luck!</p><a name=\"8\"></a>"
  },
  {
    "original_filename": "1282_face_point_tangent",
    "header_text": "Autodesk Screencasts for Training Videos and Tutorials",
    "local_header_href": "#autodesk-screencasts-for-training-videos-and-tutorials",
    "chunk_text": "<h4>Autodesk Screencasts for Training Videos and Tutorials</h4><p>If you are preparing any kind of training video or tutorial on how to achieve a specific computing task, check out the possibilities offered by\n\n<a href=\"http://au.typepad.com/au/2015/02/now-featuring-drumroll-please-autodesk-screencasts.html\">\nAutodesk Screencasts</a>:\n\na Screencast is like a screenshot in video form taking a ride-along with the person giving the presentation and seeing click-by-click how it is driven.</p>"
  }
]