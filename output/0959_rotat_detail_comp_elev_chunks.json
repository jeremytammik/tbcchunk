[
  {
    "original_filename": "0959_rotat_detail_comp_elev",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0959_rotat_detail_comp_elev",
    "header_text": "Correct Detail Component Rotation in Elevation View",
    "local_header_href": "#correct-detail-component-rotation-in-elevation-view",
    "chunk_text": "<h3>Correct Detail Component Rotation in Elevation View</h3><p>My colleague Miroslav Schonauer of Autodesk Consulting ran into and solved a critical issue to fix the unexpected values reported by the Rotation property on detail components in elevation views.\n\n<p>Here are the steps describing the problem and happy resolution in detail, followed by a quick note on my tech summit\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#2\">\ncloud-based round-trip 2D Revit model editing project</a>:</p>\n<ul>\n<li><a href=\"#2\">Detail component rotation problem 1</a></li>\n<li><a href=\"#3\">Detail component rotation problem 2</a></li>\n<li><a href=\"#4\">Workaround description</a></li>\n<li><a href=\"#5\">Workaround implementation</a></li>\n<li><a href=\"#6\">Live recording and plans</a></li>\n</ul>\n<p>I was so busy wrapping up the Tech Summit and having internal meetings with colleagues here in the Autodesk Waltham and Manchester offices that I never got around to posting anything in the last two days\nIt is nice to finally take some time and get some fresh information out to you again.</p>\n<p>Here is Miro's problem description and solution:</p>\n<a name=\"2\"></a>\n<h4>Problem Description 1</h4>\n<p>I’ve been banging my head against this problem in Revit 2012 that I can reproduce in 2014 as well, both via UI and API.\nBasically, the Rotation property of LocationPoint for Detail Components in Elevation Views seems to be wrong.\nIt all seems fine in Plan Views, by the way.</p>\n<p>For example, if one creates an instance of a 225mm Steel Purlin Detail Item from Arch.Template (top one below), the rotation should be 0, but RevitLookup shows it as 90 degrees.\nI rotated it by 30 degrees in UI, visually all worked as expected, but the property then reports 93.84 (middle one below, also snapshot provided of RevitLookup) instead of 30.\nFinally, the bottom instance is rotated by 90 degrees, but the reported value is 120.</p>\n<center>\n<img alt=\"Detail component rotation\" src=\"img/detail_comp_rot_1.png\" width=\"600\"/>\n</center>\n<p>How can I correct the reported value, please?\n\n<p>By experimenting a bit, I’ve concluded that the values reported seem to correspond to the following wrong mapping (in degrees):</p>\n<table align=\"center\" border=\"0\">\n<tr><td style=\"text-align: right;\">  0</td><td> → </td><td>90</td></tr>\n<tr><td style=\"text-align: right;\"> 30</td><td> → </td><td>93.8409</td></tr>\n<tr><td style=\"text-align: right;\"> 45</td><td> → </td><td>98.4210</td></tr>\n<tr><td style=\"text-align: right;\"> 60</td><td> → </td><td>104.4775</td></tr>\n<tr><td style=\"text-align: right;\"> 90</td><td> → </td><td>120</td></tr>\n<tr><td style=\"text-align: right;\">120</td><td> → </td><td>138.5903</td></tr>\n<tr><td style=\"text-align: right;\">135</td><td> → </td><td>148.6002</td></tr>\n<tr><td style=\"text-align: right;\">150</td><td> → </td><td>158.9094</td></tr>\n<tr><td style=\"text-align: right;\">180</td><td> → </td><td>180     </td></tr>\n</table>\n<p>By the way, mimicking the actual rotation action in API works fine, just as in UI, e.g. this behaves as expected:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FamilyInstance</span> fiDetComp = <span class=\"blue\">null</span>;\n\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">FamilySymbol</span> fs = doc.get_Element(\n      idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    fiDetComp = doc.Create.NewFamilyInstance(\n      data.Origin, fs, data.ParentView );\n \n    <span class=\"green\">// Rotate it if needed</span>\n\n    <span class=\"blue\">if</span>( Math.Abs( data.Rotation ) &gt; 0.0001 )\n    {\n      <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n        data.Origin, data.Origin\n          + data.ParentView.ViewDirection );\n \n      <span class=\"teal\">ElementTransformUtils</span>.RotateElement( doc,\n        fiDetComp.Id, axis, data.Rotation );\n    }\n  }\n</pre>\n<p>This produces the correct result, but the Rotation property still reports the wrong value afterwards.</p>\n<a name=\"3\"></a>\n<h4>Problem Description 2</h4>\n<p>I just hit another manifestation of this issue that unfortunately may be a showstopper for the project I am working on.\n\n<p>I cannot believe nobody hit this issue in the last 5-6 years/releases since adding Details Families to the Views (i.e. NewFamilyInstance Method (XYZ, FamilySymbol, View) ) has been supported in API.</p>\n<p>It is very easy to reproduce and understand using pure Revit 2014 UI and RevitLookup.</p>\n<p>I created a very simple Detail Family from 'Metric Detail Component.rft' template as follows:</p>\n<center>\n<img alt=\"Detail component rotation\" src=\"img/detail_comp_rot_2.png\" width=\"600\"/>\n</center>\n<p>I inserted the same Family Type four times in each of South/North/East/West Views <b>without</b> rotating the instance (i.e. as-is from 'Create Instance' right-click). Each of these family instances looks correct in each view, but the Rotation part of the Location Point, which I would expect to be 0.0 for each case, reports strange results, i.e. 90 degrees for South, 120 for East/West and 180 for North. Just check each of the Arrows in each of the Sheet Views (using 'Activate View' one by one):</p>\n<center>\n<img alt=\"Detail component rotation\" src=\"img/detail_comp_rot_3.png\" width=\"600\"/>\n</center>\n<p>The problem is now obviously that when I create family instances programmatically, using something like the following with data.Rotation = 0.0, the results are not as expected, i.e. the instances are weirdly rotated:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FamilyInstance</span> fiDetComp = <span class=\"blue\">null</span>;\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">FamilySymbol</span> fs = doc.get_Element(\n      idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    fiDetComp = doc.Create.NewFamilyInstance(\n      data.Origin, fs, data.ParentView );\n \n    <span class=\"green\">// Rotate it if needed</span>\n    <span class=\"blue\">if</span>( Math.Abs( data.Rotation ) &gt; 0.0001 )\n    {\n      <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n        data.Origin, data.Origin\n          + data.ParentView.ViewDirection );\n \n      <span class=\"teal\">ElementTransformUtils</span>.RotateElement( doc,\n        fiDetComp.Id, axis, data.Rotation );\n    }\n  }\n</pre>\n<p>The bottom line is: how can I programmatically know which angle to use in place of data.Rotation in the above code to reliably obtain the expected results? If I use 0.0 as logical to place the component 'unrotated', the result is not as-expected and, even worse, not the same (i.e. rotation is wrong in different manners) in different elevations depending on the view direction of each elevation.</p>\n<a name=\"4\"></a>\n<h4>Workaround Description</h4>\n<p>It seems clear that the Rotation property is not set up properly to deal with items placed outside of the XY plane.</p>\n<p>Revit should indeed not be presenting a calculated rotation angle without the corresponding calculated rotation axis that this number comes from.</p>\n<p>The fact that sometimes the instance is rotated on placement, but not always, seems to be a second issue to be aware of.</p>\n<p>However, more relevantly, here is some good news: you can get what you need working with the result obtained from the FamilyInstance.GetTransform method and computing rotation angles from that.</p>\n<p>Here are the routines to help, GetRotationAngleOfInstance and RotateInstance.\n<p>GetRotationAngleOfInstance calculates the rotation angle by comparing the transform with the transform generated from the X/Y/Z of the view.\n<p>RotateInstance rotates the instance using the view direction – it is hardcoded in this example for testing purposes.\nYou can use the rotation angle difference you calculate and it should work:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> GetRotationAngleOfInstance()\n{\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n \n  <span class=\"teal\">Selection</span> selection = uiDoc.Selection;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> selection.GetElementIds() )\n  {\n    <span class=\"teal\">FamilyInstance</span> fi = uiDoc.Document.GetElement(\n      id ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n    <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n    <span class=\"teal\">XYZ</span> viewDirection = uiDoc.ActiveView.ViewDirection;\n    <span class=\"teal\">XYZ</span> rightDirection = uiDoc.ActiveView.RightDirection;\n    <span class=\"teal\">XYZ</span> upDirection = uiDoc.ActiveView.UpDirection;\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Trf\"</span>, String.Format(\n      <span class=\"maroon\">\"X{0} Y{1} Z{2}\\nX{3} Y{4} Z{5}\"</span>,\n      trf.BasisX, trf.BasisY, trf.BasisZ,\n      rightDirection, upDirection, viewDirection ) );\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Rotation Angle\"</span>,\n      trf.BasisX.AngleOnPlaneTo( rightDirection,\n        viewDirection ) * 180 / Math.PI );\n  }\n}\n \n<span class=\"blue\">public</span> <span class=\"blue\">void</span> RotateInstance()\n{\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n \n  <span class=\"teal\">Selection</span> selection = uiDoc.Selection;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> selection.GetElementIds() )\n  {\n    <span class=\"teal\">FamilyInstance</span> fi = uiDoc.Document.GetElement(\n      id ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      uiDoc.Document, <span class=\"maroon\">\"Rotate me\"</span> ) )\n    {\n      t.Start();\n \n      <span class=\"teal\">LocationPoint</span> lp = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n      <span class=\"teal\">XYZ</span> location = lp.Point;\n      <span class=\"teal\">XYZ</span> direction = uiDoc.ActiveView.ViewDirection;\n      <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n        location - direction );\n      lp.Rotate( line, Math.PI / 2.0 );\n      t.Commit();\n    }\n  }\n}\n</pre>\n<a name=\"5\"></a>\n<h4>Workaround Implementation</h4>\n<p>I can report that the workaround works very well.\n\n<p>I added one minor adjustment, changing:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location - direction );\n</pre>\n<p>I replaced it by this instead:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location + direction );\n</pre>\n<p>For convenience, we can also directly use this property:</p>\n<pre class=\"code\">\n  fi.HandOrientation;\n</pre>\n<p>That can replace the following two lines of code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n  trf.BasisX;\n</pre>\n<p>Here is my implementation code.\nSome variables/custom classes come from the specific cached context I have set up.\nTheir meaning should be clear from the comments added to them:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Loop all cached data</span>\n  <span class=\"green\">// NOTE: DetailFaceData is a custom class </span>\n  <span class=\"green\">// caching all relevant data about the </span>\n  <span class=\"green\">// View / Origin and Rotation</span>\n  <span class=\"green\">// to insert each Detail Components into/at.</span>\n \n  <span class=\"blue\">foreach</span>( DetailFaceData data <span class=\"blue\">in</span> lstDFD )\n  {\n    <span class=\"green\">// Get Symbol ID.</span>\n    <span class=\"green\">// This is the id of the Detail Component </span>\n    <span class=\"green\">// FamilySymbol to be inserted</span>\n \n    <span class=\"teal\">ElementId</span> idSymbol = GetSymbolId();\n \n    <span class=\"green\">// Insert Symbol</span>\n \n    <span class=\"teal\">ElementId</span> idDetComp\n      = <span class=\"teal\">ElementId</span>.InvalidElementId;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// 1) Insert with default rotation (should </span>\n      <span class=\"green\">// be 0.0, but due to some issues not so - </span>\n      <span class=\"green\">// see later)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n        <span class=\"teal\">FamilySymbol</span> fs = doc.GetElement(\n          idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.Create\n          .NewFamilyInstance( data.Origin, fs,\n            data.ParentView );\n \n        idDetComp = fiDetComp.Id;\n        tr.Commit();\n      }\n \n      <span class=\"green\">// 2) Rotate it if needed</span>\n      <span class=\"green\">// IMPORTANT NOTE: The commented 5 lines of </span>\n      <span class=\"green\">// code below should be sufficient and fine,</span>\n      <span class=\"green\">// but there that rotation is NOT correct </span>\n      <span class=\"green\">// for non-planar views :-(.</span>\n      <span class=\"green\">// E.g., if using 0 as the rotation, the </span>\n      <span class=\"green\">// instance IS weirdly rotated. Luckily, the </span>\n      <span class=\"green\">// .Rotate method itself still works fine, </span>\n      <span class=\"green\">// so the workaround is to first use the </span>\n      <span class=\"green\">// Transform or HandOrientation to \"measure </span>\n      <span class=\"green\">// the wrongness\" and only then to .Rotate </span>\n      <span class=\"green\">// it to the desired angle.</span>\n \n      <span class=\"green\">//if (Math.Abs(data.Rotation) &gt; 0.0001)</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//    Line axis = app.Create.NewLineBound(</span>\n      <span class=\"green\">//      data.Origin, data.Origin </span>\n      <span class=\"green\">//        + data.ParentView.ViewDirection);</span>\n      <span class=\"green\">//    ElementTransformUtils.RotateElement(</span>\n      <span class=\"green\">//      doc, fiDetComp. Id, axis, data.Rotation);</span>\n      <span class=\"green\">//}</span>\n \n      <span class=\"green\">// 2.1) Use Instance's Transform (or </span>\n      <span class=\"green\">// directly HandOrientation) and View Axes </span>\n      <span class=\"green\">// to measure which angle (random for non-</span>\n      <span class=\"green\">// plan views) Revit has created in step 1)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.GetElement(\n          idDetComp ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"teal\">XYZ</span> viewDirection = data.ParentView.ViewDirection;\n        <span class=\"teal\">XYZ</span> rightDirection = data.ParentView.RightDirection;\n \n        <span class=\"blue\">double</span> rotActual = fiDetComp.HandOrientation\n          .AngleOnPlaneTo( rightDirection,\n            viewDirection );\n \n        <span class=\"blue\">double</span> rotDelta = data.Rotation - rotActual;\n \n        <span class=\"green\">// 2.2) Use .Rotate to fix the problem</span>\n \n        <span class=\"blue\">if</span>( Math.Abs( rotDelta ) &gt; 0.0001 )\n        {\n          <span class=\"green\">// Either works fine:</span>\n          <span class=\"green\">// Option 1:</span>\n          <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n            data.Origin, data.Origin\n              + data.ParentView.ViewDirection );\n \n          <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n            doc, fiDetComp.Id, axis, rotDelta );\n \n          <span class=\"green\">//// Option 2:</span>\n          <span class=\"green\">//LocationPoint lp = fiDetComp.Location as LocationPoint;</span>\n \n          <span class=\"green\">//XYZ location = lp.Point;</span>\n          <span class=\"green\">//XYZ direction = data.ParentView.ViewDirection;</span>\n          <span class=\"green\">//Line axis2 = _App.Create.NewLineBound(location, location + direction);</span>\n          <span class=\"green\">//lp.Rotate(axis2, rotDelta);</span>\n        }\n \n        tr.Commit();\n      }\n    }\n    <span class=\"blue\">catch</span>( Exception ex )\n    {\n      <span class=\"green\">// log or handle this</span>\n      <span class=\"blue\">continue</span>;\n    }\n  }\n</pre>\n<p>Very many thanks to Miro for researching this and sharing the solution.</p>\n<p>I hope this is of use to others also.</p>\n<p>By the way, note that this is the first time ever that Miro provided C# code instead of VB.</p>\n<p>What's up, Miro?  :-)</p>\n<a name=\"6\"></a>\n<h4>Live Recording and Plans</h4>\n<p>As I already repeated all too often, I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#2\">\ncloud-based round-trip 2D Revit model editing project</a> at\n\nthe Autodesk internal tech summit.</p>\n<p>I recorded the session and posted the 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_live/index.html\">live recording</a> including\n\nan additional ten minutes of Q&amp;A at the end.\n\n<p>The 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_preview/index.html\">preview recording</a> that\n\nI already posted also remains available, and the content is somewhat different, in case you want the\n\n<a href=\"http://en.wikipedia.org/wiki/Full_monty_%28phrase%29\">full monty</a>.</p>\n<p>Work on this project has not finished yet, of course.</p>\n<p>I added a significant number of new features to the Revit add-in that I have not yet discussed.</p>\n<p>My plan is to migrate the add-in from Revit 2013 to 2014, post it to GitHub and discuss the new features soon.</p>\n<p>Furthermore, the technology implemented has proven effective and reliable so far, and far simpler than any other approach I have seen to achieve similar results, so I should explore where else I can take this.</p>\n<p>If you have any suggestions or wishes, please let me know.\nI might implement whatever you ask for.</p>\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0959_rotat_detail_comp_elev",
    "header_text": "Problem Description 1",
    "local_header_href": "#problem-description-1",
    "chunk_text": "<h4>Problem Description 1</h4><p>I’ve been banging my head against this problem in Revit 2012 that I can reproduce in 2014 as well, both via UI and API.\nBasically, the Rotation property of LocationPoint for Detail Components in Elevation Views seems to be wrong.\nIt all seems fine in Plan Views, by the way.</p><p>For example, if one creates an instance of a 225mm Steel Purlin Detail Item from Arch.Template (top one below), the rotation should be 0, but RevitLookup shows it as 90 degrees.\nI rotated it by 30 degrees in UI, visually all worked as expected, but the property then reports 93.84 (middle one below, also snapshot provided of RevitLookup) instead of 30.\nFinally, the bottom instance is rotated by 90 degrees, but the reported value is 120.</p><center>\n<img alt=\"Detail component rotation\" src=\"img/detail_comp_rot_1.png\" width=\"600\"/>\n</center><p>How can I correct the reported value, please?\n\n<p>By experimenting a bit, I’ve concluded that the values reported seem to correspond to the following wrong mapping (in degrees):</p>\n<table align=\"center\" border=\"0\">\n<tr><td style=\"text-align: right;\">  0</td><td> → </td><td>90</td></tr>\n<tr><td style=\"text-align: right;\"> 30</td><td> → </td><td>93.8409</td></tr>\n<tr><td style=\"text-align: right;\"> 45</td><td> → </td><td>98.4210</td></tr>\n<tr><td style=\"text-align: right;\"> 60</td><td> → </td><td>104.4775</td></tr>\n<tr><td style=\"text-align: right;\"> 90</td><td> → </td><td>120</td></tr>\n<tr><td style=\"text-align: right;\">120</td><td> → </td><td>138.5903</td></tr>\n<tr><td style=\"text-align: right;\">135</td><td> → </td><td>148.6002</td></tr>\n<tr><td style=\"text-align: right;\">150</td><td> → </td><td>158.9094</td></tr>\n<tr><td style=\"text-align: right;\">180</td><td> → </td><td>180     </td></tr>\n</table>\n<p>By the way, mimicking the actual rotation action in API works fine, just as in UI, e.g. this behaves as expected:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FamilyInstance</span> fiDetComp = <span class=\"blue\">null</span>;\n\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">FamilySymbol</span> fs = doc.get_Element(\n      idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    fiDetComp = doc.Create.NewFamilyInstance(\n      data.Origin, fs, data.ParentView );\n \n    <span class=\"green\">// Rotate it if needed</span>\n\n    <span class=\"blue\">if</span>( Math.Abs( data.Rotation ) &gt; 0.0001 )\n    {\n      <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n        data.Origin, data.Origin\n          + data.ParentView.ViewDirection );\n \n      <span class=\"teal\">ElementTransformUtils</span>.RotateElement( doc,\n        fiDetComp.Id, axis, data.Rotation );\n    }\n  }\n</pre>\n<p>This produces the correct result, but the Rotation property still reports the wrong value afterwards.</p>\n<a name=\"3\"></a>\n<h4>Problem Description 2</h4>\n<p>I just hit another manifestation of this issue that unfortunately may be a showstopper for the project I am working on.\n\n<p>I cannot believe nobody hit this issue in the last 5-6 years/releases since adding Details Families to the Views (i.e. NewFamilyInstance Method (XYZ, FamilySymbol, View) ) has been supported in API.</p>\n<p>It is very easy to reproduce and understand using pure Revit 2014 UI and RevitLookup.</p>\n<p>I created a very simple Detail Family from 'Metric Detail Component.rft' template as follows:</p>\n<center>\n<img alt=\"Detail component rotation\" src=\"img/detail_comp_rot_2.png\" width=\"600\"/>\n</center>\n<p>I inserted the same Family Type four times in each of South/North/East/West Views <b>without</b> rotating the instance (i.e. as-is from 'Create Instance' right-click). Each of these family instances looks correct in each view, but the Rotation part of the Location Point, which I would expect to be 0.0 for each case, reports strange results, i.e. 90 degrees for South, 120 for East/West and 180 for North. Just check each of the Arrows in each of the Sheet Views (using 'Activate View' one by one):</p>\n<center>\n<img alt=\"Detail component rotation\" src=\"img/detail_comp_rot_3.png\" width=\"600\"/>\n</center>\n<p>The problem is now obviously that when I create family instances programmatically, using something like the following with data.Rotation = 0.0, the results are not as expected, i.e. the instances are weirdly rotated:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FamilyInstance</span> fiDetComp = <span class=\"blue\">null</span>;\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">FamilySymbol</span> fs = doc.get_Element(\n      idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    fiDetComp = doc.Create.NewFamilyInstance(\n      data.Origin, fs, data.ParentView );\n \n    <span class=\"green\">// Rotate it if needed</span>\n    <span class=\"blue\">if</span>( Math.Abs( data.Rotation ) &gt; 0.0001 )\n    {\n      <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n        data.Origin, data.Origin\n          + data.ParentView.ViewDirection );\n \n      <span class=\"teal\">ElementTransformUtils</span>.RotateElement( doc,\n        fiDetComp.Id, axis, data.Rotation );\n    }\n  }\n</pre>\n<p>The bottom line is: how can I programmatically know which angle to use in place of data.Rotation in the above code to reliably obtain the expected results? If I use 0.0 as logical to place the component 'unrotated', the result is not as-expected and, even worse, not the same (i.e. rotation is wrong in different manners) in different elevations depending on the view direction of each elevation.</p>\n<a name=\"4\"></a>\n<h4>Workaround Description</h4>\n<p>It seems clear that the Rotation property is not set up properly to deal with items placed outside of the XY plane.</p>\n<p>Revit should indeed not be presenting a calculated rotation angle without the corresponding calculated rotation axis that this number comes from.</p>\n<p>The fact that sometimes the instance is rotated on placement, but not always, seems to be a second issue to be aware of.</p>\n<p>However, more relevantly, here is some good news: you can get what you need working with the result obtained from the FamilyInstance.GetTransform method and computing rotation angles from that.</p>\n<p>Here are the routines to help, GetRotationAngleOfInstance and RotateInstance.\n<p>GetRotationAngleOfInstance calculates the rotation angle by comparing the transform with the transform generated from the X/Y/Z of the view.\n<p>RotateInstance rotates the instance using the view direction – it is hardcoded in this example for testing purposes.\nYou can use the rotation angle difference you calculate and it should work:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> GetRotationAngleOfInstance()\n{\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n \n  <span class=\"teal\">Selection</span> selection = uiDoc.Selection;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> selection.GetElementIds() )\n  {\n    <span class=\"teal\">FamilyInstance</span> fi = uiDoc.Document.GetElement(\n      id ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n    <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n    <span class=\"teal\">XYZ</span> viewDirection = uiDoc.ActiveView.ViewDirection;\n    <span class=\"teal\">XYZ</span> rightDirection = uiDoc.ActiveView.RightDirection;\n    <span class=\"teal\">XYZ</span> upDirection = uiDoc.ActiveView.UpDirection;\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Trf\"</span>, String.Format(\n      <span class=\"maroon\">\"X{0} Y{1} Z{2}\\nX{3} Y{4} Z{5}\"</span>,\n      trf.BasisX, trf.BasisY, trf.BasisZ,\n      rightDirection, upDirection, viewDirection ) );\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Rotation Angle\"</span>,\n      trf.BasisX.AngleOnPlaneTo( rightDirection,\n        viewDirection ) * 180 / Math.PI );\n  }\n}\n \n<span class=\"blue\">public</span> <span class=\"blue\">void</span> RotateInstance()\n{\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n \n  <span class=\"teal\">Selection</span> selection = uiDoc.Selection;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> selection.GetElementIds() )\n  {\n    <span class=\"teal\">FamilyInstance</span> fi = uiDoc.Document.GetElement(\n      id ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      uiDoc.Document, <span class=\"maroon\">\"Rotate me\"</span> ) )\n    {\n      t.Start();\n \n      <span class=\"teal\">LocationPoint</span> lp = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n      <span class=\"teal\">XYZ</span> location = lp.Point;\n      <span class=\"teal\">XYZ</span> direction = uiDoc.ActiveView.ViewDirection;\n      <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n        location - direction );\n      lp.Rotate( line, Math.PI / 2.0 );\n      t.Commit();\n    }\n  }\n}\n</pre>\n<a name=\"5\"></a>\n<h4>Workaround Implementation</h4>\n<p>I can report that the workaround works very well.\n\n<p>I added one minor adjustment, changing:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location - direction );\n</pre>\n<p>I replaced it by this instead:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location + direction );\n</pre>\n<p>For convenience, we can also directly use this property:</p>\n<pre class=\"code\">\n  fi.HandOrientation;\n</pre>\n<p>That can replace the following two lines of code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n  trf.BasisX;\n</pre>\n<p>Here is my implementation code.\nSome variables/custom classes come from the specific cached context I have set up.\nTheir meaning should be clear from the comments added to them:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Loop all cached data</span>\n  <span class=\"green\">// NOTE: DetailFaceData is a custom class </span>\n  <span class=\"green\">// caching all relevant data about the </span>\n  <span class=\"green\">// View / Origin and Rotation</span>\n  <span class=\"green\">// to insert each Detail Components into/at.</span>\n \n  <span class=\"blue\">foreach</span>( DetailFaceData data <span class=\"blue\">in</span> lstDFD )\n  {\n    <span class=\"green\">// Get Symbol ID.</span>\n    <span class=\"green\">// This is the id of the Detail Component </span>\n    <span class=\"green\">// FamilySymbol to be inserted</span>\n \n    <span class=\"teal\">ElementId</span> idSymbol = GetSymbolId();\n \n    <span class=\"green\">// Insert Symbol</span>\n \n    <span class=\"teal\">ElementId</span> idDetComp\n      = <span class=\"teal\">ElementId</span>.InvalidElementId;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// 1) Insert with default rotation (should </span>\n      <span class=\"green\">// be 0.0, but due to some issues not so - </span>\n      <span class=\"green\">// see later)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n        <span class=\"teal\">FamilySymbol</span> fs = doc.GetElement(\n          idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.Create\n          .NewFamilyInstance( data.Origin, fs,\n            data.ParentView );\n \n        idDetComp = fiDetComp.Id;\n        tr.Commit();\n      }\n \n      <span class=\"green\">// 2) Rotate it if needed</span>\n      <span class=\"green\">// IMPORTANT NOTE: The commented 5 lines of </span>\n      <span class=\"green\">// code below should be sufficient and fine,</span>\n      <span class=\"green\">// but there that rotation is NOT correct </span>\n      <span class=\"green\">// for non-planar views :-(.</span>\n      <span class=\"green\">// E.g., if using 0 as the rotation, the </span>\n      <span class=\"green\">// instance IS weirdly rotated. Luckily, the </span>\n      <span class=\"green\">// .Rotate method itself still works fine, </span>\n      <span class=\"green\">// so the workaround is to first use the </span>\n      <span class=\"green\">// Transform or HandOrientation to \"measure </span>\n      <span class=\"green\">// the wrongness\" and only then to .Rotate </span>\n      <span class=\"green\">// it to the desired angle.</span>\n \n      <span class=\"green\">//if (Math.Abs(data.Rotation) &gt; 0.0001)</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//    Line axis = app.Create.NewLineBound(</span>\n      <span class=\"green\">//      data.Origin, data.Origin </span>\n      <span class=\"green\">//        + data.ParentView.ViewDirection);</span>\n      <span class=\"green\">//    ElementTransformUtils.RotateElement(</span>\n      <span class=\"green\">//      doc, fiDetComp. Id, axis, data.Rotation);</span>\n      <span class=\"green\">//}</span>\n \n      <span class=\"green\">// 2.1) Use Instance's Transform (or </span>\n      <span class=\"green\">// directly HandOrientation) and View Axes </span>\n      <span class=\"green\">// to measure which angle (random for non-</span>\n      <span class=\"green\">// plan views) Revit has created in step 1)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.GetElement(\n          idDetComp ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"teal\">XYZ</span> viewDirection = data.ParentView.ViewDirection;\n        <span class=\"teal\">XYZ</span> rightDirection = data.ParentView.RightDirection;\n \n        <span class=\"blue\">double</span> rotActual = fiDetComp.HandOrientation\n          .AngleOnPlaneTo( rightDirection,\n            viewDirection );\n \n        <span class=\"blue\">double</span> rotDelta = data.Rotation - rotActual;\n \n        <span class=\"green\">// 2.2) Use .Rotate to fix the problem</span>\n \n        <span class=\"blue\">if</span>( Math.Abs( rotDelta ) &gt; 0.0001 )\n        {\n          <span class=\"green\">// Either works fine:</span>\n          <span class=\"green\">// Option 1:</span>\n          <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n            data.Origin, data.Origin\n              + data.ParentView.ViewDirection );\n \n          <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n            doc, fiDetComp.Id, axis, rotDelta );\n \n          <span class=\"green\">//// Option 2:</span>\n          <span class=\"green\">//LocationPoint lp = fiDetComp.Location as LocationPoint;</span>\n \n          <span class=\"green\">//XYZ location = lp.Point;</span>\n          <span class=\"green\">//XYZ direction = data.ParentView.ViewDirection;</span>\n          <span class=\"green\">//Line axis2 = _App.Create.NewLineBound(location, location + direction);</span>\n          <span class=\"green\">//lp.Rotate(axis2, rotDelta);</span>\n        }\n \n        tr.Commit();\n      }\n    }\n    <span class=\"blue\">catch</span>( Exception ex )\n    {\n      <span class=\"green\">// log or handle this</span>\n      <span class=\"blue\">continue</span>;\n    }\n  }\n</pre>\n<p>Very many thanks to Miro for researching this and sharing the solution.</p>\n<p>I hope this is of use to others also.</p>\n<p>By the way, note that this is the first time ever that Miro provided C# code instead of VB.</p>\n<p>What's up, Miro?  :-)</p>\n<a name=\"6\"></a>\n<h4>Live Recording and Plans</h4>\n<p>As I already repeated all too often, I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#2\">\ncloud-based round-trip 2D Revit model editing project</a> at\n\nthe Autodesk internal tech summit.</p>\n<p>I recorded the session and posted the 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_live/index.html\">live recording</a> including\n\nan additional ten minutes of Q&amp;A at the end.\n\n<p>The 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_preview/index.html\">preview recording</a> that\n\nI already posted also remains available, and the content is somewhat different, in case you want the\n\n<a href=\"http://en.wikipedia.org/wiki/Full_monty_%28phrase%29\">full monty</a>.</p>\n<p>Work on this project has not finished yet, of course.</p>\n<p>I added a significant number of new features to the Revit add-in that I have not yet discussed.</p>\n<p>My plan is to migrate the add-in from Revit 2013 to 2014, post it to GitHub and discuss the new features soon.</p>\n<p>Furthermore, the technology implemented has proven effective and reliable so far, and far simpler than any other approach I have seen to achieve similar results, so I should explore where else I can take this.</p>\n<p>If you have any suggestions or wishes, please let me know.\nI might implement whatever you ask for.</p>\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0959_rotat_detail_comp_elev",
    "header_text": "Problem Description 2",
    "local_header_href": "#problem-description-2",
    "chunk_text": "<h4>Problem Description 2</h4><p>I just hit another manifestation of this issue that unfortunately may be a showstopper for the project I am working on.\n\n<p>I cannot believe nobody hit this issue in the last 5-6 years/releases since adding Details Families to the Views (i.e. NewFamilyInstance Method (XYZ, FamilySymbol, View) ) has been supported in API.</p>\n<p>It is very easy to reproduce and understand using pure Revit 2014 UI and RevitLookup.</p>\n<p>I created a very simple Detail Family from 'Metric Detail Component.rft' template as follows:</p>\n<center>\n<img alt=\"Detail component rotation\" src=\"img/detail_comp_rot_2.png\" width=\"600\"/>\n</center>\n<p>I inserted the same Family Type four times in each of South/North/East/West Views <b>without</b> rotating the instance (i.e. as-is from 'Create Instance' right-click). Each of these family instances looks correct in each view, but the Rotation part of the Location Point, which I would expect to be 0.0 for each case, reports strange results, i.e. 90 degrees for South, 120 for East/West and 180 for North. Just check each of the Arrows in each of the Sheet Views (using 'Activate View' one by one):</p>\n<center>\n<img alt=\"Detail component rotation\" src=\"img/detail_comp_rot_3.png\" width=\"600\"/>\n</center>\n<p>The problem is now obviously that when I create family instances programmatically, using something like the following with data.Rotation = 0.0, the results are not as expected, i.e. the instances are weirdly rotated:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FamilyInstance</span> fiDetComp = <span class=\"blue\">null</span>;\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">FamilySymbol</span> fs = doc.get_Element(\n      idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    fiDetComp = doc.Create.NewFamilyInstance(\n      data.Origin, fs, data.ParentView );\n \n    <span class=\"green\">// Rotate it if needed</span>\n    <span class=\"blue\">if</span>( Math.Abs( data.Rotation ) &gt; 0.0001 )\n    {\n      <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n        data.Origin, data.Origin\n          + data.ParentView.ViewDirection );\n \n      <span class=\"teal\">ElementTransformUtils</span>.RotateElement( doc,\n        fiDetComp.Id, axis, data.Rotation );\n    }\n  }\n</pre>\n<p>The bottom line is: how can I programmatically know which angle to use in place of data.Rotation in the above code to reliably obtain the expected results? If I use 0.0 as logical to place the component 'unrotated', the result is not as-expected and, even worse, not the same (i.e. rotation is wrong in different manners) in different elevations depending on the view direction of each elevation.</p>\n<a name=\"4\"></a>\n<h4>Workaround Description</h4>\n<p>It seems clear that the Rotation property is not set up properly to deal with items placed outside of the XY plane.</p>\n<p>Revit should indeed not be presenting a calculated rotation angle without the corresponding calculated rotation axis that this number comes from.</p>\n<p>The fact that sometimes the instance is rotated on placement, but not always, seems to be a second issue to be aware of.</p>\n<p>However, more relevantly, here is some good news: you can get what you need working with the result obtained from the FamilyInstance.GetTransform method and computing rotation angles from that.</p>\n<p>Here are the routines to help, GetRotationAngleOfInstance and RotateInstance.\n<p>GetRotationAngleOfInstance calculates the rotation angle by comparing the transform with the transform generated from the X/Y/Z of the view.\n<p>RotateInstance rotates the instance using the view direction – it is hardcoded in this example for testing purposes.\nYou can use the rotation angle difference you calculate and it should work:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> GetRotationAngleOfInstance()\n{\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n \n  <span class=\"teal\">Selection</span> selection = uiDoc.Selection;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> selection.GetElementIds() )\n  {\n    <span class=\"teal\">FamilyInstance</span> fi = uiDoc.Document.GetElement(\n      id ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n    <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n    <span class=\"teal\">XYZ</span> viewDirection = uiDoc.ActiveView.ViewDirection;\n    <span class=\"teal\">XYZ</span> rightDirection = uiDoc.ActiveView.RightDirection;\n    <span class=\"teal\">XYZ</span> upDirection = uiDoc.ActiveView.UpDirection;\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Trf\"</span>, String.Format(\n      <span class=\"maroon\">\"X{0} Y{1} Z{2}\\nX{3} Y{4} Z{5}\"</span>,\n      trf.BasisX, trf.BasisY, trf.BasisZ,\n      rightDirection, upDirection, viewDirection ) );\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Rotation Angle\"</span>,\n      trf.BasisX.AngleOnPlaneTo( rightDirection,\n        viewDirection ) * 180 / Math.PI );\n  }\n}\n \n<span class=\"blue\">public</span> <span class=\"blue\">void</span> RotateInstance()\n{\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n \n  <span class=\"teal\">Selection</span> selection = uiDoc.Selection;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> selection.GetElementIds() )\n  {\n    <span class=\"teal\">FamilyInstance</span> fi = uiDoc.Document.GetElement(\n      id ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      uiDoc.Document, <span class=\"maroon\">\"Rotate me\"</span> ) )\n    {\n      t.Start();\n \n      <span class=\"teal\">LocationPoint</span> lp = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n      <span class=\"teal\">XYZ</span> location = lp.Point;\n      <span class=\"teal\">XYZ</span> direction = uiDoc.ActiveView.ViewDirection;\n      <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n        location - direction );\n      lp.Rotate( line, Math.PI / 2.0 );\n      t.Commit();\n    }\n  }\n}\n</pre>\n<a name=\"5\"></a>\n<h4>Workaround Implementation</h4>\n<p>I can report that the workaround works very well.\n\n<p>I added one minor adjustment, changing:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location - direction );\n</pre>\n<p>I replaced it by this instead:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location + direction );\n</pre>\n<p>For convenience, we can also directly use this property:</p>\n<pre class=\"code\">\n  fi.HandOrientation;\n</pre>\n<p>That can replace the following two lines of code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n  trf.BasisX;\n</pre>\n<p>Here is my implementation code.\nSome variables/custom classes come from the specific cached context I have set up.\nTheir meaning should be clear from the comments added to them:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Loop all cached data</span>\n  <span class=\"green\">// NOTE: DetailFaceData is a custom class </span>\n  <span class=\"green\">// caching all relevant data about the </span>\n  <span class=\"green\">// View / Origin and Rotation</span>\n  <span class=\"green\">// to insert each Detail Components into/at.</span>\n \n  <span class=\"blue\">foreach</span>( DetailFaceData data <span class=\"blue\">in</span> lstDFD )\n  {\n    <span class=\"green\">// Get Symbol ID.</span>\n    <span class=\"green\">// This is the id of the Detail Component </span>\n    <span class=\"green\">// FamilySymbol to be inserted</span>\n \n    <span class=\"teal\">ElementId</span> idSymbol = GetSymbolId();\n \n    <span class=\"green\">// Insert Symbol</span>\n \n    <span class=\"teal\">ElementId</span> idDetComp\n      = <span class=\"teal\">ElementId</span>.InvalidElementId;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// 1) Insert with default rotation (should </span>\n      <span class=\"green\">// be 0.0, but due to some issues not so - </span>\n      <span class=\"green\">// see later)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n        <span class=\"teal\">FamilySymbol</span> fs = doc.GetElement(\n          idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.Create\n          .NewFamilyInstance( data.Origin, fs,\n            data.ParentView );\n \n        idDetComp = fiDetComp.Id;\n        tr.Commit();\n      }\n \n      <span class=\"green\">// 2) Rotate it if needed</span>\n      <span class=\"green\">// IMPORTANT NOTE: The commented 5 lines of </span>\n      <span class=\"green\">// code below should be sufficient and fine,</span>\n      <span class=\"green\">// but there that rotation is NOT correct </span>\n      <span class=\"green\">// for non-planar views :-(.</span>\n      <span class=\"green\">// E.g., if using 0 as the rotation, the </span>\n      <span class=\"green\">// instance IS weirdly rotated. Luckily, the </span>\n      <span class=\"green\">// .Rotate method itself still works fine, </span>\n      <span class=\"green\">// so the workaround is to first use the </span>\n      <span class=\"green\">// Transform or HandOrientation to \"measure </span>\n      <span class=\"green\">// the wrongness\" and only then to .Rotate </span>\n      <span class=\"green\">// it to the desired angle.</span>\n \n      <span class=\"green\">//if (Math.Abs(data.Rotation) &gt; 0.0001)</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//    Line axis = app.Create.NewLineBound(</span>\n      <span class=\"green\">//      data.Origin, data.Origin </span>\n      <span class=\"green\">//        + data.ParentView.ViewDirection);</span>\n      <span class=\"green\">//    ElementTransformUtils.RotateElement(</span>\n      <span class=\"green\">//      doc, fiDetComp. Id, axis, data.Rotation);</span>\n      <span class=\"green\">//}</span>\n \n      <span class=\"green\">// 2.1) Use Instance's Transform (or </span>\n      <span class=\"green\">// directly HandOrientation) and View Axes </span>\n      <span class=\"green\">// to measure which angle (random for non-</span>\n      <span class=\"green\">// plan views) Revit has created in step 1)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.GetElement(\n          idDetComp ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"teal\">XYZ</span> viewDirection = data.ParentView.ViewDirection;\n        <span class=\"teal\">XYZ</span> rightDirection = data.ParentView.RightDirection;\n \n        <span class=\"blue\">double</span> rotActual = fiDetComp.HandOrientation\n          .AngleOnPlaneTo( rightDirection,\n            viewDirection );\n \n        <span class=\"blue\">double</span> rotDelta = data.Rotation - rotActual;\n \n        <span class=\"green\">// 2.2) Use .Rotate to fix the problem</span>\n \n        <span class=\"blue\">if</span>( Math.Abs( rotDelta ) &gt; 0.0001 )\n        {\n          <span class=\"green\">// Either works fine:</span>\n          <span class=\"green\">// Option 1:</span>\n          <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n            data.Origin, data.Origin\n              + data.ParentView.ViewDirection );\n \n          <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n            doc, fiDetComp.Id, axis, rotDelta );\n \n          <span class=\"green\">//// Option 2:</span>\n          <span class=\"green\">//LocationPoint lp = fiDetComp.Location as LocationPoint;</span>\n \n          <span class=\"green\">//XYZ location = lp.Point;</span>\n          <span class=\"green\">//XYZ direction = data.ParentView.ViewDirection;</span>\n          <span class=\"green\">//Line axis2 = _App.Create.NewLineBound(location, location + direction);</span>\n          <span class=\"green\">//lp.Rotate(axis2, rotDelta);</span>\n        }\n \n        tr.Commit();\n      }\n    }\n    <span class=\"blue\">catch</span>( Exception ex )\n    {\n      <span class=\"green\">// log or handle this</span>\n      <span class=\"blue\">continue</span>;\n    }\n  }\n</pre>\n<p>Very many thanks to Miro for researching this and sharing the solution.</p>\n<p>I hope this is of use to others also.</p>\n<p>By the way, note that this is the first time ever that Miro provided C# code instead of VB.</p>\n<p>What's up, Miro?  :-)</p>\n<a name=\"6\"></a>\n<h4>Live Recording and Plans</h4>\n<p>As I already repeated all too often, I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#2\">\ncloud-based round-trip 2D Revit model editing project</a> at\n\nthe Autodesk internal tech summit.</p>\n<p>I recorded the session and posted the 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_live/index.html\">live recording</a> including\n\nan additional ten minutes of Q&amp;A at the end.\n\n<p>The 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_preview/index.html\">preview recording</a> that\n\nI already posted also remains available, and the content is somewhat different, in case you want the\n\n<a href=\"http://en.wikipedia.org/wiki/Full_monty_%28phrase%29\">full monty</a>.</p>\n<p>Work on this project has not finished yet, of course.</p>\n<p>I added a significant number of new features to the Revit add-in that I have not yet discussed.</p>\n<p>My plan is to migrate the add-in from Revit 2013 to 2014, post it to GitHub and discuss the new features soon.</p>\n<p>Furthermore, the technology implemented has proven effective and reliable so far, and far simpler than any other approach I have seen to achieve similar results, so I should explore where else I can take this.</p>\n<p>If you have any suggestions or wishes, please let me know.\nI might implement whatever you ask for.</p>\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0959_rotat_detail_comp_elev",
    "header_text": "Workaround Description",
    "local_header_href": "#workaround-description",
    "chunk_text": "<h4>Workaround Description</h4><p>It seems clear that the Rotation property is not set up properly to deal with items placed outside of the XY plane.</p><p>Revit should indeed not be presenting a calculated rotation angle without the corresponding calculated rotation axis that this number comes from.</p><p>The fact that sometimes the instance is rotated on placement, but not always, seems to be a second issue to be aware of.</p><p>However, more relevantly, here is some good news: you can get what you need working with the result obtained from the FamilyInstance.GetTransform method and computing rotation angles from that.</p><p>Here are the routines to help, GetRotationAngleOfInstance and RotateInstance.\n<p>GetRotationAngleOfInstance calculates the rotation angle by comparing the transform with the transform generated from the X/Y/Z of the view.\n<p>RotateInstance rotates the instance using the view direction – it is hardcoded in this example for testing purposes.\nYou can use the rotation angle difference you calculate and it should work:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> GetRotationAngleOfInstance()\n{\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n \n  <span class=\"teal\">Selection</span> selection = uiDoc.Selection;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> selection.GetElementIds() )\n  {\n    <span class=\"teal\">FamilyInstance</span> fi = uiDoc.Document.GetElement(\n      id ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n    <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n    <span class=\"teal\">XYZ</span> viewDirection = uiDoc.ActiveView.ViewDirection;\n    <span class=\"teal\">XYZ</span> rightDirection = uiDoc.ActiveView.RightDirection;\n    <span class=\"teal\">XYZ</span> upDirection = uiDoc.ActiveView.UpDirection;\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Trf\"</span>, String.Format(\n      <span class=\"maroon\">\"X{0} Y{1} Z{2}\\nX{3} Y{4} Z{5}\"</span>,\n      trf.BasisX, trf.BasisY, trf.BasisZ,\n      rightDirection, upDirection, viewDirection ) );\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Rotation Angle\"</span>,\n      trf.BasisX.AngleOnPlaneTo( rightDirection,\n        viewDirection ) * 180 / Math.PI );\n  }\n}\n \n<span class=\"blue\">public</span> <span class=\"blue\">void</span> RotateInstance()\n{\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n \n  <span class=\"teal\">Selection</span> selection = uiDoc.Selection;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> selection.GetElementIds() )\n  {\n    <span class=\"teal\">FamilyInstance</span> fi = uiDoc.Document.GetElement(\n      id ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      uiDoc.Document, <span class=\"maroon\">\"Rotate me\"</span> ) )\n    {\n      t.Start();\n \n      <span class=\"teal\">LocationPoint</span> lp = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n      <span class=\"teal\">XYZ</span> location = lp.Point;\n      <span class=\"teal\">XYZ</span> direction = uiDoc.ActiveView.ViewDirection;\n      <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n        location - direction );\n      lp.Rotate( line, Math.PI / 2.0 );\n      t.Commit();\n    }\n  }\n}\n</pre>\n<a name=\"5\"></a>\n<h4>Workaround Implementation</h4>\n<p>I can report that the workaround works very well.\n\n<p>I added one minor adjustment, changing:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location - direction );\n</pre>\n<p>I replaced it by this instead:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location + direction );\n</pre>\n<p>For convenience, we can also directly use this property:</p>\n<pre class=\"code\">\n  fi.HandOrientation;\n</pre>\n<p>That can replace the following two lines of code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n  trf.BasisX;\n</pre>\n<p>Here is my implementation code.\nSome variables/custom classes come from the specific cached context I have set up.\nTheir meaning should be clear from the comments added to them:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Loop all cached data</span>\n  <span class=\"green\">// NOTE: DetailFaceData is a custom class </span>\n  <span class=\"green\">// caching all relevant data about the </span>\n  <span class=\"green\">// View / Origin and Rotation</span>\n  <span class=\"green\">// to insert each Detail Components into/at.</span>\n \n  <span class=\"blue\">foreach</span>( DetailFaceData data <span class=\"blue\">in</span> lstDFD )\n  {\n    <span class=\"green\">// Get Symbol ID.</span>\n    <span class=\"green\">// This is the id of the Detail Component </span>\n    <span class=\"green\">// FamilySymbol to be inserted</span>\n \n    <span class=\"teal\">ElementId</span> idSymbol = GetSymbolId();\n \n    <span class=\"green\">// Insert Symbol</span>\n \n    <span class=\"teal\">ElementId</span> idDetComp\n      = <span class=\"teal\">ElementId</span>.InvalidElementId;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// 1) Insert with default rotation (should </span>\n      <span class=\"green\">// be 0.0, but due to some issues not so - </span>\n      <span class=\"green\">// see later)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n        <span class=\"teal\">FamilySymbol</span> fs = doc.GetElement(\n          idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.Create\n          .NewFamilyInstance( data.Origin, fs,\n            data.ParentView );\n \n        idDetComp = fiDetComp.Id;\n        tr.Commit();\n      }\n \n      <span class=\"green\">// 2) Rotate it if needed</span>\n      <span class=\"green\">// IMPORTANT NOTE: The commented 5 lines of </span>\n      <span class=\"green\">// code below should be sufficient and fine,</span>\n      <span class=\"green\">// but there that rotation is NOT correct </span>\n      <span class=\"green\">// for non-planar views :-(.</span>\n      <span class=\"green\">// E.g., if using 0 as the rotation, the </span>\n      <span class=\"green\">// instance IS weirdly rotated. Luckily, the </span>\n      <span class=\"green\">// .Rotate method itself still works fine, </span>\n      <span class=\"green\">// so the workaround is to first use the </span>\n      <span class=\"green\">// Transform or HandOrientation to \"measure </span>\n      <span class=\"green\">// the wrongness\" and only then to .Rotate </span>\n      <span class=\"green\">// it to the desired angle.</span>\n \n      <span class=\"green\">//if (Math.Abs(data.Rotation) &gt; 0.0001)</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//    Line axis = app.Create.NewLineBound(</span>\n      <span class=\"green\">//      data.Origin, data.Origin </span>\n      <span class=\"green\">//        + data.ParentView.ViewDirection);</span>\n      <span class=\"green\">//    ElementTransformUtils.RotateElement(</span>\n      <span class=\"green\">//      doc, fiDetComp. Id, axis, data.Rotation);</span>\n      <span class=\"green\">//}</span>\n \n      <span class=\"green\">// 2.1) Use Instance's Transform (or </span>\n      <span class=\"green\">// directly HandOrientation) and View Axes </span>\n      <span class=\"green\">// to measure which angle (random for non-</span>\n      <span class=\"green\">// plan views) Revit has created in step 1)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.GetElement(\n          idDetComp ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"teal\">XYZ</span> viewDirection = data.ParentView.ViewDirection;\n        <span class=\"teal\">XYZ</span> rightDirection = data.ParentView.RightDirection;\n \n        <span class=\"blue\">double</span> rotActual = fiDetComp.HandOrientation\n          .AngleOnPlaneTo( rightDirection,\n            viewDirection );\n \n        <span class=\"blue\">double</span> rotDelta = data.Rotation - rotActual;\n \n        <span class=\"green\">// 2.2) Use .Rotate to fix the problem</span>\n \n        <span class=\"blue\">if</span>( Math.Abs( rotDelta ) &gt; 0.0001 )\n        {\n          <span class=\"green\">// Either works fine:</span>\n          <span class=\"green\">// Option 1:</span>\n          <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n            data.Origin, data.Origin\n              + data.ParentView.ViewDirection );\n \n          <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n            doc, fiDetComp.Id, axis, rotDelta );\n \n          <span class=\"green\">//// Option 2:</span>\n          <span class=\"green\">//LocationPoint lp = fiDetComp.Location as LocationPoint;</span>\n \n          <span class=\"green\">//XYZ location = lp.Point;</span>\n          <span class=\"green\">//XYZ direction = data.ParentView.ViewDirection;</span>\n          <span class=\"green\">//Line axis2 = _App.Create.NewLineBound(location, location + direction);</span>\n          <span class=\"green\">//lp.Rotate(axis2, rotDelta);</span>\n        }\n \n        tr.Commit();\n      }\n    }\n    <span class=\"blue\">catch</span>( Exception ex )\n    {\n      <span class=\"green\">// log or handle this</span>\n      <span class=\"blue\">continue</span>;\n    }\n  }\n</pre>\n<p>Very many thanks to Miro for researching this and sharing the solution.</p>\n<p>I hope this is of use to others also.</p>\n<p>By the way, note that this is the first time ever that Miro provided C# code instead of VB.</p>\n<p>What's up, Miro?  :-)</p>\n<a name=\"6\"></a>\n<h4>Live Recording and Plans</h4>\n<p>As I already repeated all too often, I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#2\">\ncloud-based round-trip 2D Revit model editing project</a> at\n\nthe Autodesk internal tech summit.</p>\n<p>I recorded the session and posted the 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_live/index.html\">live recording</a> including\n\nan additional ten minutes of Q&amp;A at the end.\n\n<p>The 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_preview/index.html\">preview recording</a> that\n\nI already posted also remains available, and the content is somewhat different, in case you want the\n\n<a href=\"http://en.wikipedia.org/wiki/Full_monty_%28phrase%29\">full monty</a>.</p>\n<p>Work on this project has not finished yet, of course.</p>\n<p>I added a significant number of new features to the Revit add-in that I have not yet discussed.</p>\n<p>My plan is to migrate the add-in from Revit 2013 to 2014, post it to GitHub and discuss the new features soon.</p>\n<p>Furthermore, the technology implemented has proven effective and reliable so far, and far simpler than any other approach I have seen to achieve similar results, so I should explore where else I can take this.</p>\n<p>If you have any suggestions or wishes, please let me know.\nI might implement whatever you ask for.</p>\n</p></p></p></p>"
  },
  {
    "original_filename": "0959_rotat_detail_comp_elev",
    "header_text": "Workaround Implementation",
    "local_header_href": "#workaround-implementation",
    "chunk_text": "<h4>Workaround Implementation</h4><p>I can report that the workaround works very well.\n\n<p>I added one minor adjustment, changing:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location - direction );\n</pre>\n<p>I replaced it by this instead:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( location,\n    location + direction );\n</pre>\n<p>For convenience, we can also directly use this property:</p>\n<pre class=\"code\">\n  fi.HandOrientation;\n</pre>\n<p>That can replace the following two lines of code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> trf = fi.GetTransform();\n \n  trf.BasisX;\n</pre>\n<p>Here is my implementation code.\nSome variables/custom classes come from the specific cached context I have set up.\nTheir meaning should be clear from the comments added to them:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Loop all cached data</span>\n  <span class=\"green\">// NOTE: DetailFaceData is a custom class </span>\n  <span class=\"green\">// caching all relevant data about the </span>\n  <span class=\"green\">// View / Origin and Rotation</span>\n  <span class=\"green\">// to insert each Detail Components into/at.</span>\n \n  <span class=\"blue\">foreach</span>( DetailFaceData data <span class=\"blue\">in</span> lstDFD )\n  {\n    <span class=\"green\">// Get Symbol ID.</span>\n    <span class=\"green\">// This is the id of the Detail Component </span>\n    <span class=\"green\">// FamilySymbol to be inserted</span>\n \n    <span class=\"teal\">ElementId</span> idSymbol = GetSymbolId();\n \n    <span class=\"green\">// Insert Symbol</span>\n \n    <span class=\"teal\">ElementId</span> idDetComp\n      = <span class=\"teal\">ElementId</span>.InvalidElementId;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// 1) Insert with default rotation (should </span>\n      <span class=\"green\">// be 0.0, but due to some issues not so - </span>\n      <span class=\"green\">// see later)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n        <span class=\"teal\">FamilySymbol</span> fs = doc.GetElement(\n          idSymbol ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.Create\n          .NewFamilyInstance( data.Origin, fs,\n            data.ParentView );\n \n        idDetComp = fiDetComp.Id;\n        tr.Commit();\n      }\n \n      <span class=\"green\">// 2) Rotate it if needed</span>\n      <span class=\"green\">// IMPORTANT NOTE: The commented 5 lines of </span>\n      <span class=\"green\">// code below should be sufficient and fine,</span>\n      <span class=\"green\">// but there that rotation is NOT correct </span>\n      <span class=\"green\">// for non-planar views :-(.</span>\n      <span class=\"green\">// E.g., if using 0 as the rotation, the </span>\n      <span class=\"green\">// instance IS weirdly rotated. Luckily, the </span>\n      <span class=\"green\">// .Rotate method itself still works fine, </span>\n      <span class=\"green\">// so the workaround is to first use the </span>\n      <span class=\"green\">// Transform or HandOrientation to \"measure </span>\n      <span class=\"green\">// the wrongness\" and only then to .Rotate </span>\n      <span class=\"green\">// it to the desired angle.</span>\n \n      <span class=\"green\">//if (Math.Abs(data.Rotation) &gt; 0.0001)</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//    Line axis = app.Create.NewLineBound(</span>\n      <span class=\"green\">//      data.Origin, data.Origin </span>\n      <span class=\"green\">//        + data.ParentView.ViewDirection);</span>\n      <span class=\"green\">//    ElementTransformUtils.RotateElement(</span>\n      <span class=\"green\">//      doc, fiDetComp. Id, axis, data.Rotation);</span>\n      <span class=\"green\">//}</span>\n \n      <span class=\"green\">// 2.1) Use Instance's Transform (or </span>\n      <span class=\"green\">// directly HandOrientation) and View Axes </span>\n      <span class=\"green\">// to measure which angle (random for non-</span>\n      <span class=\"green\">// plan views) Revit has created in step 1)</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">SubTransaction</span> tr\n        = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc ) )\n      {\n        tr.Start();\n \n        <span class=\"teal\">FamilyInstance</span> fiDetComp = doc.GetElement(\n          idDetComp ) <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"teal\">XYZ</span> viewDirection = data.ParentView.ViewDirection;\n        <span class=\"teal\">XYZ</span> rightDirection = data.ParentView.RightDirection;\n \n        <span class=\"blue\">double</span> rotActual = fiDetComp.HandOrientation\n          .AngleOnPlaneTo( rightDirection,\n            viewDirection );\n \n        <span class=\"blue\">double</span> rotDelta = data.Rotation - rotActual;\n \n        <span class=\"green\">// 2.2) Use .Rotate to fix the problem</span>\n \n        <span class=\"blue\">if</span>( Math.Abs( rotDelta ) &gt; 0.0001 )\n        {\n          <span class=\"green\">// Either works fine:</span>\n          <span class=\"green\">// Option 1:</span>\n          <span class=\"teal\">Line</span> axis = app.Create.NewLineBound(\n            data.Origin, data.Origin\n              + data.ParentView.ViewDirection );\n \n          <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n            doc, fiDetComp.Id, axis, rotDelta );\n \n          <span class=\"green\">//// Option 2:</span>\n          <span class=\"green\">//LocationPoint lp = fiDetComp.Location as LocationPoint;</span>\n \n          <span class=\"green\">//XYZ location = lp.Point;</span>\n          <span class=\"green\">//XYZ direction = data.ParentView.ViewDirection;</span>\n          <span class=\"green\">//Line axis2 = _App.Create.NewLineBound(location, location + direction);</span>\n          <span class=\"green\">//lp.Rotate(axis2, rotDelta);</span>\n        }\n \n        tr.Commit();\n      }\n    }\n    <span class=\"blue\">catch</span>( Exception ex )\n    {\n      <span class=\"green\">// log or handle this</span>\n      <span class=\"blue\">continue</span>;\n    }\n  }\n</pre>\n<p>Very many thanks to Miro for researching this and sharing the solution.</p>\n<p>I hope this is of use to others also.</p>\n<p>By the way, note that this is the first time ever that Miro provided C# code instead of VB.</p>\n<p>What's up, Miro?  :-)</p>\n<a name=\"6\"></a>\n<h4>Live Recording and Plans</h4>\n<p>As I already repeated all too often, I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#2\">\ncloud-based round-trip 2D Revit model editing project</a> at\n\nthe Autodesk internal tech summit.</p>\n<p>I recorded the session and posted the 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_live/index.html\">live recording</a> including\n\nan additional ten minutes of Q&amp;A at the end.\n\n<p>The 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_preview/index.html\">preview recording</a> that\n\nI already posted also remains available, and the content is somewhat different, in case you want the\n\n<a href=\"http://en.wikipedia.org/wiki/Full_monty_%28phrase%29\">full monty</a>.</p>\n<p>Work on this project has not finished yet, of course.</p>\n<p>I added a significant number of new features to the Revit add-in that I have not yet discussed.</p>\n<p>My plan is to migrate the add-in from Revit 2013 to 2014, post it to GitHub and discuss the new features soon.</p>\n<p>Furthermore, the technology implemented has proven effective and reliable so far, and far simpler than any other approach I have seen to achieve similar results, so I should explore where else I can take this.</p>\n<p>If you have any suggestions or wishes, please let me know.\nI might implement whatever you ask for.</p>\n</p></p>"
  },
  {
    "original_filename": "0959_rotat_detail_comp_elev",
    "header_text": "Live Recording and Plans",
    "local_header_href": "#live-recording-and-plans",
    "chunk_text": "<h4>Live Recording and Plans</h4><p>As I already repeated all too often, I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#2\">\ncloud-based round-trip 2D Revit model editing project</a> at\n\nthe Autodesk internal tech summit.</p><p>I recorded the session and posted the 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_live/index.html\">live recording</a> including\n\nan additional ten minutes of Q&amp;A at the end.\n\n<p>The 30-minute\n\n<a href=\"http://thebuildingcoder.typepad.com/room_editor_preview/index.html\">preview recording</a> that\n\nI already posted also remains available, and the content is somewhat different, in case you want the\n\n<a href=\"http://en.wikipedia.org/wiki/Full_monty_%28phrase%29\">full monty</a>.</p>\n<p>Work on this project has not finished yet, of course.</p>\n<p>I added a significant number of new features to the Revit add-in that I have not yet discussed.</p>\n<p>My plan is to migrate the add-in from Revit 2013 to 2014, post it to GitHub and discuss the new features soon.</p>\n<p>Furthermore, the technology implemented has proven effective and reliable so far, and far simpler than any other approach I have seen to achieve similar results, so I should explore where else I can take this.</p>\n<p>If you have any suggestions or wishes, please let me know.\nI might implement whatever you ask for.</p>\n</p>"
  }
]