[
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Revit 2014 and Supporting Columns",
    "local_header_href": "#revit-2014-and-supporting-columns",
    "chunk_text": "<h3>Revit 2014 and Supporting Columns</h3>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Revit 2014 Announced",
    "local_header_href": "#revit-2014-announced",
    "chunk_text": "<h4>Revit 2014 Announced</h4><p>As you probably noticed by now, Revit 2014 has been announced.\nHere are the\n\n<a href=\"http://www.autodesk.com/products/autodesk-revit-family/features\">\nmain product features</a>:\n\n<ul>\n<li>Design\n<ul>\n<li>Enhanced Autodesk Exchange\n<li>Dockable window framework\n<li>New stairs and railings\n<li>Temporary view templates to change view properties temporarily\n<li>Point cloud improvements improve appearance and controls of point clouds\n<li>Parameter variance for groups to vary the value of parameters assigned to groups\n<li>New air terminal on duct enables placement of air terminal device on duct face\n<li>New angle constraints to restrict angles for pipe, duct, and cable tray\n<li>Cap open ends of pipe or duct content quickly\n<li>CSV file removal project, embedding the data into families\n<li>New plumbing template\n<li>New rebar placement constraints customization\n<li>Reinforcement enhancements with more rebar options\n</li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<li>Documentation\n<ul>\n<li>Non-rectangular crop regions\n<li>Split elevations\n<li>Alternate dimensions\n<li>Improved rebar tagging to annotate multiple elements with a single tag\n<li>Improved positioning of beams and braces\n<li>Enhanced schedules providing greater control of schedule formatting\n</li></li></li></li></li></li></ul>\n<li>Visualization\n<ul>\n<li>Displaced views enable creation of displaced or exploded building design views\n<li>Enhanced visualization\n<li>New rendering to reduce project costs with cloud-based rendering\n</li></li></li></ul>\n<li>Analysis\n<ul>\n<li>New building element energy analysis\n<li>Enhanced structural analytical model\n<li>New duct and pipe calculations to API\n</li></li></li></ul>\n</li></li></li></li></ul>\n<!-- Here is one of many overviews of\n\n<a href=\"http://autodesk-revit.blogspot.ch/2013/03/whats-new-in-revit-2014.html\">what's new</a>. -->\n<p>Each and every one of these is really exciting in itself, and almost all include or are even based on enhanced API support.\nSome of the ones that seem most exciting to me are the non-rectangular crop regions, parameter variance for groups, enhanced schedules, displaced views... well, as said, they are really all very exciting.</p>\n<p>And this is not even mentioning some of the new API features, such as the possibility to launch a Revit command and control copy and paste operations.\nI will get to all that real soon now.</p>\n<p>As Harry puts it, the Revit 2014 API is going to\n\n<a href=\"http://boostyourbim.wordpress.com/2013/03/26/revit-2014-api-is-going-to-blow-your-faces-out\">\nblow your faces out</a>  :-)</p>\n<a name=\"2\"></a>\n<h4>Determining the Columns Supporting a Beam</h4>\n<p>Still, ignoring all that busy-ness for the moment, I chug along and return to a topic similar to my discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/filter-for-touching-beams-using-solid-intersection.html\">\nretrieving all touching beams</a>.\n\n<p>In that post, I showed how to recursively traverse a collection of beams and detect the neighbouring ones at each end using an ElementIntersectsSolidFilter with a sphere.</p>\n<p>Today I explore the task of determining the columns supporting a selected beam using various different filtering and intersection methods.</p>\n<ul>\n<li><a href=\"#2\">Columns supporting a selected beam</a></li>\n<li><a href=\"#3\">Solid and element intersection</a></li>\n<li><a href=\"#4\">Bounding box filter tolerance</a></li>\n<li><a href=\"#5\">Moving the beam downwards in a temporary transaction</a></li>\n<li><a href=\"#6\">GetGeneratingElementIds</a></li>\n<li><a href=\"#7\">Cylinder Along Location Line Offset Downwards</a></li>\n<li><a href=\"#8\">Find references via ray casting</a></li>\n<li><a href=\"#9\">Sweep Along Location Curve Offset Downwards</a></li>\n<li><a href=\"#10\">Conclusion and source code</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>Columns Supporting a Selected Beam</h4>\n<p>Here is a view of a simple sample model:</p>\n<center>\n<img alt=\"Beam supported by two columns\" src=\"img/supporting_columns.png\" width=\"200\"/>\n</center>\n<p>The task at hand is to pick the indicated beam and report the columns supporting it:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected beam\" src=\"img/supporting_columns_msg.png\" width=\"400\"/>\n</center>\n<p>Simple, ain't it?</p>\n<a name=\"3\"></a>\n<h4>Solid and Element Intersection</h4>\n<p>Initially, I made some further attempts and experiments using the ElementIntersectsSolidFilter and ElementIntersectsElementFilter functionality.\n\n<p>The sample provided includes code exercising these tests and also the original bounding box implementation.\nIt is enclosed in 'if' statements checking the setting of the following Boolean variables:\n\n<pre class=\"code\">\n  bool useBoundingBox = false;\n  bool useSolid = false;\n  bool useElement = false;\n</pre>\n<p>That enables them to be switched on and off interactively in the debugger, if the need arises.\n\n<p>Unfortunately, as it turns out, they both do not work.\n\n<p>The beam solid is not quite big enough to intersect the columns, because the beam is cut back so that it does not actually intersect them.\n\n<p>The same problem also prevents use the element intersection filter.\n\n<p>It would be great if there was a possibility to grow the solid just slightly, e.g. offset all its faces outwards by an inch or two or define a tolerance before executing the intersection check, like for the bounding box.\nUnfortunately, growing or shrinking an arbitrary solid is much harder than a bounding box and therefore not implemented.\n\n\n<a name=\"4\"></a>\n<h4>Bounding Box Filter Tolerance</h4>\n<p>The BoundingBoxIsInsideFilter can be instantiated with an optional double tolerance value that allows control over the match criteria by using the given tolerance in the geometry comparison.\n\n<p>By default, the tolerance is set to zero.\nIf the tolerance is positive, the iterated element outline may extend the tolerance distance outside of the given outline in each coordinate to be a match.\nIf the tolerance is negative, the iterated element outline must lie at least the tolerance distance inside the given outline in each coordinate to be a match.\n\n<p>This is exactly what I would need here for the solid and element intersection filters as well.\nUnfortunately, as said, such a tolerance is not supported by the solid or element intersection filters.\n\n\n<a name=\"5\"></a>\n<h4>Moving the Beam Downwards in a Temporary Transaction</h4>\n<p>Lacking the tolerance option, I thought that maybe it would help to move the beam down a bit, and that it would intersect the supporting columns then.\nUnfortunately, that does not help either.\n\n<p>The problem is not only that the bottom face of the beam solid may be located above the end of the supporting columns, but also that the ends of the beam are cut back to avoid intersecting the columns, so their solids do not intersect even when the beam is moved slightly downwards.\n\n<p>This temporary movement forces a switch from read-only to manual transaction mode, of course, even though the model is not actually modify in any way in the end.\n\n<p>To make sure that the movement really is executed and the model updated before checking for an intersection, I followed the advice given by Arnošt Löbel on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\nenhancing the temporary transaction trick</a> and\n\nencapsulated the whole operation in a transaction group.\nThe group is rolled rolled back at the end, but, before doing so, the encapsulated temporary transaction around the movement of the beam can be committed and the updated geometry evaluated.\n\n<p>By the way, these changes temporarily caused an error saying \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\"\nThis was probably due to accessing the list of elements generated within the temporary transaction after the transaction group is rolled back.\nI handled that problem by storing the element ids instead of the live elements themselves inside the transaction, and then opening the elements via their id after rolling back the changes.\n\n<p>As said, the temporary downward translation still did not produce any intersections.</p>\n<p>Time for another idea.\n\n\n<a name=\"6\"></a>\n<h4>GetGeneratingElementIds</h4>\n<p>A colleague suggested that if the beam is cut back by the columns, you can iterate over the beam geometry faces and call the Element GetGeneratingElementIds method on each one, which might return the column element ids.\nIn this example, you might also get faces generated by joins with other beams.\n\n<p>I tried this, encapsulating the code in the section if( useGeneratingIds ).\nUnfortunately, all the generating ids belong to the structural framing or floors categories, so that does not help to determine the columns either.\nNo columns at all are returned by this method.\n\n\n<a name=\"7\"></a>\n<h4>Cylinder Along Location Line Offset Downwards</h4>\n<p>I then realised that I could create a much simpler independent solid shape to intersect the columns by extruding a cylinder along the beam location line, offset downwards to just below the bottom face of the beam.\nIt might require extending a little at each end.\nAll supporting columns should be intersected by it.\n\n<p>I can use code similar to the sample presented to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">\nfind 3D elements by intersection</a>.\n\n<p>Yay!\nThis works!\n\n\n<a name=\"8\"></a>\n<h4>Find References via Ray Casting</h4>\n<p>A similar approach as the solid intersection with an offset cylinder could obviously also be implemented using the ray casting functionality provided by the FindReferencesByDirection and FindReferencesWithContextByDirection methods and the ReferenceIntersector wrapper class.</p>\n<p>I did not implement any sample code demonstrating this, because I wanted to generalise the straight beam cylinder solution to a more general arbitrary curve case.</p>\n<a name=\"9\"></a>\n<h4>Sweep Along Location Curve Offset Downwards</h4>\n<p>Once I had the working solution using a cylinder defined by the straight beam location line offset downwards, I realised that it might be nice to use more generic sweep along curve functionality instead.\n<!-- of restricting the use to straight beams and an extruded cylinder. -->\nAfter all, the beam location curve might not be straight, and a non-linear location curve can quite simply be used to generate a non-linear solid using the CreateSweptGeometry method instead of CreateExtrusionGeometry.\n\n<p>My first attempt caused the CreateSweptGeometry method to throw an exception saying that \"The given attachment point don't lie in the plane of the Curve Loop. Parameter name: pathAttachmentCrvIdx &amp; pathAttachmentParam\".\nThat was my fault, though, because I was providing zero for the parameter value, which is probably the <i>normalised</i> curve start point parameter.\nWhen providing the <i>raw</i> parameter value returned by curve.get_EndParameter( 0 ) instead, all works fine.</p>\n<p>Here is a rather unrealistic sample spline beam that I used for testing:</p>\n<center>\n<img alt=\"A spline beam supported by multiple columns\" src=\"img/supporting_columns_spline_beam.png\" width=\"200\"/>\n</center>\n<p>The algorithm reports the following supporting columns for the spline beam:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected spline beam\" src=\"img/supporting_columns_spline_beam_msg.png\" width=\"400\"/>\n</center>\n<p>All is well.</p>\n<a name=\"10\"></a>\n<h4>Conclusion and Source Code</h4>\n<p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Determining the Columns Supporting a Beam",
    "local_header_href": "#determining-the-columns-supporting-a-beam",
    "chunk_text": "<h4>Determining the Columns Supporting a Beam</h4><p>Still, ignoring all that busy-ness for the moment, I chug along and return to a topic similar to my discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/filter-for-touching-beams-using-solid-intersection.html\">\nretrieving all touching beams</a>.\n\n<p>In that post, I showed how to recursively traverse a collection of beams and detect the neighbouring ones at each end using an ElementIntersectsSolidFilter with a sphere.</p>\n<p>Today I explore the task of determining the columns supporting a selected beam using various different filtering and intersection methods.</p>\n<ul>\n<li><a href=\"#2\">Columns supporting a selected beam</a></li>\n<li><a href=\"#3\">Solid and element intersection</a></li>\n<li><a href=\"#4\">Bounding box filter tolerance</a></li>\n<li><a href=\"#5\">Moving the beam downwards in a temporary transaction</a></li>\n<li><a href=\"#6\">GetGeneratingElementIds</a></li>\n<li><a href=\"#7\">Cylinder Along Location Line Offset Downwards</a></li>\n<li><a href=\"#8\">Find references via ray casting</a></li>\n<li><a href=\"#9\">Sweep Along Location Curve Offset Downwards</a></li>\n<li><a href=\"#10\">Conclusion and source code</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>Columns Supporting a Selected Beam</h4>\n<p>Here is a view of a simple sample model:</p>\n<center>\n<img alt=\"Beam supported by two columns\" src=\"img/supporting_columns.png\" width=\"200\"/>\n</center>\n<p>The task at hand is to pick the indicated beam and report the columns supporting it:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected beam\" src=\"img/supporting_columns_msg.png\" width=\"400\"/>\n</center>\n<p>Simple, ain't it?</p>\n<a name=\"3\"></a>\n<h4>Solid and Element Intersection</h4>\n<p>Initially, I made some further attempts and experiments using the ElementIntersectsSolidFilter and ElementIntersectsElementFilter functionality.\n\n<p>The sample provided includes code exercising these tests and also the original bounding box implementation.\nIt is enclosed in 'if' statements checking the setting of the following Boolean variables:\n\n<pre class=\"code\">\n  bool useBoundingBox = false;\n  bool useSolid = false;\n  bool useElement = false;\n</pre>\n<p>That enables them to be switched on and off interactively in the debugger, if the need arises.\n\n<p>Unfortunately, as it turns out, they both do not work.\n\n<p>The beam solid is not quite big enough to intersect the columns, because the beam is cut back so that it does not actually intersect them.\n\n<p>The same problem also prevents use the element intersection filter.\n\n<p>It would be great if there was a possibility to grow the solid just slightly, e.g. offset all its faces outwards by an inch or two or define a tolerance before executing the intersection check, like for the bounding box.\nUnfortunately, growing or shrinking an arbitrary solid is much harder than a bounding box and therefore not implemented.\n\n\n<a name=\"4\"></a>\n<h4>Bounding Box Filter Tolerance</h4>\n<p>The BoundingBoxIsInsideFilter can be instantiated with an optional double tolerance value that allows control over the match criteria by using the given tolerance in the geometry comparison.\n\n<p>By default, the tolerance is set to zero.\nIf the tolerance is positive, the iterated element outline may extend the tolerance distance outside of the given outline in each coordinate to be a match.\nIf the tolerance is negative, the iterated element outline must lie at least the tolerance distance inside the given outline in each coordinate to be a match.\n\n<p>This is exactly what I would need here for the solid and element intersection filters as well.\nUnfortunately, as said, such a tolerance is not supported by the solid or element intersection filters.\n\n\n<a name=\"5\"></a>\n<h4>Moving the Beam Downwards in a Temporary Transaction</h4>\n<p>Lacking the tolerance option, I thought that maybe it would help to move the beam down a bit, and that it would intersect the supporting columns then.\nUnfortunately, that does not help either.\n\n<p>The problem is not only that the bottom face of the beam solid may be located above the end of the supporting columns, but also that the ends of the beam are cut back to avoid intersecting the columns, so their solids do not intersect even when the beam is moved slightly downwards.\n\n<p>This temporary movement forces a switch from read-only to manual transaction mode, of course, even though the model is not actually modify in any way in the end.\n\n<p>To make sure that the movement really is executed and the model updated before checking for an intersection, I followed the advice given by Arnošt Löbel on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\nenhancing the temporary transaction trick</a> and\n\nencapsulated the whole operation in a transaction group.\nThe group is rolled rolled back at the end, but, before doing so, the encapsulated temporary transaction around the movement of the beam can be committed and the updated geometry evaluated.\n\n<p>By the way, these changes temporarily caused an error saying \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\"\nThis was probably due to accessing the list of elements generated within the temporary transaction after the transaction group is rolled back.\nI handled that problem by storing the element ids instead of the live elements themselves inside the transaction, and then opening the elements via their id after rolling back the changes.\n\n<p>As said, the temporary downward translation still did not produce any intersections.</p>\n<p>Time for another idea.\n\n\n<a name=\"6\"></a>\n<h4>GetGeneratingElementIds</h4>\n<p>A colleague suggested that if the beam is cut back by the columns, you can iterate over the beam geometry faces and call the Element GetGeneratingElementIds method on each one, which might return the column element ids.\nIn this example, you might also get faces generated by joins with other beams.\n\n<p>I tried this, encapsulating the code in the section if( useGeneratingIds ).\nUnfortunately, all the generating ids belong to the structural framing or floors categories, so that does not help to determine the columns either.\nNo columns at all are returned by this method.\n\n\n<a name=\"7\"></a>\n<h4>Cylinder Along Location Line Offset Downwards</h4>\n<p>I then realised that I could create a much simpler independent solid shape to intersect the columns by extruding a cylinder along the beam location line, offset downwards to just below the bottom face of the beam.\nIt might require extending a little at each end.\nAll supporting columns should be intersected by it.\n\n<p>I can use code similar to the sample presented to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">\nfind 3D elements by intersection</a>.\n\n<p>Yay!\nThis works!\n\n\n<a name=\"8\"></a>\n<h4>Find References via Ray Casting</h4>\n<p>A similar approach as the solid intersection with an offset cylinder could obviously also be implemented using the ray casting functionality provided by the FindReferencesByDirection and FindReferencesWithContextByDirection methods and the ReferenceIntersector wrapper class.</p>\n<p>I did not implement any sample code demonstrating this, because I wanted to generalise the straight beam cylinder solution to a more general arbitrary curve case.</p>\n<a name=\"9\"></a>\n<h4>Sweep Along Location Curve Offset Downwards</h4>\n<p>Once I had the working solution using a cylinder defined by the straight beam location line offset downwards, I realised that it might be nice to use more generic sweep along curve functionality instead.\n<!-- of restricting the use to straight beams and an extruded cylinder. -->\nAfter all, the beam location curve might not be straight, and a non-linear location curve can quite simply be used to generate a non-linear solid using the CreateSweptGeometry method instead of CreateExtrusionGeometry.\n\n<p>My first attempt caused the CreateSweptGeometry method to throw an exception saying that \"The given attachment point don't lie in the plane of the Curve Loop. Parameter name: pathAttachmentCrvIdx &amp; pathAttachmentParam\".\nThat was my fault, though, because I was providing zero for the parameter value, which is probably the <i>normalised</i> curve start point parameter.\nWhen providing the <i>raw</i> parameter value returned by curve.get_EndParameter( 0 ) instead, all works fine.</p>\n<p>Here is a rather unrealistic sample spline beam that I used for testing:</p>\n<center>\n<img alt=\"A spline beam supported by multiple columns\" src=\"img/supporting_columns_spline_beam.png\" width=\"200\"/>\n</center>\n<p>The algorithm reports the following supporting columns for the spline beam:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected spline beam\" src=\"img/supporting_columns_spline_beam_msg.png\" width=\"400\"/>\n</center>\n<p>All is well.</p>\n<a name=\"10\"></a>\n<h4>Conclusion and Source Code</h4>\n<p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Columns Supporting a Selected Beam",
    "local_header_href": "#columns-supporting-a-selected-beam",
    "chunk_text": "<h4>Columns Supporting a Selected Beam</h4><p>Here is a view of a simple sample model:</p><center>\n<img alt=\"Beam supported by two columns\" src=\"img/supporting_columns.png\" width=\"200\"/>\n</center><p>The task at hand is to pick the indicated beam and report the columns supporting it:</p><center>\n<img alt=\"Reporting the columns supporting the selected beam\" src=\"img/supporting_columns_msg.png\" width=\"400\"/>\n</center><p>Simple, ain't it?</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Solid and Element Intersection",
    "local_header_href": "#solid-and-element-intersection",
    "chunk_text": "<h4>Solid and Element Intersection</h4><p>Initially, I made some further attempts and experiments using the ElementIntersectsSolidFilter and ElementIntersectsElementFilter functionality.\n\n<p>The sample provided includes code exercising these tests and also the original bounding box implementation.\nIt is enclosed in 'if' statements checking the setting of the following Boolean variables:\n\n<pre class=\"code\">\n  bool useBoundingBox = false;\n  bool useSolid = false;\n  bool useElement = false;\n</pre>\n<p>That enables them to be switched on and off interactively in the debugger, if the need arises.\n\n<p>Unfortunately, as it turns out, they both do not work.\n\n<p>The beam solid is not quite big enough to intersect the columns, because the beam is cut back so that it does not actually intersect them.\n\n<p>The same problem also prevents use the element intersection filter.\n\n<p>It would be great if there was a possibility to grow the solid just slightly, e.g. offset all its faces outwards by an inch or two or define a tolerance before executing the intersection check, like for the bounding box.\nUnfortunately, growing or shrinking an arbitrary solid is much harder than a bounding box and therefore not implemented.\n\n\n<a name=\"4\"></a>\n<h4>Bounding Box Filter Tolerance</h4>\n<p>The BoundingBoxIsInsideFilter can be instantiated with an optional double tolerance value that allows control over the match criteria by using the given tolerance in the geometry comparison.\n\n<p>By default, the tolerance is set to zero.\nIf the tolerance is positive, the iterated element outline may extend the tolerance distance outside of the given outline in each coordinate to be a match.\nIf the tolerance is negative, the iterated element outline must lie at least the tolerance distance inside the given outline in each coordinate to be a match.\n\n<p>This is exactly what I would need here for the solid and element intersection filters as well.\nUnfortunately, as said, such a tolerance is not supported by the solid or element intersection filters.\n\n\n<a name=\"5\"></a>\n<h4>Moving the Beam Downwards in a Temporary Transaction</h4>\n<p>Lacking the tolerance option, I thought that maybe it would help to move the beam down a bit, and that it would intersect the supporting columns then.\nUnfortunately, that does not help either.\n\n<p>The problem is not only that the bottom face of the beam solid may be located above the end of the supporting columns, but also that the ends of the beam are cut back to avoid intersecting the columns, so their solids do not intersect even when the beam is moved slightly downwards.\n\n<p>This temporary movement forces a switch from read-only to manual transaction mode, of course, even though the model is not actually modify in any way in the end.\n\n<p>To make sure that the movement really is executed and the model updated before checking for an intersection, I followed the advice given by Arnošt Löbel on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\nenhancing the temporary transaction trick</a> and\n\nencapsulated the whole operation in a transaction group.\nThe group is rolled rolled back at the end, but, before doing so, the encapsulated temporary transaction around the movement of the beam can be committed and the updated geometry evaluated.\n\n<p>By the way, these changes temporarily caused an error saying \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\"\nThis was probably due to accessing the list of elements generated within the temporary transaction after the transaction group is rolled back.\nI handled that problem by storing the element ids instead of the live elements themselves inside the transaction, and then opening the elements via their id after rolling back the changes.\n\n<p>As said, the temporary downward translation still did not produce any intersections.</p>\n<p>Time for another idea.\n\n\n<a name=\"6\"></a>\n<h4>GetGeneratingElementIds</h4>\n<p>A colleague suggested that if the beam is cut back by the columns, you can iterate over the beam geometry faces and call the Element GetGeneratingElementIds method on each one, which might return the column element ids.\nIn this example, you might also get faces generated by joins with other beams.\n\n<p>I tried this, encapsulating the code in the section if( useGeneratingIds ).\nUnfortunately, all the generating ids belong to the structural framing or floors categories, so that does not help to determine the columns either.\nNo columns at all are returned by this method.\n\n\n<a name=\"7\"></a>\n<h4>Cylinder Along Location Line Offset Downwards</h4>\n<p>I then realised that I could create a much simpler independent solid shape to intersect the columns by extruding a cylinder along the beam location line, offset downwards to just below the bottom face of the beam.\nIt might require extending a little at each end.\nAll supporting columns should be intersected by it.\n\n<p>I can use code similar to the sample presented to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">\nfind 3D elements by intersection</a>.\n\n<p>Yay!\nThis works!\n\n\n<a name=\"8\"></a>\n<h4>Find References via Ray Casting</h4>\n<p>A similar approach as the solid intersection with an offset cylinder could obviously also be implemented using the ray casting functionality provided by the FindReferencesByDirection and FindReferencesWithContextByDirection methods and the ReferenceIntersector wrapper class.</p>\n<p>I did not implement any sample code demonstrating this, because I wanted to generalise the straight beam cylinder solution to a more general arbitrary curve case.</p>\n<a name=\"9\"></a>\n<h4>Sweep Along Location Curve Offset Downwards</h4>\n<p>Once I had the working solution using a cylinder defined by the straight beam location line offset downwards, I realised that it might be nice to use more generic sweep along curve functionality instead.\n<!-- of restricting the use to straight beams and an extruded cylinder. -->\nAfter all, the beam location curve might not be straight, and a non-linear location curve can quite simply be used to generate a non-linear solid using the CreateSweptGeometry method instead of CreateExtrusionGeometry.\n\n<p>My first attempt caused the CreateSweptGeometry method to throw an exception saying that \"The given attachment point don't lie in the plane of the Curve Loop. Parameter name: pathAttachmentCrvIdx &amp; pathAttachmentParam\".\nThat was my fault, though, because I was providing zero for the parameter value, which is probably the <i>normalised</i> curve start point parameter.\nWhen providing the <i>raw</i> parameter value returned by curve.get_EndParameter( 0 ) instead, all works fine.</p>\n<p>Here is a rather unrealistic sample spline beam that I used for testing:</p>\n<center>\n<img alt=\"A spline beam supported by multiple columns\" src=\"img/supporting_columns_spline_beam.png\" width=\"200\"/>\n</center>\n<p>The algorithm reports the following supporting columns for the spline beam:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected spline beam\" src=\"img/supporting_columns_spline_beam_msg.png\" width=\"400\"/>\n</center>\n<p>All is well.</p>\n<a name=\"10\"></a>\n<h4>Conclusion and Source Code</h4>\n<p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Bounding Box Filter Tolerance",
    "local_header_href": "#bounding-box-filter-tolerance",
    "chunk_text": "<h4>Bounding Box Filter Tolerance</h4><p>The BoundingBoxIsInsideFilter can be instantiated with an optional double tolerance value that allows control over the match criteria by using the given tolerance in the geometry comparison.\n\n<p>By default, the tolerance is set to zero.\nIf the tolerance is positive, the iterated element outline may extend the tolerance distance outside of the given outline in each coordinate to be a match.\nIf the tolerance is negative, the iterated element outline must lie at least the tolerance distance inside the given outline in each coordinate to be a match.\n\n<p>This is exactly what I would need here for the solid and element intersection filters as well.\nUnfortunately, as said, such a tolerance is not supported by the solid or element intersection filters.\n\n\n<a name=\"5\"></a>\n<h4>Moving the Beam Downwards in a Temporary Transaction</h4>\n<p>Lacking the tolerance option, I thought that maybe it would help to move the beam down a bit, and that it would intersect the supporting columns then.\nUnfortunately, that does not help either.\n\n<p>The problem is not only that the bottom face of the beam solid may be located above the end of the supporting columns, but also that the ends of the beam are cut back to avoid intersecting the columns, so their solids do not intersect even when the beam is moved slightly downwards.\n\n<p>This temporary movement forces a switch from read-only to manual transaction mode, of course, even though the model is not actually modify in any way in the end.\n\n<p>To make sure that the movement really is executed and the model updated before checking for an intersection, I followed the advice given by Arnošt Löbel on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\nenhancing the temporary transaction trick</a> and\n\nencapsulated the whole operation in a transaction group.\nThe group is rolled rolled back at the end, but, before doing so, the encapsulated temporary transaction around the movement of the beam can be committed and the updated geometry evaluated.\n\n<p>By the way, these changes temporarily caused an error saying \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\"\nThis was probably due to accessing the list of elements generated within the temporary transaction after the transaction group is rolled back.\nI handled that problem by storing the element ids instead of the live elements themselves inside the transaction, and then opening the elements via their id after rolling back the changes.\n\n<p>As said, the temporary downward translation still did not produce any intersections.</p>\n<p>Time for another idea.\n\n\n<a name=\"6\"></a>\n<h4>GetGeneratingElementIds</h4>\n<p>A colleague suggested that if the beam is cut back by the columns, you can iterate over the beam geometry faces and call the Element GetGeneratingElementIds method on each one, which might return the column element ids.\nIn this example, you might also get faces generated by joins with other beams.\n\n<p>I tried this, encapsulating the code in the section if( useGeneratingIds ).\nUnfortunately, all the generating ids belong to the structural framing or floors categories, so that does not help to determine the columns either.\nNo columns at all are returned by this method.\n\n\n<a name=\"7\"></a>\n<h4>Cylinder Along Location Line Offset Downwards</h4>\n<p>I then realised that I could create a much simpler independent solid shape to intersect the columns by extruding a cylinder along the beam location line, offset downwards to just below the bottom face of the beam.\nIt might require extending a little at each end.\nAll supporting columns should be intersected by it.\n\n<p>I can use code similar to the sample presented to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">\nfind 3D elements by intersection</a>.\n\n<p>Yay!\nThis works!\n\n\n<a name=\"8\"></a>\n<h4>Find References via Ray Casting</h4>\n<p>A similar approach as the solid intersection with an offset cylinder could obviously also be implemented using the ray casting functionality provided by the FindReferencesByDirection and FindReferencesWithContextByDirection methods and the ReferenceIntersector wrapper class.</p>\n<p>I did not implement any sample code demonstrating this, because I wanted to generalise the straight beam cylinder solution to a more general arbitrary curve case.</p>\n<a name=\"9\"></a>\n<h4>Sweep Along Location Curve Offset Downwards</h4>\n<p>Once I had the working solution using a cylinder defined by the straight beam location line offset downwards, I realised that it might be nice to use more generic sweep along curve functionality instead.\n<!-- of restricting the use to straight beams and an extruded cylinder. -->\nAfter all, the beam location curve might not be straight, and a non-linear location curve can quite simply be used to generate a non-linear solid using the CreateSweptGeometry method instead of CreateExtrusionGeometry.\n\n<p>My first attempt caused the CreateSweptGeometry method to throw an exception saying that \"The given attachment point don't lie in the plane of the Curve Loop. Parameter name: pathAttachmentCrvIdx &amp; pathAttachmentParam\".\nThat was my fault, though, because I was providing zero for the parameter value, which is probably the <i>normalised</i> curve start point parameter.\nWhen providing the <i>raw</i> parameter value returned by curve.get_EndParameter( 0 ) instead, all works fine.</p>\n<p>Here is a rather unrealistic sample spline beam that I used for testing:</p>\n<center>\n<img alt=\"A spline beam supported by multiple columns\" src=\"img/supporting_columns_spline_beam.png\" width=\"200\"/>\n</center>\n<p>The algorithm reports the following supporting columns for the spline beam:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected spline beam\" src=\"img/supporting_columns_spline_beam_msg.png\" width=\"400\"/>\n</center>\n<p>All is well.</p>\n<a name=\"10\"></a>\n<h4>Conclusion and Source Code</h4>\n<p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Moving the Beam Downwards in a Temporary Transaction",
    "local_header_href": "#moving-the-beam-downwards-in-a-temporary-transaction",
    "chunk_text": "<h4>Moving the Beam Downwards in a Temporary Transaction</h4><p>Lacking the tolerance option, I thought that maybe it would help to move the beam down a bit, and that it would intersect the supporting columns then.\nUnfortunately, that does not help either.\n\n<p>The problem is not only that the bottom face of the beam solid may be located above the end of the supporting columns, but also that the ends of the beam are cut back to avoid intersecting the columns, so their solids do not intersect even when the beam is moved slightly downwards.\n\n<p>This temporary movement forces a switch from read-only to manual transaction mode, of course, even though the model is not actually modify in any way in the end.\n\n<p>To make sure that the movement really is executed and the model updated before checking for an intersection, I followed the advice given by Arnošt Löbel on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\nenhancing the temporary transaction trick</a> and\n\nencapsulated the whole operation in a transaction group.\nThe group is rolled rolled back at the end, but, before doing so, the encapsulated temporary transaction around the movement of the beam can be committed and the updated geometry evaluated.\n\n<p>By the way, these changes temporarily caused an error saying \"Attempted to read or write protected memory. This is often an indication that other memory is corrupt.\"\nThis was probably due to accessing the list of elements generated within the temporary transaction after the transaction group is rolled back.\nI handled that problem by storing the element ids instead of the live elements themselves inside the transaction, and then opening the elements via their id after rolling back the changes.\n\n<p>As said, the temporary downward translation still did not produce any intersections.</p>\n<p>Time for another idea.\n\n\n<a name=\"6\"></a>\n<h4>GetGeneratingElementIds</h4>\n<p>A colleague suggested that if the beam is cut back by the columns, you can iterate over the beam geometry faces and call the Element GetGeneratingElementIds method on each one, which might return the column element ids.\nIn this example, you might also get faces generated by joins with other beams.\n\n<p>I tried this, encapsulating the code in the section if( useGeneratingIds ).\nUnfortunately, all the generating ids belong to the structural framing or floors categories, so that does not help to determine the columns either.\nNo columns at all are returned by this method.\n\n\n<a name=\"7\"></a>\n<h4>Cylinder Along Location Line Offset Downwards</h4>\n<p>I then realised that I could create a much simpler independent solid shape to intersect the columns by extruding a cylinder along the beam location line, offset downwards to just below the bottom face of the beam.\nIt might require extending a little at each end.\nAll supporting columns should be intersected by it.\n\n<p>I can use code similar to the sample presented to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">\nfind 3D elements by intersection</a>.\n\n<p>Yay!\nThis works!\n\n\n<a name=\"8\"></a>\n<h4>Find References via Ray Casting</h4>\n<p>A similar approach as the solid intersection with an offset cylinder could obviously also be implemented using the ray casting functionality provided by the FindReferencesByDirection and FindReferencesWithContextByDirection methods and the ReferenceIntersector wrapper class.</p>\n<p>I did not implement any sample code demonstrating this, because I wanted to generalise the straight beam cylinder solution to a more general arbitrary curve case.</p>\n<a name=\"9\"></a>\n<h4>Sweep Along Location Curve Offset Downwards</h4>\n<p>Once I had the working solution using a cylinder defined by the straight beam location line offset downwards, I realised that it might be nice to use more generic sweep along curve functionality instead.\n<!-- of restricting the use to straight beams and an extruded cylinder. -->\nAfter all, the beam location curve might not be straight, and a non-linear location curve can quite simply be used to generate a non-linear solid using the CreateSweptGeometry method instead of CreateExtrusionGeometry.\n\n<p>My first attempt caused the CreateSweptGeometry method to throw an exception saying that \"The given attachment point don't lie in the plane of the Curve Loop. Parameter name: pathAttachmentCrvIdx &amp; pathAttachmentParam\".\nThat was my fault, though, because I was providing zero for the parameter value, which is probably the <i>normalised</i> curve start point parameter.\nWhen providing the <i>raw</i> parameter value returned by curve.get_EndParameter( 0 ) instead, all works fine.</p>\n<p>Here is a rather unrealistic sample spline beam that I used for testing:</p>\n<center>\n<img alt=\"A spline beam supported by multiple columns\" src=\"img/supporting_columns_spline_beam.png\" width=\"200\"/>\n</center>\n<p>The algorithm reports the following supporting columns for the spline beam:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected spline beam\" src=\"img/supporting_columns_spline_beam_msg.png\" width=\"400\"/>\n</center>\n<p>All is well.</p>\n<a name=\"10\"></a>\n<h4>Conclusion and Source Code</h4>\n<p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "GetGeneratingElementIds",
    "local_header_href": "#getgeneratingelementids",
    "chunk_text": "<h4>GetGeneratingElementIds</h4><p>A colleague suggested that if the beam is cut back by the columns, you can iterate over the beam geometry faces and call the Element GetGeneratingElementIds method on each one, which might return the column element ids.\nIn this example, you might also get faces generated by joins with other beams.\n\n<p>I tried this, encapsulating the code in the section if( useGeneratingIds ).\nUnfortunately, all the generating ids belong to the structural framing or floors categories, so that does not help to determine the columns either.\nNo columns at all are returned by this method.\n\n\n<a name=\"7\"></a>\n<h4>Cylinder Along Location Line Offset Downwards</h4>\n<p>I then realised that I could create a much simpler independent solid shape to intersect the columns by extruding a cylinder along the beam location line, offset downwards to just below the bottom face of the beam.\nIt might require extending a little at each end.\nAll supporting columns should be intersected by it.\n\n<p>I can use code similar to the sample presented to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">\nfind 3D elements by intersection</a>.\n\n<p>Yay!\nThis works!\n\n\n<a name=\"8\"></a>\n<h4>Find References via Ray Casting</h4>\n<p>A similar approach as the solid intersection with an offset cylinder could obviously also be implemented using the ray casting functionality provided by the FindReferencesByDirection and FindReferencesWithContextByDirection methods and the ReferenceIntersector wrapper class.</p>\n<p>I did not implement any sample code demonstrating this, because I wanted to generalise the straight beam cylinder solution to a more general arbitrary curve case.</p>\n<a name=\"9\"></a>\n<h4>Sweep Along Location Curve Offset Downwards</h4>\n<p>Once I had the working solution using a cylinder defined by the straight beam location line offset downwards, I realised that it might be nice to use more generic sweep along curve functionality instead.\n<!-- of restricting the use to straight beams and an extruded cylinder. -->\nAfter all, the beam location curve might not be straight, and a non-linear location curve can quite simply be used to generate a non-linear solid using the CreateSweptGeometry method instead of CreateExtrusionGeometry.\n\n<p>My first attempt caused the CreateSweptGeometry method to throw an exception saying that \"The given attachment point don't lie in the plane of the Curve Loop. Parameter name: pathAttachmentCrvIdx &amp; pathAttachmentParam\".\nThat was my fault, though, because I was providing zero for the parameter value, which is probably the <i>normalised</i> curve start point parameter.\nWhen providing the <i>raw</i> parameter value returned by curve.get_EndParameter( 0 ) instead, all works fine.</p>\n<p>Here is a rather unrealistic sample spline beam that I used for testing:</p>\n<center>\n<img alt=\"A spline beam supported by multiple columns\" src=\"img/supporting_columns_spline_beam.png\" width=\"200\"/>\n</center>\n<p>The algorithm reports the following supporting columns for the spline beam:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected spline beam\" src=\"img/supporting_columns_spline_beam_msg.png\" width=\"400\"/>\n</center>\n<p>All is well.</p>\n<a name=\"10\"></a>\n<h4>Conclusion and Source Code</h4>\n<p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Cylinder Along Location Line Offset Downwards",
    "local_header_href": "#cylinder-along-location-line-offset-downwards",
    "chunk_text": "<h4>Cylinder Along Location Line Offset Downwards</h4><p>I then realised that I could create a much simpler independent solid shape to intersect the columns by extruding a cylinder along the beam location line, offset downwards to just below the bottom face of the beam.\nIt might require extending a little at each end.\nAll supporting columns should be intersected by it.\n\n<p>I can use code similar to the sample presented to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">\nfind 3D elements by intersection</a>.\n\n<p>Yay!\nThis works!\n\n\n<a name=\"8\"></a>\n<h4>Find References via Ray Casting</h4>\n<p>A similar approach as the solid intersection with an offset cylinder could obviously also be implemented using the ray casting functionality provided by the FindReferencesByDirection and FindReferencesWithContextByDirection methods and the ReferenceIntersector wrapper class.</p>\n<p>I did not implement any sample code demonstrating this, because I wanted to generalise the straight beam cylinder solution to a more general arbitrary curve case.</p>\n<a name=\"9\"></a>\n<h4>Sweep Along Location Curve Offset Downwards</h4>\n<p>Once I had the working solution using a cylinder defined by the straight beam location line offset downwards, I realised that it might be nice to use more generic sweep along curve functionality instead.\n<!-- of restricting the use to straight beams and an extruded cylinder. -->\nAfter all, the beam location curve might not be straight, and a non-linear location curve can quite simply be used to generate a non-linear solid using the CreateSweptGeometry method instead of CreateExtrusionGeometry.\n\n<p>My first attempt caused the CreateSweptGeometry method to throw an exception saying that \"The given attachment point don't lie in the plane of the Curve Loop. Parameter name: pathAttachmentCrvIdx &amp; pathAttachmentParam\".\nThat was my fault, though, because I was providing zero for the parameter value, which is probably the <i>normalised</i> curve start point parameter.\nWhen providing the <i>raw</i> parameter value returned by curve.get_EndParameter( 0 ) instead, all works fine.</p>\n<p>Here is a rather unrealistic sample spline beam that I used for testing:</p>\n<center>\n<img alt=\"A spline beam supported by multiple columns\" src=\"img/supporting_columns_spline_beam.png\" width=\"200\"/>\n</center>\n<p>The algorithm reports the following supporting columns for the spline beam:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected spline beam\" src=\"img/supporting_columns_spline_beam_msg.png\" width=\"400\"/>\n</center>\n<p>All is well.</p>\n<a name=\"10\"></a>\n<h4>Conclusion and Source Code</h4>\n<p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Find References via Ray Casting",
    "local_header_href": "#find-references-via-ray-casting",
    "chunk_text": "<h4>Find References via Ray Casting</h4><p>A similar approach as the solid intersection with an offset cylinder could obviously also be implemented using the ray casting functionality provided by the FindReferencesByDirection and FindReferencesWithContextByDirection methods and the ReferenceIntersector wrapper class.</p><p>I did not implement any sample code demonstrating this, because I wanted to generalise the straight beam cylinder solution to a more general arbitrary curve case.</p><a name=\"9\"></a>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Sweep Along Location Curve Offset Downwards",
    "local_header_href": "#sweep-along-location-curve-offset-downwards",
    "chunk_text": "<h4>Sweep Along Location Curve Offset Downwards</h4><p>Once I had the working solution using a cylinder defined by the straight beam location line offset downwards, I realised that it might be nice to use more generic sweep along curve functionality instead.\n<!-- of restricting the use to straight beams and an extruded cylinder. -->\nAfter all, the beam location curve might not be straight, and a non-linear location curve can quite simply be used to generate a non-linear solid using the CreateSweptGeometry method instead of CreateExtrusionGeometry.\n\n<p>My first attempt caused the CreateSweptGeometry method to throw an exception saying that \"The given attachment point don't lie in the plane of the Curve Loop. Parameter name: pathAttachmentCrvIdx &amp; pathAttachmentParam\".\nThat was my fault, though, because I was providing zero for the parameter value, which is probably the <i>normalised</i> curve start point parameter.\nWhen providing the <i>raw</i> parameter value returned by curve.get_EndParameter( 0 ) instead, all works fine.</p>\n<p>Here is a rather unrealistic sample spline beam that I used for testing:</p>\n<center>\n<img alt=\"A spline beam supported by multiple columns\" src=\"img/supporting_columns_spline_beam.png\" width=\"200\"/>\n</center>\n<p>The algorithm reports the following supporting columns for the spline beam:</p>\n<center>\n<img alt=\"Reporting the columns supporting the selected spline beam\" src=\"img/supporting_columns_spline_beam_msg.png\" width=\"400\"/>\n</center>\n<p>All is well.</p>\n<a name=\"10\"></a>\n<h4>Conclusion and Source Code</h4>\n<p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p></p>"
  },
  {
    "original_filename": "0915_2014_supporting_columns",
    "header_text": "Conclusion and Source Code",
    "local_header_href": "#conclusion-and-source-code",
    "chunk_text": "<h4>Conclusion and Source Code</h4><p>Here is the complete source code of this command, including the test branches that are disabled by default.\nAs said, they can be enabled and tested by modifying the Boolean switches interactively in the debugger.\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 0.1e-9;\n \n  <span class=\"blue\">double</span> SignedDistanceTo( <span class=\"teal\">Plane</span> plane, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"teal\">XYZ</span> v = plane.Normal;\n    <span class=\"blue\">return</span> v.DotProduct( p )\n      - v.DotProduct( plane.Origin );\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">BeamPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; e.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">Element</span> beam = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">BeamPickFilter</span>(),\n        <span class=\"maroon\">\"Please select a beam\"</span> );\n \n      beam = doc.GetElement( r );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; columnIds = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Optionally switch between different tests</span>\n    <span class=\"green\">// by modifying these values in the debugger</span>\n \n    <span class=\"blue\">bool</span> useBoundingBox = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useSolid = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useElement = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useGeneratingIds = <span class=\"blue\">false</span>;\n    <span class=\"blue\">bool</span> useLocation = <span class=\"blue\">true</span>;\n \n<span class=\"blue\">    #region</span> Obsolete previous attempts\n    <span class=\"blue\">if</span>( useBoundingBox )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> box = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min, box.Max );\n \n      <span class=\"teal\">ElementFilter</span> bbfilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>(\n        outline, 0.1 );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( bbfilter );\n    }\n \n    <span class=\"blue\">if</span>( useSolid )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      <span class=\"teal\">FilteredElementCollector</span> columns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter );\n    }\n \n    <span class=\"blue\">if</span>( useElement )\n    {\n      <span class=\"green\">// Initially, no columns are found to </span>\n      <span class=\"green\">// intersect the beam. Maybe it will help to</span>\n      <span class=\"green\">// move the beam down a bit?</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> txg = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n      {\n        txg.Start( <span class=\"maroon\">\"Find Columns Intersecting Beam\"</span> );\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Temporarily Move Beam Down a Little\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.MoveElement(\n            doc, beam.Id, -0.1 * <span class=\"teal\">XYZ</span>.BasisZ );\n \n          tx.Commit();\n        }\n \n        <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n          = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( beam );\n \n        <span class=\"teal\">FilteredElementCollector</span> columns\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n            .WhereElementIsNotElementType()\n            .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n            .WherePasses( beamIntersectFilter );\n \n        columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n          columns.ToElementIds() );\n \n        <span class=\"green\">// We do not commit the transaction group, </span>\n        <span class=\"green\">// because no modifications should be saved.</span>\n        <span class=\"green\">// The transaction group is only created and </span>\n        <span class=\"green\">// started to encapsulate the transactions </span>\n        <span class=\"green\">// required by the IsolateElementTemporary </span>\n        <span class=\"green\">// method. Since the transaction group is not </span>\n        <span class=\"green\">// committed, the changes are automatically </span>\n        <span class=\"green\">// discarded.</span>\n \n        <span class=\"green\">//txg.Commit();</span>\n      }\n    }\n \n    <span class=\"blue\">if</span>( useGeneratingIds )\n    {\n      <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n      <span class=\"teal\">GeometryElement</span> geo = beam.get_Geometry( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n              = beam.GetGeneratingElementIds( f );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n            {\n              <span class=\"teal\">Element</span> e = doc.GetElement( id );\n              <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n                &amp;&amp; e.Category.Id.IntegerValue.Equals(\n                  (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns ) )\n              {\n                columnIds.Add( id );\n              }\n            }\n          }\n        }\n      }\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Obsolete previous attempts</span>\n \n    <span class=\"blue\">if</span>( useLocation )\n    {\n      <span class=\"green\">// Determine beam location curve for </span>\n      <span class=\"green\">// extrusion direction and length</span>\n \n      <span class=\"teal\">LocationCurve</span> lc = beam.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n      <span class=\"teal\">Curve</span> curve = lc.Curve;\n \n      <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// Handle generic curve parameters.</span>\n      <span class=\"green\">// See below for simplified linear case.</span>\n \n      <span class=\"teal\">XYZ</span> p = curve.get_EndPoint( 0 );\n      <span class=\"blue\">double</span> param = curve.get_EndParameter( 0 );\n      <span class=\"teal\">Transform</span> transform = curve.ComputeDerivatives( param, <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( transform.Origin ),\n        <span class=\"maroon\">\"expected derivative origin to equal evaluation curve point\"</span> );\n      <span class=\"teal\">XYZ</span> tangent = transform.BasisX;\n \n      <span class=\"green\">// Use bounding box to determine elevation of</span>\n      <span class=\"green\">// bottom of beam and how far downwards to </span>\n      <span class=\"green\">// offset location line -- one inch below </span>\n      <span class=\"green\">// beam bottom.</span>\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = beam.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( .001 &gt; bb.Min.Z - bb.Max.Z,\n        <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n      <span class=\"blue\">double</span> inch = 1.0 / 12.0;\n      <span class=\"blue\">double</span> beamBottom = bb.Min.Z;\n \n      <span class=\"teal\">XYZ</span> arcCenter = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y,\n        beamBottom - inch );\n \n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( tangent, arcCenter );\n \n      <span class=\"teal\">CurveLoop</span> profileLoop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n      Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n        = app.Create;\n \n      <span class=\"teal\">Arc</span> arc1 = creapp.NewArc(\n        plane, inch, 0, <span class=\"teal\">Math</span>.PI );\n \n      <span class=\"teal\">Arc</span> arc2 = creapp.NewArc(\n        plane, inch, <span class=\"teal\">Math</span>.PI, 2 * <span class=\"teal\">Math</span>.PI );\n \n      profileLoop.Append( arc1 );\n      profileLoop.Append( arc2 );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n      loops.Add( profileLoop );\n \n      <span class=\"green\">// Switch this on to handle a straight beam as </span>\n      <span class=\"green\">// a separate simplified case using </span>\n      <span class=\"green\">// CreateExtrusionGeometry instead of the </span>\n      <span class=\"green\">// generic CreateSweptGeometry solution.</span>\n \n      <span class=\"blue\">bool</span> checkForLine = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( checkForLine &amp;&amp; curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n      {\n        <span class=\"teal\">XYZ</span> q = curve.get_EndPoint( 1 );\n        <span class=\"teal\">XYZ</span> v = q - p;\n \n        <span class=\"teal\">Debug</span>.Assert( 0.01 &gt; v.Z,\n          <span class=\"maroon\">\"expected horizontal beam\"</span> );\n \n        <span class=\"teal\">Debug</span>.Assert( v.IsAlmostEqualTo( tangent ),\n          <span class=\"maroon\">\"expected straight beam vector to equal start tangent\"</span> );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateExtrusionGeometry( loops, v, v.GetLength() );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"green\">// Offset location curve downward </span>\n        <span class=\"green\">// one inch  below beam bottom face</span>\n \n        <span class=\"teal\">XYZ</span> offset = arcCenter - p;\n \n        transform = <span class=\"teal\">Transform</span>.get_Translation(\n          offset );\n \n        <span class=\"teal\">CurveLoop</span> sweepPath = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n        sweepPath.Append( curve.get_Transformed(\n          transform ) );\n \n        solid = <span class=\"teal\">GeometryCreationUtilities</span>\n          .CreateSweptGeometry(\n            sweepPath, 0, param, loops );\n      }\n \n      <span class=\"teal\">ElementFilter</span> beamIntersectFilter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid );\n \n      columnIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .WhereElementIsNotElementType()\n          .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns )\n          .WherePasses( beamIntersectFilter )\n          .ToElementIds() );\n    }\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == columnIds)\n      ? 0\n      : columnIds.Count&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">string</span> s1 = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Selected beam is supported by {0} column{1}{2}\"</span>,\n      n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n    <span class=\"blue\">string</span> s2 = <span class=\"maroon\">\"&lt;None&gt;\"</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      uidoc.Selection.Elements.Clear();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> columnIds )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        uidoc.Selection.Elements.Add( e );\n      }\n \n      s2 = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        columnIds.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n          id =&gt; id.IntegerValue.ToString() ) );\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( s1, s2 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>For your convenience, here is\n\n<a href=\"zip/GetBeamColumns06.zip\">GetBeamColumns06.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the GetBeamColumns external command.\n\n<p>I hope you find this both interesting and useful as a basis for your own variants.\n</p></p></p>"
  }
]