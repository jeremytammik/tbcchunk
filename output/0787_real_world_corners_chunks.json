[
  {
    "original_filename": "0787_real_world_corners",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0787_real_world_corners",
    "header_text": "Real-World Concrete Corner Coordinates",
    "local_header_href": "#real-world-concrete-corner-coordinates",
    "chunk_text": "<h3>Real-World Concrete Corner Coordinates</h3><p>I mentioned that I worked together with Paul Hellawell of \n\n<a href=\"http://www.ghd.com\">\nGHD</a> \n\non a full-blown end-user-capable little application for the automatic creation of setout points for on-site location and construction of structural elements at the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-devlab.html\">\nMelbourne DevLab</a>.\n\n<p>Paul provided a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-devlab.html#3\">\ndescription</a> of\n\nthe task and the initial idea for an implementation approach.\n\n<p>We got the application to a useful working state in the two days during the DevLab, and Paul has provided it to his designers to use in real projects ever since.\n\n<p>Before we look at the full-fledged application, let's explore the core API functionality required: \n\n<ul>\n<li><a href=\"#2\">Filtering for structural concrete elements</a>.\n<li>Retrieving their corners, i.e. geometry traversal to <a href=\"#3\">retrieve unique vertices</a>.\n<li><a href=\"#4\">Converting from Revit model to real-world coordinates</a>.\n</li></li></li></ul>\n<p>Once this is all in place, we can explain how to use the core functionality to implement the real-world end-user application.\n\n\n<a name=\"2\"></a>\n<h4>Filtering for Structural Concrete Elements</h4>\n<p>We already looked at \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/retrieve-structural-elements.html\">\nretrieving structural elements</a>.\n\n<p>Just like there, we check for certain specific classes like Wall and Floor, and also for generic family instances with categories from our list of interest, including structural columns, framing, foundation, floors and ramps.\n\n<p>In this case, we are only interested in concrete elements, so we apply two structural material type filters as well, for concrete and precast concrete.\n\n<p>This is the method we ended up with to suit our purposes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve all structural elements that we are </span>\n<span class=\"gray\">///</span><span class=\"green\"> interested in using to define setout points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> We are looking at concrete for the moment.</span>\n<span class=\"gray\">///</span><span class=\"green\"> This includes: columns, framing, floors, </span>\n<span class=\"gray\">///</span><span class=\"green\"> foundations, ramps, walls. </span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">FilteredElementCollector</span> GetStructuralElements(\n  <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"green\">// What categories of family instances</span>\n  <span class=\"green\">// are we interested in?</span>\n \n  <span class=\"teal\">BuiltInCategory</span>[] bics = <span class=\"blue\">new</span> <span class=\"teal\">BuiltInCategory</span>[] {\n    <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns,\n    <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming,\n    <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFoundation,\n    <span class=\"teal\">BuiltInCategory</span>.OST_Floors,\n    <span class=\"teal\">BuiltInCategory</span>.OST_Ramps\n  };\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementFilter</span>&gt; a\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt;( bics.Length );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInCategory</span> bic <span class=\"blue\">in</span> bics )\n  {\n    a.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( bic ) );\n  }\n \n  <span class=\"teal\">LogicalOrFilter</span> categoryFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( a );\n \n  <span class=\"green\">// Filter only for structural family </span>\n  <span class=\"green\">// instances using concrete or precast </span>\n  <span class=\"green\">// concrete structural material:</span>\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt; b\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt;( 2 );\n \n  b.Add( <span class=\"blue\">new</span> <span class=\"teal\">StructuralMaterialTypeFilter</span>( \n    <span class=\"teal\">StructuralMaterialType</span>.Concrete ) );\n \n  b.Add( <span class=\"blue\">new</span> <span class=\"teal\">StructuralMaterialTypeFilter</span>( \n    <span class=\"teal\">StructuralMaterialType</span>.PrecastConcrete ) );\n \n  <span class=\"teal\">LogicalOrFilter</span> structuralMaterialFilter \n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( b );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt; c\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt;( 3 );\n \n  c.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>( \n    <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) ) );\n \n  c.Add( structuralMaterialFilter );\n  c.Add( categoryFilter );\n \n  <span class=\"teal\">LogicalAndFilter</span> familyInstanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalAndFilter</span>( c );\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementFilter</span>&gt; d\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt;( 6 );\n \n  d.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>(\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ) ) );\n \n  d.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>(\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">Floor</span> ) ) );\n \n  <span class=\"green\">//d.Add( new ElementClassFilter(</span>\n  <span class=\"green\">//  typeof( ContFooting ) ) );</span>\n \n<span class=\"blue\">#if</span> NEED_LOADS\n<span class=\"gray\">  d.Add( new ElementClassFilter(</span>\n<span class=\"gray\">    typeof( PointLoad ) ) );</span>\n \n<span class=\"gray\">  d.Add( new ElementClassFilter(</span>\n<span class=\"gray\">    typeof( LineLoad ) ) );</span>\n \n<span class=\"gray\">  d.Add( new ElementClassFilter(</span>\n<span class=\"gray\">    typeof( AreaLoad ) ) );</span>\n<span class=\"blue\">#endif</span>\n \n  d.Add( familyInstanceFilter );\n \n  <span class=\"teal\">LogicalOrFilter</span> classFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( d );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .WherePasses( classFilter );\n \n  <span class=\"blue\">return</span> col;\n}\n</pre>\n<a name=\"3\"></a>\n<h4>Geometry Traversal to Retrieve Unique Vertices</h4>\n<p>Once the required elements have been retrieved, we analyse their geometry to determine all corners, i.e. geometry vertices.\n\n<p>This goes back to the second day of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-day-two.html\">\nMelbourne Revit API training</a>,\n\nwhere we looked at \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-day-two.html#2\">\nretrieving unique geometry vertices</a> from \n\na selected element.\n\n<p>This involves comparing XYZ points, i.e. \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/connector-orientation.html#2\">\nreal number equality testing</a>.\n\n<p>First of all, we need an equality comparer for points:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define equality for Revit XYZ points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> Very rough tolerance, as used by Revit itself.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">XyzEqualityComparer</span> : <span class=\"teal\">IEqualityComparer</span>&lt;<span class=\"teal\">XYZ</span>&gt;\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _sixteenthInchInFeet \n    = 1.0 / ( 16.0 * 12.0 );\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Equals( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">return</span> p.IsAlmostEqualTo( q, \n      _sixteenthInchInFeet );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetHashCode( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> PointString( p ).GetHashCode();\n  }\n}\n</pre>\n<p>With that in hand, we can retrieve all unique vertices of a given solid retrieved from the element geometry:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return all the \"corner\" vertices of a given solid.</span>\n<span class=\"gray\">///</span><span class=\"green\"> Note that a circle in Revit consists of two arcs</span>\n<span class=\"gray\">///</span><span class=\"green\"> and will return a \"corner\" at each of the two arc</span>\n<span class=\"gray\">///</span><span class=\"green\"> end points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>,<span class=\"blue\">int</span>&gt; GetCorners( <span class=\"teal\">Solid</span> solid )\n{\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners \n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt;( \n      <span class=\"blue\">new</span> <span class=\"teal\">XyzEqualityComparer</span>() );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> ea <span class=\"blue\">in</span> f.EdgeLoops )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> ea )\n      {\n        <span class=\"teal\">XYZ</span> p = e.AsCurveFollowingFace( f )\n          .get_EndPoint( 0 );\n \n        <span class=\"blue\">if</span>( !corners.ContainsKey( p ) )\n        {\n          corners[p] = 0;\n        }\n        ++corners[p];\n      }\n    }\n  }\n  <span class=\"blue\">return</span> corners;\n}\n</pre>\n<p>The solid is retrieved by traversing the element geometry and picking the first non-empty one found.\n\n<p>Special handling is required for family instances, of course, since they have an additional transformation that we have to take account of.\nThe family definition defines its own local coordinate system, and we need to transform the solid from that to the Revit model space.\n\n<p>This implementation processes all the cases we have run into so far correctly and elegantly:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the first non-empty solid found for </span>\n<span class=\"gray\">///</span><span class=\"green\"> the given element. In case the element is a </span>\n<span class=\"gray\">///</span><span class=\"green\"> family instance, it may have its own non-empty</span>\n<span class=\"gray\">///</span><span class=\"green\"> solid, in which case we use that. Otherwise we </span>\n<span class=\"gray\">///</span><span class=\"green\"> search the symbol geometry. If we use the </span>\n<span class=\"gray\">///</span><span class=\"green\"> symbol geometry, we have to keep track of the </span>\n<span class=\"gray\">///</span><span class=\"green\"> instance transform to map it to the actual</span>\n<span class=\"gray\">///</span><span class=\"green\"> instance project location.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n  <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.Identity;\n \n  <span class=\"green\">// Some columns have no solids, and we have to </span>\n  <span class=\"green\">// retrieve the geometry from the symbol; </span>\n  <span class=\"green\">// others do have solids on the instance itself </span>\n  <span class=\"green\">// and no contents in the instance geometry </span>\n  <span class=\"green\">// (e.g. in rst_basic_sample_project.rvt).</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n      &amp;&amp; 0 &lt; solid.Faces.Size )\n    {\n      <span class=\"blue\">break</span>;\n    }\n \n    inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n  {\n    geo = inst.GetSymbolGeometry();\n    t = inst.Transform;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"4\"></a>\n<h4>Transforming Revit Model Coordinates to the Real World</h4>\n<p>After the solid vertices have been retrieved in Revit model space, we convert them to real-world coordinates using the project location.\n\n<p>We initially tried to achieve this piecewise by fiddling with the base point offset and manually rotating to project north.\nThis was both complicated and returned incorrect results.\n\n<p>The correct solution is very simple and was already discussed a couple of times in the past:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/transformations.html\">Transformations</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/project-location.html\">Project location</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/get-transformed-family-instance-geometry.html\">Transformed family instance geometry</a>\n</li></li></li></ul>\n<p>This led us to implement the following GetProjectLocationTransform method:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the project location transform.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Transform</span> GetProjectLocationTransform( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"green\">// Retrieve the active project location position.</span>\n \n  <span class=\"teal\">ProjectPosition</span> projectPosition\n    = doc.ActiveProjectLocation.get_ProjectPosition(\n      <span class=\"teal\">XYZ</span>.Zero );\n \n  <span class=\"green\">// Create a translation vector for the offsets</span>\n \n  <span class=\"teal\">XYZ</span> translationVector = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n    projectPosition.EastWest,\n    projectPosition.NorthSouth,\n    projectPosition.Elevation );\n \n  <span class=\"teal\">Transform</span> translationTransform\n    = <span class=\"teal\">Transform</span>.get_Translation(\n      translationVector );\n \n  <span class=\"green\">// Create a rotation for the angle about true north</span>\n \n  <span class=\"teal\">Transform</span> rotationTransform \n    = <span class=\"teal\">Transform</span>.get_Rotation( <span class=\"teal\">XYZ</span>.Zero, \n      <span class=\"teal\">XYZ</span>.BasisZ, projectPosition.Angle );\n \n  <span class=\"green\">// Combine the transforms </span>\n \n  <span class=\"teal\">Transform</span> finalTransform\n    = translationTransform.Multiply(\n      rotationTransform );\n \n  <span class=\"blue\">return</span> finalTransform;\n}\n</pre>\n<p>Making use of the resulting transform later is trivial:\n\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> projectLocationTransform \n    = GetProjectLocationTransform( doc );\n \n  for each concrete corner point XYZ p:\n  {\n    <span class=\"green\">// Transform insertion point by applying</span>\n    <span class=\"green\">// project location transformation.</span>\n \n    <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n  }\n</pre>\n<p>Now I just need to find some more time to discuss how this can all be put together and wrapped into a useful real-world end-user application.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0787_real_world_corners",
    "header_text": "Filtering for Structural Concrete Elements",
    "local_header_href": "#filtering-for-structural-concrete-elements",
    "chunk_text": "<h4>Filtering for Structural Concrete Elements</h4><p>We already looked at \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/retrieve-structural-elements.html\">\nretrieving structural elements</a>.\n\n<p>Just like there, we check for certain specific classes like Wall and Floor, and also for generic family instances with categories from our list of interest, including structural columns, framing, foundation, floors and ramps.\n\n<p>In this case, we are only interested in concrete elements, so we apply two structural material type filters as well, for concrete and precast concrete.\n\n<p>This is the method we ended up with to suit our purposes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve all structural elements that we are </span>\n<span class=\"gray\">///</span><span class=\"green\"> interested in using to define setout points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> We are looking at concrete for the moment.</span>\n<span class=\"gray\">///</span><span class=\"green\"> This includes: columns, framing, floors, </span>\n<span class=\"gray\">///</span><span class=\"green\"> foundations, ramps, walls. </span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">FilteredElementCollector</span> GetStructuralElements(\n  <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"green\">// What categories of family instances</span>\n  <span class=\"green\">// are we interested in?</span>\n \n  <span class=\"teal\">BuiltInCategory</span>[] bics = <span class=\"blue\">new</span> <span class=\"teal\">BuiltInCategory</span>[] {\n    <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns,\n    <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming,\n    <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFoundation,\n    <span class=\"teal\">BuiltInCategory</span>.OST_Floors,\n    <span class=\"teal\">BuiltInCategory</span>.OST_Ramps\n  };\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementFilter</span>&gt; a\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt;( bics.Length );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInCategory</span> bic <span class=\"blue\">in</span> bics )\n  {\n    a.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( bic ) );\n  }\n \n  <span class=\"teal\">LogicalOrFilter</span> categoryFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( a );\n \n  <span class=\"green\">// Filter only for structural family </span>\n  <span class=\"green\">// instances using concrete or precast </span>\n  <span class=\"green\">// concrete structural material:</span>\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt; b\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt;( 2 );\n \n  b.Add( <span class=\"blue\">new</span> <span class=\"teal\">StructuralMaterialTypeFilter</span>( \n    <span class=\"teal\">StructuralMaterialType</span>.Concrete ) );\n \n  b.Add( <span class=\"blue\">new</span> <span class=\"teal\">StructuralMaterialTypeFilter</span>( \n    <span class=\"teal\">StructuralMaterialType</span>.PrecastConcrete ) );\n \n  <span class=\"teal\">LogicalOrFilter</span> structuralMaterialFilter \n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( b );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt; c\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt;( 3 );\n \n  c.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>( \n    <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) ) );\n \n  c.Add( structuralMaterialFilter );\n  c.Add( categoryFilter );\n \n  <span class=\"teal\">LogicalAndFilter</span> familyInstanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalAndFilter</span>( c );\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementFilter</span>&gt; d\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementFilter</span>&gt;( 6 );\n \n  d.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>(\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ) ) );\n \n  d.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>(\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">Floor</span> ) ) );\n \n  <span class=\"green\">//d.Add( new ElementClassFilter(</span>\n  <span class=\"green\">//  typeof( ContFooting ) ) );</span>\n \n<span class=\"blue\">#if</span> NEED_LOADS\n<span class=\"gray\">  d.Add( new ElementClassFilter(</span>\n<span class=\"gray\">    typeof( PointLoad ) ) );</span>\n \n<span class=\"gray\">  d.Add( new ElementClassFilter(</span>\n<span class=\"gray\">    typeof( LineLoad ) ) );</span>\n \n<span class=\"gray\">  d.Add( new ElementClassFilter(</span>\n<span class=\"gray\">    typeof( AreaLoad ) ) );</span>\n<span class=\"blue\">#endif</span>\n \n  d.Add( familyInstanceFilter );\n \n  <span class=\"teal\">LogicalOrFilter</span> classFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( d );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .WherePasses( classFilter );\n \n  <span class=\"blue\">return</span> col;\n}\n</pre>\n<a name=\"3\"></a>\n<h4>Geometry Traversal to Retrieve Unique Vertices</h4>\n<p>Once the required elements have been retrieved, we analyse their geometry to determine all corners, i.e. geometry vertices.\n\n<p>This goes back to the second day of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-day-two.html\">\nMelbourne Revit API training</a>,\n\nwhere we looked at \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-day-two.html#2\">\nretrieving unique geometry vertices</a> from \n\na selected element.\n\n<p>This involves comparing XYZ points, i.e. \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/connector-orientation.html#2\">\nreal number equality testing</a>.\n\n<p>First of all, we need an equality comparer for points:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define equality for Revit XYZ points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> Very rough tolerance, as used by Revit itself.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">XyzEqualityComparer</span> : <span class=\"teal\">IEqualityComparer</span>&lt;<span class=\"teal\">XYZ</span>&gt;\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _sixteenthInchInFeet \n    = 1.0 / ( 16.0 * 12.0 );\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Equals( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">return</span> p.IsAlmostEqualTo( q, \n      _sixteenthInchInFeet );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetHashCode( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> PointString( p ).GetHashCode();\n  }\n}\n</pre>\n<p>With that in hand, we can retrieve all unique vertices of a given solid retrieved from the element geometry:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return all the \"corner\" vertices of a given solid.</span>\n<span class=\"gray\">///</span><span class=\"green\"> Note that a circle in Revit consists of two arcs</span>\n<span class=\"gray\">///</span><span class=\"green\"> and will return a \"corner\" at each of the two arc</span>\n<span class=\"gray\">///</span><span class=\"green\"> end points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>,<span class=\"blue\">int</span>&gt; GetCorners( <span class=\"teal\">Solid</span> solid )\n{\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners \n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt;( \n      <span class=\"blue\">new</span> <span class=\"teal\">XyzEqualityComparer</span>() );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> ea <span class=\"blue\">in</span> f.EdgeLoops )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> ea )\n      {\n        <span class=\"teal\">XYZ</span> p = e.AsCurveFollowingFace( f )\n          .get_EndPoint( 0 );\n \n        <span class=\"blue\">if</span>( !corners.ContainsKey( p ) )\n        {\n          corners[p] = 0;\n        }\n        ++corners[p];\n      }\n    }\n  }\n  <span class=\"blue\">return</span> corners;\n}\n</pre>\n<p>The solid is retrieved by traversing the element geometry and picking the first non-empty one found.\n\n<p>Special handling is required for family instances, of course, since they have an additional transformation that we have to take account of.\nThe family definition defines its own local coordinate system, and we need to transform the solid from that to the Revit model space.\n\n<p>This implementation processes all the cases we have run into so far correctly and elegantly:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the first non-empty solid found for </span>\n<span class=\"gray\">///</span><span class=\"green\"> the given element. In case the element is a </span>\n<span class=\"gray\">///</span><span class=\"green\"> family instance, it may have its own non-empty</span>\n<span class=\"gray\">///</span><span class=\"green\"> solid, in which case we use that. Otherwise we </span>\n<span class=\"gray\">///</span><span class=\"green\"> search the symbol geometry. If we use the </span>\n<span class=\"gray\">///</span><span class=\"green\"> symbol geometry, we have to keep track of the </span>\n<span class=\"gray\">///</span><span class=\"green\"> instance transform to map it to the actual</span>\n<span class=\"gray\">///</span><span class=\"green\"> instance project location.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n  <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.Identity;\n \n  <span class=\"green\">// Some columns have no solids, and we have to </span>\n  <span class=\"green\">// retrieve the geometry from the symbol; </span>\n  <span class=\"green\">// others do have solids on the instance itself </span>\n  <span class=\"green\">// and no contents in the instance geometry </span>\n  <span class=\"green\">// (e.g. in rst_basic_sample_project.rvt).</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n      &amp;&amp; 0 &lt; solid.Faces.Size )\n    {\n      <span class=\"blue\">break</span>;\n    }\n \n    inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n  {\n    geo = inst.GetSymbolGeometry();\n    t = inst.Transform;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"4\"></a>\n<h4>Transforming Revit Model Coordinates to the Real World</h4>\n<p>After the solid vertices have been retrieved in Revit model space, we convert them to real-world coordinates using the project location.\n\n<p>We initially tried to achieve this piecewise by fiddling with the base point offset and manually rotating to project north.\nThis was both complicated and returned incorrect results.\n\n<p>The correct solution is very simple and was already discussed a couple of times in the past:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/transformations.html\">Transformations</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/project-location.html\">Project location</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/get-transformed-family-instance-geometry.html\">Transformed family instance geometry</a>\n</li></li></li></ul>\n<p>This led us to implement the following GetProjectLocationTransform method:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the project location transform.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Transform</span> GetProjectLocationTransform( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"green\">// Retrieve the active project location position.</span>\n \n  <span class=\"teal\">ProjectPosition</span> projectPosition\n    = doc.ActiveProjectLocation.get_ProjectPosition(\n      <span class=\"teal\">XYZ</span>.Zero );\n \n  <span class=\"green\">// Create a translation vector for the offsets</span>\n \n  <span class=\"teal\">XYZ</span> translationVector = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n    projectPosition.EastWest,\n    projectPosition.NorthSouth,\n    projectPosition.Elevation );\n \n  <span class=\"teal\">Transform</span> translationTransform\n    = <span class=\"teal\">Transform</span>.get_Translation(\n      translationVector );\n \n  <span class=\"green\">// Create a rotation for the angle about true north</span>\n \n  <span class=\"teal\">Transform</span> rotationTransform \n    = <span class=\"teal\">Transform</span>.get_Rotation( <span class=\"teal\">XYZ</span>.Zero, \n      <span class=\"teal\">XYZ</span>.BasisZ, projectPosition.Angle );\n \n  <span class=\"green\">// Combine the transforms </span>\n \n  <span class=\"teal\">Transform</span> finalTransform\n    = translationTransform.Multiply(\n      rotationTransform );\n \n  <span class=\"blue\">return</span> finalTransform;\n}\n</pre>\n<p>Making use of the resulting transform later is trivial:\n\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> projectLocationTransform \n    = GetProjectLocationTransform( doc );\n \n  for each concrete corner point XYZ p:\n  {\n    <span class=\"green\">// Transform insertion point by applying</span>\n    <span class=\"green\">// project location transformation.</span>\n \n    <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n  }\n</pre>\n<p>Now I just need to find some more time to discuss how this can all be put together and wrapped into a useful real-world end-user application.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0787_real_world_corners",
    "header_text": "Geometry Traversal to Retrieve Unique Vertices",
    "local_header_href": "#geometry-traversal-to-retrieve-unique-vertices",
    "chunk_text": "<h4>Geometry Traversal to Retrieve Unique Vertices</h4><p>Once the required elements have been retrieved, we analyse their geometry to determine all corners, i.e. geometry vertices.\n\n<p>This goes back to the second day of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-day-two.html\">\nMelbourne Revit API training</a>,\n\nwhere we looked at \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-day-two.html#2\">\nretrieving unique geometry vertices</a> from \n\na selected element.\n\n<p>This involves comparing XYZ points, i.e. \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/connector-orientation.html#2\">\nreal number equality testing</a>.\n\n<p>First of all, we need an equality comparer for points:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define equality for Revit XYZ points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> Very rough tolerance, as used by Revit itself.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">XyzEqualityComparer</span> : <span class=\"teal\">IEqualityComparer</span>&lt;<span class=\"teal\">XYZ</span>&gt;\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _sixteenthInchInFeet \n    = 1.0 / ( 16.0 * 12.0 );\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Equals( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">return</span> p.IsAlmostEqualTo( q, \n      _sixteenthInchInFeet );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetHashCode( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> PointString( p ).GetHashCode();\n  }\n}\n</pre>\n<p>With that in hand, we can retrieve all unique vertices of a given solid retrieved from the element geometry:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return all the \"corner\" vertices of a given solid.</span>\n<span class=\"gray\">///</span><span class=\"green\"> Note that a circle in Revit consists of two arcs</span>\n<span class=\"gray\">///</span><span class=\"green\"> and will return a \"corner\" at each of the two arc</span>\n<span class=\"gray\">///</span><span class=\"green\"> end points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>,<span class=\"blue\">int</span>&gt; GetCorners( <span class=\"teal\">Solid</span> solid )\n{\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners \n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt;( \n      <span class=\"blue\">new</span> <span class=\"teal\">XyzEqualityComparer</span>() );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> ea <span class=\"blue\">in</span> f.EdgeLoops )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> ea )\n      {\n        <span class=\"teal\">XYZ</span> p = e.AsCurveFollowingFace( f )\n          .get_EndPoint( 0 );\n \n        <span class=\"blue\">if</span>( !corners.ContainsKey( p ) )\n        {\n          corners[p] = 0;\n        }\n        ++corners[p];\n      }\n    }\n  }\n  <span class=\"blue\">return</span> corners;\n}\n</pre>\n<p>The solid is retrieved by traversing the element geometry and picking the first non-empty one found.\n\n<p>Special handling is required for family instances, of course, since they have an additional transformation that we have to take account of.\nThe family definition defines its own local coordinate system, and we need to transform the solid from that to the Revit model space.\n\n<p>This implementation processes all the cases we have run into so far correctly and elegantly:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the first non-empty solid found for </span>\n<span class=\"gray\">///</span><span class=\"green\"> the given element. In case the element is a </span>\n<span class=\"gray\">///</span><span class=\"green\"> family instance, it may have its own non-empty</span>\n<span class=\"gray\">///</span><span class=\"green\"> solid, in which case we use that. Otherwise we </span>\n<span class=\"gray\">///</span><span class=\"green\"> search the symbol geometry. If we use the </span>\n<span class=\"gray\">///</span><span class=\"green\"> symbol geometry, we have to keep track of the </span>\n<span class=\"gray\">///</span><span class=\"green\"> instance transform to map it to the actual</span>\n<span class=\"gray\">///</span><span class=\"green\"> instance project location.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n  <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.Identity;\n \n  <span class=\"green\">// Some columns have no solids, and we have to </span>\n  <span class=\"green\">// retrieve the geometry from the symbol; </span>\n  <span class=\"green\">// others do have solids on the instance itself </span>\n  <span class=\"green\">// and no contents in the instance geometry </span>\n  <span class=\"green\">// (e.g. in rst_basic_sample_project.rvt).</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n      &amp;&amp; 0 &lt; solid.Faces.Size )\n    {\n      <span class=\"blue\">break</span>;\n    }\n \n    inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n  {\n    geo = inst.GetSymbolGeometry();\n    t = inst.Transform;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"4\"></a>\n<h4>Transforming Revit Model Coordinates to the Real World</h4>\n<p>After the solid vertices have been retrieved in Revit model space, we convert them to real-world coordinates using the project location.\n\n<p>We initially tried to achieve this piecewise by fiddling with the base point offset and manually rotating to project north.\nThis was both complicated and returned incorrect results.\n\n<p>The correct solution is very simple and was already discussed a couple of times in the past:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/transformations.html\">Transformations</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/project-location.html\">Project location</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/get-transformed-family-instance-geometry.html\">Transformed family instance geometry</a>\n</li></li></li></ul>\n<p>This led us to implement the following GetProjectLocationTransform method:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the project location transform.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Transform</span> GetProjectLocationTransform( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"green\">// Retrieve the active project location position.</span>\n \n  <span class=\"teal\">ProjectPosition</span> projectPosition\n    = doc.ActiveProjectLocation.get_ProjectPosition(\n      <span class=\"teal\">XYZ</span>.Zero );\n \n  <span class=\"green\">// Create a translation vector for the offsets</span>\n \n  <span class=\"teal\">XYZ</span> translationVector = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n    projectPosition.EastWest,\n    projectPosition.NorthSouth,\n    projectPosition.Elevation );\n \n  <span class=\"teal\">Transform</span> translationTransform\n    = <span class=\"teal\">Transform</span>.get_Translation(\n      translationVector );\n \n  <span class=\"green\">// Create a rotation for the angle about true north</span>\n \n  <span class=\"teal\">Transform</span> rotationTransform \n    = <span class=\"teal\">Transform</span>.get_Rotation( <span class=\"teal\">XYZ</span>.Zero, \n      <span class=\"teal\">XYZ</span>.BasisZ, projectPosition.Angle );\n \n  <span class=\"green\">// Combine the transforms </span>\n \n  <span class=\"teal\">Transform</span> finalTransform\n    = translationTransform.Multiply(\n      rotationTransform );\n \n  <span class=\"blue\">return</span> finalTransform;\n}\n</pre>\n<p>Making use of the resulting transform later is trivial:\n\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> projectLocationTransform \n    = GetProjectLocationTransform( doc );\n \n  for each concrete corner point XYZ p:\n  {\n    <span class=\"green\">// Transform insertion point by applying</span>\n    <span class=\"green\">// project location transformation.</span>\n \n    <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n  }\n</pre>\n<p>Now I just need to find some more time to discuss how this can all be put together and wrapped into a useful real-world end-user application.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0787_real_world_corners",
    "header_text": "Transforming Revit Model Coordinates to the Real World",
    "local_header_href": "#transforming-revit-model-coordinates-to-the-real-world",
    "chunk_text": "<h4>Transforming Revit Model Coordinates to the Real World</h4><p>After the solid vertices have been retrieved in Revit model space, we convert them to real-world coordinates using the project location.\n\n<p>We initially tried to achieve this piecewise by fiddling with the base point offset and manually rotating to project north.\nThis was both complicated and returned incorrect results.\n\n<p>The correct solution is very simple and was already discussed a couple of times in the past:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/transformations.html\">Transformations</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/project-location.html\">Project location</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/get-transformed-family-instance-geometry.html\">Transformed family instance geometry</a>\n</li></li></li></ul>\n<p>This led us to implement the following GetProjectLocationTransform method:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the project location transform.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Transform</span> GetProjectLocationTransform( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"green\">// Retrieve the active project location position.</span>\n \n  <span class=\"teal\">ProjectPosition</span> projectPosition\n    = doc.ActiveProjectLocation.get_ProjectPosition(\n      <span class=\"teal\">XYZ</span>.Zero );\n \n  <span class=\"green\">// Create a translation vector for the offsets</span>\n \n  <span class=\"teal\">XYZ</span> translationVector = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n    projectPosition.EastWest,\n    projectPosition.NorthSouth,\n    projectPosition.Elevation );\n \n  <span class=\"teal\">Transform</span> translationTransform\n    = <span class=\"teal\">Transform</span>.get_Translation(\n      translationVector );\n \n  <span class=\"green\">// Create a rotation for the angle about true north</span>\n \n  <span class=\"teal\">Transform</span> rotationTransform \n    = <span class=\"teal\">Transform</span>.get_Rotation( <span class=\"teal\">XYZ</span>.Zero, \n      <span class=\"teal\">XYZ</span>.BasisZ, projectPosition.Angle );\n \n  <span class=\"green\">// Combine the transforms </span>\n \n  <span class=\"teal\">Transform</span> finalTransform\n    = translationTransform.Multiply(\n      rotationTransform );\n \n  <span class=\"blue\">return</span> finalTransform;\n}\n</pre>\n<p>Making use of the resulting transform later is trivial:\n\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> projectLocationTransform \n    = GetProjectLocationTransform( doc );\n \n  for each concrete corner point XYZ p:\n  {\n    <span class=\"green\">// Transform insertion point by applying</span>\n    <span class=\"green\">// project location transformation.</span>\n \n    <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n  }\n</pre>\n<p>Now I just need to find some more time to discuss how this can all be put together and wrapped into a useful real-world end-user application.\n</p></p></p></p></p></p>"
  }
]