[
  {
    "original_filename": "1073_nightingale_to_m3u",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1073_nightingale_to_m3u",
    "header_text": "Nightingale M3U and Denormalized Filename Characters",
    "local_header_href": "#nightingale-m3u-and-denormalized-filename-characters",
    "chunk_text": "<h3>Nightingale M3U and Denormalized Filename Characters</h3>"
  },
  {
    "original_filename": "1073_nightingale_to_m3u",
    "header_text": "Converting Nightingale Playlist to M3U and Handling Mac Denormalized Filename Characters",
    "local_header_href": "#converting-nightingale-playlist-to-m3u-and-handling-mac-denormalized-filename-characters",
    "chunk_text": "<h3>Converting Nightingale Playlist to M3U and Handling Mac Denormalized Filename Characters</h3><p>Here is a post addressing a Mac denormalized filename character issue, music players on Mac and Python file manipulation, so nothing to do with the Revit API.</p><p>It appears that Songbird is dead, Nightingale is its successor, and nothing much else is happening on that front, neither now nor ever.</p><p>I guess Nightingale will die a natural death too one of these days, but I am still using it so far anyway.</p><p>Just like Songbird, Nightingale does not provide any facility to export its playlists in M3U format, or any other way either, for that matter.</p><p>The only way that I am aware of to access the playlist data is to copy and paste it through the user interface.</p><p>That returns a list of (Artist, Album, Title) triples.</p><p>I presented a Python script to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#3\">\ngenerate M3U from Songbird playlist copy and paste</a> data,\n\nlater updating it to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/super-insane-mp3-and-songbird-playlist-exporter.html#6\">\nsupport FLAC as well as MP3</a>.</p><p>It works perfectly well for Nightingale also, completely unchanged.</p><p>However, it always had a problem on some filenames with simple non-ASCII characters that no amount of twiddling would fix.</p><p>I finally found an explanation for that in this thread discussing why\n\n<a href=\"http://stackoverflow.com/questions/14185114/pythons-glob-module-and-unix-find-command-dont-recognize-non-ascii\">\nPython's glob module and Unix' find command don't recognize non-ASCII</a>:\n\n\"Mac OS X uses denormalized characters always for filenames on HFS+. Use <code>\nunicodedata.normalize('NFD', pattern)</code> to denormalize the glob pattern.\"</p><p>I tried it out, and it does indeed fix the problem.</p><p>Here is my updated Python script to convert the (Artist, Album, Title) triples to valid local music track filenames to generate a valid M3U playlist:</p><pre class=\"prettyprint\">\n#!/usr/bin/env python\n#\n# songbird_to_m3u.py - nightingale playlist to m3u\n#\n# Convert the file information copied and pasted from\n# a songbird or nightingale playlist to an m3u playlist.\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# Artist, Album, Title --&gt;\n# /m/Artist/Album/[Track]*Title.flac\n# /m/Artist/Album/[Track]*Title.mp3\n#\n# cat nightingale_export.txt | songbird_to_m3u.py &gt; playlist.m3u\n#\nimport glob, os, sys, unicodedata\n\n# filenames should be in the system encoding:\n#fse = sys.getfilesystemencoding()\n\nnOk = 0\nnFailed = 0\n\nwhile True:\n  try: line = raw_input().decode(\"utf-8\")\n  except: break\n\n  #print '&gt;', line\n\n  a = line.strip().split( ', ' )\n\n  if 3 != len(a):\n\n    print '#', line, ' - not 3 elements'\n    sys.stderr.write( line + ' - not 3 elements\\n' )\n    nFailed += 1\n    continue\n\n  ok = False\n  p = u'/m/' + a[0] + u'/' + a[1] + u'/*' + a[2]\n\n  # Mac OS X uses denormalized characters always for\n  # filenames on HFS+. Use\n  #   unicodedata.normalize('NFD', pattern)\n  # to denormalize the glob pattern.\n  # http://stackoverflow.com/questions/14185114/pythons-glob-module-and-unix-find-command-dont-recognize-non-ascii\n\n  p = unicodedata.normalize('NFD', p)\n\n  a1 = glob.glob( p + '.flac' )\n  if 1 == len(a1):\n    print a1[0]\n    ok = True\n  else:\n    a2 = glob.glob( p + '.mp3' )\n    if 1 == len(a2):\n      print a2[0]\n      ok = True\n\n  if ok:\n    nOk += 1\n  else:\n    print '#', p, '?'\n    sys.stderr.write(\n      '\\n%s\\n%s\\nglob returned %d (flac) and %d (mp3)\\n\\n'\n      % (line, p, len(a1), len(a2)) )\n    nFailed += 1\n\nsys.stderr.write(\n  '%s files passed, %s failed.\\n'\n  % (nOk, nFailed) )\n</pre><p>Et voila!\nThat's all there is to it.</p>"
  }
]