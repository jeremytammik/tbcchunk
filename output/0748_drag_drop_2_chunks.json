[
  {
    "original_filename": "0748_drag_drop_2",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0748_drag_drop_2",
    "header_text": "Drag and Drop API",
    "local_header_href": "#drag-and-drop-api",
    "chunk_text": "<h3>Drag and Drop API</h3><p>We already looked at what can be done using\n\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/drag-and-drop-to-revit.html\">\ndrag and drop in Revit 2012</a>.\n\n<p>At that point, an external Windows application could be used to initiate a standard Revit drag and drop sequence, but we had no control over Revit's behaviour on receiving the dropped files.\n\n<p>This has changed in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html\">\nRevit 2013 API</a>,\n\nwhich provides a drag and drop API as part of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nadd-in integration</a> features\n\nand includes the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/new-revit-2013-sdk-samples.html#4\">\nUIAPI</a> sample\n\nin the Revit SDK to demonstrate its use, among several other new API features such as discipline dependent application availability, preview control, and a custom WPF options dialogue.\n\n<p>By the way, the UIAPI sample differs from many other SDK samples in a couple of points:\n\n<ul>\n<li>It is an external application, so you cannot use RvtSamples to load and run it. \nYou have to install it separately.\n<li>It is still rather undocumented in the Revit 2013 RP version of the SDK, in that it lacks the customary readme file and is not listed in SamplesReadMe.htm like the others.\n</li></li></ul>\n<p>To make up for that, here is a pretty detailed description of its drag and drop functionality, at least.\n\n\n<a name=\"1\"></a>\n<h4>UIAPI SDK Sample Drag and Drop</h4>\n<p>The UIAPI drag and drop command displays the following modeless dialogue:</p>\n<center>\n<img alt=\"UIAPI DragAndDrop form\" src=\"img/drag_drop_form.png\" width=\"400\"/>\n</center>\n<p>It presents a list of loaded furniture family symbols on the left and all furniture family files found by recursively searching the content library on the right.\n\n\n<a name=\"2\"></a>\n<h4>UIApplication DoDragDrop Method Overloads</h4>\n<p>The UIApplication now provides two overloads of the new static method DoDragDrop for interacting with drag and drop events:\n\n<ul>\n<li><a href=\"#3\">DoDragDrop( ICollection&lt;string&gt; )</a> to initiate a standard Revit drag and drop operation of a collection of file names on the Revit user interface. \n<li><a href=\"#5\">DoDragDrop( object, IDropHandler )</a> to initiate a drag and drop operation with a custom drop implementation. \n</li></li></ul>\n<p>This method and its same two overloads are also provided on the macro-specific ApplicationEntryPoint class, for Revit macro use only.\n\n\n<a name=\"3\"></a>\n<h4>Drag and Drop a List of Files</h4>\n<p>In the first overload, the method argument holds a list of paths and names of files to be dropped on the Revit user interface, which causes the following default behaviour:\n\n<ul>\n<li>Only one AutoCAD format or image file dragged onto Revit: a new import placement editor will be started to import the file.\n<li>More than one AutoCAD format or image files dragged onto Revit: a new import placement editor will be started only for the first AutoCAD format or image file.\n<li>Only one family file dragged onto Revit: the family will be loaded, and an editor will be started to place the family.\n<li>More than one family file dragged onto Revit: all the families will be loaded.\n<li>More than one family file including other format files dragged onto Revit: Revit will try to open all the files.\n<li>If a valid file or list of files is passed, Revit will do its best to use them appropriately. If any files are not usable, failure will be signalled to the interactive Revit user, but <b>no</b> exception is thrown and the add-in will not be notified.\n</li></li></li></li></li></li></ul>\n<p>Here again, this behaviour is built into Revit and cannot be modified.\n\n<p>The code initiating the drag and drop from the modeless dialogue is as simple as this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list box</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listBox1_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">FamilyListBoxMember</span> member \n        = (<span class=\"teal\">FamilyListBoxMember</span>) listBox1.SelectedItem;\n \n      <span class=\"green\">// Use standard Revit drag and drop behavior</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">String</span>&gt; data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">String</span>&gt;();\n      data.Add( member.FullPath );\n      <span class=\"teal\">UIApplication</span>.DoDragDrop( data );\n    }\n  }\n</pre>\n<p>In other words, dragging a file name from the list on the right onto Revit will trigger the same built-in default behaviour as dragging the same file from the Windows explorer.\n\n\n\n<a name=\"4\"></a>\n<h4>Yet another Caveat against Invoking Revit API Methods Modelessly</h4>\n<p>Note that both this method and the one discussed below call the static UIApplication DoDragDrop method from a modeless dialogue, i.e. outside a valid Revit API context, which is unusual for the Revit API.\n\n<!-- This is most likely going to be changed in the sample, as it is possible that this method will cause problems if used when there is another tool active. -->\n\nThis is most likely going to be changed in the sample, as it will almost certainly cause serious problems such as unexpected results, corrupted documents, crashes, etc. if utilised in a commercial application.\n\nA better approach would be to use the Idling or an external event to trigger the DragDrop activity at a later time.\n\n<!-- <p>Actually, on further testing, it turns out that calling DoDragDrop with a list of file paths is treated like another command which interrupts the current one, and it is OK to call this outside of an API context. The overload taking a handler crashes Revit when a tool is currently active, so you cannot use it outside a valid Revit API context. We are in the process of updating the sample to fix this issue. -->\n<p>The only safe option is to call DoDragDrop from an Idling or external event call-back, just like all other Revit API calls.\n\n<p>Actually, on further discussion, we realised that the situation is even worse: invoking the drag-and-drop method during both Idling and external events is never recommendable, because it is likely to cause\n\n<a href=\"http://en.wikipedia.org/wiki/Deadlock\">\ndeadlock</a>. \n\n<p>The problem is that the user interface is not expecting to be invoked during idling; the application is idling for the exact reason that there is no UI activity. \nIf UI operations are invoked in this situation, two things may happen:\n\n<ul>\n<li>The same message pump is re-entered with a new request, which cannot be processed, since the pump is still waiting for the idling event to be ended.\n<li>Another, secondary message pump is entered, which may eventually invoke another idling event, which may dead-lock the client application.\n</li></li></ul>\n<p>Unfortunately, this means that there really is no totally safe way to utilise this wonderful new API from a modeless dialogue.\nWe will obviously be taking a new look at this in future versions, but for now it is important to realise the risks of invoking the Revit UI during the Idling event.\n\n<!-- (Note: the idling reentrancy will be fixed in 2014 (or possibly in 2013 update), but the dead lock will always be possible; Revit UI should not be invoked during idling.) -->\n<p>Here are some ideas which may help relativate these worries:\n\n<ul>\n<li>The problem of dead-lock or re-entering idling will only be apparent if invoking Revit UI, for instance the interactive placement of a family instance\nIf the method only loads the family or does some other non-UI activity, it will be OK.\n\n<li>The tool works perfectly well if there is no other Revit tool active.    \nOf course, the best way to tell this is from Idling, which it seems cannot successfully call the call-back.\n\n<!-- \nWe have thus possibly found a valid use for the Application.IsQuiescent property.\nAlthough we do not really have a case for it, because one doesn't really need it during the Idling event (or any other event or external command, for that matter), and outside of the events it is not much more useful, since Revit cannot be called from a different thread anyway.\n\n...\n\nIf I could change one thing, I would remove the sentence in which is Application.IsQuiescent mentioned. \nI believe that method was implemented only because it existed in AutoCAD, except it has never meant the same thing like it means in AutoCAD. \nUsers should not use it, since there is no actually scenario in which it makes sense.\n-->\n</li></li></ul>\n<p>So once again: make sure that you test the scenario in which you plan to use this very carefully, and avoid all risks in a commercial implementation.\n\n\n<a name=\"5\"></a>\n<h4>Drag and Drop with a Custom Handler</h4>\n<p>The second overload is much more exciting, because it allows us to define our own drop behaviour inside Revit.\n\n<p>This can only be used to define behaviour within the context of the add-in's own UI, though.  \nFor example, it does not allow you to define new drag and drop behaviour for files which are not supported by the method above when dropped onto Revit from explorer, or from an unconnected application like Excel, AutoCAD, etc.  \nThe drag operation must be initiated from a point where it can call DoDragDrop to Revit to allow it to complete.\n\n<p>It requires us to set up a handler for the drop event, which is derived from the IDropHandler interface, requiring then implementation of one single method, Execute.\n\n<p>In this sample, the drop handler expects the element id of a family symbol to be passed in and simply calls the PromptForFamilyInstancePlacement method on the symbol.\n\n<p>You are obviously completely free to pass in any data you like when invoking the handler, and can choose to do something completely different with it inside Revit on receipt:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Custom handler for placement of loaded family types</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">LoadedFamilyDropHandler</span> : <span class=\"teal\">IDropHandler</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( \n      <span class=\"teal\">UIDocument</span> doc, \n      <span class=\"blue\">object</span> data )\n    {\n      <span class=\"teal\">ElementId</span> familySymbolId = (<span class=\"teal\">ElementId</span>) data;\n \n      <span class=\"teal\">FamilySymbol</span> symbol = doc.Document.GetElement( \n        familySymbolId ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n      <span class=\"blue\">if</span>( symbol != <span class=\"blue\">null</span> )\n      {\n        doc.PromptForFamilyInstancePlacement( \n          symbol );\n      }\n    }\n  }\n</pre>\n<p>With the drop handler in place, we can initiate a custom drag and drop like this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list view</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listView_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">ListViewItem</span> selectedItem = <span class=\"blue\">this</span>.listView1\n        .SelectedItems.Cast&lt;<span class=\"teal\">ListViewItem</span>&gt;()\n        .FirstOrDefault&lt;<span class=\"teal\">ListViewItem</span>&gt;();\n \n      <span class=\"blue\">if</span>( selectedItem != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// Use custom Revit drag and drop behavior</span>\n \n        <span class=\"teal\">LoadedFamilyDropHandler</span> myhandler \n          = <span class=\"blue\">new</span> <span class=\"teal\">LoadedFamilyDropHandler</span>();\n \n        <span class=\"teal\">UIApplication</span>.DoDragDrop( \n          selectedItem.Tag, myhandler );\n      }\n    }\n  }\n</pre>\n<p>Be sure to take a look at the other commands defined by the UIAPI SDK sample as well, because they are all pretty exciting and address a number of long-standing wish list items.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0748_drag_drop_2",
    "header_text": "UIAPI SDK Sample Drag and Drop",
    "local_header_href": "#uiapi-sdk-sample-drag-and-drop",
    "chunk_text": "<h4>UIAPI SDK Sample Drag and Drop</h4><p>The UIAPI drag and drop command displays the following modeless dialogue:</p><center>\n<img alt=\"UIAPI DragAndDrop form\" src=\"img/drag_drop_form.png\" width=\"400\"/>\n</center><p>It presents a list of loaded furniture family symbols on the left and all furniture family files found by recursively searching the content library on the right.\n\n\n<a name=\"2\"></a>\n<h4>UIApplication DoDragDrop Method Overloads</h4>\n<p>The UIApplication now provides two overloads of the new static method DoDragDrop for interacting with drag and drop events:\n\n<ul>\n<li><a href=\"#3\">DoDragDrop( ICollection&lt;string&gt; )</a> to initiate a standard Revit drag and drop operation of a collection of file names on the Revit user interface. \n<li><a href=\"#5\">DoDragDrop( object, IDropHandler )</a> to initiate a drag and drop operation with a custom drop implementation. \n</li></li></ul>\n<p>This method and its same two overloads are also provided on the macro-specific ApplicationEntryPoint class, for Revit macro use only.\n\n\n<a name=\"3\"></a>\n<h4>Drag and Drop a List of Files</h4>\n<p>In the first overload, the method argument holds a list of paths and names of files to be dropped on the Revit user interface, which causes the following default behaviour:\n\n<ul>\n<li>Only one AutoCAD format or image file dragged onto Revit: a new import placement editor will be started to import the file.\n<li>More than one AutoCAD format or image files dragged onto Revit: a new import placement editor will be started only for the first AutoCAD format or image file.\n<li>Only one family file dragged onto Revit: the family will be loaded, and an editor will be started to place the family.\n<li>More than one family file dragged onto Revit: all the families will be loaded.\n<li>More than one family file including other format files dragged onto Revit: Revit will try to open all the files.\n<li>If a valid file or list of files is passed, Revit will do its best to use them appropriately. If any files are not usable, failure will be signalled to the interactive Revit user, but <b>no</b> exception is thrown and the add-in will not be notified.\n</li></li></li></li></li></li></ul>\n<p>Here again, this behaviour is built into Revit and cannot be modified.\n\n<p>The code initiating the drag and drop from the modeless dialogue is as simple as this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list box</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listBox1_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">FamilyListBoxMember</span> member \n        = (<span class=\"teal\">FamilyListBoxMember</span>) listBox1.SelectedItem;\n \n      <span class=\"green\">// Use standard Revit drag and drop behavior</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">String</span>&gt; data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">String</span>&gt;();\n      data.Add( member.FullPath );\n      <span class=\"teal\">UIApplication</span>.DoDragDrop( data );\n    }\n  }\n</pre>\n<p>In other words, dragging a file name from the list on the right onto Revit will trigger the same built-in default behaviour as dragging the same file from the Windows explorer.\n\n\n\n<a name=\"4\"></a>\n<h4>Yet another Caveat against Invoking Revit API Methods Modelessly</h4>\n<p>Note that both this method and the one discussed below call the static UIApplication DoDragDrop method from a modeless dialogue, i.e. outside a valid Revit API context, which is unusual for the Revit API.\n\n<!-- This is most likely going to be changed in the sample, as it is possible that this method will cause problems if used when there is another tool active. -->\n\nThis is most likely going to be changed in the sample, as it will almost certainly cause serious problems such as unexpected results, corrupted documents, crashes, etc. if utilised in a commercial application.\n\nA better approach would be to use the Idling or an external event to trigger the DragDrop activity at a later time.\n\n<!-- <p>Actually, on further testing, it turns out that calling DoDragDrop with a list of file paths is treated like another command which interrupts the current one, and it is OK to call this outside of an API context. The overload taking a handler crashes Revit when a tool is currently active, so you cannot use it outside a valid Revit API context. We are in the process of updating the sample to fix this issue. -->\n<p>The only safe option is to call DoDragDrop from an Idling or external event call-back, just like all other Revit API calls.\n\n<p>Actually, on further discussion, we realised that the situation is even worse: invoking the drag-and-drop method during both Idling and external events is never recommendable, because it is likely to cause\n\n<a href=\"http://en.wikipedia.org/wiki/Deadlock\">\ndeadlock</a>. \n\n<p>The problem is that the user interface is not expecting to be invoked during idling; the application is idling for the exact reason that there is no UI activity. \nIf UI operations are invoked in this situation, two things may happen:\n\n<ul>\n<li>The same message pump is re-entered with a new request, which cannot be processed, since the pump is still waiting for the idling event to be ended.\n<li>Another, secondary message pump is entered, which may eventually invoke another idling event, which may dead-lock the client application.\n</li></li></ul>\n<p>Unfortunately, this means that there really is no totally safe way to utilise this wonderful new API from a modeless dialogue.\nWe will obviously be taking a new look at this in future versions, but for now it is important to realise the risks of invoking the Revit UI during the Idling event.\n\n<!-- (Note: the idling reentrancy will be fixed in 2014 (or possibly in 2013 update), but the dead lock will always be possible; Revit UI should not be invoked during idling.) -->\n<p>Here are some ideas which may help relativate these worries:\n\n<ul>\n<li>The problem of dead-lock or re-entering idling will only be apparent if invoking Revit UI, for instance the interactive placement of a family instance\nIf the method only loads the family or does some other non-UI activity, it will be OK.\n\n<li>The tool works perfectly well if there is no other Revit tool active.    \nOf course, the best way to tell this is from Idling, which it seems cannot successfully call the call-back.\n\n<!-- \nWe have thus possibly found a valid use for the Application.IsQuiescent property.\nAlthough we do not really have a case for it, because one doesn't really need it during the Idling event (or any other event or external command, for that matter), and outside of the events it is not much more useful, since Revit cannot be called from a different thread anyway.\n\n...\n\nIf I could change one thing, I would remove the sentence in which is Application.IsQuiescent mentioned. \nI believe that method was implemented only because it existed in AutoCAD, except it has never meant the same thing like it means in AutoCAD. \nUsers should not use it, since there is no actually scenario in which it makes sense.\n-->\n</li></li></ul>\n<p>So once again: make sure that you test the scenario in which you plan to use this very carefully, and avoid all risks in a commercial implementation.\n\n\n<a name=\"5\"></a>\n<h4>Drag and Drop with a Custom Handler</h4>\n<p>The second overload is much more exciting, because it allows us to define our own drop behaviour inside Revit.\n\n<p>This can only be used to define behaviour within the context of the add-in's own UI, though.  \nFor example, it does not allow you to define new drag and drop behaviour for files which are not supported by the method above when dropped onto Revit from explorer, or from an unconnected application like Excel, AutoCAD, etc.  \nThe drag operation must be initiated from a point where it can call DoDragDrop to Revit to allow it to complete.\n\n<p>It requires us to set up a handler for the drop event, which is derived from the IDropHandler interface, requiring then implementation of one single method, Execute.\n\n<p>In this sample, the drop handler expects the element id of a family symbol to be passed in and simply calls the PromptForFamilyInstancePlacement method on the symbol.\n\n<p>You are obviously completely free to pass in any data you like when invoking the handler, and can choose to do something completely different with it inside Revit on receipt:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Custom handler for placement of loaded family types</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">LoadedFamilyDropHandler</span> : <span class=\"teal\">IDropHandler</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( \n      <span class=\"teal\">UIDocument</span> doc, \n      <span class=\"blue\">object</span> data )\n    {\n      <span class=\"teal\">ElementId</span> familySymbolId = (<span class=\"teal\">ElementId</span>) data;\n \n      <span class=\"teal\">FamilySymbol</span> symbol = doc.Document.GetElement( \n        familySymbolId ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n      <span class=\"blue\">if</span>( symbol != <span class=\"blue\">null</span> )\n      {\n        doc.PromptForFamilyInstancePlacement( \n          symbol );\n      }\n    }\n  }\n</pre>\n<p>With the drop handler in place, we can initiate a custom drag and drop like this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list view</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listView_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">ListViewItem</span> selectedItem = <span class=\"blue\">this</span>.listView1\n        .SelectedItems.Cast&lt;<span class=\"teal\">ListViewItem</span>&gt;()\n        .FirstOrDefault&lt;<span class=\"teal\">ListViewItem</span>&gt;();\n \n      <span class=\"blue\">if</span>( selectedItem != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// Use custom Revit drag and drop behavior</span>\n \n        <span class=\"teal\">LoadedFamilyDropHandler</span> myhandler \n          = <span class=\"blue\">new</span> <span class=\"teal\">LoadedFamilyDropHandler</span>();\n \n        <span class=\"teal\">UIApplication</span>.DoDragDrop( \n          selectedItem.Tag, myhandler );\n      }\n    }\n  }\n</pre>\n<p>Be sure to take a look at the other commands defined by the UIAPI SDK sample as well, because they are all pretty exciting and address a number of long-standing wish list items.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0748_drag_drop_2",
    "header_text": "UIApplication DoDragDrop Method Overloads",
    "local_header_href": "#uiapplication-dodragdrop-method-overloads",
    "chunk_text": "<h4>UIApplication DoDragDrop Method Overloads</h4><p>The UIApplication now provides two overloads of the new static method DoDragDrop for interacting with drag and drop events:\n\n<ul>\n<li><a href=\"#3\">DoDragDrop( ICollection&lt;string&gt; )</a> to initiate a standard Revit drag and drop operation of a collection of file names on the Revit user interface. \n<li><a href=\"#5\">DoDragDrop( object, IDropHandler )</a> to initiate a drag and drop operation with a custom drop implementation. \n</li></li></ul>\n<p>This method and its same two overloads are also provided on the macro-specific ApplicationEntryPoint class, for Revit macro use only.\n\n\n<a name=\"3\"></a>\n<h4>Drag and Drop a List of Files</h4>\n<p>In the first overload, the method argument holds a list of paths and names of files to be dropped on the Revit user interface, which causes the following default behaviour:\n\n<ul>\n<li>Only one AutoCAD format or image file dragged onto Revit: a new import placement editor will be started to import the file.\n<li>More than one AutoCAD format or image files dragged onto Revit: a new import placement editor will be started only for the first AutoCAD format or image file.\n<li>Only one family file dragged onto Revit: the family will be loaded, and an editor will be started to place the family.\n<li>More than one family file dragged onto Revit: all the families will be loaded.\n<li>More than one family file including other format files dragged onto Revit: Revit will try to open all the files.\n<li>If a valid file or list of files is passed, Revit will do its best to use them appropriately. If any files are not usable, failure will be signalled to the interactive Revit user, but <b>no</b> exception is thrown and the add-in will not be notified.\n</li></li></li></li></li></li></ul>\n<p>Here again, this behaviour is built into Revit and cannot be modified.\n\n<p>The code initiating the drag and drop from the modeless dialogue is as simple as this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list box</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listBox1_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">FamilyListBoxMember</span> member \n        = (<span class=\"teal\">FamilyListBoxMember</span>) listBox1.SelectedItem;\n \n      <span class=\"green\">// Use standard Revit drag and drop behavior</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">String</span>&gt; data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">String</span>&gt;();\n      data.Add( member.FullPath );\n      <span class=\"teal\">UIApplication</span>.DoDragDrop( data );\n    }\n  }\n</pre>\n<p>In other words, dragging a file name from the list on the right onto Revit will trigger the same built-in default behaviour as dragging the same file from the Windows explorer.\n\n\n\n<a name=\"4\"></a>\n<h4>Yet another Caveat against Invoking Revit API Methods Modelessly</h4>\n<p>Note that both this method and the one discussed below call the static UIApplication DoDragDrop method from a modeless dialogue, i.e. outside a valid Revit API context, which is unusual for the Revit API.\n\n<!-- This is most likely going to be changed in the sample, as it is possible that this method will cause problems if used when there is another tool active. -->\n\nThis is most likely going to be changed in the sample, as it will almost certainly cause serious problems such as unexpected results, corrupted documents, crashes, etc. if utilised in a commercial application.\n\nA better approach would be to use the Idling or an external event to trigger the DragDrop activity at a later time.\n\n<!-- <p>Actually, on further testing, it turns out that calling DoDragDrop with a list of file paths is treated like another command which interrupts the current one, and it is OK to call this outside of an API context. The overload taking a handler crashes Revit when a tool is currently active, so you cannot use it outside a valid Revit API context. We are in the process of updating the sample to fix this issue. -->\n<p>The only safe option is to call DoDragDrop from an Idling or external event call-back, just like all other Revit API calls.\n\n<p>Actually, on further discussion, we realised that the situation is even worse: invoking the drag-and-drop method during both Idling and external events is never recommendable, because it is likely to cause\n\n<a href=\"http://en.wikipedia.org/wiki/Deadlock\">\ndeadlock</a>. \n\n<p>The problem is that the user interface is not expecting to be invoked during idling; the application is idling for the exact reason that there is no UI activity. \nIf UI operations are invoked in this situation, two things may happen:\n\n<ul>\n<li>The same message pump is re-entered with a new request, which cannot be processed, since the pump is still waiting for the idling event to be ended.\n<li>Another, secondary message pump is entered, which may eventually invoke another idling event, which may dead-lock the client application.\n</li></li></ul>\n<p>Unfortunately, this means that there really is no totally safe way to utilise this wonderful new API from a modeless dialogue.\nWe will obviously be taking a new look at this in future versions, but for now it is important to realise the risks of invoking the Revit UI during the Idling event.\n\n<!-- (Note: the idling reentrancy will be fixed in 2014 (or possibly in 2013 update), but the dead lock will always be possible; Revit UI should not be invoked during idling.) -->\n<p>Here are some ideas which may help relativate these worries:\n\n<ul>\n<li>The problem of dead-lock or re-entering idling will only be apparent if invoking Revit UI, for instance the interactive placement of a family instance\nIf the method only loads the family or does some other non-UI activity, it will be OK.\n\n<li>The tool works perfectly well if there is no other Revit tool active.    \nOf course, the best way to tell this is from Idling, which it seems cannot successfully call the call-back.\n\n<!-- \nWe have thus possibly found a valid use for the Application.IsQuiescent property.\nAlthough we do not really have a case for it, because one doesn't really need it during the Idling event (or any other event or external command, for that matter), and outside of the events it is not much more useful, since Revit cannot be called from a different thread anyway.\n\n...\n\nIf I could change one thing, I would remove the sentence in which is Application.IsQuiescent mentioned. \nI believe that method was implemented only because it existed in AutoCAD, except it has never meant the same thing like it means in AutoCAD. \nUsers should not use it, since there is no actually scenario in which it makes sense.\n-->\n</li></li></ul>\n<p>So once again: make sure that you test the scenario in which you plan to use this very carefully, and avoid all risks in a commercial implementation.\n\n\n<a name=\"5\"></a>\n<h4>Drag and Drop with a Custom Handler</h4>\n<p>The second overload is much more exciting, because it allows us to define our own drop behaviour inside Revit.\n\n<p>This can only be used to define behaviour within the context of the add-in's own UI, though.  \nFor example, it does not allow you to define new drag and drop behaviour for files which are not supported by the method above when dropped onto Revit from explorer, or from an unconnected application like Excel, AutoCAD, etc.  \nThe drag operation must be initiated from a point where it can call DoDragDrop to Revit to allow it to complete.\n\n<p>It requires us to set up a handler for the drop event, which is derived from the IDropHandler interface, requiring then implementation of one single method, Execute.\n\n<p>In this sample, the drop handler expects the element id of a family symbol to be passed in and simply calls the PromptForFamilyInstancePlacement method on the symbol.\n\n<p>You are obviously completely free to pass in any data you like when invoking the handler, and can choose to do something completely different with it inside Revit on receipt:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Custom handler for placement of loaded family types</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">LoadedFamilyDropHandler</span> : <span class=\"teal\">IDropHandler</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( \n      <span class=\"teal\">UIDocument</span> doc, \n      <span class=\"blue\">object</span> data )\n    {\n      <span class=\"teal\">ElementId</span> familySymbolId = (<span class=\"teal\">ElementId</span>) data;\n \n      <span class=\"teal\">FamilySymbol</span> symbol = doc.Document.GetElement( \n        familySymbolId ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n      <span class=\"blue\">if</span>( symbol != <span class=\"blue\">null</span> )\n      {\n        doc.PromptForFamilyInstancePlacement( \n          symbol );\n      }\n    }\n  }\n</pre>\n<p>With the drop handler in place, we can initiate a custom drag and drop like this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list view</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listView_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">ListViewItem</span> selectedItem = <span class=\"blue\">this</span>.listView1\n        .SelectedItems.Cast&lt;<span class=\"teal\">ListViewItem</span>&gt;()\n        .FirstOrDefault&lt;<span class=\"teal\">ListViewItem</span>&gt;();\n \n      <span class=\"blue\">if</span>( selectedItem != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// Use custom Revit drag and drop behavior</span>\n \n        <span class=\"teal\">LoadedFamilyDropHandler</span> myhandler \n          = <span class=\"blue\">new</span> <span class=\"teal\">LoadedFamilyDropHandler</span>();\n \n        <span class=\"teal\">UIApplication</span>.DoDragDrop( \n          selectedItem.Tag, myhandler );\n      }\n    }\n  }\n</pre>\n<p>Be sure to take a look at the other commands defined by the UIAPI SDK sample as well, because they are all pretty exciting and address a number of long-standing wish list items.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0748_drag_drop_2",
    "header_text": "Drag and Drop a List of Files",
    "local_header_href": "#drag-and-drop-a-list-of-files",
    "chunk_text": "<h4>Drag and Drop a List of Files</h4><p>In the first overload, the method argument holds a list of paths and names of files to be dropped on the Revit user interface, which causes the following default behaviour:\n\n<ul>\n<li>Only one AutoCAD format or image file dragged onto Revit: a new import placement editor will be started to import the file.\n<li>More than one AutoCAD format or image files dragged onto Revit: a new import placement editor will be started only for the first AutoCAD format or image file.\n<li>Only one family file dragged onto Revit: the family will be loaded, and an editor will be started to place the family.\n<li>More than one family file dragged onto Revit: all the families will be loaded.\n<li>More than one family file including other format files dragged onto Revit: Revit will try to open all the files.\n<li>If a valid file or list of files is passed, Revit will do its best to use them appropriately. If any files are not usable, failure will be signalled to the interactive Revit user, but <b>no</b> exception is thrown and the add-in will not be notified.\n</li></li></li></li></li></li></ul>\n<p>Here again, this behaviour is built into Revit and cannot be modified.\n\n<p>The code initiating the drag and drop from the modeless dialogue is as simple as this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list box</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listBox1_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">FamilyListBoxMember</span> member \n        = (<span class=\"teal\">FamilyListBoxMember</span>) listBox1.SelectedItem;\n \n      <span class=\"green\">// Use standard Revit drag and drop behavior</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">String</span>&gt; data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">String</span>&gt;();\n      data.Add( member.FullPath );\n      <span class=\"teal\">UIApplication</span>.DoDragDrop( data );\n    }\n  }\n</pre>\n<p>In other words, dragging a file name from the list on the right onto Revit will trigger the same built-in default behaviour as dragging the same file from the Windows explorer.\n\n\n\n<a name=\"4\"></a>\n<h4>Yet another Caveat against Invoking Revit API Methods Modelessly</h4>\n<p>Note that both this method and the one discussed below call the static UIApplication DoDragDrop method from a modeless dialogue, i.e. outside a valid Revit API context, which is unusual for the Revit API.\n\n<!-- This is most likely going to be changed in the sample, as it is possible that this method will cause problems if used when there is another tool active. -->\n\nThis is most likely going to be changed in the sample, as it will almost certainly cause serious problems such as unexpected results, corrupted documents, crashes, etc. if utilised in a commercial application.\n\nA better approach would be to use the Idling or an external event to trigger the DragDrop activity at a later time.\n\n<!-- <p>Actually, on further testing, it turns out that calling DoDragDrop with a list of file paths is treated like another command which interrupts the current one, and it is OK to call this outside of an API context. The overload taking a handler crashes Revit when a tool is currently active, so you cannot use it outside a valid Revit API context. We are in the process of updating the sample to fix this issue. -->\n<p>The only safe option is to call DoDragDrop from an Idling or external event call-back, just like all other Revit API calls.\n\n<p>Actually, on further discussion, we realised that the situation is even worse: invoking the drag-and-drop method during both Idling and external events is never recommendable, because it is likely to cause\n\n<a href=\"http://en.wikipedia.org/wiki/Deadlock\">\ndeadlock</a>. \n\n<p>The problem is that the user interface is not expecting to be invoked during idling; the application is idling for the exact reason that there is no UI activity. \nIf UI operations are invoked in this situation, two things may happen:\n\n<ul>\n<li>The same message pump is re-entered with a new request, which cannot be processed, since the pump is still waiting for the idling event to be ended.\n<li>Another, secondary message pump is entered, which may eventually invoke another idling event, which may dead-lock the client application.\n</li></li></ul>\n<p>Unfortunately, this means that there really is no totally safe way to utilise this wonderful new API from a modeless dialogue.\nWe will obviously be taking a new look at this in future versions, but for now it is important to realise the risks of invoking the Revit UI during the Idling event.\n\n<!-- (Note: the idling reentrancy will be fixed in 2014 (or possibly in 2013 update), but the dead lock will always be possible; Revit UI should not be invoked during idling.) -->\n<p>Here are some ideas which may help relativate these worries:\n\n<ul>\n<li>The problem of dead-lock or re-entering idling will only be apparent if invoking Revit UI, for instance the interactive placement of a family instance\nIf the method only loads the family or does some other non-UI activity, it will be OK.\n\n<li>The tool works perfectly well if there is no other Revit tool active.    \nOf course, the best way to tell this is from Idling, which it seems cannot successfully call the call-back.\n\n<!-- \nWe have thus possibly found a valid use for the Application.IsQuiescent property.\nAlthough we do not really have a case for it, because one doesn't really need it during the Idling event (or any other event or external command, for that matter), and outside of the events it is not much more useful, since Revit cannot be called from a different thread anyway.\n\n...\n\nIf I could change one thing, I would remove the sentence in which is Application.IsQuiescent mentioned. \nI believe that method was implemented only because it existed in AutoCAD, except it has never meant the same thing like it means in AutoCAD. \nUsers should not use it, since there is no actually scenario in which it makes sense.\n-->\n</li></li></ul>\n<p>So once again: make sure that you test the scenario in which you plan to use this very carefully, and avoid all risks in a commercial implementation.\n\n\n<a name=\"5\"></a>\n<h4>Drag and Drop with a Custom Handler</h4>\n<p>The second overload is much more exciting, because it allows us to define our own drop behaviour inside Revit.\n\n<p>This can only be used to define behaviour within the context of the add-in's own UI, though.  \nFor example, it does not allow you to define new drag and drop behaviour for files which are not supported by the method above when dropped onto Revit from explorer, or from an unconnected application like Excel, AutoCAD, etc.  \nThe drag operation must be initiated from a point where it can call DoDragDrop to Revit to allow it to complete.\n\n<p>It requires us to set up a handler for the drop event, which is derived from the IDropHandler interface, requiring then implementation of one single method, Execute.\n\n<p>In this sample, the drop handler expects the element id of a family symbol to be passed in and simply calls the PromptForFamilyInstancePlacement method on the symbol.\n\n<p>You are obviously completely free to pass in any data you like when invoking the handler, and can choose to do something completely different with it inside Revit on receipt:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Custom handler for placement of loaded family types</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">LoadedFamilyDropHandler</span> : <span class=\"teal\">IDropHandler</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( \n      <span class=\"teal\">UIDocument</span> doc, \n      <span class=\"blue\">object</span> data )\n    {\n      <span class=\"teal\">ElementId</span> familySymbolId = (<span class=\"teal\">ElementId</span>) data;\n \n      <span class=\"teal\">FamilySymbol</span> symbol = doc.Document.GetElement( \n        familySymbolId ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n      <span class=\"blue\">if</span>( symbol != <span class=\"blue\">null</span> )\n      {\n        doc.PromptForFamilyInstancePlacement( \n          symbol );\n      }\n    }\n  }\n</pre>\n<p>With the drop handler in place, we can initiate a custom drag and drop like this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list view</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listView_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">ListViewItem</span> selectedItem = <span class=\"blue\">this</span>.listView1\n        .SelectedItems.Cast&lt;<span class=\"teal\">ListViewItem</span>&gt;()\n        .FirstOrDefault&lt;<span class=\"teal\">ListViewItem</span>&gt;();\n \n      <span class=\"blue\">if</span>( selectedItem != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// Use custom Revit drag and drop behavior</span>\n \n        <span class=\"teal\">LoadedFamilyDropHandler</span> myhandler \n          = <span class=\"blue\">new</span> <span class=\"teal\">LoadedFamilyDropHandler</span>();\n \n        <span class=\"teal\">UIApplication</span>.DoDragDrop( \n          selectedItem.Tag, myhandler );\n      }\n    }\n  }\n</pre>\n<p>Be sure to take a look at the other commands defined by the UIAPI SDK sample as well, because they are all pretty exciting and address a number of long-standing wish list items.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0748_drag_drop_2",
    "header_text": "Yet another Caveat against Invoking Revit API Methods Modelessly",
    "local_header_href": "#yet-another-caveat-against-invoking-revit-api-methods-modelessly",
    "chunk_text": "<h4>Yet another Caveat against Invoking Revit API Methods Modelessly</h4><p>Note that both this method and the one discussed below call the static UIApplication DoDragDrop method from a modeless dialogue, i.e. outside a valid Revit API context, which is unusual for the Revit API.\n\n<!-- This is most likely going to be changed in the sample, as it is possible that this method will cause problems if used when there is another tool active. -->\n\nThis is most likely going to be changed in the sample, as it will almost certainly cause serious problems such as unexpected results, corrupted documents, crashes, etc. if utilised in a commercial application.\n\nA better approach would be to use the Idling or an external event to trigger the DragDrop activity at a later time.\n\n<!-- <p>Actually, on further testing, it turns out that calling DoDragDrop with a list of file paths is treated like another command which interrupts the current one, and it is OK to call this outside of an API context. The overload taking a handler crashes Revit when a tool is currently active, so you cannot use it outside a valid Revit API context. We are in the process of updating the sample to fix this issue. -->\n<p>The only safe option is to call DoDragDrop from an Idling or external event call-back, just like all other Revit API calls.\n\n<p>Actually, on further discussion, we realised that the situation is even worse: invoking the drag-and-drop method during both Idling and external events is never recommendable, because it is likely to cause\n\n<a href=\"http://en.wikipedia.org/wiki/Deadlock\">\ndeadlock</a>. \n\n<p>The problem is that the user interface is not expecting to be invoked during idling; the application is idling for the exact reason that there is no UI activity. \nIf UI operations are invoked in this situation, two things may happen:\n\n<ul>\n<li>The same message pump is re-entered with a new request, which cannot be processed, since the pump is still waiting for the idling event to be ended.\n<li>Another, secondary message pump is entered, which may eventually invoke another idling event, which may dead-lock the client application.\n</li></li></ul>\n<p>Unfortunately, this means that there really is no totally safe way to utilise this wonderful new API from a modeless dialogue.\nWe will obviously be taking a new look at this in future versions, but for now it is important to realise the risks of invoking the Revit UI during the Idling event.\n\n<!-- (Note: the idling reentrancy will be fixed in 2014 (or possibly in 2013 update), but the dead lock will always be possible; Revit UI should not be invoked during idling.) -->\n<p>Here are some ideas which may help relativate these worries:\n\n<ul>\n<li>The problem of dead-lock or re-entering idling will only be apparent if invoking Revit UI, for instance the interactive placement of a family instance\nIf the method only loads the family or does some other non-UI activity, it will be OK.\n\n<li>The tool works perfectly well if there is no other Revit tool active.    \nOf course, the best way to tell this is from Idling, which it seems cannot successfully call the call-back.\n\n<!-- \nWe have thus possibly found a valid use for the Application.IsQuiescent property.\nAlthough we do not really have a case for it, because one doesn't really need it during the Idling event (or any other event or external command, for that matter), and outside of the events it is not much more useful, since Revit cannot be called from a different thread anyway.\n\n...\n\nIf I could change one thing, I would remove the sentence in which is Application.IsQuiescent mentioned. \nI believe that method was implemented only because it existed in AutoCAD, except it has never meant the same thing like it means in AutoCAD. \nUsers should not use it, since there is no actually scenario in which it makes sense.\n-->\n</li></li></ul>\n<p>So once again: make sure that you test the scenario in which you plan to use this very carefully, and avoid all risks in a commercial implementation.\n\n\n<a name=\"5\"></a>\n<h4>Drag and Drop with a Custom Handler</h4>\n<p>The second overload is much more exciting, because it allows us to define our own drop behaviour inside Revit.\n\n<p>This can only be used to define behaviour within the context of the add-in's own UI, though.  \nFor example, it does not allow you to define new drag and drop behaviour for files which are not supported by the method above when dropped onto Revit from explorer, or from an unconnected application like Excel, AutoCAD, etc.  \nThe drag operation must be initiated from a point where it can call DoDragDrop to Revit to allow it to complete.\n\n<p>It requires us to set up a handler for the drop event, which is derived from the IDropHandler interface, requiring then implementation of one single method, Execute.\n\n<p>In this sample, the drop handler expects the element id of a family symbol to be passed in and simply calls the PromptForFamilyInstancePlacement method on the symbol.\n\n<p>You are obviously completely free to pass in any data you like when invoking the handler, and can choose to do something completely different with it inside Revit on receipt:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Custom handler for placement of loaded family types</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">LoadedFamilyDropHandler</span> : <span class=\"teal\">IDropHandler</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( \n      <span class=\"teal\">UIDocument</span> doc, \n      <span class=\"blue\">object</span> data )\n    {\n      <span class=\"teal\">ElementId</span> familySymbolId = (<span class=\"teal\">ElementId</span>) data;\n \n      <span class=\"teal\">FamilySymbol</span> symbol = doc.Document.GetElement( \n        familySymbolId ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n      <span class=\"blue\">if</span>( symbol != <span class=\"blue\">null</span> )\n      {\n        doc.PromptForFamilyInstancePlacement( \n          symbol );\n      }\n    }\n  }\n</pre>\n<p>With the drop handler in place, we can initiate a custom drag and drop like this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list view</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listView_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">ListViewItem</span> selectedItem = <span class=\"blue\">this</span>.listView1\n        .SelectedItems.Cast&lt;<span class=\"teal\">ListViewItem</span>&gt;()\n        .FirstOrDefault&lt;<span class=\"teal\">ListViewItem</span>&gt;();\n \n      <span class=\"blue\">if</span>( selectedItem != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// Use custom Revit drag and drop behavior</span>\n \n        <span class=\"teal\">LoadedFamilyDropHandler</span> myhandler \n          = <span class=\"blue\">new</span> <span class=\"teal\">LoadedFamilyDropHandler</span>();\n \n        <span class=\"teal\">UIApplication</span>.DoDragDrop( \n          selectedItem.Tag, myhandler );\n      }\n    }\n  }\n</pre>\n<p>Be sure to take a look at the other commands defined by the UIAPI SDK sample as well, because they are all pretty exciting and address a number of long-standing wish list items.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0748_drag_drop_2",
    "header_text": "Drag and Drop with a Custom Handler",
    "local_header_href": "#drag-and-drop-with-a-custom-handler",
    "chunk_text": "<h4>Drag and Drop with a Custom Handler</h4><p>The second overload is much more exciting, because it allows us to define our own drop behaviour inside Revit.\n\n<p>This can only be used to define behaviour within the context of the add-in's own UI, though.  \nFor example, it does not allow you to define new drag and drop behaviour for files which are not supported by the method above when dropped onto Revit from explorer, or from an unconnected application like Excel, AutoCAD, etc.  \nThe drag operation must be initiated from a point where it can call DoDragDrop to Revit to allow it to complete.\n\n<p>It requires us to set up a handler for the drop event, which is derived from the IDropHandler interface, requiring then implementation of one single method, Execute.\n\n<p>In this sample, the drop handler expects the element id of a family symbol to be passed in and simply calls the PromptForFamilyInstancePlacement method on the symbol.\n\n<p>You are obviously completely free to pass in any data you like when invoking the handler, and can choose to do something completely different with it inside Revit on receipt:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Custom handler for placement of loaded family types</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">LoadedFamilyDropHandler</span> : <span class=\"teal\">IDropHandler</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( \n      <span class=\"teal\">UIDocument</span> doc, \n      <span class=\"blue\">object</span> data )\n    {\n      <span class=\"teal\">ElementId</span> familySymbolId = (<span class=\"teal\">ElementId</span>) data;\n \n      <span class=\"teal\">FamilySymbol</span> symbol = doc.Document.GetElement( \n        familySymbolId ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n      <span class=\"blue\">if</span>( symbol != <span class=\"blue\">null</span> )\n      {\n        doc.PromptForFamilyInstancePlacement( \n          symbol );\n      }\n    }\n  }\n</pre>\n<p>With the drop handler in place, we can initiate a custom drag and drop like this:\n\n<pre class=\"code\">\n  <span class=\"green\">// Drag action from list view</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> listView_MouseMove( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">MouseEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( System.Windows.Forms.<span class=\"teal\">Control</span>.MouseButtons \n      == <span class=\"teal\">MouseButtons</span>.Left )\n    {\n      <span class=\"teal\">ListViewItem</span> selectedItem = <span class=\"blue\">this</span>.listView1\n        .SelectedItems.Cast&lt;<span class=\"teal\">ListViewItem</span>&gt;()\n        .FirstOrDefault&lt;<span class=\"teal\">ListViewItem</span>&gt;();\n \n      <span class=\"blue\">if</span>( selectedItem != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// Use custom Revit drag and drop behavior</span>\n \n        <span class=\"teal\">LoadedFamilyDropHandler</span> myhandler \n          = <span class=\"blue\">new</span> <span class=\"teal\">LoadedFamilyDropHandler</span>();\n \n        <span class=\"teal\">UIApplication</span>.DoDragDrop( \n          selectedItem.Tag, myhandler );\n      }\n    }\n  }\n</pre>\n<p>Be sure to take a look at the other commands defined by the UIAPI SDK sample as well, because they are all pretty exciting and address a number of long-standing wish list items.\n</p></p></p></p></p></p></p>"
  }
]