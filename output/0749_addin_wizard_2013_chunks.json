[
  {
    "original_filename": "0749_addin_wizard_2013",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0749_addin_wizard_2013",
    "header_text": "Add-In Wizard for Revit 2013",
    "local_header_href": "#add-in-wizard-for-revit-2013",
    "chunk_text": "<h3>Add-In Wizard for Revit 2013</h3><p>I have been using an updated version of my Visual Studio Revit C# add-in wizard for Revit 2013 for a while now and thought you might find it useful as well.\n\n<p>It now generates a bit more boiler-plate code up front which can be simply deleted if not needed:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"green\">// Retrieve elements from database</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.INVALID )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ) );\n \n  <span class=\"green\">// Filtered element collector is iterable</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n  {\n    <span class=\"teal\">Debug</span>.Print( e.Name );\n  }\n \n  <span class=\"green\">// Modify document within a transaction</span>\n \n  <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  tx.Start();\n  tx.Commit();\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For the full description of the wizards, please refer to these previous posts:\n\n<!--\n\n415_devtv_addin_templates.htm\n451_revit_2011_devtv.htm\n498_snow_and_woe.htm\n523_ui_auto_design_option.htm\n541_application_attributes.htm\n662_addin_wizard_2012_ur2.htm\n\n-->\n<ul>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/devtv-addin-templates.html\">\nOriginal introduction, benefits, and usage example</a> for C# and VB.\n\n<li>Personalised \n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#2\">\nminimal C# version</a> for Revit 2011.\n\n<li>A short additional \n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/snow-and-woe-with-manifest-files.html\">\nusage note</a>.\n\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/automate-designoption-and-64-bit-add-in-templates.html#2\">\n64 bit versions</a> for C# and VB.\n\n<li>Support for the \n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/visual-studio-add-in-wizards-for-revit-2012.html\">\nRevit 2012 API</a> for \n\nC# and VB.\n\n<li>Updated C# and VB versions placing\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/product-and-add-in-wizard-updates.html#3\">\nassembly DLL alongside add-in manifest</a> and\n\nincluding other changes.\n\n</li></li></li></li></li></li></ul>\n<p>To install, simply copy the zip file to the Visual Studio C# project template folder in your local file system:\n\n<ul>\n<li><a href=\"zip/RevitAddinWizardQuasarRP.zip\">RevitAddinWizardQuasarRP.zip</a> – copy to \n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual C#\n</li></ul>\n<p>Any volunteers to create and test the VB version?\n\n\n</p></p></p></p></p>"
  }
]