[
  {
    "original_filename": "0189_porting_to_vb",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n\npre { \n  font-size : 95%; \n  line-height : 120%; \n  background-color : lightgrey;\n  white-space : wrap;\n  color: darkblue;\n  background-color : linen;\n}\n\npre.code { \n  color: black;\n  background-color : white; \n}\n\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n\n</style>"
  },
  {
    "original_filename": "0189_porting_to_vb",
    "header_text": "Porting from C# to VB.NET",
    "local_header_href": "#porting-from-c-to-vbnet",
    "chunk_text": "<h3>Porting from C# to VB.NET</h3><p>Yesterday, we mentioned Kean Walmsley's recent post on \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2009/07/converting-between-c-and-vbnet.html\">\nconverting between C# and VB.NET</a>.\n\nIn response to the closely related frequently asked question on porting the Revit SDK samples provided in C# to VB.NET, here is an exhaustive study of the topic by Adam Nagy.</p><p><strong>Question:</strong>\nI'm looking at the Revit SDK samples, but many of them are in C#.\nSince I am a VB.NET programmer I'd prefer to use a VB.NET version. \nI tried to convert them myself but ran into some problems. \nCould you tell me the exact steps I could follow?</p><p><strong>Answer:</strong>\nThe best thing is to show it through an example.\nLet's port the ImportExport sample to VB.NET.\nThe \n\n<a href=\"zip/importexport-vb.net.zip\">\nattached sample</a>\n\nonly contains the DWG Import/Export part.\n\n<ol>\n<li>Open the \"ImportExport\" C# project.\n<li>Open another instance of Visual Studio.\n<li>In the second instance, create a VB.NET \"Class Library\" project with \"Name\" = \"VB.NET\", \"Location\" = \"[Revit SDK]\\Samples\\ImportExport\" and \"Create directory for solution\" unticked.\nThis way, all the project content will automatically be placed in the \"[Revit SDK]\\Samples\\ImportExport\\VB.NET\" folder instead of e.g. \"[Revit SDK]\\Samples\\ImportExport\\VB.NET\\ImportExport\" folder.\n<li>Select the \"VB.NET\" project in the \"Solution Explorer\" and then click on it again so you can rename it to \"ImportExport\".\n<li>Select the Solution in the \"Solution Explorer\" (top node) and in the \"Properties\" window change its \"(Name)\" to \"ImportExport\".\n<li>Go to Project &gt; Properties &gt; Application and set \"Assembly Name\" to \"ImportExport\" and \"Root namespace\" to \"\".\n<li>Right-click on the project in the \"Solution Explorer\" and select \"Add reference...\"; on the \"Browse\" tab, navigate to \"[Revit install folder]\\Program\\RevitAPI.dll\" and click \"OK\".\n<li>Click the \"Show All Files\" button in the top of the \"Solution Explorer\", then select \"References &gt; RevitAPI.dll\" and in the \"Properties\" window set \"Copy Local\" to \"False\".\n<li>Select \"Class1.vb\" and in the \"Properties\" window set \"File Name\" to \"Command.vb\".\nA dialog might pop up asking if you want to perform a rename in the project - click \"Yes\".\n<li>Copy all the content of Command.cs - just select Command.cs in the C# project, select its content (Ctrl+A), and copy it (Ctrl+C).\n<li>Now convert the code to VB.NET by using e.g. one of the online tools - \n<a href=\"http://www.developerfusion.com/tools/convert/csharp-to-vb\">\nhttp://www.developerfusion.com/tools/convert/csharp-to-vb</a>\n\nseemed to work fine.\nJust paste (Ctrl+V) the code into the edit window on the site - if it already has some content in it, then first select all of that (Ctrl+A).\nThen click \"Convert to VB.NET\" and once the conversion is finished click \"copy to clipboard\".\n<li>Select all the contents of Command.vb (Ctrl+A) and replace it with the converted code, which has been copied to the clipboard (Ctrl+V).\nIn case of interface implementations in VB.NET you need to explicitly define what interface function a given function implements - in C# it's not needed.\nSo when you copied over the content of \"Command.cs\" to \"Command.vb\" then you need to insert \"Implements IExternalCommand.Execute\" at the end of the line of \"Public Function Execute(...\".\n<li>You have to go through all the other files and repeat the above steps.\n<li>To be consistent with the samples' structure either.\n<ol>\n<li>replace \"Namespace Revit.SDK.Samples.ImportExport.CS\" with \"Namespace Revit.SDK.Samples.ImportExport.VB.Net\" in all \"*.vb\" files,\n<li>or delete \"Namespace Revit.SDK.Samples.ImportExport.CS\" in all \"*.vb\" files (including Designer files) and set \"Project &gt; Properties &gt; Application &gt; Root namespace\" to \"Revit.SDK.Samples.ImportExport.VB.Net\".\n</li></li></ol>\n<li>Now you can just copy \"[Revit SDK]\\Samples\\ImportExport\\CS\\Revit.ini\" to \"C:\\Revit SDK\\Samples\\ImportExport\\VB.NET\" and replace \"Revit.SDK.Samples.ImportExport.CS.Command\" with \"Revit.SDK.Samples.ImportExport.VB.Net.Command\" in it.\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ol>\n<p>In case of simple code files, e.g. \"MainData.cs\" you just need to create a similar file\n\n<ol>\n<li>Right-click the VB.NET project in the \"Solution Explorer\" and select \"Add &gt; Class... &gt; Common Items &gt; Class\" and set \"Name\" to \"MainData.vb\".\n<li>Copy all the content from \"MainData.cs\" and then paste its converted version into \"MainData.vb\" as we've done above with \"Command.cs\".\n</li></li></ol>\n<p>In case of form files, e.g. \"MainForm.cs\"\n\n<ol>\n<li>Right-click the VB.NET project in the \"Solution Explorer\" and select \"Add &gt; Windows Form...\" and set \"Name\" to \"MainForm.vb\".\n<li>Since we earlier clicked the \"Show All Files\" button in the top of the \"Solution Explorer\", we can see that there is also a \"Designer\" file listed under \"MainForm.vb\" in the \"Solution Explorer\".\n<li>First copy the converted code of \"MainForm.Designer.cs\" to \"MainForm.Designer.vb\" - this will automatically copy all the controls and their event handlers over as well.\n<li>Right-click on \"MainForm.cs\", select \"View Code\", and copy the converted code to \"MainForm.vb\".\n</li></li></li></li></ol>\n<p>To retain the same project structure as in the original ImportExport sample, you can simply add folders to the VB.NET project:\nRight-click the project and select \"Add &gt; New Folder\".\nYou can also drag &amp; drop files inside the project to reorganize them.\n\n<p>Thank you very much Adam for this detailed description!</p>\n</p></p></p></p>"
  }
]