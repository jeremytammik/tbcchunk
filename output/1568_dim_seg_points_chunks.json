[
  {
    "original_filename": "1568_dim_seg_points",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n- dimension segment endpoints\n  13073404 [How to retrieve a Dimension's (segment) geometry ?] \n  https://forums.autodesk.com/t5/revit-api-forum/how-to-retrieve-a-dimension-s-segment-geometry/m-p/7145688\n  https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdGetDimensionPoints.cs\n\nDetermining Dimension Segment Endoints #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/dimsegendpt\n\nA rather hard struggle led to a rather simple solution for determining the start and end points of dimension segments. In summary, the solution looks like this &ndash; A <code>Dimension</code> element is either single- or multi-segment; these two cases need to be handled separately &ndash; In case of a single segment, the dimension element itself has a line, an origin and a value; the line is indeed the dimension line. However, it may be unbounded...\n\n-->"
  },
  {
    "original_filename": "1568_dim_seg_points",
    "header_text": "Determining Dimension Segment Endoints",
    "local_header_href": "#determining-dimension-segment-endoints",
    "chunk_text": "### Determining Dimension Segment Endoints\n\nA rather hard struggle led to a rather simple solution for determining the start and end points of dimension segments.\n\nIn summary, the solution looks like this:\n\n- A `Dimension` element is either single- or multi-segment; these two cases need to be handled separately.\n- In case of a single segment, the dimension element itself has a line, an origin and a value; the line is indeed the dimension line. However, it may be unbounded, so you cannot determine the start or end point from it. It does provide a direction, though, and the origin is in the middle, so you can determine the start and end points by going forward and backward along the line by half the length:\n\n<pre>\n  direction = line.direction.normal;\n  start = origin - half * length * direction;\n  end = origin + half * length * direction;\n</pre>\n\n- In the case of multiple segments, use an analogue approach on each individual segment.\n\nI implemented and added a new external\ncommand [CmdGetDimensionPoints](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdGetDimensionPoints.cs)\nto [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\nI added it \nto [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\n[release 2018.0.134.0](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2018.0.134.0) that\ncalculates the segment endpoints accordingly.\n\nHere is a dimension between three parallel walls:\n\n<center>\n<img src=\"img/dim_three_walls_final.png\" alt=\"Dimensioning of three walls\" width=\"300\"> \n</center>\n\n`CmdGetDimensionPoints` adds the green model line markers denoting the dimension origin in the middle of the first segment and at the three start and end points of the two segments calculated along the dimension line from that starting point:\n\n<center>\n<img src=\"img/dim_three_walls_markers_final.png\" alt=\"Dimension origin and segment points\" width=\"300\"> \n</center>\n\nFor the full research and discussion leading up to this, please refer to\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread \non [how to retrieve a dimension's segment  geometry](https://forums.autodesk.com/t5/revit-api-forum/how-to-retrieve-a-dimension-s-segment-geometry/m-p/7145688).\n\nMany thanks to Fair59 for his important contributions and to Jonathan 'Maisoui' for raising the issue.\n\nHere is the full final implementation based on this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;dimension&nbsp;origin,&nbsp;i.e.,&nbsp;the&nbsp;midpoint</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;of&nbsp;the&nbsp;dimension&nbsp;or&nbsp;of&nbsp;its&nbsp;first&nbsp;segment.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;GetDimensionStartPoint(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dimension</span>&nbsp;dim&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">try</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;dim.Origin;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">catch</span>(&nbsp;Autodesk.Revit.Exceptions.<span style=\"color:#2b91af;\">ApplicationException</span>&nbsp;ex&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Assert(&nbsp;ex.Message.Equals(&nbsp;<span style=\"color:#a31515;\">&quot;Cannot&nbsp;access&nbsp;this&nbsp;method&nbsp;if&nbsp;this&nbsp;dimension&nbsp;has&nbsp;more&nbsp;than&nbsp;one&nbsp;segment.&quot;</span>&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">DimensionSegment</span>&nbsp;seg&nbsp;<span style=\"color:blue;\">in</span>&nbsp;dim.Segments&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;=&nbsp;seg.Origin;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;p;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Retrieve&nbsp;the&nbsp;start&nbsp;and&nbsp;end&nbsp;points&nbsp;of</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;each&nbsp;dimension&nbsp;segment,&nbsp;based&nbsp;on&nbsp;the&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;dimension&nbsp;origin&nbsp;determined&nbsp;above.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">XYZ</span>&gt;&nbsp;GetDimensionPoints(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dimension</span>&nbsp;dim,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;pStart&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;dimLine&nbsp;=&nbsp;dim.Curve&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;dimLine&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">XYZ</span>&gt;&nbsp;pts&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">XYZ</span>&gt;();\n \n&nbsp;&nbsp;&nbsp;&nbsp;dimLine.MakeBound(&nbsp;0,&nbsp;1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;pt1&nbsp;=&nbsp;dimLine.GetEndPoint(&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;pt2&nbsp;=&nbsp;dimLine.GetEndPoint(&nbsp;1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;direction&nbsp;=&nbsp;pt2.Subtract(&nbsp;pt1&nbsp;).Normalize();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;0&nbsp;==&nbsp;dim.Segments.Size&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;v&nbsp;=&nbsp;0.5&nbsp;*&nbsp;(<span style=\"color:blue;\">double</span>)dim.Value&nbsp;*&nbsp;direction;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pts.Add(&nbsp;pStart&nbsp;-&nbsp;v&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pts.Add(&nbsp;pStart&nbsp;+&nbsp;v&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p&nbsp;=&nbsp;pStart;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">DimensionSegment</span>&nbsp;seg&nbsp;<span style=\"color:blue;\">in</span>&nbsp;dim.Segments&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;v&nbsp;=&nbsp;(<span style=\"color:blue;\">double</span>)&nbsp;seg.Value&nbsp;*&nbsp;direction;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;0&nbsp;==&nbsp;pts.Count)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pts.Add(&nbsp;p&nbsp;=&nbsp;(&nbsp;pStart&nbsp;-&nbsp;0.5&nbsp;*&nbsp;v&nbsp;)&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pts.Add(&nbsp;p&nbsp;=&nbsp;p.Add(&nbsp;v&nbsp;)&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;pts;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Graphical&nbsp;debugging&nbsp;helper&nbsp;using&nbsp;model&nbsp;lines</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;to&nbsp;draw&nbsp;an&nbsp;X&nbsp;at&nbsp;the&nbsp;given&nbsp;position.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">void</span>&nbsp;DrawMarker(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;size,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">SketchPlane</span>&nbsp;sketchPlane&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;size&nbsp;*=&nbsp;0.5;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;v&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">XYZ</span>(&nbsp;size,&nbsp;size,&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;sketchPlane.Document;\n&nbsp;&nbsp;&nbsp;&nbsp;doc.Create.NewModelCurve(&nbsp;<span style=\"color:#2b91af;\">Line</span>.CreateBound(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;-&nbsp;v,&nbsp;p&nbsp;+&nbsp;v&nbsp;),&nbsp;sketchPlane&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;v&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">XYZ</span>(&nbsp;size,&nbsp;-size,&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;doc.Create.NewModelCurve(&nbsp;<span style=\"color:#2b91af;\">Line</span>.CreateBound(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;-&nbsp;v,&nbsp;p&nbsp;+&nbsp;v&nbsp;),&nbsp;sketchPlane&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;Execute(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementSet</span>&nbsp;elements&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIApplication</span>&nbsp;uiapp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIDocument</span>&nbsp;uidoc&nbsp;=&nbsp;uiapp.ActiveUIDocument;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Selection</span>&nbsp;sel&nbsp;=&nbsp;uidoc.Selection;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ISelectionFilter</span>&nbsp;f\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">JtElementsOfClassSelectionFilter</span>&lt;<span style=\"color:#2b91af;\">Dimension</span>&gt;();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;elemRef&nbsp;=&nbsp;sel.PickObject(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ObjectType</span>.Element,&nbsp;f,&nbsp;<span style=\"color:#a31515;\">&quot;Pick&nbsp;a&nbsp;dimension&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dimension</span>&nbsp;dim&nbsp;=&nbsp;doc.GetElement(&nbsp;elemRef&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Dimension</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p&nbsp;=&nbsp;GetDimensionStartPoint(&nbsp;dim&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">XYZ</span>&gt;&nbsp;pts&nbsp;=&nbsp;GetDimensionPoints(&nbsp;dim,&nbsp;p&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;n&nbsp;=&nbsp;pts.Count;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;<span style=\"color:#a31515;\">&quot;Dimension&nbsp;origin&nbsp;at&nbsp;{0}&nbsp;followed&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;by&nbsp;{1}&nbsp;further&nbsp;point{2}{3}&nbsp;{4}&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Util</span>.PointString(&nbsp;p&nbsp;),&nbsp;n,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Util</span>.PluralSuffix(&nbsp;n&nbsp;),&nbsp;<span style=\"color:#2b91af;\">Util</span>.DotOrColon(&nbsp;n&nbsp;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>.Join(&nbsp;<span style=\"color:#a31515;\">&quot;,&nbsp;&quot;</span>,&nbsp;pts.Select(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Util</span>.PointString(&nbsp;q&nbsp;)&nbsp;)&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">double</span>&gt;&nbsp;d&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">double</span>&gt;(&nbsp;n&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;q0&nbsp;=&nbsp;p;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;q&nbsp;<span style=\"color:blue;\">in</span>&nbsp;pts&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Add(&nbsp;q.X&nbsp;-&nbsp;q0.X&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q0&nbsp;=&nbsp;q;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Horizontal&nbsp;distances&nbsp;in&nbsp;metres:&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:blue;\">string</span>.Join(&nbsp;<span style=\"color:#a31515;\">&quot;,&nbsp;&quot;</span>,&nbsp;d.Select(&nbsp;x&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Util</span>.RealString(&nbsp;<span style=\"color:#2b91af;\">Util</span>.FootToMetre(&nbsp;x&nbsp;)&nbsp;)&nbsp;)&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Draw&nbsp;Point&nbsp;Markers&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">SketchPlane</span>&nbsp;sketchPlane&nbsp;=&nbsp;dim.View.SketchPlane;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;size&nbsp;=&nbsp;0.3;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DrawMarker(&nbsp;p,&nbsp;size,&nbsp;sketchPlane&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pts.ForEach(&nbsp;q&nbsp;=&gt;&nbsp;DrawMarker(&nbsp;q,&nbsp;size,&nbsp;sketchPlane&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded;\n&nbsp;&nbsp;}\n</pre>"
  }
]