[
  {
    "original_filename": "1218_element_hidden_view",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1218_element_hidden_view",
    "header_text": "Is a Given Element Hidden in a View?",
    "local_header_href": "#is-a-given-element-hidden-in-a-view",
    "chunk_text": "<h3>Is a Given Element Hidden in a View?</h3><p>Lately, several people have asked about how to determine the visibility of an element relative to a given view crop box.</p><p>Here is a nice little stand-alone method IsElementHiddenInView that can be plugged in to any add-in to answer that question, plus a couple of others as well, shared by\n\nFrode Tørresdal of\n\n<a href=\"https://www.nois.no\">\nNorconsult Informasjonssystemer AS</a>.</p><p>For any given element e and view v, it returns true if e is hidden in v.</p><p>This is determined by performing the following checks:</p><ul>\n<li>Does v have a crop box defined? Does e lies completely outside it? If not, is less that 25 % of the element bounding box contained within the view crop box?</li>\n<li>Is e specifically hidden in the view, by element?</li>\n<li>Is the category of e or one of its parent categories hidden in v?</li>\n</ul><p>Here is the code:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return true if the given element e is hidden</span>\n  <span class=\"gray\">///</span><span class=\"green\"> in the view v. This might be due to:</span>\n  <span class=\"gray\">///</span><span class=\"green\"> - e lies outside the view crop box</span>\n  <span class=\"gray\">///</span><span class=\"green\"> - e is specifically hidden in the view, by element</span>\n  <span class=\"gray\">///</span><span class=\"green\"> - the category of e or one of its parent </span>\n  <span class=\"gray\">///</span><span class=\"green\"> categories is hidden in v.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">bool</span> IsElementHiddenInView(\n    <span class=\"teal\">Element</span> e,\n    <span class=\"teal\">View</span> v )\n  {\n    <span class=\"blue\">if</span>( v.CropBoxActive )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> viewBox = v.CropBox;\n      <span class=\"teal\">BoundingBoxXYZ</span> elBox = e.get_BoundingBox( v );\n \n      <span class=\"teal\">Transform</span> transInv = v.CropBox.Transform.Inverse;\n \n      elBox.Max = transInv.OfPoint( elBox.Max );\n      elBox.Min = transInv.OfPoint( elBox.Min );\n \n      <span class=\"green\">// The transform above might switch </span>\n      <span class=\"green\">// max and min values.</span>\n \n      <span class=\"blue\">if</span>( elBox.Min.X &gt; elBox.Max.X )\n      {\n        <span class=\"teal\">XYZ</span> tmpP = elBox.Min;\n        elBox.Min = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( elBox.Max.X, elBox.Min.Y, 0 );\n        elBox.Max = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( tmpP.X, elBox.Max.Y, 0 );\n      }\n \n      <span class=\"blue\">if</span>( elBox.Min.Y &gt; elBox.Max.Y )\n      {\n        <span class=\"teal\">XYZ</span> tmpP = elBox.Min;\n        elBox.Min = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( elBox.Min.X, elBox.Max.Y, 0 );\n        elBox.Max = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( tmpP.X, elBox.Min.Y, 0 );\n      }\n \n      <span class=\"blue\">if</span>( elBox.Min.X &gt; viewBox.Max.X\n        || elBox.Max.X &lt; viewBox.Min.X\n        || elBox.Min.Y &gt; viewBox.Max.Y\n        || elBox.Max.Y &lt; viewBox.Min.Y )\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"teal\">BoundingBoxXYZ</span> inside = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxXYZ</span>();\n \n        <span class=\"blue\">double</span> x, y;\n \n        x = elBox.Max.X;\n \n        <span class=\"blue\">if</span>( elBox.Max.X &gt; viewBox.Max.X )\n          x = viewBox.Max.X;\n \n        y = elBox.Max.Y;\n \n        <span class=\"blue\">if</span>( elBox.Max.Y &gt; viewBox.Max.Y )\n          y = viewBox.Max.Y;\n \n        inside.Max = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( x, y, 0 );\n \n        x = elBox.Min.X;\n \n        <span class=\"blue\">if</span>( elBox.Min.X &lt; viewBox.Min.X )\n          x = viewBox.Min.X;\n \n        y = elBox.Min.Y;\n \n        <span class=\"blue\">if</span>( elBox.Min.Y &lt; viewBox.Min.Y )\n          y = viewBox.Min.Y;\n \n        inside.Min = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( x, y, 0 );\n \n        <span class=\"blue\">double</span> eBBArea = ( elBox.Max.X - elBox.Min.X )\n          * ( elBox.Max.Y - elBox.Min.Y );\n \n        <span class=\"blue\">double</span> einsideArea =\n          ( inside.Max.X - inside.Min.X )\n          * ( inside.Max.Y - inside.Min.Y );\n \n        <span class=\"blue\">double</span> factor = einsideArea / eBBArea;\n \n        <span class=\"blue\">if</span>( factor &lt; 0.25 )\n          <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n      }\n    }\n \n    <span class=\"blue\">bool</span> hidden = e.IsHidden( v );\n \n    <span class=\"blue\">if</span>( !hidden )\n    {\n      <span class=\"teal\">Category</span> cat = e.Category;\n \n      <span class=\"blue\">while</span>( <span class=\"blue\">null</span> != cat &amp;&amp; !hidden )\n      {\n        hidden = !cat.get_Visible( v );\n        cat = cat.Parent;\n      }\n    }\n    <span class=\"blue\">return</span> hidden;\n  }\n</pre><p>One especially noteworthy feature worth pointing out here is the element bounding box and view crop box comparison:</p><p>To compare the element bounding box with the view crop box, the inverse of the crop box transform needs to be applied.</p><p>It may swap the relative positions of the bounding box min and max values, so we need to check for that and correct it.</p><p>Many thanks to Frode for sharing this.</p><p>I added this method to\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a>\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.113.2\">release 2015.0.113.2</a>.</p>"
  }
]