[
  {
    "original_filename": "1014_room_neighbours",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1014_room_neighbours",
    "header_text": "Room Neighbours",
    "local_header_href": "#room-neighbours",
    "chunk_text": "<h3>Room Neighbours</h3><p>Let's say hello to our neighbours.</p><p>This issue was raised and also solved by Erik Eriksson of\n\n<a href=\"http://www.white.se\">\nWhite Arkitketer AB</a>,\n\nwho wishes to determine the neighbouring rooms for any given room.</p><p>It is an extension of the very early discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/room-and-wall-adjacency.html\">\nroom and wall adjacency</a> from\n\nJanuary 2009 that just looks at determining the neighbouring walls for a given room.</p><p>The Revit API now provides much more powerful tools for this kind of analysis, enabling us to easily go the one step further and find out what the neighbouring room is on the other side of each wall.</p><p>In the sample code presented below, this analysis is only performed in the wall midpoint.\nIt could easily be extended, though, to determine multiple neighbouring rooms on the other side, splitting the wall location line into a separate interval for each.</p><p><strong>Question:</strong> I'm trying to find rooms adjacent to other rooms.</p><p>Basically the pseudocode would be something like this:</p><ul>\n<li>Get all the rooms in the document.</li>\n<li>For each room, find all adjacent rooms (i.e. the room on the other side of the wall) and the wall separating them.</li>\n</ul><p>Is there any method for finding adjacent rooms?\nFirst I was thinking about ReferenceIntersector, but that doesn't work on rooms, right?</p><p>Then I was thinking about using the Room.IsPointInRoom method and providing it with a point that I project out from the wall, but this means iterating over all the rooms for each of the walls for each room.\nThat feels like it's going to take a while for a large project; for instance, given 1000 rooms with 6 walls each would require 6 000 000 iterations.</p><p><strong>Answer:</strong> The API does not provide any direct method for obtaining neighbouring rooms.</p><p>What you suggest sounds like a good starting point for further analysis to me.</p><p>What you need is basically a sort of graph structure.</p><p>You could partition the entire 2D plane on any given level into polygons that fall into one of three classes: within a room, within a wall, or outside the building.\nIf you then shrink away the walls, all the neighbouring room polygons of any given room are its adjacent rooms.</p><p>If you had a 2D geometry library which automatically generated a graph of neighbouring polygons for you, that might be an attractive and reliable way to go.</p><p>How to obtain this data most efficiently without going through the 2D geometrical analysis is not obvious to me either.</p><p>The Room.IsPointInRoom method that you suggest is definitely not a very good candidate, though, since, as you say, it requires you to know which room you are looking for in advance, or test all rooms, as you suggest, a really bad idea.\nYou could also limit the rooms to test to the immediate vicinity of the target room, which would improve performance tremendously, of course.</p><p>A much more efficient algorithm could be based on the Document.GetRoomAtPoint method instead, using points projected out of the target room through the bounding walls a certain small distance into the neighbouring space, because that just requires the input point, not a room, and gives you the neighbouring room.</p><p>One open question is how to decide the number of attempts to make to find different neighbouring rooms on the other side of any one given wall.</p><p>You always know that your rooms are larger than a certain minimum size, because you can simply iterate over them all and find out what the smallest width or height of any room is.</p><p>Therefore, you know that you only need to perform the 'project point through wall and determine neighbour from GetRoomAtPoint' at points at a certain given distance, e.g. every 50 cm or so.</p><p>This is assuming that you do not have really crazily shaped rooms, such as lots of wedges which all meet at a central small circular room, which then might have a large number of neighbours at arbitrarily small distances around its one and only circular wall.</p><p>Here are some related discussions:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/room-and-wall-adjacency.html\">\nRoom and wall adjacency</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/room-and-wall-adjacent-area.html\">\nRoom and wall adjacent area</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/football-and-space-adjacency-for-heat-load-calculation.html\">\nSpace adjacency for heat load calculation</a></li>\n</ul><a name=\"2\"></a><p><strong>Response:</strong> The get room at point method worked great!</p><p>I go through all the boundary segments of all the rooms and see if there is a room on the other side.</p><p>Here is the method that I use to find the room on the other side at the midpoint of a boundary segment:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the neighbouring room to the given one</span>\n  <span class=\"gray\">///</span><span class=\"green\"> on the other side of the midpoint of the given</span>\n  <span class=\"gray\">///</span><span class=\"green\"> boundary segment.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Room</span> GetRoomNeighbourAt(\n    <span class=\"teal\">BoundarySegment</span> bs,\n    <span class=\"teal\">Room</span> r )\n  {\n    <span class=\"teal\">Document</span> doc = r.Document;\n \n    <span class=\"teal\">Wall</span> w = bs.Element <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n \n    <span class=\"blue\">double</span> wallThickness = w.Width;\n \n    <span class=\"blue\">double</span> wallLength = ( w.Location <span class=\"blue\">as</span>\n      <span class=\"teal\">LocationCurve</span> ).Curve.Length;\n \n    <span class=\"teal\">Transform</span> derivatives = bs.Curve\n      .ComputeDerivatives(  0.5, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">XYZ</span> midPoint = derivatives.Origin;\n \n    <span class=\"teal\">Debug</span>.Assert(\n      midPoint.IsAlmostEqualTo(\n        bs.Curve.Evaluate( 0.5, <span class=\"blue\">true</span> ) ),\n      <span class=\"maroon\">\"expected same result from Evaluate and derivatives\"</span> );\n \n    <span class=\"teal\">XYZ</span> tangent = derivatives.BasisX.Normalize();\n \n    <span class=\"teal\">XYZ</span> normal = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( tangent.Y,\n      tangent.X * ( -1 ), tangent.Z );\n \n    <span class=\"teal\">XYZ</span> p = midPoint + wallThickness * normal;\n \n    <span class=\"teal\">Room</span> otherRoom = doc.GetRoomAtPoint( p );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != otherRoom )\n    {\n      <span class=\"blue\">if</span>( otherRoom.Id == r.Id )\n      {\n        normal = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( tangent.Y * ( -1 ),\n          tangent.X, tangent.Z );\n \n        p = midPoint + wallThickness * normal;\n \n        otherRoom = doc.GetRoomAtPoint( p );\n \n        <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> == otherRoom\n            || otherRoom.Id != r.Id,\n          <span class=\"maroon\">\"expected different room on other side\"</span> );\n      }\n    }\n    <span class=\"blue\">return</span> otherRoom;\n  }\n</pre><p>The if-statement makes sure that I'm looking in the correct direction with regard to the wall direction.\nI reverse the vector if the first attempt returns the same room as the one I already have.</p><p>Many thanks to Erik for the discussion and solution to this question!</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1014_room_neighbours",
    "header_text": "Room Neighbour External Command",
    "local_header_href": "#room-neighbour-external-command",
    "chunk_text": "<h4>Room Neighbour External Command</h4><p>I added this code to The Building Coder samples as a new command CmdRoomNeighbours.</p><p>It reports the neighbouring rooms at the midpoints of all the boundary segments of a user-selected set of rooms.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1014_room_neighbours",
    "header_text": "JtSelectorMulti – a Generic Multiple Pre- and Post-Selector Class",
    "local_header_href": "#jtselectormulti-a-generic-multiple-pre-and-post-selector-class",
    "chunk_text": "<h4>JtSelectorMulti – a Generic Multiple Pre- and Post-Selector Class</h4><p>The selection process supports both pre- and post-selection.\nYou can optionally select the rooms before launching the command.\nIf you do not, you will be prompted to do so interactively by the command itself.</p><p>Since I repeatedly mentioned that quite a number of lines of code are required to support pre- and post-selection, I decided to package that into a separate class and implemented a generic templated JtSelectorMulti class for the selection of multiple elements.</p><p>It is templated by the type of element to select.\nYou can also specify the required built-in category (or null for none) and a freely definable filtering method.</p><p>Using that, the pre- and post-selection support in the external command Execute method mainline now just requires these three statements:</p><pre class=\"code\">\n  <span class=\"green\">// Interactively select elements of type Room,</span>\n  <span class=\"green\">// either via pre-selection before launching the</span>\n  <span class=\"green\">// command, or interactively via post-selection.</span>\n \n  <span class=\"teal\">JtSelectorMulti</span>&lt;<span class=\"teal\">Room</span>&gt; selector\n    = <span class=\"blue\">new</span> <span class=\"teal\">JtSelectorMulti</span>&lt;<span class=\"teal\">Room</span>&gt;(\n      uidoc, <span class=\"teal\">BuiltInCategory</span>.OST_Rooms, <span class=\"maroon\">\"room\"</span>,\n      e =&gt; e <span class=\"blue\">is</span> <span class=\"teal\">Room</span> );\n \n  <span class=\"blue\">if</span>( selector.IsEmpty )\n  {\n    <span class=\"blue\">return</span> selector.ShowResult();\n  }\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Room</span>&gt; rooms = selector.Selected;\n</pre><p>Here is the class implementation including some comments:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Select multiple elements of the same type using</span>\n<span class=\"gray\">///</span><span class=\"green\"> either pre-selection, before launching the </span>\n<span class=\"gray\">///</span><span class=\"green\"> command, or post-selection, afterwards.</span>\n<span class=\"gray\">///</span><span class=\"green\"> The element type is determined by the template </span>\n<span class=\"gray\">///</span><span class=\"green\"> parameter. A filtering method must be provided</span>\n<span class=\"gray\">///</span><span class=\"green\"> and is reused for both testing the pre-selection</span>\n<span class=\"gray\">///</span><span class=\"green\"> and defining allowable elements for the post-</span>\n<span class=\"gray\">///</span><span class=\"green\"> selection.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtSelectorMulti</span>&lt;T&gt; <span class=\"blue\">where</span> T : <span class=\"teal\">Element</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Error message in case of invalid pre-selection.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _usage_error = <span class=\"maroon\">\"Please pre-select \"</span>\n    + <span class=\"maroon\">\"only {0}s before launching this command.\"</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Determine whether the given element is a valid </span>\n  <span class=\"gray\">///</span><span class=\"green\"> selectable object. The method passed in is </span>\n  <span class=\"gray\">///</span><span class=\"green\"> reused for both the interactive selection</span>\n  <span class=\"gray\">///</span><span class=\"green\"> filter and the pre-selection validation.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> See below for a sample method.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">delegate</span> <span class=\"blue\">bool</span> <span class=\"teal\">IsSelectable</span>( <span class=\"teal\">Element</span> e );\n \n<span class=\"blue\">  #region</span> Sample common filtering helper method\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Determine whether the given element is valid.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> This specific implementation requires a family </span>\n  <span class=\"gray\">///</span><span class=\"green\"> instance element of the furniture category </span>\n  <span class=\"gray\">///</span><span class=\"green\"> belonging to the named family.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsTable( <span class=\"teal\">Element</span> e )\n  {\n    <span class=\"blue\">bool</span> rc = <span class=\"blue\">false</span>;\n \n    <span class=\"teal\">Category</span> cat = e.Category;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != cat )\n    {\n      <span class=\"blue\">if</span>( cat.Id.IntegerValue.Equals(\n        (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_Furniture ) )\n      {\n        <span class=\"teal\">FamilyInstance</span> fi = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != fi )\n        {\n          <span class=\"blue\">string</span> fname = fi.Symbol.Family.Name;\n \n          rc = fname.Equals( <span class=\"maroon\">\"SampleTableFamilyName\"</span> );\n        }\n      }\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Common filtering helper method</span>\n \n<span class=\"blue\">  #region</span> JtSelectionFilter\n  <span class=\"blue\">class</span> <span class=\"teal\">JtSelectionFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"teal\">Type</span> _t;\n    <span class=\"teal\">BuiltInCategory</span>? _bic;\n    <span class=\"teal\">IsSelectable</span> _f;\n \n    <span class=\"blue\">public</span> JtSelectionFilter(\n      <span class=\"teal\">Type</span> t,\n      <span class=\"teal\">BuiltInCategory</span>? bic,\n      <span class=\"teal\">IsSelectable</span> f )\n    {\n      _t = t;\n      _bic = bic;\n      _f = f;\n    }\n \n    <span class=\"blue\">bool</span> HasBic( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> == _bic\n        || (<span class=\"blue\">null</span> != e.Category\n          &amp;&amp; e.Category.Id.IntegerValue.Equals(\n            (<span class=\"blue\">int</span>) _bic ));\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> e <span class=\"blue\">is</span> T\n        &amp;&amp; HasBic( e )\n        &amp;&amp; _f( e );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// JtSelectionFilter</span>\n \n  <span class=\"teal\">List</span>&lt;T&gt; _selected;\n  <span class=\"blue\">string</span> _msg;\n  <span class=\"teal\">Result</span> _result;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Instantiate and run element selector.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"uidoc\"&gt;</span><span class=\"green\">UIDocument.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"bic\"&gt;</span><span class=\"green\">Built-in category or null.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"description\"&gt;</span><span class=\"green\">Description of the elements to select.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"f\"&gt;</span><span class=\"green\">Validation method.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"blue\">public</span> JtSelectorMulti(\n    <span class=\"teal\">UIDocument</span> uidoc,\n    <span class=\"teal\">BuiltInCategory</span>? bic,\n    <span class=\"blue\">string</span> description,\n    <span class=\"teal\">IsSelectable</span> f )\n  {\n    _selected = <span class=\"blue\">null</span>;\n    _msg = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == doc )\n    {\n      _msg = <span class=\"maroon\">\"Please run this command in a valid\"</span>\n        + <span class=\"maroon\">\" Revit project document.\"</span>;\n      _result = <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// Check for pre-selected elements</span>\n \n    <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n    <span class=\"blue\">int</span> n = sel.Elements.Size;\n \n    <span class=\"blue\">if</span>( 0 &lt; n )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n      {\n        <span class=\"blue\">if</span>( !f( e ) )\n        {\n          _msg = <span class=\"blue\">string</span>.Format(\n            _usage_error, description );\n \n          _result = <span class=\"teal\">Result</span>.Failed;\n        }\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _selected )\n        {\n          _selected = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;T&gt;( n );\n        }\n \n        _selected.Add( e <span class=\"blue\">as</span> T );\n      }\n    }\n \n    <span class=\"green\">// If no elements were pre-selected, </span>\n    <span class=\"green\">// prompt for post-selection</span>\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _selected\n      || 0 == _selected.Count )\n    {\n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Reference</span>&gt; refs = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">try</span>\n      {\n        refs = sel.PickObjects(\n          <span class=\"teal\">ObjectType</span>.Element,\n          <span class=\"blue\">new</span> <span class=\"teal\">JtSelectionFilter</span>( <span class=\"blue\">typeof</span>( T ), bic, f ),\n          <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"Please select {0}s.\"</span>,\n            description ) );\n      }\n      <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n        .<span class=\"teal\">OperationCanceledException</span> )\n      {\n        _result = <span class=\"teal\">Result</span>.Cancelled;\n      }\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != refs &amp;&amp; 0 &lt; refs.Count )\n      {\n        _selected = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;T&gt;(\n          refs.Select&lt;<span class=\"teal\">Reference</span>, T&gt;(\n            r =&gt; doc.GetElement( r.ElementId )\n              <span class=\"blue\">as</span> T ) );\n      }\n    }\n \n    <span class=\"teal\">Debug</span>.Assert(\n      <span class=\"blue\">null</span> == _selected || 0 &lt; _selected.Count,\n      <span class=\"maroon\">\"ensure we return only non-empty collections\"</span> );\n \n    _result = ( <span class=\"blue\">null</span> == _selected )\n      ? <span class=\"teal\">Result</span>.Cancelled\n      : <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return true if nothing was selected.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsEmpty\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> == _selected\n        || 0 == _selected.Count;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the cancellation or failure code</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to Revit and display a message if there</span>\n  <span class=\"gray\">///</span><span class=\"green\"> is anything to say.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> ShowResult()\n  {\n    <span class=\"blue\">if</span>( <span class=\"teal\">Result</span>.Failed == _result )\n    {\n      <span class=\"teal\">Debug</span>.Assert( 0 &lt; _msg.Length,\n        <span class=\"maroon\">\"expected a non-empty error message\"</span> );\n \n      <span class=\"teal\">Util</span>.ErrorMsg( _msg );\n    }\n    <span class=\"blue\">return</span> _result;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return selected elements or null.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">IList</span>&lt;T&gt; Selected\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _selected;\n    }\n  }\n}\n</pre><a name=\"5\"></a>"
  },
  {
    "original_filename": "1014_room_neighbours",
    "header_text": "CmdRoomNeighbours External Command Mainline",
    "local_header_href": "#cmdroomneighbours-external-command-mainline",
    "chunk_text": "<h4>CmdRoomNeighbours External Command Mainline</h4><p>Making use of the <a href=\"#4\">JtSelectorMulti</a> pre- and post-selection and the <a href=\"#2\">GetRoomNeighbourAt</a> method to list the results, here is the complete code of the external command mainline.</p><pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Interactively select elements of type Room,</span>\n  <span class=\"green\">// either via pre-selection before launching the</span>\n  <span class=\"green\">// command, or interactively via post-selection.</span>\n \n  <span class=\"teal\">JtSelectorMulti</span>&lt;<span class=\"teal\">Room</span>&gt; selector\n    = <span class=\"blue\">new</span> <span class=\"teal\">JtSelectorMulti</span>&lt;<span class=\"teal\">Room</span>&gt;(\n      uidoc, <span class=\"teal\">BuiltInCategory</span>.OST_Rooms, <span class=\"maroon\">\"room\"</span>,\n      e =&gt; e <span class=\"blue\">is</span> <span class=\"teal\">Room</span> );\n \n  <span class=\"blue\">if</span>( selector.IsEmpty )\n  {\n    <span class=\"blue\">return</span> selector.ShowResult();\n  }\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Room</span>&gt; rooms = selector.Selected;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; msg = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;();\n \n  <span class=\"blue\">int</span> n = rooms.Count;\n \n  msg.Add( <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} room{1} selected{2}\\r\\n\"</span>,\n    n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n    <span class=\"teal\">Util</span>.DotOrColon( n ) ) );\n \n  <span class=\"teal\">SpatialElementBoundaryOptions</span> opt\n    = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops;\n \n  <span class=\"teal\">Room</span> neighbour;\n  <span class=\"blue\">int</span> i = 0, j, k;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Room</span> room <span class=\"blue\">in</span> rooms )\n  {\n    ++i;\n \n    loops = room.GetBoundarySegments( opt );\n \n    n = loops.Count;\n \n    msg.Add( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"{0}. {1} has {2} loop{3}{4}\"</span>,\n      i, <span class=\"teal\">Util</span>.ElementDescription( room ),\n      n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n      <span class=\"teal\">Util</span>.DotOrColon( n ) ) );\n \n    j = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt; loop <span class=\"blue\">in</span> loops )\n    {\n      ++j;\n \n      n = loop.Count;\n \n      msg.Add( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"  {0}. Loop has {1} boundary segment{2}{3}\"</span>,\n        j, n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n        <span class=\"teal\">Util</span>.DotOrColon( n ) ) );\n \n      k = 0;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">BoundarySegment</span> seg <span class=\"blue\">in</span> loop )\n      {\n        ++k;\n \n        neighbour = GetRoomNeighbourAt( seg, room );\n \n        msg.Add( <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"    {0}. Boundary segment has neighbour {1}\"</span>,\n          k,\n          (<span class=\"blue\">null</span>==neighbour\n            ? <span class=\"maroon\">\"&lt;nil&gt;\"</span>\n            : <span class=\"teal\">Util</span>.ElementDescription( neighbour )) ) );\n      }\n    }\n  }\n \n  <span class=\"teal\">Util</span>.InfoMsg2( <span class=\"maroon\">\"Room Neighbours\"</span>,\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\"\\n\"</span>, msg.ToArray() ) );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre><p>We use read-only transaction mode for this command, since no database modifications are required.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1014_room_neighbours",
    "header_text": "Sample Run and Download",
    "local_header_href": "#sample-run-and-download",
    "chunk_text": "<h4>Sample Run and Download</h4><p>I tested the command selecting room 5 in the following simplistic model:</p><center>\n<img alt=\"Sample model with neighbouring rooms\" src=\"img/ee_room_neighbours_1.png\" width=\"600\"/>\n</center><p>Its neighbouring rooms are listed in a message box and in the Visual Studio debug output window, which reports:</p><pre>\nRoom Neighbours\n\n1 room selected:\n\n1. Room Rooms &lt;197109 Room 5&gt; has 1 loop:\n  1. Loop has 4 boundary segments:\n    1. Boundary segment has neighbour &lt;nil&gt;\n    2. Boundary segment has neighbour Room Rooms &lt;197103 Room 3&gt;\n    3. Boundary segment has neighbour Room Rooms &lt;197112 Room 6&gt;\n    4. Boundary segment has neighbour Room Rooms &lt;197115 Room 7&gt;\n</pre><p>Here is\n\n<a href=\"zip/bc_14_103_0.zip\">\nversion 2014.0.103.0</a> of\n\nThe Building Coder samples source code, Visual Studio solution and RvtSamples include file including the new CmdRoomNeighbours command.</p><p>I hope you find this useful and thank Erik again for raising this issue.</p>"
  }
]