[
  {
    "original_filename": "2038_highlight_link",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!-- https://highlightjs.org/#usage\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n<script>hljs.highlightAll();</script>\n-->\n\n<!-- https://prismjs.com -->\n<link href=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css\" rel=\"stylesheet\" />\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js\"></script>\n<style> code[class*=language-], pre[class*=language-] { font-size : 90%; } </style>\n</head>\n\n<!---\n\n- highlight elements from a linked document\n  https://forums.autodesk.com/t5/revit-api-forum/highlight-elements-from-a-linked-document/td-p/12768033\n\n- Modify Duct Length in Revit API Despite Read-Only Property Constraint\n  https://forums.autodesk.com/t5/revit-api-forum/modify-duct-length-in-revit-api-despite-read-only-property/m-p/12763233\n\n- How to detect is opened preview document in type properties?\n  https://forums.autodesk.com/t5/revit-api-forum/how-to-detect-is-opened-preview-document-in-type-properties/m-p/12768772\n\ntwitter:\n\nHighlighting linked elements using SetReferences, modifying duct length and determining whether a form is displayed using an IsMainWindowActive predicate in the @AutodeskRevit #RevitAPI #BIM @DynamoBIM https://autode.sk/hilitelinkelem\n\nHighlighting linked elements using SetReferences, modifying duct length and determining whether a form is displayed using an IsMainWindowActive predicate...\n\nlinkedin:\n\nHighlighting linked elements using SetReferences, modifying duct length and determining whether a form is displayed using an IsMainWindowActive predicate in the #RevitAPI\n\nhttps://autode.sk/hilitelinkelem\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2038_highlight_link",
    "header_text": "Lengthen Ducts and Highlight Links",
    "local_header_href": "#lengthen-ducts-and-highlight-links",
    "chunk_text": "### Lengthen Ducts and Highlight Links\n\nToday, let's stick with some pure Revit API issues fresh from the forum:\n\n- [Highlight linked element](#2)\n- [Modify duct length](#3)\n- [IsMainWindowActive predicate](#4)"
  },
  {
    "original_filename": "2038_highlight_link",
    "header_text": "Highlight Linked Element",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Highlight Linked Element\n\nLately, Moustafa Khalil very kindly provided a lot of helpful support in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160).\n\nHe now took a step further, sharing his research and explanation on how\nto [highlight elements from a linked document](https://forums.autodesk.com/t5/revit-api-forum/highlight-elements-from-a-linked-document/td-p/12768033),\na frequently raised topic, and even starting a new BIM blog, saying:\n\nThe past 2 days I was scratching my head of how to highlight an element from a linked document.\nI tried different API approaches and found several existing posts requesting this, e.g.:\n\n- [How to select linked element by element Id](https://forums.autodesk.com/t5/revit-api-forum/how-to-select-linked-element-by-element-id/m-p/8245634)\n- [highlight and tag linked elements](https://forums.autodesk.com/t5/revit-api-forum/highlight-and-tag-linked-elements/m-p/5294217)\n- [How to highlight element in Linked model by API](https://forums.autodesk.com/t5/revit-api-forum/how-to-highlight-element-in-linked-model-by-api/m-p/9945959)\n- [High light Link Element](https://forums.autodesk.com/t5/revit-api-forum/high-light-link-element/m-p/11111305)\n- [Can't select elements in a linked model](https://forums.autodesk.com/t5/revit-api-forum/can-t-select-elements-in-a-linked-model/m-p/12681983)\n\nThere is a corresponding wish in the Revit Idea Station:\n\n- [Highlight element selection in linked files](https://forums.autodesk.com/t5/revit-ideas/highlight-element-selection-in-linked-files/idi-p/7619701)\n\nThe good news, after reading over the Revit API docs: it seems this wish has been granted since Revit 2023.\n\nA new `Selection` function called `SetReferences` was added, allowing elements to be highlighted via a set of references.\nI don't often use references to highlight elements, but rather to set hosts, like placing hosted families or extracting element IDs from a `ReferenceIntersector` or when selecting by picking.\n\nSo, if we provide the `SetReferences` function with references from a linked document, will it work?\nYes.\nHowever, some extra work is required to capture such element references.\nFirstly, we need to understand that this function operates on the currently active document.\nThis means that the references we provide must be in a format that the current document can recognize to highlight them in the current view.\n\nLet's attempt to highlight a face from an element in a linked document in the following steps:\n\n- Click on a point over one of the faces in a linked document.\n- Pass this reference to `SetReferences`, and it will highlight the face from the linked document.\n- Similarly, if you press Tab to cycle through line, face, and object, once you reach the object, select it to get the object reference.\n\n<pre><code class=\"language-cs\">var linkedFaceReference = UiDoc.Selection.PickObject(\n  Autodesk.Revit.UI.Selection.ObjectType.PointOnElement\n);\nUiDoc.Selection.SetReferences([linkedFaceReference]);\n</code></pre>\n\nNow, this works when a user interacts with the UI.\nWhat if I have an element ID from a linked document that I want to highlight?\nThe real question then becomes, how can I extract a reference from an `ElementId` that belongs to a linked document?\n\nThis is achievable, but not directly from the `ElementId`;\nwe need to work with the element itself.\nFirst, we need to get the element from the linked document, then create a reference for this element.\nHowever, this reference is only meaningful to the linked document, not the current one.\nWe can convert it to the current document using `CreateLinkReference` and the `RevitLinkInstance`.\nThe code below clearly demonstrates how it functions.\nIf you already have the linked `ElementId`, you can directly start from line 10, without the need for selection:\n\n<pre><code class=\"language-cs\"> var pickedReference = UiDoc.Selection.PickObject(\n  Autodesk.Revit.UI.Selection.ObjectType.PointOnElement\n);\n\n// get Revit link Instance and its document\nvar linkedRvtInstance = Doc.GetElement(pickedReference) as RevitLinkInstance;\nvar linkedDoc = linkedRvtInstance.GetLinkDocument();\n\n//get the Linked element from the linked document\nvar linkedElement = linkedDoc.GetElement(pickedReference.LinkedElementId);\n\n// now create a reference from this element\n// -- this is a reference inside the linked document\nvar reference = new Reference(linkedElement);\n\n// convert the reference to be readable from the current document\nreference = reference.CreateLinkReference(linkedRvtInstance);\n\n// now the linked element is highlighted\nUiDoc.Selection.SetReferences([reference]);\n</code></pre>\n\n<center>\n<img src=\"img/highlight_linked_element.gif\" alt=\"Highlight linked element\" title=\"Highlight linked element\" width=\"599\"/> <!-- Pixel Height: 358 Pixel Width: 599 -->\n</center>\n\nYes, the proposed solution is tested and works for me... I will be glad to know if there are any exception to this methodology.\n\nI have also published this on my fresh starting [Sharp BIM blog](https://sharpbim.hashnode.dev);\nI will usually journal my findings there as well as here in the forum:\n\n- [Highlight elements from a linked document](https://sharpbim.hashnode.dev/highlight-elements-from-a-linked-document)\n\nMany thanks to Moustafa for this clear explanation and demonstration, and for all his other great support in the discussion forum!\n\nBest of luck and much success with your new blog!"
  },
  {
    "original_filename": "2038_highlight_link",
    "header_text": "Modify Duct Length",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Modify Duct Length\n\nMoustafa also helped resolve how\nto [modify duct length in Revit API despite read-only property constraint](https://forums.autodesk.com/t5/revit-api-forum/modify-duct-length-in-revit-api-despite-read-only-property/m-p/12763233):\n\n**Question:**\nI'm wondering if it's possible to alter the length of a duct in Revit through the API.\nUpon trying, I noticed that the duct length property appears to be set as read-only.\nIs there a workaround to modify the duct length?\n\n**Answer:**\nYes, it can be done.\nThe API wraps the UI functionality, so the best way to address this is to determine the optimal workflow and best practices manually in the user interface first.\nHow do you solve this in the UI?\n\nSo, the API does not directly support changing the duct length.\nOne workaround is to delete the existing one and create a new duct with a new length, then update the neighbouring duct length according to that:\n\n<pre><code class=\"language-cs\">  UIDocument uiDoc = commandData.Application.ActiveUIDocument;\n  Document doc = uiDoc.Document;\n\n  Reference refer = uiDoc.Selection.PickObject(Autodesk.Revit.UI.Selection.ObjectType.Element);\n\n  Duct duct = doc.GetElement(refer) as Duct;\n\n  ///New Length Dimension\n  double newLength = UnitUtils.ConvertToInternalUnits(10000,UnitTypeId.Millimeters);\n\n  ///Calculating New Length\n  LocationCurve curve = duct.Location as LocationCurve;\n  XYZ p1 = curve.Curve.GetEndPoint(0);\n  XYZ p2 = p1 + ((curve.Curve as Line).Direction * newLength);\n\n  using (Transaction deleteDuctAndCreateNew = new Transaction(doc, \"Delete Existing Duct and Create New\"))\n  {\n    deleteDuctAndCreateNew.Start();\n\n    //Create New Duct\n    Duct.Create(doc, duct.MEPSystem.GetTypeId(),duct.GetTypeId(), duct.ReferenceLevel.Id, p1, p2);\n\n    doc.Delete(duct.Id);\n\n    deleteDuctAndCreateNew.Commit();\n  }\n</code></pre>\n\n<center>\n<img src=\"img/change_duct_length.gif\" alt=\"Change duct legth\" title=\"Change duct legth\" width=\"600\"/> <!-- Pixel Height: 559 Pixel Width: 999 -->\n</center>\n\nHowever, deleting an existing element means disconnecting it from the System and losing all instance property values such as mark or comment.\n\nI would be more inclined to  only increase the length of the MepCurve (duct, pipe, conduit...etc.):\n\n<pre><code class=\"language-cs\">var locCurve = ductObject.Location as LocationCurve;\nlocCurve.Curve = extendedCurve;\n</code></pre>\n\nIf the duct is connected to neighbouring elements, you can let Revit modify and adapt its length automatically by moving those neighbours and their connection points.\nLook at an exploration of different approaches to modifying pipe length in the blog post series\non [implementing a rolling offset](http://thebuildingcoder.typepad.com/blog/2014/01/final-rolling-offset-using-pipecreate.html).\n\nJust moving the neighbour elements will keep all the connections intact.\n\nTo add another approach, for those MEP curves without neighbour connections:\nWe may also extend the curve directly by its connector, which means no new line or assigning a location curve is needed:\n\n<pre><code class=\"language-cs\">Connector connector = getMyConnector();\ndouble extendby = 1; // extend by 1 feet for example\nXYZ direction = ductCurve.Direction; // assuming the duct is linear curve\nconnector.Origin = connector.Origin + direction * extendby;\n</code></pre>\n\nThank you both, Mohamed Arshad K and Moustafa Khalil, for chipping in on this!"
  },
  {
    "original_filename": "2038_highlight_link",
    "header_text": "IsMainWindowActive Predicate",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> IsMainWindowActive Predicate\n\nAleksandr '@ModPlus' Pekshev raised the question and shared his working solution\nfor [how to detect is opened preview document in type properties](https://forums.autodesk.com/t5/revit-api-forum/how-to-detect-is-opened-preview-document-in-type-properties/m-p/12768772):\n\n**Question:**\nThere is a `Preview` button in the type properties dialog.\nIf you click it, then, as far as I know, a copy of the current document will be created with a new view (I could be wrong here):\n\n<center>\n<img src=\"img/type_properties_preview.png\" alt=\"Type properties preview\" title=\"Type properties preview\" width=\"600\"/> <!-- Pixel Height: 559 Pixel Width: 999 -->\n</center>\n\nThe problem is that in this case `IUpdater` is triggered, which can lead to negative consequences.\n\nQuestion: how can I detect that this Preview is open, or how can I detect that the dialog for editing type properties is open?\n\n**Answer:**\nYou can use the native Windows API to detect that a specific Windows form is open.\nThis can also be done in .NET.\nYou can search for something like [.net detect form open](https://duckduckgo.com/?q=.net+detect+form+open) to learn more.\n\nYou might also try to track the `DocumentChanged` event; Revit creates elements and a view with a persistent name ‘Modify type attributes’.\nThis name is probably language dependent, but Revit does not create any other events:\n\n<center>\n<img src=\"img/revitlookup_documentchanged.png\" DocumentChanged monitor\" title=\"RevitLookup DocumentChanged monitor\" width=\"600\"/> <!-- Pixel Height: 842 Pixel Width: 1,533 -->\n</center>\n\n**Response:**\nI ended up using the built-in Revit API functionality to implement a small auxiliary class to solve it like this:\n\n<pre><code class=\"language-cs\">using System;\nusing System.Runtime.InteropServices;\nusing Autodesk.Revit.UI;\n\n/// <summary>\n/// Initializes a new instance of the <see cref=\"RevitWindowUtils\"/> class.\n/// </summary>\n/// <param name=\"uiApplication\"><see cref=\"UIApplication\"/></param>\npublic class RevitWindowUtils(UIApplication uiApplication)\n{\n  private readonly IntPtr _mainWindowHandle = uiApplication.MainWindowHandle;\n\n  [DllImport(\"user32.dll\")]\n  private static extern IntPtr GetActiveWindow();\n\n  /// <summary>\n  /// Is main Revit window active\n  /// </summary>\n  public bool IsMainWindowActive() => GetActiveWindow() == _mainWindowHandle;\n}\n</code></pre>\n\nI create and store its static instance in the application class, and check it in IUpdater as follows:\n\n<pre><code class=\"language-cs\">public void Execute(UpdaterData data)\n{\n  if (!App.RevitWindowUtils.IsMainWindowActive())\n    return;\n</code></pre>\n\nMany thanks to Aleksandr for this elegant solution."
  }
]