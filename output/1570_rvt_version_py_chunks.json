[
  {
    "original_filename": "1570_rvt_version_py",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- read basic file info using python\n  http://thebuildingcoder.typepad.com/blog/2008/10/rvt-file-version.html#comment-3378524407\n\n- The View from Inside the Factory: What’s Next for Revit 2018\n  http://blogs.autodesk.com/revit/2017/05/18/whats-next-revit-2018\n\nDetermine RVT version using #Python #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/rvt_version_py\n\nWe discussed several approaches to read the <code>BasicFileInfo</code> and RVT OLE storage, aka COM Structured Storage, to retrieve stuff like the file version and preview image, and, more lately, alternative access to BIM data via Forge...\n\n&ndash; \n...\n\n-->"
  },
  {
    "original_filename": "1570_rvt_version_py",
    "header_text": "Determining RVT File Version Using Python",
    "local_header_href": "#determining-rvt-file-version-using-python",
    "chunk_text": "### Determining RVT File Version Using Python\n\nBefore diving into a programming topic, albeit a non-Revit-API one, let me highlight this interesting read \non [The View from Inside the Factory: What’s Next for Revit 2018](http://blogs.autodesk.com/revit/2017/05/18/whats-next-revit-2018),\nwell worthwhile for programmers and non-programmers alike, discussing stuff like:\n\n> The way we develop and deliver Revit software...  what that means to you, and to us, the folks 'inside the factory'...\nagile development and delivery... more frequent releases...\n[Revit Roadmap](https://forums.autodesk.com/t5/revit-roadmaps/bg-p/307)\nand [Revit Ideas Page](https://forums.autodesk.com/t5/revit-ideas/idb-p/302)...\n\nReturning to programming issues, we discussed several approaches to read the `BasicFileInfo` and RVT OLE storage,\naka [COM Structured Storage](https://en.wikipedia.org/wiki/COM_Structured_Storage),\nto retrieve stuff like the file version and preview image, and, more lately, alternative access to BIM data via Forge:\n\n- [RVT file version using Python `rvtver.py`](http://thebuildingcoder.typepad.com/blog/2008/10/rvt-file-version.html)\n- [RFA file version using Python `rvtver.py`](http://thebuildingcoder.typepad.com/blog/2009/06/rfa-version-grey-commands-family-context-and-rdb-link.html#1)\n- [C# Revit OLE Storage viewer](http://thebuildingcoder.typepad.com/blog/2010/06/open-revit-ole-storage.html)\n- [Basic File Info and RVT file version via C# console application](http://thebuildingcoder.typepad.com/blog/2013/01/basic-file-info-and-rvt-file-version.html#5)\n- [Reading an RVT File without Revit](http://thebuildingcoder.typepad.com/blog/2016/02/reading-an-rvt-file-without-revit.html)\n- [External Access to the Revit API](http://thebuildingcoder.typepad.com/blog/2017/05/external-access-to-the-revit-api.html)\n\n<!---\n0887_rvt_file_version.htm\n1407_read_rvt_without_revit.md\n--->\n\n<center>\n<img src=\"img/openrevitolestorage.png\" alt=\"Revit OLE storage\" width=\"567\">\n</center>\n\nFrederic now presented another more efficient Python solution for accessing the RVT file version in\nhis [comment](http://thebuildingcoder.typepad.com/blog/2008/10/rvt-file-version.html#comment-3378524407) on the first post above:\n\n> I recently needed the same functionality, but in a large project file the `BasicFileInfo` was in line 900000 of 3000000 if I remember correctly.\n\n> So, I needed something that accesses the `BasicFileInfo` directly.\n\n> With the external [`olefile` Python package](https://pypi.org/project/olefile) from [pypi.org](https://pypi.org), that was very easy and readable &ndash;\n[check out my gist](https://gist.github.com/hdm-dt-fb/46aa41f5394ed5e8e7055bc7258d2ff1):\n\n<pre class=\"prettyprint\">\nimport os.path as op\nimport olefile\nimport re\n\ndef get_rvt_file_version(rvt_file):\n  if op.exists(rvt_file):\n    if olefile.isOleFile(rvt_file):\n      rvt_ole = olefile.OleFileIO(rvt_file)\n      bfi = rvt_ole.openstream(\"BasicFileInfo\")\n      file_info = bfi.read().decode(\"utf-16le\", \"ignore\")\n      pattern = re.compile(r\"\\d{4}\")\n      rvt_file_version = re.search(pattern, file_info)[0]\n      return rvt_file_version\n    else:\n      print(\"file does not apper to be an ole file: {}\".format(rvt_file))\n  else:\n    print(\"file not found: {}\".format(rvt_file))\n</pre>\n\nThank you very much for sharing this, Frederic!"
  }
]