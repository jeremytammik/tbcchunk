[
  {
    "original_filename": "0524_newfamilyinstance",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0524_newfamilyinstance",
    "header_text": "NewFamilyInstance Overloads",
    "local_header_href": "#newfamilyinstance-overloads",
    "chunk_text": "<h3>NewFamilyInstance Overloads</h3><p>We have discussed a number of issues with finding the right one of the numerous overloads of the NewFamilyInstance method for placing instances of a specific family.\nHere is another question on this, which provides a welcome opportunity to summarise what we have looked at so far:\n\n<p><strong>Question:</strong> I have a case where I want to insert a series of families with a statement like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilyInstance</span> instance =\n    documentProject.Create.NewFamilyInstance(\n      location, symbol,\n      <span class=\"teal\">StructuralType</span>.NonStructural );\n</pre>\n<p>This works fine as long as it is a simple family with an insertion point.  \nIt doesn't work if the family is hosted or if the insertion requires two points.  \nHow can I determine which type of insert the family requires?  \n\n<p><strong>Answer:</strong> You are absolutely right. \nThe NewFamilyInstance method has a number of overloads, and you need to select the correct one depending on various characteristics of the family you are inserting an instance from. \nThis is discussed in the developer guide in section 12.3.5 'Creating FamilyInstance Objects'. \nThe issue has also come up a number of times in the past here on the blog in the following situations:\n\n<!--\n094_insert_column.htm\n096_insert_beam.htm\n149_slanted_column.htm\n152_curved_beam.htm\n200_electrical_and_lighting.htm\n250_nested_family.htm\n289_insert_sprinkler.htm\n337_beam_requires_curve.htm\n388_regen_required.htm\n395_set_tag_type.htm\n412_beam_maker.htm\n428_flex_duct_start_tangent.htm\n450_place_detail_inst.htm\n471_place_site_component.htm > TestAllOverloads\n475_place_furniture.htm\n-->\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-column.html\">Column</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-beam.html\">Beam</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/creating-a-slanted-column.html\">Slanted column</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/creating-a-curved-beam.html\">Curved Beam</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/electrical-settings-and-lighting-fixtures.html\">Lighting fixture</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/nested-family.html\">Nested family</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/insert-facehosted-sprinkler.html\">Face hosted sprinkler</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/beam-requires-curve.html\">All beams require a curve</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/to-regenerate-or-not-to-regenerate.html\">Regeneration after placement</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">Door and door tag</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/beam-maker-using-a-void-extrusion-to-cut.html\">Beam with a void</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/flex-duct-start-tangent.html\">Flex duct and fitting</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/place-detail-instance.html\">Detail instance</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/place-site-component.html\">Site component</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/place-furniture-instance.html\">Furniture</a>\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<p>The second-last post includes the definition of a method named \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/place-site-component.html\">\nTestAllOverloads</a> which \n\nenables you to try out all possible overloads of the NewFamilyInstance method to see which one works best for a specific family.\n\n<p>The best hint of all was provided \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/newfamilyinstance-overloads.html?cid=6a00e553e1689788330167650dbed9970b#comment-6a00e553e1689788330167650dbed9970b\">\nbelow</a> by \n\n<a href=\"http://www.youtube.com/user/rolandohijar/videos\">\nRolando Hijar</a> after \n\nthe initial publication of this.\nHe points out that the hosting behavior of a family can be determined by accessing the built-in parameter FAMILY_HOSTING_BEHAVIOR:\n\n<pre class=\"code\">\n  int hosttype \n    = family.get_Parameter(\n      BuiltInParameter.FAMILY_HOSTING_BEHAVIOR )\n      .AsInteger();\n</pre>\n<p>I hope these examples give you enough to get started with, at least!\n</p></p></p></p></p></p></p>"
  }
]