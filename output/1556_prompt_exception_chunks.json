[
  {
    "original_filename": "1556_prompt_exception",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n- 12953375 [Revit API UIDocument.PromptForFamilyInstancePlacement Issue]\n\n- 12965336 [Revit 2018 API - Undocumented Changes - Have you found any?]\n  https://forums.autodesk.com/t5/revit-api-forum/revit-2018-api-undocumented-changes-have-you-found-any/m-p/7074819\n\nPrompt Cancel Throws Exception in Revit 2018 @AutodeskForge #ForgeDevCon #RevitAPI @AutodeskRevit #adsk #aec #bim #dynamobim http://bit.ly/prompt_exception\n\nIn Revit 2018, cancelling family instance placement during a call to <code>PromptForFamilyInstancePlacement</code> throws an <code>OperationCanceledException</code> exception\n&ndash; Easily fixed, once discovered\n&ndash; Question\n&ndash; Change in Behaviour\n&ndash; Exceptions Should be Exceptional\n&ndash; Answer\n&ndash; The Building Coder samples <code>CmdPlaceFamilyInstance</code>...\n\n-->"
  },
  {
    "original_filename": "1556_prompt_exception",
    "header_text": "Prompt Cancel Throws Exception in Revit 2018",
    "local_header_href": "#prompt-cancel-throws-exception-in-revit-2018",
    "chunk_text": "### Prompt Cancel Throws Exception in Revit 2018\n\nI just picked up an ADN case on a topic that was already raised yesterday in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [Revit 2018 API undocumented changes](https://forums.autodesk.com/t5/revit-api-forum/revit-2018-api-undocumented-changes-have-you-found-any/m-p/7074819),\nso it is definitely worth highlighting here as well:\n\n- [Question](#3)\n- [Change in behaviour](#4)\n- [Exceptions should be exceptional](#5)\n- [Answer](#6)\n- [The Building Coder samples `CmdPlaceFamilyInstance`](#7)"
  },
  {
    "original_filename": "1556_prompt_exception",
    "header_text": "<a name=\"3\"></a>Question",
    "local_header_href": "#a-name3aquestion",
    "chunk_text": "#### <a name=\"3\"></a>Question\n\nA bug may have been introduced into the Revit 2018 API `UIDocument` `PromptForFamilyInstancePlacement` method.\n\nIn Revit 2017, hitting the `Escape` key twice after placing the families would end the command.\n\nIn Revit 2018, hitting the `Escape` key twice generates an `OperationCanceledException` and all the elements that were just placed are deleted.\n\nThe problem can be observed by comparing the behaviour of the Revit 2017 SDK `PlacementOptions` sample add-in with the Revit 2018 SDK version of the `PlacementOptions` sample add-in."
  },
  {
    "original_filename": "1556_prompt_exception",
    "header_text": "<a name=\"4\"></a>Change in Behaviour",
    "local_header_href": "#a-name4achange-in-behaviour",
    "chunk_text": "#### <a name=\"4\"></a>Change in Behaviour\n\nMatt Taylor describes the situation differently in\nhis [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [Revit 2018 API undocumented changes](https://forums.autodesk.com/t5/revit-api-forum/revit-2018-api-undocumented-changes-have-you-found-any/m-p/7074819):\n\nEach year I upgrade my codebase for use with the new version of Revit. Each year, I rid my code of deprecated and/or obsolete function warnings/errors.\n\nEach year I seem to find an undocumented change in the way the Revit API works.\n \n'The Factory', can we *please* have a more detailed and complete list of changes? Can you add this change to the documentation, please?\n \nMy 'find' this year is a change in the way `PromptForFamilyInstancePlacement` works.\n\nThis function used to just return focus to your function upon cancelling by the Reviteer.\n\nIn Revit 2018, cancelling of this function by your Reviteers throws an `Exceptions.OperationCanceledException` [sic] exception.\n\nEasily fixed, once discovered:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">Try</span>\n&nbsp;&nbsp;docUi.PromptForFamilyInstancePlacement(FamilySymbol)\n<span style=\"color:blue;\">Catch</span>&nbsp;ex&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Exceptions.<span style=\"color:#2b91af;\">OperationCanceledException</span>\n&nbsp;&nbsp;<span style=\"color:green;\">&#39;&nbsp;The&nbsp;user&nbsp;cancelled&nbsp;placement.</span>\n&nbsp;&nbsp;<span style=\"color:green;\">&#39;&nbsp;This&nbsp;should&nbsp;only&nbsp;trigger&nbsp;in&nbsp;Revit&nbsp;2018.</span>\n&nbsp;&nbsp;<span style=\"color:green;\">&#39;&nbsp;Do&nbsp;something&nbsp;if&nbsp;you&nbsp;like</span>\n<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Try</span>\n</pre>\n \nThis change even makes sense!\n\nIt's a good idea!\n\nIt also fills me with dread. What else is going to throw an exception unexpectedly?\n\nWhat other changes are there?\n\n(Yes, I know that this item\nis [*vaguely* alluded to in the 'what's new' document](http://thebuildingcoder.typepad.com/blog/2017/04/whats-new-in-the-revit-2018-api.html#2.7),\nbut it's not documented anywhere.)\n \nHave you found any hidden 'treasures' that you want to share?"
  },
  {
    "original_filename": "1556_prompt_exception",
    "header_text": "<a name=\"5\"></a>Exceptions Should be Exceptional",
    "local_header_href": "#a-name5aexceptions-should-be-exceptional",
    "chunk_text": "#### <a name=\"5\"></a>Exceptions Should be Exceptional\n\nGreg '[Sherbs]()' adds a very valid additional point:\n\nYikes!\n\nGood catch!\n\nThis is more than a bit concerning.\n\nUndocumented exceptions are generally going to be application fatal.\n\nI hope this sort of thing can be addressed more systematically in upcoming releases.\n\nRegarding the specific find, my opinion differs:\n \nThere really is nothing 'exceptional' or 'unexpected' here.\n\nCancelling placement may be infrequent, but it is an entirely normal user action.\n\nWhy even throw in this case at all? \n \nI'm not terribly passionate about this, just throwing out another viewpoint.\n\nI'm a bit of minimalist when it comes to the use of exceptions. \n\n<center>\n<img src=\"img/interrupt_process.png\" alt=\"Interrupt Process\" width=\"435\">\n<p style=\"font-size:smaller\">By <a href=\"//commons.wikimedia.org/wiki/User:Anon_lynx\" title=\"User:Anon lynx\">Stephen Charles Thompson</a> &ndash; <span class=\"int-own-work\" lang=\"en\">Own work</span>, <a href=\"http://creativecommons.org/licenses/by-sa/3.0\" title=\"Creative Commons Attribution-Share Alike 3.0\">CC BY-SA 3.0</a>, <a href=\"https://commons.wikimedia.org/w/index.php?curid=23385273\">Link</a></p>\n</center>"
  },
  {
    "original_filename": "1556_prompt_exception",
    "header_text": "<a name=\"6\"></a>Answer",
    "local_header_href": "#a-name6aanswer",
    "chunk_text": "#### <a name=\"6\"></a>Answer\n\nMany thanks to Matt for pointing this out!\n \nI would say that this change in behaviour is *precisely* alluded to, not *vaguely*, in the documentation\nof [What's New in the Revit 2018 API](http://thebuildingcoder.typepad.com/blog/2017/04/whats-new-in-the-revit-2018-api.html) section \non [UIDocument.PromptForFamilyInstancePlacement() behavioral change](http://thebuildingcoder.typepad.com/blog/2017/04/whats-new-in-the-revit-2018-api.html#2.7):\n\n> The behavior for UIDocument.PromptForFamilyInstancePlacement() was changed to be same as that of PickObject() methods...\n \nRaising the exception you mention corresponds exactly to the `PickPoint` behaviour.\n \nHowever, just as you say, the detailed consequences are not explicitly spelled out.\n \nI also fully agree with Greg's statement:\n[exceptions should be exceptional](http://jacopretorius.net/2009/10/exceptions-should-be-exceptional.html).\n \nExpected behaviour should not be communicated using exceptions.\n \nI have been preaching this for years to little avail:\n\n- [Fixing RvtMgdDbg for MEP Connectors](http://thebuildingcoder.typepad.com/blog/2009/08/fixing-rvtmgddbg-for-mep-connectors.html)\n- [Duplicate Mark Values](http://thebuildingcoder.typepad.com/blog/2010/03/duplicate-mark-values.html)\n- [Selecting Model Elements](http://thebuildingcoder.typepad.com/blog/2010/10/selecting-model-elements.html)\n- [Language Independent Subcategory Creation](http://thebuildingcoder.typepad.com/blog/2011/01/language-independent-subcategory-creation.html)\n- [Exporting Parameter Data to Excel, and Re-importing](http://thebuildingcoder.typepad.com/blog/2012/09/exporting-parameter-data-to-excel.html)\n- [Parameter DisplayUnitType, Bretagne and Decompilers](http://thebuildingcoder.typepad.com/blog/2013/03/parameter-displayunittype-and-decompilers.html)\n- [External Command Lister and Adding Ribbon Commands](http://thebuildingcoder.typepad.com/blog/2013/05/external-command-lister-and-adding-ribbon-commands.html)\n- [The Pick Point Methods Throw an Exception on Cancel](http://thebuildingcoder.typepad.com/blog/2014/09/planes-projections-and-picking-points.html#07)\n- [Never Catch All Exceptions](http://thebuildingcoder.typepad.com/blog/2017/02/revitlookup-using-reflection-for-cross-version-compatibility.html#12)\n\nTo answer the original [question](#3) raised above: You need to catch and handle (or ignore) the `OperationCanceledException` as shown by Matt.\n\nIf you code does not, your transaction will presumably not be committed.\n\nThe family instances that were successfully placed before the user cancelled the placement and the exception was thrown are probably removed as the transaction is rolled back.\n\nNo bug, just a change in behaviour.\n\nI hope this clarifies and all is now illuminated."
  },
  {
    "original_filename": "1556_prompt_exception",
    "header_text": "<a name=\"7\"></a>The Building Coder Samples CmdPlaceFamilyInstance",
    "local_header_href": "#a-name7athe-building-coder-samples-cmdplacefamilyinstance",
    "chunk_text": "#### <a name=\"7\"></a>The Building Coder Samples CmdPlaceFamilyInstance\n\nI implemented\nthe [external command CmdPlaceFamilyInstance](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdPlaceFamilyInstance.cs)\nin [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples) to\nexercise the `PromptForFamilyInstancePlacement` method when it was originally introduced.\n\nIt also includes code using the `DocumentChanged` event\nto [retrieve the newly created elements](http://thebuildingcoder.typepad.com/blog/2010/06/place-family-instance.html).\n\nI updated it to handle the `OperationCanceledException` as shown by Matt \nin [release 2018.0.132.2](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2018.0.132.2).\n\nHere is the [diff to the preceding release](https://github.com/jeremytammik/the_building_coder_samples/compare/2018.0.132.1...2018.0.132.2) that\nshows exactly what modifications were made; simply add an exception handler around the call to `PromptForFamilyInstancePlacement`:\n\n<pre class=\"code\">\n  <span style=\"color:blue;\">try</span>\n  {\n  &nbsp;&nbsp;uidoc.PromptForFamilyInstancePlacement(&nbsp;symbol&nbsp;);\n  }\n  <span style=\"color:blue;\">catch</span>(&nbsp;Autodesk.Revit.Exceptions.<span style=\"color:#2b91af;\">OperationCanceledException</span>&nbsp;ex&nbsp;)\n  {\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;ex.Message&nbsp;);\n  }\n</pre>\n\n\n<center>\n<img src=\"img/the_exception.jpg\" alt=\"The Exception\" width=\"220\">\n</center>"
  }
]