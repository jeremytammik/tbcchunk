[
  {
    "original_filename": "0223_install_location",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0223_install_location",
    "header_text": "Revit Install Location",
    "local_header_href": "#revit-install-location",
    "chunk_text": "<h3>Revit Install Location</h3><p>Quite a while back, we discussed the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/revit-install-path-and-product-guids.html\">\nRevit install path and product GUIDs</a>.\n\nLast week, Jim Bish of\n\n<a href=\"http://www.inlettechnology.com\">\nInlet Technology</a> wrote me a nice message making use of that and including VB code demonstrating how to use the install path and also how to determine the product GUID from the registry without having to manually type it in or copy and paste it from a table.\n\n<p><strong>Jim says</strong>: It has always been my policy to give back to others as they have given to me.\nHere are two functions that will retrieve the ProductCode and subsequently, the InstallLocation of Revit Structure 2010.  It can be modified for any install of Revit, and is primarily used to get a path to the revit.ini file for Appends, and Repairs, and Uninstalls of my External Commands and External Applications.\n\n<pre class=\"code\">\n<span class=\"blue\">Public</span> <span class=\"blue\">Function</span> GetRevitProductCode()\n\n  <span class=\"blue\">Dim</span> key <span class=\"blue\">As</span> <span class=\"blue\">String</span> _\n    = <span class=\"maroon\">\"SOFTWARE\\Autodesk\\Revit\\Autodesk Revit Structure 2010\"</span>\n\n  <span class=\"blue\">Using</span> rgk1 <span class=\"blue\">As</span> RegistryKey _\n    = Registry.LocalMachine.OpenSubKey(key)\n\n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> sSubkeyName <span class=\"blue\">As</span> <span class=\"blue\">String</span> <span class=\"blue\">In</span> _\n      rgk1.GetSubKeyNames()\n\n      <span class=\"blue\">Using</span> rgk2 <span class=\"blue\">As</span> RegistryKey _\n        = rgk1.OpenSubKey(sSubkeyName)\n\n        <span class=\"blue\">Try</span>\n          <span class=\"blue\">Return</span> rgk2.GetValue(<span class=\"maroon\">\"ProductCode\"</span>)\n        <span class=\"blue\">Catch</span> generatedExceptionName <span class=\"blue\">As</span> Exception\n          Console.WriteLine(<span class=\"maroon\">\"Error Occured\"</span>)\n        <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n\n      <span class=\"blue\">End</span> <span class=\"blue\">Using</span>\n    <span class=\"blue\">Next</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Using</span>\n<span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n\n<span class=\"blue\">Public</span> <span class=\"blue\">Function</span> GetRevitInstallLocation( _\n  <span class=\"blue\">ByVal</span> sProdCode <span class=\"blue\">As</span> <span class=\"blue\">String</span>)\n\n  <span class=\"blue\">Dim</span> key <span class=\"blue\">As</span> <span class=\"blue\">String</span> _\n    = <span class=\"maroon\">\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"</span>\n\n  <span class=\"blue\">Using</span> rgk1 <span class=\"blue\">As</span> RegistryKey _\n    = Registry.LocalMachine.OpenSubKey(key)\n\n    <span class=\"blue\">Using</span> rgk2 <span class=\"blue\">As</span> RegistryKey _\n      = rgk1.OpenSubKey(sProdCode)\n\n      <span class=\"blue\">Try</span>\n        <span class=\"blue\">Return</span> rgk2.GetValue(<span class=\"maroon\">\"InstallLocation\"</span>)\n      <span class=\"blue\">Catch</span> generatedExceptionName <span class=\"blue\">As</span> Exception\n        Console.WriteLine(<span class=\"maroon\">\"Error Occured\"</span>)\n      <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n\n    <span class=\"blue\">End</span> <span class=\"blue\">Using</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Using</span>\n<span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre>\n<p>I used these two functions as a basis for implementing a new Building Coder sample command CmdInstallLocation to ensure that this useful functionality is easily found and available.\nIt determines and lists the product code and the install location for the currently executing Revit application and also tries to do so for all three flavours, Architecture, MEP and Structure.\nOn my system, the result of running it looks like this:</p>\n<center>\n<img alt=\"Revit install locations\" src=\"img/install_location.png\"/>\n</center>\n<p>I factored out various useful bits of functionality from Jim's code as follows:\n\n<p>Define the Revit product and Windows uninstall registry paths:</p>\n<pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _reg_path_uninstall\n  = <span class=\"maroon\">@\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\"</span>;\n \n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _reg_path_for_flavour\n  = <span class=\"maroon\">@\"SOFTWARE\\Autodesk\\Revit\\Autodesk Revit {0} 2010\"</span>;\n</pre>\n<p>Note that the registry path for the Revit product is actually a format string which still needs to be populated with the Revit product flavour.\nThe correct string to specify the flavour can be obtained directly from the ProductType enumeration.\nWe use it in the following function which returns the final Revit product registry path:</p>\n<pre class=\"code\">\n<span class=\"blue\">string</span> RegPathForFlavour( <span class=\"teal\">ProductType</span> flavour )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( _reg_path_for_flavour, flavour );\n}\n</pre>\n<p>We also need methods to extract data from the registry.\nIn one case, we use the Revit product registry path to determine the product key, which is located in the value named ProductCode in the subkey named Components.\nIn the other case, we determine the Revit install location from the value named InstallLocation in the subkey specified by the product code in the Windows uninstall key.\nBoth of these values' data type is string.\nDue to these two similar access paths, I can implement one single function to read the data:</p>\n<pre class=\"code\">\n<span class=\"blue\">string</span> GetSubkeyValue(\n  <span class=\"blue\">string</span> reg_path_key,\n  <span class=\"blue\">string</span> subkey_name,\n  <span class=\"blue\">string</span> value_name )\n{\n  <span class=\"blue\">using</span>( <span class=\"teal\">RegistryKey</span> key\n    = <span class=\"teal\">Registry</span>.LocalMachine.OpenSubKey( reg_path_key ) )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">RegistryKey</span> subkey\n      = key.OpenSubKey( subkey_name ) )\n    {\n      <span class=\"blue\">return</span> subkey.GetValue( value_name ) <span class=\"blue\">as</span> <span class=\"blue\">string</span>;\n    }\n  }\n}\n</pre>\n<p>Defined like this, making use of the method for the two cases described above is extremely simple:</p>\n<pre class=\"code\">\n<span class=\"blue\">string</span> GetRevitProductCode( <span class=\"blue\">string</span> reg_path_product )\n{\n  <span class=\"blue\">return</span> GetSubkeyValue( reg_path_product,\n    <span class=\"maroon\">\"Components\"</span>, <span class=\"maroon\">\"ProductCode\"</span> );\n}\n \n<span class=\"blue\">string</span> GetRevitInstallLocation( <span class=\"blue\">string</span> product_code )\n{\n  <span class=\"blue\">return</span> GetSubkeyValue( _reg_path_uninstall,\n    product_code, <span class=\"maroon\">\"InstallLocation\"</span> );\n}\n</pre>\n<p>We define a little helper method to format the data obtained for presentation in the message box:</p>\n<pre class=\"code\">\n<span class=\"blue\">string</span> FormatData(\n  <span class=\"blue\">string</span> description,\n  <span class=\"blue\">string</span> version_name,\n  <span class=\"blue\">string</span> product_code,\n  <span class=\"blue\">string</span> install_location )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format\n    ( <span class=\"maroon\">\"{0}: {1}\"</span>\n    + <span class=\"maroon\">\"\\nProduct code: {2}\"</span>\n    + <span class=\"maroon\">\"\\nInstall location: {3}\"</span>,\n    description,\n    version_name,\n    product_code,\n    install_location );\n}\n</pre>\n<p>Finally we can put it all together into the mainline code of our external command's Execute function.\nFirst, we look at the currently executing Revit application.\nThe application Product property provides the ProductType, which can be used to obtain the registry path for this flavour of Revit, determine its product code and from that the install location.\nNext we loop through all three ProductType enumeration values and check for other installed flavours of Revit as well.\nThe final result is displayed in the message box shown above:</p>\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n \n<span class=\"blue\">string</span> reg_path_product\n  = RegPathForFlavour( app.Product );\n \n<span class=\"blue\">string</span> product_code\n  = GetRevitProductCode( reg_path_product );\n \n<span class=\"blue\">string</span> install_location\n  = GetRevitInstallLocation( product_code );\n \n<span class=\"blue\">string</span> msg = FormatData(\n  <span class=\"maroon\">\"Running application\"</span>,\n  app.VersionName,\n  product_code,\n  install_location );\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">ProductType</span> p <span class=\"blue\">in</span>\n  <span class=\"teal\">Enum</span>.GetValues( <span class=\"blue\">typeof</span>( <span class=\"teal\">ProductType</span> ) ) )\n{\n  <span class=\"blue\">try</span>\n  {\n    reg_path_product = RegPathForFlavour( p );\n \n    product_code = GetRevitProductCode(\n      reg_path_product );\n \n    install_location = GetRevitInstallLocation(\n      product_code );\n \n    msg += FormatData(\n      <span class=\"maroon\">\"\\n\\nInstalled product\"</span>,\n      p.ToString(),\n      product_code,\n      install_location );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n  }\n}\n \n<span class=\"teal\">Util</span>.InfoMsg( msg );\n \n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n</pre>\n<p>Here is\n\n<a href=\"zip/bc11048.zip\">\nversion 1.1.0.48</a>\n\nof the complete Building Coder sample source code and Visual Studio solution including the new command.</p>\n<p>Many thanks to Jim for providing the original VB code snippets and the idea for this post!</p>\n</p></p></p>"
  }
]