[
  {
    "original_filename": "0542_pimp_my_ribbon",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0542_pimp_my_ribbon",
    "header_text": "Pimp my AutoCAD or Revit Ribbon",
    "local_header_href": "#pimp-my-autocad-or-revit-ribbon",
    "chunk_text": "<h3>Pimp my AutoCAD or Revit Ribbon</h3><p>Here is another fun possibility to access and manipulate the Revit ribbon explored by Rudolf Honke of\n\n<a href=\"http://www.acadgraph.de\">\nacadGraph CADstudio GmbH</a>.\n\nHe says:\n\n<p>I've played around and found a possibility to modify the appearance of the AutoCAD and Revit ribbon bars.\n\n<p>This is the Revit ribbon bar in its usual colour scheme:</p>\n<center>\n<img alt=\"Revit ribbon colour scheme\" src=\"img/rh_pimp_ribbon_1.png\" width=\"400\"/>\n</center>\n<p>Now let's change the panel background image and panel headers:</p>\n<center>\n<img alt=\"Modified background image and panel headers\" src=\"img/rh_pimp_ribbon_2.png\" width=\"400\"/>\n</center>\n<p>What about using a gradient fill and changing the tab header font:</p>\n<center>\n<img alt=\"Gradient fill and different tab header font\" src=\"img/rh_pimp_ribbon_3.png\" width=\"400\"/>\n</center>\n<p>The style is persistent, even if you tear off the panels:</p>\n<center>\n<img alt=\"Free-floating panels\" src=\"img/rh_pimp_ribbon_4a.png\"/>\n<img alt=\"Free-floating panels\" src=\"img/rh_pimp_ribbon_4b.png\"/>\n</center>\n<p>You can use different styles in different panels:</p>\n<center>\n<img alt=\"Different styles in different panels\" src=\"img/rh_pimp_ribbon_5.png\"/>\n</center>\n<p>So, how to get there?\n\n<p>First, add new references to your VS project:\n\n<ul>\n<li>AdWindows.dll\n<li>UIFramework.dll\n</li></li></ul>\n<p>You can find them in the same folder as RevitAPI.dll.\n\n<p>Possibly some other references need to be included as well.\nHere is a complete list of the references in my project, although some of them may not be needed for UI customizing purposes:</p>\n<center>\n<img alt=\"UI customisation references\" src=\"img/rh_pimp_ribbon_refs.png\"/>\n</center>\n<p>Now add this to your ExternalApplication class:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> System.Reflection; <span class=\"green\">// for getting the assembly path</span>\n<span class=\"blue\">using</span> System.Windows.Media; <span class=\"green\">// for the graphics</span>\n<span class=\"blue\">using</span> System.Windows.Media.Imaging;\n \n<span class=\"green\">// use an alias because Autodesk.Revit.UI </span>\n<span class=\"green\">// uses classes which have same names:</span>\n \n<span class=\"blue\">using</span> adWin = Autodesk.Windows;\n</pre>\n<p>Then insert this into your OnStartup method:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  <span class=\"blue\">try</span>\n  {\n    adWin.<span class=\"teal\">RibbonControl</span> ribbon \n      = adWin.<span class=\"teal\">ComponentManager</span>.Ribbon;\n \n    <span class=\"teal\">ImageSource</span> imgbg = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>( \n      <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( <span class=\"teal\">Path</span>.Combine( \n        <span class=\"teal\">Path</span>.GetDirectoryName( \n          <span class=\"teal\">Assembly</span>.GetExecutingAssembly().Location ), \n        <span class=\"maroon\">\"yourBackGroundPicture.jpg\"</span> ),\n        <span class=\"teal\">UriKind</span>.Relative ) );\n \n    <span class=\"green\">// define an image brush</span>\n \n    <span class=\"teal\">ImageBrush</span> picBrush = <span class=\"blue\">new</span> <span class=\"teal\">ImageBrush</span>(); \n    picBrush.ImageSource = imgbg;\n    picBrush.AlignmentX = <span class=\"teal\">AlignmentX</span>.Left;\n    picBrush.AlignmentY = <span class=\"teal\">AlignmentY</span>.Top;\n    picBrush.Stretch = <span class=\"teal\">Stretch</span>.None;\n    picBrush.TileMode = <span class=\"teal\">TileMode</span>.FlipXY;\n \n    <span class=\"green\">// define a linear brush from top to bottom</span>\n \n    <span class=\"teal\">LinearGradientBrush</span> gradientBrush \n      = <span class=\"blue\">new</span> <span class=\"teal\">LinearGradientBrush</span>(); \n \n    gradientBrush.StartPoint \n      = <span class=\"blue\">new</span> System.Windows.<span class=\"teal\">Point</span>( 0, 0 );\n \n    gradientBrush.EndPoint \n      = <span class=\"blue\">new</span> System.Windows.<span class=\"teal\">Point</span>( 0, 1 );\n \n    gradientBrush.GradientStops.Add( \n      <span class=\"blue\">new</span> <span class=\"teal\">GradientStop</span>( <span class=\"teal\">Colors</span>.White, 0.0 ) );\n \n    gradientBrush.GradientStops.Add( \n      <span class=\"blue\">new</span> <span class=\"teal\">GradientStop</span>( <span class=\"teal\">Colors</span>.Blue, 1 ) );\n \n    <span class=\"green\">// change the tab header font</span>\n \n    ribbon.FontFamily = <span class=\"blue\">new</span> System.Windows.Media\n      .<span class=\"teal\">FontFamily</span>( <span class=\"maroon\">\"Bauhaus 93\"</span> ); \n \n    ribbon.FontSize = 10;\n \n    <span class=\"green\">// iterate through the tabs and their panels</span>\n \n    <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonTab</span> tab <span class=\"blue\">in</span> ribbon.Tabs )\n    {\n      <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonPanel</span> panel <span class=\"blue\">in</span> tab.Panels )\n      {\n        panel.CustomPanelTitleBarBackground \n          = gradientBrush;\n \n        panel.CustomPanelBackground \n          = picBrush; <span class=\"green\">// use your picture</span>\n \n        <span class=\"green\">//panel.CustomPanelBackground </span>\n        <span class=\"green\">//  = gradientBrush; // use your gradient fill</span>\n      }\n    }\n    adWin.<span class=\"teal\">ComponentManager</span>.UIElementActivated += <span class=\"blue\">new</span> \n      <span class=\"teal\">EventHandler</span>&lt;adWin.<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;( \n        ComponentManager_UIElementActivated );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    winform.<span class=\"teal\">MessageBox</span>.Show( \n      ex.StackTrace + <span class=\"maroon\">\"\\r\\n\"</span> + ex.InnerException, \n      <span class=\"maroon\">\"Error\"</span>, winform.<span class=\"teal\">MessageBoxButtons</span>.OK );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>You can access the items inside the panels like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonItem</span> item \n    <span class=\"blue\">in</span> panel.Source.Items )\n  {\n    . . .\n  }\n</pre>\n<p>Note that each tab, panel, or item provides event handlers, so you can subscribe to their events like this:\n\n<pre class=\"code\">\n  tab.Activated \n    += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>(tab_Activated);\n \n  panel.PropertyChanged \n    += <span class=\"blue\">new</span> PropertyChangedEventHandler(\n      panel_PropertyChanged);\n \n  item.PropertyChanged \n    +=<span class=\"blue\">new</span> PropertyChangedEventHandler(\n      item_PropertyChanged);\n</pre>\n<p>There are many undiscovered properties in the Revit Ribbon classes, so feel free to explore them on your own (and tell us your discoveries).\n\n<p>By the way, AutoCAD 2011 also includes the AdWindows.dll assembly, but there is no UIFramework.dll in the AutoCAD program folder (using AutoCAD MEP 2011).\n\n<p>Using the AdWindows.dll assembly, we can access the ribbon control like this:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> Autodesk.Windows;\n\nRibbonControl ribbon = ComponentManager.Ribbon;\n</pre>\n<p>Since both AutoCAD and Revit include the AdWindows.dll assembly, there are actually two ways to access to the ribbon control in Revit;\neither using AdWindows.dll or UIFramework.dll, respectively:\n\n<pre class=\"code\">\n  <span class=\"green\">// like in AutoCAD:</span>\n \n  RibbonControl ribbon = ComponentManager.Ribbon; \n \n  <span class=\"green\">// also possible, but requires </span>\n  <span class=\"green\">// UIFramework.dll reference, </span>\n  <span class=\"green\">// so we could better use the first method:</span>\n \n  UIFramework.RevitRibbonControl ribbon \n    = UIFramework.RevitRibbonControl.RibbonControl;\n</pre>\n<p>Additionally, one can also use Reflection to retrieve the Ribbon bar from a RibbonPanel p created in the 'normal' way via its p.RibbonControl method:\n\n<pre class=\"code\">\n<span class=\"blue\">private</span> Autodesk.Windows.<span class=\"teal\">RibbonPanel</span> \n  GetPanelFromPanel( \n    Autodesk.Revit.UI.<span class=\"teal\">RibbonPanel</span> panel )\n{\n  <span class=\"teal\">FieldInfo</span> fi\n    = panel.GetType().GetField( \n      <span class=\"maroon\">\"m_RibbonPanel\"</span>,\n      <span class=\"teal\">BindingFlags</span>.Instance\n      | <span class=\"teal\">BindingFlags</span>.NonPublic );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != fi )\n  {\n    Autodesk.Windows.<span class=\"teal\">RibbonPanel</span> p \n      = fi.GetValue( panel ) \n      <span class=\"blue\">as</span> Autodesk.Windows.<span class=\"teal\">RibbonPanel</span>;\n \n    <span class=\"blue\">return</span> p;\n  }\n  <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n}\n</pre>\n<p>So, one can customize the AutoCAD ribbon in a similar way:</p>\n<center>\n<img alt=\"Pimp the AutoCAD ribbon\" src=\"img/rh_pimp_ribbon_acad.png\" width=\"400\"/>\n</center>\n<p>This can be performed by the following little piece of code:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> Initialize()\n{\n  RibbonControl ribbon = ComponentManager.Ribbon;\n \n  <span class=\"teal\">ImageSource</span> imgbg = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>(\n    <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( <span class=\"teal\">Path</span>.Combine( <span class=\"teal\">Path</span>.GetDirectoryName( \n      <span class=\"teal\">Assembly</span>.GetExecutingAssembly().Location ), \n      <span class=\"maroon\">\"yourBackGroundPicture.jpg\"</span> ), \n      <span class=\"teal\">UriKind</span>.Relative ) );\n \n  <span class=\"green\">// define an image brush</span>\n \n  <span class=\"teal\">ImageBrush</span> picBrush = <span class=\"blue\">new</span> <span class=\"teal\">ImageBrush</span>(); \n  picBrush.ImageSource = imgbg;\n  picBrush.AlignmentX = <span class=\"teal\">AlignmentX</span>.Left;\n  picBrush.AlignmentY = <span class=\"teal\">AlignmentY</span>.Top;\n  picBrush.Stretch = <span class=\"teal\">Stretch</span>.None;\n  picBrush.TileMode = <span class=\"teal\">TileMode</span>.FlipXY;\n \n  <span class=\"green\">// define a linear brush from top to bottom</span>\n \n  <span class=\"teal\">LinearGradientBrush</span> myLinearGradientBrush \n    = <span class=\"blue\">new</span> <span class=\"teal\">LinearGradientBrush</span>(); \n \n  myLinearGradientBrush.StartPoint \n    = <span class=\"blue\">new</span> System.Windows.<span class=\"teal\">Point</span>( 0, 0 );\n \n  myLinearGradientBrush.EndPoint \n    = <span class=\"blue\">new</span> System.Windows.<span class=\"teal\">Point</span>( 0, 1 );\n \n  myLinearGradientBrush.GradientStops.Add( \n    <span class=\"blue\">new</span> <span class=\"teal\">GradientStop</span>( <span class=\"teal\">Colors</span>.White, 0.0 ) );\n \n  myLinearGradientBrush.GradientStops.Add( \n    <span class=\"blue\">new</span> <span class=\"teal\">GradientStop</span>( <span class=\"teal\">Colors</span>.Blue, 1 ) );\n \n  <span class=\"green\">// change the tab header font</span>\n \n  ribbon.FontFamily = <span class=\"blue\">new</span> <span class=\"teal\">FontFamily</span>( <span class=\"maroon\">\"Bauhaus 93\"</span> ); \n  ribbon.FontSize = 10;\n \n  <span class=\"green\">// now iterate through the tabs and their panels</span>\n \n  <span class=\"blue\">foreach</span>( RibbonTab tab <span class=\"blue\">in</span> ribbon.Tabs )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">RibbonPanel</span> panel <span class=\"blue\">in</span> tab.Panels )\n    {\n      panel.CustomPanelTitleBarBackground \n        = myLinearGradientBrush;\n \n      panel.CustomPanelBackground = picBrush;\n \n      <span class=\"green\">//panel.CustomPanelBackground </span>\n      <span class=\"green\">//  = myLinearGradientBrush; </span>\n    }\n  }\n}\n</pre>\n<p>As you see, only the access to the ribbon control differs, but most of the code is identical to the Revit version.\n\n<p>Since we can access the ribbon bar identically in both AutoCAD and Revit using AdWindows.dll, one could easily build a common module for ribbon operations in general.\n\n<p>Also, an event listener can be achieved for both CAD systems:\n\n<pre class=\"code\">\nComponentManager.UIElementActivated \n  += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;Autodesk.Windows\n    .<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n      ComponentManager_UIElementActivated );\n \n<span class=\"blue\">void</span> ComponentManager_UIElementActivated( \n  <span class=\"blue\">object</span> sender, \n  Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n{\n  <span class=\"green\">// e.UiElement.PersistId says which item has been pressed</span>\n}\n</pre>\n<p>By the way, this is my first AutoCAD / Revit hybrid contribution.\nThis might be interesting for AutoCAD developers too, I think.\nBut after all, it's just playing around...\n\n<p>To wrap this up, here is a fully functional example of a Revit external application to play around with which exercises some of this functionality,\n\n<a href=\"zip/PimpMyRevit2.zip\">\nPimpMyRevit2.zip</a>.\n\nIt includes the Visual Studio solution, an add-in manifest, and the external application implementation source code, which looks like this in its entirety:\n<pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.IO;\n<span class=\"blue\">using</span> System.Reflection;\n<span class=\"blue\">using</span> winform = System.Windows.Forms;\n<span class=\"blue\">using</span> System.Windows.Media;\n<span class=\"blue\">using</span> System.Windows.Media.Imaging;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> adWin = Autodesk.Windows;\n \n<span class=\"blue\">namespace</span> PimpMyRevit\n{\n  [<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UIApp</span> : <span class=\"teal\">IExternalApplication</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n    {\n      <span class=\"blue\">try</span>\n      {\n        adWin.<span class=\"teal\">RibbonControl</span> ribbon \n          = adWin.<span class=\"teal\">ComponentManager</span>.Ribbon;\n \n        <span class=\"teal\">ImageSource</span> imgbg = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>( \n          <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( <span class=\"teal\">Path</span>.Combine( \n            <span class=\"teal\">Path</span>.GetDirectoryName( \n              <span class=\"teal\">Assembly</span>.GetExecutingAssembly().Location ), \n            <span class=\"maroon\">\"yourBackGroundPicture.jpg\"</span> ),\n            <span class=\"teal\">UriKind</span>.Relative ) );\n \n        <span class=\"green\">// define an image brush</span>\n \n        <span class=\"teal\">ImageBrush</span> picBrush = <span class=\"blue\">new</span> <span class=\"teal\">ImageBrush</span>(); \n        picBrush.ImageSource = imgbg;\n        picBrush.AlignmentX = <span class=\"teal\">AlignmentX</span>.Left;\n        picBrush.AlignmentY = <span class=\"teal\">AlignmentY</span>.Top;\n        picBrush.Stretch = <span class=\"teal\">Stretch</span>.None;\n        picBrush.TileMode = <span class=\"teal\">TileMode</span>.FlipXY;\n \n        <span class=\"green\">// define a linear brush from top to bottom</span>\n \n        <span class=\"teal\">LinearGradientBrush</span> gradientBrush \n          = <span class=\"blue\">new</span> <span class=\"teal\">LinearGradientBrush</span>(); \n \n        gradientBrush.StartPoint \n          = <span class=\"blue\">new</span> System.Windows.<span class=\"teal\">Point</span>( 0, 0 );\n \n        gradientBrush.EndPoint \n          = <span class=\"blue\">new</span> System.Windows.<span class=\"teal\">Point</span>( 0, 1 );\n \n        gradientBrush.GradientStops.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">GradientStop</span>( <span class=\"teal\">Colors</span>.White, 0.0 ) );\n \n        gradientBrush.GradientStops.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">GradientStop</span>( <span class=\"teal\">Colors</span>.Blue, 1 ) );\n \n        <span class=\"green\">// change the tab header font</span>\n \n        ribbon.FontFamily = <span class=\"blue\">new</span> System.Windows.Media\n          .<span class=\"teal\">FontFamily</span>( <span class=\"maroon\">\"Bauhaus 93\"</span> ); \n \n        ribbon.FontSize = 10;\n \n        <span class=\"green\">// iterate through the tabs and their panels</span>\n \n        <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonTab</span> tab <span class=\"blue\">in</span> ribbon.Tabs )\n        {\n          <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonPanel</span> panel <span class=\"blue\">in</span> tab.Panels )\n          {\n            panel.CustomPanelTitleBarBackground \n              = gradientBrush;\n \n            panel.CustomPanelBackground \n              = picBrush; <span class=\"green\">// use your picture</span>\n \n            <span class=\"green\">//panel.CustomPanelBackground </span>\n            <span class=\"green\">//  = gradientBrush; // use your gradient fill</span>\n          }\n        }\n        adWin.<span class=\"teal\">ComponentManager</span>.UIElementActivated += <span class=\"blue\">new</span> \n          <span class=\"teal\">EventHandler</span>&lt;adWin.<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;( \n            ComponentManager_UIElementActivated );\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n      {\n        winform.<span class=\"teal\">MessageBox</span>.Show( \n          ex.StackTrace + <span class=\"maroon\">\"\\r\\n\"</span> + ex.InnerException, \n          <span class=\"maroon\">\"Error\"</span>, winform.<span class=\"teal\">MessageBoxButtons</span>.OK );\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n    {\n      adWin.<span class=\"teal\">ComponentManager</span>.UIElementActivated \n        -= ComponentManager_UIElementActivated;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"blue\">void</span> ComponentManager_UIElementActivated( \n      <span class=\"blue\">object</span> sender, \n      Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n    {\n      <span class=\"green\">// e.UiElement.PersistId says which item has been pressed</span>\n    }\n  }\n}\n</pre>\n<p>Have fun with trying different pictures and colours.\nBy the way, one could write an add-in which stores different 'styles' in a xml file...\nRevit for boys, Revit for girls, blue theme or pink theme ;-)\n\n<p>One notice: you have to re-invoke the function after all add-ins have been loaded completely, because it obviously does not affect the panels that are created after the call.\nOne could put the ribbon control into a global variable that can be used by the OnDocumentOpened event or something like that after all panels have been populated.\n\n<p>Here is my Revit started up after loading this external application, with some of the add-ins affected and others left in their original pristine state:</p>\n<center>\n<img alt=\"Partially pimp Revit add-ins ribbon tab\" src=\"img/rh_pimp_ribbon_jt.png\"/>\n</center>\n<h4>Ribbon Bar Transformations</h4>\n<p>Some additions to the pimping theme.\n\n<p>You can apply all kinds of transformations to the ribbon bar, including translation, scaling, and rotation. You can turn it upside down, or throw it into space somewhere...\n\n<p>After the transformation, the ribbon buttons remain just as functional as before, e.g. tool tips are displayed and the buttons can be selected as usual.\n\n<p>Because the Ribbon bar is a WPF element, it can be transformed this way:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> adWin = Autodesk.Windows;\n\n  adWin.<span class=\"teal\">RibbonControl</span> ribbon \n    = adWin.<span class=\"teal\">ComponentManager</span>.Ribbon;\n \n  <span class=\"teal\">TransformGroup</span> group = <span class=\"blue\">new</span> <span class=\"teal\">TransformGroup</span>();\n  <span class=\"green\">//group.Children.Add(new RotateTransform(-2));</span>\n  group.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">TranslateTransform</span>( \n    ribbon.ActualWidth * 0.25, 160 ) );\n \n  group.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">ScaleTransform</span>( \n    scale, scale ) );\n \n  group.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">SkewTransform</span>( \n    15, -3 ) );\n \n  ribbon.RenderTransform = group;\n</pre>\n<p>Feel free to test different combinations.\nBelow are some examples.\nTo begin with, here is The Ribbon bar in its default state:\n\n \n<center>\n<img alt=\"Revit ribbon bar in default state\" src=\"img/rh_pimp_ribbon_xform_1.png\"/>\n</center>\n<pre class=\"code\">\n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">ScaleTransform</span>( \n      0.5, 0.75 );\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with scaling transform\" src=\"img/rh_pimp_ribbon_xform_2.png\"/>\n</center>\n<pre class=\"code\">\n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">RotateTransform</span>( \n      5 );\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with rotation transform\" src=\"img/rh_pimp_ribbon_xform_3.png\"/>\n</center>\n<pre class=\"code\">\n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">TranslateTransform</span>( \n      100, 25 );\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with translation transform\" src=\"img/rh_pimp_ribbon_xform_4.png\"/>\n</center>\n<pre class=\"code\">\n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">SkewTransform</span>( \n      -15, 0 );\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with skew transform\" src=\"img/rh_pimp_ribbon_xform_5.png\"/>\n</center>\n<pre class=\"code\">\n  System.Windows.Media.<span class=\"teal\">TransformGroup</span> g \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">TransformGroup</span>();\n \n  g.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">ScaleTransform</span>( 0.75, 0.75 ) );\n  g.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">SkewTransform</span>( -25, 0 ) );\n  g.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">TranslateTransform</span>( 50, 10 ) );\n \n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform = g;\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with several concatenated transformations\" src=\"img/rh_pimp_ribbon_xform_6.png\"/>\n</center>\n<p>The black area is the container of the Ribbon; it may be possible to place your own WPF forms into it.\nBut this topic is more WPF than Revit API related.\n\n<h4>Ribbon Transformations for AutoCAD</h4>\n<p>As said, the same thing works in AutoCAD as well. \nThis is the AutoCAD version:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> Autodesk.Windows;\n<span class=\"blue\">using</span> Autodesk.AutoCAD.Runtime;\n<span class=\"blue\">using</span> System.Windows.Media;\n \n<span class=\"blue\">namespace</span> PimpMyAutoCAD\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UIApp</span> : IExtensionApplication\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Initialize()\n    {\n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">TransformGroup</span> group = <span class=\"blue\">new</span> <span class=\"teal\">TransformGroup</span>();\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">ScaleTransform</span>( 0.96, 1 ) );\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">SkewTransform</span>( -25, 0 ) );\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">TranslateTransform</span>( 50, 0 ) );\n \n        <span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n          = group;\n      }\n      <span class=\"blue\">catch</span>\n      {\n      }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Terminate()\n    {\n    }\n  }\n}\n</pre>\n<p>Here is the result of running that:\n\n<center>\n<img alt=\"Pimp my AutoCAD transformation\" src=\"img/rh_pimp_ribbon_xform_acad.png\" width=\"400\"/>\n</center>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0542_pimp_my_ribbon",
    "header_text": "Ribbon Bar Transformations",
    "local_header_href": "#ribbon-bar-transformations",
    "chunk_text": "<h4>Ribbon Bar Transformations</h4><p>Some additions to the pimping theme.\n\n<p>You can apply all kinds of transformations to the ribbon bar, including translation, scaling, and rotation. You can turn it upside down, or throw it into space somewhere...\n\n<p>After the transformation, the ribbon buttons remain just as functional as before, e.g. tool tips are displayed and the buttons can be selected as usual.\n\n<p>Because the Ribbon bar is a WPF element, it can be transformed this way:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> adWin = Autodesk.Windows;\n\n  adWin.<span class=\"teal\">RibbonControl</span> ribbon \n    = adWin.<span class=\"teal\">ComponentManager</span>.Ribbon;\n \n  <span class=\"teal\">TransformGroup</span> group = <span class=\"blue\">new</span> <span class=\"teal\">TransformGroup</span>();\n  <span class=\"green\">//group.Children.Add(new RotateTransform(-2));</span>\n  group.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">TranslateTransform</span>( \n    ribbon.ActualWidth * 0.25, 160 ) );\n \n  group.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">ScaleTransform</span>( \n    scale, scale ) );\n \n  group.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">SkewTransform</span>( \n    15, -3 ) );\n \n  ribbon.RenderTransform = group;\n</pre>\n<p>Feel free to test different combinations.\nBelow are some examples.\nTo begin with, here is The Ribbon bar in its default state:\n\n \n<center>\n<img alt=\"Revit ribbon bar in default state\" src=\"img/rh_pimp_ribbon_xform_1.png\"/>\n</center>\n<pre class=\"code\">\n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">ScaleTransform</span>( \n      0.5, 0.75 );\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with scaling transform\" src=\"img/rh_pimp_ribbon_xform_2.png\"/>\n</center>\n<pre class=\"code\">\n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">RotateTransform</span>( \n      5 );\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with rotation transform\" src=\"img/rh_pimp_ribbon_xform_3.png\"/>\n</center>\n<pre class=\"code\">\n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">TranslateTransform</span>( \n      100, 25 );\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with translation transform\" src=\"img/rh_pimp_ribbon_xform_4.png\"/>\n</center>\n<pre class=\"code\">\n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">SkewTransform</span>( \n      -15, 0 );\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with skew transform\" src=\"img/rh_pimp_ribbon_xform_5.png\"/>\n</center>\n<pre class=\"code\">\n  System.Windows.Media.<span class=\"teal\">TransformGroup</span> g \n    = <span class=\"blue\">new</span> System.Windows.Media.<span class=\"teal\">TransformGroup</span>();\n \n  g.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">ScaleTransform</span>( 0.75, 0.75 ) );\n  g.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">SkewTransform</span>( -25, 0 ) );\n  g.Children.Add( <span class=\"blue\">new</span> <span class=\"teal\">TranslateTransform</span>( 50, 10 ) );\n \n  adWin.<span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform = g;\n</pre>\n<center>\n<img alt=\"Revit ribbon bar with several concatenated transformations\" src=\"img/rh_pimp_ribbon_xform_6.png\"/>\n</center>\n<p>The black area is the container of the Ribbon; it may be possible to place your own WPF forms into it.\nBut this topic is more WPF than Revit API related.\n\n<h4>Ribbon Transformations for AutoCAD</h4>\n<p>As said, the same thing works in AutoCAD as well. \nThis is the AutoCAD version:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> Autodesk.Windows;\n<span class=\"blue\">using</span> Autodesk.AutoCAD.Runtime;\n<span class=\"blue\">using</span> System.Windows.Media;\n \n<span class=\"blue\">namespace</span> PimpMyAutoCAD\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UIApp</span> : IExtensionApplication\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Initialize()\n    {\n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">TransformGroup</span> group = <span class=\"blue\">new</span> <span class=\"teal\">TransformGroup</span>();\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">ScaleTransform</span>( 0.96, 1 ) );\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">SkewTransform</span>( -25, 0 ) );\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">TranslateTransform</span>( 50, 0 ) );\n \n        <span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n          = group;\n      }\n      <span class=\"blue\">catch</span>\n      {\n      }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Terminate()\n    {\n    }\n  }\n}\n</pre>\n<p>Here is the result of running that:\n\n<center>\n<img alt=\"Pimp my AutoCAD transformation\" src=\"img/rh_pimp_ribbon_xform_acad.png\" width=\"400\"/>\n</center>\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0542_pimp_my_ribbon",
    "header_text": "Ribbon Transformations for AutoCAD",
    "local_header_href": "#ribbon-transformations-for-autocad",
    "chunk_text": "<h4>Ribbon Transformations for AutoCAD</h4><p>As said, the same thing works in AutoCAD as well. \nThis is the AutoCAD version:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> Autodesk.Windows;\n<span class=\"blue\">using</span> Autodesk.AutoCAD.Runtime;\n<span class=\"blue\">using</span> System.Windows.Media;\n \n<span class=\"blue\">namespace</span> PimpMyAutoCAD\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UIApp</span> : IExtensionApplication\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Initialize()\n    {\n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">TransformGroup</span> group = <span class=\"blue\">new</span> <span class=\"teal\">TransformGroup</span>();\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">ScaleTransform</span>( 0.96, 1 ) );\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">SkewTransform</span>( -25, 0 ) );\n \n        group.Children.Add( \n          <span class=\"blue\">new</span> <span class=\"teal\">TranslateTransform</span>( 50, 0 ) );\n \n        <span class=\"teal\">ComponentManager</span>.Ribbon.RenderTransform \n          = group;\n      }\n      <span class=\"blue\">catch</span>\n      {\n      }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> Terminate()\n    {\n    }\n  }\n}\n</pre>\n<p>Here is the result of running that:\n\n<center>\n<img alt=\"Pimp my AutoCAD transformation\" src=\"img/rh_pimp_ribbon_xform_acad.png\" width=\"400\"/>\n</center>\n</p></p>"
  }
]