[
  {
    "original_filename": "0970_nbs",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0970_nbs",
    "header_text": "Behind the Scenes of the NBS Revit Add-in",
    "local_header_href": "#behind-the-scenes-of-the-nbs-revit-add-in",
    "chunk_text": "<h3>Behind the Scenes of the NBS Revit Add-in</h3><p>Here is a guest post by Stephen Hamil of\n\n<a href=\"http://www.ribaenterprises.com\">RIBA Enterprises</a>,\n\ndirector of\n\n<a href=\"http://www.thenbs.com\">NBS</a>,\n\nthe national standard specification company in the UK, owned by the\n\n<a href=\"http://www.architecture.com\">\nRoyal Institute of British Architects</a>.\n\n<p>They just released the\n\n<a href=\"http://constructioncode.blogspot.co.uk/2013/06/7-great-new-features-in-nbs-for.html\">\nnew version of their Revit plug-in</a> that\n\nintegrates the Revit design model with the NBS specification model, technical guidance and National BIM Library objects.</p>\n<p>Below, Chris and Calum from the NBS software development team give a little insight into some of the API functionality they used when developing this software:</p>\n<ul>\n<li><a href=\"#2\">Drag-and-drop support from the National BIM Library</a></li>\n<li><a href=\"#3\">Controlling Revit from modeless dialogues</a></li>\n<li><a href=\"#4\">Porting to 2014</a></li>\n<li><a href=\"#5\">Docking panel prototype</a></li>\n<li><a href=\"#6\">Further Information</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>Drag-and-drop Support from the National BIM Library</h4>\n<center>\n<!-- <img src=\"img/nbs_01-DragAndDrop.gif\" alt=\"Drag-and-drop support from the National BIM Library\" width=\"400\"/> -->\n<img alt=\"Drag-and-drop support from the National BIM Library\" src=\"img/nbs_01A-DragAndDrop.jpg.jpeg\" width=\"400\"/>\n</center>\n<p>We make use of the IDropHandler interface from the API to allow us to drag drop from the National BIM Library NBL.\n<p>That enables us to overwrite the default behaviour of Revit when the user drops a family on a project file.\n<p>We start the process by making a call from the web browser to its owning user control:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Method called from the web browser</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> ClickDrag(\n    <span class=\"blue\">string</span> downloadLink,\n    <span class=\"blue\">string</span> strFamilyName )\n  {\n    <span class=\"blue\">if</span>( <span class=\"blue\">this</span>.nbsUser.hasLoggedInNBL )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; dragInfo = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;() {\n        downloadLink, strFamilyName };\n \n      <span class=\"green\">// Kick off the drag drop event which Revit </span>\n      <span class=\"green\">// will pick up and custom code will check </span>\n      <span class=\"green\">// if family already entered</span>\n \n      <span class=\"teal\">UIApplication</span>.DoDragDrop( dragInfo,\n        <span class=\"blue\">new</span> dropHandler( <span class=\"blue\">this</span> ) );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">this</span>.SignInToFloatPanel();\n    }\n  }\n</pre>\n<a name=\"3\"></a>\n<h4>Controlling Revit from Modeless Dialogues</h4>\n<center>\n<img alt=\"Controlling Revit from modeless dialogues\" src=\"img/nbs_02-ModelessDialog.gif\" width=\"400\"/>\n</center>\n<p>We use the Idling event to call into the Revit API from modeless dialogs to modify the database without causing damage.\n\n<p>We have a list of commands to run with an array of objects as their parameters and then run this chunk of code to process them in the Idling event handler:\n\n<pre class=\"code\">\n  <span class=\"green\">// If we have commands to process</span>\n \n  <span class=\"blue\">if</span>( CommandsToProcess.Count &gt; 0 )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">UIDocument</span> uiDoc = UIApp.ActiveUIDocument;\n \n      <span class=\"green\">// Get the first command in the list to process</span>\n \n      CommandToRun command = CommandsToProcess.First();\n \n      <span class=\"green\">// Get the delegate that we want to run</span>\n \n      <span class=\"teal\">Delegate</span> FunctionDelegate = command.FunctionToRun;\n \n      <span class=\"green\">// Make sure we have the lastest UIDocument</span>\n \n      command.ListOfParameters.Insert( 0, uiDoc );\n \n      <span class=\"green\">// Get it's parameters</span>\n \n      <span class=\"blue\">object</span>[] Parameters = command.ListOfParameters.ToArray();\n \n      <span class=\"green\">// Invoke our function</span>\n \n      FunctionDelegate.DynamicInvoke( Parameters );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      ErrorLogger.LogError( <span class=\"maroon\">\"Error processing command: \"</span>\n        + ex.ToString() );\n    }\n    <span class=\"blue\">finally</span>\n    {\n      <span class=\"green\">// Always Pop the first in the queue</span>\n \n      CommandsToProcess.RemoveAt( 0 );\n    }\n  }\n</pre>\n<a name=\"4\"></a>\n<h4>Porting to 2014</h4>\n<p>We encountered a problem when developing the plugin to work with 2014, due to the Document class method get_Element changing to GetElement.\n\n<p>This was easily handled by the way we structure the plugin and have each version inheriting from the previous;  we start off with a generic interface:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : IRevitRibbon\n</pre>\n<p>For Revit 2013 and 2014, we inherit the previous RevitRibbon class:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : Revit2012.RevitRibbon\n\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : Revit2013.RevitRibbon\n</pre>\n<p>This allows us to simply override the one function calling the get_Element method, solving the problem without causing any damage to our existing implementations for Revit 2012 and 2013.\n\n\n<a name=\"5\"></a>\n<h4>Docking Panel Prototype</h4>\n<p>For the Revit 2014 users, we did also look into replacing the modeless dialog by a docking panel, which is a really cool new feature.\n\n<p>Unfortunately, though, we ran out of time for this release.\nHowever, we’ll look at this again for version 2.1.\n\n<p>Here is a screen snapshot of it working in a prototype:</p>\n<center>\n<img alt=\"Docking window\" src=\"img/nbs_03-DockingWindow.gif\" width=\"400\"/>\n</center>\n<a name=\"6\"></a>\n<h4>Further Information</h4>\n<p>A lot of work was put into this and it looks pretty good, really linking the design model in Revit with the specification model in NBS.\n\n<p>Here is some further information on:\n\n<ul>\n<li>\n<a href=\"http://constructioncode.blogspot.co.uk/2013/06/7-great-new-features-in-nbs-for.html\">\nThe main seven features of the new NBS plug-in</a>.</li>\n<li>The UK free-to-use library of\n\n<a href=\"http://www.nationalbimlibrary.com\">\nNBS BIM components</a>.</li>\n</ul>\n<p>Thank you, Stephen, for providing this background information.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0970_nbs",
    "header_text": "Drag-and-drop Support from the National BIM Library",
    "local_header_href": "#drag-and-drop-support-from-the-national-bim-library",
    "chunk_text": "<h4>Drag-and-drop Support from the National BIM Library</h4><center>\n<!-- <img src=\"img/nbs_01-DragAndDrop.gif\" alt=\"Drag-and-drop support from the National BIM Library\" width=\"400\"/> -->\n<img alt=\"Drag-and-drop support from the National BIM Library\" src=\"img/nbs_01A-DragAndDrop.jpg.jpeg\" width=\"400\"/>\n</center><p>We make use of the IDropHandler interface from the API to allow us to drag drop from the National BIM Library NBL.\n<p>That enables us to overwrite the default behaviour of Revit when the user drops a family on a project file.\n<p>We start the process by making a call from the web browser to its owning user control:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Method called from the web browser</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> ClickDrag(\n    <span class=\"blue\">string</span> downloadLink,\n    <span class=\"blue\">string</span> strFamilyName )\n  {\n    <span class=\"blue\">if</span>( <span class=\"blue\">this</span>.nbsUser.hasLoggedInNBL )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; dragInfo = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;() {\n        downloadLink, strFamilyName };\n \n      <span class=\"green\">// Kick off the drag drop event which Revit </span>\n      <span class=\"green\">// will pick up and custom code will check </span>\n      <span class=\"green\">// if family already entered</span>\n \n      <span class=\"teal\">UIApplication</span>.DoDragDrop( dragInfo,\n        <span class=\"blue\">new</span> dropHandler( <span class=\"blue\">this</span> ) );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">this</span>.SignInToFloatPanel();\n    }\n  }\n</pre>\n<a name=\"3\"></a>\n<h4>Controlling Revit from Modeless Dialogues</h4>\n<center>\n<img alt=\"Controlling Revit from modeless dialogues\" src=\"img/nbs_02-ModelessDialog.gif\" width=\"400\"/>\n</center>\n<p>We use the Idling event to call into the Revit API from modeless dialogs to modify the database without causing damage.\n\n<p>We have a list of commands to run with an array of objects as their parameters and then run this chunk of code to process them in the Idling event handler:\n\n<pre class=\"code\">\n  <span class=\"green\">// If we have commands to process</span>\n \n  <span class=\"blue\">if</span>( CommandsToProcess.Count &gt; 0 )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">UIDocument</span> uiDoc = UIApp.ActiveUIDocument;\n \n      <span class=\"green\">// Get the first command in the list to process</span>\n \n      CommandToRun command = CommandsToProcess.First();\n \n      <span class=\"green\">// Get the delegate that we want to run</span>\n \n      <span class=\"teal\">Delegate</span> FunctionDelegate = command.FunctionToRun;\n \n      <span class=\"green\">// Make sure we have the lastest UIDocument</span>\n \n      command.ListOfParameters.Insert( 0, uiDoc );\n \n      <span class=\"green\">// Get it's parameters</span>\n \n      <span class=\"blue\">object</span>[] Parameters = command.ListOfParameters.ToArray();\n \n      <span class=\"green\">// Invoke our function</span>\n \n      FunctionDelegate.DynamicInvoke( Parameters );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      ErrorLogger.LogError( <span class=\"maroon\">\"Error processing command: \"</span>\n        + ex.ToString() );\n    }\n    <span class=\"blue\">finally</span>\n    {\n      <span class=\"green\">// Always Pop the first in the queue</span>\n \n      CommandsToProcess.RemoveAt( 0 );\n    }\n  }\n</pre>\n<a name=\"4\"></a>\n<h4>Porting to 2014</h4>\n<p>We encountered a problem when developing the plugin to work with 2014, due to the Document class method get_Element changing to GetElement.\n\n<p>This was easily handled by the way we structure the plugin and have each version inheriting from the previous;  we start off with a generic interface:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : IRevitRibbon\n</pre>\n<p>For Revit 2013 and 2014, we inherit the previous RevitRibbon class:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : Revit2012.RevitRibbon\n\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : Revit2013.RevitRibbon\n</pre>\n<p>This allows us to simply override the one function calling the get_Element method, solving the problem without causing any damage to our existing implementations for Revit 2012 and 2013.\n\n\n<a name=\"5\"></a>\n<h4>Docking Panel Prototype</h4>\n<p>For the Revit 2014 users, we did also look into replacing the modeless dialog by a docking panel, which is a really cool new feature.\n\n<p>Unfortunately, though, we ran out of time for this release.\nHowever, we’ll look at this again for version 2.1.\n\n<p>Here is a screen snapshot of it working in a prototype:</p>\n<center>\n<img alt=\"Docking window\" src=\"img/nbs_03-DockingWindow.gif\" width=\"400\"/>\n</center>\n<a name=\"6\"></a>\n<h4>Further Information</h4>\n<p>A lot of work was put into this and it looks pretty good, really linking the design model in Revit with the specification model in NBS.\n\n<p>Here is some further information on:\n\n<ul>\n<li>\n<a href=\"http://constructioncode.blogspot.co.uk/2013/06/7-great-new-features-in-nbs-for.html\">\nThe main seven features of the new NBS plug-in</a>.</li>\n<li>The UK free-to-use library of\n\n<a href=\"http://www.nationalbimlibrary.com\">\nNBS BIM components</a>.</li>\n</ul>\n<p>Thank you, Stephen, for providing this background information.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0970_nbs",
    "header_text": "Controlling Revit from Modeless Dialogues",
    "local_header_href": "#controlling-revit-from-modeless-dialogues",
    "chunk_text": "<h4>Controlling Revit from Modeless Dialogues</h4><center>\n<img alt=\"Controlling Revit from modeless dialogues\" src=\"img/nbs_02-ModelessDialog.gif\" width=\"400\"/>\n</center><p>We use the Idling event to call into the Revit API from modeless dialogs to modify the database without causing damage.\n\n<p>We have a list of commands to run with an array of objects as their parameters and then run this chunk of code to process them in the Idling event handler:\n\n<pre class=\"code\">\n  <span class=\"green\">// If we have commands to process</span>\n \n  <span class=\"blue\">if</span>( CommandsToProcess.Count &gt; 0 )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">UIDocument</span> uiDoc = UIApp.ActiveUIDocument;\n \n      <span class=\"green\">// Get the first command in the list to process</span>\n \n      CommandToRun command = CommandsToProcess.First();\n \n      <span class=\"green\">// Get the delegate that we want to run</span>\n \n      <span class=\"teal\">Delegate</span> FunctionDelegate = command.FunctionToRun;\n \n      <span class=\"green\">// Make sure we have the lastest UIDocument</span>\n \n      command.ListOfParameters.Insert( 0, uiDoc );\n \n      <span class=\"green\">// Get it's parameters</span>\n \n      <span class=\"blue\">object</span>[] Parameters = command.ListOfParameters.ToArray();\n \n      <span class=\"green\">// Invoke our function</span>\n \n      FunctionDelegate.DynamicInvoke( Parameters );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      ErrorLogger.LogError( <span class=\"maroon\">\"Error processing command: \"</span>\n        + ex.ToString() );\n    }\n    <span class=\"blue\">finally</span>\n    {\n      <span class=\"green\">// Always Pop the first in the queue</span>\n \n      CommandsToProcess.RemoveAt( 0 );\n    }\n  }\n</pre>\n<a name=\"4\"></a>\n<h4>Porting to 2014</h4>\n<p>We encountered a problem when developing the plugin to work with 2014, due to the Document class method get_Element changing to GetElement.\n\n<p>This was easily handled by the way we structure the plugin and have each version inheriting from the previous;  we start off with a generic interface:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : IRevitRibbon\n</pre>\n<p>For Revit 2013 and 2014, we inherit the previous RevitRibbon class:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : Revit2012.RevitRibbon\n\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : Revit2013.RevitRibbon\n</pre>\n<p>This allows us to simply override the one function calling the get_Element method, solving the problem without causing any damage to our existing implementations for Revit 2012 and 2013.\n\n\n<a name=\"5\"></a>\n<h4>Docking Panel Prototype</h4>\n<p>For the Revit 2014 users, we did also look into replacing the modeless dialog by a docking panel, which is a really cool new feature.\n\n<p>Unfortunately, though, we ran out of time for this release.\nHowever, we’ll look at this again for version 2.1.\n\n<p>Here is a screen snapshot of it working in a prototype:</p>\n<center>\n<img alt=\"Docking window\" src=\"img/nbs_03-DockingWindow.gif\" width=\"400\"/>\n</center>\n<a name=\"6\"></a>\n<h4>Further Information</h4>\n<p>A lot of work was put into this and it looks pretty good, really linking the design model in Revit with the specification model in NBS.\n\n<p>Here is some further information on:\n\n<ul>\n<li>\n<a href=\"http://constructioncode.blogspot.co.uk/2013/06/7-great-new-features-in-nbs-for.html\">\nThe main seven features of the new NBS plug-in</a>.</li>\n<li>The UK free-to-use library of\n\n<a href=\"http://www.nationalbimlibrary.com\">\nNBS BIM components</a>.</li>\n</ul>\n<p>Thank you, Stephen, for providing this background information.</p>\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0970_nbs",
    "header_text": "Porting to 2014",
    "local_header_href": "#porting-to-2014",
    "chunk_text": "<h4>Porting to 2014</h4><p>We encountered a problem when developing the plugin to work with 2014, due to the Document class method get_Element changing to GetElement.\n\n<p>This was easily handled by the way we structure the plugin and have each version inheriting from the previous;  we start off with a generic interface:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : IRevitRibbon\n</pre>\n<p>For Revit 2013 and 2014, we inherit the previous RevitRibbon class:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : Revit2012.RevitRibbon\n\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitRibbon</span> : Revit2013.RevitRibbon\n</pre>\n<p>This allows us to simply override the one function calling the get_Element method, solving the problem without causing any damage to our existing implementations for Revit 2012 and 2013.\n\n\n<a name=\"5\"></a>\n<h4>Docking Panel Prototype</h4>\n<p>For the Revit 2014 users, we did also look into replacing the modeless dialog by a docking panel, which is a really cool new feature.\n\n<p>Unfortunately, though, we ran out of time for this release.\nHowever, we’ll look at this again for version 2.1.\n\n<p>Here is a screen snapshot of it working in a prototype:</p>\n<center>\n<img alt=\"Docking window\" src=\"img/nbs_03-DockingWindow.gif\" width=\"400\"/>\n</center>\n<a name=\"6\"></a>\n<h4>Further Information</h4>\n<p>A lot of work was put into this and it looks pretty good, really linking the design model in Revit with the specification model in NBS.\n\n<p>Here is some further information on:\n\n<ul>\n<li>\n<a href=\"http://constructioncode.blogspot.co.uk/2013/06/7-great-new-features-in-nbs-for.html\">\nThe main seven features of the new NBS plug-in</a>.</li>\n<li>The UK free-to-use library of\n\n<a href=\"http://www.nationalbimlibrary.com\">\nNBS BIM components</a>.</li>\n</ul>\n<p>Thank you, Stephen, for providing this background information.</p>\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0970_nbs",
    "header_text": "Docking Panel Prototype",
    "local_header_href": "#docking-panel-prototype",
    "chunk_text": "<h4>Docking Panel Prototype</h4><p>For the Revit 2014 users, we did also look into replacing the modeless dialog by a docking panel, which is a really cool new feature.\n\n<p>Unfortunately, though, we ran out of time for this release.\nHowever, we’ll look at this again for version 2.1.\n\n<p>Here is a screen snapshot of it working in a prototype:</p>\n<center>\n<img alt=\"Docking window\" src=\"img/nbs_03-DockingWindow.gif\" width=\"400\"/>\n</center>\n<a name=\"6\"></a>\n<h4>Further Information</h4>\n<p>A lot of work was put into this and it looks pretty good, really linking the design model in Revit with the specification model in NBS.\n\n<p>Here is some further information on:\n\n<ul>\n<li>\n<a href=\"http://constructioncode.blogspot.co.uk/2013/06/7-great-new-features-in-nbs-for.html\">\nThe main seven features of the new NBS plug-in</a>.</li>\n<li>The UK free-to-use library of\n\n<a href=\"http://www.nationalbimlibrary.com\">\nNBS BIM components</a>.</li>\n</ul>\n<p>Thank you, Stephen, for providing this background information.</p>\n</p></p></p></p>"
  },
  {
    "original_filename": "0970_nbs",
    "header_text": "Further Information",
    "local_header_href": "#further-information",
    "chunk_text": "<h4>Further Information</h4><p>A lot of work was put into this and it looks pretty good, really linking the design model in Revit with the specification model in NBS.\n\n<p>Here is some further information on:\n\n<ul>\n<li>\n<a href=\"http://constructioncode.blogspot.co.uk/2013/06/7-great-new-features-in-nbs-for.html\">\nThe main seven features of the new NBS plug-in</a>.</li>\n<li>The UK free-to-use library of\n\n<a href=\"http://www.nationalbimlibrary.com\">\nNBS BIM components</a>.</li>\n</ul>\n<p>Thank you, Stephen, for providing this background information.</p>\n</p></p>"
  }
]