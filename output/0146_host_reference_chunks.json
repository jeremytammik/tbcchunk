[
  {
    "original_filename": "0146_host_reference",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0146_host_reference",
    "header_text": "Host Reference",
    "local_header_href": "#host-reference",
    "chunk_text": "<h3>Host Reference</h3><p>Still enjoying my climbing and sunshine holiday with my sons in Avignon. \nYesterday we went climbing and exploring the cliffs or 'calanque' of Cassis, east of Marseille\n\n(<a href=\"http://images.google.fr/images?hl=fr&amp;q=calanque+de+cassis&amp;um=1&amp;ie=UTF-8&amp;ei=-kkmSqO8KYq5jAe-q_3oBw&amp;sa=X&amp;oi=image_result_group&amp;resnum=5&amp;ct=title\">more images</a>):</p><img alt=\"Calanque de Cassis\" src=\"img/calanque-cassis.jpg\"/><p>Besides climbing, swimming in the Gard river and Mediterranean Sea, and blogging now and then, my sons are also artistically active:</p><img alt=\"Dog by Cornelius\" src=\"img/hund1.jpg\"/><p>Returning to the Revit API, however:\nWe already touched on the relationship between a host and its hosted elements in some previous posts.\n\nThe first such topic was the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/relationship-in.html\">\nrelationship inverter</a>,\n\nmaking use of the explicit property providing a reference to the host of hosted elements such as doors, windows and other family instances.\nSince this property only specifies the relationship in one direction, we implemented the relationship inverter to obtain the inverse references.</p><p>No such explicit property is provided in either direction in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/tag-association.html\">\nassociation between a tag and the tagged element</a>, \n\nand that discussion mentions four ideas for possible workarounds instead.</p><p>Here is another question on a similar topic, the relationship between a wall and its wall footing:</p><p><strong>Question:</strong>\nHow can I obtain a reference to a wall footing from the wall attached to it?\nAnd vice versa, is it possible to obtain a reference to the wall supported by a wall footing?</p><img alt=\"Wall footing\" src=\"img/wall_footing.png\"/><p><strong>Answer:</strong>\nAs in the case of the tag and the tagged element, the Revit API does not provide any direct access to the link in either direction, \nneither to get the reference of a wall footing from the wall attached to it or vice versa.\n\nThe workaround via the Document.Delete method mentioned as one of the four workarounds to determine the association between \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/tag-association.html\">\na tag and the tagged element</a>\n\ncan be used in this case as well:\nYou call the method to delete the wall.\nIt automatically includes the wall footing in the deletion, and returns the element ids of all deleted objects in an ElementIdSet, from which you can pick out the wall footing.\nIf you encapsulate this operation in a transaction which is aborted after the call, the deletion will not be committed, and you will have obtained the desired information with no changes made to the model.\nHere is a sample code snippet to implement this:</p><p>I added a new command class CmdWallFooting to The Building Coder sample implementing this functionality.\nHere is the source code of its Execute method:</p><pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n<span class=\"teal\">ContFooting</span> footing = <span class=\"blue\">null</span>;\n \n<span class=\"teal\">Wall</span> wall = <span class=\"teal\">Util</span>.SelectSingleElementOfType( \n  doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ), <span class=\"maroon\">\"a wall\"</span> ) <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n \n<span class=\"blue\">if</span> ( <span class=\"blue\">null</span> == wall )\n{\n  message = <span class=\"maroon\">\"Please select a single wall element.\"</span>;\n}\n<span class=\"blue\">else</span>\n{\n  doc.BeginTransaction();\n  <span class=\"teal\">ElementIdSet</span> delIds = <span class=\"blue\">null</span>;\n  <span class=\"blue\">try</span>\n  {\n    delIds = doc.Delete( wall );\n  }\n  <span class=\"blue\">catch</span> ( System.<span class=\"teal\">Exception</span> )\n  {\n    message = <span class=\"maroon\">\"Deletion failed.\"</span>;\n    doc.AbortTransaction();\n    <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n  }\n  doc.AbortTransaction();\n \n  <span class=\"blue\">foreach</span> ( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> delIds )\n  {\n    <span class=\"teal\">ElementId</span> refId = id;\n    <span class=\"teal\">Element</span> elem = doc.get_Element( <span class=\"blue\">ref</span> refId );\n    <span class=\"blue\">if</span> ( <span class=\"blue\">null</span> == elem )\n      <span class=\"blue\">continue</span>;\n    footing = elem <span class=\"blue\">as</span> <span class=\"teal\">ContFooting</span>;\n    <span class=\"blue\">if</span> ( <span class=\"blue\">null</span> != footing )\n      <span class=\"blue\">break</span>;\n  }\n}\n<span class=\"blue\">string</span> s = <span class=\"teal\">Util</span>.ElementDescription( wall );\n \n<span class=\"teal\">Util</span>.InfoMsg( ( <span class=\"blue\">null</span> == footing )\n  ? <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"No footing found for {0}.\"</span>, s )\n  : <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} has {1}.\"</span>, s,\n    <span class=\"teal\">Util</span>.ElementDescription( footing ) ) );\n \n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n</pre><p>This is the result of running the new command on the wall depicted above:</p><img alt=\"Wall footing message\" src=\"img/wall_footing_message.png\"/><p>Another efficient workaround has become possible in Revit 2010 by making use of the new API method <strong>FindReferencesByDirection</strong>.\nIt finds both elements and geometric references that intersect a ray extending in a certain direction from an origin point.\nThe Revit 2010 SDK Samples AvoidObstruction and RaytraceBounce demonstrate the use of this new method.\nBy using a couple of points on the wall footing, we can easily determine which wall is located directly above it, and vice versa as well.\nThis provides a much stronger possibility to the workarounds using general geometric proximity suggested in the post on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/tag-association.html\">\ntag association</a>.</p><p>Here is\n\n<a href=\"zip/bc11034.zip\">\nversion 1.1.0.34</a>\n\nof the complete Visual Studio solution with the new command.</p><p><strong>Update:</strong> I updated this article for Revit 2011 on August 3 2010 based on the comment below by Jo Lee to fix the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/transaction-migration-errors.html\">\ntransaction migration errors</a> introduced\n\nby the simplistic initial flat port of the code from Revit 2010 to the Revit 2011 API.\n</p>"
  }
]