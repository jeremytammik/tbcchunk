[
  {
    "original_filename": "0978_create_filled_region",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0978_create_filled_region",
    "header_text": "Create a Filled Region to use as a Mask",
    "local_header_href": "#create-a-filled-region-to-use-as-a-mask",
    "chunk_text": "<h3>Create a Filled Region to use as a Mask</h3><p>I am off in the mountains again today, after a long break due to bad weather and too many other activities.</p><p>Meanwhile, here is a pretty old item that has been hanging around in my to-do list for much too long, so let's get it out there to you:</p><p><strong>Question:</strong> How can I programmatically create a masked region?</p><p><strong>Answer:</strong> I am sorry to say you currently cannot.\n\n<p>Hoewever, one of the API features added in Revit 2013 was the abiility to create a filled region.\n\n<p>The FilledRegion class was extended to offer the ability to create a new filled region, get its boundaries, and apply a linestyle to all its boundary segments.\n\n<p>So, while there is no straightforward method to create a mask region, the closest we can get is by creating a filled region using the FilledRegion.Create method.\nHowever, a filled region is not the same object as a mask region.\nA filled region has a fill pattern, and its type can be changed.\nThe mask region type cannot be changed.\nIf you set a filled region's fill pattern to a solid blank pattern, it will look like a mask region.\n\n<p>Here is a sample code fragment showing how to create a FilledRegion object:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> fillRegionTypes\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FilledRegionType</span> ) );\n \n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">FilledRegionType</span>&gt; myPatterns =\n      <span class=\"blue\">from</span> pattern <span class=\"blue\">in</span> fillRegionTypes.Cast&lt;<span class=\"teal\">FilledRegionType</span>&gt;()\n      <span class=\"blue\">where</span> pattern.Name.Equals( <span class=\"maroon\">\"Diagonal Crosshatch\"</span> )\n      <span class=\"blue\">select</span> pattern;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FilledRegionType</span> frt <span class=\"blue\">in</span> fillRegionTypes )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; profileloops\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;();\n \n    <span class=\"teal\">XYZ</span>[] points = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[5];\n    points[0] = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0.0, 0.0, 0.0 );\n    points[1] = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10.0, 0.0, 0.0 );\n    points[2] = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10.0, 10.0, 0.0 );\n    points[3] = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0.0, 10.0, 0.0 );\n    points[4] = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0.0, 0.0, 0.0 );\n \n    <span class=\"teal\">CurveLoop</span> profileloop = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 4; i++ )\n    {\n      <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( points[i],\n        points[i + 1] );\n \n      profileloop.Append( line );\n    }\n    profileloops.Add( profileloop );\n \n    <span class=\"teal\">ElementId</span> activeViewId = doc.ActiveView.Id;\n \n    <span class=\"teal\">FilledRegion</span> filledRegion = <span class=\"teal\">FilledRegion</span>.Create(\n      doc, frt.Id, activeViewId, profileloops );\n \n    <span class=\"blue\">break</span>;\n  }\n</pre>\n<p>You could simulate the creation of a mask region by modifying this to find a filled region type whose fill pattern is blank.</p>\n</p></p></p></p></p>"
  }
]