[
  {
    "original_filename": "0636_lines_in_inst",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0636_lines_in_inst",
    "header_text": "Retrieving Lines Within a Family Instance",
    "local_header_href": "#retrieving-lines-within-a-family-instance",
    "chunk_text": "<h3>Retrieving Lines Within a Family Instance</h3><p>Here is a basic query on how to obtain geometrical objects from a family instance answered by my colleague Saikat Bhattacharya.\nWe have looked at more complex geometry retrieval in the past, so let's look at this simple case now:\n\n\n<p><strong>Question:</strong> I am examining an instance of a family created from a Generic Model containing a parametric sketch.\nI loaded such a family into my project and inserted an instance of it.\nThe idea is to use the parametric sketch to create different walls in the project.\nIf I snoop the resulting FamilyInstance inserted from the loaded family, I can see the lines in the collection FamilyInstance &gt; FamilySymbol &gt; Objects &gt; Lines.\nI cannot find the proper path to access this data through my own code, however.\nWhat can I do to access the sketch lines programmatically?\n\nI tried the following:\n\n<ul>\n<li>myFamilyInstance.Symbol.GetGeometryObjectFromReference(Reference ref)\n<br/>Here, I don't understand the purpose of the Reference element.\n\n<li>myFamilyInstance.Symbol.get_Geometry(Options opt)\n<br/>Here, I don't know what I should pass in as option.\n</li></li></ul>\n<p>Finally, I'm not sure I'm doing the right thing.\nWhat I want to do in the end is to pass in the lines contained in the FamilyInstance element to wall creation method to define new walls based on the generic model geometry.\n\n\n\n<p><strong>Answer:</strong> You were close.\nHere is a code snippet in which I retrieve the lines you are looking for and simply print out their length:\n\n<pre class=\"code\">\n<span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute(\n  <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>,\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>,\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> <span class=\"teal\">ElementSet</span>) _\n  <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n \n  <span class=\"blue\">Dim</span> uiapp <span class=\"blue\">As</span> <span class=\"teal\">Application</span> _\n    = commandData.Application\n \n  <span class=\"blue\">Dim</span> activeDoc <span class=\"blue\">As</span> <span class=\"teal\">Document</span> _\n    = uiapp.ActiveUIDocument.Document\n \n  <span class=\"blue\">Dim</span> opts <span class=\"blue\">As</span> <span class=\"teal\">Options</span> _\n    = activeDoc.Application.Create.NewGeometryOptions()\n \n  <span class=\"blue\">Dim</span> elem <span class=\"blue\">As</span> <span class=\"teal\">Element</span>\n \n  <span class=\"blue\">For</span> <span class=\"blue\">Each</span> elem <span class=\"blue\">In</span> activeDoc.Selection.Elements\n \n    <span class=\"blue\">Dim</span> famInst <span class=\"blue\">As</span> <span class=\"teal\">FamilyInstance</span> _\n      = <span class=\"blue\">CType</span>(elem, <span class=\"teal\">FamilyInstance</span>)\n \n    <span class=\"blue\">Dim</span> geoEle <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span> _\n      = famInst.Geometry(opts)\n \n    <span class=\"blue\">Dim</span> geoInstance <span class=\"blue\">As</span> <span class=\"teal\">GeometryInstance</span>\n \n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> geoInstance <span class=\"blue\">In</span> geoEle.Objects\n      <span class=\"blue\">Dim</span> symbIns <span class=\"blue\">As</span> <span class=\"teal\">GeometryObject</span>\n \n      <span class=\"blue\">For</span> <span class=\"blue\">Each</span> symbIns <span class=\"blue\">In</span> geoInstance.\n        SymbolGeometry.Objects\n \n        <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> (symbIns) <span class=\"blue\">Is</span> <span class=\"teal\">Line</span> <span class=\"blue\">Then</span>\n          <span class=\"blue\">Dim</span> line <span class=\"blue\">As</span> <span class=\"teal\">Line</span> = symbIns\n          <span class=\"teal\">TaskDialog</span>.Show(\n            <span class=\"maroon\">\"Line Length\"</span>,\n            line.ApproximateLength.ToString())\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n      <span class=\"blue\">Next</span>\n    <span class=\"blue\">Next</span>\n  <span class=\"blue\">Next</span>\n \n  <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n \n<span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n</pre>\n<p>When querying an element for its geometry, you do indeed need to pass in an instance of the Options class, which is described in greater detail in the developer guide document \"Revit 2012 API Developer Guide.pdf\".\n\n<p>The geometry options include the Options.View property, which specifies the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/section-view-geometry.html\">\nview used for geometry extraction</a>. \n\nIf a view-specific version of an element exists, it will be extracted in the retrieval of geometry. \nAlso, the detail level of the geometry will be taken from the view's detail level. \n\n\n<p>If you prefer the code in C# rather than VB, you can convert it using one of the many free online translators such as\n\n<a href=\"http://www.developerfusion.com/tools/convert/vb-to-csharp\">\ndeveloperFusion</a>\n</p></p></p></p></p></p></p>"
  }
]