[
  {
    "original_filename": "0278_abg01_geometry_options",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0278_abg01_geometry_options",
    "header_text": "Geometry Options",
    "local_header_href": "#geometry-options",
    "chunk_text": "<h3>Geometry Options</h3><p>This is part 1 of Scott Conover's AU 2009 class on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/analyse-building-geometry.html\">\nanalysing building geometry</a>.\n\n\n<p>It all starts with the get_Geometry and its options.\nWhat are these options?\n\n<p>Geometry is typically extracted from the indexed property Element.Geometry, or Element.get_Geometry in C#.\nThis property accepts an options class which you must supply.\nThe options class customizes the type of output you receive:\n\n<ul>\n<li>ComputeReferences – this flag sets Revit to make the GeometryObject.Reference property active for each geometry object extracted. When this is false, the property will be null. Remember that the default is false, you must turn this on or your reference will not be accessible\n<li>IncludeNonVisibleObjects – this flag new to Revit 2010 sets Revit to also return geometry objects which are not visible in a default view. Most of this non-visible geometry is construction and conditional geometry that the user sees when editing the element (for example, the center plane of a window family instance). So, typically you would set this to false (the default) as you don't want to include such information in your output. However, some of this conditionally visible geometry represents real-world objects, and in certain situations, you should extract it. One such example is the geometry of insulation surrounding ducts in Revit MEP.\n<li>DetailLevel – this sets the detail level for the extracted geometry. Note that the default for this is 'medium'.\n<li>View – this sets the view that governs the extracted geometry. Note that the detail level for this view will be used in place of 'DetailLevel' if a view is assigned (so you will need to change the view's detail level depending on your desired output). Set the view when you want to extract view-specific geometry not normally visible in the default 3D view.\n</li></li></li></li></ul>\n<h4>Contents of the extracted geometry</h4>\n<p>The extracted geometry is returned to you as an Autodesk.Revit.Geometry.Element.\nYou can look at the geometry members of that element by iterating the Objects property.\nTypically, the objects returned at the top level of the extracted geometry will be one of:\n\n<ul>\n<li>Solid – a boundary representation made up of faces and edges.\n<li>Curve – a bounded 3D curve.\n<li>Instance – an instance of a geometric element, placed and positioned within the element.\n</li></li></li></ul>\n<p>An instance offers the ability to read its geometry through the GetSymbolGeometry and GetInstanceGeometry methods.\nThese methods return another Autodesk.Revit.Geometry.Element which can be parsed just like the first level return from get_Geometry:\n\n<ul>\n<li>GetSymbolGeometry returns the geometry represented in the coordinate system of the family. Use this, for example, when you want a picture of the 'generic' table without regards to the orientation and placement location within the project.\n<li>GetInstanceGeometry returns the geometry represented in the coordinate system of the project where the instance is placed. Use this, for example, when you want a picture of the specific geometry of the instance in the project (for example, ensuring that tables are placed parallel to the walls of the room).\n<li>There are also overloads for both methods that transform the geometry by any arbitrary coordinate system.\n</li></li></li></ul>\n\nIn some cases, instances may be nested many levels deep.\nFor example, a baluster in a railing placed in a document, or any other example of nested family instances.\nWe'll discuss transformations and their relationship to instance geometry later in this course.\n\n<h4>Other sources of geometry</h4>\n<p>Geometry can also be obtained from a variety of other properties and methods:\n\n<ul>\n<li>LocationCurve – curve driven elements like walls and beams report their profile through this interface.\n<li>References of dimensions – the references contain information regarding the geometry they point to.\n<li>Structural AnalyticalModel – returns curves and faces representing the analytical model of structural elements.\n<li>FindReferencesByDirection – discussed later in this course.\n</li></li></li></li></ul>\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0278_abg01_geometry_options",
    "header_text": "Contents of the extracted geometry",
    "local_header_href": "#contents-of-the-extracted-geometry",
    "chunk_text": "<h4>Contents of the extracted geometry</h4><p>The extracted geometry is returned to you as an Autodesk.Revit.Geometry.Element.\nYou can look at the geometry members of that element by iterating the Objects property.\nTypically, the objects returned at the top level of the extracted geometry will be one of:\n\n<ul>\n<li>Solid – a boundary representation made up of faces and edges.\n<li>Curve – a bounded 3D curve.\n<li>Instance – an instance of a geometric element, placed and positioned within the element.\n</li></li></li></ul>\n<p>An instance offers the ability to read its geometry through the GetSymbolGeometry and GetInstanceGeometry methods.\nThese methods return another Autodesk.Revit.Geometry.Element which can be parsed just like the first level return from get_Geometry:\n\n<ul>\n<li>GetSymbolGeometry returns the geometry represented in the coordinate system of the family. Use this, for example, when you want a picture of the 'generic' table without regards to the orientation and placement location within the project.\n<li>GetInstanceGeometry returns the geometry represented in the coordinate system of the project where the instance is placed. Use this, for example, when you want a picture of the specific geometry of the instance in the project (for example, ensuring that tables are placed parallel to the walls of the room).\n<li>There are also overloads for both methods that transform the geometry by any arbitrary coordinate system.\n</li></li></li></ul>\n\nIn some cases, instances may be nested many levels deep.\nFor example, a baluster in a railing placed in a document, or any other example of nested family instances.\nWe'll discuss transformations and their relationship to instance geometry later in this course.\n\n<h4>Other sources of geometry</h4>\n<p>Geometry can also be obtained from a variety of other properties and methods:\n\n<ul>\n<li>LocationCurve – curve driven elements like walls and beams report their profile through this interface.\n<li>References of dimensions – the references contain information regarding the geometry they point to.\n<li>Structural AnalyticalModel – returns curves and faces representing the analytical model of structural elements.\n<li>FindReferencesByDirection – discussed later in this course.\n</li></li></li></li></ul>\n</p></p></p>"
  },
  {
    "original_filename": "0278_abg01_geometry_options",
    "header_text": "Other sources of geometry",
    "local_header_href": "#other-sources-of-geometry",
    "chunk_text": "<h4>Other sources of geometry</h4><p>Geometry can also be obtained from a variety of other properties and methods:\n\n<ul>\n<li>LocationCurve – curve driven elements like walls and beams report their profile through this interface.\n<li>References of dimensions – the references contain information regarding the geometry they point to.\n<li>Structural AnalyticalModel – returns curves and faces representing the analytical model of structural elements.\n<li>FindReferencesByDirection – discussed later in this course.\n</li></li></li></li></ul>\n</p>"
  }
]