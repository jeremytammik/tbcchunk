[
  {
    "original_filename": "0614_point_cloud_snap_freeze",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0614_point_cloud_snap_freeze",
    "header_text": "Point Cloud Snap and Freeze",
    "local_header_href": "#point-cloud-snap-and-freeze",
    "chunk_text": "<h3>Point Cloud Snap and Freeze</h3><p>Here are some questions that came up a while ago regarding point clouds:\n\n<p><strong>Question:</strong> As far as I can tell, the standard object snap settings also control snapping to point clouds:</p>\n<center>\n<img alt=\"Object snap settings\" src=\"img/point_cloud_snap.png\"/>\n</center>\n<p>Is there any way to snap to individual points in the point cloud?\n\n<!--\n<p>After importing the point cloud into Revit, it is essentially a block of points. \nCan Selection.SelectPoint snap to individual point in a point cloud? \nThis is a basic expectation of using point cloud. \nIf a call to SelectPoint returns a 3D point, I can use it as seed to find nearby walls, poles or other features.\nI guess we can define a filter to get a few points but that would require some 3D viewing parameters to help constructing, and we cannot get all the required viewing parameters using the APIs available.\n-->\n<p><strong>Answer:</strong> Revit itself never asks for the pick of an individual point in a point cloud, so there is no mechanism to support this in the API either.   \nEven when Revit prompts the user to pick things via snapping using the UI option 'snap to point cloud', it creates a small window, asks for 100 points, and is satisfied if there is at least one.  \nRevit does not do anything at all to determine the forward most point or the point closest to the cursor from the cloud.  \n\n<p>Here is some sample code showing how to prompt the user to select a box containing points and use a PointCloudFilter to retrieve them:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> PromptForPointCloudSelection(\n  <span class=\"teal\">UIDocument</span> uiDoc,\n  <span class=\"teal\">PointCloudInstance</span> pcInstance )\n{\n  <span class=\"teal\">Application</span> app = uiDoc.Application.Application;\n  <span class=\"teal\">Selection</span> currentSel = uiDoc.Selection;\n \n  <span class=\"teal\">PickedBox</span> pickedBox = currentSel.PickBox( \n    <span class=\"teal\">PickBoxStyle</span>.Enclosing, \n    <span class=\"maroon\">\"Select region of cloud for highlighting\"</span> );\n \n  <span class=\"teal\">XYZ</span> min = pickedBox.Min;\n  <span class=\"teal\">XYZ</span> max = pickedBox.Max;\n \n  <span class=\"green\">// Transform points into filter </span>\n \n  <span class=\"teal\">View</span> view = uiDoc.ActiveView;\n  <span class=\"teal\">XYZ</span> right = view.RightDirection;\n  <span class=\"teal\">XYZ</span> up = view.UpDirection;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Plane</span>&gt; planes = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Plane</span>&gt;();\n \n  <span class=\"green\">// X boundaries </span>\n \n  <span class=\"blue\">bool</span> directionCorrect = IsPointAbovePlane( \n    right, min, max );\n \n  planes.Add( app.Create.NewPlane( right, \n    directionCorrect ? min : max ) );\n \n  planes.Add( app.Create.NewPlane( -right, \n    directionCorrect ? max : min ) );\n \n  <span class=\"green\">// Y boundaries </span>\n \n  directionCorrect = IsPointAbovePlane( \n    up, min, max );\n \n  planes.Add( app.Create.NewPlane( up, \n    directionCorrect ? min : max ) );\n \n  planes.Add( app.Create.NewPlane( -up, \n    directionCorrect ? max : min ) );\n \n  <span class=\"green\">// Create filter </span>\n \n  <span class=\"teal\">PointCloudFilter</span> filter = <span class=\"teal\">PointCloudFilterFactory</span>\n    .CreateMultiPlaneFilter( planes );\n \n  <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( uiDoc.Document ); \n  t.Start( <span class=\"maroon\">\"Highlight\"</span> );\n \n  pcInstance.SetSelectionFilter( filter );\n \n  pcInstance.FilterAction \n    = <span class=\"teal\">SelectionFilterAction</span>.Highlight;\n \n  t.Commit();\n}\n \n<span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> IsPointAbovePlane( \n  <span class=\"teal\">XYZ</span> normal, \n  <span class=\"teal\">XYZ</span> planePoint, \n  <span class=\"teal\">XYZ</span> point )\n{\n  <span class=\"teal\">XYZ</span> diff = point - planePoint;\n  diff = diff.Normalize();\n  <span class=\"blue\">double</span> dotProduct = diff.DotProduct( normal );\n  <span class=\"blue\">return</span> dotProduct &gt; 0;\n}\n</pre>\n<p>If you don't want the user to have to create the small rectangular window for obtaining points, you may be able to do one of the following: \n\n<ol>\n<li>Prompt for element selection using the PickObject method and the ObjectType.PointOnElement, with a filter that is limited to PointCloudInstances or even one specific instance – it may however be difficult to get the cursor to switch from the \"don't pick\" option for this.\n<li>Prompt for picking a point using the PickPoint method.  You may have to set an active sketch plane for the view to allow this work in 3D.\n</li></li></ol>\n<p>In either case, you should be able to obtain a 3D point representing the user's selection.  \nThe point will have no real relationship to the view and the front of the point cloud.  \nThen you could use the View.ViewDirection property to compute a small rectangle centred on the picked point, and build planes for the PointCloudFilter through the boundary lines of the rectangle and extending parallel to the view direction.  \nThat will give you a filter capable of intersecting the point cloud and returning actual points.  \nIf too many points are returned, you may need a back clipping plane added to the filter to focus on the points nearest the user's eye position.  \n\n<p>Note that View.EyePosition should not be used to compute the distance directly, since the eye position for orthographic views is very close to the model bounding box.  \nInstead, a plane should be computed normal to view direction passing through eye position, and the distance of points measured to this plane.\n\n\n<p><strong>Question:</strong> In Revit, the point cloud can be moved around in the model.\nIs it possible to disable this?\n\n<p>I want my point cloud to appear as a static object. \nIt should not be moved or modified in CAD environment once it is brought in. \n\n\n<p><strong>Answer:</strong> You can lock the point cloud by pinning it. \nIn the API, simply set the property Element.Pinned to true.\nThis will prevent accidental moves.\n\n<p>Of course, the user can unpin the cloud if they really want to, but at least that requires a conscious decision.\n\n<p>A more complicated way to prevent changes would be to use the Dynamic Update Framework and post an error on an illegal operation; the user will have to cancel the action and restore the original state.\n\n<p>Another completely untested idea might possibly be to assign the point cloud to a workset and check it out with a fake user.\n\n<!--\n<p><strong>Question:</strong> Since I don't want users to manipulete my point cloud, is there any way to disable the highlighting feature for it? \nWhen we introduce point clouds into the design environment we would not allow users to easily modify them. \nThe only thing they would do is to define modifiers such as clipping it to a smaller set or range&\n\n<p><strong>Answer:</strong> There is no way to disable the prehighlighting, selection, and highlighting of the cloud.\n\n<a href=\"\">\n</a>\n\n<center>\n<img src=\"img/\" alt=\"\" width=\"400\"/>\n</center>\n\n<pre class=\"code\">\n</pre>\n\n<ul>\n<li>\n</ul>\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]