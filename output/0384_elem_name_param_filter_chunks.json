[
  {
    "original_filename": "0384_elem_name_param_filter",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0384_elem_name_param_filter",
    "header_text": "Element Name Parameter Filter Correction",
    "local_header_href": "#element-name-parameter-filter-correction",
    "chunk_text": "<h3>Element Name Parameter Filter Correction</h3><p>The AEC DevCamp has kicked off here in Boston and it is great to be here with all the fascinating presentations and exciting meetings with colleagues and developers.\nSomehow, I am also able to keep up with other issues in parallel, and one of them has been a lively discussion with Kevin Vandecar which prompted the presentation of lots of new\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nparameter filter samples</a> this morning.\n\n<p>Kevin pointed out that the method I presented in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector benchmarking</a> to\n\nretrieve a specific level from the Revit model by name using a parameter filter did not work for him.\n\nThe reason is that the element name on the level is not stored in the ELEM_NAME_PARAM built-in parameter, as I had assumed but apparently not tested, but in BuiltInParameter.DATUM_TEXT.\n\n<p>I updated the code to be able to specify any built-in parameter by defining the following generic GetFirstElementOfTypeWithBipString method.\nIt uses a parameter filter to return the first element of the given type and with the specified string-valued built-in parameter matching the given name:\n\n<pre class=\"code\">\n<span class=\"teal\">Element</span> GetFirstElementOfTypeWithBipString(\n  <span class=\"teal\">Type</span> type,\n  <span class=\"teal\">BuiltInParameter</span> bip,\n  <span class=\"blue\">string</span> name )\n{\n  <span class=\"teal\">FilteredElementCollector</span> a\n    = GetElementsOfType( type );\n \n  <span class=\"teal\">ParameterValueProvider</span> provider\n    = <span class=\"blue\">new</span> <span class=\"teal\">ParameterValueProvider</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( bip ) );\n \n  <span class=\"teal\">FilterStringRuleEvaluator</span> evaluator\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilterStringEquals</span>();\n \n  <span class=\"teal\">FilterRule</span> rule = <span class=\"blue\">new</span> <span class=\"teal\">FilterStringRule</span>(\n    provider, evaluator, name, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ElementParameterFilter</span> filter\n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementParameterFilter</span>( rule );\n \n  <span class=\"blue\">return</span> a.WherePasses( filter ).FirstElement();\n}\n</pre>\n<p>This matches the method GetFirstNamedElementOfTypeUsingParameterFilter that I presented in the original version, except that the built-in parameter can be passed in as an argument instead of being hardwired to use the erroneous ELEM_NAME_PARAM.\n\n<p>In the benchmark mainline, I now call it like this:\n\n<pre class=\"code\">\n  level = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">JtTimer</span> pt = <span class=\"blue\">new</span> <span class=\"teal\">JtTimer</span>(\n    <span class=\"maroon\">\"Parameter filter\"</span> ) )\n  {\n    <span class=\"green\">//level = GetFirstElementOfTypeWithBipString(</span>\n    <span class=\"green\">//  t, BuiltInParameter.ELEM_NAME_PARAM, name );</span>\n \n    level = GetFirstElementOfTypeWithBipString(\n      t, <span class=\"teal\">BuiltInParameter</span>.DATUM_TEXT, name );\n  }\n \n  <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != level,\n    <span class=\"maroon\">\"expected to find a valid level\"</span> );\n</pre>\n<p>Note that I added an assertion to ensure that a valid level really was retrieved, now that Kevin pointed out to me that this was previously not the case.\n\n\n<p>The results of running this are analogous to the previously reported ones, i.e. using the parameter filter is still significantly faster than all other options using some post-processing of the collector results to search for the specific named level, less than 6 seconds being less than half the time required by the post-processing approaches, which all require over 13 seconds:\n\n<pre class=\"code\">\n---------------------------------------------------------------\nRetrieve specific named level:\n Percentage   Seconds   Calls   Process\n---------------------------------------------------------------\n      0.00%      0.00    1000   Empty method *\n      0.19%      0.11    1000   Collector with no name check *\n      9.19%      5.46    1000   Parameter filter\n     22.53%     13.37    1000   Explicit\n     22.57%     13.40    1000   Anonymous named\n     22.73%     13.49    1000   Anonymous\n     22.73%     13.49    1000   Linq\n    100.00%     59.35       1   TOTAL TIME\n---------------------------------------------------------------\n</pre>\n<p>Here is\n\n<a href=\"zip/bc_11_70_2.zip\">\nversion 2011.0.70.2</a>\n\nof The Building Coder sample source code and Visual Studio solution including the updated filtered element collector benchmark command.\n\n<p>Many thanks to Kevin Vandecar for pointing this out and prompting me to update the original article!\n</p></p></p></p></p></p></p></p></p>"
  }
]