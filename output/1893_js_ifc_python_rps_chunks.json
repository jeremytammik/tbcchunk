[
  {
    "original_filename": "1893_js_ifc_python_rps",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- Use relative paths (%appdata%) in .addin file\n  https://forums.autodesk.com/t5/revit-api-forum/use-relative-paths-appdata-in-addin-file/m-p/10074984\n\n- best book for Python for Revit and Dynamo\n  https://forums.autodesk.com/t5/revit-api-forum/books-or-other-sources-to-learn-python-to-be-used-in-revit/m-p/10063424\n\n- RevitPythonShell requires a new maintainer\n  daren-thomas commented 20 days ago\n  > As of next month, I will not have access to Revit anymore, and the project will need a new maintainer.\n  https://github.com/architecture-building-systems/revitpythonshell/issues/111\n\n- IFC.js\n  https://github.com/agviegas/IFC.js\n  https://www.aechive.net/agviegas/ifc-js-em4\n\ntwitter:\n\nA complete self-contained open source IFC viewer in JavaScript, learning Python and Dynamo, and a personalised add-in manifest using relative paths for the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://autode.sk/learningpython\n\nToday, we look at the add-in manifest, learning Python and Dynamo, the status of the Revit Python shell and a useful stand-alone IFC viewer\n&ndash; Personalised add-in manifest\n&ndash; Learning Python and Dynamo\n&ndash; Quo vadis, RevitPythonShell?\n&ndash; IFC.js...\n\nlinkedin:\n\nA complete self-contained open source IFC viewer in JavaScript, learning Python and Dynamo, and a personalised add-in manifest using relative paths for the #RevitAPI\n\nhttp://autode.sk/learningpython\n\nToday, we look at the add-in manifest, learning Python and Dynamo, the status of the Revit Python shell and a useful stand-alone IFC viewer:\n\n- Personalised add-in manifest\n- Learning Python and Dynamo\n- Quo vadis, RevitPythonShell?\n- IFC.js...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n<p style=\"font-size: 80%; font-style:italic\">\n<a href=\"\"></a>\n</p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1893_js_ifc_python_rps",
    "header_text": "Addin File, Learning Python and IFC.js",
    "local_header_href": "#addin-file-learning-python-and-ifcjs",
    "chunk_text": "### Addin File, Learning Python and IFC.js\n\nToday, we look at the add-in manifest, learning Python and Dynamo, the status of the Revit Python shell and a useful stand-alone IFC viewer:\n\n- [Personalised add-in manifest](#2)\n- [Addin manifest using a relative path](#2.1)\n- [Learning Python and Dynamo](#3)\n    - [Jacob's Dynamo learning resources](#3.1)\n    - [Take Dynamo further using Python](#3.2)\n- [Quo vadis, RevitPythonShell?](#4)\n- [IFC.js](#5)"
  },
  {
    "original_filename": "1893_js_ifc_python_rps",
    "header_text": "Personalised Add-In Manifest",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Personalised Add-In Manifest\n\nAndrea Tassera of [Woods Bagot](https://www.woodsbagot.com) raised an interesting question in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [using relative paths (`%appdata%`) in `.addin` file](https://forums.autodesk.com/t5/revit-api-forum/use-relative-paths-appdata-in-addin-file/m-p/10074984):\n\n**Question:** Is it possible to use a relative path, such as `%appdata%` in the `Assembly` section of the addin file?\n\nI am developing this plugin that will be deployed to other people in the company, and the DLLs will live somewhere in C:\\Users\\<USERNAME>\\AppData\\Roaming\\NameOfFolder\\... so writing the explicit path with the user name is not a real option. Normally, in Windows, you would use `%appdata%`, but it doesn't seem to be working in the .addin.\n\nIs there a way?\n\nThis is what I tried but isn't working:\n\n<pre>\n<span style=\"color:blue;\">&lt;?</span><span style=\"color:#a31515;\">xml</span><span style=\"color:blue;\">&nbsp;</span><span style=\"color:red;\">version</span><span style=\"color:blue;\">=</span>&quot;<span style=\"color:blue;\">1.0</span>&quot;<span style=\"color:blue;\">&nbsp;</span><span style=\"color:red;\">encoding</span><span style=\"color:blue;\">=</span>&quot;<span style=\"color:blue;\">utf-8</span>&quot;<span style=\"color:blue;\">?&gt;</span>\n<span style=\"color:blue;\">&lt;</span><span style=\"color:#a31515;\">RevitAddIns</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&lt;</span><span style=\"color:#a31515;\">AddIn</span><span style=\"color:blue;\">&nbsp;</span><span style=\"color:red;\">Type</span><span style=\"color:blue;\">=</span>&quot;<span style=\"color:blue;\">Application</span>&quot;<span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">Name</span><span style=\"color:blue;\">&gt;</span>Wb.ModelEstablishment.Revit<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">Name</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">FullClassName</span><span style=\"color:blue;\">&gt;</span>Wb.ModelEstablishment.Revit.Ribbon<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">FullClassName</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">Text</span><span style=\"color:blue;\">&gt;</span>Wb.ModelEstablishment.Revit<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">Text</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">Description</span><span style=\"color:blue;\">&gt;</span>Model&nbsp;Establishment<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">Description</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">VisibilityMode</span><span style=\"color:blue;\">&gt;</span>AlwaysVisible<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">VisibilityMode</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">Assembly</span><span style=\"color:blue;\">&gt;</span>%appdata%\\folder\\subfolder\\Wb.ModelEstablishment.Revit.dll<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">Assembly</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">AddInId</span><span style=\"color:blue;\">&gt;</span>d06838e1-44e3-4c05-b9f1-f79ca101075c<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">AddInId</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">VendorId</span><span style=\"color:blue;\">&gt;</span>WB<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">VendorId</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">VendorDescription</span><span style=\"color:blue;\">&gt;</span>Woods&nbsp;Bagot<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">VendorDescription</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&lt;/</span><span style=\"color:#a31515;\">AddIn</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">RevitAddIns</span><span style=\"color:blue;\">&gt;</span>\n</pre>\n\nBut, if I use the explicit path:\n\n<pre>\n  <span style=\"color:blue;\">&lt;</span><span style=\"color:#a31515;\">Assembly</span><span style=\"color:blue;\">&gt;</span>C:\\Users\\sydata\\AppData\\Roaming\\folder\\subfolder\\Wb.ModelEstablishment.Revit.dll<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">Assembly</span><span style=\"color:blue;\">&gt;</span>\n</pre>\n\n... it works fine.\n\n**Answer:** Yes, it is definitely possible to use relative paths in the add-in manifest.\n\nHowever, `%appdata%` is not a relative path.\n\nThat is a variable in an MS-DOS or Windows batch file, or possibly nowadays in a PowerShell script or something suchlike.\n\nRevit add-in manifest files do not support variables, neither MS-DOS nor Windows nor Unix nor any other flavour.\n\nYou can read about what is and is not supported in manifest files in the Revit online help section\non [add-in registration](https://help.autodesk.com/view/RVT/2021/ENU/?guid=Revit_API_Revit_API_Developers_Guide_Introduction_Add_In_Integration_Add_in_Registration_html).\n\nLook there for 'In a non-user-specific location in \"application data\"'.\n\n**Response:** I have read the page you sent, but the whole 'user-specific' or 'non-user specific \"application data\"' talks about where to save the `.addin` file, not how to point to dlls placed in the `%appdata%` folder through the `Assembly` XML tag inside the `.addin` file.\n\nThe .addin file can be in the user folder:\n\n- C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\Autodesk\\Revit\\Addins\\...\n\nThat's not a problem.\nThe problem is that the `Assembly` tag needs to point to a roaming folder:\n\n- C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\...\n\nI don't know how to achieve that without using the absolute path.\n\nI can't write one specific addin file for every user in the office.\n\nDoes it make sense?\n\n**Answer:** Yes, absolutely, it makes perfect sense.\n\nAs said, the `%appdata%` variable that you are referring to is a Windows specific variable that is not understood or supported by the add-in manifest file.\n\nOne simple option I see for you is to (automatically) generate a user-specific add-in manifest for each user and place each one in the appropriate user-specific location.\n\nAnother possible approach would be to place one single add-in manifest file for all users into the system-wide global location, and then use other run-time criteria to determine whether or not to make individual add-in functionality and components available to each user on a case-by-case basis, e.g., using the Revit API `AvailabilityClassName`.\n\nOh, and another thing, much simpler:\n\nI almost never use the add-in assembly DLL path at all.\n\nI just place the add-in assembly DLL in the same location as the add-in manifest `*.addin` file, and then it is found without specifying any path at all.\n\nIf you are already placing the add-in manifest file in the user-specific location, why don't you just put the DLL in the same place?\n\n**Response:** Thanks for clarifying. I get what you mean now!\n\nUnfortunately, the DLLs are in the `%appdata%` folder because they come through `pyRevit`, and the repository gets pulled under:\n\n- %appdata%\\pyRevit\\Extensions\\...\n\nUsually, pyRevit doesn't need addin files, but this is a linkbutton, because I need things to happen at application level (like registering a dockable panel), so it needs to have an addin file to load the DLLs when the Revit application is loading.\nIt's a bit more complex than usual.\n\nWe could maybe write a PowerShell script that moves those DLLs somewhere else, but it seems a bit convoluted.\n\nCreating an automatic generator of the addin sounds interesting though.\nFrom the docs you posted, I don't understand where that code would live though.\nIt says that \"It is intended for use from product installers and scripts\".\nDoes that mean something like a PowerShell script?\n\n**Answer:** You mean the RevitAddInUtility.dll?\n\nThe answer is Yes, cf. The Building Coder article\non [RevitAddInUtility](https://thebuildingcoder.typepad.com/blog/2010/04/revitaddinutility.html).\n\n####<a name=\"2.1\"></a> Addin Manifest Using a Relative Path\n\nJason Masters added a more direct and down-to-earth solution:\n\nI believe the answer you're looking for is to just use the relative path modifier for moving up a folder level `..\\`.\nThere's no need to run a script at install just to get to a user's `appdata` folder. \n\nFor instance, if I put my add-in DLLs under a different roaming folder like so:\n\n<center>\n<img src=\"img/addin_manifest_relative_path_1.png\" alt=\"Add-in manifest relative path\" title=\"Add-in manifest relative path\" width=\"600\"/> <!-- 839 -->\n</center>\n\nThen, to access those DLL files from my add-in, I can simply use `..\\` to navigate up to my roaming folder;\nin this case, I'm navigating up 4 levels:\n\n<center>\n<img src=\"img/addin_manifest_relative_path_2.png\" alt=\"Add-in manifest relative path\" title=\"Add-in manifest relative path\" width=\"600\"/> <!-- 675 -->\n</center>\n\nWhen I launch Revit, you'll see that it's parsed the path correctly and will load the add-in:\n\n<center>\n<img src=\"img/addin_manifest_relative_path_3.png\" alt=\"Add-in manifest relative path\" title=\"Add-in manifest relative path\" width=\"600\"/> <!-- 1480 -->\n<br/>\n<img src=\"img/addin_manifest_relative_path_4.png\" alt=\"Add-in manifest relative path\" title=\"Add-in manifest relative path\" width=\"600\"/> <!-- 1279 -->\n</center>\n\nAlso, `%appdata%` is the specific notation that `cmd.exe` and other Windows utilities use to refer to the `appdata` environment variable, but environment variables are in no way Windows specific and are commonly used on all operating systems.\nRevit really should support the use of environment variables in these addin files."
  },
  {
    "original_filename": "1893_js_ifc_python_rps",
    "header_text": "Learning Python and Dynamo",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Learning Python and Dynamo\n\nNext, let's look at the recurring question of beginners materials for Revit API using Python from \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non a [best book for Python for Revit and Dynamo](https://forums.autodesk.com/t5/revit-api-forum/books-or-other-sources-to-learn-python-to-be-used-in-revit/m-p/10063424):\n\n**Question:** I'm starting to learn Python (and Dynamo) and encounter the problem of how to learn to use it for my actual needs in Revit.\nI got a whole bunch of Python books from the library.\nOne problem is the books are either focused on examples to make simple videogames, or are way to advanced (and also not based on examples one would use in Revit).\nI have to admit, some children-oriented books were easier to understand :-)\n\nThere is\na [Dynamo for Revit: Python Scripting](https://books.google.com/books/about/Dynamo_for_Revit_Python_Scripting.html?id=ROYkygEACAAJ) book,\nbut that is not currently available.\nAre there actually books or sources that would teach Python on examples one would use for Revit/Dynamo?\nI'm learning best on an example I actually use.\n\nI also found there is a Revit Python Shell (RPS) on GitHub, but none for Revit 2021.\nIs there something similar?\nI saw some videos of how one can do some useful things in Revit.\n\n**Answer:** The best and most up to date sources tend to be online these days.\nThe second source is for RPS as you mentioned but would probably be my starting point for something specific to Revit.\n\n- [IntroductoryBooks &ndash; Python Wiki](https://wiki.python.org/moin/IntroductoryBooks)\n- [Introduction &ndash; Scripting Autodesk Revit with RevitPythonShell (gitbooks.io)](https://daren-thomas.gitbooks.io/scripting-autodesk-revit-with-revitpythonshell/content)\n\nPeople seem really passionate about Python, don't they.\nI'm no expert on this so maybe people have good book suggestions, but I prefer online for all aspects of learning generally.\n\n**Answer:** The “book” you refer to is actually\na [video tutorial by Jeremy Graham on LinkedIn](https://www.lynda.com/course-tutorials/Dynamo-Revit-Python-Scripting-REVISION/779745-2.html).\nProbably one of the best ways to get started.\n\n**Answer:** To start with Python and Dynamo, I think this Autodesk University Class\non [Untangling Python: A Crash Course on Dynamo‘s Python Node](https://www.autodesk.com/autodesk-university/class/Untangling-Python-Crash-Course-Dynamos-Python-Node-2017) by\nGui Talarico is a great resource.\n\nIf you have some basis but you don´t know how to move on, a good way to learn Python applying to Dynamo is to download <b>3rd party packages</b> (Archilab, Clockwork, Lunchbox, Rhythm, Bimorph, Spring nodes, etc.)  and read the code that the nodes contain.  You will see really good implementations and good practices. You will be able to see how others think about problems and write the solutions.\n\nHave a good understanding of <b>Object-oriented programming</b> will help you on this and is a key aspect to understand how to use the Revit API with Python.\n\nAbout the resources, as is mentioned in the previous posts, I would take a look on LinkedIn learning and also at [thinkparametric.com](https://thinkparametric.com).\nThere are good courses there.\n\nGood luck!\n\n**Answer:** RevitPythonShell for Revit 2020 works just fine in Revit 2021 as well, cf. [issue #106](https://github.com/architecture-building-systems/revitpythonshell/issues/106).\n\n**Response:** Thanks all.\nI'll digest what was offered. \n\nSo far the *Automate the Boring Stuff with Python* book seems to be the best I could find in the library.\nSo, I guess I will look more and start to dig deeper when I create some dynamo programs.\n\nI won't be able to install the Python shell in Revit.\nSince that is free, they don't really provide the security certificates our IT requires to allow installation.\nMy hope is Revit will include it at some point (since Autodesk is already approved by IT).\nUntil then I have to limit myself to the Python in dynamo nodes. \n\n**Answer:** The vast majority API support examples are in C# but Python is sexy.\n\n**Answer:** If you have Revit installed, Python is included: it is supported by the built-in Revit macro IDE (integrated development environment).\n\n**Response:** You mean the macro manager? \n\nI haven't done anything with that yet.\nSo, if that does what the Python shell does, I use what I already have.\n\n<center>\n<img src=\"img/macro_manager_python.png\" alt=\"Macro manager for Python\" title=\"Macro manager for Python\" width=\"603\"/> <!-- 603 -->\n</center>\n\n**Answer:** The macro manager does not quite do the same thing as RPS.\n\nRPS provides a [REPL, read-evaluate-print loop](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop).\n\nThat enables you to interactively program something, line by line, and execute each line as you type it.\n\nThe macro environment enables you to create and execute macros.\nThat means that you have to complete an entire macro and compile it before it can be executed.\n\nIn any case, the simplest way forward for you would be to use what you have and work through a Revit macro tutorial first of all.\n\n**Response:** Thanks for the advice. I'll look into that.\n\nI have a (growing) list of features or solutions I need in Revit and will try to work on solutions. Some will require some general Revit trickery, some dynamo, some macros etc. that way I will learn to sue the tools inc. Python. \n\n**Answer:** Oh yes, we mentioned another book just two months ago,\n[Más Allá de Dynamo &ndash; Beyond Dynamo](),\na Spanish-Language book by Kevin Himmelreich and the first Python manual focused on Dynamo and the Revit API.\nEven though it is in Spanish, you can understand most.\nIt includes a bunch of examples and pretty much everything about the Revit API is covered in Python.\n\n####<a name=\"3.1\"></a> Jacob's Dynamo Learning Resources\n\nMy colleague Jacob Small reacted to the above and adds:\n\n> Just saw your latest blog post, and thought I'd share a few\nmore [Dynamo and Dynamo Python educational resources (PDF)](zip/Dynamo_Learning_Resources.pdf),\nin case they help. Feel free to share around as needed... Thanks as always for the great content on the blog &ndash; they're on my 'always read' list as, even if it's not a need today, they usually come up eventually.  &nbsp; :-)\n\n- Dynamo Info / News\n    - Main: [http://dynamobim.org](http://dynamobim.org/)\n    - Blog: [https://dynamobim.org/blog](https://dynamobim.org/blog/)\n    - Dynamo Builds: [http://dynamobuilds.com](http://dynamobuilds.com/)\n    - Dynamo GitHub: [https://github.com/DynamoDS/Dynamo](https://github.com/DynamoDS/Dynamo)\n- Dynamo Learning\n    - Dynamo Primer: [http://primer.dynamobim.org](http://primer.dynamobim.org)\n    - Dynamo Forums: [https://forum.dynamobim.com](https://forum.dynamobim.com/)\n    - Dynamo Dictionary: [https://dictionary.dynamobim.com](https://dictionary.dynamobim.com)\n    - Dynamo Nodes: [https://dynamonodes.com](https://dynamonodes.com/)\n- Design Script:\n    - Design Script Language Summary: [http://designscript.io/DesignScript_user_manual_0.1.pdf](http://designscript.io/DesignScript_user_manual_0.1.pdf)\n    - Design Script Language Guide: [https://dynamobim.org/wp-content/links/DesignScriptGuide.pdf](https://dynamobim.org/wp-content/links/DesignScriptGuide.pdf)\n    - Design Script Presentation: [https://github.com/Amoursol/dynamoDesignScript](https://github.com/Amoursol/dynamoDesignScript)\n- Dynamo Python:\n    - Python for Dyanmo AU Lab Handout: [https://github.com/Amoursol/dynamoPython/blob/master/images/DivingDeeper_ABeginnersLookAtPythonInDynamo_AU_London2018.pdf](https://github.com/Amoursol/dynamoPython/blob/master/images/DivingDeeper_ABeginnersLookAtPythonInDynamo_AU_London2018.pdf)\n    - Python for Dynamo examples: [https://github.com/Amoursol/dynamoPython](https://github.com/Amoursol/dynamoPython)\n    - Dynamo Python Primer: [https://dynamopythonprimer.gitbook.io/dynamo-python-primer](https://dynamopythonprimer.gitbook.io/dynamo-python-primer/)\n- Revit API\n    - Revit API Docs: [https://www.revitapidocs.com](https://www.revitapidocs.com/)\n    - Building Coder: [https://thebuildingcoder.typepad.com/](https://thebuildingcoder.typepad.com)\n- Generative Design:\n    - Info: [https://www.autodesk.com/campaigns/refinery-beta](https://www.autodesk.com/campaigns/refinery-beta)\n    - Primer: [https://www.generativedesign.org](https://www.generativedesign.org/)\n    - Beta Site: [https://feedback.autodesk.com/key/RefineryLanding](https://feedback.autodesk.com/key/RefineryLanding)\n\nMany thanks to Jacob for this useful collection!\n\n####<a name=\"3.2\"></a> Take Dynamo Further Using Python\n\nWayne Patrick [@waynepdalton](https://twitter.com/waynepdalton) Dalton adds:\n\n> Hello Jeremy, not sure if this was mentioned in the section on Dynamo and Python (don't think it was?)\n\n> [@Oliver_E_Green](https://twitter.com/Oliver_E_Green) put\ntogether a great resource for [@DynamoBIM](https://twitter.com/DynamoBIM)\nand [#Python](https://twitter.com/hashtag/Python)...\nthought it might be helpful to flag it for those wanting to learn:\n\n> [Take Dynamo Further](https://dynamopythonprimer.gitbook.io) &ndash;\nusing Python will take your Dynamo definitions to the next level\n\nThank you, Wayne, for the helpful pointer!"
  },
  {
    "original_filename": "1893_js_ifc_python_rps",
    "header_text": "Quo Vadis, RevitPythonShell?",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Quo Vadis, RevitPythonShell?\n\nI just happened to hear\nthat [RevitPythonShell](https://github.com/architecture-building-systems/revitpythonshell) is\nno longer actively supported by its creator and hitherto maintainer Daren Thomas, cf. our conversation\non [issue #111](https://github.com/architecture-building-systems/revitpythonshell/issues/111).\n\nSays Daren:\n\n> As of next month, I will not have access to Revit anymore, and the project will need a new maintainer.\n\nI am very sorry to hear that, and ever so grateful to Daren for creating RPS in the first place and maintaining it for so long.\n\nRevitPythonShell was the first interactive REPL for Revit, followed by the sexier but less\nlong-lived [RevitRubyShell](https://github.com/hakonhc/RevitRubyShell).\n\nIn case of interest, please vote for [pyRevit issue #1161 &ndash; pyRevit Python Shell?](https://github.com/eirannejad/pyRevit/issues/1161)"
  },
  {
    "original_filename": "1893_js_ifc_python_rps",
    "header_text": "IFC.js",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> IFC.js\n\nFrom Python, let's turn to JavaScript and note the very interesting\nproject [IFC.js](https://github.com/agviegas/IFC.js),\ndescribed by [Antonio González Viegas on aechive.net](https://www.aechive.net/agviegas/ifc-js-em4):\n\n> an open source IFC web viewer.\nIt is fully built on JavaScript and Three.js, and everything is done client-side...\nanyone with a browser can navigate IFC files (geometry and information) without depending on native applications...\nadvantages...\n\n> - Scalability: the non-dependence of connection with a remote service to process an IFC means that there could be thousands of users visualising IFCs simultaneously with no processing cost, since each user supplies her own computational power to visualize her model.\n- Flexibility and ease of use: the library enables developers to operate without having to mount an API with HTTP calls. A clear example of this flexibility is having been able to deploy the entire application on github pages, creating a basic IFC viewer compatible with any modern device.\n- No internet connection necessary: as pure JavaScript, you can create desktop or mobile apps with React Native or Electron that enable offline IFC viewing"
  }
]