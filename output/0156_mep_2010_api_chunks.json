[
  {
    "original_filename": "0156_mep_2010_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0156_mep_2010_api",
    "header_text": "The Revit MEP 2010 API",
    "local_header_href": "#the-revit-mep-2010-api",
    "chunk_text": "<h3>The Revit MEP 2010 API</h3><p>We already presented an analysis of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/mep-connectors.html\">\nMEP connectors</a>\n\nin Revit 2010, but a general introduction to the MEP-specific API is still missing.\nOr was, until today.\n\n<p><strong>Question:</strong>\nWhat can I do with the Revit MEP API?\nWhat's new in Revit MEP 2010?\nAre there any additions or enhancements specifically for the MEP flavour? \nAny new content?</p>\n<p><strong>Answer:</strong>\nThe Revit 2010 API has been strongly enhanced with new MEP-specific features.\nThe main feature of the RME API is to provide read and write access to the Revit MEP model, including the following HVAC and piping data aspects and main components:\n\n<ul>\n<li>Traverse ducts, pipes, fittings and connectors in a system.\n<li>Add, remove and modify ducts, pipes and other equipment.\n<li>Read and modify system properties.\n<li>Determine whether a system is well-connected.\n</li></li></li></li></ul>\n\nThe new API features are listed in the sub-section 'MEP API for ducts and pipes' in the 'What's New' section of the Revit API help file.\nAll of the new MEP-specific API functionality is located in the Autodesk.Revit.MEP namespace.\nTo understand the MEP functionality and API, it is useful to first know the hierarchical grouping of objects.\nThe main components are the systems, ducts, pipes, fittings and connectors:\n\n<ul>\n<li>System to manage the top level system properties.\n<li>Ducts and pipes to define the main flow elements.\n<li>Fittings to implement bends and branches in the system.\n<li>Connectors to hook up the ducts, pipes and fittings.\n</li></li></li></li></ul>\n<p>The classes MechanicalSystem and PipingSystem provide the following top-level system functionality:\n\n<ul>\n<li>Access to equipment, connectors and system type.\n<li>Access to system properties such as flow and static pressure.\n<li>Analysis of system contents: DuctNetwork or PipeNetwork.\n</li></li></li></ul>\n<p>The elements contained within a system are not automatically returned in the flow direction, and the TraverseSystem SDK sample demonstrates how to implement traversal in direction of flow for a given system.\n\n<p>The ducts and pipes are represented by the classes Duct, FlexDuct, Pipe and FlexPipe.\nThey provide the following functionality:\n\n<ul>\n<li>Read access to duct properties, types, and geometry.\n<li>Change duct or pipe type.\n<li>Move or layout duct or pipe.\n</li></li></li></ul>\n<p>The layout functionality can be driven by two points, one point and a connector, or two connectors.\n\n<p>The fittings are represented by family instances, which are created with dedicated Autodesk.Revit.Creation.Document methods New*Fitting, where * can be replaced by any one of Elbow, Tee, Cross, Takeoff, Transition, UnionFitting.\nThe fitting properties can be accessed through the FamilyInstance.MEPModel property.\n\n<p>The \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/mep-connectors.html\">\nMEP connectors</a>\n\nare represented by different classes depending on the context.\nThis caused some confusion, which is why this topic has already been discussed in a previous post.\nIn a family document, during the connector definition, we use the specialised classes DuctConnector, PipeConnector and ElectricalConnector.\nIn the project document, the connectors are represented using the Connector class. \nThe connector features include:\n\n<ul>\n<li>Read duct, pipe, and fitting connector properties such as Flow, Coefficient, Demand.\n<li>Access physical connector properties e.g. Origin, Angle, Height, Width, Radius.\n<li>The family connectors define Flow, Flow Configuration, Coefficients, Loss Method.\n<li>Change connector size and location.\n<li>Connect and disconnect.\n</li></li></li></li></li></ul>\n<p>For the element creation within a project environment, we have several new methods on the creation document:\n\n<ul>\n<li>New*System to create a new mechanical or piping system.\n<li>NewDuct, NewFlexDuct, NewPipe and NewFlexPipe to create new elements.\n<li>New*Fitting to create new fittings, with * being one of Cross, Elbow, TakeOff, TeeFitting, Transition, Union.\n</li></li></li></ul>\n<p>To create the connector definitions within the family context, the FamilyItemFactory class accessed through the Document.FamilyCreate property provides the following new methods:\n\n<ul>\n<li>NewDuctConnector\n<li>NewPipeConnector\n<li>NewElectricalConnector\n</li></li></li></ul>\n<p>The Revit SDK includes the following new MEP-specific sample applications to demonstrate the use of the new functionality:\n\n<ul>\n<li><strong>AutoRoute:</strong> Route a set of ducts and fittings between a base air supply equipment and two terminals.\n<li><strong>AvoidObstruction:</strong> Detect and resolve obstructions between ducts, pipes, and beams\n<li><strong>TraverseSystem:</strong> Traverse a well-connected mechanical or piping system in the direction of flow\n<li><strong>CreateAirHandler:</strong> Create an air handler and add connectors\n</li></li></li></li></ul>\n<p>The first three demonstrate new RME API features, the fourth is an MEP-specific family API sample.\n\n<p>These samples were also presented in the recent \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/revit-api-introduction-webcast.html\">\nRevit programming webcast</a>.</p>\n<p>The MEP contents have also been extended.\nOne important new product feature is the interoperability with Inventor to support the MEP workflow. \n\n<p>Here is a vaguely related question on application compatibility between different flavours of Revit and between the 32 and 64 bit platforms:\n\n<p><strong>Question:</strong>\nWill a Revit plug-in assembly created with the 32-bit Revit MEP 2010 API work on 32-bit Revit Architecture 2010 and in 64-bit Revit MEP or Architecture 2010?\n\n<p><strong>Answer:</strong>\nIf the plug-in makes use of MEP-specific functionality through the Revit API in some of its commands, then those commands will only work on Revit MEP. \nYou can query what flavour of Revit your plug-in is currently running on and enable or disable certain functionality accordingly. \nThe vast majority of the Revit API will work unchanged on all flavours. \n\n<p>Because the .NET framework creates assemblies that are not bound to a specific architecture, your application created in a 32-bit environment should also work unmodified in a 64-bit one. \nYou need to test this, though, to ensure that you have not inadvertently bound it to 32 bits in some way.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]