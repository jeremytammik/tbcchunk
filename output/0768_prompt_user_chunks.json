[
  {
    "original_filename": "0768_prompt_user",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0768_prompt_user",
    "header_text": "Prompt User to Avoid Modeless Interaction",
    "local_header_href": "#prompt-user-to-avoid-modeless-interaction",
    "chunk_text": "<h3>Prompt User to Avoid Modeless Interaction</h3><p>Once again on the topic of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/asynchronous-api-calls-and-idling.html\">\nasynchronous interaction</a> with \n\nRevit, which is not supported by the Revit API, and often worked around using the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/idling\">\nIdling</a> and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/idling-enhancements-and-external-events.html\">\nexternal events</a>...\n\n<p>As I recently pointed out, no Revit API methods at all can be called outside a valid Revit API context, not even the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/drag-and-drop-api.html#4\">\nDoDragDrop method</a> or\n\nApplication.IsQuiescent property.\n\n<p>I already presented two convincing examples in the past of how you could work around a lack of direct API access by interacting intelligently with the user instead:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/prompt-the-user-for-pinning-and-ifc-export.html\">\nPrompt the User for Pinning and IFC Export</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/power-to-the-user-and-application.html\">\nPower to the User (and Application)</a>\n</li></li></ul>\n<p>In the first, lack of certain API functionality was worked around by prompting the user to execute an action instead.\n\n<p>In the second, an action was detected that could not be undone programmatically, but a warning can easily be displayed allowing the user to undo if she so desires.\n\n<p>Here is an example by Paul Vella of Autodesk Consulting in Melbourne, Australia, of how you can easily and safely avoid a potentially complex and risky modeless interaction by providing an adequate user interface instead:\n\n<p><strong>Question:</strong> I have a command that identifies a list of elements from the Revit model, and displays them in a modeless dialog to the user. The dialog is modeless so that the user can interact with the model, but I also want the user to be able to change the current selection (and zoom to that item) by selecting items from my dialog.\n\n<p>The zoom to part works, and the selection appears to change, but the properties panel does not update correctly.\n\n<p>Apparently the issue is that the Revit command has ended once the dialog has been displayed, and therefore my selection code runs outside of a command and lacks a valid Revit API context.\n\n<p>Is it possible to programmatically create a command context or otherwise to get my selection code to work, and have the properties panel update correctly?\n\n<p>One idea I had was to have a separate command button to do the selection, and call this programmatically from my form. But I could not work out how to programmatically click a PushButton on the ribbon.\n\n\n<p><strong>Answer:</strong> Nope, I am sorry to say it is not possible to create a command context in the way you describe, nor does the Revit API provide any way to programmatically simulate a ribbon push button click.\n\n<p>The only way I know to safely achieve what you are aiming for is to make use of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/idling-enhancements-and-external-events.html\">\nIdling event or the new external event framework</a>.\n\n\n<p><strong>Response:</strong> The solution I went with was to create a new button on the ribbon entitled 'Zoom to Sync Error'. \nWhen clicked, this button determines the currently selected item in the modeless form, which is accessible through a singleton instance.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]