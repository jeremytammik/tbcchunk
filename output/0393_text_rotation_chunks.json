[
  {
    "original_filename": "0393_text_rotation",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0393_text_rotation",
    "header_text": "TextNote Rotation",
    "local_header_href": "#textnote-rotation",
    "chunk_text": "<h3>TextNote Rotation</h3><p>Although the Document and FamilyItemFactory classes provide a NewTextNote method which allows us to freely specify the rotation angle when creating new text note instances, there is currently no access to read the rotation of an existing TextNote element in the Revit API.\nExploring this issue in a little bit more depth discovered a possibility for a workaround, though, which I think worth while presenting.\nIt also prompted me to update The Building Coder sample command \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/element-bounding-box.html\">\nCmdBoundingBox</a>, \n\nwhich displays the values of a selected building element bounding box.\nHere is the question that prompted this update:\n\n<p><strong>Question:</strong> I would like to transfer all text elements from a backup version of a project to a newer updated version.\n\nIt seems the using the clipboard to copy and paste aligned works nicely view by view, but there is no way to access this UI functions from the API. Since there are over a thousand views to process, doing it manually is not an option for us.\n\nI am able to extract all the views and text notes in it programmatically, but I do not see how to obtain the rotational value of an existing text note. Is there any accessible property providing this data?\n\n<p><strong>Answer:</strong> Unfortunately not, although we have registered a wish list item for this functionality. Here is a suggestion for a workaround, though:\n\n<p>From the TextNote element, you can access the following graphical properties:\n\n<ul>\n<li>BoundingBox\n<li>Coord\n<li>Width\n</li></li></li></ul>\n<p>I created a sample model with the following text note:</p>\n<center>\n<img alt=\"Rotated text note\" src=\"img/textnote_rotated.png\"/>\n</center>\n<p>Extracting those three properties and creating a couple of simple geometric drawing primitives to represent them, I obtain the following:</p>\n<center>\n<img alt=\"Text note graphical properties\" src=\"img/textnote_rotated_properties.png\"/>\n</center>\n<p>In this drawing, \n\n<ul>\n<li>BoundingBox is displayed as a box.\n<li>Coord is displayed as a circle.\n<li>Width is represented by the length of the line.\n</li></li></li></ul>\n<p>From this you can see that you can calculate an approximate rotation angle plus minus π from these three values, by determining the angle required to rotate the line around the Coord position to fit it inside the bounding box.\n\n<a name=\"2\"></a>\n<h4>CmdBoundingBox Update</h4>\n<p>In preparing the images above, I noticed that my original implementation of The Building Coder sample command \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/element-bounding-box.html\">\nCmdBoundingBox</a> examining \n\nthe bounding box of a Revit element was rather limited in functionality.\n\n<p>Querying the bounding box of a text note without specifying a view returns null.\nIn that case, the command would throw an exception.\nAlthough it included a debugging assertion to check that a non-null value was returned, there was no runtime check to react to the null value and avoid dereferencing it.\n\n<p>Also, in this case, the null value returned when no view is specified should cause the command to try again with a valid view, which will return a valid bounding box in the case of a text note.\n\n<p>I therefore updated command in the following ways:\n\n<ul>\n<li>If a null value is returned for the bounding box without a view specified, try again using the current view.\n<li>If a null value is still returned, print an error message in both release and debug mode.\n<li>List the results in a message box, not just in the Visual Studio debug output console.\n<li>Since the command makes no modifications to the database, change the transaction mode to read-only.\n</li></li></li></li></ul>\n<p>Here is the updated source code for the bounding box command:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdBoundingBox</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Element</span> e = <span class=\"teal\">Util</span>.SelectSingleElement(\n      uidoc, <span class=\"maroon\">\"an element\"</span> );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n    {\n      message = <span class=\"maroon\">\"No element selected\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">View</span> v = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">BoundingBoxXYZ</span> b = e.get_BoundingBox( v );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == b )\n    {\n      v = commandData.View;\n      b = e.get_BoundingBox( v );\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == b )\n    {\n      <span class=\"teal\">Util</span>.InfoMsg(\n        <span class=\"teal\">Util</span>.ElementDescription( e )\n        + <span class=\"maroon\">\" has no bounding box.\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Debug</span>.Assert( b.Transform.IsIdentity,\n        <span class=\"maroon\">\"expected identity bounding box transform\"</span> );\n \n      <span class=\"blue\">string</span> in_view = ( <span class=\"blue\">null</span> == v )\n        ? <span class=\"maroon\">\"model space\"</span>\n        : <span class=\"maroon\">\"view \"</span> + v.Name;\n \n      <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format( \n        <span class=\"maroon\">\"Element bounding box of {0} in \"</span>\n        + <span class=\"maroon\">\"{1} extends from {2} to {3}.\"</span>,\n        <span class=\"teal\">Util</span>.ElementDescription( e ),\n        in_view,\n        <span class=\"teal\">Util</span>.PointString( b.Min ),\n        <span class=\"teal\">Util</span>.PointString( b.Max ) ) );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>It now displays the following message when running it and selecting the text note shown above:</p>\n<center>\n<img alt=\"Text note bounding box coordinates\" src=\"img/textnote_bounding_box.png\"/>\n</center>\n<p>Here is \n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_72_2.zip -->\n<a href=\"zip/bc_11_72_2.zip\">\nversion 2011.0.72.2</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution and the updated version of the command.\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0393_text_rotation",
    "header_text": "CmdBoundingBox Update",
    "local_header_href": "#cmdboundingbox-update",
    "chunk_text": "<h4>CmdBoundingBox Update</h4><p>In preparing the images above, I noticed that my original implementation of The Building Coder sample command \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/element-bounding-box.html\">\nCmdBoundingBox</a> examining \n\nthe bounding box of a Revit element was rather limited in functionality.\n\n<p>Querying the bounding box of a text note without specifying a view returns null.\nIn that case, the command would throw an exception.\nAlthough it included a debugging assertion to check that a non-null value was returned, there was no runtime check to react to the null value and avoid dereferencing it.\n\n<p>Also, in this case, the null value returned when no view is specified should cause the command to try again with a valid view, which will return a valid bounding box in the case of a text note.\n\n<p>I therefore updated command in the following ways:\n\n<ul>\n<li>If a null value is returned for the bounding box without a view specified, try again using the current view.\n<li>If a null value is still returned, print an error message in both release and debug mode.\n<li>List the results in a message box, not just in the Visual Studio debug output console.\n<li>Since the command makes no modifications to the database, change the transaction mode to read-only.\n</li></li></li></li></ul>\n<p>Here is the updated source code for the bounding box command:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdBoundingBox</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Element</span> e = <span class=\"teal\">Util</span>.SelectSingleElement(\n      uidoc, <span class=\"maroon\">\"an element\"</span> );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n    {\n      message = <span class=\"maroon\">\"No element selected\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">View</span> v = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">BoundingBoxXYZ</span> b = e.get_BoundingBox( v );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == b )\n    {\n      v = commandData.View;\n      b = e.get_BoundingBox( v );\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == b )\n    {\n      <span class=\"teal\">Util</span>.InfoMsg(\n        <span class=\"teal\">Util</span>.ElementDescription( e )\n        + <span class=\"maroon\">\" has no bounding box.\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Debug</span>.Assert( b.Transform.IsIdentity,\n        <span class=\"maroon\">\"expected identity bounding box transform\"</span> );\n \n      <span class=\"blue\">string</span> in_view = ( <span class=\"blue\">null</span> == v )\n        ? <span class=\"maroon\">\"model space\"</span>\n        : <span class=\"maroon\">\"view \"</span> + v.Name;\n \n      <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format( \n        <span class=\"maroon\">\"Element bounding box of {0} in \"</span>\n        + <span class=\"maroon\">\"{1} extends from {2} to {3}.\"</span>,\n        <span class=\"teal\">Util</span>.ElementDescription( e ),\n        in_view,\n        <span class=\"teal\">Util</span>.PointString( b.Min ),\n        <span class=\"teal\">Util</span>.PointString( b.Max ) ) );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>It now displays the following message when running it and selecting the text note shown above:</p>\n<center>\n<img alt=\"Text note bounding box coordinates\" src=\"img/textnote_bounding_box.png\"/>\n</center>\n<p>Here is \n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_72_2.zip -->\n<a href=\"zip/bc_11_72_2.zip\">\nversion 2011.0.72.2</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution and the updated version of the command.\n</p></p></p></p></p></p>"
  }
]