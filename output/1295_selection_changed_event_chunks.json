[
  {
    "original_filename": "1295_selection_changed_event",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1295_selection_changed_event",
    "header_text": "Element Selection Changed Event",
    "local_header_href": "#element-selection-changed-event",
    "chunk_text": "<h3>Element Selection Changed Event</h3><p>Many add-in developers are interested in being notified when the current selection changes in the Revit user interface.</p><p>Among other things, it led to the implementation of the\n\n<!-- 0443 -->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/selection-watcher-using-idling-event.html\">\nselection watcher using the Idling event</a> and\n\nwas one aspect of the discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/element-level-events.html\">element level events</a>.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1295_selection_changed_event",
    "header_text": "Checking for Selection Changes in Idling Event Handler",
    "local_header_href": "#checking-for-selection-changes-in-idling-event-handler",
    "chunk_text": "<h4>Checking for Selection Changes in Idling Event Handler</h4><p>Ken Goulding submitted a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/element-level-events.html?cid=6a00e553e16897883301348655bd79970c#comment-6a00e553e16897883301348655bd79970c\">\ncomment</a> on\n\nthat, saying:</p><blockquote>\n<p>When you mentioned \"Element Level\", I was hoping that included element selection events, but that does not seem to be the case.</p>\n<p>As a work-around, I created this class that subscribes to the application \"Idling\" event and checks for selection changes.</p>\n<p>Given that it is an \"Idling\" event, I have tried to be as efficient as possible at figuring out whether a change has happened, but there may be a simpler way?</p>\n<p>Usage:</p>\n<pre class=\"code\">\n  public Result OnStartup( UIControlledApplication a )\n  {\n    selectionChangedWatcher = new SelectionChangedWatcher( a );\n\n    selectionChangedWatcher.SelectionChanged\n      += new EventHandler(\n        selectionChangedWatcher_SelectionChanged);\n\n    // . . .\n</pre>\n<p>Here are the PasteBin URLs to the sample implementation code:</p>\n<ul>\n<li><a href=\"http://visualstudio.pastebin.com/X5rBXSA6\">Class</a></li>\n<li><a href=\"http://visualstudio.pastebin.com/aNwEFRkZ\">Usage</a></li>\n</ul>\n</blockquote><a name=\"3\"></a>"
  },
  {
    "original_filename": "1295_selection_changed_event",
    "header_text": "Using a UI Automation Event to Notify Selection Changes",
    "local_header_href": "#using-a-ui-automation-event-to-notify-selection-changes",
    "chunk_text": "<h4>Using a UI Automation Event to Notify Selection Changes</h4><p>Vilo submitted a new\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/element-level-events.html?cid=6a00e553e16897883301bb0807bd22970d#comment-6a00e553e16897883301bb0807bd22970d\">\ncomment</a> with\n\nan updated idea based on using UI Automation instead.</p><p>In Vilo's own words:</p><p>As many others Revit API users, I miss the \"element selection changed\" API access.</p><p>As mentioned in this post, there are several solutions, each having some caveats:</p><ol>\n<li>Use the OnIdling event to check current selection.\n  – This may not be reliable, because there is no guarantee it will be fired by Revit.\nSecondly, this is an asynchronous method.</li>\n<li>Use a Timer to raise an event at a specified interval.\n  – More reliable, but still asynchronous and the more accurate it is (i.e. shorter timer delay), the more unneeded events are generated.</li>\n<li>There is a third method that solves all the above \"issues\":</li>\n</ol><p>In Revit, when the user select/unselect an object, there is a special ribbon tab that dynamically changes, its name is \"Modify\".</p><p>Knowing that, and using the standard Autodesk assembly \"AdWindows.dll\", we can register an event that will be fired when this Tab's title changes.</p><p>Here it is the code to subscribe to the event:</p><pre class=\"code\">\n  <span class=\"blue\">foreach</span>( Autodesk.Windows.<span class=\"teal\">RibbonTab</span> tab <span class=\"blue\">in</span>\n    Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.Ribbon.Tabs )\n  {\n    <span class=\"blue\">if</span>( tab.Id == <span class=\"maroon\">\"Modify\"</span> )\n    {\n      tab.PropertyChanged += PanelEvent;\n      <span class=\"blue\">break</span>;\n    }\n  }\n</pre><p>The event handler can look like this:</p><pre class=\"code\">\n  <span class=\"blue\">void</span> PanelEvent(\n    <span class=\"blue\">object</span> sender,\n    System.ComponentModel.<span class=\"teal\">PropertyChangedEventArgs</span> e )\n  {\n    <span class=\"blue\">if</span>( sender <span class=\"blue\">is</span> Autodesk.Windows.<span class=\"teal\">RibbonTab</span> )\n    {\n      <span class=\"blue\">if</span>( e.PropertyName == <span class=\"maroon\">\"Title\"</span> )\n      {\n        <span class=\"green\">//selection changed !</span>\n      }\n    }\n  }\n</pre><p>Not the cleanest way I admit, but until Autodesk adds the relevant API methods, this is (for me) the best.</p><p>Update:</p><ul>\n<li>The test \"if (sender is Autodesk.Windows.RibbonTab)\" is not needed.</li>\n<li>The Tab's name is not dependent to current language.</li>\n</ul><p>My Revit is in French, and the tab's name is still \"Modify\" at start (then it changes according to current selection of course).</p><p>Limitation:</p><ul>\n<li>There is actually a limitation I'm working on: the event is not fired after selecting the 3rd element (and 4th, 5th, ...) in a multiselection.</li>\n</ul><a name=\"4\"></a>"
  },
  {
    "original_filename": "1295_selection_changed_event",
    "header_text": "CmdSelectionChanged",
    "local_header_href": "#cmdselectionchanged",
    "chunk_text": "<h4>CmdSelectionChanged</h4><p>Jeremy adds: I implemented a new external command\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdSelectionChanged.cs\">\nCmdSelectionChanged</a> in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> exercising this:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> System.Linq;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">#endregion</span> <span class=\"green\">// Namespaces</span>\n \n<span class=\"blue\">namespace</span> BuildingCoder\n{\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">class</span> <span class=\"teal\">CmdSelectionChanged</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">static</span> <span class=\"teal\">UIApplication</span> _uiapp;\n    <span class=\"blue\">static</span> <span class=\"blue\">bool</span> _subscribed = <span class=\"blue\">false</span>;\n \n    <span class=\"blue\">void</span> PanelEvent(\n      <span class=\"blue\">object</span> sender,\n      System.ComponentModel.<span class=\"teal\">PropertyChangedEventArgs</span> e )\n    {\n      <span class=\"teal\">Debug</span>.Assert( sender <span class=\"blue\">is</span> Autodesk.Windows.<span class=\"teal\">RibbonTab</span>,\n        <span class=\"maroon\">\"expected sender to be a ribbon tab\"</span> );\n \n      <span class=\"blue\">if</span>( e.PropertyName == <span class=\"maroon\">\"Title\"</span> )\n      {\n        <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = _uiapp\n          .ActiveUIDocument.Selection.GetElementIds();\n \n        <span class=\"blue\">int</span> n = ids.Count;\n \n        <span class=\"blue\">string</span> s = ( 0 == n )\n          ? <span class=\"maroon\">\"&lt;nil&gt;\"</span>\n          : <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n            ids.Select&lt;<span class=\"teal\">ElementId</span>, <span class=\"blue\">string</span>&gt;(\n              id =&gt; id.IntegerValue.ToString() ) );\n \n        <span class=\"teal\">Debug</span>.Print(\n          <span class=\"maroon\">\"CmdSelectionChanged: selection changed: \"</span>\n          + s );\n      }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      _uiapp = commandData.Application;\n \n      <span class=\"blue\">foreach</span>( Autodesk.Windows.<span class=\"teal\">RibbonTab</span> tab <span class=\"blue\">in</span>\n        Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.Ribbon.Tabs )\n      {\n        <span class=\"blue\">if</span>( tab.Id == <span class=\"maroon\">\"Modify\"</span> )\n        {\n          <span class=\"blue\">if</span>( _subscribed )\n          {\n            tab.PropertyChanged -= PanelEvent;\n            _subscribed = <span class=\"blue\">false</span>;\n          }\n          <span class=\"blue\">else</span>\n          {\n            tab.PropertyChanged += PanelEvent;\n            _subscribed = <span class=\"blue\">true</span>;\n          }\n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"CmdSelectionChanged: _subscribed = {0}\"</span>, _subscribed );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><p>Notice that this external command toggles the event subscription on and off on each call.</p><p>Obviously this technique would normally not be used in a command, but on startup in an external application.</p><p>Also, accessing the ActiveUIDocument.Selection.GetElementIds method in the PanelEvent event handler is absolutely forbidden, since we are not in a valid API context at that point.</p><p>A real application would handle this more elegantly and above all legally, e.g. by raising an external event in the PanelEvent event handler, and then accessing the selection set inside the external event handler instead.</p><p>Still, for a quick test this works fine.</p><p>Here is the result of launching the command, alternately selecting individual Revit elements in the model, clearing the selection set again by clicking into void space, and relaunching the command to terminate the event subscription again:</p><pre>\n  $ grep CmdSel /tmp/sel.txt\n  CmdSelectionChanged: _subscribed = True\n  CmdSelectionChanged: selection changed: 121703\n  CmdSelectionChanged: selection changed: &lt;nil&gt;\n  CmdSelectionChanged: selection changed: 121736\n  CmdSelectionChanged: selection changed: &lt;nil&gt;\n  CmdSelectionChanged: selection changed: 121785\n  CmdSelectionChanged: selection changed: &lt;nil&gt;\n  CmdSelectionChanged: selection changed: 121812\n  CmdSelectionChanged: selection changed: &lt;nil&gt;\n  CmdSelectionChanged: selection changed: 121868\n  CmdSelectionChanged: selection changed: &lt;nil&gt;\n  CmdSelectionChanged: _subscribed = False\n</pre><p>The new external command method CmdSelectionChanged lives in the module\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdSelectionChanged.cs\">\nCmdSelectionChanged.cs</a> in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.0\">\nrelease 2015.0.120.0</a> and later of\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a>.</p>"
  }
]