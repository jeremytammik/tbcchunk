[
  {
    "original_filename": "0071_filter_hosted_elements",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0071_filter_hosted_elements",
    "header_text": "Filter for Hosted Elements",
    "local_header_href": "#filter-for-hosted-elements",
    "chunk_text": "<h3>Filter for Hosted Elements</h3><p>Today was the last day of the Revit programming training here in Barcelona.\nOne of the items we examined is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/barcelona-questions.html#retrieve_windows_hosted_by_a_wall\">\nyesterday's suggestion</a>\n\nto use API filtering and the HOST_ID_PARAM to select the doors and windows hosted by a specific wall. Here is a code snippet that implements this and displays the result in a message box:</p><pre class=\"code\">\n<span class=\"teal\">ElementId</span> id = wall.Id;\n<span class=\"teal\">Type</span> t = <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> );\n<span class=\"teal\">BuiltInCategory</span> bicd = <span class=\"teal\">BuiltInCategory</span>.OST_Doors;\n<span class=\"teal\">BuiltInCategory</span> bicw = <span class=\"teal\">BuiltInCategory</span>.OST_Windows;\n<span class=\"teal\">BuiltInParameter</span> bip = <span class=\"teal\">BuiltInParameter</span>.HOST_ID_PARAM;\n \nAutodesk.Revit.Creation.<span class=\"teal\">Filter</span> cf = app.Create.Filter;\n<span class=\"teal\">Filter</span> f1 = cf.NewCategoryFilter( bicd );\n<span class=\"teal\">Filter</span> f2 = cf.NewCategoryFilter( bicw );\n<span class=\"teal\">Filter</span> f3 = cf.NewLogicOrFilter( f1, f2 );\n \n<span class=\"teal\">Filter</span> f4 = cf.NewTypeFilter( t );\n<span class=\"teal\">Filter</span> f5 = cf.NewLogicAndFilter( f3, f4 );\n \n<span class=\"teal\">Filter</span> f6 = cf.NewParameterFilter( bip,\n  <span class=\"teal\">CriteriaFilterType</span>.Equal, id );\n \n<span class=\"teal\">Filter</span> f7 = cf.NewLogicAndFilter( f5, f6 );\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; hosted = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\ndoc.get_Elements( f7, hosted );\nn = hosted.Count;\n \n<span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Format(\n  <span class=\"maroon\">\"Wall &lt;{0} {1}&gt; hosts {2} door\"</span>\n  + <span class=\"maroon\">\" and window element{3}{4}\\n\"</span>,\n  wall.Name, id.Value, n,\n  ( ( 1 == n ) ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ),\n  ( ( 0 == n ) ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\":\"</span> ) );\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> fi <span class=\"blue\">in</span> hosted )\n{\n  s += <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"\\n  {0} {1} {2}\"</span>,\n    fi.Category.Name, fi.Name, fi.Id.Value );\n}\n<span class=\"teal\">MessageBox</span>.Show( s, <span class=\"maroon\">\"Anfitrion\"</span> );\n</pre><p>In case you are wondering, 'anfitrión' means 'host' in Spanish.</p>"
  }
]