[
  {
    "original_filename": "1135_categ_type_inst_param",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1135_categ_type_inst_param",
    "header_text": "Category Support for Shared Type and Instance Parameters",
    "local_header_href": "#category-support-for-shared-type-and-instance-parameters",
    "chunk_text": "<h3>Category Support for Shared Type and Instance Parameters</h3><p>Welcome to my last post on the Revit 2014 API, and one final new external command and update of The Building Coder sample collection before we migrate to Revit 2015.</p><p>Revit 2015 was\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/revit-2015-released.html\">\nreleased last week, the Revit SDK was posted and updated</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/revitlookup-for-revit-2015.html\">\nRevitLookup for Revit 2015 is available on GitHub</a> and the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/revit-2015-api-news-devdays-online-recording.html\">\nDevDays Online presentation</a> on\n\nthe new API functionality is available.</p><p>Before migrating The Building Coder samples from Revit 2014 to Revit 2015, let's add one last external command to it, supporting us in taking a detailed look at how to determine whether a category provides support for instance versus type parameters.</p><p>This topic arose in the Revit API discussion forum, where Todd Jacobs of\n\n<a href=\"http://www.gfnet.com/\">Gannett Fleming, Inc.</a> started a thread to\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/Determine-if-Category-supports-Type-parameter-binding/m-p/4918068\">\ndetermine if a category supports type parameter binding</a>:</p><p><strong>Question:</strong> I can get a list of categories that support bound parameters like this.</p><pre class=\"code\">\n  <span class=\"teal\">SortedList</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Category</span>&gt; CatList\n    = <span class=\"blue\">new</span> <span class=\"teal\">SortedList</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Category</span>&gt;();\n \n  <span class=\"teal\">Categories</span> cats = doc.Settings.Categories;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Category</span> cat <span class=\"blue\">in</span> cats )\n  {\n    <span class=\"blue\">if</span>( cat.AllowsBoundParameters )\n    {\n      CatList.Add( cat.Name, cat );\n    }\n  }   \n</pre><p>But how can I tell from this list which categories allow Type bound parameters vs. Instance bound parameters?</p><p>I would like to produce two lists, similar to the UI for adding project parameters when switching from Type to Instance; the Categories list updates with the available categories for the given selection, not interested in sub-categories at the moment.</p><p>As an example:</p><p>The Sheets category shows up only when created shared Instance parameters:</p><center>\n<img alt=\"Categories supporting instance parameters\" src=\"img/category_instance_param_list.png\"/>\n</center><p>It is not displayed at all when selecting Type parameter properties:</p><center>\n<img alt=\"Categories supporting type parameters\" src=\"img/category_type_param_list.png\"/>\n</center><p><strong>Answer:</strong> Do the suggestions on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/category-analysis-with-and-without-python.html\">\ncategory analysis with and without Python</a> help?\n\n\n<p><strong>Response:</strong> No, not really, unfortunately.</p>\n<p>How does Revit do it internally? Is it a static list?</p>\n<p>Here is where I want to be:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Create a Category Set containing only </span>\n  <span class=\"green\">// categories that allow Type bound parameters</span>\n \n  <span class=\"teal\">Categories</span> cats = doc.Settings.Categories;\n \n  Autodesk.Revit.DB.<span class=\"teal\">CategorySet</span> catSetTypeOnly\n    = doc.Application.Create.NewCategorySet();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Category</span> cat <span class=\"blue\">in</span> cats )\n  {\n    <span class=\"green\">// This property exists.</span>\n \n    <span class=\"blue\">if</span>( cat.AllowsBoundParameters )\n    {\n      <span class=\"green\">// This property is needed.</span>\n \n      <span class=\"blue\">if</span>( cat.AllowsTypeBoundParameters )\n      {\n        catSetTypeOnly.Insert( cat );\n      }\n    }\n  }\n</pre>\n<p>Then I could produce the same list as Revit for these, like this:</p>\n<center>\n<img alt=\"Categories supporting type and instance parameters\" src=\"img/category_type_instance_param_list.png\"/>\n</center>\n<p><strong>Answer:</strong> I am sorry to say the Revit API does not currently provide this functionality, so I submitted the wish list item CF-1079 [API wish: access to CategoryInfo hasSymbols -- 09406242] on your behalf for it.</p>\n<p><strong>Response:</strong> For our immediate needs we developed a set of hardcoded enum's for this task as a workaround.</p>\n<p>Please be advised that Equality checks will fail without casting, and Type Safe concerns are not addressed.</p>\n<p>Please see attached\n\n<a href=\"zip/category_type_instance_param_code_example.txt\">CodeExample.txt</a>.</p>\n<p><strong>Answer:</strong> Congratulations on putting together these two useful lists, and thank you very much for sharing them.</p>\n<p>I simplified your sample code, and pondered your choice of enum.</p>\n<p>I wonder whether it is more efficient performance-wise to use an enumeration of a dictionary for looking up the built-in categories to find out whether they support type or instance parameters, respectively.</p>\n<p>Basically, this can be seen as two dictionaries mapping a built-in category to a Boolean yes-no value.</p>\n<p>Or just mapping to a yes value, and no answer stands for no.</p>\n<p>I looked at a stackoverflow discussion on\n\n<a href=\"http://stackoverflow.com/questions/3256713/enum-and-performance\">\nenum and performance</a>.\n\n<p>In the end, I lean towards the dictionary solution.</p>\n<p>I therefore reused your two lists to convert them to dictionaries and define two Boolean predicate methods:</p>\n<pre class=\"code\">\n  <span class=\"teal\">BuiltInCategory</span> bic = ...;\n \n  <span class=\"blue\">bool</span> bType = BicSupportsTypeParameters( bic );\n  <span class=\"blue\">bool</span> bInstance = BicSupportsInstanceParameters( bic );\n</pre>\n<p>I implemented a new external command CmdCategorySupportsTypeParameter in The Building Coder samples to test them.</p>\n<p>I use two simple arrays to store the collections of built-in categories supporting type and instance parameters, respectively:</p>\n<pre class=\"code\">\n  <span class=\"blue\">#region</span> Built-in categories supporting type parameters\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"teal\">BuiltInCategory</span>[]\n    _bicAllowsBoundParametersAsType\n      = <span class=\"blue\">new</span> <span class=\"teal\">BuiltInCategory</span>[]\n      {\n        <span class=\"gray\">///&lt;summary&gt;</span><span class=\"green\">Analytical Links</span><span class=\"gray\">&lt;/summary&gt;</span>\n        <span class=\"teal\">BuiltInCategory</span>.OST_LinksAnalytical,\n        <span class=\"gray\">///&lt;summary&gt;</span><span class=\"green\">Structural Connections</span><span class=\"gray\">&lt;/summary&gt;</span>\n        <span class=\"teal\">BuiltInCategory</span>.OST_StructConnections,\n        <span class=\"gray\">///&lt;summary&gt;</span><span class=\"green\">Structural Fabric Areas</span><span class=\"gray\">&lt;/summary&gt;</span>\n        <span class=\"teal\">BuiltInCategory</span>.OST_FabricAreas,\n\n        . . .\n\n        <span class=\"gray\">///&lt;summary&gt;</span><span class=\"green\">Walls</span><span class=\"gray\">&lt;/summary&gt;</span>\n        <span class=\"teal\">BuiltInCategory</span>.OST_Walls\n      };\n  <span class=\"blue\">#endregion</span> <span class=\"green\">// Built-in categories supporting type parameters</span>\n\n  <span class=\"blue\">#region</span> Built-in categories supporting instance parameters\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"teal\">BuiltInCategory</span>[]\n    _bicAllowsBoundParametersAsInstance\n      = <span class=\"blue\">new</span> <span class=\"teal\">BuiltInCategory</span>[]\n      {\n        <span class=\"gray\">///&lt;summary&gt;</span><span class=\"green\">Analytical Links</span><span class=\"gray\">&lt;/summary&gt;</span>\n        <span class=\"teal\">BuiltInCategory</span>.OST_LinksAnalytical,\n        <span class=\"gray\">///&lt;summary&gt;</span><span class=\"green\">Analytical Nodes</span><span class=\"gray\">&lt;/summary&gt;</span>\n        <span class=\"teal\">BuiltInCategory</span>.OST_AnalyticalNodes,\n        <span class=\"gray\">///&lt;summary&gt;</span><span class=\"green\">Analytical Foundation Slabs</span><span class=\"gray\">&lt;/summary&gt;</span>\n        <span class=\"teal\">BuiltInCategory</span>.OST_FoundationSlabAnalytical,\n\n        . . .\n\n        <span class=\"gray\">///&lt;summary&gt;</span><span class=\"green\">Walls</span><span class=\"gray\">&lt;/summary&gt;</span>\n        <span class=\"teal\">BuiltInCategory</span>.OST_Walls\n      };\n  <span class=\"blue\">#endregion</span> <span class=\"green\">// Built-in categories supporting instance parameters</span>\n</pre>\n<p>They are used to define dictionaries for faster lookup:</p>\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"blue\">readonly</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">BuiltInCategory</span>, <span class=\"teal\">BuiltInCategory</span>&gt;\n    _bicSupportsTypeParameters\n      = _bicAllowsBoundParametersAsType\n        .ToDictionary&lt;<span class=\"teal\">BuiltInCategory</span>, <span class=\"teal\">BuiltInCategory</span>&gt;(\n          c =&gt; c );\n \n  <span class=\"blue\">static</span> <span class=\"blue\">readonly</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">BuiltInCategory</span>, <span class=\"teal\">BuiltInCategory</span>&gt;\n    _bicSupportsInstanceParameters\n      = _bicAllowsBoundParametersAsInstance\n        .ToDictionary&lt;<span class=\"teal\">BuiltInCategory</span>, <span class=\"teal\">BuiltInCategory</span>&gt;(\n          c =&gt; c );\n</pre>\n<p>These in turn are used to define two efficient Boolean predicate lookup functions:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return true if the given built-in </span>\n  <span class=\"gray\">///</span><span class=\"green\"> category supports type parameters.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> BicSupportsTypeParameters(\n    <span class=\"teal\">BuiltInCategory</span> bic )\n  {\n    <span class=\"blue\">return</span> _bicSupportsTypeParameters.ContainsKey(\n      bic );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return true if the given built-in </span>\n  <span class=\"gray\">///</span><span class=\"green\"> category supports instance parameters.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> BicSupportsInstanceParameters(\n    <span class=\"teal\">BuiltInCategory</span> bic )\n  {\n    <span class=\"blue\">return</span> _bicSupportsInstanceParameters.ContainsKey(\n      bic );\n  }\n</pre>\n<p>Here is the external command Execute method implementation to exercise them:</p>\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> SupportsOrNotString( <span class=\"blue\">bool</span> b )\n  {\n    <span class=\"blue\">return</span> b\n      ? <span class=\"maroon\">\"supports\"</span>\n      : <span class=\"maroon\">\"does not support\"</span>;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> revit,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = revit.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"blue\">int</span> nCategories = 0;\n    <span class=\"blue\">int</span> nSupportType = 0;\n    <span class=\"blue\">int</span> nSupportInstance = 0;\n    <span class=\"blue\">bool</span> bType, bInstance;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInCategory</span> bic <span class=\"blue\">in</span>\n      <span class=\"teal\">Enum</span>.GetValues( <span class=\"blue\">typeof</span>( <span class=\"teal\">BuiltInCategory</span> ) ) )\n    {\n      bType = BicSupportsTypeParameters( bic );\n      bInstance = BicSupportsInstanceParameters( bic );\n \n      ++nCategories;\n      nSupportType += bType ? 1 : 0;\n      nSupportInstance += bInstance ? 1 : 0;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} {1} instance and {2} type parameters\"</span>,\n        bic,\n        SupportsOrNotString( bInstance ),\n        SupportsOrNotString( bType ) );\n    }\n \n    <span class=\"blue\">string</span> caption = <span class=\"maroon\">\"Categories supporting type \"</span>\n      + <span class=\"maroon\">\"and instance parameters\"</span>;\n \n    <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Tested {0} built-in categories \"</span>\n      + <span class=\"maroon\">\"in total, {1} supporting instance and {2} \"</span>\n      + <span class=\"maroon\">\"supporting type parameters.\"</span>, nCategories,\n      nSupportInstance, nSupportType );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"\\n\"</span> + caption + <span class=\"maroon\">\":\\n\"</span> + msg );\n \n    <span class=\"teal\">TaskDialog</span>.Show( caption, msg );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>It tests their return value for each and every built-in category enumeration value and prints a report like this to the Visual Studio debug output window:</p>\n<pre>\n  OST_StackedWalls_Obsolete_IdInWrongRange does not\n    support instance and does not support type parameters\n  OST_MassTags_Obsolete_IdInWrongRange does not\n    support instance and does not support type parameters\n  OST_MassSurface_Obsolete_IdInWrongRange\n    does not support instance and does not support type parameters\n  . . .\n  OST_LinksAnalytical supports instance and\n    supports type parameters\n  . . .\n  OST_AnalyticalNodes supports instance and\n    does not support type parameters\n  . . .\n  OST_MatchAll does not support instance and\n    does not support type parameters\n  INVALID does not support instance and\n    does not support type parameters\n\n  Categories supporting type and instance parameters:\n  Tested 919 built-in categories in total,\n  128 supporting instance and 91 supporting type parameters.\n</pre>\n<p>I do not see any categories at all that support type parameters and not instance parameters.</p>\n<p>Here is the task dialogue summarising the results:</p>\n<center>\n<img alt=\"Report on categories supporting type and instance parameters\" src=\"img/category_type_instance_param_report.png\" width=\"366\"/>\n</center>\n<p>I published the full source code in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples GitHub repository</a>.</p>\n<p>The version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.109.0\">\nrelease 2014.0.109.0</a>.</p>\n<p>Many thanks to Todd for providing these two important lists of categories.</p>\n</p></p>"
  }
]