[
  {
    "original_filename": "1159_va3c_resolve_assembly",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1159_va3c_resolve_assembly",
    "header_text": "Assembly Resolver",
    "local_header_href": "#assembly-resolver",
    "chunk_text": "<h3>Assembly Resolver</h3><p>One of the\n\n<a href=\"\">\nRvtVa3c</a>\n<a href=\"...#3\">\nimplementation aspects</a>\n\nthat I mentioned was the fact that we ran into some problems using the standard .NET Microsoft System.Runtime.Serialization.Json.DataContractJsonSerializer class and chose to replace it with\n\nthe more reliable <a href=\"http://james.newtonking.com/json\">Json.NET</a> component instead.</p><p>Serialisation is required by our early decision to define and generate the three.js JSON file format by representing all the required objects, their properties and relationships by a set of C# classes.</p><p>We instantiate and populate these classes in our custom exporter context implementation and serialise them out to JSON to generate the output file used to represent the BIM for the va3c viewer.</p><p>A little bit too late, Ben pointed out that we could have saved ourselves the whole effort of implementing and populating a C# class hierarchy by using\n\n<a href=\"https://github.com/va3c/GHva3c/blob/master/GHva3c/GHva3c/va3c_geometry.cs\">\ndynamic JSON and the System.Dynamic.ExpandoObject</a> instead,\n\nas he does in his\n\n<a href=\"https://github.com/va3c/GHva3c\">GHva3c Grasshopper va3c exporter</a>.</p><p>Anyway, we continued down the path of C# class definition and serialisation to generate the JSON output file starting from the root three.js scene object.</p><p>The original code using a DataContractJsonSerializer to serialise it and thus generate the JSON output looked like this:</p><pre class=\"code\">\n  <span class=\"blue\">using</span>( <span class=\"teal\">FileStream</span> stream\n    = <span class=\"teal\">File</span>.OpenWrite( filename ) )\n  {\n    DataContractJsonSerializer serialiser\n      = <span class=\"blue\">new</span> DataContractJsonSerializer(\n        <span class=\"blue\">typeof</span>( <span class=\"teal\">Va3cScene</span> ) );\n \n    serialiser.WriteObject( stream, _scene );\n  }\n</pre><p>This became too buggy at a certain point.\nFor instance, when writing to the same file repeatedly, the end of the updated file still contained data from the previous version, obviously corrupting the entire structure.</p><p>It can be easily replaced by the following code using Json.NET:</p><pre class=\"code\">\n  <span class=\"teal\">JsonSerializerSettings</span> settings\n    = <span class=\"blue\">new</span> <span class=\"teal\">JsonSerializerSettings</span>();\n \n  settings.NullValueHandling\n    = <span class=\"teal\">NullValueHandling</span>.Ignore;\n \n  <span class=\"teal\">File</span>.WriteAllText( _filename,\n    <span class=\"teal\">JsonConvert</span>.SerializeObject( _scene,\n      <span class=\"teal\">Formatting</span>.Indented, settings ) );\n</pre><p>On the first run, though, this caused our external command to fail with an error reporting that the Newtonsoft.Json.dll assembly could not be loaded.</p><p>This is due to .NET restrictions requiring proper .NET application behaviour.</p><p><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html\">As mentioned</a>,\n\none way to resolve this issue is to install the entire application in a sub-folder of the Revit.exe directory, which is not always feasible.</p><p>If it lives elsewhere, the restriction can be somewhat circumvented using a .NET assembly resolver.</p><p>I mentioned this beast in the past, e.g. discussing the RvtUnit project for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/revit-add-in-unit-testing.html\">\nRevit Add-in unit testing</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/security-framing-cross-section-analyser-and-rex.html#6\">\nusing REX without the REX framework</a>.</p><p>Matt sets up such resolution handlers on a regular basis, so he quickly typed the following code from scratch by heart to implement and register it in the main RvtVa3c exporter method ExportView3D:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Custom assembly resolver to find our support</span>\n  <span class=\"gray\">///</span><span class=\"green\"> DLL without being forced to place our entire </span>\n  <span class=\"gray\">///</span><span class=\"green\"> application in a subfolder of the Revit.exe</span>\n  <span class=\"gray\">///</span><span class=\"green\"> directory.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  System.Reflection.<span class=\"teal\">Assembly</span>\n    CurrentDomain_AssemblyResolve(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">ResolveEventArgs</span> args )\n  {\n    <span class=\"blue\">if</span>( args.Name.Contains( <span class=\"maroon\">\"Newtonsoft\"</span> ) )\n    {\n      <span class=\"blue\">string</span> filename = <span class=\"teal\">Path</span>.GetDirectoryName(\n        System.Reflection.<span class=\"teal\">Assembly</span>\n          .GetExecutingAssembly().Location );\n \n      filename = <span class=\"teal\">Path</span>.Combine( filename,\n        <span class=\"maroon\">\"Newtonsoft.Json.dll\"</span> );\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">File</span>.Exists( filename ) )\n      {\n        <span class=\"blue\">return</span> System.Reflection.<span class=\"teal\">Assembly</span>\n          .LoadFrom( filename );\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Export a given 3D view to JSON using</span>\n  <span class=\"gray\">///</span><span class=\"green\"> our custom exporter context.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> ExportView3D( <span class=\"teal\">View3D</span> view3d, <span class=\"blue\">string</span> filename )\n  {\n    <span class=\"teal\">AppDomain</span>.CurrentDomain.AssemblyResolve\n      += CurrentDomain_AssemblyResolve;\n \n    <span class=\"teal\">Document</span> doc = view3d.Document;\n \n    <span class=\"teal\">Va3cExportContext</span> context\n      = <span class=\"blue\">new</span> <span class=\"teal\">Va3cExportContext</span>( doc, filename );\n \n    <span class=\"teal\">CustomExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">CustomExporter</span>(\n      doc, context );\n \n    <span class=\"green\">// Note: Excluding faces just suppresses the </span>\n    <span class=\"green\">// OnFaceBegin calls, not the actual processing </span>\n    <span class=\"green\">// of face tessellation. Meshes of the faces </span>\n    <span class=\"green\">// will still be received by the context.</span>\n \n    exporter.IncludeFaces = <span class=\"blue\">false</span>;\n \n    exporter.ShouldStopOnError = <span class=\"blue\">false</span>;\n \n    exporter.Export( view3d );\n  }\n</pre><p>For completeness sake, here is the rest of the external command mainline implementation, prompting for interactive use of the output filename and folder, stored for reuse in subsequent runs in the same session:</p><pre class=\"code\">\n<span class=\"blue\"> #region</span> SelectFile\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Store the last user selected output folder</span>\n  <span class=\"gray\">///</span><span class=\"green\"> in the current editing session.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> _output_folder_path = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return true is user selects and confirms</span>\n  <span class=\"gray\">///</span><span class=\"green\"> output file name and folder.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> SelectFile(\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> folder_path,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> filename )\n  {\n    <span class=\"teal\">SaveFileDialog</span> dlg = <span class=\"blue\">new</span> <span class=\"teal\">SaveFileDialog</span>();\n \n    dlg.Title = <span class=\"maroon\">\"JSelect SON Output File\"</span>;\n    dlg.Filter = <span class=\"maroon\">\"JSON files|*.js\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != folder_path\n      &amp;&amp; 0 &lt; folder_path.Length )\n    {\n      dlg.InitialDirectory = folder_path;\n    }\n \n    dlg.FileName = filename;\n \n    <span class=\"blue\">bool</span> rc = <span class=\"teal\">DialogResult</span>.OK == dlg.ShowDialog();\n \n    <span class=\"blue\">if</span>( rc )\n    {\n      filename = <span class=\"teal\">Path</span>.GetFileName( dlg.FileName );\n \n      folder_path = <span class=\"teal\">Path</span>.GetDirectoryName(\n        filename );\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// SelectFile</span>\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"blue\">if</span>( doc.ActiveView <span class=\"blue\">is</span> <span class=\"teal\">View3D</span> )\n    {\n      <span class=\"blue\">string</span> filename = doc.PathName;\n      <span class=\"blue\">if</span>( 0 == filename.Length )\n      {\n        filename = doc.Title;\n      }\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _output_folder_path )\n      {\n        _output_folder_path = <span class=\"teal\">Path</span>.GetDirectoryName(\n          filename );\n      }\n      filename = <span class=\"teal\">Path</span>.GetFileName( filename ) + <span class=\"maroon\">\".js\"</span>;\n \n      <span class=\"blue\">if</span>( SelectFile( <span class=\"blue\">ref</span> _output_folder_path,\n        <span class=\"blue\">ref</span> filename ) )\n      {\n        filename = <span class=\"teal\">Path</span>.Combine( _output_folder_path,\n          filename );\n \n        ExportView3D( doc.ActiveView <span class=\"blue\">as</span> <span class=\"teal\">View3D</span>,\n          filename );\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"va3c\"</span>,\n        <span class=\"maroon\">\"You must be in 3D view to export.\"</span> );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n</pre><p>For the custom exporter code populating the objects representing the three.js scene hierarchy and the entire add-in implementation, please refer to the\n\n<a href=\"https://github.com/va3c/RvtVa3c\">RvtVa3c GitHub repository</a> and the\n\n<a href=\"https://github.com/va3c/RvtVa3c .... \">Va3cExportContext implementation</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1159_va3c_resolve_assembly",
    "header_text": "External Command Lifecycle",
    "local_header_href": "#external-command-lifecycle",
    "chunk_text": "<h4>External Command Lifecycle</h4><p>Matt added an additional consideration:</p><p><strong>Question:</strong> I realized one thing that I didn't do here that I sometimes address – but it would make the blog post code a bit more complicated.</p><p>Do you know what the lifecycle is of a Revit command? Does it get disposed afterwards, or is it re-used, or left alive? I have a vague feeling that it doesn't “go away” right away.</p><p>As such, because we've registered this event on the current appDomain, you might still be getting callbacks into this event after you leave this app and run the next command (which can be confusing).</p><p>To address this, you would define the callback event handler first, add it, and then remove the handler at the end when the command ended.</p><p>So – it's up to you if that's a complexity that should be addressed or not? Because this example is only loading the Newtonsoft JSON specifically, it's pretty harmless.</p><p><strong>Answer:</strong> A new external command implementation class is instantiated each time you launch the command, as I painfully discovered searching for a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/roomeditorapp-idling-and-benchmarking-timer.html#2\">\nsolution to the RoomEditorApp idling issues</a>:\n\n\"each new external command invocation generates a new different class instance.\"</p><p>For this reason, I was unable to unsubscribe from an external event that was subscribed to from an external command, and changed the subscriber to be the external application instead of the external command.</p>"
  }
]