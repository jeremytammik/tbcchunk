[
  {
    "original_filename": "0135_model_line_sketch_plane",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0135_model_line_sketch_plane",
    "header_text": "Model Line Sketch Plane",
    "local_header_href": "#model-line-sketch-plane",
    "chunk_text": "<h3>Model Line Sketch Plane</h3><p>Model lines always reside in a sketch plane, which can give rise to some issues.\nOne of these issues is the question of whether it really is necessary to generate a separate sketch plane for every single model line.\nAnother question which recently came up is how to handle a Move request which would take the model line off the sketch plane it belongs to.\nBefore diving into these topics, there are two bits of recent Revit API relevant news to share.</p>"
  },
  {
    "original_filename": "0135_model_line_sketch_plane",
    "header_text": "Revit API Introduction Webcast Recording",
    "local_header_href": "#revit-api-introduction-webcast-recording",
    "chunk_text": "<h4>Revit API Introduction Webcast Recording</h4><p>The recording of the \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nRevit API Introduction webcast</a>\n\nheld last week on Wednesday April 29<sup>th</sup> has been posted to the Developer Center and the ADN web site.</p>"
  },
  {
    "original_filename": "0135_model_line_sketch_plane",
    "header_text": "Updated Revit 2010 SDK",
    "local_header_href": "#updated-revit-2010-sdk",
    "chunk_text": "<h4>Updated Revit 2010 SDK</h4><p>An updated version of the \n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=2484975\">\nRevit 2010 SDK</a>\n\nis available. \nThe changes mostly affect the documentation.</p>"
  },
  {
    "original_filename": "0135_model_line_sketch_plane",
    "header_text": "Model Line must Reside in Sketch Plane",
    "local_header_href": "#model-line-must-reside-in-sketch-plane",
    "chunk_text": "<h4>Model Line must Reside in Sketch Plane</h4><p>Returning to the model lines and sketch planes, here are some slightly edited musings on that by Miroslav Schonauer of Autodesk:</p><p><strong>Question:</strong>\nIn the Revit user interface, a model line is always created on the current work plane.\nSubsequently moving the line or grip-moving the endpoints always retains the line within that given plane.\nThis plane can be accessed via the API through the Line element SketchPlane property.</p><p>In the API, we create a new model curve using the method</p><pre>\npublic ModelCurve NewModelCurve(\n  Curve geometryCurve,\n  SketchPlane sketchPlane )\n</pre><p>One might expect an exception to be thrown if the curve specified does not reside within the given SketchPlane.\nThis is not the case, though.\nOne can create any line on any plane, for instance using the Revit SDK ModelLines sample.\nAs an example, I created a vertical line using the first SketchPlane stored in the Revit database, which always seems to be the XY plane.<p>\n<p>The recommended approach is to create a plane containing the desired line and use that as the sketch plane when creating the line. I would like to avoid this for two reasons:</p>\n<ul>\n<li>I want to avoid having potentially thousands of extra SketchPlane objects in my model.\n<li>I want to avoid the additional code to create or find a suitable plane for each line.\n</li></li></ul>\n<p>It would be convenient if we could use one single default sketch plane to host all our model lines, regardless of whether the line actually resides on that plane or not.\nOne would not have to care about the sketch plane, or create a sketch plane containing the line every time a new line is required.</p>\n<p>The question is whether this behaviour is intentional or allowed by omission, in which case it would be dangerous to design any code based on these premises.\nMaybe the API will throw an error in future releases, or the model will misbehave under certain circumstances.</p>\n<p>After more experimenting in the user interface, I observe that if I grip move the endpoints of such a line after its out-of-plane API creation, the line drops onto the plane, so it starts to behave as standard in the user interface. If the line is not edited, for instance by pinning it to prevent this, the RVT file can be happily saved, re-opened and the line legally remains as created via API.</p>\n<p>So apparently there is no absolute requirement built into the Revit geometrical parametric engine for a line to fully reside on its sketch plane. It may be different for other curve types like arcs and splines, etc. Apparently it is only the user interface layer that forces such behaviour, which of course is consistent with Revits parametric BIM concepts.</p>\n<p>The question is, can one rely on this extended API behaviour?</p>\n<p><strong>Answer:</strong>\nThe answer is <strong>no</strong>. The NewModelCurve method should actually check if the geometry curve lies within the given sketch plane. If the curve lies outside plane, other functions relying on the sketch plane might go wrong.</p>\n<p>In Revit 2010, when working in a mass family, you can create a CurveByPoints without having to use a sketch plane.\nIn any other family or project environment, however, a sketch plane is still required.</p>\n<p>An earlier discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/model-line-creation.html\">\ncreating model lines</a>\n\nprovides sample code demonstrating the sketch plane creation for each model line.\nHere is another method for creating a model line with an associated sketch plane to host it, also provided by Miro.\nIt uses the Z axis to span the sketch plane for non-vertical lines, and otherwise the Y axis:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ModelLine</span> CreateModelLine(\n  Autodesk.Revit.<span class=\"teal\">Application</span> app,\n  <span class=\"teal\">XYZ</span> p,\n  <span class=\"teal\">XYZ</span> q )\n{\n  <span class=\"blue\">if</span>( p.Distance( q ) &lt; <span class=\"teal\">Util</span>.MinLineLength ) <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n\n  <span class=\"teal\">XYZ</span> v = q - p;\n \n  <span class=\"blue\">double</span> dxy = <span class=\"teal\">Math</span>.Abs( v.X ) + <span class=\"teal\">Math</span>.Abs( v.Y );\n \n  <span class=\"teal\">XYZ</span> w = ( dxy &gt; <span class=\"teal\">Util</span>.TolPointOnPlane )\n    ? <span class=\"teal\">XYZ</span>.BasisZ\n    : <span class=\"teal\">XYZ</span>.BasisY;\n \n  <span class=\"teal\">XYZ</span> norm = v.Cross( w ).Normalized;\n \n  <span class=\"teal\">Plane</span> plane = app.Create.NewPlane( norm, p );\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Document</span> creDoc\n    = app.ActiveDocument.Create;\n \n  <span class=\"teal\">SketchPlane</span> sketchPlane = creDoc.NewSketchPlane( plane );\n \n  <span class=\"blue\">return</span> creDoc.NewModelCurve(\n    app.Create.NewLine( p, q, <span class=\"blue\">true</span> ),\n    sketchPlane ) <span class=\"blue\">as</span> <span class=\"teal\">ModelLine</span>;\n}\n</pre>\n<p>With this discussion in place, let us look at a related question on moving model lines.</p>\n<h4>Using the Move method on model lines</h4>\n<p><strong>Question:</strong>\nI am attempting to use the Move method on an ElementSet containing ModelCurve instances. The Move method returns true, signifying that the elements were moved, but they are not.\nLooking at the elements in 3D, they still remain at elevation 0.0, although the Move operation changed the elevation 0.0 to elevation -10.0 using the vector NewXYZ(0,0,-10).\nDoes Move only work of some element types?\nDo I need to do something different to get it to work with ModelCurve instances?</p>\n<p>Is there an example of using the Move method with ModelCurve instances?\nIs there a better way to change the elevation of these elements?</p>\n<p><strong>Answer:</strong>\nAs far as I know, the Move method can be used on any Revit model elements.\nHowever, there may be other constraints on these elements as well, which take priority over the Move request.</p>\n<p>The case of model curves is probably one example of such behaviour.\nEvery model curve resides on a specific sketch plane, and cannot be moved off it.\nIn your case, the sketch plane hosting the model lines may well be a horizontal plane with elevation 0.0.\nIn that case, attempts to change the elevation of the model curves will fail, because regardless of the Z coordinate you specify, they will always be forced back into the sketch plane they reside in.</p>\n<p>As explained above, a model curve really must lie in the sketch plane it belongs to.\nAn application generating model lines programmatically can take two approaches:</p>\n<ul>\n<li>The simplistic approach generates a separate sketch plane for every new model line.\n<li>A more complex approach searches for an existing sketch plane containing the new model line to use to host it, and only generates a new sketch plane if no fitting one already exists.</li>\n</li></ul>\n<p>In any case, the application needs to ensure that the model lines generated really do lie in the sketch plane they are assigned to.</p>\n<p>In your case, you need to check that the move operation retains the curve within the same plane.\nFrom your description above, though, that would not appear to be the case.</p>\n<p>Alternatively, you would have to place the model curves on a new sketch plane, which will probably require recreating them from scratch, for instance using a method similar to the ones described above.</p>\n</p></p>"
  },
  {
    "original_filename": "0135_model_line_sketch_plane",
    "header_text": "Using the Move method on model lines",
    "local_header_href": "#using-the-move-method-on-model-lines",
    "chunk_text": "<h4>Using the Move method on model lines</h4><p><strong>Question:</strong>\nI am attempting to use the Move method on an ElementSet containing ModelCurve instances. The Move method returns true, signifying that the elements were moved, but they are not.\nLooking at the elements in 3D, they still remain at elevation 0.0, although the Move operation changed the elevation 0.0 to elevation -10.0 using the vector NewXYZ(0,0,-10).\nDoes Move only work of some element types?\nDo I need to do something different to get it to work with ModelCurve instances?</p><p>Is there an example of using the Move method with ModelCurve instances?\nIs there a better way to change the elevation of these elements?</p><p><strong>Answer:</strong>\nAs far as I know, the Move method can be used on any Revit model elements.\nHowever, there may be other constraints on these elements as well, which take priority over the Move request.</p><p>The case of model curves is probably one example of such behaviour.\nEvery model curve resides on a specific sketch plane, and cannot be moved off it.\nIn your case, the sketch plane hosting the model lines may well be a horizontal plane with elevation 0.0.\nIn that case, attempts to change the elevation of the model curves will fail, because regardless of the Z coordinate you specify, they will always be forced back into the sketch plane they reside in.</p><p>As explained above, a model curve really must lie in the sketch plane it belongs to.\nAn application generating model lines programmatically can take two approaches:</p><ul>\n<li>The simplistic approach generates a separate sketch plane for every new model line.\n<li>A more complex approach searches for an existing sketch plane containing the new model line to use to host it, and only generates a new sketch plane if no fitting one already exists.</li>\n</li></ul><p>In any case, the application needs to ensure that the model lines generated really do lie in the sketch plane they are assigned to.</p><p>In your case, you need to check that the move operation retains the curve within the same plane.\nFrom your description above, though, that would not appear to be the case.</p><p>Alternatively, you would have to place the model curves on a new sketch plane, which will probably require recreating them from scratch, for instance using a method similar to the ones described above.</p>"
  }
]