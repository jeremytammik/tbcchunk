[
  {
    "original_filename": "0497_more_kevin_samples",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0497_more_kevin_samples",
    "header_text": "More Kevin Filtering Benchmarks",
    "local_header_href": "#more-kevin-filtering-benchmarks",
    "chunk_text": "<h3>More Kevin Filtering Benchmarks</h3><p>I caught a germ yesterday in Moscow, maybe travelling on the subway to the office, or at the developer conference itself.\nI suffered through the night with a pain in the bones of my face and a headache, and yet I was able to catch up on lots of sleep in the end, getting up much later than normal today.\nThe whole morning has also been very unpleasant inside my head, but the rest of me feels fine, and it seems to be getting better, miraculously.\n\n<p>The Russian developer conference yesterday was very active and lively with a lot of participation from the attendees.\nI really enjoyed it very much.\n\n<p>Now I am sitting in the Domodedovo airport waiting for the flight to Paris via Vienna.\nNo rest for the wicked, as the English say.\n\n<p>In the overview of Kevin Vandecar's \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/filtered-element-collectors.html\">\nRevit performance tips and tricks</a> presentation at the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/devcamp-devlabs-and-updated-api-training-schedule.html\">\nAEC DevCamp</a> conference\n\nin Boston in June, which formed the base of my  \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/autodesk-university-2010-class-materials.html\">\nAU class CP234-2</a> on\n\nthe same topic, I promised to publish a list of the filtered element collector benchmarking samples he created.\n\n<p>I fulfilled part of that promise by discussing the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nlevel filter benchmark</a> a \n\nwhile ago, and the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\nXML family usage report</a> and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/find-intersecting-elements.html\">\nintersecting element retrieval</a> in\n\nthe past few days.\nI added links to those posts in the list below.\n\n<p>Here is an overview of the rest of Kevin's example and benchmarking commands, which cover the following topics:\n\n<ul>\n<li>Comparison of Revit 2011 filtered element collector versus pre-2011 element access\n<li>Basic filtering examples\n<ol>\n<li>Structural material type and instance usage, Boolean combinations and inversion\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/find-intersecting-elements.html\">\nBounding box intersection, view id and exclusion</a>\n</li></li></ol>\n<li>LINQ examples\n<ol>\n<li>Family instance, furniture category, material black textile\n<li>Non-native mullion class\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\nXML report of family and instance usage</a>\n</li></li></li></ol>\n<li>Parameter filter samples\n<ol>\n<li>Numeric evaluator and integer rule for specific named analysis display style \n<li>Ditto to test Boolean parameter for levels whose crop view is false\n<li>Numeric evaluator and double rule to find levels whose top offset is greater than Z\n<li>String evaluator and string rule to find elements whose view name contains \"Level\"\n</li></li></li></li></ol>\n<li>Parameter filter benchmark\n<ol>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nCompare performance of level filter versus parameter filter versus LINQ</a>\n</li></ol>\n<li>Regeneration and Auto-Join Examples\n<ol>\n<li>Create walls without explicit auto-join call\n<li>Create walls with explicit auto-join call\n<li>Ditto with explicit regenerate and auto-join call for each element\n<li>Demonstrate stale data retrieval\n</li></li></li></li></ol>\n</li></li></li></li></li></li></ul>\n<p>Here is an updated archive\n\n<a href=\"/a/doc/revit/au/2010/doc/AU10_CP234-2_Revit_2011_API_Optimization.zip\">\nAU10_CP234-2_Revit_2011_API_Optimization.zip</a> of \n\nmy AU class material including the source code and Visual Studio solution. \nI removed the sample models, since they are unchanged from my previous posting together with the class handout and presentation in my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/autodesk-university-2010-class-materials.html\">\nAU 2010 class materials</a>.\n\n<p>As always, the sample code performs minimal error checking, and you are obviously encouraged to add adequate checks in your own code.\n\n<p>The commands are intended to be run in the three sample models provided: ArchSample.rvt, EmptyProject.rvt and StructuralUsage.rvt as indicated in the source code command descriptions.\n\n<p>The benchmarks make use of a simple timing utility class, the System.Diagnostics.Stopwatch class. It is built using low-level API calls and uses the high-resolution performance counter instead of standard PC clock, assuming hardware and OS support.\n\n<h4>Benchmarking Results</h4>\n<p>Here are some of the results of running the benchmarking commands on my system:\n\n<ul>\n<li>Emulate old element retrieval requires 66 milliseconds to find 62 structural column elements, whereas the new filtered element collector takes 10 milliseconds for the same task.\n<li>Using System.Linq.IEnumerable.OfType&lt;&gt; to extract 142 mullions out of a collection of 346 family instances takes less than one millisecond, whereas looping through all 346 instances and checking them one by one using cast takes 19 milliseconds.\n<li>10 versus 22 versus 35 milliseconds to extract 52 family instances on a given level using ElementLevelFilter, ElementParameterFilter and LINQ, respectively.\n<li>Regeneration Example 3: 109 milliseconds to create four walls and regenerating after every addition versus 84 milliseconds doing it once only after add finished.\n<li>Regeneration Example 4: 188 milliseconds to update parameter and regenerate at each change versus 80 milliseconds to do it only once at the end.\n</li></li></li></li></li></ul>\n<p>Here are some further notes on the samples and benchmarking results:\n\n<h4>Revit 2011 API versus 2010 Performance Comparison</h4>\n<p>As said,\nthe old element retrieval emulation requires 66 milliseconds to find 62 structural column elements on my system, \nwhereas the new filtered element collector takes 10 milliseconds for the same task.\n\n<p>We can only create a very rough performance comparison between Revit 2010 and 2011, since the real 2010 get_Elements functionality is no longer available. We select all family instances in the model, iterate over them and check their category against the built-in category for structural columns to simulate the 2010 marshalled access and managed code filtering.\n\n<p>In 2011, the same elements can be retrieved by using the OfClass and OfCategory shortcuts for the class and category filters. This is not an exact comparison, because we still have to start off with a collector in both cases. The main point is that access to the data to find a match is much slower in explicit code than using a filter for the same data, where matching is happening natively and only results are returned to you.\n\n\n<h4>Structural Material, Usage and Inversion</h4>\n<p>To select all real structural elements, we select elements whose structural material type is Steel. We are interested in all stick elements, i.e. many different element types like brace, column, girder, etc. Since there are fewer types that we are not interested in, it makes sense to use an inverted filter. We therefore set up four inverted filters for structural instance usage requiring the passing element NOT to be Automatic, Other, Undefined, or Wall. The resulting total of five filters are added to a list and passed in to a logical AND filter to combine all five.\n\n<h4>Bounding box intersection, view id and exclusion</h4>\n<p>I already discussed the filter example 2 command implemented by FilterEx2 to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/find-intersecting-elements.html\">\nfind all neighbouring elements of a selected one</a> in \n\na separate post. \nIt uses the quick BoundingBoxIntersectsFilter to find all elements that intersect the selected element, the collector constructor taking a view id to narrow down to only viewable elements, and finally an exclusion filter to eliminate known elements to exclude such as the picked element itself and the view. \nIt can be run in the StructuralUsage.rvt sample model.\n\n<p>This example finds all related neighbouring elements without even looking at any geometry, very cool.\n\n\n\n<p>The bounding box filtering classes include checks for contained within, point inside, bounding box inside, and bounding box intersect.\n\n<h4>LINQ</h4>\n<p>After making maximum use of the built-in filtered element collector functionality, we can often make use of LINQ to further hone in, narrow down, and post-process the results. The sample code includes the following three examples which illustrate this:\n\n<ol>\n<li>Further filter information using a query\n<li>Fast filter for non-native classes\n<li>Create an XML report of family and instance usage\n</li></li></li></ol>\n<p><strong>1.</strong> Further filter information using a query:\nThe first of these addresses the task of finding all furniture family instances which include a material of a given name. \nFrom the material name, we retrieve the material instance. \nA filtered element collector returns all family instances of the furniture category. \nWe then use LINQ to select the elements whose material contains the required material. \nThis sample is intended to be run in the simple house model.\n\n<p><strong>2.</strong> Fast filter for non-native classes:\nOne of the few tasks that cannot be solved with the filtered element collectors alone is retrieval of non-native classes. \nSome of the classes available in the Revit API have been added for the sake of developer's convenience and are not present in the internal native Revit code, such as the mullion class, so they cannot be filtered for directly. \nFor a full list of the 15 non-native classes that cannot be filtered for, please refer to the reference documentation for ElementClassFilter. \nI discussed a couple of other examples in the past, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">\nAnnotationSymbol</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea-update.html\">\nPanel</a> classes.\n\n<p>LINQ provides a handy way to filter for these non-native classes. \nWe can use a filtered element collector to return all family instances, the mullion parent class, then search for real mullions. \nThis search is implemented twice for benchmarking purposes, once using the generic LINQ OfType&lt;&gt; predicate, and again using explicit cast. \nOfType is much faster. \nIn this case, in the ArchSample.rvt model file, we have 346 instances, whereof 142 are mullions. \nThe cast takes more than 5 ms, OfType less than 1. \n\n<p>Kevin also presents some code to use LINQ to hone down even further, to a specific type of mullion, the thin horizontal type, of which there are 14 instances, and which was specifically modified in the sample project to show a different mullion type.\n\n<p>This shows that LINQ is useful to find things that you cannot normally filter on, as well as narrowing down results.\n\n<p><strong>3.</strong> XML report of family and instance usage:\nBesides filtering and post-processing results, LINQ and the Xml.Linq namespace provide a lot of other functionality, such as the ability to rapidly and efficiently create an XML report. \nFor this family and instance usage report, we retrieve all the families in the project, for each family get all symbols, for each symbol all instances, and report the entire result to XML. \nHere LINQ provides a very powerful way of manipulating data very fast.\n\n<p>This sample demonstrates that a lot of information can be extracted with little coding and much support from LINQ. \nIt uses one collector to retrieve all families in the document, retrieves all instances of each, and writes a structured tree report to XML. \nFor more details, please refer to the recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\ndetailed discussion</a> of this.\n\n<h4>Revit Filters versus LINQ</h4>\n<p>The parameter filter example 2 implemented by FilterParameterEx2 is of special interest, since it benchmarks and compares the performance of the built-in Revit filtering functionality provided by the level and parameter filters with the performance achieved by post-processing the filter results using LINQ. \nHappily, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nthe built-in filters do prove to be more efficient</a>.\n\n<p>Kevin's powerful collection of samples shows that significant enhancements are possible using appropriate filters, regeneration options and transaction modes, and that it pays off to compare various alternatives.\n\n<!--\n<p>I implemented some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector benchmarks</a> of \n\nmy own early on in the Revit 2011 release cycle.\n-->\n<!--\n  regex and grep expression to find all htm files with a non-zero count of occurrences of 'collector'\n  grep -i -c collector *htm|grep -v :0\n\n  333_collector_benchmark.htm:45\n  334_anonymous_methods_vb.htm:26\n  344_mirror_new_elements.htm:26\n  345_manual_regeneration.htm:1\n  346_stairs_on_level.htm:20\n  349_migration_steps.htm:1\n  350_failure_api.htm:4\n  355_view_filter.htm:9\n  359_preview_image.htm:5\n  360_p2c.htm:6\n  368_au_voting.htm:2\n  370_revitlookup.htm:6\n  371_sheet_size.htm:8\n  380_revitwebcam.htm:3\n  383_param_filter.htm:35\n  384_elem_name_param_filter.htm:7\n  392_export_xml.htm:2\n  395_set_tag_type.htm:10\n  397_filter_all_elements.htm:5\n  398_retrieve_mep_elements.htm:7\n  423_filter_shared_param.htm\n  426_filter_non_native_class.htm\n  446_filter_view_phase.htm\n  461_measurepanelarea.htm\n\n<ul>\n<li>My first Revit 2011 plug-in, the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">pipe to conduit converter</a>.\n<li>A very simple collector to retrieve <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/export-data-to-xml.html\">view sheets</a>.\n<li>Some utility methods to filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">levels and types</a> such as door type and a door tag type symbol</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieving-newly-created-elements-in-revit-2011.html\">newly added elements</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">stairs on a level</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/filter-for-views-and-istemplate-predicate.html\">views</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">family instances and their family</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">title block symbols and instances</a> to determine the sheet size.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html#3\">AVF display styles with a specific name</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">MEP elements</a>.\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">collector performance benchmark</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">Using LINQ and anonymous methods in VB</a>.\n<li>A RevitLookup update and <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">retrieving all database elements</a>.\n<li>Why <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\"><strong>not</strong> to retrieve all database elements</a>.\n<li>Many examples of <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">parameter filters</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">Parameter filter for an element name</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">Parameter filter for a shared parameter</a>.\n<li>Filtering for a <a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">non-native class</a>, i.e. \"an element type that exists in the API, but not in Revit's native object model\".\n<li>Resolving another non-native class issue, the Panel class in the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea_update.html\">MeasurePanelArea</a> SDK sample.\n<li>Filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html\">view and phase</a>.\n</ul>\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0497_more_kevin_samples",
    "header_text": "Benchmarking Results",
    "local_header_href": "#benchmarking-results",
    "chunk_text": "<h4>Benchmarking Results</h4><p>Here are some of the results of running the benchmarking commands on my system:\n\n<ul>\n<li>Emulate old element retrieval requires 66 milliseconds to find 62 structural column elements, whereas the new filtered element collector takes 10 milliseconds for the same task.\n<li>Using System.Linq.IEnumerable.OfType&lt;&gt; to extract 142 mullions out of a collection of 346 family instances takes less than one millisecond, whereas looping through all 346 instances and checking them one by one using cast takes 19 milliseconds.\n<li>10 versus 22 versus 35 milliseconds to extract 52 family instances on a given level using ElementLevelFilter, ElementParameterFilter and LINQ, respectively.\n<li>Regeneration Example 3: 109 milliseconds to create four walls and regenerating after every addition versus 84 milliseconds doing it once only after add finished.\n<li>Regeneration Example 4: 188 milliseconds to update parameter and regenerate at each change versus 80 milliseconds to do it only once at the end.\n</li></li></li></li></li></ul>\n<p>Here are some further notes on the samples and benchmarking results:\n\n<h4>Revit 2011 API versus 2010 Performance Comparison</h4>\n<p>As said,\nthe old element retrieval emulation requires 66 milliseconds to find 62 structural column elements on my system, \nwhereas the new filtered element collector takes 10 milliseconds for the same task.\n\n<p>We can only create a very rough performance comparison between Revit 2010 and 2011, since the real 2010 get_Elements functionality is no longer available. We select all family instances in the model, iterate over them and check their category against the built-in category for structural columns to simulate the 2010 marshalled access and managed code filtering.\n\n<p>In 2011, the same elements can be retrieved by using the OfClass and OfCategory shortcuts for the class and category filters. This is not an exact comparison, because we still have to start off with a collector in both cases. The main point is that access to the data to find a match is much slower in explicit code than using a filter for the same data, where matching is happening natively and only results are returned to you.\n\n\n<h4>Structural Material, Usage and Inversion</h4>\n<p>To select all real structural elements, we select elements whose structural material type is Steel. We are interested in all stick elements, i.e. many different element types like brace, column, girder, etc. Since there are fewer types that we are not interested in, it makes sense to use an inverted filter. We therefore set up four inverted filters for structural instance usage requiring the passing element NOT to be Automatic, Other, Undefined, or Wall. The resulting total of five filters are added to a list and passed in to a logical AND filter to combine all five.\n\n<h4>Bounding box intersection, view id and exclusion</h4>\n<p>I already discussed the filter example 2 command implemented by FilterEx2 to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/find-intersecting-elements.html\">\nfind all neighbouring elements of a selected one</a> in \n\na separate post. \nIt uses the quick BoundingBoxIntersectsFilter to find all elements that intersect the selected element, the collector constructor taking a view id to narrow down to only viewable elements, and finally an exclusion filter to eliminate known elements to exclude such as the picked element itself and the view. \nIt can be run in the StructuralUsage.rvt sample model.\n\n<p>This example finds all related neighbouring elements without even looking at any geometry, very cool.\n\n\n\n<p>The bounding box filtering classes include checks for contained within, point inside, bounding box inside, and bounding box intersect.\n\n<h4>LINQ</h4>\n<p>After making maximum use of the built-in filtered element collector functionality, we can often make use of LINQ to further hone in, narrow down, and post-process the results. The sample code includes the following three examples which illustrate this:\n\n<ol>\n<li>Further filter information using a query\n<li>Fast filter for non-native classes\n<li>Create an XML report of family and instance usage\n</li></li></li></ol>\n<p><strong>1.</strong> Further filter information using a query:\nThe first of these addresses the task of finding all furniture family instances which include a material of a given name. \nFrom the material name, we retrieve the material instance. \nA filtered element collector returns all family instances of the furniture category. \nWe then use LINQ to select the elements whose material contains the required material. \nThis sample is intended to be run in the simple house model.\n\n<p><strong>2.</strong> Fast filter for non-native classes:\nOne of the few tasks that cannot be solved with the filtered element collectors alone is retrieval of non-native classes. \nSome of the classes available in the Revit API have been added for the sake of developer's convenience and are not present in the internal native Revit code, such as the mullion class, so they cannot be filtered for directly. \nFor a full list of the 15 non-native classes that cannot be filtered for, please refer to the reference documentation for ElementClassFilter. \nI discussed a couple of other examples in the past, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">\nAnnotationSymbol</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea-update.html\">\nPanel</a> classes.\n\n<p>LINQ provides a handy way to filter for these non-native classes. \nWe can use a filtered element collector to return all family instances, the mullion parent class, then search for real mullions. \nThis search is implemented twice for benchmarking purposes, once using the generic LINQ OfType&lt;&gt; predicate, and again using explicit cast. \nOfType is much faster. \nIn this case, in the ArchSample.rvt model file, we have 346 instances, whereof 142 are mullions. \nThe cast takes more than 5 ms, OfType less than 1. \n\n<p>Kevin also presents some code to use LINQ to hone down even further, to a specific type of mullion, the thin horizontal type, of which there are 14 instances, and which was specifically modified in the sample project to show a different mullion type.\n\n<p>This shows that LINQ is useful to find things that you cannot normally filter on, as well as narrowing down results.\n\n<p><strong>3.</strong> XML report of family and instance usage:\nBesides filtering and post-processing results, LINQ and the Xml.Linq namespace provide a lot of other functionality, such as the ability to rapidly and efficiently create an XML report. \nFor this family and instance usage report, we retrieve all the families in the project, for each family get all symbols, for each symbol all instances, and report the entire result to XML. \nHere LINQ provides a very powerful way of manipulating data very fast.\n\n<p>This sample demonstrates that a lot of information can be extracted with little coding and much support from LINQ. \nIt uses one collector to retrieve all families in the document, retrieves all instances of each, and writes a structured tree report to XML. \nFor more details, please refer to the recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\ndetailed discussion</a> of this.\n\n<h4>Revit Filters versus LINQ</h4>\n<p>The parameter filter example 2 implemented by FilterParameterEx2 is of special interest, since it benchmarks and compares the performance of the built-in Revit filtering functionality provided by the level and parameter filters with the performance achieved by post-processing the filter results using LINQ. \nHappily, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nthe built-in filters do prove to be more efficient</a>.\n\n<p>Kevin's powerful collection of samples shows that significant enhancements are possible using appropriate filters, regeneration options and transaction modes, and that it pays off to compare various alternatives.\n\n<!--\n<p>I implemented some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector benchmarks</a> of \n\nmy own early on in the Revit 2011 release cycle.\n-->\n<!--\n  regex and grep expression to find all htm files with a non-zero count of occurrences of 'collector'\n  grep -i -c collector *htm|grep -v :0\n\n  333_collector_benchmark.htm:45\n  334_anonymous_methods_vb.htm:26\n  344_mirror_new_elements.htm:26\n  345_manual_regeneration.htm:1\n  346_stairs_on_level.htm:20\n  349_migration_steps.htm:1\n  350_failure_api.htm:4\n  355_view_filter.htm:9\n  359_preview_image.htm:5\n  360_p2c.htm:6\n  368_au_voting.htm:2\n  370_revitlookup.htm:6\n  371_sheet_size.htm:8\n  380_revitwebcam.htm:3\n  383_param_filter.htm:35\n  384_elem_name_param_filter.htm:7\n  392_export_xml.htm:2\n  395_set_tag_type.htm:10\n  397_filter_all_elements.htm:5\n  398_retrieve_mep_elements.htm:7\n  423_filter_shared_param.htm\n  426_filter_non_native_class.htm\n  446_filter_view_phase.htm\n  461_measurepanelarea.htm\n\n<ul>\n<li>My first Revit 2011 plug-in, the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">pipe to conduit converter</a>.\n<li>A very simple collector to retrieve <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/export-data-to-xml.html\">view sheets</a>.\n<li>Some utility methods to filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">levels and types</a> such as door type and a door tag type symbol</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieving-newly-created-elements-in-revit-2011.html\">newly added elements</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">stairs on a level</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/filter-for-views-and-istemplate-predicate.html\">views</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">family instances and their family</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">title block symbols and instances</a> to determine the sheet size.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html#3\">AVF display styles with a specific name</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">MEP elements</a>.\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">collector performance benchmark</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">Using LINQ and anonymous methods in VB</a>.\n<li>A RevitLookup update and <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">retrieving all database elements</a>.\n<li>Why <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\"><strong>not</strong> to retrieve all database elements</a>.\n<li>Many examples of <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">parameter filters</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">Parameter filter for an element name</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">Parameter filter for a shared parameter</a>.\n<li>Filtering for a <a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">non-native class</a>, i.e. \"an element type that exists in the API, but not in Revit's native object model\".\n<li>Resolving another non-native class issue, the Panel class in the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea_update.html\">MeasurePanelArea</a> SDK sample.\n<li>Filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html\">view and phase</a>.\n</ul>\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0497_more_kevin_samples",
    "header_text": "Revit 2011 API versus 2010 Performance Comparison",
    "local_header_href": "#revit-2011-api-versus-2010-performance-comparison",
    "chunk_text": "<h4>Revit 2011 API versus 2010 Performance Comparison</h4><p>As said,\nthe old element retrieval emulation requires 66 milliseconds to find 62 structural column elements on my system, \nwhereas the new filtered element collector takes 10 milliseconds for the same task.\n\n<p>We can only create a very rough performance comparison between Revit 2010 and 2011, since the real 2010 get_Elements functionality is no longer available. We select all family instances in the model, iterate over them and check their category against the built-in category for structural columns to simulate the 2010 marshalled access and managed code filtering.\n\n<p>In 2011, the same elements can be retrieved by using the OfClass and OfCategory shortcuts for the class and category filters. This is not an exact comparison, because we still have to start off with a collector in both cases. The main point is that access to the data to find a match is much slower in explicit code than using a filter for the same data, where matching is happening natively and only results are returned to you.\n\n\n<h4>Structural Material, Usage and Inversion</h4>\n<p>To select all real structural elements, we select elements whose structural material type is Steel. We are interested in all stick elements, i.e. many different element types like brace, column, girder, etc. Since there are fewer types that we are not interested in, it makes sense to use an inverted filter. We therefore set up four inverted filters for structural instance usage requiring the passing element NOT to be Automatic, Other, Undefined, or Wall. The resulting total of five filters are added to a list and passed in to a logical AND filter to combine all five.\n\n<h4>Bounding box intersection, view id and exclusion</h4>\n<p>I already discussed the filter example 2 command implemented by FilterEx2 to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/find-intersecting-elements.html\">\nfind all neighbouring elements of a selected one</a> in \n\na separate post. \nIt uses the quick BoundingBoxIntersectsFilter to find all elements that intersect the selected element, the collector constructor taking a view id to narrow down to only viewable elements, and finally an exclusion filter to eliminate known elements to exclude such as the picked element itself and the view. \nIt can be run in the StructuralUsage.rvt sample model.\n\n<p>This example finds all related neighbouring elements without even looking at any geometry, very cool.\n\n\n\n<p>The bounding box filtering classes include checks for contained within, point inside, bounding box inside, and bounding box intersect.\n\n<h4>LINQ</h4>\n<p>After making maximum use of the built-in filtered element collector functionality, we can often make use of LINQ to further hone in, narrow down, and post-process the results. The sample code includes the following three examples which illustrate this:\n\n<ol>\n<li>Further filter information using a query\n<li>Fast filter for non-native classes\n<li>Create an XML report of family and instance usage\n</li></li></li></ol>\n<p><strong>1.</strong> Further filter information using a query:\nThe first of these addresses the task of finding all furniture family instances which include a material of a given name. \nFrom the material name, we retrieve the material instance. \nA filtered element collector returns all family instances of the furniture category. \nWe then use LINQ to select the elements whose material contains the required material. \nThis sample is intended to be run in the simple house model.\n\n<p><strong>2.</strong> Fast filter for non-native classes:\nOne of the few tasks that cannot be solved with the filtered element collectors alone is retrieval of non-native classes. \nSome of the classes available in the Revit API have been added for the sake of developer's convenience and are not present in the internal native Revit code, such as the mullion class, so they cannot be filtered for directly. \nFor a full list of the 15 non-native classes that cannot be filtered for, please refer to the reference documentation for ElementClassFilter. \nI discussed a couple of other examples in the past, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">\nAnnotationSymbol</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea-update.html\">\nPanel</a> classes.\n\n<p>LINQ provides a handy way to filter for these non-native classes. \nWe can use a filtered element collector to return all family instances, the mullion parent class, then search for real mullions. \nThis search is implemented twice for benchmarking purposes, once using the generic LINQ OfType&lt;&gt; predicate, and again using explicit cast. \nOfType is much faster. \nIn this case, in the ArchSample.rvt model file, we have 346 instances, whereof 142 are mullions. \nThe cast takes more than 5 ms, OfType less than 1. \n\n<p>Kevin also presents some code to use LINQ to hone down even further, to a specific type of mullion, the thin horizontal type, of which there are 14 instances, and which was specifically modified in the sample project to show a different mullion type.\n\n<p>This shows that LINQ is useful to find things that you cannot normally filter on, as well as narrowing down results.\n\n<p><strong>3.</strong> XML report of family and instance usage:\nBesides filtering and post-processing results, LINQ and the Xml.Linq namespace provide a lot of other functionality, such as the ability to rapidly and efficiently create an XML report. \nFor this family and instance usage report, we retrieve all the families in the project, for each family get all symbols, for each symbol all instances, and report the entire result to XML. \nHere LINQ provides a very powerful way of manipulating data very fast.\n\n<p>This sample demonstrates that a lot of information can be extracted with little coding and much support from LINQ. \nIt uses one collector to retrieve all families in the document, retrieves all instances of each, and writes a structured tree report to XML. \nFor more details, please refer to the recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\ndetailed discussion</a> of this.\n\n<h4>Revit Filters versus LINQ</h4>\n<p>The parameter filter example 2 implemented by FilterParameterEx2 is of special interest, since it benchmarks and compares the performance of the built-in Revit filtering functionality provided by the level and parameter filters with the performance achieved by post-processing the filter results using LINQ. \nHappily, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nthe built-in filters do prove to be more efficient</a>.\n\n<p>Kevin's powerful collection of samples shows that significant enhancements are possible using appropriate filters, regeneration options and transaction modes, and that it pays off to compare various alternatives.\n\n<!--\n<p>I implemented some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector benchmarks</a> of \n\nmy own early on in the Revit 2011 release cycle.\n-->\n<!--\n  regex and grep expression to find all htm files with a non-zero count of occurrences of 'collector'\n  grep -i -c collector *htm|grep -v :0\n\n  333_collector_benchmark.htm:45\n  334_anonymous_methods_vb.htm:26\n  344_mirror_new_elements.htm:26\n  345_manual_regeneration.htm:1\n  346_stairs_on_level.htm:20\n  349_migration_steps.htm:1\n  350_failure_api.htm:4\n  355_view_filter.htm:9\n  359_preview_image.htm:5\n  360_p2c.htm:6\n  368_au_voting.htm:2\n  370_revitlookup.htm:6\n  371_sheet_size.htm:8\n  380_revitwebcam.htm:3\n  383_param_filter.htm:35\n  384_elem_name_param_filter.htm:7\n  392_export_xml.htm:2\n  395_set_tag_type.htm:10\n  397_filter_all_elements.htm:5\n  398_retrieve_mep_elements.htm:7\n  423_filter_shared_param.htm\n  426_filter_non_native_class.htm\n  446_filter_view_phase.htm\n  461_measurepanelarea.htm\n\n<ul>\n<li>My first Revit 2011 plug-in, the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">pipe to conduit converter</a>.\n<li>A very simple collector to retrieve <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/export-data-to-xml.html\">view sheets</a>.\n<li>Some utility methods to filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">levels and types</a> such as door type and a door tag type symbol</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieving-newly-created-elements-in-revit-2011.html\">newly added elements</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">stairs on a level</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/filter-for-views-and-istemplate-predicate.html\">views</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">family instances and their family</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">title block symbols and instances</a> to determine the sheet size.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html#3\">AVF display styles with a specific name</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">MEP elements</a>.\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">collector performance benchmark</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">Using LINQ and anonymous methods in VB</a>.\n<li>A RevitLookup update and <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">retrieving all database elements</a>.\n<li>Why <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\"><strong>not</strong> to retrieve all database elements</a>.\n<li>Many examples of <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">parameter filters</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">Parameter filter for an element name</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">Parameter filter for a shared parameter</a>.\n<li>Filtering for a <a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">non-native class</a>, i.e. \"an element type that exists in the API, but not in Revit's native object model\".\n<li>Resolving another non-native class issue, the Panel class in the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea_update.html\">MeasurePanelArea</a> SDK sample.\n<li>Filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html\">view and phase</a>.\n</ul>\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0497_more_kevin_samples",
    "header_text": "Structural Material, Usage and Inversion",
    "local_header_href": "#structural-material-usage-and-inversion",
    "chunk_text": "<h4>Structural Material, Usage and Inversion</h4><p>To select all real structural elements, we select elements whose structural material type is Steel. We are interested in all stick elements, i.e. many different element types like brace, column, girder, etc. Since there are fewer types that we are not interested in, it makes sense to use an inverted filter. We therefore set up four inverted filters for structural instance usage requiring the passing element NOT to be Automatic, Other, Undefined, or Wall. The resulting total of five filters are added to a list and passed in to a logical AND filter to combine all five.\n\n<h4>Bounding box intersection, view id and exclusion</h4>\n<p>I already discussed the filter example 2 command implemented by FilterEx2 to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/find-intersecting-elements.html\">\nfind all neighbouring elements of a selected one</a> in \n\na separate post. \nIt uses the quick BoundingBoxIntersectsFilter to find all elements that intersect the selected element, the collector constructor taking a view id to narrow down to only viewable elements, and finally an exclusion filter to eliminate known elements to exclude such as the picked element itself and the view. \nIt can be run in the StructuralUsage.rvt sample model.\n\n<p>This example finds all related neighbouring elements without even looking at any geometry, very cool.\n\n\n\n<p>The bounding box filtering classes include checks for contained within, point inside, bounding box inside, and bounding box intersect.\n\n<h4>LINQ</h4>\n<p>After making maximum use of the built-in filtered element collector functionality, we can often make use of LINQ to further hone in, narrow down, and post-process the results. The sample code includes the following three examples which illustrate this:\n\n<ol>\n<li>Further filter information using a query\n<li>Fast filter for non-native classes\n<li>Create an XML report of family and instance usage\n</li></li></li></ol>\n<p><strong>1.</strong> Further filter information using a query:\nThe first of these addresses the task of finding all furniture family instances which include a material of a given name. \nFrom the material name, we retrieve the material instance. \nA filtered element collector returns all family instances of the furniture category. \nWe then use LINQ to select the elements whose material contains the required material. \nThis sample is intended to be run in the simple house model.\n\n<p><strong>2.</strong> Fast filter for non-native classes:\nOne of the few tasks that cannot be solved with the filtered element collectors alone is retrieval of non-native classes. \nSome of the classes available in the Revit API have been added for the sake of developer's convenience and are not present in the internal native Revit code, such as the mullion class, so they cannot be filtered for directly. \nFor a full list of the 15 non-native classes that cannot be filtered for, please refer to the reference documentation for ElementClassFilter. \nI discussed a couple of other examples in the past, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">\nAnnotationSymbol</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea-update.html\">\nPanel</a> classes.\n\n<p>LINQ provides a handy way to filter for these non-native classes. \nWe can use a filtered element collector to return all family instances, the mullion parent class, then search for real mullions. \nThis search is implemented twice for benchmarking purposes, once using the generic LINQ OfType&lt;&gt; predicate, and again using explicit cast. \nOfType is much faster. \nIn this case, in the ArchSample.rvt model file, we have 346 instances, whereof 142 are mullions. \nThe cast takes more than 5 ms, OfType less than 1. \n\n<p>Kevin also presents some code to use LINQ to hone down even further, to a specific type of mullion, the thin horizontal type, of which there are 14 instances, and which was specifically modified in the sample project to show a different mullion type.\n\n<p>This shows that LINQ is useful to find things that you cannot normally filter on, as well as narrowing down results.\n\n<p><strong>3.</strong> XML report of family and instance usage:\nBesides filtering and post-processing results, LINQ and the Xml.Linq namespace provide a lot of other functionality, such as the ability to rapidly and efficiently create an XML report. \nFor this family and instance usage report, we retrieve all the families in the project, for each family get all symbols, for each symbol all instances, and report the entire result to XML. \nHere LINQ provides a very powerful way of manipulating data very fast.\n\n<p>This sample demonstrates that a lot of information can be extracted with little coding and much support from LINQ. \nIt uses one collector to retrieve all families in the document, retrieves all instances of each, and writes a structured tree report to XML. \nFor more details, please refer to the recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\ndetailed discussion</a> of this.\n\n<h4>Revit Filters versus LINQ</h4>\n<p>The parameter filter example 2 implemented by FilterParameterEx2 is of special interest, since it benchmarks and compares the performance of the built-in Revit filtering functionality provided by the level and parameter filters with the performance achieved by post-processing the filter results using LINQ. \nHappily, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nthe built-in filters do prove to be more efficient</a>.\n\n<p>Kevin's powerful collection of samples shows that significant enhancements are possible using appropriate filters, regeneration options and transaction modes, and that it pays off to compare various alternatives.\n\n<!--\n<p>I implemented some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector benchmarks</a> of \n\nmy own early on in the Revit 2011 release cycle.\n-->\n<!--\n  regex and grep expression to find all htm files with a non-zero count of occurrences of 'collector'\n  grep -i -c collector *htm|grep -v :0\n\n  333_collector_benchmark.htm:45\n  334_anonymous_methods_vb.htm:26\n  344_mirror_new_elements.htm:26\n  345_manual_regeneration.htm:1\n  346_stairs_on_level.htm:20\n  349_migration_steps.htm:1\n  350_failure_api.htm:4\n  355_view_filter.htm:9\n  359_preview_image.htm:5\n  360_p2c.htm:6\n  368_au_voting.htm:2\n  370_revitlookup.htm:6\n  371_sheet_size.htm:8\n  380_revitwebcam.htm:3\n  383_param_filter.htm:35\n  384_elem_name_param_filter.htm:7\n  392_export_xml.htm:2\n  395_set_tag_type.htm:10\n  397_filter_all_elements.htm:5\n  398_retrieve_mep_elements.htm:7\n  423_filter_shared_param.htm\n  426_filter_non_native_class.htm\n  446_filter_view_phase.htm\n  461_measurepanelarea.htm\n\n<ul>\n<li>My first Revit 2011 plug-in, the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">pipe to conduit converter</a>.\n<li>A very simple collector to retrieve <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/export-data-to-xml.html\">view sheets</a>.\n<li>Some utility methods to filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">levels and types</a> such as door type and a door tag type symbol</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieving-newly-created-elements-in-revit-2011.html\">newly added elements</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">stairs on a level</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/filter-for-views-and-istemplate-predicate.html\">views</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">family instances and their family</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">title block symbols and instances</a> to determine the sheet size.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html#3\">AVF display styles with a specific name</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">MEP elements</a>.\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">collector performance benchmark</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">Using LINQ and anonymous methods in VB</a>.\n<li>A RevitLookup update and <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">retrieving all database elements</a>.\n<li>Why <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\"><strong>not</strong> to retrieve all database elements</a>.\n<li>Many examples of <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">parameter filters</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">Parameter filter for an element name</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">Parameter filter for a shared parameter</a>.\n<li>Filtering for a <a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">non-native class</a>, i.e. \"an element type that exists in the API, but not in Revit's native object model\".\n<li>Resolving another non-native class issue, the Panel class in the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea_update.html\">MeasurePanelArea</a> SDK sample.\n<li>Filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html\">view and phase</a>.\n</ul>\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0497_more_kevin_samples",
    "header_text": "Bounding box intersection, view id and exclusion",
    "local_header_href": "#bounding-box-intersection-view-id-and-exclusion",
    "chunk_text": "<h4>Bounding box intersection, view id and exclusion</h4><p>I already discussed the filter example 2 command implemented by FilterEx2 to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/find-intersecting-elements.html\">\nfind all neighbouring elements of a selected one</a> in \n\na separate post. \nIt uses the quick BoundingBoxIntersectsFilter to find all elements that intersect the selected element, the collector constructor taking a view id to narrow down to only viewable elements, and finally an exclusion filter to eliminate known elements to exclude such as the picked element itself and the view. \nIt can be run in the StructuralUsage.rvt sample model.\n\n<p>This example finds all related neighbouring elements without even looking at any geometry, very cool.\n\n\n\n<p>The bounding box filtering classes include checks for contained within, point inside, bounding box inside, and bounding box intersect.\n\n<h4>LINQ</h4>\n<p>After making maximum use of the built-in filtered element collector functionality, we can often make use of LINQ to further hone in, narrow down, and post-process the results. The sample code includes the following three examples which illustrate this:\n\n<ol>\n<li>Further filter information using a query\n<li>Fast filter for non-native classes\n<li>Create an XML report of family and instance usage\n</li></li></li></ol>\n<p><strong>1.</strong> Further filter information using a query:\nThe first of these addresses the task of finding all furniture family instances which include a material of a given name. \nFrom the material name, we retrieve the material instance. \nA filtered element collector returns all family instances of the furniture category. \nWe then use LINQ to select the elements whose material contains the required material. \nThis sample is intended to be run in the simple house model.\n\n<p><strong>2.</strong> Fast filter for non-native classes:\nOne of the few tasks that cannot be solved with the filtered element collectors alone is retrieval of non-native classes. \nSome of the classes available in the Revit API have been added for the sake of developer's convenience and are not present in the internal native Revit code, such as the mullion class, so they cannot be filtered for directly. \nFor a full list of the 15 non-native classes that cannot be filtered for, please refer to the reference documentation for ElementClassFilter. \nI discussed a couple of other examples in the past, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">\nAnnotationSymbol</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea-update.html\">\nPanel</a> classes.\n\n<p>LINQ provides a handy way to filter for these non-native classes. \nWe can use a filtered element collector to return all family instances, the mullion parent class, then search for real mullions. \nThis search is implemented twice for benchmarking purposes, once using the generic LINQ OfType&lt;&gt; predicate, and again using explicit cast. \nOfType is much faster. \nIn this case, in the ArchSample.rvt model file, we have 346 instances, whereof 142 are mullions. \nThe cast takes more than 5 ms, OfType less than 1. \n\n<p>Kevin also presents some code to use LINQ to hone down even further, to a specific type of mullion, the thin horizontal type, of which there are 14 instances, and which was specifically modified in the sample project to show a different mullion type.\n\n<p>This shows that LINQ is useful to find things that you cannot normally filter on, as well as narrowing down results.\n\n<p><strong>3.</strong> XML report of family and instance usage:\nBesides filtering and post-processing results, LINQ and the Xml.Linq namespace provide a lot of other functionality, such as the ability to rapidly and efficiently create an XML report. \nFor this family and instance usage report, we retrieve all the families in the project, for each family get all symbols, for each symbol all instances, and report the entire result to XML. \nHere LINQ provides a very powerful way of manipulating data very fast.\n\n<p>This sample demonstrates that a lot of information can be extracted with little coding and much support from LINQ. \nIt uses one collector to retrieve all families in the document, retrieves all instances of each, and writes a structured tree report to XML. \nFor more details, please refer to the recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\ndetailed discussion</a> of this.\n\n<h4>Revit Filters versus LINQ</h4>\n<p>The parameter filter example 2 implemented by FilterParameterEx2 is of special interest, since it benchmarks and compares the performance of the built-in Revit filtering functionality provided by the level and parameter filters with the performance achieved by post-processing the filter results using LINQ. \nHappily, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nthe built-in filters do prove to be more efficient</a>.\n\n<p>Kevin's powerful collection of samples shows that significant enhancements are possible using appropriate filters, regeneration options and transaction modes, and that it pays off to compare various alternatives.\n\n<!--\n<p>I implemented some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector benchmarks</a> of \n\nmy own early on in the Revit 2011 release cycle.\n-->\n<!--\n  regex and grep expression to find all htm files with a non-zero count of occurrences of 'collector'\n  grep -i -c collector *htm|grep -v :0\n\n  333_collector_benchmark.htm:45\n  334_anonymous_methods_vb.htm:26\n  344_mirror_new_elements.htm:26\n  345_manual_regeneration.htm:1\n  346_stairs_on_level.htm:20\n  349_migration_steps.htm:1\n  350_failure_api.htm:4\n  355_view_filter.htm:9\n  359_preview_image.htm:5\n  360_p2c.htm:6\n  368_au_voting.htm:2\n  370_revitlookup.htm:6\n  371_sheet_size.htm:8\n  380_revitwebcam.htm:3\n  383_param_filter.htm:35\n  384_elem_name_param_filter.htm:7\n  392_export_xml.htm:2\n  395_set_tag_type.htm:10\n  397_filter_all_elements.htm:5\n  398_retrieve_mep_elements.htm:7\n  423_filter_shared_param.htm\n  426_filter_non_native_class.htm\n  446_filter_view_phase.htm\n  461_measurepanelarea.htm\n\n<ul>\n<li>My first Revit 2011 plug-in, the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">pipe to conduit converter</a>.\n<li>A very simple collector to retrieve <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/export-data-to-xml.html\">view sheets</a>.\n<li>Some utility methods to filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">levels and types</a> such as door type and a door tag type symbol</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieving-newly-created-elements-in-revit-2011.html\">newly added elements</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">stairs on a level</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/filter-for-views-and-istemplate-predicate.html\">views</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">family instances and their family</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">title block symbols and instances</a> to determine the sheet size.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html#3\">AVF display styles with a specific name</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">MEP elements</a>.\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">collector performance benchmark</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">Using LINQ and anonymous methods in VB</a>.\n<li>A RevitLookup update and <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">retrieving all database elements</a>.\n<li>Why <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\"><strong>not</strong> to retrieve all database elements</a>.\n<li>Many examples of <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">parameter filters</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">Parameter filter for an element name</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">Parameter filter for a shared parameter</a>.\n<li>Filtering for a <a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">non-native class</a>, i.e. \"an element type that exists in the API, but not in Revit's native object model\".\n<li>Resolving another non-native class issue, the Panel class in the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea_update.html\">MeasurePanelArea</a> SDK sample.\n<li>Filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html\">view and phase</a>.\n</ul>\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0497_more_kevin_samples",
    "header_text": "LINQ",
    "local_header_href": "#linq",
    "chunk_text": "<h4>LINQ</h4><p>After making maximum use of the built-in filtered element collector functionality, we can often make use of LINQ to further hone in, narrow down, and post-process the results. The sample code includes the following three examples which illustrate this:\n\n<ol>\n<li>Further filter information using a query\n<li>Fast filter for non-native classes\n<li>Create an XML report of family and instance usage\n</li></li></li></ol>\n<p><strong>1.</strong> Further filter information using a query:\nThe first of these addresses the task of finding all furniture family instances which include a material of a given name. \nFrom the material name, we retrieve the material instance. \nA filtered element collector returns all family instances of the furniture category. \nWe then use LINQ to select the elements whose material contains the required material. \nThis sample is intended to be run in the simple house model.\n\n<p><strong>2.</strong> Fast filter for non-native classes:\nOne of the few tasks that cannot be solved with the filtered element collectors alone is retrieval of non-native classes. \nSome of the classes available in the Revit API have been added for the sake of developer's convenience and are not present in the internal native Revit code, such as the mullion class, so they cannot be filtered for directly. \nFor a full list of the 15 non-native classes that cannot be filtered for, please refer to the reference documentation for ElementClassFilter. \nI discussed a couple of other examples in the past, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">\nAnnotationSymbol</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea-update.html\">\nPanel</a> classes.\n\n<p>LINQ provides a handy way to filter for these non-native classes. \nWe can use a filtered element collector to return all family instances, the mullion parent class, then search for real mullions. \nThis search is implemented twice for benchmarking purposes, once using the generic LINQ OfType&lt;&gt; predicate, and again using explicit cast. \nOfType is much faster. \nIn this case, in the ArchSample.rvt model file, we have 346 instances, whereof 142 are mullions. \nThe cast takes more than 5 ms, OfType less than 1. \n\n<p>Kevin also presents some code to use LINQ to hone down even further, to a specific type of mullion, the thin horizontal type, of which there are 14 instances, and which was specifically modified in the sample project to show a different mullion type.\n\n<p>This shows that LINQ is useful to find things that you cannot normally filter on, as well as narrowing down results.\n\n<p><strong>3.</strong> XML report of family and instance usage:\nBesides filtering and post-processing results, LINQ and the Xml.Linq namespace provide a lot of other functionality, such as the ability to rapidly and efficiently create an XML report. \nFor this family and instance usage report, we retrieve all the families in the project, for each family get all symbols, for each symbol all instances, and report the entire result to XML. \nHere LINQ provides a very powerful way of manipulating data very fast.\n\n<p>This sample demonstrates that a lot of information can be extracted with little coding and much support from LINQ. \nIt uses one collector to retrieve all families in the document, retrieves all instances of each, and writes a structured tree report to XML. \nFor more details, please refer to the recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\ndetailed discussion</a> of this.\n\n<h4>Revit Filters versus LINQ</h4>\n<p>The parameter filter example 2 implemented by FilterParameterEx2 is of special interest, since it benchmarks and compares the performance of the built-in Revit filtering functionality provided by the level and parameter filters with the performance achieved by post-processing the filter results using LINQ. \nHappily, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nthe built-in filters do prove to be more efficient</a>.\n\n<p>Kevin's powerful collection of samples shows that significant enhancements are possible using appropriate filters, regeneration options and transaction modes, and that it pays off to compare various alternatives.\n\n<!--\n<p>I implemented some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector benchmarks</a> of \n\nmy own early on in the Revit 2011 release cycle.\n-->\n<!--\n  regex and grep expression to find all htm files with a non-zero count of occurrences of 'collector'\n  grep -i -c collector *htm|grep -v :0\n\n  333_collector_benchmark.htm:45\n  334_anonymous_methods_vb.htm:26\n  344_mirror_new_elements.htm:26\n  345_manual_regeneration.htm:1\n  346_stairs_on_level.htm:20\n  349_migration_steps.htm:1\n  350_failure_api.htm:4\n  355_view_filter.htm:9\n  359_preview_image.htm:5\n  360_p2c.htm:6\n  368_au_voting.htm:2\n  370_revitlookup.htm:6\n  371_sheet_size.htm:8\n  380_revitwebcam.htm:3\n  383_param_filter.htm:35\n  384_elem_name_param_filter.htm:7\n  392_export_xml.htm:2\n  395_set_tag_type.htm:10\n  397_filter_all_elements.htm:5\n  398_retrieve_mep_elements.htm:7\n  423_filter_shared_param.htm\n  426_filter_non_native_class.htm\n  446_filter_view_phase.htm\n  461_measurepanelarea.htm\n\n<ul>\n<li>My first Revit 2011 plug-in, the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">pipe to conduit converter</a>.\n<li>A very simple collector to retrieve <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/export-data-to-xml.html\">view sheets</a>.\n<li>Some utility methods to filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">levels and types</a> such as door type and a door tag type symbol</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieving-newly-created-elements-in-revit-2011.html\">newly added elements</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">stairs on a level</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/filter-for-views-and-istemplate-predicate.html\">views</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">family instances and their family</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">title block symbols and instances</a> to determine the sheet size.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html#3\">AVF display styles with a specific name</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">MEP elements</a>.\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">collector performance benchmark</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">Using LINQ and anonymous methods in VB</a>.\n<li>A RevitLookup update and <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">retrieving all database elements</a>.\n<li>Why <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\"><strong>not</strong> to retrieve all database elements</a>.\n<li>Many examples of <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">parameter filters</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">Parameter filter for an element name</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">Parameter filter for a shared parameter</a>.\n<li>Filtering for a <a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">non-native class</a>, i.e. \"an element type that exists in the API, but not in Revit's native object model\".\n<li>Resolving another non-native class issue, the Panel class in the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea_update.html\">MeasurePanelArea</a> SDK sample.\n<li>Filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html\">view and phase</a>.\n</ul>\n-->\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0497_more_kevin_samples",
    "header_text": "Revit Filters versus LINQ",
    "local_header_href": "#revit-filters-versus-linq",
    "chunk_text": "<h4>Revit Filters versus LINQ</h4><p>The parameter filter example 2 implemented by FilterParameterEx2 is of special interest, since it benchmarks and compares the performance of the built-in Revit filtering functionality provided by the level and parameter filters with the performance achieved by post-processing the filter results using LINQ. \nHappily, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nthe built-in filters do prove to be more efficient</a>.\n\n<p>Kevin's powerful collection of samples shows that significant enhancements are possible using appropriate filters, regeneration options and transaction modes, and that it pays off to compare various alternatives.\n\n<!--\n<p>I implemented some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector benchmarks</a> of \n\nmy own early on in the Revit 2011 release cycle.\n-->\n<!--\n  regex and grep expression to find all htm files with a non-zero count of occurrences of 'collector'\n  grep -i -c collector *htm|grep -v :0\n\n  333_collector_benchmark.htm:45\n  334_anonymous_methods_vb.htm:26\n  344_mirror_new_elements.htm:26\n  345_manual_regeneration.htm:1\n  346_stairs_on_level.htm:20\n  349_migration_steps.htm:1\n  350_failure_api.htm:4\n  355_view_filter.htm:9\n  359_preview_image.htm:5\n  360_p2c.htm:6\n  368_au_voting.htm:2\n  370_revitlookup.htm:6\n  371_sheet_size.htm:8\n  380_revitwebcam.htm:3\n  383_param_filter.htm:35\n  384_elem_name_param_filter.htm:7\n  392_export_xml.htm:2\n  395_set_tag_type.htm:10\n  397_filter_all_elements.htm:5\n  398_retrieve_mep_elements.htm:7\n  423_filter_shared_param.htm\n  426_filter_non_native_class.htm\n  446_filter_view_phase.htm\n  461_measurepanelarea.htm\n\n<ul>\n<li>My first Revit 2011 plug-in, the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">pipe to conduit converter</a>.\n<li>A very simple collector to retrieve <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/export-data-to-xml.html\">view sheets</a>.\n<li>Some utility methods to filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">levels and types</a> such as door type and a door tag type symbol</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieving-newly-created-elements-in-revit-2011.html\">newly added elements</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">stairs on a level</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/filter-for-views-and-istemplate-predicate.html\">views</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">family instances and their family</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">title block symbols and instances</a> to determine the sheet size.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html#3\">AVF display styles with a specific name</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">MEP elements</a>.\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">collector performance benchmark</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">Using LINQ and anonymous methods in VB</a>.\n<li>A RevitLookup update and <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">retrieving all database elements</a>.\n<li>Why <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\"><strong>not</strong> to retrieve all database elements</a>.\n<li>Many examples of <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">parameter filters</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">Parameter filter for an element name</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">Parameter filter for a shared parameter</a>.\n<li>Filtering for a <a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">non-native class</a>, i.e. \"an element type that exists in the API, but not in Revit's native object model\".\n<li>Resolving another non-native class issue, the Panel class in the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea_update.html\">MeasurePanelArea</a> SDK sample.\n<li>Filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html\">view and phase</a>.\n</ul>\n-->\n</p></p>"
  }
]