[
  {
    "original_filename": "1040_postcommand",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1040_postcommand",
    "header_text": "Programmatic Custom Add-In External Command Launch",
    "local_header_href": "#programmatic-custom-add-in-external-command-launch",
    "chunk_text": "<h3>Programmatic Custom Add-In External Command Launch</h3><p>One of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/revit-2014-api-and-room-plan-view-boundary-polygon-loops.html#2\">\nhighlights</a> of\n\nthe\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">\nRevit 2014 API</a> is\n\nthe new PostCommand functionality enabling programmatic launching of built-in Revit commands.</p><p>The Revit SDK includes a new sample demonstrating its use, PostCommandWorkflow.</p><p>However, that programmatically launches an existing built-in Revit command, not an external command added by a custom application.</p><p>Furthermore, there was a problem launching custom external commands in the initial release of Revit 2014.\nHappily, it was fixed by the update release 1, UR1, a fact listed among the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/revit-2014-update-release-1.html\">\nRevit 2014 update release 1 API enhancements</a>:</p><ul>\n<li>Allows UIApplication.PostCommand() to work consistently for Add-in created commands.</li>\n</ul><p>So how do we make use of this functionality?</p><p>Here is today's question from – and my exploration of – a recent developer query, with separate yet similar answers for <a href=\"#1\">external tool</a> and <a href=\"#2\">custom ribbon button</a> commands.</p><p>First, however, let me mention that we had a wonderful sunny weekend here, and my friend Karin told a nice joke that I would like to share:</p><p>Two planets happen to meet somewhere, wandering around through the milky way.\nSays one: \"Hi. Be careful, I have homo sapiens.\"\nReplies the other: \"Hi. Don't worry, it will pass.\"</p><a name=\"1\"></a>"
  },
  {
    "original_filename": "1040_postcommand",
    "header_text": "Programmatically Launching an External Tool Add-In Command",
    "local_header_href": "#programmatically-launching-an-external-tool-add-in-command",
    "chunk_text": "<h4>Programmatically Launching an External Tool Add-In Command</h4><p><strong>Question:</strong> The PostCommand Revit API call seems to expect a RevitCommandId argument:</p><pre>\n  commandData.Application.PostCommand(revitCmdID)\n</pre><p>I tried to obtain a command id using the LookupCommandId method, passing in the name of my external command class, but it returns nothing:</p><pre>\n  Dim revitCmdID As Autodesk.Revit.UI.RevitCommandId _\n    = RevitCommandId.LookupCommandId(\"DoorCommandLogger\")\n\n  Dim revitCmdID As Autodesk.Revit.UI.RevitCommandId _\n    = RevitCommandId.LookupCommandId(\"SwingTool.DoorCommandLogger\")\n</pre><p>I also looked at the journal file after running the command from the user interface and tried passing in some variations of the different names I discovered there, such as:</p><ul>\n<li>\"Execute external command:CustomCtrl_%CustomCtrl_%NTItools%Parameters%Door Tool:SwingTool.DoorCommandLogger\"</li>\n<li>\"CustomCtrl_%CustomCtrl_%NTItools%Parameters%Door Tool:SwingTool.DoorCommandLogger\"</li>\n</ul><p>Still I get nothing.</p><p>How can I post a custom command, please?</p><p><strong>Answer:</strong> Let's start out by taking a more detailed look at the PostCommandWorkflow SDK sample and the classes involved in this scenario.\n\n<p>Here is the code used there to actually launch the command:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Prompts to edit the revision and resave.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"application\"&gt;&lt;/param&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> PromptToEditRevisionsAndResave(\n    <span class=\"teal\">UIApplication</span> application )\n  {\n    <span class=\"green\">// Setup external event to be notified </span>\n    <span class=\"green\">// when activity is done</span>\n \n    externalEvent = <span class=\"teal\">ExternalEvent</span>.Create(\n      <span class=\"blue\">new</span> <span class=\"teal\">PostCommandRevisionMonitorEvent</span>(\n        <span class=\"blue\">this</span> ) );\n \n    <span class=\"green\">// Setup event to be notified when revisions </span>\n    <span class=\"green\">// command starts (this is a good place to </span>\n    <span class=\"green\">// raise this external event)</span>\n \n    <span class=\"teal\">RevitCommandId</span> id\n      = <span class=\"teal\">RevitCommandId</span>.LookupPostableCommandId(\n        <span class=\"teal\">PostableCommand</span>.SheetIssuesOrRevisions );\n \n    <span class=\"blue\">if</span>( binding == <span class=\"blue\">null</span> )\n    {\n      binding = application\n        .CreateAddInCommandBinding( id );\n    }\n \n    binding.BeforeExecuted\n      += ReactToRevisionsAndSchedulesCommand;\n \n    <span class=\"green\">// Post the revision editing command</span>\n \n    application.PostCommand( id );\n  }\n</pre>\n<p>There is lots of stuff in there that is of no concern to us now and here.</p>\n<p>Actually, the only two lines of interest are the calls to LookupPostableCommandId and PostCommand.</p>\n<p>LookupPostableCommandId takes a PostableCommand enumeration value as an argument and returns a RevitCommandId instance, which is the argument required by the call to PostCommand.</p>\n<p>The RevitCommandId class internally manages a command name and id.</p>\n<p>In the case of the SheetIssuesOrRevisions command retrieved by PostCommandWorkflow, these are</p>\n<ul>\n<li>Id = 3153</li>\n<li>Name = \"ID_SETTINGS_REVISIONS\"</li>\n</ul>\n<p>You can easily see this in the Visual Studio debugger by implementing an external command executing this single statement:</p>\n<pre class=\"code\">\n  <span class=\"teal\">RevitCommandId</span> id_built_in\n    = <span class=\"teal\">RevitCommandId</span>.LookupPostableCommandId(\n      <span class=\"teal\">PostableCommand</span>.SheetIssuesOrRevisions );\n</pre>\n<p>OK, so built-in Revit commands that can be posted are listed in the PostableCommand enumeration, and we can use LookupPostableCommandId to retrieve the appropriate RevitCommandId for posting.</p>\n<p>However, a custom add-in defining its own external command will obviously not be included there, so what can we do?</p>\n<p>I studied the Revit API help file for these classes and found the following:</p>\n<p style=\"color:darkblue\">The RevitCommandId class represents a command id in Autodesk Revit.\nEach Revit command is assigned a command id and non-localised name.\nThis class allows you to look up a command by its name, and represents any Revit command in the use of an AddInCommandBinding.</p>\n<p>OK, but where to obtain it?</p>\n<p>LookupPostableCommandId takes an enumeration value, and we do not have any to offer.</p>\n<p>However, the RevitCommandId class provides exactly two static methods, LookupPostableCommandId and LookupCommandId.</p>\n<p>The former takes a PostableCommand enumeration value, the latter a simple string, and its documentation states:</p>\n<p style=\"color:darkblue\">You can use the RevitCommandId.LookupCommandId method to retrieve a corresponding Revit command id for a given id string.\nYou can refer to the entries in the Revit journal to find the string to use for a particular command.</p>\n<p>So I did just what you already tried and described in your query:</p>\n<ul>\n<li>Implement a dummy command named CmdDummy, for example.</li>\n<li>Launch it manually in the user interface.</li>\n<li>Search for all occurrences of the string \"Dummy\" in the resulting journal file.</li>\n</ul>\n<p>Here is the result (copy and paste somewhere or view source to see truncated lines in full):</p>\n<pre>\nC:\\Users\\tammikj\\AppData\\Local\\Autodesk\\Revit\\Autodesk Revit 2014\\Journals &gt; grep -i dummy journal.0242.txt\n\n' 0:&lt; Added new API pushbutton 35024, name PostAddinCommand Dummy Command, class PostAddinCommand.CmdDummy, assembly PostAddinCommand.dll, vendorId TBC_, vendor description The Building Coder, http://thebuildingcoder.typepad.com.\n\n' 4:&lt; MasterLocks 0x0000000014BB1250 DummyStorage stole m_oDataStorage 0x0000000014C52950 but left m_pDataStorage 0x0000000014C52950\n\nJrn.RibbonEvent \"Execute external command:64b3d907-37cf-4cab-8bbc-3de9b66a3efa:PostAddinCommand.CmdDummy\"\n\n' 0:&lt; DummyStorage destroying DataStorageInterface 0x0000000014C52950\n</pre>\n<p>Eliminating the DummyStorage entries, which are probably not caused by my application, leaves only the following candidate entry for me to try to extract the appropriate string from:</p>\n<ul>\n<li>Jrn.RibbonEvent \"Execute external command:64b3d907-37cf-4cab-8bbc-3de9b66a3efa:PostAddinCommand.CmdDummy\"</li>\n</ul>\n<p>The GUID prefixed to the command name happens to be the external command ClientId from my add-in manifest:</p>\n<pre class=\"prettyprint\">\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">AddIn</span><span class=\"blue\"> </span><span class=\"red\">Type</span><span class=\"blue\">=</span>\"<span class=\"blue\">Command</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Text</span><span class=\"blue\">&gt;</span>PostAddinCommand Dummy Command<span class=\"blue\">&lt;/</span><span class=\"maroon\">Text</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Description</span><span class=\"blue\">&gt;</span>Test command for PostAddinCommand.<span class=\"blue\">&lt;/</span><span class=\"maroon\">Description</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Assembly</span><span class=\"blue\">&gt;</span>PostAddinCommand.dll<span class=\"blue\">&lt;/</span><span class=\"maroon\">Assembly</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">FullClassName</span><span class=\"blue\">&gt;</span>PostAddinCommand.CmdDummy<span class=\"blue\">&lt;/</span><span class=\"maroon\">FullClassName</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">ClientId</span><span class=\"blue\">&gt;</span>64b3d907-37cf-4cab-8bbc-3de9b66a3efa<span class=\"blue\">&lt;/</span><span class=\"maroon\">ClientId</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">VendorId</span><span class=\"blue\">&gt;</span>TBC_<span class=\"blue\">&lt;/</span><span class=\"maroon\">VendorId</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">VendorDescription</span><span class=\"blue\">&gt;</span>The Building Coder, http://thebuildingcoder.typepad.com<span class=\"blue\">&lt;/</span><span class=\"maroon\">VendorDescription</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">AddIn</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>My first attempt was therefore to use the following string as an input to LookupCommandId:</p>\n<ul><li>\"64b3d907-37cf-4cab-8bbc-3de9b66a3efa:PostAddinCommand.CmdDummy\"</li></ul>\n<p>That returned null, just as in your attempts.</p>\n<p>In my next attempt, I just used the client id all on its own.</p>\n<p>Lo and behold, that works perfectly fine.</p>\n<p>Here is the resulting external command demonstrating both methods, and launching my test command successfully:</p>\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n \n  <span class=\"green\">// Built-in Revit commands are listed in the </span>\n  <span class=\"green\">// PostableCommand enumeration</span>\n \n  <span class=\"teal\">RevitCommandId</span> id_built_in\n    = <span class=\"teal\">RevitCommandId</span>.LookupPostableCommandId(\n      <span class=\"teal\">PostableCommand</span>.SheetIssuesOrRevisions );\n \n  <span class=\"green\">// External commands defined by add-ins are </span>\n  <span class=\"green\">// identified by the client id specified in </span>\n  <span class=\"green\">// the add-in manifest</span>\n \n  <span class=\"blue\">string</span> name\n    = <span class=\"maroon\">\"64b3d907-37cf-4cab-8bbc-3de9b66a3efa\"</span>;\n \n  <span class=\"teal\">RevitCommandId</span> id_addin\n    = <span class=\"teal\">RevitCommandId</span>.LookupCommandId(\n      name );\n \n  uiapp.PostCommand( id_addin );\n</pre>\n<p>The resulting numerical id is 35024, and the name is simply the client id GUID.</p>\n<p>This numerical id is also listed in the journal file when the pushbutton is created, as you can see above.</p>\n<p>The entire source code, Visual Studio solution and add-in manifest for the whole test is available from my\n\n<a href=\"https://github.com/jeremytammik/PostAddinCommand\">\nPostAddinCommand GitHub repository</a>, and\n\nthe version described up until now is\n\n<a href=\"https://github.com/jeremytammik/PostAddinCommand/releases/tag/2014.0.0.1\">\n2014.0.0.1</a>.</p>\n<a name=\"2\"></a>\n<h4>Launching a Custom Add-In Ribbon Button Command</h4>\n<p>We have now learned how to programmatically launch an external tool command defined in the add-in manifest and therefore equipped with its own client id.</p>\n<p>Most serious applications do not list individual commands explicitly in the add-in manifest, though, because it is not very user friendly to have to navigate to the Add-Ins tab External Tools menu each time you want to launch them.</p>\n<p>Actually, there are two completely different types of external commands, both implementing the IExternalCommand interface:</p>\n<ul>\n<li>External tool commands, listed in the add-in manifest and launched by selecting the entry added by Revit in the Add-Ins &gt; External Tools menu.</li>\n<li>Custom button commands launched by clicking a custom button created by an external application.</li>\n</ul>\n<p>The latter have no client id.</p>\n<p>Still, the procedure of analysing the journal file to discover the corresponding command name string to pass into the LookupCommandId method remains exactly the same, even thought the result differs.</p>\n<p>I implemented a new external command CmdDummy2 to test the latter case, and an external application to create a custom ribbon panel and custom button to launch it.</p>\n<p>Repeating the steps described above to manually launch the command and examine the journal file to discover its command name string produced the following lines (copy and paste somewhere or view source to see truncated lines in full):</p>\n<pre>\nc:\\Users\\tammikj\\AppData\\Local\\Autodesk\\Revit\\Autodesk Revit 2014\\Journals&gt;grep Dummy2 journal.0249.txt\n\n' 0:&lt; Added new API pushbutton 6417 name  text Dummy2 class PostAddinCommand.CmdDummy2 assembly C:\\Users\\tammikj\\AppData\\Roaming\\Autodesk\\Revit\\Addins\\2014\\PostAddinCommand.dll\n\n Jrn.RibbonEvent \"Execute external command:CustomCtrl_%CustomCtrl_%Add-Ins%Post Add-in Command%Dummy2:PostAddinCommand.CmdDummy2\"\n\n' 1:&lt; TaskDialog \"Hello from CmdDummy2!\"\n</pre>\n<p>The command name string is thus</p>\n<ul><li>\"CustomCtrl_%CustomCtrl_%Add-Ins%Post Add-in Command%Dummy2\"</li></ul>\n<p>This is concatenation of a hierarchical list of entries separated by percentage signs '%'.</p>\n<p>The first two entries appear to be fixed constants, \"CustomCtrl_\".</p>\n<p>The last three are the sequence of controls a user needs to navigate through to manually launch the corresponding command, in this case the standard Revit Add-Ins ribbon tab, the custom \"Post Add-in Command\" ribbon panel, and the text of the ribbon button item, \"Dummy2\".</p>\n<p>Although this string may seem a bit unwieldy, it does have the advantage that it can be controlled and generated by the add-in itself according to these rules, since each component is based on an add-in-defined string constant.</p>\n<p>The following code successfully generates a RevitCommandId for this button and programmatically launches the command:</p>\n<pre class=\"code\">\n  <span class=\"green\">// External tool commands defined by add-ins are</span>\n  <span class=\"green\">// identified by the string listed in the </span>\n  <span class=\"green\">// journal file when the command is launched </span>\n  <span class=\"green\">// manually.</span>\n \n  <span class=\"blue\">string</span> name_addin_button_cmd\n    = <span class=\"maroon\">\"CustomCtrl_%CustomCtrl_%\"</span>\n      + <span class=\"maroon\">\"Add-Ins%Post Add-in Command%Dummy2\"</span>;\n \n  <span class=\"teal\">RevitCommandId</span> id_addin_button_cmd\n    = <span class=\"teal\">RevitCommandId</span>.LookupCommandId(\n      name_addin_button_cmd );\n \n  uiapp.PostCommand( id_addin_button_cmd );\n</pre>\n<p>Stepping through the execution of this code in the Visual Studio debugger and examining the resulting RevitCommandId instance shows that its internal numerical id field value equals 6417.</p>\n<p>This is the same number listed in the journal file during the creation of the ribbon pushbutton.</p>\n<p>In the case above of the external tool command, the RevitCommandId numerical id was also equal to the pushbutton number.</p>\n<p>If you look at the RevitCommandId numerical id produced by instantiation from a built-in Revit command PostableCommand enumeration value, you will note that they end up equal.</p>\n<p>This led me to wonder whether it might be possible to cast the pushbutton number to a PostableCommand enumeration value and use LookupPostableCommandId to look it up instead of going through this rigmarole of confusing command name strings.</p>\n<a name=\"3\"></a>\n<h4>The Pushbutton Number Cannot be Cast to PostableCommand</h4>\n<p>Well, in short, I tested it and it does not work.</p>\n<p>I cast the pushbutton number of both custom external commands listed in the journal file to PostableCommand enumeration values and passed them in to the LookupPostableCommandId.</p>\n<p>Both attempts threw the same Revit ArgumentException saying \"Invalid PostableCommand\".</p>\n<a name=\"4\"></a>\n<h4>Summary and Download</h4>\n<p>Well, enough time spent on that, I think, and now all should be clear.</p>\n<p>The updated version of the PostAddinCommand test add-in defines quite a number of classes:</p>\n<ul>\n<li>CmdDummy – dummy external tool command.</li>\n<li>CmdPost – external command to programmatically launch CmdDummy.</li>\n<li>CmdDummy2 – dummy custom ribbon button command.</li>\n<li>App – external application defining a ribbon panel and button to launch CmdDummy2.</li>\n<li>CmdPost2 – external command to programmatically launch CmdDummy2.</li>\n<li>CmdPostId – external command showing that the cast from pushbutton number to PostableCommand fails for CmdDummy.</li>\n<li>CmdPostId2 – ditto for CmdDummy2.</li>\n</ul>\n<p>The entire source code, Visual Studio solution and add-in manifest for the updated test suite is available from my\n\n<a href=\"https://github.com/jeremytammik/PostAddinCommand\">\nPostAddinCommand GitHub repository</a>, and\n\nthe version described here is\n\n<a href=\"https://github.com/jeremytammik/PostAddinCommand/releases/tag/2014.0.0.2\">\n2014.0.0.2</a>.</p>\n<p>This GitHub thingy is pretty handy, actually.</p>\n<p>Oh, and now I finally performed the final step of setting up my git access on the Mac, to cache my credentials as described in\n\n<a href=\"https://help.github.com/articles/set-up-git\">\npassword caching</a>:</p>\n<pre>\n  git config --global credential.helper osxkeychain\n</pre>\n<pre class=\"code\">\n</pre>\n<a name=\"\"></a>\n<h4></h4>\n<a href=\"\">\n</a>\n</p>"
  },
  {
    "original_filename": "1040_postcommand",
    "header_text": "Launching a Custom Add-In Ribbon Button Command",
    "local_header_href": "#launching-a-custom-add-in-ribbon-button-command",
    "chunk_text": "<h4>Launching a Custom Add-In Ribbon Button Command</h4><p>We have now learned how to programmatically launch an external tool command defined in the add-in manifest and therefore equipped with its own client id.</p><p>Most serious applications do not list individual commands explicitly in the add-in manifest, though, because it is not very user friendly to have to navigate to the Add-Ins tab External Tools menu each time you want to launch them.</p><p>Actually, there are two completely different types of external commands, both implementing the IExternalCommand interface:</p><ul>\n<li>External tool commands, listed in the add-in manifest and launched by selecting the entry added by Revit in the Add-Ins &gt; External Tools menu.</li>\n<li>Custom button commands launched by clicking a custom button created by an external application.</li>\n</ul><p>The latter have no client id.</p><p>Still, the procedure of analysing the journal file to discover the corresponding command name string to pass into the LookupCommandId method remains exactly the same, even thought the result differs.</p><p>I implemented a new external command CmdDummy2 to test the latter case, and an external application to create a custom ribbon panel and custom button to launch it.</p><p>Repeating the steps described above to manually launch the command and examine the journal file to discover its command name string produced the following lines (copy and paste somewhere or view source to see truncated lines in full):</p><pre>\nc:\\Users\\tammikj\\AppData\\Local\\Autodesk\\Revit\\Autodesk Revit 2014\\Journals&gt;grep Dummy2 journal.0249.txt\n\n' 0:&lt; Added new API pushbutton 6417 name  text Dummy2 class PostAddinCommand.CmdDummy2 assembly C:\\Users\\tammikj\\AppData\\Roaming\\Autodesk\\Revit\\Addins\\2014\\PostAddinCommand.dll\n\n Jrn.RibbonEvent \"Execute external command:CustomCtrl_%CustomCtrl_%Add-Ins%Post Add-in Command%Dummy2:PostAddinCommand.CmdDummy2\"\n\n' 1:&lt; TaskDialog \"Hello from CmdDummy2!\"\n</pre><p>The command name string is thus</p><ul><li>\"CustomCtrl_%CustomCtrl_%Add-Ins%Post Add-in Command%Dummy2\"</li></ul><p>This is concatenation of a hierarchical list of entries separated by percentage signs '%'.</p><p>The first two entries appear to be fixed constants, \"CustomCtrl_\".</p><p>The last three are the sequence of controls a user needs to navigate through to manually launch the corresponding command, in this case the standard Revit Add-Ins ribbon tab, the custom \"Post Add-in Command\" ribbon panel, and the text of the ribbon button item, \"Dummy2\".</p><p>Although this string may seem a bit unwieldy, it does have the advantage that it can be controlled and generated by the add-in itself according to these rules, since each component is based on an add-in-defined string constant.</p><p>The following code successfully generates a RevitCommandId for this button and programmatically launches the command:</p><pre class=\"code\">\n  <span class=\"green\">// External tool commands defined by add-ins are</span>\n  <span class=\"green\">// identified by the string listed in the </span>\n  <span class=\"green\">// journal file when the command is launched </span>\n  <span class=\"green\">// manually.</span>\n \n  <span class=\"blue\">string</span> name_addin_button_cmd\n    = <span class=\"maroon\">\"CustomCtrl_%CustomCtrl_%\"</span>\n      + <span class=\"maroon\">\"Add-Ins%Post Add-in Command%Dummy2\"</span>;\n \n  <span class=\"teal\">RevitCommandId</span> id_addin_button_cmd\n    = <span class=\"teal\">RevitCommandId</span>.LookupCommandId(\n      name_addin_button_cmd );\n \n  uiapp.PostCommand( id_addin_button_cmd );\n</pre><p>Stepping through the execution of this code in the Visual Studio debugger and examining the resulting RevitCommandId instance shows that its internal numerical id field value equals 6417.</p><p>This is the same number listed in the journal file during the creation of the ribbon pushbutton.</p><p>In the case above of the external tool command, the RevitCommandId numerical id was also equal to the pushbutton number.</p><p>If you look at the RevitCommandId numerical id produced by instantiation from a built-in Revit command PostableCommand enumeration value, you will note that they end up equal.</p><p>This led me to wonder whether it might be possible to cast the pushbutton number to a PostableCommand enumeration value and use LookupPostableCommandId to look it up instead of going through this rigmarole of confusing command name strings.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1040_postcommand",
    "header_text": "The Pushbutton Number Cannot be Cast to PostableCommand",
    "local_header_href": "#the-pushbutton-number-cannot-be-cast-to-postablecommand",
    "chunk_text": "<h4>The Pushbutton Number Cannot be Cast to PostableCommand</h4><p>Well, in short, I tested it and it does not work.</p><p>I cast the pushbutton number of both custom external commands listed in the journal file to PostableCommand enumeration values and passed them in to the LookupPostableCommandId.</p><p>Both attempts threw the same Revit ArgumentException saying \"Invalid PostableCommand\".</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1040_postcommand",
    "header_text": "Summary and Download",
    "local_header_href": "#summary-and-download",
    "chunk_text": "<h4>Summary and Download</h4><p>Well, enough time spent on that, I think, and now all should be clear.</p><p>The updated version of the PostAddinCommand test add-in defines quite a number of classes:</p><ul>\n<li>CmdDummy – dummy external tool command.</li>\n<li>CmdPost – external command to programmatically launch CmdDummy.</li>\n<li>CmdDummy2 – dummy custom ribbon button command.</li>\n<li>App – external application defining a ribbon panel and button to launch CmdDummy2.</li>\n<li>CmdPost2 – external command to programmatically launch CmdDummy2.</li>\n<li>CmdPostId – external command showing that the cast from pushbutton number to PostableCommand fails for CmdDummy.</li>\n<li>CmdPostId2 – ditto for CmdDummy2.</li>\n</ul><p>The entire source code, Visual Studio solution and add-in manifest for the updated test suite is available from my\n\n<a href=\"https://github.com/jeremytammik/PostAddinCommand\">\nPostAddinCommand GitHub repository</a>, and\n\nthe version described here is\n\n<a href=\"https://github.com/jeremytammik/PostAddinCommand/releases/tag/2014.0.0.2\">\n2014.0.0.2</a>.</p><p>This GitHub thingy is pretty handy, actually.</p><p>Oh, and now I finally performed the final step of setting up my git access on the Mac, to cache my credentials as described in\n\n<a href=\"https://help.github.com/articles/set-up-git\">\npassword caching</a>:</p><pre>\n  git config --global credential.helper osxkeychain\n</pre><pre class=\"code\">\n</pre><a name=\"\"></a>"
  },
  {
    "original_filename": "1040_postcommand",
    "header_text": "",
    "local_header_href": "#",
    "chunk_text": "<h4></h4><a href=\"\">\n</a>"
  }
]