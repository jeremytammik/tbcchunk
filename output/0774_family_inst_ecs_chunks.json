[
  {
    "original_filename": "0774_family_inst_ecs",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0774_family_inst_ecs",
    "header_text": "Family Instance Element Coordinate System",
    "local_header_href": "#family-instance-element-coordinate-system",
    "chunk_text": "<h3>Family Instance Element Coordinate System</h3><p>I spent last weekend in Sweden for my 35 year school anniversary, having graduated from the \n\n<a href=\"http://home.tyskaskolan.se\">\nGerman school in Stockholm</a> in \n\nMay 1977.\n\n<p>The day after our reunion I visited a friend's summer house on the little lake Kvarnsj√∂n in Huddinge:</p>\n<center>\n<img alt=\"Jerre vid Lasses stuga\" src=\"file:////j/photo/jeremy/2012/2012-05-28_aaloe/107_jeremy_stuga_2.jpg\" width=\"400\"/>\n</center>\n<p>Back to the Revit API, after having taken a second look at \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/connector-orientation.html\">\nconnector orientation</a>,\n\nhere is another MEP coordinate system topic that can bear updating and coincidentally also has a connection to Scandinavia, since Progman Oy and Olli are Finnish.\n\n<p>I recently presented the discussion with Olli Kattelus of \n\n<a href=\"http://www.magicad.com\">\nMagiCAD</a> at\n\n<a href=\"http://www.magicad.com/en/content/welcome-house-progman\">\nProgman Oy</a> on \n\ndefining an ECS or\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/retrieve-geometry-in-element-coordinate-system.html\">\nelement coordinate system for MEP ducts and pipes</a>.\n\n<p>This is required for exporting them to IFC.\nTheir geometry is specified in ECS there so that the same element definition can be reused consistently for all of its occurrences.\n\n<p>That took care of ducts and pipes, but the issue of family instances was not completely resolved, especially how to handle their potentially 'flipped' geometry.\n\n<p>Now Olli reports an easy solution for that as well, which is actually easier and more obviously \n\n<a href=\"http://en.wikipedia.org/wiki/Canonical\">\ncanonical</a> than \n\nthe duct and pipe one, since a family instance already has a transform that we can base our ECS on:\n\n<p>I managed to solve problems with those flipped objects. \n\n<p>I changed the style how I constructed the transform a little bit. \n\n<p>With fittings, I use the hand/facing orientation &amp; location point of the family instance instead of the connector direction &amp; location:\n\n\n<pre class=\"code\">\n  Transform ^tf = Transform::Identity;\n\n  // Create correct vectors, \n  // taking flipping into account\n\n  XYZ ^ho = famInstance-&gt;HandFlipped \n    ? famInstance-&gt;HandOrientation-&gt;Negate() \n    : famInstance-&gt;HandOrientation;\n\n  XYZ ^fo = famInstance-&gt;FacingFlipped \n    ? famInstance-&gt;FacingOrientation-&gt;Negate() \n    : famInstance-&gt;FacingOrientation;\n\n  ho = ho-&gt;Normalize();\n  fo = fo-&gt;Normalize();\n\n  tf-&gt;BasisX = ho;\n  tf-&gt;BasisY = fo;\n  tf-&gt;BasisZ = ho-&gt;CrossProduct(fo);\n  tf-&gt;Origin = famInstance-&gt;Location-&gt;Point;\n\n  tf = tf-&gt;Inverse;\n</pre>\n<p>You may be wondering why we need this, since fittings are family instances whose geometry is already defined the way we need it for the IFC export.\n\n<p>However, a fitting may also have an insulation added to it.\nThe InsulationLiningBase class representing the insulation is inherited from MEPCurve, so we have the same issues for defining an ECS as we did for the duct and curve.\n\n<p>Thus only fittings with insulation need this transform treatment, in order to export their insulation geometry, not the fitting's own one.\n\n<p>Many thanks to Olli for this simple and elegant solution!\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]