[
  {
    "original_filename": "1476_roomedit3d_forge_warn",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<title>The Building Coder</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"3dwc.css\"/>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js?autoload=true\" defer=\"defer\"></script>\n</head>\n\n<!---\n\n- warning swallower\n  http://forums.autodesk.com/t5/revit-api-forum/general-warning-swallower/m-p/6589045\n  \nWarning Swallower, Roomedit3d Viewer Extension @AutodeskForge #revitapi #3dwebcoder @AutodeskRevit #aec #bim\n\nI continue my work on the <code>roomedit3dv3</code> sample connecting the desktop with the cloud by enabling a real-time round-trip modification of the BIM via the Forge viewer, mention a neat solution enabling a Revit add-in to swallowing warning messages, and point out the Forge webinar session on the Forge Viewer later today\n&ndash; Warning swallower\n&ndash; Roomedit3dv3 transform viewer extension\n&ndash; Forge webinar series...\n\n-->"
  },
  {
    "original_filename": "1476_roomedit3d_forge_warn",
    "header_text": "Warning Swallower and Roomedit3d Viewer Extension",
    "local_header_href": "#warning-swallower-and-roomedit3d-viewer-extension",
    "chunk_text": "### Warning Swallower and Roomedit3d Viewer Extension\n\nI continue my work on the [roomedit3dv3](https://github.com/Autodesk-Forge/forge-boilers.nodejs/tree/roomedit3d) sample\nconnecting the desktop with the cloud by enabling a real-time round-trip modification of the BIM via the Forge viewer,\nmention a neat solution enabling a Revit add-in to swallowing warning messages,\nand point out the Forge webinar session on the Forge Viewer later today:\n\n- [Warning swallower](#2)\n- [Roomedit3dv3 transform viewer extension](#3)\n- [Forge webinar series](#4)"
  },
  {
    "original_filename": "1476_roomedit3d_forge_warn",
    "header_text": "<a name=\"2\"></a>Warning Swallower",
    "local_header_href": "#a-name2awarning-swallower",
    "chunk_text": "#### <a name=\"2\"></a>Warning Swallower\n\n[Adam Krug](http://forums.autodesk.com/t5/user/viewprofilepage/user-id/3946573)\nand [Wolfgang Weh](http://forums.autodesk.com/t5/user/viewprofilepage/user-id/1211382) provide a neat warning swallower solution in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api/bd-p/160) thread \non a [general warning swallower](http://forums.autodesk.com/t5/revit-api-forum/general-warning-swallower/m-p/6589045):\n\n**Question:** In my solution I'm opening a lot of families from within a project. Sometimes some popups appear during opening a family. I enclosed the opening process inside a transaction in which I handle warnings via IFailuresPreprocessor. I noticed that:\n \nAbout 90% warnings can be suppressed with the following:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FailuresAccessor</span>&nbsp;a;\n&nbsp;&nbsp;a.DeleteAllWarnings();\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">FailureProcessingResult</span>.Continue;\n</pre>\n\nBut the remaining 10% won't get suppressed with such treatment, whereas they do get suppressed with:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FailuresAccessor</span>&nbsp;a;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">FailureMessageAccessor</span>&gt;&nbsp;failures&nbsp;=&nbsp;a.GetFailureMessages();\n&nbsp;&nbsp;a.ResolveFailures(&nbsp;failures&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">FailureProcessingResult</span>.ProceedWithCommit;\n</pre>\n\nIs there a general way to check with what kind of treatment current warning can get suppressed? I don't want to go into a switch case block because the warnings are really various and it'd take ages before I covered them all. Another issue is that it doesn't matter so much how I treat the warnings because I don't resave the families in my solution - I just close them without saving.\n \n**Answer:** I am not aware of any generic warning swallower within the Revit API.\n \nThe solution you have already seems pretty good to me.\n \nFor something yet more generic, all I can suggest is\na [Windows dialogue handler](http://thebuildingcoder.typepad.com/blog/2009/10/dismiss-dialogue-using-windows-api.html),\ne.g., [JtClicker](https://github.com/jeremytammik/JtClicker).\n \nThe Building Coder provides an entire topic group on the subject\nof [Detecting and Handling Dialogues and Failures](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.32).\n \n\n**Answer 2:** The solution suggested in the thread\non [suppressing warning pop-ups](http://forums.autodesk.com/t5/revit-api-forum/supressing-warning-pop-ups/td-p/4764741) works\nfine for me.\n \n**Response:** Indeed, the `Severity` is what I was looking for. My solution seems to be working fine now. Here is the code:\n \n<pre class=\"code\">\n<span style=\"color:#2b91af;\">FailureProcessingResult</span>&nbsp;PreprocessFailures(&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FailuresAccessor</span>&nbsp;a&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">FailureMessageAccessor</span>&gt;&nbsp;failures&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;a.GetFailureMessages();\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">FailureMessageAccessor</span>&nbsp;f&nbsp;<span style=\"color:blue;\">in</span>&nbsp;failures&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FailureSeverity</span>&nbsp;fseverity&nbsp;=&nbsp;a.GetSeverity();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;fseverity&nbsp;==&nbsp;<span style=\"color:#2b91af;\">FailureSeverity</span>.Warning&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.DeleteWarning(&nbsp;f&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.ResolveFailure(&nbsp;f&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">FailureProcessingResult</span>.ProceedWithCommit;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">FailureProcessingResult</span>.Continue;\n}\n</pre>\n\nMany thanks to Adam and Wolfgang for sharing this solution!\n\nI added it\nto [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\n[release 2017.0.130.1](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2017.0.130.1) in\nthe module [CmdPreprocessFailure.cs](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdPreprocessFailure.cs#L44-L67)."
  },
  {
    "original_filename": "1476_roomedit3d_forge_warn",
    "header_text": "<a name=\"3\"></a>Roomedit3dv3 Transform Viewer Extension",
    "local_header_href": "#a-name3aroomedit3dv3-transform-viewer-extension",
    "chunk_text": "#### <a name=\"3\"></a>Roomedit3dv3 Transform Viewer Extension\n\nI am implementing\nthe [roomedit3dv3](https://github.com/Autodesk-Forge/forge-boilers.nodejs/tree/roomedit3d) sample\nconnecting the desktop with the cloud based on\n[Philippe Leefsma](http://twitter.com/F3lipek)'s\n[Forge node.js boilerplate samples](https://github.com/Autodesk-Forge/forge-boilers.nodejs).\n\n<a name=\"3.1\"></a>I now added a viewer extension enabling the user to select and translate a BIM element in the Forge viewer.\n\n<center>\n<img src=\"img/roomedit3dv3_transform_extension.png\" alt=\"Roomedit3dv3 transform extension\" width=\"456\">\n</center>\n\nWith that up and running, the next step will be to communicate back that modification to update the source Revit BIM.\n\nI am basing the roomedit viewer transform tool on Philippe's \n[Viewing.Extension.Transform viewer extension](https://github.com/Developer-Autodesk/library-javascript-viewer-extensions/tree/master/src/Viewing.Extension.Transform),\nfrom his\nhuge [library of JavaScript viewer extensions](https://github.com/Developer-Autodesk/library-javascript-viewer-extensions).\n\nYou can see it in action in the [Forge React gallery](https://react-gallery.autodesk.io/embed?id=57609f6b177a241809da305e&extIds=Viewing.Extension.Transform).\n\nIt took me several steps, lots of advice from Philippe, and some small enhancements to his underlying base boilerplate code to actually get it up and running:\n\n> To add the transform extension to the viewer client, first load the three.js script before loading the viewer.\n\nThis is implemented in\nthe [layout](https://github.com/Autodesk-Forge/forge-boilers.nodejs/tree/roomedit3d/6%20-%20viewer%2Bserver%2Bdata-mng%2Bderivatives/layout).\n\n> Copy the four files viewing extension into your app.\n\nI placed them in\nthe [src/client/Components/Viewer/extensions](https://github.com/Autodesk-Forge/forge-boilers.nodejs/tree/roomedit3d/6%20-%20viewer%2Bserver%2Bdata-mng%2Bderivatives/src/client/Components/Viewer/extensions) subfolder.\n\n> Load the transform extension by importing the main extension file.\n\nDone in [ViewerPanel.js](https://github.com/Autodesk-Forge/forge-boilers.nodejs/blob/roomedit3d/6%20-%20viewer%2Bserver%2Bdata-mng%2Bderivatives/src/client/Components/Viewer/ViewerPanel.js#L20).\n\n> The extension will register itself, and `activateTool` activates either the translate or rotate tool.\n\n> The [translate tool is derived from event emitter](https://github.com/Autodesk-Forge/forge-boilers.nodejs/blob/roomedit3d/6%20-%20viewer%2Bserver%2Bdata-mng%2Bderivatives/src/client/Components/Viewer/extensions/Viewing.Tool.Translate.js#L4).\n\n> It can therefore notify clients about its work by [emitting events using `this.emit`](https://github.com/Autodesk-Forge/forge-boilers.nodejs/blob/roomedit3d/6%20-%20viewer%2Bserver%2Bdata-mng%2Bderivatives/src/client/Components/Viewer/extensions/Viewing.Tool.Translate.js#L108-L111).\n\n> At this point, you can add the `dbid` of the selected element to the transmitted data package. From `dbid` you can get the external id, which corresponds to the Revit `UniqueId`.\n\n> In the extension constructor, you can subscribe to the events fired by the tool:\n\n<pre class=\"prettyprint\">\n  import ServiceManager // cf. sample in App.js\n  \n  translateTool.on('transform.translate', (data) => {\n    \n    viewer.getProperties(data.dbId, callback...)\n      \n    var socketSvc = ServiceManager.getService('SocketSvc')\n    \n    socketSvc.broadcast('your-msgid', {some data ...})\n    \n  })\n</pre>\n\n**Question:** I loaded the extension as described, but the call to `loadExtension` call is not yet working.\n \nInitially, I hooked it up to a load button and added this code:\n\n<pre class=\"prettyprint\">\n  var loadBtn = document.getElementById('loadBtn');\n\n  loadBtn.addEventListener(\"click\", function(){\n    this.viewer.loadExtension(\n      'Viewing.Extension.Transform')\n  });\n</pre>\n\nBut when I click the button, 'this.viewer' is no longer valid, because `this` refers to the `ViewerPanel` instance.\n \nWhen I try to call\n \n<pre class=\"prettyprint\">\n  this.viewer.loadExtension('Viewing.Extension.Transform')\n</pre>\n\ndirectly without using a button click, nothing happens either.\n \n**Answer:** This code is correct. However, as ALWAYS in JavaScript, you need to be careful to what `this` is pointing to. Inside an event handler, it will not be the same as in the calling context.\n \nAn easy way to fix your code is to use arrow function `=>` instead, which has the characteristic of implicitly binding `this` to the calling context.\n\n**Response:** Yes, the call works now, and `loadExtension` is called successfully, cf.\nthe [diff 0.0.8 to 0.0.9](https://github.com/Autodesk-Forge/forge-boilers.nodejs/compare/0.0.8...0.0.9).\n\nHowever, the extension is still not loaded successfully, neither with or without the button click.\n \nIn both cases, calling `loadExtension` triggers this error message in the js console:\n\n<pre>\nUncaught TypeError: Cannot read property 'parentControl' of undefined\n</pre>\n\nWhat could be causing that?\n\n**Answer:** Simply pass an empty options object to the extensions, e.g., a default argument:\n\n<pre class=\"prettyprint\">\n  viewer.loadExtension('extid...', {})\n</pre>\n\nAlternatively, you can pass a `parentControl` object, which is a viewer UI control to host the extension controls:\n \n<pre class=\"prettyprint\">\n  viewer.loadExtension('extid...', {\n    parentControl: yourCustomControl\n})\n</pre>\n\n**Response:** Thank you, yes, perfect, it works.\n \nThe result now looks like this:\n \n<center>\n<img src=\"img/roomedit3dv3_extension_lacks_icons.png\" alt=\"Roomedit3dv3 extension lacks icons\" width=\"263\">\n</center>\n\nAm I missing some icon resources?\n \n**Answer:** You need `font-awesome` for the icons to show up. I just added it to `package.json` and in the code in my latest commit.\n\nThe Roomedit3dv3 transform extension is up and running right now in my local build, as shown [above](#3.1).\n\nI have not tested deploying to Heroku yet, though, and, as said, I still need to add the code to communicate the modifications back to the desktop BIM.\n\nPlus, today is the deadline to submit my material for the [RTCEU Revit Technology Conference Europe](http://www.rtcevents.com/rtc2016eur) in Porto next month."
  },
  {
    "original_filename": "1476_roomedit3d_forge_warn",
    "header_text": "<a name=\"4\"></a>Forge Webinar Series",
    "local_header_href": "#a-name4aforge-webinar-series",
    "chunk_text": "#### <a name=\"4\"></a>Forge Webinar Series\n\nToday, \n[Jaime Rosales](http://adndevblog.typepad.com/aec/jaime-rosales.html)\n[Duque](http://core.thorntontomasetti.com/jaime-rosales-duque) presents\nthe fourth session in the ongoing Forge webinar series, on the Viewer.\n\nHere are the recordings, presentations and support material of the sessions held so far:\n\n- September 20 &ndash; [Introduction to Autodesk Forge and the Autodesk App Store](http://adndevblog.typepad.com/cloud_and_mobile/2016/09/introduction-to-autodesk-forge-and-the-autodesk-app-store.html)\n- September 22 &ndash; [Introduction to OAuth and Data Management API](http://adndevblog.typepad.com/cloud_and_mobile/2016/09/introduction-to-oauth-and-data-management-api.html)\n&ndash; on [OAuth](https://developer.autodesk.com/en/docs/oauth/v2/overview)\nand [Data Management API](https://developer.autodesk.com/en/docs/data/v2/overview), providing token-based authentication, authorization and a unified and consistent way to access data across A360, Fusion 360, and the Object Storage Service.\n- September 27 &ndash; [Introduction to Model Derivative API](http://adndevblog.typepad.com/cloud_and_mobile/2016/09/introduction-to-model-derivative-api.html)\n&ndash; on the [Model Derivative API](https://developer.autodesk.com/en/docs/model-derivative/v2/overview) that enables users to represent and share their designs in different formats and extract metadata.\n \nUpcoming sessions continue during the remainder of\nthe [Autodesk App Store Forge and Fusion 360 Hackathon](http://autodeskforge.devpost.com) until the end of October:\n\n- September 29 &ndash; [Viewer](https://developer.autodesk.com/en/docs/viewer/v2/overview) &ndash; \nformerly part of the 'View and Data API', a WebGL-based, JavaScript library for 3D and 2D model rendering a CAD data from seed models, e.g., [AutoCAD](http://www.autodesk.com/products/autocad/overview), [Fusion 360](http://www.autodesk.com/products/fusion-360/overview), [Revit](http://www.autodesk.com/products/revit-family/overview), and many other formats.\n- October 4 &ndash; [Design Automation API](https://developer.autodesk.com/en/docs/design-automation/v2/overview) &ndash; formerly known as 'AutoCAD I/O', run scripts on design files.\n- October 6 &ndash; [BIM360](https://developer.autodesk.com/en/docs/bim360/v1/overview) &ndash; develop apps that integrate with BIM 360 to extend its capabilities in the construction ecosystem.\n- October 11 &ndash; [Fusion 360 Client API](http://help.autodesk.com/view/NINVFUS/ENU/?guid=GUID-A92A4B10-3781-4925-94C6-47DA85A4F65A) &ndash; an integrated CAD, CAM, and CAE tool for product development, built for the new ways products are designed and made.\n- October 13 &ndash; Q&A on all APIs.\n- October 20 &ndash; Q&A on all APIs.\n- October 27 &ndash; Submitting a web service app to Autodesk App store.\n\nQuick access links:\n\n- For API keys, go to [developer.autodesk.com](https://developer.autodesk.com)\n- For code samples, go to [github.com/Developer-Autodesk](https://github.com/Developer-Autodesk)\n \nFeel free to contact us at [forgehackathon@autodesk.com](mailto:forgehackathon@autodesk.com) at any time with any questions.\n\n<center>\n<img src=\"img/forge_accelerator.png\" alt=\"Forge &ndash; build the future of making things together\" width=\"400\">\n</center>"
  }
]