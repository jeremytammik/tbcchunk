[
  {
    "original_filename": "0934_ramp_material",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0934_ramp_material",
    "header_text": "Accesssing and Filtering by Ramp Material",
    "local_header_href": "#accesssing-and-filtering-by-ramp-material",
    "chunk_text": "<h3>Accesssing and Filtering by Ramp Material</h3><p>I had a chat with Ning Zhou, who was away from the Revit API for a while and is now happily back in the fold.\n\n<p>He explored how to access the material of a ramp element.</p>\n<a name=\"2\"></a>\n<h4>Access to Ramp Material</h4>\n<p><strong>Question:</strong> Is there a way to get the ramp material information using API?\n\nI tried lots of paths and could not find anything.\n\n<p><strong>Answer (by Ning himself):</strong> I searched again using RevitLookup snoop.\n\n<p>It turns out that basic material info is accessible after all.\nI found it us under 'Object type' instead of 'Parameters'.\nApparently only the material name is stored there, in the built-in parameter 'RAMP_ATTR_MATERIAL':</p>\n<center>\n<img alt=\"Snoop ramp material\" src=\"img/snoop_ramp_material.jpg\" width=\"400\"/>\n</center>\n<p>I have not seen anything providing the material volume, so I guess I'll have to use the geometry access and calculate that myself instead.\n\n<p>At least I can now implement a filter selection using the material name!\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> concreteRamps\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Ramps )\n      .Where( e =&gt;\n      {\n        <span class=\"teal\">ElementId</span> id = e.GetValidTypes().First(\n          id2 =&gt; id2.Equals( e.GetTypeId() ) );\n \n        <span class=\"teal\">Material</span> m = doc.GetElement( doc.GetElement( id )\n          .get_Parameter(\n            <span class=\"teal\">BuiltInParameter</span>.RAMP_ATTR_MATERIAL )\n          .AsElementId() ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n        <span class=\"blue\">return</span> m.Name.Contains( <span class=\"maroon\">\"Concrete\"</span> );\n      } );\n</pre>\n<p>Many thanks to Ning for his research and sharing this helpful result.\n\n<a name=\"2.2\"></a>\n<p><strong>Addendum:</strong> Simpler:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> concreteRamps\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Ramps )\n      .Where( e =&gt;\n      {\n        <span class=\"teal\">ElementId</span> id = e.GetTypeId();\n \n        <span class=\"teal\">Material</span> m = doc.GetElement( doc.GetElement( id )\n          .get_Parameter(\n            <span class=\"teal\">BuiltInParameter</span>.RAMP_ATTR_MATERIAL )\n          .AsElementId() ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n        <span class=\"blue\">return</span> m.Name.Contains( <span class=\"maroon\">\"Concrete\"</span> );\n      } );\n</pre>\n<p>Thank you again, Ning, for you your additional comment below.\n\n\n<p>Before closing, here is another useful pointer on family instance placement and rotation:\n\n\n<a name=\"3\"></a>\n<h4>Rotate a Family in Three Different Axes</h4>\n<p>Here is a pretty neat article on family instance placement strategies from a user point of view, describing how to\n\n<a href=\"http://wikihelp.autodesk.com/Revit/enu/Community/Tips_and_Tricks/Families,_Parameters,_Formulas/Rotate_a_Family_in_3_Different_Axes\">\nrotate a family in three different axes</a>,\n\nwhich is certainly useful for developers as well.\n\n<p>As always in the Revit API, knowing the best practice from a user and product point of view is of paramount importance before putting any thoughts or efforts at all into API development issues.</p></p>\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0934_ramp_material",
    "header_text": "Access to Ramp Material",
    "local_header_href": "#access-to-ramp-material",
    "chunk_text": "<h4>Access to Ramp Material</h4><p><strong>Question:</strong> Is there a way to get the ramp material information using API?\n\nI tried lots of paths and could not find anything.\n\n<p><strong>Answer (by Ning himself):</strong> I searched again using RevitLookup snoop.\n\n<p>It turns out that basic material info is accessible after all.\nI found it us under 'Object type' instead of 'Parameters'.\nApparently only the material name is stored there, in the built-in parameter 'RAMP_ATTR_MATERIAL':</p>\n<center>\n<img alt=\"Snoop ramp material\" src=\"img/snoop_ramp_material.jpg\" width=\"400\"/>\n</center>\n<p>I have not seen anything providing the material volume, so I guess I'll have to use the geometry access and calculate that myself instead.\n\n<p>At least I can now implement a filter selection using the material name!\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> concreteRamps\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Ramps )\n      .Where( e =&gt;\n      {\n        <span class=\"teal\">ElementId</span> id = e.GetValidTypes().First(\n          id2 =&gt; id2.Equals( e.GetTypeId() ) );\n \n        <span class=\"teal\">Material</span> m = doc.GetElement( doc.GetElement( id )\n          .get_Parameter(\n            <span class=\"teal\">BuiltInParameter</span>.RAMP_ATTR_MATERIAL )\n          .AsElementId() ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n        <span class=\"blue\">return</span> m.Name.Contains( <span class=\"maroon\">\"Concrete\"</span> );\n      } );\n</pre>\n<p>Many thanks to Ning for his research and sharing this helpful result.\n\n<a name=\"2.2\"></a>\n<p><strong>Addendum:</strong> Simpler:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> concreteRamps\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Ramps )\n      .Where( e =&gt;\n      {\n        <span class=\"teal\">ElementId</span> id = e.GetTypeId();\n \n        <span class=\"teal\">Material</span> m = doc.GetElement( doc.GetElement( id )\n          .get_Parameter(\n            <span class=\"teal\">BuiltInParameter</span>.RAMP_ATTR_MATERIAL )\n          .AsElementId() ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n        <span class=\"blue\">return</span> m.Name.Contains( <span class=\"maroon\">\"Concrete\"</span> );\n      } );\n</pre>\n<p>Thank you again, Ning, for you your additional comment below.\n\n\n<p>Before closing, here is another useful pointer on family instance placement and rotation:\n\n\n<a name=\"3\"></a>\n<h4>Rotate a Family in Three Different Axes</h4>\n<p>Here is a pretty neat article on family instance placement strategies from a user point of view, describing how to\n\n<a href=\"http://wikihelp.autodesk.com/Revit/enu/Community/Tips_and_Tricks/Families,_Parameters,_Formulas/Rotate_a_Family_in_3_Different_Axes\">\nrotate a family in three different axes</a>,\n\nwhich is certainly useful for developers as well.\n\n<p>As always in the Revit API, knowing the best practice from a user and product point of view is of paramount importance before putting any thoughts or efforts at all into API development issues.</p></p>\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0934_ramp_material",
    "header_text": "Rotate a Family in Three Different Axes",
    "local_header_href": "#rotate-a-family-in-three-different-axes",
    "chunk_text": "<h4>Rotate a Family in Three Different Axes</h4><p>Here is a pretty neat article on family instance placement strategies from a user point of view, describing how to\n\n<a href=\"http://wikihelp.autodesk.com/Revit/enu/Community/Tips_and_Tricks/Families,_Parameters,_Formulas/Rotate_a_Family_in_3_Different_Axes\">\nrotate a family in three different axes</a>,\n\nwhich is certainly useful for developers as well.\n\n<p>As always in the Revit API, knowing the best practice from a user and product point of view is of paramount importance before putting any thoughts or efforts at all into API development issues.</p></p>"
  }
]