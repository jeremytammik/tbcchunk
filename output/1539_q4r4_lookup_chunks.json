[
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!-- <script src=\"run_prettify.js\" type=\"text/javascript\"></script> --> \n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\nImport blog posts into @ElasticsearchQA #RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge http://bit.ly/tbcimport_lookupicon\nRevitLookup updated and with new icon #RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge http://bit.ly/tbcimport_lookupicon\n\nI started working on the question answering system Q4R4 Question Answering for Revit API.\nThe first step is to import The Building Coder blog posts into Elasticsearch and experiment with full-text queries on them.\nFurthermore, we are proud to present yet more enhancements to the revamped version of RevitLookup\n&ndash; Q4R4 sources and result presentation\n&ndash; Importing <code>tbc</code> blog posts into Elasticsearch\n&ndash; Listing and clearing the Elasticsearch <code>tbc</code> index\n&ndash; Strip and clean up HTML for JSON document\n&ndash; Q4R4 GitHub repo and <code>tbcimport.py</code> script\n&ndash; RevitLookup bug fixes\n&ndash; RevitLookup icons...\n\n-->"
  },
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "Q4R4 tbc Import and RevitLookup",
    "local_header_href": "#q4r4-tbc-import-and-revitlookup",
    "chunk_text": "### Q4R4 tbc Import and RevitLookup\n\nI started working on the question answering\nsystem [Q4R4 *Question Answering for Revit API*](http://thebuildingcoder.typepad.com/blog/2017/03/q4r4-revit-api-question-answering-system.html).\n\nThe first step is to import The Building Coder blog posts into Elasticsearch and experiment with full-text queries on them.\n\nFurthermore, we are proud to present yet more enhancements to the revamped version of RevitLookup:\n\n- [Q4R4 sources and result presentation](#2)\n- [Importing `tbc` blog posts into Elasticsearch](#3)\n- [Listing and clearing the Elasticsearch `tbc` index](#4)\n- [Strip and clean up HTML for JSON document](#5)\n- [Q4R4 GitHub repo and `tbcimport.py` script](#6)\n- [RevitLookup bug fixes](#7)\n- [RevitLookup icons](#8)"
  },
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "<a name=\"2\"></a>Q4R4 Question Sources and Result Presentation",
    "local_header_href": "#a-name2aq4r4-question-sources-and-result-presentation",
    "chunk_text": "#### <a name=\"2\"></a>Q4R4 Question Sources and Result Presentation\n\nOne aspect of q4r4 is searching, and another is what results to present and how.\n\nOne useful approach that comes to mind might be:\n\nGiven a query, return the most relevant results separately from several different resource collections:\n\n- The Revit API help file\n- The Revit add-in developer guide\n- The Revit SDK sample collection\n- Revit API discussion forum threads\n- The Building Coder blog posts\n- Anonymised ADN case answers\n- StackOverflow queries"
  },
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "<a name=\"3\"></a>Importing `tbc` Blog Posts into Elasticsearch",
    "local_header_href": "#a-name3aimporting-tbc-blog-posts-into-elasticsearch",
    "chunk_text": "#### <a name=\"3\"></a>Importing `tbc` Blog Posts into Elasticsearch\n\nAs mentioned\nin [the last post on q4r4](http://thebuildingcoder.typepad.com/blog/2017/03/q4r4-revit-api-question-answering-system.html),\nI should start off implementing a simple but intelligent search engine without worrying about machine learning or AI in any of its forms.\n\nI am still reading\nabout [Elasticsearch](https://www.elastic.co/products/elasticsearch) and\nfiguring out how to set up an experimental system to try this out.\n\n<center>\n<img src=\"img/icon-elasticsearch-bb.png\" alt=\"Elasticsearch\" width=\"84\"/>\n</center>\n\nI started with the The Building Coder blog posts, since I have them all in handy text format, either HTML or Markdown, publicly accessible in\nthe [tbc GitHub repository](https://github.com/jeremytammik/tbc).\n\nI want to import all posts' full text into Elasticsearch.\n\nA similar topic is discussed \nin [having fun with Python and Elasticsearch, Part 1](https://bitquabit.com/post/having-fun-python-and-elasticsearch-part-1/).\n\nI installed the [Elasticsearch Python library](https://www.elastic.co/guide/en/elasticsearch/client/python-api/current/index.html) and\nimplemented a module `tbcimport.py` to read\nthe [tbc main blog post index](http://jeremytammik.github.io/tbc/a) and open each HTML file on the local system."
  },
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "<a name=\"4\"></a>Listing and Clearing the Elasticsearch `tbc` Index",
    "local_header_href": "#a-name4alisting-and-clearing-the-elasticsearch-tbc-index",
    "chunk_text": "#### <a name=\"4\"></a>Listing and Clearing the Elasticsearch `tbc` Index\n\nFor testing purposes, it is useful to be able to list all posts imported so far and delete the entire collection to clean up and retry; here are two `curl` commands to achieve that:\n\n- List all posts:\n\n<pre>\ncurl -XGET 'localhost:9200/tbc/_search?pretty'\n</pre>\n\n- Clear the `tbc` index:\n\n<pre>\ncurl -XDELETE 'localhost:9200/tbc?pretty'\n</pre>"
  },
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "<a name=\"5\"></a>Strip and Clean Up HTML for JSON Document",
    "local_header_href": "#a-name5astrip-and-clean-up-html-for-json-document",
    "chunk_text": "#### <a name=\"5\"></a>Strip and Clean Up HTML for JSON Document\n\nAfter reading the main blog post index file, I need to extract the text from the HTML contents and put it into a JSON document for Elasticsearch to imbibe.\n\nSome useful hints for this are provided here:\n\n- [Hitchhiker's Guide to Python &ndash; HTML scraping](http://docs.python-guide.org/en/latest/scenarios/scrape/)\n- [Extracting text from HTML file using Python](http://stackoverflow.com/questions/328356/extracting-text-from-html-file-using-python)\n\nI settled for a very simple HTML text extractor using the `htmllib` `HTMLParser`.\n\nIt initially wrote the text to standard output, but I was able to pass a file-like `StringIO` object into the `DumbWriter` constructor to intercept it.\n\nOn the first attempt, I successfully imported the first nine posts.\nPost number 10, *Selecting all Walls*, failed with a `UnicodeDecodeError` error message.\n\n<pre>\nUnicodeDecodeError: 'utf8' codec can't decode byte 0xa0 in position 2595: invalid start byte\n</pre>\n\nAs it turned out, the offending file was stored in a Windows encoding.\nI converted it to UTF-8.\n\nNext, I went one step further and eliminated all non-ASCII characters by adding `re.sub( r'[^\\x00-\\x7f]', r'', my_stringio.getvalue() )` to the result of stripping the HTML tags.\n\nThis will presumably corrupt some foreign names, expressions, and text passages.\nI would not expect those passages to be of any major importance for Revit API related queries anyway.\n\nI also added an assertion to ensure that the filenames listed in `index.html` really do exist.\n\nA surprising number of errors were discovered and fixed in the process.\n\nNow I have successfully imported all The Building Coder blog posts into Elasticsearch."
  },
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "<a name=\"6\"></a>Q4R4 GitHub Repo and `tbcimport.py` Script",
    "local_header_href": "#a-name6aq4r4-github-repo-and-tbcimportpy-script",
    "chunk_text": "#### <a name=\"6\"></a>Q4R4 GitHub Repo and `tbcimport.py` Script\n\nI celebrated this first step by creating\nthe [q4r4 GitHub repository](https://github.com/jeremytammik/q4r4),\nadding [tbcimport.py](https://github.com/jeremytammik/q4r4/blob/master/tbcimport.py) to it in its current functional state, \nand creating [q4r4 release 1.0.0](https://github.com/jeremytammik/q4r4/releases/tag/1.0.0).\n\nHere is the script in its current state:\n\n<script src=\"https://gist.github.com/jeremytammik/d834055f2f4943c4bbe97beb85d803cc.js\"></script>\n\nThe next thing to do is to start experimenting with queries, and presumably with ways to optimise the resulting hits."
  },
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "<a name=\"7\"></a>RevitLookup Bug Fixes",
    "local_header_href": "#a-name7arevitlookup-bug-fixes",
    "chunk_text": "#### <a name=\"7\"></a>RevitLookup Bug Fixes\n\nWhile I am fiddling with q4r4,\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) and \nother Revit API related issues remain as vibrant as ever.\n\nSome new enhancements were added to our irreplaceable Revit BIM database exploration\ntool [RevitLookup](https://github.com/jeremytammik/RevitLookup).\n\nIn the last few weeks, it was significantly restructured to use `Reflection` and reduce code duplication:\n\n- [Using `Reflection` for cross-version compatibility](http://thebuildingcoder.typepad.com/blog/2017/02/revitlookup-using-reflection-for-cross-version-compatibility.html)\n- [Basic clean-up of the new version](http://thebuildingcoder.typepad.com/blog/2017/02/revitlookup-with-reflection-cleanup.html)\n- [Restore access to extensible storage data](http://thebuildingcoder.typepad.com/blog/2017/02/revitlookup-extensible-storage-restored.html#3)\n- [Further enhancements](http://thebuildingcoder.typepad.com/blog/2017/03/revitlookup-enhancements-future-revit-and-other-api-news.html#8)\n\nAlexander Ignatovich, [@CADBIMDeveloper](https://github.com/CADBIMDeveloper), aka Александр Игнатович,\nnow submitted a few new bug fixes in\nhis [pull request #29](https://github.com/jeremytammik/RevitLookup/pull/29/commits):\n\n- Move `CollectorExtElement` field initialization to constructor, use linq extension methods instead of linq syntax\n- Get types only from `AppDomain.CurrentDomain.BaseDirectory`, the Revit.exe directory path. \nI have a dll with a name that contains the substring \"revit\".\nThis library depends on another library in another location.\nI have an `Assembly.Resolve` event subscription to load dependencies correctly.\nIn such case this code fails, because it can't be aware of correct paths to load referenced libraries.\n- Fix bug in getting `Application.Documents` when more than one document is opened.\nThe `Close` method must not be called &ndash; it successfully closes non-active documents and fails to get information about them.\n\nMany thanks to Alexander for these improvements!\n\nI integrated them \ninto [RevitLookup release 2017.0.0.19](https://github.com/jeremytammik/RevitLookup/releases/tag/2017.0.0.19)."
  },
  {
    "original_filename": "1539_q4r4_lookup",
    "header_text": "<a name=\"8\"></a>RevitLookup Icons",
    "local_header_href": "#a-name8arevitlookup-icons",
    "chunk_text": "#### <a name=\"8\"></a>RevitLookup Icons\n\nJust a few hours after Alexander's bug fixes,\nEhsan [@eirannejad](https://github.com/eirannejad) Iran-Nejad chipped in with some further important improvements in\nhis [pull request #30](https://github.com/jeremytammik/RevitLookup/pull/30/commits):\n\n- Added and updated icon package\n    - Added icon for RevitLookup button in Revit UI\n    - Added icon to RevitLookup forms\n    - Revised icons for RevitLookup menu bar\n- Added exception handling\n    - `Path.GetDirectoryName` throws `System.ArgumentException if the assembly `Location` is null.\n\nMany thanks to Ehsan for these improvements!\n\nI integrated them \ninto [RevitLookup release 2017.0.0.20](https://github.com/jeremytammik/RevitLookup/releases/tag/2017.0.0.20).\n\nThe most up-to-date version is always provided in the master branch of \nthe [RevitLookup GitHub repository](https://github.com/jeremytammik/RevitLookup).\n\nIf you would like to access any part of the functionality that was removed when switching to the `Reflection` based approach, please grab it\nfrom [release 2017.0.0.13](https://github.com/jeremytammik/RevitLookup/releases/tag/2017.0.0.13) or earlier.\n\nI am also happy to restore any other code that was removed and that you would like preserved.\nSimply create a pull request for that, explain your need and motivation, and I will gladly merge it back again."
  }
]