[
  {
    "original_filename": "1158_views_displaying_elem",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1158_views_displaying_elem",
    "header_text": "Determine Views Displaying Given Element",
    "local_header_href": "#determine-views-displaying-given-element",
    "chunk_text": "<h3>Determine Views Displaying Given Element</h3><p>I am slowly getting back to normal working mode after the AEC Hackathon last weekend and the neat project that we worked on there, so I finally get around to publishing this post that I started working on last week.</p><p>The only remaining issue is of a physical nature: my feet are still swollen after flying to New York on Friday, sitting and working non-stop at the Hackathon from Saturday morning until Sunday afternoon, standing for a couple of hours in a pub afterwards, and then sitting in the flight back again the same evening and Monday. My veins are getting old, it seems, and need some horizontal time out now and then.</p><p>In the meantime, other topics cropped up as well, including some cases and emails I answered since my return:</p><ul>\n<li><a href=\"#2\">SpatialElement Level property</a></li>\n<li><a href=\"#3\">Export to DWFx, SVG or XML</a></li>\n<li><a href=\"#4\">Add-in benchmarking</a></li>\n<li><a href=\"#5\">NoSQL and top five considerations</a></li>\n<li><a href=\"#6\">Determine views displaying given element</a></li>\n<li><a href=\"#7\">Download</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1158_views_displaying_elem",
    "header_text": "SpatialElement Level Property",
    "local_header_href": "#spatialelement-level-property",
    "chunk_text": "<h4>SpatialElement Level Property</h4><p><strong>Question:</strong> The previous version of the API provided direct access to a Level object directly from a SpatialElement.\nIn the current version this has been made obsolete and replaced by only a LevelId.</p><p>The previous way allowed me to get the information about a Level from a particular SpatialElement that I was working with. Is there any work-around to get Level information from a SpatialElement or is it intended that I acquire the Level through the LevelId I can access from the SpatialElement?</p><p><strong>Answer:</strong> I am not aware of any other method than what you suggest, nor can I imagine that any other method would or even could be more direct and efficient than that.</p><p>You could in fact implement this approach as an\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/getpolygon-extension-methods.html\">\nextension method</a> on\n\nthe Revit 2015 API SpatialElement class, if you prefer to leave your existing code unchanged, e.g.</p><pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">Level</span> Level( <span class=\"blue\">this</span> <span class=\"teal\">SpatialElement</span> a )\n  {\n    <span class=\"teal\">Document</span> doc = a.Document;\n    <span class=\"blue\">return</span> doc.GetElement( a.LevelId );\n  }\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "1158_views_displaying_elem",
    "header_text": "Export to DWFx, SVG or XML",
    "local_header_href": "#export-to-dwfx-svg-or-xml",
    "chunk_text": "<h4>Export to DWFx, SVG or XML</h4><p>I replied to a Revit API discussion thread on\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/Rvit-Plan-View-custom-export-DWFx-or-SVG-etc/m-p/5039904\">\nRevit plan view custom export</a>:</p><p><strong>Question:</strong> I have some questions on DWFx and other graphical export from Revit:</p><ol>\n<li>How does the export to DWFx work?</li>\n<li>Does the process simply export all visible elements on plan view (Geometry, Annotation, etc.), or is there a more\ncomplicated process such as printing preprocessing?</li>\n</ol><p>The reason I'm asking is that I would like to create my own plan view export, for example to SVG or some other XML based format of my own creation, with complete detail information including annotations, etc.</p><p>Do you think that would be possible?</p><p><strong>Answer:</strong> Definitely yes.</p><p>There are a lot of answers to this.</p><p><b>1.</b> How does the export to DWFx work?</p><p>The first answer is simple, and applies to most of the Revit API:</p><p>The Revit API export to DWFx works exactly the same way as the user interface functionality.</p><p>Call the Document.Export method overload taking a DWFXExportOptions argument to exports the current view or a selection of views in DWFX format.</p><p>For examples, please look at the Revit SDK and The Building Coder blog, e.g. searching for\n\n<a href=\"http://lmgtfy.com/?q=building+coder+dwf+export\">building coder dwf export</a>.</p><p><b>2.</b> Does it simply export all visible elements on plan view?</p><p>It exports exactly what you see in the view.\nYou can set up the view to export what you want.\nThis includes annotation and also\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/section-view-geometry.html\">sections</a>.</p><p><b>3.</b> I would like to create my own plan view export, for example to SVG or some other XML based format.</p><p>Here, you are in great luck:</p><p>You can look at my simplified\n\n<a href=\"http://lmgtfy.com/?q=building+coder+room+editor\">\n2D BIM room editor</a> for\n\na very complete example of exporting 2D to SVG.</p><p>It lives on GitHub, in two repositories,\n\n<a href=\"https://github.com/jeremytammik/roomedit\">roomedit</a>, implementing the NoSQL CouchDB HTML and SVG viewer, and\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">RoomEditorApp</a>, implementing the Revit add-in, database upload and real-time BIM update.</p><p>It shows that you can easily not just export to SVG and display a simplified BIM view through server-side scripting-generated HTML, but edit the SVG live in the browser and update your BIM with the results in real-time as well.</p><p>That might well be exactly what you are looking for.</p><p>For a full 3D export of the Revit model to JSON and a live web viewer displaying both graphics and non-graphical element properties, you can look at what we achieved last weekend at the AEC Hackathon in New York:</p><ul>\n<li><a href=\"https://www.hackerleague.org/hackathons/aec-technology-hackathon-2014/hacks/three-dot-js-aec-viewer-model-exporters\">\nProject description</a></li>\n<li><a href=\"https://va3c.github.io\">\nMain project page</a></li>\n<li><a href=\"https://va3c.github.io/viewer\">\nSample viewer</a></li>\n<li><a href=\"https://va3c.github.io/#team\">\nva3c team</a></li>\n<li><a href=\"https://github.com/va3c/RvtVa3c\">\nva3c exporter from Revit by Matt Mason and Jeremy</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/05/aec-hackathon-from-the-midst-of-the-fray.html\">\nLive blog post during the event</a></li>\n</ul><p>We won second prize!   :-)</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1158_views_displaying_elem",
    "header_text": "Revit Add-in Benchmarking",
    "local_header_href": "#revit-add-in-benchmarking",
    "chunk_text": "<h4>Revit Add-in Benchmarking</h4><p><strong>Question:</strong> I am reworking a Revit add-in that I discussed with you last year.</p><p>Before I move further, I wondered if you would like to take a look at it?</p><p>I am having some performance issues that I'm sure are easily fixed.</p><p>I am using SQL and – for the first time – WPF, and loving both of them.</p><p><strong>Answer:</strong> Before I take a look at it, have you benchmarked it in any way whatsoever?</p><p>That should immediately highlight any bottlenecks, and you might improve your performance significantly with a very few tweaks, or alternatively prove that no such tweaks exist, e.g. if the performance issue is caused by Revit and not your add-in.</p><p>Please look at the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/profiling-revit-add-ins-and-roomeditorapp-enhancements.html\">profiling Revit add-ins</a>,\n\nsee what you can achieve using that, and then we can continue talking.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1158_views_displaying_elem",
    "header_text": "NoSQL and Top Five Considerations",
    "local_header_href": "#nosql-and-top-five-considerations",
    "chunk_text": "<h4>NoSQL and Top Five Considerations</h4><p>Continuing with the question above on SQL:\nI cannot say anything specific about SQL, but I do like NoSQL, 'Not only SQL':</p><ul>\n<li><a href=\"http://nosql-database.org\">nosql-database.org</a> (<a href=\"https://en.wikipedia.org/wiki/NoSQL\">Wikipedia</a>)</li>\n<li>Next generation database paradigm</li>\n<li>Non-relational, distributed, open-source, tremendously scalable, huge data</li>\n<li>Mostly schema-free, easy replication support, simple API</li>\n<li>Eventually consistent, BASE (not ACID)</li>\n</ul><p>The\n\n<a href=\"https://en.wikipedia.org/wiki/CAP_theorem\">CAP theorem</a> states\n\nthat a  distributed computer system based on a traditional ACID paradigm such as SQL cannot possibly simultaneously provide all three of the following guarantees:</p><ul>\n<li>Consistency (all nodes see the same data at the same time)</li>\n<li>Availability (a guarantee that every request receives a response about whether it was successful or failed)</li>\n<li>Partition tolerance (the system continues to operate despite arbitrary message loss or failure of part of the system)</li>\n</ul><p>NoSQL relies on new  distributed computing insights such as\n\n<a href=\"https://en.wikipedia.org/wiki/Eventual_consistency\">eventual consistency</a>,\n\nenabling the switch from traditional rigid ACID concepts to BASE database paradigms:\n\n<ul>\n<li>ACID</li>\n<ul>\n<li>Atomicity, Consistency, Isolation, Durability</li>\n<li>Traditional computer science</li>\n<li>Guarantee that database transactions are processed reliably</li>\n</ul>\n<li>BASE </li>\n<ul>\n<li>Basic Availability, Soft-state, Eventual consistency</li>\n<li>Not guaranteed to be in a consistent state at a given moment</li>\n<li>Consistency is guaranteed, eventually</li>\n</ul>\n</ul>\n<p>Have you taken a look at that?</p>\n<p>Here is a whitepaper on the\n\n<a href=\"http://www.mongodb.com/nosql-explained\">top five NoSQL considerations</a>,\n\nincluding some comparison with SQL, provided by MongoDB and only slightly commercially tainted.</p>\n<p>I have not done much with WPF, and nothing at all with SQL in the last years.</p>\n<a name=\"6\"></a>\n<h4>Determine Views Displaying Given Element</h4>\n<p>Several people recently asked about how to\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/Revision-help-which-views-show-this-object/m-p/5029772\">\nretrieve all views displaying a given element</a>.</p>\n<p>I provided my standard answer to the question by looping over all views and using a filtered element collector passing in the view element id of each.</p>\n<p>That primitive approach was enhanced by Colin, who replies:</p>\n<blockquote>\n<p>The solution as Jeremy suggested is certainly possible, BUT in a model with many views, it can take an extremely long time to run.</p>\n<p>The reason for this is, (as far as I can tell), when using a view-specific FilteredElementCollector, Revit effectively opens that view and checks whether the element is visible in the view.</p>\n<p>The result of this is that getting a list of views where an element is present takes the same amount of time as opening every view that is checked.</p>\n<p>That being said, I implemented a method FindAllViewsWhereAllElementsVisible and helper method FindAllViewsThatCanDisplayElements for this (cf. below).</p>\n<p>If you can't tell, I'm a big fan of LINQ... Let me know if you need me to explain anything that's happening here.</p>\n</blockquote>\n<p>Jeremy replies to Colin saying:</p>\n<p>Nice solution!</p>\n<p>I like it!</p>\n<p>You also seem to like extension methods, performance optimisation and the ElementMulticlassFilter.</p>\n<p>So do I.</p>\n<p>I therefore integrated your code into The Building Coder samples and implemented a new external command CmdViewsShowingElements to exercise it.</p>\n<p>While I was at it, I also finally also reorganised the RvtSamples include file BcSamples.txt to generate three groups for The Building Coder samples instead of two to reduce the menu overflow. Previously, the commands were split into two groups A-M and N-Z listing over 50 entries each. The bottom ones were off the bottom of the screen and impossible to pick.\nThe new three groups list a bit over 30 entries each.</p>\n<p>Here is the CmdViewsShowingElements implementation including Colin's two extension methods:</p>\n<pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Linq;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n \n<span class=\"blue\">namespace</span> BuildingCoder\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Revit Document and IEnumerable</span><span class=\"gray\">&lt;Element&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> extension methods.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">ExtensionMethods</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return an enumeration of all views in this</span>\n    <span class=\"gray\">///</span><span class=\"green\"> document that can display elements at all.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">static</span> <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt;\n      FindAllViewsThatCanDisplayElements(\n        <span class=\"blue\">this</span> <span class=\"teal\">Document</span> doc )\n    {\n      <span class=\"teal\">ElementMulticlassFilter</span> filter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementMulticlassFilter</span>(\n          <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; {\n            <span class=\"blue\">typeof</span>( <span class=\"teal\">View3D</span> ),\n            <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewPlan</span> ),\n            <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewSection</span> ) } );\n \n      <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WherePasses( filter )\n        .Cast&lt;<span class=\"teal\">View</span>&gt;()\n        .Where( v =&gt; !v.IsTemplate );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return all views that display </span>\n    <span class=\"gray\">///</span><span class=\"green\"> any of the given elements.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt;\n      FindAllViewsWhereAllElementsVisible(\n        <span class=\"blue\">this</span> <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Element</span>&gt; elements )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == elements )\n      {\n        <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">ArgumentNullException</span>( <span class=\"maroon\">\"elements\"</span> );\n      }\n \n      <span class=\"green\">//if( 0 == elements.Count )</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//  return new List&lt;View&gt;();</span>\n      <span class=\"green\">//}</span>\n \n      <span class=\"teal\">Element</span> e1 = elements.FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;();\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e1 )\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">View</span>&gt;();\n      }\n \n      <span class=\"teal\">Document</span> doc = e1.Document;\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt; relevantViewList\n        = doc.FindAllViewsThatCanDisplayElements();\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ElementId</span>&gt; idsToCheck\n        = ( <span class=\"blue\">from</span> e <span class=\"blue\">in</span> elements <span class=\"blue\">select</span> e.Id );\n \n      <span class=\"blue\">return</span> (\n        <span class=\"blue\">from</span> v <span class=\"blue\">in</span> relevantViewList\n          <span class=\"blue\">let</span> idList\n            = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, v.Id )\n              .WhereElementIsNotElementType()\n              .ToElementIds()\n          <span class=\"blue\">where</span> !idsToCheck.Except( idList ).Any()\n          <span class=\"blue\">select</span> v );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Determine all views displaying </span>\n  <span class=\"gray\">///</span><span class=\"green\"> a given set of elements.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">class</span> <span class=\"teal\">CmdViewsShowingElements</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> revit,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">UIApplication</span> uiapp = revit.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"green\">// Retrieve pre-selected elements.</span>\n \n      <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n        = uidoc.Selection.GetElementIds();\n \n      <span class=\"blue\">if</span>( 0 == ids.Count )\n      {\n        message = <span class=\"maroon\">\"Please pre-select some elements \"</span>\n          + <span class=\"maroon\">\"before launching this command to list \"</span>\n          + <span class=\"maroon\">\"the views displaying them.\"</span>;\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"green\">// Determine views displaying them.</span>\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Element</span>&gt; targets\n        = <span class=\"blue\">from</span> id <span class=\"blue\">in</span> ids <span class=\"blue\">select</span> doc.GetElement( id );\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt; views = targets\n        .FindAllViewsWhereAllElementsVisible();\n \n      <span class=\"green\">// Report results.</span>\n \n      <span class=\"blue\">string</span> names = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        ( <span class=\"blue\">from</span> v <span class=\"blue\">in</span> views <span class=\"blue\">select</span> v.Name ) );\n \n      <span class=\"blue\">int</span> nElems = targets.Count&lt;<span class=\"teal\">Element</span>&gt;();\n \n      <span class=\"blue\">int</span> nViews = names.Count&lt;<span class=\"blue\">char</span>&gt;(\n        c =&gt; <span class=\"maroon\">','</span> == c ) + 1;\n \n      <span class=\"teal\">TaskDialog</span> dlg = <span class=\"blue\">new</span> <span class=\"teal\">TaskDialog</span>( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"{0} element{1} are visible in {2} view{3}\"</span>,\n        nElems, <span class=\"teal\">Util</span>.PluralSuffix( nElems ),\n        nViews, <span class=\"teal\">Util</span>.PluralSuffix( nViews ) ) );\n \n      dlg.MainInstruction = names;\n \n      dlg.Show();\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre>\n<a name=\"7\"></a>\n<h4>Download The Building Coder Samples</h4>\n<p>The complete source code, Visual Studio solution and RvtSamples include file is provided in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples GitHub repository</a>.</p>\n<p>The version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.110.0\">\nrelease 2015.0.110.0</a>.</p>\n</p>"
  },
  {
    "original_filename": "1158_views_displaying_elem",
    "header_text": "Determine Views Displaying Given Element",
    "local_header_href": "#determine-views-displaying-given-element",
    "chunk_text": "<h4>Determine Views Displaying Given Element</h4><p>Several people recently asked about how to\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/Revision-help-which-views-show-this-object/m-p/5029772\">\nretrieve all views displaying a given element</a>.</p><p>I provided my standard answer to the question by looping over all views and using a filtered element collector passing in the view element id of each.</p><p>That primitive approach was enhanced by Colin, who replies:</p><blockquote>\n<p>The solution as Jeremy suggested is certainly possible, BUT in a model with many views, it can take an extremely long time to run.</p>\n<p>The reason for this is, (as far as I can tell), when using a view-specific FilteredElementCollector, Revit effectively opens that view and checks whether the element is visible in the view.</p>\n<p>The result of this is that getting a list of views where an element is present takes the same amount of time as opening every view that is checked.</p>\n<p>That being said, I implemented a method FindAllViewsWhereAllElementsVisible and helper method FindAllViewsThatCanDisplayElements for this (cf. below).</p>\n<p>If you can't tell, I'm a big fan of LINQ... Let me know if you need me to explain anything that's happening here.</p>\n</blockquote><p>Jeremy replies to Colin saying:</p><p>Nice solution!</p><p>I like it!</p><p>You also seem to like extension methods, performance optimisation and the ElementMulticlassFilter.</p><p>So do I.</p><p>I therefore integrated your code into The Building Coder samples and implemented a new external command CmdViewsShowingElements to exercise it.</p><p>While I was at it, I also finally also reorganised the RvtSamples include file BcSamples.txt to generate three groups for The Building Coder samples instead of two to reduce the menu overflow. Previously, the commands were split into two groups A-M and N-Z listing over 50 entries each. The bottom ones were off the bottom of the screen and impossible to pick.\nThe new three groups list a bit over 30 entries each.</p><p>Here is the CmdViewsShowingElements implementation including Colin's two extension methods:</p><pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Linq;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n \n<span class=\"blue\">namespace</span> BuildingCoder\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Revit Document and IEnumerable</span><span class=\"gray\">&lt;Element&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> extension methods.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">ExtensionMethods</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return an enumeration of all views in this</span>\n    <span class=\"gray\">///</span><span class=\"green\"> document that can display elements at all.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">static</span> <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt;\n      FindAllViewsThatCanDisplayElements(\n        <span class=\"blue\">this</span> <span class=\"teal\">Document</span> doc )\n    {\n      <span class=\"teal\">ElementMulticlassFilter</span> filter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementMulticlassFilter</span>(\n          <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; {\n            <span class=\"blue\">typeof</span>( <span class=\"teal\">View3D</span> ),\n            <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewPlan</span> ),\n            <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewSection</span> ) } );\n \n      <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WherePasses( filter )\n        .Cast&lt;<span class=\"teal\">View</span>&gt;()\n        .Where( v =&gt; !v.IsTemplate );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return all views that display </span>\n    <span class=\"gray\">///</span><span class=\"green\"> any of the given elements.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt;\n      FindAllViewsWhereAllElementsVisible(\n        <span class=\"blue\">this</span> <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Element</span>&gt; elements )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == elements )\n      {\n        <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">ArgumentNullException</span>( <span class=\"maroon\">\"elements\"</span> );\n      }\n \n      <span class=\"green\">//if( 0 == elements.Count )</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//  return new List&lt;View&gt;();</span>\n      <span class=\"green\">//}</span>\n \n      <span class=\"teal\">Element</span> e1 = elements.FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;();\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e1 )\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">View</span>&gt;();\n      }\n \n      <span class=\"teal\">Document</span> doc = e1.Document;\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt; relevantViewList\n        = doc.FindAllViewsThatCanDisplayElements();\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ElementId</span>&gt; idsToCheck\n        = ( <span class=\"blue\">from</span> e <span class=\"blue\">in</span> elements <span class=\"blue\">select</span> e.Id );\n \n      <span class=\"blue\">return</span> (\n        <span class=\"blue\">from</span> v <span class=\"blue\">in</span> relevantViewList\n          <span class=\"blue\">let</span> idList\n            = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, v.Id )\n              .WhereElementIsNotElementType()\n              .ToElementIds()\n          <span class=\"blue\">where</span> !idsToCheck.Except( idList ).Any()\n          <span class=\"blue\">select</span> v );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Determine all views displaying </span>\n  <span class=\"gray\">///</span><span class=\"green\"> a given set of elements.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">class</span> <span class=\"teal\">CmdViewsShowingElements</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> revit,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">UIApplication</span> uiapp = revit.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"green\">// Retrieve pre-selected elements.</span>\n \n      <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n        = uidoc.Selection.GetElementIds();\n \n      <span class=\"blue\">if</span>( 0 == ids.Count )\n      {\n        message = <span class=\"maroon\">\"Please pre-select some elements \"</span>\n          + <span class=\"maroon\">\"before launching this command to list \"</span>\n          + <span class=\"maroon\">\"the views displaying them.\"</span>;\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"green\">// Determine views displaying them.</span>\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Element</span>&gt; targets\n        = <span class=\"blue\">from</span> id <span class=\"blue\">in</span> ids <span class=\"blue\">select</span> doc.GetElement( id );\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt; views = targets\n        .FindAllViewsWhereAllElementsVisible();\n \n      <span class=\"green\">// Report results.</span>\n \n      <span class=\"blue\">string</span> names = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        ( <span class=\"blue\">from</span> v <span class=\"blue\">in</span> views <span class=\"blue\">select</span> v.Name ) );\n \n      <span class=\"blue\">int</span> nElems = targets.Count&lt;<span class=\"teal\">Element</span>&gt;();\n \n      <span class=\"blue\">int</span> nViews = names.Count&lt;<span class=\"blue\">char</span>&gt;(\n        c =&gt; <span class=\"maroon\">','</span> == c ) + 1;\n \n      <span class=\"teal\">TaskDialog</span> dlg = <span class=\"blue\">new</span> <span class=\"teal\">TaskDialog</span>( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"{0} element{1} are visible in {2} view{3}\"</span>,\n        nElems, <span class=\"teal\">Util</span>.PluralSuffix( nElems ),\n        nViews, <span class=\"teal\">Util</span>.PluralSuffix( nViews ) ) );\n \n      dlg.MainInstruction = names;\n \n      dlg.Show();\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><a name=\"7\"></a>"
  },
  {
    "original_filename": "1158_views_displaying_elem",
    "header_text": "Download The Building Coder Samples",
    "local_header_href": "#download-the-building-coder-samples",
    "chunk_text": "<h4>Download The Building Coder Samples</h4><p>The complete source code, Visual Studio solution and RvtSamples include file is provided in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples GitHub repository</a>.</p><p>The version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.110.0\">\nrelease 2015.0.110.0</a>.</p>"
  }
]