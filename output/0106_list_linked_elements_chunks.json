[
  {
    "original_filename": "0106_list_linked_elements",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0106_list_linked_elements",
    "header_text": "List Linked Elements",
    "local_header_href": "#list-linked-elements",
    "chunk_text": "<h3>List Linked Elements</h3><p>We already had a look at the issue of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/linked-files.html\">\nlinked files</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/hiding-linked-files.html\">\nhow to hide them</a>.\n\nA frequent question in this context is how to access the elements in linked files.\nThis can be very simple, actually, as we will demonstrate.\nI had a discussion on this with Joel Karr of\n\n<a href=\"http://www.esdesign.com\">\nEnvironmental Systems Design, Inc</a>.\n\nHe is implementing a command to order to monitor and compare the lighting fixtures in an MEP model with the ones defined in a linked in architectural model.\nHe very kindly provided a sample application listing the lighting fixture elements contained in a linked file, as a starting point for implementing a comparison of those with the ones in the current model.\nI rewrote and significantly simplified his application and find that we can achieve a lot of functionality with minimal effort.</p><p>For this purpose we implemented a new external command CmdLinkedFileElements which iterates over all open documents, which includes the linked ones as well, and displays selected properties for all lighting fixture elements in a data grid.</p>"
  },
  {
    "original_filename": "0106_list_linked_elements",
    "header_text": "Displaying element properties",
    "local_header_href": "#displaying-element-properties",
    "chunk_text": "<h4>Displaying element properties</h4><p>We define a class ElementData to manage the properties we wish to display:</p><ul>\n<li>Document, the project containing the element.</li>\n<li>Element, the element name.</li>\n<li>Id, the element id.</li>\n<li>X, Y and Z, the family instance location point coordinates.</li>\n<li>UniqueId, the unique id.</li>\n<li>Folder, the document folder.</li>\n</ul><p>These data items are stored in individual private members.\nWe define a constructor in order to initialise all the members for a given Revit element.\nBy defining public properties for accessing each data item to display, we can save the effort of transferring data manually into the form.\nHere is the class implementation including member data, constructor, and accessors:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">ElementData</span>\n{\n  <span class=\"blue\">string</span> _document;\n  <span class=\"blue\">string</span> _elementName;\n  <span class=\"blue\">int</span> _id;\n  <span class=\"blue\">double</span> _x;\n  <span class=\"blue\">double</span> _y;\n  <span class=\"blue\">double</span> _z;\n  <span class=\"blue\">string</span> _uniqueId;\n  <span class=\"blue\">string</span> _folder;\n \n  <span class=\"blue\">public</span> ElementData(\n    <span class=\"blue\">string</span> path,\n    <span class=\"blue\">string</span> elementName,\n    <span class=\"blue\">int</span> id,\n    <span class=\"blue\">double</span> x,\n    <span class=\"blue\">double</span> y,\n    <span class=\"blue\">double</span> z,\n    <span class=\"blue\">string</span> uniqueId )\n  {\n    <span class=\"blue\">int</span> i = path.LastIndexOf( <span class=\"maroon\">\"\\\\\"</span> );\n    _document = path.Substring( i + 1 );\n    _elementName = elementName;\n    _id = id;\n    _x = x;\n    _y = y;\n    _z = z;\n    _uniqueId = uniqueId;\n    _folder = path.Substring( 0, i );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Document {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _document; }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Element {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _elementName; }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> Id {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _id; }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> X {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> <span class=\"teal\">Util</span>.RealString( _x ); }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Y {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> <span class=\"teal\">Util</span>.RealString( _y ); }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Z {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> <span class=\"teal\">Util</span>.RealString( _z ); }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> UniqueId {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _uniqueId; }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Folder {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _folder; }\n  }\n}\n</pre><p>With these properties defined, displaying the data in the form is handled completely automatically by one single line in the form constructor:</p><pre class=\"code\">\n<span class=\"blue\">public</span> CmdLinkedFileElementsForm(\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementData</span>&gt; a )\n{\n  InitializeComponent();\n  dataGridView1.DataSource = a;\n}\n</pre>"
  },
  {
    "original_filename": "0106_list_linked_elements",
    "header_text": "Collecting element data from linked files",
    "local_header_href": "#collecting-element-data-from-linked-files",
    "chunk_text": "<h4>Collecting element data from linked files</h4><p>We have discussed how to display the element data in a data grid.\nBefore we can display it, we need to retrieve it from the Revit database.\nTo do so, we can simply iterate over all the open documents in the application.\nIf desired, we can implement a filter to eliminate the documents that do not represent a linked file.</p><p>We implement a utility method to filter for elements matching a given category and type.</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; GetElements(\n  <span class=\"teal\">BuiltInCategory</span> bic,\n  <span class=\"teal\">Type</span> elemType,\n  <span class=\"teal\">Application</span> app,\n  <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">CreationFilter</span> cf = app.Create.Filter;\n  <span class=\"teal\">Filter</span> f1 = cf.NewCategoryFilter( bic );\n  <span class=\"teal\">Filter</span> f2 = cf.NewTypeFilter( elemType );\n  <span class=\"teal\">Filter</span> f3 = cf.NewLogicAndFilter( f1, f2 );\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elements = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n  doc.get_Elements( f3, elements );\n  <span class=\"blue\">return</span> elements;\n}\n</pre><p>This can be used both to extract the lighting fixtures to display in the form as well as the linked files instances, if we need those.\nWe will only use it for the lighting fixtures in the real code.\nFor completeness sake, this would be the call to retrieve the link instances:</p><pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; links = GetElements(\n    <span class=\"teal\">BuiltInCategory</span>.OST_RvtLinks,\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">Instance</span> ), app, doc );\n</pre><p>The external command performs the following steps:</p><ul>\n<li>Iterate over the application documents.</li>\n<li>Select all lighting fixtures in each linked document.</li>\n<li>Instantiate and populate an ElementData instance for each fixture.</li>\n<li>Display the form with the data collected.</li>\n</ul><p>Here is the mainline for the command:</p><pre class=\"code\">\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementData</span>&gt; data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementData</span>&gt;();\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">DocumentSet</span> docs = app.Documents;\n\n<span class=\"blue\">foreach</span>( <span class=\"teal\">Document</span> doc <span class=\"blue\">in</span> docs )\n{\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elements = GetElements(\n    <span class=\"teal\">BuiltInCategory</span>.OST_LightingFixtures,\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ), app, doc );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> e <span class=\"blue\">in</span> elements )\n  {\n    <span class=\"blue\">string</span> name = e.Name;\n    <span class=\"teal\">LocationPoint</span> lp = e.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != lp )\n    {\n      <span class=\"teal\">XYZ</span> p = lp.Point;\n      data.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementData</span>( doc.PathName, e.Name,\n        e.Id.Value, p.X, p.Y, p.Z, e.UniqueId ) );\n    }\n  }\n}\n<span class=\"blue\">using</span>( <span class=\"teal\">CmdLinkedFileElementsForm</span> dlg = <span class=\"blue\">new</span> <span class=\"teal\">CmdLinkedFileElementsForm</span>( data ) )\n{\n  dlg.ShowDialog();\n}\n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Cancelled;\n</pre><p>Notice how short and sweet this is?</p><p>Here is an example of the command displaying the data in the sample model provided by Joel:</p><img alt=\"Linked file element data\" src=\"img/LinkedFileElements.png\"/><p>This can obviously easily be adapted to handle other element types or more general selections than just lighting fixtures.\nFor the moment, of course, we are ignoring all the thorny issues to do with transformations and stuff. \nI am looking forward to your comments on this one.</p><p>Here is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10027.zip\">\nversion 1.0.0.27</a>\n\nof the complete Visual Studio solution with the new CmdLinkedFileElements command.\nIt also includes the new command CmdNewRailing which unfortunately does <strong>not</strong> create a new railing instance.\nThe reasons for this can be found in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/list-railing-types.html#comments\">\ndiscussion with Berria</a>.</p>"
  }
]