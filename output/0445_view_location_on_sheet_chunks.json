[
  {
    "original_filename": "0445_view_location_on_sheet",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0445_view_location_on_sheet",
    "header_text": "View Location on Sheet",
    "local_header_href": "#view-location-on-sheet",
    "chunk_text": "<h3>View Location on Sheet</h3><p>I returned from a beautiful little mountain hike to the lake, pass and mountain of\n\n<a href=\"http://en.wikipedia.org/wiki/Piz_Lunghin\">\nPiz Lunghin</a>.</p><center>\n<!-- file:///C:/j/photo/jeremy/2010/2010-09-22_lunghin/p9204277_jeremy_on_lunghin.jpg -->\n<img alt=\"Jeremy on Piz Lunghin\" src=\"file:////j/photo/jeremy/2010/2010-09-22_lunghin/p9204277_jeremy_on_lunghin.jpg\" width=\"200\"/>\n</center><p>One very special aspect of this place is that it is Europe's one and only triple watershed, with rivers flowing all the way to the North Sea, Black Sea and Mediterranean.\nAnother special aspect of my hike was spending the night outside on the mountain, with a wonderful clear sky and the almost full moon in sub-zero temperatures (Celsius).\n\n<p>Returning once again to the Revit API, the SDK sample AllViews collects all views in the model, asks the user to interactively select some of them, and places those on a sheet.\n\n<p>Even so, the exact definition and calculation of the view coordinates and location of the view on the sheet remains somewhat obscure.\nHere are some helful results in this area.\nThey do not answer every possible question in full completeness, so we still have some work to do exploring this area, but hopefully they will be useful already in this incomplete form.\n\n<p>We recently had one\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/viewports-and-sheets.html?cid=6a00e553e1689788330134863f0fed970c#comment-6a00e553e1689788330134863f0fed970c\">\nquestion</a> from\n\nThomas Fink of\n\n<a href=\"http://www.sofistik.de\">\nSOFiSTiK</a> on\n\nthis, and here is another recent question on that topic with some interesting research performed by my colleague Joe Ye.\nI am reproducing the rather long discussion in full, to show that the issue is not trivial and the solution is not yet completely perfect:\n\n<p><strong>Question:</strong> Given a certain view placed on a sheet, I am trying to retrieve the location of the view on the sheet using:\n\n<pre class=\"code\">\n  <span class=\"teal\">Location</span> loc = <span class=\"teal\">Element</span>.Location;\n</pre>\n\nThis is not giving me what I need, which is the UV or XYZ location of the view placed on the sheet.\n\n<p><strong>Answer:</strong> You can use the Element BoundingBox property to retrieve the Max and Min points of a viewport in the sheet.\nFrom these, you can calculate the middle point of the Max and Min point.\nThe middle point is the viewport's centre point in sheet.\n\n<p>Here is some code showing to determine the centre point of a view in a sheet view.\nTo quickly test the solution, it currently uses a hardcoded element id 157165 for the viewport in the sheet view; please change that to suit your model and needs.\nIn addition, please pass in the sheet object as an argument in the call to Element.get_BoundingBox.\nIn this sample, we just set the sheet view to be the active view:\n\n<pre class=\"code\">\n[<span class=\"teal\">TransactionAttribute</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">RegenerationAttribute</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">GetViewPosition</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">ElementId</span> id = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( 157165 );\n    <span class=\"teal\">Element</span> elem = doc.get_Element( id );\n \n    <span class=\"teal\">BoundingBoxXYZ</span> bounding\n      = elem.get_BoundingBox( doc.ActiveView );\n \n    <span class=\"blue\">string</span> sMsg = <span class=\"maroon\">\"The Max and Min points are: \\n\"</span>;\n \n    sMsg += bounding.Max.X.ToString()\n      + <span class=\"maroon\">\", \"</span> + bounding.Max.Y.ToString()\n      + <span class=\"maroon\">\", \"</span> + bounding.Max.Z.ToString() + <span class=\"maroon\">\"\\n\"</span>;\n \n    sMsg += bounding.Min.X.ToString()\n      + <span class=\"maroon\">\", \"</span> + bounding.Min.Y.ToString()\n      + <span class=\"maroon\">\", \"</span> + bounding.Min.Z.ToString() + <span class=\"maroon\">\"\\n\"</span>;\n \n    <span class=\"teal\">XYZ</span> xyzPosition\n      = ( bounding.Max + bounding.Min ) / 2.0;\n \n    sMsg += <span class=\"maroon\">\"view position in current sheet is:\\n\"</span>\n      + xyzPosition.X.ToString()\n      + <span class=\"maroon\">\",\"</span> + xyzPosition.Y.ToString()\n      + <span class=\"maroon\">\",\"</span> + xyzPosition.Z.ToString();\n \n    <span class=\"teal\">MessageBox</span>.Show( sMsg );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p><strong>Response:</strong> I need to programmatically copy a legend view from one sheet to another.\nFor this, I need to get the location of the view from the original sheet and reuse this location when adding new views to the other sheets.\n\n<p>For this purpose, I am using the following code:\n\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewSheet</span> chosenSheet <span class=\"blue\">in</span> SelectedSheets )\n  {\n    <span class=\"teal\">BoundingBoxXYZ</span> xyzLocation\n      = selectedView.get_BoundingBox(\n        m_Doc.ActiveView );\n \n    <span class=\"teal\">XYZ</span> xyzPosition = ( xyzLocation.Max\n      + xyzLocation.Min ) / 2.0;\n \n    <span class=\"blue\">int</span> scale = correspondingView.Scale;\n \n    chosenSheet.AddView( correspondingView,\n      <span class=\"blue\">new</span> <span class=\"teal\">UV</span>( xyzPosition.X, xyzPosition.Y ) );\n  }\n</pre>\n<p>Here I am using the following variables:\n\n<ul>\n<li>chosenSheet is the sheet where the legend will be copied.\n<li>selectedView is the selected Viewport to be copied.\n<li>correspondingView is the view to be copied.\n</li></li></li></ul>\n<p>Unfortunately, the views are not copied to the same location.\n\n<p><strong>Answer:</strong> I created a simple project and added several view sheets.\nI picked the Level 1 viewport and tried to run this code, but this caused an error message saying\u001d 'Added view is already on another sheet and cannot be displayed on two sheets'.\n\n<p><strong>Response:</strong> This is because you are trying to copy a \"plan\" view that is already placed on a sheet and place it on another sheet.\nTry running this code on a legend view placed on a sheet.\n\n<p><strong>Answer:</strong> The point used to insert the view on the view sheet is mapping the (0,0,0) point of the source view.\nWhen you retrieve the centre point coordinates of the viewport, they do not match the (0,0,0) point of the source view.\nSo you need to calculate the source view's original point coordinates in the view sheet from the viewpoint's centre point coordinates.\n\n<p><strong>Response:</strong> I understand that I need to get the centre of the view in the ViewSheet in order to be able to calculate the shift.\nHow can I obtain the coordinates of the centre of the view relative to the view sheet?\n<p><strong>Answer:</strong> The View class has a very important property Outline.\nThe Outline property will return the Max and Min point of the closest bounding box, which includes all elements in this view.\nThe value in this Max and Min the result of the legend view's real Max and Min coordinates subdivided by the view scale.\nFor more information about Outline property, please refer to the Revit SDK developer guide 'Revit 2011 API Developer Guide.pdf'.\n\n<p>Approximately, the outline Max point is mapping the same Max point of the viewport in view sheet.\nSo we can calculate the source view's origin coordinates in the host view sheet using the following code:\n\n<pre class=\"code\">\n  <span class=\"teal\">BoundingBoxXYZ</span> xyzLocation\n    = SelectedView.get_BoundingBox(\n      m_Doc.ActiveView );\n \n  <span class=\"green\">// get the outline max and min </span>\n \n  <span class=\"teal\">XYZ</span> ptMaxOutline = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n    CorrespondingView.Outline.Max.U,\n    CorrespondingView.Outline.Max.V,\n    0 );\n \n  <span class=\"green\">// get the view's origin point's </span>\n  <span class=\"green\">// coordinates in current view sheet. </span>\n \n  <span class=\"teal\">UV</span> ptSourceViewOriginInSheet = <span class=\"blue\">new</span> <span class=\"teal\">UV</span>(\n    xyzLocation.Max.X - ptMaxOutline.X,\n    xyzLocation.Max.Y - ptMaxOutline.Y );\n</pre>\n<p>Here is the complete code of the Execute method:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">SelElementSet</span> selection = uidoc.Selection.Elements;\n    <span class=\"blue\">if</span>( selection.Size == 0 )\n    {\n      MessageBox.Show( <span class=\"maroon\">\"Please Select a view to be copied.\"</span>,\n        <span class=\"maroon\">\"View Coordinates\"</span>, MessageBoxButtons.OK,\n      MessageBoxIcon.Error );\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"green\">// Get all Sheets </span>\n      List AllSheets = GetAllSheets( doc );\n \n      <span class=\"green\">// Get all Views in the model. </span>\n      <span class=\"green\">// Find all views in the document by using category filter </span>\n \n      <span class=\"teal\">ElementCategoryFilter</span> filter\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n          <span class=\"teal\">BuiltInCategory</span>.OST_Views );\n \n      <span class=\"teal\">FilteredElementCollector</span> collector\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n      <span class=\"teal\">IList</span> AllViews = collector.WherePasses( filter )\n        .ToElements();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> SelectedView <span class=\"blue\">in</span> selection )\n      {\n        <span class=\"blue\">if</span>( SelectedView.Category.Name == <span class=\"maroon\">\"Viewports\"</span> )\n        {\n          <span class=\"teal\">String</span> ViewName = SelectedView.get_Parameter(\n            <span class=\"maroon\">\"View Name\"</span> ).AsString();\n \n          <span class=\"teal\">View</span> CorrespondingView = <span class=\"blue\">null</span>;\n \n          <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; AllViews.Count; i++ )\n          {\n            <span class=\"blue\">if</span>( AllViews[i].Name == ViewName )\n            {\n              CorrespondingView = AllViews[i] <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n              <span class=\"blue\">break</span>;\n            }\n          }\n \n          <span class=\"teal\">BoundingBoxXYZ</span> xyzLocation\n            = SelectedView.get_BoundingBox(\n              doc.ActiveView );\n \n          <span class=\"green\">// get the outline max and min </span>\n \n          <span class=\"teal\">XYZ</span> ptMaxOutline = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n            CorrespondingView.Outline.Max.U,\n            CorrespondingView.Outline.Max.V, 0 );\n \n          <span class=\"green\">// get the view's origin point's coordinates </span>\n          <span class=\"green\">// in current view sheet. </span>\n \n          <span class=\"teal\">UV</span> ptSourceViewOriginInSheet = <span class=\"blue\">new</span> <span class=\"teal\">UV</span>(\n            xyzLocation.Max.X - ptMaxOutline.X,\n            xyzLocation.Max.Y - ptMaxOutline.Y );\n \n          <span class=\"green\">// for each chosen to be exported </span>\n          <span class=\"green\">// get the views on it. </span>\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewSheet</span> ChosenSheet <span class=\"blue\">in</span> AllSheets )\n          {\n            ChosenSheet.AddView( CorrespondingView,\n              ptSourceViewOriginInSheet );\n          }\n        }\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    MessageBox.Show( ex.Message );\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n}\n</pre>\n<p><strong>Response:</strong> Using this code, the location of the view on the sheet is still inaccurate.\nIf I use this code to duplicate a view legend placed on a sheet in the same location, the legend view still appears to be shifted while duplicated on the same sheet, as shown in the following figures.\nHere is a view of the entire sheet:</p>\n<center>\n<img alt=\"View locations offset on sheet\" src=\"img/view_loc_on_sheet1.png\"/>\n</center>\n<p>Here is a more detailed picture of the offset between the original and copied views:</p>\n<center>\n<img alt=\"View locations offset\" src=\"img/view_loc_on_sheet2.png\"/>\n</center>\n<p><strong>Answer:</strong> The reason for this might be that the Revit API returns the Viewport BoundingBox property value with an offset to its original outline property.\nThe BoundingBox property is not completely accurate, so the result to calculate the legend view's origin in the sheet view cannot be so either.\nAs far as I can tell, the offset of the Max point of the viewport's BoundingBox is enlarged 0.01 in both X and Y direction.\nWe can take this scaling into account.\n\n<p>Here is some updated code with an adjustment added.\nYou might need to further adjust the offset value according to different situations.\nThe offset value of 0.01 is not obtained from source code, but from my empirical testing results:\n\n<pre class=\"code\">\n<span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> SelectedView <span class=\"blue\">in</span> selection )\n{\n  <span class=\"blue\">if</span>( SelectedView.Category.Name == <span class=\"maroon\">\"Viewports\"</span> )\n  {\n    <span class=\"blue\">string</span> ViewName = SelectedView.get_Parameter(\n      <span class=\"maroon\">\"View Name\"</span> ).AsString();\n \n    <span class=\"teal\">View</span> CorrespondingView = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; AllViews.Count; i++ )\n    {\n      <span class=\"blue\">if</span>( AllViews[i].Name == ViewName )\n      {\n        CorrespondingView = AllViews[i] <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n        <span class=\"blue\">break</span>;\n      }\n    }\n \n    <span class=\"teal\">BoundingBoxXYZ</span> xyzLocation\n      = SelectedView.get_BoundingBox(\n        doc.ActiveView );\n \n    <span class=\"green\">// get the outline max and min,</span>\n    <span class=\"green\">// offset in each direction of max point of </span>\n    <span class=\"green\">// bounding box than the outline box.</span>\n \n    <span class=\"blue\">double</span> dMaxOffset = 0.01; \n    <span class=\"teal\">XYZ</span> ptMaxOutline = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n      CorrespondingView.Outline.Max.U,\n      CorrespondingView.Outline.Max.V, 0 );\n \n    <span class=\"teal\">UV</span> ptSourceViewOriginInSheet = <span class=\"blue\">new</span> <span class=\"teal\">UV</span>(\n      xyzLocation.Max.X - dMaxOffset - ptMaxOutline.X,\n      xyzLocation.Max.Y - dMaxOffset - ptMaxOutline.Y );\n \n    <span class=\"green\">// for each chosen to be exported get the views on it</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewSheet</span> ChosenSheet <span class=\"blue\">in</span> AllSheets )\n    {\n      ChosenSheet.AddView( CorrespondingView,\n        ptSourceViewOriginInSheet );\n    }\n  }\n}\n</pre>\n<p>Thank you very much, Joe, for this thorough exploration!\n\n<p>Here is another quick question and answer that might be of use in this context:\n\n<h4>Centre Point of View</h4>\n<p><strong>Question:</strong> I need a way to get the XYZ of the centre of a view and the XYZ of the centre of a sheet. Can I achieve this using one of the Outline, CropBox or BoundingBox properties?\n\n<p><strong>Answer:</strong> It depends on what exactly you mean by 'centre of view'.\nI can imagine that it might be any one of the following:\n\n<ul>\n<li>The visible centre of a view:\nIf we pan the view, the centre coordinates change.\nThere is currently no API exposed to get the visible centre of a view, and we do have an open wish list item to obtain this information.\n<li>The centre point of the crop box:\nWe can retrieve the BoundingBoxXYZ of the view through the CropBox property.\nThen the centre can be determined by Max and Min of the crop box.\n<li>The coordinate centre:\nthe coordinate centre point is returned by the View.Origin property.\n</li></li></li></ul>\n<p>For an example of defining a completely different set of view coordinates, we also once looked at\n\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/crop-3d-view-to-room.html\">\ncropping a 3D view to a specific element</a>.\n\n<!--\n\nFrom: Saikat Bhattacharya\nSent: Thursday, September 23, 2010 6:03 AM\nSubject: coordinates and dim when printing using Visible portion of window\n\nHi Harry and Phil:\n\nAn ADN partner wants to find out if, using the API, we can extract the coordinates, dimensions and zoom factor values of the visible portion of a current view/sheet when we select the *Visible portion of current window* in the print dialog. My initial search tells me that it might not be possible. It seems only the Autodesk.Revit.DB.PrintRange is controlling the print range and internally the coordinates and dimension are being passed on (and not exposed through the print manager).\n\nThanks\nSaikat\n\nFrom: Harry Mattison\nSent: Thursday, September 23, 2010 12:35\n\nHi Saikat,\n\nThat is not possible. Here are a few existing requests on this subject, though you may want to file a new one for anything in your issue that they don't include.\n\nHarry\n\nSPR #169494 [API Request: get the center point coordinates of view]\nSPR #163958 [Get the location of ViewPort in ViewSheet by API]\nSPR #145414 [API request: The API to Get and Set the Zoom factor for view is needed]\n\nHallo Jeremy,\n\njetzt hatte ich endlich die Zeit mich wieder mit dem Problem zu beschäftigen. Nachdem ich Deinen Code auf meinem deutschen Revit zum Laufen gebracht habe kann ich sagen, dass er mir sehr weiter geholfen hat. Ich weiss nun, wie wir unseren Export von Revit Plänen nach SOFiCAD organisieren werden. Die DWG-Export-Funktion in Revit reicht nämlich nicht aus, um meine Vorstellungen zu realisieren. (Aber das war ja vor 23 Jahren mit Autocad auch nicht anders)\n\nVielen Dank und sorry wegen der langen Sendepause.\n\nMit freundlichen Grüßen - with kind regards\n\nThomas Fink\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0445_view_location_on_sheet",
    "header_text": "Centre Point of View",
    "local_header_href": "#centre-point-of-view",
    "chunk_text": "<h4>Centre Point of View</h4><p><strong>Question:</strong> I need a way to get the XYZ of the centre of a view and the XYZ of the centre of a sheet. Can I achieve this using one of the Outline, CropBox or BoundingBox properties?\n\n<p><strong>Answer:</strong> It depends on what exactly you mean by 'centre of view'.\nI can imagine that it might be any one of the following:\n\n<ul>\n<li>The visible centre of a view:\nIf we pan the view, the centre coordinates change.\nThere is currently no API exposed to get the visible centre of a view, and we do have an open wish list item to obtain this information.\n<li>The centre point of the crop box:\nWe can retrieve the BoundingBoxXYZ of the view through the CropBox property.\nThen the centre can be determined by Max and Min of the crop box.\n<li>The coordinate centre:\nthe coordinate centre point is returned by the View.Origin property.\n</li></li></li></ul>\n<p>For an example of defining a completely different set of view coordinates, we also once looked at\n\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/crop-3d-view-to-room.html\">\ncropping a 3D view to a specific element</a>.\n\n<!--\n\nFrom: Saikat Bhattacharya\nSent: Thursday, September 23, 2010 6:03 AM\nSubject: coordinates and dim when printing using Visible portion of window\n\nHi Harry and Phil:\n\nAn ADN partner wants to find out if, using the API, we can extract the coordinates, dimensions and zoom factor values of the visible portion of a current view/sheet when we select the *Visible portion of current window* in the print dialog. My initial search tells me that it might not be possible. It seems only the Autodesk.Revit.DB.PrintRange is controlling the print range and internally the coordinates and dimension are being passed on (and not exposed through the print manager).\n\nThanks\nSaikat\n\nFrom: Harry Mattison\nSent: Thursday, September 23, 2010 12:35\n\nHi Saikat,\n\nThat is not possible. Here are a few existing requests on this subject, though you may want to file a new one for anything in your issue that they don't include.\n\nHarry\n\nSPR #169494 [API Request: get the center point coordinates of view]\nSPR #163958 [Get the location of ViewPort in ViewSheet by API]\nSPR #145414 [API request: The API to Get and Set the Zoom factor for view is needed]\n\nHallo Jeremy,\n\njetzt hatte ich endlich die Zeit mich wieder mit dem Problem zu beschäftigen. Nachdem ich Deinen Code auf meinem deutschen Revit zum Laufen gebracht habe kann ich sagen, dass er mir sehr weiter geholfen hat. Ich weiss nun, wie wir unseren Export von Revit Plänen nach SOFiCAD organisieren werden. Die DWG-Export-Funktion in Revit reicht nämlich nicht aus, um meine Vorstellungen zu realisieren. (Aber das war ja vor 23 Jahren mit Autocad auch nicht anders)\n\nVielen Dank und sorry wegen der langen Sendepause.\n\nMit freundlichen Grüßen - with kind regards\n\nThomas Fink\n\n-->\n</p></p></p>"
  }
]