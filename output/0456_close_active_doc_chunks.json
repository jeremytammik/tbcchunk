[
  {
    "original_filename": "0456_close_active_doc",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0456_close_active_doc",
    "header_text": "Closing the Active Document and Why Not To",
    "local_header_href": "#closing-the-active-document-and-why-not-to",
    "chunk_text": "<h3>Closing the Active Document and Why Not To</h3><p>Here is a question raised and solved by René Gerlach of\n\n<a href=\"http://www.cideon-software.com\">\nCIDEON Software GmbH</a> in\n\ncollaboration with Joe Ye, and an explanation by Arnošt Löbel explaining the associated dangers:\n\n<p><strong>Question:</strong> The documentation says that the overloads of the Document.Close method cannot close the active document. \nHow can this be handled anyway? \nI really do want to programmatically close the active document.\n\n<p><strong>Answer:</strong> Revit does not currently expose any API to close the active document programmatically.\n\n<p>I think an alternative possible method might be to send a Windows message to Revit to mimic the operation: click the big 'R' button and then select the 'Close' menu item.\n\n<p>We discussed some related issues in the past, e.g. sending messages to Revit, determining its window handle, and working with modeless dialogues:\n\n<ul>\n<!-- 051 --><li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/driving-revit-from-outside.html\">Driving Revit from outside</a>\n<!-- 088 --><li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/revit-window-handle-and-modeless-dialogues.html\">Revit window handle and modeless dialogues</a>\n<!-- 229 --><li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/dismiss-dialogue-using-windows-api.html\">Dialogue clicker, also sends Windows messages</a>\n<!-- 233 --><li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/modeless-pressure-drop-tool.html\">Modeless pressure drop tool</a>\n<!-- 260 --><li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/au-and-automated-testing.html\">Automated testing and an overview of previous automation solutions</a>\n<!-- 400 --><li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">Revit parent window</a>\n<!-- 407 --><li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/modeless-loose-connectors.html\">Modeless loose connectors</a>\n</li></li></li></li></li></li></li></ul>\n<p>Please be aware that sending keystrokes to Revit in this way is not part of the Revit API and is not officially supported by Autodesk.\nIt is actually working around some safeguards built into the Revit API framework, so please note the \n\n<a href=\"#3\">\ndisclaimer</a> below.\n\nThe discussion below also explains why \n\n<a href=\"#2\">\nthese kinds of workarounds are strongly discouraged</a>.\n\n<p>But first, here is the workaround that we later on so strongly discourage:\n\n<p><strong>Response:</strong> I initially tried to simply call the SendWait method to send a Ctrl + F4 keystroke to Revit as you suggest from within the external command implementation Execute method, but without any success:\n\n<pre class=\"code\">\n  <span class=\"teal\">SendKeys</span>.SendWait( <span class=\"maroon\">\"^{F4}\"</span> );\n</pre>\n<p>Ctrl + F4 is one possible keyboard shortcut to close the current document.\n\n<p>Since this simple attempt did not work, I next tried using it in a separate thread.\nThe threaded solution works fine. \n\n<p>Here is the full source code of a new Building Coder sample command CmdCloseDocument based on René's solution:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdCloseDocument</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">Document</span> pDoc = commandData.Application\n      .ActiveUIDocument.Document;\n \n    <span class=\"teal\">ThreadPool</span>.QueueUserWorkItem( \n      <span class=\"blue\">new</span> <span class=\"teal\">WaitCallback</span>( CloseDocProc ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> CloseDocProc( <span class=\"blue\">object</span> stateInfo )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// maybe we need some checks for the right </span>\n      <span class=\"green\">// document, but this is a simple sample...</span>\n \n      <span class=\"teal\">SendKeys</span>.SendWait( <span class=\"maroon\">\"^{F4}\"</span> );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">Util</span>.ErrorMsg( ex.Message );\n    }\n  }\n}\n</pre>\n<p>Launching this command closes the current document, just as desired.\nIf it is the only open document, you end up in the Revit project overview screen.\n\n<p>Although this works well in our tests so far to close the activate document, we don't know whether this approach can be used to send shortcut keys to trigger other commands as well.\n\n<p>Many thanks to Joe and above all to René for this solution.\n\n<p>Here is \n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_76.zip -->\n<a href=\"zip/bc_11_76.zip\">\nversion 2011.0.76.0</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution with the new command.\n\n<!--\nJoe also published this on the members-only ADN web site as technical solution \n\n<a href=\"http://adn.autodesk.com/adn/servlet/devnote?siteID=4814862&id=15760284&linkID=4901650\">\nJY20100928</a> [How to close the activate document via API].\n-->\n<a name=\"2\"></a>\n<h4>Windows Message Workarounds Discouraged</h4>\n<p>Even if this method worked in Revit 2010...\nNo cheating allowed...\nWe just discussed a similar issue about sending a shortcut trying to launch a different Revit command and had less luck with that.\nA workaround to launch the command by sending a Windows message worked fine in Revit 2010 but no longer does so in Revit 2011.\n\n<p>This seems to be a tricky issue.  \nAdding or calling Revit native commands in the Add-Ins tab is not a supported scenario using the current Revit API.  \n\n\n<!--\n<p>If you can provide me a minimum, non confidential sample project code (possibly with 2010 and 2011, since the code changed), I will ask my team to take a look at it  to see if there is something they can do about it.  And if not, possibly log a change request so that at least it will be considered to work in 2012.  \n\n<p>Here is the code that works in 2010 but not in 2011:\n\n<pre>\nPublic Function Execute(ByVal commandData As ExternalCommandData, ByRef message As String, ByVal elements As ElementSet) As IExternalCommand.Result Implements IExternalCommand.Execute\n        Try            \n            SendKeys.SendWait(\"FMB\") ' FMB is a keyboard shortcut of the Area Boundary Line native command                      \n        Catch ex As Exception\n            FMUtil.logger.WriteLog(\"AreaBoundaryLineCommand.Execute.Exception: \" & ex.ToString(), FMS.Logging.LoggingNet2.LogMode.Error)\n            MessageBox.Show(FMConstants.CONTACT_FM_SUPPORT_MESSAGE)\n            Return IExternalCommand.Result.Cancelled\n        End Try\n        Return IExternalCommand.Result.Succeeded\n      End Function\n</pre>\n\n<p>And define keyboard shortcuts for two native commands 'Area' and 'Area Boundary Line' in the Revit 2011 from View tab à User Interface à Keyboard Shorcuts\n-->\n<p>In spite of all our efforts, we have not been able to port some code that worked in Revit 2010 to Revit 2011.\nWe used to send the shortcut string in a different thread, just as described above, but this still does not activate the Revit command.\nAs we saw above, we can send the Ctrl + F4 shortcut to close the active document, but sending a standard Revit keyboard shortcut  to launch a Revit command fails.\n\n<!-- \n\nFMB \nthe area boundary line command \ncall the AreaBoundaryLine command from an external command \n\n-->\n<p>Here is an excerpt from a discussion with the development team about this topic and possible workarounds, answered by Arnošt Löbel:\n\n<p><strong>Question:</strong> Before giving up completely on solving this issue, I would like to hear your comments on it:\n\n<p>Could you think of any other possible things to try to make a shortcut used from an external command successfully launch a built-in Revit command? \nWe tried to achieve this by passing a keyboard shortcut through a Windows message, but it did not display the context tab.   \n\n<p>The same approach worked fine in Revit 2010.  \n\n<p>We are aware that this is not an officially supported usage scenario.  \n\n<p><strong>Answer:</strong> From my point of view, all the attempts mentioned are very dangerous indeed. \nI would definitely not recommend building a commercial solution based on such approach.\nWe do not claim and never have claimed to support sending shortcuts (or any other commands) to the main Revit window and I do not think we should do that in the future. \nIt is a wrong approach in my opinion. \nWhat we want to do and what we will do is to implement 'the right way' to provide the features our users need. \nIf you need to use the area command, we will look into implementing it and exposing it in the Revit API. \n\n<p>The claims that something hacky 'worked' in 2010 but does not work anymore in 2011, or vice versa, are all irrelevant. \nNaturally, a lot of things can be achieved with the .NET or Windows API, but the Revit API does not support any of that for good reasons.\n\n<p>By the way, closing the active document from an external command using Windows messages as described above is a very nice way to crash Revit, eventually. \nIt bypasses the transaction protection we have implemented in the external command framework, as well as the protection we have in event framework.\n\n<p>It is one thing if an individual somewhere wants to do something experimental in his or her company only, for personal use, so to speak. \nAnother thing altogether would be if a developer builds an application based on such a technique and sells it as part of a solution. \nThe major problem is that the solution may work sometimes but not at other times. \nIt is really hard to tell and depends on various factors, such as what other external applications might also be installed on the system.\nWhen we say that we do not support it, it is only a half the fact; the truth is that we do not even have a safety features in place against tricks like that, therefore anything could happen from just crashing Revit to corrupting document(s).\n\n<p>I am rather surprised that we do not hear about crashes and problems caused by these keystroke messages more often (or maybe we do, but don't know what caused them).\n\n<!-- <p>That is my opinion. Scott's opinion may be different. -->\n<p><strong>Question:</strong> Yes, I completely agree with you.   \nSomething similar to the AutoCAD API method sendCommandToExecute in the Revit API would be nice.  \nAnd in this case, allowing customization of ribbon in UI might eliminate the need for this in the first place.  \n\n<p>Thank you for strongly confirming that this approach is not supported.\nThese various attempts often help make us aware of real developer needs, though.\n\n<p><strong>Answer:</strong> I totally agree with you. \nWe want to hear about users' and developers' needs and we want to make them happy. \nUnfortunately, the Revit API users often feel like they do not need to tell us about their requirements because they can 'implement' it 'easily' themselves. \nWhile we do encourage out users to experiment, any experimenting has limits.\n\n<p>I do not think I would like to even see anything similar to sendCommandToExecute in the Revit API. \nWe would need  a framework to support this workflow and I personally do not think it is necessary. \nThe goal is to implement the native Revit UI itself (with all its commands) simply utilizing the internal Revit API, and to also expose that as our public API. \nThat way, API clients can do whatever our UI does and do not need to use these dangerous and unnatural workarounds.\n\n<p>Many thanks to Arnošt for this clear and supportive answer!\n\n<a name=\"3\"></a>\n<h4>Disclaimer</h4>\n<p>The Windows message approach described above is a risky workaround which you might resort to if you are in desperate need.\nPlease be aware that this is not an officially supported usage by Autodesk.  \nIt is not guaranteed to work under any conditions or in any past, present or future releases of Revit whatsoever. \nIf you use this, you are doing so at your own risk. \nAutodesk hopes to expose an appropriate API for this functionality in future.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0456_close_active_doc",
    "header_text": "Windows Message Workarounds Discouraged",
    "local_header_href": "#windows-message-workarounds-discouraged",
    "chunk_text": "<h4>Windows Message Workarounds Discouraged</h4><p>Even if this method worked in Revit 2010...\nNo cheating allowed...\nWe just discussed a similar issue about sending a shortcut trying to launch a different Revit command and had less luck with that.\nA workaround to launch the command by sending a Windows message worked fine in Revit 2010 but no longer does so in Revit 2011.\n\n<p>This seems to be a tricky issue.  \nAdding or calling Revit native commands in the Add-Ins tab is not a supported scenario using the current Revit API.  \n\n\n<!--\n<p>If you can provide me a minimum, non confidential sample project code (possibly with 2010 and 2011, since the code changed), I will ask my team to take a look at it  to see if there is something they can do about it.  And if not, possibly log a change request so that at least it will be considered to work in 2012.  \n\n<p>Here is the code that works in 2010 but not in 2011:\n\n<pre>\nPublic Function Execute(ByVal commandData As ExternalCommandData, ByRef message As String, ByVal elements As ElementSet) As IExternalCommand.Result Implements IExternalCommand.Execute\n        Try            \n            SendKeys.SendWait(\"FMB\") ' FMB is a keyboard shortcut of the Area Boundary Line native command                      \n        Catch ex As Exception\n            FMUtil.logger.WriteLog(\"AreaBoundaryLineCommand.Execute.Exception: \" & ex.ToString(), FMS.Logging.LoggingNet2.LogMode.Error)\n            MessageBox.Show(FMConstants.CONTACT_FM_SUPPORT_MESSAGE)\n            Return IExternalCommand.Result.Cancelled\n        End Try\n        Return IExternalCommand.Result.Succeeded\n      End Function\n</pre>\n\n<p>And define keyboard shortcuts for two native commands 'Area' and 'Area Boundary Line' in the Revit 2011 from View tab à User Interface à Keyboard Shorcuts\n-->\n<p>In spite of all our efforts, we have not been able to port some code that worked in Revit 2010 to Revit 2011.\nWe used to send the shortcut string in a different thread, just as described above, but this still does not activate the Revit command.\nAs we saw above, we can send the Ctrl + F4 shortcut to close the active document, but sending a standard Revit keyboard shortcut  to launch a Revit command fails.\n\n<!-- \n\nFMB \nthe area boundary line command \ncall the AreaBoundaryLine command from an external command \n\n-->\n<p>Here is an excerpt from a discussion with the development team about this topic and possible workarounds, answered by Arnošt Löbel:\n\n<p><strong>Question:</strong> Before giving up completely on solving this issue, I would like to hear your comments on it:\n\n<p>Could you think of any other possible things to try to make a shortcut used from an external command successfully launch a built-in Revit command? \nWe tried to achieve this by passing a keyboard shortcut through a Windows message, but it did not display the context tab.   \n\n<p>The same approach worked fine in Revit 2010.  \n\n<p>We are aware that this is not an officially supported usage scenario.  \n\n<p><strong>Answer:</strong> From my point of view, all the attempts mentioned are very dangerous indeed. \nI would definitely not recommend building a commercial solution based on such approach.\nWe do not claim and never have claimed to support sending shortcuts (or any other commands) to the main Revit window and I do not think we should do that in the future. \nIt is a wrong approach in my opinion. \nWhat we want to do and what we will do is to implement 'the right way' to provide the features our users need. \nIf you need to use the area command, we will look into implementing it and exposing it in the Revit API. \n\n<p>The claims that something hacky 'worked' in 2010 but does not work anymore in 2011, or vice versa, are all irrelevant. \nNaturally, a lot of things can be achieved with the .NET or Windows API, but the Revit API does not support any of that for good reasons.\n\n<p>By the way, closing the active document from an external command using Windows messages as described above is a very nice way to crash Revit, eventually. \nIt bypasses the transaction protection we have implemented in the external command framework, as well as the protection we have in event framework.\n\n<p>It is one thing if an individual somewhere wants to do something experimental in his or her company only, for personal use, so to speak. \nAnother thing altogether would be if a developer builds an application based on such a technique and sells it as part of a solution. \nThe major problem is that the solution may work sometimes but not at other times. \nIt is really hard to tell and depends on various factors, such as what other external applications might also be installed on the system.\nWhen we say that we do not support it, it is only a half the fact; the truth is that we do not even have a safety features in place against tricks like that, therefore anything could happen from just crashing Revit to corrupting document(s).\n\n<p>I am rather surprised that we do not hear about crashes and problems caused by these keystroke messages more often (or maybe we do, but don't know what caused them).\n\n<!-- <p>That is my opinion. Scott's opinion may be different. -->\n<p><strong>Question:</strong> Yes, I completely agree with you.   \nSomething similar to the AutoCAD API method sendCommandToExecute in the Revit API would be nice.  \nAnd in this case, allowing customization of ribbon in UI might eliminate the need for this in the first place.  \n\n<p>Thank you for strongly confirming that this approach is not supported.\nThese various attempts often help make us aware of real developer needs, though.\n\n<p><strong>Answer:</strong> I totally agree with you. \nWe want to hear about users' and developers' needs and we want to make them happy. \nUnfortunately, the Revit API users often feel like they do not need to tell us about their requirements because they can 'implement' it 'easily' themselves. \nWhile we do encourage out users to experiment, any experimenting has limits.\n\n<p>I do not think I would like to even see anything similar to sendCommandToExecute in the Revit API. \nWe would need  a framework to support this workflow and I personally do not think it is necessary. \nThe goal is to implement the native Revit UI itself (with all its commands) simply utilizing the internal Revit API, and to also expose that as our public API. \nThat way, API clients can do whatever our UI does and do not need to use these dangerous and unnatural workarounds.\n\n<p>Many thanks to Arnošt for this clear and supportive answer!\n\n<a name=\"3\"></a>\n<h4>Disclaimer</h4>\n<p>The Windows message approach described above is a risky workaround which you might resort to if you are in desperate need.\nPlease be aware that this is not an officially supported usage by Autodesk.  \nIt is not guaranteed to work under any conditions or in any past, present or future releases of Revit whatsoever. \nIf you use this, you are doing so at your own risk. \nAutodesk hopes to expose an appropriate API for this functionality in future.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0456_close_active_doc",
    "header_text": "Disclaimer",
    "local_header_href": "#disclaimer",
    "chunk_text": "<h4>Disclaimer</h4><p>The Windows message approach described above is a risky workaround which you might resort to if you are in desperate need.\nPlease be aware that this is not an officially supported usage by Autodesk.  \nIt is not guaranteed to work under any conditions or in any past, present or future releases of Revit whatsoever. \nIf you use this, you are doing so at your own risk. \nAutodesk hopes to expose an appropriate API for this functionality in future.\n</p>"
  }
]