[
  {
    "original_filename": "0392_export_xml",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0392_export_xml",
    "header_text": "Export Data to XML",
    "local_header_href": "#export-data-to-xml",
    "chunk_text": "<h3>Export Data to XML</h3><p>Here is another issue of general interest and that arose during the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/devlab-and-birthday.html\">\nDevLab in Waltham</a> last week:\n\n<p><strong>Question:</strong> How can I export some Revit model data to an XML file, for instance certain sheet properties? \n\n<p><strong>Answer:</strong> That is actually very easy.\nAll you need to do is:\n\n<ul>\n<li>Collect the Revit elements of interest, for instance all sheets.\n<li>Extract and save the data of interest from them, for instance the sheet number.\n<li>Iterate over the data collection and export it to XML.\n</li></li></li></ul>\n<p>You could of course also skip saving the data in an intermediate container and export it to an external file directly.\nAdding the intermediate step might be useful, for instance to sort the data items or add other processing.\n\n<p>Exporting to XML is easy, because the .NET framework includes lots of XML formatting functionality.\nIt would also be easy to generate your own XML output file by hand, though.\n \n<p>Here is a super simple little ViewSheet data container to use for the intermediate storage:\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">SheetData</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsPlaceholder { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SheetNumber { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"blue\">public</span> SheetData( <span class=\"teal\">ViewSheet</span> v )\n  {\n    IsPlaceholder = v.IsPlaceholder;\n    Name = v.Name;\n    SheetNumber = v.SheetNumber;\n  }\n}\n</pre>\n<p>Obviously this data holder is rather overly simplistic, but you can easily add other items of interest to you to it.\n\n<p>I implemented a new Building Coder sample command which performs the steps outlined above making use of this data container class:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdSheetData</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"green\">// retrieve all sheets</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> a\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n    a.OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Sheets );\n    a.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewSheet</span> ) );\n \n    <span class=\"green\">// create a collection of all relevant data</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">SheetData</span>&gt; data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">SheetData</span>&gt;();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewSheet</span> v <span class=\"blue\">in</span> a )\n    {\n      <span class=\"green\">// create some data for each sheet and add </span>\n      <span class=\"green\">// to some serializable collection called Data</span>\n      <span class=\"teal\">SheetData</span> item = <span class=\"blue\">new</span> <span class=\"teal\">SheetData</span>( v );\n      data.Add( item );\n    }\n \n    <span class=\"green\">// write out data collection to xml</span>\n \n    <span class=\"teal\">XmlTextWriter</span> w = <span class=\"blue\">new</span> <span class=\"teal\">XmlTextWriter</span>( \n      <span class=\"maroon\">\"C:/SheetData.xml\"</span>, <span class=\"blue\">null</span> );\n \n    w.Formatting = <span class=\"teal\">Formatting</span>.Indented;\n    w.WriteStartDocument();\n    w.WriteComment( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\" SheetData from {0} on {1} by Jeremy \"</span>,\n      doc.PathName, <span class=\"teal\">DateTime</span>.Now ) );\n \n    w.WriteStartElement( <span class=\"maroon\">\"ViewSheets\"</span> );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">SheetData</span> item <span class=\"blue\">in</span> data )\n    {\n      w.WriteStartElement( <span class=\"maroon\">\"ViewSheet\"</span> );\n \n      w.WriteElementString( <span class=\"maroon\">\"IsPlaceholder\"</span>, \n        item.IsPlaceholder.ToString() );\n \n      w.WriteElementString( <span class=\"maroon\">\"Name\"</span>, item.Name );\n \n      w.WriteElementString( <span class=\"maroon\">\"SheetNumber\"</span>, \n        item.SheetNumber );\n \n      w.WriteEndElement();\n    }\n    w.WriteEndElement();\n    w.WriteEndDocument();\n    w.Close();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>Here is the XML file resulting from running this command in a simple Revit model:\n\n<pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;!--</span><span class=\"green\"> SheetData from C:\\tmp\\sheets_and_views.rvt </span>\n<span class=\"green\">     on 2010-06-12 18:16:48 by Jeremy </span><span class=\"blue\">--&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">ViewSheets</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">ViewSheet</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">IsPlaceholder</span><span class=\"blue\">&gt;</span>False<span class=\"blue\">&lt;/</span><span class=\"maroon\">IsPlaceholder</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>Unnamed<span class=\"blue\">&lt;/</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">SheetNumber</span><span class=\"blue\">&gt;</span>A101<span class=\"blue\">&lt;/</span><span class=\"maroon\">SheetNumber</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">ViewSheet</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">ViewSheet</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">IsPlaceholder</span><span class=\"blue\">&gt;</span>False<span class=\"blue\">&lt;/</span><span class=\"maroon\">IsPlaceholder</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>Unnamed<span class=\"blue\">&lt;/</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">SheetNumber</span><span class=\"blue\">&gt;</span>A102<span class=\"blue\">&lt;/</span><span class=\"maroon\">SheetNumber</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">ViewSheet</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">ViewSheet</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">IsPlaceholder</span><span class=\"blue\">&gt;</span>False<span class=\"blue\">&lt;/</span><span class=\"maroon\">IsPlaceholder</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>Unnamed<span class=\"blue\">&lt;/</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">SheetNumber</span><span class=\"blue\">&gt;</span>A103<span class=\"blue\">&lt;/</span><span class=\"maroon\">SheetNumber</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">ViewSheet</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">ViewSheet</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">IsPlaceholder</span><span class=\"blue\">&gt;</span>False<span class=\"blue\">&lt;/</span><span class=\"maroon\">IsPlaceholder</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>Unnamed<span class=\"blue\">&lt;/</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">SheetNumber</span><span class=\"blue\">&gt;</span>A104<span class=\"blue\">&lt;/</span><span class=\"maroon\">SheetNumber</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">ViewSheet</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">ViewSheets</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>I initially created this as a stand-alone application, and here is the add-in manifest file, source code, and Visual Studio solution for that, compressed in the archive file \n\n<a href=\"zip/SheetData.zip\">\nSheetData.zip</a>.\n\n<p>As said, since it seems useful to keep track of this simple XML exporting functionality for future use as well, I also added the command to The Building Coder samples.\nHere is\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_72.zip -->\n<a href=\"zip/bc_11_72.zip\">\nversion 2011.0.72.0</a>\n\nof the complete source code and Visual Studio solution including the new command.\nSince I use a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/loading-the-building-coder-samples.html\">\nRvtSamples include file</a>\n\nBcSamples.txt to load The Building Coder samples, included in the archive file, I provide no separate add-in manifest files for these commands.\n</p></p></p></p></p></p></p></p></p></p></p>"
  }
]