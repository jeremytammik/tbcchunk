[
  {
    "original_filename": "0567_extensible_storage",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0567_extensible_storage",
    "header_text": "Extensible Storage",
    "local_header_href": "#extensible-storage",
    "chunk_text": "<h3>Extensible Storage</h3><p>I mentioned the main new features of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/revit-2012-api-features.html\">\nRevit 2012 API</a> and\n\nalso pointed out that many important developer \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/many-issues-resolved.html\">\nwishes have been resolved</a>.\n\nHere is another very fundamental and longstanding wish that has been addressed, more completely than anyone might have expected:\n\n<p><strong>Question:</strong> How can I store my custom application data inside the Revit file using the Revit API?\n\n<p><strong>Answer:</strong> One possibility is to use a shared parameter. This is a slightly convoluted operation and involves setting up the shared parameter text file appropriately. You have the option of whether a shared parameter should or should not be visible to the user. The whole procedure is demonstrated by the FireRating SDK sample and discussed in numerous blog posts:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/model-group-shared-parameter.html\">Creating and using a shared parameter on various elements</a>.\n\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/store-structured-data.html\">Storing structured data in a Revit shared parameter</a>.\n\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/store-project-data.html\">Storing project data</a>.\n</li></li></li></ul>\n<p>In Revit 2012, one of the major API enhancements is the Extensible Storage mechanism. This offers a completely new storage facility for applications which is completely invisible to the user. It is the very first item described in the What's New section of the documentation on major enhancements:\n\n<h4>Extensible Storage</h4>\n<p>The Revit API now allows you to create your own class-like Schema data structures and attach instances of them to any Element in a Revit model. This functionality can be used to replace the technique of storing data in hidden shared parameters. Schema-based data is saved with the Revit model and allows for higher-level, metadata-enhanced, object-oriented data structures. Schema data can be configured to be readable and/or writable to all users, just a specific application vendor, or just a specific application from a vendor. The extensible storage classes are all found in the Autodesk.Revit.DB.ExtensibleStorage namespace:\n\n<ul>\n<li>Schema – contains a unique schema identifier, read/write permissions, and a collection of data Field objects.\n<li>Entity – an object containing data corresponding to a Schema that can be inserted into a Revit Element. \n<li>Field – contains data name, type, and unit information and is used as the key to access corresponding data in an Entity.\n<li>SchemaBuilder – create Schema definitions.\n<li>FieldBuilder – a helper class used with SchemaBuilder when creating a new field. \n</li></li></li></li></li></ul>\n<p>The following data types are currently supported: \n\n<ul>\n<li>int \n<li>short \n<li>double \n<li>float \n<li>bool \n<li>string \n<li>Guid \n<li>ElementId \n<li>Autodesk.Revit.DB.UV \n<li>Autodesk.Revit.DB.XYZ \n<li>Array (as a System.Collections.Generic.IList&lt;T&gt;) \n<li>Map (as a System.Collections.Generic.IDictionary&lt;TKey, TValue&gt; – all types are supported for keys except double, float, XYZ, and UV)\n<li>Autodesk.Revit.DB.ExtensibleStorage.Entity (an instance of another Schema, also known as a SubSchema) \n</li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<p>Simple usage of ExtensibleStorage:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Create a data structure, attach it to a wall, </span>\n<span class=\"gray\">///</span><span class=\"green\"> populate it with data, and retrieve the data </span>\n<span class=\"gray\">///</span><span class=\"green\"> back from the wall</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> StoreDataInWall( \n  <span class=\"teal\">Wall</span> wall, \n  <span class=\"teal\">XYZ</span> dataToStore )\n{\n  <span class=\"teal\">Transaction</span> createSchemaAndStoreData\n    = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( wall.Document, <span class=\"maroon\">\"tCreateAndStore\"</span> );\n \n  createSchemaAndStoreData.Start();\n  <span class=\"teal\">SchemaBuilder</span> schemaBuilder = <span class=\"blue\">new</span> <span class=\"teal\">SchemaBuilder</span>(\n    <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( <span class=\"maroon\">\"720080CB-DA99-40DC-9415-E53F280AA1F0\"</span> ) );\n \n  <span class=\"green\">// allow anyone to read the object</span>\n  schemaBuilder.SetReadAccessLevel( \n    <span class=\"teal\">AccessLevel</span>.Public );\n \n  <span class=\"green\">// restrict writing to this vendor only</span>\n  schemaBuilder.SetWriteAccessLevel( \n    <span class=\"teal\">AccessLevel</span>.Vendor );\n \n  <span class=\"green\">// required because of restricted write-access</span>\n  schemaBuilder.SetVendorId( <span class=\"maroon\">\"ADSK\"</span> );\n \n  <span class=\"green\">// create a field to store an XYZ</span>\n  <span class=\"teal\">FieldBuilder</span> fieldBuilder = schemaBuilder\n    .AddSimpleField( <span class=\"maroon\">\"WireSpliceLocation\"</span>, \n    <span class=\"blue\">typeof</span>( <span class=\"teal\">XYZ</span> ) );\n \n  fieldBuilder.SetUnitType( <span class=\"teal\">UnitType</span>.UT_Length );\n \n  fieldBuilder.SetDocumentation( <span class=\"maroon\">\"A stored \"</span>\n    + <span class=\"maroon\">\"location value representing a wiring \"</span>\n    + <span class=\"maroon\">\"splice in a wall.\"</span> );\n \n  schemaBuilder.SetSchemaName( <span class=\"maroon\">\"WireSpliceLocation\"</span> );\n \n  <span class=\"teal\">Schema</span> schema = schemaBuilder.Finish(); <span class=\"green\">// register the Schema object</span>\n \n  <span class=\"green\">// create an entity (object) for this schema (class)</span>\n  <span class=\"teal\">Entity</span> entity = <span class=\"blue\">new</span> <span class=\"teal\">Entity</span>( schema );\n \n  <span class=\"green\">// get the field from the schema</span>\n  <span class=\"teal\">Field</span> fieldSpliceLocation = schema.GetField(\n    <span class=\"maroon\">\"WireSpliceLocation\"</span> );\n \n  entity.Set&lt;<span class=\"teal\">XYZ</span>&gt;( fieldSpliceLocation, dataToStore,\n    <span class=\"teal\">DisplayUnitType</span>.DUT_METERS ); <span class=\"green\">// set the value for this entity</span>\n \n  wall.SetEntity( entity ); <span class=\"green\">// store the entity in the element</span>\n \n  <span class=\"green\">// get the data back from the wall</span>\n  <span class=\"teal\">Entity</span> retrievedEntity = wall.GetEntity( schema );\n \n  <span class=\"teal\">XYZ</span> retrievedData = retrievedEntity.Get&lt;<span class=\"teal\">XYZ</span>&gt;(\n    schema.GetField( <span class=\"maroon\">\"WireSpliceLocation\"</span> ),\n    <span class=\"teal\">DisplayUnitType</span>.DUT_METERS );\n \n  createSchemaAndStoreData.Commit();\n}\n</pre>\n<p>The Revit 2012 SDK includes a much more full-fledged example of making use of this technology, the ExtensibleStorageManager sample.\n\n<p>As Arnošt Löbel kindly pointed out, the VendorId specified above is the same as the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/revit-2012-api-features.html\">\nnew required VendorId tag in the add-in manifest</a>.\n\nADSK is a vendor id used by Autodesk, and you should replace it by your own\n\n<a href=\"http://www.autodesk.com/symbreg\">Autodesk Registered Developer Symbol RDS</a>.\n\n<!--\n<p>Finally, here is an article by Saikat Bhattacharya from our last ADN AEC newsletter which describes more details of the extensible storage mechanism: \n\n<a href=\"zip/ExtensibleStorageAPI.rtf\">ExtensibleStorageAPI.rtf</a>.\n-->\n<p>That should give you ample material to explore. Have fun!\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0567_extensible_storage",
    "header_text": "Extensible Storage",
    "local_header_href": "#extensible-storage",
    "chunk_text": "<h4>Extensible Storage</h4><p>The Revit API now allows you to create your own class-like Schema data structures and attach instances of them to any Element in a Revit model. This functionality can be used to replace the technique of storing data in hidden shared parameters. Schema-based data is saved with the Revit model and allows for higher-level, metadata-enhanced, object-oriented data structures. Schema data can be configured to be readable and/or writable to all users, just a specific application vendor, or just a specific application from a vendor. The extensible storage classes are all found in the Autodesk.Revit.DB.ExtensibleStorage namespace:\n\n<ul>\n<li>Schema – contains a unique schema identifier, read/write permissions, and a collection of data Field objects.\n<li>Entity – an object containing data corresponding to a Schema that can be inserted into a Revit Element. \n<li>Field – contains data name, type, and unit information and is used as the key to access corresponding data in an Entity.\n<li>SchemaBuilder – create Schema definitions.\n<li>FieldBuilder – a helper class used with SchemaBuilder when creating a new field. \n</li></li></li></li></li></ul>\n<p>The following data types are currently supported: \n\n<ul>\n<li>int \n<li>short \n<li>double \n<li>float \n<li>bool \n<li>string \n<li>Guid \n<li>ElementId \n<li>Autodesk.Revit.DB.UV \n<li>Autodesk.Revit.DB.XYZ \n<li>Array (as a System.Collections.Generic.IList&lt;T&gt;) \n<li>Map (as a System.Collections.Generic.IDictionary&lt;TKey, TValue&gt; – all types are supported for keys except double, float, XYZ, and UV)\n<li>Autodesk.Revit.DB.ExtensibleStorage.Entity (an instance of another Schema, also known as a SubSchema) \n</li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<p>Simple usage of ExtensibleStorage:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Create a data structure, attach it to a wall, </span>\n<span class=\"gray\">///</span><span class=\"green\"> populate it with data, and retrieve the data </span>\n<span class=\"gray\">///</span><span class=\"green\"> back from the wall</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> StoreDataInWall( \n  <span class=\"teal\">Wall</span> wall, \n  <span class=\"teal\">XYZ</span> dataToStore )\n{\n  <span class=\"teal\">Transaction</span> createSchemaAndStoreData\n    = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( wall.Document, <span class=\"maroon\">\"tCreateAndStore\"</span> );\n \n  createSchemaAndStoreData.Start();\n  <span class=\"teal\">SchemaBuilder</span> schemaBuilder = <span class=\"blue\">new</span> <span class=\"teal\">SchemaBuilder</span>(\n    <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( <span class=\"maroon\">\"720080CB-DA99-40DC-9415-E53F280AA1F0\"</span> ) );\n \n  <span class=\"green\">// allow anyone to read the object</span>\n  schemaBuilder.SetReadAccessLevel( \n    <span class=\"teal\">AccessLevel</span>.Public );\n \n  <span class=\"green\">// restrict writing to this vendor only</span>\n  schemaBuilder.SetWriteAccessLevel( \n    <span class=\"teal\">AccessLevel</span>.Vendor );\n \n  <span class=\"green\">// required because of restricted write-access</span>\n  schemaBuilder.SetVendorId( <span class=\"maroon\">\"ADSK\"</span> );\n \n  <span class=\"green\">// create a field to store an XYZ</span>\n  <span class=\"teal\">FieldBuilder</span> fieldBuilder = schemaBuilder\n    .AddSimpleField( <span class=\"maroon\">\"WireSpliceLocation\"</span>, \n    <span class=\"blue\">typeof</span>( <span class=\"teal\">XYZ</span> ) );\n \n  fieldBuilder.SetUnitType( <span class=\"teal\">UnitType</span>.UT_Length );\n \n  fieldBuilder.SetDocumentation( <span class=\"maroon\">\"A stored \"</span>\n    + <span class=\"maroon\">\"location value representing a wiring \"</span>\n    + <span class=\"maroon\">\"splice in a wall.\"</span> );\n \n  schemaBuilder.SetSchemaName( <span class=\"maroon\">\"WireSpliceLocation\"</span> );\n \n  <span class=\"teal\">Schema</span> schema = schemaBuilder.Finish(); <span class=\"green\">// register the Schema object</span>\n \n  <span class=\"green\">// create an entity (object) for this schema (class)</span>\n  <span class=\"teal\">Entity</span> entity = <span class=\"blue\">new</span> <span class=\"teal\">Entity</span>( schema );\n \n  <span class=\"green\">// get the field from the schema</span>\n  <span class=\"teal\">Field</span> fieldSpliceLocation = schema.GetField(\n    <span class=\"maroon\">\"WireSpliceLocation\"</span> );\n \n  entity.Set&lt;<span class=\"teal\">XYZ</span>&gt;( fieldSpliceLocation, dataToStore,\n    <span class=\"teal\">DisplayUnitType</span>.DUT_METERS ); <span class=\"green\">// set the value for this entity</span>\n \n  wall.SetEntity( entity ); <span class=\"green\">// store the entity in the element</span>\n \n  <span class=\"green\">// get the data back from the wall</span>\n  <span class=\"teal\">Entity</span> retrievedEntity = wall.GetEntity( schema );\n \n  <span class=\"teal\">XYZ</span> retrievedData = retrievedEntity.Get&lt;<span class=\"teal\">XYZ</span>&gt;(\n    schema.GetField( <span class=\"maroon\">\"WireSpliceLocation\"</span> ),\n    <span class=\"teal\">DisplayUnitType</span>.DUT_METERS );\n \n  createSchemaAndStoreData.Commit();\n}\n</pre>\n<p>The Revit 2012 SDK includes a much more full-fledged example of making use of this technology, the ExtensibleStorageManager sample.\n\n<p>As Arnošt Löbel kindly pointed out, the VendorId specified above is the same as the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/revit-2012-api-features.html\">\nnew required VendorId tag in the add-in manifest</a>.\n\nADSK is a vendor id used by Autodesk, and you should replace it by your own\n\n<a href=\"http://www.autodesk.com/symbreg\">Autodesk Registered Developer Symbol RDS</a>.\n\n<!--\n<p>Finally, here is an article by Saikat Bhattacharya from our last ADN AEC newsletter which describes more details of the extensible storage mechanism: \n\n<a href=\"zip/ExtensibleStorageAPI.rtf\">ExtensibleStorageAPI.rtf</a>.\n-->\n<p>That should give you ample material to explore. Have fun!\n</p></p></p></p></p></p>"
  }
]