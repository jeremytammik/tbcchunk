[
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n- new dimension not visible\n  https://forums.autodesk.com/t5/revit-api-forum/copy-dimensions-from-a-view-to-another/m-p/7226217 -- 13180620 [Copy dimensions from a View to another]\n  https://forums.autodesk.com/t5/revit-api-forum/newdimension-dimension-created-but-not-visible/m-p/6340985\n\n- New Dimension are not Visible\n  https://forums.autodesk.com/t5/revit-api-forum/new-dimension-are-not-visible/m-p/8268048\n  get_linear_reference_from_surface.png\n\n- need to regen, or even move element to force regen\n  13595991 [Removing dimension leader not visible - only after reselection or reopening mode]\n  https://forums.autodesk.com/t5/revit-api-forum/removing-dimension-leader-not-visible-only-after-reselection-or/m-p/7545212\n\n- create dimensioning references to wall centre, outer, inner and core centre:\n  10636422 [Create dimension to wall centerline, center of core, faces of core]\n  http://forums.autodesk.com/t5/revit-api/create-dimension-to-wall-centerline-center-of-core-faces-of-core/m-p/5577704\n\n- 13479962 [Fail to get reference for grid for dimension in 2017]\n  https://forums.autodesk.com/t5/revit-api-forum/fail-to-get-reference-for-grid-for-dimension-in-2017/m-p/6636474\n  https://forums.autodesk.com/t5/revit-api-forum/newdimension-between-grids-invalid-number-of-references/m-p/7459503\n\nDimensioning leaders and references in the #RevitAPI for @AutodeskRevit rebar, grids, surfaces, wall centreline, centre and face of core #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/dimensionrefs\n\nMy colleague Zhong John Wu just solved a Revit API discussion forum issue on how to create dimension line for rebar.\nI took this as a prompt to clean out a bunch of other dimensioning related issues lurking in my infinite and growing to-do list\n&ndash; Create dimension line for rebar\n&ndash; Newly created dimensioning not displayed\n&ndash; Dimension leader remains visible after removal\n&ndash; Dimension wall centreline, centre and faces of core\n&ndash; Grid references for dimensioning...\n\n-->"
  },
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "Rebar, Wall Centreline, Core and Grid Dimensioning",
    "local_header_href": "#rebar-wall-centreline-core-and-grid-dimensioning",
    "chunk_text": "### Rebar, Wall Centreline, Core and Grid Dimensioning\n\nMy colleague Zhong John Wu just solved\na [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) issue\non how to [create dimension line for rebar](https://forums.autodesk.com/t5/revit-api-forum/create-dimension-line-for-rebar/m-p/8217536).\n\nI took this as a prompt to clean out a bunch of other dimensioning related issues lurking in my infinite and growing to-do list:\n\n- [Create dimension line for rebar](#2) \n- [Newly created dimensioning not displayed](#3) \n- [Linear reference from surface filtering for all](#3b) \n- [Dimension leader remains visible after removal](#4) \n- [Dimension wall centreline, centre and faces of core](#5) \n- [Grid references for dimensioning](#6) \n- [Simple, better grid references for dimensioning](#7)"
  },
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "<a name=\"2\"></a> Create Dimension Line for Rebar",
    "local_header_href": "#a-name2a-create-dimension-line-for-rebar",
    "chunk_text": "#### <a name=\"2\"></a> Create Dimension Line for Rebar\n\n**Question:** I'm struggling to create a rebar dimension line because I can't find a way to get the edges of the element in a section view:\n\n<center>\n<img src=\"img/rebar_dimension_1.png\" alt=\"Rebar dimensioning\" width=\"498\">\n</center>\n\nI can retrieve their edges through their geometry, but the edge I need doesn't have a reference that I can use.\n\nMy ultimate goal is to measure the distance from the end of the bar to a level or grid:\n\n<center>\n<img src=\"img/rebar_dimension_2.png\" alt=\"Rebar dimensioning\" width=\"362\">\n</center>\n\n**Answer:** Similar questions were raised here in the past, to:\n\n- [Dimension rebars](https://forums.autodesk.com/t5/revit-api-forum/dimension-rebars/td-p/5356233), and \n- [Create aligned dimension between rebars](https://forums.autodesk.com/t5/revit-api-forum/create-aligned-dimension-between-rebars/m-p/7083248)\n\nThe solutions back then include reading the element geometry and the references it provides, just like you describe:\n\n> You can read the geometry data from the rebar by `Rebar.Geometry` property. This property requires an `Option` argument. You need to set the `option.ComputeReferences` to true. Then read the edge of the rebar, and get the curve from the `Edge` object. Finally, get the end point reference from the curve.\n\n**Response:** I already looked at these posts but with no results. When I create the dimension line, a reference is needed. The approach you describe returns a null reference for the edge.\n\nHere are 4 different paths I attempted, with no desired result so far:\n\nPLAN A:\n\n<pre class=\"code\">\n  ReferenceArray ra = new ReferenceArray();\n  Line dimension = Line.CreateBound(rebar_top, apoyo_top);\n  DetailLine line1 = doc.Create.NewDetailCurve(view, dimension) as DetailLine;\n  ra.Append(line1.GeometryCurve.GetEndPointReference(1));\n  ra.Append(line1.GeometryCurve.GetEndPointReference(0));                                           \n  Dimension dim = doc.Create.NewDimension(doc.ActiveView, dimension, ra);\n</pre>\n\nPLAN B:\n\n<pre class=\"code\">\n  XYZ apoyo_top = pAnalisisSupCap + rle.cm_to_ft(200) * XYZ.BasisZ;\n  XYZ apoyo_bot = pAnalisisSupCap - rle.cm_to_ft(200) * XYZ.BasisZ;\n  XYZ rebar_top = pini + rle.cm_to_ft(200) * XYZ.BasisZ;\n  XYZ rebar_bot = pini - rle.cm_to_ft(200) * XYZ.BasisZ;\n  Line l_v = Line.CreateBound(apoyo_bot, apoyo_top);\n  Line l_h = Line.CreateBound(rebar_bot, rebar_top);\n  Plane p_h = Plane.CreateByNormalAndOrigin(rebar_bot\n    .CrossProduct(rebar_top), rebar_top);\n  SketchPlane skplane_h = SketchPlane.Create(doc, p_h);\n  Plane p_v = Plane.CreateByNormalAndOrigin(apoyo_bot\n    .CrossProduct(apoyo_top), apoyo_top);\n  SketchPlane skplane_v = SketchPlane.Create(doc, p_v);\n  ModelCurve modelcurve1 = doc.Create.NewModelCurve (l_h, skplane_h);\n  ModelCurve modelcurve2 = doc.Create.NewModelCurve(l_v, skplane_v);\n  ra.Append(modelcurve1.GeometryCurve.Reference);\n  ra.Append(modelcurve2.GeometryCurve.Reference);\n  ra.Append(modelcurve1.GeometryCurve.GetEndPointReference(0));\n  ra.Append(modelcurve2.GeometryCurve.GetEndPointReference(0));\n</pre>\n\nPLAN C:\n\n<pre class=\"code\">\n  Options opt = new Options();\n  opt.ComputeReferences = true;\n  opt.View = doc.ActiveView;\n  opt.IncludeNonVisibleObjects = true;\n  GeometryElement geomElem = rebInt.get_Geometry(opt);\n\n  foreach (GeometryObject geomObj in geomElem)\n  {\n    Solid geomSolid = geomObj as Solid;\n    if (null != geomSolid)\n    {\n      int faces = 0;\n      double totalArea = 0;\n      foreach (Face geomFace in geomSolid.Faces)\n      {\n        faces++;\n        faceInfo += \"Face \" + faces + \" area: \"\n          + geomFace.Area.ToString() + \"\\n\";\n        totalArea += geomFace.Area;\n        info = geomFace;\n      }\n      faceInfo += \"Number of faces: \" + faces + \"\\n\";\n      faceInfo += \"Total area: \" + totalArea.ToString() + \"\\n\";\n\n      int edge = 0;\n      foreach (Edge geomEdge in geomSolid.Edges)\n      {\n        geoobj = geomEdge.AsCurve();\n      }\n    }\n  }\n  // No Faces/Edges valiuds as references.\n</pre>\n\t\t\t\t\t\t\t\t\t\t\t\nPLAN D:\n\n<pre class=\"code\">\n  IList<RebarConstrainedHandle> dd = rebInt\n    .GetRebarConstraintsManager().GetAllHandles();\n\n  RebarConstrainedHandle s = null;\n  RebarConstrainedHandle e = null;\n  foreach (RebarConstrainedHandle rbh in dd)\n  {\n    if (rbh.GetHandleName().ToString() == \"Start of Bar\")\n    {\n      s = rbh;\n    }\n    if (rbh.GetHandleName().ToString() == \"End of Bar\")\n    {\n      e = rbh;\n    }\n  }\n  // This objects (handles) doesn't give references.\n</pre>\n\n**Answer:** I verified that your plan A throws an exception saying, 'The direction of dimension is invalid'.\n\nThis is because the input value `dimension` should lie inside the plan of `doc.ActiveView`.\n\nSo, I changed the input value dimension of the following code line to `line1.GeometryCurve as Line`.\n\nIt works, but you just need to offset Z of the dimension line to make it looks good:\n\n<pre class=\"code\">\n  Dimension dim = doc.Create.NewDimension(\n    doc.ActiveView, line1.GeometryCurve as Line, ra );\n</pre>\n\n**Answer and Solution:** With the great support from our Revit engineering team, I got the ideal solution and verified that it works fine to dimension between rebar and grid.\n\nThe code contains a command that places a dimension in your model. You will need to select the rebar. The grid line is hard-coded by its element id.\n\nIt implements the following steps:\n\n- Get all rebar references.\n- Filter them to choose the one that we need.\n- Get the grid reference.\n- With the rebar ref and grid references, create the dimension.\n\nIf you want to only dimension the rebar, you just need to change the code to get the two references of the edges perpendicular to `rebarSeg`:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">using</span>&nbsp;System;\n<span style=\"color:blue;\">using</span>&nbsp;System.Collections.Generic;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.UI;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.UI.Selection;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.Attributes;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB.Structure;\n \n<span style=\"color:blue;\">namespace</span>&nbsp;TestRebar\n{\n&nbsp;&nbsp;[<span style=\"color:#2b91af;\">Transaction</span><span style=\"color:#2b91af;\">Attribute</span>(&nbsp;<span style=\"color:#2b91af;\">TransactionMode</span>.Manual&nbsp;)]\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">TestRebar</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IExternalCommand</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIApplication</span>&nbsp;m_uiApp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;m_doc;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;elementId&nbsp;=&nbsp;<span style=\"color:#2b91af;\">ElementId</span>.InvalidElementId;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;Execute(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementSet</span>&nbsp;elements&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">try</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initStuff(&nbsp;commandData&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;m_doc&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Failed;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_uiApp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Selection</span>&nbsp;sel&nbsp;=&nbsp;m_uiApp.ActiveUIDocument.Selection;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;refr&nbsp;=&nbsp;sel.PickObject(&nbsp;<span style=\"color:#2b91af;\">ObjectType</span>.Element&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Rebar</span>&nbsp;rebar&nbsp;=&nbsp;m_doc.GetElement(&nbsp;refr.ElementId&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Rebar</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;rebarSeg&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;bOk&nbsp;=&nbsp;getRebarSegment(&nbsp;rebar,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;rebarSeg&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!bOk&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Failed;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Options</span>&nbsp;options&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;the&nbsp;view&nbsp;in&nbsp;which&nbsp;you&nbsp;want&nbsp;to&nbsp;place&nbsp;the&nbsp;dimension</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.View&nbsp;=&nbsp;m_uiApp.ActiveUIDocument.ActiveView;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.ComputeReferences&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;&nbsp;<span style=\"color:green;\">//&nbsp;produce&nbsp;references</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.IncludeNonVisibleObjects&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;wholeRebarGeometry&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;rebar.get_Geometry(&nbsp;options&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;refForEndOfBar&nbsp;=&nbsp;getReferenceForEndOfBar(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wholeRebarGeometry,&nbsp;rebarSeg&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;refGrid&nbsp;=&nbsp;getGridRef();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ReferenceArray</span>&nbsp;refArray&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReferenceArray</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;refArray.Append(&nbsp;refForEndOfBar&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;refArray.Append(&nbsp;refGrid&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;dist&nbsp;=&nbsp;10;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;a&nbsp;line&nbsp;parallel&nbsp;with&nbsp;our&nbsp;rebar&nbsp;segment&nbsp;somewhere&nbsp;in&nbsp;space</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;dimLine&nbsp;=&nbsp;rebarSeg.CreateOffset(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dist,&nbsp;<span style=\"color:#2b91af;\">XYZ</span>.BasisY&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>;&nbsp;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;tr&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;m_doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tr.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Create&nbsp;Dimension&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_doc.Create.NewDimension(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_uiApp.ActiveUIDocument.ActiveView,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dimLine,&nbsp;refArray&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tr.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">catch</span>(&nbsp;<span style=\"color:#2b91af;\">Exception</span>&nbsp;e&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TaskDialog</span>.Show(&nbsp;<span style=\"color:#a31515;\">&quot;exception&quot;</span>,&nbsp;e.Message&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Failed;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;getGridRef()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;idGrd&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(&nbsp;397028&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;elemGrid&nbsp;=&nbsp;m_doc.GetElement(&nbsp;idGrd&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Options</span>&nbsp;options&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;the&nbsp;view&nbsp;in&nbsp;which&nbsp;you&nbsp;want&nbsp;to&nbsp;place&nbsp;the&nbsp;dimension</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.View&nbsp;=&nbsp;m_uiApp.ActiveUIDocument.ActiveView;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.ComputeReferences&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;&nbsp;<span style=\"color:green;\">//&nbsp;produce&nbsp;references</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;options.IncludeNonVisibleObjects&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;wholeGridGeometry&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;elemGrid.get_Geometry(&nbsp;options&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">Reference</span>&gt;&nbsp;allRefs&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Reference</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">GeometryObject</span>&nbsp;geomObj&nbsp;<span style=\"color:blue;\">in</span>&nbsp;wholeGridGeometry&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;refLine&nbsp;=&nbsp;geomObj&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;refLine&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;&amp;&amp;&nbsp;refLine.Reference&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;refLine.Reference;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;getReferenceForEndOfBar(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;geom,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;rebarSeg&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">GeometryObject</span>&nbsp;geomObj&nbsp;<span style=\"color:blue;\">in</span>&nbsp;geom&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Solid</span>&nbsp;sld&nbsp;=&nbsp;geomObj&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Solid</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;sld&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;I&#39;ll&nbsp;get&nbsp;the&nbsp;references&nbsp;from&nbsp;curves;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">continue</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;refLine&nbsp;=&nbsp;geomObj&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;refLine&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;&amp;&amp;&nbsp;refLine.Reference&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;We&nbsp;found&nbsp;one&nbsp;reference.&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Let&#39;s&nbsp;see&nbsp;if&nbsp;it&nbsp;is&nbsp;the&nbsp;correct&nbsp;one.&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;The&nbsp;correct&nbsp;referece&nbsp;need&nbsp;to&nbsp;be&nbsp;perpendicular&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;to&nbsp;rebar&nbsp;segement&nbsp;and&nbsp;the&nbsp;end&nbsp;point&nbsp;of&nbsp;rebar&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;segment&nbsp;should&nbsp;be&nbsp;on&nbsp;the&nbsp;reference&nbsp;curve.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;dotProd&nbsp;=&nbsp;refLine.Direction.DotProduct(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rebarSeg.Direction&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:#2b91af;\">Math</span>.Abs(&nbsp;dotProd&nbsp;)&nbsp;!=&nbsp;0&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">continue</span>;&nbsp;<span style=\"color:green;\">//&nbsp;curves&nbsp;are&nbsp;not&nbsp;perpendicular.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;endPointOfRebar&nbsp;=&nbsp;rebarSeg.GetEndPoint(&nbsp;1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IntersectionResult</span>&nbsp;ir&nbsp;=&nbsp;refLine.Project(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endPointOfRebar&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;ir&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">continue</span>;&nbsp;<span style=\"color:green;\">//&nbsp;end&nbsp;point&nbsp;of&nbsp;rebar&nbsp;segment&nbsp;is&nbsp;not&nbsp;on&nbsp;the&nbsp;reference&nbsp;curve.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:#2b91af;\">Math</span>.Abs(&nbsp;ir.Distance&nbsp;)&nbsp;!=&nbsp;0&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">continue</span>;&nbsp;<span style=\"color:green;\">//&nbsp;end&nbsp;point&nbsp;of&nbsp;rebar&nbsp;segment&nbsp;is&nbsp;not&nbsp;on&nbsp;the&nbsp;reference&nbsp;curve.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;refLine.Reference;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;getRebarSegment(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Rebar</span>&nbsp;rebar,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">out</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;rebarSeg&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rebarSeg&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">Curve</span>&gt;&nbsp;rebarSegments&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;rebar.GetCenterlineCurves(&nbsp;<span style=\"color:blue;\">false</span>,&nbsp;<span style=\"color:blue;\">true</span>,&nbsp;<span style=\"color:blue;\">true</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">MultiplanarOption</span>.IncludeOnlyPlanarCurves,&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;rebarSegments.Count&nbsp;!=&nbsp;1&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">false</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rebarSeg&nbsp;=&nbsp;rebarSegments[0]&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;rebarSeg&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">false</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">void</span>&nbsp;initStuff(&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_uiApp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_doc&nbsp;=&nbsp;m_uiApp.ActiveUIDocument.Document;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n</pre>\n\n**Response:** Thanks a lot for the response. It is the solution to our problem! We made little adjustments to the code to have plenty of control about what end do we want to dimension, and also we had to project all the curves involved into a shared reference plane due to the fact that if you have more than one rebar (rebar set), the geometry of the rebar is above or beneath the grid line.\n\nAgain, thanks a lot for your time and effort.\n\nThis thanks is due to Zhong (John) Wu, Boris Shafiro and especially Stefan Dobre."
  },
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "<a name=\"3\"></a> Newly Created Dimensioning Not Displayed",
    "local_header_href": "#a-name3a-newly-created-dimensioning-not-displayed",
    "chunk_text": "#### <a name=\"3\"></a> Newly Created Dimensioning Not Displayed\n\nFor another issue or two, on newly created dimensioning not being displayed properly, \nFrank [@Fair59](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/2083518) Aarssen\nonce again comes to the rescue:\n\n- [Copy dimensions from a View to another](https://forums.autodesk.com/t5/revit-api-forum/copy-dimensions-from-a-view-to-another/m-p/7226217)\n- [NewDimension - dimension created but not visible](https://forums.autodesk.com/t5/revit-api-forum/newdimension-dimension-created-but-not-visible/m-p/6340985)\n\nFair59 says: The workaround for dimensions to model elements, is rather simple. Create a new Dimension, using the References from the non-visible dimension."
  },
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "<a name=\"3b\"></a> Linear Reference from Surface Filtering for All",
    "local_header_href": "#a-name3ba-linear-reference-from-surface-filtering-for-all",
    "chunk_text": "#### <a name=\"3b\"></a> Linear Reference from Surface Filtering for All\n\nIn yet another visibility question,\non [new dimensions are not visible](https://forums.autodesk.com/t5/revit-api-forum/new-dimension-are-not-visible/m-p/8268048),\nUnknowz describes another interesting approach:\n\n**Question:** \nI continued to check my code and found an interesting point which is probably at the origin of the problem. \nI use this to obtain a reference to `theBiggestFace`:\n\n<pre class=\"code\">\n  PlanarFace planarFace = theBiggestFace as PlanarFace;\n  Reference refer = planarFace.Reference;\n</pre>\n\nThis returns a `Reference` whose `ElementReferenceType` is `REFERENCE_TYPE_SURFACE`. \nHowever, in my case (with the faces parallel to the view), the dimensioning will only work with `REFERENCE_TYPE_LINEAR`.\n\n<center>\n<img src=\"img/get_linear_reference_from_surface.png\" alt=\"Get linear reference from surface\" width=\"498\">\n</center>\n\nDo you have an idea of how to obtain a `Reference` with a type `Linear` from a `Surface` `Reference`?\n\nIt's probably a simple additional line at my existing code, but I couldn't find it yet...\n\n**Solution:** \nYes and No &ndash; I couldn’t properly find the reference line from the face, so now I do it another way.\n\nI catch all the geometry objects from the view, both visible and invisible, and filter all these elements to find:\n\n- A reference line parallel to the middle axis of the face\n- The closest reference to the middle axis\n\nIt seems like a dirty solution, but it works, and, with good filtering, the performance stays acceptable."
  },
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "<a name=\"4\"></a> Dimension Leader Remains Visible After Removal",
    "local_header_href": "#a-name4a-dimension-leader-remains-visible-after-removal",
    "chunk_text": "#### <a name=\"4\"></a> Dimension Leader Remains Visible After Removal\n\nAnother dimensioning display issue that came up\ninvolves [removing dimension leader not visible &ndash; only after reselection or reopening](https://forums.autodesk.com/t5/revit-api-forum/removing-dimension-leader-not-visible-only-after-reselection-or/m-p/7545212).\n\nThat was resolved by moving an element, as suggested in the bunch of examples illustrating\nthe [need to regenerate and various ways to achieve that](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.33):\n\n> `doc.regenerate` and `uidoc.RefreshActiveView` do not seem to do the trick. \n\n> Your suggestion about moving the object is a good one.\n\n> Moving the dimension up and down within the same transaction (no need for two transactions) regenerates the dimension and removes the leaders.\n\n<pre class=\"code\">\n  ElementTransformUtils.MoveElement( doc, dimRef.Id, XYZ.BasisZ );\n  ElementTransformUtils.MoveElement( doc, dimRef.Id, -XYZ.BasisZ );\n</pre>"
  },
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "<a name=\"5\"></a> Dimension Wall Centreline, Centre and Faces of Core",
    "local_header_href": "#a-name5a-dimension-wall-centreline-centre-and-faces-of-core",
    "chunk_text": "#### <a name=\"5\"></a> Dimension Wall Centreline, Centre and Faces of Core\n\nA frequent requirement is\nto [create dimension to wall centerline, center of core, faces of core](https://forums.autodesk.com/t5/revit-api-forum/create-dimension-to-wall-centerline-center-of-core-faces-of-core/m-p/5577704)\n\nA lot of powerful and useful functionality addressing this was added in the Revit 2018 API, e.g.:\n\n- [References and selection of subelements](http://thebuildingcoder.typepad.com/blog/2017/04/whats-new-in-the-revit-2018-api.html#2.2.3)\n- [API access to FamilyInstance references](http://thebuildingcoder.typepad.com/blog/2017/04/whats-new-in-the-revit-2018-api.html#3.19).\n\nFair59 added another solution to pinpoint specific core layers, e.g.:\n\n- Overall Centre\n- Core Exterior Face\n- Core Interior Face\n- Core Centre\n- Exterior Wall Face\n- Interior Wall Face\n \n> You can analyse the references of a dimension that measures the core using `Reference.ConvertToStableRepresentation`.\n\n> Using that information, you can then construct the references as follows:\n\n<pre class=\"code\">\n  string format = \"{0}:{1}:{2}\";\n  string uid = wall.uidId;\n  int nines = -9999;\n  \n  refString = string.Format(format,uid,nines,1);\n  Reference wall_centre = Reference\n    .ParseFromStableRepresentation(doc,refString);\n    \n  refString = string.Format(format,uid,nines,2);\n  Reference core_outer = Reference\n    .ParseFromStableRepresentation(doc,refString);\n    \n  refString = string.Format(format,uid,nines,3);\n  Reference core_inner = Reference\n    .ParseFromStableRepresentation(doc,refString);\n    \n  refString = string.Format(format,uid,nines,4);\n  Reference core_centre = Reference\n    .ParseFromStableRepresentation(doc,refString);\n</pre>"
  },
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "<a name=\"6\"></a> Grid References for Dimensioning",
    "local_header_href": "#a-name6a-grid-references-for-dimensioning",
    "chunk_text": "#### <a name=\"6\"></a> Grid References for Dimensioning\n\nTwo other discussions deal with dimensioning grids:\n\nOne, on\nthe [failure to get reference for grid for dimension in 2017](https://forums.autodesk.com/t5/revit-api-forum/fail-to-get-reference-for-grid-for-dimension-in-2017/m-p/6636474).\n\nAlexander [@aignatovich](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1257478) Ignatovich, aka Александр Игнатович solved it like this:\n\n> Instead of getting references from grid curves I used a reference to the entire grid element:\n\n<pre class=\"code\">\n  var gridRef = Reference.ParseFromStableRepresentation(doc, grid.UniqueId);\n</pre>\n\nMore solutions were presented for\nusing [`NewDimension` between grids &ndash; invalid number of references](https://forums.autodesk.com/t5/revit-api-forum/newdimension-between-grids-invalid-number-of-references/m-p/7459503), e.g.,\nRichard Thomas suggested:\n\n> Basically, you can't use the reference from the curve of the grid (since that is a surface); you have to create a new reference by using the grid element itself: `New Reference(Grid)`. This reference you can then add to the reference array of the `Create.NewDimension` method. It's the same when dimensioning reference planes.\n\n> If you only have the curve information to start with, you need to get the grid element from the curve's reference and then create a new reference from that.\n\n> THE `Create.NewDimension` method expects the reference type of a grid or reference plane to be `REFERENCE_TYPE_NONE` (for element), not `REFERENCE_TYPE_SURFACE`."
  },
  {
    "original_filename": "1684_rebar_dimension",
    "header_text": "<a name=\"7\"></a> Simple, Better Grid References for Dimensioning",
    "local_header_href": "#a-name7a-simple-better-grid-references-for-dimensioning",
    "chunk_text": "#### <a name=\"7\"></a> Simple, Better Grid References for Dimensioning\n\nMy colleague Jim Jia adds:\n\n> Please also look at the simple and better code to build reference for `Grid` below; we don't need to retrieve reference from `Grid` geometry. We verified that this works well:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;a&nbsp;reference&nbsp;built&nbsp;directly&nbsp;from&nbsp;grid</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;GetGridRef(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;idGrid&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(&nbsp;397028&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;eGrid&nbsp;=&nbsp;doc.GetElement(&nbsp;idGrid&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Reference</span>(&nbsp;eGrid&nbsp;);\n&nbsp;&nbsp;}\n</pre>"
  }
]