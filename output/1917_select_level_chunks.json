[
  {
    "original_filename": "1917_select_level",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- eliminated deprecated API usage of `NewFloor` and `NewSlab` methods\n  https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2022.0.151.4\n  making use of\n  the [Floor Creation API Clarification](https://thebuildingcoder.typepad.com/blog/2021/08/triangle-count-floor-and-slab-creation.html#3)\n  [diff](https://github.com/jeremytammik/the_building_coder_samples/compare/2022.0.151.3...2022.0.151.4)\n\n- Select all content on level\n  https://forums.autodesk.com/t5/revit-api-forum/select-all-content-on-level/m-p/10577273\n\n- why “Modify parameters” returns null for newly created Structural Connection?\n  https://forums.autodesk.com/t5/revit-api-forum/why-modify-parameters-returns-null-for-newly-created-structural/m-p/10577688\n\n- Get ViewSheet from View\n  https://forums.autodesk.com/t5/revit-api-forum/get-viewsheet-from-view/m-p/10491156\n  12966349 [Get ViewSheet from View]\n  https://forums.autodesk.com/t5/revit-api-forum/get-viewsheet-from-view/m-p/7075550\n  Getting Title Block Data and ViewSheet from View\n  https://thebuildingcoder.typepad.com/blog/2020/02/get-title-block-data-and-viewsheet-from-view.html\n  Get ViewSheet from a given View\n  Just a snippet get_sheet_from_view(view) that will return you ViewSheet for a given View with the help of FilteredElementCollector and FilterStringRule.\n  https://www.erikfrits.com/blog/get-viewsheet-from-given-view-with-filteredelementcollector-and-filterstringrule/\n\ntwitter:\n\nadd #thebuildingcoder\n\nFabrication transactions, retrieving all elements on level and getting ViewSheet from View in in #DynamoBim and the #RevitAPI @AutodeskForge @AutodeskRevit #bim #ForgeDevCon https://autode.sk/selectonlevel\n\nView Sheet from View and Select All on Level\n\nIncreasing numbers of of Python and Dynamo oriented topics in the Revit API discussion forum, and a final deprecated API clean-up\n&ndash; The Building Coder samples clean\n&ndash; Retrieving all elements on level\n&ndash; Get ViewSheet from View\n&ndash; Fabrication transaction in Dynamo...\n\nlinkedin:\n\nFabrication transactions, retrieving all elements on level and getting ViewSheet from View in in Python, DynamoBim and the #RevitAPI\n\nhttps://autode.sk/selectonlevel\n\nView Sheet from View and Select All on Level\n\nIncreasing numbers of of Python and Dynamo oriented topics in the Revit API discussion forum, and a final deprecated API clean-up:\n\n- The Building Coder samples clean\n- Retrieving all elements on level\n- Get ViewSheet from View\n- Fabrication transaction in Dynamo...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n**Question:** \n\n**Answer:**\n\n**Response:**  \n\nMany thanks to  for this very helpful explanation!\n\n<pre class=\"code\">\n</pre>\n\n-->"
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "View Sheet from View and Select All on Level",
    "local_header_href": "#view-sheet-from-view-and-select-all-on-level",
    "chunk_text": "### View Sheet from View and Select All on Level\n\nThe number of Python and Dynamo oriented topics in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) is \nincreasing.\nHere are some of them, and a final deprecated API clean-up:\n\n- [The Building Coder samples clean](#2)\n- [Retrieving all elements on level](#3)\n- [Get ViewSheet from View](#4)\n- [Fabrication transaction in Dynamo](#5)"
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "The Building Coder Samples Clean",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> The Building Coder Samples Clean\n\nBefore diving into the Python oriented topics, I'll mention in passing that the deprecated Revit API usage remaining after\nthe [initial migration](https://thebuildingcoder.typepad.com/blog/2021/04/revit-2022-sdk-and-the-building-coder-samples.html#5) to\nthe Revit 2022 API has now been removed.\n\nThe deprecated API usage was caused by calls to the `NewFloor` and `NewSlab` methods.\n\nThe recent [floor creation API clarification](https://thebuildingcoder.typepad.com/blog/2021/08/triangle-count-floor-and-slab-creation.html#3) explained\nhow to easily address this,\nand [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\n[release 2022.0.151.4](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2022.0.151.4) implements\nthe fix, cf.\nthe [diff to the previous release](https://github.com/jeremytammik/the_building_coder_samples/compare/2022.0.151.3...2022.0.151.4)."
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "Retrieving all Elements on Level",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Retrieving all Elements on Level\n\nPerry Lackowski jumped through several hoops\nto [select all content on level](https://forums.autodesk.com/t5/revit-api-forum/select-all-content-on-level/m-p/10577273) and\nvery kindly documented his progress and results to achieve this:\n\n**Question:** I'm trying to put together a new script for a structural engineer.\nHe wants to be able to quickly see all the elements that are linked to a particular `Level` of his choosing.\nI chose to break this into two parts:\n\n- Take the first element in his selection and retrieve its Level.\n- Find all elements with that reference Level and update the selection to match.\n\nStep 1 was more challenging than I realized, because some elements like cable trays store the associated Level in the `ReferenceLevel` instead of in the `LevelId`.\nTheir `LevelId` returns `-1` or an invalid element id.\n\nStep 2 is where I'm struggling now.\nI use a `FilteredElementCollector` to find all matching LevelIds, but similar to step 1, this fails to include the cable trays in the resulting selection because they have a LevelId of -1.\n\n**Answer:** Your explanation makes perfect sense, and also points towards the solution.\n\nJust as you noticed in retrieving the level from the selected element, different elements store their level in different ways.\nUnfortunately, some do not store any level information directly at all.\nThose could be retrieved by determining their Z elevation and comparing that with the various level's Z coordinates.\n\nMany elements provide a valid `LevelId` property, and you have used that property to retrieve the level from the selected element.\n\nThe cable trays apparently do not, and you have to use the `ReferenceLevel` property instead.\n\nI assume that the `ElementLevelFilter` is also based on the `LevelId` property.\nTherefore, it will not retrieve the desired cable trays.\nFor those, you can implement a second, separate, filtered element collector that first filters for cable trays, e.g., using their category or some other quick filter property.\nIn a post-processing step, you could check that the value of their `ReferenceLevel` property matches the desired value.\n\nThese two separate filtered element collectors can be combined into one using a Boolean operation.\n\nI used this technique to put together such combinations of filters\nto [retrieve structural elements](http://thebuildingcoder.typepad.com/blog/2010/07/retrieve-structural-elements.html)\nand [MEP elements and their connectors](http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html), respectively.\n\nYou can check out The Building Coder topic group\non [filtering for elements](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.9) to\nsee many more examples.\n\n**Response:** I didn't realize there was so much diversity in the way Revit handles the different type categories behind the scenes until I downloaded the RevitLookup snoop tool yesterday.\nFor example, I see that Duct and Cable Tray are broken out into separate Duct and CableTray Objects, and they both use Reference Levels.\nBut Duct Fittings and Cable Tray Fittings are saved under the same FamilyInstance object and they both use LevelIds.\nIs there a guide/roadmap for how different type categories map to different database objects?\nIt sounds like I need to find out how each and every type category handles levels behind the scenes, then set up different filters to separate them ... which could be very time consuming.\n\nAlso (and perhaps this would be a better question to ask on the pyRevit forums) is there a better way to check for a null value on the `LevelId` parameter?\nI feel like converting the result to a string is not the right solution here. \n\nLater: I'm beginning to wrap my head around the complexity of this problem.\nFrom the items I have snooped so far, here are my results:\n\n- Light Fixtures use Level (LevelId behind the scenes), unless they are face based, then they use Schedule Level (not in snoop tool, and LevelId is null).\n- Cable Tray and Duct use Reference Level (Does appear in snoop tool, LevelId is null). \n- Model Groups use Reference Level (LevelId behind the scenes)\n- Structural Columns use Base Level (LevelId behind the scenes)\n- Structural Foundations use Level (LevelId behind the scenes)\n- Structural Framing has a Reference Level (not in snoop tool, and LevelId is null).\n\nClearly, there's not a lot of consistency behind the scenes.\nI figured I'd take a look at the parameters next, and maybe filter based on those.\nUsing the RevitAPI doc for `BuiltInParameter` enumeration, I'm seeing a lot of potential parameters that could house the level:\n\n- Reference Level corresponds to MULTISTORY_STAIRS_REF_LEVEL, FABRICATION_LEVEL_PARAM, TRUSS_ELEMENT_REFERENCE_LEVEL_PARAM, GROUP_LEVEL, SPACE_REFERENCE_LEVEL_PARAM, RBS_START_LEVEL_PARAM, FACEROOF_LEVEL_PARAM, STRUCTURAL_REFERENCE_LEVEL_ELEVATION, ROOF_CONSTRAINT_LEVEL_PARAM, INSTANCE_REFERENCE_LEVEL_PARAM\n- Base Level corresponds to DPART_BASE_LEVEL_BY_ORIGINAL, DPART_BASE_LEVEL, STAIRS_BASE_LEVEL, STAIRS_RAILING_BASE_LEVEL_PARAM, IMPORT_BASE_LEVEL, STAIRS_BASE_LEVEL_PARAM, VIEW_UNDERLAY_BOTTOM_ID, SCHEDULE_BASE_LEVEL_PARAM, ROOF_BASE_LEVEL_PARAM, FAMILY_BASE_LEVEL_PARAM\n- Schedule Level corresponds to INSTANCE_SCHEDULE_ONLY_LEVEL_PARAM\n- Level corresponds to PATH_OF_TRAVEL_LEVEL_NAME, SYSTEM_ZONE_LEVEL_ID, ZONE_LEVEL_ID, WALL_SWEEP_LEVEL_PARAM, ROOM_LEVEL_ID, SLOPE_ARROW_LEVEL_END, CURVE_LEVEL, VIEW_GRAPH_SCHED_BOTTOM_LEVEL, SCHEDULE_LEVEL_PARAM, LEVEL_PARAM, STRUCTURAL_REFERENCE_LEVEL_ELEVATION, STRUCTURAL_ATTACHMENT_START_LEVEL_REFERENCE, FAMILY_LEVEL_PARAM\n- Associated Level corresponds to PLAN_VIEW_LEVEL\n\nAdmittedly, a lot of these built-in parameters sound like they correspond to families that I'm not looking for, but there are certainly quite a few contenders that may contain the information I need.\nHow would I filter for these?\nI'm thinking I can create a list of all the parameters, then check for the parameters on each element and if I find a non-null parameter I can compare it to my selected level.\nBut this would be a very slow filter.\nAnd how would I get a list of all the elements in the first place?\n\nLater: OK, so I think I figured out the first part with this new method.\nBasically, it just searches for every parameter in the list, and if it finds one that doesn't equal `-1`, it will return it as the Element Id of the corresponding level.\nNext, I need to find a way to run this on every element in the project so I can compare the element ids.\nThis feels like the slowest, most brute-force way to accomplish this, so I'm open to alternatives...\n\nLater: Latest version, basically complete!\n\nI discovered that some levels can't be retrieved through the `get_Parameter` method &ndash; they only appear in the `LevelId` and `ReferenceLevel` properties.\nBut these methods don't exist for every element type, so I wrapped them in some Try/Except statements at the end of the level retrieval function.\n\nI discovered a solution to the `-1` issue as well.\nIf you retrieve the element id and it's null, it means that level parameter doesn't exist for that object.\nBut, if you retrieve an element id that equals `-1`, that means the parameter exists, but was never set.\nI believe the correct way to check for this is by comparing the element id to `ElementId.InvalidElementId`, like so:\n\n<pre class=\"prettyprint\">\n  level_id.Compare(ElementId.InvalidElementId) == 1:\n</pre>\n\nI also added some options so you can select the starting element before or after launching the script.\n\nUnfortunately, I was forced to make a list of all the categories I want to search through, since I haven't found an easier way to filter down the `FilteredElementCollector`.\nI included maybe 30 of the more than 1000 categories, but it's not an exhaustive list, and there's a possibility I missed a few important ones that I'll discover later.\nI wish this page separated the 3D model categories from the rest, but alas.\n\n<pre class=\"prettyprint\">\n\"\"\"\nSelects all elements that share the same Reference Level as the selected element.\n\nTESTED REVIT API: 2020.2.4\n\nAuthor: Robert Perry Lackowski\n\n\"\"\"\n\nfrom Autodesk.Revit.DB import ElementLevelFilter, FilteredElementCollector\nfrom Autodesk.Revit.DB import Document, BuiltInParameter, BuiltInCategory, ElementFilter, ElementCategoryFilter, LogicalOrFilter, ElementIsElementTypeFilter, ElementId\nfrom Autodesk.Revit.Exceptions import OperationCanceledException"
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "from pyrevit import DB",
    "local_header_href": "#from-pyrevit-import-db",
    "chunk_text": "# from pyrevit import DB\n\ndoc = __revit__.ActiveUIDocument.Document\nuidoc = __revit__.ActiveUIDocument\n\nfrom rpw import ui\nimport sys\n\n#Ask user to pick an object which has the desired reference level\ndef pick_object():\n  from Autodesk.Revit.UI.Selection import ObjectType\n  \n  try:\n    picked_object = uidoc.Selection.PickObject(ObjectType.Element, \"Select an element.\")\n    if picked_object:\n      return doc.GetElement(picked_object.ElementId)\n    else:\n      sys.exit()\n  except:\n    sys.exit()\n  \ndef get_level_id(elem):\n  \n  BIPs = [\n    BuiltInParameter.CURVE_LEVEL,\n    BuiltInParameter.DPART_BASE_LEVEL_BY_ORIGINAL,\n    BuiltInParameter.DPART_BASE_LEVEL,\n    # BuiltInParameter.FABRICATION_LEVEL_PARAM,\n    BuiltInParameter.FACEROOF_LEVEL_PARAM,\n    BuiltInParameter.FAMILY_BASE_LEVEL_PARAM,\n    BuiltInParameter.FAMILY_LEVEL_PARAM,\n    BuiltInParameter.GROUP_LEVEL,\n    BuiltInParameter.IMPORT_BASE_LEVEL,\n    BuiltInParameter.INSTANCE_REFERENCE_LEVEL_PARAM,\n    BuiltInParameter.INSTANCE_SCHEDULE_ONLY_LEVEL_PARAM,\n    BuiltInParameter.LEVEL_PARAM,\n    BuiltInParameter.MULTISTORY_STAIRS_REF_LEVEL,\n    BuiltInParameter.PATH_OF_TRAVEL_LEVEL_NAME,\n    BuiltInParameter.PLAN_VIEW_LEVEL,\n    # BuiltInParameter.RBS_START_LEVEL_PARAM,\n    BuiltInParameter.ROOF_BASE_LEVEL_PARAM,\n    BuiltInParameter.ROOF_CONSTRAINT_LEVEL_PARAM,\n    BuiltInParameter.ROOM_LEVEL_ID,\n    BuiltInParameter.SCHEDULE_BASE_LEVEL_PARAM,\n    BuiltInParameter.SCHEDULE_LEVEL_PARAM,\n    BuiltInParameter.SLOPE_ARROW_LEVEL_END,\n    # BuiltInParameter.SPACE_REFERENCE_LEVEL_PARAM,\n    BuiltInParameter.STAIRS_BASE_LEVEL,\n    BuiltInParameter.STAIRS_BASE_LEVEL_PARAM,\n    BuiltInParameter.STAIRS_RAILING_BASE_LEVEL_PARAM,\n    BuiltInParameter.STRUCTURAL_REFERENCE_LEVEL_ELEVATION,\n    BuiltInParameter.SYSTEM_ZONE_LEVEL_ID,\n    BuiltInParameter.TRUSS_ELEMENT_REFERENCE_LEVEL_PARAM,\n    BuiltInParameter.VIEW_GRAPH_SCHED_BOTTOM_LEVEL,\n    BuiltInParameter.VIEW_UNDERLAY_BOTTOM_ID,\n    BuiltInParameter.WALL_BASE_CONSTRAINT,\n    BuiltInParameter.WALL_SWEEP_LEVEL_PARAM\n    # BuiltInParameter.ZONE_LEVEL_ID,\n  ]\n  \n  level_id = None\n    \n  for BIP in BIPs:\n    param = elem.get_Parameter(BIP)\n    if param:\n      # print \"A common level parameter has been found:\" + str(BIP)\n      param_elem_id = param.AsElementId()\n      if param_elem_id.Compare(ElementId.InvalidElementId) == 1:\n        level_id = param_elem_id\n        # print \"match found on common level parameter \" + str(BIP) + \"Level ID: \" + str(level_id)\n        return level_id\n  \n  # print \"No matching common level parameters found, checking for .LevelId\"\n  try:\n    level_id = elem.LevelId\n    if level_id.Compare(ElementId.InvalidElementId) == 1:\n      # print \"match found on .LevelId. Level ID: \" + str(level_id)\n      return level_id\n  except:\n    # print \"No LevelId parameter on this element.\"\n    pass\n\n  # print \"Still no matches. Try checking for .ReferenceLevel.Id\"\n  \n  try:\n    level_id = elem.ReferenceLevel.Id\n    if level_id.Compare(ElementId.InvalidElementId) == 1:\n      # print \"match found on .ReferenceLevel.Id Level ID: \" + str(level_id)      \n      return level_id\n  except:\n    # print \"No ReferenceLevel parameter on this element.\"\n    pass\n  \n  # print \"No matches found. Returning None...\"\n  return None"
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "print \"get selected element, either from current selection or new selection\"",
    "local_header_href": "#print-get-selected-element-either-from-current-selection-or-new-selection",
    "chunk_text": "# print \"get selected element, either from current selection or new selection\"\n\nselection = ui.Selection()\n\nif selection:\n  selected_element = selection[0]\nelse:\n  selected_element = pick_object()\n\n#print \"Element selected: \" + selected_element.Name"
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "print \"Check if selected element is a Level and get its ID. If not, search through the parameters for the reference level.\"",
    "local_header_href": "#print-check-if-selected-element-is-a-level-and-get-its-id-if-not-search-through-the-parameters-for-the-reference-level",
    "chunk_text": "# print \"Check if selected element is a Level and get its ID. If not, search through the parameters for the reference level.\"\n\nif selected_element.Category.Name.Equals(\"Levels\"):\n  target_level_id = selected_element.Id\nelse:\n  target_level_id = get_level_id(selected_element)"
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "print target_level_id",
    "local_header_href": "#print-target_level_id",
    "chunk_text": "# print target_level_id\n\nif target_level_id is not None:\n  \n  #poor attempts at filtering FECs. Not filtered enough - they contain far too many elements.\n  #all_elements = FilteredElementCollector(doc).ToElements()\n  #all_elements = FilteredElementCollector(doc).WherePasses(LogicalOrFilter(ElementIsElementTypeFilter( False ), ElementIsElementTypeFilter( True ) ) ).ToElements()\n  \n  #Create a filter. If this script isn't selecting the elements you want, it's possible the category needs to be added to this list.\n  BICs = [\n    BuiltInCategory.OST_CableTray,\n    BuiltInCategory.OST_CableTrayFitting,\n    BuiltInCategory.OST_Conduit,\n    BuiltInCategory.OST_ConduitFitting,\n    BuiltInCategory.OST_DuctCurves,\n    BuiltInCategory.OST_DuctFitting,\n    BuiltInCategory.OST_DuctTerminal,\n    BuiltInCategory.OST_ElectricalEquipment,\n    BuiltInCategory.OST_ElectricalFixtures,\n    BuiltInCategory.OST_FloorOpening,\n    BuiltInCategory.OST_Floors,\n    BuiltInCategory.OST_FloorsDefault,\n    BuiltInCategory.OST_LightingDevices,\n    BuiltInCategory.OST_LightingFixtures,\n    BuiltInCategory.OST_MechanicalEquipment,\n    BuiltInCategory.OST_PipeCurves,\n    BuiltInCategory.OST_PipeFitting,\n    BuiltInCategory.OST_PlumbingFixtures,\n    BuiltInCategory.OST_RoofOpening,\n    BuiltInCategory.OST_Roofs,\n    BuiltInCategory.OST_RoofsDefault,\n    BuiltInCategory.OST_SpecialityEquipment,\n    BuiltInCategory.OST_Sprinklers,\n    BuiltInCategory.OST_StructuralStiffener,\n    BuiltInCategory.OST_StructuralTruss,\n    BuiltInCategory.OST_StructuralColumns,\n    BuiltInCategory.OST_StructuralFraming,\n    BuiltInCategory.OST_StructuralFramingSystem,\n    BuiltInCategory.OST_StructuralFramingOther,\n    BuiltInCategory.OST_StructuralFramingOpening,\n    BuiltInCategory.OST_StructuralFoundation,\n    BuiltInCategory.OST_Walls,\n    BuiltInCategory.OST_Wire,\n  ]\n  \n  category_filters = []\n  \n  for BIC in BICs:\n    category_filters.Add(ElementCategoryFilter(BIC))\n  \n  final_filter = LogicalOrFilter(category_filters)\n  \n  #Apply filter to create list of elements\n  all_elements = FilteredElementCollector(doc).WherePasses(final_filter).WhereElementIsNotElementType().WhereElementIsViewIndependent().ToElements()\n\n  # print \"Number of elements that passed collector filters:\" + str(len(all_elements))\n\n  selection.clear()\n\n  for elem in all_elements:\n    elem_level_id = get_level_id(elem)\n    if elem_level_id == target_level_id:\n      selection.add(elem)\n\n  selection.update()\n  \nelse:\n  \n  print \"No level associated with element.\"\n</pre>\n\nMany thanks to Perry for all his research and documentation of this work.\n\n<center>\n<img src=\"img/spiritlevel.jpg\" alt=\"Spirit level\" title=\"Spirit level\" width=\"400\"/> <!-- 1000 -->\n</center>"
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "Get ViewSheet from View",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Get ViewSheet from View\n\nWe already discussed and documented\nhow to [retrieve a `ViewSheet` from a `View`](https://thebuildingcoder.typepad.com/blog/2020/02/get-title-block-data-and-viewsheet-from-view.html) based on\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n[get ViewSheet from View](https://forums.autodesk.com/t5/revit-api-forum/get-viewsheet-from-view/m-p/10491156).\n\nErik Frits added a solution code snippet to that for Python developers:\n\n> You can use my [snippet made with `FilteredElementCollector` and `FilterStringRule`](https://www.erikfrits.com/blog/get-viewsheet-from-given-view-with-filteredelementcollector-and-filterstringrule):\n\n> **Get ViewSheet from a given View**\n\n> Just a snippet `get_sheet_from_view(view)` that will return you `ViewSheet` for a given `View` with the help of `FilteredElementCollector` and `FilterStringRule`.\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "-*- coding: utf-8 -*-",
    "local_header_href": "#-coding-utf-8",
    "chunk_text": "# -*- coding: utf-8 -*-\n\n__title__ = \"Get sheet from View\"\n__author__ = \"Erik Frits\"\n\n#>>>>>>>>>>>>>>>>>>>> IMPORTS\nimport clr, os\nfrom Autodesk.Revit.DB import *\n\n#>>>>>>>>>>>>>>>>>>>> VARIABLES\ndoc = __revit__.ActiveUIDocument.Document\nuidoc = __revit__.ActiveUIDocument\napp = __revit__.Application\n\n\n#>>>>>>>>>>>>>>>>>>>> FUNCTIONS\ndef create_string_equals_filter(key_parameter, element_value, caseSensitive = True):\n  \"\"\"Function to create ElementParameterFilter based on FilterStringRule.\"\"\"\n  f_parameter         = ParameterValueProvider(ElementId(key_parameter))\n  f_parameter_value   = element_value\n  caseSensitive       = True\n  f_rule              = FilterStringRule(f_parameter, FilterStringEquals(),\n                        f_parameter_value, caseSensitive)\n  return ElementParameterFilter(f_rule)\n\ndef get_sheet_from_view(view):\n  #type:(View) -> ViewPlan\n  \"\"\"Function to get ViewSheet associated with the given ViewPlan\"\"\"\n  \n  #>>>>>>>>>> CREATE FILTER \n  my_filter = create_string_equals_filter(key_parameter=BuiltInParameter.SHEET_NUMBER,\n    element_value=view.get_Parameter(BuiltInParameter.VIEWER_SHEET_NUMBER).AsString() )\n\n  #>>>>>>>>>> GET SHEET\n  return FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_Sheets)\n    .WhereElementIsNotElementType()\n    .WherePasses(my_filter).FirstElement()\n\n#>>>>>>>>>>>>>>>>>>>> MAIN\nif __name__ == '__main__':\n\n  #>>>>>>>>>> ACTIVE VIEW\n  active_view = doc.ActiveView\n  sheet     = get_sheet_from_view(active_view)\n\n  #>>>>>>>>>> PRINT RESULTS\n  if sheet:   print('Sheet Found: {} - {}'.format(sheet.SheetNumber, sheet.Name))\n  else:     print('No sheet associated with the given view: {}'.format(active_view.Name))\n</pre>\n\nThanks to Erik for sharing this."
  },
  {
    "original_filename": "1917_select_level",
    "header_text": "Fabrication Transaction in Dynamo",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Fabrication Transaction in Dynamo\n\nLucas de Jong of [WSP Canada](https://www.wsp.com) clarified how to access a fabrication transaction in Dynamo, with invaluable support from Vlad Pavel of the Autodesk Revit development team, in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [why 'Modify parameters' returns null for a newly created structural connection](https://forums.autodesk.com/t5/revit-api-forum/why-modify-parameters-returns-null-for-newly-created-structural/m-p/10577688):\n\n**Question:** I got it working in a Revit Addin, but I am trying to get it working inside of a Dynamo Zero-Touch-Node.\nAny reason why my `GetFilerObject` returns null inside a Zero-Touch-Node?\nAny help is greatly appreciated.\nMy code is mostly (if not all) copied from the SDK sample. \n\n**Answer:** You should create a fabrication transaction in order to open a steel object:\n \n<pre class=\"code\">\n  using ( FabricationTransaction trans\n    = new FabricationTransaction( doc, false, \"Test\" ) )\n  {\n    FilerObject filerObj = FilerObject.GetFilerObjectByHandle(asHandle);\n    ...\n  }\n</pre>\n\nYou can more examples on how to use it in the samples from the Revit SDK packages.\n\n**Response:** Thank you @vlad.pavel.\n\nJust last night I came across a comment of someone saying this, and have made some progress since.  Unfortunately I am encountering a new problem when I set the readonly bool to 'true':\n\n<pre class=\"code\">\n  new FabricationTransaction(doc, true, \"Test\")\n</pre>\n\nI can now extract the parameter values.\nSo, that is a win for now.\nThen, of course, I want to edit the parameters also, like it was done in the SDK sample.\n\nWhen I leave the boolean on 'true' and try to write, load and update the `UserAutoConstructionObject`, Revit crashes.\n\nWhen I set it to 'false', I get the error message that I cannot start a new transaction.\nI hope that when I solve that issue, I have made it to the finish.\nPlease advise!\n\nPlease remember this is not in an external command, but in a Dynamo zero-touch-node.\n\n**Answer:** Looks like in Dynamo for Revit there are special mechanisms that handle the Revit &amp; Steel transactions.\nIn zero touch nodes with the advance steel API, you should use the `DocContext` class from `AdvanceSteelServices.dll` located in the sub-folder under Revit.exe, in *[Revit.exe path]\\Addins\\DynamoForRevit\\Revit\\nodes\\steel-pkg\\bin*.\nFor the pure Revit API, you should use *RevitServices.Transactions.TransactionManager.Instance.EnsureInTransaction* from `RevitServices.dll`.\n\nSo, for steel transactions in Dynamo for Revit, please replace\n\n<pre class=\"code\">\n  using(FabricationTransaction trans = new Fabrication...)\n  {\n    trans.commit()\n  } \n</pre>\n\nby\n\n<pre class=\"code\">\n  using (var ctx = new Dynamo.Applications.AdvanceSteel.Services.DocContext())\n  {\n    ...\n  }\n</pre>\n\nThe Dynamo-Revit code is open source; that is where I found how to use transactions in zero touch nodes.\nFor example,\nthe [`Wall` class](https://github.com/DynamoDS/DynamoRevit/blob/master/src/Libraries/RevitNodes/Elements/Wall.cs) creates\na wall.\nUnfortunately, we don't yet have any official documentation for this feature.\n\n**Response:** @vlad.pavel I am so happy, you made my day!\nIt worked perfectly!"
  }
]