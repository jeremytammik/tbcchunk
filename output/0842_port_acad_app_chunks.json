[
  {
    "original_filename": "0842_port_acad_app",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0842_port_acad_app",
    "header_text": "Porting an AutoCAD Application",
    "local_header_href": "#porting-an-autocad-application",
    "chunk_text": "<h3>Porting an AutoCAD Application</h3><p>AutoCAD and Revit are \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/bim-versus-free-geometry-and-product-training.html\">\nvery different animals</a>, \n\nas we already pointed out a couple of times in the past.\n\n<p>Exaggerating just a little, you might say that Revit manages a BIM and ensures its consistency at all times, so there are no exceptions to anything ever, meaning nothing can be overridden.\nMoreover, almost all Revit geometry is parametrically driven, so there is no way to tweak the model geometry either, except of course by changing the official parameter values.\n\n<p>This is obviously a challenge to developers with existing AutoCAD applications.\nHere is another example of some typical considerations of an application developer with an existing full-blown AutoCAD application, wondering whether there is any way to start supporting Revit as well: \n\n\n<p><strong>Question:</strong> We have customers using our software and asking if we could port our AutoCAD.NET application to Revit.\n\n<p>In our current implementation, we override line functionality to display special walls. \nWe need to modify subcomponents individually, manipulate grip points, split them, add more components, etc.\n\n<p>Intersections between walls affect neighbouring walls and their subcomponents.\n\n<p>We have therefore currently overridden grip points, snap points, graphics, properties, a custom ribbon is regenerated then an object is selected and so on.\n\n<p>Is it possible to implement something similar with Revit? \nI guess we probably need to customize the functionality of some wall type? \nWhat is best place to start if this is possible?\n\n\n<p><strong>Answer:</strong> I am afraid that the answer is definitely not that you can simply port your existing application.\n\n<p>The Revit API is completely different from the AutoCAD one.\n\n<p>More than this, the entire underlying principles, workflows and paradigms are utterly different and almost beyond comparison.\n\n<p>In fact, one of the biggest stumbling blocks to learning the Revit API is being caught up in preconceptions coming from \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/bim-versus-free-geometry-and-product-training.html\">\nAutoCAD or other non-BIM APIs</a>.\n\n<p>In Revit, almost all the functionality you list above cannot be overridden, because Revit manages a building information model, BIM, and ensures that it remains consistent at all times. \n\n<p>The proper approach in Revit would probably be to define an appropriate family and family types. \n\n<p>I am not at all a product expert, though, so I cannot advise you at all about how best to implement your specific model in Revit. \nYou need to consult with application engineers and product experts about that, and above all understand the existing Revit functionality in depth before you even start considering creating an add-in application, which may easily end up reproducing or even fighting against the recommended Revit paradigms and workflows.\n\n<p>What I can tell you with a hundred percent certainty is that your existing AutoCAD application cannot simply be ported to Revit, and that your best approach will almost certainly require reconsidering the whole implementation from scratch.\n\n<p>What I can also say with conviction is that it will probably be well worth your while in the long run to start learning and understanding the Revit BIM concepts and researching how a useful add-in for that domain might look, to enable you to start work on a BIM-compatible implementation, in which you will certainly be able to reuse a lot of your existing know-how and continue supporting your customers as they gradually migrate to BIM usage.\n\n<p>If you have customers knowledgeable in Revit who are interested in cooperating with you to drive such a project, I would take that opportunity with great gratitude if I were you.\n\n<p>Best place to start? Learn the product functionality, and do your best to forget AutoCAD for a moment.\n\n\n\n<p><strong>Response:</strong> Thank you for a great answer!\n\n<p>I think at this point we have to stick with AutoCAD due the limitations or the concept of Revit. \nThe main interest of our customer in using Revit was using IFC for integration with thermal calculation applications. \n\n<p>Of course Revit would also save us having to implement a number of additional objects like openings, roofs etc. that are not available in AutoCAD.\n\n<p>I believe we will continue implementing the functionality on top of AutoCAD but still continue to research Revit at the same time. \nPerhaps at some point we could implement some kind of separate editor for our model, maybe using a WPF dialogue user interface that plays with normal walls in Revit. \nIf I read the API documentation correctly, we can still store additional info to wall objects.\n\n\n<p><strong>Answer:</strong> Your approach sounds very feasible and sensible to me.\n\n<p>Implementing additional functionality in a separate WPF dialogue interacting with Revit would work fine.\n\n<p>Please be aware that you can also maintain your existing AutoCAD functionality and access that in the background, invisibly to the user, from your Revit add-in.\n\n<p>For example, you can read the relevant data from the Revit model, process it in the background using your existing application, and display useful results in your own WPF dialogue in a way that supports an efficient Revit workflow. That might enable you to achieve a near perfect solution with little effort.\n\n<p>And yes, absolutely, you can store any additional data you like on walls and any other elements using the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/storage\">\nextensible storage functionality</a>.\n\n\n<a name=\"2\"></a>\n<h4>Importing SAT into Revit</h4>\n<p>People now and then ask about programmatically importing a SAT file into Revit.\n\n<p>You can export a SAT file using the API and import an SAT file from the user interface, simply by going through Insert &gt; Import &gt; Import CAD &gt; ACIS SAT Files. \n\n<p>However, the Revit API Import methods only take options for DGN, DWG/DXF, gbXML, and images.\n\n<!--\n<p>In the user interface, this is just a click or two away, via &gt; .\n\n<p>I need to import an SAT file using the API. \n\nI’m really hoping I’m missing something here because I’m on a project that is dependent on the ability to import an SAT file through automation. If there is no direct way to do it through the API can anyone suggest a work around?\n-->\n<p>One obvious workaround is to implement an intermediate step to generate a DWG file from the SAT one.\n\n<p>This can be achieved either using RealDwg or AutoCAD itself, if it happens to be installed on the same machine.\n\n<p>In either case, the description of implementing \n\n<a href=\"http://adndevblog.typepad.com/autocad/2012/05/acisin-and-acisout-in-net.html\">\nACISIN and ACISOUT in .NET</a> might \n\ncome in handy to achieve this.\n\n\n<a name=\"3\"></a>\n<h4>ElementTransformUtils and Family Instance Creation May Force Regeneration</h4>\n<p>If you are facing performance problems generating or manipulation largish models, please be aware that you need to watch out a bit with the ElementTransformUtils class.\nSome of its methods contain built-in regeneration at the end, which is executed regardless of your other regeneration actions.\nFamily instance creation can also force regeneration at times.\nAs always, some research and lots of benchmarking is advisable.\n\n\n<a name=\"4\"></a>\n<h4>AU Registration Savings End October 14</h4>\n<p>The end is near! \n\n<p>Oct 14 is the last chance to save $500 on the Autodesk University 2012 registration.\n\n<p>Prepare thyself and <a href=\"http://au.autodesk.com\">register now</a>.\n\n<p>Hope to see you there!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0842_port_acad_app",
    "header_text": "Importing SAT into Revit",
    "local_header_href": "#importing-sat-into-revit",
    "chunk_text": "<h4>Importing SAT into Revit</h4><p>People now and then ask about programmatically importing a SAT file into Revit.\n\n<p>You can export a SAT file using the API and import an SAT file from the user interface, simply by going through Insert &gt; Import &gt; Import CAD &gt; ACIS SAT Files. \n\n<p>However, the Revit API Import methods only take options for DGN, DWG/DXF, gbXML, and images.\n\n<!--\n<p>In the user interface, this is just a click or two away, via &gt; .\n\n<p>I need to import an SAT file using the API. \n\nI’m really hoping I’m missing something here because I’m on a project that is dependent on the ability to import an SAT file through automation. If there is no direct way to do it through the API can anyone suggest a work around?\n-->\n<p>One obvious workaround is to implement an intermediate step to generate a DWG file from the SAT one.\n\n<p>This can be achieved either using RealDwg or AutoCAD itself, if it happens to be installed on the same machine.\n\n<p>In either case, the description of implementing \n\n<a href=\"http://adndevblog.typepad.com/autocad/2012/05/acisin-and-acisout-in-net.html\">\nACISIN and ACISOUT in .NET</a> might \n\ncome in handy to achieve this.\n\n\n<a name=\"3\"></a>\n<h4>ElementTransformUtils and Family Instance Creation May Force Regeneration</h4>\n<p>If you are facing performance problems generating or manipulation largish models, please be aware that you need to watch out a bit with the ElementTransformUtils class.\nSome of its methods contain built-in regeneration at the end, which is executed regardless of your other regeneration actions.\nFamily instance creation can also force regeneration at times.\nAs always, some research and lots of benchmarking is advisable.\n\n\n<a name=\"4\"></a>\n<h4>AU Registration Savings End October 14</h4>\n<p>The end is near! \n\n<p>Oct 14 is the last chance to save $500 on the Autodesk University 2012 registration.\n\n<p>Prepare thyself and <a href=\"http://au.autodesk.com\">register now</a>.\n\n<p>Hope to see you there!\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0842_port_acad_app",
    "header_text": "ElementTransformUtils and Family Instance Creation May Force Regeneration",
    "local_header_href": "#elementtransformutils-and-family-instance-creation-may-force-regeneration",
    "chunk_text": "<h4>ElementTransformUtils and Family Instance Creation May Force Regeneration</h4><p>If you are facing performance problems generating or manipulation largish models, please be aware that you need to watch out a bit with the ElementTransformUtils class.\nSome of its methods contain built-in regeneration at the end, which is executed regardless of your other regeneration actions.\nFamily instance creation can also force regeneration at times.\nAs always, some research and lots of benchmarking is advisable.\n\n\n<a name=\"4\"></a>\n<h4>AU Registration Savings End October 14</h4>\n<p>The end is near! \n\n<p>Oct 14 is the last chance to save $500 on the Autodesk University 2012 registration.\n\n<p>Prepare thyself and <a href=\"http://au.autodesk.com\">register now</a>.\n\n<p>Hope to see you there!\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0842_port_acad_app",
    "header_text": "AU Registration Savings End October 14",
    "local_header_href": "#au-registration-savings-end-october-14",
    "chunk_text": "<h4>AU Registration Savings End October 14</h4><p>The end is near! \n\n<p>Oct 14 is the last chance to save $500 on the Autodesk University 2012 registration.\n\n<p>Prepare thyself and <a href=\"http://au.autodesk.com\">register now</a>.\n\n<p>Hope to see you there!\n</p></p></p></p>"
  }
]