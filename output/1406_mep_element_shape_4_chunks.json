[
  {
    "original_filename": "1406_mep_element_shape_4",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!---\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\nhttps://forums.autodesk.com/t5/revit-api/ifc-import-level-line-is-automatically-created/m-p/6041440\n11524056 [IFC Import--Level line is automatically created]\n11543951 [IFC Import--Level line is automatically created]\n\n#dotnet #csharp\n#fsharp #python\n#grevit\n#responsivedesign #typepad\n#ah8 #augi #dotnet\n#stingray #rendering\n#3dweb #3dviewAPI #html5 #threejs #webgl #3d #mobile #vr #ecommerce\n#Markdown #Fusion360 #Fusion360Hackathon\n#javascript\n#RestSharp #restAPI\n#mongoosejs #mongodb #nodejs\n#rtceur\n#xaml\n#3dweb #a360 #3dwebaccel #webgl @adskForge\n@AutodeskReCap @Adsk3dsMax\n#revitAPI #bim #aec #3dwebcoder #adsk #adskdevnetwrk @jimquanci @keanw\n#au2015 #rtceur\n#eraofconnection\n#RMS @researchdigisus\n@adskForge #3dwebaccel\n#a360\n\nRevit API, Jeremy Tammik, akn_include\n\nIFC Import Levels and MEP Element Shapes #revitAPI #3dwebcoder @AutodeskRevit #bim #aec #adsk #adskdevnetwrk\n\nI answered far too many threads on the Revit API discussion forum in the past few days to list them all, so I'll just pick out two cases of special interest today\n&ndash; Levels generated by IFC import\n&ndash; Determining MEP duct and pipe element shape...\n\n-->"
  },
  {
    "original_filename": "1406_mep_element_shape_4",
    "header_text": "IFC Import Levels and MEP Element Shapes",
    "local_header_href": "#ifc-import-levels-and-mep-element-shapes",
    "chunk_text": "### IFC Import Levels and MEP Element Shapes\n\nI answered far too many threads on\nthe [Revit API discussion forum](https://forums.autodesk.com/t5/revit-api/bd-p/160) in\nthe past few days to list them all, so I'll just pick out two cases of special interest today:\n\n- [Levels generated by IFC import](#2)\n- [Determining MEP duct and pipe element shape](#3)"
  },
  {
    "original_filename": "1406_mep_element_shape_4",
    "header_text": "<a name=\"2\"></a>Levels Generated by IFC Import",
    "local_header_href": "#a-name2alevels-generated-by-ifc-import",
    "chunk_text": "#### <a name=\"2\"></a>Levels Generated by IFC Import\n\nHere is a little detail to watch out when importing an IFC file: Revit may generate a level for you automatically under certain circumstances.\n\nThis issue was raised by David Robison, [Design Master Electrical RT](http://www.designmaster.biz/revit), in the discussion thread\non [IFC import &ndash; level line is automatically created](https://forums.autodesk.com/t5/revit-api/ifc-import-level-line-is-automatically-created/m-p/6041440):\n\n**Question:** I have an [IFC file](zip/ifc_level_line.zip) to be imported into Revit. When it is imported, a level line at 0 m is included in each elevation. I can turn this off in each elevation manually. Is there a way to suppress it automatically?\n\n<center>\n<img src=\"img/ifc_level_added_1.png\" alt=\"Level added during IFC import\" width=\"600\">\n</center>\n\n**Answer:** Here is the discussion we had on this with the development team:\n\n[Q] Is there any automated way to remove or disable the level added in elevation view by the IFC import?\n\n[A] Revit needs at least one building story. This file doesn’t seem to have any levels in it, so it is creating a default one. This seems to be standard behaviour.\n\n[Q] Does that mean there is no way to automatically disable the default level display? Should I file a wish for it?\n\n[A] I don’t think it would make much sense to make a wish for this. There has to be a level in a Revit file, and default view templates show levels. I might not fully understand his issue, but I am not sure exactly what the wish list item would be.\n\n[Q] The reason it that several levels already exist in the current project, especially there is a “Level 1”. When IFC is imported, it creates another “Level 1” with 0 m elevation, which is redundant.\n\n[A] OK, I think I see the issue here.\n\nIn general, we expect IFC files to have at least one building story in them. If they don’t, we’ll create one.\n\nIf they do, we will reuse the Level 1 already existing in the template to avoid exactly the case below. In this case, though, because we are creating a level – not reading one from the IFC file – we don’t do the matching that we’d normally do.\n\nThe workaround is simple: add a Level 1 to the IFC file.\n\nWe'll deal better with the case where there are no levels in the IFC file in the future."
  },
  {
    "original_filename": "1406_mep_element_shape_4",
    "header_text": "<a name=\"3\"></a>Determining MEP Duct and Pipe Element Shape",
    "local_header_href": "#a-name3adetermining-mep-duct-and-pipe-element-shape",
    "chunk_text": "#### <a name=\"3\"></a>Determining MEP Duct and Pipe Element Shape\n\nThis is an old topic that has been discussed several times in the past, brought up again in the Revit API discussion forum thread\non [how to get duct shape](http://forums.autodesk.com/t5/revit-api/how-to-get-duct-shape/m-p/6053821).\n\nIn the past, we also spent some effort on solving it.\n\nThe solution now is really simple, since the introduction of the ElementType.FamilyName property in the Revit 2015 API:\n\n**Question:** 有没有简单的办法直接获得风管的DuctShape?\n\n我知道接口可以获得shape\n\n*There is no simple way to directly get Duct Shape Duct?*\n\n*I know it can be obtained in the user interface.*\n\n**Answer:** You are asking how to determine the cross sectional shape of a duct element.\n\nThis used to be a pretty hard question, once upon a time, and several different approaches could be taken, e.g. geometrical analysis, as you can see from these previous discussions:\n\n- [Distinguishing MEP Element Shape](http://thebuildingcoder.typepad.com/blog/2011/03/distinguishing-mep-element-shape.html)\n- [Improved MEP Element Shape](http://thebuildingcoder.typepad.com/blog/2011/05/improved-mep-element-shape-and-mount-ararat.html)\n\nAnother way to achieve this is to open the duct fitting family and query the DuctConnector element for its Shape property, as explained by Joe Ye\nin [how to get the duct section shape for duct type object](http://adndevblog.typepad.com/aec/2013/03/how-to-get-the-duct-section-shape-for-duct-type-object.html).\n\nUnfortunately, opening the family is quite a costly operation.\n\nFrom Revit 2015 onwards, the simplest an most effective method to achieve what you need is to query the [ElementType.FamilyName property](http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html#4.05).\n\nIn your case, that might look like this:\n\n<pre class=\"code\">\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> Determine element shape from its </span>\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> element type's family name property.</span>\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n&nbsp; <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetElementShape4(\n&nbsp; &nbsp; <span class=\"teal\">Element</span> e )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"blue\">string</span> shape = <span class=\"maroon\">&quot;unknown&quot;</span>;\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">ElementId</span> tid = e.GetTypeId();\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">if</span>( <span class=\"teal\">ElementId</span>.InvalidElementId != tid )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">Document</span> doc = e.Document;\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">ElementType</span> etyp = doc.GetElement( tid )\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != etyp )\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; shape = etyp.FamilyName;\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"blue\">return</span> shape;\n&nbsp; }\n</pre>\n\nI added this code\nto [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\n[release 2016.0.126.3](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2016.0.126.3),\nin the module [CmdMepElementShape.cs, in lines 721-745](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdMepElementShape.cs#L721-L745).\n\nHere is the result of a test run on the first two elements in this sequence of rectangular ducts and transitions:\n\n<center>\n<img src=\"img/duct_shape_2016_01.png\" alt=\"Two ducts and a transition\" width=\"503\">\n</center>\n\nSelecting the left-most duct:\n\n<center>\n<img src=\"img/duct_shape_2016_02.png\" alt=\"Duct shape and all its connector shapes\" width=\"383\">\n</center>\n\nSelecting the transition in the middle:\n\n<center>\n<img src=\"img/duct_shape_2016_03.png\" alt=\"Duct shape and all its connector shapes\" width=\"398\">\n</center>\n\nCharles Piro chimed in to the discussion and suggested querying the shape of each duct connector like this:\n\n<pre class=\"code\">\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> Return shape of first end connector on given duct.</span>\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n&nbsp; <span class=\"blue\">public</span> <span class=\"teal\">ConnectorProfileType</span> GetShape( <span class=\"teal\">Duct</span> duct )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"teal\">ConnectorProfileType</span> ductShape\n&nbsp; &nbsp; &nbsp; = <span class=\"teal\">ConnectorProfileType</span>.Invalid;\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">in</span> duct.ConnectorManager.Connectors )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( c.ConnectorType == <span class=\"teal\">ConnectorType</span>.End )\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; ductShape = c.Shape;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">break</span>;\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"blue\">return</span> ductShape;\n&nbsp; }\n</pre>\n\nI modified that to return the shapes of all duct connectors like this:\n\n<pre class=\"code\">\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> Return shape of all duct connectors.</span>\n&nbsp; <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n&nbsp; <span class=\"blue\">static</span> <span class=\"teal\">ConnectorProfileType</span>[] GetProfileTypes(\n&nbsp; &nbsp; <span class=\"teal\">Duct</span> duct )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"teal\">ConnectorSet</span> connectors\n&nbsp; &nbsp; &nbsp; = duct.ConnectorManager.Connectors;\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">int</span> n = connectors.Size;\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">ConnectorProfileType</span>[] profileTypes\n&nbsp; &nbsp; &nbsp; = <span class=\"blue\">new</span> <span class=\"teal\">ConnectorProfileType</span>[n];\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">int</span> i = 0;\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c <span class=\"blue\">in</span> connectors )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; profileTypes[i++] = c.Shape;\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"blue\">return</span> profileTypes;\n&nbsp; }\n</pre>\n\nReporting the result of this method as well produces the following on the first rectangular duct, informing us of the shapes of the duct itself as well as all its connectors:\n\n<center>\n<img src=\"img/duct_shape_2016_04.png\" alt=\"Duct shape and all its connector shapes\" width=\"366\">\n</center>\n\nThe result for the transition is basically the same as before; since it is not a duct, its connectors are not accessed:\n\n<center>\n<img src=\"img/duct_shape_2016_05.png\" alt=\"Transition connectors are currently not explored\" width=\"366\">\n</center>\n\nOf course, you can very easily enhance the `GetProfileTypes` method to handle other MEP element types as well besides ducts.\n\nThat is left as an exercise to the reader &nbsp; :-)\n\nThe updated [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\n[release 2016.0.126.4](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2016.0.126.4) includes Charles' suggestion as well."
  }
]