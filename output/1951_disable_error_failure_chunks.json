[
  {
    "original_filename": "1951_disable_error_failure",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- https://www.revitapidocs.com/2023/\n\n- [Upgrading Revit API Apps For Newer Revit Versions](https://revthat.com/upgrading-revit-api-apps-for-newer-revit-versions)\n  Eric Boehlke truevis\n\n- Disable error with 'Error' severity\n  https://forums.autodesk.com/t5/revit-api-forum/disable-error-with-error-severity/m-p/11004220\n\ntwitter:\n\nUpdated #RevitAPI documentation for Revit 2023 and a deep dive into the mysteries and pitfalls of the Failure API to disable a failure with error severity @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/errorfailure\n\nWe continue updating all systems the new release and take a deep dive into the mysteries and pitfalls of the Failure API\n&ndash; RevitApiDocs support for Revit 2023\n&ndash; Migrating add-ins to Revit 2023\n&ndash; Disable failure with error severity...\n\nlinkedin:\n\nUpdated #RevitAPI documentation for Revit 2023 and a deep dive into the mysteries and pitfalls of the Failure API to disable a failure with error severity\n\nhttps://autode.sk/errorfailure\n\nWe continue updating all systems the new release:\n\n- RevitApiDocs support for Revit 2023\n- Migrating add-ins to Revit 2023\n- Disable failure with error severity...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1951_disable_error_failure",
    "header_text": "Revit 2023 API Docs and Disabling an Error Failure",
    "local_header_href": "#revit-2023-api-docs-and-disabling-an-error-failure",
    "chunk_text": "### Revit 2023 API Docs and Disabling an Error Failure\n\nWe continue updating all systems for the new release and take a deep dive into the mysteries and pitfalls of the Failure API:\n\n- [RevitApiDocs support for Revit 2023](#2)\n- [Migrating add-ins to Revit 2023](#3)\n- [Disable failure with error severity](#4)"
  },
  {
    "original_filename": "1951_disable_error_failure",
    "header_text": "RevitApiDocs Support for Revit 2023",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> RevitApiDocs Support for Revit 2023\n\n[Gui Talarico](https://twitter.com/gtalarico) updated the online Revit API documentation for Revit 2023, both:\n\n- [apidocs](https://apidocs.co/apps/revit/2023/d4648875-d41a-783b-d5f4-638df39ee413.htm) and\n- [revitapidocs](https://www.revitapidocs.com)\n\nNotifications of new features are pubished on twitter at:\n\n- [@ApiDocsCo](https://twitter.com/ApiDocsCo) and\n- [@RevitApiDocs](https://twitter.com/RevitApiDocs)\n\nVery many thanks to Gui for all his work on these invaluable resources, and the fast turn-around time for the Revit 2023 API!\n\n<center>\n<img src=\"img/revitapidocs2023.png\" alt=\"Revit API Docs 2023\" title=\"Revit API Docs 2023\" width=\"600\"/> <!-- 1000 -->\n</center>"
  },
  {
    "original_filename": "1951_disable_error_failure",
    "header_text": "Migrating Add-Ins to Revit 2023",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Migrating Add-Ins to Revit 2023\n\nEric Boehlke of [truevis BIM Consulting](https://truevis.com) shares\nhis experience and detailed illustrated process\nof [upgrading Revit API apps for newer Revit versions](https://revthat.com/upgrading-revit-api-apps-for-newer-revit-versions).\n\nFor The Building Coder's notes on the topic this time around, please simply search this site\nfor [migration 2023](https://www.google.com/search?q=migration+2023&as_sitesearch=thebuildingcoder.typepad.com)."
  },
  {
    "original_filename": "1951_disable_error_failure",
    "header_text": "Disable Failure with Error Severity",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Disable Failure with Error Severity\n\nWe discussed numerous solutions \nfor [detecting and automatically handling dialogues and failures](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.32).\nThe Failure API is a great help in many cases.\nHandling warnings can be achieved using a [warning swallower](http://thebuildingcoder.typepad.com/blog/2016/09/warning-swallower-and-roomedit3d-viewer-extension.html#2).\nAlexander [@aignatovich](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1257478) [@CADBIMDeveloper](https://github.com/CADBIMDeveloper) Ignatovich, aka Александр Игнатович,\nexplains how non-warning errors can also be handled in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [disabling error with `Error`  severity](https://forums.autodesk.com/t5/revit-api-forum/disable-error-with-error-severity/m-p/11004220):\n\n**Question:** I have a specific failure that I want to disable.\n\nI'm able to 'catch' the error with the `FailuresProcessing` event.\n\nThe problem is that I can't find a way to disable or delete the error.\n\n`DeleteWarning` only works for `Warning` severity, and my failure is `Error` severity.\n\nIn the user interface, I'd click `Cancel` on the popup message &ndash; it's the message that warns that deleting a part will cause other parts to be deleted.\n\nMy goal is to not show this error.\nI'm cancelling the operation itself by posting another failure message saying \"operation was cancelled\", but the warning of 'deleting part will cause other part to be deleted' is still shown.\n\nMy goal is to not show this error message from the start.\nIn the end, I am not performing the deletion &ndash; I'm blocking it with creating my own error using FailuresProcessing as mentioned above.\nSo, I want to prevent from this error from appearing in the first place.\n\n**Answer:** You could try to either resolve the failure or roll back the transaction.\n\nIf so, you could try to delete elements automatically in your failure preprocessor:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(failureAccessor.HasResolutionOfType(\n&nbsp;&nbsp;&nbsp;&nbsp;FailureResolutionType.DeleteElements))\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;failureAccessor.SetCurrentResolutionType(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureResolutionType.DeleteElements);\n \n&nbsp;&nbsp;&nbsp;&nbsp;failuresAccessor.ResolveFailure(failureAccessor);\n&nbsp;&nbsp;}\n</pre>\n\nYou should return `FailureProcessingResult.ProceedWithCommit` if you set resolution type.\n\nThis failure preprocessor solves a bit different task, but I think it could help you:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">AutoDetachOrDeleteFailurePreprocessor</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;IFailuresPreprocessor\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;FailureProcessingResult&nbsp;<span style=\"color:#74531f;\">PreprocessFailures</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailuresAccessor&nbsp;<span style=\"color:#1f377f;\">failuresAccessor</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">preprocessorMessages</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;failuresAccessor.GetFailureMessages(FailureSeverity.Error)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Union(failuresAccessor.GetFailureMessages(FailureSeverity.Warning))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(<span style=\"color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;x.HasResolutionOfType(FailureResolutionType.DeleteElements)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;x.HasResolutionOfType(FailureResolutionType.DetachElements))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToList();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(preprocessorMessages.Count&nbsp;==&nbsp;0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;FailureProcessingResult.Continue;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">foreach</span>&nbsp;(var&nbsp;<span style=\"color:#1f377f;\">failureAccessor</span>&nbsp;<span style=\"color:#8f08c4;\">in</span>&nbsp;preprocessorMessages)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureAccessor.SetCurrentResolutionType(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureAccessor.HasResolutionOfType(FailureResolutionType.DetachElements)&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;FailureResolutionType.DetachElements&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;FailureResolutionType.DeleteElements);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failuresAccessor.ResolveFailure(failureAccessor);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;FailureProcessingResult.ProceedWithCommit;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nIf you can't resolve the error with FailureResolutionType.DeleteElements, then you can return `FailureProcessingResult.ProceedWithRollBack`.\n\nIn that case, you have to set:\n\n<pre class=\"code\">\n  failureOptions.SetClearAfterRollback(true);\n</pre>\n\nfor your transaction.\n\n**Response:** I'll explain my workflow with more details:\n\n- I'm successfully preventing the users from deleting parts that have a specific scheme I made\n- No deletion is done whatsoever. Which is good &ndash; that was my goal\n- Although no deletion is done, the user still gets this warning\n\nI want to hide it because it can be confusing to my user.\nThe problem is that the severity of this message is `Error` and not warning, and therefore I can't use the Failure Accessor `DeleteWarning` method.\n\nSo my question is: Is is possible to prevent showing failures of `Error` severity?\n\n<center>\n<img src=\"img/suppress_error_failure.png\" alt=\"Error failure\" title=\"Error failure\" width=\"410\" height=\"200\"/>\n</center>\n\n**Answer:** Failures with `Error` severity cannot be \"swallowed\".\nThey should be resolved using some resolution type (if supported) or by transition rollback.\nIf the transaction is rolled back and you don't want to see messages in the UI, you should set clear after rolling back transaction option.\n\n**Response:** I tried returning `ProceedWithCommit`, but the error still appears...\nalthough I think I'm getting closer.\n\nBut there's nothing to rollback, because the transaction (deletion) didn't happen yet.\nThat's what the error warns me about.\nI'm trying to return `ProceedWithCommit` and `Continue`, and still no success.\n\nThis is my `PreprocessFailures`;\nI'm getting into the `for` loop, and inside my `if` statement.\nAnd, of course, returning `ProceedWithRollback`.\nThe error still appears:\n\n<pre class=\"code\">\n  public FailureProcessingResult PreprocessFailures(FailuresAccessor failuresAccessor)\n    {\n      IList<FailureMessageAccessor> failList = new List<FailureMessageAccessor>();\n      failList = failuresAccessor.GetFailureMessages(); // Inside event handler, get all warnings\n\n      foreach (FailureMessageAccessor failure in failList)\n      {\n        FailureDefinitionId failID = failure.GetFailureDefinitionId();\n        if (failID == BuiltInFailures.DPartFailures.DeletingDPartWillDeleteMorePartsError)\n        {\n          failure.SetCurrentResolutionType(FailureResolutionType.Default);\n          failuresAccessor.ResolveFailure(failure);\n          failuresAccessor.GetFailureHandlingOptions().SetClearAfterRollback(true);\n          return FailureProcessingResult.ProceedWithRollBack;\n        }\n      }\n\n      return FailureProcessingResult.Continue;\n    }\n</pre>\n\n**Answer:** From the API dopcumentation on `FailureResolutionType`:\n\n> Default &ndash; Special (reserved) type. It cannot be used as a type when defining a resolution, but can be used as a key to query default resolution from FailureMessage or FailureDefinition.\n\nI don't think you have to call `ResolveFailure` if you want to rollback the transaction.\n\nI would try to set \"clear after rollback\" through transaction options before starting the transaction, e.g.:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">failureOptions</span>&nbsp;=&nbsp;transaction.GetFailureHandlingOptions();\n&nbsp;&nbsp;failureOptions.SetClearAfterRollback(<span style=\"color:blue;\">true</span>);\n&nbsp;&nbsp;<span style=\"color:green;\">//...</span>\n&nbsp;&nbsp;transaction.SetFailureHandlingOptions(failureOptions);\n&nbsp;&nbsp;transaction.Start();\n</pre>\n\n**Response:** But I'm not starting any transaction... at any point.\n\nThis method is triggered by the user when she tries to delete an element (that's what I want).\nI'm preventing the user from deleting the element (Raising a different error saying \"Operation is cancelled\").\nI just don't want to get the error I attached in the picture a few comments above.\n\n**Answer:** Do you use the `Application.RegisterFailuresProcessor` method?\n\nPersonally, I would suggest avoiding this...\n\nFrom the API docs:\n\n> Replaces Revit's default user interface (if present) with alternative handling for all warnings and errors (including those not generated by your application) for the rest of the Revit session; if your application is not prepared to respond to all warnings and errors, consider use of IFailuresPreprocessor (in your opened Transaction) or the FailuresProcessing event instead of this interface.\n \nI think a better idea would be to subscribe to `Application.FailuresProcessing` event.\n \nThen &ndash; yes, set \"clear after rollback\" as you did.\n\n**Respnse:** I am registered to `FailuresProcessing`:\n\n<pre class=\"code\">\n&nbsp;&nbsp;uiControlledApplication.ControlledApplication.FailuresProcessing&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;+=&nbsp;ControlledApplication_FailuresProcessing;\n</pre>\n\nAnd it still shows the error.\n\nI am also using `IFailuresPreprocessor`:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">FailuresPreProcessor</span>&nbsp;:&nbsp;IFailuresPreprocessor\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;FailureProcessingResult&nbsp;<span style=\"color:#74531f;\">PreprocessFailures</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailuresAccessor&nbsp;<span style=\"color:#1f377f;\">failuresAccessor</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IList&lt;FailureMessageAccessor&gt;&nbsp;<span style=\"color:#1f377f;\">failList</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;FailureMessageAccessor&gt;();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Inside&nbsp;event&nbsp;handler,&nbsp;get&nbsp;all&nbsp;warnings</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failList&nbsp;=&nbsp;failuresAccessor.GetFailureMessages();&nbsp;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">foreach</span>&nbsp;(FailureMessageAccessor&nbsp;<span style=\"color:#1f377f;\">failure</span>&nbsp;<span style=\"color:#8f08c4;\">in</span>&nbsp;failList)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureDefinitionId&nbsp;<span style=\"color:#1f377f;\">failID</span>&nbsp;=&nbsp;failure.GetFailureDefinitionId();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(failID&nbsp;==&nbsp;BuiltInFailures.DPartFailures\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.DeletingDPartWillDeleteMorePartsError)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failure.SetCurrentResolutionType(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureResolutionType.Others);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failuresAccessor.GetFailureHandlingOptions()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SetClearAfterRollback(<span style=\"color:blue;\">true</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failuresAccessor.ResolveFailure(failure);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;FailureProcessingResult\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ProceedWithRollBack;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;FailureProcessingResult.Continue;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nThanks so much for trying to help. I appreciate it! \n\n**Answer:** I guess you should pick one.\nHave you tried to remove `ResolveFailure` and leave only:\n\n<pre class=\"code\">\n  return FailureProcessingResult.ProceedWithRollBack;\n</pre>\n\n?\n\n**Response:** What do you mean by 'pick one'?\n\nI tried to return `ProceedWithRollBack` and removing `ResolveFailure` &ndash; didn't help.\n\n**Answer:** Pick one means: choose either an application level failure processor (as for me &ndash; it's a bad choice) or a failure processing event.\n\nCould you prepare a simple reproducible case: addin + model + what to do to reproduce?\n\n**Response:** Yep, I'm using a failure processing event.\n\nI am doing multiple things but let's focus only on the problem:\nThe goal is this:\nWhen the user tries to delete a part (That was created in the past by my code and has a schema I made), raise a popup saying he can't do that and block the deletion.\nI am doing that successfully!\nIn addition to blocking the deletion, I don't want the error message I attached yesterday to be shown, so there won't be a confusion.\n\nTo block the deletion, I have a class which inherits from `IUpdater` and uses a `FailureDefinition` GUID that I registered when Revit loads:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">SplitElementUpdater</span>&nbsp;:&nbsp;IUpdater\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;AddInId&nbsp;m_appId;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;UpdaterId&nbsp;m_updaterId;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Finds&nbsp;the&nbsp;failure&nbsp;definition&nbsp;id&nbsp;based&nbsp;on&nbsp;a&nbsp;constant&nbsp;GUID</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">returns</span><span style=\"color:gray;\">&gt;&lt;/</span><span style=\"color:gray;\">returns</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;FailureDefinitionId&nbsp;<span style=\"color:#74531f;\">GetFailureDefinitionId</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureDefinitionRegistry&nbsp;<span style=\"color:#1f377f;\">failureDefinitionRegistry</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;Autodesk.Revit.ApplicationServices.Application\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetFailureDefinitionRegistry();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureDefinitionId&nbsp;<span style=\"color:#1f377f;\">FailureDefinitionId</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;FailureDefinitionId(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureDefinitionIdGuid.Value);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;failureDefinitionRegistry\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.FindFailureDefinition(FailureDefinitionId)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetId();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;FailureDefinitionId&nbsp;_failureId&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;GetFailureDefinitionId();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;constructor&nbsp;takes&nbsp;the&nbsp;AddInId&nbsp;for&nbsp;the&nbsp;add-in&nbsp;associated&nbsp;with&nbsp;this&nbsp;updater</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">SplitElementUpdater</span>(AddInId&nbsp;<span style=\"color:#1f377f;\">id</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_appId&nbsp;=&nbsp;id;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_updaterId&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;UpdaterId(m_appId,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Guid.NewGuid());\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"color:#74531f;\">Execute</span>(UpdaterData&nbsp;<span style=\"color:#1f377f;\">data</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">try</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;<span style=\"color:#1f377f;\">doc</span>&nbsp;=&nbsp;data.GetDocument();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ICollection&lt;ElementId&gt;&nbsp;<span style=\"color:#1f377f;\">changedElements</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;data.GetModifiedElementIds().Concat(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.GetDeletedElementIds()).ToList();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DialogResult&nbsp;<span style=\"color:#1f377f;\">userResult</span>&nbsp;=&nbsp;MessageBox.Show(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;You&nbsp;are&nbsp;trying&nbsp;to&nbsp;edit&nbsp;a&nbsp;part&nbsp;which&nbsp;was&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;divided&nbsp;by&nbsp;an&nbsp;automation&nbsp;tool.&nbsp;To&nbsp;edit&nbsp;this&nbsp;part,&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;first&nbsp;revert&nbsp;the&nbsp;division,&nbsp;then&nbsp;edit&nbsp;the&nbsp;part&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;normally.&nbsp;Do&nbsp;you&nbsp;wish&nbsp;to&nbsp;open&nbsp;the&nbsp;“Surface&nbsp;Split”&nbsp;tool?&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;&quot;</span>,&nbsp;MessageBoxButtons.OKCancel);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(userResult.Equals(DialogResult.OK))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RevitDBUtils.InitializeStaticUtils(doc,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RevitDBUtils.uidoc,&nbsp;RevitDBUtils.uiapp,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RevitDBUtils.dllFolder,&nbsp;eDiscipline.Architectural);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RevitDBUtils.ExecuteMethodInEvent(()&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SurfaceSplitTabsWindow&nbsp;<span style=\"color:#1f377f;\">window</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;SurfaceSplitTabsWindow(1);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.Show();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;<span style=\"color:#a31515;\">&quot;Open&nbsp;Revert&nbsp;Surface&nbsp;Split&nbsp;window&quot;</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;a&nbsp;failure&nbsp;message&nbsp;that&nbsp;will&nbsp;cancel&nbsp;the&nbsp;operation</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureMessage&nbsp;<span style=\"color:#1f377f;\">failureMessage</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;FailureMessage(_failureId);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureMessage.SetFailingElements(changedElements);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc.PostFailure(failureMessage);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">catch</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"color:#74531f;\">GetAdditionalInformation</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#a31515;\">&quot;Surface&nbsp;Split&nbsp;Updater&nbsp;for&nbsp;preventing&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;modifying&nbsp;elements&nbsp;divided&nbsp;by&nbsp;Surface&nbsp;Split&quot;</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;ChangePriority&nbsp;<span style=\"color:#74531f;\">GetChangePriority</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;ChangePriority.FreeStandingComponents;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;UpdaterId&nbsp;<span style=\"color:#74531f;\">GetUpdaterId</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;m_updaterId;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"color:#74531f;\">GetUpdaterName</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;<span style=\"color:#a31515;\">&quot;Surface&nbsp;Split&nbsp;Updater&quot;</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nThis class works as expected and blocks the deletion; I'm setting up the trigger here:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;UpdaterId&nbsp;<span style=\"color:#74531f;\">SurfaceSplitElementUpdaterSetup</span>(AddInId&nbsp;<span style=\"color:#1f377f;\">addinId</span>,&nbsp;Document&nbsp;<span style=\"color:#1f377f;\">doc</span>)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;SplitElementUpdater&nbsp;<span style=\"color:#1f377f;\">splitUpdater</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;SplitElementUpdater(addinId);<span style=\"color:green;\">//Create&nbsp;a&nbsp;surface&nbsp;split&nbsp;updater&nbsp;for&nbsp;alerting&nbsp;on&nbsp;modified&nbsp;divided&nbsp;elements</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;UpdaterRegistry.RegisterUpdater(splitUpdater);<span style=\"color:green;\">//register&nbsp;the&nbsp;updater</span>\n&nbsp;&nbsp;&nbsp;&nbsp;UpdaterRegistered&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Creating&nbsp;filters&nbsp;for&nbsp;the&nbsp;updater:</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;ElementMulticategoryFilter&nbsp;<span style=\"color:#1f377f;\">catFilter</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ElementMulticategoryFilter(<span style=\"color:blue;\">new</span>&nbsp;List&lt;BuiltInCategory&gt;&nbsp;{&nbsp;BuiltInCategory.OST_Parts&nbsp;});<span style=\"color:green;\">//Create&nbsp;categories&nbsp;filter</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;ExtensibleStorageFilter&nbsp;<span style=\"color:#1f377f;\">extensibleStorageFilter</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ExtensibleStorageFilter(SplitFlag.GetGuid());\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//Create&nbsp;extensible&nbsp;storage&nbsp;filter&nbsp;of&nbsp;elements&nbsp;with&nbsp;the&nbsp;Surface&nbsp;split&nbsp;Element&nbsp;Info&nbsp;Guid</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;LogicalAndFilter&nbsp;<span style=\"color:#1f377f;\">bothFilters</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;LogicalAndFilter(catFilter,&nbsp;extensibleStorageFilter);<span style=\"color:green;\">//combine&nbsp;both&nbsp;filters&nbsp;to&nbsp;a&nbsp;single&nbsp;filter</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;ChangeType&nbsp;<span style=\"color:#1f377f;\">elementDeletion</span>&nbsp;=&nbsp;Element.GetChangeTypeElementDeletion();<span style=\"color:green;\">//the&nbsp;change&nbsp;type&nbsp;of&nbsp;an&nbsp;element&nbsp;deletion</span>\n&nbsp;&nbsp;&nbsp;&nbsp;ChangeType&nbsp;<span style=\"color:#1f377f;\">geometryChange</span>&nbsp;=&nbsp;Element.GetChangeTypeGeometry();<span style=\"color:green;\">//the&nbsp;change&nbsp;type&nbsp;of&nbsp;a&nbsp;geometry&nbsp;change</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;UpdaterId&nbsp;<span style=\"color:#1f377f;\">updaterId</span>&nbsp;=&nbsp;splitUpdater.GetUpdaterId();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//We&nbsp;want&nbsp;to&nbsp;trigger&nbsp;when&nbsp;changing&nbsp;some&nbsp;of&nbsp;the&nbsp;params:</span>\n&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Parameter&gt;&nbsp;<span style=\"color:#1f377f;\">parameters</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;Parameter&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;parameters.Add(GetPanelIDUtils.GetPanelIdParameter(doc));\n&nbsp;&nbsp;&nbsp;&nbsp;parameters.Add(GetFromDocUtils.GetParameter(ParametersConstants.FACTORY,&nbsp;doc));\n&nbsp;&nbsp;&nbsp;&nbsp;parameters.Add(GetFromDocUtils.GetParameter(ParametersConstants.MATERIAL,&nbsp;doc));\n&nbsp;&nbsp;&nbsp;&nbsp;parameters.Add(GetFromDocUtils.GetParameter(BuiltInParameter.ROOF_BASE_LEVEL_PARAM,&nbsp;doc));\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">foreach</span>&nbsp;(Parameter&nbsp;<span style=\"color:#1f377f;\">parameter</span>&nbsp;<span style=\"color:#8f08c4;\">in</span>&nbsp;parameters)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(parameter&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChangeType&nbsp;<span style=\"color:#1f377f;\">paramChange</span>&nbsp;=&nbsp;Element.GetChangeTypeParameter(parameter);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UpdaterRegistry.AddTrigger(updaterId,&nbsp;bothFilters,&nbsp;paramChange);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;add&nbsp;the&nbsp;triggers&nbsp;for&nbsp;the&nbsp;updater</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;UpdaterRegistry.AddTrigger(updaterId,&nbsp;bothFilters,&nbsp;elementDeletion);\n&nbsp;&nbsp;&nbsp;&nbsp;UpdaterRegistry.AddTrigger(updaterId,&nbsp;bothFilters,&nbsp;geometryChange);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;splitUpdater.GetUpdaterId();\n&nbsp;&nbsp;}\n</pre>\n\nAll of this is fine!\n\nAnd now, the problem:\n\nWe know we can't swallow the error because it's of 'error' severity, but I'm unable to resolve it as well.\n\nI tried with and without resolve failure, tried proceeding with commit and continue, nothing worked.\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;FailureProcessingResult&nbsp;<span style=\"color:#74531f;\">PreprocessFailures</span>(FailuresAccessor&nbsp;<span style=\"color:#1f377f;\">failuresAccessor</span>)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;IList&lt;FailureMessageAccessor&gt;&nbsp;<span style=\"color:#1f377f;\">failList</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;FailureMessageAccessor&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;failList&nbsp;=&nbsp;failuresAccessor.GetFailureMessages();&nbsp;<span style=\"color:green;\">//&nbsp;Inside&nbsp;event&nbsp;handler,&nbsp;get&nbsp;all&nbsp;warnings</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">foreach</span>&nbsp;(FailureMessageAccessor&nbsp;<span style=\"color:#1f377f;\">failure</span>&nbsp;<span style=\"color:#8f08c4;\">in</span>&nbsp;failList)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureDefinitionId&nbsp;<span style=\"color:#1f377f;\">failID</span>&nbsp;=&nbsp;failure.GetFailureDefinitionId();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(failID&nbsp;==&nbsp;BuiltInFailures.DPartFailures.DeletingDPartWillDeleteMorePartsError)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failure.SetCurrentResolutionType(FailureResolutionType.Default);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failuresAccessor.GetFailureHandlingOptions().SetClearAfterRollback(<span style=\"color:blue;\">true</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//failuresAccessor.ResolveFailure(failure);</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TransactionStatus&nbsp;<span style=\"color:#1f377f;\">a</span>&nbsp;=&nbsp;failuresAccessor.RollBackPendingTransaction();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;FailureProcessingResult.ProceedWithRollBack;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;FailureProcessingResult.Continue;\n&nbsp;&nbsp;}\n</pre>\n\nThank you!\n\n**Answer:** Try something like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">RevitApplication</span>&nbsp;:&nbsp;IExternalApplication\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;SyntheticFailureReplacement&nbsp;failureReplacement;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;Result&nbsp;<span style=\"color:#74531f;\">OnStartup</span>(UIControlledApplication&nbsp;<span style=\"color:#1f377f;\">application</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureReplacement&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;SyntheticFailureReplacement();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application.ControlledApplication.FailuresProcessing&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+=&nbsp;ControlledApplicationOnFailuresProcessing;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;Result.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;Result&nbsp;<span style=\"color:#74531f;\">OnShutdown</span>(UIControlledApplication&nbsp;<span style=\"color:#1f377f;\">application</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application.ControlledApplication.FailuresProcessing&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-=&nbsp;ControlledApplicationOnFailuresProcessing;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;Result.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"color:#74531f;\">ControlledApplicationOnFailuresProcessing</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">object</span>&nbsp;<span style=\"color:#1f377f;\">sender</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailuresProcessingEventArgs&nbsp;<span style=\"color:#1f377f;\">e</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">failuresAccessor</span>&nbsp;=&nbsp;e.GetFailuresAccessor();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">failureMessages</span>&nbsp;=&nbsp;failuresAccessor\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetFailureMessages(FailureSeverity.Error)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(<span style=\"color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;x.GetFailureDefinitionId()&nbsp;==&nbsp;BuiltInFailures\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.DPartFailures.DeletingDPartWillDeleteMorePartsError)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToList();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(failureMessages.Any())\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">failureHandlingOptions</span>&nbsp;=&nbsp;failuresAccessor\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetFailureHandlingOptions();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureHandlingOptions.SetClearAfterRollback(<span style=\"color:blue;\">true</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failuresAccessor.SetFailureHandlingOptions(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureHandlingOptions);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.SetProcessingResult(FailureProcessingResult\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ProceedWithRollBack);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureReplacement.PostFailure(failureMessages\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SelectMany(<span style=\"color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;x.GetFailingElementIds()));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">SyntheticFailureReplacement</span>&nbsp;:&nbsp;IExternalEventHandler\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;ExternalEvent&nbsp;externalEvent;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;List&lt;ElementId&gt;&nbsp;failingElementIds&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;ElementId&gt;();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">readonly</span>&nbsp;FailureDefinitionId&nbsp;failureDefinitionId&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;FailureDefinitionId(<span style=\"color:blue;\">new</span>&nbsp;Guid(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;bc0dc2ef-d928-42e4-9c9b-521cb822d3fd&quot;</span>));\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">SyntheticFailureReplacement</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;externalEvent&nbsp;=&nbsp;ExternalEvent.Create(<span style=\"color:blue;\">this</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FailureDefinition.CreateFailureDefinition(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureDefinitionId,&nbsp;FailureSeverity.Warning,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;My&nbsp;accurate&nbsp;message&nbsp;replacement&quot;</span>);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"color:#74531f;\">PostFailure</span>(IEnumerable&lt;ElementId&gt;&nbsp;<span style=\"color:#1f377f;\">failingElements</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failingElementIds.Clear();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failingElementIds.AddRange(failingElements);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;externalEvent.Raise();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"color:#74531f;\">Execute</span>(UIApplication&nbsp;<span style=\"color:#1f377f;\">app</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">document</span>&nbsp;=&nbsp;app.ActiveUIDocument.Document;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">transaction</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Transaction(document,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;auxiliary&nbsp;transaction&quot;</span>))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">failureHandlingOptions</span>&nbsp;=&nbsp;transaction\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetFailureHandlingOptions();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureHandlingOptions.SetForcedModalHandling(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">false</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.SetFailureHandlingOptions(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureHandlingOptions);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Start();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">failureMessage</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;FailureMessage(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureDefinitionId);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failureMessage.SetFailingElements(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;failingElementIds);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.PostFailure(failureMessage);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;<span style=\"color:#74531f;\">GetName</span>()&nbsp;=&gt;&nbsp;nameof(SyntheticFailureReplacement);\n&nbsp;&nbsp;}\n</pre>\n\n**Response:** Worked like a charm. Thanks!\n\nMany thanks to Alexander for his deep expertise in this area, and above all for his super-human patience providing such detailed guidance!"
  }
]