[
  {
    "original_filename": "1720_prepare_da4r",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\ntwitter:\n\nPreparing a Revit Add-in for Forge Design Automation #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/da4rprep\n\nToday I discuss the next step in my IfcSpaceZoneBoundaries project, how to prepare a Revit add-in for use in the DA4R\nor Design Automation for Revit environment and figuring out how to best handle it in the VS solution\n&ndash; Context, add-in functionality and history\n&ndash; Preparing the add-in for DA4R\n&ndash; Local testing versus live deployment\n&ndash; User defined input arguments for DA4R\n&ndash; Logging of results...\n\nlinkedin:\n\nPreparing a Revit add-in for Forge Design Automation #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon \n\nToday I discuss the next step in my IfcSpaceZoneBoundaries project, how to prepare a Revit add-in for use in the DA4R\nor Design Automation for Revit environment and figuring out how to best handle it in the VS solution:\n\n- Context, add-in functionality and history\n- Preparing the add-in for DA4R\n- Local testing versus live deployment\n- User defined input arguments for DA4R\n- Logging of results...\n\nhttp://bit.ly/da4rprep\n\nof [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2019.0.145.4).\n\n-->"
  },
  {
    "original_filename": "1720_prepare_da4r",
    "header_text": "Preparing a Revit Add-in for Design Automation",
    "local_header_href": "#preparing-a-revit-add-in-for-design-automation",
    "chunk_text": "### Preparing a Revit Add-in for Design Automation\n\nToday I discuss the next step in\nmy [IfcSpaceZoneBoundaries project](https://github.com/jeremytammik/IfcSpaceZoneBoundaries).\n\nThis step deals with a completely different aspect than the previous discussions:\nhow to prepare a Revit add-in for use in the DA4R\nor [Design Automation for Revit](https://forge.autodesk.com/en/docs/design-automation/v3) environment,\nwhich [entered public beta](https://thebuildingcoder.typepad.com/blog/2019/01/design-automation-for-revit-in-public-beta.html) just last week.\n\nI spent a considerable part of last weekend getting the DA4R version ready for testing, and figuring out how to best handle it in the VS solution:\n\n- [Context, add-in functionality and history](#2) \n- [Preparing the add-in for DA4R](#3) \n- [Local testing versus live deployment](#4) \n- [User defined input arguments for DA4R](#5) \n- [Logging of results](#6)"
  },
  {
    "original_filename": "1720_prepare_da4r",
    "header_text": "<a name=\"2\"></a> Context, Add-In Functionality and History",
    "local_header_href": "#a-name2a-context-add-in-functionality-and-history",
    "chunk_text": "#### <a name=\"2\"></a> Context, Add-In Functionality and History\n\nFirst, let's reiterate and update description of the architecture and data flow.\n\nThe add-in functionality that we wish to make use of in the DA4R environment consists in opening a Revit file, extracting the room and zone data stored in it and saving that to CSV.\n\nThe Revit document is actually an `.ifc.RVT` file created by the IFC linking-in process, currently executed on the desktop.\n\nAs it stands now, the `.ifc.RVT` file has to be generated by linking in the IFC file using a standard Revit add-in on the desktop, because the required functionality provided by the [revit-ifc open source](https://github.com/Autodesk/revit-ifc) is not yet available in DA4R:\n \n- DA4R currently does not support IFC &ndash; I raised a development request for that.\n- Therefore, the IFC processing currently has to take place in a Revit add-in on the desktop, described\nin [linking in an IFC file programmatically](https://thebuildingcoder.typepad.com/blog/2019/02/link-in-and-analyse-ifc-file-zones-and-spaces.html#3)\n- The IFC linking generates a `.ifc.RVT` file.\n- The `.ifc.RVT` can be uploaded to DA4R and processed there. This requires no IFC functionality.\n \nUnfortunately, in this scenario, the IFC linking-in step takes place on the desktop, not in DA4R.\nSince the add-in implements it, it can be fully automated.\nA more direct solution would be to implement an IFC parser and extract the required information directly from there, bypassing the Revit conversion for that step.\n\nPlease also refer to these previous discussions leading up to where we are with this today:\n\n- [Exporting room boundaries to CSV](https://thebuildingcoder.typepad.com/blog/2019/01/room-boundaries-to-csv-and-wpf-template.html)\n- [Retrieving linked `IfcZone` elements using Python](https://thebuildingcoder.typepad.com/blog/2019/01/retrieving-linked-ifczone-elements-using-python.html)\n- [Linking in and analysing IFC file zones and spaces](https://thebuildingcoder.typepad.com/blog/2019/02/link-in-and-analyse-ifc-file-zones-and-spaces.html)"
  },
  {
    "original_filename": "1720_prepare_da4r",
    "header_text": "<a name=\"3\"></a> Preparing the Add-In for DA4R",
    "local_header_href": "#a-name3a-preparing-the-add-in-for-da4r",
    "chunk_text": "#### <a name=\"3\"></a> Preparing the Add-In for DA4R\n\nI spent some thought on how to best prepare the existing add-in project for creating the DA4R version.\n\nCreate a separate branch in GitHub?\nDefine compile-time switches?\nImplement a multi-target Visual Studio project?\n\nIn the end, I decided that the simplest and most obvious approach would probably be best:\n\n- Isolate almost all the add-in functionality into a separate `Exporter` class library\n- Reimplement and reduce the add-in to the bare minimum essentials, and call the `Exporter` to do all the work\n- Implement a new DA4R-specific DB application, also reduced to the bare minimum essentials\n\nAccordingly, the Visual Studio solution now contains three projects:\n \n- Exporter &ndash; does all the work\n- Addin &ndash; the normal Revit desktop add-in\n- AppBundle &ndash; the Forge DA4R app\n \nBoth the desktop add-in and the Forge DA4R `AppBundle` use the same `Exporter` class library and only contain minimal architectural code."
  },
  {
    "original_filename": "1720_prepare_da4r",
    "header_text": "<a name=\"4\"></a> Local Testing versus Live Deployment",
    "local_header_href": "#a-name4a-local-testing-versus-live-deployment",
    "chunk_text": "#### <a name=\"4\"></a> Local Testing versus Live Deployment\n\nIn addition to the separation between desktop add-in and DA4R appbundle, the latter can also be switched back and forth for local testing versus real live Forge DA4R deployment, by defining or undefining the constant `FORGE_DA4R_TEST_LOCALLY`\nin [AppBundle/App.cs](https://github.com/jeremytammik/IfcSpaceZoneBoundaries/blob/master/AppBundle/App.cs).\n\nHere is a [diff between the two states](https://github.com/jeremytammik/IfcSpaceZoneBoundaries/compare/2019.0.0.21..2019.0.0.22).\n\nDepending on which state we are in, we use either the `ApplicationInitialized` or the `DesignAutomationReadyEvent` to run the application functionality.\n\nHere is the entire external DB application implementation:\n\n<pre class=\"code\">\n<span style=\"color:green;\">//#define&nbsp;FORGE_DA4R_TEST_LOCALLY</span>\n \n<span style=\"color:blue;\">#region</span>&nbsp;Namespaces\n<span style=\"color:blue;\">using</span>&nbsp;System;\n<span style=\"color:blue;\">using</span>&nbsp;System.IO;\n<span style=\"color:blue;\">using</span>&nbsp;System.Reflection;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.ApplicationServices;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB.Events;\n<span style=\"color:blue;\">using</span>&nbsp;DesignAutomationFramework;\n<span style=\"color:blue;\">using</span>&nbsp;IfcSpaceZoneBoundaries.Exporter;\n<span style=\"color:blue;\">#endregion</span>\n \n<span style=\"color:blue;\">namespace</span>&nbsp;IfcSpaceZoneBoundaries.AppBundle\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">App</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IExternalDBApplication</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Export&nbsp;all&nbsp;linked-in&nbsp;IFC&nbsp;document&nbsp;rooms&nbsp;and&nbsp;zones</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;ExportLinkedInIfcDocs(&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;0&nbsp;==&nbsp;app.Documents.Size&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;path&nbsp;=&nbsp;<span style=\"color:#2b91af;\">JtSettings</span>.Instance\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.IfcRvtInputFilePath;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;app.OpenDocumentFile(&nbsp;path&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;doc&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;s&nbsp;=&nbsp;<span style=\"color:blue;\">string</span>.Format(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Could&nbsp;not&nbsp;open&nbsp;document&nbsp;{0}.&quot;</span>,&nbsp;path&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">JtLogger</span>.Log(&nbsp;s&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">InvalidOperationException</span>(&nbsp;s&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">RoomZoneExporter</span>.ExportAll(&nbsp;app&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n<span style=\"color:blue;\">#if</span>&nbsp;FORGE_DA4R_TEST_LOCALLY\n<span style=\"color:gray;\">&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;OnApplicationInitialized(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object&nbsp;sender,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ApplicationInitializedEventArgs&nbsp;e&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;`sender`&nbsp;is&nbsp;an&nbsp;Application&nbsp;instance:\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Application&nbsp;app&nbsp;=&nbsp;sender&nbsp;as&nbsp;Application;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExportLinkedInIfcDocs(&nbsp;app&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</span><span style=\"color:blue;\">#else</span>&nbsp;<span style=\"color:green;\">//&nbsp;if&nbsp;not&nbsp;FORGE_DA4R_TEST_LOCALLY</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnDesignAutomationReadyEvent(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">object</span>&nbsp;sender,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DesignAutomationReadyEventArgs</span>&nbsp;e&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;`sender`&nbsp;is&nbsp;an&nbsp;Application&nbsp;instance:</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;=&nbsp;sender&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Application</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExportLinkedInIfcDocs(&nbsp;app&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n<span style=\"color:blue;\">#endif</span>&nbsp;<span style=\"color:green;\">//&nbsp;FORGE_DA4R_TEST_LOCALLY</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDBApplicationResult</span>&nbsp;OnStartup(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ControlledApplication</span>&nbsp;a&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;path&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Assembly</span>.GetExecutingAssembly().Location;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">JtLogger</span>.Init(&nbsp;<span style=\"color:#2b91af;\">Path</span>.ChangeExtension(&nbsp;path,&nbsp;<span style=\"color:#a31515;\">&quot;log&quot;</span>&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">JtSettings</span>.Init(&nbsp;<span style=\"color:#2b91af;\">Path</span>.ChangeExtension(&nbsp;path,&nbsp;<span style=\"color:#a31515;\">&quot;json&quot;</span>&nbsp;)&nbsp;);\n \n<span style=\"color:blue;\">#if</span>&nbsp;FORGE_DA4R_TEST_LOCALLY\n<span style=\"color:gray;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.ApplicationInitialized&nbsp;+=&nbsp;OnApplicationInitialized;\n</span><span style=\"color:blue;\">#else</span>&nbsp;<span style=\"color:green;\">//&nbsp;if&nbsp;not&nbsp;FORGE_DA4R_TEST_LOCALLY</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DesignAutomationBridge</span>.DesignAutomationReadyEvent&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+=&nbsp;OnDesignAutomationReadyEvent;\n<span style=\"color:blue;\">#endif</span>&nbsp;<span style=\"color:green;\">//&nbsp;FORGE_DA4R_TEST_LOCALLY</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDBApplicationResult</span>.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDBApplicationResult</span>&nbsp;OnShutdown(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ControlledApplication</span>&nbsp;a&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">JtSettings</span>.Save();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">JtLogger</span>.Done();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDBApplicationResult</span>.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n</pre>"
  },
  {
    "original_filename": "1720_prepare_da4r",
    "header_text": "<a name=\"5\"></a> User Defined Input Arguments for DA4R",
    "local_header_href": "#a-name5a-user-defined-input-arguments-for-da4r",
    "chunk_text": "#### <a name=\"5\"></a> User Defined Input Arguments for DA4R\n\nI implemented the `JtSettings` class to demonstrate defining and passing in input parameters to a DA4R app via an input parameter file. \n  \nI simplified and minimised its interface to reduce the amount of code to be duplicated in the add-in and appbundle, e.g., by converting it to a self-contained singleton.\n\nThe interface to read the user-defined settings in DA4R currently consists of just two lines of code, as you can see above:\n\n- A call to `JtSettings.Init` specifying the path to read from\n- A call to the setting itself via the static singleton instance:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;path&nbsp;=&nbsp;<span style=\"color:#2b91af;\">JtSettings</span>.Instance\n&nbsp;&nbsp;&nbsp;&nbsp;.IfcRvtInputFilePath;\n</pre>"
  },
  {
    "original_filename": "1720_prepare_da4r",
    "header_text": "<a name=\"6\"></a> Logging of Results",
    "local_header_href": "#a-name6a-logging-of-results",
    "chunk_text": "#### <a name=\"6\"></a> Logging of Results\n\nSimilarly to the enhanced settings class, I also streamlined the implementation of the `JtLogger` warning, error and result message logging system to make it easy and minimal to use from the two environments.\n\nI hope you enjoyed my analysis and description and wish you lots of fun and success getting started with your own DA4R projects!\n\n<center>\n<img src=\"img/log_raft.jpg\" alt=\"Log raft\" width=\"400\">\n</center>\n\n\n<!--\nifc support in da4r: \nthread in #revit-io \nchrisd 5:38 PM, January 31st\nBased on our current knowledge, we think we'll be able to support the normal range of IFC stuff. However, we are currently working on various other service-level requirements. We do expect to be working on customer requests over the next couple of months, but not for the next few sprints at least.\nduellr 5:39 PM, January 31st\n@tammikj @zhul @chrisd I created a spike, to discuss for our next sprint, so we can confirm if this is possible.\nhttps://jira.autodesk.com/browse/RVTDA-923\nRE: IFC support, specifically linking an IFC file into a blank RVT - Customer Requests - Forge Design Automation API for Revit\nRyan Duell wrote: Thank you Jeremy.  We are tracking this functionality in issue RVTDA-909.\n-->"
  }
]