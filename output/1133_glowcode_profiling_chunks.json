[
  {
    "original_filename": "1133_glowcode_profiling",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1133_glowcode_profiling",
    "header_text": "Profiling Revit Add-ins and RoomEditorApp Enhancements",
    "local_header_href": "#profiling-revit-add-ins-and-roomeditorapp-enhancements",
    "chunk_text": "<h3>Profiling Revit Add-ins and RoomEditorApp Enhancements</h3><p>Today we take a look a\n\n<a href=\"#2\">\nprofiling tool</a> that\n\nworks with Revit add-ins, and a few small new\n\n<a href=\"#5\">\nenhancements to my RoomEditorApp</a>.</p><p>The entire following article was contributed by\n\n<a href=\"mailto:ben.bishoff@ideateinc.com\">\nBen Bishoff</a> of\n\n<a href=\"http://www.ideatesoftware.com\">Ideate Software</a>:\n\n<!--\n, saying:\n\n<blockquote>\n<p>I have very much appreciated the knowledge I have gained from your blog and the community it has engendered.\nI am happy to contribute and hopefully help my fellow Revit developers.</p>\n</blockquote>\n\n<p>Thank you very much for your appreciation, Ben, and thank you even more for this fine and important article!</p>\n\n<p>I hope it encourages others to profile and optimise their add-ins as well.</p>\n-->\n<a name=\"2\"></a>\n<h4>Profiling Revit Add-ins using GlowCode</h4>\n<p>Performance profiling tools allow you to increase the speed of your code by pinpointing slow methods and methods that are called excessively.  For the past several releases, we have successfully used GlowCode real-time performance profiler (<a href=\"http://www.glowcode.com\">www.glowcode.com</a>) to analyse and improve the speed of our Revit add-ins.</p>\n<p>Unfortunately, since at least Revit 2011, we have been unable to profile our add-ins using standard .NET profiling tools like ANTS Performance Profiler.  I suspect this is caused by the way the managed .NET Revit API is connected to the underlying native Revit code base.</p>\n<p>GlowCode is unique among profiling tools in that it can profile both managed (.NET) and native (C++) applications.  It appears that the ability to work in a mixed code environment allows GlowCode to drill through and profile the managed add-in code hosted inside the native Revit application.</p>\n<p>After setting up a GlowCode project (see below), you launch Revit through GlowCode and run your add-in.  Among other statistics, GlowCode will record the time spent within each code method and the number of times each code method was visited.  From there, there are many ways to 'slice and dice' the information GlowCode records.  In general, you are presented with tree views you can use to drill-down and find slow methods.</p>\n<center>\n<img alt=\"GlowCode call tree and summary\" src=\"img/glowcode1.png\"/>\n</center>\n<p>And here is where the detective work (and fun) begins!  It is always eye opening to actually see where your code spends its time.  Two of the biggest gotchas we have encountered in our code have been repetitive API calls, and reading and writing large collections of data.</p>\n<p>Using profiling, we have identified places in our code where we make repetitive calls to the same Revit API method to get the same static information.  In this case, it makes sense to cache the data in a collection and later retrieve the data from that collection instead of through a Revit API call.  Using the proper data structure to the store data, however, is crucial.</p>\n<p>If you never learned the concepts of Big O notation, or it has been a while since Computer Science 101, now is the time to refresh your knowledge.  Googling 'Big O notation' will return many good basic tutorials, but here is the core idea: the time it takes to read and write data to a collection of data greatly depends on the type of data structure you use. An <b>array</b> or <b>list</b> data structure, while easy to create, is slow to search.  In general, the time it takes to search a list depends directly on the size of the list.   In contrast, a <b>hash</b> data structure (or its variant the <b>dictionary</b>), while more complex to set up, is much faster to read.  If done right and you have defined an appropriate hash method for the data you are storing, retrieving data from a hash can approach near constant time.  In other words, searching for data in a hash of 10 objects takes almost the same amount of time as in a hash storing thousands of objects.  In short, learn to love hashes.</p>\n<p>GlowCode has a 21-day free trial, standalone license are $499 USD.  We have found it well worth the investment - if you don't profile your code you're flying blind.  Case in point, using profiling we have found commands that slowed down by a factor of 10x or more due to innocent changes made during a release.  Profiling quickly identified these bottlenecks, and many times changing just a few lines of code remedied the problem.</p>\n<p>What follows are screenshots of the GlowCode project settings I have used to successfully profile our Revit add-ins.  For detailed set up see GlowCode Help see topic:</p>\n<ul>\n<li>How To &gt; Profile Performance &gt; (Native &amp; Managed) &gt; Tutorial: Quickstart profiling instructions</li>\n</ul>\n<center>\n<img alt=\"Open profiler\" src=\"img/glowcode2.png\" width=\"400\"/>\n</center>\n<p>Note that the profiler must launch Revit, cf. Target tab &gt; Start mode &gt; Launch.  Unlike debugging in Microsoft Visual Studio, the .NET framework  does not support profiling applications by attaching to applications that are already running.</p>\n<center>\n<img alt=\"Profiler target\" src=\"img/glowcode3.png\" width=\"400\"/>\n</center>\n<p>Managed setup options:</p>\n<center>\n<img alt=\"Profiler setup managed\" src=\"img/glowcode4.png\" width=\"400\"/>\n</center>\n<p>Viewer setup:</p>\n<center>\n<img alt=\"Profiler viewers\" src=\"img/glowcode5.png\" width=\"400\"/>\n</center>\n<p>Thank you very much for this fine and important article, Ben!</p>\n<p>I hope it encourages others to profile and optimise their add-ins as well.</p>\n<a name=\"5\"></a>\n<h4>RoomEditorApp Inches Forward</h4>\n<p>The Tech Summit in June is nearing inexorably.</p>\n<p>The last date to submit my presentation is end of next week, which is getting closer even faster.</p>\n<p>I barely started development yet.</p>\n<p>My goals:</p>\n<ul>\n<li>Display sheet, views and floor plan geometry</li>\n<li>Store, edit and update non-graphical property data</li>\n<li>Improve the 2D graphical editing</li>\n</ul>\n<p>After a ten-day pause in development, I picked it up again and posted two new releases yesterday to the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">RoomEditorApp GitHub repository</a>:</p>\n<ul>\n<li><a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.2.4\">2014.0.2.4</a></li>\n<ul>\n<li><a href=\"#5.1\">Multi-category filter</a></li>\n<li><a href=\"#5.2\">UploadSheet method outline</a></li>\n</ul>\n<li><a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.2.5\">2014.0.2.5</a></li>\n<ul>\n<li><a href=\"#5.3\">Split Point2dIntLoop.cs module</a></li>\n<li><a href=\"#5.4\">Support both open and closed loops</a></li>\n</ul>\n</ul>\n<a name=\"5.1\"></a>\n<h4>Multi-Category Filter</h4>\n<p>One of the steps I discussed in the previous instalments was the interactive\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/selecting-visible-categories-from-a-set-of-views.html\">\nselection of categories</a> to\n\nexport, returning a list of category objects, i.e. <code><span class=\"teal\">List</span>&lt;<span class=\"teal\">Category</span>&gt; categories</code>.</p>\n<p>I initially thought of converting the list to a dictionary for faster lookup when filtering for elements to export.</p>\n<p>A dictionary can be generated from a list by calling the ToDictionary method like this:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Convert category list to a dictionary for </span>\n  <span class=\"green\">// more effective repeated lookup.</span>\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">ElementId</span>, <span class=\"teal\">Category</span>&gt; catLookup =\n    categories.ToDictionary&lt;<span class=\"teal\">Category</span>, <span class=\"teal\">ElementId</span>&gt;(\n      c =&gt; c.Id );\n</pre>\n<p>However, no post processing will ever be as fast as supplying an element filter to the Revit filtered element collector.</p>\n<p>So how can I effectively convert a list of categories to an appropriate element filter?</p>\n<p>Well, easily, in one single line of code, albeit rather lengthy when unravelled:</p>\n<pre class=\"code\">\n  <span class=\"green\">// No, much better: set up a reusable element </span>\n  <span class=\"green\">// filter for the categories of interest:</span>\n \n  <span class=\"teal\">ElementFilter</span> categoryFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( categories\n      .Select&lt;<span class=\"teal\">Category</span>, <span class=\"teal\">ElementCategoryFilter</span>&gt;(\n        c =&gt; <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( c.Id ) )\n      .ToList&lt;<span class=\"teal\">ElementFilter</span>&gt;() );\n</pre>\n<p>What does this line of code do?</p>\n<p>For each category, it creates a corresponding category filter.</p>\n<p>All of these filters are collected into a list used to initialise a Boolean OR of them all.</p>\n<p>In the end, any element that matches one of the listed categories will pass the filter.</p>\n<p>All of the filters involved are quick filters.</p>\n<a name=\"5.2\"></a>\n<h4>UploadSheet Method Outline</h4>\n<p>I started implementing the UploadSheet method to upload a sheet, the views it contains, and all the elements displayed in them, ignoring elements not belonging to one of the selected categories.</p>\n<p>What it does in this state is traverse the given structures and access the relevant geometry.</p>\n<p>It shows how the category filter is applied to retrieve the view specific geometry for the elements of interest, and how the family instance location transformation and element geometry can be handled.</p>\n<p>The logic to create a dictionary of the symbol geometry and only process each symbol once is in place.</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Upload given sheet and the views it contains</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to the cloud repository, ignoring all elements</span>\n  <span class=\"gray\">///</span><span class=\"green\"> not belonging to one of the selected categories.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> UploadSheet(\n    <span class=\"teal\">ViewSheet</span> sheet,\n    <span class=\"teal\">ElementFilter</span> categoryFilter )\n  {\n    <span class=\"blue\">bool</span> list_ignored_elements = <span class=\"blue\">false</span>;\n \n    <span class=\"teal\">Document</span> doc = sheet.Document;\n \n    <span class=\"teal\">Options</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n \n    <span class=\"green\">// Map symbol UniqueId to symbol geometry</span>\n \n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; symbolGeometry\n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt;();\n \n    <span class=\"green\">// List of instances referring to symbols</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; familyInstances\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt;();\n \n    <span class=\"green\">// There is no need and no possibility to set </span>\n    <span class=\"green\">// the detail level when retrieving view geometry.</span>\n    <span class=\"green\">// An attempt to specify the detail level will </span>\n    <span class=\"green\">// cause writing the opt.View property to throw</span>\n    <span class=\"green\">// \"DetailLevel is already set. When DetailLevel </span>\n    <span class=\"green\">// is set view-specific geometry can't be </span>\n    <span class=\"green\">// extracted.\"</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">//opt.DetailLevel = ViewDetailLevel.Coarse;</span>\n \n    <span class=\"teal\">Debug</span>.Print( sheet.Name );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewPlan</span> v <span class=\"blue\">in</span> sheet.Views\n      .OfType&lt;<span class=\"teal\">ViewPlan</span>&gt;()\n      .Where&lt;<span class=\"teal\">ViewPlan</span>&gt;( v =&gt; IsFloorPlan( v ) ) )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  \"</span> + v.Name );\n \n      opt.View = v;\n \n      <span class=\"teal\">FilteredElementCollector</span> els\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, v.Id )\n          .WherePasses( categoryFilter );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> els )\n      {\n        <span class=\"green\">//Debug.Print( \"  \" + e.Name );</span>\n \n        <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n        <span class=\"green\">// Call GetTransformed on family instance geo.</span>\n        <span class=\"green\">// This converts it from GeometryInstance to ?</span>\n \n        <span class=\"teal\">FamilyInstance</span> f = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != f )\n        {\n          <span class=\"teal\">Location</span> loc = e.Location;\n \n          <span class=\"green\">// Simply ignore family instances that</span>\n          <span class=\"green\">// have no valid location, e.g. panel.</span>\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == loc )\n          {\n            <span class=\"blue\">if</span>( list_ignored_elements )\n            {\n              <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"    ... ignored \"</span>\n                + e.Name );\n            }\n            <span class=\"blue\">continue</span>;\n          }\n \n          familyInstances.Add(\n            <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f ) );\n \n          <span class=\"teal\">FamilySymbol</span> s = f.Symbol;\n \n          <span class=\"blue\">string</span> uid = s.UniqueId;\n \n          <span class=\"blue\">if</span>( symbolGeometry.ContainsKey( uid ) )\n          {\n            <span class=\"blue\">if</span>( list_ignored_elements )\n            {\n              <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"    ... already handled \"</span>\n                + e.Name + <span class=\"maroon\">\" --&gt; \"</span> + s.Name );\n            }\n            <span class=\"blue\">continue</span>;\n          }\n \n          <span class=\"green\">// Replace this later to add real geometry.</span>\n \n          symbolGeometry.Add( uid, <span class=\"blue\">null</span> );\n \n          <span class=\"green\">// Retrieve family instance geometry </span>\n          <span class=\"green\">// transformed back to symbol definition</span>\n          <span class=\"green\">// coordinate space by inverting the </span>\n          <span class=\"green\">// family instance placement transformation</span>\n \n          <span class=\"teal\">LocationPoint</span> lp = e.Location\n            <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n          <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.CreateTranslation(\n            -lp.Point );\n \n          <span class=\"teal\">Transform</span> r = <span class=\"teal\">Transform</span>.CreateRotationAtPoint(\n            <span class=\"teal\">XYZ</span>.BasisZ, -lp.Rotation, lp.Point );\n \n          geo = geo.GetTransformed( t * r );\n        }\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"    \"</span> + e.Name );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n        {\n          <span class=\"green\">// This was true before calling GetTransformed.</span>\n          <span class=\"green\">//Debug.Assert( obj is Solid || obj is GeometryInstance, \"expected only solids and instances\" );</span>\n \n          <span class=\"green\">// This was true before calling GetTransformed.</span>\n          <span class=\"green\">//Debug.Assert( ( obj is GeometryInstance ) == ( e is FamilyInstance ), \"expected all family instances to have geometry instance\" ); </span>\n \n          <span class=\"teal\">Debug</span>.Assert( obj <span class=\"blue\">is</span> <span class=\"teal\">Solid</span> || obj <span class=\"blue\">is</span> <span class=\"teal\">Line</span>, <span class=\"maroon\">\"expected only solids and lines after calling GetTransformed on instances\"</span> );\n \n          <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">Visibility</span>.Visible == obj.Visibility, <span class=\"maroon\">\"expected only visible geometry objects\"</span> );\n \n          <span class=\"teal\">Debug</span>.Assert( obj.IsElementGeometry, <span class=\"maroon\">\"expected only element geometry\"</span> );\n          <span class=\"green\">//bool isElementGeometry = obj.IsElementGeometry;</span>\n \n          <span class=\"green\">// Do we need the graphics style?</span>\n          <span class=\"green\">// It might give us horrible things like</span>\n          <span class=\"green\">// colours etc.</span>\n \n          <span class=\"teal\">ElementId</span> id = obj.GraphicsStyleId;\n \n          <span class=\"green\">//Debug.Print( \"      \" + obj.GetType().Name );</span>\n \n          <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n          {\n            <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"      \"</span> + obj.GetType().Name );\n          }\n          <span class=\"blue\">else</span>\n          {\n            <span class=\"blue\">int</span> n = solid.Edges.Size;\n \n            <span class=\"blue\">if</span>( 0 &lt; n )\n            {\n              <span class=\"teal\">Debug</span>.Print(\n                <span class=\"maroon\">\"      solid with {0} edges\"</span>, n );\n \n              <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> solid.Edges )\n              {\n                <span class=\"teal\">Curve</span> c = edge.AsCurve();\n \n                <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"        \"</span>\n                  + edge.GetType().Name + <span class=\"maroon\">\": \"</span>\n                  + c.GetType().Name );\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n</pre>\n<p>Here is an excerpt of the output it generates for a sheet containing two views, one of them displaying a wall of type 'Cav - 102 75i 100 p - Lwt', a desk and a chair, among many other things:</p>\n<pre>\nSheet view of Level 0 and 1\n  Level 0\n    Cav - 102 75i 100 p - Lwt\n      solid with 12 edges\n        Edge: Line\n        ...\n        Edge: Line\n    1525 x 762mm\n      Line\n      Line\n      Line\n      Line\n    Office Chair\n      solid with 12 edges\n        Edge: Line\n        ...\n        Edge: Line\n      solid with 4 edges\n        Edge: Line\n        Edge: Line\n        Edge: Line\n        Edge: Line\n</pre>\n<p>Lots more processing to do here before I have this displaying properly in SVG in the browser, plus I need to work out all the proper scalings and transformations from Revit model space to the view, the size and location of the views on the sheet, and the sheet placement in the browser SVG canvas.</p>\n<a name=\"5.3\"></a>\n<h4>Split Point2dIntLoop.cs Module</h4>\n<p>The SVG generation is implemented in the JtLoop and JtLoops classes, which were defined in a C# module named Point2dIntLoop.cs.</p>\n<p>To simplify navigation, I split that module into two new modules and named them the same as the classes they define, making the structure simpler to understand.</p>\n<a name=\"5.4\"></a>\n<h4>Support both Open and Closed Loops</h4>\n<p>In its previous incarnation, the room editor exported only closed loops.</p>\n<p>I am not certain that the 2D geometry I am considering now will always define closed loops, so I took a look at how deeply buried that assumption might be in the JtLoop class.</p>\n<p>Happily, as it turns out, not deeply at all, so here is an updated version that supports both open and closed loops, and therefore actually should be renamed to 'polyline' instead of 'loop':</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> A closed or open polygon boundary loop.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">JtLoop</span> : <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point2dInt</span>&gt;\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Closed { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n    <span class=\"blue\">public</span> JtLoop( <span class=\"blue\">int</span> capacity )\n      : <span class=\"blue\">base</span>( capacity )\n    {\n      Closed = <span class=\"blue\">true</span>;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Add another point to the collection.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> If the new point is identical to the last,</span>\n    <span class=\"gray\">///</span><span class=\"green\"> ignore it. This will automatically suppress</span>\n    <span class=\"gray\">///</span><span class=\"green\"> really small boundary segment fragments.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">new</span> <span class=\"blue\">void</span> Add( <span class=\"teal\">Point2dInt</span> p )\n    {\n      <span class=\"blue\">if</span>( 0 == Count\n        || 0 != p.CompareTo( <span class=\"blue\">this</span>[Count - 1] ) )\n      {\n        <span class=\"blue\">base</span>.Add( p );\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Display as a string.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">string</span> ToString()\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>, <span class=\"blue\">this</span> );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return suitable input for the .NET </span>\n    <span class=\"gray\">///</span><span class=\"green\"> GraphicsPath.AddLines method to display this </span>\n    <span class=\"gray\">///</span><span class=\"green\"> loop in a form. Note that a closing segment </span>\n    <span class=\"gray\">///</span><span class=\"green\"> to connect the last point back to the first</span>\n    <span class=\"gray\">///</span><span class=\"green\"> is added.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"teal\">Point</span>[] GetGraphicsPathLines()\n    {\n      <span class=\"blue\">int</span> i, n;\n \n      n = Count;\n \n      <span class=\"blue\">if</span>( Closed ) { ++n; }\n \n      <span class=\"teal\">Point</span>[] loop = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>[n];\n \n      i = 0;\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Point2dInt</span> p <span class=\"blue\">in</span> <span class=\"blue\">this</span> )\n      {\n        loop[i++] = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( p.X, p.Y );\n      }\n \n      <span class=\"blue\">if</span>( Closed ) { loop[i] = loop[0]; }\n \n      <span class=\"blue\">return</span> loop;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return an SVG path specification, c.f.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> http://www.w3.org/TR/SVG/paths.html</span>\n    <span class=\"gray\">///</span><span class=\"green\"> M [0] L [1] [2] ... [n-1] Z</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span>\n          <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\" \"</span>,\n            <span class=\"blue\">this</span>.Select&lt;<span class=\"teal\">Point2dInt</span>, <span class=\"blue\">string</span>&gt;(\n              ( p, i ) =&gt; p.SvgPath( i ) ) )\n          + ( Closed ? <span class=\"maroon\">\"Z\"</span> : <span class=\"maroon\">\"\"</span> );\n      }\n    }\n  }\n</pre>\n<p>I set it up to be closed by default, and existing code will work properly with no modification.</p>\n<p>New code can toggle the public Closed property, which affects the SVG and GraphicsPath output, and nothing else.</p>\n</p>"
  },
  {
    "original_filename": "1133_glowcode_profiling",
    "header_text": "Profiling Revit Add-ins using GlowCode",
    "local_header_href": "#profiling-revit-add-ins-using-glowcode",
    "chunk_text": "<h4>Profiling Revit Add-ins using GlowCode</h4><p>Performance profiling tools allow you to increase the speed of your code by pinpointing slow methods and methods that are called excessively.  For the past several releases, we have successfully used GlowCode real-time performance profiler (<a href=\"http://www.glowcode.com\">www.glowcode.com</a>) to analyse and improve the speed of our Revit add-ins.</p><p>Unfortunately, since at least Revit 2011, we have been unable to profile our add-ins using standard .NET profiling tools like ANTS Performance Profiler.  I suspect this is caused by the way the managed .NET Revit API is connected to the underlying native Revit code base.</p><p>GlowCode is unique among profiling tools in that it can profile both managed (.NET) and native (C++) applications.  It appears that the ability to work in a mixed code environment allows GlowCode to drill through and profile the managed add-in code hosted inside the native Revit application.</p><p>After setting up a GlowCode project (see below), you launch Revit through GlowCode and run your add-in.  Among other statistics, GlowCode will record the time spent within each code method and the number of times each code method was visited.  From there, there are many ways to 'slice and dice' the information GlowCode records.  In general, you are presented with tree views you can use to drill-down and find slow methods.</p><center>\n<img alt=\"GlowCode call tree and summary\" src=\"img/glowcode1.png\"/>\n</center><p>And here is where the detective work (and fun) begins!  It is always eye opening to actually see where your code spends its time.  Two of the biggest gotchas we have encountered in our code have been repetitive API calls, and reading and writing large collections of data.</p><p>Using profiling, we have identified places in our code where we make repetitive calls to the same Revit API method to get the same static information.  In this case, it makes sense to cache the data in a collection and later retrieve the data from that collection instead of through a Revit API call.  Using the proper data structure to the store data, however, is crucial.</p><p>If you never learned the concepts of Big O notation, or it has been a while since Computer Science 101, now is the time to refresh your knowledge.  Googling 'Big O notation' will return many good basic tutorials, but here is the core idea: the time it takes to read and write data to a collection of data greatly depends on the type of data structure you use. An <b>array</b> or <b>list</b> data structure, while easy to create, is slow to search.  In general, the time it takes to search a list depends directly on the size of the list.   In contrast, a <b>hash</b> data structure (or its variant the <b>dictionary</b>), while more complex to set up, is much faster to read.  If done right and you have defined an appropriate hash method for the data you are storing, retrieving data from a hash can approach near constant time.  In other words, searching for data in a hash of 10 objects takes almost the same amount of time as in a hash storing thousands of objects.  In short, learn to love hashes.</p><p>GlowCode has a 21-day free trial, standalone license are $499 USD.  We have found it well worth the investment - if you don't profile your code you're flying blind.  Case in point, using profiling we have found commands that slowed down by a factor of 10x or more due to innocent changes made during a release.  Profiling quickly identified these bottlenecks, and many times changing just a few lines of code remedied the problem.</p><p>What follows are screenshots of the GlowCode project settings I have used to successfully profile our Revit add-ins.  For detailed set up see GlowCode Help see topic:</p><ul>\n<li>How To &gt; Profile Performance &gt; (Native &amp; Managed) &gt; Tutorial: Quickstart profiling instructions</li>\n</ul><center>\n<img alt=\"Open profiler\" src=\"img/glowcode2.png\" width=\"400\"/>\n</center><p>Note that the profiler must launch Revit, cf. Target tab &gt; Start mode &gt; Launch.  Unlike debugging in Microsoft Visual Studio, the .NET framework  does not support profiling applications by attaching to applications that are already running.</p><center>\n<img alt=\"Profiler target\" src=\"img/glowcode3.png\" width=\"400\"/>\n</center><p>Managed setup options:</p><center>\n<img alt=\"Profiler setup managed\" src=\"img/glowcode4.png\" width=\"400\"/>\n</center><p>Viewer setup:</p><center>\n<img alt=\"Profiler viewers\" src=\"img/glowcode5.png\" width=\"400\"/>\n</center><p>Thank you very much for this fine and important article, Ben!</p><p>I hope it encourages others to profile and optimise their add-ins as well.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1133_glowcode_profiling",
    "header_text": "RoomEditorApp Inches Forward",
    "local_header_href": "#roomeditorapp-inches-forward",
    "chunk_text": "<h4>RoomEditorApp Inches Forward</h4><p>The Tech Summit in June is nearing inexorably.</p><p>The last date to submit my presentation is end of next week, which is getting closer even faster.</p><p>I barely started development yet.</p><p>My goals:</p><ul>\n<li>Display sheet, views and floor plan geometry</li>\n<li>Store, edit and update non-graphical property data</li>\n<li>Improve the 2D graphical editing</li>\n</ul><p>After a ten-day pause in development, I picked it up again and posted two new releases yesterday to the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">RoomEditorApp GitHub repository</a>:</p><ul>\n<li><a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.2.4\">2014.0.2.4</a></li>\n<ul>\n<li><a href=\"#5.1\">Multi-category filter</a></li>\n<li><a href=\"#5.2\">UploadSheet method outline</a></li>\n</ul>\n<li><a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.2.5\">2014.0.2.5</a></li>\n<ul>\n<li><a href=\"#5.3\">Split Point2dIntLoop.cs module</a></li>\n<li><a href=\"#5.4\">Support both open and closed loops</a></li>\n</ul>\n</ul><a name=\"5.1\"></a>"
  },
  {
    "original_filename": "1133_glowcode_profiling",
    "header_text": "Multi-Category Filter",
    "local_header_href": "#multi-category-filter",
    "chunk_text": "<h4>Multi-Category Filter</h4><p>One of the steps I discussed in the previous instalments was the interactive\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/selecting-visible-categories-from-a-set-of-views.html\">\nselection of categories</a> to\n\nexport, returning a list of category objects, i.e. <code><span class=\"teal\">List</span>&lt;<span class=\"teal\">Category</span>&gt; categories</code>.</p><p>I initially thought of converting the list to a dictionary for faster lookup when filtering for elements to export.</p><p>A dictionary can be generated from a list by calling the ToDictionary method like this:</p><pre class=\"code\">\n  <span class=\"green\">// Convert category list to a dictionary for </span>\n  <span class=\"green\">// more effective repeated lookup.</span>\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">ElementId</span>, <span class=\"teal\">Category</span>&gt; catLookup =\n    categories.ToDictionary&lt;<span class=\"teal\">Category</span>, <span class=\"teal\">ElementId</span>&gt;(\n      c =&gt; c.Id );\n</pre><p>However, no post processing will ever be as fast as supplying an element filter to the Revit filtered element collector.</p><p>So how can I effectively convert a list of categories to an appropriate element filter?</p><p>Well, easily, in one single line of code, albeit rather lengthy when unravelled:</p><pre class=\"code\">\n  <span class=\"green\">// No, much better: set up a reusable element </span>\n  <span class=\"green\">// filter for the categories of interest:</span>\n \n  <span class=\"teal\">ElementFilter</span> categoryFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( categories\n      .Select&lt;<span class=\"teal\">Category</span>, <span class=\"teal\">ElementCategoryFilter</span>&gt;(\n        c =&gt; <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( c.Id ) )\n      .ToList&lt;<span class=\"teal\">ElementFilter</span>&gt;() );\n</pre><p>What does this line of code do?</p><p>For each category, it creates a corresponding category filter.</p><p>All of these filters are collected into a list used to initialise a Boolean OR of them all.</p><p>In the end, any element that matches one of the listed categories will pass the filter.</p><p>All of the filters involved are quick filters.</p><a name=\"5.2\"></a>"
  },
  {
    "original_filename": "1133_glowcode_profiling",
    "header_text": "UploadSheet Method Outline",
    "local_header_href": "#uploadsheet-method-outline",
    "chunk_text": "<h4>UploadSheet Method Outline</h4><p>I started implementing the UploadSheet method to upload a sheet, the views it contains, and all the elements displayed in them, ignoring elements not belonging to one of the selected categories.</p><p>What it does in this state is traverse the given structures and access the relevant geometry.</p><p>It shows how the category filter is applied to retrieve the view specific geometry for the elements of interest, and how the family instance location transformation and element geometry can be handled.</p><p>The logic to create a dictionary of the symbol geometry and only process each symbol once is in place.</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Upload given sheet and the views it contains</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to the cloud repository, ignoring all elements</span>\n  <span class=\"gray\">///</span><span class=\"green\"> not belonging to one of the selected categories.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> UploadSheet(\n    <span class=\"teal\">ViewSheet</span> sheet,\n    <span class=\"teal\">ElementFilter</span> categoryFilter )\n  {\n    <span class=\"blue\">bool</span> list_ignored_elements = <span class=\"blue\">false</span>;\n \n    <span class=\"teal\">Document</span> doc = sheet.Document;\n \n    <span class=\"teal\">Options</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n \n    <span class=\"green\">// Map symbol UniqueId to symbol geometry</span>\n \n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; symbolGeometry\n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt;();\n \n    <span class=\"green\">// List of instances referring to symbols</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; familyInstances\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt;();\n \n    <span class=\"green\">// There is no need and no possibility to set </span>\n    <span class=\"green\">// the detail level when retrieving view geometry.</span>\n    <span class=\"green\">// An attempt to specify the detail level will </span>\n    <span class=\"green\">// cause writing the opt.View property to throw</span>\n    <span class=\"green\">// \"DetailLevel is already set. When DetailLevel </span>\n    <span class=\"green\">// is set view-specific geometry can't be </span>\n    <span class=\"green\">// extracted.\"</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">//opt.DetailLevel = ViewDetailLevel.Coarse;</span>\n \n    <span class=\"teal\">Debug</span>.Print( sheet.Name );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewPlan</span> v <span class=\"blue\">in</span> sheet.Views\n      .OfType&lt;<span class=\"teal\">ViewPlan</span>&gt;()\n      .Where&lt;<span class=\"teal\">ViewPlan</span>&gt;( v =&gt; IsFloorPlan( v ) ) )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  \"</span> + v.Name );\n \n      opt.View = v;\n \n      <span class=\"teal\">FilteredElementCollector</span> els\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, v.Id )\n          .WherePasses( categoryFilter );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> els )\n      {\n        <span class=\"green\">//Debug.Print( \"  \" + e.Name );</span>\n \n        <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n        <span class=\"green\">// Call GetTransformed on family instance geo.</span>\n        <span class=\"green\">// This converts it from GeometryInstance to ?</span>\n \n        <span class=\"teal\">FamilyInstance</span> f = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != f )\n        {\n          <span class=\"teal\">Location</span> loc = e.Location;\n \n          <span class=\"green\">// Simply ignore family instances that</span>\n          <span class=\"green\">// have no valid location, e.g. panel.</span>\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == loc )\n          {\n            <span class=\"blue\">if</span>( list_ignored_elements )\n            {\n              <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"    ... ignored \"</span>\n                + e.Name );\n            }\n            <span class=\"blue\">continue</span>;\n          }\n \n          familyInstances.Add(\n            <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f ) );\n \n          <span class=\"teal\">FamilySymbol</span> s = f.Symbol;\n \n          <span class=\"blue\">string</span> uid = s.UniqueId;\n \n          <span class=\"blue\">if</span>( symbolGeometry.ContainsKey( uid ) )\n          {\n            <span class=\"blue\">if</span>( list_ignored_elements )\n            {\n              <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"    ... already handled \"</span>\n                + e.Name + <span class=\"maroon\">\" --&gt; \"</span> + s.Name );\n            }\n            <span class=\"blue\">continue</span>;\n          }\n \n          <span class=\"green\">// Replace this later to add real geometry.</span>\n \n          symbolGeometry.Add( uid, <span class=\"blue\">null</span> );\n \n          <span class=\"green\">// Retrieve family instance geometry </span>\n          <span class=\"green\">// transformed back to symbol definition</span>\n          <span class=\"green\">// coordinate space by inverting the </span>\n          <span class=\"green\">// family instance placement transformation</span>\n \n          <span class=\"teal\">LocationPoint</span> lp = e.Location\n            <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n          <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.CreateTranslation(\n            -lp.Point );\n \n          <span class=\"teal\">Transform</span> r = <span class=\"teal\">Transform</span>.CreateRotationAtPoint(\n            <span class=\"teal\">XYZ</span>.BasisZ, -lp.Rotation, lp.Point );\n \n          geo = geo.GetTransformed( t * r );\n        }\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"    \"</span> + e.Name );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n        {\n          <span class=\"green\">// This was true before calling GetTransformed.</span>\n          <span class=\"green\">//Debug.Assert( obj is Solid || obj is GeometryInstance, \"expected only solids and instances\" );</span>\n \n          <span class=\"green\">// This was true before calling GetTransformed.</span>\n          <span class=\"green\">//Debug.Assert( ( obj is GeometryInstance ) == ( e is FamilyInstance ), \"expected all family instances to have geometry instance\" ); </span>\n \n          <span class=\"teal\">Debug</span>.Assert( obj <span class=\"blue\">is</span> <span class=\"teal\">Solid</span> || obj <span class=\"blue\">is</span> <span class=\"teal\">Line</span>, <span class=\"maroon\">\"expected only solids and lines after calling GetTransformed on instances\"</span> );\n \n          <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">Visibility</span>.Visible == obj.Visibility, <span class=\"maroon\">\"expected only visible geometry objects\"</span> );\n \n          <span class=\"teal\">Debug</span>.Assert( obj.IsElementGeometry, <span class=\"maroon\">\"expected only element geometry\"</span> );\n          <span class=\"green\">//bool isElementGeometry = obj.IsElementGeometry;</span>\n \n          <span class=\"green\">// Do we need the graphics style?</span>\n          <span class=\"green\">// It might give us horrible things like</span>\n          <span class=\"green\">// colours etc.</span>\n \n          <span class=\"teal\">ElementId</span> id = obj.GraphicsStyleId;\n \n          <span class=\"green\">//Debug.Print( \"      \" + obj.GetType().Name );</span>\n \n          <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n          {\n            <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"      \"</span> + obj.GetType().Name );\n          }\n          <span class=\"blue\">else</span>\n          {\n            <span class=\"blue\">int</span> n = solid.Edges.Size;\n \n            <span class=\"blue\">if</span>( 0 &lt; n )\n            {\n              <span class=\"teal\">Debug</span>.Print(\n                <span class=\"maroon\">\"      solid with {0} edges\"</span>, n );\n \n              <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> solid.Edges )\n              {\n                <span class=\"teal\">Curve</span> c = edge.AsCurve();\n \n                <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"        \"</span>\n                  + edge.GetType().Name + <span class=\"maroon\">\": \"</span>\n                  + c.GetType().Name );\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n</pre><p>Here is an excerpt of the output it generates for a sheet containing two views, one of them displaying a wall of type 'Cav - 102 75i 100 p - Lwt', a desk and a chair, among many other things:</p><pre>\nSheet view of Level 0 and 1\n  Level 0\n    Cav - 102 75i 100 p - Lwt\n      solid with 12 edges\n        Edge: Line\n        ...\n        Edge: Line\n    1525 x 762mm\n      Line\n      Line\n      Line\n      Line\n    Office Chair\n      solid with 12 edges\n        Edge: Line\n        ...\n        Edge: Line\n      solid with 4 edges\n        Edge: Line\n        Edge: Line\n        Edge: Line\n        Edge: Line\n</pre><p>Lots more processing to do here before I have this displaying properly in SVG in the browser, plus I need to work out all the proper scalings and transformations from Revit model space to the view, the size and location of the views on the sheet, and the sheet placement in the browser SVG canvas.</p><a name=\"5.3\"></a>"
  },
  {
    "original_filename": "1133_glowcode_profiling",
    "header_text": "Split Point2dIntLoop.cs Module",
    "local_header_href": "#split-point2dintloopcs-module",
    "chunk_text": "<h4>Split Point2dIntLoop.cs Module</h4><p>The SVG generation is implemented in the JtLoop and JtLoops classes, which were defined in a C# module named Point2dIntLoop.cs.</p><p>To simplify navigation, I split that module into two new modules and named them the same as the classes they define, making the structure simpler to understand.</p><a name=\"5.4\"></a>"
  },
  {
    "original_filename": "1133_glowcode_profiling",
    "header_text": "Support both Open and Closed Loops",
    "local_header_href": "#support-both-open-and-closed-loops",
    "chunk_text": "<h4>Support both Open and Closed Loops</h4><p>In its previous incarnation, the room editor exported only closed loops.</p><p>I am not certain that the 2D geometry I am considering now will always define closed loops, so I took a look at how deeply buried that assumption might be in the JtLoop class.</p><p>Happily, as it turns out, not deeply at all, so here is an updated version that supports both open and closed loops, and therefore actually should be renamed to 'polyline' instead of 'loop':</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> A closed or open polygon boundary loop.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">JtLoop</span> : <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point2dInt</span>&gt;\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Closed { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n    <span class=\"blue\">public</span> JtLoop( <span class=\"blue\">int</span> capacity )\n      : <span class=\"blue\">base</span>( capacity )\n    {\n      Closed = <span class=\"blue\">true</span>;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Add another point to the collection.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> If the new point is identical to the last,</span>\n    <span class=\"gray\">///</span><span class=\"green\"> ignore it. This will automatically suppress</span>\n    <span class=\"gray\">///</span><span class=\"green\"> really small boundary segment fragments.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">new</span> <span class=\"blue\">void</span> Add( <span class=\"teal\">Point2dInt</span> p )\n    {\n      <span class=\"blue\">if</span>( 0 == Count\n        || 0 != p.CompareTo( <span class=\"blue\">this</span>[Count - 1] ) )\n      {\n        <span class=\"blue\">base</span>.Add( p );\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Display as a string.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">string</span> ToString()\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>, <span class=\"blue\">this</span> );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return suitable input for the .NET </span>\n    <span class=\"gray\">///</span><span class=\"green\"> GraphicsPath.AddLines method to display this </span>\n    <span class=\"gray\">///</span><span class=\"green\"> loop in a form. Note that a closing segment </span>\n    <span class=\"gray\">///</span><span class=\"green\"> to connect the last point back to the first</span>\n    <span class=\"gray\">///</span><span class=\"green\"> is added.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"teal\">Point</span>[] GetGraphicsPathLines()\n    {\n      <span class=\"blue\">int</span> i, n;\n \n      n = Count;\n \n      <span class=\"blue\">if</span>( Closed ) { ++n; }\n \n      <span class=\"teal\">Point</span>[] loop = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>[n];\n \n      i = 0;\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Point2dInt</span> p <span class=\"blue\">in</span> <span class=\"blue\">this</span> )\n      {\n        loop[i++] = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( p.X, p.Y );\n      }\n \n      <span class=\"blue\">if</span>( Closed ) { loop[i] = loop[0]; }\n \n      <span class=\"blue\">return</span> loop;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return an SVG path specification, c.f.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> http://www.w3.org/TR/SVG/paths.html</span>\n    <span class=\"gray\">///</span><span class=\"green\"> M [0] L [1] [2] ... [n-1] Z</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span>\n          <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\" \"</span>,\n            <span class=\"blue\">this</span>.Select&lt;<span class=\"teal\">Point2dInt</span>, <span class=\"blue\">string</span>&gt;(\n              ( p, i ) =&gt; p.SvgPath( i ) ) )\n          + ( Closed ? <span class=\"maroon\">\"Z\"</span> : <span class=\"maroon\">\"\"</span> );\n      }\n    }\n  }\n</pre><p>I set it up to be closed by default, and existing code will work properly with no modification.</p><p>New code can toggle the public Closed property, which affects the SVG and GraphicsPath output, and nothing else.</p>"
  }
]