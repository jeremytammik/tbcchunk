[
  {
    "original_filename": "0746_kinetic_facade",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0746_kinetic_facade",
    "header_text": "DevCamp and Refresh Display for a Kinetic Facade",
    "local_header_href": "#devcamp-and-refresh-display-for-a-kinetic-facade",
    "chunk_text": "<h3>DevCamp and Refresh Display for a Kinetic Facade</h3><p>Welcome back from the Easter break, if you had one.\nWe are pretty busy right now preparing for our next conference, the DevCamps.\n\n<p>Ah yes, and before that I have to get ready for the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/migrating-vsta-macros-to-sharpdevelop.html#1\">\nRevit API Training in Munich</a> coming up soon.\n\n\n<a name=\"1\"></a>\n<h4>AEC DevCamp and DevLab – Join us at Camp this Summer!</h4>\n<p>The bi-annual Autodesk AEC DevCamp is taking place near Boston on June 6-7.\n\n<p>DevCamps are held every other year where software developers like you can learn to get the most from your time and effort working with Autodesk platform technologies.  The two industry specific Developer Camps include several tracks catering to the learning needs of beginner and expert software developers – as well as a business track for start-ups looking to develop and leverage their relationship with Autodesk.  Come to Camp and get two days of face to face learning and help from Autodesk software engineers – the same Autodesk software engineers developing and supporting the Autodesk technology you work with every day.  \n\n<p>You can also join us for a third day at DevLab, where you can work on your hardest coding challenges with an Autodesk software engineer looking over your shoulder giving you immediate help and advice.  Bring your laptop and work on your code as you'd normally do in your own office – the difference is that you have a team of DevTech experts (the same people who answer your questions through DevHelp Online) available to review your code if you'd like, answer your questions, and make suggestions.  \n\n<p><b>Cloud and Mobile Classes:</b> New for this year's DevCamps are several classes on helping you get started developing apps based on Cloud and Mobile technologies.  Learn how to build your first Cloud app integrated with your favourite Autodesk product – and how you can make it available 'everywhere' through browser and mobile user interfaces.  Have you been considering building your first app for the iPhone, iPad or Android device but holding back because of fear of lost hours thrashing while learning the new technology?  DevCamp includes classes that will show you how to quickly and easily create your first 'Hello World' app for iOS and Android - with a design and graphics twist.\n\n<p>AEC DevCamp is taking place June 6-7 near Boston.\n\n<p>You can attend beginner and expert classes on developing solutions with Revit, Civil 3D, Infrastructure Map Server, Vault, Autodesk BIM 360, Project Vasari, Green Building Studio, Navisworks, and other Autodesk AEC technologies.  Hear from Autodesk's AEC Leadership including Vice President Jim Lynch.  Learn firsthand about developing a new cloud based business leveraging Autodesk technologies from the co-founder of Horizontal Systems (recently acquired by Autodesk) Jordan Brandt.  \n\n<p>Here is a \n\n<a href=\"https://custom.cvent.com/FDBB345248B94F40BFFFCEF2FBE054E4/files/645f182b028d480281ebdda12bae6576.pdf\">\ncomplete list of classes</a> offered \n\nat AEC DevCamp, and you can \n\n<a href=\"http://www.cvent.com/d/ycq03r\">\nregister here</a>. \n\nRegister by April 30th to get the $100 early bird discount!\n\n<p>If you would like to participate in the optional AEC DevLab on June 8, please \n\n<a href=\"http://usa.autodesk.com/adsk/servlet/item?id=6703509&amp;siteID=123112&amp;cname=DevLab%20AEC,%20Waltham,%20Jun%2008%202012,%20201253\">\ncomplete a separate registration</a>.\n\n\n\n<a name=\"2\"></a>\n<h4>Refreshing a View</h4>\n<p>Meanwhile, another issue on the Revit API front: I have often been asked how to refresh a view, and the only last resort I was aware of until recently was to commit a transaction and save the document to an external file.\n\n<p>Now this question cropped up again, asked by Prof. José Luis Menegotto of\n\n<a href=\"https://sites.google.com/a/poli.ufrj.br/dc_menegotto/home\">\nDesenho Computacional</a> at\n\nthe University of Rio de Janeiro.\n\nThis time around, I received an important new hint: the UIDocument class provides the RefreshActiveView method.\n\n<p>Here is the initial query:\n\n<p><strong>Question:</strong> I need to show a sequence of changes in a Curtain Wall Panels facade.\nI create a main transaction and 4 sub-transactions to show the changes with a delay of 2 seconds between them, but the result always shows me the last transaction only. \nWhat am I doing wrong?\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> colecao\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( \n        <span class=\"teal\">BuiltInCategory</span>.OST_CurtainWallPanels );\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; Paneis \n    = colecao.ToElementIds();\n \n  <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  <span class=\"teal\">SubTransaction</span> sTra1 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra2 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra3 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra4 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n \n  tran.Start( <span class=\"maroon\">\"Muda a fachada\"</span> );\n \n  sTra1.Start();\n  Calcula_Padrao( doc, Paneis, 0.10 );\n  sTra1.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra2.Start();\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  sTra2.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra3.Start();\n  Calcula_Padrao( doc, Paneis, 0.05 );\n  sTra3.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra4.Start();\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  sTra4.Commit();\n \n  tran.Commit();\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p><strong>Answer:</strong> First, I can reproduce what you observe.\n\n<p>Secondly, I tried several alternative approaches using transactions to force the model to redisplay after each modification, besides your initial implementation:\n\n<ul>\n<li>Start and commit a SubTransaction: no intermediate updates.\n<li>Start and commit a SubTransaction plus regenerate the document: no intermediate updates.\n<li>Start and commit a Transaction (this includes a doc regen): no intermediate updates.\n<li>Start and commit a Transaction plus regenerate the document, for safety's sake: no intermediate updates.\n<li>Start and commit a Transaction plus save the document to a file: this does update the model in between each step.\n</li></li></li></li></li></ul>\n<p>One thing to point out here is that sub-transactions have no effect on the UI at all and therefore are completely useless for this purpose.\n\n<p>This does show that you can actually achieve what you want by using transactions instead of subtransactions, though, and saving the document to a file after each step.\n\n<p>However, a much better solution is provided by the UIDocument.RefreshActiveView method.\n\n<p>You can start a new transaction for each step and call RefreshActiveView after each transaction successfully commits instead of saving to an external file. \n\n<p>If the command is supposed to appear as a single step on the undo stack in the user interface once the command is finished, the transactions can simply be wrapped (assimilated) in a transaction group.\n\n<p>Here is the final code implementing this:\n\n<pre class=\"code\">\n  <span class=\"teal\">TransactionGroup</span> group = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc );\n  <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  group.Start( <span class=\"maroon\">\"Muda a fachada\"</span> );\n \n  tran.Start( <span class=\"maroon\">\"Step 1 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.10 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 2 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 3 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.05 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 4 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  group.Assimilate();\n</pre>\n<p>Here is \n\n<a href=\"zip/FachadaCinetica.zip\">FachadaCinetica.zip</a> containing\n\nthe complete Revit 2013 source code, Visual Studio solution and add-in manifest for the sample command.\n\n<p>It also includes code for the intermediate attempts, a wait cursor, and debug trace statements to show whereabouts we are in the process in the Visual Studio debug oputput window.\n\n\n<p><strong>Response:</strong> It works fine, and here is the \n\n<a href=\"https://sites.google.com/a/poli.ufrj.br/dc_menegotto/programacao-autolisp/ArqCin\">\nfinal result</a> for \n\nboth AutoCAD and Revit.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0746_kinetic_facade",
    "header_text": "AEC DevCamp and DevLab – Join us at Camp this Summer!",
    "local_header_href": "#aec-devcamp-and-devlab-join-us-at-camp-this-summer",
    "chunk_text": "<h4>AEC DevCamp and DevLab – Join us at Camp this Summer!</h4><p>The bi-annual Autodesk AEC DevCamp is taking place near Boston on June 6-7.\n\n<p>DevCamps are held every other year where software developers like you can learn to get the most from your time and effort working with Autodesk platform technologies.  The two industry specific Developer Camps include several tracks catering to the learning needs of beginner and expert software developers – as well as a business track for start-ups looking to develop and leverage their relationship with Autodesk.  Come to Camp and get two days of face to face learning and help from Autodesk software engineers – the same Autodesk software engineers developing and supporting the Autodesk technology you work with every day.  \n\n<p>You can also join us for a third day at DevLab, where you can work on your hardest coding challenges with an Autodesk software engineer looking over your shoulder giving you immediate help and advice.  Bring your laptop and work on your code as you'd normally do in your own office – the difference is that you have a team of DevTech experts (the same people who answer your questions through DevHelp Online) available to review your code if you'd like, answer your questions, and make suggestions.  \n\n<p><b>Cloud and Mobile Classes:</b> New for this year's DevCamps are several classes on helping you get started developing apps based on Cloud and Mobile technologies.  Learn how to build your first Cloud app integrated with your favourite Autodesk product – and how you can make it available 'everywhere' through browser and mobile user interfaces.  Have you been considering building your first app for the iPhone, iPad or Android device but holding back because of fear of lost hours thrashing while learning the new technology?  DevCamp includes classes that will show you how to quickly and easily create your first 'Hello World' app for iOS and Android - with a design and graphics twist.\n\n<p>AEC DevCamp is taking place June 6-7 near Boston.\n\n<p>You can attend beginner and expert classes on developing solutions with Revit, Civil 3D, Infrastructure Map Server, Vault, Autodesk BIM 360, Project Vasari, Green Building Studio, Navisworks, and other Autodesk AEC technologies.  Hear from Autodesk's AEC Leadership including Vice President Jim Lynch.  Learn firsthand about developing a new cloud based business leveraging Autodesk technologies from the co-founder of Horizontal Systems (recently acquired by Autodesk) Jordan Brandt.  \n\n<p>Here is a \n\n<a href=\"https://custom.cvent.com/FDBB345248B94F40BFFFCEF2FBE054E4/files/645f182b028d480281ebdda12bae6576.pdf\">\ncomplete list of classes</a> offered \n\nat AEC DevCamp, and you can \n\n<a href=\"http://www.cvent.com/d/ycq03r\">\nregister here</a>. \n\nRegister by April 30th to get the $100 early bird discount!\n\n<p>If you would like to participate in the optional AEC DevLab on June 8, please \n\n<a href=\"http://usa.autodesk.com/adsk/servlet/item?id=6703509&amp;siteID=123112&amp;cname=DevLab%20AEC,%20Waltham,%20Jun%2008%202012,%20201253\">\ncomplete a separate registration</a>.\n\n\n\n<a name=\"2\"></a>\n<h4>Refreshing a View</h4>\n<p>Meanwhile, another issue on the Revit API front: I have often been asked how to refresh a view, and the only last resort I was aware of until recently was to commit a transaction and save the document to an external file.\n\n<p>Now this question cropped up again, asked by Prof. José Luis Menegotto of\n\n<a href=\"https://sites.google.com/a/poli.ufrj.br/dc_menegotto/home\">\nDesenho Computacional</a> at\n\nthe University of Rio de Janeiro.\n\nThis time around, I received an important new hint: the UIDocument class provides the RefreshActiveView method.\n\n<p>Here is the initial query:\n\n<p><strong>Question:</strong> I need to show a sequence of changes in a Curtain Wall Panels facade.\nI create a main transaction and 4 sub-transactions to show the changes with a delay of 2 seconds between them, but the result always shows me the last transaction only. \nWhat am I doing wrong?\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> colecao\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( \n        <span class=\"teal\">BuiltInCategory</span>.OST_CurtainWallPanels );\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; Paneis \n    = colecao.ToElementIds();\n \n  <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  <span class=\"teal\">SubTransaction</span> sTra1 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra2 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra3 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra4 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n \n  tran.Start( <span class=\"maroon\">\"Muda a fachada\"</span> );\n \n  sTra1.Start();\n  Calcula_Padrao( doc, Paneis, 0.10 );\n  sTra1.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra2.Start();\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  sTra2.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra3.Start();\n  Calcula_Padrao( doc, Paneis, 0.05 );\n  sTra3.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra4.Start();\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  sTra4.Commit();\n \n  tran.Commit();\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p><strong>Answer:</strong> First, I can reproduce what you observe.\n\n<p>Secondly, I tried several alternative approaches using transactions to force the model to redisplay after each modification, besides your initial implementation:\n\n<ul>\n<li>Start and commit a SubTransaction: no intermediate updates.\n<li>Start and commit a SubTransaction plus regenerate the document: no intermediate updates.\n<li>Start and commit a Transaction (this includes a doc regen): no intermediate updates.\n<li>Start and commit a Transaction plus regenerate the document, for safety's sake: no intermediate updates.\n<li>Start and commit a Transaction plus save the document to a file: this does update the model in between each step.\n</li></li></li></li></li></ul>\n<p>One thing to point out here is that sub-transactions have no effect on the UI at all and therefore are completely useless for this purpose.\n\n<p>This does show that you can actually achieve what you want by using transactions instead of subtransactions, though, and saving the document to a file after each step.\n\n<p>However, a much better solution is provided by the UIDocument.RefreshActiveView method.\n\n<p>You can start a new transaction for each step and call RefreshActiveView after each transaction successfully commits instead of saving to an external file. \n\n<p>If the command is supposed to appear as a single step on the undo stack in the user interface once the command is finished, the transactions can simply be wrapped (assimilated) in a transaction group.\n\n<p>Here is the final code implementing this:\n\n<pre class=\"code\">\n  <span class=\"teal\">TransactionGroup</span> group = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc );\n  <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  group.Start( <span class=\"maroon\">\"Muda a fachada\"</span> );\n \n  tran.Start( <span class=\"maroon\">\"Step 1 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.10 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 2 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 3 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.05 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 4 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  group.Assimilate();\n</pre>\n<p>Here is \n\n<a href=\"zip/FachadaCinetica.zip\">FachadaCinetica.zip</a> containing\n\nthe complete Revit 2013 source code, Visual Studio solution and add-in manifest for the sample command.\n\n<p>It also includes code for the intermediate attempts, a wait cursor, and debug trace statements to show whereabouts we are in the process in the Visual Studio debug oputput window.\n\n\n<p><strong>Response:</strong> It works fine, and here is the \n\n<a href=\"https://sites.google.com/a/poli.ufrj.br/dc_menegotto/programacao-autolisp/ArqCin\">\nfinal result</a> for \n\nboth AutoCAD and Revit.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0746_kinetic_facade",
    "header_text": "Refreshing a View",
    "local_header_href": "#refreshing-a-view",
    "chunk_text": "<h4>Refreshing a View</h4><p>Meanwhile, another issue on the Revit API front: I have often been asked how to refresh a view, and the only last resort I was aware of until recently was to commit a transaction and save the document to an external file.\n\n<p>Now this question cropped up again, asked by Prof. José Luis Menegotto of\n\n<a href=\"https://sites.google.com/a/poli.ufrj.br/dc_menegotto/home\">\nDesenho Computacional</a> at\n\nthe University of Rio de Janeiro.\n\nThis time around, I received an important new hint: the UIDocument class provides the RefreshActiveView method.\n\n<p>Here is the initial query:\n\n<p><strong>Question:</strong> I need to show a sequence of changes in a Curtain Wall Panels facade.\nI create a main transaction and 4 sub-transactions to show the changes with a delay of 2 seconds between them, but the result always shows me the last transaction only. \nWhat am I doing wrong?\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> colecao\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( \n        <span class=\"teal\">BuiltInCategory</span>.OST_CurtainWallPanels );\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; Paneis \n    = colecao.ToElementIds();\n \n  <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  <span class=\"teal\">SubTransaction</span> sTra1 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra2 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra3 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n  <span class=\"teal\">SubTransaction</span> sTra4 = <span class=\"blue\">new</span> <span class=\"teal\">SubTransaction</span>( doc );\n \n  tran.Start( <span class=\"maroon\">\"Muda a fachada\"</span> );\n \n  sTra1.Start();\n  Calcula_Padrao( doc, Paneis, 0.10 );\n  sTra1.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra2.Start();\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  sTra2.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra3.Start();\n  Calcula_Padrao( doc, Paneis, 0.05 );\n  sTra3.Commit();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  sTra4.Start();\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  sTra4.Commit();\n \n  tran.Commit();\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p><strong>Answer:</strong> First, I can reproduce what you observe.\n\n<p>Secondly, I tried several alternative approaches using transactions to force the model to redisplay after each modification, besides your initial implementation:\n\n<ul>\n<li>Start and commit a SubTransaction: no intermediate updates.\n<li>Start and commit a SubTransaction plus regenerate the document: no intermediate updates.\n<li>Start and commit a Transaction (this includes a doc regen): no intermediate updates.\n<li>Start and commit a Transaction plus regenerate the document, for safety's sake: no intermediate updates.\n<li>Start and commit a Transaction plus save the document to a file: this does update the model in between each step.\n</li></li></li></li></li></ul>\n<p>One thing to point out here is that sub-transactions have no effect on the UI at all and therefore are completely useless for this purpose.\n\n<p>This does show that you can actually achieve what you want by using transactions instead of subtransactions, though, and saving the document to a file after each step.\n\n<p>However, a much better solution is provided by the UIDocument.RefreshActiveView method.\n\n<p>You can start a new transaction for each step and call RefreshActiveView after each transaction successfully commits instead of saving to an external file. \n\n<p>If the command is supposed to appear as a single step on the undo stack in the user interface once the command is finished, the transactions can simply be wrapped (assimilated) in a transaction group.\n\n<p>Here is the final code implementing this:\n\n<pre class=\"code\">\n  <span class=\"teal\">TransactionGroup</span> group = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc );\n  <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  group.Start( <span class=\"maroon\">\"Muda a fachada\"</span> );\n \n  tran.Start( <span class=\"maroon\">\"Step 1 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.10 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 2 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 3 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.05 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  <span class=\"teal\">Thread</span>.Sleep( 2000 );\n \n  tran.Start( <span class=\"maroon\">\"Step 4 \"</span> );\n  Calcula_Padrao( doc, Paneis, 0.4 );\n  tran.Commit();\n \n  uidoc.RefreshActiveView();\n \n  group.Assimilate();\n</pre>\n<p>Here is \n\n<a href=\"zip/FachadaCinetica.zip\">FachadaCinetica.zip</a> containing\n\nthe complete Revit 2013 source code, Visual Studio solution and add-in manifest for the sample command.\n\n<p>It also includes code for the intermediate attempts, a wait cursor, and debug trace statements to show whereabouts we are in the process in the Visual Studio debug oputput window.\n\n\n<p><strong>Response:</strong> It works fine, and here is the \n\n<a href=\"https://sites.google.com/a/poli.ufrj.br/dc_menegotto/programacao-autolisp/ArqCin\">\nfinal result</a> for \n\nboth AutoCAD and Revit.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]