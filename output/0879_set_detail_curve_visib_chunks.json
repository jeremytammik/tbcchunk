[
  {
    "original_filename": "0879_set_detail_curve_visib",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0879_set_detail_curve_visib",
    "header_text": "Set Detail Curve Visibility",
    "local_header_href": "#set-detail-curve-visibility",
    "chunk_text": "<h3>Set Detail Curve Visibility</h3><p>Mostly, the Revit API limits an add-in to pretty high-level operations, encapsulating and protecting the parametric BIM from reckless modifications.\nFor the nonce, here is a little bit of nitty-gritty bit manipulation anyway, in a utility method provided by Scott Conover:</p><p><strong>Question:</strong> Why is there no DetailCurve.SetVisibility method exposed, similar to ModelCurves.SetVisibility?\n\n<p>The UI has this functionality, and I would find very good use for it in reinforcement detailing.\n\n<p>I want to programmatically create a detail family representing a certain rebar shape.\nThe family instance should reflect the visibility states, single line in coarse, double line in fine.\n\n<p><strong>Answer:</strong> The ModelCurve.SetVisibility method taking a FamilyElementVisibility argument is available for visibility of curve elements in families when the families are placed.\nSimilarly we have a SymbolicCurve.SetVisibility method.\nDetail curves don't have the exact same functionality in the UI.\nGenerally, detail curves are visible only in a single view in which they are placed.\nThe access you describe is partially enabled for detail families, however.\n\n<p>Here is a workaround to access this functionality:  the visibility settings for the curve are stored in the integer GEOM_VISIBILITY_PARAM built-in parameter as bit flags.\nYou can therefore request the desired display by setting the appropriate bits in that parameter value.\n\n<p>The SetFamilyVisibility method presented below turns off the modes you do not want for visibility.\nIt can be called either from an external command or a macro.\n\n<p>It makes use of a simple selection filter to restrict the user selection to detail curves:\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">DetailCurveSelectionFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n  {\n    <span class=\"teal\">CurveElementFilter</span> filter\n      = <span class=\"blue\">new</span> <span class=\"teal\">CurveElementFilter</span>(\n        <span class=\"teal\">CurveElementType</span>.DetailCurve );\n \n    <span class=\"blue\">return</span> filter.PassesFilter( e );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n}\n</pre>\n<p>Here is the method implementation itself:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> SetFamilyVisibility( <span class=\"teal\">UIDocument</span> uidoc )\n{\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n    <span class=\"teal\">ObjectType</span>.Element,\n    <span class=\"blue\">new</span> <span class=\"teal\">DetailCurveSelectionFilter</span>(),\n    <span class=\"maroon\">\"Select detail curve\"</span> );\n \n  <span class=\"teal\">Element</span> elem = doc.GetElement( r );\n \n  <span class=\"teal\">Parameter</span> visParam = elem.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.GEOM_VISIBILITY_PARAM );\n \n  <span class=\"blue\">int</span> vis = visParam.AsInteger();\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    t.Start( <span class=\"maroon\">\"Set curve visibility\"</span> );\n \n    <span class=\"green\">// Turn off the bit corresponding</span>\n    <span class=\"green\">// to the unwanted modes</span>\n \n    vis = vis &amp; ~( 1 &lt;&lt; 13 ); <span class=\"green\">// Coarse</span>\n    <span class=\"green\">//vis = vis &amp; ~(1 &lt;&lt; 14); // Medium</span>\n    <span class=\"green\">//vis = vis &amp; ~(1 &lt;&lt; 15); // Fine</span>\n \n    visParam.Set( vis );\n \n    t.Commit();\n  }\n}\n</pre>\n<p>Remember that all three modes cannot be turned off simultaneously – a posted error will result.\n\n<p>Here is\n\n<a href=\"zip/SetDetailCurveVisibility.zip\">\nSetDetailCurveVisibility.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for an external command implementation of this.</p>\n<p>Many thanks to Scott for this tricky hint!</p>\n</p></p></p></p></p></p></p></p></p>"
  }
]