[
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "ADN Mesh Data Custom Exporter to JSON",
    "local_header_href": "#adn-mesh-data-custom-exporter-to-json",
    "chunk_text": "<h3>ADN Mesh Data Custom Exporter to JSON</h3><p>I mentioned my idea of implementing a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/graphics-pipeline-custom-exporter.html#7\">\ncustom exporter to JSON</a> to drive\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html\">Philippe Leefsma</a>'s online\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/06/3d-webgl-viewer-with-javascript-and-threejs.html\">\n3D WebGL viewer</a>.</p><p>Well, here it is.</p><a name=\"muttenhorn\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Muttenhorn",
    "local_header_href": "#muttenhorn",
    "chunk_text": "<h4>Muttenhorn</h4><p>Before getting to that, though, let me briefly mention that I went on a nice mountain with my friend Martin last Saturday, over the Gross Muttenhorn on the south side of the Furka pass.</p><p>A glacier named Muttgletscher lies over its north-western flanks, and we crossed that on our ascent up to the west ridge.\nFrom the summit we continued down the east ridge to descend between the three lakes next to the Stotzigen Firsten:</p><center>\n<img alt=\"A lake at Stotzigen Firsten by Muttenhorn\" src=\"file:////j/photo/jeremy/2013/2013-07-06_muttenhorn/p1020836_blue_lake_stotzigen_firsten.jpg\" width=\"250\"/>\n</center><p>Here are some\n\n<a href=\"https://www.facebook.com/media/set/?set=a.10200914722843221.1073741825.1019863650&amp;type=1\">\nmore pictures</a> if\n\nyou be so inclined.</p>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Gwen and Dave's Getaway",
    "local_header_href": "#gwen-and-daves-getaway",
    "chunk_text": "<h4>Gwen and Dave's Getaway</h4><p>Another little non-Revit pointer is to the\n\n<a href=\"http://area.autodesk.com/contest/winners\">Gwen and Dave's Getaway</a> animated\n\nshort film contest.\nI really like the two top prize winners,\n\n<a href=\"http://area.autodesk.com/contest/videos/sky-fishing#content\">\nSky Fishing</a> by Austin Reddington and\n\n<a href=\"http://area.autodesk.com/contest/videos/peace-and-quiet#content\">Peace and Quiet</a> by\nKhye Kading; well worth just a few minutes of your time.</p><p>Now, back to business.</p><a name=\"1\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "ADN Mesh Data Custom Exporter",
    "local_header_href": "#adn-mesh-data-custom-exporter",
    "chunk_text": "<h4>ADN Mesh Data Custom Exporter</h4><p>I was originally expecting to be done in just a few hours, but this turned out to be a full one day plus night project that kept me happily busy until four o'clock this morning, touching on numerous topics and challenges both named and unnamed, some of which are:</p><ul>\n<li><a href=\"#2\">ADN mesh data format</a></li>\n<li><a href=\"#3\">Tetrahedron sample JSON data</a></li>\n<li><a href=\"#4\">Little house and curved wall in JSON</a></li>\n<li><a href=\"#5\">Custom exporter implementation and components</a></li>\n<li><a href=\"#6\">Centroid and volume</a></li>\n<li><a href=\"#7\">Export context implementation</a></li>\n<li><a href=\"#8\">ADN mesh data class</a></li>\n<li><a href=\"#9\">JSON serialisation</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "ADN Mesh Data Format",
    "local_header_href": "#adn-mesh-data-format",
    "chunk_text": "<h4>ADN Mesh Data Format</h4><p>Before we can implement our custom exporter, we need a definition of the JSON format to generate.\nI analysed the files provided by Philippe and described the result in my\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/06/3d-webgl-viewer-with-javascript-and-threejs.html?cid=6a0167607c2431970b0192abb7b8d8970d#comment-6a0167607c2431970b0192abb7b8d8970d\">\ncomment</a> on his post:\n\nI see the FacetCount, VertexCount, VertexCoords, VertexIndices, Normals, NormalIndices, Center, Color and Id properties define in the JSON file.\nExactly how are these defined, and are some of them optional?\n\n<p>Philippe replies: the AdnMeshData class definition specifies the data format:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">AdnMeshData</span>\n  {\n    <span class=\"blue\">public</span> AdnMeshData()\n    {\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span> FacetCount\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span> VertexCount\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">double</span>[] VertexCoords\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span>[] VertexIndices\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">double</span>[] Normals\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span>[] NormalIndices\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">double</span>[] Center\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span>[] Color\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Id\n    {\n      <span class=\"blue\">get</span>;\n      <span class=\"blue\">protected</span> <span class=\"blue\">set</span>;\n    }\n  }\n</pre>\n<p>All remaining issues are clarified by this little Q&amp;A:</p>\n<ul>\n<li>Are only triangles supported?\n  –  Yes, only triangles, that’s what Inventor provides.</li>\n<li>Are any of the properties optional?\n  –  FacetCount and VertexCount are optional.</li>\n<li>What happens if you simply omit the normals?\nWill they be automatically calculated from the triangle definitions?\n  –  As it is now it won’t work.\nThose are the normals at the vertices, not at the faces, this info is important to webgl rendering to compute the lights in a realistic way.\nThis is what makes the model looks good even if it has been triangulated.</li>\n<li>What about the facet and vertex count?\nThey could be automatically deduced from the lists provided.\n  –  Yep, in the webgl viewer those properties aren’t used actually.</li>\n</ul>\n<p>That should be enough to get us up and running.</p>\n<a name=\"3\"></a>\n<h4>Tetrahedron Sample JSON Data</h4>\n<p>After I completed my very first stab at the implementation and dragged the resulting JSON output file onto Philippe's web viewer, nothing was displayed.</p>\n<p>By the way, I am making of this\n\n<a href=\"zip/webgl-viewer-5.zip\">offline version</a> that\n\nhe provided for testing.</p>\n<p>The reason turned out to be some misunderstanding about the triangle vertex order in the JSON input file.</p>\n<p>To ensure I could understand what was going on and how the vertices need to be sorted, I implemented a little JSON file by hand defining a tetrahedron between the four points (0,0,0), (10,0,0), (0,10,0) and (0,0,10):</p>\n<pre>\n[\n{\n \"FacetCount\":4,\n \"VertexCount\":4,\n \"VertexCoords\":[0,0,0, 10,0,0, 0,10,0, 0,0,10],\n \"VertexIndices\":[0,2,1, 0,1,3, 0,3,2, 1,2,3],\n \"Normals\":[0,0,-1, 0,-1,0, -1,0,0, 1,1,1],\n \"NormalIndices\":[0,0,0, 1,1,1, 2,2,2, 3,3,3],\n \"Center\":[3,3,3],\n \"Color\":[-2139062017],\n \"Id\":\"tetrahedron\"\n}\n]\n</pre>\n<p>Here is what it looks like in the web viewer:</p>\n<center>\n<img alt=\"WebGL viewer showing tetrahedron\" src=\"img/webgl_tetrahedron.png\" width=\"250\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Little House and Curved Wall in JSON</h4>\n<p>Once I had that sorted, I proceeded to debug the display of one single wall, and progressed to the little house generated by the ADN training labs.</p>\n<p>In Revit, it looks like this in perspective view:</p>\n<center>\n<img alt=\"Little house in perspective view\" src=\"img/little_house_perspective_view.png\" width=\"200\"/>\n</center>\n<p>The WebGL rendering of the JSON export looks like this:</p>\n<center>\n<img alt=\"Little house in WebGL\" src=\"img/webgl_little_house.png\" width=\"200\"/>\n</center>\n<p>Finally, here is a rather strange sample BIM from Philippe,\n\n<a href=\"zip/CurvedWall.rvt\">CurvedWall.rvt</a>,\n\nits old JSON representation\n\n<a href=\"zip/CurvedWall.json\">CurvedWall.json</a>,\n\ngenerated using the Revit 2013 generator based on the ElementViewer SDK sample, and the new version\n\n<a href=\"zip/CurvedWallJt.json\">CurvedWallJt.json</a> generated\n\nby this custom exporter, looking like this in the WebGL viewer:</p>\n<center>\n<img alt=\"Curved wall model in WebGL\" src=\"img/CurvedWall.png\" width=\"200\"/>\n</center>\n<a name=\"5\"></a>\n<h4>Custom Exporter Implementation and Components</h4>\n<p>I ended up reusing a number of components from previous projects for this little endeavour.</p>\n<p>Here is\n\n<a href=\"zip/CustomExporterAdnMeshJson.zip\">\nCustomExporterAdnMeshJson.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for the ADN mesh data custom exporter external command add-in.</p>\n<p>It consists of the following modules:</p>\n<ul>\n<li>AdnMeshData.cs – The data format specifying one solid for the WebGL viewer, defining its centre, colour, id, triangular facets, their vertex coordinates, indices and normals as discussed above.</li>\n<li>CentroidVolume.cs – Calculate and store the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html\">\ncentroid and volume</a> from a set of triangular facets.</li>\n<li>Command.cs – ADN mesh data custom exporter external command mainline.</li>\n<li>ExportContextAdnMesh.cs – Custom exporter IExportContext implementation to capture ADN mesh data.</li>\n<li>NormalLookupXyz.cs – A facet normal vector lookup class to avoid duplicate normal vector definitions, similar to the vertex lookup mentioned below.</li>\n<li>PointInt.cs – An integer-based 3D point class, supporting the vertex lookup, storing the vertices in integer number millimetres for the sake of efficiency, readability, and to avoid all rounding issues.</li>\n<li>Util.cs – Utility methods.</li>\n<li>VertexLookupInt.cs – A vertex lookup class to avoid duplicate vertex definitions, reused from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/graphics-pipeline-custom-exporter.html#6\">\nOBJ exporter</a>.</li>\n</ul>\n<p>Which ones should we discuss in greater depth?</p>\n<p>I will skip the integer-based point and lookup classes, since I have already belaboured them repeatedly in the past.</p>\n<a name=\"6\"></a>\n<h4>Centroid and Volume</h4>\n<p>The ADN mesh data format requires a centre point.</p>\n<p>The custom exporter is fed faces, and does not have a built-in mechanism to identify solids.</p>\n<p>Therefore, the determination of a centre point needs to be based on the facets we receive instead.</p>\n<p>Happily, I already discussed how to determine\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html\">\ncentroid and volume</a> using\n\nan algorithm that calculates and stores these properties from a set of triangular facets.\n<p>I cleaned up the previous implementation to make its use more obvious, and it now looks like this:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">CentroidVolume</span>\n{\n  <span class=\"teal\">XYZ</span> _centroid;\n  <span class=\"blue\">double</span> _volume;\n \n  <span class=\"blue\">public</span> CentroidVolume()\n  {\n    Init();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Init()\n  {\n    _centroid = <span class=\"teal\">XYZ</span>.Zero;\n    _volume = 0.0;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> AddTriangle( <span class=\"teal\">XYZ</span>[] p )\n  {\n    <span class=\"blue\">double</span> vol\n      = p[0].X * ( p[1].Y * p[2].Z - p[2].Y * p[1].Z )\n      + p[0].Y * ( p[1].Z * p[2].X - p[2].Z * p[1].X )\n      + p[0].Z * ( p[1].X * p[2].Y - p[2].X * p[1].Y );\n \n    _centroid += vol * ( p[0] + p[1] + p[2] );\n    _volume += vol;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set centroid coordinates and volume </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to their final values when completed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Complete()\n  {\n    _centroid /= 4 * _volume;\n    _volume /= 6;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">XYZ</span> Centroid\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _centroid;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">double</span> Volume\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _volume;\n    }\n  }\n \n  <span class=\"blue\">override</span> <span class=\"blue\">public</span> <span class=\"blue\">string</span> ToString()\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Util</span>.RealString( _volume ) + <span class=\"maroon\">\"@\"</span>\n      + <span class=\"teal\">Util</span>.PointString( _centroid );\n  }\n}\n</pre>\n<p>In my current test implementation, I just close the calculation when an element ends.</p>\n<p>This should probably be improved to terminate every time the material changes, to handle cases like windows with several different components using different materials.</p>\n<p>Actually, you can see that the windows in the screen snapshots above are not perfectly rendered due to this.</p>\n<a name=\"7\"></a>\n<h4>Export Context Implementation</h4>\n<p>By far the most complex module is the export context implementation.</p>\n<p>The IExportContext interface specifies the following methods:</p>\n<pre class=\"code\">\n  <span class=\"blue\">void</span> Finish();\n  <span class=\"blue\">bool</span> IsCanceled();\n  <span class=\"blue\">void</span> OnDaylightPortal( <span class=\"teal\">DaylightPortalNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnElementBegin( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"blue\">void</span> OnElementEnd( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"teal\">RenderNodeAction</span> OnFaceBegin( <span class=\"teal\">FaceNode</span> node );\n  <span class=\"blue\">void</span> OnFaceEnd( <span class=\"teal\">FaceNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnInstanceBegin( <span class=\"teal\">InstanceNode</span> node );\n  <span class=\"blue\">void</span> OnInstanceEnd( <span class=\"teal\">InstanceNode</span> node );\n  <span class=\"blue\">void</span> OnLight( <span class=\"teal\">LightNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnLinkBegin( <span class=\"teal\">LinkNode</span> node );\n  <span class=\"blue\">void</span> OnLinkEnd( <span class=\"teal\">LinkNode</span> node );\n  <span class=\"blue\">void</span> OnMaterial( <span class=\"teal\">MaterialNode</span> node );\n  <span class=\"blue\">void</span> OnPolymesh( <span class=\"teal\">PolymeshTopology</span> node );\n  <span class=\"blue\">void</span> OnRPC( <span class=\"teal\">RPCNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnViewBegin( <span class=\"teal\">ViewNode</span> node );\n  <span class=\"blue\">void</span> OnViewEnd( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"blue\">bool</span> Start();\n</pre>\n<p>A very few of them can be left unimplemented, at least in my simple test project, but most need attention.\nI left the NotImplementedException statements in the unimplemented ones, so that I am notified if they are called.</p>\n<p>I implemented some rudimentary logging to see in which order the methods are called in the debug output window.</p>\n<p>A number of the methods provide support for cancelling the rendering process and need to return true or RenderNodeAction.Proceed for it to continue.</p>\n<p>Family instances and links need to push their transformations onto a stack, and all vertices received need to be transformed appropriately.</p>\n<!--\n<p>I still have doubts about the counter-clockwise orientation of triangle vertices, and you can see the traces of that in the StoreTriangle method, where I swapped the access to the second and third vertex.\nThat enabled me to see the image of the little house shown above, but some faces are still not displaying properly.</p>\n\n<p>That aspect should still be considered work in progress.</p>\n-->\n<p>Here is the complete implementation of the ADN mesh data export context in its current state:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ExportContextAdnMesh</span> : <span class=\"teal\">IExportContext</span>\n{\n  <span class=\"teal\">Document</span> _doc;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Stack of transformations for </span>\n  <span class=\"gray\">///</span><span class=\"green\"> link and instance elements.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Stack</span>&lt;<span class=\"teal\">Transform</span>&gt; _transformationStack\n    = <span class=\"blue\">new</span> <span class=\"teal\">Stack</span>&lt;<span class=\"teal\">Transform</span>&gt;();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangle vertices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of normal vectors, defined by an index </span>\n  <span class=\"gray\">///</span><span class=\"green\"> into the normal lookup for each triangle vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _normalIndices = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n \n  <span class=\"teal\">NormalLookupXyz</span> _normals = <span class=\"blue\">new</span> <span class=\"teal\">NormalLookupXyz</span>();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Calculate centre of gravity of current element.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">CentroidVolume</span> _centroid_volume\n    = <span class=\"blue\">new</span> <span class=\"teal\">CentroidVolume</span>();\n \n  <span class=\"teal\">Color</span> _color;\n  <span class=\"blue\">double</span> _transparency;\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">AdnMeshData</span>&gt; _data;\n \n  <span class=\"blue\">public</span> ExportContextAdnMesh( <span class=\"teal\">Document</span> doc )\n  {\n    _doc = doc;\n    _data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">AdnMeshData</span>&gt;();\n    _transformationStack.Push( <span class=\"teal\">Transform</span>.Identity );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">AdnMeshData</span>[] MeshData\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _data.ToArray();\n    }\n  }\n \n  <span class=\"teal\">Transform</span> CurrentTransform\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _transformationStack.Peek();\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Store a triangle, adding new vertices for it</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to our vertex lookup dictionary if needed and</span>\n  <span class=\"gray\">///</span><span class=\"green\"> accumulating its volume and centroid contribution.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle(\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; vertices,\n    <span class=\"teal\">PolymeshFacet</span> triangle,\n    <span class=\"teal\">XYZ</span> normal )\n  {\n    <span class=\"green\">// Retrieve the three triangle vertices</span>\n \n    <span class=\"teal\">Transform</span> currentTransform = CurrentTransform;\n \n    <span class=\"teal\">XYZ</span>[] p = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[] {\n      currentTransform.OfPoint( vertices[triangle.V1] ),\n      currentTransform.OfPoint( vertices[triangle.V2] ),\n      currentTransform.OfPoint( vertices[triangle.V3] )\n    };\n \n    <span class=\"green\">// Ensure the three are ordered counter-clockwise</span>\n \n    <span class=\"teal\">XYZ</span> v = p[1] - p[0];\n    <span class=\"teal\">XYZ</span> w = p[2] - p[0];\n\n    <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">Util</span>.IsRightHanded( v, w, normal ),\n      <span class=\"maroon\">\"expected counter-clockwise vertex order\"</span> );\n \n    <span class=\"green\">// Centroid and volume calculation</span>\n \n    _centroid_volume.AddTriangle( p );\n \n    <span class=\"green\">// Store vertex, facet and normals</span>\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p[i] );\n \n      _triangles.Add( _vertices.AddVertex( q ) );\n \n      _normalIndices.Add( _normals.AddNormal(\n        currentTransform.OfVector( normal ) ) );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Finish()\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Finish\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsCanceled()\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnDaylightPortal(\n    <span class=\"teal\">DaylightPortalNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnElementBegin(\n    <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"blue\">string</span> s = elementId.IntegerValue.ToString();\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ElementBegin id \"</span> + s );\n \n    _vertices.Clear();\n    _triangles.Clear();\n    _normals.Clear();\n    _normalIndices.Clear();\n    _centroid_volume.Init();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnElementEnd( <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ElementEnd\"</span> );\n \n    <span class=\"green\">// Set centroid coordinates to their final value</span>\n \n    _centroid_volume.Complete();\n \n    <span class=\"blue\">string</span> metadataId = _doc.GetElement(\n      elementId ).UniqueId;\n \n    <span class=\"teal\">AdnMeshData</span> meshData = <span class=\"blue\">new</span> <span class=\"teal\">AdnMeshData</span>(\n      _vertices, _triangles, _normals, _normalIndices,\n      <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( _centroid_volume.Centroid ),\n      _color, _transparency, metadataId );\n \n    _data.Add( meshData );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnFaceBegin( <span class=\"teal\">FaceNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnFaceEnd( <span class=\"teal\">FaceNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnInstanceBegin(\n    <span class=\"teal\">InstanceNode</span> node )\n  {\n    <span class=\"teal\">FamilySymbol</span> symbol = _doc.GetElement(\n      node.GetSymbolId() ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != symbol,\n      <span class=\"maroon\">\"expected valid family symbol\"</span> );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"InstanceBegin \"</span>\n      + symbol.Category.Name + <span class=\"maroon\">\" : \"</span>\n      + symbol.Family.Name + <span class=\"maroon\">\" : \"</span>\n      + symbol.Name );\n \n    _transformationStack.Push( CurrentTransform\n      .Multiply( node.GetTransform() ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnInstanceEnd( <span class=\"teal\">InstanceNode</span> node )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"InstanceEnd\"</span> );\n \n    _transformationStack.Pop();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnLight( <span class=\"teal\">LightNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnLinkBegin( <span class=\"teal\">LinkNode</span> node )\n  {\n    _transformationStack.Push( CurrentTransform\n      .Multiply( node.GetTransform() ) );\n \n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnLinkEnd( <span class=\"teal\">LinkNode</span> node )\n  {\n    _transformationStack.Pop();\n \n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnMaterial( <span class=\"teal\">MaterialNode</span> node )\n  {\n    <span class=\"teal\">Color</span> c = node.Color;\n    <span class=\"blue\">double</span> t = node.Transparency;\n \n    <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"({0},{1},{2})\"</span>,\n      c.Red, c.Green, c.Blue );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Colour \"</span> + s + <span class=\"maroon\">\", transparency \"</span>\n      + t.ToString( <span class=\"maroon\">\"0.##\"</span> ) );\n \n    _color = c;\n    _transparency = t;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnPolymesh( <span class=\"teal\">PolymeshTopology</span> node )\n  {\n    <span class=\"blue\">int</span> nPts = node.NumberOfPoints;\n    <span class=\"blue\">int</span> nFacets = node.NumberOfFacets;\n \n    <span class=\"teal\">DistributionOfNormals</span> distrib\n      = node.DistributionOfNormals;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Polymesh {0} vertices {1} facets\"</span>,\n      nPts, nFacets ) );\n \n    <span class=\"blue\">int</span> iFacet = 0;\n    <span class=\"blue\">int</span> iPoint = 0;\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; vertices = node.GetPoints();\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; normals = node.GetNormals();\n    <span class=\"teal\">XYZ</span> normal;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">PolymeshFacet</span> triangle <span class=\"blue\">in</span> node.GetFacets() )\n    {\n      <span class=\"green\">// Just grab one normal per facet; ignore the </span>\n      <span class=\"green\">// three normals per point if they differ.</span>\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">DistributionOfNormals</span>.OnePerFace == distrib )\n      {\n        normal = node.GetNormal( 0 );\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"teal\">DistributionOfNormals</span>.OnEachFacet\n        == distrib )\n      {\n        normal = node.GetNormal( iFacet++ );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">DistributionOfNormals</span>\n          .AtEachPoint == distrib, <span class=\"maroon\">\"what else?\"</span> );\n \n        normal = node.GetNormal( iPoint++ )\n          + node.GetNormal( iPoint++ )\n          + node.GetNormal( iPoint++ );\n        normal /= 3.0;\n      }\n \n      StoreTriangle( vertices, triangle, normal );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnRPC( <span class=\"teal\">RPCNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnViewBegin( <span class=\"teal\">ViewNode</span> node )\n  {\n    <span class=\"teal\">View3D</span> view = _doc.GetElement( node.ViewId )\n      <span class=\"blue\">as</span> <span class=\"teal\">View3D</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != view,\n      <span class=\"maroon\">\"expected valid 3D view\"</span> );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ViewBegin \"</span> + view.Name );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnViewEnd( <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ViewEnd\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Start()\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Start\"</span> );\n    <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n  }\n}\n</pre>\n<p>The rendering generates a list of AdnMeshData instances.</p>\n<p>Each one of them contains the data required to render one solid.</p>\n<a name=\"8\"></a>\n<h4>ADN Mesh Data Class</h4>\n<p>Here are the methods used to structure and store the ADN mesh data:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">AdnMeshData</span>\n{\n  <span class=\"blue\">int</span> FacetCount { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// optional</span>\n  <span class=\"blue\">int</span> VertexCount { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// optional</span>\n  <span class=\"blue\">int</span>[] VertexCoords { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span>[] VertexIndices { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// triangles</span>\n  <span class=\"blue\">double</span>[] Normals { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span>[] NormalIndices { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// not optional, one normal per vertex</span>\n  <span class=\"blue\">int</span>[] Center { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span> Color { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">string</span> Id { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Apply this factor to all point data when </span>\n  <span class=\"gray\">///</span><span class=\"green\"> saving to JSON to accomodate the expected</span>\n  <span class=\"gray\">///</span><span class=\"green\"> scaling.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _export_factor = 0.002;\n \n  <span class=\"blue\">public</span> AdnMeshData(\n    <span class=\"teal\">VertexLookupInt</span> vertices,\n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; vertexIndices,\n    <span class=\"teal\">NormalLookupXyz</span> normals,\n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; normalIndices,\n    <span class=\"teal\">PointInt</span> center,\n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">double</span> transparency,\n    <span class=\"blue\">string</span> id )\n  {\n    <span class=\"blue\">int</span> n = vertexIndices.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == (n % 3),\n      <span class=\"maroon\">\"expected triples of 3D point vertex indices\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( normalIndices.Count == n,\n      <span class=\"maroon\">\"expected a normal for each vertex\"</span> );\n \n    FacetCount = n / 3;\n \n    n = vertices.Count;\n    VertexCount = n;\n    VertexCoords = <span class=\"blue\">new</span> <span class=\"blue\">int</span>[n * 3];\n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> p <span class=\"blue\">in</span> vertices.Keys )\n    {\n      VertexCoords[i++] = p.X;\n      VertexCoords[i++] = p.Y;\n      VertexCoords[i++] = p.Z;\n    }\n    VertexIndices = vertexIndices.ToArray();\n \n    n = normals.Count;\n    Normals = <span class=\"blue\">new</span> <span class=\"blue\">double</span>[n * 3];\n    i = 0;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> v <span class=\"blue\">in</span> normals.Keys )\n    {\n      Normals[i++] = v.X;\n      Normals[i++] = v.Y;\n      Normals[i++] = v.Z;\n    }\n    NormalIndices = normalIndices.ToArray();\n \n    Center = <span class=\"blue\">new</span> <span class=\"blue\">int</span>[3];\n    i = 0;\n    Center[i++] = center.X;\n    Center[i++] = center.Y;\n    Center[i] = center.Z;\n \n    <span class=\"blue\">byte</span> alpha = (<span class=\"blue\">byte</span>) (\n      ( 100 - transparency ) * 2.55555555 );\n \n    Color = ConvertClr(\n      color.Red, color.Green, color.Blue, alpha );\n \n    Id = id;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Convert colour and transparency to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the required integer format.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> ConvertClr( <span class=\"blue\">byte</span> r, <span class=\"blue\">byte</span> g, <span class=\"blue\">byte</span> b, <span class=\"blue\">byte</span> a )\n  {\n    <span class=\"blue\">return</span> ( r &lt;&lt; 24 ) + ( g &lt;&lt; 16 ) + ( b &lt;&lt; 8 ) + a;\n  }\n</pre>\n<p>That completes the input side of this class.</p>\n<p>It is followed by the output:</p>\n<a name=\"9\"></a>\n<h4>JSON Serialisation</h4>\n<p>Once the ADN mesh data has been assembled, I want to export it to a JSON file to pass into Philippe's viewer.</p>\n<p>I did think of using a JSON serialisation library.\nThe .NET framework provides two different ones:</p>\n<ul>\n<li>System.Web.Script.Serialization.JavaScriptSerializer</li>\n<li>System.Runtime.Serialization.Json.DataContractJsonSerializer</li>\n</ul>\n<p>In addition, numerous other libraries are available.</p>\n<p>I read a nice short discussion on their various advantages and disadvantages, resulting in the author rolling his own\n\n<a href=\"http://procbits.com/2011/08/11/fridaythe13th-the-best-json-parser-for-silverlight-and-net\">\nFridayThe13th library</a>.</p>\n<p>That prompted me to simply implement the serialisation myself inline in a member method of the AdnMeshData class like this:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">string</span> ToJson()\n{\n  <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Format\n    ( <span class=\"maroon\">\"\\n \\\"FacetCount\\\":{0},\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexCount\\\":{1},\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexCoords\\\":[{2}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexIndices\\\":[{3}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Normals\\\":[{4}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"NormalIndices\\\":[{5}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Center\\\":[{6}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Color\\\":[{7}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Id\\\":\\\"{8}\\\"\"</span>,\n    FacetCount,\n    VertexCount,\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, VertexCoords.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; ( _export_factor * i ).ToString( <span class=\"maroon\">\"0.#\"</span> ) ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, VertexIndices.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; i.ToString() ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, Normals.Select&lt;<span class=\"blue\">double</span>, <span class=\"blue\">string</span>&gt;( a =&gt; a.ToString( <span class=\"maroon\">\"0.####\"</span> ) ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, NormalIndices.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; i.ToString() ) ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, Center.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; ( _export_factor * i ).ToString( <span class=\"maroon\">\"0.#\"</span> ) ) ),\n    Color,\n    Id );\n \n  <span class=\"blue\">return</span> <span class=\"maroon\">\"\\n{\"</span> + s + <span class=\"maroon\">\"\\n}\"</span>;\n}\n</pre>\n<p>Notice the last minute scaling applied via the _export_factor to generate a model in a suitable size for Philippe's viewer  :-)</p>\n<a name=\"10\"></a>\n<h4>Driving the Process and Streaming to File</h4>\n<p>The command mainline checks for a valid 3D view in a valid project document, then drives the exporter and retrieves its mesh data instances to serialise the data to JSON like this:</p>\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// This command requires an active document</span>\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc )\n    {\n      message = <span class=\"maroon\">\"Please run this command in an active project document.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">View3D</span> view = doc.ActiveView <span class=\"blue\">as</span> <span class=\"teal\">View3D</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == view )\n    {\n      message = <span class=\"maroon\">\"Please run this command in a 3D view.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// Instantiate our custom context</span>\n \n    <span class=\"teal\">ExportContextAdnMesh</span> context\n      = <span class=\"blue\">new</span> <span class=\"teal\">ExportContextAdnMesh</span>( doc );\n \n    <span class=\"green\">// Instantiate a custom exporter with it</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">CustomExporter</span> exporter\n      = <span class=\"blue\">new</span> <span class=\"teal\">CustomExporter</span>( doc, context ) )\n    {\n      <span class=\"green\">// Tell the exporter whether we need face info.</span>\n      <span class=\"green\">// If not, it is better to exclude them, since </span>\n      <span class=\"green\">// processing faces takes significant time and </span>\n      <span class=\"green\">// memory. In any case, tessellated polymeshes</span>\n      <span class=\"green\">// can be exported (and will be sent to the </span>\n      <span class=\"green\">// context). Excluding faces just excludes the calls, </span>\n      <span class=\"green\">// not the actual processing of face tessellation. </span>\n      <span class=\"green\">// Meshes of the faces will still be received by </span>\n      <span class=\"green\">// the context.</span>\n \n      exporter.IncludeFaces = <span class=\"blue\">false</span>;\n \n      exporter.Export( view );\n    }\n \n    <span class=\"green\">// Save ADN mesh data in JSON format</span>\n \n    <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>(\n      <span class=\"maroon\">\"C:/tmp/test.json\"</span> );\n \n    s.Write( <span class=\"maroon\">\"[\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">AdnMeshData</span> d <span class=\"blue\">in</span> context.MeshData )\n    {\n      <span class=\"blue\">if</span>( 0 &lt; i ) { s.Write( <span class=\"maroon\">','</span> ); }\n \n      s.Write( d.ToJson() );\n \n      ++i;\n    }\n \n    s.Write( <span class=\"maroon\">\"\\n]\\n\"</span> );\n    s.Close();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>The complete code and solution is available for\n\n<a href=\"#5\">download</a> above.</p>\n<!-- <p>As said, some issues remain to be resolved, probably due to the triangle vertex ordering.</p> -->\n<p>The only remaining open issue with this right now that I am aware of is how to generate different ADN mesh data instances for different materials, e.g. separate output for a window pane and its frame.</p>\n<p>So now we have three different and pretty diverse custom exporters to experiment with.</p>\n<p>I am looking forward to hearing what experiences you have with the custom exporter framework.</p>\n<!--\n\n<p>The ADN mesh format is solid based, whereas the custom exporter is face based.</p>\n\n<p>I need to implement something to grok when one solid is finished and the next begins.</p>\n\n<p>This makes a difference for an element such as a window, with a transparent pane and an opaque frame.</p>\n\n<p>For this, I could implement a reaction to a material change, and close out the current solid when that happens.</p>\n\n<a name=\"4\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n-->\n<hr/>\n<h1>Cloud and Mobile</h1>\n<h3>Revit ADN Mesh Data Custom Exporter to JSON</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>I implemented a new Revit 2014\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#1\">\ncustom exporter to JSON</a> generating the ADN mesh data to drive\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html\">Philippe Leefsma</a>'s online\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/06/3d-webgl-viewer-with-javascript-and-threejs.html\">\n3D WebGL viewer</a>.</p>\n<p>This is obviously mainly of interest to Revit API aficionados, though some of the topics covered are completely generic cloud and mobile issues as well:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#2\">ADN mesh data format</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#3\">Tetrahedron sample JSON data</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#4\">Little house and curved wall in JSON</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#5\">Custom exporter implementation and components</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#6\">Centroid and volume</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#7\">Export context implementation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#8\">ADN mesh data class</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#9\">JSON serialisation</a></li>\n</ul>\n<p>The post also mentions my most recent mountain hike to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#muttenhorn\">\nMuttenhorn</a>   :-)</p>\n<center>\n<img alt=\"A lake at Stotzigen Firsten by Muttenhorn\" src=\"file:////j/photo/jeremy/2013/2013-07-06_muttenhorn/p1020836_blue_lake_stotzigen_firsten.jpg\" width=\"250\"/>\n</center>\n</p></p>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Tetrahedron Sample JSON Data",
    "local_header_href": "#tetrahedron-sample-json-data",
    "chunk_text": "<h4>Tetrahedron Sample JSON Data</h4><p>After I completed my very first stab at the implementation and dragged the resulting JSON output file onto Philippe's web viewer, nothing was displayed.</p><p>By the way, I am making of this\n\n<a href=\"zip/webgl-viewer-5.zip\">offline version</a> that\n\nhe provided for testing.</p><p>The reason turned out to be some misunderstanding about the triangle vertex order in the JSON input file.</p><p>To ensure I could understand what was going on and how the vertices need to be sorted, I implemented a little JSON file by hand defining a tetrahedron between the four points (0,0,0), (10,0,0), (0,10,0) and (0,0,10):</p><pre>\n[\n{\n \"FacetCount\":4,\n \"VertexCount\":4,\n \"VertexCoords\":[0,0,0, 10,0,0, 0,10,0, 0,0,10],\n \"VertexIndices\":[0,2,1, 0,1,3, 0,3,2, 1,2,3],\n \"Normals\":[0,0,-1, 0,-1,0, -1,0,0, 1,1,1],\n \"NormalIndices\":[0,0,0, 1,1,1, 2,2,2, 3,3,3],\n \"Center\":[3,3,3],\n \"Color\":[-2139062017],\n \"Id\":\"tetrahedron\"\n}\n]\n</pre><p>Here is what it looks like in the web viewer:</p><center>\n<img alt=\"WebGL viewer showing tetrahedron\" src=\"img/webgl_tetrahedron.png\" width=\"250\"/>\n</center><a name=\"4\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Little House and Curved Wall in JSON",
    "local_header_href": "#little-house-and-curved-wall-in-json",
    "chunk_text": "<h4>Little House and Curved Wall in JSON</h4><p>Once I had that sorted, I proceeded to debug the display of one single wall, and progressed to the little house generated by the ADN training labs.</p><p>In Revit, it looks like this in perspective view:</p><center>\n<img alt=\"Little house in perspective view\" src=\"img/little_house_perspective_view.png\" width=\"200\"/>\n</center><p>The WebGL rendering of the JSON export looks like this:</p><center>\n<img alt=\"Little house in WebGL\" src=\"img/webgl_little_house.png\" width=\"200\"/>\n</center><p>Finally, here is a rather strange sample BIM from Philippe,\n\n<a href=\"zip/CurvedWall.rvt\">CurvedWall.rvt</a>,\n\nits old JSON representation\n\n<a href=\"zip/CurvedWall.json\">CurvedWall.json</a>,\n\ngenerated using the Revit 2013 generator based on the ElementViewer SDK sample, and the new version\n\n<a href=\"zip/CurvedWallJt.json\">CurvedWallJt.json</a> generated\n\nby this custom exporter, looking like this in the WebGL viewer:</p><center>\n<img alt=\"Curved wall model in WebGL\" src=\"img/CurvedWall.png\" width=\"200\"/>\n</center><a name=\"5\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Custom Exporter Implementation and Components",
    "local_header_href": "#custom-exporter-implementation-and-components",
    "chunk_text": "<h4>Custom Exporter Implementation and Components</h4><p>I ended up reusing a number of components from previous projects for this little endeavour.</p><p>Here is\n\n<a href=\"zip/CustomExporterAdnMeshJson.zip\">\nCustomExporterAdnMeshJson.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for the ADN mesh data custom exporter external command add-in.</p><p>It consists of the following modules:</p><ul>\n<li>AdnMeshData.cs – The data format specifying one solid for the WebGL viewer, defining its centre, colour, id, triangular facets, their vertex coordinates, indices and normals as discussed above.</li>\n<li>CentroidVolume.cs – Calculate and store the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html\">\ncentroid and volume</a> from a set of triangular facets.</li>\n<li>Command.cs – ADN mesh data custom exporter external command mainline.</li>\n<li>ExportContextAdnMesh.cs – Custom exporter IExportContext implementation to capture ADN mesh data.</li>\n<li>NormalLookupXyz.cs – A facet normal vector lookup class to avoid duplicate normal vector definitions, similar to the vertex lookup mentioned below.</li>\n<li>PointInt.cs – An integer-based 3D point class, supporting the vertex lookup, storing the vertices in integer number millimetres for the sake of efficiency, readability, and to avoid all rounding issues.</li>\n<li>Util.cs – Utility methods.</li>\n<li>VertexLookupInt.cs – A vertex lookup class to avoid duplicate vertex definitions, reused from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/graphics-pipeline-custom-exporter.html#6\">\nOBJ exporter</a>.</li>\n</ul><p>Which ones should we discuss in greater depth?</p><p>I will skip the integer-based point and lookup classes, since I have already belaboured them repeatedly in the past.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Centroid and Volume",
    "local_header_href": "#centroid-and-volume",
    "chunk_text": "<h4>Centroid and Volume</h4><p>The ADN mesh data format requires a centre point.</p><p>The custom exporter is fed faces, and does not have a built-in mechanism to identify solids.</p><p>Therefore, the determination of a centre point needs to be based on the facets we receive instead.</p><p>Happily, I already discussed how to determine\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html\">\ncentroid and volume</a> using\n\nan algorithm that calculates and stores these properties from a set of triangular facets.\n<p>I cleaned up the previous implementation to make its use more obvious, and it now looks like this:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">CentroidVolume</span>\n{\n  <span class=\"teal\">XYZ</span> _centroid;\n  <span class=\"blue\">double</span> _volume;\n \n  <span class=\"blue\">public</span> CentroidVolume()\n  {\n    Init();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Init()\n  {\n    _centroid = <span class=\"teal\">XYZ</span>.Zero;\n    _volume = 0.0;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> AddTriangle( <span class=\"teal\">XYZ</span>[] p )\n  {\n    <span class=\"blue\">double</span> vol\n      = p[0].X * ( p[1].Y * p[2].Z - p[2].Y * p[1].Z )\n      + p[0].Y * ( p[1].Z * p[2].X - p[2].Z * p[1].X )\n      + p[0].Z * ( p[1].X * p[2].Y - p[2].X * p[1].Y );\n \n    _centroid += vol * ( p[0] + p[1] + p[2] );\n    _volume += vol;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set centroid coordinates and volume </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to their final values when completed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Complete()\n  {\n    _centroid /= 4 * _volume;\n    _volume /= 6;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">XYZ</span> Centroid\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _centroid;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">double</span> Volume\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _volume;\n    }\n  }\n \n  <span class=\"blue\">override</span> <span class=\"blue\">public</span> <span class=\"blue\">string</span> ToString()\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Util</span>.RealString( _volume ) + <span class=\"maroon\">\"@\"</span>\n      + <span class=\"teal\">Util</span>.PointString( _centroid );\n  }\n}\n</pre>\n<p>In my current test implementation, I just close the calculation when an element ends.</p>\n<p>This should probably be improved to terminate every time the material changes, to handle cases like windows with several different components using different materials.</p>\n<p>Actually, you can see that the windows in the screen snapshots above are not perfectly rendered due to this.</p>\n<a name=\"7\"></a>\n<h4>Export Context Implementation</h4>\n<p>By far the most complex module is the export context implementation.</p>\n<p>The IExportContext interface specifies the following methods:</p>\n<pre class=\"code\">\n  <span class=\"blue\">void</span> Finish();\n  <span class=\"blue\">bool</span> IsCanceled();\n  <span class=\"blue\">void</span> OnDaylightPortal( <span class=\"teal\">DaylightPortalNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnElementBegin( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"blue\">void</span> OnElementEnd( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"teal\">RenderNodeAction</span> OnFaceBegin( <span class=\"teal\">FaceNode</span> node );\n  <span class=\"blue\">void</span> OnFaceEnd( <span class=\"teal\">FaceNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnInstanceBegin( <span class=\"teal\">InstanceNode</span> node );\n  <span class=\"blue\">void</span> OnInstanceEnd( <span class=\"teal\">InstanceNode</span> node );\n  <span class=\"blue\">void</span> OnLight( <span class=\"teal\">LightNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnLinkBegin( <span class=\"teal\">LinkNode</span> node );\n  <span class=\"blue\">void</span> OnLinkEnd( <span class=\"teal\">LinkNode</span> node );\n  <span class=\"blue\">void</span> OnMaterial( <span class=\"teal\">MaterialNode</span> node );\n  <span class=\"blue\">void</span> OnPolymesh( <span class=\"teal\">PolymeshTopology</span> node );\n  <span class=\"blue\">void</span> OnRPC( <span class=\"teal\">RPCNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnViewBegin( <span class=\"teal\">ViewNode</span> node );\n  <span class=\"blue\">void</span> OnViewEnd( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"blue\">bool</span> Start();\n</pre>\n<p>A very few of them can be left unimplemented, at least in my simple test project, but most need attention.\nI left the NotImplementedException statements in the unimplemented ones, so that I am notified if they are called.</p>\n<p>I implemented some rudimentary logging to see in which order the methods are called in the debug output window.</p>\n<p>A number of the methods provide support for cancelling the rendering process and need to return true or RenderNodeAction.Proceed for it to continue.</p>\n<p>Family instances and links need to push their transformations onto a stack, and all vertices received need to be transformed appropriately.</p>\n<!--\n<p>I still have doubts about the counter-clockwise orientation of triangle vertices, and you can see the traces of that in the StoreTriangle method, where I swapped the access to the second and third vertex.\nThat enabled me to see the image of the little house shown above, but some faces are still not displaying properly.</p>\n\n<p>That aspect should still be considered work in progress.</p>\n-->\n<p>Here is the complete implementation of the ADN mesh data export context in its current state:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ExportContextAdnMesh</span> : <span class=\"teal\">IExportContext</span>\n{\n  <span class=\"teal\">Document</span> _doc;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Stack of transformations for </span>\n  <span class=\"gray\">///</span><span class=\"green\"> link and instance elements.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Stack</span>&lt;<span class=\"teal\">Transform</span>&gt; _transformationStack\n    = <span class=\"blue\">new</span> <span class=\"teal\">Stack</span>&lt;<span class=\"teal\">Transform</span>&gt;();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangle vertices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of normal vectors, defined by an index </span>\n  <span class=\"gray\">///</span><span class=\"green\"> into the normal lookup for each triangle vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _normalIndices = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n \n  <span class=\"teal\">NormalLookupXyz</span> _normals = <span class=\"blue\">new</span> <span class=\"teal\">NormalLookupXyz</span>();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Calculate centre of gravity of current element.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">CentroidVolume</span> _centroid_volume\n    = <span class=\"blue\">new</span> <span class=\"teal\">CentroidVolume</span>();\n \n  <span class=\"teal\">Color</span> _color;\n  <span class=\"blue\">double</span> _transparency;\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">AdnMeshData</span>&gt; _data;\n \n  <span class=\"blue\">public</span> ExportContextAdnMesh( <span class=\"teal\">Document</span> doc )\n  {\n    _doc = doc;\n    _data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">AdnMeshData</span>&gt;();\n    _transformationStack.Push( <span class=\"teal\">Transform</span>.Identity );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">AdnMeshData</span>[] MeshData\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _data.ToArray();\n    }\n  }\n \n  <span class=\"teal\">Transform</span> CurrentTransform\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _transformationStack.Peek();\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Store a triangle, adding new vertices for it</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to our vertex lookup dictionary if needed and</span>\n  <span class=\"gray\">///</span><span class=\"green\"> accumulating its volume and centroid contribution.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle(\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; vertices,\n    <span class=\"teal\">PolymeshFacet</span> triangle,\n    <span class=\"teal\">XYZ</span> normal )\n  {\n    <span class=\"green\">// Retrieve the three triangle vertices</span>\n \n    <span class=\"teal\">Transform</span> currentTransform = CurrentTransform;\n \n    <span class=\"teal\">XYZ</span>[] p = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[] {\n      currentTransform.OfPoint( vertices[triangle.V1] ),\n      currentTransform.OfPoint( vertices[triangle.V2] ),\n      currentTransform.OfPoint( vertices[triangle.V3] )\n    };\n \n    <span class=\"green\">// Ensure the three are ordered counter-clockwise</span>\n \n    <span class=\"teal\">XYZ</span> v = p[1] - p[0];\n    <span class=\"teal\">XYZ</span> w = p[2] - p[0];\n\n    <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">Util</span>.IsRightHanded( v, w, normal ),\n      <span class=\"maroon\">\"expected counter-clockwise vertex order\"</span> );\n \n    <span class=\"green\">// Centroid and volume calculation</span>\n \n    _centroid_volume.AddTriangle( p );\n \n    <span class=\"green\">// Store vertex, facet and normals</span>\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p[i] );\n \n      _triangles.Add( _vertices.AddVertex( q ) );\n \n      _normalIndices.Add( _normals.AddNormal(\n        currentTransform.OfVector( normal ) ) );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Finish()\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Finish\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsCanceled()\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnDaylightPortal(\n    <span class=\"teal\">DaylightPortalNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnElementBegin(\n    <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"blue\">string</span> s = elementId.IntegerValue.ToString();\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ElementBegin id \"</span> + s );\n \n    _vertices.Clear();\n    _triangles.Clear();\n    _normals.Clear();\n    _normalIndices.Clear();\n    _centroid_volume.Init();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnElementEnd( <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ElementEnd\"</span> );\n \n    <span class=\"green\">// Set centroid coordinates to their final value</span>\n \n    _centroid_volume.Complete();\n \n    <span class=\"blue\">string</span> metadataId = _doc.GetElement(\n      elementId ).UniqueId;\n \n    <span class=\"teal\">AdnMeshData</span> meshData = <span class=\"blue\">new</span> <span class=\"teal\">AdnMeshData</span>(\n      _vertices, _triangles, _normals, _normalIndices,\n      <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( _centroid_volume.Centroid ),\n      _color, _transparency, metadataId );\n \n    _data.Add( meshData );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnFaceBegin( <span class=\"teal\">FaceNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnFaceEnd( <span class=\"teal\">FaceNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnInstanceBegin(\n    <span class=\"teal\">InstanceNode</span> node )\n  {\n    <span class=\"teal\">FamilySymbol</span> symbol = _doc.GetElement(\n      node.GetSymbolId() ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != symbol,\n      <span class=\"maroon\">\"expected valid family symbol\"</span> );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"InstanceBegin \"</span>\n      + symbol.Category.Name + <span class=\"maroon\">\" : \"</span>\n      + symbol.Family.Name + <span class=\"maroon\">\" : \"</span>\n      + symbol.Name );\n \n    _transformationStack.Push( CurrentTransform\n      .Multiply( node.GetTransform() ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnInstanceEnd( <span class=\"teal\">InstanceNode</span> node )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"InstanceEnd\"</span> );\n \n    _transformationStack.Pop();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnLight( <span class=\"teal\">LightNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnLinkBegin( <span class=\"teal\">LinkNode</span> node )\n  {\n    _transformationStack.Push( CurrentTransform\n      .Multiply( node.GetTransform() ) );\n \n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnLinkEnd( <span class=\"teal\">LinkNode</span> node )\n  {\n    _transformationStack.Pop();\n \n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnMaterial( <span class=\"teal\">MaterialNode</span> node )\n  {\n    <span class=\"teal\">Color</span> c = node.Color;\n    <span class=\"blue\">double</span> t = node.Transparency;\n \n    <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"({0},{1},{2})\"</span>,\n      c.Red, c.Green, c.Blue );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Colour \"</span> + s + <span class=\"maroon\">\", transparency \"</span>\n      + t.ToString( <span class=\"maroon\">\"0.##\"</span> ) );\n \n    _color = c;\n    _transparency = t;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnPolymesh( <span class=\"teal\">PolymeshTopology</span> node )\n  {\n    <span class=\"blue\">int</span> nPts = node.NumberOfPoints;\n    <span class=\"blue\">int</span> nFacets = node.NumberOfFacets;\n \n    <span class=\"teal\">DistributionOfNormals</span> distrib\n      = node.DistributionOfNormals;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Polymesh {0} vertices {1} facets\"</span>,\n      nPts, nFacets ) );\n \n    <span class=\"blue\">int</span> iFacet = 0;\n    <span class=\"blue\">int</span> iPoint = 0;\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; vertices = node.GetPoints();\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; normals = node.GetNormals();\n    <span class=\"teal\">XYZ</span> normal;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">PolymeshFacet</span> triangle <span class=\"blue\">in</span> node.GetFacets() )\n    {\n      <span class=\"green\">// Just grab one normal per facet; ignore the </span>\n      <span class=\"green\">// three normals per point if they differ.</span>\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">DistributionOfNormals</span>.OnePerFace == distrib )\n      {\n        normal = node.GetNormal( 0 );\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"teal\">DistributionOfNormals</span>.OnEachFacet\n        == distrib )\n      {\n        normal = node.GetNormal( iFacet++ );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">DistributionOfNormals</span>\n          .AtEachPoint == distrib, <span class=\"maroon\">\"what else?\"</span> );\n \n        normal = node.GetNormal( iPoint++ )\n          + node.GetNormal( iPoint++ )\n          + node.GetNormal( iPoint++ );\n        normal /= 3.0;\n      }\n \n      StoreTriangle( vertices, triangle, normal );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnRPC( <span class=\"teal\">RPCNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnViewBegin( <span class=\"teal\">ViewNode</span> node )\n  {\n    <span class=\"teal\">View3D</span> view = _doc.GetElement( node.ViewId )\n      <span class=\"blue\">as</span> <span class=\"teal\">View3D</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != view,\n      <span class=\"maroon\">\"expected valid 3D view\"</span> );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ViewBegin \"</span> + view.Name );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnViewEnd( <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ViewEnd\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Start()\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Start\"</span> );\n    <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n  }\n}\n</pre>\n<p>The rendering generates a list of AdnMeshData instances.</p>\n<p>Each one of them contains the data required to render one solid.</p>\n<a name=\"8\"></a>\n<h4>ADN Mesh Data Class</h4>\n<p>Here are the methods used to structure and store the ADN mesh data:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">AdnMeshData</span>\n{\n  <span class=\"blue\">int</span> FacetCount { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// optional</span>\n  <span class=\"blue\">int</span> VertexCount { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// optional</span>\n  <span class=\"blue\">int</span>[] VertexCoords { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span>[] VertexIndices { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// triangles</span>\n  <span class=\"blue\">double</span>[] Normals { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span>[] NormalIndices { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// not optional, one normal per vertex</span>\n  <span class=\"blue\">int</span>[] Center { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span> Color { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">string</span> Id { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Apply this factor to all point data when </span>\n  <span class=\"gray\">///</span><span class=\"green\"> saving to JSON to accomodate the expected</span>\n  <span class=\"gray\">///</span><span class=\"green\"> scaling.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _export_factor = 0.002;\n \n  <span class=\"blue\">public</span> AdnMeshData(\n    <span class=\"teal\">VertexLookupInt</span> vertices,\n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; vertexIndices,\n    <span class=\"teal\">NormalLookupXyz</span> normals,\n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; normalIndices,\n    <span class=\"teal\">PointInt</span> center,\n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">double</span> transparency,\n    <span class=\"blue\">string</span> id )\n  {\n    <span class=\"blue\">int</span> n = vertexIndices.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == (n % 3),\n      <span class=\"maroon\">\"expected triples of 3D point vertex indices\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( normalIndices.Count == n,\n      <span class=\"maroon\">\"expected a normal for each vertex\"</span> );\n \n    FacetCount = n / 3;\n \n    n = vertices.Count;\n    VertexCount = n;\n    VertexCoords = <span class=\"blue\">new</span> <span class=\"blue\">int</span>[n * 3];\n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> p <span class=\"blue\">in</span> vertices.Keys )\n    {\n      VertexCoords[i++] = p.X;\n      VertexCoords[i++] = p.Y;\n      VertexCoords[i++] = p.Z;\n    }\n    VertexIndices = vertexIndices.ToArray();\n \n    n = normals.Count;\n    Normals = <span class=\"blue\">new</span> <span class=\"blue\">double</span>[n * 3];\n    i = 0;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> v <span class=\"blue\">in</span> normals.Keys )\n    {\n      Normals[i++] = v.X;\n      Normals[i++] = v.Y;\n      Normals[i++] = v.Z;\n    }\n    NormalIndices = normalIndices.ToArray();\n \n    Center = <span class=\"blue\">new</span> <span class=\"blue\">int</span>[3];\n    i = 0;\n    Center[i++] = center.X;\n    Center[i++] = center.Y;\n    Center[i] = center.Z;\n \n    <span class=\"blue\">byte</span> alpha = (<span class=\"blue\">byte</span>) (\n      ( 100 - transparency ) * 2.55555555 );\n \n    Color = ConvertClr(\n      color.Red, color.Green, color.Blue, alpha );\n \n    Id = id;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Convert colour and transparency to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the required integer format.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> ConvertClr( <span class=\"blue\">byte</span> r, <span class=\"blue\">byte</span> g, <span class=\"blue\">byte</span> b, <span class=\"blue\">byte</span> a )\n  {\n    <span class=\"blue\">return</span> ( r &lt;&lt; 24 ) + ( g &lt;&lt; 16 ) + ( b &lt;&lt; 8 ) + a;\n  }\n</pre>\n<p>That completes the input side of this class.</p>\n<p>It is followed by the output:</p>\n<a name=\"9\"></a>\n<h4>JSON Serialisation</h4>\n<p>Once the ADN mesh data has been assembled, I want to export it to a JSON file to pass into Philippe's viewer.</p>\n<p>I did think of using a JSON serialisation library.\nThe .NET framework provides two different ones:</p>\n<ul>\n<li>System.Web.Script.Serialization.JavaScriptSerializer</li>\n<li>System.Runtime.Serialization.Json.DataContractJsonSerializer</li>\n</ul>\n<p>In addition, numerous other libraries are available.</p>\n<p>I read a nice short discussion on their various advantages and disadvantages, resulting in the author rolling his own\n\n<a href=\"http://procbits.com/2011/08/11/fridaythe13th-the-best-json-parser-for-silverlight-and-net\">\nFridayThe13th library</a>.</p>\n<p>That prompted me to simply implement the serialisation myself inline in a member method of the AdnMeshData class like this:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">string</span> ToJson()\n{\n  <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Format\n    ( <span class=\"maroon\">\"\\n \\\"FacetCount\\\":{0},\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexCount\\\":{1},\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexCoords\\\":[{2}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexIndices\\\":[{3}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Normals\\\":[{4}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"NormalIndices\\\":[{5}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Center\\\":[{6}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Color\\\":[{7}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Id\\\":\\\"{8}\\\"\"</span>,\n    FacetCount,\n    VertexCount,\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, VertexCoords.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; ( _export_factor * i ).ToString( <span class=\"maroon\">\"0.#\"</span> ) ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, VertexIndices.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; i.ToString() ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, Normals.Select&lt;<span class=\"blue\">double</span>, <span class=\"blue\">string</span>&gt;( a =&gt; a.ToString( <span class=\"maroon\">\"0.####\"</span> ) ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, NormalIndices.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; i.ToString() ) ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, Center.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; ( _export_factor * i ).ToString( <span class=\"maroon\">\"0.#\"</span> ) ) ),\n    Color,\n    Id );\n \n  <span class=\"blue\">return</span> <span class=\"maroon\">\"\\n{\"</span> + s + <span class=\"maroon\">\"\\n}\"</span>;\n}\n</pre>\n<p>Notice the last minute scaling applied via the _export_factor to generate a model in a suitable size for Philippe's viewer  :-)</p>\n<a name=\"10\"></a>\n<h4>Driving the Process and Streaming to File</h4>\n<p>The command mainline checks for a valid 3D view in a valid project document, then drives the exporter and retrieves its mesh data instances to serialise the data to JSON like this:</p>\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// This command requires an active document</span>\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc )\n    {\n      message = <span class=\"maroon\">\"Please run this command in an active project document.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">View3D</span> view = doc.ActiveView <span class=\"blue\">as</span> <span class=\"teal\">View3D</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == view )\n    {\n      message = <span class=\"maroon\">\"Please run this command in a 3D view.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// Instantiate our custom context</span>\n \n    <span class=\"teal\">ExportContextAdnMesh</span> context\n      = <span class=\"blue\">new</span> <span class=\"teal\">ExportContextAdnMesh</span>( doc );\n \n    <span class=\"green\">// Instantiate a custom exporter with it</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">CustomExporter</span> exporter\n      = <span class=\"blue\">new</span> <span class=\"teal\">CustomExporter</span>( doc, context ) )\n    {\n      <span class=\"green\">// Tell the exporter whether we need face info.</span>\n      <span class=\"green\">// If not, it is better to exclude them, since </span>\n      <span class=\"green\">// processing faces takes significant time and </span>\n      <span class=\"green\">// memory. In any case, tessellated polymeshes</span>\n      <span class=\"green\">// can be exported (and will be sent to the </span>\n      <span class=\"green\">// context). Excluding faces just excludes the calls, </span>\n      <span class=\"green\">// not the actual processing of face tessellation. </span>\n      <span class=\"green\">// Meshes of the faces will still be received by </span>\n      <span class=\"green\">// the context.</span>\n \n      exporter.IncludeFaces = <span class=\"blue\">false</span>;\n \n      exporter.Export( view );\n    }\n \n    <span class=\"green\">// Save ADN mesh data in JSON format</span>\n \n    <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>(\n      <span class=\"maroon\">\"C:/tmp/test.json\"</span> );\n \n    s.Write( <span class=\"maroon\">\"[\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">AdnMeshData</span> d <span class=\"blue\">in</span> context.MeshData )\n    {\n      <span class=\"blue\">if</span>( 0 &lt; i ) { s.Write( <span class=\"maroon\">','</span> ); }\n \n      s.Write( d.ToJson() );\n \n      ++i;\n    }\n \n    s.Write( <span class=\"maroon\">\"\\n]\\n\"</span> );\n    s.Close();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>The complete code and solution is available for\n\n<a href=\"#5\">download</a> above.</p>\n<!-- <p>As said, some issues remain to be resolved, probably due to the triangle vertex ordering.</p> -->\n<p>The only remaining open issue with this right now that I am aware of is how to generate different ADN mesh data instances for different materials, e.g. separate output for a window pane and its frame.</p>\n<p>So now we have three different and pretty diverse custom exporters to experiment with.</p>\n<p>I am looking forward to hearing what experiences you have with the custom exporter framework.</p>\n<!--\n\n<p>The ADN mesh format is solid based, whereas the custom exporter is face based.</p>\n\n<p>I need to implement something to grok when one solid is finished and the next begins.</p>\n\n<p>This makes a difference for an element such as a window, with a transparent pane and an opaque frame.</p>\n\n<p>For this, I could implement a reaction to a material change, and close out the current solid when that happens.</p>\n\n<a name=\"4\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n-->\n<hr/>\n<h1>Cloud and Mobile</h1>\n<h3>Revit ADN Mesh Data Custom Exporter to JSON</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>I implemented a new Revit 2014\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#1\">\ncustom exporter to JSON</a> generating the ADN mesh data to drive\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html\">Philippe Leefsma</a>'s online\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/06/3d-webgl-viewer-with-javascript-and-threejs.html\">\n3D WebGL viewer</a>.</p>\n<p>This is obviously mainly of interest to Revit API aficionados, though some of the topics covered are completely generic cloud and mobile issues as well:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#2\">ADN mesh data format</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#3\">Tetrahedron sample JSON data</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#4\">Little house and curved wall in JSON</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#5\">Custom exporter implementation and components</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#6\">Centroid and volume</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#7\">Export context implementation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#8\">ADN mesh data class</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#9\">JSON serialisation</a></li>\n</ul>\n<p>The post also mentions my most recent mountain hike to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#muttenhorn\">\nMuttenhorn</a>   :-)</p>\n<center>\n<img alt=\"A lake at Stotzigen Firsten by Muttenhorn\" src=\"file:////j/photo/jeremy/2013/2013-07-06_muttenhorn/p1020836_blue_lake_stotzigen_firsten.jpg\" width=\"250\"/>\n</center>\n</p>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Export Context Implementation",
    "local_header_href": "#export-context-implementation",
    "chunk_text": "<h4>Export Context Implementation</h4><p>By far the most complex module is the export context implementation.</p><p>The IExportContext interface specifies the following methods:</p><pre class=\"code\">\n  <span class=\"blue\">void</span> Finish();\n  <span class=\"blue\">bool</span> IsCanceled();\n  <span class=\"blue\">void</span> OnDaylightPortal( <span class=\"teal\">DaylightPortalNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnElementBegin( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"blue\">void</span> OnElementEnd( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"teal\">RenderNodeAction</span> OnFaceBegin( <span class=\"teal\">FaceNode</span> node );\n  <span class=\"blue\">void</span> OnFaceEnd( <span class=\"teal\">FaceNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnInstanceBegin( <span class=\"teal\">InstanceNode</span> node );\n  <span class=\"blue\">void</span> OnInstanceEnd( <span class=\"teal\">InstanceNode</span> node );\n  <span class=\"blue\">void</span> OnLight( <span class=\"teal\">LightNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnLinkBegin( <span class=\"teal\">LinkNode</span> node );\n  <span class=\"blue\">void</span> OnLinkEnd( <span class=\"teal\">LinkNode</span> node );\n  <span class=\"blue\">void</span> OnMaterial( <span class=\"teal\">MaterialNode</span> node );\n  <span class=\"blue\">void</span> OnPolymesh( <span class=\"teal\">PolymeshTopology</span> node );\n  <span class=\"blue\">void</span> OnRPC( <span class=\"teal\">RPCNode</span> node );\n  <span class=\"teal\">RenderNodeAction</span> OnViewBegin( <span class=\"teal\">ViewNode</span> node );\n  <span class=\"blue\">void</span> OnViewEnd( <span class=\"teal\">ElementId</span> elementId );\n  <span class=\"blue\">bool</span> Start();\n</pre><p>A very few of them can be left unimplemented, at least in my simple test project, but most need attention.\nI left the NotImplementedException statements in the unimplemented ones, so that I am notified if they are called.</p><p>I implemented some rudimentary logging to see in which order the methods are called in the debug output window.</p><p>A number of the methods provide support for cancelling the rendering process and need to return true or RenderNodeAction.Proceed for it to continue.</p><p>Family instances and links need to push their transformations onto a stack, and all vertices received need to be transformed appropriately.</p><p>Here is the complete implementation of the ADN mesh data export context in its current state:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ExportContextAdnMesh</span> : <span class=\"teal\">IExportContext</span>\n{\n  <span class=\"teal\">Document</span> _doc;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Stack of transformations for </span>\n  <span class=\"gray\">///</span><span class=\"green\"> link and instance elements.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Stack</span>&lt;<span class=\"teal\">Transform</span>&gt; _transformationStack\n    = <span class=\"blue\">new</span> <span class=\"teal\">Stack</span>&lt;<span class=\"teal\">Transform</span>&gt;();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangle vertices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of normal vectors, defined by an index </span>\n  <span class=\"gray\">///</span><span class=\"green\"> into the normal lookup for each triangle vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _normalIndices = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n \n  <span class=\"teal\">NormalLookupXyz</span> _normals = <span class=\"blue\">new</span> <span class=\"teal\">NormalLookupXyz</span>();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Calculate centre of gravity of current element.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">CentroidVolume</span> _centroid_volume\n    = <span class=\"blue\">new</span> <span class=\"teal\">CentroidVolume</span>();\n \n  <span class=\"teal\">Color</span> _color;\n  <span class=\"blue\">double</span> _transparency;\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">AdnMeshData</span>&gt; _data;\n \n  <span class=\"blue\">public</span> ExportContextAdnMesh( <span class=\"teal\">Document</span> doc )\n  {\n    _doc = doc;\n    _data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">AdnMeshData</span>&gt;();\n    _transformationStack.Push( <span class=\"teal\">Transform</span>.Identity );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">AdnMeshData</span>[] MeshData\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _data.ToArray();\n    }\n  }\n \n  <span class=\"teal\">Transform</span> CurrentTransform\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _transformationStack.Peek();\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Store a triangle, adding new vertices for it</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to our vertex lookup dictionary if needed and</span>\n  <span class=\"gray\">///</span><span class=\"green\"> accumulating its volume and centroid contribution.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle(\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; vertices,\n    <span class=\"teal\">PolymeshFacet</span> triangle,\n    <span class=\"teal\">XYZ</span> normal )\n  {\n    <span class=\"green\">// Retrieve the three triangle vertices</span>\n \n    <span class=\"teal\">Transform</span> currentTransform = CurrentTransform;\n \n    <span class=\"teal\">XYZ</span>[] p = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[] {\n      currentTransform.OfPoint( vertices[triangle.V1] ),\n      currentTransform.OfPoint( vertices[triangle.V2] ),\n      currentTransform.OfPoint( vertices[triangle.V3] )\n    };\n \n    <span class=\"green\">// Ensure the three are ordered counter-clockwise</span>\n \n    <span class=\"teal\">XYZ</span> v = p[1] - p[0];\n    <span class=\"teal\">XYZ</span> w = p[2] - p[0];\n\n    <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">Util</span>.IsRightHanded( v, w, normal ),\n      <span class=\"maroon\">\"expected counter-clockwise vertex order\"</span> );\n \n    <span class=\"green\">// Centroid and volume calculation</span>\n \n    _centroid_volume.AddTriangle( p );\n \n    <span class=\"green\">// Store vertex, facet and normals</span>\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p[i] );\n \n      _triangles.Add( _vertices.AddVertex( q ) );\n \n      _normalIndices.Add( _normals.AddNormal(\n        currentTransform.OfVector( normal ) ) );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Finish()\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Finish\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsCanceled()\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnDaylightPortal(\n    <span class=\"teal\">DaylightPortalNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnElementBegin(\n    <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"blue\">string</span> s = elementId.IntegerValue.ToString();\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ElementBegin id \"</span> + s );\n \n    _vertices.Clear();\n    _triangles.Clear();\n    _normals.Clear();\n    _normalIndices.Clear();\n    _centroid_volume.Init();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnElementEnd( <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ElementEnd\"</span> );\n \n    <span class=\"green\">// Set centroid coordinates to their final value</span>\n \n    _centroid_volume.Complete();\n \n    <span class=\"blue\">string</span> metadataId = _doc.GetElement(\n      elementId ).UniqueId;\n \n    <span class=\"teal\">AdnMeshData</span> meshData = <span class=\"blue\">new</span> <span class=\"teal\">AdnMeshData</span>(\n      _vertices, _triangles, _normals, _normalIndices,\n      <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( _centroid_volume.Centroid ),\n      _color, _transparency, metadataId );\n \n    _data.Add( meshData );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnFaceBegin( <span class=\"teal\">FaceNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnFaceEnd( <span class=\"teal\">FaceNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnInstanceBegin(\n    <span class=\"teal\">InstanceNode</span> node )\n  {\n    <span class=\"teal\">FamilySymbol</span> symbol = _doc.GetElement(\n      node.GetSymbolId() ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != symbol,\n      <span class=\"maroon\">\"expected valid family symbol\"</span> );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"InstanceBegin \"</span>\n      + symbol.Category.Name + <span class=\"maroon\">\" : \"</span>\n      + symbol.Family.Name + <span class=\"maroon\">\" : \"</span>\n      + symbol.Name );\n \n    _transformationStack.Push( CurrentTransform\n      .Multiply( node.GetTransform() ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnInstanceEnd( <span class=\"teal\">InstanceNode</span> node )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"InstanceEnd\"</span> );\n \n    _transformationStack.Pop();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnLight( <span class=\"teal\">LightNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnLinkBegin( <span class=\"teal\">LinkNode</span> node )\n  {\n    _transformationStack.Push( CurrentTransform\n      .Multiply( node.GetTransform() ) );\n \n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnLinkEnd( <span class=\"teal\">LinkNode</span> node )\n  {\n    _transformationStack.Pop();\n \n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnMaterial( <span class=\"teal\">MaterialNode</span> node )\n  {\n    <span class=\"teal\">Color</span> c = node.Color;\n    <span class=\"blue\">double</span> t = node.Transparency;\n \n    <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"({0},{1},{2})\"</span>,\n      c.Red, c.Green, c.Blue );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Colour \"</span> + s + <span class=\"maroon\">\", transparency \"</span>\n      + t.ToString( <span class=\"maroon\">\"0.##\"</span> ) );\n \n    _color = c;\n    _transparency = t;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnPolymesh( <span class=\"teal\">PolymeshTopology</span> node )\n  {\n    <span class=\"blue\">int</span> nPts = node.NumberOfPoints;\n    <span class=\"blue\">int</span> nFacets = node.NumberOfFacets;\n \n    <span class=\"teal\">DistributionOfNormals</span> distrib\n      = node.DistributionOfNormals;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Polymesh {0} vertices {1} facets\"</span>,\n      nPts, nFacets ) );\n \n    <span class=\"blue\">int</span> iFacet = 0;\n    <span class=\"blue\">int</span> iPoint = 0;\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; vertices = node.GetPoints();\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; normals = node.GetNormals();\n    <span class=\"teal\">XYZ</span> normal;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">PolymeshFacet</span> triangle <span class=\"blue\">in</span> node.GetFacets() )\n    {\n      <span class=\"green\">// Just grab one normal per facet; ignore the </span>\n      <span class=\"green\">// three normals per point if they differ.</span>\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">DistributionOfNormals</span>.OnePerFace == distrib )\n      {\n        normal = node.GetNormal( 0 );\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"teal\">DistributionOfNormals</span>.OnEachFacet\n        == distrib )\n      {\n        normal = node.GetNormal( iFacet++ );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">DistributionOfNormals</span>\n          .AtEachPoint == distrib, <span class=\"maroon\">\"what else?\"</span> );\n \n        normal = node.GetNormal( iPoint++ )\n          + node.GetNormal( iPoint++ )\n          + node.GetNormal( iPoint++ );\n        normal /= 3.0;\n      }\n \n      StoreTriangle( vertices, triangle, normal );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnRPC( <span class=\"teal\">RPCNode</span> node )\n  {\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotImplementedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">RenderNodeAction</span> OnViewBegin( <span class=\"teal\">ViewNode</span> node )\n  {\n    <span class=\"teal\">View3D</span> view = _doc.GetElement( node.ViewId )\n      <span class=\"blue\">as</span> <span class=\"teal\">View3D</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != view,\n      <span class=\"maroon\">\"expected valid 3D view\"</span> );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ViewBegin \"</span> + view.Name );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">RenderNodeAction</span>.Proceed;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnViewEnd( <span class=\"teal\">ElementId</span> elementId )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ViewEnd\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Start()\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Start\"</span> );\n    <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n  }\n}\n</pre><p>The rendering generates a list of AdnMeshData instances.</p><p>Each one of them contains the data required to render one solid.</p><a name=\"8\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "ADN Mesh Data Class",
    "local_header_href": "#adn-mesh-data-class",
    "chunk_text": "<h4>ADN Mesh Data Class</h4><p>Here are the methods used to structure and store the ADN mesh data:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">AdnMeshData</span>\n{\n  <span class=\"blue\">int</span> FacetCount { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// optional</span>\n  <span class=\"blue\">int</span> VertexCount { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// optional</span>\n  <span class=\"blue\">int</span>[] VertexCoords { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span>[] VertexIndices { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// triangles</span>\n  <span class=\"blue\">double</span>[] Normals { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span>[] NormalIndices { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; } <span class=\"green\">// not optional, one normal per vertex</span>\n  <span class=\"blue\">int</span>[] Center { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">int</span> Color { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">string</span> Id { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Apply this factor to all point data when </span>\n  <span class=\"gray\">///</span><span class=\"green\"> saving to JSON to accomodate the expected</span>\n  <span class=\"gray\">///</span><span class=\"green\"> scaling.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _export_factor = 0.002;\n \n  <span class=\"blue\">public</span> AdnMeshData(\n    <span class=\"teal\">VertexLookupInt</span> vertices,\n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; vertexIndices,\n    <span class=\"teal\">NormalLookupXyz</span> normals,\n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; normalIndices,\n    <span class=\"teal\">PointInt</span> center,\n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">double</span> transparency,\n    <span class=\"blue\">string</span> id )\n  {\n    <span class=\"blue\">int</span> n = vertexIndices.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == (n % 3),\n      <span class=\"maroon\">\"expected triples of 3D point vertex indices\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( normalIndices.Count == n,\n      <span class=\"maroon\">\"expected a normal for each vertex\"</span> );\n \n    FacetCount = n / 3;\n \n    n = vertices.Count;\n    VertexCount = n;\n    VertexCoords = <span class=\"blue\">new</span> <span class=\"blue\">int</span>[n * 3];\n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> p <span class=\"blue\">in</span> vertices.Keys )\n    {\n      VertexCoords[i++] = p.X;\n      VertexCoords[i++] = p.Y;\n      VertexCoords[i++] = p.Z;\n    }\n    VertexIndices = vertexIndices.ToArray();\n \n    n = normals.Count;\n    Normals = <span class=\"blue\">new</span> <span class=\"blue\">double</span>[n * 3];\n    i = 0;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> v <span class=\"blue\">in</span> normals.Keys )\n    {\n      Normals[i++] = v.X;\n      Normals[i++] = v.Y;\n      Normals[i++] = v.Z;\n    }\n    NormalIndices = normalIndices.ToArray();\n \n    Center = <span class=\"blue\">new</span> <span class=\"blue\">int</span>[3];\n    i = 0;\n    Center[i++] = center.X;\n    Center[i++] = center.Y;\n    Center[i] = center.Z;\n \n    <span class=\"blue\">byte</span> alpha = (<span class=\"blue\">byte</span>) (\n      ( 100 - transparency ) * 2.55555555 );\n \n    Color = ConvertClr(\n      color.Red, color.Green, color.Blue, alpha );\n \n    Id = id;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Convert colour and transparency to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the required integer format.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> ConvertClr( <span class=\"blue\">byte</span> r, <span class=\"blue\">byte</span> g, <span class=\"blue\">byte</span> b, <span class=\"blue\">byte</span> a )\n  {\n    <span class=\"blue\">return</span> ( r &lt;&lt; 24 ) + ( g &lt;&lt; 16 ) + ( b &lt;&lt; 8 ) + a;\n  }\n</pre><p>That completes the input side of this class.</p><p>It is followed by the output:</p><a name=\"9\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "JSON Serialisation",
    "local_header_href": "#json-serialisation",
    "chunk_text": "<h4>JSON Serialisation</h4><p>Once the ADN mesh data has been assembled, I want to export it to a JSON file to pass into Philippe's viewer.</p><p>I did think of using a JSON serialisation library.\nThe .NET framework provides two different ones:</p><ul>\n<li>System.Web.Script.Serialization.JavaScriptSerializer</li>\n<li>System.Runtime.Serialization.Json.DataContractJsonSerializer</li>\n</ul><p>In addition, numerous other libraries are available.</p><p>I read a nice short discussion on their various advantages and disadvantages, resulting in the author rolling his own\n\n<a href=\"http://procbits.com/2011/08/11/fridaythe13th-the-best-json-parser-for-silverlight-and-net\">\nFridayThe13th library</a>.</p><p>That prompted me to simply implement the serialisation myself inline in a member method of the AdnMeshData class like this:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">string</span> ToJson()\n{\n  <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Format\n    ( <span class=\"maroon\">\"\\n \\\"FacetCount\\\":{0},\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexCount\\\":{1},\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexCoords\\\":[{2}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"VertexIndices\\\":[{3}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Normals\\\":[{4}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"NormalIndices\\\":[{5}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Center\\\":[{6}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Color\\\":[{7}],\"</span>\n    + <span class=\"maroon\">\"\\n \\\"Id\\\":\\\"{8}\\\"\"</span>,\n    FacetCount,\n    VertexCount,\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, VertexCoords.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; ( _export_factor * i ).ToString( <span class=\"maroon\">\"0.#\"</span> ) ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, VertexIndices.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; i.ToString() ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, Normals.Select&lt;<span class=\"blue\">double</span>, <span class=\"blue\">string</span>&gt;( a =&gt; a.ToString( <span class=\"maroon\">\"0.####\"</span> ) ).ToArray() ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, NormalIndices.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; i.ToString() ) ),\n    <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, Center.Select&lt;<span class=\"blue\">int</span>, <span class=\"blue\">string</span>&gt;( i =&gt; ( _export_factor * i ).ToString( <span class=\"maroon\">\"0.#\"</span> ) ) ),\n    Color,\n    Id );\n \n  <span class=\"blue\">return</span> <span class=\"maroon\">\"\\n{\"</span> + s + <span class=\"maroon\">\"\\n}\"</span>;\n}\n</pre><p>Notice the last minute scaling applied via the _export_factor to generate a model in a suitable size for Philippe's viewer  :-)</p><a name=\"10\"></a>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Driving the Process and Streaming to File",
    "local_header_href": "#driving-the-process-and-streaming-to-file",
    "chunk_text": "<h4>Driving the Process and Streaming to File</h4><p>The command mainline checks for a valid 3D view in a valid project document, then drives the exporter and retrieves its mesh data instances to serialise the data to JSON like this:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// This command requires an active document</span>\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc )\n    {\n      message = <span class=\"maroon\">\"Please run this command in an active project document.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">View3D</span> view = doc.ActiveView <span class=\"blue\">as</span> <span class=\"teal\">View3D</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == view )\n    {\n      message = <span class=\"maroon\">\"Please run this command in a 3D view.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// Instantiate our custom context</span>\n \n    <span class=\"teal\">ExportContextAdnMesh</span> context\n      = <span class=\"blue\">new</span> <span class=\"teal\">ExportContextAdnMesh</span>( doc );\n \n    <span class=\"green\">// Instantiate a custom exporter with it</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">CustomExporter</span> exporter\n      = <span class=\"blue\">new</span> <span class=\"teal\">CustomExporter</span>( doc, context ) )\n    {\n      <span class=\"green\">// Tell the exporter whether we need face info.</span>\n      <span class=\"green\">// If not, it is better to exclude them, since </span>\n      <span class=\"green\">// processing faces takes significant time and </span>\n      <span class=\"green\">// memory. In any case, tessellated polymeshes</span>\n      <span class=\"green\">// can be exported (and will be sent to the </span>\n      <span class=\"green\">// context). Excluding faces just excludes the calls, </span>\n      <span class=\"green\">// not the actual processing of face tessellation. </span>\n      <span class=\"green\">// Meshes of the faces will still be received by </span>\n      <span class=\"green\">// the context.</span>\n \n      exporter.IncludeFaces = <span class=\"blue\">false</span>;\n \n      exporter.Export( view );\n    }\n \n    <span class=\"green\">// Save ADN mesh data in JSON format</span>\n \n    <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>(\n      <span class=\"maroon\">\"C:/tmp/test.json\"</span> );\n \n    s.Write( <span class=\"maroon\">\"[\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">AdnMeshData</span> d <span class=\"blue\">in</span> context.MeshData )\n    {\n      <span class=\"blue\">if</span>( 0 &lt; i ) { s.Write( <span class=\"maroon\">','</span> ); }\n \n      s.Write( d.ToJson() );\n \n      ++i;\n    }\n \n    s.Write( <span class=\"maroon\">\"\\n]\\n\"</span> );\n    s.Close();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><p>The complete code and solution is available for\n\n<a href=\"#5\">download</a> above.</p><p>The only remaining open issue with this right now that I am aware of is how to generate different ADN mesh data instances for different materials, e.g. separate output for a window pane and its frame.</p><p>So now we have three different and pretty diverse custom exporters to experiment with.</p><p>I am looking forward to hearing what experiences you have with the custom exporter framework.</p><hr/>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Cloud and Mobile",
    "local_header_href": "#cloud-and-mobile",
    "chunk_text": "<h1>Cloud and Mobile</h1>"
  },
  {
    "original_filename": "0981_custom_exporter_json",
    "header_text": "Revit ADN Mesh Data Custom Exporter to JSON",
    "local_header_href": "#revit-adn-mesh-data-custom-exporter-to-json",
    "chunk_text": "<h3>Revit ADN Mesh Data Custom Exporter to JSON</h3><p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p><p>I implemented a new Revit 2014\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#1\">\ncustom exporter to JSON</a> generating the ADN mesh data to drive\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html\">Philippe Leefsma</a>'s online\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/06/3d-webgl-viewer-with-javascript-and-threejs.html\">\n3D WebGL viewer</a>.</p><p>This is obviously mainly of interest to Revit API aficionados, though some of the topics covered are completely generic cloud and mobile issues as well:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#2\">ADN mesh data format</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#3\">Tetrahedron sample JSON data</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#4\">Little house and curved wall in JSON</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#5\">Custom exporter implementation and components</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#6\">Centroid and volume</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#7\">Export context implementation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#8\">ADN mesh data class</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#9\">JSON serialisation</a></li>\n</ul><p>The post also mentions my most recent mountain hike to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/adn-mesh-data-custom-exporter-to-json.html#muttenhorn\">\nMuttenhorn</a>   :-)</p><center>\n<img alt=\"A lake at Stotzigen Firsten by Muttenhorn\" src=\"file:////j/photo/jeremy/2013/2013-07-06_muttenhorn/p1020836_blue_lake_stotzigen_firsten.jpg\" width=\"250\"/>\n</center>"
  }
]