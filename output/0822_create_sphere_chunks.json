[
  {
    "original_filename": "0822_create_sphere",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0822_create_sphere",
    "header_text": "Sphere Creation for AVF and Filtering",
    "local_header_href": "#sphere-creation-for-avf-and-filtering",
    "chunk_text": "<h3>Sphere Creation for AVF and Filtering</h3><p>I created my first sphere in the Revit API  :-)\n\n<p>I was slightly surprised that it was harder than expected.\nThe Revit 2012 API introduced the GeometryCreationUtilities class for creating solids.\nIt provides no simple sphere primitive, however.\nIt does provide the following five methods, as described in the What's New listing for the Revit 2012 API:\n\n\n<a name=\"2\"></a>\n<h4>GeometryCreationUtilities</h4>\n<p>The new utility class GeometryCreationUtilities offers the ability to create solid geometry from input curves:\n\n<ul>\n<li>CreateBlendGeometry\n<li>CreateExtrusionGeometry\n<li>CreateRevolvedGeometry\n<li>CreateSweptGeometry\n<li>CreateSweptBlendGeometry\n</li></li></li></li></li></ul>\n<p>The resulting geometry is not added to the document as a part of any element. \nHowever, you may use the created solid, and its constituent faces and edges, in several ways:\n\n<ul>\n<li>As the input face(s) to the methods in the Analysis Visualization Framework AVF, e.g. SpatialFieldManager.AddSpatialFieldPrimitive.\n<li>As the input solid to finding 3D elements by intersection.\n<li>As one or more of the inputs to a Boolean operation.\n<li>As a part of a geometric calculation using, for example, Face.Project, Face.Intersect, or other Face, Solid, and Edge geometry methods.\n</li></li></li></li></ul>\n<p>The resulting solids created thus reside only in memory, cannot be added to the Revit database and not saved.\nSo what good are they?\n\n<p>As said, you can use them for display purposes via the Analysis Visualization Framework \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/avf\">\nAVF</a>,\n\nor to limit filtered element collection to a localised space, as input to an ElementIntersectsSolidFilter filter.\nI haven't presented any samples using this filter so far, and I promise to do so soon in a follow-up post.\n\n<p>Scott Conover showed some interesting uses in his AU and DevDays presentations on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/devdays-2010-online-with-revit-2012-api-news.html#3\">\nRevit 2012 geometry API enhancements</a>, \n\nand I picked that up to show how to use AVF to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/using-avf-to-display-intersections-and-highlight-rooms.html\">\ndisplay room volumes</a>.\n\n<p>Before getting to that, though, let's just create a spherical solid in the first place.\n\n\n<a name=\"3\"></a>\n<h4>Creating a Sphere</h4>\n<p>One way to create a spherical solid using the GeometryCreationUtilities methods listed above is by using the CreateRevolvedGeometry method.\nI can create a face loop representing a half circle, e.g. a 180 degree arc with a line between its endpoints, and then rotate that 360 degrees around the line, which also defines the axis of revolution.\n\n<p>A so-called frame needs to be specified for the solid creation. \nTo enable creation of a sphere in any location, I wish to pass in the sphere centre point and radius as arguments.\nI can use the centre point to define the frame location.\nI initially thought that the face loop is defined at the global origin, and the frame automatically translates it into place, but that led to the following exception being thrown, saying that the \"loops must lie on the right side of the Z axis (where X &gt;= 0)\":</p>\n<center>\n<img alt=\"Sphere creation exception\" src=\"img/sphere_creation_exception.png\"/>\n</center>\n<p>I fixed that by translating my loop definition to the same centre point as the frame, and end up with the following implementation:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and return a solid sphere with</span>\n  <span class=\"gray\">///</span><span class=\"green\"> a given radius and centre point.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"teal\">Solid</span> CreateSphereAt(\n    <span class=\"teal\">CreationApp</span> creapp,\n    <span class=\"teal\">XYZ</span> centre,\n    <span class=\"blue\">double</span> radius )\n  {\n    <span class=\"green\">// Use the standard global coordinate system </span>\n    <span class=\"green\">// as a frame, translated to the sphere centre.</span>\n \n    <span class=\"teal\">Frame</span> frame = <span class=\"blue\">new</span> <span class=\"teal\">Frame</span>( centre,\n      <span class=\"teal\">XYZ</span>.BasisX, <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.BasisZ );\n \n    <span class=\"green\">// Create a vertical half-circle loop;</span>\n    <span class=\"green\">// this must be in the frame location.</span>\n \n    <span class=\"teal\">Arc</span> arc = creapp.NewArc( \n      centre - radius * <span class=\"teal\">XYZ</span>.BasisZ,\n      centre + radius * <span class=\"teal\">XYZ</span>.BasisZ,\n      centre + radius * <span class=\"teal\">XYZ</span>.BasisX );\n \n    <span class=\"teal\">Line</span> line = creapp.NewLineBound(\n      arc.get_EndPoint( 1 ),\n      arc.get_EndPoint( 0 ) );\n \n    <span class=\"teal\">CurveLoop</span> halfCircle = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n    halfCircle.Append( arc );\n    halfCircle.Append( line );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n    loops.Add( halfCircle );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">GeometryCreationUtilities</span>\n      .CreateRevolvedGeometry(\n        frame, loops, 0, 2 * <span class=\"teal\">Math</span>.PI );\n  }\n</pre>\n<a name=\"4\"></a>\n<h4>Displaying a Solid Using AVF</h4>\n<p>One of the uses of the transient solids created by the geometry creation utility class is for geometrical filtered element collection. \nBefore we get to that, however, lets simply display a couple of spheres using the analysis visualisation framework AVF.\n\n<p>I copied and posted code from the samples mentioned above to create an AVF display style, get or create a SpatialFieldManager, and set up an analysis result schema. \nAll this functionality is finally accessed by a simple call to the PaintSolid method.\n\n<p>Here is my external command Execute mainline implementation putting it all together:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">CreationApp</span> creapp = app.Create;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Solid</span> s1 = <span class=\"teal\">Command</span>.CreateSphereAt( \n      creapp, <span class=\"teal\">XYZ</span>.Zero, 1.0 );\n \n    <span class=\"teal\">Solid</span> s2 = <span class=\"teal\">Command</span>.CreateSphereAt( \n      creapp, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 44.051020645, \n        80.747278319, 9.842519685 ), 1.0 );\n \n    <span class=\"teal\">Solid</span> s3 = <span class=\"teal\">Command</span>.CreateSphereAt(\n      creapp, 5 * <span class=\"teal\">XYZ</span>.BasisX, 3.0 );\n \n    <span class=\"teal\">Solid</span> s4 = <span class=\"teal\">Command</span>.CreateSphereAt(\n      creapp, 10 * <span class=\"teal\">XYZ</span>.BasisY, 5.0 );\n \n    PaintSolid( doc, s1, 1.0 );\n    PaintSolid( doc, s2, 2.0 );\n    PaintSolid( doc, s3, 3.0 );\n    PaintSolid( doc, s4, 4.0 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Some of the resulting spheres look like this in Revit:\n\n<center>\n<img alt=\"Spheres displayed using AVF\" src=\"img/sphere_avf.png\" width=\"400\"/>\n</center>\n<p>Next things I am thinking of doing are using a sphere to define a localised geometrical filtered element collector, and also making use of Kean's \n\n<a href=\"http://en.wikipedia.org/wiki/Apollonian_gasket\">\nApollonian gasket</a> and\n\n<a href=\"http://en.wikipedia.org/wiki/Apollonian_sphere_packing\">\nsphere packing</a>\n<a href=\"http://apollonian.cloudapp.net\">\nweb service</a> to \n\nfill a sphere with solid spheres \n\n(<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/06/cloud-mobile-series-summary.html\">project overview</a>).\n\nThe latter may not be all that useful in the BIM domain, but fun.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0822_create_sphere",
    "header_text": "GeometryCreationUtilities",
    "local_header_href": "#geometrycreationutilities",
    "chunk_text": "<h4>GeometryCreationUtilities</h4><p>The new utility class GeometryCreationUtilities offers the ability to create solid geometry from input curves:\n\n<ul>\n<li>CreateBlendGeometry\n<li>CreateExtrusionGeometry\n<li>CreateRevolvedGeometry\n<li>CreateSweptGeometry\n<li>CreateSweptBlendGeometry\n</li></li></li></li></li></ul>\n<p>The resulting geometry is not added to the document as a part of any element. \nHowever, you may use the created solid, and its constituent faces and edges, in several ways:\n\n<ul>\n<li>As the input face(s) to the methods in the Analysis Visualization Framework AVF, e.g. SpatialFieldManager.AddSpatialFieldPrimitive.\n<li>As the input solid to finding 3D elements by intersection.\n<li>As one or more of the inputs to a Boolean operation.\n<li>As a part of a geometric calculation using, for example, Face.Project, Face.Intersect, or other Face, Solid, and Edge geometry methods.\n</li></li></li></li></ul>\n<p>The resulting solids created thus reside only in memory, cannot be added to the Revit database and not saved.\nSo what good are they?\n\n<p>As said, you can use them for display purposes via the Analysis Visualization Framework \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/avf\">\nAVF</a>,\n\nor to limit filtered element collection to a localised space, as input to an ElementIntersectsSolidFilter filter.\nI haven't presented any samples using this filter so far, and I promise to do so soon in a follow-up post.\n\n<p>Scott Conover showed some interesting uses in his AU and DevDays presentations on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/devdays-2010-online-with-revit-2012-api-news.html#3\">\nRevit 2012 geometry API enhancements</a>, \n\nand I picked that up to show how to use AVF to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/using-avf-to-display-intersections-and-highlight-rooms.html\">\ndisplay room volumes</a>.\n\n<p>Before getting to that, though, let's just create a spherical solid in the first place.\n\n\n<a name=\"3\"></a>\n<h4>Creating a Sphere</h4>\n<p>One way to create a spherical solid using the GeometryCreationUtilities methods listed above is by using the CreateRevolvedGeometry method.\nI can create a face loop representing a half circle, e.g. a 180 degree arc with a line between its endpoints, and then rotate that 360 degrees around the line, which also defines the axis of revolution.\n\n<p>A so-called frame needs to be specified for the solid creation. \nTo enable creation of a sphere in any location, I wish to pass in the sphere centre point and radius as arguments.\nI can use the centre point to define the frame location.\nI initially thought that the face loop is defined at the global origin, and the frame automatically translates it into place, but that led to the following exception being thrown, saying that the \"loops must lie on the right side of the Z axis (where X &gt;= 0)\":</p>\n<center>\n<img alt=\"Sphere creation exception\" src=\"img/sphere_creation_exception.png\"/>\n</center>\n<p>I fixed that by translating my loop definition to the same centre point as the frame, and end up with the following implementation:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and return a solid sphere with</span>\n  <span class=\"gray\">///</span><span class=\"green\"> a given radius and centre point.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"teal\">Solid</span> CreateSphereAt(\n    <span class=\"teal\">CreationApp</span> creapp,\n    <span class=\"teal\">XYZ</span> centre,\n    <span class=\"blue\">double</span> radius )\n  {\n    <span class=\"green\">// Use the standard global coordinate system </span>\n    <span class=\"green\">// as a frame, translated to the sphere centre.</span>\n \n    <span class=\"teal\">Frame</span> frame = <span class=\"blue\">new</span> <span class=\"teal\">Frame</span>( centre,\n      <span class=\"teal\">XYZ</span>.BasisX, <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.BasisZ );\n \n    <span class=\"green\">// Create a vertical half-circle loop;</span>\n    <span class=\"green\">// this must be in the frame location.</span>\n \n    <span class=\"teal\">Arc</span> arc = creapp.NewArc( \n      centre - radius * <span class=\"teal\">XYZ</span>.BasisZ,\n      centre + radius * <span class=\"teal\">XYZ</span>.BasisZ,\n      centre + radius * <span class=\"teal\">XYZ</span>.BasisX );\n \n    <span class=\"teal\">Line</span> line = creapp.NewLineBound(\n      arc.get_EndPoint( 1 ),\n      arc.get_EndPoint( 0 ) );\n \n    <span class=\"teal\">CurveLoop</span> halfCircle = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n    halfCircle.Append( arc );\n    halfCircle.Append( line );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n    loops.Add( halfCircle );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">GeometryCreationUtilities</span>\n      .CreateRevolvedGeometry(\n        frame, loops, 0, 2 * <span class=\"teal\">Math</span>.PI );\n  }\n</pre>\n<a name=\"4\"></a>\n<h4>Displaying a Solid Using AVF</h4>\n<p>One of the uses of the transient solids created by the geometry creation utility class is for geometrical filtered element collection. \nBefore we get to that, however, lets simply display a couple of spheres using the analysis visualisation framework AVF.\n\n<p>I copied and posted code from the samples mentioned above to create an AVF display style, get or create a SpatialFieldManager, and set up an analysis result schema. \nAll this functionality is finally accessed by a simple call to the PaintSolid method.\n\n<p>Here is my external command Execute mainline implementation putting it all together:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">CreationApp</span> creapp = app.Create;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Solid</span> s1 = <span class=\"teal\">Command</span>.CreateSphereAt( \n      creapp, <span class=\"teal\">XYZ</span>.Zero, 1.0 );\n \n    <span class=\"teal\">Solid</span> s2 = <span class=\"teal\">Command</span>.CreateSphereAt( \n      creapp, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 44.051020645, \n        80.747278319, 9.842519685 ), 1.0 );\n \n    <span class=\"teal\">Solid</span> s3 = <span class=\"teal\">Command</span>.CreateSphereAt(\n      creapp, 5 * <span class=\"teal\">XYZ</span>.BasisX, 3.0 );\n \n    <span class=\"teal\">Solid</span> s4 = <span class=\"teal\">Command</span>.CreateSphereAt(\n      creapp, 10 * <span class=\"teal\">XYZ</span>.BasisY, 5.0 );\n \n    PaintSolid( doc, s1, 1.0 );\n    PaintSolid( doc, s2, 2.0 );\n    PaintSolid( doc, s3, 3.0 );\n    PaintSolid( doc, s4, 4.0 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Some of the resulting spheres look like this in Revit:\n\n<center>\n<img alt=\"Spheres displayed using AVF\" src=\"img/sphere_avf.png\" width=\"400\"/>\n</center>\n<p>Next things I am thinking of doing are using a sphere to define a localised geometrical filtered element collector, and also making use of Kean's \n\n<a href=\"http://en.wikipedia.org/wiki/Apollonian_gasket\">\nApollonian gasket</a> and\n\n<a href=\"http://en.wikipedia.org/wiki/Apollonian_sphere_packing\">\nsphere packing</a>\n<a href=\"http://apollonian.cloudapp.net\">\nweb service</a> to \n\nfill a sphere with solid spheres \n\n(<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/06/cloud-mobile-series-summary.html\">project overview</a>).\n\nThe latter may not be all that useful in the BIM domain, but fun.\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0822_create_sphere",
    "header_text": "Creating a Sphere",
    "local_header_href": "#creating-a-sphere",
    "chunk_text": "<h4>Creating a Sphere</h4><p>One way to create a spherical solid using the GeometryCreationUtilities methods listed above is by using the CreateRevolvedGeometry method.\nI can create a face loop representing a half circle, e.g. a 180 degree arc with a line between its endpoints, and then rotate that 360 degrees around the line, which also defines the axis of revolution.\n\n<p>A so-called frame needs to be specified for the solid creation. \nTo enable creation of a sphere in any location, I wish to pass in the sphere centre point and radius as arguments.\nI can use the centre point to define the frame location.\nI initially thought that the face loop is defined at the global origin, and the frame automatically translates it into place, but that led to the following exception being thrown, saying that the \"loops must lie on the right side of the Z axis (where X &gt;= 0)\":</p>\n<center>\n<img alt=\"Sphere creation exception\" src=\"img/sphere_creation_exception.png\"/>\n</center>\n<p>I fixed that by translating my loop definition to the same centre point as the frame, and end up with the following implementation:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and return a solid sphere with</span>\n  <span class=\"gray\">///</span><span class=\"green\"> a given radius and centre point.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"teal\">Solid</span> CreateSphereAt(\n    <span class=\"teal\">CreationApp</span> creapp,\n    <span class=\"teal\">XYZ</span> centre,\n    <span class=\"blue\">double</span> radius )\n  {\n    <span class=\"green\">// Use the standard global coordinate system </span>\n    <span class=\"green\">// as a frame, translated to the sphere centre.</span>\n \n    <span class=\"teal\">Frame</span> frame = <span class=\"blue\">new</span> <span class=\"teal\">Frame</span>( centre,\n      <span class=\"teal\">XYZ</span>.BasisX, <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.BasisZ );\n \n    <span class=\"green\">// Create a vertical half-circle loop;</span>\n    <span class=\"green\">// this must be in the frame location.</span>\n \n    <span class=\"teal\">Arc</span> arc = creapp.NewArc( \n      centre - radius * <span class=\"teal\">XYZ</span>.BasisZ,\n      centre + radius * <span class=\"teal\">XYZ</span>.BasisZ,\n      centre + radius * <span class=\"teal\">XYZ</span>.BasisX );\n \n    <span class=\"teal\">Line</span> line = creapp.NewLineBound(\n      arc.get_EndPoint( 1 ),\n      arc.get_EndPoint( 0 ) );\n \n    <span class=\"teal\">CurveLoop</span> halfCircle = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n    halfCircle.Append( arc );\n    halfCircle.Append( line );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n    loops.Add( halfCircle );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">GeometryCreationUtilities</span>\n      .CreateRevolvedGeometry(\n        frame, loops, 0, 2 * <span class=\"teal\">Math</span>.PI );\n  }\n</pre>\n<a name=\"4\"></a>\n<h4>Displaying a Solid Using AVF</h4>\n<p>One of the uses of the transient solids created by the geometry creation utility class is for geometrical filtered element collection. \nBefore we get to that, however, lets simply display a couple of spheres using the analysis visualisation framework AVF.\n\n<p>I copied and posted code from the samples mentioned above to create an AVF display style, get or create a SpatialFieldManager, and set up an analysis result schema. \nAll this functionality is finally accessed by a simple call to the PaintSolid method.\n\n<p>Here is my external command Execute mainline implementation putting it all together:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">CreationApp</span> creapp = app.Create;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Solid</span> s1 = <span class=\"teal\">Command</span>.CreateSphereAt( \n      creapp, <span class=\"teal\">XYZ</span>.Zero, 1.0 );\n \n    <span class=\"teal\">Solid</span> s2 = <span class=\"teal\">Command</span>.CreateSphereAt( \n      creapp, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 44.051020645, \n        80.747278319, 9.842519685 ), 1.0 );\n \n    <span class=\"teal\">Solid</span> s3 = <span class=\"teal\">Command</span>.CreateSphereAt(\n      creapp, 5 * <span class=\"teal\">XYZ</span>.BasisX, 3.0 );\n \n    <span class=\"teal\">Solid</span> s4 = <span class=\"teal\">Command</span>.CreateSphereAt(\n      creapp, 10 * <span class=\"teal\">XYZ</span>.BasisY, 5.0 );\n \n    PaintSolid( doc, s1, 1.0 );\n    PaintSolid( doc, s2, 2.0 );\n    PaintSolid( doc, s3, 3.0 );\n    PaintSolid( doc, s4, 4.0 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Some of the resulting spheres look like this in Revit:\n\n<center>\n<img alt=\"Spheres displayed using AVF\" src=\"img/sphere_avf.png\" width=\"400\"/>\n</center>\n<p>Next things I am thinking of doing are using a sphere to define a localised geometrical filtered element collector, and also making use of Kean's \n\n<a href=\"http://en.wikipedia.org/wiki/Apollonian_gasket\">\nApollonian gasket</a> and\n\n<a href=\"http://en.wikipedia.org/wiki/Apollonian_sphere_packing\">\nsphere packing</a>\n<a href=\"http://apollonian.cloudapp.net\">\nweb service</a> to \n\nfill a sphere with solid spheres \n\n(<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/06/cloud-mobile-series-summary.html\">project overview</a>).\n\nThe latter may not be all that useful in the BIM domain, but fun.\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0822_create_sphere",
    "header_text": "Displaying a Solid Using AVF",
    "local_header_href": "#displaying-a-solid-using-avf",
    "chunk_text": "<h4>Displaying a Solid Using AVF</h4><p>One of the uses of the transient solids created by the geometry creation utility class is for geometrical filtered element collection. \nBefore we get to that, however, lets simply display a couple of spheres using the analysis visualisation framework AVF.\n\n<p>I copied and posted code from the samples mentioned above to create an AVF display style, get or create a SpatialFieldManager, and set up an analysis result schema. \nAll this functionality is finally accessed by a simple call to the PaintSolid method.\n\n<p>Here is my external command Execute mainline implementation putting it all together:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">CreationApp</span> creapp = app.Create;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Solid</span> s1 = <span class=\"teal\">Command</span>.CreateSphereAt( \n      creapp, <span class=\"teal\">XYZ</span>.Zero, 1.0 );\n \n    <span class=\"teal\">Solid</span> s2 = <span class=\"teal\">Command</span>.CreateSphereAt( \n      creapp, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 44.051020645, \n        80.747278319, 9.842519685 ), 1.0 );\n \n    <span class=\"teal\">Solid</span> s3 = <span class=\"teal\">Command</span>.CreateSphereAt(\n      creapp, 5 * <span class=\"teal\">XYZ</span>.BasisX, 3.0 );\n \n    <span class=\"teal\">Solid</span> s4 = <span class=\"teal\">Command</span>.CreateSphereAt(\n      creapp, 10 * <span class=\"teal\">XYZ</span>.BasisY, 5.0 );\n \n    PaintSolid( doc, s1, 1.0 );\n    PaintSolid( doc, s2, 2.0 );\n    PaintSolid( doc, s3, 3.0 );\n    PaintSolid( doc, s4, 4.0 );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Some of the resulting spheres look like this in Revit:\n\n<center>\n<img alt=\"Spheres displayed using AVF\" src=\"img/sphere_avf.png\" width=\"400\"/>\n</center>\n<p>Next things I am thinking of doing are using a sphere to define a localised geometrical filtered element collector, and also making use of Kean's \n\n<a href=\"http://en.wikipedia.org/wiki/Apollonian_gasket\">\nApollonian gasket</a> and\n\n<a href=\"http://en.wikipedia.org/wiki/Apollonian_sphere_packing\">\nsphere packing</a>\n<a href=\"http://apollonian.cloudapp.net\">\nweb service</a> to \n\nfill a sphere with solid spheres \n\n(<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/06/cloud-mobile-series-summary.html\">project overview</a>).\n\nThe latter may not be all that useful in the BIM domain, but fun.\n</p></p></p></p></p>"
  }
]