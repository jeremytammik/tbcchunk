[
  {
    "original_filename": "1246_webgl_sorted_level",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1246_webgl_sorted_level",
    "header_text": "WebGL Goes Mobile and Sorted Level Retrieval",
    "local_header_href": "#webgl-goes-mobile-and-sorted-level-retrieval",
    "chunk_text": "<h3>WebGL Goes Mobile and Sorted Level Retrieval</h3><p>Today, let's look at a generic WebGL and a specialised Revit API issue: <a href=\"#2\">WebGL on all Apple platforms</a> and <a href=\"#3\">sorted level retrieval</a>.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1246_webgl_sorted_level",
    "header_text": "WebGL Goes Mobile",
    "local_header_href": "#webgl-goes-mobile",
    "chunk_text": "<h4>WebGL Goes Mobile</h4><p>Apple announced\n\n<a href=\"http://venturebeat.com/2014/11/18/thanks-to-apple-webgl-goes-truly-cross-platform\">\nfull support of WebGL for its desktop and mobile browsers</a>,\n\nso WebGL goes truly cross platform, as pointed out by Paul Flanagan:</p><blockquote>\n<p>Previous claims of cross-platform support for this HTML5 standard were largely worthless because they did not include the iPhone, iPad, or desktop Safari. That has changed, and this standard for 3D and interactive web experiences now works across all... platforms that matter.</p>\n<p>Rich 3D browser experience will be everything we currently see on the Web, from more interactive and engaging websites through to games which will work cross platform without the need for a big porting effort and all of the advantages of a real-time cloud platform.</p>\n</blockquote><p>This raises an interesting question: will WebGL apps running in web components be performant enough that nobody will need a native SDK for the mobile platforms? It seems that the web version of WebGL will be available for native apps through web components very soon.</p><p>We are happily riding the front of this wave with the WebGL-based Autodesk <a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.46\">View and Data API</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1246_webgl_sorted_level",
    "header_text": "Retrieve Levels Sorted by Elevation",
    "local_header_href": "#retrieve-levels-sorted-by-elevation",
    "chunk_text": "<h4>Retrieve Levels Sorted by Elevation</h4><p>A quick look at a code snippet based on the Revit API forum discussion thread on\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/sort-levels-by-elevation/m-p/5407203\">\nsorting levels by elevation</a> raised\n\nby jmcclanathan with contributions from peterjegan, sanjaymann and my colleague\n\n<a href=\"http://adndevblog.typepad.com/aec/aaron-lu.html\">\nAaron Lu</a> –\n\nby the way, Aaron joined the DevTech team this very month and brings with him a wealth of experience in AEC products, both cloud and desktop – a warm welcome to Aaron, and thank you for your active participation in the forum and everywhere else!</p><p><strong>Question:</strong> How would I go about getting a collection of levels sorted by elevation?\nFrom reading the info I've found so far I think that filtered element collector returns an IEnumerable and that can be sorted by using 'OrderBy', then ToElementIds could be used to create the collection of element ids in the correct order.\nIs that correct?</p><p>Here is some code I tried and didn't work:</p><pre class=\"code\">\n  <span class=\"teal\">UIDocument</span> uiDoc = <span class=\"blue\">this</span>.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uiDoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> levCollector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">Element</span>&gt; levelsCollection\n    = levCollector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) )\n      .OrderBy( lev =&gt; lev.Elevation )\n      .ToElementIds();\n</pre><p>Can someone please point me in the right direction?</p><p>Also, is an ICollection sortable?</p><p><strong>Answer 1:</strong> I didn't look at all the other stuff, but if you define an Element collection, you should fill it with Elements, not ElementIds:</p><pre class=\"code\">\n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">Element</span>&gt;... .ToElementIds();\n</pre><p><strong>Answer 2:</strong>\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">IOrderedEnumerable</span>&lt;<span class=\"teal\">Level</span>&gt; FindAndSortLevels(\n    <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WherePasses( <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ), <span class=\"blue\">false</span> ) )\n      .Cast&lt;<span class=\"teal\">Level</span>&gt;()\n      .OrderBy( e =&gt; e.Elevation );\n  }\n</pre>\n<p><strong>Answer 3:</strong> You can change this part:</p>\n<pre class=\"code\">\n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">Element</span>&gt; levelsCollection\n    = levCollector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) )\n      .OrderBy( lev =&gt; lev.Elevation )\n      .ToElementIds();\n</pre>\n<p>To this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Level</span>&gt; levelsCollection\n    = levCollector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) )\n      .OfType&lt;<span class=\"teal\">Level</span>&gt;()\n      .OrderBy( lev =&gt; lev.Elevation )\n      .ToList();\n</pre>\n<p>Reasons:</p>\n<ul>\n<li>Return value can't be ICollection&lt;Element&gt; when you call .ToElementIds.</li>\n<li>OfClass() method will return a collection of Element, you can only order them by elevation after casting Element to Level, that's why I suggest using OfType&lt;Level&gt;().</li>\n<li>OrderBy() method returns IOrderedEnumerable&lt;T&gt;, if you want to have index operator, i.e. list[i], you can call ToList() to let it return a List&lt;T&gt;.</li>\n</ul>\n<p><strong>Answer 4:</strong> Additional comments from Jeremy:</p>\n<p>The shortcuts are always preferable over explicit filter instantiations, since they are guaranteed to be <b><i>quick</i></b> filters, which is why Aaron prefers OfClass to the explicit ElementClassFilter instantiation.</p>\n<p>You should also always avoid instantiating new collections when possible, since they may create copies of the existing data.</p>\n<p>The filtered element collector itself is already iterable, so often there is no need to instantiate any .NET collections at all, c.f. the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/findelement-and-collector-optimisation.html\">\nFindElement and collector optimisation</a>.</p>\n<p>As a result of those considerations, here is my suggestion for an optimal solution:</p>\n<pre class=\"code\">\n  <span class=\"teal\">IOrderedEnumerable</span>&lt;<span class=\"teal\">Level</span>&gt; GetSortedLevels( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) )\n      .Cast&lt;<span class=\"teal\">Level</span>&gt;()\n      .OrderBy( lev =&gt; lev.Elevation );\n  }\n</pre>\n<p>For many other filtered element collector code examples, including this one, please refer to\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a>, specifically the module\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdCollectorPerformance.cs\">\nCmdCollectorPerformance.cs</a>.</p>\n<!--\n\n<a name=\"4\"></a>\n\n<h4>Using Transaction Groups to Relinquish Elements Without Saving or Syncing</h4>\n\n\n<a href=\"\"></a>\n\n<pre class=\"code\">\n</pre>\n\n<center>\n<img src=\"img/.png\" alt=\"\" width=\"670\"/>\n</center>\n\n\n<pre class=\"code\">\n</pre>\n-->\n</p>"
  }
]