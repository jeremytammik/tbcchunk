[
  {
    "original_filename": "0418_rst_dmu",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0418_rst_dmu",
    "header_text": "Structural Dynamic Model Update Sample",
    "local_header_href": "#structural-dynamic-model-update-sample",
    "chunk_text": "<h3>Structural Dynamic Model Update Sample</h3><p>I am away again on the next leg of my extensive vacations this summer, travelling a bit further afield this time.\nAfter one night in a plane and another night in a bus I find myself on the island of \n\n<a href=\"http://en.wikipedia.org/wiki/Ko_Tao\">\nKo Tao</a> in \n\nThailand, where I completed my first open sea water dive in the \n\n<a href=\"http://en.wikipedia.org/wiki/Diving_in_Ko_Tao\">\nJapanese Garden</a> with Boris of\n\n<a href=\"http://www.divingcourseskohtao.com\">\nAlvaro Diving</a>.\n\n<p>Since I will be away for the whole month of August, I decided to take the computer with me this time.\n\nI have a couple of interesting questions lined up that I have been wanting to discuss for quite a while now, and hope to finally get around to doing that now.\n\n<p>Here is the first one, a neat sample of using the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/element-level-events.html#2\">\ndynamic model update</a> \n\nfeatures in the context of Revit Structure created by and presented at the recent \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/api-training-and-aec-devcamp-material.html\">\nAEC DevCamp</a> in Boston by Saikat Bhattacharya.\n\n<!-- at the Revit Structure API session at the -->\n<p>It causes all concrete beam rebars in the model to automatically resize every time the beam geometry changes.\n\n<p>Here is Saikat's description:\n\n<h4>Dynamic Model Update Sample in the Structural Context</h4>\n<p>This sample was written to illustrate one of the many possible uses of the new platform API feature called Dynamic Model Update (DMU) in a Structural context in Revit Structure. For more on the basics of on DMU and how to use this new mechanism, we can refer to the chapter 25 (page 283) of the Revit API Developers Guide PDF document located in the SDK. It causes concrete beam rebars (included in the attached project) to automatically resize every time the beam geometry changes. \n\n<p>This sample creates a new ribbon in the Analyze tab with two radio group button which can be used to enable the alignment functionality in the sample to be active or not. If the alignment option is on (or active), every resize of the beam in the model resizes the rebars in the beam to perfectly align it between the two opposite faces of the beam. \n\n<p>This sample uses the IExternalApplications OnStartup event to create a ribbon with two radio buttons on the Analyze tab. It also registers the updater class and adds triggers to it. The trigger is set to work with implicit set of elements which are of Structural Framing category (beams) which is specified using an ElementCategoryFilter and is set to work with change of scope, specifically change in Geometry of the elements (beams). \n\n<p>The sample implements two external commands called UIDynamicModelUpdateOn and UIDynamicModelUpdateOff which are executed when users click on the radio group buttons in the ribbon panel in the analyze tab. These commands internally just set a local variable which stores whether the alignment of the rebars functionality is activated or not. \n\n<p>The sample also contains an Updater class called RebarUpdater which implements the IUpdater interface. This interface requires implementing certain methods to return the updater Id, updater name, additional (auxiliary) information and the execute method which gets informed of the change of scope (geometry) of the elements (beams). This Execute method is called when there is a change of geometry of the beam in the given set up in RebarUpdater class. In this Execute method, the code gets access to all the modified beams using the data.GetModifiedElementIds and then iterates through each beam. It uses the new element iteration API to create a collection of all the rebars and calculates the beam line of each beam. This beam line helps provide the start and end point of the beam which is the extent to which the rebars would be stretched or compressed to. Following this, the sample moves the rebar to one end of the beam using the doc.Move method and passing in a translational vector which is based on the beam and rebar start points. After the rebar has been moved, the beam line needs to be recalculated again and using the length from the beam line, we can set the corresponding length parameter of the rebar to get it in sync with the new length of the beam. In the included RVT file, the rebar parameter *B* refers to the length of the rebar which is used to set the new length. \n\n<p>The intention of the sample is to show how the new Dynamic Model Update API can be used in a structural context inside Revit Structure. This sample assumes you are using only one beam which has single or multiple rebars contained in it and needs to be extensively tested and modified to work with broader types of beams and rebars. \n\n<p>Here is the entire code:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Automatic )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">AlignRebar</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> On shutdown, unregister the updater</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"teal\">RebarUpdater</span> updater\n      = <span class=\"blue\">new</span> <span class=\"teal\">RebarUpdater</span>( a.ActiveAddInId );\n \n    <span class=\"teal\">UpdaterRegistry</span>.UnregisterUpdater(\n      updater.GetUpdaterId() );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> On start up, add UI buttons, register </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the updater and add triggers</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"green\">// Add the UI buttons on start up</span>\n    AddButtons( a );\n \n    <span class=\"teal\">RebarUpdater</span> updater = <span class=\"blue\">new</span> <span class=\"teal\">RebarUpdater</span>(\n      a.ActiveAddInId );\n \n    <span class=\"green\">// Register the updater in the singleton </span>\n    <span class=\"green\">// UpdateRegistry class</span>\n    <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( updater );\n \n    <span class=\"green\">// Set the filter; in this case we </span>\n    <span class=\"green\">// shall work with beams specifically</span>\n    <span class=\"teal\">ElementCategoryFilter</span> filter\n      = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n        <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n \n    <span class=\"green\">// Add trigger </span>\n    <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n      updater.GetUpdaterId(), filter,\n      <span class=\"teal\">Element</span>.GetChangeTypeGeometry() );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add UI buttons</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> AddButtons( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"green\">// create a ribbon panel on the Analyze tab</span>\n    <span class=\"teal\">RibbonPanel</span> panel = a.CreateRibbonPanel(\n      <span class=\"teal\">Tab</span>.Analyze, <span class=\"maroon\">\"RST Labs\"</span> );\n \n    AddDmuCommandButtons( panel );\n  }\n \n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Control buttons for the Dynamic Model Update </span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> AddDmuCommandButtons(\n    <span class=\"teal\">RibbonPanel</span> panel )\n  {\n    <span class=\"blue\">string</span> path = GetType().Assembly.Location;\n \n    <span class=\"blue\">string</span> sDirectory\n      = System.IO.<span class=\"teal\">Path</span>.GetDirectoryName( path );\n \n    <span class=\"green\">// create toggle buttons for radio button group </span>\n \n    <span class=\"teal\">ToggleButtonData</span> toggleButtonData3 \n      = <span class=\"blue\">new</span> <span class=\"teal\">ToggleButtonData</span>( \n        <span class=\"maroon\">\"RSTLabsDMUOff\"</span>, <span class=\"maroon\">\"Align Off\"</span>, path, \n        <span class=\"maroon\">\"RstAvfDmu.UIDynamicModelUpdateOff\"</span> );\n \n    toggleButtonData3.LargeImage \n      = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>( <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( sDirectory \n        + <span class=\"maroon\">\"\\\\Images\\\\\"</span> + <span class=\"maroon\">\"Families.ico\"</span> ) );\n \n    <span class=\"teal\">ToggleButtonData</span> toggleButtonData4 \n      = <span class=\"blue\">new</span> <span class=\"teal\">ToggleButtonData</span>( \n        <span class=\"maroon\">\"RSTLabsDMUOn\"</span>, <span class=\"maroon\">\"Align On\"</span>, path, \n        <span class=\"maroon\">\"RstAvfDmu.UIDynamicModelUpdateOn\"</span> );\n \n    toggleButtonData4.LargeImage \n      = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>( <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( sDirectory \n        + <span class=\"maroon\">\"\\\\Images\\\\\"</span> + <span class=\"maroon\">\"Families.ico\"</span> ) );\n \n    <span class=\"green\">// make dyn update on/off radio button group </span>\n \n    <span class=\"teal\">RadioButtonGroupData</span> radioBtnGroupData2 = \n      <span class=\"blue\">new</span> <span class=\"teal\">RadioButtonGroupData</span>( <span class=\"maroon\">\"RebarAlign\"</span> );\n \n    <span class=\"teal\">RadioButtonGroup</span> radioBtnGroup2 \n      = panel.AddItem( radioBtnGroupData2 ) \n        <span class=\"blue\">as</span> <span class=\"teal\">RadioButtonGroup</span>;\n \n    radioBtnGroup2.AddItem( toggleButtonData3 );\n    radioBtnGroup2.AddItem( toggleButtonData4 );\n  }\n}\n \n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RebarUpdater</span> : <span class=\"teal\">IUpdater</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> m_updateActive = <span class=\"blue\">false</span>;\n  <span class=\"teal\">AddInId</span> addinID = <span class=\"blue\">null</span>;\n  <span class=\"teal\">UpdaterId</span> updaterID = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">public</span> RebarUpdater( <span class=\"teal\">AddInId</span> id )\n  {\n    addinID = id;\n    <span class=\"green\">// UpdaterId that is used to register and </span>\n    <span class=\"green\">// unregister updaters and triggers</span>\n    updaterID = <span class=\"blue\">new</span> <span class=\"teal\">UpdaterId</span>( addinID, <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( \n      <span class=\"maroon\">\"63CDBB88-5CC4-4ac3-AD24-52DD435AAB25\"</span> ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Align rebar to updated beam </span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( <span class=\"teal\">UpdaterData</span> data )\n  {\n    <span class=\"blue\">if</span>( m_updateActive == <span class=\"blue\">false</span> ) { <span class=\"blue\">return</span>; }\n \n    <span class=\"green\">// Get access to document object</span>\n    <span class=\"teal\">Document</span> doc = data.GetDocument();\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// Loop through all the modified elements</span>\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> \n        data.GetModifiedElementIds() )\n      {\n        <span class=\"teal\">FamilyInstance</span> beam = doc.get_Element( id ) \n          <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"green\">// Create a filter to retrieve all rebars</span>\n        <span class=\"teal\">FilteredElementCollector</span> rebars \n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n        rebars.OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Rebar );\n        rebars.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Rebar</span> ) );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Rebar</span> rebar <span class=\"blue\">in</span> rebars )\n        {\n          <span class=\"green\">// Calculate the beam line</span>\n          <span class=\"teal\">XYZ</span> beamStartPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>();\n          <span class=\"teal\">XYZ</span> beamEndPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>();\n          <span class=\"teal\">Line</span> line = CalculateBeamLine( beam );\n \n          <span class=\"green\">// Get the start and end point </span>\n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != line )\n          {\n            beamStartPoint = line.get_EndPoint( 0 );\n            beamEndPoint = line.get_EndPoint( 1 );\n          }\n \n          <span class=\"green\">// To align the rebar to the new beam's </span>\n          <span class=\"green\">// length, we split the tasks in two stages</span>\n          <span class=\"green\">// Step 1: Move the rebar to align with one </span>\n          <span class=\"green\">// of the end of the beam</span>\n \n          <span class=\"green\">// For this we first access the </span>\n          <span class=\"green\">// rebar line geometry</span>\n          <span class=\"teal\">Line</span> rebarLine = rebar.Curves.get_Item( 0 ) \n            <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n \n          <span class=\"green\">// Calculate the translation vector </span>\n          <span class=\"green\">// (the extent of the move)</span>\n          <span class=\"teal\">XYZ</span> transVec = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( beamStartPoint.X \n            - rebarLine.get_EndPoint( 0 ).X, 0.0, 0.0 );\n \n          <span class=\"green\">// Perform the move </span>\n          doc.Move( rebar, transVec );\n \n          <span class=\"green\">// This move causes the beam line to change </span>\n          <span class=\"green\">// and so recalculating the beam line</span>\n          line = CalculateBeamLine( beam );\n \n          <span class=\"green\">// Step 2: Set the new length of the rebar </span>\n          <span class=\"green\">// based on new beam length. For this, we </span>\n          <span class=\"green\">// can set the relevant parameter after </span>\n          <span class=\"green\">// checking at UI</span>\n          rebar.get_Parameter( <span class=\"maroon\">\"B\"</span> ).Set( \n            GetLength( line ) );\n        }\n      }\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Exception\"</span>, ex.Message );\n    }\n  }\n \n  <span class=\"green\">// Calculate the beam line </span>\n  <span class=\"blue\">private</span> <span class=\"teal\">Line</span> CalculateBeamLine( \n    <span class=\"teal\">FamilyInstance</span> beam )\n  {\n    <span class=\"teal\">GeometryElement</span> geoElement \n      = beam.get_Geometry( <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == geoElement \n      || 0 == geoElement.Objects.Size )\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">Exception</span>( \n        <span class=\"maroon\">\"Can't get the geometry of selected element.\"</span> );\n    }\n \n    <span class=\"teal\">Line</span> beamLine = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geoObject \n      <span class=\"blue\">in</span> geoElement.Objects )\n    {\n      <span class=\"green\">// get the driving path and vector of the beam </span>\n      beamLine = geoObject <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != beamLine )\n      {\n        <span class=\"blue\">return</span> beamLine;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the length of the given line</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">double</span> GetLength( <span class=\"teal\">Line</span> line )\n  {\n    <span class=\"teal\">XYZ</span> v = line.get_EndPoint( 1 ) - line.get_EndPoint( 0 );\n    <span class=\"blue\">return</span> v.GetLength();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the auxiliary string</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetAdditionalInformation()\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"Automatically align rebar to match beam\"</span>;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the priority</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">ChangePriority</span> GetChangePriority()\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">ChangePriority</span>.Rebar;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the updater Id</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">UpdaterId</span> GetUpdaterId()\n  {\n    <span class=\"blue\">return</span> updaterID;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the updater name</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetUpdaterName()\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"Rebar alignment updater\"</span>;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UIDynamicModelUpdateOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">RebarUpdater</span>.m_updateActive = <span class=\"blue\">false</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UIDynamicModelUpdateOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">RebarUpdater</span>.m_updateActive = <span class=\"blue\">true</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>The sample model included with the application includes two point loads, a rectangular concrete beam, and a rebar.\nHere are the selected point loads:</p>\n<center>\n<img alt=\"Point loads\" src=\"img/rst_dmu_loads.png\"/>\n</center>\n<p>This is the beam itself:</p>\n<center>\n<img alt=\"Concrete rectangular beam\" src=\"img/rst_dmu_beam.png\"/>\n</center>\n<p>These are the rebar elements:</p>\n<center>\n<img alt=\"Rebar\" src=\"img/rst_dmu_rebar.png\"/>\n</center>\n<p>On selecting and dragging the beam around, the add-in automatically updates the rebar to follow it:</p>\n<center>\n<img alt=\"Moving the beam automatically updates the rebar\" src=\"img/rst_dmu_updated.png\"/>\n</center>\n<p>Here is \n\n<!-- C:\\a\\j\\adn\\train\\RstAvfDmu.zip -->\n<a href=\"zip/RstAvfDmu.zip\">\nRstAvfDmu.zip</a>\n\nincluding the complete source code and Visual Studio solution for this sample.\n\n<p>This solution actually includes another additional sample, which demonstrates a use of the analysis visualisation framework in a structural context, to simulate a visual display a load distribution.\nWe might get around to presenting that in detail as well one of these days, or you can just go ahead and explore it for yourself.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0418_rst_dmu",
    "header_text": "Dynamic Model Update Sample in the Structural Context",
    "local_header_href": "#dynamic-model-update-sample-in-the-structural-context",
    "chunk_text": "<h4>Dynamic Model Update Sample in the Structural Context</h4><p>This sample was written to illustrate one of the many possible uses of the new platform API feature called Dynamic Model Update (DMU) in a Structural context in Revit Structure. For more on the basics of on DMU and how to use this new mechanism, we can refer to the chapter 25 (page 283) of the Revit API Developers Guide PDF document located in the SDK. It causes concrete beam rebars (included in the attached project) to automatically resize every time the beam geometry changes. \n\n<p>This sample creates a new ribbon in the Analyze tab with two radio group button which can be used to enable the alignment functionality in the sample to be active or not. If the alignment option is on (or active), every resize of the beam in the model resizes the rebars in the beam to perfectly align it between the two opposite faces of the beam. \n\n<p>This sample uses the IExternalApplications OnStartup event to create a ribbon with two radio buttons on the Analyze tab. It also registers the updater class and adds triggers to it. The trigger is set to work with implicit set of elements which are of Structural Framing category (beams) which is specified using an ElementCategoryFilter and is set to work with change of scope, specifically change in Geometry of the elements (beams). \n\n<p>The sample implements two external commands called UIDynamicModelUpdateOn and UIDynamicModelUpdateOff which are executed when users click on the radio group buttons in the ribbon panel in the analyze tab. These commands internally just set a local variable which stores whether the alignment of the rebars functionality is activated or not. \n\n<p>The sample also contains an Updater class called RebarUpdater which implements the IUpdater interface. This interface requires implementing certain methods to return the updater Id, updater name, additional (auxiliary) information and the execute method which gets informed of the change of scope (geometry) of the elements (beams). This Execute method is called when there is a change of geometry of the beam in the given set up in RebarUpdater class. In this Execute method, the code gets access to all the modified beams using the data.GetModifiedElementIds and then iterates through each beam. It uses the new element iteration API to create a collection of all the rebars and calculates the beam line of each beam. This beam line helps provide the start and end point of the beam which is the extent to which the rebars would be stretched or compressed to. Following this, the sample moves the rebar to one end of the beam using the doc.Move method and passing in a translational vector which is based on the beam and rebar start points. After the rebar has been moved, the beam line needs to be recalculated again and using the length from the beam line, we can set the corresponding length parameter of the rebar to get it in sync with the new length of the beam. In the included RVT file, the rebar parameter *B* refers to the length of the rebar which is used to set the new length. \n\n<p>The intention of the sample is to show how the new Dynamic Model Update API can be used in a structural context inside Revit Structure. This sample assumes you are using only one beam which has single or multiple rebars contained in it and needs to be extensively tested and modified to work with broader types of beams and rebars. \n\n<p>Here is the entire code:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Automatic )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">AlignRebar</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> On shutdown, unregister the updater</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"teal\">RebarUpdater</span> updater\n      = <span class=\"blue\">new</span> <span class=\"teal\">RebarUpdater</span>( a.ActiveAddInId );\n \n    <span class=\"teal\">UpdaterRegistry</span>.UnregisterUpdater(\n      updater.GetUpdaterId() );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> On start up, add UI buttons, register </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the updater and add triggers</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"green\">// Add the UI buttons on start up</span>\n    AddButtons( a );\n \n    <span class=\"teal\">RebarUpdater</span> updater = <span class=\"blue\">new</span> <span class=\"teal\">RebarUpdater</span>(\n      a.ActiveAddInId );\n \n    <span class=\"green\">// Register the updater in the singleton </span>\n    <span class=\"green\">// UpdateRegistry class</span>\n    <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( updater );\n \n    <span class=\"green\">// Set the filter; in this case we </span>\n    <span class=\"green\">// shall work with beams specifically</span>\n    <span class=\"teal\">ElementCategoryFilter</span> filter\n      = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n        <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming );\n \n    <span class=\"green\">// Add trigger </span>\n    <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n      updater.GetUpdaterId(), filter,\n      <span class=\"teal\">Element</span>.GetChangeTypeGeometry() );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add UI buttons</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> AddButtons( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"green\">// create a ribbon panel on the Analyze tab</span>\n    <span class=\"teal\">RibbonPanel</span> panel = a.CreateRibbonPanel(\n      <span class=\"teal\">Tab</span>.Analyze, <span class=\"maroon\">\"RST Labs\"</span> );\n \n    AddDmuCommandButtons( panel );\n  }\n \n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Control buttons for the Dynamic Model Update </span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> AddDmuCommandButtons(\n    <span class=\"teal\">RibbonPanel</span> panel )\n  {\n    <span class=\"blue\">string</span> path = GetType().Assembly.Location;\n \n    <span class=\"blue\">string</span> sDirectory\n      = System.IO.<span class=\"teal\">Path</span>.GetDirectoryName( path );\n \n    <span class=\"green\">// create toggle buttons for radio button group </span>\n \n    <span class=\"teal\">ToggleButtonData</span> toggleButtonData3 \n      = <span class=\"blue\">new</span> <span class=\"teal\">ToggleButtonData</span>( \n        <span class=\"maroon\">\"RSTLabsDMUOff\"</span>, <span class=\"maroon\">\"Align Off\"</span>, path, \n        <span class=\"maroon\">\"RstAvfDmu.UIDynamicModelUpdateOff\"</span> );\n \n    toggleButtonData3.LargeImage \n      = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>( <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( sDirectory \n        + <span class=\"maroon\">\"\\\\Images\\\\\"</span> + <span class=\"maroon\">\"Families.ico\"</span> ) );\n \n    <span class=\"teal\">ToggleButtonData</span> toggleButtonData4 \n      = <span class=\"blue\">new</span> <span class=\"teal\">ToggleButtonData</span>( \n        <span class=\"maroon\">\"RSTLabsDMUOn\"</span>, <span class=\"maroon\">\"Align On\"</span>, path, \n        <span class=\"maroon\">\"RstAvfDmu.UIDynamicModelUpdateOn\"</span> );\n \n    toggleButtonData4.LargeImage \n      = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>( <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( sDirectory \n        + <span class=\"maroon\">\"\\\\Images\\\\\"</span> + <span class=\"maroon\">\"Families.ico\"</span> ) );\n \n    <span class=\"green\">// make dyn update on/off radio button group </span>\n \n    <span class=\"teal\">RadioButtonGroupData</span> radioBtnGroupData2 = \n      <span class=\"blue\">new</span> <span class=\"teal\">RadioButtonGroupData</span>( <span class=\"maroon\">\"RebarAlign\"</span> );\n \n    <span class=\"teal\">RadioButtonGroup</span> radioBtnGroup2 \n      = panel.AddItem( radioBtnGroupData2 ) \n        <span class=\"blue\">as</span> <span class=\"teal\">RadioButtonGroup</span>;\n \n    radioBtnGroup2.AddItem( toggleButtonData3 );\n    radioBtnGroup2.AddItem( toggleButtonData4 );\n  }\n}\n \n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RebarUpdater</span> : <span class=\"teal\">IUpdater</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> m_updateActive = <span class=\"blue\">false</span>;\n  <span class=\"teal\">AddInId</span> addinID = <span class=\"blue\">null</span>;\n  <span class=\"teal\">UpdaterId</span> updaterID = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">public</span> RebarUpdater( <span class=\"teal\">AddInId</span> id )\n  {\n    addinID = id;\n    <span class=\"green\">// UpdaterId that is used to register and </span>\n    <span class=\"green\">// unregister updaters and triggers</span>\n    updaterID = <span class=\"blue\">new</span> <span class=\"teal\">UpdaterId</span>( addinID, <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( \n      <span class=\"maroon\">\"63CDBB88-5CC4-4ac3-AD24-52DD435AAB25\"</span> ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Align rebar to updated beam </span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( <span class=\"teal\">UpdaterData</span> data )\n  {\n    <span class=\"blue\">if</span>( m_updateActive == <span class=\"blue\">false</span> ) { <span class=\"blue\">return</span>; }\n \n    <span class=\"green\">// Get access to document object</span>\n    <span class=\"teal\">Document</span> doc = data.GetDocument();\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// Loop through all the modified elements</span>\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> \n        data.GetModifiedElementIds() )\n      {\n        <span class=\"teal\">FamilyInstance</span> beam = doc.get_Element( id ) \n          <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"green\">// Create a filter to retrieve all rebars</span>\n        <span class=\"teal\">FilteredElementCollector</span> rebars \n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n        rebars.OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Rebar );\n        rebars.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Rebar</span> ) );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Rebar</span> rebar <span class=\"blue\">in</span> rebars )\n        {\n          <span class=\"green\">// Calculate the beam line</span>\n          <span class=\"teal\">XYZ</span> beamStartPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>();\n          <span class=\"teal\">XYZ</span> beamEndPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>();\n          <span class=\"teal\">Line</span> line = CalculateBeamLine( beam );\n \n          <span class=\"green\">// Get the start and end point </span>\n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != line )\n          {\n            beamStartPoint = line.get_EndPoint( 0 );\n            beamEndPoint = line.get_EndPoint( 1 );\n          }\n \n          <span class=\"green\">// To align the rebar to the new beam's </span>\n          <span class=\"green\">// length, we split the tasks in two stages</span>\n          <span class=\"green\">// Step 1: Move the rebar to align with one </span>\n          <span class=\"green\">// of the end of the beam</span>\n \n          <span class=\"green\">// For this we first access the </span>\n          <span class=\"green\">// rebar line geometry</span>\n          <span class=\"teal\">Line</span> rebarLine = rebar.Curves.get_Item( 0 ) \n            <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n \n          <span class=\"green\">// Calculate the translation vector </span>\n          <span class=\"green\">// (the extent of the move)</span>\n          <span class=\"teal\">XYZ</span> transVec = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( beamStartPoint.X \n            - rebarLine.get_EndPoint( 0 ).X, 0.0, 0.0 );\n \n          <span class=\"green\">// Perform the move </span>\n          doc.Move( rebar, transVec );\n \n          <span class=\"green\">// This move causes the beam line to change </span>\n          <span class=\"green\">// and so recalculating the beam line</span>\n          line = CalculateBeamLine( beam );\n \n          <span class=\"green\">// Step 2: Set the new length of the rebar </span>\n          <span class=\"green\">// based on new beam length. For this, we </span>\n          <span class=\"green\">// can set the relevant parameter after </span>\n          <span class=\"green\">// checking at UI</span>\n          rebar.get_Parameter( <span class=\"maroon\">\"B\"</span> ).Set( \n            GetLength( line ) );\n        }\n      }\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Exception\"</span>, ex.Message );\n    }\n  }\n \n  <span class=\"green\">// Calculate the beam line </span>\n  <span class=\"blue\">private</span> <span class=\"teal\">Line</span> CalculateBeamLine( \n    <span class=\"teal\">FamilyInstance</span> beam )\n  {\n    <span class=\"teal\">GeometryElement</span> geoElement \n      = beam.get_Geometry( <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == geoElement \n      || 0 == geoElement.Objects.Size )\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">Exception</span>( \n        <span class=\"maroon\">\"Can't get the geometry of selected element.\"</span> );\n    }\n \n    <span class=\"teal\">Line</span> beamLine = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geoObject \n      <span class=\"blue\">in</span> geoElement.Objects )\n    {\n      <span class=\"green\">// get the driving path and vector of the beam </span>\n      beamLine = geoObject <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != beamLine )\n      {\n        <span class=\"blue\">return</span> beamLine;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the length of the given line</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">double</span> GetLength( <span class=\"teal\">Line</span> line )\n  {\n    <span class=\"teal\">XYZ</span> v = line.get_EndPoint( 1 ) - line.get_EndPoint( 0 );\n    <span class=\"blue\">return</span> v.GetLength();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the auxiliary string</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetAdditionalInformation()\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"Automatically align rebar to match beam\"</span>;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the priority</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">ChangePriority</span> GetChangePriority()\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">ChangePriority</span>.Rebar;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the updater Id</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">UpdaterId</span> GetUpdaterId()\n  {\n    <span class=\"blue\">return</span> updaterID;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the updater name</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetUpdaterName()\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"Rebar alignment updater\"</span>;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UIDynamicModelUpdateOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">RebarUpdater</span>.m_updateActive = <span class=\"blue\">false</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UIDynamicModelUpdateOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">RebarUpdater</span>.m_updateActive = <span class=\"blue\">true</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>The sample model included with the application includes two point loads, a rectangular concrete beam, and a rebar.\nHere are the selected point loads:</p>\n<center>\n<img alt=\"Point loads\" src=\"img/rst_dmu_loads.png\"/>\n</center>\n<p>This is the beam itself:</p>\n<center>\n<img alt=\"Concrete rectangular beam\" src=\"img/rst_dmu_beam.png\"/>\n</center>\n<p>These are the rebar elements:</p>\n<center>\n<img alt=\"Rebar\" src=\"img/rst_dmu_rebar.png\"/>\n</center>\n<p>On selecting and dragging the beam around, the add-in automatically updates the rebar to follow it:</p>\n<center>\n<img alt=\"Moving the beam automatically updates the rebar\" src=\"img/rst_dmu_updated.png\"/>\n</center>\n<p>Here is \n\n<!-- C:\\a\\j\\adn\\train\\RstAvfDmu.zip -->\n<a href=\"zip/RstAvfDmu.zip\">\nRstAvfDmu.zip</a>\n\nincluding the complete source code and Visual Studio solution for this sample.\n\n<p>This solution actually includes another additional sample, which demonstrates a use of the analysis visualisation framework in a structural context, to simulate a visual display a load distribution.\nWe might get around to presenting that in detail as well one of these days, or you can just go ahead and explore it for yourself.\n\n</p></p></p></p></p></p></p></p></p>"
  }
]