[
  {
    "original_filename": "1061_localised_unit_abbrev",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1061_localised_unit_abbrev",
    "header_text": "Localised Unit Abbreviations",
    "local_header_href": "#localised-unit-abbreviations",
    "chunk_text": "<h3>Localised Unit Abbreviations</h3><p>I recently discussed how to generate\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/unit-abbreviations.html\">\nunit abbreviations</a>,\n\nboth using a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/unit-abbreviations.html#2\">\nhard coded list</a> and\n\nautomatically generating them\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/unit-abbreviations.html#3\">\nfrom the UnitSymbolType enumeration values</a>.\n\n<p>I implemented the CmdDutAbbreviation command in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/the-building-coder-samples-on-github.html\">\nThe Building Coder samples</a> to\n\ntest these abbreviations, and also enhanced it to display the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/mapping-display-unit-type-to-unit-types.html\">\nDisplay Unit Type to Unit Types mapping</a> that\n\nwe added in the meantime.</p>\n<p>Victor Chekalin, or Виктор Чекалин, reacted to this analysis and adds:</p>\n<blockquote>\n<p>Thank you for your investigation.</p>\n<p>But... There is a big 'but' :-)</p>\n<p>Your method with UnitSymbolType is not completely suitable for localised applications, e.g. Russian.</p>\n<p>As always, I have solved these little issues :-)</p>\n<p>You write above: 'After some further digging on the Revit API help file RevitAPI.chm, I discovered the FormatOptions GetValidUnitSymbols method'. But you did not dig deep enough to find the old GetLabelFor method in the static LabelUtils class.</p>\n<p>If you looked at that, you'll see that one of overridden method takes UnitSymbolType as parameter.</p>\n<p>And guess what it returns?</p>\n<p>Right. The <b>localizable</b> abbreviation for Unit Symbol :-)  – exactly what we need.</p>\n<p>So, the command to retrieve a suitable localised Unit Type abbreviation becomes much simpler – check out\n\n<a href=\"http://pastebin.com/ZZ0mVeYE\">http://pastebin.com/ZZ0mVeYE</a> –\n\nregards, Victor:</p>\n</blockquote>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">DisplayUnitType</span> n = <span class=\"teal\">DisplayUnitType</span>.DUT_GALLONS_US;\n \n  <span class=\"blue\">for</span>( <span class=\"teal\">DisplayUnitType</span> i = <span class=\"teal\">DisplayUnitType</span>\n    .DUT_METERS; i &lt; n; ++i )\n  {\n    <span class=\"blue\">var</span> validUnitSymbols = <span class=\"teal\">FormatOptions</span>\n      .GetValidUnitSymbols( i );\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> validUnitSymbol <span class=\"blue\">in</span> validUnitSymbols )\n    {\n      <span class=\"blue\">if</span>( validUnitSymbol != <span class=\"teal\">UnitSymbolType</span>.UST_NONE )\n      {\n        <span class=\"blue\">var</span> abbrUnitTypeLabel = <span class=\"teal\">LabelUtils</span>.GetLabelFor(\n          validUnitSymbol );\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} - {1}\"</span>, abbrUnitTypeLabel,\n          <span class=\"teal\">LabelUtils</span>.GetLabelFor( i ) );\n      }\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Jeremy adds: I updated\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> and\n\nintegrated Victor's enhancement to the existing CmdDutAbbreviation command.</p>\n<p>The relevant code looks like this now and lists both the official Revit API LabelUtils and hard-coded abbreviations plus the valid unit symbols for the first 26 display unit types:</p>\n<pre class=\"code\">\n  <span class=\"teal\">MapDutToUt</span> map_dut_to_ut = <span class=\"blue\">new</span> <span class=\"teal\">MapDutToUt</span>();\n \n  <span class=\"teal\">DisplayUnitType</span> n\n    = <span class=\"teal\">DisplayUnitType</span>.DUT_GALLONS_US;\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Here is a list of the first {0} \"</span>\n    + <span class=\"maroon\">\"display unit types with official Revit API \"</span>\n    + <span class=\"maroon\">\"LabelUtils, hard-coded The Building Coder \"</span>\n    + <span class=\"maroon\">\"abbreviations and valid unit symbols:\\n\"</span>,\n    (<span class=\"blue\">int</span>) n - 1 );\n \n  <span class=\"blue\">string</span> unit_types, valid_unit_symbols;\n \n  <span class=\"blue\">for</span>( <span class=\"teal\">DisplayUnitType</span> i = <span class=\"teal\">DisplayUnitType</span>\n    .DUT_METERS; i &lt; n; ++i )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; uts = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;(\n      map_dut_to_ut[i]\n        .Select&lt;<span class=\"teal\">UnitType</span>, <span class=\"blue\">string</span>&gt;(\n          u =&gt; u.ToString().Substring( 3 ) ) );\n \n    <span class=\"blue\">int</span> m = uts.Count;\n \n    unit_types = 4 &gt; m\n      ? <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>, uts )\n      : <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0}, {1} and {2} more\"</span>,\n        uts[0], uts[1], m - 2 );\n \n    valid_unit_symbols = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n      <span class=\"teal\">FormatOptions</span>.GetValidUnitSymbols( i )\n        .Where( u =&gt; <span class=\"teal\">UnitSymbolType</span>.UST_NONE != u )\n        .Select&lt;<span class=\"teal\">UnitSymbolType</span>, <span class=\"blue\">string</span>&gt;(\n          u =&gt; <span class=\"teal\">LabelUtils</span>.GetLabelFor( u )\n            + <span class=\"maroon\">\"/\"</span> + <span class=\"teal\">Util</span>.UnitSymbolTypeString( u ) ) );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0,6} - {1} - {2}: {3}\"</span>,\n      <span class=\"teal\">Util</span>.DisplayUnitTypeAbbreviation[(<span class=\"blue\">int</span>) i],\n      <span class=\"teal\">LabelUtils</span>.GetLabelFor( i ),\n      unit_types,\n      valid_unit_symbols );\n  }\n</pre>\n<p>On my system, this generates the following output in the Visual Studio debug output window (copy and paste somewhere or view source to see truncated lines in full):</p>\n<pre>\nHere is a list of the first 26 display unit types with\nofficial Revit API LabelUtils, hard-coded The Building\nCoder abbreviations and valid unit symbols:\n\n    m - Meters - Length, SheetLength and 19 more: m/m\n   cm - Centimeters - Length, SheetLength and 20 more: cm/cm\n   mm - Millimeters - Length, SheetLength and 20 more: mm/mm\n   ft - Decimal feet - Length, SheetLength and 19 more: '/foot_single_quote, LF/lf\n  N/A - Feet and fractional inches - Length, SheetLength and 19 more:\n  N/A - Fractional inches - Length, SheetLength and 20 more:\n   in - Decimal inches - Length, SheetLength and 20 more: \"/inch_double_quote\n   ac - Acres - Area, HVAC_CrossSection: acres/acres\n   ha - Hectares - Area, HVAC_CrossSection: hectare/hectares\n  N/A - Meters and centimeters - Length, SheetLength and 17 more:\n  y^3 - Cubic yards - Volume, Piping_Volume: CY/cy\n ft^2 - Square feet - Area, HVAC_CrossSection and 2 more: SF/sf, ft²/ft^2\n  m^2 - Square meters - Area, HVAC_CrossSection and 2 more: m²/m^2\n ft^3 - Cubic feet - Volume, Piping_Volume and 2 more: CF/cf, ft³/ft^3\n  m^3 - Cubic meters - Volume, Piping_Volume and 2 more: m³/m^3\n  deg - Decimal degrees - Angle, SiteAngle, Rotation: °/degree_symbol\n  N/A - Degrees minutes seconds - Angle, SiteAngle, Rotation:\n  N/A - General - Number:\n  N/A - Fixed - Number, HVAC_Factor, Electrical_Demand_Factor:\n    % - Percentage - Number, Slope and 4 more: %/percent_sign\n in^2 - Square inches - Area, HVAC_CrossSection and 2 more: in²/in^2\n cm^2 - Square centimeters - Area, HVAC_CrossSection and 2 more: cm²/cm^2\n mm^2 - Square millimeters - Area, HVAC_CrossSection and 2 more: mm²/mm^2\n in^3 - Cubic inches - Volume, Piping_Volume and 2 more: in³/in^3\n cm^3 - Cubic centimeters - Volume, Piping_Volume and 2 more: cm³/cm^3\n mm^3 - Cubic millimeters - Volume, Piping_Volume, Section_Modulus: mm³/mm^3\n    l - Liters - Volume, Piping_Volume: L/l\n</pre>\n<p>Quite a nice correspondence, I think.</p>\n<p>Note that the official Revit API LabelUtils abbreviations are localised, as Victor underlines, whereas the hard-coded ones obviosuly are not.</p>\n<p>This discussion once again highlights several aspects:</p>\n<ul>\n<li>The Revit API provides a huge amount of functionality, sometimes more than you expect.</li>\n<li>Some functionality is not always obvious to find.</li>\n<li>The various *Utils classes contain many of these hidden gems, as Rudi likes to point out.</li>\n</ul>\n<p>The updated version described above is published as\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.105.2\">\nrelease 2014.0.105.2</a> and\n\nincludes the release 2014.0.105.1\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/mapping-display-unit-type-to-unit-types.html\">\nDisplay Unit Type to Unit Types mapping</a>.</p>\n<a name=\"2\"></a>\n<h4>Full Moon Celebration</h4>\n<p>I often take the opportunity of spending a couple of hours enjoying infinite space, time, air, fire, earth, and sometimes water by celebrating the full moon with a little fire on a hill nearby with a good view all around.</p>\n<p>I did so last night as well, and it was very nice.</p>\n<p>Here is a farewell picture of the full moon early this morning:</p>\n<center>\n<img alt=\"Morning full moon\" src=\"img/morning_full_moon_2013-11.jpeg\" width=\"300\"/>\n</center>\n</p>"
  },
  {
    "original_filename": "1061_localised_unit_abbrev",
    "header_text": "Full Moon Celebration",
    "local_header_href": "#full-moon-celebration",
    "chunk_text": "<h4>Full Moon Celebration</h4><p>I often take the opportunity of spending a couple of hours enjoying infinite space, time, air, fire, earth, and sometimes water by celebrating the full moon with a little fire on a hill nearby with a good view all around.</p><p>I did so last night as well, and it was very nice.</p><p>Here is a farewell picture of the full moon early this morning:</p><center>\n<img alt=\"Morning full moon\" src=\"img/morning_full_moon_2013-11.jpeg\" width=\"300\"/>\n</center>"
  }
]