[
  {
    "original_filename": "0467_refresh_referencing_sheet",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0467_refresh_referencing_sheet",
    "header_text": "Refresh Referencing Sheet Parameter Display",
    "local_header_href": "#refresh-referencing-sheet-parameter-display",
    "chunk_text": "<h3>Refresh Referencing Sheet Parameter Display</h3><p>Here is question and solution by Piotr Zurek on the problem of the stale data displayed by the \"Referencing Sheet\" parameter value in a section head:\n\n<p><strong>Question:</strong> Is it possible to refresh the \"Referencing Sheet\" parameter value displayed in a section head programmatically? \n\n<p>I have a section viewport inserted in a sheet. \nThe parameter in question shows the no. of the first sheet with a view that shows the section head for that section. \nNow, this section head is hidden and the parameter should change to the name of the next sheet that contains a view with this section's head.\n\n<p>I can't seem to be able to do it through the API.\n\n<p>Manually it can be done by activating the section view, modifying it slightly and then deactivating. \nAnother way is to change the discipline of that view.\n\n<p>In a few words, my plug-in does the following: \n\n<p>It requires that the user selects a single section viewport in a sheet. \nThen it gets the name of that sheet and then it searches for all plan views (ViewPlan) that include a section head for this section. \nIt also checks if this section head is visible and possibly in which sheet this plan view was inserted. \nThen the user can define in which views the section head should be visible (using check boxes next to the view's name).\n\n<p>Usually the user will pick just one view in a certain sheet to force the \"referencing sheet\" parameter to be changed to that sheet.\n\n<p>After that it would be nice if the parameter was updated automatically, but it doesn't seem to be.\n\n<p>The problem seems to be known to Revit people at Autodesk, as you can see from \n\n<a href=\"http://revitclinic.typepad.com/my_weblog/2010/03/sort-order-referencing-sheet-parameters-dependent-views.html\">\nthe last paragraph of this blog post</a>.\n\n<p>You made the following suggestions to resolve this:\n\n<ol>\n<li>Regenerate the document using the Document.Regenerate method.\n<li>Start and commit a transaction using Transaction.Start and Commit.\n<li>Select the section view programmatically and apply some minimal change to it, e.g. moving it by a zero length vector with the Document.Move method.\n<li>Save the document using the Document.Save method.\n</li></li></li></li></ol>\n<p>I tried them all out, but they do not help:\n\n<ol>\n<li>Document.Regenerate – I tried that as the first solution. Didn't do anything.\n<li>All the changes to the model are enclosed between Transaction.Start and Transaction.Commit.\n<li>Tried that, but it didn't work.\n<li>I actually tried saving and reopening the model and it still doesn't work.\n</li></li></li></li></ol>\n<p><strong>Answer:</strong> I managed to find a workaround that works for me. \nIn order to force the update, I change the discipline of my view back and forth:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> UpdateReferencingSheet( \n  <span class=\"teal\">ViewSection</span> selectedViewport )\n{\n  <span class=\"teal\">BuiltInParameter</span> bip \n    = <span class=\"teal\">BuiltInParameter</span>.VIEW_DISCIPLINE;\n \n  <span class=\"teal\">Parameter</span> discipline \n    = selectedViewport.get_Parameter( bip );\n \n  <span class=\"blue\">int</span> disciplineNo = discipline.AsInteger();\n \n  <span class=\"teal\">Document</span> doc = selectedViewport.Document;\n \n  <span class=\"teal\">Transaction</span> transaction = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">TransactionStatus</span>.Started \n    == transaction.Start( <span class=\"maroon\">\"Updating the model\"</span> ) )\n  {\n    <span class=\"blue\">switch</span>( disciplineNo )\n    {\n      <span class=\"blue\">case</span> 1:\n        discipline.Set( 2 );\n        <span class=\"blue\">break</span>;\n \n      <span class=\"blue\">default</span>:\n        discipline.Set( 1 );\n        <span class=\"blue\">break</span>;\n    }\n  }\n  discipline.Set( disciplineNo );\n  transaction.Commit();\n} \n</pre>\n<p>Many thanks to Piotr for this solution!\n\n<p>I implemented a new Building Coder sample command CmdUpdateReferencingSheet to test this method.\n\n<p>Here is \n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_77.zip -->\n<a href=\"zip/bc_11_77.zip\">\nversion 2011.0.77.0</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution with the new command.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]