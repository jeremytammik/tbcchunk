[
  {
    "original_filename": "0550_ribbon_panel_title",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0550_ribbon_panel_title",
    "header_text": "Ribbon Panel Title Conflict",
    "local_header_href": "#ribbon-panel-title-conflict",
    "chunk_text": "<h3>Ribbon Panel Title Conflict</h3><p>Here is another exploration into the inner workings of the Revit ribbon by Rudolf Honke of\n\n<a href=\"http://www.acadgraph.de\">\nacadGraph CADstudio GmbH</a>. \n\nHe says:\n\n<p>If you try to add a new Ribbon panel whose title is already used by another Add-In panel, it will throw an exception.\nYou therefore have to ensure that no other third party panel uses the same text as you do.\n\n<p>The Revit API method GetRibbonPanels will not find panels that are not yet loaded, and there is no fixed order in which plug-in will be loaded.\nTherefore, even if a plug-in is installed after yours, it might still be loaded before and could have 'occupied' your 'own' panel title, which would cause your plug-in to fail if the panel title conflict is not handled appropriately, for instance by renaming it on the fly.\n\n<p>Here is an example in which I loaded RevitLookup twice and renamed the displayed text of the second instance:</p>\n<center>\n<img alt=\"Ribbon panel naming conflict resolution\" src=\"img/rh_panel_title_conflict_1.png\"/>\n</center>\n<p>This may be a real concern, especially if your panel title is something generic such as 'Tools'.\n\n<p>To make sure, you need to iterate through the already loaded panels and adapt your title if necessary before creating it.\n\n<p>This affects the 'Title' property; I'm not sure whether the 'Name' needs to be unique, too.\n\n<p>Here is some sample code to illustrate this;\nin your external application, you can define a global variable:\n\n<pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"teal\">UIControlledApplication</span> m_revit = <span class=\"blue\">null</span>;\n</pre>\n<p>It can be initialised when starting the application:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    m_revit = a;\n \n    <span class=\"green\">/*</span>\n<span class=\"green\">    (do something useful here)</span>\n<span class=\"green\">    */</span>\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Then we can implement the following method to check whether a panel title has already been taken:\n\n<pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"blue\">bool</span> IsPanelTitleUsed(\n    <span class=\"blue\">string</span> panelTitle )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">RibbonPanel</span>&gt; loadedPluginPanels\n      = m_revit.GetRibbonPanels();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">RibbonPanel</span> p <span class=\"blue\">in</span> loadedPluginPanels )\n    {\n      <span class=\"blue\">if</span>( p.Title.Equals( panelTitle ) )\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n</pre>\n<p>If we decide to change our panel title, for example by appending an integer counter suffix, we obviously have to continue checking whether it is available until we find a title that has not been taken yet.\n\n<p>The cause of this exception when trying to create RibbonPanels of the same name is visible in the StackTrace:\n\n<ul>\n<li>Autodesk.Revit.UI.UIApplication.verifyPanelNameExclusive(Tab tab, String newPanelName)\n<li>Autodesk.Revit.UI.UIApplication.CreateRibbonPanel(Tab tab, String panelName)\n<li>Autodesk.Revit.UI.UIApplication.CreateRibbonPanel(String panelName)\n<li>Autodesk.Revit.UI.UIControlledApplication.CreateRibbonPanel(String panelName)\n</li></li></li></li></ul>\n<p>After I called the CreateRibbonPanel method, the \u001cTitle\u001d property is not initialized:\n\n<center>\n<img alt=\"Ribbon panel name and null title\" src=\"img/rh_panel_title_conflict_2.png\"/>\n</center>\n<p>The title value stays \u001cnull\u001d, even if you think that you see it in the UI.\n\n<p>So <b>the name is your title</b> except you assign a different one:\n\n<pre class=\"code\">\nrvtRibbonPanel.Title = \"Dummy\";\n</pre>\n<center>\n<img alt=\"Ribbon panel name and title differ\" src=\"img/rh_panel_title_conflict_3.png\"/>\n</center>\n<center>\n<img alt=\"Ribbon panel name and title differ\" src=\"img/rh_panel_title_conflict_4.png\"/>\n</center>\n<p>Having different names, titles <b>can</b> consist of the same string:</p>\n<center>\n<img alt=\"Ribbon panels with identical names\" src=\"img/rh_panel_title_conflict_5.png\"/>\n</center>\n<p>Using UISpy, by the way, shows that the Revit AutomationElements can be retrieved by name (see AutomationId), not by visible text.\nHere are the properties of the left panel in the image above:</p>\n<center>\n<img alt=\"Ribbon panel properties in UISpy\" src=\"img/rh_panel_title_conflict_6.png\" width=\"400\"/>\n</center>\n<p>Here are the right-hand panel properties:</p>\n<center>\n<img alt=\"Ribbon panel properties in UISpy\" src=\"img/rh_panel_title_conflict_7.png\" width=\"400\"/>\n</center>\n<p>For both of these, the Name property is an empty string, while the AutomationId property still distinguishes them as \"CustomCtrl_%ADD_INS_TAB%RevitLookup\" versus \"CustomCtrl_%ADD_INS_TAB%RevitLookup 2\".\n\n<p>Many thanks to Rudolf for this important warning and interesting inside-the-ribbon information.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]