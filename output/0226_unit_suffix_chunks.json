[
  {
    "original_filename": "0226_unit_suffix",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0226_unit_suffix",
    "header_text": "Unit Suffix and the ProjectUnit SDK Sample",
    "local_header_href": "#unit-suffix-and-the-projectunit-sdk-sample",
    "chunk_text": "<h3>Unit Suffix and the ProjectUnit SDK Sample</h3><p>We delved into various aspects of units in several previous posts:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/units.html\">Basics on units</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/formatting-units-strings.html\">Formatting unit strings</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/unit-types-and-format-options.html\">Unit types and format options</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/unit-conversion.html\">Unit conversion</a>.\n</li></li></li></li></ul>\n<p>And still the topic is not exhausted. Here is a new point to consider:\n\n<p><strong>Question:</strong> Is there a way to retrieve the unit for a parameter?\nI can read a parameter's value and its Display Unit Type but not the unit's symbol, the display string suffix used to represent the unit in the user interface.\nFor example, for a length parameter I would like to retrieve FT or m for the unit symbol, or SF for an area parameter.\nI can read the parameter value and unit suffix combined by using AsValueString, but what about retrieving the unit symbol separately.\nIf it is possible to get the parameter unit symbol, could you send me a short code snippet about it?\n\n<p>If the Revit API does not provide parameter value unit, then what is the use of FormatOption.Unitsymbol?\nFor example, UST_FT_SUP_2? Can you give me an application of UST symbols?\n\n<p>Also, one way I can think of putting a unit next to a parameter value in the user interface is to write a long switch\n\nstatement and determine the name of the parameter and its DUT.\nFor example, if the parameter name is Area and its DUT is DUT_SQUARE_FEET then unit is SF, etc.\nAm I right?\n\n<p><strong>Answer:</strong> Let us dive into the unit handling and the classes and enumerations used for this a little bit deeper before returning to the question.\n\n<p>The unit suffix you mention is a user defined setting, so it is actually not directly defined by the parameter itself.\nThe parameter is\n\ndefined as having a certain unit type such as length or area, and it is completely up to the user to define how values of\n\nthis type are represented in the user interface.\n\n<p>The UnitType enumeration lists 81 different available unit types, the simplest of which are UT_Length and UT_Area.\n\n<p>The unit types are further grouped by discipline into unit groups, represented by the UnitGroup enumeration with the\n\nfollowing members:\n\n<ul>\n<li>UG_Common\n<li>UG_Electrical\n<li>UG_HVAC\n<li>UG_Piping\n<li>UG_Structural\n</li></li></li></li></li></ul>\n<p>Length and area belong to the common group, whereas more specific unit types such as force or moment are classified as\n\naccording to discipline, e.g., structural.\n\n<p>How each unit is represented in the user interface is defined by the ProjectUnit and FormatOptions classes.\n\n<p>The description of the ProjectUnit class in the Revit API help file includes an example of accessing and listing this\n\ninformation.\n\n<p>The FormatOptions class contains the unit information of the current user settings in the project.\n\nIt members include\n\n<ul>\n<li>Group: the unit's type group.\n<li>Name: the unit's type name.\n<li>Rounding: the unit's type rounding and accuracy.\n<li>Units: the unit type itself.\n<li>Unitsymbol: the unit's type symbol.\n</li></li></li></li></li></ul>\n<p>We mentioned this class once in the past in the following blog post:\n\nhttp://thebuildingcoder.typepad.com/blog/2009/01/unit-types-and-format-options.html\n\n<p>A full example of managing the user-defined unit settings is provided by the SDK sample ProjectUnit. It demonstrates how to\n\nread and set units and format options. It defines an external command which displays a dialogue box listing all the units in\n\nthe current project and displaying their format information, including the decimal separator and slope type.\n\n<center>\n<img alt=\"Revit SDK sample ProjectUnit\" src=\"img/project_unit.png\"/>\n</center>\n<p>This functionality includes\n\n<ul>\n<li>List all units in current project and display each unit's format information.\n<li>Display the current project units decimal symbol type of set it to comma or dot.\n<li>Display the current project units slope type and set it to Rise or Angle.\n</li></li></li></ul>\n<p>The units listing uses the unit group classification by discipline, so a list all the available unit groups or disciplines is\n\ndisplayed and used to classify the units. When one unit group is selected in the list box, the corresponding project units\n\nand their name, format information, unit suffix type, and rounding is displayed.\n\n<ul>\n<li>The name is the user interface display string such as Length or Area.\n<li>The format information defines the display unit type such as DUT_KIP_FEET_PER_DEGREE_PER_FOOT, represented by the\n\nDisplayUnitType enumeration. This basically represents a numerical conversion factor from the Revit internal database units\n\nto the number you see in the user interface units.\n<li>The unit suffix type specifies a string suffix appended to the value to communicate what units are being displayed.\n\nPossible values are defined by the UnitSymbolType enumeration, such as UST_NONE for length or UST_M_SUP_2 for area.\n<li>The rounding or accuracy is a number like 1 or 0.2.\n</li></li></li></li></ul>\n<p>The unit's symbol that you mention in your question might correspond either to the format information or the unit suffix.\nThere is a considerable overlap between these two enumerations.\n\n<p>The parameter definition has a ParameterType property, which returns the user visible interpretation of the parameter data.\nThe Revit API help file provides a short code example of using this property.\nIt returns a ParameterType enumeration value, and many of these values are associated with a\n\nunit type.\nThe parameter definition also has a ParameterGroup property returning the group ID of the parameter definition, which is\n\nrepresented by the BuiltInParameterGroup enumeration.\nThat can also give a hint on what units are appropriate.\n\n<p>To return to your original question,\nyes, there is a property on the parameter class itself for the DisplayUnitType as well as its definition.\nSo you can simply use Parameter.DisplayUnitType to determine the DUT, just as you say.\nYes, I do not see any access in the API to retrieve the display string of a DUT.\nThese strings might be language dependent, and no API method has been provided to retrieve them for the localised product data.\nYou will of course obtain the appropriate unit suffix by calling AsValueString.\n\n<p>For an application of the UnitSymbolType enumeration values, I can imagine that they might in fact be useful for what you\n\nare trying to achieve, since each enumeration name does actually describe the unit suffix. For instance:\n\n<ul>\n<li>UST_M represents m.\n<li>UST_M_CARET_2 represents m^2.\n<li>UST_M_SUP_2 represents m<sup>2</sup>.\n</li></li></li></ul>\n<p>So you could possibly reduce your switch statement to a shorter algorithm putting together your own unit suffix string based on\n\ninterpreting the names of these enumeration values.\n\n<p>Alternatively, you could write a full switch statement such as you describe. It could be based on either the DUT or on the\n\nUST, since there is significant overlap between the two.\nThis depends on what you actually want to display in the list.\nAs you can see above, the default setting on my system for a length is DUT_Millimetres and UST_None, which are different, so depending on which of the two I base the unit symbol display on, I would get a different result.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]