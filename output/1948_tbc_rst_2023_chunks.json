[
  {
    "original_filename": "1948_tbc_rst_2023",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- slack https://autodesk.slack.com/archives/C0SR6NAP8/p1650388044451449\n- comment https://thebuildingcoder.typepad.com/blog/2022/04/whats-new-in-the-revit-2023-api.html#comment-5838192874\n- youtube The “Revit Structure Analytical Model API beta Webinar” has been posted to You Tube.\n  [Revit 2023 Structural Analytical Model API webinar recording](https://youtu.be/jfUIVGNqlFU)\n\nBoris Shafiro  17:23\nAPI Studio Recording (2022-04-19):\nhttps://share.autodesk.com/:v:/r/sites/BID/BID%20Documents/Building%20Design%20Products/Guilds/API/API%20Studio%20Recordings/2022/2022-04-19-API-Studio-Recording.mp4?csf=1&web=1&e=2THEGX\nAgenda: New FamilyInstance creation API proposal. Oleg Sheydvasser, Ivan Dobrianov.\n\ntwitter:\n\nResources for dealing with the new Revit 2023 Structural API, migrating The Building Coder samples, not migrating the derived analytical model or trying to update obsolete structural #RevitAPI code @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/rvt2023structureapi\n\nMigrating The Building Coder samples, I encountered the same problems as others trying to update obsolete structural API code, so let's take a look at some resources assisting us in that area\n&ndash; Not migrating the derived analytical model\n&ndash; Revit 2023 Structural API...\n\nlinkedin:\n\nResources for dealing with the new Revit 2023 Structural API, migrating The Building Coder samples, not migrating the derived analytical model or trying to update obsolete structural #RevitAPI code\n\nhttps://autode.sk/rvt2023structureapi\n\nMigrating The Building Coder samples, I encountered the same problems as others trying to update obsolete structural API code, so let's take a look at some resources assisting us in that area:\n\n- Migrating The Building Coder samples\n- Not migrating the derived analytical model\n- Revit 2023 Structural API...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1948_tbc_rst_2023",
    "header_text": "TBC Samples 2023 and the New Structural API",
    "local_header_href": "#tbc-samples-2023-and-the-new-structural-api",
    "chunk_text": "### TBC Samples 2023 and the New Structural API\n\nMigrating The Building Coder samples, I encountered the same problems as others trying to update obsolete structural API code, so let's take a look at some resources assisting us in that area:\n\n- [Migrating The Building Coder samples](#2)\n- [Not migrating the derived analytical model](#3)\n- [Revit 2023 Structural API](#4)\n- [Addendum &ndash; `GetAnalyticalModel` workaround](#5)"
  },
  {
    "original_filename": "1948_tbc_rst_2023",
    "header_text": "Migrating The Building Coder Samples",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Migrating The Building Coder Samples\n\nI migrated [The Building Coder Samples](https://github.com/jeremytammik/the_building_coder_samples) last week, creating\n[release 2023.1.152.0](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2023.1.152.0).\n\nExcept for the deprecation of the derived analytical model that we discuss below, it was straightforward with hardly any changes at all except for updating the Revit API .NET assembly DLL references.\n\nAfter that step, [8 errors and 5 warnings](zip/tbc_samples_2023_migr_01.txt) remain.\n\nWe can easily deal with the warning about the `ParameterFilterRuleFactory` `CreateEqualsRule` in the module CmdCollectorPerformance.cs:\n\n- Warning CS0618 <i>ParameterFilterRuleFactory.CreateEqualsRule(ElementId, string, bool)</i> is obsolete:\n  This method is deprecated in Revit 2023 and may be removed in a future version of Revit.\n  Please use the constructor without the `caseSensitive` argument instead.\n  \nThe Boolean argument was not working as expected in previous versions and can simply be removed."
  },
  {
    "original_filename": "1948_tbc_rst_2023",
    "header_text": "Not Migrating the Derived Analytical Model",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Not Migrating the Derived Analytical Model\n\nAfter removing the Boolean argument to `CreateEqualsRule`, the\nremaining [8 errors and 4 warnings](zip/tbc_samples_2023_migr_01.txt) are\nall caused by the analytical model changes, above all the removal of the `GetAnalyticalModel` method.\n\nThe existing code cannot easily be migrated to the new structural API, as I explained in the answer\nto [Ozan Aksu's comment](https://thebuildingcoder.typepad.com/blog/2022/04/whats-new-in-the-revit-2023-api.html#comment-5838111563):\n\n**Question:** Can't find `AnalyticalToPhysicalRelationManager`.\nWhere is it?\nI was using `GetAnalyticalModel`.\nNow I am stuck.\n\n**Answer:** Yes, indeed, some hard and sudden changes have been made to the Structural API.\n\nPlease refer to the online help page\non [The Contextual Analytical Model in the Revit API](https://help.autodesk.com/view/RVT/2023/ENU/?guid=GUID-A1157199-4E27-41F9-BF45-53A5CD79E9A1).\nIt includes some sample code as well.\n\nThe sample describing how to access the analytical element for a given physical element is in the section named <i>Gets the associated analytical element for a physical one</i>.\n\nThe bottom line is that the relation between physical element and analytical element can now be edited &ndash; in the old approach, this was not possible &ndash; and the class which handles these relations is called `AnalyticalToPhysicalAssociationManager`.\n\nI asked the development team myself how to migrate a sample using the `GetAnalyticalModel` method.\nThey reply:\n\nThe following code makes no sense at all any longer in Revit 2023 and needs to be completely rewritten:\n\n<pre class=\"code\">\n  var am = wall.GetAnalyticalModel();\n\n  foreach (var ct in CurveTypes)\n  {\n    var curves = am.GetCurves(ct);\n    var n = curves.Count;\n\n    Debug.Print(\"{0} {1} curve{2}.\",\n      n, ct, Util.PluralSuffix(n));\n\n    foreach (var curve in curves)\n      creator.CreateModelCurve(\n        curve.CreateTransformed(T));\n  }\n</pre>\n\nThere is no meaningful way to migrate it, since the basic concepts changed.\nYes, most of the code must be rewritten.\n\nMy simplistic solution was to remove the two offending external commands `CmdAnalyticalModelGeom` and `CmdNewLineLoad`.\n\nAs always with the Revit API, it will help to learn and understand the new concepts from the end user point of view first, before trying to address the programming side of things."
  },
  {
    "original_filename": "1948_tbc_rst_2023",
    "header_text": "Revit 2023 Structural API",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Revit 2023 Structural API\n\nSo, let's dive deeper into the Revit 2023 Structural API.\n\nThe explanation\nof [the contextual analytical model in the Revit API](https://help.autodesk.com/view/RVT/2023/ENU/?guid=GUID-A1157199-4E27-41F9-BF45-53A5CD79E9A1) contains\nall the up-to-date information and provides a good starting point.\n \nThe Revit Developer's Guide description of\nthe [Analytical Model](https://help.autodesk.com/view/RVT/2023/ENU/?guid=Revit_API_Revit_API_Developers_Guide_Discipline_Specific_Functionality_Structural_Engineering_Analytical_Model_html) is\nstill work-in-progress and will be updated soon.\n\nFinally,\nthe 47-minute [Revit 2023 Structural Analytical Model API webinar recording](https://youtu.be/jfUIVGNqlFU) created\nduring the pre-release phase has now been published and explains all the new concepts in full depth and detail.\n\n<center>\n<img src=\"img/rst_2023_objectives.png\" alt=\"Revit 2023 Structural API objectives\" title=\"Revit 2023 Structural API objectives\" width=\"600\"/> <!-- 1200 -->\n</center>"
  },
  {
    "original_filename": "1948_tbc_rst_2023",
    "header_text": "Addendum &ndash; GetAnalyticalModel Workaround",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Addendum &ndash; GetAnalyticalModel Workaround\n\nErik Falck Jørgensen of [DTU, the Technical University of Denmark](https://www.dtu.dk), provided\na `GetAnalyticalModel` workaround on LinkedIn, saying:\n\n> I have attached a snippet from a `cs` file...\n\n> The essence is that I can `GetAnalyticalModel()` in slightly the same way :-)\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;ElementId&nbsp;<span style=\"color:#74531f;\">GetAnalyticalElementId</span>(dynElement&nbsp;<span style=\"color:#1f377f;\">element</span>)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;_document&nbsp;=&nbsp;iDocument.Current.WrappedType;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Gets&nbsp;the&nbsp;AnalyticalToPhysicalAssociationManager&nbsp;for&nbsp;this&nbsp;document</span>\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;<span style=\"color:#1f377f;\">analyticalToPhysicalManager</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;AnalyticalToPhysicalAssociationManager\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetAnalyticalToPhysicalAssociationManager(_document);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(analyticalToPhysicalManager&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;System.Exception(OrchidBase.InvalidType);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;ElementId&nbsp;<span style=\"color:#1f377f;\">_elementId</span>&nbsp;=&nbsp;GetDynamic(element).Id;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;analyticalToPhysicalManager.GetAssociatedElementId(_elementId);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;dynElement&nbsp;<span style=\"color:#74531f;\">GetAnalytical</span>(dynElement&nbsp;<span style=\"color:#1f377f;\">element</span>)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;GetAnalyticalElementId(element).ToDynamoType();\n&nbsp;&nbsp;}\n</pre>\n\nMany thanks to Erik for this suggestion!\n\nRemoving the Dynamo wrappers, I guess the gist of it is something like this:\n\n<pre class=\"code\">\n  ///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;the&nbsp;associated&nbsp;analytical&nbsp;element&nbsp;id&nbsp;</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;for&nbsp;the&nbsp;given&nbsp;element</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  ElementId&nbsp;<span style=\"color:#74531f;\">GetAnalyticalElementId</span>(Element&nbsp;<span style=\"color:#1f377f;\">e</span>)\n  {\n  &nbsp;&nbsp;Document&nbsp;<span style=\"color:#1f377f;\">doc</span>&nbsp;=&nbsp;e.Document;\n   \n  &nbsp;&nbsp;AnalyticalToPhysicalAssociationManager&nbsp;<span style=\"color:#1f377f;\">m</span>&nbsp;\n  &nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;AnalyticalToPhysicalAssociationManager\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetAnalyticalToPhysicalAssociationManager(\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc);\n   \n  &nbsp;&nbsp;<span style=\"color:#8f08c4;\">if</span>&nbsp;(<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;m)\n  &nbsp;&nbsp;{\n  &nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;System.ArgumentException(\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;No&nbsp;AnalyticalToPhysicalAssociationManager&nbsp;found&quot;</span>);\n  &nbsp;&nbsp;}\n   \n  &nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;m.GetAssociatedElementId(e.Id);\n  }\n</pre>\n\nErik adds:\n\n> the \"translation\" from dynamo implementation to pure C# is correct :-)\n\n> ... by the way the `GetDynamic(element)` has a dynamic cast built-in from a Dynamo element to a Revit element, and a check that it can hold an analytical element :-)"
  }
]