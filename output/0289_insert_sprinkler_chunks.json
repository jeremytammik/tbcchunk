[
  {
    "original_filename": "0289_insert_sprinkler",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0289_insert_sprinkler",
    "header_text": "Insert Face-Hosted Sprinkler",
    "local_header_href": "#insert-face-hosted-sprinkler",
    "chunk_text": "<h3>Insert Face-Hosted Sprinkler</h3><p>In between the series of background information from Scott's Autodesk University presentation on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/analyse-building-geometry.html\">\nanalysing building geometry</a>,\n\nlet's have a look at another example that combines a little bit of geometric analysis with other issues.\nThis example is from a case handled by Joe Ye and exploring how to insert a face-hosted sprinkler into the model.\nA family instance is used to represent the sprinkler, so we presumably need to make use of one of the overloads of the NewFamilyInstance method. \nThe question is which one and how to supply the appropriate arguments.\nWe have looked at a number of related issues in the past:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-column.html\">\nInserting a column</a>.</li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-beam.html\">\nInserting a beam</a>.</li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/creating-a-slanted-column.html\">\nCreating a slanted column</a>.</li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/creating-a-curved-beam.html\">\nCreating a curved beam</a>.</li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/electrical-settings-and-lighting-fixtures.html#2\">\nCreating hosted family instances for lighting fixtures</a>.</li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/nested-family.html\">\nCreating nested families</a>.</li>\n</ul>\n<p>The first two show how to check whether the required family is loaded and optionally load it if not.\nThe third discusses where to look in the developer guide for more information on the overloads of the NewFamilyInstance method. \nThe fifth has a certain similarity to this case, but still requires a different solution.\nWe can make use of all that information to tackle this current task as well, which requires yet a few more tricky details.\n\n<p><strong>Question:</strong> I am having a problem inserting a face-hosted sprinkler symbol into my model. \nI've been able to insert other family instances without problem, but this one isn't working for me. \n\n<p>I tried hosting the sprinkler on a ceiling object and on a face of the ceiling. \nWhen trying to host the sprinkler on the ceiling, I tried creating the instance both with and without the ceiling level. \nEvery time it creates the sprinkler it places it at an elevation of zero even though my ceiling and insertion point is over 56'. \nI also tried moving the elevation of the sprinkler after insertion but this did nothing. \nStrangely, the XY location is correct. \n\n<p>I also tried to use a face of the ceiling to host the sprinkler.\nThis failed completely with an exception. \nI tried using the face, the same insertion point, and a reference direction vector of (0, 0, -1) since I assume the sprinkler would point down the Z axis. \n\n<p>As an added note, I was unable to set the \"Elevation\" parameter of the Sprinkler after insertion. \nIt says that the operation cannot be done due to the state of the element. \n\n<p><strong>Answer:</strong> To address the last note first, you mentioned that you cannot change the elevation parameter. \nYes, this is as designed, because this parameter is read-only and so cannot be modified. \n\n<p>Regarding the family instance creation, you need to use a specific overload of the NewFamilyInstance method to create new instance that is attached to the host face, namely:\n\n<pre>\nFamilyInstance NewFamilyInstance(\n  Face face,\n  XYZ location,\n  XYZ referenceDirection,\n  FamilySymbol symbol\n)\n</pre>\n<p>The face-hosted sprinkler requires a sketch plane, and all the other overloads of the NewFamilyInstance method cannot retrieve it together with the correct position and host element, so they end up creating an  invalid instance without a correct sketch plane.\n\n<p>To place a sprinkler on the bottom of a ceiling element, we need to locate the ceiling's bottom face and create the sprinkler family instance on that face at a point located in it. \nIn addition, the face that we place the sprinkler on must be associated with a reference, or the placement will not work correctly.\n\n<p>I used the sample code implemented by Joe to create a new Building Coder external command CmdNewSprinkler demonstrating this.\n\n<p>In order to determine an insertion point for the sprinkler on the bottom face of the ceiling, it makes use of the following PointOnFace helper method. \nIt returns an arbitrary point on a planar face, namely the midpoint of the first mesh triangle encountered:\n\n<pre class=\"code\">\n<span class=\"teal\">XYZ</span> PointOnFace( <span class=\"teal\">PlanarFace</span> face )\n{\n  <span class=\"teal\">XYZ</span> p = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 0 );\n  <span class=\"teal\">Mesh</span> mesh = face.Triangulate();\n \n  <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; mesh.NumTriangles; ++i )\n  {\n    <span class=\"teal\">MeshTriangle</span> triangle = mesh.get_Triangle( i );\n    p += triangle.get_Vertex( 0 );\n    p += triangle.get_Vertex( 1 );\n    p += triangle.get_Vertex( 2 );\n    p *= 0.3333333333333333;\n    <span class=\"blue\">break</span>;\n  }\n  <span class=\"blue\">return</span> p;\n}\n</pre>\n<p>The Execute method of the CmdNewSprinkler command performs the following tasks:\n\n<ul>\n<li>Check whether the required sprinkler family is loaded and load it if not.\n<li>Retrieve an arbitrary symbol from the sprinkler family, in this case, the first one encountered.\n<li>Prompt the user to select a ceiling element to host the sprinkler and ensure that a valid selection was made.\n<li>Retrieve the ceiling geometry, its solid, and determine the bottom face.\n<li>Use our PointOnFace helper method to determine an arbitrary insertion point on the ceiling bottom  face.\n<li>Call the NewFamilyInstance method.\n</li></li></li></li></li></li></ul>\n<p>The trickiest step is the solid retrieval and the determination of the bottom face.\nWhen retrieving the solid, we need to ensure that the options' ComputeReferences property is set, or the solid faces will not be associated with the required references.\n\n<p>In all previous Building Coder examples, we did not assign true to ComputeReferences, but left it in its default state of false, which presumably improves performance.\nIt would be interesting to test this, actually, and benchmark the difference that this option setting might have.\nThe setting is required in this case, because the NewFamilyInstance method needs the face reference to create the family instance and associate the sprinkler with the ceiling face.\n\n<p>To find the ceiling's bottom face, we assume that it is horizontal and flat, i.e. planar, so we can use its normal vector pointing straight down to identify it.\n\n<p>Here is the mainline code of the Execute method implementing this:\n\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n<span class=\"green\">// retrieve the sprinkler family symbol:</span>\n \n<span class=\"teal\">Filter</span> filter = app.Create.Filter.NewFamilyFilter(\n  _name );\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt; families = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt;();\ndoc.get_Elements( filter, families );\n<span class=\"teal\">Family</span> family = <span class=\"blue\">null</span>;\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">RvtElement</span> e <span class=\"blue\">in</span> families )\n{\n  family = e <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != family )\n    <span class=\"blue\">break</span>;\n}\n \n<span class=\"blue\">if</span>( <span class=\"blue\">null</span> == family )\n{\n  <span class=\"blue\">if</span>( !doc.LoadFamily( _filename, <span class=\"blue\">out</span> family ) )\n  {\n    message = <span class=\"maroon\">\"Unable to load '\"</span> + _filename + <span class=\"maroon\">\"'.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n  }\n}\n \n<span class=\"teal\">FamilySymbol</span> sprinklerSymbol = <span class=\"blue\">null</span>;\n<span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> fs <span class=\"blue\">in</span> family.Symbols )\n{\n  sprinklerSymbol = fs;\n  <span class=\"blue\">break</span>;\n}\n \n<span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != sprinklerSymbol, \n  <span class=\"maroon\">\"expected at least one sprinkler symbol\"</span>\n  + <span class=\"maroon\">\" to be defined in family\"</span> );\n \n<span class=\"green\">// pick the host ceiling:</span>\n \n<span class=\"teal\">RvtElement</span> ceiling = <span class=\"teal\">Util</span>.SelectSingleElement( \n  doc, <span class=\"maroon\">\"ceiling to host sprinkler\"</span> );\n \n<span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ceiling\n  || !ceiling.Category.Id.Value.Equals( \n    (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_Ceilings ) )\n{\n  message = <span class=\"maroon\">\"No ceiling selected.\"</span>;\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n}\n \n<span class=\"green\">// retrieve the bottom face of the ceiling:</span>\n \n<span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\nopt.ComputeReferences = <span class=\"blue\">true</span>;\n<span class=\"teal\">GeoElement</span> geo = ceiling.get_Geometry( opt );\n \n<span class=\"teal\">PlanarFace</span> ceilingBottom = <span class=\"blue\">null</span>;\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo.Objects )\n{\n  <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n    {\n      <span class=\"teal\">PlanarFace</span> pf = face <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != pf )\n      {\n        <span class=\"teal\">XYZ</span> normal = pf.Normal.Normalized;\n \n        <span class=\"blue\">if</span>( <span class=\"teal\">Util</span>.IsVertical( normal ) \n          &amp;&amp; 0.0 &gt; normal.Z )\n        {\n          ceilingBottom = pf;\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n  }\n}\n<span class=\"blue\">if</span>( <span class=\"blue\">null</span> != ceilingBottom )\n{\n  <span class=\"teal\">XYZ</span> p = PointOnFace( ceilingBottom );\n \n  <span class=\"green\">// create the sprinkler family instance</span>\n \n  <span class=\"teal\">FamilyInstance</span> fi = doc.Create.NewFamilyInstance( \n    ceilingBottom, p, <span class=\"teal\">XYZ</span>.BasisX, sprinklerSymbol );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n</pre>\n<p>To test the new command, we create a simple model with four walls and a ceiling:</p>\n<center>\n<img alt=\"Ceiling element to host sprinkler\" src=\"img/sprinkler_ceiling.png\"/>\n</center>\n<p>Running the command and selecting the ceiling element inserts the desired sprinkler:</p>\n<center>\n<img alt=\"Newly created sprinkler family instance\" src=\"img/sprinkler_instance.png\"/>\n</center>\n<p>Here is\n\n<a href=\"zip/bc11059.zip\">\nversion 1.1.0.59</a>\n\nof the complete Building Coder sample source code and Visual Studio solution including the new command.</p>\n<p>Many thanks to Joe for handling this case and creating the initial implementation!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]