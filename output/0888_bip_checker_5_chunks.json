[
  {
    "original_filename": "0888_bip_checker_5",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0888_bip_checker_5",
    "header_text": "BipChecker Update",
    "local_header_href": "#bipchecker-update",
    "chunk_text": "<h3>BipChecker Update</h3><p>BipChecker is a tool that I would recommend every Revit developer to install, just like RevitLookup.\nIt simply lists the values of all parameter data stored on a selected element.</p><p>Similar access is also offered within RevitLookup by the option Parameters &gt; Built-in Enums Snoop...\nBipChecker offers much more functionality, though, and is a really powerful Revit database exploration and debugging tool.</p><p>The built-in parameter checker has been part of the ADN sample labs for ages now, and the original version is still provided in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/xtra-adn-revit-2013-api-training-labs.html\">\nXtra materials</a>.\n\nThe time has come to finally remove it from there, though.\n\n<p>First, since I find it useful on its own, I extracted it into a separate add-in and baptised it\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/unofficial-parameters-and-bipchecker.html\">\nBipChecker</a>.</p>\n<p>Secondly,\n\n<a href=\"http://www.facebook.com/profile.php?id=100003616852588\">\nVictor Chekalin</a> enhanced\n\nit by implementing grouping of the long list by parameter group, data type, built-in versus standard Parameters collection, read-write, or none.</p>\n<p>This tool always suffered one serious problem, though, due to repetitions in the definitions and assignment of some of the built-in parameter enumeration integer values.</p>\n<p>Victor now tracked down and fixed that issue as well.</p>\n<p>Here is his explanation:</p>\n<p>Now I work closely with Materials and use our BiP checker.\nI noticed two strange things when I check material parameters using BiP Checker.\nThe first one, the material cost stored as BuiltInParameter.DOOR_COST.\nThe second one – some parameters appear twice or even triple:</p>\n<center>\n<img alt=\"BipChecker duplicate and missing values\" src=\"img/BipChecker05_problem.png\" width=\"400\"/>\n</center>\n<p>I researched this and found the reason.</p>\n<p>To iterate all built-in parameters, we used the Enum.GetValues method:</p>\n<pre class=\"code\">\n  var allParameters = Enum.GetValues(\n    typeof ( BuiltInParameter ) );\n</pre>\n<p>This makes use of the integer values of the Enum.\nIf different Enum values have the same integer value the GetValues method doesn’t work properly.\n\n<p>For example, BuiltInParameter.ALL_MODEL_COST and BuiltInParameter.DOOR_COST both have the integer value -1001205:</p>\n<ul>\n<li>DOOR_FIRE_RATING = -1001206\n<li>ALL_MODEL_COST = -1001205\n<li>DOOR_COST = -1001205\n<li>ALL_MODEL_MARK = -1001203\n</li></li></li></li></ul>\n<p>In this case, BiPChecker shows DOOR_COST twice and doesn’t show ALL_MODEL_COST parameter at all.\n\n\n<a name=\"2\"></a>\n<h4>The Solution</h4>\n<p>Use Enum.GetValues and Enum.TryParse instead of Enum.GetValues to get the BuiltInParameter value, and use the BuiltInParameter name from Enum.GetValues.\nThis requires the .NET framework 4.\n\n<p>Now it looks much better:</p>\n<center>\n<img alt=\"BipChecker corrected values\" src=\"img/BipChecker05_solution.png\" width=\"400\"/>\n</center>\n<p>Here is\n\n<a href=\"zip/BipChecker05.zip\">BipChecker05.zip</a> containing\n\nthe full source code, Visual Studio solution and add-in manifest of the updated BipChecker version 2013.0.5.0.</p>\n<p>С уважением from Чекалин Виктор.</p>\n<p>Many thanks to Victor for his research and important enhancement!</p>\n<p>To wrap it up, here is a snapshot listing all built-in parameters on a wall with no grouping enabled, so that the results can be sorted across all groups by any desired criterion:</p>\n<center>\n<img alt=\"BipChecker on my old XP machine running in Parallels on the Mac\" src=\"img/BipChecker05_jt_xp.png\" width=\"400\"/>\n</center>\n</p></p></p></p>"
  },
  {
    "original_filename": "0888_bip_checker_5",
    "header_text": "The Solution",
    "local_header_href": "#the-solution",
    "chunk_text": "<h4>The Solution</h4><p>Use Enum.GetValues and Enum.TryParse instead of Enum.GetValues to get the BuiltInParameter value, and use the BuiltInParameter name from Enum.GetValues.\nThis requires the .NET framework 4.\n\n<p>Now it looks much better:</p>\n<center>\n<img alt=\"BipChecker corrected values\" src=\"img/BipChecker05_solution.png\" width=\"400\"/>\n</center>\n<p>Here is\n\n<a href=\"zip/BipChecker05.zip\">BipChecker05.zip</a> containing\n\nthe full source code, Visual Studio solution and add-in manifest of the updated BipChecker version 2013.0.5.0.</p>\n<p>С уважением from Чекалин Виктор.</p>\n<p>Many thanks to Victor for his research and important enhancement!</p>\n<p>To wrap it up, here is a snapshot listing all built-in parameters on a wall with no grouping enabled, so that the results can be sorted across all groups by any desired criterion:</p>\n<center>\n<img alt=\"BipChecker on my old XP machine running in Parallels on the Mac\" src=\"img/BipChecker05_jt_xp.png\" width=\"400\"/>\n</center>\n</p>"
  }
]