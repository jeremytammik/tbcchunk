[
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Curves",
    "local_header_href": "#curves",
    "chunk_text": "<h3>Curves</h3><p>This is part 4 of Scott Conover's AU 2009 class on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/analyse-building-geometry.html\">\nanalysing building geometry</a>.\n\n<h4>Curve Types</h4>\n<p>Revit uses a variety of curve types to represent curve geometry in a document. \nThe curve types and corresponding Revit API classes include:\n\n<ul>\n<li>Bounded line – Line\n<li>Unbound line – Line\n<li>Arc – Arc\n<li>Circle – Arc\n<li>Elliptical arc – Ellipse\n<li>Ellipse – Ellipse\n<li>NURBS – NurbSpline\n<li>Hermite – HermiteSpline\n</li></li></li></li></li></li></li></li></ul>\n<p>Here are the definitions and some notes on each of these curve types:\n\n<ul>\n<li>Bounded line: \nA line segment defined by its endpoints. \nObtain endpoints from Curve.get_Endpoint().\n\n<li>Unbounded line: An infinite line defined by a location and direction. \nIdentify these with Curve.IsBound.\nEvaluate point and tangent vector at raw parameter zero to find the input parameters for the equation of the line.\n\n<li>Arc:\nA bound circular arc.\nBegin and end at a certain angle. \nThese angles can be obtained by the raw parameter values at each end of the arc.\n\n<li>Circle:\nAn unbound circle.\nIdentify with Curve.IsBound.\nUse raw parameter for evaluation (from 0 to 2π).\n\n<li>Elliptical arc:\nA bound elliptical segment.\n\n<li>Ellipse:\nAn unbound ellipse.\nIdentify with Curve.IsBound. \nUse raw parameter for evaluation (from 0 to 2π).\n\n<li>Nurbs spline:\nA non-uniform rational B-spline.\nUsed for splines sketched in various Revit tools, plus imported geometry.\n\n<li>Hermite spline:\nA spline interpolate between a set of points.\nUsed for tools like Curve by Points and flexible ducts/pipes, plus imported geometry.\n</li></li></li></li></li></li></li></li></ul>\n<h4>Mathematical representation</h4>\n<p>Mathematical representations of all of the Revit curve types are given in Appendix A of Scott's\n\n<a href=\"\">handout document</a>, \n\nand we include them here as well for easy online access.\nThis section describes the curve types encountered in Revit geometry, their properties, and their mathematical representations.\n\n<h5>Bounded Line</h5>\n<p>Bound lines are defined by their endpoints. \nIn the Revit API, obtain the endpoints of the line from the Curve-level get_EndPoint() method.\n\n<p>The equation for a point on a bound line in terms of the normalized parameter 'u' and the line endpoints is</p>\n<div align=\"center\">P(u) = P<sub>1</sub> + u (P<sub>2</sub> - P<sub>1</sub>)</div>\n<h5>Unbound lines</h5>\n<p>Unbound lines are handled specially in the Revit API. \nMost curve properties cannot be used, however, Evaluate and ComputeDerivatives can be used to obtain locations along the curve when a raw parameter is provided.\n\n<p>The equation for a point for an unbound line in terms of the raw parameter 'u', the line origin P and normalized direction vector V is</p>\n<div align=\"center\">P(u) = P<sub>0</sub> + u V</div>\n<h5>Arcs and Circles</h5>\n<p>Arcs and Circles are represented in the Revit API by the Arc class. \nThey are defined in terms of their radius, center and vector normal to the plane of the arc, which are accessible in the Revit API directly from the Arc class as properties.</p>\n<p>Circles have the IsBound property set to true. \nThis means they can only be evaluated by using a raw parameter (range from 0 to 2π), and the equation for a point on the circle in terms of the raw parameter is</p>\n<div align=\"center\">P(u) = C + r ( n<sub>x</sub> cos(u) + n<sub>y</sub> sin(u) )</div>\n<p>Here the assumption is made that the circle lies in the XY plane.</p>\n<p>Arcs begin and end at a certain angle. \nThese angles can be obtained by the raw parameter values at each end of the arc, and angular values between these values can be plugged into the same equation as above.</p>\n<h5>Ellipse and Elliptical Arcs</h5>\n<p>Ellipses and elliptical arcs segments are represented in the Revit API by the Ellipse class. \nSimilar to arcs and circles, they are defined in a given plane in terms of their X and Y radii, center, and vector normal to the plane of the ellipse.</p>\n<p>Full ellipses have the IsBound property set to true. \nSimilar to circles, they can be evaluated via raw parameter values between 0 and 2π:</p>\n<div align=\"center\">P(u) = C + n<sub>x</sub> r<sub>x</sub> cos(u) + n<sub>y</sub> r<sub>y</sub> sin(u)</div>\n<h5>NurbSpline</h5>\n<p>NURBS (non-uniform rational B-splines) are used for spline segments sketched by the user as curves or portions of 3D object sketches. \nThey are also used to represent some types of imported geometry data.</p>\n<p>The data for the NurbSpline include:</p>\n<ul>\n<li>The control points array P, of length n + 1.\n<li>The weights array w, also of length n + 1.\n<li>The curve degree, whose value is equal to one less than the curve order k.\n<li>The knot vector N, of length n + k + 1.\n</li></li></li></li></ul>\n<p>The parametric formula for a point on the curve is given by</p>\n<div align=\"center\">P(u) = ∑ P<sub>i</sub> w<sub>i</sub> N<sub>i,k</sub>(u)   /   ∑ w<sub>i</sub> N<sub>i,k</sub>(u)</div>\n<p>The sums are over i = 0,...n, and u is limited to the interval 0 &lt; u ≤ u<sub>max</sub>.\n\n<h5>HermiteSpline</h5>\n<p>Hermite splines are used for curves which are interpolated between a set of control points, like Curve by Points and flexible ducts and pipes in MEP. \nThey are also used to represent some types of imported geometry data. \nIn the Revit API, the HermiteSpline class offers access to the arrays of points, tangent vectors and parameters through the ControlPoints, Tangents, and Parameters properties.</p>\n<p>The equation for the curve between two nodes in a Hermite spline is</p>\n<div align=\"center\">P(u) = h<sub>00</sub>(u) P<sub>k</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>10</sub>(u) M<sub>k</sub> + h<sub>01</sub>(u) P<sub>k+1</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>11</sub>(u) M<sub>k+1</sub></div>\n<p>Here P<sub>k</sub> and P<sub>k+1</sub> represent the points at each node, M<sub>k</sub> and M<sub>k+1</sub> the tangent vectors, and u<sub>k</sub> and u<sub>k+1</sub> the parameters at the nodes, and the basis functions are:</p>\n<div align=\"center\">h<sub>00</sub>(u) = 2u<sup>3</sup> - 3u<sup>2</sup> + 1\n<br/>h<sub>10</sub>(u) = u<sup>3</sup> - 2u<sup>2</sup> + u\n<br/>h<sub>01</sub>(u) = - 2u<sup>3</sup> + 3u<sup>2</sup>\n<br/>h<sub>11</sub>(u) = u<sup>3</sup> - u<sup>2</sup></div>\n<h4>Curve analysis and processing</h4>\n<p>There are several Curve members which are tools suitable for use in geometric analysis. \nIn some cases, these APIs do more than you might expect by a quick review of their names.\nWe will discuss three of them:\n\n<ul>\n<li>Intersect\n<li>Project\n<li>Tessellate\n</li></li></li></ul>\n<h5>Intersect</h5>\n<p>The Intersect method allows you compare two curves to find how they differ or how they are similar. It can be used in the manner you might expect, to obtain the point or point(s) where two curves intersect one another, but it can also be used to identify:\n\n<ul>\n<li>Collinear lines\n<li>Overlapping lines\n<li>Identical curves\n<li>Totally distinct curves with no intersections\n</li></li></li></li></ul>\n<p>The return value identifies these different results, and the output IntersectionSetResult contains information on the intersection point(s).\n\n<h5>Project</h5>\n<p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Curve Types",
    "local_header_href": "#curve-types",
    "chunk_text": "<h4>Curve Types</h4><p>Revit uses a variety of curve types to represent curve geometry in a document. \nThe curve types and corresponding Revit API classes include:\n\n<ul>\n<li>Bounded line – Line\n<li>Unbound line – Line\n<li>Arc – Arc\n<li>Circle – Arc\n<li>Elliptical arc – Ellipse\n<li>Ellipse – Ellipse\n<li>NURBS – NurbSpline\n<li>Hermite – HermiteSpline\n</li></li></li></li></li></li></li></li></ul>\n<p>Here are the definitions and some notes on each of these curve types:\n\n<ul>\n<li>Bounded line: \nA line segment defined by its endpoints. \nObtain endpoints from Curve.get_Endpoint().\n\n<li>Unbounded line: An infinite line defined by a location and direction. \nIdentify these with Curve.IsBound.\nEvaluate point and tangent vector at raw parameter zero to find the input parameters for the equation of the line.\n\n<li>Arc:\nA bound circular arc.\nBegin and end at a certain angle. \nThese angles can be obtained by the raw parameter values at each end of the arc.\n\n<li>Circle:\nAn unbound circle.\nIdentify with Curve.IsBound.\nUse raw parameter for evaluation (from 0 to 2π).\n\n<li>Elliptical arc:\nA bound elliptical segment.\n\n<li>Ellipse:\nAn unbound ellipse.\nIdentify with Curve.IsBound. \nUse raw parameter for evaluation (from 0 to 2π).\n\n<li>Nurbs spline:\nA non-uniform rational B-spline.\nUsed for splines sketched in various Revit tools, plus imported geometry.\n\n<li>Hermite spline:\nA spline interpolate between a set of points.\nUsed for tools like Curve by Points and flexible ducts/pipes, plus imported geometry.\n</li></li></li></li></li></li></li></li></ul>\n<h4>Mathematical representation</h4>\n<p>Mathematical representations of all of the Revit curve types are given in Appendix A of Scott's\n\n<a href=\"\">handout document</a>, \n\nand we include them here as well for easy online access.\nThis section describes the curve types encountered in Revit geometry, their properties, and their mathematical representations.\n\n<h5>Bounded Line</h5>\n<p>Bound lines are defined by their endpoints. \nIn the Revit API, obtain the endpoints of the line from the Curve-level get_EndPoint() method.\n\n<p>The equation for a point on a bound line in terms of the normalized parameter 'u' and the line endpoints is</p>\n<div align=\"center\">P(u) = P<sub>1</sub> + u (P<sub>2</sub> - P<sub>1</sub>)</div>\n<h5>Unbound lines</h5>\n<p>Unbound lines are handled specially in the Revit API. \nMost curve properties cannot be used, however, Evaluate and ComputeDerivatives can be used to obtain locations along the curve when a raw parameter is provided.\n\n<p>The equation for a point for an unbound line in terms of the raw parameter 'u', the line origin P and normalized direction vector V is</p>\n<div align=\"center\">P(u) = P<sub>0</sub> + u V</div>\n<h5>Arcs and Circles</h5>\n<p>Arcs and Circles are represented in the Revit API by the Arc class. \nThey are defined in terms of their radius, center and vector normal to the plane of the arc, which are accessible in the Revit API directly from the Arc class as properties.</p>\n<p>Circles have the IsBound property set to true. \nThis means they can only be evaluated by using a raw parameter (range from 0 to 2π), and the equation for a point on the circle in terms of the raw parameter is</p>\n<div align=\"center\">P(u) = C + r ( n<sub>x</sub> cos(u) + n<sub>y</sub> sin(u) )</div>\n<p>Here the assumption is made that the circle lies in the XY plane.</p>\n<p>Arcs begin and end at a certain angle. \nThese angles can be obtained by the raw parameter values at each end of the arc, and angular values between these values can be plugged into the same equation as above.</p>\n<h5>Ellipse and Elliptical Arcs</h5>\n<p>Ellipses and elliptical arcs segments are represented in the Revit API by the Ellipse class. \nSimilar to arcs and circles, they are defined in a given plane in terms of their X and Y radii, center, and vector normal to the plane of the ellipse.</p>\n<p>Full ellipses have the IsBound property set to true. \nSimilar to circles, they can be evaluated via raw parameter values between 0 and 2π:</p>\n<div align=\"center\">P(u) = C + n<sub>x</sub> r<sub>x</sub> cos(u) + n<sub>y</sub> r<sub>y</sub> sin(u)</div>\n<h5>NurbSpline</h5>\n<p>NURBS (non-uniform rational B-splines) are used for spline segments sketched by the user as curves or portions of 3D object sketches. \nThey are also used to represent some types of imported geometry data.</p>\n<p>The data for the NurbSpline include:</p>\n<ul>\n<li>The control points array P, of length n + 1.\n<li>The weights array w, also of length n + 1.\n<li>The curve degree, whose value is equal to one less than the curve order k.\n<li>The knot vector N, of length n + k + 1.\n</li></li></li></li></ul>\n<p>The parametric formula for a point on the curve is given by</p>\n<div align=\"center\">P(u) = ∑ P<sub>i</sub> w<sub>i</sub> N<sub>i,k</sub>(u)   /   ∑ w<sub>i</sub> N<sub>i,k</sub>(u)</div>\n<p>The sums are over i = 0,...n, and u is limited to the interval 0 &lt; u ≤ u<sub>max</sub>.\n\n<h5>HermiteSpline</h5>\n<p>Hermite splines are used for curves which are interpolated between a set of control points, like Curve by Points and flexible ducts and pipes in MEP. \nThey are also used to represent some types of imported geometry data. \nIn the Revit API, the HermiteSpline class offers access to the arrays of points, tangent vectors and parameters through the ControlPoints, Tangents, and Parameters properties.</p>\n<p>The equation for the curve between two nodes in a Hermite spline is</p>\n<div align=\"center\">P(u) = h<sub>00</sub>(u) P<sub>k</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>10</sub>(u) M<sub>k</sub> + h<sub>01</sub>(u) P<sub>k+1</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>11</sub>(u) M<sub>k+1</sub></div>\n<p>Here P<sub>k</sub> and P<sub>k+1</sub> represent the points at each node, M<sub>k</sub> and M<sub>k+1</sub> the tangent vectors, and u<sub>k</sub> and u<sub>k+1</sub> the parameters at the nodes, and the basis functions are:</p>\n<div align=\"center\">h<sub>00</sub>(u) = 2u<sup>3</sup> - 3u<sup>2</sup> + 1\n<br/>h<sub>10</sub>(u) = u<sup>3</sup> - 2u<sup>2</sup> + u\n<br/>h<sub>01</sub>(u) = - 2u<sup>3</sup> + 3u<sup>2</sup>\n<br/>h<sub>11</sub>(u) = u<sup>3</sup> - u<sup>2</sup></div>\n<h4>Curve analysis and processing</h4>\n<p>There are several Curve members which are tools suitable for use in geometric analysis. \nIn some cases, these APIs do more than you might expect by a quick review of their names.\nWe will discuss three of them:\n\n<ul>\n<li>Intersect\n<li>Project\n<li>Tessellate\n</li></li></li></ul>\n<h5>Intersect</h5>\n<p>The Intersect method allows you compare two curves to find how they differ or how they are similar. It can be used in the manner you might expect, to obtain the point or point(s) where two curves intersect one another, but it can also be used to identify:\n\n<ul>\n<li>Collinear lines\n<li>Overlapping lines\n<li>Identical curves\n<li>Totally distinct curves with no intersections\n</li></li></li></li></ul>\n<p>The return value identifies these different results, and the output IntersectionSetResult contains information on the intersection point(s).\n\n<h5>Project</h5>\n<p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Mathematical representation",
    "local_header_href": "#mathematical-representation",
    "chunk_text": "<h4>Mathematical representation</h4><p>Mathematical representations of all of the Revit curve types are given in Appendix A of Scott's\n\n<a href=\"\">handout document</a>, \n\nand we include them here as well for easy online access.\nThis section describes the curve types encountered in Revit geometry, their properties, and their mathematical representations.\n\n<h5>Bounded Line</h5>\n<p>Bound lines are defined by their endpoints. \nIn the Revit API, obtain the endpoints of the line from the Curve-level get_EndPoint() method.\n\n<p>The equation for a point on a bound line in terms of the normalized parameter 'u' and the line endpoints is</p>\n<div align=\"center\">P(u) = P<sub>1</sub> + u (P<sub>2</sub> - P<sub>1</sub>)</div>\n<h5>Unbound lines</h5>\n<p>Unbound lines are handled specially in the Revit API. \nMost curve properties cannot be used, however, Evaluate and ComputeDerivatives can be used to obtain locations along the curve when a raw parameter is provided.\n\n<p>The equation for a point for an unbound line in terms of the raw parameter 'u', the line origin P and normalized direction vector V is</p>\n<div align=\"center\">P(u) = P<sub>0</sub> + u V</div>\n<h5>Arcs and Circles</h5>\n<p>Arcs and Circles are represented in the Revit API by the Arc class. \nThey are defined in terms of their radius, center and vector normal to the plane of the arc, which are accessible in the Revit API directly from the Arc class as properties.</p>\n<p>Circles have the IsBound property set to true. \nThis means they can only be evaluated by using a raw parameter (range from 0 to 2π), and the equation for a point on the circle in terms of the raw parameter is</p>\n<div align=\"center\">P(u) = C + r ( n<sub>x</sub> cos(u) + n<sub>y</sub> sin(u) )</div>\n<p>Here the assumption is made that the circle lies in the XY plane.</p>\n<p>Arcs begin and end at a certain angle. \nThese angles can be obtained by the raw parameter values at each end of the arc, and angular values between these values can be plugged into the same equation as above.</p>\n<h5>Ellipse and Elliptical Arcs</h5>\n<p>Ellipses and elliptical arcs segments are represented in the Revit API by the Ellipse class. \nSimilar to arcs and circles, they are defined in a given plane in terms of their X and Y radii, center, and vector normal to the plane of the ellipse.</p>\n<p>Full ellipses have the IsBound property set to true. \nSimilar to circles, they can be evaluated via raw parameter values between 0 and 2π:</p>\n<div align=\"center\">P(u) = C + n<sub>x</sub> r<sub>x</sub> cos(u) + n<sub>y</sub> r<sub>y</sub> sin(u)</div>\n<h5>NurbSpline</h5>\n<p>NURBS (non-uniform rational B-splines) are used for spline segments sketched by the user as curves or portions of 3D object sketches. \nThey are also used to represent some types of imported geometry data.</p>\n<p>The data for the NurbSpline include:</p>\n<ul>\n<li>The control points array P, of length n + 1.\n<li>The weights array w, also of length n + 1.\n<li>The curve degree, whose value is equal to one less than the curve order k.\n<li>The knot vector N, of length n + k + 1.\n</li></li></li></li></ul>\n<p>The parametric formula for a point on the curve is given by</p>\n<div align=\"center\">P(u) = ∑ P<sub>i</sub> w<sub>i</sub> N<sub>i,k</sub>(u)   /   ∑ w<sub>i</sub> N<sub>i,k</sub>(u)</div>\n<p>The sums are over i = 0,...n, and u is limited to the interval 0 &lt; u ≤ u<sub>max</sub>.\n\n<h5>HermiteSpline</h5>\n<p>Hermite splines are used for curves which are interpolated between a set of control points, like Curve by Points and flexible ducts and pipes in MEP. \nThey are also used to represent some types of imported geometry data. \nIn the Revit API, the HermiteSpline class offers access to the arrays of points, tangent vectors and parameters through the ControlPoints, Tangents, and Parameters properties.</p>\n<p>The equation for the curve between two nodes in a Hermite spline is</p>\n<div align=\"center\">P(u) = h<sub>00</sub>(u) P<sub>k</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>10</sub>(u) M<sub>k</sub> + h<sub>01</sub>(u) P<sub>k+1</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>11</sub>(u) M<sub>k+1</sub></div>\n<p>Here P<sub>k</sub> and P<sub>k+1</sub> represent the points at each node, M<sub>k</sub> and M<sub>k+1</sub> the tangent vectors, and u<sub>k</sub> and u<sub>k+1</sub> the parameters at the nodes, and the basis functions are:</p>\n<div align=\"center\">h<sub>00</sub>(u) = 2u<sup>3</sup> - 3u<sup>2</sup> + 1\n<br/>h<sub>10</sub>(u) = u<sup>3</sup> - 2u<sup>2</sup> + u\n<br/>h<sub>01</sub>(u) = - 2u<sup>3</sup> + 3u<sup>2</sup>\n<br/>h<sub>11</sub>(u) = u<sup>3</sup> - u<sup>2</sup></div>\n<h4>Curve analysis and processing</h4>\n<p>There are several Curve members which are tools suitable for use in geometric analysis. \nIn some cases, these APIs do more than you might expect by a quick review of their names.\nWe will discuss three of them:\n\n<ul>\n<li>Intersect\n<li>Project\n<li>Tessellate\n</li></li></li></ul>\n<h5>Intersect</h5>\n<p>The Intersect method allows you compare two curves to find how they differ or how they are similar. It can be used in the manner you might expect, to obtain the point or point(s) where two curves intersect one another, but it can also be used to identify:\n\n<ul>\n<li>Collinear lines\n<li>Overlapping lines\n<li>Identical curves\n<li>Totally distinct curves with no intersections\n</li></li></li></li></ul>\n<p>The return value identifies these different results, and the output IntersectionSetResult contains information on the intersection point(s).\n\n<h5>Project</h5>\n<p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Bounded Line",
    "local_header_href": "#bounded-line",
    "chunk_text": "<h5>Bounded Line</h5><p>Bound lines are defined by their endpoints. \nIn the Revit API, obtain the endpoints of the line from the Curve-level get_EndPoint() method.\n\n<p>The equation for a point on a bound line in terms of the normalized parameter 'u' and the line endpoints is</p>\n<div align=\"center\">P(u) = P<sub>1</sub> + u (P<sub>2</sub> - P<sub>1</sub>)</div>\n<h5>Unbound lines</h5>\n<p>Unbound lines are handled specially in the Revit API. \nMost curve properties cannot be used, however, Evaluate and ComputeDerivatives can be used to obtain locations along the curve when a raw parameter is provided.\n\n<p>The equation for a point for an unbound line in terms of the raw parameter 'u', the line origin P and normalized direction vector V is</p>\n<div align=\"center\">P(u) = P<sub>0</sub> + u V</div>\n<h5>Arcs and Circles</h5>\n<p>Arcs and Circles are represented in the Revit API by the Arc class. \nThey are defined in terms of their radius, center and vector normal to the plane of the arc, which are accessible in the Revit API directly from the Arc class as properties.</p>\n<p>Circles have the IsBound property set to true. \nThis means they can only be evaluated by using a raw parameter (range from 0 to 2π), and the equation for a point on the circle in terms of the raw parameter is</p>\n<div align=\"center\">P(u) = C + r ( n<sub>x</sub> cos(u) + n<sub>y</sub> sin(u) )</div>\n<p>Here the assumption is made that the circle lies in the XY plane.</p>\n<p>Arcs begin and end at a certain angle. \nThese angles can be obtained by the raw parameter values at each end of the arc, and angular values between these values can be plugged into the same equation as above.</p>\n<h5>Ellipse and Elliptical Arcs</h5>\n<p>Ellipses and elliptical arcs segments are represented in the Revit API by the Ellipse class. \nSimilar to arcs and circles, they are defined in a given plane in terms of their X and Y radii, center, and vector normal to the plane of the ellipse.</p>\n<p>Full ellipses have the IsBound property set to true. \nSimilar to circles, they can be evaluated via raw parameter values between 0 and 2π:</p>\n<div align=\"center\">P(u) = C + n<sub>x</sub> r<sub>x</sub> cos(u) + n<sub>y</sub> r<sub>y</sub> sin(u)</div>\n<h5>NurbSpline</h5>\n<p>NURBS (non-uniform rational B-splines) are used for spline segments sketched by the user as curves or portions of 3D object sketches. \nThey are also used to represent some types of imported geometry data.</p>\n<p>The data for the NurbSpline include:</p>\n<ul>\n<li>The control points array P, of length n + 1.\n<li>The weights array w, also of length n + 1.\n<li>The curve degree, whose value is equal to one less than the curve order k.\n<li>The knot vector N, of length n + k + 1.\n</li></li></li></li></ul>\n<p>The parametric formula for a point on the curve is given by</p>\n<div align=\"center\">P(u) = ∑ P<sub>i</sub> w<sub>i</sub> N<sub>i,k</sub>(u)   /   ∑ w<sub>i</sub> N<sub>i,k</sub>(u)</div>\n<p>The sums are over i = 0,...n, and u is limited to the interval 0 &lt; u ≤ u<sub>max</sub>.\n\n<h5>HermiteSpline</h5>\n<p>Hermite splines are used for curves which are interpolated between a set of control points, like Curve by Points and flexible ducts and pipes in MEP. \nThey are also used to represent some types of imported geometry data. \nIn the Revit API, the HermiteSpline class offers access to the arrays of points, tangent vectors and parameters through the ControlPoints, Tangents, and Parameters properties.</p>\n<p>The equation for the curve between two nodes in a Hermite spline is</p>\n<div align=\"center\">P(u) = h<sub>00</sub>(u) P<sub>k</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>10</sub>(u) M<sub>k</sub> + h<sub>01</sub>(u) P<sub>k+1</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>11</sub>(u) M<sub>k+1</sub></div>\n<p>Here P<sub>k</sub> and P<sub>k+1</sub> represent the points at each node, M<sub>k</sub> and M<sub>k+1</sub> the tangent vectors, and u<sub>k</sub> and u<sub>k+1</sub> the parameters at the nodes, and the basis functions are:</p>\n<div align=\"center\">h<sub>00</sub>(u) = 2u<sup>3</sup> - 3u<sup>2</sup> + 1\n<br/>h<sub>10</sub>(u) = u<sup>3</sup> - 2u<sup>2</sup> + u\n<br/>h<sub>01</sub>(u) = - 2u<sup>3</sup> + 3u<sup>2</sup>\n<br/>h<sub>11</sub>(u) = u<sup>3</sup> - u<sup>2</sup></div>\n<h4>Curve analysis and processing</h4>\n<p>There are several Curve members which are tools suitable for use in geometric analysis. \nIn some cases, these APIs do more than you might expect by a quick review of their names.\nWe will discuss three of them:\n\n<ul>\n<li>Intersect\n<li>Project\n<li>Tessellate\n</li></li></li></ul>\n<h5>Intersect</h5>\n<p>The Intersect method allows you compare two curves to find how they differ or how they are similar. It can be used in the manner you might expect, to obtain the point or point(s) where two curves intersect one another, but it can also be used to identify:\n\n<ul>\n<li>Collinear lines\n<li>Overlapping lines\n<li>Identical curves\n<li>Totally distinct curves with no intersections\n</li></li></li></li></ul>\n<p>The return value identifies these different results, and the output IntersectionSetResult contains information on the intersection point(s).\n\n<h5>Project</h5>\n<p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Unbound lines",
    "local_header_href": "#unbound-lines",
    "chunk_text": "<h5>Unbound lines</h5><p>Unbound lines are handled specially in the Revit API. \nMost curve properties cannot be used, however, Evaluate and ComputeDerivatives can be used to obtain locations along the curve when a raw parameter is provided.\n\n<p>The equation for a point for an unbound line in terms of the raw parameter 'u', the line origin P and normalized direction vector V is</p>\n<div align=\"center\">P(u) = P<sub>0</sub> + u V</div>\n<h5>Arcs and Circles</h5>\n<p>Arcs and Circles are represented in the Revit API by the Arc class. \nThey are defined in terms of their radius, center and vector normal to the plane of the arc, which are accessible in the Revit API directly from the Arc class as properties.</p>\n<p>Circles have the IsBound property set to true. \nThis means they can only be evaluated by using a raw parameter (range from 0 to 2π), and the equation for a point on the circle in terms of the raw parameter is</p>\n<div align=\"center\">P(u) = C + r ( n<sub>x</sub> cos(u) + n<sub>y</sub> sin(u) )</div>\n<p>Here the assumption is made that the circle lies in the XY plane.</p>\n<p>Arcs begin and end at a certain angle. \nThese angles can be obtained by the raw parameter values at each end of the arc, and angular values between these values can be plugged into the same equation as above.</p>\n<h5>Ellipse and Elliptical Arcs</h5>\n<p>Ellipses and elliptical arcs segments are represented in the Revit API by the Ellipse class. \nSimilar to arcs and circles, they are defined in a given plane in terms of their X and Y radii, center, and vector normal to the plane of the ellipse.</p>\n<p>Full ellipses have the IsBound property set to true. \nSimilar to circles, they can be evaluated via raw parameter values between 0 and 2π:</p>\n<div align=\"center\">P(u) = C + n<sub>x</sub> r<sub>x</sub> cos(u) + n<sub>y</sub> r<sub>y</sub> sin(u)</div>\n<h5>NurbSpline</h5>\n<p>NURBS (non-uniform rational B-splines) are used for spline segments sketched by the user as curves or portions of 3D object sketches. \nThey are also used to represent some types of imported geometry data.</p>\n<p>The data for the NurbSpline include:</p>\n<ul>\n<li>The control points array P, of length n + 1.\n<li>The weights array w, also of length n + 1.\n<li>The curve degree, whose value is equal to one less than the curve order k.\n<li>The knot vector N, of length n + k + 1.\n</li></li></li></li></ul>\n<p>The parametric formula for a point on the curve is given by</p>\n<div align=\"center\">P(u) = ∑ P<sub>i</sub> w<sub>i</sub> N<sub>i,k</sub>(u)   /   ∑ w<sub>i</sub> N<sub>i,k</sub>(u)</div>\n<p>The sums are over i = 0,...n, and u is limited to the interval 0 &lt; u ≤ u<sub>max</sub>.\n\n<h5>HermiteSpline</h5>\n<p>Hermite splines are used for curves which are interpolated between a set of control points, like Curve by Points and flexible ducts and pipes in MEP. \nThey are also used to represent some types of imported geometry data. \nIn the Revit API, the HermiteSpline class offers access to the arrays of points, tangent vectors and parameters through the ControlPoints, Tangents, and Parameters properties.</p>\n<p>The equation for the curve between two nodes in a Hermite spline is</p>\n<div align=\"center\">P(u) = h<sub>00</sub>(u) P<sub>k</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>10</sub>(u) M<sub>k</sub> + h<sub>01</sub>(u) P<sub>k+1</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>11</sub>(u) M<sub>k+1</sub></div>\n<p>Here P<sub>k</sub> and P<sub>k+1</sub> represent the points at each node, M<sub>k</sub> and M<sub>k+1</sub> the tangent vectors, and u<sub>k</sub> and u<sub>k+1</sub> the parameters at the nodes, and the basis functions are:</p>\n<div align=\"center\">h<sub>00</sub>(u) = 2u<sup>3</sup> - 3u<sup>2</sup> + 1\n<br/>h<sub>10</sub>(u) = u<sup>3</sup> - 2u<sup>2</sup> + u\n<br/>h<sub>01</sub>(u) = - 2u<sup>3</sup> + 3u<sup>2</sup>\n<br/>h<sub>11</sub>(u) = u<sup>3</sup> - u<sup>2</sup></div>\n<h4>Curve analysis and processing</h4>\n<p>There are several Curve members which are tools suitable for use in geometric analysis. \nIn some cases, these APIs do more than you might expect by a quick review of their names.\nWe will discuss three of them:\n\n<ul>\n<li>Intersect\n<li>Project\n<li>Tessellate\n</li></li></li></ul>\n<h5>Intersect</h5>\n<p>The Intersect method allows you compare two curves to find how they differ or how they are similar. It can be used in the manner you might expect, to obtain the point or point(s) where two curves intersect one another, but it can also be used to identify:\n\n<ul>\n<li>Collinear lines\n<li>Overlapping lines\n<li>Identical curves\n<li>Totally distinct curves with no intersections\n</li></li></li></li></ul>\n<p>The return value identifies these different results, and the output IntersectionSetResult contains information on the intersection point(s).\n\n<h5>Project</h5>\n<p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Arcs and Circles",
    "local_header_href": "#arcs-and-circles",
    "chunk_text": "<h5>Arcs and Circles</h5><p>Arcs and Circles are represented in the Revit API by the Arc class. \nThey are defined in terms of their radius, center and vector normal to the plane of the arc, which are accessible in the Revit API directly from the Arc class as properties.</p><p>Circles have the IsBound property set to true. \nThis means they can only be evaluated by using a raw parameter (range from 0 to 2π), and the equation for a point on the circle in terms of the raw parameter is</p><div align=\"center\">P(u) = C + r ( n<sub>x</sub> cos(u) + n<sub>y</sub> sin(u) )</div><p>Here the assumption is made that the circle lies in the XY plane.</p><p>Arcs begin and end at a certain angle. \nThese angles can be obtained by the raw parameter values at each end of the arc, and angular values between these values can be plugged into the same equation as above.</p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Ellipse and Elliptical Arcs",
    "local_header_href": "#ellipse-and-elliptical-arcs",
    "chunk_text": "<h5>Ellipse and Elliptical Arcs</h5><p>Ellipses and elliptical arcs segments are represented in the Revit API by the Ellipse class. \nSimilar to arcs and circles, they are defined in a given plane in terms of their X and Y radii, center, and vector normal to the plane of the ellipse.</p><p>Full ellipses have the IsBound property set to true. \nSimilar to circles, they can be evaluated via raw parameter values between 0 and 2π:</p><div align=\"center\">P(u) = C + n<sub>x</sub> r<sub>x</sub> cos(u) + n<sub>y</sub> r<sub>y</sub> sin(u)</div>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "NurbSpline",
    "local_header_href": "#nurbspline",
    "chunk_text": "<h5>NurbSpline</h5><p>NURBS (non-uniform rational B-splines) are used for spline segments sketched by the user as curves or portions of 3D object sketches. \nThey are also used to represent some types of imported geometry data.</p><p>The data for the NurbSpline include:</p><ul>\n<li>The control points array P, of length n + 1.\n<li>The weights array w, also of length n + 1.\n<li>The curve degree, whose value is equal to one less than the curve order k.\n<li>The knot vector N, of length n + k + 1.\n</li></li></li></li></ul><p>The parametric formula for a point on the curve is given by</p><div align=\"center\">P(u) = ∑ P<sub>i</sub> w<sub>i</sub> N<sub>i,k</sub>(u)   /   ∑ w<sub>i</sub> N<sub>i,k</sub>(u)</div><p>The sums are over i = 0,...n, and u is limited to the interval 0 &lt; u ≤ u<sub>max</sub>.\n\n<h5>HermiteSpline</h5>\n<p>Hermite splines are used for curves which are interpolated between a set of control points, like Curve by Points and flexible ducts and pipes in MEP. \nThey are also used to represent some types of imported geometry data. \nIn the Revit API, the HermiteSpline class offers access to the arrays of points, tangent vectors and parameters through the ControlPoints, Tangents, and Parameters properties.</p>\n<p>The equation for the curve between two nodes in a Hermite spline is</p>\n<div align=\"center\">P(u) = h<sub>00</sub>(u) P<sub>k</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>10</sub>(u) M<sub>k</sub> + h<sub>01</sub>(u) P<sub>k+1</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>11</sub>(u) M<sub>k+1</sub></div>\n<p>Here P<sub>k</sub> and P<sub>k+1</sub> represent the points at each node, M<sub>k</sub> and M<sub>k+1</sub> the tangent vectors, and u<sub>k</sub> and u<sub>k+1</sub> the parameters at the nodes, and the basis functions are:</p>\n<div align=\"center\">h<sub>00</sub>(u) = 2u<sup>3</sup> - 3u<sup>2</sup> + 1\n<br/>h<sub>10</sub>(u) = u<sup>3</sup> - 2u<sup>2</sup> + u\n<br/>h<sub>01</sub>(u) = - 2u<sup>3</sup> + 3u<sup>2</sup>\n<br/>h<sub>11</sub>(u) = u<sup>3</sup> - u<sup>2</sup></div>\n<h4>Curve analysis and processing</h4>\n<p>There are several Curve members which are tools suitable for use in geometric analysis. \nIn some cases, these APIs do more than you might expect by a quick review of their names.\nWe will discuss three of them:\n\n<ul>\n<li>Intersect\n<li>Project\n<li>Tessellate\n</li></li></li></ul>\n<h5>Intersect</h5>\n<p>The Intersect method allows you compare two curves to find how they differ or how they are similar. It can be used in the manner you might expect, to obtain the point or point(s) where two curves intersect one another, but it can also be used to identify:\n\n<ul>\n<li>Collinear lines\n<li>Overlapping lines\n<li>Identical curves\n<li>Totally distinct curves with no intersections\n</li></li></li></li></ul>\n<p>The return value identifies these different results, and the output IntersectionSetResult contains information on the intersection point(s).\n\n<h5>Project</h5>\n<p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "HermiteSpline",
    "local_header_href": "#hermitespline",
    "chunk_text": "<h5>HermiteSpline</h5><p>Hermite splines are used for curves which are interpolated between a set of control points, like Curve by Points and flexible ducts and pipes in MEP. \nThey are also used to represent some types of imported geometry data. \nIn the Revit API, the HermiteSpline class offers access to the arrays of points, tangent vectors and parameters through the ControlPoints, Tangents, and Parameters properties.</p><p>The equation for the curve between two nodes in a Hermite spline is</p><div align=\"center\">P(u) = h<sub>00</sub>(u) P<sub>k</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>10</sub>(u) M<sub>k</sub> + h<sub>01</sub>(u) P<sub>k+1</sub> + (u<sub>k+1</sub> - u<sub>k</sub>) h<sub>11</sub>(u) M<sub>k+1</sub></div><p>Here P<sub>k</sub> and P<sub>k+1</sub> represent the points at each node, M<sub>k</sub> and M<sub>k+1</sub> the tangent vectors, and u<sub>k</sub> and u<sub>k+1</sub> the parameters at the nodes, and the basis functions are:</p><div align=\"center\">h<sub>00</sub>(u) = 2u<sup>3</sup> - 3u<sup>2</sup> + 1\n<br/>h<sub>10</sub>(u) = u<sup>3</sup> - 2u<sup>2</sup> + u\n<br/>h<sub>01</sub>(u) = - 2u<sup>3</sup> + 3u<sup>2</sup>\n<br/>h<sub>11</sub>(u) = u<sup>3</sup> - u<sup>2</sup></div>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Curve analysis and processing",
    "local_header_href": "#curve-analysis-and-processing",
    "chunk_text": "<h4>Curve analysis and processing</h4><p>There are several Curve members which are tools suitable for use in geometric analysis. \nIn some cases, these APIs do more than you might expect by a quick review of their names.\nWe will discuss three of them:\n\n<ul>\n<li>Intersect\n<li>Project\n<li>Tessellate\n</li></li></li></ul>\n<h5>Intersect</h5>\n<p>The Intersect method allows you compare two curves to find how they differ or how they are similar. It can be used in the manner you might expect, to obtain the point or point(s) where two curves intersect one another, but it can also be used to identify:\n\n<ul>\n<li>Collinear lines\n<li>Overlapping lines\n<li>Identical curves\n<li>Totally distinct curves with no intersections\n</li></li></li></li></ul>\n<p>The return value identifies these different results, and the output IntersectionSetResult contains information on the intersection point(s).\n\n<h5>Project</h5>\n<p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Intersect",
    "local_header_href": "#intersect",
    "chunk_text": "<h5>Intersect</h5><p>The Intersect method allows you compare two curves to find how they differ or how they are similar. It can be used in the manner you might expect, to obtain the point or point(s) where two curves intersect one another, but it can also be used to identify:\n\n<ul>\n<li>Collinear lines\n<li>Overlapping lines\n<li>Identical curves\n<li>Totally distinct curves with no intersections\n</li></li></li></li></ul>\n<p>The return value identifies these different results, and the output IntersectionSetResult contains information on the intersection point(s).\n\n<h5>Project</h5>\n<p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Project",
    "local_header_href": "#project",
    "chunk_text": "<h5>Project</h5><p>The Project method projects a point onto the curve and returns information about the nearest point on the curve, its parameter, and the distance from the projection point.\n\n<h5>Tessellate</h5>\n<p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p></p>"
  },
  {
    "original_filename": "0283_abg04_curves",
    "header_text": "Tessellate",
    "local_header_href": "#tessellate",
    "chunk_text": "<h5>Tessellate</h5><p>This method splits the curve into a series of linear segments, accurate within a default tolerance. For Curve.Tessellate, the tolerance is slightly larger than 1/16'. This tolerance of approximation is the tolerance used internally by Revit as adequate for display purposes.\n\n<p>Note that only lines may be split into output of only two tessellation points; non-linear curves will always output more than two points, even if the curve has an extremely large radius which might mathematically equate to a straight line.\n\n<p>In the next instalment of this series, we will look the Revit API handling of faces.\n</p></p></p>"
  }
]