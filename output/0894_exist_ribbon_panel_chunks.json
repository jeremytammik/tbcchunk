[
  {
    "original_filename": "0894_exist_ribbon_panel",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0894_exist_ribbon_panel",
    "header_text": "Add a Button to Existing Ribbon Panel",
    "local_header_href": "#add-a-button-to-existing-ribbon-panel",
    "chunk_text": "<h3>Add a Button to Existing Ribbon Panel</h3><p>Here is an interesting user interface contribution from Eduardo Teixeira of Autodesk:\n\n<p><strong>Question:</strong> I am building a Revit add-in using the Revit API.\n\n<p>I would like to add a button for it to an existing out-of-the-box Revit ribbon panel using the Revit API in C#.</p>\n<p>I could not find any documentation that shows how to do that.</p>\n<p>Is it possible at all?</p>\n<p><strong>Answer:</strong> Yes, this can be done.\nI am not certain whether it is officially supported, though.\nYou will have to explore on your own a bit.\n\n<p>The official API is limited.\nYou can however also use functionality from the .NET\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/automation\">\nUI Automation</a> library\n\nand from the AdWindows.dll .NET assembly included with Revit, similar to the one provided with AutoCAD.\n\n<p>Here are some previous discussion exploring related issues that might help:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/pimp-my-autocad-or-revit-ribbon.html\">Pimp my ribbon</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/roll-your-own-toggle-button.html\">Roll a toggle button</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/enable-ribbon-items-in-zero-document-state.html\">Enable button in zero document state</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/adding-noncommands-to-the-revit-ribbon.html\">Add non-command button to the ribbon</a></li>\n</ul>\n<p><strong>Response:</strong> Thanks for the tip.\nThe article that really helped me was the first one you list.\nI was able to add a button to the existing out-of-the-box Energy Analysis panel under the Analyze tab.\n\n<p>There are just two simple steps required achieve the desired result:</p>\n<p>To add a custom button to the Analyze tab in the Revit Energy Analysis ribbon panel:</p>\n<ol>\n<li><a href=\"#2\">Add a reference</a> to the AdWindows.dll .NET assembly provided with Revit.</li>\n<li>Add the two snippets of source code listed below to the external application implementation:\n<ol type=\"a\">\n<li>In OnStartup, <a href=\"#3\">create and add the button</a>.</li>\n<li><a href=\"#4\">Handle the UIElementActivated event</a>.</li>\n</ol>\n</li></ol>\n<a name=\"2\"></a>\n<h4>Adding the References</h4>\n<p>Add a reference to the AdWindows.dll .NET assembly provided with Revit.</p>\n<p>Don't forget to set the copy local flag to false on that.</p>\n<p>This will also require references to the .NET WindowsBase and PresentationFramework assemblies, which in turn require PresentationCore and System.Xaml.</p>\n<a name=\"3\"></a>\n<h4>Creating and Adding the Button</h4>\n<p>In OnStartup, localise the existing tab and panel, instantiate a new ribbon button, add it to the tab, and subscribe to the UIElementActivated event.\n\n<p>Here is a simplified version of Eduardo's code set up to run on Jeremy's system and open the browser to display The Building Coder home page:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  adWin.<span class=\"teal\">RibbonControl</span> ribbon\n    = adWin.<span class=\"teal\">ComponentManager</span>.Ribbon;\n \n  <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonTab</span> tab <span class=\"blue\">in</span> ribbon.Tabs )\n  {\n    <span class=\"blue\">if</span>( tab.Id == <span class=\"maroon\">\"Analyze\"</span> )\n    {\n      <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonPanel</span> panel\n        <span class=\"blue\">in</span> tab.Panels )\n      {\n        <span class=\"blue\">if</span>( panel.Source.Id == <span class=\"maroon\">\"cea_shr\"</span> )\n        {\n          adWin.<span class=\"teal\">RibbonButton</span> button\n            = <span class=\"blue\">new</span> adWin.<span class=\"teal\">RibbonButton</span>();\n \n          button.Name = <span class=\"maroon\">\"TbcButtonName\"</span>;\n          <span class=\"green\">//button.Image = image;</span>\n          <span class=\"green\">//button.LargeImage = image;</span>\n          button.Id = <span class=\"maroon\">\"ID_TBC_BUTTON\"</span>;\n          button.AllowInStatusBar = <span class=\"blue\">true</span>;\n          button.AllowInToolBar = <span class=\"blue\">true</span>;\n          button.GroupLocation = Autodesk.Private\n            .Windows.<span class=\"teal\">RibbonItemGroupLocation</span>.Middle;\n          button.IsEnabled = <span class=\"blue\">true</span>;\n          button.IsToolTipEnabled = <span class=\"blue\">true</span>;\n          button.IsVisible = <span class=\"blue\">true</span>;\n          button.ShowImage = <span class=\"blue\">false</span>; <span class=\"green\">//  true;</span>\n          button.ShowText = <span class=\"blue\">true</span>;\n          button.ShowToolTipOnDisabled = <span class=\"blue\">true</span>;\n          button.Text = <span class=\"maroon\">\"The Building Coder\"</span>;\n          button.ToolTip = <span class=\"maroon\">\"Open The Building \"</span>\n            + <span class=\"maroon\">\"Coder blog on the Revit API\"</span>;\n          button.MinHeight = 0;\n          button.MinWidth = 0;\n          button.Size = adWin.<span class=\"teal\">RibbonItemSize</span>.Large;\n          button.ResizeStyle = adWin\n            .<span class=\"teal\">RibbonItemResizeStyles</span>.HideText;\n          button.IsCheckable = <span class=\"blue\">true</span>;\n          button.Orientation = System.Windows\n            .Controls.<span class=\"teal\">Orientation</span>.Vertical;\n          button.KeyTip = <span class=\"maroon\">\"TBC\"</span>;\n \n          adWin.<span class=\"teal\">ComponentManager</span>.UIElementActivated\n            += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;\n              adWin.<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n              ComponentManager_UIElementActivated );\n \n          panel.Source.Items.Add( button );\n \n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>As you can see, I am triggering the reaction to the button click by subscribing to the UIElementActivated event.\nNot sure if this is the correct way of doing it, but it works.\n\n\n<a name=\"4\"></a>\n<h4>Handling the Event</h4>\n<p>In the event handler, check that the custom button was actually clicked and act on that, e.g. opening the browser at a specified URL.</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> ComponentManager_UIElementActivated(\n  <span class=\"blue\">object</span> sender,\n  adWin.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n{\n  <span class=\"blue\">if</span>( e != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item.Id != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item.Id == <span class=\"maroon\">\"ID_TBC_BUTTON\"</span> )\n  {\n    <span class=\"green\">// Perform the button action</span>\n \n    <span class=\"green\">// Local file</span>\n \n    <span class=\"blue\">string</span> path = System.Reflection.<span class=\"teal\">Assembly</span>\n      .GetExecutingAssembly().Location;\n \n    path = <span class=\"teal\">Path</span>.Combine(\n      <span class=\"teal\">Path</span>.GetDirectoryName( path ),\n      <span class=\"maroon\">\"test.html\"</span> );\n \n    <span class=\"green\">// Internet URL</span>\n \n    path = <span class=\"maroon\">\"http://thebuildingcoder.typepad.com\"</span>;\n \n    <span class=\"teal\">Process</span>.Start( path );\n  }\n}\n</pre>\n<p>Note that this requires no interaction with the Revit database, so there is no need to worry about a valid API context or transactions or any of that stuff.</p>\n<p>Many thanks to Eduardo for sharing this!</p>\n<a name=\"5\"></a>\n<h4>Sample Run</h4>\n<p>Jeremy adds: for your convenience, here is\n\n<a href=\"zip/AddButton.zip\">AddButton.zip</a> containing\n\nthe source code, Visual Studio solution and add-in manifest for my version of this external application.\n\n<p>On my system, however, the button appears in the expected location but is disabled, so no action is triggered:</p>\n<center>\n<img alt=\"Custom button in existing panel\" src=\"img/AddButton.png\" title=\"Custom button in existing panel\"/>\n</center>\n<p>I am not sure why that happens.\nMaybe Eduardo or somebody else can help resolve this.</p>\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0894_exist_ribbon_panel",
    "header_text": "Adding the References",
    "local_header_href": "#adding-the-references",
    "chunk_text": "<h4>Adding the References</h4><p>Add a reference to the AdWindows.dll .NET assembly provided with Revit.</p><p>Don't forget to set the copy local flag to false on that.</p><p>This will also require references to the .NET WindowsBase and PresentationFramework assemblies, which in turn require PresentationCore and System.Xaml.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0894_exist_ribbon_panel",
    "header_text": "Creating and Adding the Button",
    "local_header_href": "#creating-and-adding-the-button",
    "chunk_text": "<h4>Creating and Adding the Button</h4><p>In OnStartup, localise the existing tab and panel, instantiate a new ribbon button, add it to the tab, and subscribe to the UIElementActivated event.\n\n<p>Here is a simplified version of Eduardo's code set up to run on Jeremy's system and open the browser to display The Building Coder home page:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  adWin.<span class=\"teal\">RibbonControl</span> ribbon\n    = adWin.<span class=\"teal\">ComponentManager</span>.Ribbon;\n \n  <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonTab</span> tab <span class=\"blue\">in</span> ribbon.Tabs )\n  {\n    <span class=\"blue\">if</span>( tab.Id == <span class=\"maroon\">\"Analyze\"</span> )\n    {\n      <span class=\"blue\">foreach</span>( adWin.<span class=\"teal\">RibbonPanel</span> panel\n        <span class=\"blue\">in</span> tab.Panels )\n      {\n        <span class=\"blue\">if</span>( panel.Source.Id == <span class=\"maroon\">\"cea_shr\"</span> )\n        {\n          adWin.<span class=\"teal\">RibbonButton</span> button\n            = <span class=\"blue\">new</span> adWin.<span class=\"teal\">RibbonButton</span>();\n \n          button.Name = <span class=\"maroon\">\"TbcButtonName\"</span>;\n          <span class=\"green\">//button.Image = image;</span>\n          <span class=\"green\">//button.LargeImage = image;</span>\n          button.Id = <span class=\"maroon\">\"ID_TBC_BUTTON\"</span>;\n          button.AllowInStatusBar = <span class=\"blue\">true</span>;\n          button.AllowInToolBar = <span class=\"blue\">true</span>;\n          button.GroupLocation = Autodesk.Private\n            .Windows.<span class=\"teal\">RibbonItemGroupLocation</span>.Middle;\n          button.IsEnabled = <span class=\"blue\">true</span>;\n          button.IsToolTipEnabled = <span class=\"blue\">true</span>;\n          button.IsVisible = <span class=\"blue\">true</span>;\n          button.ShowImage = <span class=\"blue\">false</span>; <span class=\"green\">//  true;</span>\n          button.ShowText = <span class=\"blue\">true</span>;\n          button.ShowToolTipOnDisabled = <span class=\"blue\">true</span>;\n          button.Text = <span class=\"maroon\">\"The Building Coder\"</span>;\n          button.ToolTip = <span class=\"maroon\">\"Open The Building \"</span>\n            + <span class=\"maroon\">\"Coder blog on the Revit API\"</span>;\n          button.MinHeight = 0;\n          button.MinWidth = 0;\n          button.Size = adWin.<span class=\"teal\">RibbonItemSize</span>.Large;\n          button.ResizeStyle = adWin\n            .<span class=\"teal\">RibbonItemResizeStyles</span>.HideText;\n          button.IsCheckable = <span class=\"blue\">true</span>;\n          button.Orientation = System.Windows\n            .Controls.<span class=\"teal\">Orientation</span>.Vertical;\n          button.KeyTip = <span class=\"maroon\">\"TBC\"</span>;\n \n          adWin.<span class=\"teal\">ComponentManager</span>.UIElementActivated\n            += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;\n              adWin.<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n              ComponentManager_UIElementActivated );\n \n          panel.Source.Items.Add( button );\n \n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>As you can see, I am triggering the reaction to the button click by subscribing to the UIElementActivated event.\nNot sure if this is the correct way of doing it, but it works.\n\n\n<a name=\"4\"></a>\n<h4>Handling the Event</h4>\n<p>In the event handler, check that the custom button was actually clicked and act on that, e.g. opening the browser at a specified URL.</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> ComponentManager_UIElementActivated(\n  <span class=\"blue\">object</span> sender,\n  adWin.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n{\n  <span class=\"blue\">if</span>( e != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item.Id != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item.Id == <span class=\"maroon\">\"ID_TBC_BUTTON\"</span> )\n  {\n    <span class=\"green\">// Perform the button action</span>\n \n    <span class=\"green\">// Local file</span>\n \n    <span class=\"blue\">string</span> path = System.Reflection.<span class=\"teal\">Assembly</span>\n      .GetExecutingAssembly().Location;\n \n    path = <span class=\"teal\">Path</span>.Combine(\n      <span class=\"teal\">Path</span>.GetDirectoryName( path ),\n      <span class=\"maroon\">\"test.html\"</span> );\n \n    <span class=\"green\">// Internet URL</span>\n \n    path = <span class=\"maroon\">\"http://thebuildingcoder.typepad.com\"</span>;\n \n    <span class=\"teal\">Process</span>.Start( path );\n  }\n}\n</pre>\n<p>Note that this requires no interaction with the Revit database, so there is no need to worry about a valid API context or transactions or any of that stuff.</p>\n<p>Many thanks to Eduardo for sharing this!</p>\n<a name=\"5\"></a>\n<h4>Sample Run</h4>\n<p>Jeremy adds: for your convenience, here is\n\n<a href=\"zip/AddButton.zip\">AddButton.zip</a> containing\n\nthe source code, Visual Studio solution and add-in manifest for my version of this external application.\n\n<p>On my system, however, the button appears in the expected location but is disabled, so no action is triggered:</p>\n<center>\n<img alt=\"Custom button in existing panel\" src=\"img/AddButton.png\" title=\"Custom button in existing panel\"/>\n</center>\n<p>I am not sure why that happens.\nMaybe Eduardo or somebody else can help resolve this.</p>\n</p></p></p>"
  },
  {
    "original_filename": "0894_exist_ribbon_panel",
    "header_text": "Handling the Event",
    "local_header_href": "#handling-the-event",
    "chunk_text": "<h4>Handling the Event</h4><p>In the event handler, check that the custom button was actually clicked and act on that, e.g. opening the browser at a specified URL.</p><pre class=\"code\">\n<span class=\"blue\">void</span> ComponentManager_UIElementActivated(\n  <span class=\"blue\">object</span> sender,\n  adWin.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n{\n  <span class=\"blue\">if</span>( e != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item.Id != <span class=\"blue\">null</span>\n    &amp;&amp; e.Item.Id == <span class=\"maroon\">\"ID_TBC_BUTTON\"</span> )\n  {\n    <span class=\"green\">// Perform the button action</span>\n \n    <span class=\"green\">// Local file</span>\n \n    <span class=\"blue\">string</span> path = System.Reflection.<span class=\"teal\">Assembly</span>\n      .GetExecutingAssembly().Location;\n \n    path = <span class=\"teal\">Path</span>.Combine(\n      <span class=\"teal\">Path</span>.GetDirectoryName( path ),\n      <span class=\"maroon\">\"test.html\"</span> );\n \n    <span class=\"green\">// Internet URL</span>\n \n    path = <span class=\"maroon\">\"http://thebuildingcoder.typepad.com\"</span>;\n \n    <span class=\"teal\">Process</span>.Start( path );\n  }\n}\n</pre><p>Note that this requires no interaction with the Revit database, so there is no need to worry about a valid API context or transactions or any of that stuff.</p><p>Many thanks to Eduardo for sharing this!</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "0894_exist_ribbon_panel",
    "header_text": "Sample Run",
    "local_header_href": "#sample-run",
    "chunk_text": "<h4>Sample Run</h4><p>Jeremy adds: for your convenience, here is\n\n<a href=\"zip/AddButton.zip\">AddButton.zip</a> containing\n\nthe source code, Visual Studio solution and add-in manifest for my version of this external application.\n\n<p>On my system, however, the button appears in the expected location but is disabled, so no action is triggered:</p>\n<center>\n<img alt=\"Custom button in existing panel\" src=\"img/AddButton.png\" title=\"Custom button in existing panel\"/>\n</center>\n<p>I am not sure why that happens.\nMaybe Eduardo or somebody else can help resolve this.</p>\n</p>"
  }
]