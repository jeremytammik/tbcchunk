[
  {
    "original_filename": "1296_spatial_calculator",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1296_spatial_calculator",
    "header_text": "Calculating Gross and Net Wall Areas",
    "local_header_href": "#calculating-gross-and-net-wall-areas",
    "chunk_text": "<h3>Calculating Gross and Net Wall Areas</h3><p>Determination of gross and net areas and volumes is fundamental to BIM.</p><p>Here is an interesting solution to determine the gross and net area of a wall, i.e. with and without its openings, making use of the SpatialElementGeometryCalculator and the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/the-temporary-transaction-trick-for-gross-slab-data.html\">\ntemporary transaction trick</a>.</p><p>The question was raised and solved by\n\nPhillip Miller of <a href=\"\">Kiwi Codes Solutions Ltd</a>, starting with the\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/bd-p/160\">Revit API discussion forum</a> thread on\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/door-window-areas/td-p/5535565\">door/window areas</a>:</p><p><strong>Question:</strong> I need to determine the cut areas of windows and doors in a wall. I thought this would be a simple matter of grabbing the BIP \"HOST_Area_Computed\" as with my testing that was returning the correct area.  It turns out that this is not the case from further testing.</p><p>Please refer to the attached RVT file with two doors inserted into a wall.  They look similar but one is reporting through RevitLookup 4m2 and the other 2m2.</p><p>Why is this?  What actually is \"HOST_Area_Computed\" reporting?  What is the most reliable way of getting the cut area of windows and doors?</p><p><strong>Answer:</strong> I cannot really say anything about the values reported by the HOST_Area_Computed parameter. That belongs to the user interface, as far as I am concerned, and you would have to ask a product usage expert or application engineer to explain the meaning of that.</p><p>For a pure API perspective, I assume you are aware of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/material-quantity-extraction.html\">\nRevit SDK MaterialQuantities sample</a>?</p><p>Does that not give you pretty much exactly what you need?</p><p><strong>Response:</strong> Thank you for your reply and also the link to the SDK example.  I will look into that in the morning.</p><p>To clarify what I'm doing, is, I want to find the surface areas of walls that are associated with Rooms.  To do this I'm making use of the SpatialElementGeometryCalculator class that is perfect as it does give areas of walls, floor and ceilings even if they are angled.  The only problem is it doesn't subtract things like doors and windows.</p><p>Your link to your blog has jogged my memory though with a workaround that I could implement.  I know what doors and windows are associated with the room and also the wall associated with the rooms face, so I could get the area of the wall (which does calculate the gross - openings), then remove the associated doors and windows grab the new area and minus it from the gross and then turn back the transaction.\nI'm pretty sure that will then give me the true area of the room's walls.</p><p><strong>Answer:</strong> Your use of the SpatialElementGeometryCalculator sounds very interesting.</p><p>The Building Coder currently does not provide any samples of using that except the rather complex\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/football-and-space-adjacency-for-heat-load-calculation.html#3\">\nspace adjacency for heat load calculation</a>.</p><p><strong>Response:</strong> Thank you so much for your suggestions.  The good news is that the temporary deletion of cutting objects in the wall works very well.  I'm not to sure why the BIP Area parameter is reporting odd values but I suppose that does not matter any more.</p><p>I took a look at your suggested SDK examples and they didn't really apply to my situation as I was requiring the surface areas of walls associated to rooms.\nAs a wall can span multiple rooms I had two choices.\nFirst up I used the room bounding object to extract the wall information.\nThe downside to this approach is that you had to take the boundary segment length and then multiply that by the wall height, hoping that the wall had a consistent wall height (not always the case).\nI also was requiring the floor and ceiling areas and information and this was achieved by shooting rays from the room location point directly up and down to gather that information.  We found the results in the approach to be a bit unreliable and not very accurate at times depending on how the walls etc. were modelled.</p><p>That led us to investigate the \"SpatialElementGeometryCalculator\" class, which after some trial and error does exactly what we were after.  I'm happy to provide you with some small sample code of this working for your users.</p><p><strong>Answer:</strong> It seems to me the one of the door areas seems to be counting something double.</p><p>Yes, of course the spatial element geometry calculator is much more suited to the need you describe.</p><p><strong>Response:</strong> Here is a very simple stripped down version of the above calculating the wall surface area, minus cutting family instances.</p><p>The advantages of this method over any other method that I have seen so far is that if your ceilings are room bounding and they are vaulted the wall areas are calculated correctly.</p><p>The solution is a VB.NET solution that could easily be converted to C# if needed (copy to an editor to see the truncated lines in full, or look at the module\n\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator/blob/master/SpatialElementGeometryCalculatorVb/extCmd.vb\">extCmd.vb on GitHub</a>:</p><pre class=\"code\">\n<span class=\"blue\">Imports</span> Autodesk.Revit.ApplicationServices\n<span class=\"blue\">Imports</span> System.IO\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB.Architecture\n<span class=\"blue\">Imports</span> System.Collections.Generic\n<span class=\"blue\">Imports</span> System.Diagnostics\n<span class=\"blue\">Imports</span> Autodesk.Revit.Attributes\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB\n<span class=\"blue\">Imports</span> BoundarySegment = Autodesk.Revit.DB.<span class=\"teal\">BoundarySegment</span>\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB.ExternalService\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI\n \n&lt;Autodesk.Revit.Attributes.<span class=\"teal\">Transaction</span>(Autodesk.Revit.Attributes.<span class=\"teal\">TransactionMode</span>.Manual)&gt; _\n&lt;Autodesk.Revit.Attributes.<span class=\"teal\">Regeneration</span>(Autodesk.Revit.Attributes.<span class=\"teal\">RegenerationOption</span>.Manual)&gt; _\n&lt;Autodesk.Revit.Attributes.<span class=\"teal\">Journaling</span>(Autodesk.Revit.Attributes.<span class=\"teal\">JournalingMode</span>.NoCommandData)&gt; _\n<span class=\"blue\">Public</span> <span class=\"blue\">Class</span> <span class=\"teal\">extCmd</span>\n  <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute(commandData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>, <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>, elements <span class=\"blue\">As</span> <span class=\"teal\">ElementSet</span>) <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n    <span class=\"blue\">Try</span>\n \n      <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> Autodesk.Revit.UI.<span class=\"teal\">UIApplication</span> = commandData.Application\n      <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span> = app.ActiveUIDocument.Document\n \n      <span class=\"blue\">Dim</span> roomCol <span class=\"blue\">As</span> <span class=\"teal\">FilteredElementCollector</span> = <span class=\"blue\">New</span> <span class=\"teal\">FilteredElementCollector</span>(app.ActiveUIDocument.Document).OfClass(<span class=\"blue\">GetType</span>(<span class=\"teal\">SpatialElement</span>))\n      <span class=\"blue\">Dim</span> s <span class=\"blue\">As</span> <span class=\"blue\">String</span> = <span class=\"maroon\">\"Finished populating Rooms with Boundary Data\"</span> + vbNewLine + vbNewLine\n      <span class=\"blue\">For</span> <span class=\"blue\">Each</span> e <span class=\"blue\">As</span> <span class=\"teal\">SpatialElement</span> <span class=\"blue\">In</span> roomCol\n        <span class=\"blue\">Dim</span> room <span class=\"blue\">As</span> <span class=\"teal\">Room</span> = <span class=\"blue\">TryCast</span>(e, <span class=\"teal\">Room</span>)\n        <span class=\"blue\">If</span> room <span class=\"blue\">IsNot</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n          <span class=\"blue\">Try</span>\n            <span class=\"blue\">Dim</span> spatialElementBoundaryOptions <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>()\n            spatialElementBoundaryOptions.SpatialElementBoundaryLocation = <span class=\"teal\">SpatialElementBoundaryLocation</span>.Finish\n            <span class=\"blue\">Dim</span> calculator1 <span class=\"blue\">As</span> <span class=\"blue\">New</span> Autodesk.Revit.DB.<span class=\"teal\">SpatialElementGeometryCalculator</span>(doc, spatialElementBoundaryOptions)\n            <span class=\"blue\">Dim</span> results <span class=\"blue\">As</span> <span class=\"teal\">SpatialElementGeometryResults</span> = calculator1.CalculateSpatialElementGeometry(room)\n \n            <span class=\"green\">' get the solid representing the room's geometry</span>\n            <span class=\"blue\">Dim</span> roomSolid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = results.GetGeometry()\n            <span class=\"blue\">Dim</span> iSegment <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> = 1\n            <span class=\"blue\">For</span> <span class=\"blue\">Each</span> face <span class=\"blue\">As</span> <span class=\"teal\">Face</span> <span class=\"blue\">In</span> roomSolid.Faces\n              <span class=\"blue\">Dim</span> subfaceList <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"teal\">SpatialElementBoundarySubface</span>) = results.GetBoundaryFaceInfo(face)\n              <span class=\"blue\">For</span> <span class=\"blue\">Each</span> subface <span class=\"blue\">As</span> <span class=\"teal\">SpatialElementBoundarySubface</span> <span class=\"blue\">In</span> subfaceList\n                <span class=\"blue\">If</span> subface.SubfaceType = <span class=\"teal\">SubfaceType</span>.Side <span class=\"blue\">Then</span> <span class=\"green\">' only interested in walls in this example</span>\n                  <span class=\"blue\">Dim</span> ele <span class=\"blue\">As</span> <span class=\"teal\">Element</span> = doc.GetElement(subface.SpatialBoundaryElement.HostElementId)\n                  <span class=\"blue\">Dim</span> subfaceArea <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = subface.GetSubface().Area\n                  <span class=\"blue\">Dim</span> netArea <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = sqFootToSquareM(calwallAreaMinusOpenings(subfaceArea, ele, doc, room))\n                  s += <span class=\"maroon\">\"Room \"</span> + room.Parameter(<span class=\"teal\">BuiltInParameter</span>.ROOM_NUMBER).AsString + <span class=\"maroon\">\" : Wall \"</span> + ele.Parameter(<span class=\"teal\">BuiltInParameter</span>.DOOR_NUMBER).AsString + <span class=\"maroon\">\" : Area \"</span> + netArea.ToString + <span class=\"maroon\">\"m2\"</span> + vbNewLine\n                <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n              <span class=\"blue\">Next</span>\n            <span class=\"blue\">Next</span>\n            s += vbNewLine\n          <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> <span class=\"teal\">Exception</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n \n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n      <span class=\"blue\">Next</span>\n      MsgBox(s, <span class=\"teal\">MsgBoxStyle</span>.Information, <span class=\"maroon\">\"Room Boundaries\"</span>)\n      <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n    <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> <span class=\"teal\">Exception</span>\n      MsgBox(ex.Message.ToString + vbNewLine +\n       ex.StackTrace.ToString)\n      <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Failed\n    <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Function</span> calwallAreaMinusOpenings(<span class=\"blue\">ByVal</span> subfaceArea <span class=\"blue\">As</span> <span class=\"blue\">Double</span>, <span class=\"blue\">ByVal</span> ele <span class=\"blue\">As</span> <span class=\"teal\">Element</span>, <span class=\"blue\">ByVal</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>, <span class=\"blue\">ByVal</span> room <span class=\"blue\">As</span> <span class=\"teal\">Room</span>) <span class=\"blue\">As</span> <span class=\"blue\">Double</span>\n    <span class=\"blue\">Dim</span> fiCol <span class=\"blue\">As</span> <span class=\"teal\">FilteredElementCollector</span> = <span class=\"blue\">New</span> <span class=\"teal\">FilteredElementCollector</span>(doc).OfClass(<span class=\"blue\">GetType</span>(<span class=\"teal\">FamilyInstance</span>))\n    <span class=\"blue\">Dim</span> lstTotempDel <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"teal\">ElementId</span>)\n    <span class=\"green\">'Now find the familyInstances that are associated to the current room</span>\n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> fi <span class=\"blue\">As</span> <span class=\"teal\">FamilyInstance</span> <span class=\"blue\">In</span> fiCol\n      <span class=\"blue\">If</span> fi.Parameter(<span class=\"teal\">BuiltInParameter</span>.HOST_ID_PARAM).AsValueString = ele.Id.ToString <span class=\"blue\">Then</span>\n        <span class=\"blue\">If</span> fi.Room <span class=\"blue\">IsNot</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n          <span class=\"blue\">If</span> fi.Room.Id = room.Id <span class=\"blue\">Then</span>\n            lstTotempDel.Add(fi.Id)\n            <span class=\"blue\">Continue For</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">If</span> fi.FromRoom <span class=\"blue\">IsNot</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n          <span class=\"blue\">If</span> fi.FromRoom.Id = room.Id <span class=\"blue\">Then</span>\n            lstTotempDel.Add(fi.Id)\n            <span class=\"blue\">Continue For</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">If</span> fi.ToRoom <span class=\"blue\">IsNot</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n          <span class=\"blue\">If</span> fi.ToRoom.Id = room.Id <span class=\"blue\">Then</span>\n            lstTotempDel.Add(fi.Id)\n            <span class=\"blue\">Continue For</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">Next</span>\n \n    <span class=\"blue\">If</span> lstTotempDel.Count &gt; 0 <span class=\"blue\">Then</span>\n      <span class=\"blue\">Dim</span> t <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc, <span class=\"maroon\">\"tmp Delete\"</span>)\n      <span class=\"blue\">Dim</span> wallnetArea <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = ele.Parameter(<span class=\"teal\">BuiltInParameter</span>.HOST_AREA_COMPUTED).AsDouble\n      t.Start()\n      doc.Delete(lstTotempDel)\n      doc.Regenerate()\n      <span class=\"blue\">Dim</span> wallGrossArea <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = ele.Parameter(<span class=\"teal\">BuiltInParameter</span>.HOST_AREA_COMPUTED).AsDouble\n      t.RollBack()\n      <span class=\"blue\">Dim</span> fiArea <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = wallGrossArea - wallnetArea\n      <span class=\"blue\">Return</span> subfaceArea - fiArea\n    <span class=\"blue\">Else</span>\n      <span class=\"blue\">Return</span> subfaceArea\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n \n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Function</span> sqFootToSquareM(<span class=\"blue\">ByVal</span> sqFoot <span class=\"blue\">As</span> <span class=\"blue\">Double</span>) <span class=\"blue\">As</span> <span class=\"blue\">Double</span>\n    <span class=\"blue\">Return</span> <span class=\"teal\">Math</span>.Round(sqFoot * 0.092903, 2)\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n<span class=\"blue\">End</span> <span class=\"blue\">Class</span>\n</pre><p><strong>Answer:</strong>\n\nThank you very much for your sample code.</p><p>I created a\n\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator\">SpatialElementGeometryCalculator GitHub repository</a> for\n\nit and placed both the original VB.NET implementation and my migration efforts to C# in it.</p><p>You can look at the\n\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator/commits/master\">list of commits</a> to\n\nsee the steps that I took:</p><ul>\n<li>Commits on Mar 17, 2015</li>\n<ul>\n<li>added comments – an hour ago</li>\n<li>added comments – an hour ago</li>\n<li>reformatted long lines and compare element id integer instead of string – an hour ago</li>\n<li>added comments – 2 hours ago</li>\n<li>cleaned up foreach statement and compiled successfully – 2 hours ago</li>\n</ul>\n<li>Commits on Mar 16, 2015</li>\n<ul>\n<li>C# code generated by disassembling VB.NET assembly using Reflector – 22 hours ago</li>\n<li>original VB.NET implementation – 23 hours ago</li>\n<li>added link to discussion forum thread – 23 hours ago</li>\n<li>added authors and tbc link – 23 hours ago</li>\n<li>added authors and tbc link – 23 hours ago</li>\n<li>Initial commit – 23 hours ago</li>\n</ul>\n</ul><p>I started off by compiling, installing and testing the VB.NET solution, then disassembling the VB.NET add-in assembly DLL using\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html\">\nReflector</a> to\n\ngenerate some raw C# code as a starting point.</p><p>The result was not ready to compile, so some additional steps were required, both just to compile it and for further clean-up.</p><p>One little enhancement that I added was to use an integer comparison instead of string comparison to identify the family instances hosted by the given wall.\nUsing <code>AsElementId().IntegerValue.Equals( Id.IntegerValue )</code> is more efficient than comparing AsValueString and ele.Id.ToString, since the string conversion is eliminated.\nInteger comparison is faster, because you are just comparing one single binary register instead of a whole sequence of bytes.</p><p>Another significant potential enhancement in calwallAreaMinusOpenings would be to use a parameter filter for the HOST_ID_PARAM parameter value instead of the .NET element id comparison to narrow down the family instances to those hosted by the wall before returning the filtered element collector result from Revit back to .NET.</p><p>That would vastly speed up the process for large models, because in the current implementation, all family instances are retrieved and marshalled across from native Revit to the .NET add-in memory space before the parameter value is checked in .NET.</p><p>As I pointed out repeatedly in the past, just marshalling all of the family instance data from the Revit memory space over to the add-in .NET realm costs a lot of time. Using a parameter filter speeds things up significantly, at least by 50 percent. In a large model, where the great majority of the family instances will not be hosted by the wall of interest, this could cause a huge performance improvement.</p><p>The end result looks like this in C#:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Convert square feet to square meters </span>\n  <span class=\"gray\">///</span><span class=\"green\"> with two decimal places precision.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">double</span> sqFootToSquareM( <span class=\"blue\">double</span> sqFoot )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Math</span>.Round( sqFoot * 0.092903, 2 );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Calculate wall area minus openings. Temporarily</span>\n  <span class=\"gray\">///</span><span class=\"green\"> delete all openings in a transaction that is</span>\n  <span class=\"gray\">///</span><span class=\"green\"> rolled back.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"subfaceArea\"&gt;</span><span class=\"green\">Initial gross subface area</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"wall\"&gt;&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"doc\"&gt;&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"room\"&gt;&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;&lt;/returns&gt;</span>\n  <span class=\"blue\">double</span> calwallAreaMinusOpenings(\n    <span class=\"blue\">double</span> subfaceArea,\n    <span class=\"teal\">Element</span> wall,\n    <span class=\"teal\">Room</span> room )\n  {\n    <span class=\"teal\">Document</span> doc = wall.Document;\n \n    <span class=\"teal\">Debug</span>.Assert(\n      room.Document.ProjectInformation.UniqueId.Equals(\n        doc.ProjectInformation.UniqueId ),\n      <span class=\"maroon\">\"expected wall and room from same document\"</span> );\n \n    <span class=\"green\">// Determine all openings in the given wall.</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> fiCol\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; lstTotempDel\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> fi <span class=\"blue\">in</span> fiCol )\n    {\n      <span class=\"green\">// The family instances hosted by this wall</span>\n      <span class=\"green\">// could be filtered out more efficiently using </span>\n      <span class=\"green\">// a filtered element collector parameter filter.</span>\n      <span class=\"green\">// This would be important in a large model.</span>\n \n      <span class=\"blue\">if</span>( fi.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.HOST_ID_PARAM )\n          .AsElementId().IntegerValue.Equals(\n            wall.Id.IntegerValue ) )\n      {\n        <span class=\"blue\">if</span>( ( fi.Room != <span class=\"blue\">null</span> )\n          &amp;&amp; ( fi.Room.Id == room.Id ) )\n        {\n          lstTotempDel.Add( fi.Id );\n        }\n        <span class=\"blue\">else</span> <span class=\"blue\">if</span>( ( fi.FromRoom != <span class=\"blue\">null</span> )\n          &amp;&amp; ( fi.FromRoom.Id == room.Id ) )\n        {\n          lstTotempDel.Add( fi.Id );\n        }\n        <span class=\"blue\">else</span> <span class=\"blue\">if</span>( ( fi.ToRoom != <span class=\"blue\">null</span> )\n          &amp;&amp; ( fi.ToRoom.Id == room.Id ) )\n        {\n          lstTotempDel.Add( fi.Id );\n        }\n      }\n    }\n \n    <span class=\"green\">// Determine total area of all openings.</span>\n \n    <span class=\"blue\">double</span> openingArea = 0;\n \n    <span class=\"blue\">if</span>( 0 &lt; lstTotempDel.Count )\n    {\n      <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n      <span class=\"blue\">double</span> wallAreaNet = wall.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.HOST_AREA_COMPUTED )\n          .AsDouble();\n \n      t.Start( <span class=\"maroon\">\"tmp Delete\"</span> );\n      doc.Delete( lstTotempDel );\n      doc.Regenerate();\n      <span class=\"blue\">double</span> wallAreaGross = wall.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.HOST_AREA_COMPUTED )\n          .AsDouble();\n      t.RollBack();\n \n      openingArea = wallAreaGross - wallAreaNet;\n    }\n \n    <span class=\"blue\">return</span> subfaceArea - openingArea;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">SpatialElementBoundaryOptions</span> sebOptions\n      = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n    sebOptions.SpatialElementBoundaryLocation\n      = <span class=\"teal\">SpatialElementBoundaryLocation</span>.Finish;\n \n    <span class=\"teal\">Result</span> rc;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">FilteredElementCollector</span> roomCol\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">SpatialElement</span> ) );\n \n      <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Finished populating Rooms with \"</span>\n        + <span class=\"maroon\">\"Boundary Data\\r\\n\\r\\n\"</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">SpatialElement</span> e <span class=\"blue\">in</span> roomCol )\n      {\n        <span class=\"teal\">Room</span> room = e <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n \n        <span class=\"blue\">if</span>( room != <span class=\"blue\">null</span> )\n        {\n          <span class=\"blue\">try</span>\n          {\n            Autodesk.Revit.DB\n              .<span class=\"teal\">SpatialElementGeometryCalculator</span>\n                calc = <span class=\"blue\">new</span> Autodesk.Revit.DB\n                  .<span class=\"teal\">SpatialElementGeometryCalculator</span>(\n                    doc, sebOptions );\n \n            <span class=\"teal\">SpatialElementGeometryResults</span> results\n              = calc.CalculateSpatialElementGeometry(\n                room );\n \n            <span class=\"teal\">Solid</span> roomSolid = results.GetGeometry();\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> roomSolid.Faces )\n            {\n              <span class=\"teal\">IList</span>&lt;<span class=\"teal\">SpatialElementBoundarySubface</span>&gt;\n                subfaceList = results.GetBoundaryFaceInfo(\n                  face );\n \n              <span class=\"blue\">foreach</span>( <span class=\"teal\">SpatialElementBoundarySubface</span>\n                subface <span class=\"blue\">in</span> subfaceList )\n              {\n                <span class=\"blue\">if</span>( subface.SubfaceType\n                  == <span class=\"teal\">SubfaceType</span>.Side )\n                {\n                  <span class=\"teal\">Element</span> wall = doc.GetElement(\n                    subface.SpatialBoundaryElement\n                      .HostElementId );\n \n                  <span class=\"blue\">double</span> subfaceArea = subface\n                    .GetSubface().Area;\n \n                  <span class=\"blue\">double</span> netArea = sqFootToSquareM(\n                    calwallAreaMinusOpenings(\n                      subfaceArea, wall, room ) );\n \n                  s = s + <span class=\"maroon\">\"Room \"</span>\n                    + room.get_Parameter(\n                      <span class=\"teal\">BuiltInParameter</span>.ROOM_NUMBER )\n                        .AsString()\n                    + <span class=\"maroon\">\" : Wall \"</span> + wall.get_Parameter(\n                      <span class=\"teal\">BuiltInParameter</span>.ALL_MODEL_MARK )\n                        .AsString()\n                    + <span class=\"maroon\">\" : Area \"</span> + netArea.ToString()\n                    + <span class=\"maroon\">\" m2\\r\\n\"</span>;\n                }\n              }\n            }\n            s = s + <span class=\"maroon\">\"\\r\\n\"</span>;\n          }\n          <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> )\n          {\n          }\n        }\n      }\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Room Boundaries\"</span>, s);\n \n      rc = <span class=\"teal\">Result</span>.Succeeded;\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Room Boundaries\"</span>,\n        ex.Message.ToString() + <span class=\"maroon\">\"\\r\\n\"</span>\n        + ex.StackTrace.ToString() );\n \n      rc = <span class=\"teal\">Result</span>.Failed;\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n}\n</pre><p>Let's look at the results obtained from the little house model generated by the ADN Xtra labs:</p><center>\n<img alt=\"Little house 3D view\" src=\"img/segc_little_house_3d.png\" width=\"268\"/>\n</center><p>The front wall hosts a door and two windows, so its area differs from the back wall's:</p><center>\n<img alt=\"Little house plan view\" src=\"img/segc_little_house_plan.png\" width=\"268\"/>\n</center><p>The add-in reports the following net wall areas:</p><center>\n<img alt=\"Little house wall area results\" src=\"img/segc_result_msg.png\" width=\"366\"/>\n</center><p>As you can see, the door and the two small windows consume a bit less than 2.5 square meters of wall area.</p><p>The complete source code, Visual Solution files and add-in manifests for both the VB.NET and C# implementations are hosted by the\n\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator\">SpatialElementGeometryCalculator GitHub repository</a>,\n\nand the version presented here is\n\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator/releases/tag/2015.0.0.0\">\nrelease 2015.0.0.0</a>.</p><p>Many thanks to Phillip for exploring and developing this powerful solution!</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1296_spatial_calculator",
    "header_text": "Wall Area and Orientation",
    "local_header_href": "#wall-area-and-orientation",
    "chunk_text": "<h4>Wall Area and Orientation</h4><p>Another recent query that might also make use of this discussion was raised by Arif Hanif in a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/room-and-wall-adjacency.html?cid=6a00e553e16897883301b8d0ec5711970c#comment-6a00e553e16897883301b8d0ec5711970c\">\ncomment</a> on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/room-and-wall-adjacency.html\">room and wall adjacency</a>:\n\n<p><strong>Question:</strong> Love the website, I have recently started to learn C# and have started exploring the API to help with MEP Design. It has been frustrating dealing with gbXML. I am trying to get Wall Area and Orientation for Room to Excel. Can you point me to some of your past postings that could help me.</p>\n<p><strong>Answer:</strong> There are a lot of discussions on getting the wall area, e.g. for mass quantities, the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/material-quantity-extraction.html\">\nRevit SDK MaterialQuantities sample</a> mentioned\n\nabove and the discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/2d-polygon-areas-and-outer-loop.html\">\n2D polygon areas and outer loop</a>.</p>\n<p>For the orientation, here are some starting points:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/azimuth.html\">Azimuth</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/project-location.html\">Facing North</a></li>\n</ul>\n<p>Those initial ponderings led to these further discussions:</p>\n<!-- 0027 0230 0275 0292 0730 0738 0787 -->\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/unrotate-north.html\">Unrotate North</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/rotate-true-north.html\">Rotate True North</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">Real-world concrete corner coordinates</a></li>\n</ul>\n<p>We put in some additional work on converting Revit project coordinates to real-world ones, including the orientation transformation, when working on the setout point application:</p>\n<!-- 0806 1234 -->\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/structural-concrete-setout-point-add-in.html\">Structural concrete setout point add-in</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">Concrete setout points for Revit Structure 2015</a></li>\n</ul>\n<p>I hope this helps.</p>\n<p>Enjoy.</p>\n</p>"
  }
]