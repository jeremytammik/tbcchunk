[
  {
    "original_filename": "0742_new_sdk_samples",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0742_new_sdk_samples",
    "header_text": "New Revit 2013 SDK Samples",
    "local_header_href": "#new-revit-2013-sdk-samples",
    "chunk_text": "<h3>New Revit 2013 SDK Samples</h3><p>Revit 2013 has been released, and I presented an overview of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html\">\nRevit 2013 API</a> two\n\ndays ago.\n\n<p>As always, the use of most of the API features is demonstrated by various SDK samples.\nFor a better understanding of the use and contents of the Revit SDK in general, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/getting-started-with-the-revit-2012-api.html\">\ngetting started</a> and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/preparing-for-a-hands-on-revit-api-training.html\">\nself-preparation</a> guides.\n\n<p>Here is an overview of the new samples:\n\n<ul>\n<li><a href=\"#1\">ModelessForm_ExternalEvent and ModelessForm_IdlingEvent (ModelessDialog)</a>\n<li><a href=\"#2\">ProgressNotifier (Events)</a>\n<li><a href=\"#3\">RoutingPreferenceTools</a>\n<li><a href=\"#4\">UIAPI</a>\n<li><a href=\"#5\">WorkThread (MultiThreading)</a>\n</li></li></li></li></li></ul>\n<p>These samples are all related to the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nadd-in integration</a> functionality, \n\nexcept for the RoutingPreferenceTools which obviously demonstrate some of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#3\">\nMEP related enhancements</a>.\n\n<!-- i.e. use of the new Idling functionality and external events, the progress bar notifications and general -->\n<p>By the way, the 'VSTA Samples' folder was renamed to 'Macro Samples' since \n\n<a href=\"http://en.wikipedia.org/wiki/Visual_Studio_Tools_for_Applications\">\nVSTA</a> was \n\nreplaced by the open source \n\n<a href=\"http://en.wikipedia.org/wiki/SharpDevelop\">\nSharpDevelop</a> IDE.\n\n\n<a name=\"1\"></a>\n<h4>ModelessForm_ExternalEvent and ModelessForm_IdlingEvent</h4>\n<p>Both of these display and show how to interact with a modeless form.\nOne way to do this is to use the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/idling\">\nIdling event</a> initially provided in Revit 2012, \n\nwhich we have discussed so much and in such depth in the past. \n\n<p>The ModelessForm_IdlingEvent sample should clarify many of the issues we dealt with, and is also related the material presented by Arnošt Löbel in his Autodesk University 2011 class\n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9879&amp;jid=1763185\">\nCP5381</a> on \n\nasynchronous interactions and managing modeless UI.\n\n<p>The ModelessForm_ExternalEvent sample demonstrates an easier way to implement this interaction using the new external event interface.\n\n\n\n\n<a name=\"2\"></a>\n<h4>ProgressNotifier</h4>\n<p>The ProgressNotifier sample displays progress information for an action in a stack data structure for easier analysis. It demonstrates how to subscribe to the ProgressNotify related events, access properties in the event handler arguments, and organize the subtransaction progress information into a stack.\n\n\n\n<a name=\"3\"></a>\n<h4>RoutingPreferenceTools</h4>\n<p>The RoutingPreferenceTools sample provides a number of MEP pipe routing preference tools.\n\n<p>This sample contains three commands, one for analysis and reporting purposes, two for importing and exporting routing preferences to XML:\n\n<ul>\n<li>Routing Preference Analysis: Analyze the routing preferences of a given pipe type to check for common problems, using the routing preferences API to look at all rules and criteria for a given PipeType.\n\n<li>Routing Preference Builder with its two commands CommandReadPreferences and CommandWritePreferences: Set pipe type, fitting, and routing preferences in a project from data in an XML file and export these preferences to XML for archival, documentation, and collaboration purposes, allowing a user to work with routing preference data in a shareable XML format suitable for reuse in a wide variety of BIM management environments.\n</li></li></ul>\n<a name=\"4\"></a>\n<h4>UIAPI</h4>\n<p>The UIAPI sample demonstrates a number of the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nadd-in integration API features</a> that \n\nI already listed, including embedding a Revit view as WPF control inside its own dialogue, the new drag and drop API, and the Options dialogue support for custom extensions using arbitrary WPF components.\nThis sample was also shown at the DevDays 2011 conferences.\n\n\n\n<a name=\"5\"></a>\n<h4>WorkThread</h4>\n<p>The WorkThread sample demonstrates utilizing the Idling event in a multi-threaded application to communicate with the Revit API from an external work thread.\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0742_new_sdk_samples",
    "header_text": "ModelessForm_ExternalEvent and ModelessForm_IdlingEvent",
    "local_header_href": "#modelessform_externalevent-and-modelessform_idlingevent",
    "chunk_text": "<h4>ModelessForm_ExternalEvent and ModelessForm_IdlingEvent</h4><p>Both of these display and show how to interact with a modeless form.\nOne way to do this is to use the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/idling\">\nIdling event</a> initially provided in Revit 2012, \n\nwhich we have discussed so much and in such depth in the past. \n\n<p>The ModelessForm_IdlingEvent sample should clarify many of the issues we dealt with, and is also related the material presented by Arnošt Löbel in his Autodesk University 2011 class\n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9879&amp;jid=1763185\">\nCP5381</a> on \n\nasynchronous interactions and managing modeless UI.\n\n<p>The ModelessForm_ExternalEvent sample demonstrates an easier way to implement this interaction using the new external event interface.\n\n\n\n\n<a name=\"2\"></a>\n<h4>ProgressNotifier</h4>\n<p>The ProgressNotifier sample displays progress information for an action in a stack data structure for easier analysis. It demonstrates how to subscribe to the ProgressNotify related events, access properties in the event handler arguments, and organize the subtransaction progress information into a stack.\n\n\n\n<a name=\"3\"></a>\n<h4>RoutingPreferenceTools</h4>\n<p>The RoutingPreferenceTools sample provides a number of MEP pipe routing preference tools.\n\n<p>This sample contains three commands, one for analysis and reporting purposes, two for importing and exporting routing preferences to XML:\n\n<ul>\n<li>Routing Preference Analysis: Analyze the routing preferences of a given pipe type to check for common problems, using the routing preferences API to look at all rules and criteria for a given PipeType.\n\n<li>Routing Preference Builder with its two commands CommandReadPreferences and CommandWritePreferences: Set pipe type, fitting, and routing preferences in a project from data in an XML file and export these preferences to XML for archival, documentation, and collaboration purposes, allowing a user to work with routing preference data in a shareable XML format suitable for reuse in a wide variety of BIM management environments.\n</li></li></ul>\n<a name=\"4\"></a>\n<h4>UIAPI</h4>\n<p>The UIAPI sample demonstrates a number of the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nadd-in integration API features</a> that \n\nI already listed, including embedding a Revit view as WPF control inside its own dialogue, the new drag and drop API, and the Options dialogue support for custom extensions using arbitrary WPF components.\nThis sample was also shown at the DevDays 2011 conferences.\n\n\n\n<a name=\"5\"></a>\n<h4>WorkThread</h4>\n<p>The WorkThread sample demonstrates utilizing the Idling event in a multi-threaded application to communicate with the Revit API from an external work thread.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0742_new_sdk_samples",
    "header_text": "ProgressNotifier",
    "local_header_href": "#progressnotifier",
    "chunk_text": "<h4>ProgressNotifier</h4><p>The ProgressNotifier sample displays progress information for an action in a stack data structure for easier analysis. It demonstrates how to subscribe to the ProgressNotify related events, access properties in the event handler arguments, and organize the subtransaction progress information into a stack.\n\n\n\n<a name=\"3\"></a>\n<h4>RoutingPreferenceTools</h4>\n<p>The RoutingPreferenceTools sample provides a number of MEP pipe routing preference tools.\n\n<p>This sample contains three commands, one for analysis and reporting purposes, two for importing and exporting routing preferences to XML:\n\n<ul>\n<li>Routing Preference Analysis: Analyze the routing preferences of a given pipe type to check for common problems, using the routing preferences API to look at all rules and criteria for a given PipeType.\n\n<li>Routing Preference Builder with its two commands CommandReadPreferences and CommandWritePreferences: Set pipe type, fitting, and routing preferences in a project from data in an XML file and export these preferences to XML for archival, documentation, and collaboration purposes, allowing a user to work with routing preference data in a shareable XML format suitable for reuse in a wide variety of BIM management environments.\n</li></li></ul>\n<a name=\"4\"></a>\n<h4>UIAPI</h4>\n<p>The UIAPI sample demonstrates a number of the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nadd-in integration API features</a> that \n\nI already listed, including embedding a Revit view as WPF control inside its own dialogue, the new drag and drop API, and the Options dialogue support for custom extensions using arbitrary WPF components.\nThis sample was also shown at the DevDays 2011 conferences.\n\n\n\n<a name=\"5\"></a>\n<h4>WorkThread</h4>\n<p>The WorkThread sample demonstrates utilizing the Idling event in a multi-threaded application to communicate with the Revit API from an external work thread.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0742_new_sdk_samples",
    "header_text": "RoutingPreferenceTools",
    "local_header_href": "#routingpreferencetools",
    "chunk_text": "<h4>RoutingPreferenceTools</h4><p>The RoutingPreferenceTools sample provides a number of MEP pipe routing preference tools.\n\n<p>This sample contains three commands, one for analysis and reporting purposes, two for importing and exporting routing preferences to XML:\n\n<ul>\n<li>Routing Preference Analysis: Analyze the routing preferences of a given pipe type to check for common problems, using the routing preferences API to look at all rules and criteria for a given PipeType.\n\n<li>Routing Preference Builder with its two commands CommandReadPreferences and CommandWritePreferences: Set pipe type, fitting, and routing preferences in a project from data in an XML file and export these preferences to XML for archival, documentation, and collaboration purposes, allowing a user to work with routing preference data in a shareable XML format suitable for reuse in a wide variety of BIM management environments.\n</li></li></ul>\n<a name=\"4\"></a>\n<h4>UIAPI</h4>\n<p>The UIAPI sample demonstrates a number of the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nadd-in integration API features</a> that \n\nI already listed, including embedding a Revit view as WPF control inside its own dialogue, the new drag and drop API, and the Options dialogue support for custom extensions using arbitrary WPF components.\nThis sample was also shown at the DevDays 2011 conferences.\n\n\n\n<a name=\"5\"></a>\n<h4>WorkThread</h4>\n<p>The WorkThread sample demonstrates utilizing the Idling event in a multi-threaded application to communicate with the Revit API from an external work thread.\n</p></p></p></p>"
  },
  {
    "original_filename": "0742_new_sdk_samples",
    "header_text": "UIAPI",
    "local_header_href": "#uiapi",
    "chunk_text": "<h4>UIAPI</h4><p>The UIAPI sample demonstrates a number of the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nadd-in integration API features</a> that \n\nI already listed, including embedding a Revit view as WPF control inside its own dialogue, the new drag and drop API, and the Options dialogue support for custom extensions using arbitrary WPF components.\nThis sample was also shown at the DevDays 2011 conferences.\n\n\n\n<a name=\"5\"></a>\n<h4>WorkThread</h4>\n<p>The WorkThread sample demonstrates utilizing the Idling event in a multi-threaded application to communicate with the Revit API from an external work thread.\n</p></p>"
  },
  {
    "original_filename": "0742_new_sdk_samples",
    "header_text": "WorkThread",
    "local_header_href": "#workthread",
    "chunk_text": "<h4>WorkThread</h4><p>The WorkThread sample demonstrates utilizing the Idling event in a multi-threaded application to communicate with the Revit API from an external work thread.\n</p>"
  }
]