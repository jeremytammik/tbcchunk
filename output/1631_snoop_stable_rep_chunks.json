[
  {
    "original_filename": "1631_snoop_stable_rep",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\nRevitLookup snoops stable representation of references in #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/snoopstablerep\nExport geometry to AutoCAD via XML using #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/snoopstablerep\n\nАлександр Пекшев aka Modis @Pekshev submitted\na very succinct and useful pull request for RevitLookup that\nI integrated right away, and provides many other valuable inputs as well\n&ndash; Snoop stable representation of References\n&ndash; Project point on plane correction\n&ndash; Revit export geometry to AutoCAD via XML\n&ndash; RevitExportGeometryToAutocad\n&ndash; Description\n&ndash; Versions\n&ndash; Using\n&ndash; Example...\n\n--->"
  },
  {
    "original_filename": "1631_snoop_stable_rep",
    "header_text": "Export Geometry and Snoop Stable Representation",
    "local_header_href": "#export-geometry-and-snoop-stable-representation",
    "chunk_text": "### Export Geometry and Snoop Stable Representation\n\nАлександр Пекшев aka Modis [@Pekshev](https://github.com/Pekshev) submitted\na very succinct and useful pull request for [RevitLookup](https://github.com/jeremytammik/RevitLookup) that\nI integrated right away, and provides many other valuable inputs as well:\n\n- [Snoop stable representation of References](#2)\n- [Project point on plane correction](#3)\n- [Revit export geometry to AutoCAD via XML](#4)\n    - [RevitExportGeometryToAutocad](#4.1)\n    - [Description](#4.2)\n    - [Versions](#4.3)\n    - [Using](#4.4)\n    - [Example](#4.5)\n\n\n####<a name=\"2\"></a>Snoop Stable Representation of References\n\nAlexander's raised\nthe [issue #40](https://github.com/jeremytammik/RevitLookup/issues/40) and subsequently\nsubmitted [pull request #41](https://github.com/jeremytammik/RevitLookup/pull/41) to\ndisplay the result of the `ConvertToStableRepresentation` method when snooping `Reference` objects.\n\nI integrated his improvements\nin [RevitLookup](https://github.com/jeremytammik/RevitLookup)\n[release 2018.0.0.7](https://github.com/jeremytammik/RevitLookup/releases/tag/2018.0.0.7).\n\nHere is the result of snooping a reference from a dimension between two walls:\n\n<center>\n<img src=\"img/dimension_reference_stable_rep.png\" alt=\"Dimension reference stable representation\" width=\"600\"/>\n</center>\n\nMany thanks to Alexander for his efficient enhancement!\n\nTake a look at\nthe [diff from the previous version](https://github.com/jeremytammik/RevitLookup/compare/2018.0.0.6...2018.0.0.7) to\nsee how elegantly this was achieved.\n\n\n####<a name=\"3\"></a>Project Point on Plane Correction\n\nAlexander also raised some other interesting issues in in the past in comments on\nthe [wall graph](http://thebuildingcoder.typepad.com/blog/2008/12/wall-graph.html#comment-3490286732),\n[point in polygon algorithm](http://thebuildingcoder.typepad.com/blog/2010/12/point-in-polygon-containment-algorithm.html#comment-3504414240),\n[wall elevation profile](http://thebuildingcoder.typepad.com/blog/2015/01/getting-the-wall-elevation-profile.html#comment-3759178237) and,\nmost recently and significantly,\non [projecting](http://thebuildingcoder.typepad.com/blog/2014/09/planes-projections-and-picking-points.html#comment-3765799540)\n[a point](http://thebuildingcoder.typepad.com/blog/2014/09/planes-projections-and-picking-points.html#comment-3779858513)\n[onto a plane](http://thebuildingcoder.typepad.com/blog/2014/09/planes-projections-and-picking-points.html#comment-3779960537),\nuncovering an error in The Building Coder samples `ProjectOnto` method that projects a given 3D `XYZ` point onto a plane.\n\nI originally presented this method in the discussion\non [planes, projections and picking points](http://thebuildingcoder.typepad.com/blog/2014/09/planes-projections-and-picking-points.html):\n[projecting a 3D point onto a plane](http://thebuildingcoder.typepad.com/blog/2014/09/planes-projections-and-picking-points.html#12).\n\nSwapping the sign seems to have fixed it, as proved\nby [Alexander's ProjectPointOnPlanetest sample add-in](https://github.com/Pekshev/ProjectPointOnPlanetest):\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Project&nbsp;given&nbsp;3D&nbsp;XYZ&nbsp;point&nbsp;onto&nbsp;plane.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;ProjectOnto(\n&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">Plane</span>&nbsp;plane,\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;d&nbsp;=&nbsp;plane.SignedDistanceTo(&nbsp;p&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:green;\">//XYZ&nbsp;q&nbsp;=&nbsp;p&nbsp;+&nbsp;d&nbsp;*&nbsp;plane.Normal;&nbsp;//&nbsp;wrong&nbsp;according&nbsp;to&nbsp;Ruslan&nbsp;Hanza&nbsp;and&nbsp;Alexander&nbsp;Pekshev&nbsp;in&nbsp;their&nbsp;comments&nbsp;http://thebuildingcoder.typepad.com/blog/2014/09/planes-projections-and-picking-points.html#comment-3765750464</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;q&nbsp;=&nbsp;p&nbsp;-&nbsp;d&nbsp;*&nbsp;plane.Normal;\n\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Assert(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Util</span>.IsZero(&nbsp;plane.SignedDistanceTo(&nbsp;q&nbsp;)&nbsp;),\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;expected&nbsp;point&nbsp;on&nbsp;plane&nbsp;to&nbsp;have&nbsp;zero&nbsp;distance&nbsp;to&nbsp;plane&quot;</span>&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;q;\n}\n</pre>\n\n\n####<a name=\"4\"></a>Revit Export Geometry to AutoCAD via XML\n\nBrowsing Alexander's other GitHub repositories, one that particularly caught my eye is his\n[RevitExportGeometryToAutocad add-in](https://github.com/Pekshev/RevitExportGeometryToAutocad),\ndocumented in Russian.\n\nI read the Google-translated English description and think this sounds as if it might be very useful to others as well:\n\n####<a name=\"4.1\"></a>RevitExportGeometryToAutocad\n\nAuxiliary libraries for rendering geometry from Revit to AutoCAD in the form of simple objects (a segment, an arc, a point) by exporting to XML.\n\n####<a name=\"4.2\"></a>Description\n\nLibraries are useful in the development of plug-ins related to geometry, for convenient visual perception of the results.\nIn my opinion, viewing the result in AutoCAD is much more convenient.\n\nThis project provides two libraries (one for Revit, the second for AutoCAD) and a demo project for Revit.\n\n####<a name=\"4.3\"></a>Versions\n\nThe project for AutoCAD is built using libraries from AutoCAD 2013. It will work with all subsequent versions of AutoCAD.\n\nThe Revit project is built using Revit 2015 libraries. It should work with subsequent versions as well (tested for 2015-2018).\n\n####<a name=\"4.4\"></a>Using\n\nThe solution also contains a demo project for Revit.\nDescription of use for the example of this project:\n\n**In Revit**\n\nConnect to the project a link to the `RevitGeometryExporter.dll` library.\n\nBefore using export methods, you need to specify the folder to export xml\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;setup&nbsp;export&nbsp;folder</span>\n&nbsp;&nbsp;ExportGeometryToXml.FolderName&nbsp;=&nbsp;@&nbsp;<span style=\"color:#a31515;\">&quot;C:\\Temp&quot;</span>;\n</pre>\n\nBy default, the library has the path *C:\\Temp\\RevitExportXml*.\nIn the absence of a directory, it will be created.\n\nCall one or more methods for exporting geometry, for example:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Wall</span>&gt;&nbsp;wallsToExport&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Wall</span>&gt;();\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;reference&nbsp;<span style=\"color:blue;\">in</span>&nbsp;selectionResult&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Wall</span>&nbsp;wall&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">Wall</span>)&nbsp;doc.GetElement(&nbsp;reference&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;wallsToExport.Add(&nbsp;wall&nbsp;);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;ExportGeometryToXml.ExportWallsByFaces(&nbsp;wallsToExport,&nbsp;<span style=\"color:#a31515;\">&quot;walls&quot;</span>&nbsp;);\n</pre>\n\nOr\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">FamilyInstance</span>&gt;&nbsp;familyInstances&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">FamilyInstance</span>&gt;();\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;reference&nbsp;<span style=\"color:blue;\">in</span>&nbsp;selectionResult&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;el&nbsp;=&nbsp;doc.GetElement(&nbsp;reference&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;el&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">FamilyInstance</span>&nbsp;familyInstance)\n&nbsp;&nbsp;&nbsp;&nbsp;familyInstances.Add(&nbsp;familyInstance&nbsp;);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;ExportGeometryToXml.ExportFamilyInstancesByFaces(&nbsp;familyInstances,&nbsp;<span style=\"color:#a31515;\">&quot;families&quot;</span>,&nbsp;<span style=\"color:blue;\">false</span>&nbsp;);\n</pre>\n\n**In AutoCAD**\n\nUse the NETLOAD command to load the `CadDrawGeometry.dll` library.\n\nUse one of the two available commands:\n\n- DrawFromOneXml &ndash; Draw geometry from one specified XML file\n- DrawXmlFromFolder &ndash; Draw the geometry from the specified folder in which the XML files reside\n\n####<a name=\"4.5\"></a>Example\n\nElements in Revit:\n\n<center>\n<img src=\"img/ap_rvt_to_xml_to_acad_1.png\" alt=\"Elements in Revit\" width=\"400\"/>\n</center>\n\nThe result of exporting and rendering geometry in AutoCAD:\n\n<center>\n<img src=\"img/ap_rvt_to_xml_to_acad_2.png\" alt=\"Export result rendered in AutoCAD\" width=\"400\"/>\n</center>\n\nMany thanks again to Alexander for sharing this!"
  }
]