[
  {
    "original_filename": "0366_cable_tray_fitting",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0366_cable_tray_fitting",
    "header_text": "Cable Tray Orientation and Fittings",
    "local_header_href": "#cable-tray-orientation-and-fittings",
    "chunk_text": "<h3>Cable Tray Orientation and Fittings</h3><p>Here is an extra long post, seeing as I will be occupied with a training course the coming two days.\n\n<p>In the overview of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/the-revit-mep-2011-api.html\">\nRevit MEP 2011 API</a>, \n\nI mentioned that new elements have been introduced to represent cable trays and conduits.\n\n<p>We already had a look at the creation of new conduit elements in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">\npipe to conduit converter</a>. \n\n<p>The creation of cable tray elements is equally simple, making use of the static Create method on the CableTray class.\n\n<p>This is another example of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html#10\">\nnew element creation paradigm</a> instead of \n\nthe creation document classAutodesk.Revit.Creation.Document, a second generation API automatically generated with RIDL, the Revit Interface Definition Language.\n\n<p>In order to automatically create a whole cable tray run, however, we need both the straight segment cable tray elements and also the fittings to connect them with each other, elbows to turn corners and branching elements to represent junctions.\n\n<p>This is harder to implement for cable trays than for conduits, because the former have a rectangular cross section.\nTo connect a horizontal cable tray segment with a vertical one requires the latter to be precisely oriented so that the elbow will line up properly with both.\nThis is simpler for conduits, which have a round cross section.\n\n<p>This led to the following questions and exhaustive exploration of cable tray fittings and orientation:\n\n<p><strong>Question:</strong> We are trying to create cable tray objects through API. \nWhen we create them manually, the joints (cable tray fittings) are automatically created. \nHow can we achieve this programmatically?\n\n<p><strong>Answer:</strong> The situation for cable trays is the same as for duct and pipe elements, i.e. it is up to the application to explicitly create the fittings in between the segments as it sees fit.\n\n<p>There is no way to auto-generate the fittings. \nYou can however use the fitting APIs to create cable tray fittings yourself. \nFor example, NewElbowFitting, NewTeeFitting, NewTransitionFitting, NewCrossFitting, should all produce valid cable tray fittings when connected to valid cable tray objects. \n\n<p>You can create a fitting to join two connectors (at end of cable tray) by calling the Revit.Creation.Document.NewXyxFitting methods such as NewElbowFitting, NewTeeFitting etc.  \nEach end of the cable tray segment has a connector.\nThese  methods take the connectors as input arguments. \nTo use them, you can implement the following steps:\n\n<ol>\n<li>Retrieve the connectors belonging to the cable tray, e.g. via cableTray.ConnectorManager.Connectors.\n<li>Determine a pair of connectors which should be connected, for instance by checking their position, connector type, or something else.\n<li>Call the appropriate NewXyzFitting method to create the Fitting element to join the connectors.\n</li></li></li></ol>\n<p>The AutoRoute and AvoidObstruction Revit SDK samples demonstrate some uses of the new fitting methods.\n\n<p>This explanation immediately leads to the next question:\n\n<p><strong>Question:</strong> When we create cable tray objects programmatically, they always appear parallel to X axis, like this:</p>\n<center>\n<img alt=\"Cable trays without fittings\" src=\"img/cabletray_without_fittings.png\"/>\n</center>\n<p>This is the result of some initial test code that creates individual cable tray elements, but no fittings.\nIt naively creates the cable trays one by one using CableTray.Create, and as you can see that does not generate the fittings nor rotate the trays into the right position relative to each other either.\n\n<p>When we create them manually through the user interface, the cable trays automatically rotate to line up with their predecessor element, and the appropriate fittings are added to connect them:</p>\n<center>\n<img alt=\"Cable trays with fittings\" src=\"img/cabletray_with_fittings.png\"/>\n</center>\n<p>How can we achieve this through the API, please?\nWhat is the correct way to programmatically create a run of connected cable trays, i.e. add fittings and correct relative positions?\nCan you provide a sample that shows how to do this?\n\n<p><strong>Answer:</strong> As said, you can simply use the New*Fitting methods to place the fittings between runs. \nHowever, I assume that the application has to ensure that the alignment and correct orientation is set up before they can create the fitting to connect properly.\n\n<p>I initially tried to use the following code based on the ideas used in the AutoRoute SDK sample, but it does not work as expected:\n\n<pre class=\"code\">\n  <span class=\"teal\">ElementId</span> idType = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( 411325 );\n  <span class=\"teal\">ElementId</span> idLevel = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( 311 );\n \n  <span class=\"teal\">XYZ</span> start1 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -30.49, 38.42, 10.05 );\n  <span class=\"teal\">XYZ</span> end1 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -20.43, 30.83, 10.05 );\n  <span class=\"teal\">CableTray</span> tray1 = <span class=\"teal\">CableTray</span>.Create( \n    doc, idType, start1, end1, idLevel );\n \n  <span class=\"teal\">XYZ</span> start2 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -20.43, 30.83, 10.05 );\n  <span class=\"teal\">XYZ</span> end2 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -20.43, 30.83, 13.33 );\n  <span class=\"teal\">CableTray</span> tray2 = <span class=\"teal\">CableTray</span>.Create( \n    doc, idType, start2, end2, idLevel );\n \n  <span class=\"teal\">Connector</span> c1start, c1end = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c <span class=\"blue\">in</span> \n    tray1.MEPSystem.ConnectorManager.Connectors )\n  {\n    <span class=\"blue\">if</span>( c.Origin.IsAlmostEqualTo( start1 ) )\n    {\n      c1start = c;\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span>( c.Origin.IsAlmostEqualTo( end1 ) )\n    {\n      c1end = c;\n    }\n  }\n \n  <span class=\"teal\">Connector</span> c2start = <span class=\"blue\">null</span>, c2end;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c <span class=\"blue\">in</span> \n    tray2.MEPSystem.ConnectorManager.Connectors )\n  {\n    <span class=\"blue\">if</span>( c.Origin.IsAlmostEqualTo( start2 ) )\n    {\n      c2start = c;\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span>( c.Origin.IsAlmostEqualTo( end2 ) )\n    {\n      c2end = c;\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != c1end &amp;&amp; <span class=\"blue\">null</span> != c2start )\n  {\n    doc.Create.NewElbowFitting( c1end, c2start );\n  }\n</pre>\n<p>The first reason it does not work is that the cable tray MEPSystem property is null, so the connectors cannot be found.\nInstead, the cable tray element has its own ConnectorManager property, which provides access to the required connectors. \n\n<p>After modifying the code to use that and adding the call to connect the two connectors, it succeeds, but the call to insert the elbow fitting still fails. \nAlso, if I skip that call, the cable tray is still not rotated so that it matches up with its connected neighbour, even if the connectors are successfully connected:\n\n<pre class=\"code\">\n  <span class=\"teal\">Connector</span> c1start, c1end = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c <span class=\"blue\">in</span> \n    tray1.ConnectorManager.Connectors )\n  {\n    <span class=\"blue\">if</span>( c.Origin.IsAlmostEqualTo( start1 ) )\n    {\n      c1start = c;\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span>( c.Origin.IsAlmostEqualTo( end1 ) )\n    {\n      c1end = c;\n    }\n  }\n \n  <span class=\"teal\">Connector</span> c2start = <span class=\"blue\">null</span>, c2end;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c <span class=\"blue\">in</span> \n    tray2.ConnectorManager.Connectors )\n  {\n    <span class=\"blue\">if</span>( c.Origin.IsAlmostEqualTo( start2 ) )\n    {\n      c2start = c;\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span>( c.Origin.IsAlmostEqualTo( end2 ) )\n    {\n      c2end = c;\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != c1end &amp;&amp; <span class=\"blue\">null</span> != c2start )\n  {\n    c1end.ConnectTo( c2start );\n \n    <span class=\"green\">// this throws</span>\n    <span class=\"green\">// Autodesk.Revit.Exceptions</span>\n    <span class=\"green\">// .InvalidOperationException: </span>\n    <span class=\"green\">// \"failed to insert elbow\".</span>\n \n    doc.Create.NewElbowFitting( c1end, c2start );\n  }\n</pre>\n<p>The call NewElbowFitting which is used in the AutoRoute sample throws the exception \"failed to insert elbow\".\n\n<p>I see that you are testing with cable tray elements, which may be adding geometrical complications to getting the test code right.\nI would suggest trying the same code using conduit elements first, since they have a simpler geometry shape. \nFor example, the conduit probably does not care which direction is \"up\", etc. \nAlso, another idea would be to draw some geometry using the user interface and analyse that. \nFor example, lay out a run including pipe, elbow, and pipe, then extract the coordinates from it and try to recreate it through API. That way you will know the geometry is possible to create, the radius and ends points for the elbow are \"correct\", etc. \n\n<p>From the initial exploration, we see that an application wishing to create a complete connected cable tray run will have to ensure that the cable trays are correctly aligned and also connect them with each other.\n\n<p>The AutoRoute and AvoidObstructions Revit SDK samples provide a useful starting point, showing how to create a connected mechanical HVAC duct system and pipe deviations around obstructions. Similar principles apply for cable trays as well. The main differences between duct and cable tray are:\n\n<ol>\n<li>Cable tray has no system.\n<li>Cable tray and fittings have specific orientations.\n</li></li></ol>\n<p>One needs to manually place and orient cable trays in the proper locations before creating the fittings between them.\nThe connections can be created regardless, however.\n\n<p>In the AutoRoute sample, the method CreateDucts calls the Revit API method NewDuct. \nIt inserts a new duct element into the model and returns its two connectors at the end points. \nAfter creating the individual duct elements, the connectors are hooked up with each other using methods like\n\n<pre class=\"code\">\n  m_document.Create.NewElbowFitting(\n    connectors[2], baseConn2 );\n</pre>\n<p>The duct connectors are retrieved through their MEPSystem property and its connector manager, which returns the connector set.\n\n<p>In the case of cable trays, the MEPSystem property is null, so it cannot be used to retrieve the connectors. \nHappily, they have their own connector manager property themselves, so there is no need to go through the MEPSystem property.\n\n<p>When I tried to connect the cable trays in a manner similar to the ducts in the AutoRoute sample, an exception was thrown:\n\n<pre>\n  Autodesk.Revit.Exceptions.InvalidOperationException: \n    \"failed to insert elbow\".\n</pre>\n<p>During the further analysis of how to set up the cable trays appropriately to insert the fittings,\none initial idea was that one should not be connecting the two connectors for the two items directly, but foreshortening them so that the connector can be properly inserted, e.g. leaving some space for the fittings. E.g., if the elbow radius is 6', the end of the first tray should be 6' away from the nominal intersection point, and the start of the second one as well, so that the elbow fits into the gap.\n\n<p>The AutoRoute sample does indeed cut back the ducts by a certain distance:\n\n<pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"blue\">const</span> <span class=\"blue\">double</span> min1FittingLength = 1;\n</pre>\n<p>As we shall see below, however, this is not required for conduits and cable trays.\n\n<p>When exploring the orientation of the cable trays in more depth, the next question was how to know what the correct orientation is, and how to set it once it is known?\n\n<p>One can look at the cable tray's connectors, either the property 'Angle' or some part of 'CoordinateSystem', to determine its orientation.\n\n<p>It also looks like some of the content is built 'on its side':</p>\n<center>\n<img alt=\"Cable tray fitting properties\" src=\"img/cabletray_fitting_properties.png\"/>\n</center>\n<p>There are separate fittings for the various bends in the 'Conduit Type' definition:</p>\n<center>\n<img alt=\"Cable tray fitting types\" src=\"img/cabletray_fitting_types.png\"/>\n</center>\n<p>Looking at the Vertical Outside family, it is 'on its side', and would need to be rotated 90 degrees on the 'front/back' axis. \nOne still needs to figure out if that is +90 or -90:</p>\n<center>\n<img alt=\"Cable tray vertical outside fitting\" src=\"img/cabletray_vertical_outside_fitting.png\"/>\n</center>\n<p>There may be more rules used to orient content. \nThey can be determined by inspecting the various bend families.\n\n<p>To continue with the topic of connecting the cable tray segments:\n\n<p>For testing purposes, it is significantly easier to start exploring the issue with conduit instead of cable tray elements. \nConnecting the conduits is simpler, because they have no orientation, being symmetrical.\n\n<p>It does not appear that the Conduit or CableTray elements care about the \"foreshortening\" or \"lengthening\" of the objects to get a proper fit. The main issue is that the objects have to be \"oriented\" correctly, otherwise Revit issues a message indicating it is not correct. Basically, it cannot create a proper fitting due to alignment.\n\n<p>I started by testing creating conduit runs using objects that were all created in the same level plane. This works fine with no additional orientation required and shows that the lengthening and shortening is performed automatically as required to make a good fit.\nThe command CmdConduit in the attached sample code demonstrates this.\n\n<p>I then moved to cable tray and that also worked with the same simple test data used for the conduits, only switching to creating cable trays instead.\nAn example in the plane is provided by the sample command CmdCableTray2.\n\n<p>The problem comes when creating the cable trays in different planes, because then the cable trays are not oriented appropriately well by default by the creation methods, and there is no way to specify something like an \"up\" normal during creation.\n\n<p>So it started by looking like this where the second one going \"up\" is not well oriented to make a fitting:</p>\n<center>\n<img alt=\"Cable tray badly oriented\" src=\"img/cabletray_badly_oriented.png\"/>\n</center>\n<p>Then in the code I \"rotated\" the location property to align it with the first one:</p>\n<center>\n<img alt=\"Cable tray rotated\" src=\"img/cabletray_rotated.png\"/>\n</center>\n<p>Once it was \"aligned\", the fitting connected it with no further problems.\nIn fact, the cals made by CmdCableTray3 automatically provide the proper shortening and lengthening as required to make the fitting work:</p>\n<center>\n<img alt=\"Cable tray connected\" src=\"img/cabletray_connected.png\"/>\n</center>\n<p>Looking in more detail at the orientation of the cable trays relative to each other, we see that access to their coordinate systems is provided by the CoordinateSystem property on the Connector object. For the ladder cable tray, it seems that the connector coordinate system Z axis points straight out of the cable tray, parallel to its location line. The X axis points to the left hand side of the cable tray, and the Y axis points down:</p>\n<center>\n<img alt=\"Cable tray coordinate system\" src=\"img/cabletray_connector_coordinate_system.png\"/>\n</center>\n<p>So, for instance in order to create a 'flat' or 'sideways' elbow between two cable trays lying in the XY plane, you need to ensure that both of their connector Y axes are vertical.\n\n<p>With the Z axis of the connector coordinate system pointing straight out of the tray, and the Y axis perpendicular to the direction of the ladder rungs, in order to create an elbow between a cable tray lying in the XY plane with a vertical one, one has to rotate the vertical tray so that the Y axis of its end connector is aligned with the Z axis of its predecessor's starting connector:\n\n<pre class=\"code\">\n  <span class=\"teal\">Transform</span> t1 = c1end.CoordinateSystem;\n  <span class=\"teal\">Transform</span> t2 = c2start.CoordinateSystem;\n \n  <span class=\"blue\">double</span> angle = t2.BasisY.AngleOnPlaneTo( \n    t1.BasisZ, <span class=\"teal\">XYZ</span>.BasisZ );\n \n  <span class=\"teal\">Line</span> axis = app.Create.NewLineUnbound( \n    start2, <span class=\"teal\">XYZ</span>.BasisZ );\n \n  tray2.Location.Rotate( axis, angle );\n \n  c1end.ConnectTo( c2start );\n \n  doc.Create.NewElbowFitting( c1end, c2start );\n</pre>\n<p>The sample command CmdCableTray4 finally produces the following, which is exactly what we are aiming for:</p>\n<center>\n<img alt=\"Vertical cable tray connected\" src=\"img/cabletray_vertical_connected.png\"/>\n</center>\n<p>One can also cause a direction swapping fitting to be created by rotating the vertical tray so that its start connector X axis is aligned with the predecessor direction:\n\n<pre class=\"code\">\n  <span class=\"blue\">double</span> angle = t2.BasisX.AngleOnPlaneTo( \n    t1.BasisZ, <span class=\"teal\">XYZ</span>.BasisZ );\n</pre>\n<p>This results in this direction swapping fitting:</p>\n<center>\n<img alt=\"Vertical cable tray flipped and connected\" src=\"img/cabletray_vertical_connected_and_flipped.png\"/>\n</center>\n<p>Here is the entire \n\n<a href=\"zip/CableTray.zip\">\nCableTray</a>\n\nsource code and the Visual Studio solution used to create each of the examples discussed above.\nEach is implemented in its own separate command class. \nIt also includes a cleaned up version of the initial code:\n\n<ul>\n<li>CmdCableTray – initial sample code.\n<li>CmdConduit – connecting conduits in the XY plane.\n<li>CmdCableTray2 – connecting cable trays in the XY plane.\n<li>CmdCableTray3 – connecting cable trays outside the XY plane.\n<li>CmdCableTray4 – connecting the first 'twisted' cable trays from the initial sample code.\n</li></li></li></li></li></ul>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]