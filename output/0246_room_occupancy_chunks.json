[
  {
    "original_filename": "0246_room_occupancy",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0246_room_occupancy",
    "header_text": "Room Occupancy",
    "local_header_href": "#room-occupancy",
    "chunk_text": "<h3>Room Occupancy</h3><p>Shifali asked a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/new-2010-events.html#comment-6a00e553e1689788330120a6ab278e970c\">\nquestion</a> on \n\nreading and writing the room occupancy:\n\n<p><strong>Question:</strong> We get the document from ExternalCommandData object's Application and the project information in document. \nWe need to store the construction type of the current document or project file. \nMoreover, we get the Room elements of the document but we need to store the occupancy type of each room for applying the International Building Code for compliance reports of the project.\n\n<p>We also need access to the BuildingConstruction and BuildingType in the document ProjectInformation.gbXMLSettings.\n\n<p><strong>Answer:</strong> I started by looking at the room occupancy issue, and found that this is actually very simple and straightforward and has been covered in numerous previous posts dealing with the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/exploring-element-parameters.html\">\nexploration of element parameters</a>.\n\nStill, since this is a very typical and recurring issue, I will happily revisit it.\n\n<p>I started up Revit and created a new model with a room or two.\nLeft clicking one of these, and selecting Element Properties... I see the parameter that I presume you are looking for listed as Occupancy under the Identity Data heading.\nSo that is where to find this data in the user interface.\nI entered an arbitrary string value there in order to start exploring how to access the same data programmatically.\n\n<p>Next, I start up \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/rvtmgddbg.html\">\nRvtMgdDbg</a>\n\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/rvtmgddbg-for-revit-2010.html\">for 2010</a>)\n\nand use that to look at the room element parameters through the API via Add-Ins &gt; RvtMgdDbg &gt; Snoop Current Selection... &gt; Parameters &gt; Occupancy.\nIt shows the same string I just entered, so I seem to have found the required data.\nSince I would like to access it language independently, I need to determine the built-in parameter enumeration value for this parameter, if one exists. \nIf I don't care about that, I can use the language dependent parameter name \"Occupancy\" to identify the data.\nThe built-in parameter can be determined by using the Built-in Enums Snoop or Built-in Enums Map buttons in RvtMgdDbg, which show me that the built-in parameter I am looking for is ROOM_OCCUPANCY.\n\n<p>I can also look at the element parameters and see the associated built-in parameters using the Revit API introduction labs\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/deeper-parameter-exploration.html\">\nbuilt-in parameter checker</a>.\n\n<p>Both of these tools show me that the parameter is string valued and read-write, so there should be no problem modifying it.\n\n<p>I implemented a new Building Coder sample command CmdSetRoomOccupancy to demonstrate making use of this to read and write the parameter and do nothing else.\nFor experienced Revit developers, this is a rather trivial command, since all it does is read and write the value of a single element parameter.\nStill, it should be useful to point people to in the future who raise this frequently asked question.\nThe command retrieves either the currently selected rooms or all rooms in the model if nothing has been preselected using my GetSelectedElementsOrAll utility method.\nFor each room, its occupancy parameter is read and incremented.\nThis is achieved using the BumpStringSuffix helper method.\n\n<p>BumpStringSuffix increments the numerical suffix of a given string.\nIf the string already ends in a sequence of digits representing a number, it returns a string with the number incremented by one.\nOtherwise, it returns the original string with a suffix \"1\" appended.\nIn case the original string is null, \"1\" is returned:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">char</span>[] _digits = <span class=\"blue\">null</span>;\n\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> BumpStringSuffix( <span class=\"blue\">string</span> s )\n{\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == s || 0 == s.Length )\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"1\"</span>;\n  }\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _digits )\n  {\n    _digits = <span class=\"blue\">new</span> <span class=\"blue\">char</span>[] {\n      <span class=\"maroon\">'0'</span>, <span class=\"maroon\">'1'</span>, <span class=\"maroon\">'2'</span>, <span class=\"maroon\">'3'</span>, <span class=\"maroon\">'4'</span>, \n      <span class=\"maroon\">'5'</span>, <span class=\"maroon\">'6'</span>, <span class=\"maroon\">'7'</span>, <span class=\"maroon\">'8'</span>, <span class=\"maroon\">'9'</span>\n    };\n  }\n  <span class=\"blue\">int</span> n = s.Length;\n  <span class=\"blue\">string</span> t = s.TrimEnd( _digits );\n  <span class=\"blue\">if</span>( t.Length == n )\n  {\n    t += <span class=\"maroon\">\"1\"</span>;\n  }\n  <span class=\"blue\">else</span>\n  {\n    n = t.Length;\n    n = <span class=\"blue\">int</span>.Parse( s.Substring( n ) );\n    ++n;\n    t += n.ToString();\n  }\n  <span class=\"blue\">return</span> t;\n}\n</pre>\n<p>Here is the method BumpOccupancy which makes use of BumpStringSuffix to increment the room occupancy parameter on a given room element.\nIt reads the value of the element ROOM_OCCUPANCY parameter.\nIf it ends in a number, it increments that number, otherwise it appends \"1\":\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> BumpOccupancy( <span class=\"teal\">Element</span> e )\n{\n  <span class=\"teal\">Parameter</span> p = e.get_Parameter( \n    <span class=\"teal\">BuiltInParameter</span>.ROOM_OCCUPANCY );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p )\n  {\n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"{0} has no room occupancy parameter.\"</span>,\n      <span class=\"teal\">Util</span>.ElementDescription( e ) );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">string</span> occupancy = p.AsString();\n \n    <span class=\"blue\">string</span> newOccupancy = BumpStringSuffix( \n      occupancy );\n \n    p.Set( newOccupancy );\n  }\n}\n</pre>\n<p>Now we can apply the BumpOccupancy method to all or the currently selected rooms in the model.\nHere is the entire code of our external command Execute method which does so:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; rooms = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n  <span class=\"blue\">if</span>( !<span class=\"teal\">Util</span>.GetSelectedElementsOrAll(\n    rooms, doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Room</span> ) ) )\n  {\n    <span class=\"teal\">Selection</span> sel = doc.Selection;\n    message = ( 0 &lt; sel.Elements.Size )\n      ? <span class=\"maroon\">\"Please select some room elements.\"</span>\n      : <span class=\"maroon\">\"No room elements found.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n  }\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Room</span> room <span class=\"blue\">in</span> rooms )\n  {\n    BumpOccupancy( room );\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n</pre>\n<p>Here is\n\n<a href=\"zip/bc11054.zip\">\nversion 1.1.0.54</a>\n\nof the complete Building Coder sample source code and Visual Studio solution including the new command.</p>\n<p>So, I would hope that this amply answers the question on accessing and modifying the room occupancy, and also serves as a model for further simple parameter setting explorations.\n\n<p>Turning to look at the BuildingConstruction and BuildingType values in the ProjectInformation gbXMLSettings, I once again resort to RvtMgdDbg.\nI select Add-Ins &gt; RvtMgdDbg &gt; Snoop Db... &gt; ProjectInfo &gt; Project Information 69280 &gt; gbXML Settings ... and crash.\nWell, first a message was displayed saying that this is only available in Revit MEP.\n\n<p>Ok, I restarted in Revit MEP and navigated through the same path down to the gbXML settings, which I can enter and explore this time. \nI see the building construction and building type properties.\nThe former is an object, the latter displays a value kOffice.\n\n<p>Actually, I also see en entry for the gbXMLParamElem in the root directory of the RvtMgdDbg database snoop:</p>\n<center>\n<img alt=\"Snoop gbXMLParamElem\" src=\"img/gbXMLParamElem.png\"/>\n</center>\n<p>The element id shows me that this is the same object as the one stored in the project information.\n\n<p>So obviously there is no problem accessing this data either.\ngbXMLParamElem is one of the classes defined by the Revit API and can be accessed using the standard Revit \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/filter-for-a-family.html\">\nelement filters</a>, \n\nfor instance.\nThe desired properties are both members of this class:\n\n<ul>\n<li>BuildingConstruction returns the Project Information Building Construction object. \n<li>BuildingType gets or sets the Project Information Building Type.\n</li></li></ul>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]