[
  {
    "original_filename": "1911_adjacent_wall_room",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- for all rooms, map all their bounding walls to the neighbouring rooms; then, add a list of all neighbouring rooms to the comment field on each wall \n  https://forums.autodesk.com/t5/revit-api-forum/extract-the-names-of-the-rooms-separated-by-a-wall/m-p/10428696\n  another example of a relationship inversion:\n  thee room maintains a relationship to its bounding elements, the walls.\n  by retrieving that mapping, we can int=vert the raltionship and add information to each wall about its adjacent rooms.\n  A [Relationship Inverter](http://thebuildingcoder.typepad.com/blog/2008/10/relationship-in.html) was\n  the topic of one of The Building Coder's very first posts, #16, in October 2008.  \n\n- get all warnings\n  https://forums.autodesk.com/t5/revit-api-forum/get-a-list-of-all-the-revit-warnings/m-p/10399203\n   schnierer.gabor\n  GÃ¡bor Schnierer\n  > Using the awesome code\n  from [@FAIR59](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/2083518)\n  and [@perry.swoboda](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/7186046) here\n  is a spreadsheet containing\n  the [BuiltInFailures for Revit 2022](https://docs.google.com/spreadsheets/d/12glULCZL_yJkq7ko_vI-gEHu69dUIoiCRnmvdLpIoSU/edit#gid=0) with\n  their Severity, Classname, Guid and Description. Might come handy.\n\n- revitlookup updates + installation\n\ntwitter:\n\nadd #thebuildingcoder\n\n#RevitAPI add-in installer sample, RevitLookup enhancements, a list of built-in @AutodeskRevit failures, and how to determine and list all adjacent rooms and walls @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/adjacentrooms\n\nWe discuss enhancements to RevitLookup,  and a neat utility to determine all room-wall adjacencies\n&ndash; Adjacent rooms and walls\n&ndash; List of all built-in failures\n&ndash; Recent RevitLookup updates\n&ndash; RevitLookup installation...\n\nlinkedin:\n\n#RevitAPI add-in installer sample, RevitLookup enhancements, a list of built-in Revit failures, and how to determine and list all adjacent rooms and walls \n\nhttps://autode.sk/adjacentrooms\n\nWe discuss enhancements to RevitLookup,  and a neat utility to determine all room-wall adjacencies:\n\n- Adjacent rooms and walls\n- List of all built-in failures\n- Recent RevitLookup updates\n- RevitLookup installation...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n**Question:** \n\n**Answer:**\n\n**Response:**  \n\nMany thanks to  for this very helpful explanation!\n\n-->"
  },
  {
    "original_filename": "1911_adjacent_wall_room",
    "header_text": "Installer, List of Failures, Adjacent Rooms and Walls",
    "local_header_href": "#installer-list-of-failures-adjacent-rooms-and-walls",
    "chunk_text": "### Installer, List of Failures, Adjacent Rooms and Walls\n\nWe discuss enhancements to RevitLookup, a list of all built-in Revit failures, and a neat utility to determine all room-wall adjacencies:\n\n- [Adjacent rooms and walls](#2)\n- [List of all built-in failures](#3)\n- [Recent RevitLookup updates](#4)\n- [RevitLookup installation](#5)\n\n<center>\n<img src=\"img/wall_adjacent_rooms.jpg\" alt=\"Wall adjacent rooms\" title=\"Wall adjacent rooms\" width=\"200\"/> <!-- 286 -->\n</center>"
  },
  {
    "original_filename": "1911_adjacent_wall_room",
    "header_text": "Adjacent Rooms and Walls",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Adjacent Rooms and Walls\n\nThe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) question\non how to [extract the names of the rooms separated by a wall](https://forums.autodesk.com/t5/revit-api-forum/extract-the-names-of-the-rooms-separated-by-a-wall/m-p/10428696)\nprompted Richard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas\nto share a neat utility method implementing much more than that:\n\n**Question:** I use Revit to model my projects, then I export the BOMs to a spreadsheet that creates my quotes for clients.\nHowever, I am running into a problem:\n\nWhen I need to demolish or create a wall, I would like to see its location, if any, appear in the BOM. \n\nFor example, if I break a wall between the kitchen and the living room, I would like to see \"kitchen\" or \"living room\", or even both, next to the surfaces. But I can't find a way to implement this.\n\nDo you have any ideas to help me?\n\n**Answer:** Via the API, you can use\nthe [`Room.GetBoundarySegments` method](https://www.revitapidocs.com/2022/8e0919af-6172-9d16-26d2-268e42f7e936.htm).\n\nThis will return a nested list of `BoundarySegment` objects on which you can query their `ElementId` or `LinkElementId` property.\n\nThen it is just a case or matching up the ElementId with the wall id and pairing that with the room(s). \n\nSome walls will be part of more than two rooms:\n\n<pre class=\"code\">\nPrivate Function Obj_210629a( _\n  ByVal commandData As Autodesk.Revit.UI.ExternalCommandData, _\n  ByRef message As String, _\n  ByVal elements As Autodesk.Revit.DB.ElementSet) _\n  As Result\n\n  Dim UIDoc As UIDocument = commandData.Application.ActiveUIDocument\n  If UIDoc Is Nothing Then Return Result.Cancelled Else\n  Dim IntDoc As Document = UIDoc.Document\n\n  Dim FEC As New FilteredElementCollector(IntDoc)\n  Dim ECF As New ElementCategoryFilter(BuiltInCategory.OST_Rooms)\n  Dim Els As List(Of ElementId) = FEC.WherePasses(ECF) _\n    .WhereElementIsNotElementType.ToElementIds\n\n  Dim WallRefs As New Dictionary(Of ElementId, List(Of String))\n  For i = 0 To Els.Count - 1\n    Dim Rm As Room = IntDoc.GetElement(Els(i))\n\n    Dim BSegs As IList(Of IList(Of BoundarySegment)) = _\n      Rm.GetBoundarySegments(New SpatialElementBoundaryOptions)\n      \n    For x = 0 To BSegs.Count - 1\n      Dim BSegs0 As IList(Of BoundarySegment) = BSegs(x)\n      For y = 0 To BSegs0.Count - 1\n        Dim Bseg As BoundarySegment = BSegs0(y)\n        If Bseg.ElementId <> ElementId.InvalidElementId Then\n          Dim CurRef As List(Of String)\n          If WallRefs.ContainsKey(Bseg.ElementId) Then\n            CurRef = WallRefs(Bseg.ElementId)\n          Else\n            CurRef = New List(Of String)\n            WallRefs.Add(Bseg.ElementId, CurRef)\n          End If\n\n          Dim Rm_el As Element = Rm \n          Dim RoomName As String = Rm_el.Name\n          If CurRef.Contains(RoomName) = False Then\n            CurRef.Add(RoomName)\n          End If\n        End If\n      Next\n    Next\n  Next\n\n  Dim FECw As New FilteredElementCollector(IntDoc)\n  Dim ECFw As New ElementClassFilter(GetType(Wall))\n  Dim Elsw As List(Of ElementId) = FECw.WherePasses(ECFw).ToElementIds\n\n  Using Tx As New Transaction(IntDoc, \"Name walls based on rooms\")\n    If Tx.Start = TransactionStatus.Started Then\n\n      For i = 0 To Elsw.Count - 1\n        'Some boundary segments will not relate to walls.\n        If WallRefs.ContainsKey(Elsw(i)) Then\n\n          Dim El As Element = IntDoc.GetElement(Elsw(i))\n\n          'Using instance comments parameter for convenience\n          \n          Dim P As Parameter = El.Parameter(BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS)\n          If P Is Nothing Then Continue For Else\n\n          Dim Refs As List(Of String) = WallRefs(Elsw(i))\n          Refs.Sort()\n          Dim V As New Text.StringBuilder\n          For j = 0 To Refs.Count - 1\n            If j = Refs.Count - 1 Then\n              V.Append(Refs(j))\n            Else\n              V.Append(Refs(j) & \" / \")\n            End If\n          Next\n          P.Set(V.ToString)\n\n        End If\n      Next\n      Tx.Commit()\n    End If\n  End Using\n  Return Result.Succeeded\nEnd Function\n</pre>\n\nThanks to Richard for sharing this very nice VB.NET implementation!\n\nSpelling it out, this does two things:\n\n- For all rooms, for each of its bounding walls, note the room to wall relationship\n- Use this to create a dictionary mapping the wall element id to a list of the rooms it bounds\n- For each wall element id in the dictionary, add a list of the names of the rooms it bounds to its comment field \n\nI ported the VB.NET code to C# and [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples/compare/2022.0.150.14...2022.0.150.15):\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;For&nbsp;all&nbsp;rooms,&nbsp;determine&nbsp;all&nbsp;adjacent&nbsp;walls,</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;create&nbsp;dictionary&nbsp;mapping&nbsp;walls&nbsp;to&nbsp;adjacent&nbsp;rooms,</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;and&nbsp;tag&nbsp;the&nbsp;walls&nbsp;with&nbsp;the&nbsp;adjacent&nbsp;room&nbsp;names.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">void</span>&nbsp;TagWallsWithAdjacentRooms(&nbsp;Document&nbsp;doc&nbsp;)\n{\n&nbsp;&nbsp;FilteredElementCollector&nbsp;rooms\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;FilteredElementCollector(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsNotElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfCategory(&nbsp;BuiltInCategory.OST_Rooms&nbsp;);\n \n&nbsp;&nbsp;Dictionary&lt;ElementId,&nbsp;List&lt;<span style=\"color:blue;\">string</span>&gt;&gt;&nbsp;map_wall_to_rooms\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Dictionary&lt;ElementId,&nbsp;List&lt;<span style=\"color:blue;\">string</span>&gt;&gt;();\n \n&nbsp;&nbsp;SpatialElementBoundaryOptions&nbsp;opts\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;SpatialElementBoundaryOptions();\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;Room&nbsp;room&nbsp;<span style=\"color:blue;\">in</span>&nbsp;rooms&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;IList&lt;IList&lt;BoundarySegment&gt;&gt;&nbsp;loops&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;room.GetBoundarySegments(&nbsp;opts&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>&nbsp;(IList&lt;BoundarySegment&gt;&nbsp;loop&nbsp;<span style=\"color:blue;\">in</span>&nbsp;loops&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;BoundarySegment&nbsp;seg&nbsp;<span style=\"color:blue;\">in</span>&nbsp;loop&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElementId&nbsp;idWall&nbsp;=&nbsp;seg.ElementId;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;ElementId.InvalidElementId&nbsp;!=&nbsp;idWall&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(!map_wall_to_rooms.ContainsKey(idWall))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_wall_to_rooms.Add(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idWall,&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;<span style=\"color:blue;\">string</span>&gt;()&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;room_name&nbsp;=&nbsp;room.Name;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(!map_wall_to_rooms[idWall].Contains(&nbsp;room_name&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_wall_to_rooms[&nbsp;idWall&nbsp;].Add(&nbsp;room_name&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;Transaction&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Transaction(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Add&nbsp;list&nbsp;of&nbsp;adjacent&nbsp;rooms&nbsp;to&nbsp;wall&nbsp;comments&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;Dictionary&lt;ElementId,&nbsp;List&lt;<span style=\"color:blue;\">string</span>&gt;&gt;.KeyCollection&nbsp;ids\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;map_wall_to_rooms.Keys;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;ElementId&nbsp;id&nbsp;<span style=\"color:blue;\">in</span>&nbsp;ids&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Element&nbsp;wall&nbsp;=&nbsp;doc.GetElement(&nbsp;id&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parameter&nbsp;p&nbsp;=&nbsp;wall.get_Parameter(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BuiltInParameter.ALL_MODEL_INSTANCE_COMMENTS&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;p&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;s&nbsp;=&nbsp;<span style=\"color:blue;\">string</span>.Join(&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;/&nbsp;&quot;</span>,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_wall_to_rooms[&nbsp;id&nbsp;]&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.Set(&nbsp;s&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;}\n}\n</pre>\n\nNote that the C# version processes all elements whose element id appears as a key in the wall to room mapping, regardless of whether they are in fact a wall or not.\n\nThe VB.NET version uses a filtered element collector to retrieve only wall elements.\n\nYou need to decide which approach better matches your specific requirements.\n\nThis is yet another example of a relationship inversion:\nevery room maintains a relationship to its bounding elements, the walls.\nby retrieving and processing that mapping, we can invert the relationship and use that to add information to each wall about its adjacent rooms.\n\nThis is a common Revit API task. \nA similar [relationship inverter](http://thebuildingcoder.typepad.com/blog/2008/10/relationship-in.html) was\nthe topic of one of The Building Coder's very first posts, #16, in October 2008."
  },
  {
    "original_filename": "1911_adjacent_wall_room",
    "header_text": "List of All Built-In Failures",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> List of All Built-In Failures\n\nGÃ¡bor Schnierer very kindly shares a list of\nall [built-in failures](https://www.revitapidocs.com/2021.1/eda15d4a-6b14-ee6b-0c44-6011077e6cfc.htm) in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non how to [get all warnings](https://forums.autodesk.com/t5/revit-api-forum/get-a-list-of-all-the-revit-warnings/m-p/10399203):\n\n> Using the awesome code\nfrom [@FAIR59](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/2083518)\nand [@perry.swoboda](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/7186046),\nhere is\na [spreadsheet containing the BuiltInFailures for Revit 2022](https://docs.google.com/spreadsheets/d/12glULCZL_yJkq7ko_vI-gEHu69dUIoiCRnmvdLpIoSU/edit#gid=0) with\ntheir `Severity`, `Classname`, `Guid` and `Description`.\nMight come handy.\n\nThank you very much, GÃ¡bor!"
  },
  {
    "original_filename": "1911_adjacent_wall_room",
    "header_text": "Recent RevitLookup Updates",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Recent RevitLookup Updates\n\nThe number of pull requests to add enhancements \nto [RevitLookup](https://github.com/jeremytammik/RevitLookup) has\nincreased recently significantly.\n\nThat is great news!\n\nEach individual improvement may be small and simple.\nHowever, they all add up, and the entire community ends up enjoying a brilliant and full-fledged tool.\n\nHere are the important enhancements made since \nthe [previous bunch of updates](https://thebuildingcoder.typepad.com/blog/2021/05/revitlookup-update-fuslogvw-and-override-joins.html). \n\n- [2022.0.0.10](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.10) fix error where element cannot be retrieved for an element id because `SupportedColorFillCategoryIds` returns category ids instead\n- [2022.0.0.11](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.11) add `PlanViewRange` functionality to display view range level id and offset\n- [2022.0.0.13](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.13) add `OnLoad` to increase and optimise width of Snoop window value `ListView` last column\n- [2022.0.0.15](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.15) add RevitLookup.Installation\n\nMany thanks to\nall [contributors](https://github.com/jeremytammik/RevitLookup/graphs/contributors) for\nyour great support!"
  },
  {
    "original_filename": "1911_adjacent_wall_room",
    "header_text": "RevitLookup Installation",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> RevitLookup Installation\n\nLuiz Henrique [@ricaun](https://github.com/ricaun) Cassettari created\nthe [RevitLookup.Installation](https://github.com/ricaun/RevitLookup.Installation) project,\na simple installation using [Inno Setup](https://jrsoftware.org/isinfo.php) to\nextract the files to the `ApplicationPlugins` folder.\n\nIt generates a digitally signed version of RevitLookup and includes multi-version support for the Revit releases 2017, 2018, 2019, 2020, 2021 and 2022.\n\nIt can obviously also be used as a starting point for your own add-in installer.\n\nMany thanks to Luiz Henrique for this and his other nice contributions!"
  }
]