[
  {
    "original_filename": "0544_element_id_equality",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0544_element_id_equality",
    "header_text": "Comparing Element Id for Equality",
    "local_header_href": "#comparing-element-id-for-equality",
    "chunk_text": "<h3>Comparing Element Id for Equality</h3><p>Here is a very fundamental question that I was uncertain about myself, but happily Adam Nagy now clarified together with the development team:\n\n<p><strong>Question:</strong> Is it safe to compare two element ids directly, or is it better to compare their integer values using the IntegerValue property instead? \n\n<p>In other words, given two ElementId variables id and id2, can I safely and reliably compare them using the following code?\n\n<pre class=\"code\">\n  <span class=\"blue\">bool</span> equal = ( id == id2 );\n</pre>\n\nOr should I better use the following?\n\n<pre class=\"code\">\n  <span class=\"blue\">bool</span> equal = ( id.IntegerValue == id2.IntegerValue ); \n</pre>\n<p><strong>Answer:</strong> The ElementId comparison operator was added in the Revit 2011 API, so you can safely use both versions, and they should always return the same result.\n\n<p>By the way, I am uncertain but vaguely remember that unlike the == operator, the Equals method worked even before 2011.\n\n<p>Here is a quick test that I created and ran in Revit 2011 which shows that (id1 == id2) works correctly. \nIf the first created wall is picked, the dialogue box is displayed, otherwise not:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> IdTest( <span class=\"teal\">UIDocument</span> doc )\n  {\n    <span class=\"teal\">FilteredElementCollector</span> collector \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc.Document )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ) );\n \n    <span class=\"teal\">ElementId</span> id = collector.ToElementIds().First();\n \n    <span class=\"teal\">Reference</span> selRef = doc.Selection.PickObject( \n      <span class=\"teal\">ObjectType</span>.Element );\n \n    <span class=\"blue\">if</span>( id == selRef.Element.Id )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Same Wall\"</span>, \n        <span class=\"maroon\">\"Just saying...\"</span> );\n    }\n  }\n</pre>\n<p>Many thanks to Adam, Scott Conover and Miroslav Schonauer for chipping in on this subject.\n\n<p>It is a relief for me to know for sure as well!\nI have still been using the IntegerValue property until now, to be on the safe side, which adds unnecessary verbal and optical overload to my source code.\n</p></p></p></p></p></p></p></p>"
  }
]