[
  {
    "original_filename": "1081_set_view_background",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1081_set_view_background",
    "header_text": "Setting the View Display Background",
    "local_header_href": "#setting-the-view-display-background",
    "chunk_text": "<h3>Setting the View Display Background</h3><p>Here is an exploration of various attempts to ensure that the view background is always white, regardless of all user settings like inverted background etc.</p><p>Before getting to that, I have to share an important discovery for me and my Tammik namesakes by my sister Helene, who recently consulted an Estonian translator.</p><p>My last name is Estonian and comes from 'tamm', meaning 'oak'. Tammik is a small group of oaks, or oak grove, a common North European name, cf. Eklund in Swedish and Eichenhain in German.</p><p>The translator pointed out that there is a rhyming Estonian idiomatic expression that every Tammik should know: \"Tere hommikust, tulen tammikust!\" – literally \"Good morning, I'm coming from oak-forest!\" – sounds great in Estonian and is used for a very cheerful \"hello\".</p><p>A very tere hommikust to you too, and back to the view background setting issue.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1081_set_view_background",
    "header_text": "Ensuring a White View Background for Consistent Image Export",
    "local_header_href": "#ensuring-a-white-view-background-for-consistent-image-export",
    "chunk_text": "<h4>Ensuring a White View Background for Consistent Image Export</h4><p>I'm using ExportImage to export a given view and would like the background colour to always be white.\nIf the user running the plugin has an inverted background, the exported image has a black background.\nHow can I force a given view to use a normal non-inverted background?</p><p>We currently do not have access to the setting for inverting the background via Options &gt; Graphics &gt; Invert background.</p><p>We thought about simply changing all black pixels to white in the exported image, but that would also change non-background objects, like shadowed and black coloured parts, and the result would not be good.</p><p>Apparently there is no option to set the Inverted Background through the API.\nAn alternative solution might be to create a large piece of geometry in the background of the view, coloured white, export the view image and remove the geometry again.</p><p>We also tried using the rendering settings like this:</p><pre class=\"code\">\n  <span class=\"teal\">RenderingSettings</span> rs = view.GetRenderingSettings();\n  rs.BackgroundStyle = <span class=\"teal\">BackgroundStyle</span>.Color;\n \n  <span class=\"teal\">ColorBackgroundSettings</span> cbs\n    = (<span class=\"teal\">ColorBackgroundSettings</span>) rs\n      .GetBackgroundSettings();\n \n  cbs.Color = <span class=\"blue\">new</span> <span class=\"teal\">Color</span>(255,0,0);\n  rs.SetBackgroundSettings(cbs);\n  view.SetRenderingSettings(rs);\n</pre><p>That does not work.\nIn fact, it seems that none of the RenderingSettings have any effect on the exported image.</p><p>Why do the render settings not apply to the view?\nApparently, exporting a normal view to a bitmap file does not classify as rendering, and the rendering settings only affect the rendering command as described in the section on 'Rendering Options' in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/whats-new-in-the-revit-2013-api.html\">\nWhat's New in the Revit 2013 API</a>,\n\nwhich says \"The settings shown in the Rendering Options Dialog are exposed...\"</p><p>I finally found a way to change the background to white that only works from Revit 2014 onwards:</p><pre class=\"code\">\n  <span class=\"blue\">var</span> view3D = ( viewFamilyType != <span class=\"blue\">null</span> )\n  ? <span class=\"teal\">View3D</span>.CreateIsometric( doc, viewFamilyType.Id )\n  : <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Ensure white background.</span>\n \n  <span class=\"teal\">Color</span> white = <span class=\"blue\">new</span> <span class=\"teal\">Color</span>( 255, 255, 255 );\n \n  view3D.SetBackground(\n    <span class=\"teal\">ViewDisplayBackground</span>.CreateGradient(\n      white, white, white ) );\n</pre><p>I thought I might as well capture this discovery and save it somewhere, e.g. in The Building Coder samples.</p><p>The\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdExportImage.cs\">\nCmdExportImage</a> external\n\ncommand looks like a suitable place, used to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/setting-a-default-3d-view-orientation.html\">\nset a default 3D view orientation and export an image</a>.</p><p>That command creates a new view for exporting.\nI assume the newly created view is also affected by the inverted background setting.</p><p>The updated code is available from\n\n<a href=\"https://github.com/jeremytammik/ExportCncFab\">\nThe Building Coder samples</a> GitHub\n\nrepository, and the version discussed here is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.106.1\">\nrelease 2014.0.106.1</a>.</p><p>Once again, tere hommikust!</p>"
  }
]