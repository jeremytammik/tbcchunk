[
  {
    "original_filename": "0202_mep_ribbon_panel",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0202_mep_ribbon_panel",
    "header_text": "MEP Sample Ribbon Panel",
    "local_header_href": "#mep-sample-ribbon-panel",
    "chunk_text": "<h3>MEP Sample Ribbon Panel</h3><p>I am preparing our upcoming Revit MEP API webcast to be held on Thursday August 27<sup>th</sup>.\nTo register, you can go to the Autodesk Developer Network (ADN) DevTech API\n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\ntraining schedule</a>\n\nand filter for Revit MEP API.</p><p>One thing I did today was to update our MEP sample external application from the Revit 2009 menu-based user interface to a 2010-style custom ribbon panel.\n\n<p>Here is the code for the AddMenu method that was being used in Revit 2009 to create a custom menu:\n\n<pre class=\"code\">\n<span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> AddMenu( ControlledApplication app )\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> m = <span class=\"maroon\">\"mep.Cmd\"</span>; <span class=\"green\">// namespace and command prefix</span>\n  <span class=\"blue\">string</span> path = System.Reflection.<span class=\"teal\">Assembly</span>.GetExecutingAssembly().Location;\n  Autodesk.Revit.MenuItem rootMenu = app.CreateTopMenu( <span class=\"maroon\">\"ME&amp;P API Samples\"</span> );\n  MenuItem.MenuType mt = MenuItem.MenuType.BasicMenu;\n  rootMenu.Append( mt, <span class=\"maroon\">\"&amp;Assign flow to terminals\"</span>, path, m + <span class=\"maroon\">\"AssignFlowToTerminals\"</span> );\n  rootMenu.Append( mt, <span class=\"maroon\">\"&amp;Change size\"</span>, path, m + <span class=\"maroon\">\"ChangeSize\"</span> );\n  rootMenu.Append( mt, <span class=\"maroon\">\"&amp;Populate CFM per SF on spaces\"</span>, path, m + <span class=\"maroon\">\"PopulateCfmPerSf\"</span> );\n  rootMenu.Append( mt, <span class=\"maroon\">\"&amp;Reset demo\"</span>, path, m + <span class=\"maroon\">\"ResetDemo\"</span> );\n  rootMenu.Append( MenuItem.MenuType.SeparatorMenu );\n  rootMenu.Append( mt, <span class=\"maroon\">\"Electrical &amp;System Browser\"</span>, path, m + <span class=\"maroon\">\"ElectricalSystemBrowser\"</span> );\n  rootMenu.Append( mt, <span class=\"maroon\">\"Electrical &amp;Hierarchy\"</span>, path, m + <span class=\"maroon\">\"ElectricalHierarchy\"</span> );\n  rootMenu.Append( mt, <span class=\"maroon\">\"Electrical Hierarchy &amp;2\"</span>, path, m + <span class=\"maroon\">\"ElectricalHierarchy2\"</span> );\n  rootMenu.Append( mt, <span class=\"maroon\">\"&amp;Unhosted elements\"</span>, path, m + <span class=\"maroon\">\"UnhostedElements\"</span> );\n  rootMenu.Append( MenuItem.MenuType.SeparatorMenu );\n  rootMenu.Append( mt, <span class=\"maroon\">\"A&amp;bout...\"</span>, path, m + <span class=\"maroon\">\"About\"</span> );\n}\n</pre>\n<p>To see the overly long lines, you can copy and paste to an editor.\n\n<p>AddMenu is called from the external application OnStartup method.\n\n<p>How can this be easily converted to a ribbon panel?\n\n<p>Well, note a couple of basic things here:\n\n<ul>\n<li>All the command implementation classes reside in the namespace mep and have the prefix \"Cmd\". Therefore, the variable 'm' is defined as \"mep.Cmd\" and used to prefix each command class name stem.\n<li>All commands reside in the same assembly as the external application, so they all have the same assembly path as the currently executing assembly.\n<li>A new top level menu with the text 'MEP API Samples' is created.\n<li>The menu items for the individual commands are added one by one, grouped by separators into HVAC, electrical, and the about groups.\n</li></li></li></li></ul>\n<p>Converting this to a ribbon panel is pretty straightforward.\nThe basics and all possibilities provided by the Revit API for creating your own ribbon panels are demonstrated by the Revit SDK sample Ribbon.\n\n<p>Here is the code for the new AddRibbonPanel method, also called from the external application OnStartup method, which creates an equivalent custom ribbon panel:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> AddRibbonPanel(\n  <span class=\"teal\">ControlledApplication</span> a )\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> m = <span class=\"maroon\">\"mep.Cmd\"</span>; <span class=\"green\">// namespace and command prefix</span>\n  <span class=\"blue\">string</span> path = <span class=\"teal\">Assembly</span>.GetExecutingAssembly().Location;\n \n  <span class=\"blue\">string</span>[] text = <span class=\"blue\">new</span> <span class=\"blue\">string</span>[] {\n    <span class=\"maroon\">\"Assign flow to terminals\"</span>,\n    <span class=\"maroon\">\"Change size\"</span>,\n    <span class=\"maroon\">\"Populate CFM per SF on spaces\"</span>,\n    <span class=\"maroon\">\"Reset demo\"</span>,\n    <span class=\"maroon\">\"Electrical System Browser\"</span>,\n    <span class=\"maroon\">\"Electrical Hierarchy\"</span>,\n    <span class=\"maroon\">\"Electrical Hierarchy 2\"</span>,\n    <span class=\"maroon\">\"Unhosted elements\"</span>,\n    <span class=\"maroon\">\"About...\"</span>\n  };\n \n  <span class=\"blue\">string</span>[] classNameStem = <span class=\"blue\">new</span> <span class=\"blue\">string</span>[] {\n    <span class=\"maroon\">\"AssignFlowToTerminals\"</span>,\n    <span class=\"maroon\">\"ChangeSize\"</span>,\n    <span class=\"maroon\">\"PopulateCfmPerSf\"</span>,\n    <span class=\"maroon\">\"ResetDemo\"</span>,\n    <span class=\"maroon\">\"ElectricalSystemBrowser\"</span>,\n    <span class=\"maroon\">\"ElectricalHierarchy\"</span>,\n    <span class=\"maroon\">\"ElectricalHierarchy2\"</span>,\n    <span class=\"maroon\">\"UnhostedElements\"</span>,\n    <span class=\"maroon\">\"About\"</span>\n  };\n  <span class=\"green\">//</span>\n  <span class=\"green\">// create three stacked buttons for the </span>\n  <span class=\"green\">// HVAC, electrical and about commands respectively:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">RibbonPanel</span> panel = a.CreateRibbonPanel(\n    <span class=\"maroon\">\"MEP Sample\"</span> );\n \n  <span class=\"teal\">PulldownButtonData</span> d1 = <span class=\"blue\">new</span> <span class=\"teal\">PulldownButtonData</span>(\n    <span class=\"maroon\">\"Hvac\"</span>, <span class=\"maroon\">\"HVAC\"</span> );\n \n  d1.ToolTip = <span class=\"maroon\">\"HVAC Commands\"</span>;\n \n  <span class=\"teal\">PulldownButtonData</span> d2 = <span class=\"blue\">new</span> <span class=\"teal\">PulldownButtonData</span>(\n    <span class=\"maroon\">\"Electrical\"</span>, <span class=\"maroon\">\"Electrical\"</span> );\n \n  d2.ToolTip = <span class=\"maroon\">\"Electrical Commands\"</span>;\n \n  <span class=\"teal\">PushButtonData</span> d3 = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n    classNameStem[8], text[8], path, m + classNameStem[8] );\n \n  d3.ToolTip = <span class=\"maroon\">\"About the HVAC and Electrical MEP Sample.\"</span>;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">RibbonItem</span>&gt; ribbonItems = panel.AddStackedButtons(\n    d1, d2, d3 );\n  <span class=\"green\">//</span>\n  <span class=\"green\">// add subitems to the HVAC and electrical pulldown buttons:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">PulldownButton</span> pulldown;\n  <span class=\"teal\">PushButton</span> pb;\n  <span class=\"blue\">int</span> j;\n \n  <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 8; ++i )\n  {\n    j = i &lt; 4 ? 0 : 1;\n    pulldown = ribbonItems[j] <span class=\"blue\">as</span> <span class=\"teal\">PulldownButton</span>;\n \n    pb = pulldown.AddItem( text[i], path,\n      m + classNameStem[i] );\n \n    pb.ToolTip = text[i];\n  }\n}\n</pre>\n<p>The procedure to create and populate the panel is straightforward:\n\n<ul>\n<li>We define the external command name prefix and assembly path like before.\n<li>The command name stems and menu item texts are stored in two string arrays.\n<li>A new ribbon panel is created.\n<li>Two pulldown buttons to group the HVAC and electrical commands are added to the panel.\n<li>One push button for the about box command is added.\n<li>The string arrays of menu item texts and class name stems are iterated.\n<li>A ribbon item is created for each command.\n</li></li></li></li></li></li></li></ul>\n<p>Here is the panel as it appears when dragged out of the ribbon to float freely:</p>\n<center>\n<img alt=\"MEP sample custom ribbon panel\" src=\"img/mep_panel.png\"/>\n</center>\n<p>Here is the complete source code and Visual Studio solution for the\n\n<a href=\"zip/mep_20090813.zip\">\nMEP sample application</a>\n\nin its current state.\nWe will be discussing more details of its implementation in the coming weeks.</p>\n<p>Here is a related question that just came up:</p>\n<h4>Ribbon Panel Image Resources</h4>\n<p><strong>Question:</strong>\nI want to populate my Revit add-in ribbon panel with images which I obtain from the resources with a method like this:</p>\n<pre>\ninternal static System.Drawing.Bitmap door_button {\n  get {\n    object obj = ResourceManager.GetObject(\n      \"door_button\", resourceCulture);\n\n    return ((System.Drawing.Bitmap)(obj));\n  }\n}\n</pre>\n<p>The object type of the image to assign to a button for the ribbon toolbar is System.Windows.Media.ImageSource.\nI tried the same approach as above, to provide a method that returns an object of this type and cast to it to the required type before returning.\nThis does not work, even though the compiler does not complain.\nHow can I cast between these types, or how else can I retrieve an image of the type System.Windows.Media.ImageSource from the resources, so that I do not have to have the actual image file (png or bitmap) to be distributed with the application?</p>\n<p>I see that the method \"ResourceManager.GetObject()\" returns an object of type \"System.Drawing.Bitmap\", but the data type to be assigned to a ribbon-button is \"BitmapImage\". \nI do not see any common base types or a constructor for this class that allows an object of type \"System.Drawing.Bitmap\" or any derived class from it, so I do not see how to convert between the types. \nHowever, investigating the classes in the class browser I have found a method \"FromResource\" for the Bitmap class, but I have not seen an example on how to use it.</p>\n<p><strong>Answer:</strong>\nWhen I look at the Revit SDK sample Ribbon, I see it using the class System.Windows.Media.Imaging.BitmapImage to define the external application ribbon images.\n\n<p>I do agree that retrieving the bitmap image from the resources is a much cleaner solution than the one used in the Ribbon sample.\n\n<p>System.Windows.Media.ImageSource is an abstract class, so you will never be able to obtain an instance of that from anywhere.\n\n<p>You can open the PresentationCore assembly in the Visual Studio Object Browser, navigate to the class System.Windows.Media.Imaging.BitmapImage, and open its 'Base Types' sub node. That will show you that it is derived from BitmapSource, which is derived from ImageSource.\n\n<p>The Ribbon sample simply uses the BitmapImage constructor to create a BitmapImage which also constitutes an ImageSource.</p>\n<p>Now back to your main question, how to convert from the Bitmap returned from the resource manager to the BitmapImage required by the Revit ribbon API.\n\n<p>I googled for \"cast Bitmap BitmapImage\" and found various useful hits. \nBased on these, this is the solution that I ended up with, which I tested in a simple console application:</p>\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> Main( <span class=\"blue\">string</span>[] args )\n{\n  <span class=\"teal\">Bitmap</span> a = <span class=\"teal\">Resource1</span>.Image1;\n \n  <span class=\"teal\">MemoryStream</span> ms = <span class=\"blue\">new</span> <span class=\"teal\">MemoryStream</span>();\n  a.Save( ms, <span class=\"teal\">ImageFormat</span>.Png );\n \n  <span class=\"teal\">BitmapImage</span> b = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>();\n  b.BeginInit();\n  b.StreamSource = ms;\n  b.EndInit();\n}\n</pre>\n<p>By the way, another example of using resources and utilising the .NET framework ResourceManager class to manage them is provided by the PowerCircuit Revit SDK sample.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0202_mep_ribbon_panel",
    "header_text": "Ribbon Panel Image Resources",
    "local_header_href": "#ribbon-panel-image-resources",
    "chunk_text": "<h4>Ribbon Panel Image Resources</h4><p><strong>Question:</strong>\nI want to populate my Revit add-in ribbon panel with images which I obtain from the resources with a method like this:</p><pre>\ninternal static System.Drawing.Bitmap door_button {\n  get {\n    object obj = ResourceManager.GetObject(\n      \"door_button\", resourceCulture);\n\n    return ((System.Drawing.Bitmap)(obj));\n  }\n}\n</pre><p>The object type of the image to assign to a button for the ribbon toolbar is System.Windows.Media.ImageSource.\nI tried the same approach as above, to provide a method that returns an object of this type and cast to it to the required type before returning.\nThis does not work, even though the compiler does not complain.\nHow can I cast between these types, or how else can I retrieve an image of the type System.Windows.Media.ImageSource from the resources, so that I do not have to have the actual image file (png or bitmap) to be distributed with the application?</p><p>I see that the method \"ResourceManager.GetObject()\" returns an object of type \"System.Drawing.Bitmap\", but the data type to be assigned to a ribbon-button is \"BitmapImage\". \nI do not see any common base types or a constructor for this class that allows an object of type \"System.Drawing.Bitmap\" or any derived class from it, so I do not see how to convert between the types. \nHowever, investigating the classes in the class browser I have found a method \"FromResource\" for the Bitmap class, but I have not seen an example on how to use it.</p><p><strong>Answer:</strong>\nWhen I look at the Revit SDK sample Ribbon, I see it using the class System.Windows.Media.Imaging.BitmapImage to define the external application ribbon images.\n\n<p>I do agree that retrieving the bitmap image from the resources is a much cleaner solution than the one used in the Ribbon sample.\n\n<p>System.Windows.Media.ImageSource is an abstract class, so you will never be able to obtain an instance of that from anywhere.\n\n<p>You can open the PresentationCore assembly in the Visual Studio Object Browser, navigate to the class System.Windows.Media.Imaging.BitmapImage, and open its 'Base Types' sub node. That will show you that it is derived from BitmapSource, which is derived from ImageSource.\n\n<p>The Ribbon sample simply uses the BitmapImage constructor to create a BitmapImage which also constitutes an ImageSource.</p>\n<p>Now back to your main question, how to convert from the Bitmap returned from the resource manager to the BitmapImage required by the Revit ribbon API.\n\n<p>I googled for \"cast Bitmap BitmapImage\" and found various useful hits. \nBased on these, this is the solution that I ended up with, which I tested in a simple console application:</p>\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> Main( <span class=\"blue\">string</span>[] args )\n{\n  <span class=\"teal\">Bitmap</span> a = <span class=\"teal\">Resource1</span>.Image1;\n \n  <span class=\"teal\">MemoryStream</span> ms = <span class=\"blue\">new</span> <span class=\"teal\">MemoryStream</span>();\n  a.Save( ms, <span class=\"teal\">ImageFormat</span>.Png );\n \n  <span class=\"teal\">BitmapImage</span> b = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>();\n  b.BeginInit();\n  b.StreamSource = ms;\n  b.EndInit();\n}\n</pre>\n<p>By the way, another example of using resources and utilising the .NET framework ResourceManager class to manage them is provided by the PowerCircuit Revit SDK sample.</p>\n</p></p></p></p></p>"
  }
]