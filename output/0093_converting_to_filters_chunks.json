[
  {
    "original_filename": "0093_converting_to_filters",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0093_converting_to_filters",
    "header_text": "Converting to Filters",
    "local_header_href": "#converting-to-filters",
    "chunk_text": "<h3>Converting to Filters</h3><p>This is a follow-up on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/category-comparison.html\">\ncategory comparison</a>\n\ntopic we brought up during the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/verona-revit-api-training.html\">\nRevit Structure API training in Verona</a>,\n\nItaly.\nWe first ran into a language problem in the Revit SDK FrameBuilder sample and fixed that by converting the language dependent category comparison code to a language independent version.\nStefano Carradore did not let it rest at that but went one step further and converted the old-fashioned and ineffective 2008-style iteration to a more effective style making use of the 2009-style API filtering functionality.</p><p>As noted in the discussion of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/category-comparison.html\">\ncategory comparison</a>,\n\nthe FrameBuilder sample works with structural beams and framing elements.\nIt implements a FrameData class which defines an Initialize() method to set up internal collections of column, beam and brace symbols.\nThey are sorted into different lists depending on their type, which is determined by comparing the category names.\nIn the original SDK sample, the iteration is performed over all Revit elements.\nIt picks out all the Level elements on one hand, and the structural framing and columns on the other.\nThe levels are identified by their class, i.e. System.Type, and the structural elements by their category name.\nWe already showed how to convert the category name comparison to a comparison of the category element id to remove the language dependence, which was preventing the code from running on the Italian version of Revit.\nStill, the 2008-style iteration over the entire collection of all Revit elements remains extremely inefficient.</p><p>In Stefano's new implementation, we make use of two separate API filters to extract the levels and the structural elements. This has the additional advantage of being intrinsically language independent.</p><p>Here is the original code:</p><pre class=\"code\">\n<span class=\"teal\">ElementIterator</span> itor\n  = m_commandData.Application.ActiveDocument.Elements;\n\nitor.Reset();\n<span class=\"blue\">while</span> (itor.MoveNext())\n{\n  <span class=\"blue\">object</span> obj = itor.Current;\n \n  <span class=\"green\">// add level to list</span>\n  <span class=\"teal\">Level</span> aLevel = obj <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n  <span class=\"blue\">if</span> (<span class=\"blue\">null</span> != aLevel)\n  {\n    m_levels.Add(aLevel.Elevation, aLevel);\n    <span class=\"blue\">continue</span>;\n  }\n \n  <span class=\"green\">// get Family to get FamilySymbols</span>\n  <span class=\"teal\">Family</span> aFamily = obj <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n  <span class=\"blue\">if</span> (<span class=\"blue\">null</span> == aFamily)\n  {\n    <span class=\"blue\">continue</span>;\n  }\n \n  <span class=\"blue\">foreach</span> (<span class=\"teal\">FamilySymbol</span> symbol <span class=\"blue\">in</span> aFamily.Symbols)\n  {\n    <span class=\"blue\">if</span> (<span class=\"blue\">null</span> == symbol.Category)\n    {\n      <span class=\"blue\">continue</span>;\n    }\n \n    <span class=\"green\">// add symbols to lists according to category name</span>\n    <span class=\"blue\">string</span> categoryName = symbol.Category.Name;\n    <span class=\"blue\">if</span> (<span class=\"maroon\">\"Structural Framing\"</span> == categoryName)\n    {\n      m_beambracesSymbolsMgr.AddSymbol(symbol);\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span> (<span class=\"maroon\">\"Structural Columns\"</span> == categoryName)\n    {\n      m_columnSymbolsMgr.AddSymbol(symbol);\n    }\n  }\n}\n</pre><p>We replace this code by two separate API filters.\nWe could also use three filters, replacing the loop sorting the structural elements into the two separate collections by two separate dedicated filters, one each for columns and framing elements:</p><pre class=\"code\">\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; a = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n\ndoc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ), a );\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">Level</span> lev <span class=\"blue\">in</span> a )\n{\n  m_levels.Add( lev.Elevation, lev );\n}\n \na.Clear();\n\nAutodesk.Revit.Creation.<span class=\"teal\">Filter</span> cf\n  = app.Create.Filter;\n \n<span class=\"teal\">Filter</span> filterSymbols\n  = cf.NewTypeFilter( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) );\n\n<span class=\"teal\">Filter</span> filterCols\n  = cf.NewCategoryFilter( bipColumn );\n\n<span class=\"teal\">Filter</span> filterFram\n  = cf.NewCategoryFilter( bipFraming );\n\n<span class=\"teal\">Filter</span> filterStruct\n  = cf.NewLogicOrFilter( filterCols, filterFram );\n\n<span class=\"teal\">Filter</span> filter\n  = cf.NewLogicAndFilter( filterSymbols, filterStruct );\n \ndoc.get_Elements( filter, a );\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> symbol <span class=\"blue\">in</span> a )\n{\n  <span class=\"teal\">ElementId</span> categoryId = symbol.Category.Id;\n \n  <span class=\"blue\">if</span>( idFraming.Equals( categoryId ) )\n  {\n    m_beambracesSymbolsMgr.AddSymbol( symbol );\n  }\n  <span class=\"blue\">else</span> <span class=\"blue\">if</span>( idColumn.Equals( categoryId ) )\n  {\n    m_columnSymbolsMgr.AddSymbol( symbol );\n  }\n}\n</pre><p>When filtering only for the System.Type FamilySymbol without the additional check for the structural categories, our sample project was returning over 500 family symbols.\nAdding the category filters reduced this number to 40.</p><p>\n<a href=\"C:/a/lib/revit/2009/SDK/Samples/FrameBuilder/CS/FrameData.cs\">\nHere</a>\n\nis the updated source code for\n\n<a href=\"C:/a/lib/revit/2009/SDK/Samples/FrameBuilder/CS/FrameData.cs\">\nFrameData.cs</a>\n\nwith the three different variants enclosed in conditional compilation pragmas.</p>"
  }
]