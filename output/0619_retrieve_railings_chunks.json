[
  {
    "original_filename": "0619_retrieve_railings",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0619_retrieve_railings",
    "header_text": "Retrieve Railing Elements",
    "local_header_href": "#retrieve-railing-elements",
    "chunk_text": "<h3>Retrieve Railing Elements</h3><p>I already mentioned that API access to stairs and railings is currently still a bit patchy.\nStill, you can \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/retrieving-column-and-stair-geometry.html\">\nretrieve their geometry</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">\ndetermine the instances on a given level</a>, and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/list-railing-types.html\">\nlist the railing types</a>.\n\n<p>As you can see from the comments by Berria and Andrew, it is currently \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/list-railing-types.html?cid=6a00e553e1689788330112790ba9af28a4#comment-6a00e553e1689788330112790ba9af28a4\">\nnot possible</a> to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/create-room-on-level-in-phase.html?cid=6a00e553e168978833011168f39e48970c#comment-6a00e553e168978833011168f39e48970c\">\ncreate railings</a>,\n\neven though I did once implement a command named \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/list-linked-elements.html\">\nCmdNewRailing</a> in \n\nThe Building Coder samples to test this which unfortunately does <strong>not</strong> create a new railing instance.\n\n<p>Anyway, as discussed with Renzo, we can easily\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/retrieve-structural-elements.html?cid=6a00e553e168978833013489158949970c#comment-6a00e553e168978833013489158949970c\">\nretrieve railing instances</a>.\n\nThis question of retrieving railings came up again now, and here is yet another answer and snippet of sample code to address it, this time demonstrating a nice compact concatenation of filtered element collector, generic LINQ, and string methods to create a string listing the element ids of all instances found.\nFirst, here is the question:\n\n<p><strong>Question:</strong> I implemented the following code to retrieve railing instances, but it does not do what I expect, and colElmts.Count always returns zero:\n\n<pre class=\"code\">\n  <span class=\"blue\">Dim</span> FilterList <span class=\"blue\">As</span> Generic.<span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> DB.<span class=\"teal\">ElementFilter</span>) =\n    <span class=\"blue\">New</span> Generic.<span class=\"teal\">List</span>(<span class=\"blue\">Of</span> DB.<span class=\"teal\">ElementFilter</span>)\n\n  <span class=\"blue\">Dim</span> collector <span class=\"blue\">As</span> DB.<span class=\"teal\">FilteredElementCollector</span> =\n    <span class=\"blue\">New</span> DB.<span class=\"teal\">FilteredElementCollector</span>(doc)\n\n  <span class=\"blue\">Dim</span> Filter <span class=\"blue\">As</span> DB.<span class=\"teal\">ElementCategoryFilter</span> =\n    <span class=\"blue\">New</span> DB.<span class=\"teal\">ElementCategoryFilter</span>(<span class=\"teal\">BuiltInCategory</span>.OST_Railings)\n\n  <span class=\"blue\">Dim</span> LOrF <span class=\"blue\">As</span> DB.<span class=\"teal\">LogicalOrFilter</span> =\n    <span class=\"blue\">New</span> DB.<span class=\"teal\">LogicalOrFilter</span>(FilterList)\n\n  <span class=\"blue\">Dim</span> colElmts <span class=\"blue\">As</span> Generic.<span class=\"teal\">List</span>(<span class=\"blue\">Of</span> DB.<span class=\"teal\">Element</span>) =\n    collector.WherePasses(LOrF).\n    WhereElementIsNotElementType.ToElements()\n</pre>\n<p>The problem only occurs with railings. \nAll other categories seem to work fine. \nBy the way, the current user selection in rvtDoc.Selection does return railing objects if they have been selected in the user interface.\n\n\n\n<p><strong>Answer:</strong> As mentioned above, railings are currently not represented by the Revit API, so there is only limited API access to them.\n\n<p>Still, you should be able to retrieve them using filters in the manner you indicate.\n\n<p>I implemented some sample code based on yours and ran it on the model you provided:</p>\n<center>\n<img alt=\"Railings\" src=\"img/railings.png\"/>\n</center>\n<p>The initial code does indeed retrieve zero elements.\n\n<p>I thereupon analysed the railings using RevitLookup, and see that their built-in category is not OST_Railings, which is what you are filtering for, but OST_StairsRailing. Modifying my code to retrieve that category produces the following:</p>\n<center>\n<img alt=\"Selected railings\" src=\"img/railings_selected.png\"/>\n</center>\n<p>Here is the modified code producing that message – only four lines of relevant code, albeit two of them rather long and sub-divided:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"blue\">string</span> [] ids\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfCategory( \n          <span class=\"teal\">BuiltInCategory</span>.OST_StairsRailing )\n        .WhereElementIsNotElementType()\n        .Select&lt;<span class=\"teal\">Element</span>,<span class=\"blue\">string</span>&gt;( \n          e =&gt; e.Id.IntegerValue.ToString() )\n        .ToArray&lt;<span class=\"blue\">string</span>&gt;();\n \n    <span class=\"blue\">int</span> n = ids.Length;\n \n    <span class=\"blue\">string</span> s = (0 == n)\n      ? <span class=\"maroon\">\"No railings selected.\"</span>\n      : (n.ToString()\n        + <span class=\"maroon\">\" railing\"</span>\n        + ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> )\n        + <span class=\"maroon\">\" selected: \"</span>\n        + <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>, ids )\n        + <span class=\"maroon\">\".\"</span>);\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Railings\"</span>, s );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>The moral of the story is: use RevitLookup to explore your model. Use the exact built-in category of the objects that you are looking for.\n\n<p>You might of course want to filter for all the different variations of the railing category, in which case the approach described to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">\nretrieve all MEP</a> or \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/retrieve-structural-elements.html\">\nstructural elements</a> might \n\nbe of interest to you, since it includes handling of multiple categories.\n\n<p>Here is <a href=\"zip/FilterRailings.zip\">FilterRailings.zip</a> containing the complete Visual Studio solution including source code and add-in manifest file for my little test command.\n\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]