[
  {
    "original_filename": "1347_user_config",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1347_user_config",
    "header_text": "Revit Future and Saving User Configuration Settings",
    "local_header_href": "#revit-future-and-saving-user-configuration-settings",
    "chunk_text": "<h3>Revit Future and Saving User Configuration Settings</h3><p>I encountered the need and implemented solutions to save user configuration data several times over in the past.</p><p>Today, prompted by a recent query, I'll point out two of them, and some other exciting and interesting stuff as well:</p><ul>\n<li><a href=\"#2\">Anthony Hauck on Futures for Revit</a>.</li>\n<li><a href=\"#3\">The Most Popular Programming Languages 2015</a>.</li>\n<li><a href=\"#4\">Saving User Configuration Settings</a>.</li>\n<ul>\n<li><a href=\"#4.1\">Text Format Configuration File Storage and Parsing</a>.</li>\n<li><a href=\"#4.2\">.NET XML Configuration File Storage and Parsing</a>.</li>\n</ul>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1347_user_config",
    "header_text": "Anthony Hauck on Futures for Revit",
    "local_header_href": "#anthony-hauck-on-futures-for-revit",
    "chunk_text": "<h4>Anthony Hauck on Futures for Revit</h4><p><a href=\"http://bimthoughts.com\">BIMThoughts</a> is a podcast platform about BIM technology and techniques.</p><p>Listen to the <a href=\"http://bimthoughts.com/s2e10\">half-hour BIMThoughts interview with Anthony Hauck</a>, Director of Product Strategy at Autodesk, talking about what may or may not be coming in Revit’s future:</p><center>\n<audio controls=\"\">\n<source src=\"http://bimthoughts.com/wp-content/uploads/2015/08/S2E10-Bill-Ryan-Carla-and-Anthony-LIVE-at-RTCNA.mp3\" type=\"audio/mpeg\"/>\nYour browser does not support the audio element.\n</audio>\n</center><a name=\"3\"></a>"
  },
  {
    "original_filename": "1347_user_config",
    "header_text": "The Most Popular Programming Languages 2015",
    "local_header_href": "#the-most-popular-programming-languages-2015",
    "chunk_text": "<h4>The Most Popular Programming Languages 2015</h4><p><a href=\"http://www.programmableweb.com\">ProgrammableWeb</a> presents an interesting analysis of\n<a href=\"http://www.programmableweb.com/news/most-popular-programming-languages-2015/elsewhere-web/2015/08/04\">\nthe most popular programming languages of 2015</a>:</p><center>\n<img alt=\"Popular programming languages 2015\" src=\"img/popular_programming_languages.jpg\" width=\"500\"/>\n</center><p>Check out the <a href=\"http://www.programmableweb.com/news/most-popular-programming-languages-2015/elsewhere-web/2015/08/04\">\nfull article</a> for\ndetails on how this ranking was determined.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1347_user_config",
    "header_text": "Saving User Configuration Settings",
    "local_header_href": "#saving-user-configuration-settings",
    "chunk_text": "<h4>Saving User Configuration Settings</h4><p><strong>Question:</strong>\n\nI used the .NET settings file, e.g., xxx.dll.config, to store user and application data.</p><p>Unfortunately, it does not work; manual modifications are ignored.</p><p>Apparently, it is only active at the application (.exe) level.</p><p>The project simply retains the default values for all class library projects.</p><p>I still can’t find a workaround up to this moment.</p><p>Do you have any suggestions how a Revit add-in can store external configuration data that can be modified by a user?</p><p><strong>Answer:</strong>\n\nYes, definitely. Thank you for bringing this up.</p><p>There are a number of ways to address this, for two of which I can present ready-made implementations on GitHub:</p><ul>\n<li>First, to be clear, let's rule out the usage of the top-level application configuration file revit.exe.config. That would be a very bad idea, for a large number of reasons.</li>\n<li>Implement your own <a href=\"#4.1\">text format configuration file storage and parsing</a>.</li>\n<li>Make use of the <a href=\"#4.2\">.NET XML configuration file storage and parsing</a> functionality.</li>\n</ul><a name=\"4.1\"></a>"
  },
  {
    "original_filename": "1347_user_config",
    "header_text": "Text Format Configuration File Storage and Parsing",
    "local_header_href": "#text-format-configuration-file-storage-and-parsing",
    "chunk_text": "<h4>Text Format Configuration File Storage and Parsing</h4><p>I already documented this approach when discussing the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/10/berlin-hackathon-results-3d-viewer-and-web-news.html\">\nBerlin hackathon results, 3D Viewer and RvtVa3c update</a>,\nin the section on\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/10/berlin-hackathon-results-3d-viewer-and-web-news.html#7\">\ncustom user settings storage</a>.</p><a name=\"4.2\"></a>"
  },
  {
    "original_filename": "1347_user_config",
    "header_text": ".NET XML Configuration File Storage and Parsing",
    "local_header_href": "#net-xml-configuration-file-storage-and-parsing",
    "chunk_text": "<h4>.NET XML Configuration File Storage and Parsing</h4><p>Storing user settings in a config file via the .NET ConfigurationManager and OpenMappedExeConfiguration methods:</p><p>Look at my\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/12/devdays-github-stl-and-obj-model-import.html#3\">\nDirectShape OBJ import add-in DirectObjLoader</a>,\nwhich also defines the kernel for the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/02/from-hack-to-app-obj-mesh-import-to-directshape.html\">\nOBJ Mesh Import to DirectShape</a> AppStore application.</p><p>Search the two blog post discussions listed above for the word 'config', and look at the\n<a href=\"https://github.com/jeremytammik/DirectObjLoader/blob/master/DirectObjLoader/Config.cs\">Config.cs configuration file</a> implementation\nand usage in the\n<a href=\"https://github.com/jeremytammik/DirectObjLoader\">DirectObjLoader GitHub repository</a>.</p>"
  }
]