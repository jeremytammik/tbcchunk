[
  {
    "original_filename": "1715_list_ifc_zones_py",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- /Users/tammikj/a/special/bouygues/2019_bim_surface_info/test/get_zone_properties.py\n\n- 14918470 [Find all ducts that have been tapped into]\n  https://forums.autodesk.com/t5/revit-api-forum/find-all-ducts-that-have-been-tapped-into/m-p/8485269\n\nRetrieving linked IfcZone elements using Python and the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon @buildingSMART http://bit.ly/ifczonepy\n\nToday, I present a little exploration of how to access zones defined in an IFC file in Revit.\nIf you are following this blog closely, you might guess that this is related to the room boundary CSV exporter project that I recently discussed.\nFor this exploration, I installed and used RevitPythonShell.\nHere are the detailed steps\n&ndash; Importing IFC zones into Revit\n&ndash; Installing and using RevitPythonShell\n&ndash; Programmatically accessing IFC zones in Revit...\n\n-->"
  },
  {
    "original_filename": "1715_list_ifc_zones_py",
    "header_text": "Retrieving Linked IfcZone Elements Using Python",
    "local_header_href": "#retrieving-linked-ifczone-elements-using-python",
    "chunk_text": "### Retrieving Linked IfcZone Elements Using Python\n\nI spent a lot of time last week and during the weekend playing around with\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) topic\nof [finding all ducts that have been tapped into](https://forums.autodesk.com/t5/revit-api-forum/find-all-ducts-that-have-been-tapped-into/m-p/8485269).\n\nIt led to several new releases\nof [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2019.0.145.4).\n\nSince we have not reached a final conclusion yet, however, I'll postpone the discussion of that.\n\nInstead, I present a little exploration of how to access zones defined in an IFC file in Revit.\n\nIf you are following this blog closely, you might guess that this is related to\nthe [room boundary CSV exporter project](https://thebuildingcoder.typepad.com/blog/2019/01/room-boundaries-to-csv-and-wpf-template.html) that\nI recently discussed.\n\nFor this exploration, I installed and used RevitPythonShell.\n\nHere are the detailed steps:\n\n- [Importing IFC zones into Revit](#2) \n- [Installing and using RevitPythonShell](#3) \n- [Programmatically accessing IFC zones in Revit](#4)"
  },
  {
    "original_filename": "1715_list_ifc_zones_py",
    "header_text": "<a name=\"2\"></a> Importing IFC Zones into Revit",
    "local_header_href": "#a-name2a-importing-ifc-zones-into-revit",
    "chunk_text": "#### <a name=\"2\"></a> Importing IFC Zones into Revit\n\nI started out my explorations by chatting with our IFC expert Angel Velez:\n\n[Q] Does Revit IFC import also support IFCZONE? Can we use IFCZONE to generate Revit Zone elements? \n\n[A] Exporting zones from Revit to IFC is supported,\nand [you have to set up the project properly](https://sourceforge.net/p/ifcexporter/wiki/Exporting%20Zones) for that.\n\nBTW, happy to say that Googling for 'Revit IfcZone' got me to that link!\n\nImport, however, ignores zones.\n\nLink creates them, as a subset of generic models.\n\n[Q] When you say, 'link creates them', does it mean: in  a Revit project, link in an IFC file.\n\nIFCZONE elements are now accessible and visible in Revit and we can query their properties and boundaries? \n\n[A] Correct &ndash; for link at least. Import does nothing with them.\n\n[Q] OK... I have now linked an IFC file into a blank Revit document.\n\nHow can I access the zone information from here?\n\nIs there any way in the UI?\n\n[A] You have to tab into the document until you choose the zone.  It will overlap the rooms it contains.\n\n<center>\n<img src=\"img/ifc_zone_tabbed_to.png\" alt=\"IFC zone tabbed to\" width=\"669\">\n</center>\n\n[Q] Yes, I see it now.\n\nI see a generic element with the `IFCZONE` properties, e.g., `IfcName`, and `IfcExportsAs` set to `IfcZone`.\n\nWhat would be the workflow to generate a mapping from room elements to `IFCZONE` elements using the Revit API?\n\n[A] I believe the rooms have a property that has the name of the zone(s) they belong to.\n\nAlthough the 'rooms' are also generic elements. The Revit IFC import does not create real rooms, just space volumes.  Converting to rooms is a request.\n\nThank you very much, Angel, for all the help!\n\nThe IFC zones are imported as `DirectShape` elements and assigned to the `Generic Model` category.\n\nTheir IFC properties are stored in shared parameters, like this:\n\n<center>\n<img src=\"img/ifc_zone_properties.png\" alt=\"IFC zone properties\" width=\"565\">\n</center>\n\nAs far as I can tell, I just need to look at the `IfcName` and `IfcExportAs` properties."
  },
  {
    "original_filename": "1715_list_ifc_zones_py",
    "header_text": "<a name=\"3\"></a> Installing and Using RevitPythonShell",
    "local_header_href": "#a-name3a-installing-and-using-revitpythonshell",
    "chunk_text": "#### <a name=\"3\"></a> Installing and Using RevitPythonShell\n\nBased on that discussion, I linked in an IFC file containing zones representing apartments into a blank Revit project document.\n\nI started out exploring the model using [RevitLookup](https://github.com/jeremytammik/RevitLookup).\n\nSince the objects of interest resided in the linked IFC file, however, I soon had to take recourse\nto [another, more flexible, advanced and intimate database exploration tool](http://thebuildingcoder.typepad.com/blog/2013/11/intimate-revit-database-exploration-with-the-python-shell.html).\n\nI visited the [RevitPythonShell home page](https://github.com/architecture-building-systems/revitpythonshell) and\ndownloaded the installer for Revit 2019.\n \nIt is a one-click install.\n \nYou can even do it while Revit is up and running &ndash; it will be auto-loaded into the running session.\n \nThen, go to the `Add-In` tab and click the icon. That displays the console. Then copy-paste the code into that.\n \nYou can also load and run scripts in other ways &ndash; I've never tried that, though."
  },
  {
    "original_filename": "1715_list_ifc_zones_py",
    "header_text": "<a name=\"4\"></a> Programmatically Accessing IFC Zones in Revit",
    "local_header_href": "#a-name4a-programmatically-accessing-ifc-zones-in-revit",
    "chunk_text": "#### <a name=\"4\"></a> Programmatically Accessing IFC Zones in Revit\n\nThe RevitPythonShell enabled me to interact with the linked database, explore its elements and develop the following script step by step:\n\n<pre class=\"prettyprint\">\nimport clr\nimport math\nclr.AddReference('RevitAPI')\nclr.AddReference('RevitAPIUI')\nfrom Autodesk.Revit.DB import *\nfrom Autodesk.Revit.DB.Architecture import *\nfrom Autodesk.Revit.DB.Analysis import *\nuidoc = __revit__.ActiveUIDocument\ndoc = __revit__.ActiveUIDocument.Document\napp = doc.Application\ndocs = app.Documents\n\nn = docs.Size\n\nprint n, 'open documents:'\n\nfor d in docs:\n  s = d.PathName\n  print s\n  if s.endswith('.ifc.RVT'): ifcdoc = d\n\nprint 'Linked-in IFC document:'\nprint ifcdoc.PathName\n\ncollector = FilteredElementCollector(ifcdoc).OfClass(clr.GetClrType(DirectShape)).OfCategory(BuiltInCategory.OST_GenericModel)\n\nprint collector.GetElementCount(), 'generic model direct shape elements'\n\ndef get_param(e,s):\n  \"Return string parameter value for given parameter name\"\n  ps = e.GetParameters(s)\n  n = ps.Count\n  assert(2 > n)\n  if 0 < n: return ps[0].AsString()\n  else: return None\n  \ndef is_zone(e):\n  \"Predicate returning True is e is an IfcZone\"\n  export_as = get_param(e,'IfcExportAs')\n  return export_as and export_as == 'IfcZone'\n\ndef zone_name(e):\n  \"Return IfcName of IfcZone element or None\"\n  if is_zone(e):\n    return get_param(e,'IfcName')\n\nzone_names = []\n\nfor e in collector:\n  if is_zone(e):\n    zone_names.append(get_param(e,'IfcName'))\n\nzone_names.sort()\n\nn = len(zone_names)\n\nprint n, 'zones:', zone_names\n</pre>\n\nI am also linking in this script source here as a separate text\nfile [get_ifc_zone_properties.py](zip/get_ifc_zone_properties.py).\n\nIt lists all the open documents, namely two, the blank hosting project and the imported IFC file.\n\nThe imported IFC file has generated a placeholder RVT.\n\nThat is the document that I need to dig deeper into.\n\nUsing a filtered element collector, I retrieve all `DirectShape` elements belonging to the `Generic Model` category.\n\nA couple of helper functions extract a named parameter from an element and implement a Boolean predicate to determine whether an element represents an IFC zone.\n\nWith those in hand, I can iterate over all the 1012 direct shapes, access the 25 zones, and save their `IfcName` properties to a list.\n\nHere is the result of running the script:\n\n<pre>\n2 open documents:\nC:\\...\\test\\010-123xx3-arc-bat01-apt01_2_2018-12-27_1507_ifc_link_host.rvt\nC:\\...\\010-123xx3-arc-bat01-apt01_2_2018-12-27_1507.ifc.RVT\n\nLinked-in IFC document:\nC:\\...\\010-123xx3-arc-bat01-apt01_2_2018-12-27_1507.ifc.RVT\n\n1012 generic model direct shape elements\n\n25 zones: ['APT0101', 'APT0102', 'APT0103', 'APT0104',\n  'APT0105', 'APT0106', 'APT0201', 'APT0202', 'APT0203',\n  ...\n  'APT0402', 'APT0403', 'APT0404', 'APT0405', 'APT0406',\n  u'Par d\\xe9faut:127272']\n</pre>\n\nI very much enjoyed this little excursion into IFC matters and playing around interactively with the Revit API and Python.\n\nI hope you enjoyed this short summary of my experiences."
  }
]