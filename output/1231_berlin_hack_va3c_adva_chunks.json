[
  {
    "original_filename": "1231_berlin_hack_va3c_adva",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1231_berlin_hack_va3c_adva",
    "header_text": "Berlin Hackathon Results, 3D Viewer and Web News",
    "local_header_href": "#berlin-hackathon-results-3d-viewer-and-web-news",
    "chunk_text": "<h3>Berlin Hackathon Results, 3D Viewer and Web News</h3><p>We completed the Berlin hackathon last weekend, and many other noteworthy and exciting things are going on, concerning the Revit API, the 3D web viewers, web services and more:</p><ul>\n<li><a href=\"#2\">Berlin hackathon projects and winners</a></li>\n<li><a href=\"#3\">Avoid unnecessary unit conversion</a> – embrace the natives</li>\n<li><a href=\"#4\">3D viewer news</a></li>\n<li><a href=\"#5\">AutoCAD as a web service</a></li>\n<li><a href=\"#6\">Collada STL ADVA export settings</a></li>\n<li><a href=\"#7\">RvtVa3c update</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1231_berlin_hack_va3c_adva",
    "header_text": "Berlin Hackathon Projects and Winners",
    "local_header_href": "#berlin-hackathon-projects-and-winners",
    "chunk_text": "<h4>Berlin Hackathon Projects and Winners</h4><p>The\n\n<a href=\"https://twitter.com/hashtag/tmuhack\">Berlin hackathon</a> completed and the winners were announced last weekend.</p><p>I took notes of four teams' project presentations:</p><ul>\n<li>US4, us four –\nsocial data visualisation in 3D;\ncreate JSON data to display 3D graph to visualise friends, followers, business contacts, etc. in the browser;\ntechnology: looked at the Autodesk viewer, thinking of feeding it via OBJ files;\ngenerating these files is harder than using straight three.js, though;\nextract data from github, twitter, facebook, etc.</li>\n<li><a href=\"https://m3my.github.io\">MovieMemory</a> –\nWe built a game using <a href=\"https://www.firebase.com\">Firebase</a>, recently acquired by Google and rather pricey.\nIt also uses nodejs, angular, npm, bower and grunt.\nWe also looked at Meteor as a smaller, simpler, more self-contained db alternative.\nSome see it <a href=\"http://differential.io/blog/meteor-vs-angular\">Meteor as an alternative to angular</a>;\nMeteor can also be used <a href=\"http://angularjs.meteor.com/tutorial\">in conjunction with Angular</a>.\nWe grabbed movie details from both <a href=\"http://www.imdb.com\">imdb</a> and <a href=\"https://www.wikipedia.org\">wikipedia</a>\nand sent them through the <a href=\"http://www.neofonie.de\">neophonie</a> web service to automatically extract keywords for each film.\nThe film poster is grabbed from imdb as well.\nDid you know about <a href=\"http://dbpedia.org/sparql\">sparql</a>, enabling you to query wikipedia programmatically as a database?\nTwo cards are generated for each film: one with the keywords, the other with the banner.\nThe aim is to reveal cards, remember their locations, and match as many pairs as possible.</li>\n<li>Shopoolit by Pawan –\nfour sections: popular stores, favourites, inspire;\nadd to favourites, add to schedule;\nsee details: who is going, with peer to peer rating;\nactivity list linked to calendar, saved in list, scroll, share these plans, see number of requests;\nsee pending and accepted requests;\nbasic profile, photo and basic bio or facebook.</li>\n<li>Tourist attraction web scraper by Jake, like 360 cities, and reminiscent of my recent\n<a href=\"http://poipointer.github.io\">PoiPointer</a> project:\nscrape images of tourist attractions for any city, display images, work in app on phone;\nmobile city trip planner;\nwhen out walking, you see something and don't know what it is;\ntake a picture, take image, compare with google images, identify object, return description from wikipedia;\nwhat technologies? node and amber in front and back, python script to scrape sites.</li>\n</ul><p>The first place was awarded the US4 team.\nHere they are after Peter Schlipf presented them the main prize, four smart watches sponsored by Autodesk:</p><center>\n<img alt=\"US4, TMUHack winners\" src=\"img/tmuhack_us4_2.jpg\" width=\"400\"/>\n</center><p>The second place went to the <a href=\"http://m3my.github.io\">MovieMemory</a> team:</p><center>\n<img alt=\"MovieMemory, TMUHack runners-up\" src=\"img/tmuhack_m3my_2.jpg\" width=\"400\"/>\n</center><p>They were awarded the <a href=\"http://www.neofonie.de\">neophonie</a> prize, a drone helicopter with built-in camcorder.</p><p>Here they are during the live presentation of their newly created online <a href=\"http://moviememory.de\">movie memory game</a>:</p><center>\n<img alt=\"MovieMemory, TMUHack runners-up\" src=\"img/tmuhack_m3my.jpg\" width=\"400\"/>\n</center><p>You can try out MovieMemory live yourself right now.\nYou need a partner to get going.\nSimply go to <a href=\"http://moviememory.de\">moviememory.de</a>, copy the game link created and pass it on to your playing partner to start playing right away:</p><center>\n<img alt=\"MovieMemory start page\" src=\"img/moviememory.png\" width=\"460\"/>\n</center><a name=\"3\"></a>"
  },
  {
    "original_filename": "1231_berlin_hack_va3c_adva",
    "header_text": "Avoid Unnecessary Unit Conversion – Embrace the Natives",
    "local_header_href": "#avoid-unnecessary-unit-conversion-embrace-the-natives",
    "chunk_text": "<h4>Avoid Unnecessary Unit Conversion – Embrace the Natives</h4><p>Here is some valuable and sound advice on working in native units and avoiding unnecessary conversions provided by Scott Wilson in his answers to the Revit API discussion thread on\n\n<a href=\"http://forums.Autodesk.com/t5/revit-api/convert-to-survey-points/m-p/5361921\">\nconverting survey points</a>:</p><p><strong>Question:</strong> I am extracting four corners of a rectangular column.\nMy code works perfectly in one project but not in another.\nThe only difference between the two that I noticed is that the project and survey points are the same in the first, whereas they differ in the second.</p><p><strong>Answer:</strong> From a quick look through the code, it looks like you might be mixing your dimensional units.\nAre the points out by a multiple of 304.8 by any chance?</p><p>Halfway through you are converting from feet to millimetres (parameter values h and b); later, you apply a transform (with its translation values in feet) to points created using these metric values.\nI suspect that the error is masked in your first project due to the translation from project to survey points being zero.</p><p>I'd suggest leaving all dimensions in feet until you need to display or export them.</p><p><strong>Response:</strong> Yes I am multiplying by 304.8 as Revit returns the values in feet but the project is in millimetres.</p><p>What should I do to resolve the issue?</p><p><strong>Answer:</strong> Why do you need to convert into metric during the calculation?</p><p>I can't see anywhere in the code snippet where you are displaying or exporting the interim values, so just leave them all in feet and let Revit work in its native units. <u>If you need the output values in metric, convert them as the last step</u>.</p><p>I also just noticed that you are converting the location point rotation into degrees and then round that to the nearest degree.\nYou then convert this rounded value back into radians to perform some trig calcs.\nThis is going to be quite inaccurate and inconsistent, just leave angles in raw radians without rounding.</p><p>Don't convert / mix units or perform rounding mid-way through a calculation, you are just asking for trouble.\n<u>If you are uncomfortable working in feet and radians, I'd suggest making the effort to embrace them</u>.</p><p>Many thanks to Scott for this recommendation, and for his numerous other great replies in the Revit API discussion forum!</p><p>Please everybody take heed of this very sound advice!</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1231_berlin_hack_va3c_adva",
    "header_text": "3D Viewer News",
    "local_header_href": "#3d-viewer-news",
    "chunk_text": "<h4>3D Viewer News</h4><p>Theo Armour, initiator of the\n\n<a href=\"https://va3c.github.io\">vA3C open source three.js AEC 3D model viewer</a> posted\n\nan update on the current vA3C status and the following call to action:</p><blockquote>\n<p>The <a href=\"http://va3c.github.io/viewer/va3c-viewer-html5/latest\">latest release of the vA3C Viewer</a> is looking good.</p>\n<p>It would be great to hear from you that something in this effort is worthwhile or useful to you.</p>\n<p>Virtually everything we set out to do back in May is being done – sometimes elegantly, some times not so, but never mind.</p>\n<p>Over the summer, I thought the work on the viewer would finish and I could get back to my 3D mapping work and etc.</p>\n<p>In the last few weeks, those thoughts have kind of been exploded. I am coming to the realization that we asked for just the tip of the iceberg.</p>\n<p>Metaphorically, the viewer is can be seen as theatrical stage set. The next step is to use this stage to produce theatre.</p>\n<p>For example, you all know Oculus Rift, Google Cardboard, Magic Leap and the whole virtual reality thing is exploding.</p>\n<p>A few weeks ago I built a <a href=\"http://jaanga.github.io/cookbook/cardboard/readme-reader.html\">Google cardboard three.js viewer template</a>.</p>\n<p>The intention is to build this capability into the vA3C Viewer.</p>\n<p>But guess who used my templates and got there first? The Autodesk 360 Viewer!</p>\n<p>My new friend (and Jeremy's colleague) Kean Walmsley was pointed in our direction by Jim Quanci and Cyrille Fauvel and started <a href=\"http://through-the-interface.typepad.com/through_the_interface/2014/10/autocad-io-api-a-new-batch-processing-web-service.html\">gearing up for the VR Hackathon</a>.</p>\n<p>Not only that, but he has already built demos on top of my <a href=\"http://jaanga.github.io/cookbook/voice-commands/readme-reader.html\">voice recognition template</a> and produced the series of further exciting results listed below.</p>\n<p>And there's much, much more beyond this. </p>\n<p>From my point of view, this all looks like the start of a classic Internet disruption by a small start-up.</p>\n<p>The technology is there; the industry that needs disrupting (AEC) is obediently stagnating.</p>\n<p>All that's needed is the founders...</p>\n</blockquote><p>Here is an overview if Kean's recent posts:</p><ul>\n<li><a href=\"http://through-the-interface.typepad.com/through_the_interface/2014/10/gearing-up-for-the-vr-hackathon.html\">Gearing up for the VR Hackathon</a></li>\n<li>Creating a stereoscopic viewer for Google Cardboard using the Autodesk 360 viewer:</li>\n<ul>\n<li><a href=\"http://through-the-interface.typepad.com/through_the_interface/2014/10/creating-a-stereoscopic-viewer-for-google-cardboard-using-the-Autodesk-360-viewer-part-1.html\">Part 1</a></li>\n<li><a href=\"http://through-the-interface.typepad.com/through_the_interface/2014/10/creating-a-stereoscopic-viewer-for-google-cardboard-using-the-Autodesk-360-viewer-part-2.html\">Part 2</a></li>\n<li><a href=\"http://through-the-interface.typepad.com/through_the_interface/2014/10/creating-a-stereoscopic-viewer-for-google-cardboard-using-the-Autodesk-360-viewer-part-3.html\">Part 3</a></li>\n</ul>\n<li><a href=\"http://through-the-interface.typepad.com/through_the_interface/2014/10/vr-hackathon-2014-in-sf.html\">VR Hackathon 2014 in SF</a></li>\n</ul><p>Too exciting to miss!</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1231_berlin_hack_va3c_adva",
    "header_text": "AutoCAD as a Web Service",
    "local_header_href": "#autocad-as-a-web-service",
    "chunk_text": "<h4>AutoCAD as a Web Service</h4><p>After all the exciting 3D stuff listed above, Kean went on to write about\n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2014/10/autocad-io-api-a-new-batch-processing-web-service.html\">\nmaking programmatic use of the AutoCAD core services via a web service</a>.</p><p>This is another topic that every application developer should be thinking about and aware of.</p><p>Just as Theo points out, things are really taking off!</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1231_berlin_hack_va3c_adva",
    "header_text": "Collada STL ADVA Export Settings",
    "local_header_href": "#collada-stl-adva-export-settings",
    "chunk_text": "<h4>Collada STL ADVA Export Settings</h4><p>Talking about the 3D viewer, I built my daughter Marie a new writing desk, and a friend of hers created this model of Maria's room to discuss our plan:</p><p>He had to explore a bit to get the Collada STL export setting right for the model to display correctly in the Autodesk View and Data API viewer; here they are:</p><center>\n<img alt=\"Collada STL export settings for the Autodesk View and Data API\" src=\"img/collada_stl_export_settings.png\" width=\"482\"/>\n</center><a name=\"7\"></a>"
  },
  {
    "original_filename": "1231_berlin_hack_va3c_adva",
    "header_text": "Custom User Settings Storage and RvtVa3c Update",
    "local_header_href": "#custom-user-settings-storage-and-rvtva3c-update",
    "chunk_text": "<h4>Custom User Settings Storage and RvtVa3c Update</h4><p>Back to the Revit API and the vA3C viewer again, and based on the discussion with David and Theo on the\n\n<a href=\"https://github.com/va3c/viewer/issues/6\">failure to load a big model</a>,\n\nI tried reducing the file size of the JSON geometry output produced by the RvtVa3c three.js and vA3C editor model exporter and added support for runtime reading of user settings and switching between indented and non-indented JSON.</p><p>The necessary switch is provided by the JsonConvert class defined by the Newtonsoft.Json library that I am using to serialise the classes collected from the custom exporter to JSON, and set like this in its call to serialise them:</p><pre class=\"code\">\n  <span class=\"teal\">Formatting</span> formatting\n    = <span class=\"teal\">UserSettings</span>.JsonIndented\n      ? <span class=\"teal\">Formatting</span>.Indented\n      : <span class=\"teal\">Formatting</span>.None;\n \n  <span class=\"teal\">File</span>.WriteAllText( _filename,\n    <span class=\"teal\">JsonConvert</span>.SerializeObject(\n      _container, formatting, settings ) );\n</pre><p>I implemented a new class UserSettings to provide a simple way for the end user to control this property.</p><p>I obviously considered using the built-in .NET user settings classes, but they interact rather heavily with the operating system and can be difficult to use in the context of a Revit add-in.</p><p>I also considered using a custom implementation, e.g. this\n\n<a href=\"http://www.blackbeltcoder.com/Articles/winforms/a-custom-settings-class-for-winforms\">\ncustom settings class for WinForms</a> by\n\nJonathan Wood, the Black Belt Coder.</p><p>In the end, however, I preferred to avoid all hassles with other people's code and paradigms and simply write my own.</p><p>My UserSettings class checks whether a file with the same name and location as the Revit add-in exists, except the filename extension DLL is replaced by TXT.\nIf so, it reads the user preferences from there.\nIf not, it creates a new file using the default value that can easily be modified by the user.</p><p>To support its parsing of a Boolean value, I implemented this new utility method to read a true or false value from a string:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Extract a true or false value from the given</span>\n  <span class=\"gray\">///</span><span class=\"green\"> string, accepting yes/no, Y/N, true/false, T/F</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and 1/0. We are extremely tolerant, i.e., any</span>\n  <span class=\"gray\">///</span><span class=\"green\"> value starting with one of the characters y, n,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> t or f is also accepted. Return false if no </span>\n  <span class=\"gray\">///</span><span class=\"green\"> valid Boolean value can be extracted.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> GetTrueOrFalse(\n    <span class=\"blue\">string</span> s,\n    <span class=\"blue\">out</span> <span class=\"blue\">bool</span> val )\n  {\n    val = <span class=\"blue\">false</span>;\n \n    <span class=\"blue\">if</span>( s.Equals( <span class=\"teal\">Boolean</span>.TrueString,\n      <span class=\"teal\">StringComparison</span>.OrdinalIgnoreCase ) )\n    {\n      val = <span class=\"blue\">true</span>;\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n    <span class=\"blue\">if</span>( s.Equals( <span class=\"teal\">Boolean</span>.FalseString,\n      <span class=\"teal\">StringComparison</span>.OrdinalIgnoreCase ) )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n    <span class=\"blue\">if</span>( s.Equals( <span class=\"maroon\">\"1\"</span> ) )\n    {\n      val = <span class=\"blue\">true</span>;\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n    <span class=\"blue\">if</span>( s.Equals( <span class=\"maroon\">\"0\"</span> ) )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n    s = s.ToLower();\n \n    <span class=\"blue\">if</span>( <span class=\"maroon\">'t'</span> == s[0] || <span class=\"maroon\">'y'</span> == s[0] )\n    {\n      val = <span class=\"blue\">true</span>;\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n    <span class=\"blue\">if</span>( <span class=\"maroon\">'f'</span> == s[0] || <span class=\"maroon\">'n'</span> == s[0] )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n</pre><p>That is used to determine the value of the UserSettings class JsonIndented property like this:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">UserSettings</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _JsonIndent = <span class=\"maroon\">\"JsonIndent\"</span>;\n \n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _error_msg_format\n    = <span class=\"maroon\">\"Invalid settings in '{0}':\\r\\n\\r\\n{1}\"</span>\n    + <span class=\"maroon\">\"\\r\\n\\r\\nPlease add {2} = {3} or {4}.\"</span>;\n \n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> SyntaxError( <span class=\"blue\">string</span> path, <span class=\"blue\">string</span> s )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n      _error_msg_format, path, s, _JsonIndent,\n      <span class=\"teal\">Boolean</span>.TrueString, <span class=\"teal\">Boolean</span>.FalseString ) );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> JsonIndented\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">string</span> path = <span class=\"teal\">Assembly</span>.GetExecutingAssembly()\n        .Location;\n \n      path = <span class=\"teal\">Path</span>.ChangeExtension( path, <span class=\"maroon\">\"txt\"</span> );\n \n      <span class=\"blue\">if</span>( !<span class=\"teal\">File</span>.Exists( path ) )\n      {\n        <span class=\"teal\">File</span>.WriteAllText( path,\n          _JsonIndent + <span class=\"maroon\">\"=\"</span> + <span class=\"teal\">Boolean</span>.TrueString );\n \n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"Created a new user settings file at '{0}'.\"</span>,\n          path ) );\n      }\n \n      <span class=\"blue\">string</span> s1 = <span class=\"teal\">File</span>.ReadAllText( path );\n \n      <span class=\"blue\">int</span> i = s1.IndexOf( _JsonIndent );\n \n      <span class=\"blue\">if</span>( 0 &gt; i )\n      {\n        <span class=\"blue\">return</span> SyntaxError( path, s1 );\n      }\n \n      <span class=\"blue\">string</span> s = s1.Substring( i\n        + _JsonIndent.Length );\n \n      i = s.IndexOf( <span class=\"maroon\">'='</span> );\n \n      <span class=\"blue\">if</span>( 0 &gt; i )\n      {\n        <span class=\"blue\">return</span> SyntaxError( path, s1 );\n      }\n \n      s = s.Substring( i + 1 ).Trim();\n \n      <span class=\"blue\">bool</span> rc;\n \n      <span class=\"blue\">if</span>( !<span class=\"teal\">Util</span>.GetTrueOrFalse( s, <span class=\"blue\">out</span> rc ) )\n      {\n        <span class=\"blue\">return</span> SyntaxError( path, s1 );\n      }\n \n      <span class=\"blue\">return</span> rc;\n    }\n  }\n}\n</pre><p>Editing the automatically generated file and specifying an invalid Boolean value such as the string \"a non-Boolean value\" produces the following error message:</p><center>\n<img alt=\"RvtVa3c invalid Boolean value error message\" src=\"img/rvtva3c_JSON_indent_invalid_boolean.png\" width=\"416\"/>\n</center><p>Please excuse the overkill  :-)</p><p>The entire updated RvtVa3c custom exporter add-in implementation is provided in the\n\n<a href=\"https://github.com/va3c/RvtVa3c\">RvtVa3c GitHub repository</a>,\n\nand the version discussed above is\n\n<a href=\"https://github.com/va3c/RvtVa3c/releases/tag/2015.0.0.26\">release 2015.0.0.26</a>.</p><p>Enjoy!</p>"
  }
]