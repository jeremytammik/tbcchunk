[
  {
    "original_filename": "0513_type_filter_benchmark",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0513_type_filter_benchmark",
    "header_text": "Type Filter Benchmark Update",
    "local_header_href": "#type-filter-benchmark-update",
    "chunk_text": "<h3>Type Filter Benchmark Update</h3><p>We have come to trust the Revit 2011 API filters to really be the most performant approach to retrieve sets of database elements fulfilling a complex combination of criteria.\nTo reinforce that message, here is another benchmark by Piotr Zurek, who says:\n\n<p>While searching for some answers in your blog I have stumbled across an old post where Guy Robinson compared the performance of the Revit 2010 API \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/filter-performa.html\">\nclass filter vs an anonymous method</a>. \n\n<p>I found the result really intriguing since I always assumed that the filter would be quicker.\nSince the post was a bit old I decided to check how those results would look in the current version. \nI also decided to add a third element to the comparison – filtering using LINQ. \nYou know, just for the kicks... :-) \n\n<p>I'm happy to report that the situation has improved, by which I mean the speed of the \"elegant\" Revit filter is on par with both other methods.\nI probably should have tried to test it on a bigger model with more elements to filter to get a bit measurable result but what I got clearly shows that the 3x difference is gone.\nHere are my results from five runs:</p>\n<center>\n<table>\n<tr><th align=\"right\">Method</th><th> </th> <th colspan=\"5\">    Time in ms to retrieve 860 elements</th></tr>\n<tr><td align=\"right\">Class filter</td><td></td> <td align=\"right\">108</td><td align=\"right\">40</td><td align=\"right\">36</td><td align=\"right\">37</td><td align=\"right\">37</td></tr>\n<tr><td align=\"right\">Anonymous method</td><td></td> <td align=\"right\">192</td><td align=\"right\">36</td><td align=\"right\">39</td><td align=\"right\">38</td><td align=\"right\">37</td></tr>\n<tr><td align=\"right\">LINQ</td><td></td> <td align=\"right\">129</td><td align=\"right\">37</td><td align=\"right\">37</td><td align=\"right\">39</td><td align=\"right\">39</td></tr>\n</table>\n</center>\n<p>Here is the\n\n<a href=\"https://gist.github.com/772300\">source code</a> used, reproduced here below for your convenience:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Commands</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">UIApplication</span> uiApp = commandData.Application;\n      <span class=\"teal\">UIDocument</span> uiDoc = uiApp.ActiveUIDocument;\n      <span class=\"teal\">Application</span> app = uiApp.Application;\n      <span class=\"teal\">Document</span> doc = uiDoc.Document;\n \n      <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n      <span class=\"green\">// f5 = f1 &amp;&amp; f4</span>\n      <span class=\"green\">// = f1 &amp;&amp; (f2 || f3)</span>\n      <span class=\"green\">// = family instance and (door or window)</span>\n \n<span class=\"blue\">      #region</span> Filters and collector definitions\n \n      <span class=\"teal\">ElementClassFilter</span> f1 \n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>( \n          <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) );\n \n      <span class=\"teal\">ElementCategoryFilter</span> f2 \n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n          <span class=\"teal\">BuiltInCategory</span>.OST_Doors );\n \n      <span class=\"teal\">ElementCategoryFilter</span> f3 \n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n          <span class=\"teal\">BuiltInCategory</span>.OST_Windows );\n \n      <span class=\"teal\">LogicalOrFilter</span> f4 \n        = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( f2, f3 );\n \n      <span class=\"teal\">LogicalAndFilter</span> f5 \n        = <span class=\"blue\">new</span> <span class=\"teal\">LogicalAndFilter</span>( f1, f4 );\n \n      <span class=\"teal\">FilteredElementCollector</span> collector \n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n<span class=\"blue\">      #endregion</span>\n \n      <span class=\"green\">//#region Filtering with a class filter</span>\n      <span class=\"green\">//List&lt;Element&gt; openingInstances = </span>\n      <span class=\"green\">//  collector.WherePasses(f5).ToElements() </span>\n      <span class=\"green\">//    as List&lt;Element&gt;;</span>\n      <span class=\"green\">//#endregion</span>\n \n      <span class=\"green\">//#region Filtering with an anonymous method</span>\n      <span class=\"green\">//List&lt;Element&gt; openings = collector</span>\n      <span class=\"green\">//  .WherePasses(f4)</span>\n      <span class=\"green\">//  .ToElements() as List&lt;Element&gt;;</span>\n      <span class=\"green\">//List&lt;Element&gt; openingInstances</span>\n      <span class=\"green\">//  = openings.FindAll(</span>\n      <span class=\"green\">//    e =&gt; e is FamilyInstance );</span>\n      <span class=\"green\">//#endregion</span>\n \n<span class=\"blue\">      #region</span> Filtering with LINQ\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; openings = collector\n        .WherePasses( f4 )\n        .ToElements() <span class=\"blue\">as</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;;\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; openingInstances \n        = ( <span class=\"blue\">from</span> instances <span class=\"blue\">in</span> openings\n          <span class=\"blue\">where</span> instances <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span>\n          <span class=\"blue\">select</span> instances ).ToList&lt;<span class=\"teal\">Element</span>&gt;();\n<span class=\"blue\">      #endregion</span>\n \n      <span class=\"blue\">int</span> n = openingInstances.Count;\n      sw.Stop();\n \n      <span class=\"teal\">Debug</span>.WriteLine( <span class=\"blue\">string</span>.Format( \n        <span class=\"maroon\">\"Time to get {0} elements: {1}ms\"</span>, \n        n, sw.ElapsedMilliseconds ) );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      message = ex.Message + ex.StackTrace;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n}\n</pre>\n<p>Many thanks to Piotr for testing and sharing these results!\n\n<p>By the way, this comparison and the results are quite comparable to the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/level-filter-benchmark.html\">\nlevel filter benchmark</a> included\n\nin Kevin Vandecar's\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/filtered-element-collectors.html\">\nfiltered element collector overview and benchmarking suite</a>.\n</p></p></p></p></p></p>"
  }
]