[
  {
    "original_filename": "0059_pickone",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0059_pickone",
    "header_text": "PickOne",
    "local_header_href": "#pickone",
    "chunk_text": "<h3>PickOne</h3><p>Here is a small note on how to make use of the PickOne Revit element selection method.</p><p>For any source code example of how to use any Revit API method, one obvious to start looking is always the global solution SDKSamples2009.sln in the SDK Samples folder.</p><p>PickOne is used in the Revit SDK samples VisibilityControl and PowerCircuit. You can see this by opening SDKSamples2009.sln and searching globally for PickOne(). This returns a list of hits, e.g.:</p><pre>\nC:\\SDK\\Samples\\VisibilityControl\\CS\\VisibilityCtrl.cs(138):\nm_document.Selection.PickOne();\n\nC:\\SDK\\Samples\\PowerCircuit\\CS\\CircuitOperationData.cs(518):\nif (!m_revitDoc.Selection.PickOne())\n</pre><p>Here is an excerpt from the VisibilityControl sample, slightly cleaned up and reformatted for readability, and with some numbered comments added in bold:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> Isolate()\n{\n  <span class=\"green\"><b>// 1. clear selection:</b></span>\n  m_document.Selection.Elements.Clear();\n  <span class=\"blue\">switch</span> (m_isolateMode)\n  {\n    <span class=\"blue\">case</span> <span class=\"teal\">IsolateMode</span>.PickOne:\n      <span class=\"green\"><b>// 2. pick one element:</b></span>\n      m_document.Selection.PickOne();\n      <span class=\"blue\">break</span>;\n \n    <span class=\"blue\">case</span> <span class=\"teal\">IsolateMode</span>.WindowSelect:\n      m_document.Selection.WindowSelect();\n      <span class=\"blue\">break</span>;\n  }\n \n  <span class=\"green\"><b>// 3. retrieve selected elements:</b></span>\n  Autodesk.Revit.<span class=\"teal\">ElementSet</span> elements\n    = m_document.Selection.Elements;\n \n  <span class=\"green\">// hide all categories elements</span>\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Category</span> cat <span class=\"blue\">in</span>\n    m_document.Settings.Categories )\n  {\n    SetVisibility(<span class=\"blue\">false</span>, cat.Name);\n  }\n \n  <span class=\"green\"><b>// 4. make use of selected elements:</b></span>\n  <span class=\"green\">// set the selection elements visibility</span>\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> element <span class=\"blue\">in</span> elements )\n  {\n    <span class=\"teal\">Category</span> cat = element.Category;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != cat\n      &amp;&amp; !<span class=\"blue\">string</span>.IsNullOrEmpty( cat.Name ) )\n    {\n      SetVisibility( <span class=\"blue\">true</span>, cat.Name );\n    }\n  }\n}\n</pre><p>The PickOne method manipulates the document's current selection set, accessible through the document Selection property.\nThe bold numbered comments correspond to the critical steps:</p><ol>\n<li>Clear the current selection.</li>\n<li>Execute the PickOne method.</li>\n<li>Access the updated selection set.</li>\n<li>Do something with the selected elements.</li>\n</ol><p>Hopefully this clarifies the use of the PickOne method.</p>"
  }
]