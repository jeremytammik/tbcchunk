[
  {
    "original_filename": "0692_top_faces_of_wall",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0692_top_faces_of_wall",
    "header_text": "Top Faces of Sloped Wall Update",
    "local_header_href": "#top-faces-of-sloped-wall-update",
    "chunk_text": "<h3>Top Faces of Sloped Wall Update</h3><p>On Saturday we left Paris and arrived in Göteborg, or Go:teborg as the local tourist office appears to like spelling it.\n\n<p>On Sunday we went for a trip on one of the public transportation ferry boats out to Vrångö.\nFrom right to left you see Jim, Partha, Philippe, and me, and Adam is taking the picture:</p>\n<center>\n<img alt=\"DevTech team on Vrångö\" src=\"img/vrango_jeremy_philippe_partha_jim.jpg\" width=\"400\"/>\n</center>\n<p>Fittingly enough, I also had some correspondence on a Revit API issue with a Swedish developer on the same day:\nHenrik Bengtsson of\n\n<a href=\"http://www.lindab.se\">\nLindab</a> submitted a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html?cid=6a00e553e1689788330162fda970a9970d#comment-6a00e553e1689788330162fda970a9970d\">\ncomment</a> on \n\nthe retrieval of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html\">\ntop faces of a sloped wall</a>:\n\n<blockquote>\n<em>\n<p>When I tried parts of this code, I discovered that the .Normal function of the PlanarFace object sometimes shows incorrect values for faces with a positive or negative z-direction.\n\n<p>This especially affects the code part:\n</p></p></em>\n<pre class=\"code\">\nif( f is PlanarFace &amp;&amp; PointsUpwards( ((PlanarFace)f).Normal ) )\n</pre>\n<em>\n<p>A solution that so far has given me correct values is to replace the .Normal function of the PlanarFace object with the .ComputeNormal function.\n\n<p>I found problems when analyzing faces that had a positive or negative z-value of its normal. So, not only the boundary faces of the wall but also top and bottom faces of its openings...\n</p></p></em>\n</blockquote>\n<p>Henrik also sent me a simple model with two simple quadrilateral sloped walls in which the existing \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html\">\nCmdWallTopFaces</a> command \n\nimplementation fails:</p>\n<center>\n<img alt=\"Two sloped walls\" src=\"img/wall_top_faces_v2.png\"/>\n</center>\n<p>The command reports zero top faces:</p>\n<pre>\n0 top faces found on Walls &lt;194639 Lindab FR E120/120 202 M0 c450&gt;\n0 top faces found on Walls &lt;195080 Lindab FR E120/120 202 M0 c450&gt;\n</pre>\n<p>This is obviously false:</p>\n<center>\n<img alt=\"Wall top faces\" src=\"img/wall_top_faces_v2_3d.png\"/>\n</center>\n<p>Henrik implemented the following improved solution in VB calling ComputeNormal:\n\n<pre class=\"code\">\n  <span class=\"blue\">For</span> <span class=\"blue\">Each</span> f <span class=\"blue\">As</span> DB.<span class=\"teal\">Face</span> <span class=\"blue\">In</span> <span class=\"teal\">Solid</span>.Faces\n    <span class=\"green\">'</span>\n    <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> f <span class=\"blue\">Is</span> DB.<span class=\"teal\">PlanarFace</span> <span class=\"blue\">Then</span>\n      <span class=\"green\">'</span>\n      <span class=\"blue\">Dim</span> pf <span class=\"blue\">As</span> DB.<span class=\"teal\">PlanarFace</span> = f\n\n      <span class=\"blue\">Dim</span> p <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = pf.Origin\n\n      <span class=\"blue\">If</span> pf.ComputeNormal(<span class=\"blue\">New</span> DB.<span class=\"teal\">UV</span>(p.X, p.Y)).Z &gt; 0 <span class=\"blue\">Then</span>\n        <span class=\"green\">'</span>\n        <span class=\"blue\">Dim</span> faceVertices <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> DB.<span class=\"teal\">XYZ</span>) _\n          = pf.Triangulate().Vertices\n\n        <span class=\"blue\">For</span> <span class=\"blue\">Each</span> v <span class=\"blue\">As</span> DB.<span class=\"teal\">XYZ</span> <span class=\"blue\">In</span> faceVertices\n          <span class=\"green\">'</span>\n          <span class=\"blue\">If</span> sideVertices.Contains(v, comparer) <span class=\"blue\">Then</span>\n            <span class=\"green\">'</span>\n            <span class=\"blue\">If</span> <span class=\"blue\">Not</span> ret.Contains(f) <span class=\"blue\">Then</span>\n              <span class=\"green\">'</span>\n              ret.Add(f)\n              <span class=\"green\">'</span>\n            <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n\n            <span class=\"blue\">Exit For</span>\n            <span class=\"green\">'</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n          <span class=\"green\">'</span>\n        <span class=\"blue\">Next</span>\n        <span class=\"green\">'</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n      <span class=\"green\">'</span>\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"green\">'</span>\n  <span class=\"blue\">Next</span>\n</pre>\n<p>He says:\n\n<blockquote>\n<em>\n<p>I tried the .ComputeNormal function and it helps solving the problem. The .Normal function shows an incorrect x as well as z value for the walls that was in the project file.\n\n<p>Depending on the vector of the top face, I am sure that x, y and z-directions will be incorrect. \n\n<p>The function that this routine is implemented in looks like this (more or less a VB copy of your blog code):\n\n<p>I have tried a couple of walls and sometimes a wall works correct, then if I run a mirror command on it, the new one becomes incorrect. \n\n<p>A positive or negative top face slope has showed to have an impact as well.\n\n<p>If there are openings inside the wall they can have an incorrect .Normal value as well. That was actually how I discovered it. The top face of a wall was pointing upwards\nand ended up in my collection as well.\n</p></p></p></p></p></p></em>\n</blockquote>\n<p>I decided I might as well clean up this command a bit more to ensure that top faces are really found.\n\n<p>If we make use of the Face.ComputeNormal method instead of the planar face normal vector, we might as well remove the restriction to planar faces at the same time.\n\n<p>To handle all kinds of faces, I can use the following simple method to determine whether a given face is facing upwards:\n\n<ul>\n<li>Determine the face UV bounding box.\n<li>Pick a UV point in the middle.\n<li>Call ComputeNormal to determine the face normal vector at that point.\n<li>Check whether it points upwards.\n</li></li></li></li></ul>\n<p>This is still an extremely simplistic test, so there is no guarantee that it will handle the general case.\nFor instance, if the face has holes or a complex boundary, the middle point calculated may not belong to it at all.\nIt is up to you to test it for the cases you need.\n\n<p>The command already implements a bunch of other stuff to eliminate faces that belong to openings, and thus are not top faces of the wall, but just faces into the wall openings.\nI left that part completely untouched.\n\n<p>I first replaced the line of code that I was previously using which was only checking for planar faces by a call to this new method which does the same thing:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Super-simple test whether a face is planar </span>\n  <span class=\"gray\">///</span><span class=\"green\"> and its normal vector points upwards.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> IsTopPlanarFace( <span class=\"teal\">Face</span> f )\n  {\n    <span class=\"blue\">return</span> f <span class=\"blue\">is</span> <span class=\"teal\">PlanarFace</span>\n      &amp;&amp; PointsUpwards( ( (<span class=\"teal\">PlanarFace</span>) f ).Normal );\n  }\n</pre>\n<p>I then went and implemented the new more general approach described above like this to replace it:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Simple test whether a given face normal vector </span>\n  <span class=\"gray\">///</span><span class=\"green\"> points upwards in the middle of the face.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> IsTopFace( <span class=\"teal\">Face</span> f )\n  {\n    <span class=\"teal\">BoundingBoxUV</span> b = f.GetBoundingBox();\n    <span class=\"teal\">UV</span> p = b.Min;\n    <span class=\"teal\">UV</span> q = b.Max;\n    <span class=\"teal\">UV</span> midpoint = p + 0.5 * ( q - p );\n    <span class=\"teal\">XYZ</span> normal = f.ComputeNormal( midpoint );\n    <span class=\"blue\">return</span> PointsUpwards( normal );\n  }\n</pre>\n<p>Lo and behold! \nRunning this on the simple model provided by Henrik returned the two faces, just as expected:</p>\n<center>\n<img alt=\"Wall top face edges\" src=\"img/wall_top_faces_v2_edges.png\"/>\n</center>\n<p>Problem apparently fixed, a least for this simple case.\n\n<p>I also ran the command on rac_basic_sample_project.rvt again, like I did the first implementation.\nIt now reports 119 walls selected with 34 top faces when I select all walls in the Level 1 plan view, and 605 walls selected with 47 top faces when I do it in 3D view.\nThese results are both different from what I found in the simplified model last time, but I am not going to worry about that.\n\n<p>Anyway, here is \n\n<a href=\"zip/bc_12_96.zip\">\nversion 2012.0.96.2</a> of\n\nThe Building Coder samples including the updated command.\nI am looking forward to hearing what new issues you run into with it.\n\n<p>Many thanks to Henrik for prompting this improvement!\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]