[
  {
    "original_filename": "1641_revit_2018_3",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- revit 2018.3\n  /a/doc/revit/tbc/git/a/img/about_revit_2018_3.png\n  https://up.autodesk.com/2018/RVT/Autodesk_Revit_2018_3_Readme.htm\nRevit 2018.3 Update\nUpdate (397.9MB)\nReleased Apr 9, 2018\nView release notes -- https://up.autodesk.com/2018/RVT/Autodesk_Revit_2018_3_Readme.htm\nSeverity:\tHigh\nStatus:\tLive\nUpdate ID:\t{9CA05B9A-1809-0510-A1B4-98696E090436}\nThis update includes new functionality, addresses customer reported issues and crashes, and contains the fixes included in the Revit 2018.0.1, 2018.0.2, and 2018.1.1 Hot Fixes as well as the Revit 2018.1 and 2018.2 Updates. With this install the following will be updated: Revit 2018, Collaboration for Revit 2018, and Dynamo. Consult the release notes for areas improved and issues addressed by this update, which can be applied to Autodesk Revit 2018 running on all supported operating systems and languages. After this update is applied successfully, the build number specified in the Help > About dialog will be 18.3.0.81.\n\nhttp://revit.downloads.autodesk.com/download/2018_3_RVT/Docs/RelNotes/Autodesk_Revit_2018_3_ReleaseNotes.html\nReported Issues Resolved within Revit 2018\nThis list represents the reported issues resolved in Autodesk Revit 2018 within build: 20180329_1100. The resolved issues are listed based upon discipline and feature. Additionally for the Revit 2018.3 Update, a list of smaller improvements which may not be explicitly mentioned within the Revit 2018 Online Help are included. More information on improvements can be found within the What's New section of the Revit 2018 online Help.\n2018.3 Update\n- Resolved Issues\n    - Platform\n    - Architecture\n    - MEP\n    - Structure\n    - API\n        - Improved stability when printing sheets through the API.\n- Improvements: \n    - Added connection to Next Gen BIM 360 for cloud worksharing, which allows flexible access permissions for cloud workshared models within the same project.\n    - Updated the Scope Box drop-down list in the Properties Panel to display the scope boxes in alpha-numeric order.\n    - Improved the pipe sizing feature by basing the size of a single pipe attached with taps or analytical pipe connections on the worst case.\n\n- do not use SetValueString\n  14094985 [Editing document on DocumentSaving/DocumentPrinting]\n  https://forums.autodesk.com/t5/revit-api-forum/editing-document-on-documentsaving-documentprinting/m-p/7913700\n\n- ExternalEvent.Raise() should accept parameters \n  https://forums.autodesk.com/t5/revit-api-forum/externalevent-raise-should-accept-parameters/m-p/7912106\n  from pyRevitMEP.event import CustomizableEvent\n  https://github.com/CyrilWaechter/pyRevitMEP/blob/master/pyRevitMEP.tab/Tools.panel/ViewRename.pushbutton/script.py\n  You can work around this by wrapping the Revit event. For example, you can do the following:\n\n@AutodeskRevit 2018.3 update, avoiding SetValueString and passing data via an external event #RevitAPI #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/2018_3\n\nI installed the latest Revit update, and want to highlight two of the numerous interesting ongoing Revit API forum discussions\n&ndash; Revit 2018.3 update\n&ndash; Avoid <code>SetValueString</code>\n&ndash; Passing Data via <code>ExternalEvent.Raise</code>...\n\n--->"
  },
  {
    "original_filename": "1641_revit_2018_3",
    "header_text": "Revit 2018.3, SetValueString and External Events",
    "local_header_href": "#revit-20183-setvaluestring-and-external-events",
    "chunk_text": "### Revit 2018.3, SetValueString and External Events\n\nI installed the latest Revit update, and want to highlight two of the numerous interesting ongoing Revit API forum discussions:\n\n- [Revit 2018.3 update](#2) \n- [Avoid `SetValueString`](#3) \n- [Passing Data via `ExternalEvent.Raise`](#4)\n\n\n####<a name=\"2\"></a>Revit 2018.3 Update\n\nI installed the Revit 2018.3 update released yesterday, April 9, 2018, with the build numbers 20180329_1100 and 18.3.0.81 specified in Help &gt; About.\nHere is\nthe [direct download link](http://up.autodesk.com/2018/RVT/9CA05B9A-1809-0510-A1B4-98696E090436/Autodesk_Revit_2018_3.exe).\n\nThis update is required for Revit 2018 to work in the new BIM 360 Design platform.\n\nFurthermore, it includes other new functionality and contains the fixes included in the previous Revit hot fixes and updates. It updates Revit 2018 itself, Collaboration for Revit 2018, and Dynamo. \n\nFor details, please check\nthe [readme](https://up.autodesk.com/2018/RVT/Autodesk_Revit_2018_3_Readme.htm)\nand [release notes](http://revit.downloads.autodesk.com/download/2018_3_RVT/Docs/RelNotes/Autodesk_Revit_2018_3_ReleaseNotes.html).\n\nI extracted the following API relevant items from the latter:\n\n- Resolved Issues\n    - Platform ...\n    - Architecture ...\n    - MEP ...\n    - Structure ...\n    - API: Improved stability when printing sheets through the API.\n- Improvements: \n    - Added connection to Next Gen BIM 360 for cloud worksharing, which allows flexible access permissions for cloud workshared models within the same project.\n    - Updated the Scope Box drop-down list in the Properties Panel to display the scope boxes in alpha-numeric order.\n    - Improved the pipe sizing feature by basing the size of a single pipe attached with taps or analytical pipe connections on the worst case.\n\nMore information on improvements can be found in\nthe [What's New section](http://help.autodesk.com/view/RVT/2018/ENU/?guid=GUID-C81929D7-02CB-4BF7-A637-9B98EC9EB38B) of\nthe Revit 2018 online help.\n\n<center>\n<img src=\"img/about_revit_2018_3.png\" alt=\"About Revit 2018.3\" width=\"602\"/>\n</center>\n\n\n####<a name=\"3\"></a>Avoid SetValueString\n\nReturning to some pure Revit API issues, I generally recommend avoiding the use of `SetValueString` to control a parameter value, since I find its behaviour somewhat unpredictable.\n\n`GetValueString` returns a string representing the parameter value the way Revit thinks a user would expect to see it. For instance, it might convert an element id to the associated element name.\nTrying to use that approach to set an element idea sounds like a really bad idea to me.\n\nThis question came up in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread \non [editing a document on `DocumentSaving` and `DocumentPrinting`](https://forums.autodesk.com/t5/revit-api-forum/editing-document-on-documentsaving-documentprinting/m-p/7913700):\n\n**Question:** Just before printing/saving I would like to save the smallest view scale on all sheets. This is done to circumvent the \"As indicated\" scale text in the title block once you add a legend to a sheet. We just want to display the scale of the view, not the legend. In case of multiple views, the smallest scale.\n\nI'm trying to modify all sheets on catching these events by overriding a shared parameter. I can read the existing value, but not set a new one.\n\nI tried with/without a transaction with no difference. Do these events allow modifications of the document?\n\n**Answer:** I checked\nthe [`DocumentPrinting` event documentation](http://www.revitapidocs.com/2018.1/86546cf5-eb2f-ffd7-3931-fc361f1264e2.htm).\n\nIt clearly states:\n\n> This event is raised when Revit is just about to print a view or ViewSet of the document.\n\n> Handlers of this event are permitted to make modifications to any document (including the active document), except for documents that are currently in read-only mode.\n\n> Event is cancellable. To cancel it, call the 'Cancel()' method of event's argument to True. Your application is responsible for providing feedback to the user about the reason for the cancellation.\n\nTherefore, either something is wrong with your code, or the documentation needs fixing.\n\nOh no, re-reading your code, I see another possible issue:\n\nYou are using `SetValueString`.\n\nAre you sure that that works at all?\n\nPlease implement access to the `ManageSheetScale` method from an external command that you call manually yourself from the user interface just before printing or saving and ensure that this really works.\n\nI recommend never using `SetValueString`.\n\nTry to use the appropriate override of the `Parameter.Set` method instead.\n\nThen you really know what you are doing.\n\nWith `SetValueString`, you have no idea.\n\n\n####<a name=\"4\"></a>Passing Data via ExternalEvent.Raise\n\nAnother interesting discussion ensued\nabout [`ExternalEvent.Raise` should accept parameters](https://forums.autodesk.com/t5/revit-api-forum/externalevent-raise-should-accept-parameters/m-p/7912106):\n\n**Question:** I would like to pass additional custom data when raising an external event, e.g., by passing in an own object.\n\nIt would be nice to have generics involved here, for instance, having an interface like this:\n\n<pre class=\"code\">\n  IExternalEventHandler&lt;T&gt;\n\n  ExternalEvent&lt;T&gt; EE =  ExternalEvent.Create(\n    handler IExternalEventHandler&lt;T&gt;);\n\n  EE.Raise(T obj);\n</pre>\n\n**Answer:** Cyril Waechter solved this issue in Python and says:\n\nI think I did something similar in Python.\n\nNot a perfect solution, but well enough until I find better.\n\nSee\nmy [Python HVAC](http://pythoncvc.net) article\non [Revit batch view renaming, regular expressions, docstrings and a GUI](http://pythoncvc.net/?p=294)\nand [full Git6Hub code sample](https://github.com/CyrilWaechter/pyRevitMEP/blob/master/pyRevitMEP.tab/Tools.panel/ViewRename.pushbutton/script.py):\n\nHere is an extract:\n\n<pre class=\"prettyprint\">\nclass CustomizableEvent:\n  def __init__(self):\n    self.function_or_method = None\n    self.args = ()\n    self.kwargs = {}\n\n  def raised_method(self):\n    \"\"\"\n    Method executed by IExternalEventHandler.Execute when ExternalEvent is raised by ExternalEvent.Raise.\n    \"\"\"\n    self.function_or_method(*self.args, **self.kwargs)\n\n  def raise_event(self, function_or_method, *args, **kwargs):\n    \"\"\"\n    Method used to raise an external event with custom function and parameters\n    Example :\n    &gt;&gt;&gt; customizable_event = CustomizableEvent()\n    &gt;&gt;&gt; customizable_event.raise_event(rename_views, views_and_names)\n    \"\"\"\n    self.args = args\n    self.kwargs = kwargs\n    self.function_or_method = function_or_method\n    custom_event.Raise()\n\n\ncustomizable_event = CustomizableEvent()"
  },
  {
    "original_filename": "1641_revit_2018_3",
    "header_text": "Create a subclass of IExternalEventHandler",
    "local_header_href": "#create-a-subclass-of-iexternaleventhandler",
    "chunk_text": "# Create a subclass of IExternalEventHandler\n\nclass CustomHandler(IExternalEventHandler):\n  \"\"\"Input : function or method. Execute input in a IExternalEventHandler\"\"\"\n\n  # Execute method run in Revit API environment.\n  # noinspection PyPep8Naming, PyUnusedLocal\n  def Execute(self, application):\n    try:\n      customizable_event.raised_method()\n    except InvalidOperationException:\n      # If you don't catch this exeption Revit may crash.\n      print \"InvalidOperationException catched\"\n\n  # noinspection PyMethodMayBeStatic, PyPep8Naming\n  def GetName(self):\n    return \"Execute an function or method in a IExternalHandler\""
  },
  {
    "original_filename": "1641_revit_2018_3",
    "header_text": "Create an handler instance and his associated ExternalEvent",
    "local_header_href": "#create-an-handler-instance-and-his-associated-externalevent",
    "chunk_text": "# Create an handler instance and his associated ExternalEvent\n\ncustom_handler = CustomHandler()\ncustom_event = ExternalEvent.Create(custom_handler)\n</pre>\n\nMark Vulfson added a C# implementation as well, saying:\n\n> You can work around this by wrapping the Revit event.\n\n> For example, you can do the following:\n\n<pre class=\"code\">\nabstract public class RevitEventWrapper&lt;T&gt;\n  : IExternalEventHandler \n{\n  private object @lock;\n  private T savedArgs;\n  private ExternalEvent revitEvent;\n \n  public RevitEventWrapper() \n  {\n    revitEvent = ExternalEvent.Create(this);\n    @lock = new object();\n  }\n \n  public void Execute(UIApplication app) \n  {\n    T args;\n \n    lock (@lock)\n    {\n      args = savedArgs;\n      savedArgs = default(T);\n    }\n    Execute(app, args);\n  }\n \n  public string GetName()\n  {\n    return GetType().Name;\n  }\n \n  public void Raise(T args)\n  {\n    lock (@lock)\n    {\n      savedArgs = args;\n    }\n    revitEvent.Raise();\n  }\n \n  abstract public void Execute(\n    UIApplication app, T args );\n}\n</pre> \n\nThen, you can implement a handler that takes arguments, like so:\n\n<pre class=\"code\">\n  public class EventHandlerWithStringArg\n    : RevitEventWrapper&lt;string&gt;\n  {\n    public override void Execute(\n      UIApplication uiApp,\n      string args )\n    {\n      // Do your processing here with \"args\"\n    }\n  }\n</pre>\n\nFinally, you can raise your event like this\n\n<pre class=\"code\">\n  EventHandlerWithStringArg myEvent\n    = new EventHandlerWithStringArg();\n  .\n  .\n  .\n  myEvent.Raise( \"this is an argument\" );\n</pre> \n\nThere are threading pitfalls, of course, but these are outside the scope of this answer; this is the best you can do given Revit current architecture.\n\nMany thanks to Cyril and Mark for these nice and powerful extension suggestions!"
  }
]