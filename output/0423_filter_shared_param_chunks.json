[
  {
    "original_filename": "0423_filter_shared_param",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0423_filter_shared_param",
    "header_text": "ElementParameterFilter with a Shared Parameter",
    "local_header_href": "#elementparameterfilter-with-a-shared-parameter",
    "chunk_text": "<h3>ElementParameterFilter with a Shared Parameter</h3><p>I thought I had already covered everything I could on filtered element collectors, but far failed.\nHere is a pretty obvious question that just came up on using an ElementParameterFilter with a shared parameter:\n\n<p><strong>Question:</strong> I have successfully used element parameter filter to find elements with a particular parameter value, using 'built-in' parameters, such as BuiltInParameter.ELEM_ROOM_NUMBER.\n\n<p>What I want to do now, is to use a similar filter to find all elements that have a value for a shared parameter.  For example:\n\n<p>I have a shared parameter called \"ROOM_LINK\" and I want to find any elements in the model that have a value for ROOM_LINK.\n\n<p>In this case, ROOM_LINK is applicable to Rooms and Generic Models.\n\n<p>If it is necessary or helpful, this could be done with a non-shared Project parameter, but I think using a shared parameter is more appropriate.\n\n<p>Do you have a little sample of code to show how to use a shared parameter (or other non-built-in parameter) in a filter?\n\n<p><strong>Answer:</strong> Congratulations on your successful use of the element parameter filter.\n\n<p>As you probably noticed, I already published a couple of discussions of related topics, and two of these are specifically on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">\nparameter filters</a> with an appended \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">\nlittle correction</a>.\n\nThe parameter filter post includes a list of pointers to other filtered element collector examples.\n\n<p>When using a parameter filter, you have to set up the ParameterValueProvider.\n\n<p>Its constructor always takes an element id as an argument.\n\n<p>In the samples I discussed so far, this element id argument was defined by converting a built-in parameter enumeration value.\n\n<p>The element id can however also be the real element id of any given real parameter, which can be retrieved by any of the normal means, e.g. by display name like in the following code:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">ParamFilterTest</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Wall</span> wall = uidoc.Selection.PickObject( \n      Autodesk.Revit.UI.Selection.<span class=\"teal\">ObjectType</span>.Element )\n      .Element <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n \n    <span class=\"teal\">Parameter</span> parameter = wall.get_Parameter( \n      <span class=\"maroon\">\"Unconnected Height\"</span> );\n \n    <span class=\"teal\">ParameterValueProvider</span> pvp \n      = <span class=\"blue\">new</span> <span class=\"teal\">ParameterValueProvider</span>( parameter.Id );\n \n    <span class=\"teal\">FilterNumericRuleEvaluator</span> fnrv \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilterNumericGreater</span>();\n \n    <span class=\"teal\">FilterRule</span> fRule \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilterDoubleRule</span>( pvp, fnrv, 20, 1E-6 );\n \n    <span class=\"teal\">ElementParameterFilter</span> filter \n      = <span class=\"blue\">new</span> <span class=\"teal\">ElementParameterFilter</span>( fRule );\n \n    <span class=\"teal\">FilteredElementCollector</span> collector \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n    <span class=\"green\">// Find walls with unconnected height </span>\n    <span class=\"green\">// less than or equal to 20: </span>\n \n    <span class=\"teal\">ElementParameterFilter</span> lessOrEqualFilter \n      = <span class=\"blue\">new</span> <span class=\"teal\">ElementParameterFilter</span>( fRule, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Element</span>&gt; lessOrEqualFounds \n      = collector.WherePasses( lessOrEqualFilter )\n        .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Walls )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ) )\n        .ToElements();\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Revit\"</span>, <span class=\"maroon\">\"Walls found: \"</span> \n      + lessOrEqualFounds.Count );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>Retrieving the parameter by display name should work like this for a shared parameter as well.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]