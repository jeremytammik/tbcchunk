[
  {
    "original_filename": "0297_dimension_label",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0297_dimension_label",
    "header_text": "Creating a Dimension Label",
    "local_header_href": "#creating-a-dimension-label",
    "chunk_text": "<h3>Creating a Dimension Label</h3><p>In a comment on the discussion of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html\">\nfamily API</a>,\n\nNadim asked how to create a label in a family document, and Harry Mattison of Autodesk very friendlily provided some sample source code to generate a new dimension label.\nI hope this is what you were looking for.\n\n<p><strong>Question:</strong> I am trying to use the FamilyItemFactory to create a label inside the family document. \nI can see all kinds of creation functions like NewDimension, NewSweep, NewTextNote, but I can't find any function to do NewLabel. \nYou can do that in the family editor user interface, so it should be possible through the API as well, shouldn't it?\nThe label might be the most common element used in Annotation Families.\n\n<p><strong>Answer:</strong> As said, Harry provided a code snippet to create a dimension label in a family document, which I used to implement a new Building Coder sample command CmdNewDimensionLabel.\n\n<p>It creates two model lines which provide the references required to define a dimension and sets up the appropriate reference array.\nThe reference array is used when calling NewLinearDimension to create a new dimension entity between the two lines.\nFinally, a new family parameter named \"length\" is created and associated with the dimension label.\n\n<p>When I first tried to run this in a new family document based on the annotation family, I was told by Revit that the creation of a new sketch plane is not allowed in that context, so I added a helper method findSketchPlane which returns a sketch plane from the given document with the specified normal vector, if one exists, or else null:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"teal\">SketchPlane</span> findSketchPlane( \n  <span class=\"teal\">Document</span> doc, \n  <span class=\"teal\">XYZ</span> normal )\n{\n  <span class=\"teal\">SketchPlane</span> result = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; a = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n  <span class=\"blue\">int</span> n = doc.get_Elements( \n    <span class=\"blue\">typeof</span>( <span class=\"teal\">SketchPlane</span> ), a );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">SketchPlane</span> e <span class=\"blue\">in</span> a )\n  {\n    <span class=\"blue\">if</span>( e.Plane.Normal.AlmostEqual( normal ) )\n    {\n      result = e;\n      <span class=\"blue\">break</span>;\n    }\n  }\n  <span class=\"blue\">return</span> result;\n}\n</pre>\n<p>Unfortunately, in the next step, I noticed that the model lines used in this sample are not allowed in an annotation  family either, so I just ran the command in a column family document instead.\n\n<p>Here is the mainline of the CmdNewDimensionLabel external command Execute method which performs the following steps:\n\n<ul>\n<li>Find or create an appropriate sketch plane to work on, with a normal vector of (0,0,1).\n<li>Create two vertical geometry lines.\n<li>Create two vertical model curves from the lines.\n<li>Collect the two references to the model lines in a reference array.\n<li>Create a dimension entity between the two lines.\n<li>Create a family parameter named \"length\" for the dimension label.\n<li>Associate the dimension label with the \"length\" parameter.\n</li></li></li></li></li></li></li></ul>\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n<span class=\"teal\">SketchPlane</span> skplane = findSketchPlane( doc, <span class=\"teal\">XYZ</span>.BasisZ );\n \n<span class=\"blue\">if</span>( <span class=\"blue\">null</span> == skplane )\n{\n  <span class=\"teal\">Plane</span> geometryPlane = app.Create.NewPlane(\n    <span class=\"teal\">XYZ</span>.BasisZ, <span class=\"teal\">XYZ</span>.Zero );\n \n  skplane = doc.FamilyCreate.NewSketchPlane(\n    geometryPlane );\n}\n \n<span class=\"blue\">double</span> length = 1.23;\n \n<span class=\"teal\">XYZ</span> start = <span class=\"teal\">XYZ</span>.Zero;\n<span class=\"teal\">XYZ</span> end = app.Create.NewXYZ( 0, length, 0 );\n \n<span class=\"teal\">Line</span> line = app.Create.NewLine( \n  start, end, <span class=\"blue\">true</span> );\n \n<span class=\"teal\">ModelCurve</span> modelCurve\n  = doc.FamilyCreate.NewModelCurve(\n    line, skplane );\n \n<span class=\"teal\">ReferenceArray</span> ra = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceArray</span>();\n \nra.Append( modelCurve.GeometryCurve.Reference );\n \nstart = app.Create.NewXYZ( length, 0, 0 );\nend = app.Create.NewXYZ( length, length, 0 );\n \nline = app.Create.NewLine( start, end, <span class=\"blue\">true</span> );\n \nmodelCurve = doc.FamilyCreate.NewModelCurve( \n  line, skplane );\n \nra.Append( modelCurve.GeometryCurve.Reference );\n \nstart = app.Create.NewXYZ( 0, 0.2 * length, 0 );\nend = app.Create.NewXYZ( length, 0.2 * length, 0 );\n \nline = app.Create.NewLine( start, end, <span class=\"blue\">true</span> );\n \n<span class=\"teal\">Dimension</span> dim \n  = doc.FamilyCreate.NewLinearDimension( \n    doc.ActiveView, line, ra );\n \n<span class=\"teal\">FamilyParameter</span> familyParam\n  = doc.FamilyManager.AddParameter(\n    <span class=\"maroon\">\"length\"</span>,\n    <span class=\"teal\">BuiltInParameterGroup</span>.PG_IDENTITY_DATA,\n    <span class=\"teal\">ParameterType</span>.Length, <span class=\"blue\">false</span> );\n \ndim.Label = familyParam;\n \n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n</pre>\n<p>Here is the dimension and the associated dimension label created in a new family document based on the metric column template:</p>\n<center>\n<img alt=\"Dimension with dimension label\" src=\"img/dimension_label.png\"/>\n</center>\n<p>The length displayed in millimetres, and corresponds to the 1.23 feet specified by the variable 'length', since 1.23 * 12 * 25.4 = 374.904.\n\n<p>As noted above, this code will not work unchanged in an annotation family, because you are prohibited from creating model curves there.\nTo run it in an annotation family, you will have to convert the code to work with \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/detail-lines.html\">\ndetail curves</a>\n\ninstead.\nYou also cannot create a new sketch plane in an annotation family document, which was what prompted me to implement the findSketchPlane helper method.\n\n<p>Here is\n\n<a href=\"zip/bc11061.zip\">\nversion 1.1.0.61</a>\n\nof the complete Building Coder source code and Visual Studio solution including the new command.</p>\n<p>Many thanks to Harry for this solution!\n</p></p></p></p></p></p></p></p></p></p>"
  }
]