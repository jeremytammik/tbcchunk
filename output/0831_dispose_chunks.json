[
  {
    "original_filename": "0831_dispose",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0831_dispose",
    "header_text": "Disposal of Revit API Objects",
    "local_header_href": "#disposal-of-revit-api-objects",
    "chunk_text": "<h3>Disposal of Revit API Objects</h3><p>KR raised a very valid and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/exporting-parameter-data-to-excel.html?cid=6a00e553e168978833017c3204cc10970b#comment-6a00e553e168978833017c3204cc10970b\">\nimportant</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/exporting-parameter-data-to-excel.html?cid=6a00e553e168978833017c3204cd86970b#comment-6a00e553e168978833017c3204cd86970b\">\nquestion</a>\n\nin the discussion of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/exporting-parameter-data-to-excel.html\">\nexporting parameters to Excel</a>:\n\n\n<p><strong>Question:</strong> It would be great if you could clarify in broad terms when to dispose of Revit API objects.\n\n<p>You underline the importance of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/using-using-automagically-disposes-and-rolls-back.html\">\ndisposing of Transaction objects</a>.\n\n<p>Many objects in the Revit API implement IDisposable, for example FilteredElementCollector, DB.Document, etc. \n\n<p>If I create a new FilteredElementCollector within the confines of Revit API, e.g. in an external command, Idling event handler, external event etc., do I still have to dispose of this object?\n\n<p>The rule of thumb in the .NET world is: 'Always dispose of all objects implementing IDisposable that you instantiated'.\n\n\n\n<p><strong>Answer by Arnošt Löbel:</strong> You are absolutely correct – it is advisable to explicitly dispose every disposable object, either by calling its Dispose method, deleting it (in C++), or scoping it in a 'using' block. \nHowever, it is not absolutely necessary in the managed environment, and there should normally be no harm if you do not do so. \nThe Garbage Collector (GC, for short) will collect the abandoned objects and everything should be just fine, memory-wise.\n\n<p>It might be a little problematic to depend only on the GC if there is 'something' that must be done by the object destructor or finaliser, and that 'something' is timely essential, meaning it should happen is some semi-predetermined time rather than randomly when the GC is triggered. \nThat is why, in my opinion, it is generally recommended to explicitly dispose of all disposable objects. \nAgain, it is not over-important for all objects; I would not bother with filtered element collectors, for example.\n\n<p>Transactions (and T-Groups, S-Transaction, Edit Modes, etc.), are different. \nWhile it is no more (nor less) important to <b>dispose</b> of them explicitly and in a timely fashion, it is <b>imperative</b> that they are properly <b>'finished'</b>. \nThe 'finishing' may mean something different to each of these objects; for example – it might be either Committing or Rolling Back for transactions. \nThis 'finishing' is in fact the part that 'must' be done soon enough, most importantly before the API client (external command, event, etc.) terminates. \nSince the 'finishing' procedure is automatically invoked from the object destructor, the disposing action indirectly 'finishes' the object as well. \nThis is the reason why it is important to scope transactions in a 'using' block; because 'using' does not let the object leave the scope without disposing (and finishing) it, even in the case of exceptions.\n\n<p>Let me repeat this in yet other words: if your application can guarantee that Commit or RollBack is always called for all transactions that have been Started, it is not necessary to dispose the transaction objects, either explicitly (dispose, delete) or implicitly (using). \nHowever, the nice thing about 'using' blocks is that they automatically guarantee this.\n\n</p></p></p></p></p></p></p></p></p></p>"
  }
]