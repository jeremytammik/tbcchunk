[
  {
    "original_filename": "0665_retrieve_duct_endpoint",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0665_retrieve_duct_endpoint",
    "header_text": "Retrieving Duct and Pipe Endpoints",
    "local_header_href": "#retrieving-duct-and-pipe-endpoints",
    "chunk_text": "<h3>Retrieving Duct and Pipe Endpoints</h3><p>Here is a very basic question that may still stump a newcomer to the Revit MEP API:\n\n<p><strong>Question:</strong> I have just started to learn the MEP API and I am struggling with a problem, which I thought would be fairly easy, but after a day and a half I guess not.  \nI need to iterate through ducts (done that bit), then decide if it's a round duct (done that too).  \nThen I want to get the plan view coordinates in order to draw a centre line.  \n \n<p>What I really need are x1, y1, x2, y2 for each end Duct so I can bisect to find the centre point.  \nI am guessing I should be looking within the duct geometry, returned by the Element.get_Geometry method in C#.\nI am not sure how to get at the coordinates, though.\n\n<p>I have also looked at the analytical model, but the ducts I have drawn (rect and round) do not seem to contain one, or at least it isn't returned by the Element.GetAnalyticalModel method, which always returns null.\n\n\n<p><strong>Answer:</strong> Congratulations on getting started with the Revit MEP API and solving your first few issues. Sorry to hear that this current problem has you stumped.\n\n<p>Getting the start and end points of a duct element is actually very easy. \nA duct is derived from the MEPCurve class, which has a Location property, which contains a LocationCurve, which contains a geometrical Curve, which provides this information via the EndPoint property, which is accessed in C# through the get_EndPoint method, taking an argument 0 to return the start and 1 for the end point.\n\n<p>So you do not even have to retrieve and analyse the duct geometry.\n\n<p>The AnalyticalModel is used by Revit Structure, and trying to access it in Revit MEP will not work at all and simply return null, just as you discovered.\n\n<p>Here is a sample application which retrieves all duct elements and lists their start and end point coordinates to the Visual Studio debug output window:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> a \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Duct</span> ) );\n \n  <span class=\"blue\">int</span> nDucts = 0;\n  <span class=\"blue\">int</span> nCurves = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Duct</span> d <span class=\"blue\">in</span> a )\n  {\n    ++nDucts;\n \n    <span class=\"teal\">LocationCurve</span> lc = d.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != lc, \n      <span class=\"maroon\">\"expected duct to have valid location curve\"</span> );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != lc )\n    {\n      ++nCurves;\n \n      <span class=\"teal\">Curve</span> c = lc.Curve;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Duct {0} from {1} to {2}\"</span>,\n        d.Id.IntegerValue, \n        PointString( c.get_EndPoint( 0 ) ),\n        PointString( c.get_EndPoint( 1 ) ) );\n    }\n  }\n  <span class=\"teal\">Debug</span>.Print(\n    <span class=\"maroon\">\"{0} duct{1} analysed, and {2} curve{3} listed.\"</span>,\n    nDucts, PluralSuffix( nDucts ),\n    nCurves, PluralSuffix( nCurves ) );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Since this command does not need to write to the Revit database, its Transaction attribute can be set to read-only.\n\n<p>Here is the result of running this command in the sample project rme_basic_sample_project.rvt provided in the Program/Samples subdirectory of the Revit MEP root installation folder:\n\n<pre>\nDuct 392168 from (60.53,121.53,10.32) to (60.53,110.24,10.32)\nDuct 392170 from (28.59,119.19,10.32) to (28.59,110.24,10.32)\nDuct 392174 from (39.29,113.74,10.32) to (39.29,110.57,10.32)\n\n. . .\n\nDuct 686628 from (-39.04,21.2,16.84) to (-39.04,21.2,49.52)\nDuct 712063 from (115.66,-11.57,10.38) to (115.66,-15,10.38)\n727 ducts analysed, and 727 curves listed.\n</pre>\n<p>Just like ducts, pipes are also derived from the MEPCurve class, so the exact same approach applies to them as well.\n\n<p>Here is \n\n<a href=\"zip/DuctEndPoints.zip\">\nDuctEndPoints.zip</a> including the complete source code and Visual Studio solution of this command.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]