[
  {
    "original_filename": "1183_silent_upgrade",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1183_silent_upgrade",
    "header_text": "Upgrading Family Files Silently, Part 2",
    "local_header_href": "#upgrading-family-files-silently-part-2",
    "chunk_text": "<h3>Upgrading Family Files Silently, Part 2</h3><p>Last week, I provided some suggestions for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/07/upgrading-family-files-silently.html\">\nupgrading family files silently</a>,\n\ni.e. suppressing the warning messages displayed for every family file that requires updating when being loaded into a project, requiring a user confirmation for each one:</p><ol>\n<li>Use a <a href=\"http://lmgtfy.com/?q=revit+file+updater\">\nRevit file updater</a>,\n\ne.g. the\n\n<a href=\"http://labs.blogs.com/its_alive_in_the_lab/2011/07/updated-file-upgrader-for-revit-now-available.html\">\nfile upgrader on Autodesk labs</a>\n\nprovided by the ADN team.</li>\n<li>Handle the pop-up messages yourself using one of the techniques for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.32\">\nhandling dialogues and failures</a>.</li>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/basic-file-info-and-rvt-file-version.html\">\nDetermine the Revit version</a> used\n\nto save the family files before trying to load them.</li>\n</ol><p>The developer tried out these three suggestions and we will take a look at the results, followed by a reiteration of a different observation, a warm welcome to my new colleague Jaime, and congratulations on his first blog post:</p><ul>\n<li><a href=\"#2.1\">Revit file updater</a></li>\n<li><a href=\"#2.2\">Handling the dialogue</a></li>\n<li><a href=\"#2.3\">Determining the Revit file version</a></li>\n<li><a href=\"#3\">Each ribbon button requires a separate external command</a></li>\n<li><a href=\"#4\">Welcome, Jaime, and congratulations on your first post!</a></li>\n</ul><a name=\"2.1\"></a>"
  },
  {
    "original_filename": "1183_silent_upgrade",
    "header_text": "1. Revit File Updater",
    "local_header_href": "#1-revit-file-updater",
    "chunk_text": "<h4>1. Revit File Updater</h4><p>a. I tried looking for the add-in at the Autodesk lab link, but the page is no longer available.</p><p>b. I searched a bit and saw that\n\n<a href=\"http://labs.blogs.com/its_alive_in_the_lab/2013/07/graduatedretired-adn-plugins-of-the-month.html\">\nthe file updater add-in was moved to Autodesk Exchange</a>.\n\nI looked, but couldn't find it there either.</p><p>c. I did find add-ins made by others, but haven't looked at any of them.</p><p>d. It would be nice if the sample code were still around somewhere, so that we can see how to do it correctly if we plan to upgrade the family files before importing.</p><a name=\"2.2\"></a>"
  },
  {
    "original_filename": "1183_silent_upgrade",
    "header_text": "2. Handling the Dialogue",
    "local_header_href": "#2-handling-the-dialogue",
    "chunk_text": "<h4>2. Handling the Dialogue</h4><p>The dialogue we're trying to close/hide is this:</p><center>\n<img alt=\"Upgrade message\" src=\"img/upgrade_message.png\"/>\n</center><p>It appears when we use doc.LoadSymbol and the family file needs upgrading.\nIt goes away after upgrading without user input, but it does pop up again if we're loading symbols from many files.</p><p>I tried using the DialogBoxShowing event, but I think this is one of those dialogues that do not broadcast that event.</p><p>I tried using the Failure API by creating a class implementing IFailuresPreprocesser and using the method call</p><pre class=\"code\">\n  transaction.SetFailureHandlingOptions( options );\n</pre><p>Unfortunately, this didn't work as expected.\nThe call to IFailuresPreprocessor.PreprocessFailures did happen (the breakpoint was captured), but it only gets called when the transaction is committed:</p><pre class=\"code\">\n  <span class=\"green\">// The dialogue appears in this line:</span>\n \n  doc.LoadFamilySymbol( familyfilePath,\n    typeName, <span class=\"blue\">out</span> symbol );\n \n  <span class=\"green\">// The failure preprocesser is called here:</span>\n \n  transaction.commit();\n</pre><p>I haven't tried the Windows API method to close the window, but I think I'll only use that as a last resort only.</p><a name=\"2.3\"></a>"
  },
  {
    "original_filename": "1183_silent_upgrade",
    "header_text": "3. Determining the Revit File Version",
    "local_header_href": "#3-determining-the-revit-file-version",
    "chunk_text": "<h4>3. Determining the Revit File Version</h4><p>The BasicFileInfo method worked wonderfully.\nI was able to get the Revit version the family files were saved in.</p><p>In conclusion, it would be nice if the LoadFamilySymbol would provide an overload something like</p><pre class=\"code\">\n  doc.LoadFamilySymbol( familyFilePath,\n    typeName, ignorePrompts, <span class=\"blue\">out</span> symbol );\n</pre><p>For now I'll use BasicFileInfo to gather information about the saved version of the family files we're going to load into the document and inform the user that some warning messages will popup because some files needs to be upgraded.\nIf the ADN Revit file updater is still around, perhaps we can even ask the user if they would like the family files to be upgraded automatically too.</p><p><strong>Answer:</strong> Here is the complete\n\n<a href=\"zip/FileUpgrader_2014-07-16.zip\">file upgrader source code</a>,\n\nVisual Studio solution and add-in manifest.</p><p>Sorry to hear that the other methods did not help, and thank you for trying them out.</p><p>I agree that dismissing the dialogue via the Windows API is best left as a last resort.</p><p>Would you like to share a code snippet showing how you use the BasicFileInfo as you describe?</p><p>I do not think there is any sample code of using that on the net yet.</p><p>Probably, the file upgrader approach could be combined with that to fully automate the upgrade process.</p><p>It might be possible to use the BasicFileInfo to determine which files need upgrading, display the list in a message box to the user, ask for confirmation to upgrade, and then run the upgrader automatically before loading the resulting updated models.</p><p><strong>Response:</strong> I used this to get the BasicFileInfo:</p><pre class=\"code\">\n  <span class=\"blue\">var</span> familyFilePath = <span class=\"maroon\">\"FamilyFile.rfa\"</span>;\n \n  <span class=\"blue\">var</span> fileInfo = <span class=\"teal\">BasicFileInfo</span>.Extract(\n    familyFilePath );\n</pre><p>The file info provides two properties of interest.</p><ul>\n<li>fileInfo.IsSavedInCurrentVersion returns true if the version of the family file is the same as the Revit version.</li>\n<li>fileInfo.SavedInVersion returns a string with the full Revit name and version.\nFor example, for a family file saved in Revit 2015, it returns \"Autodesk Revit Architecture 2015\".</li>\n</ul><p>Thanks for including the file updater code.\nIt's good reference.\nFrom looking at the code, each family file is opened and saved in the current version.\nI'll try to implement it that way.\nAnd yes, we'll need to ask the user if they would like to upgrade the files.\nIt's possible they might not want to.</p><p>Many thanks for this interesting and fruitful discussion!</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1183_silent_upgrade",
    "header_text": "Each Ribbon Button Requires a Separate External Command",
    "local_header_href": "#each-ribbon-button-requires-a-separate-external-command",
    "chunk_text": "<h4>Each Ribbon Button Requires a Separate External Command</h4><p><strong>Question:</strong> I would like to implement only one single external command and let it handle all ribbon button clicks for my external application. The motivation for this is to increase or decrease the number of ribbon buttons at Revit startup depending on the state of other, external resources. How can my external command determine which ribbon button triggered its Execute method? For instance, can I determine the label of the clicked button?</p><p><strong>Answer:</strong> Neither does the Revit API support this, nor can I think of any other method to achieve it.</p><p>The best way to go is to define a separate external command for each button.</p><p>If you wish, you can then call a common handler for all commands, calling one single method from each of the different Execute methods, with an additional parameter specifying which button was clicked.\n\n<p>For more detailed background information and suggestions, please refer to this discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/happy-bhai-dooj.html#2\">\nimplementing a single command for multiple buttons</a>.</p>\n<p><strong>Addendum</strong> by\n\n<a href=\"http://www.redbolts.com\">Guy Robinson</a>:\n\nCouldn't you just set the buttons to be enabled or visible to achieve the desired effect? This setting can be updated from an external command whenever a service becomes available or unavailable.</p>\n<a name=\"4\"></a>\n<h4>Welcome, Jaime, and Congratulations on Your First Post!</h4>\n<p>We have a new member in the ADN DevTech team:\n\n<a href=\"http://adndevblog.typepad.com/aec/jaime-rosales.html\">Jaime Rosales Duque</a> joined\n\nus from a different department in Autodesk.\nHe was part of the BIM 360 Glue team and worked on add-ins for various Autodesk products, including Revit, Navisworks, AutoCAD and its verticals.</p>\n<p>Jaime is also a certified NYC bartender and passionate photographer.\nHe relates these hobbies to his coding passion, saying that a well done, tasty cocktail and an expressive and unique picture can be related to a well written, maintainable and scalable piece of code   :-)</p>\n<p>Jaime now published his first blog post on\n\n<a href=\"http://adndevblog.typepad.com/aec/2014/07/familytypes-value-aerial-pictures.html\">\nFamilyType values and aerial pictures</a>.</p>\n<p>Congratulations, Jaime, and thank you very much!</p>\n</p>"
  },
  {
    "original_filename": "1183_silent_upgrade",
    "header_text": "Welcome, Jaime, and Congratulations on Your First Post!",
    "local_header_href": "#welcome-jaime-and-congratulations-on-your-first-post",
    "chunk_text": "<h4>Welcome, Jaime, and Congratulations on Your First Post!</h4><p>We have a new member in the ADN DevTech team:\n\n<a href=\"http://adndevblog.typepad.com/aec/jaime-rosales.html\">Jaime Rosales Duque</a> joined\n\nus from a different department in Autodesk.\nHe was part of the BIM 360 Glue team and worked on add-ins for various Autodesk products, including Revit, Navisworks, AutoCAD and its verticals.</p><p>Jaime is also a certified NYC bartender and passionate photographer.\nHe relates these hobbies to his coding passion, saying that a well done, tasty cocktail and an expressive and unique picture can be related to a well written, maintainable and scalable piece of code   :-)</p><p>Jaime now published his first blog post on\n\n<a href=\"http://adndevblog.typepad.com/aec/2014/07/familytypes-value-aerial-pictures.html\">\nFamilyType values and aerial pictures</a>.</p><p>Congratulations, Jaime, and thank you very much!</p>"
  }
]