[
  {
    "original_filename": "1744_2020_sdk_samples",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n\n</head>\n\n<!---\n\ntwitter:\n\nAttachedDetailGroup, CreateTrianglesTopography, Custom2DExporter, PathOfTravel, ViewTemplateCreation -- new Revit 2020 SDK samples in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/2020sdksamples\n\nQuestion: What can we do with the new Revit 2020 API features?\nWell, just like most of the existing functionality, the enhancements and some typical yet simple use cases for them are demonstrated by the updated SDK samples.\nRevit 2020 sports five brand new SDK samples\n&ndash; AttachedDetailGroup\n&ndash; CreateTrianglesTopography\n&ndash; Custom2DExporter\n&ndash; PathOfTravel\n&ndash; ViewTemplateCreation\n&ndash; This list also highlights some the most exciting areas of enhancement...\n\nlinkedin:\n\nNew Revit 2020 SDK samples in the #RevitAPI #bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK\n\nhttp://bit.ly/2020sdksamples\n\nQuestion: What can we do with the new Revit 2020 API features?\n\nWell, just like most of the existing functionality, the enhancements and some typical yet simple use cases for them are demonstrated by the updated SDK samples.\n\nRevit 2020 sports five brand new SDK samples:\n\n- AttachedDetailGroup\n- CreateTrianglesTopography\n- Custom2DExporter\n- PathOfTravel\n- ViewTemplateCreation\n\nThis list also highlights some the most exciting areas of enhancement...\n\n-->"
  },
  {
    "original_filename": "1744_2020_sdk_samples",
    "header_text": "New Revit 2020 SDK Samples",
    "local_header_href": "#new-revit-2020-sdk-samples",
    "chunk_text": "### New Revit 2020 SDK Samples\n\nSo far, we looked at the following aspects of the Revit 2020 API enhancements:\n\n- [Revit 2020 DevDays Online presentation recording](https://thebuildingcoder.typepad.com/blog/2019/04/the-revit-2020-fcs-api-and-sdk.html#3)\n- [Compiling the Revit 2020 SDK samples](https://thebuildingcoder.typepad.com/blog/2019/04/the-revit-2020-fcs-api-and-sdk.html#7) \n- [Setting up RvtSamples](https://thebuildingcoder.typepad.com/blog/2019/04/the-revit-2020-fcs-api-and-sdk.html#8)\n- [RevitLookup for Revit 2020](https://thebuildingcoder.typepad.com/blog/2019/04/revitlookup-and-sdk-for-revit-2020.html#2) \n- [Revit 2020 SDK posted to Revit Developer Centre](https://thebuildingcoder.typepad.com/blog/2019/04/revitlookup-and-sdk-for-revit-2020.html#3)\n- [What's New in the Revit 2020 API](https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html)\n- [Migration of The Building Coder samples](https://thebuildingcoder.typepad.com/blog/2019/04/close-doc-and-zero-doc-rvtsamples.html#3)\n\nThe next obvious question is:\n\nWhat can we do with the new features?\n\nWell, just like most of the existing functionality, the enhancements and some typical yet simple use cases for them are demonstrated by the updated SDK samples.\n\nRevit 2020 sports five brand new SDK samples:\n\n- [AttachedDetailGroup](#2)\n- [CreateTrianglesTopography](#3)\n- [Custom2DExporter](#4)\n- [PathOfTravel](#5)\n- [ViewTemplateCreation](#6)\n\nThis list also highlights some the most exciting areas of enhancement.\n\nAttachedDetailGroup implements an external application with a ribbon panel UI providing access to its two commands.\n\nThe other four implement just one external command each."
  },
  {
    "original_filename": "1744_2020_sdk_samples",
    "header_text": "AttachedDetailGroup",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> AttachedDetailGroup\n\nRevit 2020 boasts\nseveral [attached detail group API additions](https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html#4.2.1).\n\nThe AttachedDetailGroup sample shows how to use these to show and hide the attached detail groups of a model group in the active view.\n\nIn its readme file, it purports to be released with Revit 2019.1, although in fact it did not appear before the Revit 2020 SDK.\n\nIt includes three modules:\n\n- Application.cs defines the Application class that creates the UI ribbon components when Revit starts.\n- AttachedDetailGroupShowAllCommand.cs and AttachedDetailGroupHideAllCommand.cs implements its two external commands to show and hide attached detail groups, respectively.\n\nDemonstration instructions:\n\n- Create two parallel walls with an aligned dimension between them.\n- Select the two walls and the dimension and create a group.\n    - Expected result: a model group containing the two walls and an attached detail group containing the dimension are created.\n- Select the model group.\n- Select the Addins ribbon menu.\n- Execute the Hide All Detail Groups command in the Attached Detail Group ribbon panel.\n    - Expected result: The attached detail group is no longer visible.\n- Execute the Show All Detail Groups command in the Attached Detail Group ribbon panel.\n    - Expected result: The attached detail group is now visible."
  },
  {
    "original_filename": "1744_2020_sdk_samples",
    "header_text": "CreateTrianglesTopography",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> CreateTrianglesTopography\n\nRevit 2020 supports the creation of concave topography surfaces using\nthe [new `TopographySurface` API additions](https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html#4.2.12.1).\n\nThe CreateTrianglesTopography SDK sample creates a new topography surface element from triangle points and triangle facets using the new overload of the `TopographySurface` `Create` API method,\n\nIn its readme file, it purports to be released with Revit 2019.2, although in fact it did not appear before the Revit 2020 SDK.\n\nCommand.cs implements the *Create Triangles Topography* external command.\n\nTrianglesData.cs defines two classes, `TrianglesData` and `XYZConverter`.\n\nThe `TrianglesData.json` input file contains all the points and facets data to define the topography surface.\nThe contents of this file can be deserialised to a `TrianglesData` object.\n\n`TrianglesData` parses the triangle points and triangle facets stored in the `TrianglesData.json` input file.\nThese points and facets are passed to Revit API method to create the topography surface.\n\n`XYZConverter` converts to Revit `XYZ` instances using a `JavaScriptSerializer`.\n\n<center>\n<img src=\"img/CreateTrianglesTopography.png\" alt=\"CreateTrianglesTopography SDK sample\" width=\"252\">\n</center>"
  },
  {
    "original_filename": "1744_2020_sdk_samples",
    "header_text": "Custom2DExporter",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Custom2DExporter\n\nIn Revit 2020,\nthe [`CustomExporter` supports some 2D views](https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html#4.2.16.1).\n\nThe Custom2DExporter SK sample demonstrates its use to export 2D views using various exporter options, enabling the user to export and visualise 2D model and annotation geometry.\n\nThis sample lives in the new `CustomExporter` subfolder.\n\nIn its readme file, it purports to be released with Revit 2019.0, although in fact it did not appear before the Revit 2020 SDK.\n\nThe external command defined by Command.cs displays the dialog defined in Export2DForm.cs enabling you to pick the exporter options and  export the current view.\n\nTessellatedGeomAndText2DExportContext.cs implements the `IExportContext2D` used for the 2D export. This particular implementation exports 2D curves tessellated into lines and also does some rudimentary text exporting.\n\nNotes:\n\n- When exporting, the current view is used.\n- All exported geometry is tessellated into lines. \n- Exported geometry is then visualised by hiding all elements in the view and displaying all exported lines with detail lines. \n- To view your original un-exported 2D view, undo once to remove the drawn export.\n\nThe sample also includes a proof of concept for exporting text. The absolute minimum is exported, with all text notes separated by a newline. However, `OnText` receives all necessary information about text location, font, size and formatting, so the API user can reconstruct it in its entirety.\n\nSome important details:\n\n- Only visible geometry is exported.\n- Meshes are not supported.\n\nKnown issues:\n\n- Some annotations will not automatically export in this sample. Known examples are: sections, reference planes, scope boxes, plan regions. It is recommended that additional code be written in `OnElementBegin` to detect these elements and export any necessary geometry by writing custom code.\n\nInstructions:\n\n- Export model geometry:\n    - Create a Revit model which contains both model and annotation elements.\n    - Execute the 'Export 2D Views with CustomExporter' command on a plan, elevation or section. Before executing, do not pick any extra options (annotations or patterns) in the dialog.\n    - Expected result: all elements in the view are hidden, and instead of them model geometry is drawn using detail lines; annotations are hidden. Any non-line model curves are tessellated into lines. Dismiss the results dialog and undo once to get to your pre-command model state.\n- Export model and annotations:\n    - Create a Revit model which contains both model and annotation elements..\n    - Execute the 'Export 2D Views with CustomExporter' command on a plan, elevation or section. Before executing, pick 'Export annotations and text.\n    - Expected result: all elements in the view are hidden, and instead of them, model and annotation geometry is drawn using detail lines. Any non-line model or annotation curves are tessellated into lines. In the results dialog, you get a dump of all text that was found in the view. Dismiss the results dialog and undo once to get to your pre-command model state.\n- Export pattern lines:\n    - If your model contains elements which have patterns applied on their faces, pick 'Export pattern lines' to export and display those patterns on screen."
  },
  {
    "original_filename": "1744_2020_sdk_samples",
    "header_text": "PathOfTravel",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> PathOfTravel\n\nRevit 2020 enhances the Analysis API with support for\na new [Path of Travel API](https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html#4.2.19).\n\nThe PathOfTravel SDK sample demonstrates how to use it to create `PathOfTravel` elements from rooms to doors in a plan view and:\n\n-\tAutomatically computes room centre and corner points to use for the start point of the path.\n-\tWhen the option for path to a single door is selected, lets the user pick which door to use for the end point of the path.\n-\tAutomatically creates PathOfTravel elements between the selected combination of room and door elements.\n\nThe external command defined by Command.cs displays the dialog defined in CreateForm.cs.\n\nIt consists of three radio controls selecting one of three different PathOfTravel creation methods.\n\nInstructions:\n\n- Create some rooms and exit doors.\n- Open a plan view in which the created elements are visible.\n- Execute the external command. In the dialog, pick an option to create the paths. After clicking OK, the paths will be created and displayed in the view."
  },
  {
    "original_filename": "1744_2020_sdk_samples",
    "header_text": "ViewTemplateCreation",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> ViewTemplateCreation\n\nThe Revit 2020 API includes\nsome [View Template API additions](https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html#4.2.10.1).\n\nThe ViewTemplateCreation SDK sample shows how to use them to create and configure a new view template from a regular view and a view template settings configuration, including:\n\n-\tCreate new view template based on the selected view\n-\tSet include setting of 'Parts Visibility' parameter\n-\tSet the value of 'Detail Level' parameter\n-\tChange some Visibility/Graphics overrides for a few model categories\n\nThe external command defined in Command.cs creates and shows the view template creation form.\n\nViewTemplateCreationForm.cs declares this form, enabling selection of a view for template creation and setting the 'Parts Visibility' and 'Detail Level' parameters. On pressing 'Apply', a new view template will be created based on the selected view and parameter settings. V/G Overrides Model cut patterns settings will be changed for the following categories: Columns, Doors, Walls, Windows.\nV/G Model cut patterns settings will be changed in the following way: 'Foreground Pattern' will be set to 'Solid fill', 'Background color' will be set to 'Black'. Finally, the newly created template will be assigned to the selected view.\n\nUtils.cs contains several helper methods for showing message boxes and a constant string with the name of the sample.\n\nInstructions:\n\nLaunch Revit and create a new project from the Architectural template.\n\n- Execute the command.\n    - Expected result: View template creation form appears.\n- Select a view for view template creation.\n- Select include setting of 'Parts Visibility' parameter.\n- Select value of 'Detail Level' parameter.\n- Press 'Apply' button.\n    - Expected result: new view template is created based on the selected view, parameter settings are applied to parameters, V/G Overrides Model cut patterns settings are changed for following categories: Columns, Doors, Walls, Windows. V/G Model cut patterns settings are changed in the following way: 'Foreground Pattern' is set to 'Solid fill', 'Background color' is set to 'Black'. The newly created view template is assigned to the selected view.\n\nI hope you find these enhancements useful.\n\nMany of them are driven by developer requests.\n\nI look forward to hearing about exciting new applications using them."
  }
]