[
  {
    "original_filename": "0268_custom_ribbon_tab",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0268_custom_ribbon_tab",
    "header_text": "Custom Ribbon Tab",
    "local_header_href": "#custom-ribbon-tab",
    "chunk_text": "<h3>Custom Ribbon Tab</h3><p>I am still on tour presenting at the Western European DevDays conferences, and with no time for blogging or responding to comments.\nIn fact, I have almost no time for anything at all except presenting, meeting and discussing with participants during the day, and getting from one city to the next in the evenings.\nRight now I am sitting in the airport waiting for a plain to Milano. \nBack to Bella Italia, albeit for less than twenty-four hours.\n\n<p>I was hoping to find time to prepare a few blog posts in advance for the coming weeks, when I will be gone on holidays and vacation.\nFriday is supposed to be my last working day this year, and I am starting to wonder whether I will be able to just walk away from all the unresolved issues and leave them to lie until next year.\n\n<p>Anyway, in a sleepless hour in between I noticed that Augusto Gonçalves responded once again to a question that has already come up a few times in the past, so his interesting result is well worth while presenting, even if it is not directly useful in the context of the Revit API.\nIt deals with the frequent question on whether it is possible to add your own ribbon tab to the Revit user interface.\n\n<p><strong>Question:</strong> I expect the answer to this is no, but I thought I would at least ask anyway.\n\nIs it possible to create a new ribbon tab in Revit, similar to AutoCAD 2010, or are panels within the Add-Ins tab and items within those panels the only ribbon objects that can be accessed and created from a Revit add-in?\n\n<p><strong>Answer:</strong> There is no documented support for this in the Revit API that I am aware of. \nThere are however a couple of undocumented and unsupported .NET assemblies that can be used to access the Revit ribbon in an unsupported way.\nThe functionality they provide can even be used to add your own custom panel to the Revit ribbon.\nWhat you cannot do, however, is create the context and data required to invoke a standard Revit external command.\nWe have implemented a sample that creates an own custom tab and adds it to the Revit ribbon.\nIt displays a command button which can be used to invoke Revit independent functionality.\n\n<p>The functionality to create a new custom panel and add a command button to it is provided by classes in the Autodesk.Windows namespace. \nThese classes have no knowledge of Revit and its API, and we have not found any way to access the command data required to invoke an external command and make use of the Revit API from such a button. \nAs long as you are happy just doing .NET stuff completely independently of Revit, you can make use of this. \nThis functionality is unsupported, and to be used at your own risk, of course.\n\n<p>In addition to the RevitAPI.dll assembly providing access to the Revit API functionality, we reference two other undocumented .NET assemblies provided by Revit, which also live in the Revit Program folder: AdWindows.dll and UIFramework.dll. \nThese in turn require us to reference some other .NET framework functionality, so we end up with the following list of references.\nAs always, we need to remember to set the 'Copy Local' flag to 'False' on the three assemblies referenced from the Revit folder:\n\n<ul>\n<li>AdWindows\n<li>PresentationCore\n<li>PresentationFramework\n<li>RevitAPI\n<li>System\n<li>System.Windows.Forms\n<li>UIFramework\n<li>WindowsBase\n</li></li></li></li></li></li></li></li></ul>\n<p>We implement an external application named App which makes use of the ribbon functionality provided by the AdWindows and UIFramework assemblies to add its own custom tab and panel to the existing Revit ribbon.\nThe custom panel displays one ribbon button which invokes a command. \n\n<p>The command needs to implement the System.Windows.Input.ICommand interface.\nNote that this definition is completely independent of the Revit external command interface, and actually that is the main problem with our custom ribbon tab: while we can add a tab with its panel and button invoking a command, this is not a standard Revit command, and we have no way to connect it with Revit or make proper use of the Revit API within the command implementation.\nIt can be used to invoke Revit-independent functionality.\n\n<p>Here is the definition of the command implementation derived from ICommand and its Execute method, which in turn invokes the Execute method of an external Revit command implementation AddRibbonTab.Command, but supplies it with a null ExternalCommandData instance:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">AdskCommandHandler</span>\n  : System.Windows.Input.<span class=\"teal\">ICommand</span>\n{\n  <span class=\"blue\">string</span> AssemblyName\n  {\n    <span class=\"blue\">get</span>;\n    <span class=\"blue\">set</span>;\n  }\n \n  <span class=\"blue\">string</span> ClassName\n  {\n    <span class=\"blue\">get</span>;\n    <span class=\"blue\">set</span>;\n  }\n \n  <span class=\"blue\">public</span> AdskCommandHandler(\n    <span class=\"blue\">string</span> assemblyName,\n    <span class=\"blue\">string</span> className )\n  {\n    AssemblyName = assemblyName;\n    ClassName = className;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">event</span> <span class=\"teal\">EventHandler</span> CanExecuteChanged;\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> CanExecute( <span class=\"blue\">object</span> a )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( <span class=\"blue\">object</span> a )\n  {\n    System.Reflection.<span class=\"teal\">Assembly</span> assembly\n      = System.Reflection.<span class=\"teal\">Assembly</span>.LoadFrom(\n        AssemblyName );\n \n    <span class=\"teal\">IExternalCommand</span> command\n      = assembly.CreateInstance(\n        ClassName ) <span class=\"blue\">as</span> <span class=\"teal\">IExternalCommand</span>;\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"AdskCommandHandler.Execute command invoked: \"</span>\n      + <span class=\"maroon\">\"assembly {0}, class {1}\"</span>,\n      AssemblyName, ClassName );\n \n    <span class=\"teal\">ExternalCommandData</span> commandData = <span class=\"blue\">null</span>;\n    <span class=\"blue\">string</span> message = <span class=\"blue\">string</span>.Empty;\n    <span class=\"teal\">ElementSet</span> elements = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span> r \n      = command.Execute( commandData, \n        <span class=\"blue\">ref</span> message, elements );\n  }\n}\n</pre>\n<p>Here is the OnStartup method of the external application creating the custom ribbon tab.\nNote that the RibbonPanel created here is an Autodesk.Windows.RibbonPanel instance, not an Autodesk.Revit one:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">IExternalApplication</span>.<span class=\"teal\">Result</span> OnStartup( \n  <span class=\"teal\">ControlledApplication</span> a )\n{\n  <span class=\"green\">// create new ribbon button:</span>\n \n  <span class=\"teal\">RibbonButton</span> button = <span class=\"blue\">new</span> <span class=\"teal\">RibbonButton</span>();\n  button.Text = <span class=\"maroon\">\"My Button\"</span>;\n  button.ShowText = <span class=\"blue\">true</span>;\n  button.CommandHandler = <span class=\"blue\">new</span> <span class=\"teal\">AdskCommandHandler</span>(\n    <span class=\"maroon\">\"AddRibbonTab.dll\"</span>, <span class=\"maroon\">\"AddRibbonTab.Command\"</span> );\n \n  <span class=\"green\">// create new ribbon panel:</span>\n \n  <span class=\"teal\">RibbonPanelSource</span> source = <span class=\"blue\">new</span> <span class=\"teal\">RibbonPanelSource</span>();\n  source.Title = <span class=\"maroon\">\"My Panel\"</span>;\n  source.Items.Add( button );\n \n  <span class=\"teal\">RibbonPanel</span> panel = <span class=\"blue\">new</span> <span class=\"teal\">RibbonPanel</span>();\n  panel.Source = source;\n \n  <span class=\"green\">// create custom ribbon tab:</span>\n \n  <span class=\"teal\">RibbonTab</span> tab = <span class=\"blue\">new</span> <span class=\"teal\">RibbonTab</span>();\n  tab.Id = <span class=\"maroon\">\"MY_TAB_ID\"</span>;\n  tab.Title = <span class=\"maroon\">\"My Custom Tab\"</span>;\n  tab.IsVisible = <span class=\"blue\">true</span>;\n \n  <span class=\"green\">// access Revit ribbon control and add custom tab:</span>\n \n  <span class=\"teal\">RibbonControl</span> control\n    = UIFramework.<span class=\"teal\">RevitRibbonControl</span>.RibbonControl;\n \n  control.Tabs.Add( tab );\n  tab.Panels.Add( panel );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalApplication</span>.<span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Here is the resulting custom ribbon tab with its panel and command button displayed in Revit MEP 2010:</p>\n<center>\n<img alt=\"Custom ribbon tab\" src=\"img/custom_ribbon_tab.png\"/>\n</center>\n<p>Here is the complete \n\n<a href=\"zip/AddRibbonTab.zip\">\nAddRibbonTab</a> source code and Visual Studio solution.</p>\n<p>Many thanks to Augusto for exploring and discovering this undocumented functionality and providing the surprising sample code!\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]