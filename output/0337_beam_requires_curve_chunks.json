[
  {
    "original_filename": "0337_beam_requires_curve",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0337_beam_requires_curve",
    "header_text": "Beam Requires Curve",
    "local_header_href": "#beam-requires-curve",
    "chunk_text": "<h3>Beam Requires Curve</h3><p>We discussed the issue of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-beam.html\">\ninserting a beam</a> and \n\nalso \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/creating-a-curved-beam.html\">\ncreating a curved beam</a> in \n\nsome depth already. \nThe former discussion includes a pretty detailed analysis showing that you really do have to specify a curve in order to generate a valid beam instance, and all other overloads of the NewFamilyInstance will fail in one way or the other.\nIn spite of this, people continue having problems inserting beam instances.\nMy colleague Joe Ye just encountered another case like this:\n\n<p><strong>Question:</strong> I am creating a beam using the following code:\n\n<pre class=\"code\">\n  <span class=\"teal\">Level</span> level;\n  <span class=\"teal\">FamilySymbol</span> symbol;\n  <span class=\"blue\">double</span> x1, y1, x2, y2;\n  <span class=\"teal\">XYZ</span> p = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( x1, y1, level.Elevation );\n  <span class=\"teal\">XYZ</span> q = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( x2, y2, level.Elevation );\n \n  Autodesk.Revit.DB.Structure.<span class=\"teal\">StructuralType</span> st \n    = Autodesk.Revit.DB.Structure.<span class=\"teal\">StructuralType</span>.Beam;\n \n  <span class=\"teal\">FamilyInstance</span> beam = doc.Create.NewFamilyInstance( \n    p, symbol, level, st );\n \n  <span class=\"teal\">LocationCurve</span> beamCurve = beam.Location \n    <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != beamCurve )\n  {\n    <span class=\"teal\">Line</span> line = app.Create.NewLineBound( p, q );\n    beamCurve.Curve = line;\n  }\n</pre>\n<p>When I try to use it, though, I run into several problems:\n\n<ul>\n<li>Its beam type is &lt;Automatic&gt;:\n</li></ul>\n<center>\n<img alt=\"Beam type Automatic\" src=\"img/beam_type_automatic.png\"/>\n</center>\n<ul>\n<li>Even worse, it cannot host rebars.\n\n</li></ul>\n<p><strong>Answer:</strong> Yes, I can reproduce what you say.\n\n<p>The reason that the beam cannot host rebars is that it lacks the rebar cover parameters. \nConcrete beams created manually have the following three rebar cover related parameters:\n\n<ul>\n<li>Rebar Cover  Top Face\n<li>Rebar Cover  Bottom Face\n<li>Rebar Cover  Other Faces\n</li></li></li></ul>\n<p>The real reason lies deeper, though. \nAs explained in some depth in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-beam.html\">\ninserting a beam</a>,\n\nthe beam instance really does require a curve to be specified when creating it.\nAs your code above proves, the curve cannot simply be added after the initial creation step.\nIf you create your beam using the following NewFamilyInstance overload instead of the one taking a point argument, all works well:\n\n<pre class=\"code\">\n  <span class=\"teal\">Curve</span> useCurve = app.Create.NewLineBound( p, q );\n  beam = doc.Create.NewFamilyInstance( \n    useCurve, symbol, level, st );\n</pre>\n</p></p></p></p></p></p>"
  }
]