[
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<title>The Building Coder</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"3dwc.css\"/>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js?autoload=true\" defer=\"defer\"></script>\n</head>\n\n<!---\n\nMEP System Structure in Hierarchical JSON Graph #revitapi #3dwebcoder @AutodeskForge #ForgeDevCon #3dwebaccel\n\nYesterday, I presented the new TraverseAllSystems add-in to traverse all MEP system graphs and export their connected hierarchical structure to JSON and XML that I am helping the USC team with here at the San Francisco cloud accelerator. I continued with that today, and also integrated a minor enhancement to RevitLookup\n&ndash; TraverseAllSystems updates\n&ndash; Shared parameter creation\n&ndash; Options\n&ndash; Bottom-up JSON structure\n&ndash; Top-down JSON structure\n&ndash; TraversalTree JSON output generator\n&ndash; TreeNode JSON output generator\n&ndash; Download and to do\n&ndash; RevitLookup updates...\n\n-->"
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "MEP System Structure in Hierarchical JSON Graph",
    "local_header_href": "#mep-system-structure-in-hierarchical-json-graph",
    "chunk_text": "### MEP System Structure in Hierarchical JSON Graph\n\nYesterday, I presented the\nnew [TraverseAllSystems](https://github.com/jeremytammik/TraverseAllSystems) add-in\nto [traverse all MEP system graphs](http://thebuildingcoder.typepad.com/blog/2016/06/traversing-and-exporting-all-mep-system-graphs.html) and\nexport their connected hierarchical structure to JSON and XML that I am helping\nthe [USC](http://www.usc.edu) team with here at the San Francisco cloud accelerator.\n\n<center>\n<img src=\"img/2016-06_sf_accelerator.jpg\" alt=\"San Francisco cloud accelerator\" width=\"400\">\n</center>\n\nI continued with that today, and also integrated a minor enhancement to RevitLookup:\n\n- [TraverseAllSystems updates](#1)\n- [Shared parameter creation](#2)\n- [Options](#3)\n- [Bottom-up JSON structure](#4)\n- [Top-down JSON structure](#5)\n- [TraversalTree JSON output generator](#6)\n- [TreeNode JSON output generator](#7)\n- [Download and to do](#8)\n- [RevitLookup updates](#9)"
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"1\"></a>TraverseAllSystems Updates",
    "local_header_href": "#a-name1atraverseallsystems-updates",
    "chunk_text": "#### <a name=\"1\"></a>TraverseAllSystems Updates\n\nThe aim of the TraverseAllSystems project is to present the MEP system graphs in a separate tree view panel integrated in\nthe [Forge viewer](https://developer.autodesk.com/en/docs/viewer/v2/overview) and\nhook up the tree view nodes bi-directionally with the 2D and 3D viewer elements.\n\nTo achieve that, I implemented a couple of significant enhancements over the simple XML file storage:\n\n- Store the MEP system graph structure in JSON instead of XML\n- Implement both bottom-up and top-down storage according to\nthe [jsTree JSON spec](https://www.jstree.com/docs/json).\n- Support both element id and UniqueId node identifiers.\n- Store the JSON output in a shared parameter attached to the MEP system element,\nso that it is automatically included in the Forge SVF translation generated from the RVT input file.\n\nHere is a list of the update releases so far:\n\n- [2017.0.0.2](https://github.com/jeremytammik/TraverseAllSystems/releases/tag/2017.0.0.2) &ndash; implemented visited element dictionary to prevent infinite recursion loop\n- [2017.0.0.3](https://github.com/jeremytammik/TraverseAllSystems/releases/tag/2017.0.0.3) &ndash; implemented DumpToJson\n- [2017.0.0.4](https://github.com/jeremytammik/TraverseAllSystems/releases/tag/2017.0.0.4) &ndash; implemented shared parameter creation\n- [2017.0.0.5](https://github.com/jeremytammik/TraverseAllSystems/releases/tag/2017.0.0.5) &ndash; implemented shared parameter value population, tested and verified graph structure json is written out\n- [2017.0.0.6](https://github.com/jeremytammik/TraverseAllSystems/releases/tag/2017.0.0.6) &ndash; renamed json text field to name\n- [2017.0.0.7](https://github.com/jeremytammik/TraverseAllSystems/releases/tag/2017.0.0.7) &ndash; implemented top-down json graph storage\n- [2017.0.0.8](https://github.com/jeremytammik/TraverseAllSystems/releases/tag/2017.0.0.8) &ndash; automatically create shared parameter, eliminated separate command, wrap json strings in double quotes, validated json output"
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"2\"></a>Shared Parameter Creation",
    "local_header_href": "#a-name2ashared-parameter-creation",
    "chunk_text": "#### <a name=\"2\"></a>Shared Parameter Creation\n\nI implemented a new `SharedParameterMgr` class to create the shared parameter to store the JSON output in.\n\nThis class is based on\nthe [ExportCncFab](https://github.com/jeremytammik/ExportCncFab)\n[ExportParameters.cs module](https://github.com/jeremytammik/ExportCncFab/blob/master/ExportCncFab/ExportParameters.cs).\n\nThe shared parameter is automatically created if not already present, as in the following usage example:\n\n<pre class=\"code\">\n<span style=\"color:green;\">//&nbsp;Check&nbsp;for&nbsp;shared&nbsp;parameter</span>\n<span style=\"color:green;\">//&nbsp;to&nbsp;store&nbsp;graph&nbsp;information.</span>\n\n<span style=\"color:#2b91af;\">Definition</span>&nbsp;def&nbsp;=&nbsp;<span style=\"color:#2b91af;\">SharedParameterMgr</span>.GetDefinition(\n&nbsp;&nbsp;desirableSystems.First&lt;<span style=\"color:#2b91af;\">MEPSystem</span>&gt;()&nbsp;);\n\n<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;def&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">SharedParameterMgr</span>.Create(&nbsp;doc&nbsp;);\n\n&nbsp;&nbsp;def&nbsp;=&nbsp;<span style=\"color:#2b91af;\">SharedParameterMgr</span>.GetDefinition(\n&nbsp;&nbsp;&nbsp;&nbsp;desirableSystems.First&lt;<span style=\"color:#2b91af;\">MEPSystem</span>&gt;()&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;def&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;message&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Error&nbsp;creating&nbsp;the&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;storage&nbsp;shared&nbsp;parameter.&quot;</span>;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Failed;\n&nbsp;&nbsp;}\n}\n</pre>\n\nHere is the `SharedParameterMgr` class implementation:\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Shared&nbsp;parameters&nbsp;to&nbsp;keep&nbsp;store&nbsp;MEP&nbsp;system&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;graph&nbsp;structure&nbsp;in&nbsp;JSON&nbsp;strings.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">SharedParameterMgr</span>\n{\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Define&nbsp;the&nbsp;user&nbsp;visible&nbsp;shared&nbsp;parameter&nbsp;name.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_shared_param_name&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;MepSystemGraphJson&quot;</span>;\n\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;the&nbsp;parameter&nbsp;definition&nbsp;from</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;the&nbsp;given&nbsp;element&nbsp;and&nbsp;parameter&nbsp;name.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Definition</span>&nbsp;GetDefinition(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">Parameter</span>&gt;&nbsp;ps&nbsp;=&nbsp;e.GetParameters(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_shared_param_name&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;n&nbsp;=&nbsp;ps.Count;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Assert(&nbsp;1&nbsp;&gt;=&nbsp;n,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;expected&nbsp;maximum&nbsp;one&nbsp;shared&nbsp;parameters&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;named&nbsp;&quot;</span>&nbsp;+&nbsp;_shared_param_name&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Definition</span>&nbsp;d&nbsp;=&nbsp;(&nbsp;0&nbsp;==&nbsp;n&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;<span style=\"color:blue;\">null</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;ps[0].Definition;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;d;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Create&nbsp;a&nbsp;new&nbsp;shared&nbsp;parameter&nbsp;definition&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;in&nbsp;the&nbsp;specified&nbsp;grpup.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Definition</span>&nbsp;CreateNewDefinition(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DefinitionGroup</span>&nbsp;group,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;parameter_name,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ParameterType</span>&nbsp;parameter_type&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;group.Definitions.Create(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDefinitionCreationOptions</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameter_name,&nbsp;parameter_type&nbsp;)&nbsp;);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Create&nbsp;the&nbsp;shared&nbsp;parameter.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;Create(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Shared&nbsp;parameters&nbsp;filename;&nbsp;used&nbsp;only&nbsp;in&nbsp;case</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;none&nbsp;is&nbsp;set&nbsp;and&nbsp;we&nbsp;need&nbsp;to&nbsp;create&nbsp;the&nbsp;export</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;history&nbsp;shared&nbsp;parameters.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_shared_parameters_filename\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;shared_parameters.txt&quot;</span>;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_definition_group_name\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;TraverseAllSystems&quot;</span>;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;=&nbsp;doc.Application;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Retrieve&nbsp;shared&nbsp;parameter&nbsp;file&nbsp;name</span>\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;sharedParamsFileName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;app.SharedParametersFilename;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;sharedParamsFileName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;0&nbsp;==&nbsp;sharedParamsFileName.Length&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;path&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Path</span>.GetTempPath();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Path</span>.Combine(&nbsp;path,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_shared_parameters_filename&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">StreamWriter</span>&nbsp;stream;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stream&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">StreamWriter</span>(&nbsp;path&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stream.Close();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.SharedParametersFilename&nbsp;=&nbsp;path;\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sharedParamsFileName\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;app.SharedParametersFilename;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Retrieve&nbsp;shared&nbsp;parameter&nbsp;file&nbsp;object</span>\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DefinitionFile</span>&nbsp;f\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;app.OpenSharedParameterFile();\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;t&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Create&nbsp;TraverseAllSystems&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;Shared&nbsp;Parameters&quot;</span>&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;the&nbsp;category&nbsp;set&nbsp;for&nbsp;binding</span>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">CategorySet</span>&nbsp;catSet&nbsp;=&nbsp;app.Create.NewCategorySet();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Category</span>&nbsp;cat&nbsp;=&nbsp;doc.Settings.Categories.get_Item(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_DuctSystem&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catSet.Insert(&nbsp;cat&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat&nbsp;=&nbsp;doc.Settings.Categories.get_Item(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_PipingSystem&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catSet.Insert(&nbsp;cat&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Binding</span>&nbsp;binding&nbsp;=&nbsp;app.Create.NewInstanceBinding(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catSet&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Retrieve&nbsp;or&nbsp;create&nbsp;shared&nbsp;parameter&nbsp;group</span>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DefinitionGroup</span>&nbsp;group\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;f.Groups.get_Item(&nbsp;_definition_group_name&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;??&nbsp;f.Groups.Create(&nbsp;_definition_group_name&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Retrieve&nbsp;or&nbsp;create&nbsp;the&nbsp;three&nbsp;parameters;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;we&nbsp;could&nbsp;check&nbsp;if&nbsp;they&nbsp;are&nbsp;already&nbsp;bound,&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;but&nbsp;it&nbsp;looks&nbsp;like&nbsp;Insert&nbsp;will&nbsp;just&nbsp;ignore&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;them&nbsp;in&nbsp;that&nbsp;case.</span>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Definition</span>&nbsp;definition\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;group.Definitions.get_Item(&nbsp;_shared_param_name&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;??&nbsp;CreateNewDefinition(&nbsp;group,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_shared_param_name,&nbsp;<span style=\"color:#2b91af;\">ParameterType</span>.Text&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc.ParameterBindings.Insert(&nbsp;definition,&nbsp;binding,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameterGroup</span>.PG_GENERAL&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n</pre>"
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"3\"></a>Options",
    "local_header_href": "#a-name3aoptions",
    "chunk_text": "#### <a name=\"3\"></a>Options\n\nI implemented a new `Options` class to control two settings:\n\n- Use element id or UniqueId for to identify node\n- Store JSON graph bottom-up or top-down\n\nThe class implementation is short, sweet and trivial:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>\n{\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Store&nbsp;element&nbsp;id&nbsp;or&nbsp;UniqueId&nbsp;in&nbsp;JSON&nbsp;output?</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;StoreUniqueId&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;StoreElementId&nbsp;=&nbsp;!StoreUniqueId;\n\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Store&nbsp;parent&nbsp;node&nbsp;id&nbsp;in&nbsp;child,&nbsp;or&nbsp;recursive&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;tree&nbsp;of&nbsp;children&nbsp;in&nbsp;parent?</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;StoreJsonGraphBottomUp&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;StoreJsonGraphTopDown\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;!StoreJsonGraphBottomUp;\n}\n</pre>\n\nThe two bottom-up and top-down JSON storage structures both comply with\nthe [jsTree JSON spec](https://www.jstree.com/docs/json)."
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"4\"></a>Bottom-Up JSON Structure",
    "local_header_href": "#a-name4abottom-up-json-structure",
    "chunk_text": "#### <a name=\"4\"></a>Bottom-Up JSON Structure\n\n<pre class=\"prettyprint\">\n[\n  { \"id\" : \"ajson1\", \"parent\" : \"#\", \"text\" : \"Simple root node\" },\n  { \"id\" : \"ajson2\", \"parent\" : \"#\", \"text\" : \"Root node 2\" },\n  { \"id\" : \"ajson3\", \"parent\" : \"ajson2\", \"text\" : \"Child 1\" },\n  { \"id\" : \"ajson4\", \"parent\" : \"ajson2\", \"text\" : \"Child 2\" },\n]\n</pre>"
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"5\"></a>Top-Down JSON Structure",
    "local_header_href": "#a-name5atop-down-json-structure",
    "chunk_text": "#### <a name=\"5\"></a>Top-Down JSON Structure\n\n<pre class=\"prettyprint\">\n{\n  id: -1,\n  name: 'Root',\n  children: [\n  {\n    id: 0,\n    name: 'Mechanical System',\n    children: [\n    {\n      id: 0_1,\n      name: 'Child 0_1',\n      type: 'window',\n      otherField: 'something...',\n      children: [\n      {\n        id: 0_1_1,\n        name: 'Grandchild 0_1_1'\n      }]\n    }, {\n      id: 0_2,\n      name: 'Child 0_2',\n      children: [\n      {\n        id: 0_2_1,\n        name: 'Grandchild 0_2_1'\n      }]\n    }]\n  }, {\n    id: 2,\n    name: 'Electrical System',\n    children: [\n    {\n      id: 2_1,\n      name: 'Child 2_1',\n      children: [{\n        id: 2_1_1,\n        name: 'Grandchild 2_1_1'\n      }]\n    },\n    {\n      id: 2_2,\n      name: 'Child 2_2',\n      children: [{\n        id: 2_2_1,\n        name: 'Grandchild 2_2_1'\n      }]\n    }]\n  },\n  {\n    id: 3,\n    name: 'Piping System',\n    children: [\n    {\n      id: 3_1,\n      name: 'Child 3_1',\n      children: [{\n        id: 3_1_1,\n        name: 'Grandchild 3_1_1'\n      }]\n    },\n    {\n      id: 3_2,\n      name: 'Child 3_2',\n      children: [{\n        id: 3_2_1,\n        name: 'Grandchild 3_2_1'\n      }]\n    }]\n  }]\n}\n</pre>"
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"6\"></a>TraversalTree JSON Output Generator",
    "local_header_href": "#a-name6atraversaltree-json-output-generator",
    "chunk_text": "#### <a name=\"6\"></a>TraversalTree JSON Output Generator\n\nThe two `TraversalTree` JSON output generators `DumpToJsonTopDown` and `DumpToJsonBottomUp` are pretty trivial as well, since all the work is done by the individual tree nodes:\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Dump&nbsp;the&nbsp;top-down&nbsp;traversal&nbsp;graph&nbsp;into&nbsp;JSON.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;In&nbsp;this&nbsp;case,&nbsp;each&nbsp;parent&nbsp;node&nbsp;is&nbsp;populated</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;with&nbsp;a&nbsp;full&nbsp;hierarchical&nbsp;graph&nbsp;of&nbsp;all&nbsp;its</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;children,&nbsp;cf.&nbsp;https://www.jstree.com/docs/json.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;DumpToJsonTopDown()\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;m_startingElementNode\n&nbsp;&nbsp;&nbsp;&nbsp;.DumpToJsonTopDown();\n}\n\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Dump&nbsp;the&nbsp;bottom-up&nbsp;traversal&nbsp;graph&nbsp;into&nbsp;JSON.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;In&nbsp;this&nbsp;case,&nbsp;each&nbsp;child&nbsp;node&nbsp;is&nbsp;equipped&nbsp;with&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;a&nbsp;&#39;parent&#39;&nbsp;pointer,&nbsp;cf.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;https://www.jstree.com/docs/json/</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;DumpToJsonBottomUp()\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;a&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;();\n&nbsp;&nbsp;m_startingElementNode.DumpToJsonBottomUp(&nbsp;a,&nbsp;<span style=\"color:#a31515;\">&quot;#&quot;</span>&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#a31515;\">&quot;[&quot;</span>&nbsp;+&nbsp;<span style=\"color:blue;\">string</span>.Join(&nbsp;<span style=\"color:#a31515;\">&quot;,&quot;</span>,&nbsp;a&nbsp;)&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;]&quot;</span>;\n}\n</pre>"
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"7\"></a>TreeNode JSON Output Generator",
    "local_header_href": "#a-name7atreenode-json-output-generator",
    "chunk_text": "#### <a name=\"7\"></a>TreeNode JSON Output Generator\n\nThe two `TreeNode` JSON output generators are only slightly more complicated.\n\nHere are the two formatting strings that they use:\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Format&nbsp;a&nbsp;tree&nbsp;node&nbsp;to&nbsp;JSON&nbsp;storing&nbsp;parent&nbsp;id&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;in&nbsp;child&nbsp;node&nbsp;for&nbsp;bottom-up&nbsp;structure.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_json_format_to_store_parent_in_child\n&nbsp;&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;&#123;&#123;&quot;</span>\n&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;id\\&quot;&nbsp;:&nbsp;{0},&nbsp;&quot;</span>\n&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;name\\&quot;&nbsp;:&nbsp;\\&quot;{1}\\&quot;,&nbsp;&quot;</span>\n&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;parent\\&quot;&nbsp;:&nbsp;{2}}}&quot;</span>;\n\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Format&nbsp;a&nbsp;tree&nbsp;node&nbsp;to&nbsp;JSON&nbsp;storing&nbsp;a&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;hierarchical&nbsp;tree&nbsp;of&nbsp;children&nbsp;ids&nbsp;in&nbsp;parent&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;for&nbsp;top-down&nbsp;structure.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_json_format_to_store_children_in_parent\n&nbsp;&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;&#123;&#123;&quot;</span>\n&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;id\\&quot;&nbsp;:&nbsp;{0},&nbsp;&quot;</span>\n&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;name\\&quot;&nbsp;:&nbsp;\\&quot;{1}\\&quot;,&nbsp;&quot;</span>\n&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;children\\&quot;&nbsp;:&nbsp;[{2}]}}&quot;</span>;\n</pre>\n\nHere are the two recursive functions implementing the JSON output:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;GetName(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;e.Name.Replace(&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;&#39;&quot;</span>&nbsp;);\n}\n\n<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;GetId(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>.StoreUniqueId\n&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;&quot;</span>&nbsp;+&nbsp;e.UniqueId&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;e.Id.IntegerValue.ToString();\n}\n\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Add&nbsp;JSON&nbsp;strings&nbsp;representing&nbsp;all&nbsp;children&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;of&nbsp;this&nbsp;node&nbsp;to&nbsp;the&nbsp;given&nbsp;collection.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;DumpToJsonBottomUp(\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;json_collector,\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;parent_id&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;=&nbsp;GetElementById(&nbsp;m_Id&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;id&nbsp;=&nbsp;GetId(&nbsp;e&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;json&nbsp;=&nbsp;<span style=\"color:blue;\">string</span>.Format(\n&nbsp;&nbsp;&nbsp;&nbsp;_json_format_to_store_parent_in_child,\n&nbsp;&nbsp;&nbsp;&nbsp;id,&nbsp;GetName(&nbsp;e&nbsp;),&nbsp;parent_id&nbsp;);\n\n&nbsp;&nbsp;json_collector.Add(&nbsp;json&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">TreeNode</span>&nbsp;node&nbsp;<span style=\"color:blue;\">in</span>&nbsp;m_childNodes&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;node.DumpToJsonBottomUp(&nbsp;json_collector,&nbsp;id&nbsp;);\n&nbsp;&nbsp;}\n}\n\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;a&nbsp;JSON&nbsp;string&nbsp;representing&nbsp;this&nbsp;node&nbsp;and</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;including&nbsp;the&nbsp;recursive&nbsp;hierarchical&nbsp;graph&nbsp;of&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;all&nbsp;its&nbsp;all&nbsp;children.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;DumpToJsonTopDown()\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;=&nbsp;GetElementById(&nbsp;m_Id&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;json_collector&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;();\n\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">TreeNode</span>&nbsp;child&nbsp;<span style=\"color:blue;\">in</span>&nbsp;m_childNodes&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;json_collector.Add(&nbsp;child.DumpToJsonTopDown()&nbsp;);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;json_kids&nbsp;=&nbsp;<span style=\"color:blue;\">string</span>.Join(&nbsp;<span style=\"color:#a31515;\">&quot;,&quot;</span>,&nbsp;json_collector&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;json&nbsp;=&nbsp;<span style=\"color:blue;\">string</span>.Format(\n&nbsp;&nbsp;&nbsp;&nbsp;_json_format_to_store_children_in_parent,\n&nbsp;&nbsp;&nbsp;&nbsp;GetId(&nbsp;e&nbsp;),&nbsp;GetName(&nbsp;e&nbsp;),&nbsp;json_kids&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;json;\n}\n</pre>"
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"8\"></a>Download and To Do",
    "local_header_href": "#a-name8adownload-and-to-do",
    "chunk_text": "#### <a name=\"8\"></a>Download and To Do\n\nThe current state of this project is available from\nthe [TraverseAllSystems GitHub repository](https://github.com/jeremytammik/TraverseAllSystems), and the version discussed above\nis [release 2017.0.0.9](https://github.com/jeremytammik/TraverseAllSystems/releases/tag/2017.0.0.9).\n\nThe next step will consist of the Forge viewer extension implementation displaying a custom panel in the user interface hosting a tree view of the MEP system graphs and implementing two-way linking and selection functionality back and forth between the tree view nodes and the 2D and 3D viewer elements."
  },
  {
    "original_filename": "1450_mep_system_json_graph",
    "header_text": "<a name=\"9\"></a>RevitLookup Updates",
    "local_header_href": "#a-name9arevitlookup-updates",
    "chunk_text": "#### <a name=\"9\"></a>RevitLookup Updates\n\nA couple of enhancement have been added to [RevitLookup](https://github.com/jeremytammik/RevitLookup) since\nI last mentioned it, most lately\nby [awmcc90](https://github.com/awmcc90)\nand [Shayne Hamel](https://github.com/Shayneham)\nto handle exceptions snooping MEP elements, electrical circuits, flex ducts and flex pipes.\n\nHere are the diffs:\n\n- [2017.0.0.5](https://github.com/jeremytammik/RevitLookup/compare/2017.0.0.4...2017.0.0.5) &ndash;\nmerged pull request #14 by Shayneham to handle exceptions snooping flex pipe and duct lacking levels etc.\n- [2017.0.0.4](https://github.com/jeremytammik/RevitLookup/compare/2017.0.0.3...2017.0.0.4) &ndash;\nmerged pull request #13 by awmcc90 to skip mepSys.Elements for OST_ElectricalInternalCircuits category\n\nThank you very much for those improvements!\n\nIf you run into any issues with RevitLookup yourself, please fork the repository, implement and test your changes, and issue a pull request for me to integrate them back into the master branch.\n\nThank you!"
  }
]