[
  {
    "original_filename": "1750_tag_linked_elem",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n\n</head>\n\n<!---\n\n- 10027136 [highlight and tag linked elements]\n  http://forums.autodesk.com/t5/revit-api/highlight-and-tag-linked-elements/m-p/5294217\n  tagging linked elements can be solved using two different approaches, either via RevitLinkInstance + CreateLinkReference or using the ParseFromStableRepresentation method.\n\n- 15175390 [Tagging Linked Elements using Revit API]\n  https://forums.autodesk.com/t5/revit-api-forum/tagging-linked-elements-using-revit-api/m-p/8669001\n\ntwitter:\n\nTagging a linked element and retrieving untagged in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/taglinked\n\nThe linked file enhancements introduced in the Revit 2014 API obviously need more awareness\n&ndash; Link enhancements &ndash; Conversion of geometric references\n&ndash; Tagging a linked element\n&ndash; Using the stable representation to tag a linked element\n&ndash; List all untagged doors...\n\nlinkedin:\n\n the #RevitAPI #bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nTagging a linked element and retrieving untagged in the #RevitAPI\n\nhttp://bit.ly/taglinked\n\nThe linked file enhancements introduced in the Revit 2014 API obviously need more awareness:\n\n- Link enhancements\n- Conversion of geometric references\n- Tagging a linked element\n- Using the stable representation to tag a linked element\n- List all untagged doors...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\n-->"
  },
  {
    "original_filename": "1750_tag_linked_elem",
    "header_text": "Tagging a Linked Element",
    "local_header_href": "#tagging-a-linked-element",
    "chunk_text": "### Tagging a Linked Element\n\nThe linked file enhancements introduced in the Revit 2014 API obviously need more awareness:\n\n- [Link enhancements &ndash; conversion of geometric references](#2) \n- [Tagging a linked element](#3) \n- [Using the stable representation to tag a linked element](#4) \n- [List all untagged doors](#5) \n\n<center>\n<img src=\"img/tag_linked_element.jpg\" alt=\"Tag linked element\" width=\"475\">\n</center>"
  },
  {
    "original_filename": "1750_tag_linked_elem",
    "header_text": "Link Enhancements &ndash; Conversion of Geometric References",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Link Enhancements &ndash; Conversion of Geometric References\n\n`CreateLinkReference` was introduced way back in\nthe [Revit 2014 API](https://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html).\n\nConversion of geometric references in links is mentioned as one of the major enhancements:\n\nThe API calls:\n\n- [Reference.LinkedElementId](http://www.revitapidocs.com/2020/97813744-6e64-00a7-da5c-b2c6de7919ad.htm) &ndash; The id of the top-level element in the linked document that is referred to by this reference.\n- [Reference.CreateLinkReference(RevitLinkInstance)](http://www.revitapidocs.com/2020/919d7d3f-f8c2-eb12-4069-0022c20fa13a.htm) &ndash; Creates a `Reference` from a `Reference` in an RVT Link.\n- [Reference.CreateReferenceInLink()](http://www.revitapidocs.com/2020/20a8bee7-2378-c0a6-36f0-07ca42eaedc3.htm) &ndash; Creates a `Reference` in an RVT Link from a `Reference` in the RVT host file.\n\nallow conversion between `Reference` objects which reference only the contents of the link and `Reference` objects which reference the host.\n\nThis allows an application, for example, to look at the geometry in the link, find the needed face, and convert the reference to that face into a reference in the host suitable for use to place a face-based instance.\n\nAlso, they allow you to obtain a reference in the host (e.g., from a dimension or family) and convert it to a reference in the link, suitable for use in `Element.GetGeometryObjectFromReference`.\n\nThis enhancement was often overlooked, and several questions were raised on how to tag an element in a linked file."
  },
  {
    "original_filename": "1750_tag_linked_elem",
    "header_text": "Tagging a Linked Element",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Tagging a Linked Element\n\nIlia Ivanov used these methods to answer his own question in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [tagging linked elements using Revit API](https://forums.autodesk.com/t5/revit-api-forum/tagging-linked-elements-using-revit-api/m-p/8669001):\n\n**Question:** Hello, Is it possibly to tag a linked element?\n\nAnd also retrieve the reference of the tagged linked element?\n\n**Answer:** Hello, I have done it:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">RevitLinkInstance</span>&nbsp;link&nbsp;=&nbsp;doc.GetElement(\n&nbsp;&nbsp;&nbsp;&nbsp;tag.TaggedElementId.LinkInstanceId&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">RevitLinkInstance</span>;\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;refer&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Reference</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;link.GetLinkDocument()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetElement(&nbsp;tag.TaggedElementId.LinkedElementId&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.CreateLinkReference(&nbsp;link&nbsp;);\n</pre>\n\nFor a bit more context, here is a slightly nonsensical sample method to tag all walls in all linked documents, placing all tags in one single constant spot:\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Tag&nbsp;all&nbsp;walls&nbsp;in&nbsp;all&nbsp;linked&nbsp;documents</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">void</span>&nbsp;TagAllLinkedWalls(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Point&nbsp;near&nbsp;my&nbsp;wall</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;xyz&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">XYZ</span>(&nbsp;-20,&nbsp;20,&nbsp;0&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;At&nbsp;first&nbsp;need&nbsp;to&nbsp;find&nbsp;our&nbsp;links</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;collector\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">RevitLinkInstance</span>&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;elem&nbsp;<span style=\"color:blue;\">in</span>&nbsp;collector&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Get&nbsp;linkInstance</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">RevitLinkInstance</span>&nbsp;instance&nbsp;=&nbsp;elem&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">RevitLinkInstance</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Get&nbsp;linkDocument</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;linkDoc&nbsp;=&nbsp;instance.GetLinkDocument();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Get&nbsp;linkType</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">RevitLinkType</span>&nbsp;type&nbsp;=&nbsp;doc.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance.GetTypeId()&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">RevitLinkType</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Check&nbsp;if&nbsp;link&nbsp;is&nbsp;loaded</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:#2b91af;\">RevitLinkType</span>.IsLoaded(&nbsp;doc,&nbsp;type.Id&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Find&nbsp;walls&nbsp;for&nbsp;tagging</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;walls\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;linkDoc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfCategory(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Walls&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">Wall</span>&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;reference</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Wall</span>&nbsp;wall&nbsp;<span style=\"color:blue;\">in</span>&nbsp;walls&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;newRef&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Reference</span>(&nbsp;wall&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.CreateLinkReference(&nbsp;instance&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;transaction</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Create&nbsp;tags&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IndependentTag</span>&nbsp;newTag&nbsp;=&nbsp;<span style=\"color:#2b91af;\">IndependentTag</span>.Create(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;doc.ActiveView.Id,&nbsp;newRef,&nbsp;<span style=\"color:blue;\">true</span>,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TagMode</span>.TM_ADDBY_MATERIAL,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TagOrientation</span>.Horizontal,&nbsp;xyz&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Use&nbsp;TaggedElementId.LinkInstanceId&nbsp;and&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;TaggedElementId.LinkInstanceId&nbsp;to&nbsp;retrieve&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;the&nbsp;id&nbsp;of&nbsp;the&nbsp;tagged&nbsp;link&nbsp;and&nbsp;element:</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">LinkElementId</span>&nbsp;linkId&nbsp;=&nbsp;newTag.TaggedElementId;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;linkInsancetId&nbsp;=&nbsp;linkId.LinkInstanceId;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;linkedElementId&nbsp;=&nbsp;linkId.LinkedElementId;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n</pre>\n\nMany thanks to Ilia for sharing this!"
  },
  {
    "original_filename": "1750_tag_linked_elem",
    "header_text": "Using the Stable Representation to Tag a Linked Element",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Using the Stable Representation to Tag a Linked Element\n\nIn another extensive thread\non [highlighting and tagging linked elements](http://forums.autodesk.com/t5/revit-api/highlight-and-tag-linked-elements/m-p/5294217).\nCarolina Machado suggested an alternative approach and less official solution to tag a linked element using the `ParseFromStableRepresentation` method instead:\n\n> Using RevitLookup and a post from your blog, I noticed that the Stable Representation of references in linked instances conform to the following pattern:\n\n> <code>&nbsp; revitLinkInstance.UniqueId\n<br/>&nbsp; &nbsp; +<span style=\"color:#a31515;\">&quot;:0:RVTLINK/&quot;</span>&nbsp;+&nbsp;revitLinkType.UniqueId\n<br/>&nbsp; &nbsp; +<span style=\"color:#a31515;\">&quot;:&quot;</span>&nbsp;+&nbsp;element.Id.ToString()</code>\n\n> Using this string, it is possible to get the `Reference` through `Reference.ParseFromStableRepresentation` method and then use it to tag the element.\n\nMany thanks to Carolina for sharing this!"
  },
  {
    "original_filename": "1750_tag_linked_elem",
    "header_text": "List All Untagged Doors",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> List All Untagged Doors\n\nOn a another tagging topic, however with no links involved, here are two suggestions by my colleague Naveen Kumar and\nAlexander [@aignatovich](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1257478) Ignatovich, aka Александр Игнатович,\nanswering a whole slew of questions on how to retrieve all untagged doors in the model:\n\n- [I want to check whether tag is present on door by API](https://forums.autodesk.com/t5/revit-api-forum/i-want-to-check-whether-tag-is-present-on-door-by-api-how-should/td-p/8532032)\n- [How to get relation of element with its tag or its label](https://forums.autodesk.com/t5/revit-api-forum/how-to-gets-relation-of-element-with-its-tag-or-its-label/td-p/8602124)\n- [How to verify label on element using Revit API](https://forums.autodesk.com/t5/revit-api-forum/how-to-verify-label-on-element-using-revit-api/td-p/8594801)\n\n**Question:** Can we determine the relationship between a tag and its tagged element?\n\nI can retrieve all independent tags of particular category.\n\nE.g., having 6 doors, I can retrieve the 6 door tags.\n\nSuppose one of doors does not have tag.\n\nHow can I find the particular door lacking a tag?\n\nIn other words, how to find relation between element category and element tag category.\n\n**Answer:** Try using the below code. It will highlight the elements that are not tagged:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;doors\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfCategory(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Doors&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">FamilyInstance</span>&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">IndependentTag</span>&gt;&nbsp;tags\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">IndependentTag</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Cast&lt;<span style=\"color:#2b91af;\">IndependentTag</span>&gt;();\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">ElementId</span>&gt;&nbsp;untagged_elements&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ElementId</span>&gt;();\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;<span style=\"color:blue;\">in</span>&nbsp;doors&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!tags.Any(&nbsp;q&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;q.TaggedLocalElementId&nbsp;==&nbsp;e.Id&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;untagged_elements.Add(&nbsp;e.Id&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n&nbsp;&nbsp;uidoc.Selection.SetElementIds(&nbsp;untagged_elements&nbsp;);\n&nbsp;&nbsp;uidoc.RefreshActiveView();\n</pre>\n\n**Answer 2:** To check whether a specific door is untagged, you can find all `IndependentTag` elements present in the document of `OST_DoorTags` category and the door elements that they are tagging like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;collector&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">IndependentTag</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.OfCategory(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_DoorTags&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;doorTagsIds\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">HashSet</span>&lt;<span style=\"color:#2b91af;\">ElementId</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;collector.OfType&lt;<span style=\"color:#2b91af;\">IndependentTag</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Select(&nbsp;x&nbsp;=&gt;&nbsp;x.GetTaggedLocalElement()?.Id&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;x&nbsp;=&gt;&nbsp;x&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)&nbsp;);\n</pre>\n\nThen you can iterate over your doors collection and check if `doorTagsIds` contains the `door.Id`.\n\nBoth of these suggestions can probably be speeded up by storing the entire relationship between the tags and the tagged elements in a dictionary and inverting that relationship, as I explained in the recent thread\non [`FilteredElementCollector` &ndash; unreferenced sections only](https://forums.autodesk.com/t5/revit-api-forum/filteredelementcollector-unreferenced-sections-only/m-p/8773472)."
  }
]