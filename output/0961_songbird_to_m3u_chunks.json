[
  {
    "original_filename": "0961_songbird_to_m3u",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n<!--<script src=\"google-code-prettify/run_prettify.js\"></script>-->\n</head>"
  },
  {
    "original_filename": "0961_songbird_to_m3u",
    "header_text": "Super Insane MP3 and Songbird Playlist Exporter",
    "local_header_href": "#super-insane-mp3-and-songbird-playlist-exporter",
    "chunk_text": "<h3>Super Insane MP3 and Songbird Playlist Exporter</h3><p>I am still in the USA, visiting my colleague Kevin Vandecar in Goffstown, New Hampshire, returning to Europe on Tuesday.</p><p>Today we worked in his huge garden, loading a bunch of tree stumps on a truck with a tractor, then went for a swim in the beautiful Uncanoonuc Lake:</p><center>\n<img alt=\"Uncanoonuc Lake\" src=\"file:////j/photo/jeremy/2013/2013-06-08_goffstown/05.jpeg\" width=\"300\"/>\n</center><p>Back in February I mentioned using Songbird to play music on the Mac,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#3\">\nextracting M3U playlists</a> from\n\nit, and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#4\">\ndetermining the playlist duration</a> using ffmpeg and mutagen.</p><p>I encountered lots of other digital music related issues since then, and here are some notes on a few of them:</p><ul>\n<li><a href=\"#2\">MP3 versus FLAC</a></li>\n<li><a href=\"#3\">CBR versus VBR</a></li>\n<li><a href=\"#4\">Insanely high MP3 quality is insufficient</a></li>\n<li><a href=\"#5\">Converting M4A to MP3</a></li>\n<li><a href=\"#6\">Exporting a Songbird playlist to M3U</a></li>\n<li><a href=\"#7\">MP3 track and M3U playlist duration</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "0961_songbird_to_m3u",
    "header_text": "MP3 Versus FLAC",
    "local_header_href": "#mp3-versus-flac",
    "chunk_text": "<h3>MP3 Versus FLAC</h3><p>Here is a discussion of a topic important to me but completely unconnected to Revit and its API.\nI hope it is of use to other audiophiles as well.\nIn fact, I would never dream of terming myself audiophile, and I seems to me that it should be of great interest to anybody using the MP3 format, and probably any other digital music format as well.\nAs far as I can tell, that incudes just about everybody I know, and definitely everybody under 25 years of age.</p><p>I mentioned that I dabble with DJ-ing and listen to music, which is vastly more handy to manage in digital format, of course.\n\n<p>Until quite recently, I was storing all my music in the lossy compressed\n\n<a href=\"http://en.wikipedia.org/wiki/MP3\">\nMP3</a> format.</p>\n<p>I recently had a bad shock connected with that, though.\n\n<p>My friend Markus gave me a nice jazzy guitar and percussion recording in the lossless\n\n<a href=\"http://en.wikipedia.org/wiki/FLAC\">\nFLAC</a> format.\n\n<p>I converted it to MP3 using the standard settings, and was surprised and pretty devastated to find that I could hear a significant difference in quality, just listening to the first few seconds of the original FLAC and the compressed MP3 on the built-in Mac loudspeakers.</p>\n<p>This led to a visit to Markus, who stores all his music in FLAC and has the appropriate equipment to listen to it in high quality as well.\nFurther experiments showed that I need to either abandon the MP3 format entirely for any high quality sound archival and listening, or pay a lot more attention to details that I had hitherto completely ignored.</p>\n<p>I seriously considered giving up on the MP3 format altogether, which would be painful, since so far I have been converting everything I have to that format, and standardising all my tools to expect and handle that and nothing else, significantly simplifying scripts for creating and analysing playlists and such-like things.</p>\n<p>On the other hand, the MP3 format does include options for handling levels of quality that are said to make the compressed version indistinguishable from the original, so I had hopes of making use of them to allow me to happily continue using this format after all.</p>\n<p>It was harder than expected, though.</p>\n<p>Below are a few things I learned on the way.</p>\n<p>I would also like to recommend this old article from 2005 on\n\n<a href=\"http://www.codinghorror.com/blog/2005/12/variable-bit-rate-getting-the-best-bang-for-your-byte.html\">\nvariable bit rate and getting the best bang for your byte</a>,\n\nincluding the numerous comments providing some interesting suggestions and lots of background information.</p>\n<!--\n<a name=\"\"></a>\n\n<h4>Ffmpeg and Lame</h4>\n\n<p>Until I ran into this issue, I was using\n\n<a href=\"\">\nffmpeg</a> to\n\nconvert between different formats and generate the MP3.\n\n<p>Ffmpeg is actually driving\n\n<a href=\"\">\nlame</a> in\n\nthe background.\n\nAs its documentation clearly states, \"LAME is a program which can be used to create compressed audio files (Lame ain't an MP3 encoder).\"\nUntil I read that, I thought it was, though.</p>\n\n<p>I found it confusing trying to understand the mapping of the ffmpeg options to lame, and anyway, less is better, so I now switched to using lame directly instead of ffmpeg for the conversions described below.</p>\n-->\n<a name=\"3\"></a>\n<h4>CBR versus VBR</h4>\n<p>As far as I can tell, quite a number of MP3 files use constant bitrate encoding, CBR.</p>\n<p>Many MP3 files are encoded using\n\n<a href=\"http://en.wikipedia.org/wiki/LAME\">LAME</a>.\n\n<p>Its documentation states that CBR is discouraged, and variable bitrate,\n\n<a href=\"http://lame.sourceforge.net/vbr.php\">\nVBR</a>, should be used instead.</p>\n<p>I tried directly using lame for music conversion, but it does not preserve the metadata tags, so I returned to ffmpeg instead anyway.</p>\n<p>Still, reading the lame documentation helps understand which of the multitude of ffmpeg tags to use to control the conversion quality, and how.</p>\n<!--\n<a name=\"4\"></a>\n\n<h4>Converting WAV to MP3</h4>\n\n<p>In the past, I always ripped CDs straight to MP3.</p>\n\n<p>Based on these revelations, I ripped a couple of CDs to\n\n<a href=\"\">\nWAV</a> instead,\n\nwhich is also a lossless format, and uncompressed as well, unlike FLAC, representing a direct copy of the original CD content.\n\n<p>This enables very direct serious comparison of my own personal perception of the WAV and resulting lossy and compressed MP3 variants.</p>\n-->\n<a name=\"4\"></a>\n<h4>Insanely High MP3 Quality is Insufficient</h4>\n<p>Armed with these experiences, I tried converting from FLAC to MP3 using the lame -V 0 quality setting, which is termed 'insanely high quality' in the lame documentation.</p>\n<p>I still hear a deterioration of clarity and brilliance, though.</p>\n<p>This led me to look for further possibilities to force lame to globally maintain a specified minimum rate.</p>\n<p>Happily, such a setting does exist using the -b option, and using it to request a minimum bitrate of 256 kbps finally succeeds in producing an output that I am unable to distinguish from the original.</p>\n<a name=\"5\"></a>\n<h4>Converting M4A to MP3</h4>\n<p>Later, I noticed a deterioration converting certain M4A files to MP3.</p>\n<!--\n<p>Here is a suggestion for a\n\n<a href=\"\">\nnaive script</a> to\n\nachieve this:</p>\n\n<pre>\nmkdir -p mp3s\n\nSAVEIFS=$IFS\nIFS=$(echo -en \"\\n\\b\")\n\nfor i in `find . -type f -iname \"*.m4[ab]\" -print`; do\necho $i\nNAME=`echo $i | sed -e 's/\\.\\///' -e 's/\\.m4b//g' `\necho \"doing '$NAME'\"\nfaad --stdio $i | lame --preset standard - \"mp3s/${NAME}.mp3\"\ndone\n\nIFS=$SAVEIFS\n</pre>\n\n<p>The results were totally disappointing.</p>\n\n<p>use\n\n<a href=\"\">\nfaad</a>,\n\nthe free audio ... decoder to generate a pure unencoded and uncompressed WAV file representing the track contents, and then apply lame to generate the MP3 from that, with all the previous encoding remnants removed, unencumbered by any prior history:\n\n<p>One can use mediainfo to examine the bitrate of the orginal data:</p>\n\n\nfaad and lame with variable bitrate, maximum quality, and specify minimum encoding bitrate:</p>\n\n<pre>\n  faad -o X.wav X.m4a\n  lame -b 256 -V0 X.wav X.mp3\n</pre>\n\n<p>Actually, here is the current version of my m4a2mp3 script:</p>\n\n<pre>\n#!/bin/bash\n\n# save and change IFS to allow spaces in filenames\nOLDIFS=$IFS\nIFS=$'\\n'\n\nfor f in *.m4a ; do faad -o - \"$f\" | lame -h -b 192 - \"${f%m4a}mp3\" ; done\n\n# restore it\nIFS=$OLDIFS\n</pre>\n-->\n<p>I still have no perfect solution for this.\n\n<p>Some suggestions for LAME encoding arguments that I tried include:</p>\n<pre>\n  -V9 --vbr-new -q0 -mj -b32 -F --lowpass 19.7\n    --nspsytune --cwlimit 10.7 --athaa-sensitivity 1\n\n  -V2 --vbr-new -q0 --lowpass 19.7 -b96\n\n  -V2 --vbr-new -q0 --lowpass 19.7 --cwlimit 10.7\n    --scale 0.99 -b96\n</pre>\n<p>My current solution includes comparing the original M4A file size with the resulting MP3 size, and looking at the bit rate and mode using\n\n<a href=\"http://mediainfo.sourceforge.net\">mediainfo</a>.</p>\n<!--\n<p>Pretty heavy stuff.</p>\n\n<p>Another hint, for mac:\n\n\"I have ripped over 1,000 cd's to Apple Lossless (ALAC) which are fine on my 160GB iPod.\n\nYou can use XLD to convert ALAC to FLAC if need be or a lossy form of AAC or MP3. As the previous poster said, you can convert between lossless formats with no issues.\n\nFor auto use, I load 320 or 256 kbps AAC on my iPod and plug into car.\"\n\n</p>\n-->\n<p>Here is the <code>m4a2mp3</code> script that I am currently using, and often re-adapting:</p>\n<pre class=\"prettyprint\">\n#!/bin/bash\n\n# save and change IFS to allow spaces in filenames\nOLDIFS=$IFS\nIFS=$'\\n'\n\n#for f in *.m4a ; do ffmpeg -i \"$f\" \"$f\".mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -q:a 0 $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -b:a 320k $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -ab 300 $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -q 0 $(basename -s .m4a \"$f\").mp3 ; done\n\nfor f in *.m4a ; do ffmpeg -i \"$f\" -q 2 $(basename -s .m4a \"$f\").mp3 ; done\n\n# this does not preserve the tags:\n#for f in *.m4a ; do faad -o - \"$f\" | lame -V0 -b 256 - \"${f%m4a}mp3\" ; done\n\n# restore IFS\nIFS=$OLDIFS\n</pre>\n<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>\n<p>In the last few runs, I have simply changed the '-q 2' argument up or down a bit so that the resulting MP3 quality matches well with the original M4A.</p>\n<a name=\"6\"></a>\n<h4>Exporting a Songbird Playlist to M3U</h4>\n<p>I presented my Songbird\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#3\">\nM3U playlist extractor</a> when\n\nI was still supporting only MP3 file format.\nI enhanced it to support FLAC as well, and now present the updated version.\n\n<p>I sometime use\n\n<a href=\"http://www.virtualdj.com\">\nVirtualDJ</a> to play music to dance to, since it provides the crossfade functionality lacking in Songbird.</p>\n<p>I can feed it with an M3U playlist.</p>\n<p>But...</p>\n<p>The biggest gripe I have about Songbird is that it will not export its playlists to any sensible file format at all, in spite of being able to import M3U.</p>\n<p>I searched for workarounds and saw many mentions of plugins for achieving this, but none of them worked for me.</p>\n<p>There appears to be a lot of confusion among Songbird and its plugins regarding version compatibility.</p>\n<p>I found a pretty easy workaround of my own, though, which I have been using successfully for some time now.</p>\n<p>I can simply select all songs in a Songbird playlist and hit Cmd-C to copy them to the pasteboard.\n\n<!--\n, it will place a text string containing a linefeed delimited list of records in it, each record containing a comma delimited fields.</p>\n\n<p>Each record provides the information about one track, specifying </p>\n-->\n<p>If you select a single track in Songbird and copy and paste it to an editor, you will see that it places a comma delimited string containing the artist, album and track name on the pasteboard.\nSelecting and copying several tracks generates a linefeed-delimited list of these records, i.e. each track information on a separate line.</p>\n<p>This information can be used to generate an M3U playlist file, provided the actual file path structure exactly matches the artist, album and track information read from the MP3 or FLAC music file tags.</p>\n<!--\n<p>I mentioned the confusion I had regarding the use of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#1\">\nartist versus album artist tags</a>.</p>\n\n<p>Well, the makers of Songbird seem to have had an issue with this as well, since they export the album artist instead of the artist, as I would have expected.</p>\n\n<p>As a result of this confusion, I have now normalised my music library to have the same information in both of these, and ensure that the music file path also matches this.</p>\n-->\n<p>Once that is all set up, I can use the following Python script <code>songbird_to_m3u.py</code> to convert the information copied and pasted from Songbird to an M3U playlist referencing the files in my music library, which I can then import into VirtualDJ or any other player:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/env python\n#\n# songbird_to_m3u.py - convert the file tags exported\n#                      by songbird to m3u playlist\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# Artist, Album, Title --&gt;\n# /m/Artist/Album/Track*Title.flac\n# /m/Artist/Album/Track*Title.mp3\n#\n# cat songbird_export.txt | songbird_to_m3u.py &gt; songbird_export.m3u\n#\nimport glob, os, sys\n\nnOk = 0\nnFailed = 0\n\nwhile True:\n  try: line = raw_input()\n  except: break\n\n  #print '&gt;', line\n\n  a = line.strip().split( ', ' )\n\n  if 3 != len(a):\n\n    sys.stderr.write( line + ' - not 3 elements\\n' )\n    nFailed += 1\n    continue\n\n  ok = False\n  p = '/m/' + a[0] + '/' + a[1] + '/*' + a[2]\n  a1 = glob.glob( p + '.flac' )\n  if 1 == len(a1):\n    print a1[0]\n    ok = True\n  else:\n    a2 = glob.glob( p + '.mp3' )\n    if 1 == len(a2):\n      print a2[0]\n      ok = True\n\n  if ok:\n    nOk += 1\n  else:\n    sys.stderr.write(\n      '\\n%s\\n%s\\nglob returned %d (flac) and %d (mp3)\\n\\n'\n      % (line, p, len(a1), len(a2)) )\n    nFailed += 1\n\nsys.stderr.write(\n  '%s files passed, %s failed.\\n'\n  % (nOk, nFailed) )\n</pre>\n<p>Here is the content of the Mac pasteboard after copying a playlist in Songbird:</p>\n<pre>\n  Gotan Project, La Revancha Del Tango, Chunga's Revenge\n  Outback, Dance The Devil Away, Two In The Bush\n  Marla Glen, Humanology, Fever\n  Brent Lewis, Thunder Down Under, Outback Attack\n  The Chemical Brothers, Hanna, Escape 700\n  Shakti, Natural Elements, Come On Baby Dance With Me\n  Gabrielle Roth, Tribe, Tsunami 3 - chaos\n  Talvin Singh, Oriental Club Disk 2, OK\n  Martin O, Der mit der Stimme tanzt, Japaner\n  Jazzbit, Unknown, Swingin man\n  Yma Sumac, Ultra Lounge - Leopard Skin Fuzzy Sampler, Taki Rari\n  Folco Orselli, Generi di Conforto, La ballata di Piazzale Maciachini\n  Beatles, White Album CD 2, Good Night\n  Natalie Dessay, Vocalises, Vocalise\n  Büdi Siebert, Namaste, Lotus Call 1 Varja Guru Mantra\n  Jeremy Tammik, Meditation, Stillness One Minute Silence\n  Erik Truffaz, Mantis, Saisir\n</pre>\n<p>Running the <code>songbird_to_m3u.py</code> script on that produces the following output, representing a valid M3U playlist on my file system:</p>\n<pre>\n  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n  /m/Marla Glen/Humanology/13 Fever.flac\n  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n  /m/Jazzbit/Unknown/00 Swingin man.mp3\n  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n  /m/Erik Truffaz/Mantis/03 Saisir.flac\n</pre>\n<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>\n<a name=\"7\"></a>\n<h4>MP3 Track and M3U Playlist Duration</h4>\n<p>Once I have an M3U playlist, I would also like to determine the total duration of all the tracks.\n\n<p>I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#4\">\nmp3duration.py</a> Python\n\nscript achieving that, which I now enhanced to handle FLAC files as well.\n\n<p>Here is the updated version:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/python\n#\n# mp3duration.py - retrieve the length of the tracks in\n#                  the playlist and calculate the total\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# /j/sh/mp3duration.py playlist.m3u\n#\n# http://code.google.com/p/mutagen/wiki/Tutorial\n# http://www.doughellmann.com/PyMOTW/subprocess\n#\nimport glob, os, re, subprocess, sys\nimport mutagen.mp3, mutagen.flac\n\n_find_duration = re.compile( '.*Duration: ([0-9:]+)', re.MULTILINE )\n\ndef min_sec_to_seconds( ms ):\n  \"Convert a minutes:seconds string representation to the appropriate time in seconds.\"\n  a = ms.split(':')\n  assert len( a ) in [1,2]\n  if 1 == len(a):\n    s = float(a[0])\n  else:\n    s = float(a[0]) * 60 + float(a[1])\n  return s\n\ndef seconds_to_min_sec( secs ):\n  \"Return a minutes:seconds string representation of the given number of seconds.\"\n  mins = int(secs) / 60\n  secs = int(secs - (mins * 60))\n  return \"%d:%02d\" % (mins, secs)\n\ndef retrieve_length( playlist_filename ):\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  print playlist_filename + ' duration:'\n\n  if not os.path.exists( playlist_filename ):\n    print \"Error: specified playlist '%s' does not exist.\\n\" % playlist_filename\n    raise SystemExit(1)\n\n  f = open( playlist_filename )\n  lines = f.readlines()\n  f.close()\n\n  total_count = 0\n  total_mutagen = 0.0\n  total_ffmpeg = 0.0\n\n  print '%8s%8s%8s  %s' % ('mutagen', 'm:s', 'ffmpeg', 'track')\n\n  for line in lines:\n    path = line.strip()\n\n    if not path or path[0] == '#':\n      continue\n\n    if not os.path.exists( path ):\n      print \"Error: specified music file '%s' does not exist.\\n\" % path\n      raise SystemExit(2)\n\n    if( path.endswith( 'mp3' ) ):\n      audio = mutagen.mp3.MP3( path )\n    else:\n      assert path.endswith( 'flac' )\n      audio = mutagen.flac.FLAC( path )\n\n    #print audio.info.length, audio.info.bitrate, path\n    seconds = audio.info.length\n\n    ffmpeg = subprocess.check_output(\n      'ffmpeg -i \"%s\"; exit 0' % path,\n      shell = True,\n      stderr = subprocess.STDOUT )\n\n    #&gt;&gt;&gt; output = subprocess.check_output(\n    #...   'echo to stdout; echo to stderr 1&gt;&amp;2; exit 0', shell=True)\n    #to stderr\n    #&gt;&gt;&gt; print output\n    #to stdout\n\n    #print ffmpeg\n    #exit( 1 )\n\n    #lines = ffmpeg.split( '\\n' )\n\n    #ffmpeg -report -i path 2&gt;&amp;1 | awk '/Duration/{print $2}'\n\n    match = _find_duration.search( ffmpeg )\n    if match: ffmpeg = match.group( 1 )\n    else: ffmpeg = '--'\n\n    ffmpeg = ffmpeg.lstrip('0:')\n    ffmpeg = min_sec_to_seconds( ffmpeg )\n\n    print '%8.1f%8s%8s  %s' % (seconds, seconds_to_min_sec(seconds), seconds_to_min_sec(ffmpeg), path )\n\n    total_count += 1\n    total_mutagen += seconds\n    total_ffmpeg += ffmpeg\n\n  s = '-' * 6\n  print '%8s%8s%8s  %s' % (s, s, s, s )\n  print '%8.1f%8s%8s  total for %s tracks' % (total_mutagen, seconds_to_min_sec(total_mutagen), seconds_to_min_sec(total_ffmpeg), total_count )\n\ndef main():\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  for pattern in sys.argv[1:]:\n    filelist = glob.glob( pattern )\n    for filename in filelist:\n      retrieve_length( filename )\n\nif __name__ == '__main__':\n  main()\n</pre>\n<p>Here is the output generated by running it on a playlist containing both MP3 and FLAC files:</p>\n<pre>\n/j/audio/wave/ $ mp3duration.py LerchenWave-2013-05b.m3u\nLerchenWave-2013-05b.m3u duration:\n mutagen     m:s  ffmpeg  track\n   304.2    5:04    5:04  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n   314.9    5:14    5:14  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n   244.0    4:04    4:04  /m/Marla Glen/Humanology/13 Fever.flac\n   315.7    5:15    5:18  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n   599.5    9:59    4:21  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n   119.4    1:59    1:59  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n   344.3    5:44    5:44  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n   255.5    4:15    4:15  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n    56.1    0:56    0:56  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n   187.5    3:07    3:07  /m/Jazzbit/Unknown/00 Swingin man.mp3\n   112.0    1:51    1:52  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n   258.1    4:18    4:18  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n   191.8    3:11    3:11  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n   323.9    5:23    5:23  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  1036.4   17:16    7:31  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n    60.1    1:00    1:00  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n   392.3    6:32    6:32  /m/Erik Truffaz/Mantis/03 Saisir.flac\n  ------  ------  ------  ------\n  5115.7   85:15   69:49  total for 17 tracks\n</pre>\n<p>That about covers my current digital music status.</p>\n<p>I hope you can find some useful snippets in here.</p>\n<p>Happy Sunday!</p>\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0961_songbird_to_m3u",
    "header_text": "CBR versus VBR",
    "local_header_href": "#cbr-versus-vbr",
    "chunk_text": "<h4>CBR versus VBR</h4><p>As far as I can tell, quite a number of MP3 files use constant bitrate encoding, CBR.</p><p>Many MP3 files are encoded using\n\n<a href=\"http://en.wikipedia.org/wiki/LAME\">LAME</a>.\n\n<p>Its documentation states that CBR is discouraged, and variable bitrate,\n\n<a href=\"http://lame.sourceforge.net/vbr.php\">\nVBR</a>, should be used instead.</p>\n<p>I tried directly using lame for music conversion, but it does not preserve the metadata tags, so I returned to ffmpeg instead anyway.</p>\n<p>Still, reading the lame documentation helps understand which of the multitude of ffmpeg tags to use to control the conversion quality, and how.</p>\n<!--\n<a name=\"4\"></a>\n\n<h4>Converting WAV to MP3</h4>\n\n<p>In the past, I always ripped CDs straight to MP3.</p>\n\n<p>Based on these revelations, I ripped a couple of CDs to\n\n<a href=\"\">\nWAV</a> instead,\n\nwhich is also a lossless format, and uncompressed as well, unlike FLAC, representing a direct copy of the original CD content.\n\n<p>This enables very direct serious comparison of my own personal perception of the WAV and resulting lossy and compressed MP3 variants.</p>\n-->\n<a name=\"4\"></a>\n<h4>Insanely High MP3 Quality is Insufficient</h4>\n<p>Armed with these experiences, I tried converting from FLAC to MP3 using the lame -V 0 quality setting, which is termed 'insanely high quality' in the lame documentation.</p>\n<p>I still hear a deterioration of clarity and brilliance, though.</p>\n<p>This led me to look for further possibilities to force lame to globally maintain a specified minimum rate.</p>\n<p>Happily, such a setting does exist using the -b option, and using it to request a minimum bitrate of 256 kbps finally succeeds in producing an output that I am unable to distinguish from the original.</p>\n<a name=\"5\"></a>\n<h4>Converting M4A to MP3</h4>\n<p>Later, I noticed a deterioration converting certain M4A files to MP3.</p>\n<!--\n<p>Here is a suggestion for a\n\n<a href=\"\">\nnaive script</a> to\n\nachieve this:</p>\n\n<pre>\nmkdir -p mp3s\n\nSAVEIFS=$IFS\nIFS=$(echo -en \"\\n\\b\")\n\nfor i in `find . -type f -iname \"*.m4[ab]\" -print`; do\necho $i\nNAME=`echo $i | sed -e 's/\\.\\///' -e 's/\\.m4b//g' `\necho \"doing '$NAME'\"\nfaad --stdio $i | lame --preset standard - \"mp3s/${NAME}.mp3\"\ndone\n\nIFS=$SAVEIFS\n</pre>\n\n<p>The results were totally disappointing.</p>\n\n<p>use\n\n<a href=\"\">\nfaad</a>,\n\nthe free audio ... decoder to generate a pure unencoded and uncompressed WAV file representing the track contents, and then apply lame to generate the MP3 from that, with all the previous encoding remnants removed, unencumbered by any prior history:\n\n<p>One can use mediainfo to examine the bitrate of the orginal data:</p>\n\n\nfaad and lame with variable bitrate, maximum quality, and specify minimum encoding bitrate:</p>\n\n<pre>\n  faad -o X.wav X.m4a\n  lame -b 256 -V0 X.wav X.mp3\n</pre>\n\n<p>Actually, here is the current version of my m4a2mp3 script:</p>\n\n<pre>\n#!/bin/bash\n\n# save and change IFS to allow spaces in filenames\nOLDIFS=$IFS\nIFS=$'\\n'\n\nfor f in *.m4a ; do faad -o - \"$f\" | lame -h -b 192 - \"${f%m4a}mp3\" ; done\n\n# restore it\nIFS=$OLDIFS\n</pre>\n-->\n<p>I still have no perfect solution for this.\n\n<p>Some suggestions for LAME encoding arguments that I tried include:</p>\n<pre>\n  -V9 --vbr-new -q0 -mj -b32 -F --lowpass 19.7\n    --nspsytune --cwlimit 10.7 --athaa-sensitivity 1\n\n  -V2 --vbr-new -q0 --lowpass 19.7 -b96\n\n  -V2 --vbr-new -q0 --lowpass 19.7 --cwlimit 10.7\n    --scale 0.99 -b96\n</pre>\n<p>My current solution includes comparing the original M4A file size with the resulting MP3 size, and looking at the bit rate and mode using\n\n<a href=\"http://mediainfo.sourceforge.net\">mediainfo</a>.</p>\n<!--\n<p>Pretty heavy stuff.</p>\n\n<p>Another hint, for mac:\n\n\"I have ripped over 1,000 cd's to Apple Lossless (ALAC) which are fine on my 160GB iPod.\n\nYou can use XLD to convert ALAC to FLAC if need be or a lossy form of AAC or MP3. As the previous poster said, you can convert between lossless formats with no issues.\n\nFor auto use, I load 320 or 256 kbps AAC on my iPod and plug into car.\"\n\n</p>\n-->\n<p>Here is the <code>m4a2mp3</code> script that I am currently using, and often re-adapting:</p>\n<pre class=\"prettyprint\">\n#!/bin/bash\n\n# save and change IFS to allow spaces in filenames\nOLDIFS=$IFS\nIFS=$'\\n'\n\n#for f in *.m4a ; do ffmpeg -i \"$f\" \"$f\".mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -q:a 0 $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -b:a 320k $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -ab 300 $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -q 0 $(basename -s .m4a \"$f\").mp3 ; done\n\nfor f in *.m4a ; do ffmpeg -i \"$f\" -q 2 $(basename -s .m4a \"$f\").mp3 ; done\n\n# this does not preserve the tags:\n#for f in *.m4a ; do faad -o - \"$f\" | lame -V0 -b 256 - \"${f%m4a}mp3\" ; done\n\n# restore IFS\nIFS=$OLDIFS\n</pre>\n<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>\n<p>In the last few runs, I have simply changed the '-q 2' argument up or down a bit so that the resulting MP3 quality matches well with the original M4A.</p>\n<a name=\"6\"></a>\n<h4>Exporting a Songbird Playlist to M3U</h4>\n<p>I presented my Songbird\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#3\">\nM3U playlist extractor</a> when\n\nI was still supporting only MP3 file format.\nI enhanced it to support FLAC as well, and now present the updated version.\n\n<p>I sometime use\n\n<a href=\"http://www.virtualdj.com\">\nVirtualDJ</a> to play music to dance to, since it provides the crossfade functionality lacking in Songbird.</p>\n<p>I can feed it with an M3U playlist.</p>\n<p>But...</p>\n<p>The biggest gripe I have about Songbird is that it will not export its playlists to any sensible file format at all, in spite of being able to import M3U.</p>\n<p>I searched for workarounds and saw many mentions of plugins for achieving this, but none of them worked for me.</p>\n<p>There appears to be a lot of confusion among Songbird and its plugins regarding version compatibility.</p>\n<p>I found a pretty easy workaround of my own, though, which I have been using successfully for some time now.</p>\n<p>I can simply select all songs in a Songbird playlist and hit Cmd-C to copy them to the pasteboard.\n\n<!--\n, it will place a text string containing a linefeed delimited list of records in it, each record containing a comma delimited fields.</p>\n\n<p>Each record provides the information about one track, specifying </p>\n-->\n<p>If you select a single track in Songbird and copy and paste it to an editor, you will see that it places a comma delimited string containing the artist, album and track name on the pasteboard.\nSelecting and copying several tracks generates a linefeed-delimited list of these records, i.e. each track information on a separate line.</p>\n<p>This information can be used to generate an M3U playlist file, provided the actual file path structure exactly matches the artist, album and track information read from the MP3 or FLAC music file tags.</p>\n<!--\n<p>I mentioned the confusion I had regarding the use of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#1\">\nartist versus album artist tags</a>.</p>\n\n<p>Well, the makers of Songbird seem to have had an issue with this as well, since they export the album artist instead of the artist, as I would have expected.</p>\n\n<p>As a result of this confusion, I have now normalised my music library to have the same information in both of these, and ensure that the music file path also matches this.</p>\n-->\n<p>Once that is all set up, I can use the following Python script <code>songbird_to_m3u.py</code> to convert the information copied and pasted from Songbird to an M3U playlist referencing the files in my music library, which I can then import into VirtualDJ or any other player:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/env python\n#\n# songbird_to_m3u.py - convert the file tags exported\n#                      by songbird to m3u playlist\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# Artist, Album, Title --&gt;\n# /m/Artist/Album/Track*Title.flac\n# /m/Artist/Album/Track*Title.mp3\n#\n# cat songbird_export.txt | songbird_to_m3u.py &gt; songbird_export.m3u\n#\nimport glob, os, sys\n\nnOk = 0\nnFailed = 0\n\nwhile True:\n  try: line = raw_input()\n  except: break\n\n  #print '&gt;', line\n\n  a = line.strip().split( ', ' )\n\n  if 3 != len(a):\n\n    sys.stderr.write( line + ' - not 3 elements\\n' )\n    nFailed += 1\n    continue\n\n  ok = False\n  p = '/m/' + a[0] + '/' + a[1] + '/*' + a[2]\n  a1 = glob.glob( p + '.flac' )\n  if 1 == len(a1):\n    print a1[0]\n    ok = True\n  else:\n    a2 = glob.glob( p + '.mp3' )\n    if 1 == len(a2):\n      print a2[0]\n      ok = True\n\n  if ok:\n    nOk += 1\n  else:\n    sys.stderr.write(\n      '\\n%s\\n%s\\nglob returned %d (flac) and %d (mp3)\\n\\n'\n      % (line, p, len(a1), len(a2)) )\n    nFailed += 1\n\nsys.stderr.write(\n  '%s files passed, %s failed.\\n'\n  % (nOk, nFailed) )\n</pre>\n<p>Here is the content of the Mac pasteboard after copying a playlist in Songbird:</p>\n<pre>\n  Gotan Project, La Revancha Del Tango, Chunga's Revenge\n  Outback, Dance The Devil Away, Two In The Bush\n  Marla Glen, Humanology, Fever\n  Brent Lewis, Thunder Down Under, Outback Attack\n  The Chemical Brothers, Hanna, Escape 700\n  Shakti, Natural Elements, Come On Baby Dance With Me\n  Gabrielle Roth, Tribe, Tsunami 3 - chaos\n  Talvin Singh, Oriental Club Disk 2, OK\n  Martin O, Der mit der Stimme tanzt, Japaner\n  Jazzbit, Unknown, Swingin man\n  Yma Sumac, Ultra Lounge - Leopard Skin Fuzzy Sampler, Taki Rari\n  Folco Orselli, Generi di Conforto, La ballata di Piazzale Maciachini\n  Beatles, White Album CD 2, Good Night\n  Natalie Dessay, Vocalises, Vocalise\n  Büdi Siebert, Namaste, Lotus Call 1 Varja Guru Mantra\n  Jeremy Tammik, Meditation, Stillness One Minute Silence\n  Erik Truffaz, Mantis, Saisir\n</pre>\n<p>Running the <code>songbird_to_m3u.py</code> script on that produces the following output, representing a valid M3U playlist on my file system:</p>\n<pre>\n  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n  /m/Marla Glen/Humanology/13 Fever.flac\n  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n  /m/Jazzbit/Unknown/00 Swingin man.mp3\n  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n  /m/Erik Truffaz/Mantis/03 Saisir.flac\n</pre>\n<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>\n<a name=\"7\"></a>\n<h4>MP3 Track and M3U Playlist Duration</h4>\n<p>Once I have an M3U playlist, I would also like to determine the total duration of all the tracks.\n\n<p>I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#4\">\nmp3duration.py</a> Python\n\nscript achieving that, which I now enhanced to handle FLAC files as well.\n\n<p>Here is the updated version:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/python\n#\n# mp3duration.py - retrieve the length of the tracks in\n#                  the playlist and calculate the total\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# /j/sh/mp3duration.py playlist.m3u\n#\n# http://code.google.com/p/mutagen/wiki/Tutorial\n# http://www.doughellmann.com/PyMOTW/subprocess\n#\nimport glob, os, re, subprocess, sys\nimport mutagen.mp3, mutagen.flac\n\n_find_duration = re.compile( '.*Duration: ([0-9:]+)', re.MULTILINE )\n\ndef min_sec_to_seconds( ms ):\n  \"Convert a minutes:seconds string representation to the appropriate time in seconds.\"\n  a = ms.split(':')\n  assert len( a ) in [1,2]\n  if 1 == len(a):\n    s = float(a[0])\n  else:\n    s = float(a[0]) * 60 + float(a[1])\n  return s\n\ndef seconds_to_min_sec( secs ):\n  \"Return a minutes:seconds string representation of the given number of seconds.\"\n  mins = int(secs) / 60\n  secs = int(secs - (mins * 60))\n  return \"%d:%02d\" % (mins, secs)\n\ndef retrieve_length( playlist_filename ):\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  print playlist_filename + ' duration:'\n\n  if not os.path.exists( playlist_filename ):\n    print \"Error: specified playlist '%s' does not exist.\\n\" % playlist_filename\n    raise SystemExit(1)\n\n  f = open( playlist_filename )\n  lines = f.readlines()\n  f.close()\n\n  total_count = 0\n  total_mutagen = 0.0\n  total_ffmpeg = 0.0\n\n  print '%8s%8s%8s  %s' % ('mutagen', 'm:s', 'ffmpeg', 'track')\n\n  for line in lines:\n    path = line.strip()\n\n    if not path or path[0] == '#':\n      continue\n\n    if not os.path.exists( path ):\n      print \"Error: specified music file '%s' does not exist.\\n\" % path\n      raise SystemExit(2)\n\n    if( path.endswith( 'mp3' ) ):\n      audio = mutagen.mp3.MP3( path )\n    else:\n      assert path.endswith( 'flac' )\n      audio = mutagen.flac.FLAC( path )\n\n    #print audio.info.length, audio.info.bitrate, path\n    seconds = audio.info.length\n\n    ffmpeg = subprocess.check_output(\n      'ffmpeg -i \"%s\"; exit 0' % path,\n      shell = True,\n      stderr = subprocess.STDOUT )\n\n    #&gt;&gt;&gt; output = subprocess.check_output(\n    #...   'echo to stdout; echo to stderr 1&gt;&amp;2; exit 0', shell=True)\n    #to stderr\n    #&gt;&gt;&gt; print output\n    #to stdout\n\n    #print ffmpeg\n    #exit( 1 )\n\n    #lines = ffmpeg.split( '\\n' )\n\n    #ffmpeg -report -i path 2&gt;&amp;1 | awk '/Duration/{print $2}'\n\n    match = _find_duration.search( ffmpeg )\n    if match: ffmpeg = match.group( 1 )\n    else: ffmpeg = '--'\n\n    ffmpeg = ffmpeg.lstrip('0:')\n    ffmpeg = min_sec_to_seconds( ffmpeg )\n\n    print '%8.1f%8s%8s  %s' % (seconds, seconds_to_min_sec(seconds), seconds_to_min_sec(ffmpeg), path )\n\n    total_count += 1\n    total_mutagen += seconds\n    total_ffmpeg += ffmpeg\n\n  s = '-' * 6\n  print '%8s%8s%8s  %s' % (s, s, s, s )\n  print '%8.1f%8s%8s  total for %s tracks' % (total_mutagen, seconds_to_min_sec(total_mutagen), seconds_to_min_sec(total_ffmpeg), total_count )\n\ndef main():\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  for pattern in sys.argv[1:]:\n    filelist = glob.glob( pattern )\n    for filename in filelist:\n      retrieve_length( filename )\n\nif __name__ == '__main__':\n  main()\n</pre>\n<p>Here is the output generated by running it on a playlist containing both MP3 and FLAC files:</p>\n<pre>\n/j/audio/wave/ $ mp3duration.py LerchenWave-2013-05b.m3u\nLerchenWave-2013-05b.m3u duration:\n mutagen     m:s  ffmpeg  track\n   304.2    5:04    5:04  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n   314.9    5:14    5:14  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n   244.0    4:04    4:04  /m/Marla Glen/Humanology/13 Fever.flac\n   315.7    5:15    5:18  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n   599.5    9:59    4:21  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n   119.4    1:59    1:59  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n   344.3    5:44    5:44  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n   255.5    4:15    4:15  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n    56.1    0:56    0:56  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n   187.5    3:07    3:07  /m/Jazzbit/Unknown/00 Swingin man.mp3\n   112.0    1:51    1:52  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n   258.1    4:18    4:18  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n   191.8    3:11    3:11  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n   323.9    5:23    5:23  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  1036.4   17:16    7:31  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n    60.1    1:00    1:00  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n   392.3    6:32    6:32  /m/Erik Truffaz/Mantis/03 Saisir.flac\n  ------  ------  ------  ------\n  5115.7   85:15   69:49  total for 17 tracks\n</pre>\n<p>That about covers my current digital music status.</p>\n<p>I hope you can find some useful snippets in here.</p>\n<p>Happy Sunday!</p>\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0961_songbird_to_m3u",
    "header_text": "Insanely High MP3 Quality is Insufficient",
    "local_header_href": "#insanely-high-mp3-quality-is-insufficient",
    "chunk_text": "<h4>Insanely High MP3 Quality is Insufficient</h4><p>Armed with these experiences, I tried converting from FLAC to MP3 using the lame -V 0 quality setting, which is termed 'insanely high quality' in the lame documentation.</p><p>I still hear a deterioration of clarity and brilliance, though.</p><p>This led me to look for further possibilities to force lame to globally maintain a specified minimum rate.</p><p>Happily, such a setting does exist using the -b option, and using it to request a minimum bitrate of 256 kbps finally succeeds in producing an output that I am unable to distinguish from the original.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "0961_songbird_to_m3u",
    "header_text": "Converting M4A to MP3",
    "local_header_href": "#converting-m4a-to-mp3",
    "chunk_text": "<h4>Converting M4A to MP3</h4><p>Later, I noticed a deterioration converting certain M4A files to MP3.</p><p>I still have no perfect solution for this.\n\n<p>Some suggestions for LAME encoding arguments that I tried include:</p>\n<pre>\n  -V9 --vbr-new -q0 -mj -b32 -F --lowpass 19.7\n    --nspsytune --cwlimit 10.7 --athaa-sensitivity 1\n\n  -V2 --vbr-new -q0 --lowpass 19.7 -b96\n\n  -V2 --vbr-new -q0 --lowpass 19.7 --cwlimit 10.7\n    --scale 0.99 -b96\n</pre>\n<p>My current solution includes comparing the original M4A file size with the resulting MP3 size, and looking at the bit rate and mode using\n\n<a href=\"http://mediainfo.sourceforge.net\">mediainfo</a>.</p>\n<!--\n<p>Pretty heavy stuff.</p>\n\n<p>Another hint, for mac:\n\n\"I have ripped over 1,000 cd's to Apple Lossless (ALAC) which are fine on my 160GB iPod.\n\nYou can use XLD to convert ALAC to FLAC if need be or a lossy form of AAC or MP3. As the previous poster said, you can convert between lossless formats with no issues.\n\nFor auto use, I load 320 or 256 kbps AAC on my iPod and plug into car.\"\n\n</p>\n-->\n<p>Here is the <code>m4a2mp3</code> script that I am currently using, and often re-adapting:</p>\n<pre class=\"prettyprint\">\n#!/bin/bash\n\n# save and change IFS to allow spaces in filenames\nOLDIFS=$IFS\nIFS=$'\\n'\n\n#for f in *.m4a ; do ffmpeg -i \"$f\" \"$f\".mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -q:a 0 $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -b:a 320k $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -ab 300 $(basename -s .m4a \"$f\").mp3 ; done\n#for f in *.m4a ; do ffmpeg -i \"$f\" -q 0 $(basename -s .m4a \"$f\").mp3 ; done\n\nfor f in *.m4a ; do ffmpeg -i \"$f\" -q 2 $(basename -s .m4a \"$f\").mp3 ; done\n\n# this does not preserve the tags:\n#for f in *.m4a ; do faad -o - \"$f\" | lame -V0 -b 256 - \"${f%m4a}mp3\" ; done\n\n# restore IFS\nIFS=$OLDIFS\n</pre>\n<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>\n<p>In the last few runs, I have simply changed the '-q 2' argument up or down a bit so that the resulting MP3 quality matches well with the original M4A.</p>\n<a name=\"6\"></a>\n<h4>Exporting a Songbird Playlist to M3U</h4>\n<p>I presented my Songbird\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#3\">\nM3U playlist extractor</a> when\n\nI was still supporting only MP3 file format.\nI enhanced it to support FLAC as well, and now present the updated version.\n\n<p>I sometime use\n\n<a href=\"http://www.virtualdj.com\">\nVirtualDJ</a> to play music to dance to, since it provides the crossfade functionality lacking in Songbird.</p>\n<p>I can feed it with an M3U playlist.</p>\n<p>But...</p>\n<p>The biggest gripe I have about Songbird is that it will not export its playlists to any sensible file format at all, in spite of being able to import M3U.</p>\n<p>I searched for workarounds and saw many mentions of plugins for achieving this, but none of them worked for me.</p>\n<p>There appears to be a lot of confusion among Songbird and its plugins regarding version compatibility.</p>\n<p>I found a pretty easy workaround of my own, though, which I have been using successfully for some time now.</p>\n<p>I can simply select all songs in a Songbird playlist and hit Cmd-C to copy them to the pasteboard.\n\n<!--\n, it will place a text string containing a linefeed delimited list of records in it, each record containing a comma delimited fields.</p>\n\n<p>Each record provides the information about one track, specifying </p>\n-->\n<p>If you select a single track in Songbird and copy and paste it to an editor, you will see that it places a comma delimited string containing the artist, album and track name on the pasteboard.\nSelecting and copying several tracks generates a linefeed-delimited list of these records, i.e. each track information on a separate line.</p>\n<p>This information can be used to generate an M3U playlist file, provided the actual file path structure exactly matches the artist, album and track information read from the MP3 or FLAC music file tags.</p>\n<!--\n<p>I mentioned the confusion I had regarding the use of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#1\">\nartist versus album artist tags</a>.</p>\n\n<p>Well, the makers of Songbird seem to have had an issue with this as well, since they export the album artist instead of the artist, as I would have expected.</p>\n\n<p>As a result of this confusion, I have now normalised my music library to have the same information in both of these, and ensure that the music file path also matches this.</p>\n-->\n<p>Once that is all set up, I can use the following Python script <code>songbird_to_m3u.py</code> to convert the information copied and pasted from Songbird to an M3U playlist referencing the files in my music library, which I can then import into VirtualDJ or any other player:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/env python\n#\n# songbird_to_m3u.py - convert the file tags exported\n#                      by songbird to m3u playlist\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# Artist, Album, Title --&gt;\n# /m/Artist/Album/Track*Title.flac\n# /m/Artist/Album/Track*Title.mp3\n#\n# cat songbird_export.txt | songbird_to_m3u.py &gt; songbird_export.m3u\n#\nimport glob, os, sys\n\nnOk = 0\nnFailed = 0\n\nwhile True:\n  try: line = raw_input()\n  except: break\n\n  #print '&gt;', line\n\n  a = line.strip().split( ', ' )\n\n  if 3 != len(a):\n\n    sys.stderr.write( line + ' - not 3 elements\\n' )\n    nFailed += 1\n    continue\n\n  ok = False\n  p = '/m/' + a[0] + '/' + a[1] + '/*' + a[2]\n  a1 = glob.glob( p + '.flac' )\n  if 1 == len(a1):\n    print a1[0]\n    ok = True\n  else:\n    a2 = glob.glob( p + '.mp3' )\n    if 1 == len(a2):\n      print a2[0]\n      ok = True\n\n  if ok:\n    nOk += 1\n  else:\n    sys.stderr.write(\n      '\\n%s\\n%s\\nglob returned %d (flac) and %d (mp3)\\n\\n'\n      % (line, p, len(a1), len(a2)) )\n    nFailed += 1\n\nsys.stderr.write(\n  '%s files passed, %s failed.\\n'\n  % (nOk, nFailed) )\n</pre>\n<p>Here is the content of the Mac pasteboard after copying a playlist in Songbird:</p>\n<pre>\n  Gotan Project, La Revancha Del Tango, Chunga's Revenge\n  Outback, Dance The Devil Away, Two In The Bush\n  Marla Glen, Humanology, Fever\n  Brent Lewis, Thunder Down Under, Outback Attack\n  The Chemical Brothers, Hanna, Escape 700\n  Shakti, Natural Elements, Come On Baby Dance With Me\n  Gabrielle Roth, Tribe, Tsunami 3 - chaos\n  Talvin Singh, Oriental Club Disk 2, OK\n  Martin O, Der mit der Stimme tanzt, Japaner\n  Jazzbit, Unknown, Swingin man\n  Yma Sumac, Ultra Lounge - Leopard Skin Fuzzy Sampler, Taki Rari\n  Folco Orselli, Generi di Conforto, La ballata di Piazzale Maciachini\n  Beatles, White Album CD 2, Good Night\n  Natalie Dessay, Vocalises, Vocalise\n  Büdi Siebert, Namaste, Lotus Call 1 Varja Guru Mantra\n  Jeremy Tammik, Meditation, Stillness One Minute Silence\n  Erik Truffaz, Mantis, Saisir\n</pre>\n<p>Running the <code>songbird_to_m3u.py</code> script on that produces the following output, representing a valid M3U playlist on my file system:</p>\n<pre>\n  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n  /m/Marla Glen/Humanology/13 Fever.flac\n  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n  /m/Jazzbit/Unknown/00 Swingin man.mp3\n  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n  /m/Erik Truffaz/Mantis/03 Saisir.flac\n</pre>\n<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>\n<a name=\"7\"></a>\n<h4>MP3 Track and M3U Playlist Duration</h4>\n<p>Once I have an M3U playlist, I would also like to determine the total duration of all the tracks.\n\n<p>I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#4\">\nmp3duration.py</a> Python\n\nscript achieving that, which I now enhanced to handle FLAC files as well.\n\n<p>Here is the updated version:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/python\n#\n# mp3duration.py - retrieve the length of the tracks in\n#                  the playlist and calculate the total\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# /j/sh/mp3duration.py playlist.m3u\n#\n# http://code.google.com/p/mutagen/wiki/Tutorial\n# http://www.doughellmann.com/PyMOTW/subprocess\n#\nimport glob, os, re, subprocess, sys\nimport mutagen.mp3, mutagen.flac\n\n_find_duration = re.compile( '.*Duration: ([0-9:]+)', re.MULTILINE )\n\ndef min_sec_to_seconds( ms ):\n  \"Convert a minutes:seconds string representation to the appropriate time in seconds.\"\n  a = ms.split(':')\n  assert len( a ) in [1,2]\n  if 1 == len(a):\n    s = float(a[0])\n  else:\n    s = float(a[0]) * 60 + float(a[1])\n  return s\n\ndef seconds_to_min_sec( secs ):\n  \"Return a minutes:seconds string representation of the given number of seconds.\"\n  mins = int(secs) / 60\n  secs = int(secs - (mins * 60))\n  return \"%d:%02d\" % (mins, secs)\n\ndef retrieve_length( playlist_filename ):\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  print playlist_filename + ' duration:'\n\n  if not os.path.exists( playlist_filename ):\n    print \"Error: specified playlist '%s' does not exist.\\n\" % playlist_filename\n    raise SystemExit(1)\n\n  f = open( playlist_filename )\n  lines = f.readlines()\n  f.close()\n\n  total_count = 0\n  total_mutagen = 0.0\n  total_ffmpeg = 0.0\n\n  print '%8s%8s%8s  %s' % ('mutagen', 'm:s', 'ffmpeg', 'track')\n\n  for line in lines:\n    path = line.strip()\n\n    if not path or path[0] == '#':\n      continue\n\n    if not os.path.exists( path ):\n      print \"Error: specified music file '%s' does not exist.\\n\" % path\n      raise SystemExit(2)\n\n    if( path.endswith( 'mp3' ) ):\n      audio = mutagen.mp3.MP3( path )\n    else:\n      assert path.endswith( 'flac' )\n      audio = mutagen.flac.FLAC( path )\n\n    #print audio.info.length, audio.info.bitrate, path\n    seconds = audio.info.length\n\n    ffmpeg = subprocess.check_output(\n      'ffmpeg -i \"%s\"; exit 0' % path,\n      shell = True,\n      stderr = subprocess.STDOUT )\n\n    #&gt;&gt;&gt; output = subprocess.check_output(\n    #...   'echo to stdout; echo to stderr 1&gt;&amp;2; exit 0', shell=True)\n    #to stderr\n    #&gt;&gt;&gt; print output\n    #to stdout\n\n    #print ffmpeg\n    #exit( 1 )\n\n    #lines = ffmpeg.split( '\\n' )\n\n    #ffmpeg -report -i path 2&gt;&amp;1 | awk '/Duration/{print $2}'\n\n    match = _find_duration.search( ffmpeg )\n    if match: ffmpeg = match.group( 1 )\n    else: ffmpeg = '--'\n\n    ffmpeg = ffmpeg.lstrip('0:')\n    ffmpeg = min_sec_to_seconds( ffmpeg )\n\n    print '%8.1f%8s%8s  %s' % (seconds, seconds_to_min_sec(seconds), seconds_to_min_sec(ffmpeg), path )\n\n    total_count += 1\n    total_mutagen += seconds\n    total_ffmpeg += ffmpeg\n\n  s = '-' * 6\n  print '%8s%8s%8s  %s' % (s, s, s, s )\n  print '%8.1f%8s%8s  total for %s tracks' % (total_mutagen, seconds_to_min_sec(total_mutagen), seconds_to_min_sec(total_ffmpeg), total_count )\n\ndef main():\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  for pattern in sys.argv[1:]:\n    filelist = glob.glob( pattern )\n    for filename in filelist:\n      retrieve_length( filename )\n\nif __name__ == '__main__':\n  main()\n</pre>\n<p>Here is the output generated by running it on a playlist containing both MP3 and FLAC files:</p>\n<pre>\n/j/audio/wave/ $ mp3duration.py LerchenWave-2013-05b.m3u\nLerchenWave-2013-05b.m3u duration:\n mutagen     m:s  ffmpeg  track\n   304.2    5:04    5:04  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n   314.9    5:14    5:14  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n   244.0    4:04    4:04  /m/Marla Glen/Humanology/13 Fever.flac\n   315.7    5:15    5:18  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n   599.5    9:59    4:21  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n   119.4    1:59    1:59  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n   344.3    5:44    5:44  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n   255.5    4:15    4:15  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n    56.1    0:56    0:56  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n   187.5    3:07    3:07  /m/Jazzbit/Unknown/00 Swingin man.mp3\n   112.0    1:51    1:52  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n   258.1    4:18    4:18  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n   191.8    3:11    3:11  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n   323.9    5:23    5:23  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  1036.4   17:16    7:31  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n    60.1    1:00    1:00  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n   392.3    6:32    6:32  /m/Erik Truffaz/Mantis/03 Saisir.flac\n  ------  ------  ------  ------\n  5115.7   85:15   69:49  total for 17 tracks\n</pre>\n<p>That about covers my current digital music status.</p>\n<p>I hope you can find some useful snippets in here.</p>\n<p>Happy Sunday!</p>\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0961_songbird_to_m3u",
    "header_text": "Exporting a Songbird Playlist to M3U",
    "local_header_href": "#exporting-a-songbird-playlist-to-m3u",
    "chunk_text": "<h4>Exporting a Songbird Playlist to M3U</h4><p>I presented my Songbird\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#3\">\nM3U playlist extractor</a> when\n\nI was still supporting only MP3 file format.\nI enhanced it to support FLAC as well, and now present the updated version.\n\n<p>I sometime use\n\n<a href=\"http://www.virtualdj.com\">\nVirtualDJ</a> to play music to dance to, since it provides the crossfade functionality lacking in Songbird.</p>\n<p>I can feed it with an M3U playlist.</p>\n<p>But...</p>\n<p>The biggest gripe I have about Songbird is that it will not export its playlists to any sensible file format at all, in spite of being able to import M3U.</p>\n<p>I searched for workarounds and saw many mentions of plugins for achieving this, but none of them worked for me.</p>\n<p>There appears to be a lot of confusion among Songbird and its plugins regarding version compatibility.</p>\n<p>I found a pretty easy workaround of my own, though, which I have been using successfully for some time now.</p>\n<p>I can simply select all songs in a Songbird playlist and hit Cmd-C to copy them to the pasteboard.\n\n<!--\n, it will place a text string containing a linefeed delimited list of records in it, each record containing a comma delimited fields.</p>\n\n<p>Each record provides the information about one track, specifying </p>\n-->\n<p>If you select a single track in Songbird and copy and paste it to an editor, you will see that it places a comma delimited string containing the artist, album and track name on the pasteboard.\nSelecting and copying several tracks generates a linefeed-delimited list of these records, i.e. each track information on a separate line.</p>\n<p>This information can be used to generate an M3U playlist file, provided the actual file path structure exactly matches the artist, album and track information read from the MP3 or FLAC music file tags.</p>\n<!--\n<p>I mentioned the confusion I had regarding the use of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#1\">\nartist versus album artist tags</a>.</p>\n\n<p>Well, the makers of Songbird seem to have had an issue with this as well, since they export the album artist instead of the artist, as I would have expected.</p>\n\n<p>As a result of this confusion, I have now normalised my music library to have the same information in both of these, and ensure that the music file path also matches this.</p>\n-->\n<p>Once that is all set up, I can use the following Python script <code>songbird_to_m3u.py</code> to convert the information copied and pasted from Songbird to an M3U playlist referencing the files in my music library, which I can then import into VirtualDJ or any other player:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/env python\n#\n# songbird_to_m3u.py - convert the file tags exported\n#                      by songbird to m3u playlist\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# Artist, Album, Title --&gt;\n# /m/Artist/Album/Track*Title.flac\n# /m/Artist/Album/Track*Title.mp3\n#\n# cat songbird_export.txt | songbird_to_m3u.py &gt; songbird_export.m3u\n#\nimport glob, os, sys\n\nnOk = 0\nnFailed = 0\n\nwhile True:\n  try: line = raw_input()\n  except: break\n\n  #print '&gt;', line\n\n  a = line.strip().split( ', ' )\n\n  if 3 != len(a):\n\n    sys.stderr.write( line + ' - not 3 elements\\n' )\n    nFailed += 1\n    continue\n\n  ok = False\n  p = '/m/' + a[0] + '/' + a[1] + '/*' + a[2]\n  a1 = glob.glob( p + '.flac' )\n  if 1 == len(a1):\n    print a1[0]\n    ok = True\n  else:\n    a2 = glob.glob( p + '.mp3' )\n    if 1 == len(a2):\n      print a2[0]\n      ok = True\n\n  if ok:\n    nOk += 1\n  else:\n    sys.stderr.write(\n      '\\n%s\\n%s\\nglob returned %d (flac) and %d (mp3)\\n\\n'\n      % (line, p, len(a1), len(a2)) )\n    nFailed += 1\n\nsys.stderr.write(\n  '%s files passed, %s failed.\\n'\n  % (nOk, nFailed) )\n</pre>\n<p>Here is the content of the Mac pasteboard after copying a playlist in Songbird:</p>\n<pre>\n  Gotan Project, La Revancha Del Tango, Chunga's Revenge\n  Outback, Dance The Devil Away, Two In The Bush\n  Marla Glen, Humanology, Fever\n  Brent Lewis, Thunder Down Under, Outback Attack\n  The Chemical Brothers, Hanna, Escape 700\n  Shakti, Natural Elements, Come On Baby Dance With Me\n  Gabrielle Roth, Tribe, Tsunami 3 - chaos\n  Talvin Singh, Oriental Club Disk 2, OK\n  Martin O, Der mit der Stimme tanzt, Japaner\n  Jazzbit, Unknown, Swingin man\n  Yma Sumac, Ultra Lounge - Leopard Skin Fuzzy Sampler, Taki Rari\n  Folco Orselli, Generi di Conforto, La ballata di Piazzale Maciachini\n  Beatles, White Album CD 2, Good Night\n  Natalie Dessay, Vocalises, Vocalise\n  Büdi Siebert, Namaste, Lotus Call 1 Varja Guru Mantra\n  Jeremy Tammik, Meditation, Stillness One Minute Silence\n  Erik Truffaz, Mantis, Saisir\n</pre>\n<p>Running the <code>songbird_to_m3u.py</code> script on that produces the following output, representing a valid M3U playlist on my file system:</p>\n<pre>\n  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n  /m/Marla Glen/Humanology/13 Fever.flac\n  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n  /m/Jazzbit/Unknown/00 Swingin man.mp3\n  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n  /m/Erik Truffaz/Mantis/03 Saisir.flac\n</pre>\n<p>Copy and paste the above to an editor or view the browser source code to see the truncated lines in full.</p>\n<a name=\"7\"></a>\n<h4>MP3 Track and M3U Playlist Duration</h4>\n<p>Once I have an M3U playlist, I would also like to determine the total duration of all the tracks.\n\n<p>I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#4\">\nmp3duration.py</a> Python\n\nscript achieving that, which I now enhanced to handle FLAC files as well.\n\n<p>Here is the updated version:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/python\n#\n# mp3duration.py - retrieve the length of the tracks in\n#                  the playlist and calculate the total\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# /j/sh/mp3duration.py playlist.m3u\n#\n# http://code.google.com/p/mutagen/wiki/Tutorial\n# http://www.doughellmann.com/PyMOTW/subprocess\n#\nimport glob, os, re, subprocess, sys\nimport mutagen.mp3, mutagen.flac\n\n_find_duration = re.compile( '.*Duration: ([0-9:]+)', re.MULTILINE )\n\ndef min_sec_to_seconds( ms ):\n  \"Convert a minutes:seconds string representation to the appropriate time in seconds.\"\n  a = ms.split(':')\n  assert len( a ) in [1,2]\n  if 1 == len(a):\n    s = float(a[0])\n  else:\n    s = float(a[0]) * 60 + float(a[1])\n  return s\n\ndef seconds_to_min_sec( secs ):\n  \"Return a minutes:seconds string representation of the given number of seconds.\"\n  mins = int(secs) / 60\n  secs = int(secs - (mins * 60))\n  return \"%d:%02d\" % (mins, secs)\n\ndef retrieve_length( playlist_filename ):\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  print playlist_filename + ' duration:'\n\n  if not os.path.exists( playlist_filename ):\n    print \"Error: specified playlist '%s' does not exist.\\n\" % playlist_filename\n    raise SystemExit(1)\n\n  f = open( playlist_filename )\n  lines = f.readlines()\n  f.close()\n\n  total_count = 0\n  total_mutagen = 0.0\n  total_ffmpeg = 0.0\n\n  print '%8s%8s%8s  %s' % ('mutagen', 'm:s', 'ffmpeg', 'track')\n\n  for line in lines:\n    path = line.strip()\n\n    if not path or path[0] == '#':\n      continue\n\n    if not os.path.exists( path ):\n      print \"Error: specified music file '%s' does not exist.\\n\" % path\n      raise SystemExit(2)\n\n    if( path.endswith( 'mp3' ) ):\n      audio = mutagen.mp3.MP3( path )\n    else:\n      assert path.endswith( 'flac' )\n      audio = mutagen.flac.FLAC( path )\n\n    #print audio.info.length, audio.info.bitrate, path\n    seconds = audio.info.length\n\n    ffmpeg = subprocess.check_output(\n      'ffmpeg -i \"%s\"; exit 0' % path,\n      shell = True,\n      stderr = subprocess.STDOUT )\n\n    #&gt;&gt;&gt; output = subprocess.check_output(\n    #...   'echo to stdout; echo to stderr 1&gt;&amp;2; exit 0', shell=True)\n    #to stderr\n    #&gt;&gt;&gt; print output\n    #to stdout\n\n    #print ffmpeg\n    #exit( 1 )\n\n    #lines = ffmpeg.split( '\\n' )\n\n    #ffmpeg -report -i path 2&gt;&amp;1 | awk '/Duration/{print $2}'\n\n    match = _find_duration.search( ffmpeg )\n    if match: ffmpeg = match.group( 1 )\n    else: ffmpeg = '--'\n\n    ffmpeg = ffmpeg.lstrip('0:')\n    ffmpeg = min_sec_to_seconds( ffmpeg )\n\n    print '%8.1f%8s%8s  %s' % (seconds, seconds_to_min_sec(seconds), seconds_to_min_sec(ffmpeg), path )\n\n    total_count += 1\n    total_mutagen += seconds\n    total_ffmpeg += ffmpeg\n\n  s = '-' * 6\n  print '%8s%8s%8s  %s' % (s, s, s, s )\n  print '%8.1f%8s%8s  total for %s tracks' % (total_mutagen, seconds_to_min_sec(total_mutagen), seconds_to_min_sec(total_ffmpeg), total_count )\n\ndef main():\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  for pattern in sys.argv[1:]:\n    filelist = glob.glob( pattern )\n    for filename in filelist:\n      retrieve_length( filename )\n\nif __name__ == '__main__':\n  main()\n</pre>\n<p>Here is the output generated by running it on a playlist containing both MP3 and FLAC files:</p>\n<pre>\n/j/audio/wave/ $ mp3duration.py LerchenWave-2013-05b.m3u\nLerchenWave-2013-05b.m3u duration:\n mutagen     m:s  ffmpeg  track\n   304.2    5:04    5:04  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n   314.9    5:14    5:14  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n   244.0    4:04    4:04  /m/Marla Glen/Humanology/13 Fever.flac\n   315.7    5:15    5:18  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n   599.5    9:59    4:21  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n   119.4    1:59    1:59  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n   344.3    5:44    5:44  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n   255.5    4:15    4:15  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n    56.1    0:56    0:56  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n   187.5    3:07    3:07  /m/Jazzbit/Unknown/00 Swingin man.mp3\n   112.0    1:51    1:52  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n   258.1    4:18    4:18  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n   191.8    3:11    3:11  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n   323.9    5:23    5:23  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  1036.4   17:16    7:31  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n    60.1    1:00    1:00  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n   392.3    6:32    6:32  /m/Erik Truffaz/Mantis/03 Saisir.flac\n  ------  ------  ------  ------\n  5115.7   85:15   69:49  total for 17 tracks\n</pre>\n<p>That about covers my current digital music status.</p>\n<p>I hope you can find some useful snippets in here.</p>\n<p>Happy Sunday!</p>\n</p></p></p></p>"
  },
  {
    "original_filename": "0961_songbird_to_m3u",
    "header_text": "MP3 Track and M3U Playlist Duration",
    "local_header_href": "#mp3-track-and-m3u-playlist-duration",
    "chunk_text": "<h4>MP3 Track and M3U Playlist Duration</h4><p>Once I have an M3U playlist, I would also like to determine the total duration of all the tracks.\n\n<p>I presented my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html#4\">\nmp3duration.py</a> Python\n\nscript achieving that, which I now enhanced to handle FLAC files as well.\n\n<p>Here is the updated version:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/python\n#\n# mp3duration.py - retrieve the length of the tracks in\n#                  the playlist and calculate the total\n#\n# Jeremy Tammik, Autodesk Inc., 2013-05-12\n#\n# /j/sh/mp3duration.py playlist.m3u\n#\n# http://code.google.com/p/mutagen/wiki/Tutorial\n# http://www.doughellmann.com/PyMOTW/subprocess\n#\nimport glob, os, re, subprocess, sys\nimport mutagen.mp3, mutagen.flac\n\n_find_duration = re.compile( '.*Duration: ([0-9:]+)', re.MULTILINE )\n\ndef min_sec_to_seconds( ms ):\n  \"Convert a minutes:seconds string representation to the appropriate time in seconds.\"\n  a = ms.split(':')\n  assert len( a ) in [1,2]\n  if 1 == len(a):\n    s = float(a[0])\n  else:\n    s = float(a[0]) * 60 + float(a[1])\n  return s\n\ndef seconds_to_min_sec( secs ):\n  \"Return a minutes:seconds string representation of the given number of seconds.\"\n  mins = int(secs) / 60\n  secs = int(secs - (mins * 60))\n  return \"%d:%02d\" % (mins, secs)\n\ndef retrieve_length( playlist_filename ):\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  print playlist_filename + ' duration:'\n\n  if not os.path.exists( playlist_filename ):\n    print \"Error: specified playlist '%s' does not exist.\\n\" % playlist_filename\n    raise SystemExit(1)\n\n  f = open( playlist_filename )\n  lines = f.readlines()\n  f.close()\n\n  total_count = 0\n  total_mutagen = 0.0\n  total_ffmpeg = 0.0\n\n  print '%8s%8s%8s  %s' % ('mutagen', 'm:s', 'ffmpeg', 'track')\n\n  for line in lines:\n    path = line.strip()\n\n    if not path or path[0] == '#':\n      continue\n\n    if not os.path.exists( path ):\n      print \"Error: specified music file '%s' does not exist.\\n\" % path\n      raise SystemExit(2)\n\n    if( path.endswith( 'mp3' ) ):\n      audio = mutagen.mp3.MP3( path )\n    else:\n      assert path.endswith( 'flac' )\n      audio = mutagen.flac.FLAC( path )\n\n    #print audio.info.length, audio.info.bitrate, path\n    seconds = audio.info.length\n\n    ffmpeg = subprocess.check_output(\n      'ffmpeg -i \"%s\"; exit 0' % path,\n      shell = True,\n      stderr = subprocess.STDOUT )\n\n    #&gt;&gt;&gt; output = subprocess.check_output(\n    #...   'echo to stdout; echo to stderr 1&gt;&amp;2; exit 0', shell=True)\n    #to stderr\n    #&gt;&gt;&gt; print output\n    #to stdout\n\n    #print ffmpeg\n    #exit( 1 )\n\n    #lines = ffmpeg.split( '\\n' )\n\n    #ffmpeg -report -i path 2&gt;&amp;1 | awk '/Duration/{print $2}'\n\n    match = _find_duration.search( ffmpeg )\n    if match: ffmpeg = match.group( 1 )\n    else: ffmpeg = '--'\n\n    ffmpeg = ffmpeg.lstrip('0:')\n    ffmpeg = min_sec_to_seconds( ffmpeg )\n\n    print '%8.1f%8s%8s  %s' % (seconds, seconds_to_min_sec(seconds), seconds_to_min_sec(ffmpeg), path )\n\n    total_count += 1\n    total_mutagen += seconds\n    total_ffmpeg += ffmpeg\n\n  s = '-' * 6\n  print '%8s%8s%8s  %s' % (s, s, s, s )\n  print '%8.1f%8s%8s  total for %s tracks' % (total_mutagen, seconds_to_min_sec(total_mutagen), seconds_to_min_sec(total_ffmpeg), total_count )\n\ndef main():\n  \"Determine length of tracks listed in the given input files (e.g. playlists).\"\n\n  for pattern in sys.argv[1:]:\n    filelist = glob.glob( pattern )\n    for filename in filelist:\n      retrieve_length( filename )\n\nif __name__ == '__main__':\n  main()\n</pre>\n<p>Here is the output generated by running it on a playlist containing both MP3 and FLAC files:</p>\n<pre>\n/j/audio/wave/ $ mp3duration.py LerchenWave-2013-05b.m3u\nLerchenWave-2013-05b.m3u duration:\n mutagen     m:s  ffmpeg  track\n   304.2    5:04    5:04  /m/Gotan Project/La Revancha Del Tango/03 - Chunga's Revenge.mp3\n   314.9    5:14    5:14  /m/Outback/Dance The Devil Away/03 - Two In The Bush.mp3\n   244.0    4:04    4:04  /m/Marla Glen/Humanology/13 Fever.flac\n   315.7    5:15    5:18  /m/Brent Lewis/Thunder Down Under/01 Outback Attack.mp3\n   599.5    9:59    4:21  /m/The Chemical Brothers/Hanna/02 Escape 700.mp3\n   119.4    1:59    1:59  /m/Shakti/Natural Elements/03 - Come On Baby Dance With Me.mp3\n   344.3    5:44    5:44  /m/Gabrielle Roth/Tribe/03 - Tsunami 3 - chaos.mp3\n   255.5    4:15    4:15  /m/Talvin Singh/Oriental Club Disk 2/13 - OK.mp3\n    56.1    0:56    0:56  /m/Martin O/Der mit der Stimme tanzt/07 - Japaner.mp3\n   187.5    3:07    3:07  /m/Jazzbit/Unknown/00 Swingin man.mp3\n   112.0    1:51    1:52  /m/Yma Sumac/Ultra Lounge - Leopard Skin Fuzzy Sampler/03 Taki Rari.mp3\n   258.1    4:18    4:18  /m/Folco Orselli/Generi di Conforto/04 - La ballata di Piazzale Maciachini.mp3\n   191.8    3:11    3:11  /m/Beatles/White Album CD 2/13 - Good Night.mp3\n   323.9    5:23    5:23  /m/Natalie Dessay/Vocalises/01 Vocalise.flac\n  1036.4   17:16    7:31  /m/Büdi Siebert/Namaste/04 Lotus Call 1 Varja Guru Mantra.mp3\n    60.1    1:00    1:00  /m/Jeremy Tammik/Meditation/Stillness One Minute Silence.mp3\n   392.3    6:32    6:32  /m/Erik Truffaz/Mantis/03 Saisir.flac\n  ------  ------  ------  ------\n  5115.7   85:15   69:49  total for 17 tracks\n</pre>\n<p>That about covers my current digital music status.</p>\n<p>I hope you can find some useful snippets in here.</p>\n<p>Happy Sunday!</p>\n</p></p>"
  }
]