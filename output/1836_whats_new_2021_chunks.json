[
  {
    "original_filename": "1836_whats_new_2021",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n\n<style>\n  ul.toc { list-style-type: none; }\n  h1.new { font-size: 150%; }\n  h2.new { font-size: 150%; }\n  h3.new { font-size: 120%; }\n  h4.new { font-size: 120%; }\n</style>\n\n</head>\n\n<!---\n  \ntwitter:\n\nWhat's New in the Revit 2021 API? Information sources, previous versions, TOC, API Changes, API Additions in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/rvt2021apinews\n\nThe Revit 2021 API includes exciting enhancements for add-in developers, including numerous developer wishes and requests that have now been explicitly addressed\n&ndash; Information sources\n&ndash; What's new in previous versions\n&ndash; Detailed TOC of major changes and renovations\n&ndash; API Changes\n&ndash; API Additions...\n\nlinkedin:\n\nWhat's New in the Revit 2021 API? Information sources, previous versions, TOC, API Changes, API Additions in the #RevitAPI\n\nhttp://bit.ly/rvt2021apinews\n\nThe Revit 2021 API includes exciting enhancements for add-in developers, including numerous developer wishes and requests that have now been explicitly addressed:\n\n- Information sources\n- What's new in previous versions\n- Detailed TOC of major changes and renovations\n- API Changes\n- API Additions...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1836_whats_new_2021",
    "header_text": "What's New in the Revit 2021 API",
    "local_header_href": "#whats-new-in-the-revit-2021-api",
    "chunk_text": "### What's New in the Revit 2021 API\n\nThe Revit 2021 API includes exciting enhancements for add-in developers, including numerous developer wishes and requests that have now been explicitly addressed:\n\n- [Information sources](#1) \n- [What's new in previous versions](#2) \n- [Detailed TOC of major changes and renovations](#4)\n\n####<a name=\"1\"></a>Information Sources\n\nThe information below is based on the contents of the *Revit Platform API Changes and Additions.docx* document included with\nthe Revit 2021 SDK, the software developers kit available from \nthe [Revit Developer Centre](https://www.autodesk.com/developer-network/platform-technologies/revit).\n\nIt is also provided in the section on *What's New* in the Revit 2021 API help file `RevitAPI.chm` included with the SDK:\n\n<center>\n<img src=\"img/whats_new_2021.png\" alt=\"Revit 2021 API help on What's New\" title=\"Revit 2021 API help on What's New\" width=\"688\"/>\n</center>\n\nFor convenient, easy and effective web searching, this blog post provides an online version of that information, both in pure HTML (below) and as a PDF document:\n\n- [Revit_Platform_API_Changes_and_Additions_2021.pdf](zip/Revit_Platform_API_Changes_and_Additions_2021.pdf)\n\nThe *What's New* section and the *Changes and Additions* document provide important information, both for discovering and exploring the newly added API functionality and for later reference.\n\nIf you encounter any issues migrating your existing add-ins between different versions, this is one of the first places to look.\n\nFor detailed information on all other aspects of the Revit API, please refer to the rest of the API documentation and samples provided in the SDK.\n\nThe most important things to install and always keep at hand are:\n\n- The Revit API help file `RevitAPI.chm`\n- The Visual Studio solution containing all the SDK samples, `Samples\\SDKSamples.sln`\n\nYou will need both of these regularly for research on how to solve specific Revit API programming tasks.\n\nMore in-depth official explanations and background information is provided by the\nonline [Revit API Developers Guide](http://help.autodesk.com/view/RVT/2021/ENU/?guid=Revit_API_Revit_API_Developers_Guide_html) included \nin the [Revit 2021 online help](http://help.autodesk.com/view/RVT/2021/ENU).\n\n\n####<a name=\"2\"></a>What's New in Previous Versions\n\nHere are links to previous discussions of *What's New in the Revit API*:\n\n- [What's New in the Revit 2010 API](http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2010-api.html)\n- [What's New in the Revit 2011 API](http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2011-api.html)\n- [What's New in the Revit 2012 API](http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html)\n- [What's New in the Revit 2013 API](http://thebuildingcoder.typepad.com/blog/2013/03/whats-new-in-the-revit-2013-api.html)\n- [What's New in the Revit 2014 API](http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html)\n- [What's New in the Revit 2015 API](http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html)\n- [What's New in the Revit 2016 API](http://thebuildingcoder.typepad.com/blog/2015/04/whats-new-in-the-revit-2016-api.html)\n- [What's New in the Revit 2017 API](http://thebuildingcoder.typepad.com/blog/2016/04/whats-new-in-the-revit-2017-api.html)\n- [What's New in the Revit 2017.1 API](http://thebuildingcoder.typepad.com/blog/2016/11/whats-new-in-the-revit-20171-api.html)\n- [What's New in the Revit 2018 API](http://thebuildingcoder.typepad.com/blog/2017/04/whats-new-in-the-revit-2018-api.html)\n- [Revit 2018.1 and the Visual Materials API](http://thebuildingcoder.typepad.com/blog/2017/08/revit-20181-and-the-visual-materials-api.html)\n- [Revit 2018.1.1 and 2018.1 API Docs Online](http://thebuildingcoder.typepad.com/blog/2017/09/revit-201811-fixes-cropbox-setting.html)\n- [Revit 2018.1 Visual Materials API](http://thebuildingcoder.typepad.com/blog/2017/11/modifying-material-visual-appearance.html)\n- [What's New in the Revit 2018.2 API](http://thebuildingcoder.typepad.com/blog/2017/12/whats-new-in-the-revit-20182-api.html)\n- [What's New in the Revit 2019 API](http://thebuildingcoder.typepad.com/blog/2018/04/whats-new-in-the-revit-2019-api.html)\n- [What's New in the Revit 2020 API](https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html)\n- [What's New in the Revit 2020.1 API](https://thebuildingcoder.typepad.com/blog/2019/09/whats-new-in-the-revit-20201-api.html)\n\n####<a name=\"4\"></a>Detailed TOC of Major Changes and Renovations\n\n<ul class=\"toc\">\n<li>1 <a href=\"#4.1\">API changes</a></li>\n<ul class=\"toc\">\n<li>1.1 <a href=\"#4.1.1\">.NET 4.8</a></li>\n<li>1.2 <a href=\"#4.1.2\">Requirement for Transport Layer Security (TLS) Setting in Revit Add-ons</a></li>\n<li>1.3 <a href=\"#4.1.3\">Units API changes</a></li>\n<ul class=\"toc\">\n<li>1.3.1 <a href=\"#4.1.3.1\">List of deprecated and replaced APIs related to units</a></li>\n</ul>\n<li>1.4 <a href=\"#4.1.4\">Structural Connections API changes</a></li>\n<li>1.5 <a href=\"#4.1.5\">Electrical API changes</a></li>\n<li>1.6 <a href=\"#4.1.6\">Cloud Model API changes</a></li>\n<li>1.7 <a href=\"#4.1.7\">Raytrace view mode removed</a></li>\n<li>1.8 <a href=\"#4.1.8\">Schedule API change</a></li>\n<li>1.9 <a href=\"#4.1.9\">Slanted Walls</a></li>\n<li>1.10 <a href=\"#4.1.10\">Path of Travel API change</a></li>\n<li>1.11 <a href=\"#4.1.11\">Geometry API changes</a></li>\n<li>1.12 <a href=\"#4.1.12\">Extensible Storage API change</a></li>\n<li>1.13 <a href=\"#4.1.13\">BuiltInParameter names corrected</a></li>\n<li>1.14 <a href=\"#4.1.14\">SpaceType names corrected</a></li>\n<li>1.15 <a href=\"#4.1.15\">Image API changes</a></li>\n<li>1.16 <a href=\"#4.1.16\">Obsolete API removal</a></li>\n<ul class=\"toc\">\n<li>1.16.1.1 <a href=\"#4.1.16.1.1\">Classes</a></li>\n<li>1.16.1.2 <a href=\"#4.1.16.1.2\">Methods</a></li>\n</ul>\n</ul>\n\n<li>2 <a href=\"#4.2\">API additions</a></li>\n<ul class=\"toc\">\n<li>2.1 <a href=\"#4.2.1\">Systems Analysis API additions</a></li>\n<ul class=\"toc\">\n<li>2.1.1 <a href=\"#4.2.1.1\">Mechanical Analytical Systems</a></li>\n<li>2.1.2 <a href=\"#4.2.1.2\">Zone equipment</a></li>\n<li>2.1.3 <a href=\"#4.2.1.3\">System-Zones</a></li>\n<li>2.1.4 <a href=\"#4.2.1.4\">Systems Analysis and Analysis Reports</a></li>\n<li>2.1.5 <a href=\"#4.2.1.5\">Export to gbXML</a></li>\n<li>2.1.6 <a href=\"#4.2.1.6\">Application settings</a></li>\n</ul>\n<li>2.2 <a href=\"#4.2.2\">Electrical API additions</a></li>\n<ul class=\"toc\">\n<li>2.2.1 <a href=\"#4.2.2.1\">Circuit naming</a></li>\n<li>2.2.2 <a href=\"#4.2.2.2\">Access to circuit naming, switchboards and other properties</a></li>\n</ul>\n<li>2.3 <a href=\"#4.2.3\">Element and ElementFilter additions</a></li>\n<ul class=\"toc\">\n<li>2.3.1 <a href=\"#4.2.3.1\">Element History</a></li>\n<li>2.3.2 <a href=\"#4.2.3.2\">Element Filters</a></li>\n</ul>\n<li>2.4 <a href=\"#4.2.4\">Document API additions</a></li>\n<li>2.5 <a href=\"#4.2.5\">View API additions</a></li>\n<ul class=\"toc\">\n<li>2.5.1 <a href=\"#4.2.5.1\">Split sections</a></li>\n<li>2.5.2 <a href=\"#4.2.5.2\">Temporary View Modes</a></li>\n<li>2.5.3 <a href=\"#4.2.5.3\">Filters</a></li>\n</ul>\n<li>2.6 <a href=\"#4.2.6\">Schedule API additions</a></li>\n<ul class=\"toc\">\n<li>2.6.1 <a href=\"#4.2.6.1\">Striped rows</a></li>\n<li>2.6.2 <a href=\"#4.2.6.2\">Frozen header</a></li>\n</ul>\n<li>2.7 <a href=\"#4.2.7\">Path of Travel API</a></li>\n<ul class=\"toc\">\n<li>2.7.1 <a href=\"#4.2.7.1\">Reveal Obstacles mode for Path of Travel</a></li>\n<li>2.7.2 <a href=\"#4.2.7.2\">Path finding analysis for Path of Travel</a></li>\n<li>2.7.3 <a href=\"#4.2.7.3\">Waypoints</a></li>\n</ul>\n<li>2.8 <a href=\"#4.2.8\">Export API additions</a></li>\n<ul class=\"toc\">\n<li>2.8.1 <a href=\"#4.2.8.1\">CustomExporter events</a></li>\n</ul>\n<li>2.9 <a href=\"#4.2.9\">Options API additions</a></li>\n<ul class=\"toc\">\n<li>2.9.1 <a href=\"#4.2.9.1\">Color options</a></li>\n</ul>\n<li>2.10 <a href=\"#4.2.10\">Geometry API additions</a></li>\n<ul class=\"toc\">\n<li>2.10.1 <a href=\"#4.2.10.1\">Surfaces</a></li>\n<li>2.10.2 <a href=\"#4.2.10.2\">Edges</a></li>\n<li>2.10.3 <a href=\"#4.2.10.3\">Meshes</a></li>\n<li>2.10.4 <a href=\"#4.2.10.4\">Geometry utilities</a></li>\n</ul>\n<li>2.11 <a href=\"#4.2.11\">Image API additions</a></li>\n<ul class=\"toc\">\n<li>2.11.1 <a href=\"#4.2.11.1\">Image properties</a></li>\n<li>2.11.2 <a href=\"#4.2.11.2\">Converting images between links and imports</a></li>\n</ul>\n<li>2.12 <a href=\"#4.2.12\">Cloud Model API additions</a></li>\n<ul class=\"toc\">\n<li>2.12.1 <a href=\"#4.2.12.1\">Regions</a></li>\n<li>2.12.2 <a href=\"#4.2.12.2\">Opening Cloud Models</a></li>\n</ul>\n<li>2.13 <a href=\"#4.2.13\">Structural Connection API addition</a></li>\n<ul class=\"toc\">\n<li>2.13.1 <a href=\"#4.2.13.1\">Connections requiring additional points</a></li>\n</ul>\n<li>2.14 <a href=\"#4.2.14\">Reinforcement API additions</a></li>\n<ul class=\"toc\">\n<li>2.14.1 <a href=\"#4.2.14.1\">Rebar constraints</a></li>\n<li>2.14.2 <a href=\"#4.2.14.2\">Rebar end treatment</a></li>\n<li>2.14.3 <a href=\"#4.2.14.3\">Fabric Sheet visibility</a></li>\n<li>2.14.4 <a href=\"#4.2.14.4\">Out of plane hook rotation angles</a></li>\n<li>2.14.5 <a href=\"#4.2.14.5\">Hook length overrides</a></li>\n</ul>\n<li>2.15 <a href=\"#4.2.15\">Material API addition</a></li>\n<li>2.16 <a href=\"#4.2.16\">Analysis Visualization Framework API addition</a></li>\n<li>2.17 <a href=\"#4.2.17\">Shared Coordinates API additions</a></li>\n<ul class=\"toc\">\n<li>2.17.1 <a href=\"#4.2.17.1\">Internal Origin</a></li>\n<li>2.17.2 <a href=\"#4.2.17.2\">BasePoint</a></li>\n</ul>\n</ul>\n</ul>\n\n<p></p>\n\n<center>\n<div style=\"border-style:solid; border-width:2px 0px 2px 0px\">\n<a name=\"4.1\"></a><h1 class=\"new\" style=\"font-weight: bold\">API Changes</h1>\n</div>\n</center>\n\n<a name=\"4.1.1\"></a><h2 class=\"new\">1.1. .NET 4.8</h2>\n\nRevit's API assemblies are built using .NET 4.8.\n\nAt a minimum, add-ons will need to target .NET 4.8 for Revit 2021.\n\n<a name=\"4.1.2\"></a><h2 class=\"new\">1.2. Requirement for Transport Layer Security (TLS) Setting in Revit Add-ons</h2>\n\nWhen your add-on requires Internet communications and a specific security protocol is involved, if the protocol is TLS 1.0, 1.1 or 1.2, you don’t need to write any setting in the add-on, you may just take advantage of the native TLS support in Revit and its target .NET Framework. The complexities due to variety of Windows versions as well as .NET Framework versions have been well handled in Revit.\n\nIf the addon still needs to specify a security protocol or its version, do not hard-code it exclusively, e.g. by directly assigning the protocol/version to the application-wide property ServicePointManager.SecurityProtocol. This will override Revit’s native TLS configuration, which is critical for Revit to communicate with various Autodesk cloud services. A problematic setting is like\n\n<pre>\n  System.Net.ServicePointManager.SecurityProtocol\n    = System.Net.SecurityProtocolType.Tls12;\n</pre>\n\nInstead you need to specify the protocol/version inclusively, e.g. by using bitwise OR (logical OR) on the application-wide property ServicePointManager.SecurityProtocol. A correct setting is like\n\n<pre>\n  System.Net.ServicePointManager.SecurityProtocol\n    |= System.Net.SecurityProtocolType.Tls12;\n</pre>\n\n<a name=\"4.1.3\"></a><h2 class=\"new\">1.3. Units API changes</h2>\n\nRevit has converted to use an external reference to unit definitions defined in Forge schemas.\n\nIn the Autodesk.Revit.DB namespace, the enumerations DisplayUnitType, UnitSymbolType, and UnitType have been deprecated in favor of a potentially extensible set of units, symbols, and unit types. The new class:\n\n- Autodesk.Revit.DB.ForgeTypeId\n\nrepresents an identifier for a unit, symbol, or other object, and is now used throughout the Revit API to identify units of measurement, symbols, and unit types. Unit types are now referred to as \"specs\" to avoid confusion with units themselves.\n\nA ForgeTypeId instance holds a string, called a \"typeid\", that uniquely identifies a Forge schema. A Forge schema is a JSON document describing a data structure, supporting data interchange between applications. A typeid string includes a namespace and version number and may look something like \"autodesk.spec.aec:length-1.0.0\" or \"autodesk.unit.unit:meters-1.0.0\". By default, comparison of ForgeTypeId values in the Revit API ignores the version number.\n\nThe new classes:\n\n- Autodesk.Revit.DB.UnitTypeId\n- Autodesk.Revit.DB.SymbolTypeId\n- Autodesk.Revit.DB.SpecTypeId \n\ncontain a default set of named public constant properties of type ForgeTypeId. These values can be used in code replacing values of the deprecated DisplayUnitType, UnitSymbolType, and UnitType enumerations.\n\nFor example, where you previously used DisplayUnitType.DUT_WATTS_PER_SQUARE_METER_KELVIN, you would now use UnitTypeId.WattsPerSquareMeterKelvin. Where you previously used UnitType.UT_HVAC_Density, you would now use SpecTypeId.HvacDensity.\n\nThe UnitUtils class now offers a set of new methods for mapping between enumeration values and ForgeTypeId values to assist clients in migrating code to ForgeTypeId:\n\n- UnitUtils.IsSymbol()\n- UnitUtils.GetSpecTypeId()\n- UnitUtils.GetUnitType()\n- UnitUtils.GetUnitTypeId()\n- UnitUtils.GetDisplayUnitType()\n- UnitUtils.GetSymbolTypeId()\n- UnitUtils.GetUnitSymbolType()\n\nSome of the preceding methods are new but are already deprecated. They have been added to the API only to assist clients in migrating code from the old enumerations to the ForgeTypeId class.\n\n<a name=\"4.1.3.1\"></a><h3 class=\"new\">1.3.1. List of deprecated and replaced APIs related to units</h2>\n\nDeprecated enumerations in Autodesk.Revit.DB:\n\n- Deprecated &rarr; Replacement\n- DisplayUnitType &rarr; UnitTypeId\n- UnitSymbolType &rarr; SymbolTypeId\n- UnitType &rarr; SpecTypeId\n\nAutodesk.Revit.DB.UnitUtils:\n\n- Deprecated &rarr; Replacement\n- static double Convert(double, DisplayUnitType, DisplayUnitType) &rarr; static double Convert(double, ForgeTypeId currentUnitTypeId, ForgeTypeId desiredUnitTypeId)\n- static double ConvertFromInternalUnits(double, DisplayUnitType) &rarr; static double ConvertFromInternalUnits(double, ForgeTypeId unitTypeId)\n- static double ConvertToInternalUnits(double, DisplayUnitType) &rarr; static double ConvertToInternalUnits(double, ForgeTypeId unitTypeId)\n- static bool IsValidDisplayUnit(DisplayUnitType) &rarr; static bool IsUnit(ForgeTypeId unitTypeId)\n- static List<DisplayUnitType> GetValidDisplayUnits() &rarr; static List<ForgeTypeId> GetAllUnits()\n- static bool IsValidDisplayUnit(UnitType, DisplayUnitType) &rarr; static bool IsValidUnit(ForgeTypeId specTypeId, ForgeTypeId unitTypeId)\n- static List<DisplayUnitType> GetValidDisplayUnits(UnitType) &rarr; static List<ForgeTypeId> GetValidUnits(ForgeTypeId specTypeId)\n- static string GetTypeCatalogString(DisplayUnitType) &rarr; static string GetTypeCatalogStringForUnit(ForgeTypeId unitTypeId)\n- static bool IsValidUnitType(UnitType) &rarr; static bool IsSpec(ForgeTypeId specTypeId)\n- static List<UnitType> GetValidUnitTypes() &rarr; static List<ForgeTypeId> GetAllSpecs()\n- static UnitGroup GetUnitGroup(UnitType) &rarr; static UnitGroup GetUnitGroup(ForgeTypeId specTypeId)\n- static string GetTypeCatalogString(UnitType) &rarr; static string GetTypeCatalogStringForSpec(ForgeTypeId specTypeId)\n\nAutodesk.Revit.DB.ExtensibleStorage.Entity:\n\n- Deprecated &rarr; Replacement\n- FieldType Get(Field, DisplayUnitType) &rarr; FieldType Get(Field, ForgeTypeId unitTypeId)\n- FieldType Get(string, DisplayUnitType) &rarr; FieldType Get(string, ForgeTypeId unitTypeId)\n- void Set(Field, FieldType, DisplayUnitType) &rarr; void Set(Field, FieldType, ForgeTypeId unitTypeId)\n- void Set(string, FieldType, DisplayUnitType) &rarr; void Set(string, FieldType, ForgeTypeId unitTypeId)\n\nAutodesk.Revit.DB.FamilyParameter:\n\n- Deprecated &rarr; Replacement\n- property DisplayUnitType DisplayUnitType (get) &rarr; ForgeTypeId GetUnitTypeId()\n\nAutodesk.Revit.DB.Parameter:\n\n- Deprecated &rarr; Replacement\n- property DisplayUnitType DisplayUnitType (get) &rarr; ForgeTypeId GetUnitTypeId()\n\nAutodesk.Revit.DB.Definition:\n\n- Deprecated &rarr; Replacement\n- property UnitType UnitType (get) &rarr; ForgeTypeId GetSpecTypeId()\n\nAutodesk.Revit.DB.Visual.AssetPropertyDistance:\n\n- Deprecated &rarr; Replacement\n- property DisplayUnitType DisplayUnitType (get) &rarr; ForgeTypeId GetUnitTypeId()\n\nAutodesk.Revit.DB.Units:\n\n- Deprecated &rarr; Replacement\n- FormatOptions GetFormatOptions(UnitType) &rarr; FormatOptions GetFormatOptions(ForgeTypeId specTypeId)\n- void SetFormatOptions(UnitType, FormatOptions) &rarr; void SetFormatOptions(ForgeTypeId specTypeId, FormatOptions)\n- static bool IsModifiableUnitType(UnitType) &rarr; static bool IsModifiableSpec(ForgeTypeId specTypeId)\n- static List<UnitType> GetModifiableUnitTypes() &rarr; static List<ForgeTypeId> GetModifiableSpecs()\n\nAutodesk.Revit.DB.DimensionType:\n\n- Deprecated &rarr; Replacement\n- property UnitType UnitType (get) &rarr; ForgeTypeId GetSpecTypeId()\n\nAutodesk.Revit.DB.ExtensibleStorage.Field:\n\n- Deprecated &rarr; Replacement\n- bool CompatibleDisplayUnitType(DisplayUnitType) &rarr; bool CompatibleUnit(ForgeTypeId unitTypeId)\n- property UnitType UnitType (get) &rarr; ForgeTypeId GetSpecTypeId()\n\nAutodesk.Revit.DB.ExtensibleStorage.FieldBuilder:\n\n- Deprecated &rarr; Replacement\n- FieldBuilder SetUnitType(UnitType) &rarr; FieldBuilder SetSpec(ForgeTypeId specTypeId)\n\nAutodesk.Revit.DB.FamilySizeTableColumn:\n\n- Deprecated &rarr; Replacement\n- property DisplayUnitType DisplayUnitType (get) &rarr; ForgeTypeId GetUnitTypeId()\n- property UnitType UnitType (get) &rarr; ForgeTypeId GetSpecTypeId()\n\nAutodesk.Revit.DB.FormatOptions:\n\n- Deprecated &rarr; Replacement\n- FormatOptions(DisplayUnitType) &rarr; FormatOptions(ForgeTypeId unitTypeId)\n- FormatOptions(DisplayUnitType, UnitSymbolType) &rarr; FormatOptions(ForgeTypeId unitTypeId, ForgeTypeId symbolTypeId)\n- FormatOptions(DisplayUnitType, double) &rarr; This constructor has not been replaced. Please use property assignment to set the accuracy.\n- FormatOptions(DisplayUnitType, UnitSymbolType, double) &rarr; This constructor has not been replaced. Please use property assignment to set the accuracy.\n- property DisplayUnitType DisplayUnits (get/set) &rarr; ForgeTypeId GetUnitTypeId() and void SetUnitTypeId(ForgeTypeId unitTypeId)\n- property UnitSymbolType UnitSymbol (get/set) &rarr; ForgeTypeId GetSymbolTypeId() and void SetSymbolTypeId(ForgeTypeId symbolTypeId)\n- static bool CanHaveUnitSymbol(DisplayUnitType) &rarr; static bool CanHaveSymbol(ForgeTypeId unitTypeId)\n- bool CanHaveUnitSymbol() &rarr; bool CanHaveSymbol()\n- static bool IsValidUnitSymbol(DisplayUnitType, UnitSymbolType) &rarr; static bool IsValidSymbol(ForgeTypeId unitTypeId, ForgeTypeId symbolTypeId)\n- bool IsValidUnitSymbol(UnitSymbolType) &rarr; bool IsValidSymbol(ForgeTypeId symbolTypeId)\n- static List<UnitSymbolType> GetValidUnitSymbols(DisplayUnitType) &rarr; static List<ForgeTypeId> GetValidSymbols(ForgeTypeId unitTypeId)\n- List<UnitSymbolType> GetValidUnitSymbols() &rarr; List<ForgeTypeId> GetValidSymbols()\n- static bool IsValidAccuracy(DisplayUnitType, double) &rarr; static bool IsValidAccuracy(ForgeTypeId unitTypeId, double accuracy)\n- static bool CanSuppressTrailingZeros(DisplayUnitType) &rarr; static bool CanSuppressTrailingZeros(ForgeTypeId unitTypeId)\n- static bool CanSuppressLeadingZeros(DisplayUnitType) &rarr; static bool CanSuppressLeadingZeros(ForgeTypeId unitTypeId)\n- static bool CanSuppressSpaces(DisplayUnitType) &rarr; static bool CanSuppressSpaces(ForgeTypeId unitTypeId)\n- static bool CanUsePlusPrefix(DisplayUnitType) &rarr; static bool CanUsePlusPrefix(ForgeTypeId unitTypeId)\n- bool IsValidForUnitType(UnitType) &rarr; bool IsValidForSpec(ForgeTypeId specTypeId)\n\nAutodesk.Revit.DB.LabelUtils:\n\n- Deprecated &rarr; Replacement\n- static string GetLabelFor(DisplayUnitType) &rarr; static string GetLabelForUnit(ForgeTypeId unitTypeId)\n- static string GetLabelFor(UnitSymbolType) &rarr; static string GetLabelForSymbol(ForgeTypeId symbolTypeId)\n- static string GetLabelFor(UnitType) &rarr; static string GetLabelForSpec(ForgeTypeId specTypeId)\n\nAutodesk.Revit.DB.Structure.ReinforcementRoundingManager:\n\n- Deprecated &rarr; Replacement\n- property DisplayUnitType LengthDisplayUnit (get) &rarr; ForgeTypeId GetLengthUnitTypeId()\n\nAutodesk.Revit.DB.ScheduleField:\n\n- Deprecated &rarr; Replacement\n- property UnitType UnitType (get) &rarr; ForgeTypeId GetSpecTypeId()\n\nAutodesk.Revit.DB.TableSectionData:\n\n- Deprecated &rarr; Replacement\n- UnitType GetCellUnitType(int, int) &rarr; ForgeTypeId GetCellSpec(int, int)\n\nAutodesk.Revit.DB.UnitFormatUtils:\n\n- Deprecated &rarr; Replacement\n- static string Format(Units, UnitType, double, bool, bool, FormatValueOptions) and static string Format(Units, UnitType, double, bool, FormatValueOptions) &rarr; static string Format(Units, ForgeTypeId specTypeId, double, bool, FormatValueOptions) &ndash; Note: The \"maxAccuracy\" option has not been replaced. Please specify the desired precision explicitly.\n- static string Format(Units, UnitType, double, bool, bool) and static string Format(Units, UnitType, double, bool) &rarr; static string Format(Units, ForgeTypeId specTypeId, double, bool) &ndash; Note: The \"maxAccuracy\" option has not been replaced. Please specify the desired precision explicitly.\n- static bool TryParse(Units, UnitType, string, ValueParsingOptions, double) &rarr; static bool TryParse(Units, ForgeTypeId specTypeId, string, ValueParsingOptions, double)\n- static bool TryParse(Units, UnitType, string, ValueParsingOptions, double, string) &rarr; static bool TryParse(Units, ForgeTypeId specTypeId, string, ValueParsingOptions, double, string)\n- static bool TryParse(Units, UnitType, string, double) &rarr; static bool TryParse(Units, ForgeTypeId specTypeId, string, double)\n- static bool TryParse(Units, UnitType, string, double, string) &rarr; static bool TryParse(Units, ForgeTypeId specTypeId, string, double, string)\n\n<a name=\"4.1.4\"></a><h2 class=\"new\">1.4. Structural Connections API changes</h2>\n\n- Deprecated member &rarr; Replacement &ndash; Notes\n- StructuralConnectionHandler.Create(Document, IList&lt;ElementId&gt;) &rarr; StructuralConnectionHandler.CreateGenericConnection() &ndash; The new method provides an easier and friendlier way to create a generic connection.\n\n<a name=\"4.1.5\"></a><h2 class=\"new\">1.5. Electrical API changes</h2>\n\n- Deprecated member &rarr; Replacement &ndash; Notes\n- MEPModel.ElectricalSystems &rarr; MEPModel.GetElectricalSystems() &ndash; The new method returns an ISet&lt;&gt; containing the systems.\n- MEPModel.AssignedElectricalSystems &rarr; MEPModel.GetAssignedElectricalSystems() &ndash; The new method returns an ISet&lt;&gt; containing the systems.\n- ElectricalSystemSet &rarr; N/A &ndash; new methods will use .NET collections \n- ElectricalSystemSetIterator &rarr; N/A &ndash; new methods will use .NET collections \n- PanelScheduleData.IsThirdPhaseHidden &rarr; PanelScheduleData.IsUnusedPhaseHidden\n\n<a name=\"4.1.6\"></a><h2 class=\"new\">1.6. Cloud Model API changes</h2>\n\n- Deprecated member &rarr; Replacement &ndash; Notes\n- ModelPathUtils.ConvertCloudGUIDsToCloudPath (Guid, Guid) &rarr; ModelPathUtils.ConvertCloudGUIDsToCloudPath (string region, Guid, Guid) &ndash; The new method provides an extra argument to indicate the region of the model to open.\n- Document.SaveAsCloudModel (string, string) &rarr; Document.SaveAsCloudModel (Guid accountId, Guid projectId, string, string) &ndash; The new method provides two extra arguments to make identifying the cloud location more efficient and reliable.\n\n<a name=\"4.1.7\"></a><h2 class=\"new\">1.7. Raytrace view mode removed</h2>\n\nThe Raytrace view mode is no longer available.\n\nThe following two enum values have been removed (with no replacement):\n\n- DisplayStyle.Raytrace\n- TemporaryViewMode.Raytrace\n\n<a name=\"4.1.8\"></a><h2 class=\"new\">1.8. Schedule API change</h2>\n\nThe method\n\n- ViewSchedule.ExportSchedule()\n\nnow exports a text filed formatted in UTF8 (it was previously UNICODE) for better scalability and a more modern text format.\n\n<a name=\"4.1.9\"></a><h2 class=\"new\">1.9. Slanted Walls</h2>\n\nStandard walls can now be slanted.\nThere is no special API for this &ndash; use the standard parameter API to access the properties that control the slanted.\nAPI code should no longer assume that standard walls (or their inserts) are vertical.\n\nThree new parameters have been added:\n\n- BuiltInParameter.WALL_CROSS_SECTION &ndash; An integer that controls whether the wall is vertical (0) or slanted (1).\n- BuiltInParameter.WALL_SINGLE_SLANT_ANGLE_FROM_VERTICAL &ndash; A double that controls the angle of the slant relative to vertical, in degrees. The sign of the angle is positive in the direction to the right of the direction of the path curve of the wall, independent of how the wall is flipped.\n- BuiltInParameter.INSERT_ORIENTATION &ndash; An integer that controls whether an insert in a wall is vertical (0) or follows the slant of the wall (1).\n\n<a name=\"4.1.10\"></a><h2 class=\"new\">1.10. Path of Travel API change</h2>\n\nThe enumerated type:\n\n- Autodesk.Revit.DB.Analysis.PathOfTravelCalculationRequestType\n\nis not used in public API members and thus has been deprecated (with no replacement).\n\n<a name=\"4.1.11\"></a><h2 class=\"new\">1.11. Geometry API changes</h2>\n\nThe following methods have been deprecated and replaced:\n\n- Deprecated member &rarr; Replacement\n- NurbSpline.isClosed() &rarr; Curve.IsClosed()\n- ExportUtils.GetNurbsSurfaceDataForFace() &rarr; ExportUtils.GetNurbsSurfaceDataForSurface()\n\n<a name=\"4.1.12\"></a><h2 class=\"new\">1.12. Extensible Storage API change</h2>\n\nThe following method has been deprecated and replaced:\n\n- Deprecated member &rarr; Replacement\n- ESSchema.EraseSchemaAndAllEntities() &rarr; Document.EraseSchemaAndAllEntities()\n\n<a name=\"4.1.13\"></a><h2 class=\"new\">1.13. BuiltInParameter names corrected</h2>\n\nA spelling mistake in two BuiltInParameter members has been corrected:\n\n- Replaced member &rarr; Replacement\n- RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SURFACE_INDENTIFICATION_RESOLUTION &rarr; RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SURFACE_IDENTIFICATION_RESOLUTION\n- RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SPACE_INDENTIFICATION_RESOLUTION &rarr; RBS_ENERGY_ANALYSIS_BUILDING_ENVELOPE_ANALYTICAL_SPACE_IDENTIFICATION_RESOLUTION\n\n<a name=\"4.1.14\"></a><h2 class=\"new\">1.14. SpaceType names corrected</h2>\n\nA spelling mistake in two SpaceType members has been corrected:\n\n- Replaced member &rarr; Replacement\n- kComfinementCellsPenitentiary &rarr; kConfinementCellsPenitentiary\n- kComfinementCellsCourtHouse &rarr; kConfinementCellsCourtHouse\n\n<a name=\"4.1.15\"></a><h2 class=\"new\">1.15. Image API changes</h2>\n\nSeveral members have been deprecated and replaced with new methods that use the new ImageTypeSource enumeration. \n\n- Replaced member &rarr; Replacement\n- ImageType.IsViewImage and ImageType.IsLoadedFromFile() &rarr; ImageType.Source\n- ImageTypeOptions(), ImageTypeOptions(string) and ImageTypeOptions(string, bool) &rarr; ImageTypeOptions(string, bool, ImageTypeSource) or ImageTypeOptions(ExternalResourceReference, ImageTypeSource)\n\n<a name=\"4.1.16\"></a><h2 class=\"new\">1.16. Obsolete API removal</h2>\n\nThe following API members and classes which had previously been marked Obsolete have been removed in this release. Consult the API documentation from prior releases for information on the replacements to use:\n\n<a name=\"4.1.16.1.1\"></a><h4 class=\"new\">1.16.1.1. Classes</h2>\n\n- Autodesk.Revit.DB.ImageImportOptions\n\n<a name=\"4.1.16.1.2\"></a><h4 class=\"new\">1.16.1.2. Methods</h2>\n\n- Document.Import(String, ImageImportOptions, View, out Element)\n- ExternalResourceBrowserData.GetSubFolders()\n- ImageView.Create(Document, String)\n- Autodesk.Revit.Creation.Application.NewImageImportOptions()\n- StructuralConnectionHandler.GetSubPartIds()\n- FabricationConfiguration.GetMaterialThickness()\n\n<p></p>\n\n<center>\n<div style=\"border-style:solid; border-width:2px 0px 2px 0px\">\n<a name=\"4.2\"></a><h1 class=\"new\" style=\"font-weight: bold\">API Additions</h1>\n</div>\n</center>\n\n<a name=\"4.2.1\"></a><h2 class=\"new\">2.1. Systems Analysis API additions</h2>\n\n<a name=\"4.2.1.1\"></a><h3 class=\"new\">2.1.1. Mechanical Analytical Systems</h2>\n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.MEPAnalyticalSystem\n\nrepresents an HVAC analytical system element where the air or water is circulated to satisfy building energy requirements.\nIts AnalyticalSystemDomain property indicates whether the element represents a water loop or air system.\n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.WaterLoopData\n\ncontains the data for a water loop system. It can be obtained from the MEPAnalyticalSystem.GetWaterLoopData() method. It offers the following properties:\n\n- WaterLoopData.WaterLoopType\n- WaterLoopData.ChillerType\n- WaterLoopData.CondenserWaterLoopId\n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.AirSystemData\n\ncontains the data for an air system.\nIt can be obtained from the MEPAnalyticalSystem.GetAirSystemData() method.\nIt offers the following properties:\n\n- AirSystemData.HeatExchangerType\n- AirSystemData.PreheatCoilType\n- AirSystemData.HeatingCoilType\n- AirSystemData.AirSystemCoolingCoilType\n- AirSystemData.AirFanType\n\n<a name=\"4.2.1.2\"></a><h3 class=\"new\">2.1.2. Zone equipment</h2>\n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.ZoneEquipment\n\nrepresents a zone equipment element used for Mechanical Systems Analysis.\nZone equipment is an early-stage equipment placeholder that provides heating or cooling to part of the air system or water loop.\nOne zone equipment element may be mapped to multiple pieces of physical equipment depending on the zoning behavior type.\n\nAnalytical spaces may be associated to one or more zone equipment elements. The method:\n\n- ZoneEquipment.MoveSpaceToEquipment() \n\nmoves a set of spaces from the original zone equipment to the targeted zone equipment. Either zone equipment id may be InvalidElementId. If the original is InvalidElementId, the association is copied to the target zone equipment. If the target is InvalidElementId, the original association is removed. The method:\n\n- ZoneEquipment.GetAssociatedZoneEquipment() \n\nreturns the set of zone equipment that is associated with the specified analytical space or spaces. \n\nThe new class\n\n- Autodesk.Revit.DB.Mechanical.ZoneEquipmentData\n\nrepresents the data associated with a zone equipment. It can be obtained from the ZoneEquipment.GetZoneEquipmentData() method. It offers the following properties:\n\n- ZoneEquipmentData.EquipmentType\n- ZoneEquipmentData.EquipmentBehavior\n- ZoneEquipmentData.HotWaterLoopId\n- ZoneEquipmentData.ChilledWaterLoopId\n- ZoneEquipmentData.AirSystemId\n\n<a name=\"4.2.1.3\"></a><h3 class=\"new\">2.1.3. System-Zones</h2>\n\nA system-zone in Revit is used to specify what parts of a building are served by specific equipment, air systems and water loops, without having to physically model them. In the Revit API, a system-zone is represented as a GenericZone element with a domain data of type SystemZoneData.\n\nThe new class\n\n- Autodesk.Revit.DB.GenericZone\n\nprovides for a method of selecting elements that somehow come in contact with the zone object. A zone is a non-hierarchical structure of geometric information, area or volume definitions for the purpose of analysis. A generic zone will contain specific domain requirements provided at creation of the element. Currently, all GenericZones will represent system-zone elements used for MEP design. Some relevant new members of GenericZones include:\n\n- GenericZone.Create(Document doc, String name, GenericZoneDomainData domainData, ElementId levelId, IList&lt;CurveLoop&gt; curves) &ndash; supports creation of a zone using the specified domain data, level and curves to represent the intersection/outline of the related spaces.\n- GenericZone.GetBoundaries() &ndash; Gets the boundaries for the given GenericZone.\n- GenericZone.GetDomainData() &ndash; Returns the domain data for the given GenericZone.\n\nFor system-zone elements, the domain data will be an instance of the new class:\n\n- Autodesk.Revit.DB.SystemZoneData\n\nThis data includes a reference to the zone equipment for the spaces in this system-zone:\n\n- SystemZoneData.ZoneEquipmentId\n\n<a name=\"4.2.1.4\"></a><h3 class=\"new\">2.1.4. Systems Analysis and Analysis Reports</h2>\n\nThe new class\n\n- Autodesk.Revit.DB.Analysis.ViewSystemsAnalysisReport\n\nrepresents a view instance of the systems analysis report. In a typical API workflow, to run a systems analysis against a Revit project, create (via ViewSystemsAnalysisReport.Create()) a new view instance and request (via ViewSystemsAnalysisReport.RequestSystemsAnalysis()) the systems analysis from that view. The analysis will run in the background, and when the analysis is completed, the related views are automatically updated. The method RequestSystemsAnalysis.IsAnalysisCompleted indicates if the background systems analysis has completed or not.\n\nIt is possible for a project to contain multiple systems analysis reports. The method:\n\n- ViewSystemsAnalysisReport.GetLatestSystemsAnalysisReport()\n\nreturns the latest report of systems analysis. The peak heating/cooling loads of all EnergyAnalysisSpace elements should be consistent with this latest report.\n\nThe new class\n\n- Autodesk.Revit.DB.Analysis.SystemsAnalysisOptions\n\ncontains some properties (e.g., WeatherFile, WorkflowFile, and OutputFolder) that affect the systems analysis. It is okay to leave some parameters empty. In those cases, the analysis will take the default value from the ViewSystemsAnalsisReport element. The weather file affects the results of energy simulation. More weather files are available at http://energyplus.net/weather .\n\n<a name=\"4.2.1.5\"></a><h3 class=\"new\">2.1.5. Export to gbXML</h2>\n\nThe new property:\n\n- GBXMLExportOptions.ExportAnalyticalSystems \n\nshould be set to true to export the analytical system related items when exporting to gbXML.\n\n<a name=\"4.2.1.6\"></a><h3 class=\"new\">2.1.6. Application settings</h2>\n\nThe new methods:\n\n- Application.GetSystemsAnalysisWorkflowNames()\n- Application.GetSystemsAnalysisWorkflows() \n- Application.SetSystemsAnalysisWorkflows() \n\nallow you to read and specify the name and path information names for systems analysis workflows.\n\n<a name=\"4.2.2\"></a><h2 class=\"new\">2.2. Electrical API additions</h2>\n\n<a name=\"4.2.2.1\"></a><h3 class=\"new\">2.2.1. Circuit naming</h2>\n\nThe new class:\n\n- Autodesk.Revit.DB.Electrical.CircuitNamingScheme\n\nrepresents a scheme used for electrical circuit naming. The most significant new methods on this class include:\n\n- CircuitNamingScheme.Create()\n- CircuitNamingScheme.GetCombinedParameters() \n- CircuitNamingScheme.SetCombinedParameters()\n\nallowing schemes to be created, and allowing access to the list of combined parameters associated with the scheme.\n\nThe new class:\n\n- Autodesk.Revit.DB.Electrical.CircuitNamingSchemeSettings\n\nrepresents the circuit naming scheme settings object in a project document. The most significant new members on this class include:\n\n- CircuitNamingSchemeSettings.GetCircuitNamingSchemeSettings() \n- CircuitNamingSchemeSettings.CircuitNamingSchemeId\n\n<a name=\"4.2.2.2\"></a><h3 class=\"new\">2.2.2. Access to circuit naming, switchboards and other properties</h2>\n\nSeveral new properties and methods have been added to support access to circuit naming information on a variety of elements:\n\n- ElectricalSetting.GetCircuitNamingSchemeSettings() &ndash; Gets the circuit naming scheme settings of the project.\n- ElectricalSystem.SlotIndex &ndash; The Slots where the Electrical System is located in its panel.\n- ElectricalSystem.CircuitNamingIndex &ndash; The Circuit Naming Index where the Electrical System is located in its panel.\n- ElectricalSystem.PhaseLabel &ndash; The circuit phase label used in the Electrical System.\n- ElectricalSystem.Ways &ndash; The circuit ways used in the Electrical System.\n- ElectricalSystem.LoadClassificationAbbreviations &ndash; The LoadClassification Abbreviations used in the Electrical System.\n- ElectricalLoadClassification.Abbreviation &ndash; The abbreviation of the load classification name.\n- ElectricalEquipment.CircuitNamingSchemeId &ndash; The CircuitNamingSchemeId used in the Electrical Equipment.\n- ElectricalEquipment.IsValidDistributionSystem() &ndash; Verifies that the Distribution System can be assigned to the Electrical Equipment.\n- ElectricalEquipment.IsValidCircuitNamingSchemeId() &ndash; Verifies that the circuit naming scheme id can be used with Electrical Equipment.\n- ElectricalEquipment.GetCircuitNamingSchemeType() &ndash; Gets enumerated type of the circuit naming scheme used with Electrical Equipment.\n- ElectricalEquipment.SetCircuitNamingSchemeType() &ndash; Sets the circuit naming scheme for Electrical Equipment.\n- PanelScheduleView.RenumberIndexes() &ndash; Renumbers the Circuit Naming Index for the circuits in the panel.\n- ElectricalEquipment.MaxNumberOfCircuits &ndash; The maximum number of circuits for switchboard.\n- ElectricalEquipment.IsSwitchboard() &ndash; Verifies that the electrical equipment is a switchboard.\n- PanelScheduleView.SwitchPhases() &ndash; Switches the circuit phases at the slot.\n- ElectricalSystem.Frame &ndash; Retrieves the Frame value of the Electrical System.\n- PanelScheduleData.IsUnusedPhaseHidden &ndash; True if the user wishes to hide the unused phase column of a single phase panel, false otherwise.\n\n<a name=\"4.2.3\"></a><h2 class=\"new\">2.3. Element and ElementFilter additions</h2>\n\n<a name=\"4.2.3.1\"></a><h3 class=\"new\">2.3.1. Element History</h2>\n\nThe new property:\n\n- Element.VersionGuid\n\ngets an element version Guid that can be used to see whether this element has changed compared to the previous saved or synchronized version of the document.\n\n<a name=\"4.2.3.2\"></a><h3 class=\"new\">2.3.2. Element Filters</h2>\n\nTwo new element filter classes have been added for use in FilteredElementCollector and other tools leveraging ElementFilter classes.\n\nThe new class:\n\n- Autodesk.Revit.DB.ElementIdSetFilter\n\nis a quick filter wrapping a set of element ids.\n\nThe new class:\n\n- Autodesk.Revit.DB.VisibleInViewFilter\n\nis a quick filter that passes elements that are most likely visible in the given view.\n\n<a name=\"4.2.4\"></a><h2 class=\"new\">2.4. Document API additions</h2>\n\nTwo new document events provide additional flexibility to react when a document is reloaded:\n\n- Application.DocumentReloadingLatest\n- Application.DocumentReloadedLatest\n\nSubscribers to these events will be provided an argument object containing the path to the central model. Document changes are permitting during both events.\n\n<a name=\"4.2.5\"></a><h2 class=\"new\">2.5. View API additions</h2>\n\n<a name=\"4.2.5.1\"></a><h3 class=\"new\">2.5.1. Split sections</h2>\n\nThe new methods:\n\n- DBViewSection.IsSplitSection()\n- ViewCropRegionShapeManager.GetSplitRegionOffset()\n\nidentify if a section view is split, and return the offset for the specified split crop region.\n\n<a name=\"4.2.5.2\"></a><h3 class=\"new\">2.5.2. Temporary View Modes</h2>\n\nThe Revit API now allows customization to create \"custom temporary view modes\" applied to a view as a temporary view property.\n\nFor this release, the \"Reveal Obstacles for Path of Travel\" temporary mode is implemented this way. It uses the Analysis Visualization Framework (AVF) to display additional graphics on top of the view contents.\n\nThe new properties:\n\n- TemporaryViewModes.CustomTitle\n- TemporaryViewModes.CustomColor\n- TemporaryViewModes.ResetCustomization()\n- TemporaryViewModes.IsCustomized()\n\nprovide access to read and modify a custom temporary view mode. CustomTitle should be set to cause the view to display the customized frame. The application is responsible to adjust the appearance of elements in the view related to the mode.\n\n<a name=\"4.2.5.3\"></a><h3 class=\"new\">2.5.3. Filters</h2>\n\nThe new methods:\n\n- View.GetIsFilterEnabled()\n- View.SetIsFilterEnabled() \n\nidentify or set if the filter is enabled in this view. \n\nThe new method:\n\n- View.GetOrderedFilters() \n\ngets the filters applied to the view in the order they are applied.\n\n<a name=\"4.2.6\"></a><h2 class=\"new\">2.6. Schedule API additions</h2>\n\n<a name=\"4.2.6.1\"></a><h3 class=\"new\">2.6.1. Striped rows</h2>\n\nThe new properties:\n\n- ViewSchedule.HasStripedRows\n- ViewSchedule.UseStripedRowsOnSheets\n\nprovides access to read or set if a given schedule is using a striped row display, and whether that display will be used on a sheet that displays this schedule.\n\nThe new methods:\n\n- ViewSchedule.GetStripedRowsColor() \n- ViewSchedule.SetStripedRowsColor() \n\nget and set the color applied to the indicated part of the pattern for a schedule with striped rows.\n\n<a name=\"4.2.6.2\"></a><h3 class=\"new\">2.6.2. Frozen header</h2>\n\nThe new property:\n\n- ViewSchedule.IsHeaderFrozen \n\nprovides access to read or set if the header is frozen on a given schedule.\n\n<a name=\"4.2.7\"></a><h2 class=\"new\">2.7. Path of Travel API</h2>\n\n<a name=\"4.2.7.1\"></a><h3 class=\"new\">2.7.1. Reveal Obstacles mode for Path of Travel</h2>\n\nThe Reveal Obstacles view mode highlights elements in the plan view when those elements will act as obstacles for the current Path of Travel calculation settings. The new methods:\n\n- PathOfTravel.IsInRevealObstaclesMode()\n- PathOfTravel.SetRevealObstaclesMode()\n\nprovide access to read or set if a view is displaying this mode.\n\n<a name=\"4.2.7.2\"></a><h3 class=\"new\">2.7.2. Path finding analysis for Path of Travel</h2>\n\nNew static methods added:\n\n- List&lt;XYZ&gt; PathOfTravel.FindStartsOfLongestPathsFromRooms(View view, List&lt;XYZ&gt; destinationPoints)\n\nFor a floor plan view, calculates paths from points inside rooms to the closest of the destinations.\n\nReturns the start points of the longest path(s). If multiple paths have the same longest length, returns multiple start points.\n\nThe entire plan is divided in small tiles, and the distance to the closest destination point is calculated for each tile center point. Only tile center points that are located in rooms in the view are taken into account.\n\n- List&lt;XYZ&gt; PathOfTravel.FindEndsOfShortestPaths(View view, List&lt;XYZ&gt; destinationPoints, List&lt;XYZ&gt; startPoints)\n\nFor a floor plan view, calculates the paths from each start point to its closest destination and return the path end points.\n\nThe calculation is done in a floor plan with one or more destinationPoints and one or more startPoints. \n\nThe shortest path is calculated from each start point to its corresponding closest destination.\n\n- List&lt;List&lt;XYZ&gt;&gt; PathOfTravel.FindShortestPaths(View view, List&lt;XYZ&gt; destinationPoints, List&lt;XYZ&gt; startPoints)\n\nFor a floor plan view, calculates paths from each start point to its closest destinations.\n\nReturns the path, represented by an array of XYZ points.\n\nThe calculation is done in a floor plan with one or more destinationPoints and one or more startPoints. \n\nThe shortest path is calculated from each start point to its closest destination point.\n\n<a name=\"4.2.7.3\"></a><h3 class=\"new\">2.7.3. Waypoints</h2>\n\nThe new methods:\n\n- PathOfTravel.GetWaypoints()\n- PathOfTravel.InsertWaypoint()\n- PathOfTravel.SetWaypoint()\n- PathOfTravel.RemoveWaypoint()\n\nprovide access to read and modify the waypoints associated to a particular PathOfTravel element. Waypoints force the path of travel calculation to ensure that the path includes each of the specified points, in the order specified, between the start and end points.\n\n<a name=\"4.2.8\"></a><h2 class=\"new\">2.8. Export API additions</h2>\n\n<a name=\"4.2.8.1\"></a><h3 class=\"new\">2.8.1. CustomExporter events</h2>\n\nSubscribe to the events:\n\n- Autodesk.Revit.ApplicationServices.Application.ViewsExportingByContext\n- Autodesk.Revit.ApplicationServices.Application.ViewsExportedByContext\n\nto be notified when Revit is just about to export, or has just exported, one or more views of the document via an export context by CustomExporter. \n\nHandlers of this event are permitted to make modifications to any document (including the active document), except for documents that are currently in read-only mode.\n\nThe new class:\n\n- Autodesk.Revit.DB.Events.ViewsExportingByContextEventArgs\n\nprovides information when Revit is just about to export one or more views of the document via an export context by CustomExporter.\n\nThe class has the following method:\n\n- ViewsExportingByContextEventArgs.GetViewIds() &ndash; Gets the ids of views about to be exported by CustomExporter.\n\nThe new class:\n\n- Autodesk.Revit.DB.Events.ViewsExportedByContextEventArgs\n\nprovides information when Revit has just exported one or more views of the document via an export context by CustomExporter.\n\nThe class has the following method:\n\n- ViewsExportingByContextEventArgs.GetViewIds() &ndash; Gets the ids of views that have been exported by CustomExporter.\n\n<a name=\"4.2.9\"></a><h2 class=\"new\">2.9. Options API additions</h2>\n\n<a name=\"4.2.9.1\"></a><h3 class=\"new\">2.9.1. Color options </h2>\n\nThe new class:\n\n- Autodesk.Revit.DB.ColorOptions\n\nprovides access to color settings which affect the colors applied to specific views. \n\nThe ColorOptions for the current session of Revit can be accessed via:\n\n- static ColorOptions.GetColorOptions()\n\nIt has the following properties:\n\n- BackgroundColor &ndash; The background color applied to views.\n- SelectionColor &ndash; The color used to highlight selected elements. \n- SelectionSemitransparent &ndash; Indicates whether or not selections will be shown in a semi-transparent manner. \n- PreselectionColor &ndash; The color used to highlight candidates for selection before they are selected. \n- AlertColor &ndash; The color used to highlight elements when a special alert is required. \n- CalculatingColor &ndash; The color used to render elements when some aspect of their properties is currently being recalculated.\n- EditingColor &ndash; The color used to render elements when editing.\n\n<a name=\"4.2.10\"></a><h2 class=\"new\">2.10. Geometry API additions</h2>\n\n<a name=\"4.2.10.1\"></a><h3 class=\"new\">2.10.1. Surfaces</h2>\n\nThe new class:\n\n- Autodesk.Revit.DB.OffsetSurface\n\nencapsulates the mathematical representation of a surface offset at a normal distance from an originating surface.\n\nThe new method:\n\n- Surface.GetBoundingBoxUV() \n\ngets the UV bounding box of the surface.\n\nThe new class:\n\n- Autodesk.Revit.DB.CurveUV\n\nrepresents the notion of a curve in the 2D parameter space of a surface in 3D space. This class includes a utility method:\n\n- CurveUV.As3DCurveInXYPlane()\n\nthat returns a 3D curve lying in the XY plane in XYZ coordinates, representing the 2D curve with its UV coordinates identified with XY coordinates.\n\n<a name=\"4.2.10.2\"></a><h3 class=\"new\">2.10.2. Edges</h2>\n\nThe new methods:\n\n- Edge.IsFlippedOnFace(int index) \n- Edge.IsFlippedOnFace(Face face) \n\ndetermine if the edge's topological direction on the Face is opposite to its parametric direction.\n\nThe new class:\n\n- EdgeEndPoint &ndash; Represents the start or the end point of an Edge.\n\nit can be used in the new method:\n\n- SolidUtils.FindAllEdgeEndPointsAtVertex()\n\nwhich will find all EdgeEndPoints at a vertex identified by the input EdgeEndPoint.\n\nThe new overloaded methods:\n\n- Edge.GetCurveUV() \n\nCalculate and (optionally) transform a 2D curve that represents the edge in the UV-parameter plane of one of the edge's faces.\n\n<a name=\"4.2.10.3\"></a><h3 class=\"new\">2.10.3. Meshes</h2>\n\nThe new members:\n\n- Mesh.GetNormal()\n- Mesh.GetNormals()\n- Mesh.DistributionOfNormals\n- Mesh.NumberOfNormals\n\nprovide information about the normal vectors contained in a Mesh.\n\n<a name=\"4.2.10.4\"></a><h3 class=\"new\">2.10.4. Geometry utilities</h2>\n\nThe new property:\n\n- GeometryObject.Id\n\nreturns a unique integer identifying the GeometryObject in its associated GeometryElement.\n\nThe new class:\n\n- Autodesk.Revit.DB.MathComparisonUtils\n\ncontains a set of mathematical utilities to compare doubles, using the Revit predefined internal tolerance.\n\nThe new classes:\n\n- Autodesk.Revit.DB.Transform1D\n- Autodesk.Revit.DB.Transform2D\n\nrepresenting an affine transform of 1D or 2D Euclidean space.\n\nThe new property:\n\n- BoundingBoxUV.IsSet\n\nindicates whether the BoundingBoxUV is set or not.\n\n<a name=\"4.2.11\"></a><h2 class=\"new\">2.11. Image API additions</h2>\n\n<a name=\"4.2.11.1\"></a><h3 class=\"new\">2.11.1. Image properties</h2>\n\nThe new properties:\n\n- ImageType.Resolution\n- ImageType.WidthInPixels\n- ImageType.HeightInPixels\n- ImageType.Width\n- ImageType.Height\n\nprovide read access to some of the image size and resolution properties.\n\n<a name=\"4.2.11.2\"></a><h3 class=\"new\">2.11.2. Converting images between links and imports</h2>\n\nThe new property:\n\n- ImageTypeOptions.SourceType\n\nalong with the new enumerated value\n\n- ImageTypeSource\n\nwill allow you to create or convert an ImageType to a link or import.\n\nTwo new constructors take an ImageTypeSource as an argument:\n\n- ImageTypeOptions(String, Boolean, ImageTypeSource)\n- ImageTypeOptions(ExternalReference, ImageTypeSource)\n\nSeveral new methods and properties have also been added to ImageType:\n\n- ImageType.Source &ndash; Indicates how the image is created (as a link, import, or internally-generated image)\n- ImageType.Status &ndash; Indicates whether the image is loaded or unloaded (if applicable)\n- ImageType.Unload() &ndash; Unloads a linked image\n\nThe new enumeration:\n\n- ImageTypeStatus\n\ncontains possible values for the load status of an ImageType.\n\n<a name=\"4.2.12\"></a><h2 class=\"new\">2.12. Cloud Model API additions</h2>\n\n<a name=\"4.2.12.1\"></a><h3 class=\"new\">2.12.1. Regions</h2>\n\nThe new property:\n\n- ModelPath.Region\n\nreturns the region of the BIM 360 account and project which contains this model.\n\nThe new static properties:\n\n- ModelPathUtils.CloudRegionUS\n- ModelPathUtils.CloudRegionEMEA\n\nreturn the region names of different BIM 360 cloud services. They can be used as the first argument of the ModelPathUtils.ConvertCloudGUIDsToCloudPath() method.\n\n<a name=\"4.2.12.2\"></a><h3 class=\"new\">2.12.2. Opening Cloud Models</h2>\n\nThe new enumeration value:\n\n- OpenConflictScenario.VersionArchived\n\nindicates that last central version merged into the local model to open has been archived in the central model.\n\nThe new enumeration value:\n\n- OpenConflictResult.DetachFromCentral\n\nprovides the option to detach the local model from its central model, with worksets preserved.\n\n<a name=\"4.2.13\"></a><h2 class=\"new\">2.13. Structural Connection API addition</h2>\n\n<a name=\"4.2.13.1\"></a><h3 class=\"new\">2.13.1. Connections requiring additional points</h2>\n\nThe new class:\n\n- Autodesk.Revit.DB.Structure.ConnectionInputPoint\n\ncontains the 3D location and unique id for one structural connection input point.\n\nThe new class:\n\n- Autodesk.Revit.DB.Structure.ConnectionInputPointInfo\n\ncontains information about connection input points requirements, such as number of required points, a user visible description for each point, and potential location restrictions.\n\nThe new method:\n\n- Autodesk.Revit.DB.Structure.StructuralConnectionHandler.Create(Document, IList&lt;ElementId&gt;, ElementId, IList&lt;XYZ&gt;)\n\nprovides a way to create connections that require additional input points.\n\nThe following new methods use input points:\n\n- static Autodesk.Revit.DB.Structure.StructuralConnectionHandlerType.Create(Document, string, Guid, string, ElementId, IList&lt;ConnectionInputPointInfo&gt;)\n- Autodesk.Revit.DB.Structure.StructuralConnectionHandler.GetInputPoints()\n- Autodesk.Revit.DB.Structure.StructuralConnectionHandler.GetInputPoint()\n\n<a name=\"4.2.14\"></a><h2 class=\"new\">2.14. Reinforcement API additions</h2>\n\n<a name=\"4.2.14.1\"></a><h3 class=\"new\">2.14.1. Rebar constraints</h2>\n\nSeveral new RebarConstraint methods allow control over distances and spacing:\n\n- RebarConstraint.GetDistanceToTargetRebar()\n- RebarConstraint.SetDistanceToTargetRebar() \n- RebarConstraint.IsBindingHandleWithTarget() \n- RebarConstraint.SetToBindHandleWithTarget() \n- RebarConstraint.IsUsingClearBarSpacing()\n- RebarConstraint.SetToUseClearBarSpacing() \n- RebarConstraint.FlipHandleOverTarget() \n\nTwo new methods have been added to RebarConstraintsManager:\n\n- RebarConstraintsManager.GetConstraintCandidatesForHandle(RebarConstrainedHandle, ElementId)\n- RebarConstraintsManager.GetConstraintCandidatesForHandle(RebarConstrainedHandle, Reference) \n\nThese methods return all possible RebarConstraints that could be used for a RebarConstrainedHandle related to the additional input. For free form rebar these will return an empty list.\n\n<a name=\"4.2.14.2\"></a><h3 class=\"new\">2.14.2. Rebar end treatment</h2>\n\nThe new method:\n\n- Rebar.SetEndTreatmentTypeId()\n\nsets the id of the EndTreatmentType to be applied to the rebar at the specified end.\n\n<a name=\"4.2.14.3\"></a><h3 class=\"new\">2.14.3. Fabric Sheet visibility</h2>\n\nThe new methods:\n\n- FabricSheet.IsSolidInView()\n- FabricSheet.SetSolidInView()\n- FabricSheet.IsUnobscuredInView()\n- FabricSheet.SetUnobscuredInView()\n\nget and set the visibility options for a given fabric sheet instance as applied to a particular 3D view.\n\n<a name=\"4.2.14.4\"></a><h3 class=\"new\">2.14.4. Out of plane hook rotation angles</h2>\n\nSeveral new static creation methods take into account the out of plane hook rotation angle and the end treatment type id:\n\n- static Rebar.CreateFromCurves() &ndash; Creates a new instance of a shape driven Rebar element within the project, given an array of curves and properties.\n- static Rebar.CreateFromCurvesAndShape() &ndash; Creates a new instance of a shape driven Rebar element within the project, given an array of curves, a RebarShape and some properties.\n- static Rebar.RebarShapeMatchesCurvesHooksAndEndTreatment() &ndash; Checks if rebarShape matches curves, hooks and end treatment.\n- static RebarShape.Create() &ndash; Creates a new instance of a RebarShape, which defines the shape of a Rebar.\n\nThe following methods allow getting or setting the out of plan hook rotation angle:\n\n- Rebar.GetHookRotationAngle()\n- Rebar.SetHookRotationAngle()\n- RebarShape.GetHookRotationAngle()\n- RebarShape.SetHookRotationAngle()\n\nThese methods all affect the angle at the specified end.\n\n<a name=\"4.2.14.5\"></a><h3 class=\"new\">2.14.5. Hook length overrides</h2>\n\nThe following new Rebar methods enable overriding the hook length from the API:\n\n- Rebar.EnableHookLengthOverride()\n- Rebar.IsHookLengthOverrideEnabled()\n- Rebar.GetOverridableHookParameters() &ndash; Outputs the formula parameter ids defined in the RebarShape family which are associated with hook length and hook tangent length parameters.\n\n<a name=\"4.2.15\"></a><h2 class=\"new\">2.15. Material API addition</h2>\n\nThe new property: \n\n- StructuralAsset.MetalThermallyTreated\n\nindicates whether the asset describes a material that is thermally treated or not, corresponding to the BuiltInParameter member PHY_MATERIAL_PARAM_STRUCTURAL_THERMAL_TREATED.\n\n<a name=\"4.2.16\"></a><h2 class=\"new\">2.16. Analysis Visualization Framework API addition</h2>\n\nThe new property:\n\n- SpatialFieldManager.AllowInteractiveSettings\n\ntoggles the ability to access the Analysis Visualization Framework (AVF) settings for a particular set of results. This property is true by default. If the property is set to false, all AVF dialogs are unreachable in the UI.\n\nAlso, if the property is set to false, deletion of the SpatialFieldManager, its parts or associated AnalysisDisplayLegend element is prohibited.\n\n<a name=\"4.2.17\"></a><h2 class=\"new\">2.17. Shared Coordinates API additions</h2>\n\n<a name=\"4.2.17.1\"></a><h3 class=\"new\">2.17.1. Internal Origin </h2>\n\nThe new class:\n\n- Autodesk.Revit.DB.InternalOrigin\n\nrepresents the origin of Revit's internal coordinate system. Each Revit project contains one InternalOrigin.\n\nIt has the following members:\n\n- static InternalOrigin.Get(Document doc) &ndash; Returns the internal origin of the project. There is one InternalOrigin per document.\n- InternalOrigin.Position &ndash; Read-only property which returns the XYZ value of the internal coordinates.\n- InternalOrigin.SharedPosition &ndash; Read-only property which returns the shared position of the internal origin based on the active ProjectLocation of its Document.\n\n<a name=\"4.2.17.2\"></a><h3 class=\"new\">2.17.2. BasePoint</h2>\n\nTwo new methods provide access to the base and survey point:\n\n- static BasePoint.GetProjectBasePoint() \n- static BasePoint.GetSurveyPoint()"
  }
]