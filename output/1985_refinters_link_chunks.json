[
  {
    "original_filename": "1985_refinters_link",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n</head>\n\n<!---\n\n- ReferenceIntersector+BoundingBoxIntersectsFilter fails on RevitLinkInstance ?\n  https://forums.autodesk.com/t5/revit-api-forum/referenceintersector-boundingboxintersectsfilter-fails-on/td-p/11782120\n\n- this addin support exporting IFC from specific view now. I just added this support to it.\n  https://github.com/yiskang/forge-revit-ifc-exporter-appbundle#export-only-elements-visible-in-the-given-view-unique-id-via-inline-json\n  email [Internal discussions //Re: [EXT]:RE: Autodesk Forge]\n  Eason\n\n- Eason also pointed out this neat use of the stable representation voodoo\n  https://autodesk.slack.com/archives/C0SR6NAP8/p1677833276435759\n  Do we have updates for the old opening ticket REVIT-141823 ?\n  We got a similar case of creating dimensions between grids in host and liked Duct elements with Revit 2020 via SFDC#20157388, but I can also reproduce this issue with Revit 2023.\n  Although we can workaround this by transforming linked element’s reference like below, it’s not ideal.\n  This approach seems only work for liner dimension with my tests.\n  So, I wonder if we can get the liked element reference in host w/o doing this. Thank you!\n  https://forums.autodesk.com/t5/revit-api-forum/create-dimensions-for-familyinstance-in-linked-file/m-p/8442391\n\ntwitter:\n\nUsing reference intersector with linked files and filters, installing large language models locally, an APS DA4R IFC exporter and dimensioning linked element voodoo with the @AutodeskRevit #RevitAPI #BIM @DynamoBIM @AutodeskAPS https://autode.sk/linkintersector\n\nPros and cons of the reference intersector and how to use it with linked files and filtered element collectors, a design automation IFC exporter, dimensioning linked elements using the reference stable representation and new forays with large language models\n&ndash; Reference intersector with filters and links\n&ndash; Revit IFC exporter for APS DA\n&ndash; Stable representation voodoo with links\n&ndash; Running Dalai LLaMa locally\n&ndash; ChatGPT invented a game...\n\nlinkedin:\n\nUsing reference intersector with linked files and filters, installing large language models locally, an APS DA4R IFC exporter and dimensioning linked element voodoo with the #RevitAPI\n\nhttps://autode.sk/linkintersector\n\n- Otto Desć\n- Reference intersector with filters and links\n- Revit IFC exporter for APS DA\n- Stable representation voodoo with links\n- Running Dalai LLaMa locally\n- ChatGPT invented a game...\n\n#BIM #DynamoBim #AutodeskAPS #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n<pre class=\"code\">\n</pre>\n\n-->"
  },
  {
    "original_filename": "1985_refinters_link",
    "header_text": "IFC, Dimension and Reference Intersector with Links",
    "local_header_href": "#ifc-dimension-and-reference-intersector-with-links",
    "chunk_text": "### IFC, Dimension and Reference Intersector with Links\n\nAn extensive discussion on pros and cons of the reference intersector and how to use it with linked files and filtered element collectors, an update to the design automation IFC exporter, dimensioning with linked elements using the reference stable representation and some new forays with large language models:\n\n- [Otto Desć](#1)\n- [Reference intersector with filters and links](#2)\n- [Revit IFC exporter for APS DA](#3)\n- [Stable representation voodoo with links](#4)\n- [Running Dalai LLaMa locally](#5)\n- [ChatGPT invented a game &ndash; creative?](#6)\n\nBefore we get to the main topic, let's briefly mention"
  },
  {
    "original_filename": "1985_refinters_link",
    "header_text": "Otto Desć",
    "local_header_href": "#1",
    "chunk_text": "####<a name=\"1\"></a> Otto Desć\n\nThe Oscar ceremony was punctuated by a series of advertisements by Autodesk.\nSome pay homage to a mythical filmmaker and visual effects specialist named Otto Desćinski, or Otto Desć to his friends, e.g.,\nthe two-minute spot [Autodesk makes the software that makes the magic](https://youtu.be/MqMg9iAjwdw):\n\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/MqMg9iAjwdw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>"
  },
  {
    "original_filename": "1985_refinters_link",
    "header_text": "Reference Intersector with Filters and Links",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Reference Intersector with Filters and Links\n\nA lot of interesting information and insights on pros and cons based on years of experience on using the reference intersector in conjunction with other filters and in linked files was discussed\nby Richard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas\nand Thomas Mahon of [Bimorph](https://bimorph.com) in the question\non [`ReferenceIntersector` + `BoundingBoxIntersectsFilter` fails on `RevitLinkInstance`](https://forums.autodesk.com/t5/revit-api-forum/referenceintersector-boundingboxintersectsfilter-fails-on/td-p/11782120) raised\nby Chris Hanschen of [LKSVDD architecten](https://www.lksvdd.nl):\n\n**Question:** I am a big fan of the ReferenceIntersector filter, finding elements like that is great!\n\nIn the post\non [how to use the `ElementIntersectsElementFilter` from the `RevitLinkInstance`](https://forums.autodesk.com/t5/revit-api-forum/how-to-use-the-elementintersectselementfilter-from-the/m-p/8440204),\nJeremy explains this slow filter and the use of combinations of filters.\nThe combination of `BoundingBoxIntersectsFilter` and `ReferenceIntersector` can boost the performance of the slow ReferenceIntersector Filter.\nEven when using linked models, the ReferenceIntersector can find the link (at first) and the `ReferenceWithContext` can give you information about the element in the RevitLinkInstance, works great!\n\nWhen the RevitLinkInstance is NOT moved, the combination of ReferenceIntersector + BoundingBoxIntersectsFilter works great, but when the RevitLinkInstance is moved, no elements are found.\n\nIt seems as if the BoundingBoxIntersectsFilter not only filters elements in the opened model, but also the elements in the linked model, by checking their coordinates or something.\n\nBut, when the RevitLinkInstance is moved in your opened models, the coordinates are different, and the BoundingBoxIntersectsFilter fails.\n\nIn this situation, the linked model is not found within the BoundingBoxIntersectsFilter, by the ReferenceIntersector, although it is there!\n\n<!--\nReferenceIntersector and BoundingBoxIntersectsFilter.png\nreferenceintersector_with_link_that_moved.png\nreferenceintersector_with_link_01.png\n-->\n\n<center>\n<img src=\"img/referenceintersector_with_link_01.png\" alt=\"ReferenceIntersector and BoundingBoxIntersectsFilter\" title=\"ReferenceIntersector and BoundingBoxIntersectsFilter\" width=\"600\"/> <!-- Pixel Height: 433, Pixel Width: 1,006 -->\n</center>\n\nThe ray really hits the linked model, the linked element, within the (local) BoundingBoxIntersectsFilter, but nothing is found.\n\nLooks like the ReferenceIntersector + BoundingBoxIntersectsFilter fails on moved RevitLinkInstance.\n\nAm I doing something wrong or does the BoundingBoxIntersectsFilter really fail on the moved (elements in the) RevitLinkInstance?\n\n**Answer:** Interesting question. The development team explain:\nSince the filters mentioned do not know about the link's transform, they assume no transform exists.\nYou can't really affect the ElementInteresectsElementFilter, as it looks directly at the Element's geometry within the link, but you can apply the transform to the bounding box for BoundingBoxIntersectsFilter before you pass it in.\nNote that rotations might cause a different size bounding box to be generated as the input bounding box is always aligned with whatever coordinate system is in the host model.\n\n**Response:** Applying the transform to the bounding box for the BoundingBoxIntersectsFilter before passing it in would only be a possibility when you are just investigating this one link, no other links (with different transform) or elements in the opened model with the same Ray.\n\nYou say the filters mentioned do not know about the link's transform... Why not? When hitting a RevitLinkInstance, the transform is known, can't this be used?\n\nThe ReferenceIntersector is a great way to find ALL elements (multiplex links, with different transforms, and model elements) at the same time, with just 1 Ray. But it is a slow filter, so you want to be able to speed this up by using BoundingBoxIntersectsFilter. The Elements are there! the RevitLinkInstance should be found.\n\nIs there a way to get this working properly?\n\n**Answer (R):** Filters work within the current document only, so the bounding box is relevant to the space within that, i.e., within link document.\nThe link document doesn't know where it is placed in the host document, since that is information associated with the link instance in the host document.\nHence, that is why the filter doesn't know.\n\nThe ReferenceIntersector is not a slow filter, or any kind of filter at all; it is a utility to strike something with a ray based on origin and direction.\nThe ReferenceIntersector works within the current document where the various links take up a final specific known position; so, it is not analogous to an element filter or limitation of such.\n\nThe ReferenceIntersector will only find things based upon visibility of the elements in the 3D view provided.\nSo, that is one way of filtering beforehand what the RefereceIntersector strikes.\nAlthough visibility control of elements in links via the API is fairly limited still.\nRegarding links, the suggestion I believe is to transform the bounding box into the space of the linked document.\n\nNot sure I follow your issue with transforming the bounding box to the link space.\nIf you have a link instance in multiple positions, then you only need to check one instance of that link.\nSince transforming the box into the link document will result in the same target position in the link document?\nDepends how you are using the bounding box filter to begin with?\nYou are interested in a certain region, so what link instances are in that region to transform the box into and check for initial elements?\n\nThe only real limitation, as mentioned, is that the bounding box is parallel to the document space and this may not be the same in the linked document as the host document.\nSince the object you use is `Outline`, and that doesn't have a transform to give you an alternative orientation for the model it is used in.\nHowever, it is a rough exercise for an initial coarse result.\nI would probably create the bounding box corner points in the host document for a box aligned with the link transform axis, so that they match up when transformed into the link.\nIf you create the corner points based on a box aligned with the host document, then it may not represent the same when those points are transformed into the associated linked document positions.\n\n**Response:** My issue: combination of BoundingBoxIntersectsFilter and ReferenceIntersector fails for LinkedDocumentElements, and it fails only when the LinkedInstance is moved.\nI understand why, and I understand this is not easily solved, but for now I can't use this combination of filters.\nThe use of only ReferenceIntersector gives me the result I need, but when firering more than 1000 rays, the use of only ReferenceIntersector is way slower than the combination of these 2 filters.\nThe geometry is there, at the location given, in the 3D view given, so i did not for see this behavior.\n\nStill a huge fan of the ReferenceIntersector Filter, but a little bit disappointed in the combination of these filters.\n\n**Answer (R):** You know the link instance position via its transform, so you know where the bounding box needs to be relocated to suit that.\nBelow is some code that demonstrates using a logical `OR` filter with bounding box for each inverse link instance location.\nI tested this on two instances of the same link relocated from where they were inserted (X=0, Y=0):\n\n<center>\n<img src=\"img/referenceintersector_with_link_02.png\" alt=\"ReferenceIntersector with two link instances\" title=\"ReferenceIntersector with two link instances\" width=\"490\"/> <!-- Pixel Height: 572, Pixel Width: 845 -->\n</center>\n\n<pre class=\"prettyprint\">\n  Private Function Obj_230305a(ByVal commandData As Autodesk.Revit.UI.ExternalCommandData,\nByRef message As String, ByVal elements As Autodesk.Revit.DB.ElementSet) As Result\n\n    Dim UIApp As UIApplication = commandData.Application\n    Dim UIDoc As UIDocument = commandData.Application.ActiveUIDocument\n    If UIDoc Is Nothing Then Return Result.Cancelled Else\n    Dim IntDoc As Document = UIDoc.Document\n\n    Dim FEC As New FilteredElementCollector(IntDoc)\n    Dim RvtLnks As List(Of RevitLinkInstance) =\n        FEC.OfClass(GetType(RevitLinkInstance)).OfType(Of RevitLinkInstance).ToList\n\n    Dim BBOrds As XYZ() = New XYZ(1) {New XYZ(-11.3, 10, -1), New XYZ(2.3, 31.9, 0.1)}\n    Dim EFs As ElementFilter() = New ElementFilter(RvtLnks.Count - 1) {}\n\n    For i = 0 To RvtLnks.Count - 1\n      Dim RInst As RevitLinkInstance = RvtLnks(i)\n      Dim Tinv As Transform = RInst.GetTransform.Inverse\n      Dim Min As XYZ = Tinv.OfPoint(BBOrds(0))\n      Dim Max As XYZ = Tinv.OfPoint(BBOrds(1))\n      Dim OL As New Outline(Min, Max)\n      EFs(i) = New BoundingBoxIsInsideFilter(OL)\n    Next\n\n    Dim LorF As New LogicalOrFilter(EFs.ToList)\n    Dim V3D As View3D = TryCast(UIDoc.ActiveGraphicalView, View3D)\n    If V3D Is Nothing Then Return Result.Cancelled Else\n\n    Dim REFInt As New ReferenceIntersector(LorF, FindReferenceTarget.Element, V3D) With {.FindReferencesInRevitLinks = True}\n\n    Dim R As Reference = Nothing\n    Try\n      R = UIDoc.Selection.PickObject(Selection.ObjectType.Element, \"Pick ray line\")\n    Catch ex As Exception\n      Return Result.Cancelled\n    End Try\n    Dim CE As CurveElement = TryCast(IntDoc.GetElement(R), CurveElement)\n    If CE Is Nothing Then Return Result.Cancelled Else\n    Dim LN As Line = TryCast(CE.GeometryCurve, Line)\n    If LN Is Nothing Then Return Result.Cancelled Else\n\n    Dim Res As List(Of ReferenceWithContext) = REFInt.Find(LN.GetEndPoint(0), LN.Direction)\n\n    For i = 0 To Res.Count - 1\n      Dim RwC As ReferenceWithContext = Res(i)\n      Dim Rf As Reference = RwC.GetReference\n      Debug.WriteLine($\"{Rf.ElementId.IntegerValue}, {Rf.LinkedElementId?.IntegerValue}, {RwC.Proximity}\")\n    Next\n    Return Result.Succeeded\n\n  End Function\n</pre>\n\nOutput:\n\n<pre>\n432129, 432128, 6.68864267244516\n432129, 432128, 3.38973099408717\n432129, 432168, 13.2864660291611\n432129, 432168, 9.98755435080315\n432142, 432128, 17.9884761277055\n432142, 432128, 14.6895644493475\n432142, 432168, 24.5862994844214\n432142, 432168, 21.2873878060635\n</pre>\n\nEight faces, two linked element ids in each of the two element ids representing link instances i.e. four unique permutations of ElementId, LinkedElementId.\n\nCan be noted that the faces are not returned in order of proximity.\n\nNote no link instance in position where bounding box points are transformed to in host document:\n\n<center>\n<img src=\"img/referenceintersector_with_link_03.png\" alt=\"ReferenceIntersector with two link instances\" title=\"ReferenceIntersector  with two link instances\" width=\"493\"/> <!-- Pixel Height: 426, Pixel Width: 493 -->\n</center>\n\n**Answer (T):** The limitations you've encountered are explained in the ReferenceIntersector documentation.\n\nThe long and short of it is you have one option available to get reliable results where links are concerned, and that's using the `ReferenceIntersector` overload taking a `View3D` argument only.\nThis method is really slow, so you could follow what @RPTHOMAS108 suggested, 'transform' the BB to the location of the link instance then provide your element filter.\nThe problem with this is you'll need to do this for each link in your document and you'll end up accumulating live elements with each ReferenceIntersector + link elements from other links if their origin-to-origin location happens to coincide with your transformed BB.\nSubsequently, you'll have the additional problem of identifying duplicates and omitting them from your combined list of results once all your ReferenceIntersector's have run.\n\n<center>\n<img src=\"img/referenceintersector_with_link_04.png\" alt=\"ReferenceIntersector documentation\" title=\"ReferenceIntersector documentation\" width=\"600\"/> <!-- Pixel Height: 1,135, Pixel Width: 2,768 -->\n</center>\n\n**Answer (R):** In reality, you need only one bounding box filter per link instance, which could be combined into a logical or filter as above.\nSo, not multiple reference intersections, just a single one or one for all the links combined and one for other elements (non-linked).\nYou would need to include a non transformed bounding box if looking for elements not in links.\n\nAll of the bounding boxes used in the `OR` filter will be overlapping in a similar position if they come from a single bounding box position that the ReferenceIntersector is using to focus on in the model.\nThat transformed bounding box remote position will wrongly capture elements in the model away from the focus of the ReferenceIntersector, but the ReferenceIntersector itself will rule them out.\nI think further testing is required for cases where the link instance is moved parallel with the ReferenceIntersector ray.\nIt would probably be a good idea to separate out the links into their own ReferenceIntersector and limit the length of the ray.\nI think there are probably simple cases we can prove where the above may go wrong.\n\nIf using multiple ReferenceIntersectors, then identifying duplicates would not be a major issue.\nIn any scenario we get back an ElementId and a linked ElementId, so a comparison based on that combination could be done with Distinct/Union etc.\n\n**Answer (T):** That's a good point, but you're only going to get a unique element using `FindNearest`.\nIf you use `Find`, then you'll end up with duplicates as the BBs in a LogicOrFilter are iterated over.\nI guess it could be solved by adding all the BBs together, if they happen to intersect.\nIf they don't but are in close proximity, then the same problem will occur.\nUntransformed BBs also wont help to preclude linked elements (if the flag is set); for example, if the origin-to-origin location of the link happens to coincide with the BB, linked elements will end up in the result.\nThere's no good way to go about it really, but your suggestion to transform the bb is the way to go if thats what the @c.hanschen needs, otherwise see if there are better ways of achieving your end-goal.\n\n**Answer (R):** Yes, it is a bit more complicated than initially considered.\n\nWe get back references and I think it is true to say that the elements not in links can be found via Reference.LinkedElementId being -1.\n\nSo, we could perhaps reduce the problem to two ReferenceIntersectors one for the links where we have to filter out the non-linked elements. The second ReferenceIntersector would not have the flag set, so only find elements in the main document.\n\nI did some simple testing of problematic cases I thought would cause issues but didn't encounter such issues in practice.\nHowever I can't foresee every scenario used so suggest @c.hanschen satisfies themselves with testing the specific cases they are likely to encounter.\n\n**Answer (T):** The ReferenceIntersectors accepting linked elements will still collect any live elements in the host document if the ray hits, so removing duplicates post-process would still be necessary given this could occur in any given model.\n\nI've just discovered another problem using a filter with linked elements flagged: any live elements will be returned 3 times, irrespective of whether it passes the filter. Linked elements seem to be returned twice (which might make sense assuming the ray hits both sides of a wall element, but when omitting linked elements, only one live element is returned instead so its inconsistent?). Not sure if this is a bug?\n\nLooks like the performance hit from ReferenceIntersector(Autodesk.Revit.DB.View3D view3d) overload is the lesser of all evils!\n\n<div style=\"border: #000080 1px solid; color: #000; font-family: 'Cascadia Mono', Consolas, 'Courier New', Courier, Monospace; font-size: 10pt\">\n<div style=\"background: #f3f3f3; color: #000000; max-height: 300px; overflow: auto\">\n<ol start=\"24\" style=\"background: #ffffff; margin: 0; padding: 0;\">\n<li><span style=\"color:#0000ff\">public</span> IList&lt;<span style=\"color:#0000ff\">int</span>&gt; GetElementsFromRayshoot(</li>\n<li style=\"background: #f3f3f3\">&#160; Document document,</li>\n<li>&#160; IList&lt;BoundingBoxXYZ&gt; boundingBoxes,</li>\n<li style=\"background: #f3f3f3\">&#160; XYZ origin,</li>\n<li>&#160; XYZ rayDirection)</li>\n<li style=\"background: #f3f3f3\">{</li>\n<li>&#160; <span style=\"color:#0000ff\">var</span> filters = <span style=\"color:#0000ff\">new</span> List&lt;ElementFilter&gt;();</li>\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#0000ff\">foreach</span> (var boundingBox <span style=\"color:#0000ff\">in</span> boundingBoxes)</li>\n<li>&#160; {</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; <span style=\"color:#0000ff\">var</span> outline = <span style=\"color:#0000ff\">new</span> Outline(boundingBox.Min, boundingBox.Max);</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; filters.Add(<span style=\"color:#0000ff\">new</span> BoundingBoxIntersectsFilter(outline));</li>\n<li>&#160; }</li>\n<li style=\"background: #f3f3f3\">&nbsp;</li>\n<li>&#160; <span style=\"color:#0000ff\">var</span> logicFilter = <span style=\"color:#0000ff\">new</span> LogicalOrFilter(filters);</li>\n<li style=\"background: #f3f3f3\">&nbsp;</li>\n<li>&#160; <span style=\"color:#0000ff\">var</span> referenceIntersector = <span style=\"color:#0000ff\">new</span> ReferenceIntersector(</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; logicFilter, FindReferenceTarget.Element,</li>\n<li>&#160;&#160;&#160; document.ActiveView)</li>\n<li style=\"background: #f3f3f3\">&#160; {</li>\n<li>&#160;&#160;&#160; FindReferencesInRevitLinks = <span style=\"color:#0000ff\">true</span></li>\n<li style=\"background: #f3f3f3\">&#160; };</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#0000ff\">var</span> refWithContextResults = referenceIntersector.Find(origin, rayDirection);</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#0000ff\">var</span> elementIds = <span style=\"color:#0000ff\">new</span> List&lt;<span style=\"color:#0000ff\">int</span>&gt;();</li>\n<li>&#160; <span style=\"color:#0000ff\">foreach</span> (var refWithContext <span style=\"color:#0000ff\">in</span> refWithContextResults)</li>\n<li style=\"background: #f3f3f3\">&#160; {</li>\n<li>&#160;&#160;&#160; <span style=\"color:#0000ff\">var</span> reference = refWithContext.GetReference();</li>\n<li style=\"background: #f3f3f3\">&nbsp;</li>\n<li>&#160;&#160;&#160; <span style=\"color:#0000ff\">var</span> linkedElementId = reference.LinkedElementId;</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; <span style=\"color:#0000ff\">if</span> (linkedElementId.Equals(ElementId.InvalidElementId))</li>\n<li>&#160;&#160;&#160;&#160;&#160; elementIds.Add(reference.ElementId.IntegerValue);</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; <span style=\"color:#0000ff\">else</span></li>\n<li>&#160;&#160;&#160;&#160;&#160; elementIds.Add(linkedElementId.IntegerValue);</li>\n<li style=\"background: #f3f3f3\">&#160; }</li>\n<li>&#160; <span style=\"color:#0000ff\">return</span> elementIds;</li>\n<li style=\"background: #f3f3f3\">}</li>\n</ol>\n</div>\n</div>\n\nTest model Revit 2022:\n\n<pre>\n  BB1.Min/Max = (-12.4839, -8.3542, 0) , (-5.0602, -0.9306, 9.8425)\n  BB2.Min/Max = (-11.4847, -12.3077, 0) , (-6.0974, -10.8641, 9.8425)\n  Ray = XYZ.BasisX\n  Origin = BB1.Min with Z+3\n</pre>\n\n<!--\nTestProject.rvt\nProject1.rvt\n-->\n\n**Answer (R):** Interesting; I think it is varying the option set for FindReferenceTarget in order to find the elements (by nested references) in the link; then, as a consequence of that, it reports the references of the elements outside of the link.\n\n<pre>\nFindReferencesInRevitLinks = True, FindReferenceTarget.Element\n309836, 309843, REFERENCE_TYPE_SURFACE, 3.76375750430962 (Linked wall near face)\n309836, 309843, REFERENCE_TYPE_SURFACE, 4.71520107386343 (Linked wall far face)\n310123, -1, REFERENCE_TYPE_SURFACE, 2.84087372715355 (Wall far face)\n310123, -1, REFERENCE_TYPE_SURFACE, 1.39730417334777 (Wall near face)\n310123, -1, REFERENCE_TYPE_NONE, 1.39730417334777 (Wall element)\n\n'FindReferencesInRevitLinks = False, FindReferenceTarget.Element\n310123, -1, REFERENCE_TYPE_NONE, 1.39730417334777 (Wall element)\n\n'FindReferencesInRevitLinks = False, FindReferenceTarget.All\n310123, -1, REFERENCE_TYPE_SURFACE, 2.84087372715355 (Wall far face)\n310123, -1, REFERENCE_TYPE_SURFACE, 1.39730417334777 (Wall near face)\n310123, -1, REFERENCE_TYPE_NONE, 1.39730417334777 (Wall element)\n</pre>\n\n<center>\n<img src=\"img/referenceintersector_with_link_05.png\" alt=\"ReferenceIntersector with distances\" title=\"ReferenceIntersector with distances\" width=\"433\"/> <!-- Pixel Height: 435, Pixel Width: 433 -->\n</center>\n\nI've not checked regarding inclusion of elements outside of bounding box scope.\nCurrently, using the `OR` filter, I would have expected the two walls captured by the `OR` combination of the two bounding boxes.\nWhen in reality only the top bounding box was required to capture both.\nI think however it does demonstrate that the ReferenceIntersector isn't internally processing the two bounding boxes for the check in an unconsolidated way.\n\nI think also we have not considered nested links but they are all instanced top level in reality. The requirement to supply a 3D view for the ReferenceIntersector often puts me off using it since there is the requirement to ensure the elements you are looking for are visible in the view and we know elements can be not visible for numerous reasons.\n\nI wouldn't be using the ReferenceIntersector to find elements unless I knew the type of elements I was looking for with it i.e. unless I could limit the search to certain categories and understand what affects the visibility of such.\n\nThe bounding box and ReferenceIntersector combination is a bit of an odd one anyway since you know where the ray is pointing so know the region the bounding box should occupy. The bounding box size then therefore becomes about the extents along the ray to capture. The wider those extents the larger the overall bounding box but the ray should ideally pass through the centre of it (why put the box somewhere the ray will not hit).  Would be easier to rule out the rays that don't pass through the box to start with if using some mass ray casting approach.\n\n**Answer (T):** I would avoid using the ReferenceIntersector if possible; it's too inefficient.\nCoincidentally, we just removed calls to the ReferenceIntersector in one of our apps having used it for over 2 years.\nWe found that as modelling complexity increased over this time, so did compute time, resulting in a performance increase of around 95% once we replaced it with an alternative (surface projection once, then storing this result in our object model).\n\nThe ReferenceIntersector is also inconsistent if other types of element filter are used, so, returning to the original post, your best bet (simple, consistent but slow) is to use the `ReferenceIntersector` overload taking <i>Autodesk.Revit.DB.View3D view3d</i>, as addition of filters create more problems than they solve; otherwise, see if there are alternatives you can use.\n\n**Response:** Thanks for all your replies!\nI agree with the final conclusion: combining the RefIntersector with other Filters creates more problems than it solves! Using Transform to change the Boundingboxfilter is no solution, it has to be done for all the link instances, so same conclusion here: creates more problems than it solves.\nThanks again for all your replies! Much appreciated!"
  },
  {
    "original_filename": "1985_refinters_link",
    "header_text": "Revit IFC Exporter for APS DA",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Revit IFC Exporter for APS DA\n\nMy colleague Eason [@yiskang](https://twitter.com/yiskang) Kang updated\nhis [Revit IFC exporter for APS Design Automation](https://github.com/yiskang/forge-revit-ifc-exporter-appbundle#export-only-elements-visible-in-the-given-view-unique-id-via-inline-json).\nIt demonstrates how to implement a Revit exporter appbundle for the APS Design Automation API that supports the Revit IFC export options.\nHe now enhanced it to also support exporting IFC from a specific view.\nMany thanks to Eason for implementing and documenting this useful solution!"
  },
  {
    "original_filename": "1985_refinters_link",
    "header_text": "Stable Representation Voodoo with Links",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Stable Representation Voodoo with Links\n\nEason also pointed out a neat use of the stable representation voodoo mentioned in the thread\non [creating dimensions for family instance in linked file](https://forums.autodesk.com/t5/revit-api-forum/create-dimensions-for-familyinstance-in-linked-file/m-p/8442391).\n\nI want to create dimensions between grids in host and linked duct elements.\nI have not found an official approach to address this need and am currently working around it by transforming the linked element’s reference like this:\n\n\n<div style=\"border: #000080 1px solid; color: #000; font-family: 'Cascadia Mono', Consolas, 'Courier New', Courier, Monospace; font-size: 10pt\">\n<div style=\"background: #f3f3f3; color: #000000; max-height: 300px; overflow: auto\">\n<ol start=\"24\" style=\"background: #ffffff; margin: 0; padding: 0;\">\n<li><span style=\"color:#0000ff\">private</span> Reference MakeLinkedReference4Dimension(Document doc, Reference r)</li>\n<li style=\"background: #f3f3f3\">{</li>\n<li>&#160; <span style=\"color:#0000ff\">if</span> (r.LinkedElementId == ElementId.InvalidElementId) <span style=\"color:#0000ff\">return</span> <span style=\"color:#0000ff\">null</span>;</li>\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#0000ff\">string</span>[] ss = r.ConvertToStableRepresentation(doc).Split(<span style=\"color:#a31515\">&#39;:&#39;</span>);</li>\n<li>&#160; <span style=\"color:#0000ff\">string</span> res = <span style=\"color:#0000ff\">string</span>.Empty;</li>\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#0000ff\">bool</span> first = <span style=\"color:#0000ff\">true</span>;</li>\n<li>&#160; <span style=\"color:#0000ff\">foreach</span> (<span style=\"color:#0000ff\">string</span> s <span style=\"color:#0000ff\">in</span> ss)</li>\n<li style=\"background: #f3f3f3\">&#160; {</li>\n<li>&#160;&#160;&#160; <span style=\"color:#0000ff\">string</span> t = s;</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; <span style=\"color:#0000ff\">if</span> (s.Contains(<span style=\"color:#a31515\">&quot;RVTLINK&quot;</span>))</li>\n<li>&#160;&#160;&#160; {</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160;&#160;&#160; <span style=\"color:#0000ff\">if</span> (res.EndsWith(<span style=\"color:#a31515\">&quot;:0&quot;</span>)) { t = <span style=\"color:#a31515\">&quot;RVTLINK&quot;</span>; }</li>\n<li>&#160;&#160;&#160;&#160;&#160; <span style=\"color:#0000ff\">else</span> { t = <span style=\"color:#a31515\">&quot;0:RVTLINK&quot;</span>; }</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; }</li>\n<li>&#160;&#160;&#160; <span style=\"color:#0000ff\">if</span> (!first)</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; {</li>\n<li>&#160;&#160;&#160;&#160;&#160; res = <span style=\"color:#0000ff\">string</span>.Concat(res, <span style=\"color:#a31515\">&quot;:&quot;</span>, t);</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; }</li>\n<li>&#160;&#160;&#160; <span style=\"color:#0000ff\">else</span></li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; {</li>\n<li>&#160;&#160;&#160;&#160;&#160; res = t;</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160;&#160;&#160; first = <span style=\"color:#0000ff\">false</span>;</li>\n<li>&#160;&#160;&#160; }</li>\n<li style=\"background: #f3f3f3\">&#160; }</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\">&#160; res += <span style=\"color:#a31515\">&quot;:0:LINEAR&quot;</span>; <span style=\"color:#008000\">//!&lt;&lt;&lt; this line added by ADN team</span></li>\n<li>&#160; <span style=\"color:#0000ff\">return</span> Reference.ParseFromStableRepresentation(doc, res);</li>\n<li style=\"background: #f3f3f3\">}</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#0000ff\">var</span> ductRef1 = <span style=\"color:#0000ff\">new</span> Reference(duct1);</li>\n<li>&#160; Reference ductRefInHost = <span style=\"color:#0000ff\">null</span>;</li>\n<li style=\"background: #f3f3f3\">&#160; Transform linkTtransform = <span style=\"color:#0000ff\">null</span>;</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#0000ff\">using</span> (<span style=\"color:#0000ff\">var</span> collector = <span style=\"color:#0000ff\">new</span> FilteredElementCollector(<span style=\"color:#0000ff\">this</span>.Document))</li>\n<li>&#160; {</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; <span style=\"color:#0000ff\">var</span> instance = collector.OfClass(<span style=\"color:#0000ff\">typeof</span>(RevitLinkInstance)).FirstElement() <span style=\"color:#0000ff\">as</span> RevitLinkInstance;</li>\n<li>&#160;&#160;&#160; linkTtransform = instance.GetTotalTransform();</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; ductRefInHost = ductRef1.CreateLinkReference(instance);</li>\n<li>&#160;&#160;&#160; ductRefInHost = <span style=\"color:#0000ff\">this</span>.MakeLinkedReference4Dimension(<span style=\"color:#0000ff\">this</span>.Document, ductRefInHost);</li>\n<li style=\"background: #f3f3f3\">&#160; }</li>\n</ol>\n</div>\n</div>\n\nThis solution is not ideal and seems only work for liner dimension with my tests.\nI wonder if we can get the linked element reference in host without doing this."
  },
  {
    "original_filename": "1985_refinters_link",
    "header_text": "Running Dalai LLaMa Locally",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Running Dalai LLaMa Locally\n\nDalai provides a 'dead simple way' to run LLaMA on your computer:\n\n- [GitHub](https://github.com/cocktailpeanut/dalai)\n- [Twitter](https://twitter.com/cocktailpeanut)\n\nHuh? What is LLaMa?\n\nLLaMa is\na [large language model](https://en.wikipedia.org/wiki/Large_language_model) from\nMeta AI, similar to GPT, cf.\nthe [list of large language models](https://en.wikipedia.org/wiki/Large_language_model#List_of_large_language_models).\n\nI went ahead and tried out the 'dead simple' approach.\nAll I did was enter the two prompts suggested, one to download and build, the second to run locally.\nMy first attempt to download and build failed after ten minutes or so, the second succeeded with no changes or intervention from my side.\nSo, after less than half an hour and just two command line prompts, I was up and running my own local LLaMa instance.\n\nLLaMa handles prompts differently (and maybe less conveniently) than ChatGPT.\nFor example, if you want to know why the sky is blue, don't submit \"Why is the sky blue?\".\nInstead, submit \"The sky is blue because:\" and press enter.\n\nI followed that advice and prompted \"The sky is blue because:\".\nThe answer was rather weird.\nNext, I tried \"Gandhi is famous for:\".\nThat produced a very sensible result, although I was surprised how long it went on for.\nI noticed the parameter `n_predict` was set to 1000 and reduced it to 100.\nWith that setting, I was very happy indeed with the response to my third prompt, \"grass is green because\":\n\n> grass is green because of the chlorophyll in leaves, but it would not be green without light.\nLight energy enters plants through their surface and converts to chemical potential for growth;\nthis process takes place throughout most plant tissues including veins that conduct water and\nnutrients from roots upwardly into growing shoots or leaf blades (Figure 1).\nThis is a fundamental dynamic of photosynthesis, the conversion of light energy by plants using CO2.\nIn addition to being an important\n\nI see no Figure 1, and the result breaks off midsentence, after 79 words, including my four-word prompt.\nBut apparently `n_predict` really does control more or less how much to spout.\n\nA final prompt to finish off, \"The Revit API enables us to\":\n\n> The Revit API enables us to create our own custom applications for Revit.\nThere is a huge amount of functionality built into the base application which\nwe can use as-is, but there are also opportunities here that have not been\ncovered by Autodesk yet in their main product offerings (in my opinion).\nFor example – I’ve written an extension to allow users to create Revit\nfamilies from within Inventor.\nThis is a post about using the API to write applications for our own needs, so\n\nThis answer seems to include a pretty specific quote.\nI repeated the same prompt several times.\nThe result was completely different for each, and each sounded as if taken from some specific source document.\n\n<center>\n<img src=\"img/dalai_llama.png\" alt=\"Dalai LLaMa\" title=\"Dalai LLaMa\" width=\"600\"/> <!-- Pixel Height: 821, Pixel Width: 1,000 -->\n</center>\n\nLLaMa does not seem to be as fine-tuned, well-managed and creative as ChatGPT (cf. [below](#6)),\nbut seems like a fun, useful and very impressive thing to have installed locally on my own system.\n\nI tried it a few more times after writing this and am not so impressed after all.\nChatGPT is much more to my liking.\nI wish I could install that locally."
  },
  {
    "original_filename": "1985_refinters_link",
    "header_text": "ChatGPT Invented a Game &ndash; Creative?",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> ChatGPT Invented a Game &ndash; Creative?\n\n[A puzzle aficionado used ChatGPT to create a new game that's basically 'reverse Sudoku'](https://www.businessinsider.com/sudoku-like-puzzle-game-online-chatgpt-sumplete-2023-3).\n\nThe result is online and has had tens of thousands of visitors play already:\n\n- [Sumplete](https://sumplete.com)\n\n<center>\n<img src=\"img/sumplete.png\" alt=\"Sumplete\" title=\"Sumplete\" width=\"400\"/> <!-- Pixel Height: 9xx, Pixel Width: 600 -->\n</center>"
  }
]