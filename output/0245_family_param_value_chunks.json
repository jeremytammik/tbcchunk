[
  {
    "original_filename": "0245_family_param_value",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0245_family_param_value",
    "header_text": "Family Parameter Value",
    "local_header_href": "#family-parameter-value",
    "chunk_text": "<h3>Family Parameter Value</h3><p>Pramod asked an interesting \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html#comment-6a00e553e1689788330120a6a4cd6f970c\">\nquestion</a> on \n\nobtaining the values of family parameters in a family document which led me to explore this topic and discover a little more complexity than I was originally expecting:\n\n<p><strong>Question:</strong> We are using the API of Revit Architecture 2010. \nWe want to get all Parameters and their values from the Family document. \nWe are referring to the AutoParameter example from the Revit SDK. \nWith the help of this example, we are able to get parameters of Family, but didn't get any property or method for getting Value of those parameters. \nSo please give any code example for getting values of the Family Parameters.\n\n<p><strong>Answer:</strong> I dug around a bit to provide an answer for you, and was surprised at the result.\nI had not previously noticed the additional level of indirection required to access a family parameter value.\n\n<p>Before we start working on reading family parameter values, let me mention that the addParameters method in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/revit-family-creation-api-labs.html\">\nRevit Family API labs</a>\n\nprovides a sample demonstrating how to create family parameters and set their values.\n\n<p>The family has two main aspects, the geometry and the parameter data. Some of the parameters can be used to drive the geometry, so the two areas are interlinked. The data is stored in parameters, and the family contains a set of predefined types which already have predefined values for certain parameters. The family parameter has a pointer to its definition which specifies the name and data type, just like a project parameter. However, it does not have a parameter value, because the values are specific to the family types. Instead, each family type has its own value for each of the family parameters.\n\n<p>One of the main objects in the family document is its family manager, which manages its family types and parameters. A family parameter looks a lot like a normal Revit parameter on a BIM element instance, and has many of the same properties such as the Definition property which defines the parameter name and data type. The big difference between a family and a non-family parameter is that the latter has a value and the former does not.\n\n<p>In a project document, a parameter has a pointer to the parameter definition which defines its name and data type and other properties, and the main data item of the individual parameter is its own personal parameter value. A family parameter has one additional level of complexity and indirection, since the family parameter values are defined individually for each of the family types.\n\n<p>When you retrieve a value for a parameter from a family type, you have to supply the family parameter instance to specify which parameter value to retrieve. \n\n<p>I created a new Building Coder sample command named CmdFamilyParamValue to demonstrate how to read the values of family parameters.\n\n<p>First of all, it ensures that we are running in a family document:\n\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n<span class=\"blue\">if</span>( !doc.IsFamilyDocument )\n{\n  message =\n    <span class=\"maroon\">\"Please run this command in a family document.\"</span>;\n}\n<span class=\"blue\">else</span>\n</pre>\n<p>In order to retrieve a parameter value from a family type, we need to provide a pointer to the family parameter instances that we are interested in, so we start off by creating a dictionary containing all the family parameters and mapping their names to the corresponding object instances:\n\n<pre class=\"code\">\n<span class=\"teal\">FamilyManager</span> mgr = doc.FamilyManager;\n \n<span class=\"blue\">int</span> n = mgr.Parameters.Size;\n \n<span class=\"teal\">Debug</span>.Print(\n  <span class=\"maroon\">\"\\nFamily {0} has {1} parameter{2}.\"</span>,\n  doc.Title, n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n<span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">FamilyParameter</span>&gt; fps\n  = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">FamilyParameter</span>&gt;( n );\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyParameter</span> fp <span class=\"blue\">in</span> mgr.Parameters )\n{\n  <span class=\"blue\">string</span> name = fp.Definition.Name;\n  fps.Add( name, fp );\n}\n<span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;( fps.Keys );\nkeys.Sort();\n</pre>\n<p>I create a sorted list of the parameter names, so that the final result will be sorted and thus more readable.\n\n<p>Before we move on to the iteration over the family types and determining the family parameter values for each, here is a helper method to retrieve and format the family parameter value as a string.\nI noticed that a string-valued parameter value can only be retrieved using AsString, and AsValueString returns an empty string for it, so I implemented a switch statement and an optimal specialised access and display for each storage type:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> FamilyParamValueString( \n  <span class=\"teal\">FamilyType</span> t, \n  <span class=\"teal\">FamilyParameter</span> fp, \n  <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"blue\">string</span> value = t.AsValueString( fp );\n  <span class=\"blue\">switch</span>( fp.StorageType )\n  {\n    <span class=\"blue\">case</span> <span class=\"teal\">StorageType</span>.Double:\n      value = <span class=\"teal\">Util</span>.RealString(\n        ( <span class=\"blue\">double</span> ) t.AsDouble( fp ) )\n        + <span class=\"maroon\">\" (double)\"</span>;\n      <span class=\"blue\">break</span>;\n \n    <span class=\"blue\">case</span> <span class=\"teal\">StorageType</span>.ElementId:\n      <span class=\"teal\">ElementId</span> id = t.AsElementId( fp );\n      <span class=\"teal\">Element</span> e = doc.get_Element( <span class=\"blue\">ref</span> id );\n      value = id.Value.ToString() + <span class=\"maroon\">\" (\"</span>\n        + <span class=\"teal\">Util</span>.ElementDescription( e ) + <span class=\"maroon\">\")\"</span>;\n      <span class=\"blue\">break</span>;\n \n    <span class=\"blue\">case</span> <span class=\"teal\">StorageType</span>.Integer:\n      value = t.AsInteger( fp ).ToString()\n        + <span class=\"maroon\">\" (int)\"</span>;\n      <span class=\"blue\">break</span>;\n \n    <span class=\"blue\">case</span> <span class=\"teal\">StorageType</span>.String:\n      value = <span class=\"maroon\">\"'\"</span> + t.AsString( fp )\n        + <span class=\"maroon\">\"' (string)\"</span>;\n      <span class=\"blue\">break</span>;\n  }\n  <span class=\"blue\">return</span> value;\n}\n</pre>\n<p>With the helper method in hand, we can iterate over the family types and display their family parameter values.\nWe use HasValue to determine whether a type has a value for each parameter, retrieve its value, and display the result:\n\n<pre class=\"code\">\nn = mgr.Types.Size;\n \n<span class=\"teal\">Debug</span>.Print(\n  <span class=\"maroon\">\"Family {0} has {1} type{2}{3}\"</span>,\n  doc.Title,\n  n,\n  <span class=\"teal\">Util</span>.PluralSuffix( n ),\n  <span class=\"teal\">Util</span>.DotOrColon( n ) );\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyType</span> t <span class=\"blue\">in</span> mgr.Types )\n{\n  <span class=\"blue\">string</span> name = t.Name;\n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}:\"</span>, name );\n  <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> key <span class=\"blue\">in</span> keys )\n  {\n    <span class=\"teal\">FamilyParameter</span> fp = fps[key];\n    <span class=\"blue\">if</span>( t.HasValue( fp ) )\n    {\n      <span class=\"blue\">string</span> value \n        = FamilyParamValueString( t, fp, doc );\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"    {0} = {1}\"</span>, key, value );\n    }\n  }\n}\n</pre>\n<p>Here is the result of opening a new family document based on the Metric Column template, \nrunning the Family API lab 4 command to create a simple column family and some types, and then listing the family parameter values using CmdFamilyParamValues:\n\n<pre>\nFamily Family1 has 13 parameters.\nFamily Family1 has 5 types:\n   :\n    ColumnFinish = -1 (<null>)\n    Depth = 1.97 (double)\n    Td = 0.49 (double)\n    Tw = 0.49 (double)\n    Width = 1.97 (double)\n  1000x300:\n    ColumnFinish = -1 (<null>)\n    Depth = 0.98 (double)\n    Td = 0.25 (double)\n    Tw = 0.82 (double)\n    Width = 3.28 (double)\n  600x900:\n    ColumnFinish = -1 (<null>)\n    Depth = 2.95 (double)\n    Td = 0.74 (double)\n    Tw = 0.49 (double)\n    Width = 1.97 (double)\n  Glass:\n    ColumnFinish = 574 (Materials &lt;574 Glass&gt;)\n    Depth = 1.97 (double)\n    Td = 0.49 (double)\n    Tw = 0.49 (double)\n    Width = 1.97 (double)\n  600x600:\n    ColumnFinish = -1 (<null>)\n    Depth = 1.97 (double)\n    Td = 0.49 (double)\n    Tw = 0.49 (double)\n    Width = 1.97 (double)\n</null></null></null></null></pre>\n<p>Apparently, it includes one unnamed type as well as the four that our sample created intentionally.\n\n<p>I hope this clarifies the structure and usage of family parameters and possibly provides a useful additional little utility for your tool kit.\n\n<p>Here is\n\n<a href=\"zip/bc11053.zip\">\nversion 1.1.0.53</a>\n\nof the complete Building Coder sample source code and Visual Studio solution including the new command.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]