[
  {
    "original_filename": "0839_slab_boundary",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0839_slab_boundary",
    "header_text": "Slab Boundary Revisited",
    "local_header_href": "#slab-boundary-revisited",
    "chunk_text": "<h3>Slab Boundary Revisited</h3><p>After \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/wall-footing-relationship-revisited.html\">\nyesterday's rejuvenation</a> of\n\nthe old wall footing \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/host-reference.html\">\nhost reference relationship detection</a>,\n\ntoday raises another old question prompting me to update and retest The Building Coder samples yet again:\n\n\n<p><strong>Question:</strong> How can I obtain the boundary of a floor slab using the Revit API, please?\n\n\n<p><strong>Answer:</strong> I implemented a CmdSlabBoundary external command to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/slab-boundary.html\">\ndetermine the slab boundary</a> back\n\nin the dawn of time, in 2008, in one of the first posts on this blog.\n\n<p>It determines the boundary edges of a floor slab, including holes, and creates a set of model curves along the bottom edges of the slab to highlight them.\n\n<p>Since then it has just been flat ported every year from one version to the next.\n\n<p>To ensure that it still works, I updated it slightly and tested in Revit 2013.\nAll I did this time around was to change the transaction mode from automatic to manual, since \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/read-only-and-automatic-transaction-modes.html\">\nautomatic transaction mode is considered obsolete</a> nowadays.\n\n<p>Here is the updated implementation:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdSlabBoundary</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Offset the generated boundary polygon loop</span>\n  <span class=\"gray\">///</span><span class=\"green\"> model lines downwards to separate them from</span>\n  <span class=\"gray\">///</span><span class=\"green\"> the slab edge.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _offset = 0.1;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Determine the boundary polygons of the lowest</span>\n  <span class=\"gray\">///</span><span class=\"green\"> horizontal planar face of the given solid.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"polygons\"&gt;</span><span class=\"green\">Return polygonal boundary</span>\n  <span class=\"gray\">///</span><span class=\"green\"> loops of lowest horizontal face, i.e. profile of</span>\n  <span class=\"gray\">///</span><span class=\"green\"> circumference and holes</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"solid\"&gt;</span><span class=\"green\">Input solid</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">False if no horizontal planar face was</span>\n  <span class=\"gray\">///</span><span class=\"green\"> found, else true</span><span class=\"gray\">&lt;/returns&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> GetBoundary(\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;&gt; polygons,\n    <span class=\"teal\">Solid</span> solid )\n  {\n    <span class=\"teal\">PlanarFace</span> lowest = <span class=\"blue\">null</span>;\n    <span class=\"teal\">FaceArray</span> faces = solid.Faces;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> faces )\n    {\n      <span class=\"teal\">PlanarFace</span> pf = f <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != pf &amp;&amp; <span class=\"teal\">Util</span>.IsHorizontal( pf ) )\n      {\n        <span class=\"blue\">if</span>( ( <span class=\"blue\">null</span> == lowest )\n          || ( pf.Origin.Z &lt; lowest.Origin.Z ) )\n        {\n          lowest = pf;\n        }\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != lowest )\n    {\n      <span class=\"teal\">XYZ</span> p, q = <span class=\"teal\">XYZ</span>.Zero;\n      <span class=\"blue\">bool</span> first;\n      <span class=\"blue\">int</span> i, n;\n      <span class=\"teal\">EdgeArrayArray</span> loops = lowest.EdgeLoops;\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> loop <span class=\"blue\">in</span> loops )\n      {\n        <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; vertices = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;();\n        first = <span class=\"blue\">true</span>;\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> loop )\n        {\n          <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; points = e.Tessellate();\n          p = points[0];\n          <span class=\"blue\">if</span>( !first )\n          {\n            <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( q ),\n              <span class=\"maroon\">\"expected subsequent start point\"</span>\n              + <span class=\"maroon\">\" to equal previous end point\"</span> );\n          }\n          n = points.Count;\n          q = points[n - 1];\n          <span class=\"blue\">for</span>( i = 0; i &lt; n - 1; ++i )\n          {\n            <span class=\"teal\">XYZ</span> v = points[i];\n            v -= _offset * <span class=\"teal\">XYZ</span>.BasisZ;\n            vertices.Add( v );\n          }\n        }\n        q -= _offset * <span class=\"teal\">XYZ</span>.BasisZ;\n        <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( vertices[0] ),\n          <span class=\"maroon\">\"expected last end point to equal\"</span>\n          + <span class=\"maroon\">\" first start point\"</span> );\n        polygons.Add( vertices );\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span> != lowest;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return all floor slab boundary loop polygons</span>\n  <span class=\"gray\">///</span><span class=\"green\"> for the given floors, offset downwards from the</span>\n  <span class=\"gray\">///</span><span class=\"green\"> bottom floor faces by a certain amount.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;&gt; GetFloorBoundaryPolygons(\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; floors,\n    <span class=\"teal\">Options</span> opt )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;&gt; polygons = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;&gt;();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Floor</span> floor <span class=\"blue\">in</span> floors )\n    {\n      <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n      <span class=\"green\">//GeometryObjectArray objects = geo.Objects; // 2012</span>\n      <span class=\"green\">//foreach( GeometryObject obj in objects ) // 2012</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo ) <span class=\"green\">// 2013</span>\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n        <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n        {\n          GetBoundary( polygons, solid );\n        }\n      }\n    }\n    <span class=\"blue\">return</span> polygons;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// retrieve selected floors, or all floors, if nothing is selected:</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; floors = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n    <span class=\"blue\">if</span>( !<span class=\"teal\">Util</span>.GetSelectedElementsOrAll(\n      floors, uidoc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Floor</span> ) ) )\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      message = ( 0 &lt; sel.Elements.Size )\n        ? <span class=\"maroon\">\"Please select some floor elements.\"</span>\n        : <span class=\"maroon\">\"No floor elements found.\"</span>;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">Options</span> opt = app.Application.Create.NewGeometryOptions();\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;&gt; polygons\n      = GetFloorBoundaryPolygons( floors, opt );\n \n    <span class=\"blue\">int</span> n = polygons.Count;\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"{0} boundary loop{1} found.\"</span>,\n      n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n    <span class=\"teal\">Creator</span> creator = <span class=\"blue\">new</span> <span class=\"teal\">Creator</span>( doc );\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      t.Start( <span class=\"maroon\">\"Draw Slab Boundaries\"</span> );\n \n      creator.DrawPolygons( polygons );\n \n      t.Commit();\n    }\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>I ran this command on a minimal sample model containing just one floor slab with a couple of holes in it.\nThat produces the following result, in which I modified the model lines graphics display to distinguish them better – don't know why the model ellipse is not picking up the dotted line as well as the straight segments – maybe the tessellation is chopping it up too finely:</p>\n<center>\n<img alt=\"Floor slab boundaries\" src=\"img/floor_slab_boundaries.png\"/>\n</center>\n<p>Here is \n\n<a href=\"zip/bc_13_99_4.zip\">version 2013.0.99.4</a> of \n\nThe Building Coder samples including the updated CmdSlabBoundary external command.\n\n\n<a name=\"2\"></a>\n<h4>Programmatically Invoke Snoop Objects Dialogue</h4>\n<p>Yesterday I discovered an pretty cool post by Daren Thomas, the father of \n\n<a href=\"http://code.google.com/p/revitpythonshell\">\nRevitPythonShell</a>, \n\ndescribing how you can \n\n<a href=\"http://darenatwork.blogspot.de/2011/08/using-snoop-objects-dialog-from.html\">\nprogrammatically invoke the RevitLookup Snoop Objects dialogue</a>.\n\n<p>His code is in Python, though the concepts are equally valid in and port perfectly to any other .NET language as well.\n\n<p>Definitely worth taking a look at!\n\n\n<a name=\"3\"></a>\n<h4>HTCPCP – Hyper Text Coffee Pot Control Protocol</h4>\n<p>Another little item that you absolutely must be aware of in the cloud and mobile arena is the \n\n<a href=\"http://tools.ietf.org/html/rfc2324\">\nHyper Text Coffee Pot Control Protocol standard HTCPCP</a>.\n\nIt is worthwhile noting the date of publication, also  :-)\n\n\n<a name=\"4\"></a>\n<h4>Closing Revit by Posting WM_CLOSE to its Main Window Handle</h4>\n<p>Before closing this post, one last Revit API related note on closing Revit itself...\n\n<p>Shutting down and exiting the Revit session is not supported by the official Revit API.\n\n<p>I discussed \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html\">\nclosing the active document</a> and\n\nwhy not to do so. \nThe same caveats obviosuly apply to shutting down the Revit session itself.\n\n<p>Still, Augusto Goncalves now presents a neat little solution to obtain the Revit main window handle and \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/close-revit-from-the-api.html\">\nclose down Revit</a> by\n\nusing SendMessage to post a WM_CLOSE request to it.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0839_slab_boundary",
    "header_text": "Programmatically Invoke Snoop Objects Dialogue",
    "local_header_href": "#programmatically-invoke-snoop-objects-dialogue",
    "chunk_text": "<h4>Programmatically Invoke Snoop Objects Dialogue</h4><p>Yesterday I discovered an pretty cool post by Daren Thomas, the father of \n\n<a href=\"http://code.google.com/p/revitpythonshell\">\nRevitPythonShell</a>, \n\ndescribing how you can \n\n<a href=\"http://darenatwork.blogspot.de/2011/08/using-snoop-objects-dialog-from.html\">\nprogrammatically invoke the RevitLookup Snoop Objects dialogue</a>.\n\n<p>His code is in Python, though the concepts are equally valid in and port perfectly to any other .NET language as well.\n\n<p>Definitely worth taking a look at!\n\n\n<a name=\"3\"></a>\n<h4>HTCPCP – Hyper Text Coffee Pot Control Protocol</h4>\n<p>Another little item that you absolutely must be aware of in the cloud and mobile arena is the \n\n<a href=\"http://tools.ietf.org/html/rfc2324\">\nHyper Text Coffee Pot Control Protocol standard HTCPCP</a>.\n\nIt is worthwhile noting the date of publication, also  :-)\n\n\n<a name=\"4\"></a>\n<h4>Closing Revit by Posting WM_CLOSE to its Main Window Handle</h4>\n<p>Before closing this post, one last Revit API related note on closing Revit itself...\n\n<p>Shutting down and exiting the Revit session is not supported by the official Revit API.\n\n<p>I discussed \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html\">\nclosing the active document</a> and\n\nwhy not to do so. \nThe same caveats obviosuly apply to shutting down the Revit session itself.\n\n<p>Still, Augusto Goncalves now presents a neat little solution to obtain the Revit main window handle and \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/close-revit-from-the-api.html\">\nclose down Revit</a> by\n\nusing SendMessage to post a WM_CLOSE request to it.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0839_slab_boundary",
    "header_text": "HTCPCP – Hyper Text Coffee Pot Control Protocol",
    "local_header_href": "#htcpcp-hyper-text-coffee-pot-control-protocol",
    "chunk_text": "<h4>HTCPCP – Hyper Text Coffee Pot Control Protocol</h4><p>Another little item that you absolutely must be aware of in the cloud and mobile arena is the \n\n<a href=\"http://tools.ietf.org/html/rfc2324\">\nHyper Text Coffee Pot Control Protocol standard HTCPCP</a>.\n\nIt is worthwhile noting the date of publication, also  :-)\n\n\n<a name=\"4\"></a>\n<h4>Closing Revit by Posting WM_CLOSE to its Main Window Handle</h4>\n<p>Before closing this post, one last Revit API related note on closing Revit itself...\n\n<p>Shutting down and exiting the Revit session is not supported by the official Revit API.\n\n<p>I discussed \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html\">\nclosing the active document</a> and\n\nwhy not to do so. \nThe same caveats obviosuly apply to shutting down the Revit session itself.\n\n<p>Still, Augusto Goncalves now presents a neat little solution to obtain the Revit main window handle and \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/close-revit-from-the-api.html\">\nclose down Revit</a> by\n\nusing SendMessage to post a WM_CLOSE request to it.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0839_slab_boundary",
    "header_text": "Closing Revit by Posting WM_CLOSE to its Main Window Handle",
    "local_header_href": "#closing-revit-by-posting-wm_close-to-its-main-window-handle",
    "chunk_text": "<h4>Closing Revit by Posting WM_CLOSE to its Main Window Handle</h4><p>Before closing this post, one last Revit API related note on closing Revit itself...\n\n<p>Shutting down and exiting the Revit session is not supported by the official Revit API.\n\n<p>I discussed \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html\">\nclosing the active document</a> and\n\nwhy not to do so. \nThe same caveats obviosuly apply to shutting down the Revit session itself.\n\n<p>Still, Augusto Goncalves now presents a neat little solution to obtain the Revit main window handle and \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/close-revit-from-the-api.html\">\nclose down Revit</a> by\n\nusing SendMessage to post a WM_CLOSE request to it.\n</p></p></p></p>"
  }
]