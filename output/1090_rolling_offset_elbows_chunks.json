[
  {
    "original_filename": "1090_rolling_offset_elbows",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1090_rolling_offset_elbows",
    "header_text": "Explicitly Placing Rolling Offset Elbow Fittings",
    "local_header_href": "#explicitly-placing-rolling-offset-elbow-fittings",
    "chunk_text": "<h3>Explicitly Placing Rolling Offset Elbow Fittings</h3><p>I continue the work on my MEP\n\n<a href=\"http://content.case-inc.com/au-hackathon-2013\">\nCASE BIM Hackathon</a> project to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/calculating-a-rolling-offset-between-two-pipes.html\">\ncalculate a rolling offset</a> between\n\ntwo pipes,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/calculating-a-rolling-offset-between-two-pipes.html\">\ninsert the rolling offset pipe segment</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/connecting-the-rolling-offset-pipe-to-its-neighbour-pipes.html\">\nconnect it to its neighbours</a>.</p><p>The last missing puzzle piece was inserting appropriate fittings between the three pipe segments.</p><p>It only took me about a hundred debugging and testing iterations to nail down a working sequence to perform all the required steps manually, edging forward minute step by minute step.</p><p>Here are some of the main ones I encountered, researched and resolved for this post – hacking my thorny way towards the Revit veni, vidi, vinci:</p><ul>\n<li>Create appropriate pipes and elbow fittings manually to determine what family symbol to use.</li>\n<li>Explore the family instance parameters to determine which ones to use to define its diameter and elbow angle.</li>\n<li>Place the elbow fitting instance.</li>\n<li>Rotate it around the pipe axis to point it in the proper direction toward the other, parallel, offset pipe.</li>\n<li>Shorten the original pipes to accommodate the additional distance between the elbow insertion and connection points.</li>\n<li>Place the rolling offset pipe segment between the elbow fittings.</li>\n<li>Create all connections between neighbouring pipes and fittings.</li>\n</ul><p>After implementing this and preparing the discussion below, Tate posted an extremely apt and helpful suggestion in a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/connecting-the-rolling-offset-pipe-to-its-neighbour-pipes.html?cid=6a00e553e168978833019b04c5511d970d#comment-6a00e553e168978833019b04c5511d970d\">\ncomment</a> on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/connecting-the-rolling-offset-pipe-to-its-neighbour-pipes.html\">\nconnecting the rolling offset pipe</a> to\n\nits neighbours:</p><p><i>The Document.NewElbowFitting will create, place and connect the fitting automatically for you, provided the two connectors are close enough.</i></p><p>This saves completing all these steps yourself and explicitly calling Connector.ConnectTo.</p><p>Many thanks to Tate for that!</p><p>Consequently, the entire discussion below can be seen as a possibly interesting and completely useless exercise.</p><p>I hope you enjoy it anyway, and find lots of use in the additional background understanding it provides.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1090_rolling_offset_elbows",
    "header_text": "Rolling Offset Geometry",
    "local_header_href": "#rolling-offset-geometry",
    "chunk_text": "<h4>Rolling Offset Geometry</h4><p>Lets review the main geometrical points, based on the original pipes and the calculation of the distance required to accommodate the rolling offset between them at a specific given angle, in our case 45 degrees:</p><center>\n<img alt=\"Main rolling offset calculation points\" src=\"img/rolling_offset_geom.png\" width=\"478\"/>\n</center><p>The points p0 and p1 are the two endpoints of the original pipes that are furthest apart.\nThey remain unchanged.</p><p>The point pm is the midpoint between p0 and p1.\nThis is used to define the centre point of the entire calculation and the resulting rolling offset pipe segment.</p><p>The points q0 and q1 are the two resulting corner points of the rolling offset.\nThe original pipes closer two endpoints were adjusted back to these points when drawing a model line to represent the rolling offset, and also when inserting a pipe without any fittings.</p><p>They also become the insertion points for the elbow fittings.\nWith fittings, the original pipes need to be cut back a bit further still to accommodate the additional distance between the fitting insertion and connection points.</p><p>Besides these main points, we need to be aware of the variable z storing the normal vector of the plane defined by the two parallel and offset pipes, which is also the plane hosting the rolling offset, since this is needed to calculate the angle to rotate the fitting around the pipe axis to point it exactly toward the other pipe.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1090_rolling_offset_elbows",
    "header_text": "Rolling Offset Fitting Placement",
    "local_header_href": "#rolling-offset-fitting-placement",
    "chunk_text": "<h4>Rolling Offset Fitting Placement</h4><p>I implemented a new Boolean switch _place_fittings to toggle back and forth between the fitting placement and the previous rolling offset implementation variations.</p><p>The calculation of the rolling offset itself remains completely unchanged from the preceding versions.</p><p>The new version is currently implemented in a rather long spaghetti style code:</p><pre class=\"code\">\n  <span class=\"teal\">FamilySymbol</span> symbol\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_PipeFitting )\n      .Cast&lt;<span class=\"teal\">FamilySymbol</span>&gt;()\n      .Where&lt;<span class=\"teal\">FamilySymbol</span>&gt;( e\n        =&gt; e.Family.Name.Contains( <span class=\"maroon\">\"Elbow - Generic\"</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">FamilySymbol</span>&gt;();\n \n  <span class=\"green\">// Set up first 45 degree elbow fitting</span>\n \n  <span class=\"teal\">FamilyInstance</span> fitting0 = doc.Create\n    .NewFamilyInstance( q0, symbol,\n      <span class=\"teal\">StructuralType</span>.NonStructural );\n \n  fitting0.get_Parameter( <span class=\"maroon\">\"Angle\"</span> ).Set(\n    45.0 * <span class=\"teal\">Math</span>.PI / 180.0 );\n \n  <span class=\"green\">//fitting0.get_Parameter( bipDiameter ) // does not exist</span>\n  <span class=\"green\">//  .Set( diameter );</span>\n \n  fitting0.get_Parameter( <span class=\"maroon\">\"Nominal Radius\"</span> )\n    .Set( 0.5 * diameter );\n \n  <span class=\"teal\">Line</span> axis = <span class=\"teal\">Line</span>.CreateBound( p0, q0 );\n  angle = z.AngleTo( <span class=\"teal\">XYZ</span>.BasisZ );\n \n  <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n    doc, fitting0.Id, axis, <span class=\"teal\">Math</span>.PI - angle );\n \n  <span class=\"teal\">Connector</span> con0 = <span class=\"teal\">Util</span>.GetConnectorClosestTo(\n    fitting0, p0 );\n \n  <span class=\"green\">// Trim or extend existing pipe</span>\n \n  ( pipes[0].Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span> ).Curve\n    = <span class=\"teal\">Line</span>.CreateBound( p0, con0.Origin );\n \n  <span class=\"green\">// Connect pipe to fitting</span>\n \n  <span class=\"teal\">Util</span>.Connect( con0.Origin, pipe, fitting0 );\n \n  <span class=\"green\">// Set up second 45 degree elbow fitting</span>\n \n  <span class=\"teal\">FamilyInstance</span> fitting1 = doc.Create\n    .NewFamilyInstance( q1, symbol,\n      <span class=\"teal\">StructuralType</span>.NonStructural );\n \n  fitting1.get_Parameter( <span class=\"maroon\">\"Angle\"</span> ).Set(\n    45.0 * <span class=\"teal\">Math</span>.PI / 180.0 );\n \n  fitting1.get_Parameter( <span class=\"maroon\">\"Nominal Radius\"</span> )\n    .Set( 0.5 * diameter );\n \n  axis = <span class=\"teal\">Line</span>.CreateBound(\n    q1, q1 + <span class=\"teal\">XYZ</span>.BasisZ );\n \n  <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n    doc, fitting1.Id, axis, <span class=\"teal\">Math</span>.PI );\n \n  axis = <span class=\"teal\">Line</span>.CreateBound( q1, p1 );\n \n  <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n    doc, fitting1.Id, axis, <span class=\"teal\">Math</span>.PI - angle );\n \n  <span class=\"teal\">Connector</span> con1 = <span class=\"teal\">Util</span>.GetConnectorClosestTo(\n    fitting1, p1 );\n \n  ( pipes[1].Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span> ).Curve\n    = <span class=\"teal\">Line</span>.CreateBound( con1.Origin, p1 );\n \n  <span class=\"teal\">Util</span>.Connect( con1.Origin, fitting1, pipes[1] );\n \n  con0 = <span class=\"teal\">Util</span>.GetConnectorClosestTo(\n    fitting0, pm );\n \n  con1 = <span class=\"teal\">Util</span>.GetConnectorClosestTo(\n    fitting1, pm );\n \n  <span class=\"green\">// Connecting one fitting to the other does</span>\n  <span class=\"green\">// not insert a pipe in between. If the </span>\n  <span class=\"green\">// system is edited later, however, the two </span>\n  <span class=\"green\">// fittings snap together.</span>\n  <span class=\"green\">//</span>\n  <span class=\"green\">//con0.ConnectTo( con1 );</span>\n \n  <span class=\"green\">// Create rolling offset pipe segment</span>\n \n  pipe = doc.Create.NewPipe( con0.Origin,\n    con1.Origin, pipe_type_standard );\n \n  pipe.get_Parameter( bipDiameter )\n    .Set( diameter );\n \n  <span class=\"green\">// Connect rolling offset pipe segment</span>\n  <span class=\"green\">// with elbow fittings at each end</span>\n \n  <span class=\"teal\">Util</span>.Connect( con0.Origin, fitting0, pipe );\n  <span class=\"teal\">Util</span>.Connect( con1.Origin, pipe, fitting1 );\n</pre><p>Note that some of the calculations are more hard-coded than I would like.</p><p>Possibly a more optimal solution would base the calculations on the connector transform properties.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1090_rolling_offset_elbows",
    "header_text": "Resulting Rolling Offset with Fittings",
    "local_header_href": "#resulting-rolling-offset-with-fittings",
    "chunk_text": "<h4>Resulting Rolling Offset with Fittings</h4><p>Running this form of the CmdRollingOffset command in my sample model generates, places and connects the following fittings:</p><center>\n<img alt=\"Appropriately placed elbow fitting\" src=\"img/rolling_offset_fitting_1.png\" width=\"526\"/>\n</center><p>You get a good idea of the slantedness in all directions by looking at the end cross section of the rolling offset pipe segment:</p><center>\n<img alt=\"Properly connected rolling offset pipe\" src=\"img/rolling_offset_fitting_2.png\" width=\"535\"/>\n</center><a name=\"5\"></a>"
  },
  {
    "original_filename": "1090_rolling_offset_elbows",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>The code to place the elbow fittings and properly connect the rolling offset is included in the\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> GitHub\n\nrepository, in the external command CmdRollingOffset, and the version discussed here is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.106.4\">\nrelease 2014.0.106.4</a>.</p><p>As pointed out by Tate, a much simpler and more general solution is possible by calling the NewElbowFitting method to perform all of the steps listed above fully automatically, with the additional advantage of taking all the Revit pipe routing preferences and other settings into account.</p><p>Consequently, please stay tuned for the next instalment, coming up soon.</p>"
  }
]