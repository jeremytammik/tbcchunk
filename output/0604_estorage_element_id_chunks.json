[
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "Extensible Storage Features",
    "local_header_href": "#extensible-storage-features",
    "chunk_text": "<h3>Extensible Storage Features</h3><p>Here is a nice hot topic to start off the week.\nWe already talked about the new Revit 2012 API \n\nEStorage or\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a> functionality and presented example code to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/05/extensible-storage-of-a-map.html\">\nstore a map or dictionary</a> in it.\n\n<p>Here are a few other interesting notes and issues related to this which have cropped up, contributed and pointed out by Steven Mycynek:\n\n<ol>\n<li><a href=\"#1\">Intended use of EStorage</a>.\n<li><a href=\"#2\">Handling large amounts of data in EStorage</a>.\n<li><a href=\"#3\">EStorage is self-documenting</a>.\n<li><a href=\"#4\">EStorage is object-oriented in two ways</a>.\n<li><a href=\"#5\">Read/Write permissions</a>.\n<li><a href=\"#6\">Modification of EStorage data on an element type</a>.\n<li><a href=\"#7\">Handling of ElementId data in EStorage</a>.\n<li><a href=\"#8\">Retrieving elements with a specific schema entity</a>.\n<li><a href=\"#9\">Checking for a valid entity on an element</a>.\n<li><a href=\"#10\">One entity per element</a>.\n<li><a href=\"#11\">Schemata remain in memory</a>.\n</li></li></li></li></li></li></li></li></li></li></li></ol>\n<p>The automatic translation of element ids is one of the absolute highlights of this new technology that I was previously not aware of.\n\n<a name=\"1\"></a>\n<h4>1. Intended Use of EStorage</h4>\n<p><strong>Question:</strong> When should I use EStorage versus the existing technique of storing my data in text form in an XML-based hidden shared parameter?\n\n<p><strong>Answer:</strong> EStorage is for storing a lot of complex bits of data that you want to organize into a class-like structure, complete with units, documentation, etc. If you already have an XML file that does all of that already, \nand you don't find using a single hidden shared parameter to be a burden, you might want to go ahead and keep using it. On the other hand, if you didn't already have an XML schema in place and had a huge variety of data you \ndidn't want to convert to a text representation, I'd recommend starting out with EStorage.\n\n\n<a name=\"2\"></a>\n<h4>2. Handling Large Amounts of Data in EStorage</h4>\n<p><strong>Question:</strong> I am thinking of storing a large amount of data on a number of BIM elements.\nWhat approach would you recommend?\n\n<p><strong>Answer:</strong> The intended and recommended use of EStorage does not include storing huge amounts of data in the model. For instance, we have seen issues with developers trying to store very heavy analysis data in hundreds of MB spread across thousands of elements, all loaded at start-up.\nSuch usage will degrade performance.\nIf you store large amounts of data across thousands of elements, do not expect an instant load time.  \n\n<p>If you wish to store a large amount of data on individual elements, this should not be a problem. For instance, storing something like a .png file on a wall element is no issue at all, whereas it would be an issue to store a dozen .png files on <b>every</b> wall element and extract all of them at once, even if you only need the data for one at a given time. \n\n<p>One of the strengths of EStorage is its handling of arrays of objects or sub-entities and different schemas in general rather than one large segment of data that needs to be read in its entirety and deserialized all at once.  I recommend taking advantage of this and only loading what you actually need for a given task. For small loads of data, this might not seem necessary, but when you get into many MB of data, it makes a difference.\n\n\n<a name=\"3\"></a>\n<h4>3. EStorage is Self-documenting</h4>\n<p>When you create a schema, you are creating documentation.  \nBe sure to fill out the documentation strings for each field – they will help you in your development process and others when they use your schema.  \nWhat's more, since you can look up a schema by Guid, if you want to share a document with a schema with someone else, all they need is the Guid to look it up and read your structure and documentation comments.  \nThis might be a good opportunity to either use the SchemaWrapperTools included with the ExtensibleStorageManager SDK sample (or a simpler, similar tool) to print out a schema's field definitions and documentation strings from a single GUID input.\n\n\n<a name=\"4\"></a>\n<h4>4. EStorage is Object-oriented in Two Ways</h4>\n<p>Not only is a given schema entity structured into named fields, but each entity is placed on elements relative to the data itself, as opposed to one large blob that you must read in its entirety to unpack.  \nThis goes along with what the recommendation above about not reading all storage at start-up.  \nSince you can choose which elements to process, you have the opportunity to only load what you need an automatically have an association between data and a specific element – shared parameters can't do this.\n\n\n<a name=\"5\"></a>\n<h4>5. Read/Write Permissions</h4>\n<p>This is another area that goes beyond shared parameters.  \nWhile your schema definition is public, you can restrict who reads and writes schema data based to a specific vendor or a specific application from that vendor.\n\n\n<a name=\"6\"></a>\n<h4>6. Modification of EStorage Data on an Element Type</h4>\n<p><strong>Question:</strong> When transferring types from one project to another using Transfer Project Standards, it only copies across types that are different. If you change a parameter on a wall type that exists in both projects, then it gives you the \noption of copying over \"new\" types or overwriting existing types. However, if the parameters are unchanged but the schema data is different, it treats the wall types as identical, so does not give the option of copying over the \nwall type. \n\n<p>Are element types with different EStorage data attached to them treated as the same or not?\n\n<p><strong>Answer:</strong> Any parameter based change, hidden or not, will trigger a new type to be recognized. EStorage, however, is not a parameter-based transaction, so those rules don't apply.\nTherefore, element types with differing EStorage attached to them are still treated as the same in this case.\n\n\n\n<a name=\"7\"></a>\n<h4>7. Handling of ElementId Data in EStorage</h4>\n<p><strong>Question:</strong> What happens to element ids stored in EStorage?\n\n<p><strong>Answer:</strong> When you store an ElementId using EStorage and that ElementId gets remapped because the element is deleted or updated, e.g. because of a worksharing update, your stored ElementId is also automatically remapped to the new ElementId value.  This is one strong advantage for using EStorage over text or raw numbers to store ElementIds – the tracking for element updates is handled automatically, so you can be sure that your ElementIds will remain valid.\nIf the element is deleted, your ElementId will be set to ElementId.InvalidElementId.\n\n\n<a name=\"8\"></a>\n<h4>8. Retrieving Elements with a Specific Schema Entity</h4>\n<p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "1. Intended Use of EStorage",
    "local_header_href": "#1-intended-use-of-estorage",
    "chunk_text": "<h4>1. Intended Use of EStorage</h4><p><strong>Question:</strong> When should I use EStorage versus the existing technique of storing my data in text form in an XML-based hidden shared parameter?\n\n<p><strong>Answer:</strong> EStorage is for storing a lot of complex bits of data that you want to organize into a class-like structure, complete with units, documentation, etc. If you already have an XML file that does all of that already, \nand you don't find using a single hidden shared parameter to be a burden, you might want to go ahead and keep using it. On the other hand, if you didn't already have an XML schema in place and had a huge variety of data you \ndidn't want to convert to a text representation, I'd recommend starting out with EStorage.\n\n\n<a name=\"2\"></a>\n<h4>2. Handling Large Amounts of Data in EStorage</h4>\n<p><strong>Question:</strong> I am thinking of storing a large amount of data on a number of BIM elements.\nWhat approach would you recommend?\n\n<p><strong>Answer:</strong> The intended and recommended use of EStorage does not include storing huge amounts of data in the model. For instance, we have seen issues with developers trying to store very heavy analysis data in hundreds of MB spread across thousands of elements, all loaded at start-up.\nSuch usage will degrade performance.\nIf you store large amounts of data across thousands of elements, do not expect an instant load time.  \n\n<p>If you wish to store a large amount of data on individual elements, this should not be a problem. For instance, storing something like a .png file on a wall element is no issue at all, whereas it would be an issue to store a dozen .png files on <b>every</b> wall element and extract all of them at once, even if you only need the data for one at a given time. \n\n<p>One of the strengths of EStorage is its handling of arrays of objects or sub-entities and different schemas in general rather than one large segment of data that needs to be read in its entirety and deserialized all at once.  I recommend taking advantage of this and only loading what you actually need for a given task. For small loads of data, this might not seem necessary, but when you get into many MB of data, it makes a difference.\n\n\n<a name=\"3\"></a>\n<h4>3. EStorage is Self-documenting</h4>\n<p>When you create a schema, you are creating documentation.  \nBe sure to fill out the documentation strings for each field – they will help you in your development process and others when they use your schema.  \nWhat's more, since you can look up a schema by Guid, if you want to share a document with a schema with someone else, all they need is the Guid to look it up and read your structure and documentation comments.  \nThis might be a good opportunity to either use the SchemaWrapperTools included with the ExtensibleStorageManager SDK sample (or a simpler, similar tool) to print out a schema's field definitions and documentation strings from a single GUID input.\n\n\n<a name=\"4\"></a>\n<h4>4. EStorage is Object-oriented in Two Ways</h4>\n<p>Not only is a given schema entity structured into named fields, but each entity is placed on elements relative to the data itself, as opposed to one large blob that you must read in its entirety to unpack.  \nThis goes along with what the recommendation above about not reading all storage at start-up.  \nSince you can choose which elements to process, you have the opportunity to only load what you need an automatically have an association between data and a specific element – shared parameters can't do this.\n\n\n<a name=\"5\"></a>\n<h4>5. Read/Write Permissions</h4>\n<p>This is another area that goes beyond shared parameters.  \nWhile your schema definition is public, you can restrict who reads and writes schema data based to a specific vendor or a specific application from that vendor.\n\n\n<a name=\"6\"></a>\n<h4>6. Modification of EStorage Data on an Element Type</h4>\n<p><strong>Question:</strong> When transferring types from one project to another using Transfer Project Standards, it only copies across types that are different. If you change a parameter on a wall type that exists in both projects, then it gives you the \noption of copying over \"new\" types or overwriting existing types. However, if the parameters are unchanged but the schema data is different, it treats the wall types as identical, so does not give the option of copying over the \nwall type. \n\n<p>Are element types with different EStorage data attached to them treated as the same or not?\n\n<p><strong>Answer:</strong> Any parameter based change, hidden or not, will trigger a new type to be recognized. EStorage, however, is not a parameter-based transaction, so those rules don't apply.\nTherefore, element types with differing EStorage attached to them are still treated as the same in this case.\n\n\n\n<a name=\"7\"></a>\n<h4>7. Handling of ElementId Data in EStorage</h4>\n<p><strong>Question:</strong> What happens to element ids stored in EStorage?\n\n<p><strong>Answer:</strong> When you store an ElementId using EStorage and that ElementId gets remapped because the element is deleted or updated, e.g. because of a worksharing update, your stored ElementId is also automatically remapped to the new ElementId value.  This is one strong advantage for using EStorage over text or raw numbers to store ElementIds – the tracking for element updates is handled automatically, so you can be sure that your ElementIds will remain valid.\nIf the element is deleted, your ElementId will be set to ElementId.InvalidElementId.\n\n\n<a name=\"8\"></a>\n<h4>8. Retrieving Elements with a Specific Schema Entity</h4>\n<p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "2. Handling Large Amounts of Data in EStorage",
    "local_header_href": "#2-handling-large-amounts-of-data-in-estorage",
    "chunk_text": "<h4>2. Handling Large Amounts of Data in EStorage</h4><p><strong>Question:</strong> I am thinking of storing a large amount of data on a number of BIM elements.\nWhat approach would you recommend?\n\n<p><strong>Answer:</strong> The intended and recommended use of EStorage does not include storing huge amounts of data in the model. For instance, we have seen issues with developers trying to store very heavy analysis data in hundreds of MB spread across thousands of elements, all loaded at start-up.\nSuch usage will degrade performance.\nIf you store large amounts of data across thousands of elements, do not expect an instant load time.  \n\n<p>If you wish to store a large amount of data on individual elements, this should not be a problem. For instance, storing something like a .png file on a wall element is no issue at all, whereas it would be an issue to store a dozen .png files on <b>every</b> wall element and extract all of them at once, even if you only need the data for one at a given time. \n\n<p>One of the strengths of EStorage is its handling of arrays of objects or sub-entities and different schemas in general rather than one large segment of data that needs to be read in its entirety and deserialized all at once.  I recommend taking advantage of this and only loading what you actually need for a given task. For small loads of data, this might not seem necessary, but when you get into many MB of data, it makes a difference.\n\n\n<a name=\"3\"></a>\n<h4>3. EStorage is Self-documenting</h4>\n<p>When you create a schema, you are creating documentation.  \nBe sure to fill out the documentation strings for each field – they will help you in your development process and others when they use your schema.  \nWhat's more, since you can look up a schema by Guid, if you want to share a document with a schema with someone else, all they need is the Guid to look it up and read your structure and documentation comments.  \nThis might be a good opportunity to either use the SchemaWrapperTools included with the ExtensibleStorageManager SDK sample (or a simpler, similar tool) to print out a schema's field definitions and documentation strings from a single GUID input.\n\n\n<a name=\"4\"></a>\n<h4>4. EStorage is Object-oriented in Two Ways</h4>\n<p>Not only is a given schema entity structured into named fields, but each entity is placed on elements relative to the data itself, as opposed to one large blob that you must read in its entirety to unpack.  \nThis goes along with what the recommendation above about not reading all storage at start-up.  \nSince you can choose which elements to process, you have the opportunity to only load what you need an automatically have an association between data and a specific element – shared parameters can't do this.\n\n\n<a name=\"5\"></a>\n<h4>5. Read/Write Permissions</h4>\n<p>This is another area that goes beyond shared parameters.  \nWhile your schema definition is public, you can restrict who reads and writes schema data based to a specific vendor or a specific application from that vendor.\n\n\n<a name=\"6\"></a>\n<h4>6. Modification of EStorage Data on an Element Type</h4>\n<p><strong>Question:</strong> When transferring types from one project to another using Transfer Project Standards, it only copies across types that are different. If you change a parameter on a wall type that exists in both projects, then it gives you the \noption of copying over \"new\" types or overwriting existing types. However, if the parameters are unchanged but the schema data is different, it treats the wall types as identical, so does not give the option of copying over the \nwall type. \n\n<p>Are element types with different EStorage data attached to them treated as the same or not?\n\n<p><strong>Answer:</strong> Any parameter based change, hidden or not, will trigger a new type to be recognized. EStorage, however, is not a parameter-based transaction, so those rules don't apply.\nTherefore, element types with differing EStorage attached to them are still treated as the same in this case.\n\n\n\n<a name=\"7\"></a>\n<h4>7. Handling of ElementId Data in EStorage</h4>\n<p><strong>Question:</strong> What happens to element ids stored in EStorage?\n\n<p><strong>Answer:</strong> When you store an ElementId using EStorage and that ElementId gets remapped because the element is deleted or updated, e.g. because of a worksharing update, your stored ElementId is also automatically remapped to the new ElementId value.  This is one strong advantage for using EStorage over text or raw numbers to store ElementIds – the tracking for element updates is handled automatically, so you can be sure that your ElementIds will remain valid.\nIf the element is deleted, your ElementId will be set to ElementId.InvalidElementId.\n\n\n<a name=\"8\"></a>\n<h4>8. Retrieving Elements with a Specific Schema Entity</h4>\n<p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "3. EStorage is Self-documenting",
    "local_header_href": "#3-estorage-is-self-documenting",
    "chunk_text": "<h4>3. EStorage is Self-documenting</h4><p>When you create a schema, you are creating documentation.  \nBe sure to fill out the documentation strings for each field – they will help you in your development process and others when they use your schema.  \nWhat's more, since you can look up a schema by Guid, if you want to share a document with a schema with someone else, all they need is the Guid to look it up and read your structure and documentation comments.  \nThis might be a good opportunity to either use the SchemaWrapperTools included with the ExtensibleStorageManager SDK sample (or a simpler, similar tool) to print out a schema's field definitions and documentation strings from a single GUID input.\n\n\n<a name=\"4\"></a>\n<h4>4. EStorage is Object-oriented in Two Ways</h4>\n<p>Not only is a given schema entity structured into named fields, but each entity is placed on elements relative to the data itself, as opposed to one large blob that you must read in its entirety to unpack.  \nThis goes along with what the recommendation above about not reading all storage at start-up.  \nSince you can choose which elements to process, you have the opportunity to only load what you need an automatically have an association between data and a specific element – shared parameters can't do this.\n\n\n<a name=\"5\"></a>\n<h4>5. Read/Write Permissions</h4>\n<p>This is another area that goes beyond shared parameters.  \nWhile your schema definition is public, you can restrict who reads and writes schema data based to a specific vendor or a specific application from that vendor.\n\n\n<a name=\"6\"></a>\n<h4>6. Modification of EStorage Data on an Element Type</h4>\n<p><strong>Question:</strong> When transferring types from one project to another using Transfer Project Standards, it only copies across types that are different. If you change a parameter on a wall type that exists in both projects, then it gives you the \noption of copying over \"new\" types or overwriting existing types. However, if the parameters are unchanged but the schema data is different, it treats the wall types as identical, so does not give the option of copying over the \nwall type. \n\n<p>Are element types with different EStorage data attached to them treated as the same or not?\n\n<p><strong>Answer:</strong> Any parameter based change, hidden or not, will trigger a new type to be recognized. EStorage, however, is not a parameter-based transaction, so those rules don't apply.\nTherefore, element types with differing EStorage attached to them are still treated as the same in this case.\n\n\n\n<a name=\"7\"></a>\n<h4>7. Handling of ElementId Data in EStorage</h4>\n<p><strong>Question:</strong> What happens to element ids stored in EStorage?\n\n<p><strong>Answer:</strong> When you store an ElementId using EStorage and that ElementId gets remapped because the element is deleted or updated, e.g. because of a worksharing update, your stored ElementId is also automatically remapped to the new ElementId value.  This is one strong advantage for using EStorage over text or raw numbers to store ElementIds – the tracking for element updates is handled automatically, so you can be sure that your ElementIds will remain valid.\nIf the element is deleted, your ElementId will be set to ElementId.InvalidElementId.\n\n\n<a name=\"8\"></a>\n<h4>8. Retrieving Elements with a Specific Schema Entity</h4>\n<p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "4. EStorage is Object-oriented in Two Ways",
    "local_header_href": "#4-estorage-is-object-oriented-in-two-ways",
    "chunk_text": "<h4>4. EStorage is Object-oriented in Two Ways</h4><p>Not only is a given schema entity structured into named fields, but each entity is placed on elements relative to the data itself, as opposed to one large blob that you must read in its entirety to unpack.  \nThis goes along with what the recommendation above about not reading all storage at start-up.  \nSince you can choose which elements to process, you have the opportunity to only load what you need an automatically have an association between data and a specific element – shared parameters can't do this.\n\n\n<a name=\"5\"></a>\n<h4>5. Read/Write Permissions</h4>\n<p>This is another area that goes beyond shared parameters.  \nWhile your schema definition is public, you can restrict who reads and writes schema data based to a specific vendor or a specific application from that vendor.\n\n\n<a name=\"6\"></a>\n<h4>6. Modification of EStorage Data on an Element Type</h4>\n<p><strong>Question:</strong> When transferring types from one project to another using Transfer Project Standards, it only copies across types that are different. If you change a parameter on a wall type that exists in both projects, then it gives you the \noption of copying over \"new\" types or overwriting existing types. However, if the parameters are unchanged but the schema data is different, it treats the wall types as identical, so does not give the option of copying over the \nwall type. \n\n<p>Are element types with different EStorage data attached to them treated as the same or not?\n\n<p><strong>Answer:</strong> Any parameter based change, hidden or not, will trigger a new type to be recognized. EStorage, however, is not a parameter-based transaction, so those rules don't apply.\nTherefore, element types with differing EStorage attached to them are still treated as the same in this case.\n\n\n\n<a name=\"7\"></a>\n<h4>7. Handling of ElementId Data in EStorage</h4>\n<p><strong>Question:</strong> What happens to element ids stored in EStorage?\n\n<p><strong>Answer:</strong> When you store an ElementId using EStorage and that ElementId gets remapped because the element is deleted or updated, e.g. because of a worksharing update, your stored ElementId is also automatically remapped to the new ElementId value.  This is one strong advantage for using EStorage over text or raw numbers to store ElementIds – the tracking for element updates is handled automatically, so you can be sure that your ElementIds will remain valid.\nIf the element is deleted, your ElementId will be set to ElementId.InvalidElementId.\n\n\n<a name=\"8\"></a>\n<h4>8. Retrieving Elements with a Specific Schema Entity</h4>\n<p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "5. Read/Write Permissions",
    "local_header_href": "#5-readwrite-permissions",
    "chunk_text": "<h4>5. Read/Write Permissions</h4><p>This is another area that goes beyond shared parameters.  \nWhile your schema definition is public, you can restrict who reads and writes schema data based to a specific vendor or a specific application from that vendor.\n\n\n<a name=\"6\"></a>\n<h4>6. Modification of EStorage Data on an Element Type</h4>\n<p><strong>Question:</strong> When transferring types from one project to another using Transfer Project Standards, it only copies across types that are different. If you change a parameter on a wall type that exists in both projects, then it gives you the \noption of copying over \"new\" types or overwriting existing types. However, if the parameters are unchanged but the schema data is different, it treats the wall types as identical, so does not give the option of copying over the \nwall type. \n\n<p>Are element types with different EStorage data attached to them treated as the same or not?\n\n<p><strong>Answer:</strong> Any parameter based change, hidden or not, will trigger a new type to be recognized. EStorage, however, is not a parameter-based transaction, so those rules don't apply.\nTherefore, element types with differing EStorage attached to them are still treated as the same in this case.\n\n\n\n<a name=\"7\"></a>\n<h4>7. Handling of ElementId Data in EStorage</h4>\n<p><strong>Question:</strong> What happens to element ids stored in EStorage?\n\n<p><strong>Answer:</strong> When you store an ElementId using EStorage and that ElementId gets remapped because the element is deleted or updated, e.g. because of a worksharing update, your stored ElementId is also automatically remapped to the new ElementId value.  This is one strong advantage for using EStorage over text or raw numbers to store ElementIds – the tracking for element updates is handled automatically, so you can be sure that your ElementIds will remain valid.\nIf the element is deleted, your ElementId will be set to ElementId.InvalidElementId.\n\n\n<a name=\"8\"></a>\n<h4>8. Retrieving Elements with a Specific Schema Entity</h4>\n<p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "6. Modification of EStorage Data on an Element Type",
    "local_header_href": "#6-modification-of-estorage-data-on-an-element-type",
    "chunk_text": "<h4>6. Modification of EStorage Data on an Element Type</h4><p><strong>Question:</strong> When transferring types from one project to another using Transfer Project Standards, it only copies across types that are different. If you change a parameter on a wall type that exists in both projects, then it gives you the \noption of copying over \"new\" types or overwriting existing types. However, if the parameters are unchanged but the schema data is different, it treats the wall types as identical, so does not give the option of copying over the \nwall type. \n\n<p>Are element types with different EStorage data attached to them treated as the same or not?\n\n<p><strong>Answer:</strong> Any parameter based change, hidden or not, will trigger a new type to be recognized. EStorage, however, is not a parameter-based transaction, so those rules don't apply.\nTherefore, element types with differing EStorage attached to them are still treated as the same in this case.\n\n\n\n<a name=\"7\"></a>\n<h4>7. Handling of ElementId Data in EStorage</h4>\n<p><strong>Question:</strong> What happens to element ids stored in EStorage?\n\n<p><strong>Answer:</strong> When you store an ElementId using EStorage and that ElementId gets remapped because the element is deleted or updated, e.g. because of a worksharing update, your stored ElementId is also automatically remapped to the new ElementId value.  This is one strong advantage for using EStorage over text or raw numbers to store ElementIds – the tracking for element updates is handled automatically, so you can be sure that your ElementIds will remain valid.\nIf the element is deleted, your ElementId will be set to ElementId.InvalidElementId.\n\n\n<a name=\"8\"></a>\n<h4>8. Retrieving Elements with a Specific Schema Entity</h4>\n<p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "7. Handling of ElementId Data in EStorage",
    "local_header_href": "#7-handling-of-elementid-data-in-estorage",
    "chunk_text": "<h4>7. Handling of ElementId Data in EStorage</h4><p><strong>Question:</strong> What happens to element ids stored in EStorage?\n\n<p><strong>Answer:</strong> When you store an ElementId using EStorage and that ElementId gets remapped because the element is deleted or updated, e.g. because of a worksharing update, your stored ElementId is also automatically remapped to the new ElementId value.  This is one strong advantage for using EStorage over text or raw numbers to store ElementIds – the tracking for element updates is handled automatically, so you can be sure that your ElementIds will remain valid.\nIf the element is deleted, your ElementId will be set to ElementId.InvalidElementId.\n\n\n<a name=\"8\"></a>\n<h4>8. Retrieving Elements with a Specific Schema Entity</h4>\n<p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "8. Retrieving Elements with a Specific Schema Entity",
    "local_header_href": "#8-retrieving-elements-with-a-specific-schema-entity",
    "chunk_text": "<h4>8. Retrieving Elements with a Specific Schema Entity</h4><p><strong>Question:</strong> How can I retrieve all elements that have data from a certain schema attached to them? \nOptimally, I think that should be a filtered element collector option.\n\n<p><strong>Answer:</strong> Right now, you must do a manual iteration of all elements.  There may be a project to add a filter as you describe in the future, but we make no promises about any future features whatsoever.\n\n<a name=\"9\"></a>\n<h4>9. Checking for a Valid Entity on an Element</h4>\n<p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "9. Checking for a Valid Entity on an Element",
    "local_header_href": "#9-checking-for-a-valid-entity-on-an-element",
    "chunk_text": "<h4>9. Checking for a Valid Entity on an Element</h4><p><strong>Question:</strong> If I register a schema and then select an element that has no entity for that schema attached to it, I would expect the following call to return null:\n\n<pre class=\"code\">\n  Entity ent = e.GetEntity( schema );\n</pre>\n<p>It does not. \nInstead, it returns a valid entity pointing to a null schema.\nTo handle this, I expanded my check to this:\n\n<pre class=\"code\">\n  if( null == ent || null == ent.Schema ) ...\n</pre>\n<p><strong>Answer:</strong> Use the Entity.IsValid method to check to see if the entity you received from GetEntity actually has data of a given schema.\n\n<a name=\"10\"></a>\n<h4>10. One Entity per Element</h4>\n<p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "10. One Entity per Element",
    "local_header_href": "#10-one-entity-per-element",
    "chunk_text": "<h4>10. One Entity per Element</h4><p><strong>Question:</strong> Is only one entity per schema possible per Revit element?\n\n<p><strong>Answer:</strong> Yes and no.  \nThere is no way to have more than one entity of a given schema per element via the GetEntity/SetEntity operations.  \nHowever, you could always create another schema with more than one sub-entities of a given schema type, including array fields and map fields.  \n\n<a name=\"11\"></a>\n<h4>11. Schemata Remain in Memory</h4>\n<p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0604_estorage_element_id",
    "header_text": "11. Schemata Remain in Memory",
    "local_header_href": "#11-schemata-remain-in-memory",
    "chunk_text": "<h4>11. Schemata Remain in Memory</h4><p><strong>Question:</strong> Is it true that once a schema has been loaded into Revit memory, it never disappears again until the session ends?\n\n<p><strong>Answer:</strong> That is true.  \nA schema is available per use on the session level, even if a new document is created. \nEntities are associated with specific documents.\n\n<p>Many thanks to Steve for all of these tips!\n</p></p></p>"
  }
]