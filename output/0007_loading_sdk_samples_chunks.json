[
  {
    "original_filename": "0007_loading_sdk_samples",
    "header_text": "Loading SDK Samples",
    "local_header_href": "#loading-sdk-samples",
    "chunk_text": "<h3>Loading SDK Samples</h3><p>The \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/???.html\">previous post</a>\n\ndiscussed the use of the unified solution file SDKSamples2009.sln \nto manage, compile and search the entire collection of over hundred\nsample applications provided in the Revit SDK. In order to actually \nexecute a sample for testing and debugging, it also needs to be loaded \ninto Revit. The most direct way to achieve this is to edit Revit.ini\nto add an entry to the Revit Tools &gt; External Tools menu. \nAnother possibility is to use the Add-In Manager provided with the SDK.\nBoth of these approaches are tedious or even impossible to execute \nmanually if you \nreally want to be able to look at any one of the samples at any time.\nHappily, a perfect solution to this problem is already included in the \nRevit SDK: RvtSamples.</p><p>RvtSamples is a Revit external application. \nThat means that is can define a user interface within the Revit UI.\nThe user interface can consist of menus and toolbars.\nEach menu entry or toolbar button can be linked to a Revit external command.\nWhat RvtSamples does is read a text file containing information about \nall the Revit SDK samples that are external commands and the menu structure\nthat we would like these to be presented in and set up this structure in\na hierarchical menu inside the Revit menu system.</p><p>By default, the text file is named RvtSamples.txt and lives either in \nthe same directory as the RvtSamples assembly DLL, or one or two levels \nabove it, based on the assumption the RvtSamples.dll is in a bin/Debug \nsubdirectory of the RvtSamples source code directory.</p><p>RvtSamples.txt contains a combination of the information specifying\nthe desired menu hierarchy and the information required to load and\nexecute the sample code, which is more or less the same as the data \nrequired to specify an external command in Revit.ini, i.e. \nECName, ECDescription, ECAssembly and ECClassName. \nIn Revit.ini, these four are used to define the menu item text and\nthe status bar description for the external command in the Revit \nuser interface on one hand, and the command class assembly path and\nfully qualified class name including namespace prefix on the other.\nFor RvtSamples, the description, assembly path and class name\nremain the same, and the menu item text is enhanced to include \nthe full definition of the menu hierarchy. \nFor example, here is the first entry from my RvtSamples.txt:</p><pre>\n/RvtSamples/By Flavour/All/About Revit\nShow the Revit product name, version and build number.\nC:\\a\\lib\\revit\\2009\\SDK\\Samples\\VersionChecking\\CS\\bin\\Debug\\VersionChecking.dll\nRevit.SDK.Samples.VersionChecking.CS.Command\n</pre><p>This is asking RvtSamples to construct a new top level menu RvtSamples\nin the Revit menu with a submenu 'By Flavour', another submenu 'All'\nwithin it, and, finally, a menu entry for the VersionChecking sample with \nthe menu text 'About Revit'.</p><img alt=\"Revit SDK Samples menu\" src=\"img/RvtSamples04.png\"/><p>RvtSamples.txt comes pre-populated with entries all Revit SDK samples\nclassified once by Revit flavour, i.e. Architecture, MEP and Structure, \nand secondly by Revit version, i.e. 8, 9, 2009 etc. Other classifications\nare conceivable and also useful. The problem is that with the over hundred \nsamples provided, each new classification is going to generate over one \nhundred new menu entries in the Revit menu, and this will hit a built-in\nlimit of about 500 pretty soon. Therefore, only two classifications \nhave been implemented for the moment.</p><p>Looking again at the data entered into RvtSamples.txt, you may note\nthat there is nothing at all limiting it to create one single top level \nmenu, or to be used to manage only the Revit SDK samples. \nActually, RvtSamples is a completely generic menu generator.\nYou can easily add your own entries to RvtSamples.txt to manage other\nexternal commands as well. For instance, I append a pretty large file\nto RvtSamples.txt on my system to provide an additional menu giving \naccess to all the ADN Revit training labs as well, as you can see here:</p><img alt=\"Additional ADN Samples menu\" src=\"img/RvtSamples06.png\"/><p>Once you have compiled RvtSamples, all you need to do to activate it,\ni.e. load it into Revit, is to add the following lines to Revit.ini:</p><pre>\n[ExternalApplications]\nEACount=1\nEAClassName1=RvtSamples.Application\nEAAssembly1=RvtSamples.dll\n</pre><p>Obviously, if you already have defined a section for external applications\nin your Revit.ini files, you will add just the two appropriate lines for\nRvtSamples to that existing section.\nOnce you have added the external application item into Revit.ini,\nRvtSamples will automatically create the specified additional menus \nand add menu items to the Revit menu for all samples listed in the text file \nevery time Revit starts up.</p><p><strong>Executive summary:</strong>\nRvtSamples is a generic Revit menu generator which reads a text file \nRvtSamples.txt listing all the Revit SDK samples categorised in \nvarious ways and creates a new top level hierarchical menu providing \nsimultaneous classified access to all of them. \nIt is not limited to making the samples available, \nthe text file can contain arbitrary other menu entry \ndefinitions as well or instead of the Revit SDK sample ones defined in RvtSamples.txt. \n</p><ul>\n<li>RvtSamples is an external application</li>\n<li>Defines entire menu hierarchy</li>\n<li>Generic menu generator</li>\n<li>Provides access to all Revit SDK samples</li>\n<li>Multiple categorisations</li>\n<li>Database driven</li>\n<li>Avoid hitting max. number of menu entries</li>\n<li>Minimal edits in Revit.ini</li>\n<li>Can be used for other external commands as well</li>\n</ul>"
  }
]