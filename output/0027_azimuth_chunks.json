[
  {
    "original_filename": "0027_azimuth",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style type=\"text/css\">\n.blue { color: blue; }\n.green { color: green; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n</style>"
  },
  {
    "original_filename": "0027_azimuth",
    "header_text": "Azimuth",
    "local_header_href": "#azimuth",
    "chunk_text": "<h3>Azimuth</h3><p>Several developers have asked how to determine the\n\n<a href=\"http://en.wikipedia.org/wiki/Azimuth\">\nazimuth</a>\n\nof an element, i.e. the angle between the element and true north.\nThis calculation is obviously strongly affected by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/project-location.html\">\nproject location</a>.\n\n\n<p>Determining the angle of an element is pretty simple.\nAll Revit elements have a Location property.\nFor some, the location is a point, while others can be line or curve based, in which case their location is an instance of the LocationCurve class.\nOne of the properties of the LocationCurve is Curve, which returns the actual geometry curve, which may be one of the derived classes Arc, Line, Ellipse or NurbSpline.\nIn addition to providing access to the underlying geometry curve, the location curve class also provides methods to move and rotate the element whose location it defines, and to determine or modify the order of the neighbouring elements joining to the end of the element's location curve.</p>\n<p>In order to determine the angle of an element, you can convert the two endpoints of its location curve to a vector and then measure the angle of that vector relative to some other vector, for instance the X axis or the north direction.</p>\n<p>Revit stores true north in the ProjectPosition object stored in the ProjectLocation, accessible through the ProjectLocations property on the document object. You can query the ProjectPosition.Angle property, which returns the angle difference between the project north and true north measured in radians. It can have a value from -π to +π.</p>\n\nTo determine the element azimuth, you can determine the element angle and the angle between project north and true north, and then simply add the two.</p><p>Some notes on the Revit geometry angle methods:\nThe Angle() method of the XYZ class treats its XYZ instances as vectors, not points.\nThis is what the Revit API help has to say about this:</p><blockquote>\n<p>The XYZ.Angle() method returns the angle between this vector and the specified vector.\n<br/>Return Value: The real number between 0 and π equal to the angle between the two vectors.\n<br/>Remarks: The angle between the two vectors is measured in the plane spanned by them.</p>\n</blockquote><p>If you are interested in angles around the full circle, i.e. in the interval [0, 2π], you should use AngleTo() instead of Angle(), which returns a value in the interval [0, π].</p><p>Here is a code example measuring various kinds of element angles and printing the project north deviation:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">CmdAzimuth</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"teal\">Element</span> SelectSingleElement( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">Selection</span> sel = doc.Selection;\n    <span class=\"teal\">Element</span> e = <span class=\"blue\">null</span>;\n    sel.Elements.Clear();\n    sel.StatusbarTip = <span class=\"maroon\">\"Please select a line\"</span>;\n    <span class=\"blue\">if</span>( sel.PickOne() )\n    {\n      <span class=\"teal\">ElementSetIterator</span> elemSetItr\n        = sel.Elements.ForwardIterator();\n      elemSetItr.MoveNext();\n      e = elemSetItr.Current <span class=\"blue\">as</span> <span class=\"teal\">Element</span>;\n    }\n    <span class=\"blue\">return</span> e;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"teal\">String</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">Application</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n    <span class=\"teal\">Element</span> e = SelectSingleElement( doc );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n    {\n      message = <span class=\"maroon\">\"No element selected\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n    }\n \n    <span class=\"teal\">LocationCurve</span> curve\n      = e.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == curve )\n    {\n      message = <span class=\"maroon\">\"No curve available\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n    }\n \n    <span class=\"teal\">XYZ</span> p = curve.Curve.get_EndPoint( 0 );\n    <span class=\"teal\">XYZ</span> q = curve.Curve.get_EndPoint( 1 );\n \n    <span class=\"teal\">Debug</span>.WriteLine( <span class=\"maroon\">\"Start point \"</span>\n      + <span class=\"teal\">Util</span>.PointString( p ) );\n \n    <span class=\"teal\">Debug</span>.WriteLine( <span class=\"maroon\">\"End point \"</span>\n      + <span class=\"teal\">Util</span>.PointString( q ) );\n \n    <span class=\"blue\">double</span> a = p.Angle( q );\n    <span class=\"teal\">Debug</span>.WriteLine(\n      <span class=\"maroon\">\"Angle between start and end points = \"</span>\n      + <span class=\"teal\">Util</span>.AngleString( a ) );\n \n    <span class=\"teal\">XYZ</span> v = q - p;\n    a = <span class=\"teal\">XYZ</span>.BasisX.Angle( v );\n    <span class=\"teal\">Debug</span>.WriteLine(\n      <span class=\"maroon\">\"Angle between points measured from X axis = \"</span>\n      + <span class=\"teal\">Util</span>.AngleString( a ) );\n \n    <span class=\"teal\">XYZ</span> z = <span class=\"teal\">XYZ</span>.BasisZ;\n    a = <span class=\"teal\">XYZ</span>.BasisX.AngleAround( v, z );\n    <span class=\"teal\">Debug</span>.WriteLine(\n      <span class=\"maroon\">\"Angle around measured from X axis = \"</span>\n      + <span class=\"teal\">Util</span>.AngleString( a ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ProjectLocation</span> location\n      <span class=\"blue\">in</span> doc.ProjectLocations )\n    {\n      <span class=\"teal\">ProjectPosition</span> projectPosition\n        = location.get_ProjectPosition( <span class=\"teal\">XYZ</span>.Zero );\n      <span class=\"blue\">double</span> pna = projectPosition.Angle;\n      <span class=\"teal\">Debug</span>.WriteLine(\n        <span class=\"maroon\">\"Angle between project north and true north \"</span>\n        + <span class=\"teal\">Util</span>.AngleString( pna ) );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n  }\n}\n</pre><p>Running this command in a project and selecting a model line with an angle of 35 degrees to the X axis generates the following result in the Visual Studio debug output window:</p><pre>\nStart point (-43.84,31.27,0)\nEnd point (-28.79,41.81,0)\nAngle between start and end points = 19.95 degrees\nAngle between points measured from X axis = 35 degrees\nAngle around measured from X axis = 35 degrees\nAngle between project north and true north 0 degrees\n</pre><p>You might also have a look at the Revit SDK SharedCoordinateSystem sample to see another example of using the ProjectPosition object.</p><p>I am adding the complete Visual Studio solution <a href=\"http://thebuildingcoder.typepad.com/blog/files/bc1007.zip\">here</a>. This version 1.0.0.7 includes all commands discussed so far: CmdListWalls, CmdRelationshipInverter, CmdWallDimensions, CmdFilterPerformance, CmdGetMaterials and the new CmdAzimuth.</p>"
  }
]