[
  {
    "original_filename": "0969_sun_direct_shadow",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0969_sun_direct_shadow",
    "header_text": "Sun Direction, Shadow Calculation and Wizard Update",
    "local_header_href": "#sun-direction-shadow-calculation-and-wizard-update",
    "chunk_text": "<h3>Sun Direction, Shadow Calculation and Wizard Update</h3><p>I enjoyed some wonderful hot sunny days since I returned from New England back to Switzerland.</p><p>Summer finally arrived.\nA nice change after the rain and cold both here and in New Hampshire and Massachusetts.</p><p>Talking about rain and sun leads up nicely to today's topic, on the sun direction and shadow calculation in a Revit BIM.\n\n<p>Before I get to that, though, I present an update of my Revit add-in wizards resulting in part from yesterday's post on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/processor-architecture-mismatch-warning.html\">\nprocessor architecture mismatch warning</a>:</p>\n<ul>\n<li><a href=\"#2\">Visual Studio Revit add-in wizard update</a></li>\n<li><a href=\"#3\">Calculating and marking shaded areas</a></li>\n<li><a href=\"#4\">Determining sun direction</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>Visual Studio Revit Add-in Wizard Update</h4>\n<p>I implemented updates of my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/add-in-wizards-for-revit-2014-1.html\">\nVisual Studio wizards to generate new C# and VB Revit 2014 add-ins</a> yesterday,\n\nfor two reasons:</p>\n<ul>\n<li>Suppress the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/processor-architecture-mismatch-warning.html\">\nprocessor architecture mismatch warning</a> by\n\nadding a property group to the Visual Studio project file – I always try to compile all my projects with zero warnings.</li>\n<li>Modified the Revit executable and API assembly paths to refer to Revit Onebox instead of the architectural flavour – the former was unavailable when I first installed Revit 2014.</li>\n</ul>\n<p>To install, simply copy the zip file of your choice to the matching Visual Studio project template folder in your local file system:</p>\n<ul>\n<li>\n<a href=\"zip/Revit2014AddinWizardCs2.zip\">Revit2014AddinWizardCs2.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual C#\n</li>\n<li>\n<a href=\"zip/Revit2014AddinWizardVb2.zip\">Revit2014AddinWizardVb2.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual Basic\n</li>\n</ul>\n<p>For all further details on this, links back to previous versions, other flavours, and tips on how to adapt the wizards for your own use, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/add-in-wizards-for-revit-2014-1.html\">\ninitial 2014 version</a>.</p>\n<a name=\"3\"></a>\n<h4>Calculating and Marking Shaded Areas</h4>\n<p>Determining the shaded areas in a model is obviously important for many areas of analysis.</p>\n<p>Assuming certain objects in the BIM cast a shade over others, is there a way to programmatically determine the shadowed areas?</p>\n<p>In fact, the Revit API provides a dedicated ExtrusionAnalyzer class for this very kind of calculation, which I made use of to determine the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/extrusion-analyser-and-plan-view-boundaries.html\">\nplan view furniture and equipment boundary loops</a> for\n\nmy 2D cloud-based editor workflow.</p>\n<p>Is there a way to mark these areas in the model?</p>\n<p>That sounds rather complicated.\nYou might be able to use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/boolean-operations-for-2d-polygons.html\">\nBoolean operations for 2D polygons</a> and\n\npaint the shaded areas.</p>\n<a name=\"4\"></a>\n<h4>Calculating Sun Direction for Shadow Calculation</h4>\n<p>This leads to the following</p>\n<p><strong>Question:</strong> I found code snippet showing how to use the ExtrusionAnalyzer class to calculate shadows in the material provided for the Autodesk University class on <i>Geometric Progression: Further Analysis of Geometry using Autodesk Revit 2012 API</i>.</p>\n<p>To make use of it, I also need to determine the sun direction using the Revit API.\nIt obviously differs based on time of the day, location, etc.\n\n<p>How can I obtain the sun direction for any given project location, date and time, please?</p>\n<p><strong>Answer:</strong> The sun direction is available from the Sun and Shadows element.\nOf course, it always represents a single point in time (date, time) and not the complete range of possible sun directions.\nThe sample takes this into account and recalculates shadows when the sun is moved to another date and time location via the user interface.\n\n<p>Here is the code to determine the sun direction from the sun and shadows settings:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">ShadowCalculatorUtils</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">XYZ</span> GetSunDirection( <span class=\"teal\">View</span> view )\n  {\n    <span class=\"teal\">SunAndShadowSettings</span> sunSettings\n      = view.SunAndShadowSettings;\n \n    <span class=\"teal\">XYZ</span> initialDirection = <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">//double altitude = sunSettings.Altitude;</span>\n \n    <span class=\"blue\">double</span> altitude = sunSettings.GetFrameAltitude(\n      sunSettings.ActiveFrame );\n \n    <span class=\"teal\">Transform</span> altitudeRotation = <span class=\"teal\">Transform</span>\n      .CreateRotation( <span class=\"teal\">XYZ</span>.BasisX, altitude );\n \n    <span class=\"teal\">XYZ</span> altitudeDirection = altitudeRotation\n      .OfVector( initialDirection );\n \n    <span class=\"green\">//double azimuth = sunSettings.Azimuth;</span>\n \n    <span class=\"blue\">double</span> azimuth = sunSettings.GetFrameAzimuth(\n      sunSettings.ActiveFrame );\n \n    <span class=\"blue\">double</span> actualAzimuth = 2 * <span class=\"teal\">Math</span>.PI - azimuth;\n \n    <span class=\"teal\">Transform</span> azimuthRotation = <span class=\"teal\">Transform</span>\n      .CreateRotation( <span class=\"teal\">XYZ</span>.BasisZ, actualAzimuth );\n \n    <span class=\"teal\">XYZ</span> sunDirection = azimuthRotation.OfVector(\n      altitudeDirection );\n \n    <span class=\"blue\">return</span> sunDirection;\n  }\n}\n</pre>\n</p></p></p></p>"
  },
  {
    "original_filename": "0969_sun_direct_shadow",
    "header_text": "Visual Studio Revit Add-in Wizard Update",
    "local_header_href": "#visual-studio-revit-add-in-wizard-update",
    "chunk_text": "<h4>Visual Studio Revit Add-in Wizard Update</h4><p>I implemented updates of my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/add-in-wizards-for-revit-2014-1.html\">\nVisual Studio wizards to generate new C# and VB Revit 2014 add-ins</a> yesterday,\n\nfor two reasons:</p><ul>\n<li>Suppress the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/processor-architecture-mismatch-warning.html\">\nprocessor architecture mismatch warning</a> by\n\nadding a property group to the Visual Studio project file – I always try to compile all my projects with zero warnings.</li>\n<li>Modified the Revit executable and API assembly paths to refer to Revit Onebox instead of the architectural flavour – the former was unavailable when I first installed Revit 2014.</li>\n</ul><p>To install, simply copy the zip file of your choice to the matching Visual Studio project template folder in your local file system:</p><ul>\n<li>\n<a href=\"zip/Revit2014AddinWizardCs2.zip\">Revit2014AddinWizardCs2.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual C#\n</li>\n<li>\n<a href=\"zip/Revit2014AddinWizardVb2.zip\">Revit2014AddinWizardVb2.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual Basic\n</li>\n</ul><p>For all further details on this, links back to previous versions, other flavours, and tips on how to adapt the wizards for your own use, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/add-in-wizards-for-revit-2014-1.html\">\ninitial 2014 version</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0969_sun_direct_shadow",
    "header_text": "Calculating and Marking Shaded Areas",
    "local_header_href": "#calculating-and-marking-shaded-areas",
    "chunk_text": "<h4>Calculating and Marking Shaded Areas</h4><p>Determining the shaded areas in a model is obviously important for many areas of analysis.</p><p>Assuming certain objects in the BIM cast a shade over others, is there a way to programmatically determine the shadowed areas?</p><p>In fact, the Revit API provides a dedicated ExtrusionAnalyzer class for this very kind of calculation, which I made use of to determine the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/extrusion-analyser-and-plan-view-boundaries.html\">\nplan view furniture and equipment boundary loops</a> for\n\nmy 2D cloud-based editor workflow.</p><p>Is there a way to mark these areas in the model?</p><p>That sounds rather complicated.\nYou might be able to use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/boolean-operations-for-2d-polygons.html\">\nBoolean operations for 2D polygons</a> and\n\npaint the shaded areas.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "0969_sun_direct_shadow",
    "header_text": "Calculating Sun Direction for Shadow Calculation",
    "local_header_href": "#calculating-sun-direction-for-shadow-calculation",
    "chunk_text": "<h4>Calculating Sun Direction for Shadow Calculation</h4><p>This leads to the following</p><p><strong>Question:</strong> I found code snippet showing how to use the ExtrusionAnalyzer class to calculate shadows in the material provided for the Autodesk University class on <i>Geometric Progression: Further Analysis of Geometry using Autodesk Revit 2012 API</i>.</p><p>To make use of it, I also need to determine the sun direction using the Revit API.\nIt obviously differs based on time of the day, location, etc.\n\n<p>How can I obtain the sun direction for any given project location, date and time, please?</p>\n<p><strong>Answer:</strong> The sun direction is available from the Sun and Shadows element.\nOf course, it always represents a single point in time (date, time) and not the complete range of possible sun directions.\nThe sample takes this into account and recalculates shadows when the sun is moved to another date and time location via the user interface.\n\n<p>Here is the code to determine the sun direction from the sun and shadows settings:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">ShadowCalculatorUtils</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">XYZ</span> GetSunDirection( <span class=\"teal\">View</span> view )\n  {\n    <span class=\"teal\">SunAndShadowSettings</span> sunSettings\n      = view.SunAndShadowSettings;\n \n    <span class=\"teal\">XYZ</span> initialDirection = <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">//double altitude = sunSettings.Altitude;</span>\n \n    <span class=\"blue\">double</span> altitude = sunSettings.GetFrameAltitude(\n      sunSettings.ActiveFrame );\n \n    <span class=\"teal\">Transform</span> altitudeRotation = <span class=\"teal\">Transform</span>\n      .CreateRotation( <span class=\"teal\">XYZ</span>.BasisX, altitude );\n \n    <span class=\"teal\">XYZ</span> altitudeDirection = altitudeRotation\n      .OfVector( initialDirection );\n \n    <span class=\"green\">//double azimuth = sunSettings.Azimuth;</span>\n \n    <span class=\"blue\">double</span> azimuth = sunSettings.GetFrameAzimuth(\n      sunSettings.ActiveFrame );\n \n    <span class=\"blue\">double</span> actualAzimuth = 2 * <span class=\"teal\">Math</span>.PI - azimuth;\n \n    <span class=\"teal\">Transform</span> azimuthRotation = <span class=\"teal\">Transform</span>\n      .CreateRotation( <span class=\"teal\">XYZ</span>.BasisZ, actualAzimuth );\n \n    <span class=\"teal\">XYZ</span> sunDirection = azimuthRotation.OfVector(\n      altitudeDirection );\n \n    <span class=\"blue\">return</span> sunDirection;\n  }\n}\n</pre>\n</p></p></p>"
  }
]