[
  {
    "original_filename": "0674_group_edit",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0674_group_edit",
    "header_text": "Editing a Group Take Two",
    "local_header_href": "#editing-a-group-take-two",
    "chunk_text": "<h3>Editing a Group Take Two</h3><p>I am publishing this now, on November 11, 2011, at 11:11 my time, to celebrate this unique and yet completely arbitrary time and date in our calendar history.\nI hope you appreciate it and celebrated that moment in your own way as well  :-)\n\n<p>I discussed various aspects of programmatically handling Revit element groups in the past, such as how to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/creating-a-group-and-how-to-fish.html\">\ncreate</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/rename-a-group.html\">\nrename</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/editing-elements-inside-groups.html\">\nedit</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/deleting-a-group.html\">\ndelete</a> them.\n\n<p>In a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/editing-elements-inside-groups.html?cid=6a00e553e1689788330162fbe9f033970d#comment-6a00e553e1689788330162fbe9f033970d\">\ncomment</a> on \n\nthe discussion on editing groups, YarUnderoaker asked for further clarification on how to implement the ungrouping and recreation of a group to make changes to it:\n\n<p><strong>Question:</strong> I cannot figure out how to do as stated in the recommendations: \n\"You can programmatically ungroup, make the change, regroup and then swap the other instances of the old group to the new group to get the same effect.\" \n\n<p>Please, can you give a simple example?\n\n<p><strong>Answer:</strong> My colleague Saikat Bhattacharya put together some sample code to answer this for you.\nIt performs the following steps:\n\n<ul>\n<li>Prompt user to select a group.\n<li>Ungroup it.\n<li>Create an element set of all its members except the first.\n<li>Create a new group using the element set.\n<li>Change the new group type to the old group type.\n</li></li></li></li></li></ul>\n<p>Here is the complete code to implement the mainline Execute method of the external command:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Prompt user to select existing group</span>\n \n    <span class=\"teal\">Group</span> grpExisting = doc.GetElement( \n      uidoc.Selection.PickObject( <span class=\"teal\">ObjectType</span>.Element, \n        <span class=\"maroon\">\"Select an existing group\"</span> ) ) <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n    <span class=\"blue\">string</span> name = grpExisting.Name;\n \n    <span class=\"green\">// Ungroup the group</span>\n \n    <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n    tx.Start( <span class=\"maroon\">\"Ungroup and delete\"</span> );\n \n    <span class=\"teal\">ElementSet</span> grpElements = grpExisting.Ungroup();\n \n    <span class=\"green\">// Create element set for new group</span>\n \n    <span class=\"teal\">ElementSet</span> newgrpElements = <span class=\"blue\">new</span> <span class=\"teal\">ElementSet</span>();\n \n    <span class=\"blue\">int</span> counter = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> grpElements )\n    {\n      <span class=\"blue\">if</span>( 0 == counter )\n      {\n        <span class=\"green\">// Delete the first group element</span>\n \n        doc.Delete( e );\n      }\n      <span class=\"blue\">else</span>\n      {\n        newgrpElements.Insert( e );\n      }\n      ++counter;\n    }\n \n    tx.Commit();\n \n    <span class=\"green\">// Create new group</span>\n \n    tx.Start( <span class=\"maroon\">\"Group\"</span> );\n \n    <span class=\"teal\">Group</span> grpNew = doc.Create.NewGroup( \n      newgrpElements );\n \n    <span class=\"green\">// Access the name of the previous group type </span>\n    <span class=\"green\">// and change the new group type to previous </span>\n    <span class=\"green\">// group type to retain the previous group </span>\n    <span class=\"green\">// configuration</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> coll \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">GroupType</span> ) );\n \n    <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GroupType</span>&gt; grpTypes \n      = <span class=\"blue\">from</span> <span class=\"teal\">GroupType</span> g <span class=\"blue\">in</span> coll \n        <span class=\"blue\">where</span> g.Name == name <span class=\"blue\">select</span> g;\n \n    grpNew.GroupType = grpTypes.First&lt;<span class=\"teal\">GroupType</span>&gt;();\n \n    tx.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>I hope this clarifies the process.\n\n<p>Many thanks to Saikat for sharing this!\n</p></p></p></p></p></p></p></p></p>"
  }
]