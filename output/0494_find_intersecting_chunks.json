[
  {
    "original_filename": "0494_find_intersecting",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0494_find_intersecting",
    "header_text": "Find Intersecting Elements",
    "local_header_href": "#find-intersecting-elements",
    "chunk_text": "<h3>Find Intersecting Elements</h3><p>Right now I am sitting in the Tel Aviv Ben Gurion airport, which very friendlily provides free public wifi Internet access, unlike the also very friendly staff with an unfortunately less generous wifi policy in the Sheraton hotel we stayed at, who (try to) charge USD 20 per day for the same service.\n\n<p>Yesterday we looked at the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/xml-family-usage-report.html\">\nXML family usage report</a> from \n\nKevin Vandecar's \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/filtered-element-collectors.html\">\nfiltering and optimisation</a> presentation \n\nat the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/devcamp-devlabs-and-updated-api-training-schedule.html\">\nAEC DevCamp</a> conference\n\nin Boston in June, which formed the base of my  \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/autodesk-university-2010-class-materials.html\">\nAU class CP234-2</a> on\n\nthe same topic.\n\n<p>I would like to present another of Kevin's filtering examples, which I find rather neat and demonstrates one approach to find all element in close proximity to a selected one.\nThis frequently requested function is easy to implement, because the filtered element collector framework offers classes providing exactly the functionality we need for this:\n\n\n<ul>\n<li>The collector viewId constructor narrows down the selection to only viewable elements.\n<li>The BoundingBoxIntersectsFilter returns all elements that intersect a given bounding box.\n<li>An \nexclusion filter can be used to eliminate known elements to exclude, specifically:\n<ul>\n<li>The view itself, which often will have an intersecting bounding box.\n<li>The selected element.\n</li></li></ul>\n</li></li></li></ul>\n<p>Here is the short external command Execute mainline implementation putting this together:\n\n\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">FilterEx2</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiApp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uiDoc = uiApp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiApp.Application;\n    <span class=\"teal\">Document</span> doc = uiDoc.Document;\n \n    <span class=\"green\">// Select something to use as base bounding box.</span>\n \n    <span class=\"teal\">Reference</span> r = uiDoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element );\n \n    <span class=\"green\">// Find the bounding box from the selected </span>\n    <span class=\"green\">// object and convert to outline.</span>\n \n    <span class=\"teal\">BoundingBoxXYZ</span> bb = r.Element.get_BoundingBox(\n      doc.ActiveView );\n \n    <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( bb.Min, bb.Max );\n \n    <span class=\"green\">// Create a BoundingBoxIntersectsFilter to </span>\n    <span class=\"green\">// find everything intersecting the bounding </span>\n    <span class=\"green\">// box of the selected element.</span>\n \n    <span class=\"teal\">BoundingBoxIntersectsFilter</span> bbfilter \n      = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>( outline );\n \n    <span class=\"green\">// Use a view to construct the filter so we </span>\n    <span class=\"green\">// get only visible elements. For example, </span>\n    <span class=\"green\">// the analytical model will be found otherwise.</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> collector \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( \n        doc, doc.ActiveView.Id );\n \n    <span class=\"green\">// Lets also exclude the view itself (which </span>\n    <span class=\"green\">// often will have an intersecting bounding box), </span>\n    <span class=\"green\">// and also the element selected.</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; idsExclude \n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    idsExclude.Add( r.Element.Id );\n\n    <span class=\"green\">// No need for this, BoundingBoxIntersectsFilter </span>\n    <span class=\"green\">// excludes all objects derived from View, as </span>\n    <span class=\"green\">// pointed out by Jim Jia below:</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">//idsExclude.Add( doc.ActiveView.Id );</span>\n \n    <span class=\"green\">// Get the set of elements that pass the </span>\n    <span class=\"green\">// criteria. Note both filters are quick, </span>\n    <span class=\"green\">// so order is not so important.</span>\n \n    collector.Excluding( idsExclude )\n      .WherePasses( bbfilter );\n \n    <span class=\"green\">// Generate a report to display in the dialog.</span>\n \n    <span class=\"blue\">int</span> nCount = 0;\n    <span class=\"blue\">string</span> report = <span class=\"blue\">string</span>.Empty;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n    {\n      <span class=\"blue\">string</span> name = e.Name;\n \n      report += <span class=\"maroon\">\"\\nName = \"</span> + name \n        + <span class=\"maroon\">\" Element Id: \"</span> + e.Id.ToString();\n \n      nCount++;\n    }\n \n    <span class=\"teal\">Util</span>.ShowTaskDialog( \n      <span class=\"maroon\">\"Bounding Box + View + Exclusion Filter\"</span>,\n      <span class=\"maroon\">\"Found \"</span> + nCount.ToString() \n      + <span class=\"maroon\">\" elements whose bounding box intersects\"</span>, \n      report );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>Running this in the StructuralUsage.rvt model, I select the following highlighted beam:</p>\n<center>\n<img alt=\"Beam intersecting various elements\" src=\"img/find_intersecting_0.png\"/>\n</center>\n<p>This produces the following report of intersecting elements:</p>\n<center>\n<img alt=\"Report of intersecting elements\" src=\"img/find_intersecting_1.png\"/>\n</center>\n</p></p></p></p>"
  }
]