[
  {
    "original_filename": "1909_paint_stair_col_beam",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- Forge accelerators: join now or wait for longer\n  break during july august september\n  have you been thinking about joining to get started efficiently?\n  now's the time!\n  Upcoming Forge Virtual Accelerator - Thuvaraiyam Pathi - June 21-25, 2021\n  https://www.eventbrite.com/e/autodesk-virtual-forge-accelerator-thuvaraiyam-pathi-june-21-25-2021-registration-138643130335\n  Benefit from dedicated time to develop your Forge application – with direct help and training from Forge engineering experts.\n  Real time expert help dramatically shortening your learning and dev time – and create trusting relationships with Forge experts at Autodesk.\n  Submit your proposal today!\n  https://twitter.com/AfroJme/status/1402684098687143942?s=20\n  [Enjoying an early summer quiet period? Attend next week’s Forge Accelerator!](https://www.keanw.com/2021/06/enjoying-an-early-summer-quiet-period-attend-next-weeks-forge-accelerator.html)\n  https://autodesk.slack.com/archives/C0PLC20PP/p1623259873052400\n\n- paint stairs\n  [Paint Stair Faces](https://forums.autodesk.com/t5/revit-api-forum/paint-stair-faces/m-p/10388359)\n  solved by Bruce [@canyon.des[(https://forums.autodesk.com/t5/user/viewprofilepage/user-id/10032309) Hans\n  [Q] Is there any reason why stair faces can be painted in the UI, and not in the API? The question was raised in 2015 and apparently still exists:\n  I'm trying to paint some of the faces of a stair (a monolithic stair) through the 2015 revit API. It appears that it cannot be done programmatically (i get an error message that \"the element faces cannot be painted\") even if i can do this stair face painting manually in revit. Is there a way to paint automatically those faces? An excerpt of my code below. \n  [A] For stairs, you need to use `GetStairsLandings` and `GetStairsRuns` to get the `ElementId` to paint landings or runs. It's not intuitive but works. It's the same to find out whether the landing or run faces are painted or not.\n  Thx\n\n- find beams intersecting columns using ray tracing versus the column location line, Face.IsInside and bounding box intersection\n  Ray Projection Not Picking Up Beams\n  https://forums.autodesk.com/t5/revit-api-forum/ray-projection-not-picking-up-beams/m-p/10388868\n\ntwitter:\n\nadd #thebuildingcoder\n\nPainting stairs and shooting for the beams with the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/paintstair\n\nTwo Revit API discussion forum threads that I am currently involved in\n&ndash; Painting stairs\n&ndash; Ray tracing vs bounding box to find beams intersecting columns...\n\nlinkedin:\n\nPainting stairs and shooting for the beams with the #RevitAPI\n\nhttps://autode.sk/paintstair\n\nTwo Revit API discussion forum threads that I am currently involved in:\n\n- Painting stairs\n- Ray tracing vs bounding box to find beams intersecting columns...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n**Question:** \n\n**Answer:** \n\nMany thanks to  for this very helpful explanation!\n\n-->"
  },
  {
    "original_filename": "1909_paint_stair_col_beam",
    "header_text": "Painting Stairs and Shooting for the Beams",
    "local_header_href": "#painting-stairs-and-shooting-for-the-beams",
    "chunk_text": "### Painting Stairs and Shooting for the Beams\n\nHere are \ntwo [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) threads\nthat I am currently quite involved in:\n\n- [Painting stairs](#2)\n- [Ray tracing vs bounding box to find beams intersecting columns](#3)\n\n<center>\n<img src=\"img/painted_stair_in_seoul_south_korea.jpg\" alt=\"Painted stair\" title=\"Painted stair\" width=\"430\"/> <!-- 860 -->\n</center>\n\n<!--\n\noops... too late..."
  },
  {
    "original_filename": "1909_paint_stair_col_beam",
    "header_text": "Join Forge Accelerator Now or Wait",
    "local_header_href": "#0",
    "chunk_text": "####<a name=\"0\"></a> Join Forge Accelerator Now or Wait\n\nHave you been thinking about joining\na [Forge accelerator](https://forge.autodesk.com/accelerator-program) sometime soon to get an efficient start\nwith [Autodesk Forge](https://forge.autodesk.com/) to access design and engineering data in the cloud?\n\nNow's the time!\n\nThe next one coming up\nis [Thuvaraiyam Pathi, June 21-25, 2021 &ndash; registration](https://www.eventbrite.com/e/autodesk-virtual-forge-accelerator-thuvaraiyam-pathi-june-21-25-2021-registration-138643130335)\n\nIt is followed by a break during July, August and possibly September.\n\nIn the Forge accelerator, you can benefit from dedicated time to develop your Forge application with direct help and training from Forge engineering experts.\nReal time expert help can dramatically shorten your learning and dev time and create trusting relationships with Forge experts at Autodesk.\n\nSubmit your proposal today!\n\nYou can also check further invitations\nfrom [Jaime](https://twitter.com/AfroJme/status/1402684098687143942)\nand [Kean](https://www.keanw.com/2021/06/enjoying-an-early-summer-quiet-period-attend-next-weeks-forge-accelerator.html)\n\n-->"
  },
  {
    "original_filename": "1909_paint_stair_col_beam",
    "header_text": "Painting Stairs",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Painting Stairs\n\nA long-standing [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread on how\nto [paint stair faces](https://forums.autodesk.com/t5/revit-api-forum/paint-stair-faces/m-p/10388359) was finally answered quite simply\nby Bruce [@canyon.des](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/10032309) Hans:\n\n**Question:** Is there any reason why stair faces can be painted in the UI, and not in the API?\nThe question was raised in 2015 and apparently still exists:\n\nI'm trying to paint some of the faces of a stair (a monolithic stair) through the Revit API.\nIt appears that it cannot be done programmatically &ndash; I get an error message saying that \"the element faces cannot be painted\" &ndash; even if I can achieve this stair face painting manually in the Revit UI.\nIs there a way to automatically paint these faces?\n\n**Answer:** For stairs, you need to use `GetStairsLandings` and `GetStairsRuns` to get the `ElementId` to paint landings or runs.\nIt's not intuitive but works.\nUse the same to find out whether the landing or run faces are painted or not.\n\n<pre class=\"code\">\n<span style=\"color:blue;\">void</span>&nbsp;PaintStairs(&nbsp;UIDocument&nbsp;uidoc,&nbsp;Material&nbsp;mat&nbsp;)\n{\n&nbsp;&nbsp;Document&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n&nbsp;&nbsp;Selection&nbsp;sel&nbsp;=&nbsp;uidoc.Selection;\n \n&nbsp;&nbsp;<span style=\"color:green;\">//FaceSelectionFilter&nbsp;filter&nbsp;=&nbsp;new&nbsp;FaceSelectionFilter();</span>\n&nbsp;&nbsp;Reference&nbsp;pickedRef&nbsp;=&nbsp;sel.PickObject(\n&nbsp;&nbsp;&nbsp;&nbsp;ObjectType.PointOnElement,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//filter,&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Please&nbsp;select&nbsp;a&nbsp;Face&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;Element&nbsp;elem&nbsp;=&nbsp;doc.GetElement(&nbsp;pickedRef&nbsp;);\n \n&nbsp;&nbsp;GeometryObject&nbsp;geoObject&nbsp;=&nbsp;elem\n&nbsp;&nbsp;&nbsp;&nbsp;.GetGeometryObjectFromReference(&nbsp;pickedRef&nbsp;);\n \n&nbsp;&nbsp;Face&nbsp;fc&nbsp;=&nbsp;geoObject&nbsp;<span style=\"color:blue;\">as</span>&nbsp;Face;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;elem.Category.Id.IntegerValue&nbsp;==&nbsp;-2000120&nbsp;)&nbsp;<span style=\"color:green;\">//&nbsp;Stairs</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;flag&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;Stairs&nbsp;str&nbsp;=&nbsp;elem&nbsp;<span style=\"color:blue;\">as</span>&nbsp;Stairs;\n&nbsp;&nbsp;&nbsp;&nbsp;ICollection&lt;ElementId&gt;&nbsp;landings&nbsp;=&nbsp;str.GetStairsLandings();\n&nbsp;&nbsp;&nbsp;&nbsp;ICollection&lt;ElementId&gt;&nbsp;runs&nbsp;=&nbsp;str.GetStairsLandings();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;Transaction&nbsp;transaction&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Transaction(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Paint&nbsp;Material&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;ElementId&nbsp;id&nbsp;<span style=\"color:blue;\">in</span>&nbsp;landings&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc.Paint(&nbsp;id,&nbsp;fc,&nbsp;mat.Id&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!flag&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;ElementId&nbsp;id&nbsp;<span style=\"color:blue;\">in</span>&nbsp;runs&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc.Paint(&nbsp;id,&nbsp;fc,&nbsp;mat.Id&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n</pre>\n\nMany thanks to Bruce for this simple and effective solution.\nWe have not finished discussing this issue yet, so please refer to the discussion thread for more updates."
  },
  {
    "original_filename": "1909_paint_stair_col_beam",
    "header_text": "Ray Tracing vs Location to Find Beams Intersecting Columns",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Ray Tracing vs Location to Find Beams Intersecting Columns\n\nAnother recurring topic is how to find intersecting elements.\n\nThe thread\non [ray projection not picking up beams](https://forums.autodesk.com/t5/revit-api-forum/ray-projection-not-picking-up-beams/m-p/10388868) ends\nup solved with two different approaches demonstrating possible ways to find beams intersecting columns using ray tracing versus the column location line, `Face.IsInside` and bounding box intersection:\n\n**Question:** I'm trying to create a ray projection that finds the closest beam or slab from a column and attach it to the top to beam/slab found by the ray projection.\nFor some reason, I can't get it to find the beams I want it to attach too.\nIt only finds the slab.\nAny Ideas?\n\nThis is what it looks like before I run my current code:\n\n<center>\n<img src=\"img/find_beams_intersecting_column_01.png\" alt=\"Beams intersecting columns\" title=\"Beams intersecting columns\" width=\"600\"/> <!-- 1346 -->\n</center>\n\nThis is what it looks like afterwards; it only finds the slabs:\n\n<center>\n<img src=\"img/find_beams_intersecting_column_02.png\" alt=\"Beams intersecting columns\" title=\"Beams intersecting columns\" width=\"600\"/> <!-- 1170 -->\n</center>\n\nI want it to stop at the bottom of both beams and slabs.\n\nSooo... I tried to change the code to just pick up the beams:\n\nThis is what I have after that; circled in blue is what didn't attach to the beam above.\nSome did attach:\n\n<center>\n<img src=\"img/find_beams_intersecting_column_03.png\" alt=\"Beams intersecting columns\" title=\"Beams intersecting columns\" width=\"600\"/> <!-- 1294 -->\n</center>\n\nSo, why is this?\nAnd, is there anything I can do to fix it.\n\nThanks ahead of time for any responses!\n\nI think it has something to do with whether the column is centred under the beam, but I didn't think that would matter, because I'm using `FindReferenceTarget.All` in my ray projection.\n\nExample of off-centre column not attaching:\n\n<center>\n<img src=\"img/find_beams_intersecting_column_04.png\" alt=\"Beams intersecting columns\" title=\"Beams intersecting columns\" width=\"600\"/> <!-- 2560 -->\n</center>\n\n**Answer:** It absolutely matters. The ray you shoot is an infinitely thin line, so you can easily miss something. You could try using five rays per pillar, e.g., one in the centre and one in each corner. I would suggest that you add some visual debugging code that represents part of your infinite shooting ray with a model line to visualise what is going on and whether a beam is hit or missed.\n\n**Question:** I don't really understand, if the center of my column (which is where the ray is generated from) is within the bounds of the beam how does it not pick up the face of the beam? It seems to only pick up the centreline of the beam... Does `FindReferenceTarget.All` not find the face of beam? And if I add rays to the corners of the column I don't see how that would help if it only finds the beam when you hit the beam centreline straight on. I hope that makes sense.  Any ideas?\n\n**Answer:** Normally, the reference intersector is set up so that an infinitely thin ray is shot and all intersections with faces or edges are reported. Just as you say, hitting an edge or a centreline or any other infinitely thin object is infinitely improbable.\n\n**Question:** What's a good way to do multiple rays for a single object?\n\nI also just figured out why the ray bounce isn't working.\nIt wasn't working on columns that extended past the beam already.\nThat's because Revit already cuts out the column from the beam.\nSo, there is no face for it to hit.\nIt works if the columns are below the beam.\n\n<center>\n<img src=\"img/find_beams_intersecting_column_05.png\" alt=\"Beams intersecting columns\" title=\"Beams intersecting columns\" width=\"350\"/> <!-- 729 -->\n</center>\n\nWhen I hide the column:\n\n<center>\n<img src=\"img/find_beams_intersecting_column_06.png\" alt=\"Beams intersecting columns\" title=\"Beams intersecting columns\" width=\"350\"/> <!-- 1014 -->\n</center>\n\nSo, I think that your method of doing rays on the corners of the columns would help possibly pick up the intersecting edge.\nI just don't know of a way to assign 5 rays to the column.\nCan you point me in the correct direction?\nI haven't seen anything on multiple rays per single object.\n\n**Answer:** Simply calculate the four column bottom face corner points and the column centre line direction vector and use that data to define the four rays.\n\n**Question:** lol... I wish it was \"simply\". Haha!\nI have been trying to figure out how to get the bottom column corners with little success...\nI have seen your blog about finding the bottom of walls and top of sloped walls but can't find anything on bottom of columns.\nAlso, once I get the points, where do I place them so it generates multiple rays?\n\n**Answer:** There are ever so many different ways.\n\nMaybe easier to iterate over the faces rather than the edges.\nEither way is fine, though.\n\nIf you know that the cross section is rectangular and the column is vertical, you know that you have four bottom corners, and you can differentiate them from all other vertices simply by picking the four ones with minimal Z coordinates.\n\n**Answer 2:** This task can actually be done without `ReferenceIntersector`\n\n1) You can extract the Z extents of slabs/beams and columns from bounding box to compare level proximity.\n\n2) You can use `Face.IsInside` to determine if a column location line is within the limits of the bottom face of slab or beam matching (1).\nFor slanted columns, you'll have to follow a point at base up the vector of the slant to see where point ends up at slab/beam underside.\nMultiply `XY` components of vector by height difference between point at column base and underside of beam/slab, then add them to point at base.\n\nLikely however that the `IsInside` will be affected by joins, as the `ReferenceIntersector` is.\n\nYou can probably identify a second capture group via bounding box intersection filters, i.e., the cases where the ray missing the faces due to join will be a cases where there is a bounding box intersection between such elements.\n\nCould also use `JoinGeometry.UnjoinGeometry` between columns and slabs/beams prior to investigation.\n\nNote that occasionally attaching column to underside will fail if column profile is not completely covered.\nOften, you can partially cover a column and still get it to attach, but there is a limit on that.\n\n**Response:**  Thank you both for the responses.\nI changed my approach to use bounding boxes like you suggest in Answer 2.\nIt seems to be working for me.\n\nHere's what worked for me:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">void</span>&nbsp;AdjustColumnHeightsUsingBoundingBox(\n&nbsp;&nbsp;Document&nbsp;doc,\n&nbsp;&nbsp;IList&lt;ElementId&gt;&nbsp;ids&nbsp;)\n{\n&nbsp;&nbsp;View&nbsp;view&nbsp;=&nbsp;doc.ActiveView;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;allColumns&nbsp;=&nbsp;0;\n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;successColumns&nbsp;=&nbsp;0;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;view&nbsp;<span style=\"color:blue;\">is</span>&nbsp;View3D&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;Transaction&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Transaction(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Adjust&nbsp;Column&nbsp;Heights&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;ElementId&nbsp;elemId&nbsp;<span style=\"color:blue;\">in</span>&nbsp;ids&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Element&nbsp;elem&nbsp;=&nbsp;doc.GetElement(&nbsp;elemId&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Check&nbsp;if&nbsp;element&nbsp;is&nbsp;column</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;(BuiltInCategory)&nbsp;elem.Category.Id.IntegerValue&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;BuiltInCategory.OST_StructuralColumns&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allColumns++;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FamilyInstance&nbsp;column&nbsp;=&nbsp;elem&nbsp;<span style=\"color:blue;\">as</span>&nbsp;FamilyInstance;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Collect&nbsp;beams&nbsp;and&nbsp;slabs&nbsp;within&nbsp;bounding&nbsp;box</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;BuiltInCategory&gt;&nbsp;builtInCats&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;BuiltInCategory&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builtInCats.Add(&nbsp;BuiltInCategory.OST_Floors&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builtInCats.Add(&nbsp;BuiltInCategory.OST_StructuralFraming&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElementMulticategoryFilter&nbsp;beamSlabFilter&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ElementMulticategoryFilter(&nbsp;builtInCats&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundingBoxXYZ&nbsp;bb&nbsp;=&nbsp;elem.get_BoundingBox(&nbsp;view&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Outline&nbsp;myOutLn&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Outline(&nbsp;bb.Min,&nbsp;bb.Max&nbsp;+&nbsp;100&nbsp;*&nbsp;XYZ.BasisZ&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundingBoxIntersectsFilter&nbsp;bbFilter&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;BoundingBoxIntersectsFilter(&nbsp;myOutLn&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilteredElementCollector&nbsp;collector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;FilteredElementCollector(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WherePasses(&nbsp;beamSlabFilter&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WherePasses(&nbsp;bbFilter&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Element&gt;&nbsp;intersectingBeams&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;Element&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Element&gt;&nbsp;intersectingSlabs&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;Element&gt;();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;ColumnAttachment.GetColumnAttachment(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column,&nbsp;1&nbsp;)&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Change&nbsp;color&nbsp;of&nbsp;columns&nbsp;to&nbsp;green</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;color&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Color(&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;0,&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;255,&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OverrideGraphicSettings&nbsp;ogs&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;OverrideGraphicSettings();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ogs.SetProjectionLineColor(&nbsp;color&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view.SetElementOverrides(&nbsp;elem.Id,&nbsp;ogs&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;Element&nbsp;e&nbsp;<span style=\"color:blue;\">in</span>&nbsp;collector&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;e.Category.Name&nbsp;==&nbsp;<span style=\"color:#a31515;\">&quot;Structural&nbsp;Framing&quot;</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersectingBeams.Add(&nbsp;e&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;e.Category.Name&nbsp;==&nbsp;<span style=\"color:#a31515;\">&quot;Floors&quot;</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intersectingSlabs.Add(&nbsp;e&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;intersectingBeams.Any()&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Element&nbsp;lowestBottomElem&nbsp;=&nbsp;intersectingBeams.First();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;Element&nbsp;beam&nbsp;<span style=\"color:blue;\">in</span>&nbsp;intersectingBeams&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundingBoxXYZ&nbsp;thisBeamBB&nbsp;=&nbsp;beam.get_BoundingBox(&nbsp;view&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundingBoxXYZ&nbsp;currentLowestBB&nbsp;=&nbsp;lowestBottomElem.get_BoundingBox(&nbsp;view&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;thisBeamBB.Min.Z&nbsp;&lt;&nbsp;currentLowestBB.Min.Z&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowestBottomElem&nbsp;=&nbsp;beam;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachment.AddColumnAttachment(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;column,&nbsp;lowestBottomElem,&nbsp;1,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachmentCutStyle.None,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachmentJustification.Minimum,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successColumns++;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;intersectingSlabs.Any()&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Element&nbsp;lowestBottomElem&nbsp;=&nbsp;intersectingSlabs.First();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;Element&nbsp;slab&nbsp;<span style=\"color:blue;\">in</span>&nbsp;intersectingSlabs&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundingBoxXYZ&nbsp;thisSlabBB&nbsp;=&nbsp;slab.get_BoundingBox(&nbsp;view&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundingBoxXYZ&nbsp;currentLowestBB&nbsp;=&nbsp;lowestBottomElem.get_BoundingBox(&nbsp;view&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;thisSlabBB.Min.Z&nbsp;&lt;&nbsp;currentLowestBB.Min.Z&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowestBottomElem&nbsp;=&nbsp;slab;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachment.AddColumnAttachment(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;column,&nbsp;lowestBottomElem,&nbsp;1,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachmentCutStyle.None,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachmentJustification.Minimum,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successColumns++;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Change&nbsp;color&nbsp;of&nbsp;columns&nbsp;to&nbsp;red</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;color&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Color(&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;255,&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;0,&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OverrideGraphicSettings&nbsp;ogs&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;OverrideGraphicSettings();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ogs.SetProjectionLineColor(&nbsp;color&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view.SetElementOverrides(&nbsp;elem.Id,&nbsp;ogs&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;TaskDialog.Show(&nbsp;<span style=\"color:#a31515;\">&quot;Columns&nbsp;Changed&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>.Format(&nbsp;<span style=\"color:#a31515;\">&quot;{0}&nbsp;of&nbsp;{1}&nbsp;Columns&nbsp;Changed&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successColumns,&nbsp;allColumns&nbsp;)&nbsp;);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;TaskDialog.Show(&nbsp;<span style=\"color:#a31515;\">&quot;Revit&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Run&nbsp;Script&nbsp;in&nbsp;3D&nbsp;View.&quot;</span>&nbsp;);\n&nbsp;&nbsp;}\n}\n</pre>\n\nI'd love to see an example of multiple rays per element if you ever decided to do a blog post about it.\n\n**Answer:** There is nothing special about multiple rays per element at all.\n\nIn your code above, you shoot a ray upwards parallel to the Z axis from the element location point:\n\n<pre class=\"code\">\n  <span style=\"color:green;\">//&nbsp;ray&nbsp;direction&nbsp;for&nbsp;raybounce</span>\n  XYZ&nbsp;newPP&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;elemLoc.X,&nbsp;elemLoc.Y,&nbsp;elemLoc.Z&nbsp;+&nbsp;1&nbsp;);\n  XYZ&nbsp;rayd&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;0,&nbsp;0,&nbsp;1&nbsp;);\n</pre>\n\nYou can define any other source point you like, e.g., each of the four bottom corner points in turn, and also any other direction you like, and simply repeat the same process using the same reference intersector in the same view by repeatedly calling\nits [Find method with the new source point and direction vector](https://www.revitapidocs.com/2021.1/6abd0586-5d7e-68c6-2e64-46199f457499.htm).\n\n**Response:**  I finally figured it out using the ray projection method as well.\nThanks to all your responses; I was super over-complicating it.\nThank you again for all your help.\n\nHere is the working code with ray projection as well:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">void</span>&nbsp;AdjustColumnHeightsUsingReferenceIntersector(\n&nbsp;&nbsp;Document&nbsp;doc,\n&nbsp;&nbsp;IList&lt;ElementId&gt;&nbsp;ids&nbsp;)\n{\n&nbsp;&nbsp;View3D&nbsp;view&nbsp;=&nbsp;doc.ActiveView&nbsp;<span style=\"color:blue;\">as</span>&nbsp;View3D;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;view&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Exception(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Please&nbsp;run&nbsp;this&nbsp;command&nbsp;in&nbsp;a&nbsp;3D&nbsp;view.&quot;</span>&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;allColumns&nbsp;=&nbsp;0;\n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;successColumns&nbsp;=&nbsp;0;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;Transaction&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Transaction(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Attach&nbsp;Columns&nbsp;Tops&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;ElementId&nbsp;elemId&nbsp;<span style=\"color:blue;\">in</span>&nbsp;ids&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Element&nbsp;elem&nbsp;=&nbsp;doc.GetElement(&nbsp;elemId&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;(BuiltInCategory)&nbsp;elem.Category.Id.IntegerValue\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;BuiltInCategory.OST_StructuralColumns&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allColumns++;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FamilyInstance&nbsp;column&nbsp;=&nbsp;elem&nbsp;<span style=\"color:blue;\">as</span>&nbsp;FamilyInstance;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Collect&nbsp;beams&nbsp;and&nbsp;slabs</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;BuiltInCategory&gt;&nbsp;builtInCats&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;BuiltInCategory&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builtInCats.Add(&nbsp;BuiltInCategory.OST_Floors&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builtInCats.Add(&nbsp;BuiltInCategory.OST_StructuralFraming&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElementMulticategoryFilter&nbsp;filter\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ElementMulticategoryFilter(&nbsp;builtInCats&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Remove&nbsp;old&nbsp;column&nbsp;attachement</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;ColumnAttachment.GetColumnAttachment(&nbsp;column,&nbsp;1&nbsp;)&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachment.RemoveColumnAttachment(&nbsp;column,&nbsp;1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BoundingBoxXYZ&nbsp;elemBB&nbsp;=&nbsp;elem.get_BoundingBox(&nbsp;view&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;elemLoc&nbsp;=&nbsp;(elem.Location&nbsp;<span style=\"color:blue;\">as</span>&nbsp;LocationPoint).Point;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;elemCenter&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;elemLoc.X,&nbsp;elemLoc.Y,&nbsp;elemLoc.Z&nbsp;+&nbsp;0.1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;b1&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;elemBB.Min.X,&nbsp;elemBB.Min.Y,&nbsp;elemBB.Min.Z&nbsp;+&nbsp;0.1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;b2&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;elemBB.Max.X,&nbsp;elemBB.Max.Y,&nbsp;elemBB.Min.Z&nbsp;+&nbsp;0.1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;b3&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;elemBB.Min.X,&nbsp;elemBB.Max.Y,&nbsp;elemBB.Min.Z&nbsp;+&nbsp;0.1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;b4&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;elemBB.Max.X,&nbsp;elemBB.Min.Y,&nbsp;elemBB.Min.Z&nbsp;+&nbsp;0.1&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;XYZ&gt;&nbsp;points&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;XYZ&gt;(&nbsp;5&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(&nbsp;b1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(&nbsp;b2&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(&nbsp;b3&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(&nbsp;b4&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;points.Add(&nbsp;elemCenter&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReferenceIntersector&nbsp;refI&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ReferenceIntersector(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter,&nbsp;FindReferenceTarget.All,&nbsp;view&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;rayd&nbsp;=&nbsp;XYZ.BasisZ;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReferenceWithContext&nbsp;refC&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;XYZ&nbsp;pt&nbsp;<span style=\"color:blue;\">in</span>&nbsp;points&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;refC&nbsp;=&nbsp;refI.FindNearest(&nbsp;pt,&nbsp;rayd&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;refC&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;refC&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reference&nbsp;reference&nbsp;=&nbsp;refC.GetReference();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElementId&nbsp;id&nbsp;=&nbsp;reference.ElementId;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Element&nbsp;e&nbsp;=&nbsp;doc.GetElement(&nbsp;id&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachment.AddColumnAttachment(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;column,&nbsp;e,&nbsp;1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachmentCutStyle.None,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ColumnAttachmentJustification.Minimum,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successColumns++;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Change&nbsp;color&nbsp;of&nbsp;columns&nbsp;to&nbsp;red</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Color&nbsp;color&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Color(&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;255,&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;0,&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OverrideGraphicSettings&nbsp;ogs&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;OverrideGraphicSettings();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ogs.SetProjectionLineColor(&nbsp;color&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view.SetElementOverrides(&nbsp;elem.Id,&nbsp;ogs&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;}\n}\n</pre>\n\n**Answer:** Congratulations on simplifying and solving this.\n[Keeping it simple](https://en.wikipedia.org/wiki/KISS_principle) works wonders, doesn't it?\n\nThank you for sharing the two approaches, and thanks\nto Richard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas\nfor the non-raytracing suggestion!\n\n<!---\n\noops... this video was taken down from youtube again..."
  },
  {
    "original_filename": "1909_paint_stair_col_beam",
    "header_text": "Play Doom on Wireless Lamp",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Play Doom on Wireless Lamp\n\nComputers are still getting smaller and more powerful.\n\nIt has reached a point where you can\nplay [Doom on an IKEA Trådfri lamp](https://youtu.be/7ybybf4tJWw)\n\n> We ported Doom to the Silicon lab's MGM210L RF module found in the IKEA TRÅDFRI RGB GU10 lamp model LED1923R5. \nThe module has only 108 kB of RAM, so we had to optimize a lot the RAM usage. \nThe module has only 1 MB of internal flash, therefore we added an external SPI flash to store the WAD file, which can be uploaded using YMODEM.\nThe display is a cheap and widespread 160x128 16bpp, 1.8\" TFT.\n\n-->"
  }
]