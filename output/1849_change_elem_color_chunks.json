[
  {
    "original_filename": "1849_change_elem_color",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- 16576354 [material assignment]\n\ntwitter:\n\nHow to change the colour and material of individual elements, change element colour in a view, assign new material to an element, replace a material in a wall or floor in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://bit.ly/elemcolormaterial\n\nThe question of how to change the colour and material of individual elements has come up repeatedly over time\n&ndash; Change element colour in a view\n&ndash; Assign new material to an element\n&ndash; Replace a material in a wall or floor...\n\nlinkedin:\n\nHow to change the colour and material of individual elements, change element colour in a view, assign new material to an element and replace a material in a wall or floor in the #RevitAPI\n\nhttps://bit.ly/elemcolormaterial\n\nThe question of how to change the colour and material of individual elements has come up repeatedly over time:\n\n- Change element colour in a view\n- Assign new material to an element\n- Replace a material in a wall or floor...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1849_change_elem_color",
    "header_text": "Changing Element Colour and Material",
    "local_header_href": "#changing-element-colour-and-material",
    "chunk_text": "### Changing Element Colour and Material\n\nThe question of how to change the colour and material of individual elements has come up repeatedly over time:\n\n- [Change element colour in a view](#2)\n- [Assign new material to an element](#3)\n- [Replace a material in a wall or floor](#4)"
  },
  {
    "original_filename": "1849_change_elem_color",
    "header_text": "Change Element Colour in a View",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Change Element Colour in a View\n\nWe discussed\nhow to [change element colour](https://thebuildingcoder.typepad.com/blog/2011/03/change-element-colour.html) way\nback in 2011.\nThe principle remains unchanged, but some API details have changed a bit since then.\n\nVarious solutions to change colour have been provided in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160),\ne.g., [how to change the colour of an element](https://forums.autodesk.com/t5/revit-api-forum/how-change-the-color-a-element/m-p/5651177)\nand [changing colour by element id + colour palette](https://forums.autodesk.com/t5/revit-api-forum/change-color-by-element-id-color-palette/m-p/4768209),\nbut most of them are also out of date.\n\nSo, to pick this up once again, I added a new sample external command `CmdChangeElementColor`\nto [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples).\n\n**Question:** How can I change the element display colour in a given view?\n\n**Answer:** You can use\nthe [OverrideGraphicSettings class](https://www.revitapidocs.com/2020/eb2bd6b6-b7b2-5452-2070-2dbadb9e068a.htm) and\nits [SetProjectionLineColor method](https://www.revitapidocs.com/2020/6b780d28-87fb-2ba6-04fa-f973d85ca552.htm) to\nchange the colour of a selected element in the current view like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">void</span>&nbsp;ChangeElementColor(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;id&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Color</span>&nbsp;color&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Color</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;200,&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;100,&nbsp;(<span style=\"color:blue;\">byte</span>)&nbsp;100&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">OverrideGraphicSettings</span>&nbsp;ogs&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">OverrideGraphicSettings</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;ogs.SetProjectionLineColor(&nbsp;color&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Change&nbsp;Element&nbsp;Color&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc.ActiveView.SetElementOverrides(&nbsp;id,&nbsp;ogs&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;Execute(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementSet</span>&nbsp;elements&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIApplication</span>&nbsp;uiapp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIDocument</span>&nbsp;uidoc&nbsp;=&nbsp;uiapp.ActiveUIDocument;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">View</span>&nbsp;view&nbsp;=&nbsp;doc.ActiveView;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;id;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">try</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Selection</span>&nbsp;sel&nbsp;=&nbsp;uidoc.Selection;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;r&nbsp;=&nbsp;sel.PickObject(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ObjectType</span>.Element,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Pick&nbsp;element&nbsp;to&nbsp;change&nbsp;its&nbsp;colour&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;=&nbsp;r.ElementId;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">catch</span>(&nbsp;Autodesk.Revit.Exceptions.<span style=\"color:#2b91af;\">OperationCanceledException</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Cancelled;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;ChangeElementColor(&nbsp;doc,&nbsp;id&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded;\n&nbsp;&nbsp;}\n}\n</pre>\n\nThis code now lives in the \nnew [sample command `CmdChangeElementColor`](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdChangeElementColor.cs)\nin [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)."
  },
  {
    "original_filename": "1849_change_elem_color",
    "header_text": "Assign new Material to an Element",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Assign new Material to an Element\n\nA slightly trickier question is how to assign a new material:\n\n**Question:** I would like to assign a material to a selected element. The material assigned will come from spreadsheet data. I already know how to create a material object from the data, and now I would like to assign it to selected elements in Revit. How can this be achieved?\n\n**Answer:** Regarding the assignment of a material to a BIM element:\n\nPlease be aware that Revit is a BIM software. It produces a realistic building model.\n\nIn reality, you cannot simply change the material of an existing building element such as a wall or a floor.\n\nIf your floor is made of concrete, it stays concrete.\n\nIf you prefer a wooden floor, you have to remove the concrete one first.\n\nHence, simply swapping the material of a wall or floor is not as straightforward as one might assume.\n\nFurthermore, the material is not determined by the wall or floor itself, but by its type.\n\nMaybe you can simply swap the type.\n\nHigher up in the controlling hierarchy comes the category.\n\nThe category does in fact provide\na [`Material` property](https://www.revitapidocs.com/2020/00aa768a-fca2-172f-e5d4-a4d787803983.htm) that\ncan be read and written.\n\nSo, one way to control the material of a wall is to set its category's material.\n\nHowever, this will affect other walls sharing the same category.\n\nYou may be better served manipulating a sub-category instead.\n\nIn any case, you need to proceed with care to avoid wrecking your model.\n\nHere is a code snippet that demonstrates changing an element category's material to a randomly chosen different material:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">void</span>&nbsp;ChangeElementMaterial(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;id&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;=&nbsp;doc.GetElement(&nbsp;id&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;e.Category&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;im&nbsp;=&nbsp;e.Category.Material.Id.IntegerValue;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Material</span>&gt;&nbsp;materials&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Material</span>&gt;(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsNotElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">Material</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToElements()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where&lt;<span style=\"color:#2b91af;\">Element</span>&gt;(&nbsp;m&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;m.Id.IntegerValue&nbsp;!=&nbsp;im&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Cast&lt;<span style=\"color:#2b91af;\">Material</span>&gt;()&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Random</span>&nbsp;r&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Random</span>();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;i&nbsp;=&nbsp;r.Next(&nbsp;materials.Count&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Change&nbsp;Element&nbsp;Material&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.Category.Material&nbsp;=&nbsp;materials[&nbsp;i&nbsp;];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nI added  a call to this method as well in `CmdChangeElementColor`.\n\nThis command is available\nin [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\nnew [release 2021.0.149.1](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2021.0.149.1).\n\n<center>\n<img src=\"img/concrete_steel_wood_bamboo.jpg\" alt=\"Materials\" title=\"Materials\" width=\"400\"/> <!-- 800 -->\n</center>"
  },
  {
    "original_filename": "1849_change_elem_color",
    "header_text": "Addendum &ndash; Replace a Material in a Wall or Floor",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Addendum &ndash; Replace a Material in a Wall or Floor\n\nPlease refer to\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non how to [replace material](https://forums.autodesk.com/t5/revit-api-forum/replace-material/m-p/9570625) for\na more realistic and professional discussion on replacing materials in walls and floor in real-life BIMs.\n\nI'll skip all the trivial technical details and jump right to the end, to the real-world experience\nof Richard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas\nand [Lukas Kohout](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/767846):\n\n> The reality is that if you are an AEC consultant then the wall types you use are based on the company specification for such you have developed over numerous projects. It would be unusual or inefficient not to have all the wall types you commonly use already defined in a Revit file for import (made up of the materials your specification covers).\n\n> On the other hand, say you’ve developed those types and due to project development (contractor/employer proposals) etc. the materials need to change (for acoustic/sustainability etc.). Do you manually remake the wall types with the new material, or do you create new types from existing types changing the one material that has changed? Probably you don't want to make new types due to the instance assignment of type-based sweeps/reveals etc. So instead should swap the material in the existing types. In theory you could redefine the material itself, but it may be used in elements where the change isn’t required. I'm not surprised people would turn to the API for this kind of task. \n\n> I would also add, from my experience that sometimes you want to create new wall types and materials and you need API to do that.\n\n> In my previous job, we developed a Revit add-in that was connected to building material manufacturers product database. From that data, it created new wall, floor and ceiling types in project. New types had different compound structures, materials assigned and parameters filled. Doing that manually is really tedious, never mind that you would have to find the data from product lists and put them into project yourself.\n\n> At that time, you had to duplicate an existing type in project and then add the new compound structure to it.\nMaybe that changed now."
  }
]