[
  {
    "original_filename": "0426_filter_non_native_class",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0426_filter_non_native_class",
    "header_text": "Filtering for a Non-Native Class",
    "local_header_href": "#filtering-for-a-non-native-class",
    "chunk_text": "<h3>Filtering for a Non-Native Class</h3><p>I left Ko Tao by boat and night bus to Bangkok and am now heading towards \n\n<a href=\"http://en.wikipedia.org/wiki/Pattaya\">\nPattaya</a>,\n\nwhere my brother Marcus currently lives.\nMentioning this to a resident of Ko Tao I learned that Pattaya is renowned for foreign old age pensioners and prostitutes, and a saying says that \"good boys go to heaven – bad boys go to Pattaya\".\nMarcus has friends there, enjoys the local bridge club, great transport links, a nice apartment at a good price and the best Internet connection he has ever had in Thailand. \nI am looking forward to seeing him and it.\n\n<p>I just arrived in Kao San Road in Bangkok at three am in the morning after a good sleep on the bus and now need to find out how to get to Ekamai to catch a bus for the three hour ride over there.\n\n<p>Before continuing, and before returning to the Revit API, here are a few more memorable items from my stay on Ko Tao:\n\n<!-- getting there -->\n<ul>\n<li>Maurizio's cocoanut.\n<li>My cocoanut.\n<li>Ripe mangoes.\n<li>A beautiful sunset and new moon.\n</li></li></li></li></ul>\n<p>Maurizio's cocoanut almost fell on and killed him as he sat in a deckchair on the veranda of a bar.\nIt landed less than a foot away from him and splashed him soaking wet with its juice.\nThe owners came out, laughed, and said 'Oh yes, that is the second one today'.\nThey didn't even move the deck chair in case another one might come down and smash it to smithereens.\n\n<p>My cocoanut was a much more pleasurable affair.\nI have always wanted to experience step by step how a cocoanut can be opened and consumed.\nOne morning at breakfast, one fell down ten metres away.\nI went and picked it up and asked the workmen next to us how to open it.\nThey were building a little hut to house a new beach bar, and I thought that their tools might come in useful. \nInstead they took me over to a pole stuck firmly in the earth with a sharp long metal blade attached.\nYou need both hands to hold and twist the nut against the blade to cut and lever off its husk.\nOnce the husk is off, the point of the same blade can be used to poke out a hole in one of the three weak spots at one end of the nut to stick in a straw to drink the juice.\n\n<p>After I had drunk the juice, I took the empty nut over to the workmen again.\nOne good whack with a hammer split it cleanly in two, and then I was able to cut out the cocoanut flesh strip by strip all day long.\nI didn't finish it until breakfast next morning.\n\n<p>The mangoes are ripe here! \nI love ripe mangoes!\n\n<p>I climbed  hill and went and sat on a promontory to watch the one sunset that halfway made it through the last days' cloudy skies.\nIt was a beautiful viewpoint and gave an impressive panorama of several beautiful cloudscapes and storms of all shapes and sizes in all directions.\nThe sun was obscured before actually setting, but the exquisite thin crescent of the new moon waxing appeared sharp and clear further up soon after.\n\n<p>Anyway, back to the Revit API again, and another episode in the interminable saga of the filtered element collectors, the latest of which were on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">\nparameter filters</a>,\n\na \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">\ncorrection</a> to that,\n\nand \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">\nfiltering for shared parameters</a>.\n\nThe first of these includes a list of pointers to many previous filtered element collector examples. \n\n<p>Here is another filtering query that has cropped up repeatedly, in spite of the API documentation explaining the situation pretty clearly:\n\n<p><strong>Question:</strong> Please advise me on how to access AnnotationSymbols in the API. \nThere is not enough documentation, and no code samples provided in the SDK.\n\n<p>I want to get a collection of annotation symbols in a family document (but this should work on any document)\n\n<p>I first tried to create a filtered element collector\n\n<pre class=\"code\">\nElementClassFilter filter1 \n  = new ElementClassFilter(\n    typeof( AnnotationSymbol ) ); \n</pre>\n<p>This throws the following exception:\n\"Input type is of an element type that exists in the API, but not in Revit's native object model. Try using Autodesk.Revit.DB.FamilyInstance instead, and then post-processing the results to find the elements of interest.\"\n\n<p>After that I tried the following:\n\n<pre class=\"code\">\nList<annotationsymbol> ann \n  = new List<annotationsymbol>();\n\nElementClassFilter filter1 \n  = new ElementClassFilter(\n    typeof( FamilyInstance ) );\n\nFilteredElementCollector coll1 \n  = new FilteredElementCollector( doc );\n\ncoll1.WherePasses( filter1 );\n\nforeach( Element el in coll1 )\n{\n  AnnotationSymbol anns \n    = el as AnnotationSymbol;\n\n  if( anns != null )\n  {\n    ann.Add( el as AnnotationSymbol );\n  }\n}\n</annotationsymbol></annotationsymbol></pre>\n<p>This returns nothing.\n\n<p>I found the post on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/imports-in-families.html\">\nimports in families</a>,\n\nbut the following code provided there does not work in the Revit 2011 API:\n\n<pre class=\"code\">\nList<element> annotations = new List<element>();\n  doc.get_Elements( typeof( AnnotationSymbol ),\n    annotations );\n</element></element></pre>\n<p><strong>Answer:</strong> The message that you received is actually pretty self explanatory: the AnnotationSymbol class is available in the Revit API, but does not correspond to a \"real\" internal Revit class, so the internal Revit filtering mechanisms cannot search for it. \nInstead, you can specify a base class of AnnotationSymbol in the filter, such as the FamilyInstance class.\n\n<p>The code that you found in the blog post calling the get_Elements method is making use of the document Elements property which returned an iterator over all the database elements in the Revit 2010 API. \nThat property was removed, because it is much less efficient than the filtered element collector access introduced in the Revit 2011 API.\n\n<p>The Revit API help file RevitAPI.chm lists the AnnotationSymbol base classes: \n\n<pre>\nSystem.Object\n  Autodesk.Revit.DB.Element\n    Autodesk.Revit.DB.Instance\n      Autodesk.Revit.DB.FamilyInstance\n        Autodesk.Revit.DB.AnnotationSymbol\n</pre>\n<p>Here is an example of a helper method that retrieves Revit MEP spaces and runs into the same issue:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve all spaces in given document.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Space</span>&gt; GetSpaces( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">FilteredElementCollector</span> collector \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  <span class=\"green\">// trying to collect all spaces directly causes </span>\n  <span class=\"green\">// the following error:</span>\n  <span class=\"green\">//</span>\n  <span class=\"green\">// Input type is of an element type that exists </span>\n  <span class=\"green\">// in the API, but not in Revit's native object </span>\n  <span class=\"green\">// model. Try using Autodesk.Revit.DB.Enclosure </span>\n  <span class=\"green\">// instead, and then postprocessing the results </span>\n  <span class=\"green\">// to find the elements of interest.</span>\n  <span class=\"green\">//</span>\n  <span class=\"green\">//collector.OfClass( typeof( Space ) );</span>\n \n  collector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Enclosure</span> ) );\n \n  <span class=\"blue\">return</span> (<span class=\"blue\">from</span> e <span class=\"blue\">in</span> collector.ToElements() \n          <span class=\"blue\">where</span> e <span class=\"blue\">is</span> <span class=\"teal\">Space</span> <span class=\"blue\">select</span> e <span class=\"blue\">as</span> <span class=\"teal\">Space</span>)\n    .ToList&lt;<span class=\"teal\">Space</span>&gt;();\n}\n</pre>\n<p>The same issue also occurs with rooms, represented by the Room class, also derived from the Enclosure base class. For rooms, another solution is also possible using the dedicated RoomFilter filter class: \n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> rooms\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  <span class=\"teal\">RoomFilter</span> filter = <span class=\"blue\">new</span> <span class=\"teal\">RoomFilter</span>();\n  rooms.WherePasses( filter );\n</pre>\n<p>I beg to differ from your opinion that \"There is not enough documentation\". If you look at the description of the ElementClassFilter class that you are using in the sample code you provided, it clearly states:\n\n<span style=\"color:darkblue\">\n<p>This filter is a quick filter. Quick filters operate only on the ElementRecord, a low-memory class which has a limited interface to read element properties. Elements which are rejected by a quick filter will not be expanded in memory. \nThis filter will match elements whose class is an exact match to the input class, or elements whose class is derived from the input class.\n\n<p>There is a small subset of Element subclasses in the API which are not supported by this filter. These types exist in the API, but not in Revit's native object model, which means that this filter doesn't support them. In order to use a class filter to find elements of these types, it is necessary to use a higher level class and then process the results further to find elements matching only the subtype. The following types are affected by this restriction: \n\n<ul>\n<li>Subclasses of Autodesk.Revit.DB.Material\n<li>Subclasses of Autodesk.Revit.DB.CurveElement\n<li>Subclasses of Autodesk.Revit.DB.ConnectorElement\n<li>Subclasses of Autodesk.Revit.DB.HostedSweep\n<li>Autodesk.Revit.DB.Architecture.Room\n<li>Autodesk.Revit.DB.Mechanical.Space\n<li>Autodesk.Revit.DB.Area\n<li>Autodesk.Revit.DB.Architecture.RoomTag\n<li>Autodesk.Revit.DB.Mechanical.SpaceTag\n<li>Autodesk.Revit.DB.AreaTag\n<li>Autodesk.Revit.DB.CombinableElement\n<li>Autodesk.Revit.DB.Mullion\n<li>Autodesk.Revit.DB.Panel\n<li>Autodesk.Revit.DB.AnnotationSymbol\n<li>Autodesk.Revit.DB.Structure.AreaReinforcementType\n<li>Autodesk.Revit.DB.Structure.PathReinforcementType\n<li>Autodesk.Revit.DB.AnnotationSymbolType\n<li>Autodesk.Revit.DB.Architecture.RoomTagType\n<li>Autodesk.Revit.DB.Mechanical.SpaceTagType\n<li>Autodesk.Revit.DB.AreaTagType\n<li>Autodesk.Revit.DB.Structure.TrussType\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n</p></p></span>\n<p>The sample code that you provided looks perfectly correct to me, though. I do not see why it should not return any annotation symbols if there are any present in the model.\n\n<p>One idea for retrieving annotation symbols is to debug what goes on in RevitLookup. I created a new project and looked at the database contents using Add-Ins &gt; Revit Lookup &gt; Snoop DB... In the empty project, there was no entry for the AnnotationSymbol class.\n\n<p>I added an annotation symbol to the model using Annotate &gt; Symbol and looked at the updated database contents in RevitLookup again, at which point the annotation symbol appears as expected:</p>\n<center>\n<img alt=\"Snoop annotation symbol\" src=\"img/snoop_annotation_symbol.png\"/>\n</center>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]