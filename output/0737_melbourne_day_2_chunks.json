[
  {
    "original_filename": "0737_melbourne_day_2",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0737_melbourne_day_2",
    "header_text": "Melbourne Day Two",
    "local_header_href": "#melbourne-day-two",
    "chunk_text": "<h3>Melbourne Day Two</h3><p>On the second day of the Revit API training here in Melbourne, we addressed a number of further interesting issues, both basic and beyond.\nOur sample code ended up demonstrating the following functionality:\n\n<ul>\n<li>Revit MEP model creation: <a href=\"#1\">place a duct</a>.\n<li>Geometrical analysis: <a href=\"#2\">retrieving unique geometry vertices</a> from a selected element.\n</li></li></ul>\n<p>Besides that, we looked at \n\n<a href=\"#3\">extensible storage</a>,\n\nand I compiled an updated version of the \n\n<a href=\"#4\">RstLink sample for Revit Structure 2012</a>.\n\n<p>I also received interesting comments on a previous post on finding the \n\n<a href=\"#5\">Revit parent window</a> that \n\nis worthwhile sharing here.\n\n<!-- <li>Determining <a href=\"#3\">Revit demo mode</a>. -->\n<p>After the training, I went for a quick climb with Rob at \n\n<a href=\"http://www.hardrock.com.au\">\nHardrock</a>,\n\nmarvelling at yet another grading system.\n\n<center>\n<img alt=\"Hardrock climbing\" src=\"img/hardrock.jpg\"/>\n</center>\n<p>Here in Australia I went for the easy grades 16 to 18.\nNo idea what they compare to in European or American grading systems.\n\n<p>After that, I had a sandwich in the\n\n<a href=\"http://www.theage.com.au/news/bar-reviews/siglo-bar/2008/05/12/1210444319156.html\">\nSiglo</a> roof-top \n\nbar on 161 Spring Street above \n\nthe \n\n<a href=\"http://www.theage.com.au/news/bar-reviews/the-melbourne-supper-club/2006/04/03/1143916451849.html\">\nMelbourne Supper Club</a> in\n\nthe same house.\n\nThese two places share an extremely sympathetic anonymous entrance, a simple brown wooden door with no sign whatsoever.\nIf no-one told you they are there, you would never find them.\n\n\n<a name=\"1\"></a>\n<h4>Placing a Duct</h4>\n<p>One thing we talked about was creating new elements in the model.\n\n<p>As a very simple example, we created the code to place an HVAC duct:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command3</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">XYZ</span> p, q;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n      p = sel.PickPoint( <span class=\"maroon\">\"Start point: \"</span> );\n      q = sel.PickPoint( <span class=\"maroon\">\"End point: \"</span> );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">DuctType</span> ductType\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">DuctType</span> ) )\n        .Cast&lt;<span class=\"teal\">DuctType</span>&gt;()\n        .FirstOrDefault&lt;<span class=\"teal\">DuctType</span>&gt;();\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ductType )\n    {\n      message = <span class=\"maroon\">\"No duct type found.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">//Duct duct = new Duct(); // OO approach, not supported</span>\n    <span class=\"green\">//Duct duct = Duct.Create( doc );</span>\n \n    <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n    tx.Start( <span class=\"maroon\">\"Add Duct\"</span> );\n \n    <span class=\"teal\">Duct</span> duct = doc.Create.NewDuct( p, q, ductType );\n \n    tx.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>We also played with creating a mechanical system.\nThat needs some fittings a well, because their connectors provide the required duct system type information.\n\n<p>Look at the AutoRoute and AvoidObstruction SDK samples for more details.\n\n\n<a name=\"2\"></a>\n<h4>Retrieving Unique Geometry Vertices</h4>\n<p>We then explored geometry extraction, and especially the identification of unique points with in it, since this bring up a number of issues regarding units and precision etc.\n\n<p>Here is a simple command that prompts me to select an element and accesses its geometry.\nIt processes it as well towards the end; ignore that for the moment:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element,\n      <span class=\"maroon\">\"Please pick an element.\"</span> );\n \n    e = doc.get_Element( r.ElementId );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo.Objects )\n  {\n    <span class=\"teal\">GeometryInstance</span> inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo.Objects )\n  {\n    solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n    {\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    message = <span class=\"maroon\">\"Unable to access element solid.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners = GetCorners( solid );\n \n  <span class=\"blue\">int</span> n = corners.Count;\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} corners found:\"</span>, n );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n  {\n    <span class=\"teal\">Debug</span>.Print( PointString( p ) );\n  }\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The next step we looked at is identification of all unique vertices in the geometry.\nFor this, we need to somehow implement a fuzzy method to distinguish between points that really are different, but detect that points that are nearly the same should in fact be treated as identical.\nWe can achieve this by implementing an XYZ equality comparer, e.g. like this:\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">XyzEqualityComparer</span> : <span class=\"teal\">IEqualityComparer</span>&lt;<span class=\"teal\">XYZ</span>&gt;\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _sixteenthInchInFeet \n    = 1.0 / ( 16.0 * 12.0 );\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Equals( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">return</span> p.IsAlmostEqualTo( q, \n      _sixteenthInchInFeet );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetHashCode( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> PointString( p ).GetHashCode();\n  }\n}\n</pre>\n<p>As an almost-equal tolerance we are using a rather large value, because Revit uses this pretty rough number in several places itself, e.g. to limit the limit the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/think-big-in-revit.html\">\nminimum line length</a>.\n\n<p>You must be careful to also define a hash code that does not return different values for points that you wish to compare equal, or every single point will be considered different, possibly even when a point is compared with itself.\nIn this case we are using our two-decimal string representation to define a hash code, so many points that are considered different by the comparison operator will actually generate the same hash code.\nIn a perfect world, the hash code generator would be a bit more appropriately chosen to match the equality comparison precision.\n\n<p>We can easily implement a short and sweet method to extract all the unique corner vertices of the solid geometry by using the vertices themselves as keys in a dictionary based on our equality comparer like this:\n\n<pre class=\"code\">\n<span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>,<span class=\"blue\">int</span>&gt; GetCorners( <span class=\"teal\">Solid</span> solid )\n{\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners \n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt;( \n      <span class=\"blue\">new</span> <span class=\"teal\">XyzEqualityComparer</span>() );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> ea <span class=\"blue\">in</span> f.EdgeLoops )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> ea )\n      {\n        <span class=\"teal\">XYZ</span> p = e.AsCurveFollowingFace( f )\n          .get_EndPoint( 0 );\n \n        <span class=\"blue\">if</span>( !corners.ContainsKey( p ) )\n        {\n          corners[p] = 0;\n        }\n        ++corners[p];\n      }\n    }\n  }\n  <span class=\"blue\">return</span> corners;\n}\n</pre>\n<p>The dictionary returned includes a count of how many times each vertex was encountered.\n\n<p>This is something very important that I have looked at numerous times in the past.\nI already presented the fundamentals for handling this when looking at \n\n<!--\n\n134_nested_instance_geo.htm:Here is the definition\n259_crop_view_to_room.htm:We did implement some use\n491_point_in_poly.htm:XyzEqualityComparer class</a>\n502_gaps_in_shell.htm:XyzEqualityComparer helper cl\n556_toposurf_points.htm:&nbsp; &nbsp; = <span class\n620_top_faces_of_wall.htm:CmdNestedInstanceGeo.XyzE\n\n-->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nnested instance geometry</a>, \n\nwhich also implements a GetVertices method similar to the above,\n\nand reused it for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/toposurface-interior-and-boundary-points.html\">\ntoposurface point classification</a> and\n\naccessing the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html\">\ntop faces</a> of\n\na sloped wall.\n\n\n<a name=\"3\"></a>\n<h4>Extensible Storage</h4>\n<p>Here is the documentation and sample code from my Autodesk University 2011 \n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9263&amp;jid=1725932\">\nclass</a> and \n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9726&amp;jid=1725932\">\nlab</a> on \n\nthis topic, which says it all:\n\n<ul>\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP4451_tammik_estorage.pdf\">CP4451_tammik_estorage.pdf</a>: handout document\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP4451_tammik_estorage.zip\">CP4451_tammik_estorage.zip</a>: sample source code\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP6760-L_tammik_estorage.pdf\">CP6760-L_tammik_estorage.pdf</a>: handout document\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP6760-L_tammik_estorage_lab.zip\">CP6760-L_tammik_estorage_lab.zip</a> exercises\n</li></li></li></li></ul>\n<a name=\"4\"></a>\n<h4>Revit Structure Link 2012</h4>\n<p>Long overdue, I finally updated the RstLink sample for Revit 2012 and AutoCAD 2012. \nI provided a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/revit-structure-resources.html\">\nbrief description of the analytical link sample</a> two \n\nyears ago, and updated the sample last year for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/structural-analysis-links-to-revit-structure.html\">\nRevit Structure 2011</a>.\n\nNow here is \n\n<a href=\"zip/RstLink2012.zip\">RstLink2012.zip</a> containing the entire Visual Studio solution for the following projects:\n\n<ul>\n<li>RstLink: helper DLL shared by both AutoCAD and Revit client.\n<li>RstLinkRevitClient: Revit command implementations: RSLinkImport, RSLinkExport, RsLinkLiveLink.\n<li>RstLinkAcadClient: AutoCAD command implementations: RSImport, RSExport, RSMakeMember.\n<li>RstLinkAcadClientDynProps: Dynamic Revit OPM properties for AutoCAD objects.\n</li></li></li></li></ul>\n<p>In fact, most of these are provided for both C# and VB, so it ends up including the following projects:\n\n<ul>\n<li>RstLinkCs\n<li>RstLinkVb\n<li>RstLinkRevitClientCs\n<li>RstLinkRevitClientVb\n<li>RstLinkAcadClientCs\n<li>RstLinkAcadClientVb\n<li>Miro: a C++ project to generate the RstLinkAcadClientDynProps ARX application\n</li></li></li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Revit Parent Window</h4>\n<p>Finally, to wrap up this information overflow, Victor Chekalin, or Виктор Чекалин, offered a very useful and interesting \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html?cid=6a00e553e1689788330163030f0ea6970d#comment-6a00e553e1689788330163030f0ea6970d\">\nsuggestion</a> for \n\na new and easier way to obtain the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a>:\n\n<ol>\n<li>Add a reference to the AdWindows assembly, located at the same place as the RevitAPI assembly, and set its Copy Local property to false.\n<li>Get the Revit main window handle using the static property ApplicationWindow of the ComponentManager class in the Autodesk.Windows namespace.\n</li></li></ol>\n<p>Now, you can use only one Property – ComponentManager.ApplicationWindow – instead two methods – get current process and main window handle.\n\n\n\n<!--\n<a name=\"3\"></a>\n\n<h4>Determine Revit Demo Mode</h4>\n\n<p>Rudolf Honke \n\n<a href=\"\">\ncommented</a> on \n\nthe approach I suggested to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/determine-revit-demo-mode.html\">\ndetermine-revit-demo-mode</a> and\n\nproposed using the OptionalFunctionalityUtils IsDWGExportAvailable method instead of using my much more complex try-catch method.\n\n<p>This method is documented to check whether the DWG export functionality is available in the installed version of Revit. \nThe DWG export requires presence of certain modules that are optional and may not be part of the installed Revit. \n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0737_melbourne_day_2",
    "header_text": "Placing a Duct",
    "local_header_href": "#placing-a-duct",
    "chunk_text": "<h4>Placing a Duct</h4><p>One thing we talked about was creating new elements in the model.\n\n<p>As a very simple example, we created the code to place an HVAC duct:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command3</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">XYZ</span> p, q;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n      p = sel.PickPoint( <span class=\"maroon\">\"Start point: \"</span> );\n      q = sel.PickPoint( <span class=\"maroon\">\"End point: \"</span> );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"teal\">DuctType</span> ductType\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">DuctType</span> ) )\n        .Cast&lt;<span class=\"teal\">DuctType</span>&gt;()\n        .FirstOrDefault&lt;<span class=\"teal\">DuctType</span>&gt;();\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ductType )\n    {\n      message = <span class=\"maroon\">\"No duct type found.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">//Duct duct = new Duct(); // OO approach, not supported</span>\n    <span class=\"green\">//Duct duct = Duct.Create( doc );</span>\n \n    <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n    tx.Start( <span class=\"maroon\">\"Add Duct\"</span> );\n \n    <span class=\"teal\">Duct</span> duct = doc.Create.NewDuct( p, q, ductType );\n \n    tx.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>We also played with creating a mechanical system.\nThat needs some fittings a well, because their connectors provide the required duct system type information.\n\n<p>Look at the AutoRoute and AvoidObstruction SDK samples for more details.\n\n\n<a name=\"2\"></a>\n<h4>Retrieving Unique Geometry Vertices</h4>\n<p>We then explored geometry extraction, and especially the identification of unique points with in it, since this bring up a number of issues regarding units and precision etc.\n\n<p>Here is a simple command that prompts me to select an element and accesses its geometry.\nIt processes it as well towards the end; ignore that for the moment:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element,\n      <span class=\"maroon\">\"Please pick an element.\"</span> );\n \n    e = doc.get_Element( r.ElementId );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo.Objects )\n  {\n    <span class=\"teal\">GeometryInstance</span> inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo.Objects )\n  {\n    solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n    {\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    message = <span class=\"maroon\">\"Unable to access element solid.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners = GetCorners( solid );\n \n  <span class=\"blue\">int</span> n = corners.Count;\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} corners found:\"</span>, n );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n  {\n    <span class=\"teal\">Debug</span>.Print( PointString( p ) );\n  }\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The next step we looked at is identification of all unique vertices in the geometry.\nFor this, we need to somehow implement a fuzzy method to distinguish between points that really are different, but detect that points that are nearly the same should in fact be treated as identical.\nWe can achieve this by implementing an XYZ equality comparer, e.g. like this:\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">XyzEqualityComparer</span> : <span class=\"teal\">IEqualityComparer</span>&lt;<span class=\"teal\">XYZ</span>&gt;\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _sixteenthInchInFeet \n    = 1.0 / ( 16.0 * 12.0 );\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Equals( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">return</span> p.IsAlmostEqualTo( q, \n      _sixteenthInchInFeet );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetHashCode( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> PointString( p ).GetHashCode();\n  }\n}\n</pre>\n<p>As an almost-equal tolerance we are using a rather large value, because Revit uses this pretty rough number in several places itself, e.g. to limit the limit the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/think-big-in-revit.html\">\nminimum line length</a>.\n\n<p>You must be careful to also define a hash code that does not return different values for points that you wish to compare equal, or every single point will be considered different, possibly even when a point is compared with itself.\nIn this case we are using our two-decimal string representation to define a hash code, so many points that are considered different by the comparison operator will actually generate the same hash code.\nIn a perfect world, the hash code generator would be a bit more appropriately chosen to match the equality comparison precision.\n\n<p>We can easily implement a short and sweet method to extract all the unique corner vertices of the solid geometry by using the vertices themselves as keys in a dictionary based on our equality comparer like this:\n\n<pre class=\"code\">\n<span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>,<span class=\"blue\">int</span>&gt; GetCorners( <span class=\"teal\">Solid</span> solid )\n{\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners \n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt;( \n      <span class=\"blue\">new</span> <span class=\"teal\">XyzEqualityComparer</span>() );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> ea <span class=\"blue\">in</span> f.EdgeLoops )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> ea )\n      {\n        <span class=\"teal\">XYZ</span> p = e.AsCurveFollowingFace( f )\n          .get_EndPoint( 0 );\n \n        <span class=\"blue\">if</span>( !corners.ContainsKey( p ) )\n        {\n          corners[p] = 0;\n        }\n        ++corners[p];\n      }\n    }\n  }\n  <span class=\"blue\">return</span> corners;\n}\n</pre>\n<p>The dictionary returned includes a count of how many times each vertex was encountered.\n\n<p>This is something very important that I have looked at numerous times in the past.\nI already presented the fundamentals for handling this when looking at \n\n<!--\n\n134_nested_instance_geo.htm:Here is the definition\n259_crop_view_to_room.htm:We did implement some use\n491_point_in_poly.htm:XyzEqualityComparer class</a>\n502_gaps_in_shell.htm:XyzEqualityComparer helper cl\n556_toposurf_points.htm:&nbsp; &nbsp; = <span class\n620_top_faces_of_wall.htm:CmdNestedInstanceGeo.XyzE\n\n-->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nnested instance geometry</a>, \n\nwhich also implements a GetVertices method similar to the above,\n\nand reused it for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/toposurface-interior-and-boundary-points.html\">\ntoposurface point classification</a> and\n\naccessing the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html\">\ntop faces</a> of\n\na sloped wall.\n\n\n<a name=\"3\"></a>\n<h4>Extensible Storage</h4>\n<p>Here is the documentation and sample code from my Autodesk University 2011 \n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9263&amp;jid=1725932\">\nclass</a> and \n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9726&amp;jid=1725932\">\nlab</a> on \n\nthis topic, which says it all:\n\n<ul>\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP4451_tammik_estorage.pdf\">CP4451_tammik_estorage.pdf</a>: handout document\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP4451_tammik_estorage.zip\">CP4451_tammik_estorage.zip</a>: sample source code\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP6760-L_tammik_estorage.pdf\">CP6760-L_tammik_estorage.pdf</a>: handout document\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP6760-L_tammik_estorage_lab.zip\">CP6760-L_tammik_estorage_lab.zip</a> exercises\n</li></li></li></li></ul>\n<a name=\"4\"></a>\n<h4>Revit Structure Link 2012</h4>\n<p>Long overdue, I finally updated the RstLink sample for Revit 2012 and AutoCAD 2012. \nI provided a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/revit-structure-resources.html\">\nbrief description of the analytical link sample</a> two \n\nyears ago, and updated the sample last year for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/structural-analysis-links-to-revit-structure.html\">\nRevit Structure 2011</a>.\n\nNow here is \n\n<a href=\"zip/RstLink2012.zip\">RstLink2012.zip</a> containing the entire Visual Studio solution for the following projects:\n\n<ul>\n<li>RstLink: helper DLL shared by both AutoCAD and Revit client.\n<li>RstLinkRevitClient: Revit command implementations: RSLinkImport, RSLinkExport, RsLinkLiveLink.\n<li>RstLinkAcadClient: AutoCAD command implementations: RSImport, RSExport, RSMakeMember.\n<li>RstLinkAcadClientDynProps: Dynamic Revit OPM properties for AutoCAD objects.\n</li></li></li></li></ul>\n<p>In fact, most of these are provided for both C# and VB, so it ends up including the following projects:\n\n<ul>\n<li>RstLinkCs\n<li>RstLinkVb\n<li>RstLinkRevitClientCs\n<li>RstLinkRevitClientVb\n<li>RstLinkAcadClientCs\n<li>RstLinkAcadClientVb\n<li>Miro: a C++ project to generate the RstLinkAcadClientDynProps ARX application\n</li></li></li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Revit Parent Window</h4>\n<p>Finally, to wrap up this information overflow, Victor Chekalin, or Виктор Чекалин, offered a very useful and interesting \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html?cid=6a00e553e1689788330163030f0ea6970d#comment-6a00e553e1689788330163030f0ea6970d\">\nsuggestion</a> for \n\na new and easier way to obtain the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a>:\n\n<ol>\n<li>Add a reference to the AdWindows assembly, located at the same place as the RevitAPI assembly, and set its Copy Local property to false.\n<li>Get the Revit main window handle using the static property ApplicationWindow of the ComponentManager class in the Autodesk.Windows namespace.\n</li></li></ol>\n<p>Now, you can use only one Property – ComponentManager.ApplicationWindow – instead two methods – get current process and main window handle.\n\n\n\n<!--\n<a name=\"3\"></a>\n\n<h4>Determine Revit Demo Mode</h4>\n\n<p>Rudolf Honke \n\n<a href=\"\">\ncommented</a> on \n\nthe approach I suggested to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/determine-revit-demo-mode.html\">\ndetermine-revit-demo-mode</a> and\n\nproposed using the OptionalFunctionalityUtils IsDWGExportAvailable method instead of using my much more complex try-catch method.\n\n<p>This method is documented to check whether the DWG export functionality is available in the installed version of Revit. \nThe DWG export requires presence of certain modules that are optional and may not be part of the installed Revit. \n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0737_melbourne_day_2",
    "header_text": "Retrieving Unique Geometry Vertices",
    "local_header_href": "#retrieving-unique-geometry-vertices",
    "chunk_text": "<h4>Retrieving Unique Geometry Vertices</h4><p>We then explored geometry extraction, and especially the identification of unique points with in it, since this bring up a number of issues regarding units and precision etc.\n\n<p>Here is a simple command that prompts me to select an element and accesses its geometry.\nIt processes it as well towards the end; ignore that for the moment:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element,\n      <span class=\"maroon\">\"Please pick an element.\"</span> );\n \n    e = doc.get_Element( r.ElementId );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo.Objects )\n  {\n    <span class=\"teal\">GeometryInstance</span> inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo.Objects )\n  {\n    solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n    {\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    message = <span class=\"maroon\">\"Unable to access element solid.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners = GetCorners( solid );\n \n  <span class=\"blue\">int</span> n = corners.Count;\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} corners found:\"</span>, n );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n  {\n    <span class=\"teal\">Debug</span>.Print( PointString( p ) );\n  }\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The next step we looked at is identification of all unique vertices in the geometry.\nFor this, we need to somehow implement a fuzzy method to distinguish between points that really are different, but detect that points that are nearly the same should in fact be treated as identical.\nWe can achieve this by implementing an XYZ equality comparer, e.g. like this:\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">XyzEqualityComparer</span> : <span class=\"teal\">IEqualityComparer</span>&lt;<span class=\"teal\">XYZ</span>&gt;\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _sixteenthInchInFeet \n    = 1.0 / ( 16.0 * 12.0 );\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Equals( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">return</span> p.IsAlmostEqualTo( q, \n      _sixteenthInchInFeet );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetHashCode( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> PointString( p ).GetHashCode();\n  }\n}\n</pre>\n<p>As an almost-equal tolerance we are using a rather large value, because Revit uses this pretty rough number in several places itself, e.g. to limit the limit the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/think-big-in-revit.html\">\nminimum line length</a>.\n\n<p>You must be careful to also define a hash code that does not return different values for points that you wish to compare equal, or every single point will be considered different, possibly even when a point is compared with itself.\nIn this case we are using our two-decimal string representation to define a hash code, so many points that are considered different by the comparison operator will actually generate the same hash code.\nIn a perfect world, the hash code generator would be a bit more appropriately chosen to match the equality comparison precision.\n\n<p>We can easily implement a short and sweet method to extract all the unique corner vertices of the solid geometry by using the vertices themselves as keys in a dictionary based on our equality comparer like this:\n\n<pre class=\"code\">\n<span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>,<span class=\"blue\">int</span>&gt; GetCorners( <span class=\"teal\">Solid</span> solid )\n{\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners \n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt;( \n      <span class=\"blue\">new</span> <span class=\"teal\">XyzEqualityComparer</span>() );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> ea <span class=\"blue\">in</span> f.EdgeLoops )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> ea )\n      {\n        <span class=\"teal\">XYZ</span> p = e.AsCurveFollowingFace( f )\n          .get_EndPoint( 0 );\n \n        <span class=\"blue\">if</span>( !corners.ContainsKey( p ) )\n        {\n          corners[p] = 0;\n        }\n        ++corners[p];\n      }\n    }\n  }\n  <span class=\"blue\">return</span> corners;\n}\n</pre>\n<p>The dictionary returned includes a count of how many times each vertex was encountered.\n\n<p>This is something very important that I have looked at numerous times in the past.\nI already presented the fundamentals for handling this when looking at \n\n<!--\n\n134_nested_instance_geo.htm:Here is the definition\n259_crop_view_to_room.htm:We did implement some use\n491_point_in_poly.htm:XyzEqualityComparer class</a>\n502_gaps_in_shell.htm:XyzEqualityComparer helper cl\n556_toposurf_points.htm:&nbsp; &nbsp; = <span class\n620_top_faces_of_wall.htm:CmdNestedInstanceGeo.XyzE\n\n-->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nnested instance geometry</a>, \n\nwhich also implements a GetVertices method similar to the above,\n\nand reused it for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/toposurface-interior-and-boundary-points.html\">\ntoposurface point classification</a> and\n\naccessing the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html\">\ntop faces</a> of\n\na sloped wall.\n\n\n<a name=\"3\"></a>\n<h4>Extensible Storage</h4>\n<p>Here is the documentation and sample code from my Autodesk University 2011 \n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9263&amp;jid=1725932\">\nclass</a> and \n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9726&amp;jid=1725932\">\nlab</a> on \n\nthis topic, which says it all:\n\n<ul>\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP4451_tammik_estorage.pdf\">CP4451_tammik_estorage.pdf</a>: handout document\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP4451_tammik_estorage.zip\">CP4451_tammik_estorage.zip</a>: sample source code\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP6760-L_tammik_estorage.pdf\">CP6760-L_tammik_estorage.pdf</a>: handout document\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP6760-L_tammik_estorage_lab.zip\">CP6760-L_tammik_estorage_lab.zip</a> exercises\n</li></li></li></li></ul>\n<a name=\"4\"></a>\n<h4>Revit Structure Link 2012</h4>\n<p>Long overdue, I finally updated the RstLink sample for Revit 2012 and AutoCAD 2012. \nI provided a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/revit-structure-resources.html\">\nbrief description of the analytical link sample</a> two \n\nyears ago, and updated the sample last year for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/structural-analysis-links-to-revit-structure.html\">\nRevit Structure 2011</a>.\n\nNow here is \n\n<a href=\"zip/RstLink2012.zip\">RstLink2012.zip</a> containing the entire Visual Studio solution for the following projects:\n\n<ul>\n<li>RstLink: helper DLL shared by both AutoCAD and Revit client.\n<li>RstLinkRevitClient: Revit command implementations: RSLinkImport, RSLinkExport, RsLinkLiveLink.\n<li>RstLinkAcadClient: AutoCAD command implementations: RSImport, RSExport, RSMakeMember.\n<li>RstLinkAcadClientDynProps: Dynamic Revit OPM properties for AutoCAD objects.\n</li></li></li></li></ul>\n<p>In fact, most of these are provided for both C# and VB, so it ends up including the following projects:\n\n<ul>\n<li>RstLinkCs\n<li>RstLinkVb\n<li>RstLinkRevitClientCs\n<li>RstLinkRevitClientVb\n<li>RstLinkAcadClientCs\n<li>RstLinkAcadClientVb\n<li>Miro: a C++ project to generate the RstLinkAcadClientDynProps ARX application\n</li></li></li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Revit Parent Window</h4>\n<p>Finally, to wrap up this information overflow, Victor Chekalin, or Виктор Чекалин, offered a very useful and interesting \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html?cid=6a00e553e1689788330163030f0ea6970d#comment-6a00e553e1689788330163030f0ea6970d\">\nsuggestion</a> for \n\na new and easier way to obtain the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a>:\n\n<ol>\n<li>Add a reference to the AdWindows assembly, located at the same place as the RevitAPI assembly, and set its Copy Local property to false.\n<li>Get the Revit main window handle using the static property ApplicationWindow of the ComponentManager class in the Autodesk.Windows namespace.\n</li></li></ol>\n<p>Now, you can use only one Property – ComponentManager.ApplicationWindow – instead two methods – get current process and main window handle.\n\n\n\n<!--\n<a name=\"3\"></a>\n\n<h4>Determine Revit Demo Mode</h4>\n\n<p>Rudolf Honke \n\n<a href=\"\">\ncommented</a> on \n\nthe approach I suggested to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/determine-revit-demo-mode.html\">\ndetermine-revit-demo-mode</a> and\n\nproposed using the OptionalFunctionalityUtils IsDWGExportAvailable method instead of using my much more complex try-catch method.\n\n<p>This method is documented to check whether the DWG export functionality is available in the installed version of Revit. \nThe DWG export requires presence of certain modules that are optional and may not be part of the installed Revit. \n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0737_melbourne_day_2",
    "header_text": "Extensible Storage",
    "local_header_href": "#extensible-storage",
    "chunk_text": "<h4>Extensible Storage</h4><p>Here is the documentation and sample code from my Autodesk University 2011 \n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9263&amp;jid=1725932\">\nclass</a> and \n\n<a href=\"http://au.autodesk.com/?nd=event_class&amp;session_id=9726&amp;jid=1725932\">\nlab</a> on \n\nthis topic, which says it all:\n\n<ul>\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP4451_tammik_estorage.pdf\">CP4451_tammik_estorage.pdf</a>: handout document\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP4451_tammik_estorage.zip\">CP4451_tammik_estorage.zip</a>: sample source code\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP6760-L_tammik_estorage.pdf\">CP6760-L_tammik_estorage.pdf</a>: handout document\n<li><a href=\"file:///C:/a/doc/revit/au/2011/doc/CP6760-L_tammik_estorage_lab.zip\">CP6760-L_tammik_estorage_lab.zip</a> exercises\n</li></li></li></li></ul>\n<a name=\"4\"></a>\n<h4>Revit Structure Link 2012</h4>\n<p>Long overdue, I finally updated the RstLink sample for Revit 2012 and AutoCAD 2012. \nI provided a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/revit-structure-resources.html\">\nbrief description of the analytical link sample</a> two \n\nyears ago, and updated the sample last year for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/structural-analysis-links-to-revit-structure.html\">\nRevit Structure 2011</a>.\n\nNow here is \n\n<a href=\"zip/RstLink2012.zip\">RstLink2012.zip</a> containing the entire Visual Studio solution for the following projects:\n\n<ul>\n<li>RstLink: helper DLL shared by both AutoCAD and Revit client.\n<li>RstLinkRevitClient: Revit command implementations: RSLinkImport, RSLinkExport, RsLinkLiveLink.\n<li>RstLinkAcadClient: AutoCAD command implementations: RSImport, RSExport, RSMakeMember.\n<li>RstLinkAcadClientDynProps: Dynamic Revit OPM properties for AutoCAD objects.\n</li></li></li></li></ul>\n<p>In fact, most of these are provided for both C# and VB, so it ends up including the following projects:\n\n<ul>\n<li>RstLinkCs\n<li>RstLinkVb\n<li>RstLinkRevitClientCs\n<li>RstLinkRevitClientVb\n<li>RstLinkAcadClientCs\n<li>RstLinkAcadClientVb\n<li>Miro: a C++ project to generate the RstLinkAcadClientDynProps ARX application\n</li></li></li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Revit Parent Window</h4>\n<p>Finally, to wrap up this information overflow, Victor Chekalin, or Виктор Чекалин, offered a very useful and interesting \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html?cid=6a00e553e1689788330163030f0ea6970d#comment-6a00e553e1689788330163030f0ea6970d\">\nsuggestion</a> for \n\na new and easier way to obtain the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a>:\n\n<ol>\n<li>Add a reference to the AdWindows assembly, located at the same place as the RevitAPI assembly, and set its Copy Local property to false.\n<li>Get the Revit main window handle using the static property ApplicationWindow of the ComponentManager class in the Autodesk.Windows namespace.\n</li></li></ol>\n<p>Now, you can use only one Property – ComponentManager.ApplicationWindow – instead two methods – get current process and main window handle.\n\n\n\n<!--\n<a name=\"3\"></a>\n\n<h4>Determine Revit Demo Mode</h4>\n\n<p>Rudolf Honke \n\n<a href=\"\">\ncommented</a> on \n\nthe approach I suggested to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/determine-revit-demo-mode.html\">\ndetermine-revit-demo-mode</a> and\n\nproposed using the OptionalFunctionalityUtils IsDWGExportAvailable method instead of using my much more complex try-catch method.\n\n<p>This method is documented to check whether the DWG export functionality is available in the installed version of Revit. \nThe DWG export requires presence of certain modules that are optional and may not be part of the installed Revit. \n-->\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0737_melbourne_day_2",
    "header_text": "Revit Structure Link 2012",
    "local_header_href": "#revit-structure-link-2012",
    "chunk_text": "<h4>Revit Structure Link 2012</h4><p>Long overdue, I finally updated the RstLink sample for Revit 2012 and AutoCAD 2012. \nI provided a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/revit-structure-resources.html\">\nbrief description of the analytical link sample</a> two \n\nyears ago, and updated the sample last year for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/structural-analysis-links-to-revit-structure.html\">\nRevit Structure 2011</a>.\n\nNow here is \n\n<a href=\"zip/RstLink2012.zip\">RstLink2012.zip</a> containing the entire Visual Studio solution for the following projects:\n\n<ul>\n<li>RstLink: helper DLL shared by both AutoCAD and Revit client.\n<li>RstLinkRevitClient: Revit command implementations: RSLinkImport, RSLinkExport, RsLinkLiveLink.\n<li>RstLinkAcadClient: AutoCAD command implementations: RSImport, RSExport, RSMakeMember.\n<li>RstLinkAcadClientDynProps: Dynamic Revit OPM properties for AutoCAD objects.\n</li></li></li></li></ul>\n<p>In fact, most of these are provided for both C# and VB, so it ends up including the following projects:\n\n<ul>\n<li>RstLinkCs\n<li>RstLinkVb\n<li>RstLinkRevitClientCs\n<li>RstLinkRevitClientVb\n<li>RstLinkAcadClientCs\n<li>RstLinkAcadClientVb\n<li>Miro: a C++ project to generate the RstLinkAcadClientDynProps ARX application\n</li></li></li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Revit Parent Window</h4>\n<p>Finally, to wrap up this information overflow, Victor Chekalin, or Виктор Чекалин, offered a very useful and interesting \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html?cid=6a00e553e1689788330163030f0ea6970d#comment-6a00e553e1689788330163030f0ea6970d\">\nsuggestion</a> for \n\na new and easier way to obtain the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a>:\n\n<ol>\n<li>Add a reference to the AdWindows assembly, located at the same place as the RevitAPI assembly, and set its Copy Local property to false.\n<li>Get the Revit main window handle using the static property ApplicationWindow of the ComponentManager class in the Autodesk.Windows namespace.\n</li></li></ol>\n<p>Now, you can use only one Property – ComponentManager.ApplicationWindow – instead two methods – get current process and main window handle.\n\n\n\n<!--\n<a name=\"3\"></a>\n\n<h4>Determine Revit Demo Mode</h4>\n\n<p>Rudolf Honke \n\n<a href=\"\">\ncommented</a> on \n\nthe approach I suggested to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/determine-revit-demo-mode.html\">\ndetermine-revit-demo-mode</a> and\n\nproposed using the OptionalFunctionalityUtils IsDWGExportAvailable method instead of using my much more complex try-catch method.\n\n<p>This method is documented to check whether the DWG export functionality is available in the installed version of Revit. \nThe DWG export requires presence of certain modules that are optional and may not be part of the installed Revit. \n-->\n</p></p></p></p>"
  },
  {
    "original_filename": "0737_melbourne_day_2",
    "header_text": "Revit Parent Window",
    "local_header_href": "#revit-parent-window",
    "chunk_text": "<h4>Revit Parent Window</h4><p>Finally, to wrap up this information overflow, Victor Chekalin, or Виктор Чекалин, offered a very useful and interesting \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html?cid=6a00e553e1689788330163030f0ea6970d#comment-6a00e553e1689788330163030f0ea6970d\">\nsuggestion</a> for \n\na new and easier way to obtain the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a>:\n\n<ol>\n<li>Add a reference to the AdWindows assembly, located at the same place as the RevitAPI assembly, and set its Copy Local property to false.\n<li>Get the Revit main window handle using the static property ApplicationWindow of the ComponentManager class in the Autodesk.Windows namespace.\n</li></li></ol>\n<p>Now, you can use only one Property – ComponentManager.ApplicationWindow – instead two methods – get current process and main window handle.\n\n\n\n<!--\n<a name=\"3\"></a>\n\n<h4>Determine Revit Demo Mode</h4>\n\n<p>Rudolf Honke \n\n<a href=\"\">\ncommented</a> on \n\nthe approach I suggested to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/determine-revit-demo-mode.html\">\ndetermine-revit-demo-mode</a> and\n\nproposed using the OptionalFunctionalityUtils IsDWGExportAvailable method instead of using my much more complex try-catch method.\n\n<p>This method is documented to check whether the DWG export functionality is available in the installed version of Revit. \nThe DWG export requires presence of certain modules that are optional and may not be part of the installed Revit. \n-->\n</p></p>"
  }
]