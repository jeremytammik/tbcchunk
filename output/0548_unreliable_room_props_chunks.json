[
  {
    "original_filename": "0548_unreliable_room_props",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0548_unreliable_room_props",
    "header_text": "Unreliable Room Properties",
    "local_header_href": "#unreliable-room-properties",
    "chunk_text": "<h3>Unreliable Room Properties</h3><p>We often discussed the properties linking hosted elements to their host, such as a door or window hosted by a wall.\nOne of the first and most fundamental posts on this topic is the trusty old \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/relationship-in.html\">\nrelationship inverter</a>.\n\n<p>Unfortunately, it is not always so trustworthy after all, not due to any flaw in the algorithm itself, but based on the \n\n<a href=\"http://en.wikipedia.org/wiki/Garbage_In,_Garbage_Out\">\nGIGO</a> principle of\n\n<a href=\"http://en.wikipedia.org/wiki/Garbage_In,_Garbage_Out\">\ngarbage in, garbage out</a>.\n\n<p>The underlying properties may simply not always be correctly set.\n\n<p>Rudolf Honke of\n\n<a href=\"http://www.acadgraph.de\">\nacadGraph CADstudio GmbH</a> recently \n\npointed out that a family instance may be \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/family-instance-missing-level-property.html\">\nlacking its Level property</a>.\n\n<p>Here another observation by Rudolf on the Room, ToRoom and FromRoom properties of windows.\n\n<p>Note that we recently looked at a problem dealing with the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/phase-dependent-room-properties.html\">\nphase dependent FromRoom and ToRoom</a> properties \n\non family instances, and you need to take the phase into account when querying them, but that does apparently not help in this case.\n\n<p>Rudolf says:\n\n<p>Besides the fact that one must make sure that a property is not null before one use it to retrieve elements using a filtered element collector, there can occur other problems as well.\n\n<p>Here is a situation showing two rooms with a window of the same type and direction each:</p>\n<center>\n<img alt=\"Two rooms with windows\" src=\"img/rh_windows_by_room_1.png\" width=\"600\"/>\n</center>\n<p>The left room's element id is 212140; the right one's is 212143.\n\n<p>If we look at the window properties, the left window has a valid 'FromRoom' property, but 'ToRoom' is null:</p>\n<center>\n<img alt=\"Left window properties\" src=\"img/rh_windows_by_room_2.png\"/>\n</center>\n<p>In contrast, the right window has a valid 'ToRoom' property, but 'FromRoom' is null:</p>\n<center>\n<img alt=\"Right window properties\" src=\"img/rh_windows_by_room_3.png\"/>\n</center>\n<p>Both the left and the right window are hosted in the same wall.\nThey differ in their 'Mirrored' property, even though they are correctly placed.\nIf I mirror one of them by pressing its control arrows, their 'Mirrored' property becomes equal, but one of them faces in the wrong direction, of course.\nIn this picture, the left window is now turned inside out:</p>\n<center>\n<img alt=\"Flipped window facing the wrong way\" src=\"img/rh_windows_by_room_4.png\" width=\"600\"/>\n</center>\n<p><strong>So in this case, how can we reliably collect windows by room?</strong>\n<p>We have to check both properties â€“ if one is valid, we find the corresponding room, using a simple 'OR' condition.\nThis will still not work if there is a window between two rooms, because this middle window would belong to both rooms.\n\n<p>For test purposes, I put a window of another type between our two rooms.\nAs you can see, this window has both the 'ToRoom' and 'FromRoom' properties set, but it also has a valid value for its 'Room' property, in addition.\nSome windows have this, others don't:</p>\n<center>\n<img alt=\"Window properties between two rooms\" src=\"img/rh_windows_by_room_5.png\"/>\n</center>\n<p>How can we handle all these situations? \nShould we check all three properties and select the room that occurs most often?\nWe also could say that this window belongs to both rooms, but, be aware; we must make sure that it will not be counted twice if we sum the windows of all rooms.\n\n<p>To cut a long story short: you cannot always rely on properties, and need to be prepared for certain irregularities.\n\n<p>Rudolf did some further testing, including an analysis of the phases involved, and continues:\n\n<p>The issue with the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/family-instance-missing-level-property.html\">\nunreliable Level property</a> happened \n\nin a different file, and I think that was a different problem, namely the invisibility of 'nulled' parameters in the UI, making it impossible for the user to correct them.\n\n<p>I tested accessing the properties using all phases.\nThe phases of windows and rooms are all identical.\n\n<p>I think that the theme of these two issues is 'don't rely on properties', in general.\nAnd you see that even a corrupted project or family file may work pretty well and continue to be used and worked on.\nWhat I want to express is that there might be thousands of RVTs and RFAs out there in the world that have lost part of their structural integrity.\nPeople continue working with them and don't even notice that they are damaged because these damages are just limited locally.\nSo we developers and every application we produce must be prepared to handle these sort of files because we cannot give all of them to ADN support to fix...\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]