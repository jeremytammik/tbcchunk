[
  {
    "original_filename": "0691_rex_content_generator",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0691_rex_content_generator",
    "header_text": "REX Content Generator",
    "local_header_href": "#rex-content-generator",
    "chunk_text": "<h3>REX Content Generator</h3><p>I had an absolutely magical experience in Israel before leaving Tel Aviv Thursday afternoon.\nAmong many others at the developer conference on Wednesday, we met with \n\n<a href=\"http://www.dimabrickman.com\">Dima Brickmann</a> of\n\n<a href=\"http://www.omnitech.co.il\">Omnitech</a>,\n\nand he suggested going for a short visit to Jerusalem before returning to the airport, which is located between Tel Aviv and Jerusalem.\nPartha and I decided to join him.\nDima has a very special relationship with the city and a deep philosophical and photographical view of it, so he was a unique and wonderful guide.\nHis tour focused more on feeling and experiencing the magic of this deeply religious place, which brings out so many extremes in all the different religions, and yet simultaneously enables them to coexist in an extremely confined area.\n\n<p>By the way, Dima has more recent photos with some short philosophical texts on the Russian photoreporting news web site \n\n<a href=\"http://www.newsru.co.il\">newsru.co.il</a>, \n\ne.g. this beautiful photo series on \n\n<a href=\"http://www.newsru.co.il/photo/21nov2011/jerusalem2.html\">Jerusalem between black and white</a>:</p>\n<center>\n<img alt=\"Jerusalem between black and white\" src=\"http://newsru.co.il/pict/id/480783_20111121113039.jpg\"/>\n</center>\n<p>I went and installed a translation add-on for my browser to be able to read the Russian text.\nIt works very well, and the photos are really and truly deep and beautiful.\n\n<p>Click on the link at the bottom saying 'ПРОДОЛЖЕНИЕ ФОТОРЕПОРТАЖА' to proceed to the rest of the photos in the series.\n\n<p>Thank you, Dima!\n\n\n<p>I would never have believed you could experience so much in such a short time, both in the three hours that we spent with Dima in Jerusalem and in the two days we spent in Israel.\n\n<p>On Friday we held another developer conference in Paris, and today we are already en route to Gothenburg in Sweden.\n\n<p>And my backlog of interesting blog posts is growing far faster than I can publish them.\n\n\n<a name=\"2\"></a>\n<h4>REX Content Generator</h4>\n<p>One really astounding revelation at the DevLab at AU was the REX content generator sample.\n\n<p>It is provided with the REX framework and its other samples as part of the standard Revit SDK.\nI had not looked at it previously in any depth, since I have not used REX myself yet.\nI tend to avoid any additional frills, and the plain vanilla Revit API keeps me fully occupied all on its own.\nBut this sample really bowled me over!\n\n<p>A DevLab participant showed me some of its features, and it looks like an astonishingly powerful tool.\nHere are a few notes I made from his demo:\n\n<p>The content generator provides the following functionality:\n\n<ul>\n<li>Read existing families into a data structure.\n<li>Create families from the data structure.\n<li>Determine the section of a beam or column and display a shaded 3D preview of its solid extrusion.\n<li>Interface to external structural databases to generate sections and families with these objects.\n<li>Recognition which tries to match the current element to an existing database entry. If the user accepts the match, the content generator can switch the types by creating a new family based on the database record and replace all of the old instances by the new family.\n</li></li></li></li></li></ul>\n<p>Impressed?\n\n<p>I was!\n\n<p>The family API enables us to create new families step by step.\nIn contrast, the content generator allows you to load an existing family, tweak and change it, and immediately generate a new family.\n\n<p>There is no need to install the Revit extensions to ensure that the basic REX framework is in place and the REX API is available.\nThe content generator can be used even without Revit Extensions installed, since the framework is part of the regular Revit installation and is installed in a way transparent for the user.\n\n<p>To run the content generator sample, simply select a structural element, e.g. a column, and launch the command.\nIt takes a little while to start up, because it reads the three databases: standard, steel and structural.\n\n<!--\nelement break down of current element\n\nsection generation, sample shows that nicely\n\n to have the \n-->\n<p>I asked Emmanuel Weyermann for a short description, and he provided the following brief yet full picture of Content Generator and this sample application:\n\n<h4>What is Content Generator?</h4>\n<p>The Content Generator is a component which is part of the Revit Extensions Framework installed with Revit 2012. \n<p>It provides tools for content management. This component is strongly connected with standard databases shipped with Revit (over 130 databases).\n\n<p>Advantages of the Content Generator:\n\n<ul>\n<li>Generation of Revit families: database sections, parametric sections, materials, user generic types.\n<li>Interpretation of Revit families: database sections, parametric sections, materials. \n<li>Getting data from standard databases.\n<li>Searching elements in standard databases. \n<li>Standard database browser dialogue. \n<li>A mapping system. \n</li></li></li></li></li></li></ul>\n<p>More information may be found in the \"\u001cUser Manual for Extensions SDK.pdf\u001d\".\n\n\n<h4>Content Generator basic types</h4>\n<p>The idea of Content Generator is very simple. \nIt provides its own representations of specific types (e.g. sections) and two converters which communicate with each other via these types:\n\n<ul>\n<li>RVT Converter – responsible for communication with Revit\n<li>REX Converter – responsible for communication with standard databases\n</li></li></ul>\n<center>\n<img alt=\"REX Converter Pipeline\" src=\"img/rex_converter_pipeline.png\"/>\n</center>\n<p>Content Generator provides 4 types:\n\n<ul>\n<li>Database section\n<li>Parametric section\n<li>Material\n<li>Generic – defined by the user.\n</li></li></li></li></ul>\n<h4>Code sample</h4>\n<p>The code below presents how to generate a particular section taken from the Rcatpro database:\n\n<pre class=\"code\">\n  <span class=\"green\">// Initializing the rex converter.</span>\n \n  REXFamilyConverter rex = <span class=\"blue\">new</span> REXFamilyConverter();\n \n  <span class=\"green\">// Database identification data.</span>\n \n  <span class=\"blue\">string</span> alias = <span class=\"maroon\">\"HEA 100\"</span>;\n \n  <span class=\"blue\">string</span> directory = rex.GetDatabaseDirectory(\n    ECategoryType.SECTION_DB );\n \n  <span class=\"blue\">string</span> dbName = <span class=\"maroon\">\"Rcatpro\"</span>;\n \n  <span class=\"green\">// Getting the REXFamilyType from the database.</span>\n \n  REXFamilyType_DBSection famDBSection\n    = rex.GetFamilyDBSection( EElementType.BEAM,\n      EMaterial.STEEL, alias, dbName, directory );\n \n  <span class=\"green\">// Initializing the RVT converter.</span>\n \n  RVTFamilyConverter rvt = <span class=\"blue\">new</span> RVTFamilyConverter(\n    m_CommandData, <span class=\"blue\">true</span> );\n \n  <span class=\"green\">// Getting Revit element.</span>\n \n  Autodesk.Revit.Element el = rvt.GetElement(\n    famDBSection );\n \n  <span class=\"teal\">FamilySymbol</span> famSymbol = el <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n</pre>\n<p>Over twenty further samples are provided in the \"\u001cUser Manual for Extensions SDK.pdf\u001d\".\n\n\n<h4>ContentGeneratorWPF SDK sample</h4>\n<p>In Extensions SDK may be found the ContentGeneratorWPF sample. \nIt allows examining a selected beam or column and changing its type to a new one (generated by Content Generator). \n\n<p>The sample demonstrates some of Content Generator key features:\n\n<ul>\n<li>Revit FamilySymbol interpretation as:\n<ul>\n<li>Parametric section – shape is recognized and dimensions are calculated.\n<li>Database section – the element is recognized and match with appropriate section from database.\n</li></li></ul>\n<li>Revit FamilySymbol generation:\n<ul>\n<li>Parametric section – there are three types available (in CG there are over 22): rectangle, angle and I section.\n<li>Database section – the user is able to point section from available databases.\n</li></li></ul>\n<li>Database browsing.\n</li></li></li></ul>\n<p>The sample runs database browser which allows exploring available databases:</p>\n<center>\n<img alt=\"REX Converter Sample Form\" src=\"img/rex_converter_sample.png\"/>\n</center>\n<h4>Where is Content Generator used?</h4>\n<ul>\n<li>As a standalone application which generates different types of Revit content  (part of Revit Extension for RAC and RST - Extensions ribbon-&gt;Tools).\n\n<li>In different integration tools: \n\nRevit – Cloud computation (<a href=\"http://labs.autodesk.com/utilities/revit_storm\">Storm</a>), \n\nlinks Revit – RSA, Revit – ASD, and for some files import/export extensions Revit – CIS, Revit – SDNF.\n\n<li>In different Revit Extensions: steel connections, reinforcements, timber framing,\n\n<a href=\"http://labs.autodesk.com/utilities/revit_structure_generator\">structure generator</a> \n\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/project-structure-generator-on-autodesk-labs.html\">recently mentioned</a>) etc.\n</li></li></li></ul>\n<p>Many thanks to Emmanuel for this overview!\n\n<p>If you are interested in Revit Structure and structural databases, I strongly encourage you to take a deep look at this if you have not already done so.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0691_rex_content_generator",
    "header_text": "REX Content Generator",
    "local_header_href": "#rex-content-generator",
    "chunk_text": "<h4>REX Content Generator</h4><p>One really astounding revelation at the DevLab at AU was the REX content generator sample.\n\n<p>It is provided with the REX framework and its other samples as part of the standard Revit SDK.\nI had not looked at it previously in any depth, since I have not used REX myself yet.\nI tend to avoid any additional frills, and the plain vanilla Revit API keeps me fully occupied all on its own.\nBut this sample really bowled me over!\n\n<p>A DevLab participant showed me some of its features, and it looks like an astonishingly powerful tool.\nHere are a few notes I made from his demo:\n\n<p>The content generator provides the following functionality:\n\n<ul>\n<li>Read existing families into a data structure.\n<li>Create families from the data structure.\n<li>Determine the section of a beam or column and display a shaded 3D preview of its solid extrusion.\n<li>Interface to external structural databases to generate sections and families with these objects.\n<li>Recognition which tries to match the current element to an existing database entry. If the user accepts the match, the content generator can switch the types by creating a new family based on the database record and replace all of the old instances by the new family.\n</li></li></li></li></li></ul>\n<p>Impressed?\n\n<p>I was!\n\n<p>The family API enables us to create new families step by step.\nIn contrast, the content generator allows you to load an existing family, tweak and change it, and immediately generate a new family.\n\n<p>There is no need to install the Revit extensions to ensure that the basic REX framework is in place and the REX API is available.\nThe content generator can be used even without Revit Extensions installed, since the framework is part of the regular Revit installation and is installed in a way transparent for the user.\n\n<p>To run the content generator sample, simply select a structural element, e.g. a column, and launch the command.\nIt takes a little while to start up, because it reads the three databases: standard, steel and structural.\n\n<!--\nelement break down of current element\n\nsection generation, sample shows that nicely\n\n to have the \n-->\n<p>I asked Emmanuel Weyermann for a short description, and he provided the following brief yet full picture of Content Generator and this sample application:\n\n<h4>What is Content Generator?</h4>\n<p>The Content Generator is a component which is part of the Revit Extensions Framework installed with Revit 2012. \n<p>It provides tools for content management. This component is strongly connected with standard databases shipped with Revit (over 130 databases).\n\n<p>Advantages of the Content Generator:\n\n<ul>\n<li>Generation of Revit families: database sections, parametric sections, materials, user generic types.\n<li>Interpretation of Revit families: database sections, parametric sections, materials. \n<li>Getting data from standard databases.\n<li>Searching elements in standard databases. \n<li>Standard database browser dialogue. \n<li>A mapping system. \n</li></li></li></li></li></li></ul>\n<p>More information may be found in the \"\u001cUser Manual for Extensions SDK.pdf\u001d\".\n\n\n<h4>Content Generator basic types</h4>\n<p>The idea of Content Generator is very simple. \nIt provides its own representations of specific types (e.g. sections) and two converters which communicate with each other via these types:\n\n<ul>\n<li>RVT Converter – responsible for communication with Revit\n<li>REX Converter – responsible for communication with standard databases\n</li></li></ul>\n<center>\n<img alt=\"REX Converter Pipeline\" src=\"img/rex_converter_pipeline.png\"/>\n</center>\n<p>Content Generator provides 4 types:\n\n<ul>\n<li>Database section\n<li>Parametric section\n<li>Material\n<li>Generic – defined by the user.\n</li></li></li></li></ul>\n<h4>Code sample</h4>\n<p>The code below presents how to generate a particular section taken from the Rcatpro database:\n\n<pre class=\"code\">\n  <span class=\"green\">// Initializing the rex converter.</span>\n \n  REXFamilyConverter rex = <span class=\"blue\">new</span> REXFamilyConverter();\n \n  <span class=\"green\">// Database identification data.</span>\n \n  <span class=\"blue\">string</span> alias = <span class=\"maroon\">\"HEA 100\"</span>;\n \n  <span class=\"blue\">string</span> directory = rex.GetDatabaseDirectory(\n    ECategoryType.SECTION_DB );\n \n  <span class=\"blue\">string</span> dbName = <span class=\"maroon\">\"Rcatpro\"</span>;\n \n  <span class=\"green\">// Getting the REXFamilyType from the database.</span>\n \n  REXFamilyType_DBSection famDBSection\n    = rex.GetFamilyDBSection( EElementType.BEAM,\n      EMaterial.STEEL, alias, dbName, directory );\n \n  <span class=\"green\">// Initializing the RVT converter.</span>\n \n  RVTFamilyConverter rvt = <span class=\"blue\">new</span> RVTFamilyConverter(\n    m_CommandData, <span class=\"blue\">true</span> );\n \n  <span class=\"green\">// Getting Revit element.</span>\n \n  Autodesk.Revit.Element el = rvt.GetElement(\n    famDBSection );\n \n  <span class=\"teal\">FamilySymbol</span> famSymbol = el <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n</pre>\n<p>Over twenty further samples are provided in the \"\u001cUser Manual for Extensions SDK.pdf\u001d\".\n\n\n<h4>ContentGeneratorWPF SDK sample</h4>\n<p>In Extensions SDK may be found the ContentGeneratorWPF sample. \nIt allows examining a selected beam or column and changing its type to a new one (generated by Content Generator). \n\n<p>The sample demonstrates some of Content Generator key features:\n\n<ul>\n<li>Revit FamilySymbol interpretation as:\n<ul>\n<li>Parametric section – shape is recognized and dimensions are calculated.\n<li>Database section – the element is recognized and match with appropriate section from database.\n</li></li></ul>\n<li>Revit FamilySymbol generation:\n<ul>\n<li>Parametric section – there are three types available (in CG there are over 22): rectangle, angle and I section.\n<li>Database section – the user is able to point section from available databases.\n</li></li></ul>\n<li>Database browsing.\n</li></li></li></ul>\n<p>The sample runs database browser which allows exploring available databases:</p>\n<center>\n<img alt=\"REX Converter Sample Form\" src=\"img/rex_converter_sample.png\"/>\n</center>\n<h4>Where is Content Generator used?</h4>\n<ul>\n<li>As a standalone application which generates different types of Revit content  (part of Revit Extension for RAC and RST - Extensions ribbon-&gt;Tools).\n\n<li>In different integration tools: \n\nRevit – Cloud computation (<a href=\"http://labs.autodesk.com/utilities/revit_storm\">Storm</a>), \n\nlinks Revit – RSA, Revit – ASD, and for some files import/export extensions Revit – CIS, Revit – SDNF.\n\n<li>In different Revit Extensions: steel connections, reinforcements, timber framing,\n\n<a href=\"http://labs.autodesk.com/utilities/revit_structure_generator\">structure generator</a> \n\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/project-structure-generator-on-autodesk-labs.html\">recently mentioned</a>) etc.\n</li></li></li></ul>\n<p>Many thanks to Emmanuel for this overview!\n\n<p>If you are interested in Revit Structure and structural databases, I strongly encourage you to take a deep look at this if you have not already done so.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0691_rex_content_generator",
    "header_text": "What is Content Generator?",
    "local_header_href": "#what-is-content-generator",
    "chunk_text": "<h4>What is Content Generator?</h4><p>The Content Generator is a component which is part of the Revit Extensions Framework installed with Revit 2012. \n<p>It provides tools for content management. This component is strongly connected with standard databases shipped with Revit (over 130 databases).\n\n<p>Advantages of the Content Generator:\n\n<ul>\n<li>Generation of Revit families: database sections, parametric sections, materials, user generic types.\n<li>Interpretation of Revit families: database sections, parametric sections, materials. \n<li>Getting data from standard databases.\n<li>Searching elements in standard databases. \n<li>Standard database browser dialogue. \n<li>A mapping system. \n</li></li></li></li></li></li></ul>\n<p>More information may be found in the \"\u001cUser Manual for Extensions SDK.pdf\u001d\".\n\n\n<h4>Content Generator basic types</h4>\n<p>The idea of Content Generator is very simple. \nIt provides its own representations of specific types (e.g. sections) and two converters which communicate with each other via these types:\n\n<ul>\n<li>RVT Converter – responsible for communication with Revit\n<li>REX Converter – responsible for communication with standard databases\n</li></li></ul>\n<center>\n<img alt=\"REX Converter Pipeline\" src=\"img/rex_converter_pipeline.png\"/>\n</center>\n<p>Content Generator provides 4 types:\n\n<ul>\n<li>Database section\n<li>Parametric section\n<li>Material\n<li>Generic – defined by the user.\n</li></li></li></li></ul>\n<h4>Code sample</h4>\n<p>The code below presents how to generate a particular section taken from the Rcatpro database:\n\n<pre class=\"code\">\n  <span class=\"green\">// Initializing the rex converter.</span>\n \n  REXFamilyConverter rex = <span class=\"blue\">new</span> REXFamilyConverter();\n \n  <span class=\"green\">// Database identification data.</span>\n \n  <span class=\"blue\">string</span> alias = <span class=\"maroon\">\"HEA 100\"</span>;\n \n  <span class=\"blue\">string</span> directory = rex.GetDatabaseDirectory(\n    ECategoryType.SECTION_DB );\n \n  <span class=\"blue\">string</span> dbName = <span class=\"maroon\">\"Rcatpro\"</span>;\n \n  <span class=\"green\">// Getting the REXFamilyType from the database.</span>\n \n  REXFamilyType_DBSection famDBSection\n    = rex.GetFamilyDBSection( EElementType.BEAM,\n      EMaterial.STEEL, alias, dbName, directory );\n \n  <span class=\"green\">// Initializing the RVT converter.</span>\n \n  RVTFamilyConverter rvt = <span class=\"blue\">new</span> RVTFamilyConverter(\n    m_CommandData, <span class=\"blue\">true</span> );\n \n  <span class=\"green\">// Getting Revit element.</span>\n \n  Autodesk.Revit.Element el = rvt.GetElement(\n    famDBSection );\n \n  <span class=\"teal\">FamilySymbol</span> famSymbol = el <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n</pre>\n<p>Over twenty further samples are provided in the \"\u001cUser Manual for Extensions SDK.pdf\u001d\".\n\n\n<h4>ContentGeneratorWPF SDK sample</h4>\n<p>In Extensions SDK may be found the ContentGeneratorWPF sample. \nIt allows examining a selected beam or column and changing its type to a new one (generated by Content Generator). \n\n<p>The sample demonstrates some of Content Generator key features:\n\n<ul>\n<li>Revit FamilySymbol interpretation as:\n<ul>\n<li>Parametric section – shape is recognized and dimensions are calculated.\n<li>Database section – the element is recognized and match with appropriate section from database.\n</li></li></ul>\n<li>Revit FamilySymbol generation:\n<ul>\n<li>Parametric section – there are three types available (in CG there are over 22): rectangle, angle and I section.\n<li>Database section – the user is able to point section from available databases.\n</li></li></ul>\n<li>Database browsing.\n</li></li></li></ul>\n<p>The sample runs database browser which allows exploring available databases:</p>\n<center>\n<img alt=\"REX Converter Sample Form\" src=\"img/rex_converter_sample.png\"/>\n</center>\n<h4>Where is Content Generator used?</h4>\n<ul>\n<li>As a standalone application which generates different types of Revit content  (part of Revit Extension for RAC and RST - Extensions ribbon-&gt;Tools).\n\n<li>In different integration tools: \n\nRevit – Cloud computation (<a href=\"http://labs.autodesk.com/utilities/revit_storm\">Storm</a>), \n\nlinks Revit – RSA, Revit – ASD, and for some files import/export extensions Revit – CIS, Revit – SDNF.\n\n<li>In different Revit Extensions: steel connections, reinforcements, timber framing,\n\n<a href=\"http://labs.autodesk.com/utilities/revit_structure_generator\">structure generator</a> \n\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/project-structure-generator-on-autodesk-labs.html\">recently mentioned</a>) etc.\n</li></li></li></ul>\n<p>Many thanks to Emmanuel for this overview!\n\n<p>If you are interested in Revit Structure and structural databases, I strongly encourage you to take a deep look at this if you have not already done so.\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0691_rex_content_generator",
    "header_text": "Content Generator basic types",
    "local_header_href": "#content-generator-basic-types",
    "chunk_text": "<h4>Content Generator basic types</h4><p>The idea of Content Generator is very simple. \nIt provides its own representations of specific types (e.g. sections) and two converters which communicate with each other via these types:\n\n<ul>\n<li>RVT Converter – responsible for communication with Revit\n<li>REX Converter – responsible for communication with standard databases\n</li></li></ul>\n<center>\n<img alt=\"REX Converter Pipeline\" src=\"img/rex_converter_pipeline.png\"/>\n</center>\n<p>Content Generator provides 4 types:\n\n<ul>\n<li>Database section\n<li>Parametric section\n<li>Material\n<li>Generic – defined by the user.\n</li></li></li></li></ul>\n<h4>Code sample</h4>\n<p>The code below presents how to generate a particular section taken from the Rcatpro database:\n\n<pre class=\"code\">\n  <span class=\"green\">// Initializing the rex converter.</span>\n \n  REXFamilyConverter rex = <span class=\"blue\">new</span> REXFamilyConverter();\n \n  <span class=\"green\">// Database identification data.</span>\n \n  <span class=\"blue\">string</span> alias = <span class=\"maroon\">\"HEA 100\"</span>;\n \n  <span class=\"blue\">string</span> directory = rex.GetDatabaseDirectory(\n    ECategoryType.SECTION_DB );\n \n  <span class=\"blue\">string</span> dbName = <span class=\"maroon\">\"Rcatpro\"</span>;\n \n  <span class=\"green\">// Getting the REXFamilyType from the database.</span>\n \n  REXFamilyType_DBSection famDBSection\n    = rex.GetFamilyDBSection( EElementType.BEAM,\n      EMaterial.STEEL, alias, dbName, directory );\n \n  <span class=\"green\">// Initializing the RVT converter.</span>\n \n  RVTFamilyConverter rvt = <span class=\"blue\">new</span> RVTFamilyConverter(\n    m_CommandData, <span class=\"blue\">true</span> );\n \n  <span class=\"green\">// Getting Revit element.</span>\n \n  Autodesk.Revit.Element el = rvt.GetElement(\n    famDBSection );\n \n  <span class=\"teal\">FamilySymbol</span> famSymbol = el <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n</pre>\n<p>Over twenty further samples are provided in the \"\u001cUser Manual for Extensions SDK.pdf\u001d\".\n\n\n<h4>ContentGeneratorWPF SDK sample</h4>\n<p>In Extensions SDK may be found the ContentGeneratorWPF sample. \nIt allows examining a selected beam or column and changing its type to a new one (generated by Content Generator). \n\n<p>The sample demonstrates some of Content Generator key features:\n\n<ul>\n<li>Revit FamilySymbol interpretation as:\n<ul>\n<li>Parametric section – shape is recognized and dimensions are calculated.\n<li>Database section – the element is recognized and match with appropriate section from database.\n</li></li></ul>\n<li>Revit FamilySymbol generation:\n<ul>\n<li>Parametric section – there are three types available (in CG there are over 22): rectangle, angle and I section.\n<li>Database section – the user is able to point section from available databases.\n</li></li></ul>\n<li>Database browsing.\n</li></li></li></ul>\n<p>The sample runs database browser which allows exploring available databases:</p>\n<center>\n<img alt=\"REX Converter Sample Form\" src=\"img/rex_converter_sample.png\"/>\n</center>\n<h4>Where is Content Generator used?</h4>\n<ul>\n<li>As a standalone application which generates different types of Revit content  (part of Revit Extension for RAC and RST - Extensions ribbon-&gt;Tools).\n\n<li>In different integration tools: \n\nRevit – Cloud computation (<a href=\"http://labs.autodesk.com/utilities/revit_storm\">Storm</a>), \n\nlinks Revit – RSA, Revit – ASD, and for some files import/export extensions Revit – CIS, Revit – SDNF.\n\n<li>In different Revit Extensions: steel connections, reinforcements, timber framing,\n\n<a href=\"http://labs.autodesk.com/utilities/revit_structure_generator\">structure generator</a> \n\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/project-structure-generator-on-autodesk-labs.html\">recently mentioned</a>) etc.\n</li></li></li></ul>\n<p>Many thanks to Emmanuel for this overview!\n\n<p>If you are interested in Revit Structure and structural databases, I strongly encourage you to take a deep look at this if you have not already done so.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0691_rex_content_generator",
    "header_text": "Code sample",
    "local_header_href": "#code-sample",
    "chunk_text": "<h4>Code sample</h4><p>The code below presents how to generate a particular section taken from the Rcatpro database:\n\n<pre class=\"code\">\n  <span class=\"green\">// Initializing the rex converter.</span>\n \n  REXFamilyConverter rex = <span class=\"blue\">new</span> REXFamilyConverter();\n \n  <span class=\"green\">// Database identification data.</span>\n \n  <span class=\"blue\">string</span> alias = <span class=\"maroon\">\"HEA 100\"</span>;\n \n  <span class=\"blue\">string</span> directory = rex.GetDatabaseDirectory(\n    ECategoryType.SECTION_DB );\n \n  <span class=\"blue\">string</span> dbName = <span class=\"maroon\">\"Rcatpro\"</span>;\n \n  <span class=\"green\">// Getting the REXFamilyType from the database.</span>\n \n  REXFamilyType_DBSection famDBSection\n    = rex.GetFamilyDBSection( EElementType.BEAM,\n      EMaterial.STEEL, alias, dbName, directory );\n \n  <span class=\"green\">// Initializing the RVT converter.</span>\n \n  RVTFamilyConverter rvt = <span class=\"blue\">new</span> RVTFamilyConverter(\n    m_CommandData, <span class=\"blue\">true</span> );\n \n  <span class=\"green\">// Getting Revit element.</span>\n \n  Autodesk.Revit.Element el = rvt.GetElement(\n    famDBSection );\n \n  <span class=\"teal\">FamilySymbol</span> famSymbol = el <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n</pre>\n<p>Over twenty further samples are provided in the \"\u001cUser Manual for Extensions SDK.pdf\u001d\".\n\n\n<h4>ContentGeneratorWPF SDK sample</h4>\n<p>In Extensions SDK may be found the ContentGeneratorWPF sample. \nIt allows examining a selected beam or column and changing its type to a new one (generated by Content Generator). \n\n<p>The sample demonstrates some of Content Generator key features:\n\n<ul>\n<li>Revit FamilySymbol interpretation as:\n<ul>\n<li>Parametric section – shape is recognized and dimensions are calculated.\n<li>Database section – the element is recognized and match with appropriate section from database.\n</li></li></ul>\n<li>Revit FamilySymbol generation:\n<ul>\n<li>Parametric section – there are three types available (in CG there are over 22): rectangle, angle and I section.\n<li>Database section – the user is able to point section from available databases.\n</li></li></ul>\n<li>Database browsing.\n</li></li></li></ul>\n<p>The sample runs database browser which allows exploring available databases:</p>\n<center>\n<img alt=\"REX Converter Sample Form\" src=\"img/rex_converter_sample.png\"/>\n</center>\n<h4>Where is Content Generator used?</h4>\n<ul>\n<li>As a standalone application which generates different types of Revit content  (part of Revit Extension for RAC and RST - Extensions ribbon-&gt;Tools).\n\n<li>In different integration tools: \n\nRevit – Cloud computation (<a href=\"http://labs.autodesk.com/utilities/revit_storm\">Storm</a>), \n\nlinks Revit – RSA, Revit – ASD, and for some files import/export extensions Revit – CIS, Revit – SDNF.\n\n<li>In different Revit Extensions: steel connections, reinforcements, timber framing,\n\n<a href=\"http://labs.autodesk.com/utilities/revit_structure_generator\">structure generator</a> \n\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/project-structure-generator-on-autodesk-labs.html\">recently mentioned</a>) etc.\n</li></li></li></ul>\n<p>Many thanks to Emmanuel for this overview!\n\n<p>If you are interested in Revit Structure and structural databases, I strongly encourage you to take a deep look at this if you have not already done so.\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0691_rex_content_generator",
    "header_text": "ContentGeneratorWPF SDK sample",
    "local_header_href": "#contentgeneratorwpf-sdk-sample",
    "chunk_text": "<h4>ContentGeneratorWPF SDK sample</h4><p>In Extensions SDK may be found the ContentGeneratorWPF sample. \nIt allows examining a selected beam or column and changing its type to a new one (generated by Content Generator). \n\n<p>The sample demonstrates some of Content Generator key features:\n\n<ul>\n<li>Revit FamilySymbol interpretation as:\n<ul>\n<li>Parametric section – shape is recognized and dimensions are calculated.\n<li>Database section – the element is recognized and match with appropriate section from database.\n</li></li></ul>\n<li>Revit FamilySymbol generation:\n<ul>\n<li>Parametric section – there are three types available (in CG there are over 22): rectangle, angle and I section.\n<li>Database section – the user is able to point section from available databases.\n</li></li></ul>\n<li>Database browsing.\n</li></li></li></ul>\n<p>The sample runs database browser which allows exploring available databases:</p>\n<center>\n<img alt=\"REX Converter Sample Form\" src=\"img/rex_converter_sample.png\"/>\n</center>\n<h4>Where is Content Generator used?</h4>\n<ul>\n<li>As a standalone application which generates different types of Revit content  (part of Revit Extension for RAC and RST - Extensions ribbon-&gt;Tools).\n\n<li>In different integration tools: \n\nRevit – Cloud computation (<a href=\"http://labs.autodesk.com/utilities/revit_storm\">Storm</a>), \n\nlinks Revit – RSA, Revit – ASD, and for some files import/export extensions Revit – CIS, Revit – SDNF.\n\n<li>In different Revit Extensions: steel connections, reinforcements, timber framing,\n\n<a href=\"http://labs.autodesk.com/utilities/revit_structure_generator\">structure generator</a> \n\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/project-structure-generator-on-autodesk-labs.html\">recently mentioned</a>) etc.\n</li></li></li></ul>\n<p>Many thanks to Emmanuel for this overview!\n\n<p>If you are interested in Revit Structure and structural databases, I strongly encourage you to take a deep look at this if you have not already done so.\n</p></p></p></p>"
  },
  {
    "original_filename": "0691_rex_content_generator",
    "header_text": "Where is Content Generator used?",
    "local_header_href": "#where-is-content-generator-used",
    "chunk_text": "<h4>Where is Content Generator used?</h4><ul>\n<li>As a standalone application which generates different types of Revit content  (part of Revit Extension for RAC and RST - Extensions ribbon-&gt;Tools).\n\n<li>In different integration tools: \n\nRevit – Cloud computation (<a href=\"http://labs.autodesk.com/utilities/revit_storm\">Storm</a>), \n\nlinks Revit – RSA, Revit – ASD, and for some files import/export extensions Revit – CIS, Revit – SDNF.\n\n<li>In different Revit Extensions: steel connections, reinforcements, timber framing,\n\n<a href=\"http://labs.autodesk.com/utilities/revit_structure_generator\">structure generator</a> \n\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/project-structure-generator-on-autodesk-labs.html\">recently mentioned</a>) etc.\n</li></li></li></ul><p>Many thanks to Emmanuel for this overview!\n\n<p>If you are interested in Revit Structure and structural databases, I strongly encourage you to take a deep look at this if you have not already done so.\n</p></p>"
  }
]