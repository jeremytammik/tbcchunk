[
  {
    "original_filename": "0395_set_tag_type",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0395_set_tag_type",
    "header_text": "Set Tag Type",
    "local_header_href": "#set-tag-type",
    "chunk_text": "<h3>Set Tag Type</h3><p>The exploration of a question on setting the tag type for a newly created tag prompted me to put together a new little Building Coder sample command which may be useful for other purposes as well, since it can be started in an empty architectural project and performs the following steps:\n\n<ul>\n<li>Determine bottom and top level for placing a wall.\n<li>Create a new wall element and set its top bounding level.\n<li>Retrieve the wall thickness to later calculate an offset for the tag.\n<li>Retrieve a door symbol to use to insert a door in the wall.\n<li>Create a new door element at the wall midpoint.\n<li>Create a new door tag element associated with the door.\n<li>Retrieve an existing door tag type to duplicate.\n<li>Create a new door tag type by calling the Duplicate method.\n<li>Change the door tag's type to the new door tag type.\n</li></li></li></li></li></li></li></li></li></ul>\n<p>The code to implement the first six steps has been extracted from the Revit API introduction Lab2_0_CreateLittleHouse external command, which we used repeatedly in the past to demonstrate various aspects, such as\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/selecting-all-w.html\">\nselecting all walls</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/wall-dimensions.html\">\ndetermining wall dimensions</a>, \n\ncreating \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/walls-and-doors-on-two-levels.html\">\nwalls and doors on two levels</a>, \n\nand in Revit 2011 showing the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/xyz-immutable.html\">\nimmutability of the XYZ class</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/manual-regeneration-mode-danger.html\">\nrisks of the manual regeneration option</a>,\n\nand a temporary problem requiring an explicit call to the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/autojoinelements.html\">\nAutoJoinElements</a> method.\n\n<p>We already looked at the use of the Duplicate method to create a new family symbol for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/creating-a-new-family-symbol.html\">\nwalls and columns</a>,\n\nlater again for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-column.html\">\ncolumns</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-beam.html\">\nbeams</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/revit-api-cases-1.html#3\">\nfamily instances</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/distinguish-different-dimension-types.html\">\ndimensioning</a>,\n\nand to create a new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/new-material.html\">\nmaterial</a>.\n\n<p>The code also demonstrates some neat little element filtering collector usages.\n\n<p>So it is well worth extracting it and placing it into a self-contained Building Coder sample for easy immediate access.\n\n<p>Here is the question that prompted this update:\n\n<p><strong>Question:</strong> I am writing some code to automatically tag an element.  \nHere is the line I am using to create the new tag:\n\n<pre class=\"code\">\n  doc.Create.NewTag(\n    doc.ActiveView,\n    elem,\n    False,\n    <span class=\"teal\">TagMode</span>.TM_ADDBY_CATEGORY,\n    <span class=\"teal\">TagOrientation</span>.TAG_HORIZONTAL,\n    panelCenter );\n</pre>\n<p>This method allows me to choose the tagging mode, but not the type of tag that I want.\n\n<p>How can I specify the tag type to be used for the newly created tag?\n\n<p>In the user interface, I can define it in this dialogue:</p>\n<center>\n<img alt=\"Default tag type per category\" src=\"img/tag_list.png\"/>\n</center>\n<p><strong>Answer:</strong> You can set the tag type by calling ChangeTypeId with the desired tag type element id on the tag returned by the NewTag method.\n\n<p>I implemented a new Building Coder sample command CmdSetTypeTag to answer this and provide an executable example of implementing it.\nIt executes all of the steps listed in the introduction above, the last four of which address your specific question:\n\n<ul>\n<li>Create a door tag.\n<li>Retrieve an existing door tag type.\n<li>Duplicate it to create a new door tag type.\n<li>Assign the new type to the door tag.\n</li></li></li></li></ul>\n<p>The command makes use of a couple of constants and helper methods.\n\n<p>First of all, we define a conversion unit for converting meters to feet, since all length measurements within the Revit database make use of the latter.\nOur recent exploration of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/voltage-units.html\">\nvoltage units</a> includes \n\nan extensive list of back pointers to posts on this subject:\n\n<pre class=\"code\">\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> MeterToFeet = 3.2808399;\n</pre>\n<p>This geometric helper method returns the midpoint between two points:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">XYZ</span> Midpoint( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n{\n  <span class=\"blue\">return</span> p + 0.5 * ( q - p );\n}\n</pre>\n<p>Then we have a group of filtered element collector routines to effectively retrieve the following sets of elements from the Revit database:\n\n<ul>\n<li>GetElementsOfType:\n     Return all elements of the requested class,\n     i.e. System.Type, matching the given built-in\n     category in the given document.\n<li>GetFamilySymbols:\n     Return all family symbols in the given document\n     matching the given built-in category.\n<li>GetFirstFamilySymbol:\n     Return the first family symbol found in the given document\n     matching the given built-in category, or null if none is found.\n<li>GetBottomAndTopLevels:\n     Determine bottom and top levels for creating walls.\n     In a default empty Revit Architecture project,\n     'Level 1' and 'Level 2' will be returned.\n     Returns true if the two levels are successfully determined.\n</li></li></li></li></ul>\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"teal\">FilteredElementCollector</span>\n  GetElementsOfType(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">Type</span> type,\n    <span class=\"teal\">BuiltInCategory</span> bic )\n{\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  collector.OfCategory( bic );\n  collector.OfClass( type );\n \n  <span class=\"blue\">return</span> collector;\n}\n \n<span class=\"blue\">static</span> <span class=\"teal\">FilteredElementCollector</span>\n  GetFamilySymbols(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">BuiltInCategory</span> bic )\n{\n  <span class=\"blue\">return</span> GetElementsOfType( doc,\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ), bic );\n}\n \n<span class=\"blue\">static</span> <span class=\"teal\">FamilySymbol</span> GetFirstFamilySymbol(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"teal\">BuiltInCategory</span> bic )\n{\n  <span class=\"teal\">FamilySymbol</span> s = GetFamilySymbols( doc, bic )\n    .FirstElement() <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n  <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != s, <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"expected at least one {0} symbol in project\"</span>,\n    bic.ToString() ) );\n \n  <span class=\"blue\">return</span> s;\n}\n \n<span class=\"blue\">static</span> <span class=\"blue\">bool</span> GetBottomAndTopLevels(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"blue\">ref</span> <span class=\"teal\">Level</span> levelBottom,\n  <span class=\"blue\">ref</span> <span class=\"teal\">Level</span> levelTop )\n{\n  <span class=\"teal\">FilteredElementCollector</span> levels\n    = GetElementsOfType( doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ),\n      <span class=\"teal\">BuiltInCategory</span>.OST_Levels );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> levels )\n  {\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == levelBottom )\n    {\n      levelBottom = e <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == levelTop )\n    {\n      levelTop = e <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"blue\">if</span>( levelTop.Elevation &lt; levelBottom.Elevation )\n  {\n    <span class=\"teal\">Level</span> tmp = levelTop;\n    levelTop = levelBottom;\n    levelBottom = tmp;\n  }\n  <span class=\"blue\">return</span> <span class=\"blue\">null</span> != levelBottom &amp;&amp; <span class=\"blue\">null</span> != levelTop;\n}\n</pre>\n<p>Putting these all together, here is the implementation of the external command mainline Execute method:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> createApp\n    = app.Application.Create;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Document</span> createDoc\n    = doc.Create;\n \n  <span class=\"green\">// determine the wall endpoints:</span>\n \n  <span class=\"blue\">double</span> length = 5 * MeterToFeet;\n \n  <span class=\"teal\">XYZ</span> [] pts = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[2];\n \n  pts[0] = <span class=\"teal\">XYZ</span>.Zero;\n  pts[1] = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( length, 0, 0 );\n \n  <span class=\"green\">// determine the levels where </span>\n  <span class=\"green\">// the wall will be located:</span>\n \n  <span class=\"teal\">Level</span> levelBottom = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Level</span> levelTop = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !GetBottomAndTopLevels( doc,\n    <span class=\"blue\">ref</span> levelBottom, <span class=\"blue\">ref</span> levelTop ) )\n  {\n    message = <span class=\"maroon\">\"Unable to determine \"</span>\n      + <span class=\"maroon\">\"wall bottom and top levels\"</span>;\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"green\">// create a wall:</span>\n \n  <span class=\"teal\">BuiltInParameter</span> topLevelParam\n    = <span class=\"teal\">BuiltInParameter</span>.WALL_HEIGHT_TYPE;\n \n  <span class=\"teal\">ElementId</span> topLevelId = levelTop.Id;\n \n  <span class=\"teal\">Line</span> line = createApp.NewLineBound(\n    pts[0], pts[1] );\n \n  <span class=\"teal\">Wall</span> wall = createDoc.NewWall(\n    line, levelBottom, <span class=\"blue\">false</span> );\n \n  <span class=\"teal\">Parameter</span> param = wall.get_Parameter(\n    topLevelParam );\n \n  param.Set( topLevelId );\n \n  <span class=\"green\">// determine wall thickness for tag </span>\n  <span class=\"green\">// offset and profile growth:</span>\n \n  <span class=\"blue\">double</span> wallThickness = wall.WallType\n    .CompoundStructure.Layers.get_Item( 0 )\n    .Thickness;\n \n  <span class=\"green\">// add door to wall;</span>\n  <span class=\"green\">// note that the NewFamilyInstance method </span>\n  <span class=\"green\">// does not automatically add a door tag, </span>\n  <span class=\"green\">// like the ui command does:</span>\n \n  <span class=\"teal\">FamilySymbol</span> doorSymbol = GetFirstFamilySymbol(\n    doc, <span class=\"teal\">BuiltInCategory</span>.OST_Doors );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == doorSymbol )\n  {\n    message = <span class=\"maroon\">\"No door symbol found.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">XYZ</span> midpoint = Midpoint( pts[0], pts[1] );\n \n  <span class=\"teal\">FamilyInstance</span> door = createDoc\n    .NewFamilyInstance( midpoint, doorSymbol,\n      wall, levelBottom,\n      <span class=\"teal\">StructuralType</span>.NonStructural );\n \n  <span class=\"green\">// create door tag:</span>\n \n  <span class=\"teal\">View</span> view = doc.ActiveView;\n \n  <span class=\"blue\">double</span> tagOffset = 3 * wallThickness;\n \n  midpoint += tagOffset * <span class=\"teal\">XYZ</span>.BasisY;\n \n  <span class=\"teal\">IndependentTag</span> tag = createDoc.NewTag(\n    view, door, <span class=\"blue\">false</span>, <span class=\"teal\">TagMode</span>.TM_ADDBY_CATEGORY,\n    <span class=\"teal\">TagOrientation</span>.TAG_HORIZONTAL, midpoint );\n \n  <span class=\"green\">// create and assign new door tag type:</span>\n \n  <span class=\"teal\">FamilySymbol</span> doorTagType\n    = GetFirstFamilySymbol(\n      doc, <span class=\"teal\">BuiltInCategory</span>.OST_DoorTags );\n \n  doorTagType = doorTagType.Duplicate(\n    <span class=\"maroon\">\"New door tag type\"</span> ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n  tag.ChangeTypeId( doorTagType.Id );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The result of running this in a new empty project is a wall, door, and door tag with the newly created door tag type assigned to it, looking like this:</p>\n<center>\n<img alt=\"New door tag type\" src=\"img/new_door_tag_type.png\"/>\n</center>\n<p>Here is \n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_73.zip -->\n<a href=\"zip/bc_11_73.zip\">\nversion 2011.0.73.0</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution and the new command.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]