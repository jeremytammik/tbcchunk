[
  {
    "original_filename": "0534_status_bar_text",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0534_status_bar_text",
    "header_text": "Status Bar Text",
    "local_header_href": "#status-bar-text",
    "chunk_text": "<h3>Status Bar Text</h3><p>The ski tour season in the alps has opened again, and I went on my first tour of the year last weekend, to the Ramoz hut and the Arosa Rothorn:</p><center>\n<img alt=\"Ski tour on Arosa Rothorn\" src=\"img/2011-02-04_arosa_rothorn_collage.jpg\"/>\n</center><p>Many thanks to Chris for the \n\n<a href=\"https://picasaweb.google.com/lh/sredir?uname=ruppchrissi&amp;target=ALBUM&amp;id=5570993040937253329&amp;authkey=Gv1sRgCPrZv8zbi-mCXg&amp;invite=CNHl7asN&amp;feat=email\">\nbeautiful pictures</a>!\n\n<p>Here is another idea from Rudolf Honke of\n\n<a href=\"http://www.acadgraph.de\">\nacadGraph CADstudio GmbH</a>. \n\nHe says:\n\n<p>I previously explained how you can use \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/subscribing-to-ui-automation-events.html\">\nUIAutomation event handlers</a> in Revit.\n\n<p>When playing around a bit further with this, I thought about how to <strong>display</strong> the events.\n\n<p>Using good old P/Invoke, you can simply display any text in the Revit status bar (<a href=\"http://www.pinvoke.net\">http://www.pinvoke.net</a> helps a lot):\n\n<pre class=\"code\">\n  [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"user32.dll\"</span>, \n    SetLastError = <span class=\"blue\">true</span>, \n    CharSet = <span class=\"teal\">CharSet</span>.Auto )]\n  <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">int</span> SetWindowText( \n    <span class=\"teal\">IntPtr</span> hWnd, \n    <span class=\"blue\">string</span> lpString );\n \n  [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"user32.dll\"</span>, \n    SetLastError = <span class=\"blue\">true</span> )]\n  <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"teal\">IntPtr</span> FindWindowEx( \n    <span class=\"teal\">IntPtr</span> hwndParent, \n    <span class=\"teal\">IntPtr</span> hwndChildAfter, \n    <span class=\"blue\">string</span> lpszClass, \n    <span class=\"blue\">string</span> lpszWindow );\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> SetStatusText( <span class=\"blue\">string</span> text )\n  {\n    <span class=\"teal\">IntPtr</span> statusBar = FindWindowEx( \n      m_mainWndFromHandle, <span class=\"teal\">IntPtr</span>.Zero, \n      <span class=\"maroon\">\"msctls_statusbar32\"</span>, <span class=\"maroon\">\"\"</span> );\n \n    <span class=\"blue\">if</span>( statusBar != <span class=\"teal\">IntPtr</span>.Zero )\n    {\n      SetWindowText( statusBar, text );\n    }\n  }\n</pre>\n<p>This is a comfortable way to show the events being fired.\nHere is an example of resizing the main Revit window:</p>\n<center>\n<img alt=\"Status bar displaying UI Automation event\" src=\"img/rh_status_bar_1.png\" width=\"400\"/>\n</center>\n<p>Resizing the main Revit window again:</p>\n<center>\n<img alt=\"Status bar displaying UI Automation event\" src=\"img/rh_status_bar_2.png\" width=\"400\"/>\n</center>\n<p>Selecting the Home ribbon tab:</p>\n<center>\n<img alt=\"Status bar displaying UI Automation event\" src=\"img/rh_status_bar_3.png\" width=\"400\"/>\n</center>\n<p>Selecting the Insert ribbon tab:</p>\n<center>\n<img alt=\"Status bar displaying UI Automation event\" src=\"img/rh_status_bar_4.png\" width=\"400\"/>\n</center>\n<p>Selecting a button on the Annotation ribbon tab:</p>\n<center>\n<img alt=\"Status bar displaying UI Automation event\" src=\"img/rh_status_bar_5.png\" width=\"400\"/>\n</center>\n<p>One point to keep in mind is that Revit will overwrite your text as soon as it sees fit, which may be within a few milliseconds, depending on the command you invoked.</p>\n<p>Here is another button being selected and the corresponding UI Automation event displayed:</p>\n<center>\n<img alt=\"Status bar displaying UI Automation event\" src=\"img/rh_status_bar_6.png\" width=\"400\"/>\n</center>\n<p>In this case, it is immediately overwritten by Revit:</p>\n<center>\n<img alt=\"Status bar displaying UI Automation event\" src=\"img/rh_status_bar_7.png\" width=\"400\"/>\n</center>\n<p>Actually, this function could be combined with another function to replace the global variable 'm_mainWndFromHandle':\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> SetStatusText( <span class=\"blue\">string</span> text )\n{\n  <span class=\"teal\">IntPtr</span> mainWindowHandle = <span class=\"teal\">IntPtr</span>.Zero;\n \n  <span class=\"teal\">Process</span>[] processes \n    = <span class=\"teal\">Process</span>.GetProcessesByName( <span class=\"maroon\">\"Revit\"</span> );\n \n  <span class=\"blue\">if</span>( 0 &lt; processes.Length )\n  {\n    mainWindowHandle \n      = processes[0].MainWindowHandle;\n \n    <span class=\"teal\">IntPtr</span> statusBar = FindWindowEx( \n      mainWindowHandle, <span class=\"teal\">IntPtr</span>.Zero, \n      <span class=\"maroon\">\"msctls_statusbar32\"</span>, <span class=\"maroon\">\"\"</span> );\n \n    <span class=\"blue\">if</span>( statusBar != <span class=\"teal\">IntPtr</span>.Zero )\n    {\n      SetWindowText( statusBar, text );\n    }\n  }\n}\n</pre>\n<p>So, this function could be called without filling the global Revit app handle before.\nOr even shorter:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> SetStatusText( <span class=\"blue\">string</span> text )\n{\n  <span class=\"teal\">Process</span>[] processes \n    = <span class=\"teal\">Process</span>.GetProcessesByName( <span class=\"maroon\">\"Revit\"</span> );\n \n  <span class=\"blue\">if</span>( 0 &lt; processes.Length )\n  {\n    <span class=\"teal\">IntPtr</span> statusBar = FindWindowEx( \n      processes[0].MainWindowHandle, <span class=\"teal\">IntPtr</span>.Zero, \n      <span class=\"maroon\">\"msctls_statusbar32\"</span>, <span class=\"maroon\">\"\"</span> );\n \n    <span class=\"blue\">if</span>( statusBar != <span class=\"teal\">IntPtr</span>.Zero )\n    {\n      SetWindowText( statusBar, text );\n    }\n  }\n}\n</pre>\n<p>Think of a situation there more than one instance of Revit is running, RAC and MEP, for example.\nUsing the original code, the wrong window might be addressed.\n\n<p>Jeremy adds: I went ahead and implemented a minimal new external command CmdStatusBar for The Building Coder samples to demonstrate this.\nI actually make use of the GetCurrentProcess method instead, since I am inside the Revit process, like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> SetStatusText( \n  <span class=\"teal\">IntPtr</span> mainWindow,\n  <span class=\"blue\">string</span> text )\n{\n  <span class=\"teal\">IntPtr</span> statusBar = FindWindowEx(\n    mainWindow, <span class=\"teal\">IntPtr</span>.Zero,\n    <span class=\"maroon\">\"msctls_statusbar32\"</span>, <span class=\"maroon\">\"\"</span> );\n \n  <span class=\"blue\">if</span>( statusBar != <span class=\"teal\">IntPtr</span>.Zero )\n  {\n    SetWindowText( statusBar, text );\n  }\n}\n \n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">IntPtr</span> revitHandle = System.Diagnostics.<span class=\"teal\">Process</span>\n    .GetCurrentProcess().MainWindowHandle;\n \n  SetStatusText( revitHandle, <span class=\"maroon\">\"Kilroy was here.\"</span> );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>It works fine.\nHere is\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_83.zip -->\n<a href=\"zip/bc_11_83.zip\">\nversion 2011.0.83.0</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution with the new command.\n</p></p></p></p></p></p></p></p></p></p>"
  }
]