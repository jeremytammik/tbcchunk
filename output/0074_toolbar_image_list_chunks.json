[
  {
    "original_filename": "0074_toolbar_image_list",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0074_toolbar_image_list",
    "header_text": "Toolbar Image List",
    "local_header_href": "#toolbar-image-list",
    "chunk_text": "<h3>Toolbar Image List</h3><p><strong>Question:</strong>\nHow can I define a separate icon for each item in a toolbar?\nI only see one single property on the Toolbar class, Image, which gets or sets the collection of images available to the toolbar button controls.\nBut how can this help me define the icon for an individual toolbar item?</p><p><strong>Answer:</strong>\nThis is indeed the only way to define toolbar icons.\nThis is demonstrated by the Revit SDK samples.\nFor instance, in the DoorSwing sample, the code looks like this:</p><pre class=\"code\">\n<span class=\"green\">// create custom Toolbar.</span>\n<span class=\"teal\">Toolbar</span> doorToolbar\n  = application.CreateToolbar();\n \ndoorToolbar.Name = <span class=\"maroon\">\"DoorSwing\"</span>;\n \n<span class=\"green\">// The location of this command assembly</span>\n<span class=\"blue\">string</span> currentCommandAssemblyPath\n  = Assembly.GetExecutingAssembly().Location;\n \n<span class=\"green\">// The path of ourselves's DoorSwing.bmp</span>\n<span class=\"blue\">string</span> toolbarImagePath\n  = <span class=\"teal\">Path</span>.GetDirectoryName(\n    <span class=\"teal\">Path</span>.GetDirectoryName(\n      <span class=\"teal\">Path</span>.GetDirectoryName(\n        <span class=\"teal\">Path</span>.GetDirectoryName(\n          currentCommandAssemblyPath))));\n \ntoolbarImagePath       \n  = toolbarImagePath + <span class=\"maroon\">\"\\\\DoorSwing.bmp\"</span>;\n \ndoorToolbar.Image     \n  = toolbarImagePath;\n \n<span class=\"green\">// the first button in the DoorSwing toolbar, </span>\n<span class=\"green\">// used to invoke the InitializeCommand.</span>\n<span class=\"teal\">ToolbarItem</span> iniButton\n  = doorToolbar.AddItem(\n    currentCommandAssemblyPath,\n    <span class=\"blue\">typeof</span>(<span class=\"teal\">InitializeCommand</span>).FullName);\n \niniButton.ItemType   \n  = <span class=\"teal\">ToolbarItem</span>.<span class=\"teal\">ToolbarItemType</span>.BtnRText;\n \niniButton.ItemText   \n  = <span class=\"maroon\">\"Customize Door Opening Expression\"</span>;\n \niniButton.ToolTip   \n  = <span class=\"maroon\">\"Customize the expression based on\"</span>\n    + <span class=\"maroon\">\" family's geometry and country's standard.\"</span>;\n</pre><p>It continues similarly to add the second and third button.\nOne can see how the Image property is used to specify the file path of the bitmap file, which is set up to contain all the required icons for all buttons.\nThis pattern also reoccurs in the Toolbar SDK sample, as well as in the \n\n<a href=\"http://download.autodesk.com/media/adn/RvtMgdDbg2009_0429_2008.zip\">\nRvtMgdDbg</a>\n\nsource code.</p><p>The repeated calls to GetDirectoryName are used to move up the directory hierarchy one step at a time, from the 'bin/Debug' to the 'bin' subdirectories, then to the 'CS' source code directory and finally to its parent directory, where the DoorSwing.bmp file is located.\nA simpler way to achieve this would be to use something like this:</p><pre>\nstring p = @\"c:\\path1\\path2\\path3\\path4\";\np = System.IO.Path.GetFullPath( p + @\"..\\..\\..\\..\" );\n</pre><p>In this code, the ImageIndex property of the individual icons is never written to.\nApparently, they automatically increment by default, so that each toolbar item added to the toolbar gets the next icon in the list assigned to it unless specified differently.\nIn case you do make use of this property, the index is zero based.</p><p>The image file supplied in the DoorSwing sample looks like this:</p><img alt=\"DoorSwing Image List\" src=\"img/doorswing_image_list.png\"/><p>It contains three icons.\nIts pixel size is 48 wide by 16 high, so each icon is 16 x 16 pixels.</p><p>To avoid errors, one should ensure that the bitmap file exists and has the correct dimensions, and that any indices used are within the valid range. To catch errors, the entire handling might be enclosed in a try-catch handler.</p><p>Many thanks to the company Tecton Limited of Hong Kong for raising this issue and also pointing out many of the details involved.</p>"
  }
]