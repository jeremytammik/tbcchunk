[
  {
    "original_filename": "0437_ribbon_textbox_label",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0437_ribbon_textbox_label",
    "header_text": "Simulating a Ribbon Textbox Label",
    "local_header_href": "#simulating-a-ribbon-textbox-label",
    "chunk_text": "<h3>Simulating a Ribbon Textbox Label</h3><p>On Wednesday evening I arrived in Stavanger on the coast of Norway, found the sailship \n\n<a href=\"http://www.classicsailing.de\">\nPantagruel</a> and met the crew that I will be spending the coming week with.\n\n<p>Thursday we went on a hike rather than sailing, because we happened to be so close to the spectacular \n\n<!-- http://www.stavanger-web.com/touristinfo/prekestol.htm -->\n<a href=\"http://en.wikipedia.org/wiki/Preikestolen\">\nPreikestolen or Pulpit Stone</a> over \n\nthe Lysefjord.\n\nWe took our boat over from Stavanger to Jørpeland by motor, since the wind was exactly opposite our direction, and then spent all afternoon hiking through the incredibly beautiful moors and rocks.\n\n<p>On Friday we started the real sailing tour, motoring out of the Stavanger bay in sunshine and very little wind, and catching more wind outside the coast to sail down towards Hidra.\nThe wind grew and the waves as well, and all of us newbies got a thorough dose of seasickness.\nWe arrived in a beautiful bay late in the evening and spent most of Saturday recuperating in tranquillity and sunshine.\nI also spend a couple of hours trying my hand at sailing a miniature boat, a jolle, before continuing down to Egersund for shopping.\n\n<p>Tonight we are planning to sail further south during the night.\nThe final goal is to cross over to Denmark and from there cross the Skagerrak to Sweden, then sail on the west coast until we get to Göteborg and head back home.\n\n<!-- \n<p>I am still underway on my sailing tour along the coast of Norway and western Sweden, if we have not capsized by now... \nHere is a little item that I posted before leaving and that I hope you will find as interesting as I did:\n-->\n<p>We have not yet talked at all about the new ribbon capabilities in the Revit 2011 API.\nThere are quite a few, as the following excerpt from the What's New section of the Revit API help file RevitAPI.chm shows:\n\n<span style=\"color:darkblue\">\n<h4>Additional options for Ribbon customization</h4>\n<p>There are new Ribbon components supported via the Ribbon API:\n\n<ul>\n<li>SplitButton – a pulldown button with a default pushbutton attached\n<li>RadioGroup – a set of ToggleButtons, where only one of the set can be active at a time\n<li>ComboBox – a pulldown containing a set of selectable items, which can be grouped optionally\n<li>TextBox – an input field for users to enter text\n<li>SlideOut panel – an extra panel can optionally slide down from a Ribbon panel; this panel can contain any of the standard Ribbon components\n</li></li></li></li></li></ul>\n<p>For ComboBox and TextBox, events are included; these events call your API code when the component is changed by the user.\n\n<p>The new property\n\n<ul>\n<li>RibbonItem.Visible\n</li></ul>\n<p>provides control over whether a particular item is visible.\n\n<p>The new properties:\n\n<ul>\n<li>RibbonItem.LongDescription\n<li>RibbonItem.ToolTipImage\n</li></li></ul>\n<p>allow you to set up an extended tooltip for the Ribbon item.  This tooltip can display a longer set of text, and/or a single image.\n\n<p>The new property:\n\n<ul>\n<li>PushButton.AvailabilityClassName\n</li></ul>\n<p>allows assignment of an availability class to controlled whether or not the button is available, similar to the option provided for ExternalCommands registered by manifest.\n\n<p>There is also a new option supported for PulldownButton – a separator can now be added between buttons this component.\n\n<p>There is also a new option to add custom panels to the Analyze tab in Revit as well as the Add-Ins tab, via a new overload of Application.CreateRibbonPanel().\n\n<p>As a result of these enhancements, some pre-existing APIs have changed:\n\n<ul>\n<li>RibbonPanel.AddButton() has been replaced with RibbonPanel.AddItem()\n<li>RibbonPanel.AddStackedButtons() overloads have been replaced with RibbonPanel.AddStackedItems() overloads\n<li>Property RibbonPanel.Items has been replaced with method RibbonPanel.GetItems()\n<li>Property PulldownButton.Items has been replaced with method PulldownButton.GetItems()\n<li>Methods RibbonPanel.AddPushButton() and RibbonPanel.AddPulldownButton() have been removed. Use RibbonPanel.AddItem() for this operation.\n<li>RibbonPanel.AddToPulldown() has been removed. Use PulldownButton.AddItem() for this operation.\n<li>PulldownButton.AddPushButton() has been removed. Use PulldownButton.AddItem() for this operation.\n</li></li></li></li></li></li></li></ul>\n</p></p></p></p></p></p></p></p></p></p></p></span>\n<p>Some of the new functionality is demonstrated by the Ribbon SDK sample, but not all.\n\n<p>Here is a question on how to simulate a missing widget, a label to describe the use of a text box:\n\n<!--\n\nFrom: Mikako Harada\nSent: Friday, July 16, 2010 10:31 AM\nSubject: Ribbon Textbox - how to add label?\n\n-->\n<p><strong>Question:</strong> How can I add a label to a ribbon text box like in these two examples from the Revit user interface?\n\n<p>Here is a label for the active workset:</p>\n<center>\n<img alt=\"Active workset label\" src=\"img/ribbon_textbox_label_active_workset.jpg\"/>\n</center>\n<p>Here is a different label in the Autodesk Seek panel:</p>\n<center>\n<img alt=\"Autodesk Seek panel\" src=\"img/ribbon_textbox_label_seek.png\"/>\n</center>\n<p>Could I possible use some stacked items to achieve this?\n\n<p>This is what my attempts so far end up looking like, displaying a textbox lacking a label:\n\n<center>\n<img alt=\"Ribbon textbox lacking label\" src=\"img/ribbon_textbox_label_attempt.png\"/>\n</center>\n<p>The code I am using to produce it looks like this:\n\n<pre class=\"code\">\n<span class=\"blue\">Sub</span> AddTextBox(<span class=\"blue\">ByVal</span> panel <span class=\"blue\">As</span> RibbonPanel)\n \n  <span class=\"green\">' fill the text gox information</span>\n  <span class=\"blue\">Dim</span> txtBoxData <span class=\"blue\">As</span> <span class=\"blue\">New</span> TextBoxData(<span class=\"maroon\">\"TextBox\"</span>)\n \n  txtBoxData.Image = <span class=\"blue\">New</span> BitmapImage( _\n    <span class=\"blue\">New</span> Uri(m_imageFolder + <span class=\"maroon\">\"Basics.ico\"</span>))\n \n  txtBoxData.Name = <span class=\"maroon\">\"Text Box\"</span>\n  txtBoxData.ToolTip = <span class=\"maroon\">\"Enter text here\"</span>\n  txtBoxData.LongDescription _\n    = <span class=\"maroon\">\"&lt;p&gt;This is Revit UI Labs.&lt;/p&gt;&lt;p&gt;Ribbon Lab&lt;/p&gt;\"</span>\n \n  txtBoxData.ToolTipImage = <span class=\"blue\">New</span> BitmapImage( _\n    <span class=\"blue\">New</span> Uri(m_imageFolder + <span class=\"maroon\">\"ImgHelloWorld.png\"</span>))\n \n  <span class=\"green\">' create the text box item on the panel </span>\n  <span class=\"blue\">Dim</span> txtBox <span class=\"blue\">As</span> TextBox = panel.AddItem(txtBoxData)\n  txtBox.PromptText = <span class=\"maroon\">\"Enter a comment\"</span>\n  txtBox.ShowImageAsButton = <span class=\"blue\">True</span>\n  txtBox.Width = 180\n  <span class=\"green\">'txtBox.ItemText = \"my text box\"</span>\n  <span class=\"green\">'txtBox.Name ' this is read only. </span>\n \n  <span class=\"green\">' p51. we'll talk about events in Lab4</span>\n  <span class=\"blue\">AddHandler</span> txtBox.EnterPressed, <span class=\"blue\">New</span> EventHandler( _\n    <span class=\"blue\">Of</span> TextBoxEnterPressedEventArgs)( _\n    <span class=\"blue\">AddressOf</span> txtBox_EnterPressed)\n \n<span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n<span class=\"green\">' event hander for the text box above. </span>\n<span class=\"blue\">Sub</span> txtBox_EnterPressed( _\n  <span class=\"blue\">ByVal</span> sender <span class=\"blue\">As</span> <span class=\"blue\">Object</span>, _\n  <span class=\"blue\">ByVal</span> e <span class=\"blue\">As</span> TextBoxEnterPressedEventArgs)\n \n  <span class=\"green\">' cast sender as TextBox to retrieve text value</span>\n  <span class=\"blue\">Dim</span> txtBox <span class=\"blue\">As</span> TextBox = sender\n \n  TaskDialog.Show(<span class=\"maroon\">\"TextBox Input\"</span>, _\n    <span class=\"maroon\">\"This is what you typed in: \"</span> _\n    + txtBox.Value.ToString())\n \n<span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n</pre>\n<!--\n\nFrom: Harry Mattison\nSent: Friday, July 16, 2010 2:29 PM\nSubject: RE: Ribbon Textbox - how to add label?\n\n-->\n<p><strong>Answer:</strong> The ribbon API does not contain a text label item, so the best alternative might be a disabled pushbutton stacked above the other control.\nHere is an example of what this might look like:</p>\n<center>\n<img alt=\"Simulate textbox label with disabled pushbutton\" src=\"img/ribbon_textbox_label_disabled_pushbutton.jpg\"/>\n</center>\n<p>Here is the tweaked excerpt from the Ribbon SDK sample that produces this result:\n\n<pre class=\"code\">\n  <span class=\"teal\">PushButtonData</span> pushButtonData\n    = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n      <span class=\"maroon\">\"Active Workset\"</span>,\n      <span class=\"maroon\">\"Active Workset\"</span>,\n      AddInPath,\n      className );\n \n  <span class=\"teal\">ComboBoxData</span> comboBoxDataLevel\n    = <span class=\"blue\">new</span> <span class=\"teal\">ComboBoxData</span>( <span class=\"maroon\">\"LevelsSelector\"</span> );\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">RibbonItem</span>&gt; ribbonItemsStacked\n    = ribbonSamplePanel.AddStackedItems(\n      pushButtonData, comboBoxDataLevel );\n \n  ( (<span class=\"teal\">PushButton</span>) (ribbonItemsStacked[0]) ).Enabled\n    = <span class=\"blue\">false</span>;\n</pre>\n<p>Many thanks to Mikako Harada and Harry Mattison for this suggestion!</p>\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0437_ribbon_textbox_label",
    "header_text": "Additional options for Ribbon customization",
    "local_header_href": "#additional-options-for-ribbon-customization",
    "chunk_text": "<h4>Additional options for Ribbon customization</h4><p>There are new Ribbon components supported via the Ribbon API:\n\n<ul>\n<li>SplitButton – a pulldown button with a default pushbutton attached\n<li>RadioGroup – a set of ToggleButtons, where only one of the set can be active at a time\n<li>ComboBox – a pulldown containing a set of selectable items, which can be grouped optionally\n<li>TextBox – an input field for users to enter text\n<li>SlideOut panel – an extra panel can optionally slide down from a Ribbon panel; this panel can contain any of the standard Ribbon components\n</li></li></li></li></li></ul>\n<p>For ComboBox and TextBox, events are included; these events call your API code when the component is changed by the user.\n\n<p>The new property\n\n<ul>\n<li>RibbonItem.Visible\n</li></ul>\n<p>provides control over whether a particular item is visible.\n\n<p>The new properties:\n\n<ul>\n<li>RibbonItem.LongDescription\n<li>RibbonItem.ToolTipImage\n</li></li></ul>\n<p>allow you to set up an extended tooltip for the Ribbon item.  This tooltip can display a longer set of text, and/or a single image.\n\n<p>The new property:\n\n<ul>\n<li>PushButton.AvailabilityClassName\n</li></ul>\n<p>allows assignment of an availability class to controlled whether or not the button is available, similar to the option provided for ExternalCommands registered by manifest.\n\n<p>There is also a new option supported for PulldownButton – a separator can now be added between buttons this component.\n\n<p>There is also a new option to add custom panels to the Analyze tab in Revit as well as the Add-Ins tab, via a new overload of Application.CreateRibbonPanel().\n\n<p>As a result of these enhancements, some pre-existing APIs have changed:\n\n<ul>\n<li>RibbonPanel.AddButton() has been replaced with RibbonPanel.AddItem()\n<li>RibbonPanel.AddStackedButtons() overloads have been replaced with RibbonPanel.AddStackedItems() overloads\n<li>Property RibbonPanel.Items has been replaced with method RibbonPanel.GetItems()\n<li>Property PulldownButton.Items has been replaced with method PulldownButton.GetItems()\n<li>Methods RibbonPanel.AddPushButton() and RibbonPanel.AddPulldownButton() have been removed. Use RibbonPanel.AddItem() for this operation.\n<li>RibbonPanel.AddToPulldown() has been removed. Use PulldownButton.AddItem() for this operation.\n<li>PulldownButton.AddPushButton() has been removed. Use PulldownButton.AddItem() for this operation.\n</li></li></li></li></li></li></li></ul>\n</p></p></p></p></p></p></p></p></p></p></p>"
  }
]