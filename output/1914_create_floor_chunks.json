[
  {
    "original_filename": "1914_create_floor",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- get total polygon count\n  How to get polygon count of the project\n  https://forums.autodesk.com/t5/revit-api-forum/how-to-get-polygon-count-of-the-project/m-p/10530975\n  CmdTriangleCount\n  tbc_samples_triangle_count.png 974\n  tbc samples implemented and tested and debugged and improved CmdTriangleCount\n  https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2022.0.151.0\n\n- blog about the code snippet and instruction on floor creation API   \n  https://autodesk.slack.com/archives/C0SR6NAP8/p1627395932194800\n  Oleg Sheydvasser 27 Jul at 16:25\n  It appears we need to provide clarifications to the users on the new Floor creation API that was introduced in R2022.\n  A few old APIs were obsoleted, but the new methods work a bit differently (e.g. see https://app.slack.com/client/T02NW42JD/threads), so we need to provide instructions on how to migrate from the old API to new.\n  Where should I put the instructions? The What's new section, the snippets?\n  Scott Conover:no_entry:  22 days ago\n  Snippets would be helpful.  For immediate availability, I'd suggest providing any guidance to @Jeremy Tammik so he can post about it faster than we can release an updated SDK.\n\n- Dynamo Studio EOL\n  https://knowledge.autodesk.com/support/dynamo-studio/learn-explore/caas/simplecontent/content/dynamo-studio-faq.html\n\n- solar panels\n  many_solar_panels.jpg\n  jtracer\n  running into all the hurdles described in [Learning from the real world: A hardware hobby project]\n  https://stackoverflow.blog/2021/07/12/the-difference-between-software-and-hardware-projects/\n\ntwitter:\n\nadd #thebuildingcoder\n\nMy solar power project, Dynamo Studio EOL, model polygon or triangle count, floor and slab API clarification in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/floorslabapi\n\nGetting back into the flow after my summer break\n&ndash; Model polygon or triangle count\n&ndash; Floor creation API clarification\n&ndash; Dynamo Studio EOL\n&ndash; My solar power project...\n\nlinkedin:\n\nMy solar power project, Dynamo Studio EOL, model polygon or triangle count, floor and slab API clarification in the #RevitAPI\n\nhttps://autode.sk/floorslabapi\n\n- Model polygon or triangle count\n- Floor creation API clarification\n- Dynamo Studio EOL\n- My solar power project...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n**Question:** \n\n**Answer:**\n\n**Response:**  \n\nMany thanks to  for this very helpful explanation!\n\n-->"
  },
  {
    "original_filename": "1914_create_floor",
    "header_text": "Triangle Count, New Floor and Slab Creation",
    "local_header_href": "#triangle-count-new-floor-and-slab-creation",
    "chunk_text": "### Triangle Count, New Floor and Slab Creation\n\nI am back from my break, which I mostly spent chilling with friends and hiking in the Jura and Ticino hills and mountains in the west and south of Switzerland.\n\nLet's start getting back into the flow again with these news bites:\n\n- [Model polygon or triangle count](#2)\n- [Floor creation API clarification](#3)\n- [Dynamo Studio EOL](#4)\n- [My solar power project](#5)"
  },
  {
    "original_filename": "1914_create_floor",
    "header_text": "Total Modal Polygon or Triangle Count",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Total Modal Polygon or Triangle Count\n\nA recent [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\nasked [how to get polygon count of the project](https://forums.autodesk.com/t5/revit-api-forum/how-to-get-polygon-count-of-the-project/m-p/10530975):\n\n**Question:** I am exporting the model into OBJ format.\nIs it possible to the polygon count or the number of triangles in the model before export?\nDoes Revit provide any API for that?\nCan I count the polygons for each element and then add them all?\n\n**Answer:** No, no such API is provided ready-built.\n\nAs a non-programmer, you could export your Revit project (.rvt) or family (.rfa) file to FBX format and use an external viewer to view and analyse that.\nFor instance, in Revit, go to File > Export > FBX.\nOpen the FBX file in [Microsoft 3D Viewer](https://www.microsoft.com/en-us/p/3d-viewer/9nblggh42ths).\nDepending on the file size, it may take a little while to open.\nA spinning 3D box icon will indicate loading is in progress.\nIn the viewer, go to Tools and click on \"Stats & Shading\".\nIt will list the number of triangles and vertices.\nThe 3D Viewer is a free download if you don't already have it in Windows 10.\n\nAs a programmer, you can do as you suggest, retrieve all the element geometry, tessellate it, and sum up the total number of triangles.\n\nYou might find it easiest to do so using\na [custom exporter](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.1).\nThe result should be the same as in the FBX export.\n\n[@techXMKH9](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/5770785) very\nkindly shared a nice and minimal sample custom exporter implementation that I integrated into a new external command `CmdTriangleCount`\nin [release 2022.0.151.0](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2022.0.151.0)\nof [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples):\n\n<pre class=\"code\">\n<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">TriangleCounterContext</span>&nbsp;:&nbsp;IExportContext\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;Document&nbsp;document;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;Func&lt;<span style=\"color:blue;\">bool</span>&gt;&nbsp;isCanceled;\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Callback&nbsp;at&nbsp;end&nbsp;with&nbsp;total&nbsp;count&nbsp;of&nbsp;model&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;geometry&nbsp;triangles&nbsp;and&nbsp;material&nbsp;ids</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;Action&lt;<span style=\"color:blue;\">long</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;&nbsp;callback;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">long</span>&nbsp;numTriangles;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;List&lt;ElementId&gt;&nbsp;materialIds;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;includeMaterials&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;TriangleCounterContext(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Func&lt;<span style=\"color:blue;\">bool</span>&gt;&nbsp;isCanceled,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Action&lt;<span style=\"color:blue;\">long</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;&nbsp;callback&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.isCanceled&nbsp;=&nbsp;isCanceled;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.callback&nbsp;=&nbsp;callback;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.document&nbsp;=&nbsp;document;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.materialIds&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;ElementId&gt;();\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnPolymesh(&nbsp;PolymeshTopology&nbsp;polymesh&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.numTriangles&nbsp;+=&nbsp;(<span style=\"color:blue;\">long</span>)&nbsp;polymesh.NumberOfFacets;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;Finish()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.callback(&nbsp;<span style=\"color:blue;\">this</span>.numTriangles,&nbsp;<span style=\"color:blue;\">this</span>.materialIds.Count&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsCanceled()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;Start()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.materialIds&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;ElementId&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnRPC(&nbsp;RPCNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnLight(&nbsp;LightNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;RenderNodeAction&nbsp;OnViewBegin(&nbsp;ViewNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;node.LevelOfDetail&nbsp;=&nbsp;8;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;0;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnViewEnd(&nbsp;ElementId&nbsp;elementId&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;RenderNodeAction&nbsp;OnFaceBegin(&nbsp;FaceNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;0;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnFaceEnd(&nbsp;FaceNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;RenderNodeAction&nbsp;OnElementBegin(&nbsp;ElementId&nbsp;elementId&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;0;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnElementEnd(&nbsp;ElementId&nbsp;elementId&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;RenderNodeAction&nbsp;OnInstanceBegin(&nbsp;InstanceNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;0;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnInstanceEnd(&nbsp;InstanceNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;RenderNodeAction&nbsp;OnLinkBegin(&nbsp;LinkNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;0;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnLinkEnd(&nbsp;LinkNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnMaterial(&nbsp;MaterialNode&nbsp;node&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">this</span>.includeMaterials&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;node.MaterialId&nbsp;==&nbsp;ElementId.InvalidElementId&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">this</span>.materialIds.Contains(&nbsp;node.MaterialId&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>.materialIds.Add(&nbsp;node.MaterialId&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n \n<span style=\"color:blue;\">void</span>&nbsp;TriangleCountReport(&nbsp;<span style=\"color:blue;\">long</span>&nbsp;nTriangles,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;nMaterials&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;s&nbsp;=&nbsp;<span style=\"color:blue;\">string</span>.Format(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Total&nbsp;number&nbsp;of&nbsp;model&nbsp;triangles&nbsp;and&nbsp;materials:&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;{0}&nbsp;triangle{1},&nbsp;{2}&nbsp;material{3}&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;nTriangles,&nbsp;Util.PluralSuffix(&nbsp;nTriangles&nbsp;),\n&nbsp;&nbsp;&nbsp;&nbsp;nMaterials,&nbsp;Util.PluralSuffix(&nbsp;nMaterials&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;Debug.Print(&nbsp;s&nbsp;);\n&nbsp;&nbsp;TaskDialog.Show(&nbsp;<span style=\"color:#a31515;\">&quot;Triangle&nbsp;Count&quot;</span>,&nbsp;s&nbsp;);\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;Result&nbsp;Execute(\n&nbsp;&nbsp;ExternalCommandData&nbsp;commandData,\n&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,\n&nbsp;&nbsp;ElementSet&nbsp;elements&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;app&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;uidoc&nbsp;=&nbsp;app.ActiveUIDocument;\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n \n&nbsp;&nbsp;TriangleCounterContext&nbsp;context&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;TriangleCounterContext(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;<span style=\"color:blue;\">null</span>,&nbsp;TriangleCountReport&nbsp;);\n \n&nbsp;&nbsp;CustomExporter&nbsp;exporter&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;CustomExporter(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;context&nbsp;);\n \n&nbsp;&nbsp;exporter.Export(&nbsp;doc.ActiveView&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Result.Succeeded;\n}\n</pre>\n\nHere is the result of running it in a minimal sample model:\n\n<center>\n<img src=\"img/tbc_samples_triangle_count.png\" alt=\"Triangle count\" title=\"Triangle count\" width=\"487\"/> <!-- 974 -->\n</center>"
  },
  {
    "original_filename": "1914_create_floor",
    "header_text": "Floor Creation API Clarification",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Floor Creation API Clarification\n\nThe development team provide some clarification on how to user\nthe [new floor creation API](https://thebuildingcoder.typepad.com/blog/2021/04/whats-new-in-the-revit-2022-api.html#4.1.4.1) introduced\nin Revit 2022.\n\nSome old APIs were obsoleted, and the new methods work a bit differently, so some instructions on how to migrate from the old API to the new may come in handy, especially a sample code snippet like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;The&nbsp;example&nbsp;below&nbsp;shows&nbsp;how&nbsp;to&nbsp;use&nbsp;Floor.Create&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;method&nbsp;to&nbsp;create&nbsp;a&nbsp;new&nbsp;Floor&nbsp;with&nbsp;a&nbsp;specified&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;elevation&nbsp;on&nbsp;a&nbsp;level&nbsp;using&nbsp;a&nbsp;geometry&nbsp;profile&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;and&nbsp;a&nbsp;floor&nbsp;type.&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;It&nbsp;shows&nbsp;how&nbsp;to&nbsp;adapt&nbsp;your&nbsp;old&nbsp;code&nbsp;using&nbsp;the</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;NewFloor&nbsp;and&nbsp;NewSlab&nbsp;methods,&nbsp;which&nbsp;became&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;obsolete&nbsp;with&nbsp;Revit&nbsp;2022.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;In&nbsp;this&nbsp;sample,&nbsp;the&nbsp;geometry&nbsp;profile&nbsp;is&nbsp;a&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;CurveLoop&nbsp;of&nbsp;lines;&nbsp;you&nbsp;can&nbsp;also&nbsp;use&nbsp;arcs,&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;ellipses&nbsp;and&nbsp;splines.</span>\n&nbsp;&nbsp;Floor&nbsp;CreateFloorAtElevation(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;document,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;elevation&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Get&nbsp;a&nbsp;floor&nbsp;type&nbsp;for&nbsp;floor&nbsp;creation</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;You&nbsp;must&nbsp;provide&nbsp;a&nbsp;valid&nbsp;floor&nbsp;type&nbsp;(unlike&nbsp;the&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;obsolete&nbsp;NewFloor&nbsp;and&nbsp;NewSlab&nbsp;methods).</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;ElementId&nbsp;floorTypeId&nbsp;=&nbsp;Floor.GetDefaultFloorType(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document,&nbsp;<span style=\"color:blue;\">false</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Get&nbsp;a&nbsp;level</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;You&nbsp;must&nbsp;provide&nbsp;a&nbsp;valid&nbsp;level&nbsp;(unlike&nbsp;the&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;obsolete&nbsp;NewFloor&nbsp;and&nbsp;NewSlab&nbsp;methods).</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;offset;\n&nbsp;&nbsp;&nbsp;&nbsp;ElementId&nbsp;levelId&nbsp;=&nbsp;Level.GetNearestLevelId(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document,&nbsp;elevation,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;offset&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Build&nbsp;a&nbsp;floor&nbsp;profile&nbsp;for&nbsp;the&nbsp;floor&nbsp;creation</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;first&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;0,&nbsp;0,&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;second&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;20,&nbsp;0,&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;third&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;20,&nbsp;15,&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;fourth&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;0,&nbsp;15,&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;CurveLoop&nbsp;profile&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;CurveLoop();\n&nbsp;&nbsp;&nbsp;&nbsp;profile.Append(&nbsp;Line.CreateBound(&nbsp;first,&nbsp;second&nbsp;)&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;profile.Append(&nbsp;Line.CreateBound(&nbsp;second,&nbsp;third&nbsp;)&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;profile.Append(&nbsp;Line.CreateBound(&nbsp;third,&nbsp;fourth&nbsp;)&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;profile.Append(&nbsp;Line.CreateBound(&nbsp;fourth,&nbsp;first&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;The&nbsp;elevation&nbsp;of&nbsp;the&nbsp;curve&nbsp;loops&nbsp;is&nbsp;not&nbsp;taken&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;into&nbsp;account&nbsp;(unlike&nbsp;the&nbsp;obsolete&nbsp;NewFloor&nbsp;and&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;NewSlab&nbsp;methods).</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;If&nbsp;the&nbsp;default&nbsp;elevation&nbsp;is&nbsp;not&nbsp;what&nbsp;you&nbsp;want,&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;you&nbsp;need&nbsp;to&nbsp;set&nbsp;it&nbsp;explicitly.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;floor&nbsp;=&nbsp;Floor.Create(&nbsp;document,&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;CurveLoop&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profile&nbsp;},&nbsp;floorTypeId,&nbsp;levelId&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;Parameter&nbsp;param&nbsp;=&nbsp;floor.get_Parameter(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BuiltInParameter.FLOOR_HEIGHTABOVELEVEL_PARAM&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;param.Set(&nbsp;offset&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;floor;\n&nbsp;&nbsp;}\n</pre>\n\nSorry for the late information, and I hope it still helps with your migration.\n\nIt definitely helps for me, since I still have exactly two remaining warnings when compiling The Building Coder samples:\n\n- Warning\tCS0618 `Document.NewFloor(CurveArray, bool)` is obsolete; this method is deprecated in Revit 2022 and may be removed in the future version of Revit. To create new instance of Floor, call Floor.Create() &ndash; in CmdEditFloor.cs line 119\n- Warning\tCS0618 `Document.NewSlab(CurveArray, Level, Line, double, bool)` is obsolete; this method is deprecated in Revit 2022 and may be removed in the future version of Revit. To create new instance of Floor, call Floor.Create() &ndash; in CmdCreateSlopedSlab.cs line 88\n\nI can make use of the sample snippet to fix these two now :-)\n\nMany thanks to Oleg Sheydvasser for providing this!\n\n<!-- \nOleg Sheydvasser\n\nHi Jeremy,\nWelcome back and thank you for posting the snippets.\nThank you for mentioning me in the article.\nThe last name however got misspelled as Oleg Sheidwasser.\nIt's almost as my brother, Jim Scheidwasser, spelling :)\n\nJeremy Tammik\n\noops! sorry about that! in the back of my mind, i remember thinking of checking the spelling. i almost always avoid manual typing to avoid typos and use copy and paste instead. especially for you, i made an exception. and am promptly rewarded with a typo. so, my careful and sometimes anal habits are reconfirmed, as so often before, once again...  thank you for noticing and pointing it out!\n\n-->"
  },
  {
    "original_filename": "1914_create_floor",
    "header_text": "Dynamo Studio EOL",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Dynamo Studio EOL\n\nDynamo Studio is nearing its end of life.\n\nThat does not affect the rest of the Dynamo project in any way, though, nor its many other incarnations in various shapes and forms.\n\nPlease refer to\nthe [Dynamo Studio Frequently Asked Questions](https://knowledge.autodesk.com/support/dynamo-studio/learn-explore/caas/simplecontent/content/dynamo-studio-faq.html) for\ndetailed information on the current state and future plans for Dynamo."
  },
  {
    "original_filename": "1914_create_floor",
    "header_text": "Solar Power Project",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Solar Power Project\n\nI started experimenting with solar panels and an off-grid system requiring a charger, battery and inverter to generate standard 230 V AC power. \n\nI installed four 100 W peak panels on a small rather steep south facing balcony roof.\nActually, it has a 33 degree twist towards the west, so the direction is SSW.\n\nThey did not provide much power before almost midday in summertime, so I later added four more facing east, or rather ESE.\n\nI ran into numerous challenges working with hardware rather than software, nicely described in the article\non [learning from the real world: a hardware hobby project](https://stackoverflow.blog/2021/07/12/the-difference-between-software-and-hardware-projects).\n\nOne such challenge was implementing a performance monitor for the charger, including the required serial connection cables, etc.\nI published a little piece of associated software in\nthe [jtracer GitHub repository](https://github.com/jeremytammik/jtracer)\n\nI was initially working with a 12 V battery and am now in the process of upgrading to 24 V.\n\nOnce that is up and running, I may start on something bigger, trying to provide enough electrical power for several more apartments.\n\nI hope I don't end up with something like this:\n\n<center>\n<img src=\"img/many_solar_panels.jpg\" alt=\"Solar panels\" title=\"Solar panels\" width=\"400\"/> <!-- 800 -->\n</center>"
  }
]