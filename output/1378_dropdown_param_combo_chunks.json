[
  {
    "original_filename": "1378_dropdown_param_combo",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!---\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n#dotnet #csharp\n#fsharp #python\n#grevit\n#responsivedesign #typepad\n#ah8 #augi #dotnet\n#stingray #adsklabs #rendering\n#3dweb #3dviewapi #html5 #threejs #webgl #3d #apis #mobile #vr #ecommerce\n#Markdown #Fusion360 #Fusion360Hackathon\n#javascript\n#RestSharp #restapi\n#mongoosejs #mongodb #nodejs\n#rtceur\n#geometry #3d\n#xaml\n\nRevit API, Jeremy Tammik, akn_include\n\nDrop-down Enumerated Parameter Values #revitapi #bim #aec #3dwebcoder #adsk #au2015 #apis\n\nI repeatedly hear from developers who wish to define a specific enumerated set of parameter values for their add-ins and limit the selection to these values in the element property palette user interface. Internally, Revit does implement a system to handle this, for instance by using negative element ids for element property drop-down list enumerations. This has also been a long-standing wish list item, and unfortunately still remains in that state, currently incorporated in the issue CF-3498 API wish: drop-down enumeration parameters for combo box...\n\n-->"
  },
  {
    "original_filename": "1378_dropdown_param_combo",
    "header_text": "Drop-down Enumerated Parameter Values",
    "local_header_href": "#drop-down-enumerated-parameter-values",
    "chunk_text": "### Drop-down Enumerated Parameter Values\n\nI repeatedly hear from developers who wish to define a specific enumerated set of parameter values for their add-ins and limit the selection to these values in the element property palette user interface.\n\nInternally, Revit does implement a system to handle this, for instance by\nusing [negative element ids for element property drop-down list enumerations](http://thebuildingcoder.typepad.com/blog/2014/04/element-id-export-unique-navisworks-and-other-ids.html#5).\n\nThis has also been a long-standing wish list item, and unfortunately still remains in that state, currently incorporated in the issue CF-3498 *API wish: drop-down enumeration parameters for combo box*.\n\n- [Drop-down Combo of Enumerated Parameter Values](#2)\n- [1. Workaround using Nested Families and Types](#3)\n- [2. Workaround using Integer Values and Tooltips](#4)\n- [3. Workaround using Family Instance in a Design Option](#5)\n\nI would not bore you with this, except that Marcelo Quevedo of [hsbcad](http://hsbcad.com) recently brought it up again and also kindly provided suggestions for two workarounds:"
  },
  {
    "original_filename": "1378_dropdown_param_combo",
    "header_text": "<a name=\"2\"></a>Drop-down Combo of Enumerated Parameter Values",
    "local_header_href": "#a-name2adrop-down-combo-of-enumerated-parameter-values",
    "chunk_text": "#### <a name=\"2\"></a>Drop-down Combo of Enumerated Parameter Values\n\nIn Marcelo's own words:\n\nWe need to create drop-down parameters for our families such as Enums in C#.\nFor instance, a set of enumerated values such as this:\n\nParameter 1: `Orientation` with following drop-down values:\n\n- Parallel to mortise bm\n- Perpendicular to mortise bm\n- Parallel to projected Y axis of tenon bm\n- Perpendicular to projected Y axis of tenon bm\n- Parallel to projected Z axis of tenon bm\n- Perpendicular to projected Z axis of tenon bm\n\nParameter 2: `Shape`:\n\n- Square\n- Round\n- Rounded\n\nWe found two workarounds, but they arenâ€™t perfect."
  },
  {
    "original_filename": "1378_dropdown_param_combo",
    "header_text": "<a name=\"3\"></a>1. Workaround using Nested Families and Types",
    "local_header_href": "#a-name3a1-workaround-using-nested-families-and-types",
    "chunk_text": "#### <a name=\"3\"></a>1. Workaround using Nested Families and Types\n\nFor the first workaround, we created nested Generic Model families for each drop-down (one nested family for orientation, and other for Shape). We created types for these families named according to the desired drop-down values. In addition, we added two 'Generic Model Family Type' parameters: one to link the Orientation nested family, and one for the Shape nested family. However, the issue is that the 'Generic Model Family Type' parameter links the Category and displays all nested Generic Model family types as available options.\n\nIt would be better if the family type parameter would link one single family instead of the entire category.\n\nHere is a screen snapshot of the result:\n\n<center>\n<img src=\"img/dropdown_param_enum_workaround_1.png\" alt=\"Drop-down parameter enum combo\" width=\"600\">\n</center>"
  },
  {
    "original_filename": "1378_dropdown_param_combo",
    "header_text": "<a name=\"4\"></a>2. Workaround using Integer Values and Tooltips",
    "local_header_href": "#a-name4a2-workaround-using-integer-values-and-tooltips",
    "chunk_text": "#### <a name=\"4\"></a>2. Workaround using Integer Values and Tooltips\n\nFor the second workaround, we created Integer parameters and defined a tooltip to explain what each integer value represents.\n\nFor example, for `Orientation`, we created an integer parameter called `Orientation` and specified the following tooltip:\n\n0. Parallel to mortise bm\n1. Perpendicular to mortise bm\n2. Parallel to projected Y axis of tenon bm\n3. Perpendicular to projected Y axis of tenon bm\n4. Parallel to projected Z axis of tenon bm\n5. Perpendicular to projected Z axis of tenon bm\n\nThe result looks like this:\n\n<center>\n<img src=\"img/dropdown_param_enum_workaround_2.png\" alt=\"Drop-down parameter enum combo\" width=\"600\">\n</center>\n\nI hope this helps.\n\nMany thanks to Marcelo for sharing these two creative workarounds!"
  },
  {
    "original_filename": "1378_dropdown_param_combo",
    "header_text": "<a name=\"5\"></a>3. Workaround using Family Instance in a Design Option",
    "local_header_href": "#a-name5a3-workaround-using-family-instance-in-a-design-option",
    "chunk_text": "#### <a name=\"5\"></a>3. Workaround using Family Instance in a Design Option\n\nProposed by Matt Taylor in his [comment below](http://thebuildingcoder.typepad.com/blog/2015/11/drop-down-enumerated-parameter-values.html#comment-2843954426):\n\nI've just come up with another way of doing this.\n\nIt's more of a model template solution than a family solution.\n\nPlace a family instance with each value in a design option, then just make sure that design option is omitted from all views and schedules.\n\nBecause all values for those parameters exist somewhere in the model, they still appear on the pull-down list.\n\nMany thanks to Matt for this nice idea!"
  }
]