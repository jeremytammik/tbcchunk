[
  {
    "original_filename": "1429_stable_references",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n- 11727316 [Convert local family instance coordinate of selected Edge to project coordinates]\n  http://forums.autodesk.com/t5/revit-api/convert-local-family-instance-coordinate-of-selected-edge-to/m-p/6282821\n\n- building a custom reference for a FamilyInstance\n  9 special references\n  The API doesn't expose the control plane references but there is a fun hack I developed to get the embedded control plane references of a family instance. If you create a dimension in the UI which references a named control reference of a family instance, you can then study the dimension's references using the API to obtain the information required to build your own stable reference string and have the API convert it into a valid reference for you which can then be used for creation of dimensions and alignment constraints. I'll go look through my code an come back soon with a few code snippets for you.\n  http://forums.autodesk.com/t5/revit-api/geometry-returns-no-reference-for-familyinstance/m-p/6025697\n\nReference Stable Representation Magic Voodoo #revitAPI #3dwebcoder @AutodeskRevit #adsk #aec #bim #python #dynamobim\n\nLet's end the week with a truly magnificent contribution and research result provided by Scott Wilson in the Revit API discussion forum.\nScott responded to Pat Hague's recent thread on converting local family instance coordinate of a selected edge to project coordinates, saying,\nYeah the Stable Reference Strings can be used to get at areas of the Geometry API that aren't fully exposed &ndash; I love playing around with them. Sometimes I stumble upon something cool such as this solution for a situation in which the geometry returns no reference for a family instance...\n\n-->"
  },
  {
    "original_filename": "1429_stable_references",
    "header_text": "Reference Stable Representation Magic Voodoo",
    "local_header_href": "#reference-stable-representation-magic-voodoo",
    "chunk_text": "### Reference Stable Representation Magic Voodoo\n\nLet's end the week with a truly magnificent contribution and research result provided by Scott Wilson in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api/bd-p/160).\n\nScott responded to Pat Hague's recent thread\non [converting local family instance coordinate of a selected edge to project coordinates](http://forums.autodesk.com/t5/revit-api/convert-local-family-instance-coordinate-of-selected-edge-to/m-p/6282821),\nsaying:\n\n> Yeah the Stable Reference Strings can be used to get at areas of the Geometry API that aren't fully exposed &ndash; I love playing around with them.\n> Sometimes I stumble upon something cool such as this solution for a situation in which\n> the [geometry returns no reference for a family instance](http://forums.autodesk.com/t5/revit-api/geometry-returns-no-reference-for-familyinstance/m-p/6025697).\n\nI asked Scott whether he could summarise the gist of that discussion to publish here for easier reference and better legibility, and he very kindly obliged:\n\n> No worries, glad to help.\n\n> I made a post you can use for your blog if you like: [stable reference strings for Jeremy](http://forums.autodesk.com/t5/revit-api/for-jeremy-stable-reference-strings/m-p/6284505).\n\n> Here's a summary of my investigations into stable reference strings created using `Reference.ConvertToStableRepresentation` and the Voodoo Magic that they can perform."
  },
  {
    "original_filename": "1429_stable_references",
    "header_text": "<a name=\"3\"></a>Analysis and Background Information",
    "local_header_href": "#a-name3aanalysis-and-background-information",
    "chunk_text": "#### <a name=\"3\"></a>Analysis and Background Information\n\nA reference stable representation string is a collection of UniqueIds combined with table indices, delimited by the colon `:` character.\n\nA reference string for a `PlanarFace` of a `FamilyInstance` element &ndash; accessed through its `GetSymbolGeometry` method &ndash; looks like this:\n\n<pre>\n  66a421da-90cb-4df2-8efe-c312e4f78aa0-0003d32b:0:INSTANCE:a2177cbb-03d8-4416-a4d8-8ada6fc0165a-0003ebf0:78:SURFACE\n</pre>\n\nThe string obtained from the reference of the same face accessed using `GetInstanceGeometry` looks like this:\n\n<pre>\n  a2177cbb-03d8-4416-a4d8-8ada6fc0165a-0003ebf0:78:SURFACE\n</pre>\n\nAs you can see, this is identical to the last 3 sections of the symbol geometry reference.\n\nThe SymbolGeometry reference looks like 2 references of 3 tokens each.\n\nThe structured data contained in the string can be used to reliably access geometry objects that are not completely exposed by the API.\n\nThis is done by building a custom string using parts of an existing valid string obtained from the API.\n\nThe fist step is to tokenise the string:\n\n<pre class=\"code\">\n&nbsp; <span class=\"blue\">string</span> refString = myReference\n&nbsp; &nbsp; .ConvertToStableRepresentation( dbDoc );\n&nbsp;\n&nbsp; <span class=\"blue\">string</span>[] refTokens = refString.Split(\n&nbsp; &nbsp; <span class=\"blue\">new</span> <span class=\"blue\">char</span>[] { <span class=\"maroon\">':'</span> } );\n</pre>\n\nThis will give you an array of string tokens.\n\nHere is my interpretation of each token's purpose &ndash; I could be wrong on some of them, as I've just inferred this information through experimentation, using symbol geometry string as an example:\n\n- token0: 66a421da-90cb-4df2-8efe-c312e4f78aa0-0003d32b - UniqueId of the FamilyInstance Element.\n- token1: 0 - Presumably an index into a collection within the FamilyInstance (I've not seen anything other than zero here so it could be that the collection always contains a single entry, or that other entries have some other special unknown use)\n- token2: INSTANCE - signals that the referenced geometry object belongs to A FamilyInstance Element.\n- token3: a2177cbb-03d8-4416-a4d8-8ada6fc0165a-0003ebf0 - UniqueId of the FamilySymbol Instance that describes the geometry of this FamilyInstance (multiple FamilyInstances that have identical Geometry will reference the same FamilySymbol Instance.\n- token4: 78 - the index of the referenced geometry object within the FamilySymbol Instance's geometry table. index positions 0 through 8 are reserved for the special reference planes that have been specified in the family editor (explained later).\n- token5: SURFACE - the type of geometry object referenced by this string.\n\nI think the best way to try to follow the hierarchy is to read the tokens in reverse order as follows:\n\nThe referenced geometry object of type: SURFACE is at index: 78 of the FamilySymbol Instance with UniqueId: a2177cbb-03d8-4416-a4d8-8ada6fc0165a-0003ebf0 as represented by the FamilyInstance with UniqueId: 66a421da-90cb-4df2-8efe-c312e4f78aa0-0003d32b.\n\nIt bothers me that references from geometry objects accessed through `GetSymbolGeometry` specify the FamilyInstance while those from `GetInstanceGeometry` do not, yet the `GetInstanceGeometry` objects will be correctly transformed into project coordinates according to the FamilyInstance, where the `GetSymbolGeometry` objects are left in family coordinate space. This seems a little backwards to me.\n\nAnother strange behaviour is that the ElementId property of the reference from an object returned by `GetInstanceGeometry` does not even match the FamilyInstance it came from &ndash; it actually refers to the FamilySymbol instance instead.\n\nNow for the Voodoo Magic that I promised:"
  },
  {
    "original_filename": "1429_stable_references",
    "header_text": "<a name=\"4\"></a>Voodoo Magic",
    "local_header_href": "#a-name4avoodoo-magic",
    "chunk_text": "#### <a name=\"4\"></a>Voodoo Magic\n\nIf you have a reference in SymbolGeometry format, as obtained from a Dimension or through the `Selection.PickObject` method, and you need to get the geometry object in its correct position according to the FamilyInstance, you can tokenise the reference string as demonstrated above and then rebuild it as an InstanceGeometry reference string by discarding the first 3 tokens and joining the remaining 3 using, ':' as the delimiter.\n\nYou then obtain the InstanceGeometry from the element linked to the original reference and loop through it until you find an object that has a stable reference string that exactly matches your custom made one.\n\n<pre class=\"code\">\n&nbsp; <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Edge</span> GetInstanceEdgeFromSymbolRef(\n&nbsp; &nbsp; <span class=\"teal\">Reference</span> symbolRef,\n&nbsp; &nbsp; <span class=\"teal\">Document</span> dbDoc )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"teal\">Edge</span> instEdge = <span class=\"blue\">null</span>;\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">Options</span> gOptions = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n&nbsp; &nbsp; gOptions.ComputeReferences = <span class=\"blue\">true</span>;\n&nbsp; &nbsp; gOptions.DetailLevel = <span class=\"teal\">ViewDetailLevel</span>.Undefined;\n&nbsp; &nbsp; gOptions.IncludeNonVisibleObjects = <span class=\"blue\">false</span>;\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">Element</span> elem = dbDoc.GetElement( symbolRef.ElementId );\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">string</span> stableRefSymbol = symbolRef\n&nbsp; &nbsp; &nbsp; .ConvertToStableRepresentation( dbDoc );\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">string</span>[] tokenList = stableRefSymbol.Split(\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">new</span> <span class=\"blue\">char</span>[] { <span class=\"maroon\">':'</span> } );\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">string</span> stableRefInst = tokenList[3] + <span class=\"maroon\">&quot;:&quot;</span>\n&nbsp; &nbsp; &nbsp; + tokenList[4] + <span class=\"maroon\">&quot;:&quot;</span> + tokenList[5];\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">GeometryElement</span> geomElem = elem.get_Geometry(\n&nbsp; &nbsp; &nbsp; gOptions );\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geomElemObj <span class=\"blue\">in</span> geomElem )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">GeometryInstance</span> geomInst = geomElemObj\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( geomInst != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">GeometryElement</span> gInstGeom = geomInst\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .GetInstanceGeometry();\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> gGeomObject\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">in</span> gInstGeom )\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">Solid</span> solid = gGeomObject <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> solid.Edges )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">string</span> stableRef = edge.Reference\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ConvertToStableRepresentation(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dbDoc );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( stableRef == stableRefInst )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; instEdge = edge;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">break</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( instEdge != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"green\">// already found, exit early</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">break</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( instEdge != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"green\">// already found, exit early</span>\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">break</span>;\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"blue\">return</span> instEdge;\n&nbsp; }\n</pre>\n\nAs I mentioned earlier, the first 9 positions are occupied by the special references that have been allocated in the family editor, with the following magic values:\n\n- 0 = Left\n- 1 = Center Left/Right\n- 2 = Right\n- 3 = Front\n- 4 = Centre Front/Back\n- 5 = Back\n- 6 = Bottom\n- 7 = Center Elevation\n- 8 = Top\n\nAs you can see, this sequence matches the order they appear in the family editor reference type drop-down list.\n\nThese references are handy for creating Dimensions, but the API does not expose them fully. They exist in the element geometry but have the generic type of GeometryObject with no indication of their special purpose other than the index found in the reference string. To get one of these references, all you need to do is get any geometry object from the FamilyInstance using `GetSymbolGeometry` and use it's reference string as a template to build a custom reference that points to the special reference.\n\nYou just need to tokenise the reference string and replace `token4` with the index value from the list above for the reference you want.\n\n`token5` should also be Replaced with `SURFACE`, but I've found that you can safely leave out the last token and the reference string will still be valid.\n\nTo simplify things, I created an enumeration for the indices and a static method that simplifies the process:\n\n<pre class=\"code\">\n&nbsp; <span class=\"blue\">public</span> <span class=\"blue\">enum</span> <span class=\"teal\">SpecialReferenceType</span>\n&nbsp; {\n&nbsp; &nbsp; Left = 0,\n&nbsp; &nbsp; CenterLR = 1,\n&nbsp; &nbsp; Right = 2,\n&nbsp; &nbsp; Front = 3,\n&nbsp; &nbsp; CenterFB = 4,\n&nbsp; &nbsp; Back = 5,\n&nbsp; &nbsp; Bottom = 6,\n&nbsp; &nbsp; CenterElevation = 7,\n&nbsp; &nbsp; Top = 8\n&nbsp; }\n&nbsp;\n&nbsp; <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Reference</span> GetSpecialFamilyReference(\n&nbsp; &nbsp; <span class=\"teal\">FamilyInstance</span> inst,\n&nbsp; &nbsp; <span class=\"teal\">SpecialReferenceType</span> refType )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"teal\">Reference</span> indexRef = <span class=\"blue\">null</span>;\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">int</span> idx = (<span class=\"blue\">int</span>) refType;\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">if</span>( inst != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">Document</span> dbDoc = inst.Document;\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">Options</span> geomOptions = dbDoc.Application.Create\n&nbsp; &nbsp; &nbsp; &nbsp; .NewGeometryOptions();\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( geomOptions != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; geomOptions.ComputeReferences = <span class=\"blue\">true</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; geomOptions.DetailLevel = <span class=\"teal\">ViewDetailLevel</span>.Undefined;\n&nbsp; &nbsp; &nbsp; &nbsp; geomOptions.IncludeNonVisibleObjects = <span class=\"blue\">true</span>;\n&nbsp; &nbsp; &nbsp; }\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">GeometryElement</span> gElement = inst.get_Geometry(\n&nbsp; &nbsp; &nbsp; &nbsp; geomOptions );\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">GeometryInstance</span> gInst = gElement.First()\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">String</span> sampleStableRef = <span class=\"blue\">null</span>;\n&nbsp;\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( gInst != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">GeometryElement</span> gSymbol = gInst\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .GetSymbolGeometry();\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( gSymbol != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geomObj <span class=\"blue\">in</span> gSymbol )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( geomObj <span class=\"blue\">is</span> <span class=\"teal\">Solid</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">Solid</span> solid = geomObj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( solid.Faces.Size &gt; 0 )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">Face</span> face = solid.Faces.get_Item( 0 );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sampleStableRef = face.Reference\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ConvertToStableRepresentation(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dbDoc );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">break</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">else</span> <span class=\"blue\">if</span>( geomObj <span class=\"blue\">is</span> <span class=\"teal\">Curve</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">Curve</span> curve = geomObj <span class=\"blue\">as</span> <span class=\"teal\">Curve</span>;\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sampleStableRef = curve.Reference\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ConvertToStableRepresentation( dbDoc );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">break</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">else</span> <span class=\"blue\">if</span>( geomObj <span class=\"blue\">is</span> <span class=\"teal\">Point</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">Point</span> point = geomObj <span class=\"blue\">as</span> <span class=\"teal\">Point</span>;\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; sampleStableRef = point.Reference\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ConvertToStableRepresentation( dbDoc );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">break</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( sampleStableRef != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">String</span>[] refTokens = sampleStableRef.Split(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">new</span> <span class=\"blue\">char</span>[] { <span class=\"maroon\">':'</span> } );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">String</span> customStableRef = refTokens[0] + <span class=\"maroon\">&quot;:&quot;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + refTokens[1] + <span class=\"maroon\">&quot;:&quot;</span> + refTokens[2] + <span class=\"maroon\">&quot;:&quot;</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + refTokens[3] + <span class=\"maroon\">&quot;:&quot;</span> + idx.ToString();\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; indexRef = <span class=\"teal\">Reference</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ParseFromStableRepresentation(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dbDoc, customStableRef );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">GeometryObject</span> geoObj = inst\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .GetGeometryObjectFromReference(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; indexRef );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( geoObj != <span class=\"blue\">null</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">String</span> finalToken = <span class=\"maroon\">&quot;&quot;</span>;\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( geoObj <span class=\"blue\">is</span> <span class=\"teal\">Edge</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; finalToken = <span class=\"maroon\">&quot;:LINEAR&quot;</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( geoObj <span class=\"blue\">is</span> <span class=\"teal\">Face</span> )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; finalToken = <span class=\"maroon\">&quot;:SURFACE&quot;</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; customStableRef += finalToken;\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; indexRef = <span class=\"teal\">Reference</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; .ParseFromStableRepresentation(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; dbDoc, customStableRef );\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">else</span>\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; indexRef = <span class=\"blue\">null</span>;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">else</span>\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">Exception</span>( <span class=\"maroon\">&quot;No Symbol Geometry found...&quot;</span> );\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"blue\">return</span> indexRef;\n&nbsp; }\n</pre>\n\nThere's a little bit of unnecessary code in that method, as it was quickly cobbled together from the code I was using for research, sorry.\n\nThat's all I have for now.\n\nHopefully someone finds it useful.\n\n**Response:** Wow!\n\nI am sure we will!\n\nA number of people commented on Scott's original post and were extremely impressed, overawed even, by this analysis and truly magical voodoo.\n\nSo am I!\n\nMany thanks to Scott for all his research, creating, sharing, documenting this, many other solutions, all the support and profound insights he provides so selflessly in the discussion forum!\n\nP.S. I added Scott's sample code\nto [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\n[release 2016.0.127.3](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2016.0.127.3) in the\nmodule [CmdDimensionInstanceOrigin.cs](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdDimensionInstanceOrigin.cs#L27-L251)."
  },
  {
    "original_filename": "1429_stable_references",
    "header_text": "<a name=\"5\"></a>Importance of Setting the Detail Level",
    "local_header_href": "#a-name5aimportance-of-setting-the-detail-level",
    "chunk_text": "#### <a name=\"5\"></a>Importance of Setting the Detail Level\n\nAn addendum by Pat Hague to Scott's original post:\n\nI would like to stress the importance of setting\n\n<pre class=\"code\">\n  gOptions.DetailLevel = <span class=\"teal\">ViewDetailLevel</span>.Undefined;\n</pre>\n\nI just spent a solid day trying to figure out why your code would work on some families, and not others.\n\nFinally, I was able to determine that the family itself was controlling visibility of faces based on the view detail level.\n\nStrangely enough, when I was blindly troubleshooting the code I tried setting the following to true:\n\n<pre class=\"code\">\n  gOptions.IncludeNonVisibleObjects = <span class=\"blue\">true</span>; // false\n</pre>\n\nThis still did not work.\nMaybe I had something else wrong with my code at the time.\nI don't know.\n\nWhat I've been able to get to work every time (so far) is the following:\n\n<pre class=\"code\">\n  gOptions.DetailLevel = doc.ActiveView.DetailLevel;\n</pre>\n\nTo me, this ensures that I can't select a face that isn't visible through a PickObject.\n\nThanks again for all of your voodoo!\n\n**Response by Scott:** I'm a bit confused pat; are you saying that using `Undefined` is good or bad?\n\n**Answer:** Lets do some testing... for instance, this structural column, I think from a stock Autodesk family, shows straight edges in `Medium` or `Coarse` views:\n\n<center>\n<img src=\"img/stable_reference_mc.png\" alt=\"Medium and Coarse\" width=\"400\">\n</center>\n\nIt shows fillet edges on `Fine`:\n\n<center>\n<img src=\"img/stable_reference_fine.png\" alt=\"Fine\" width=\"400\">\n</center>\n\nIf I try to get the instance face or edge of the above-mentioned structural column from the symbol reference (using your code), I get a NullReferenceException error if DetailLevel is set to Undefined:\n\n<pre class=\"code\">\n  gOptions.DetailLevel = <span class=\"teal\">ViewDetailLevel</span>.Undefined;\n</pre>\n\nPresumably because the PickObject is allowing me to select an edge or face that is non visible &ndash; I'm not sure how to confirm this.\n\nThe same is also true if I purposely mismatch my View Detail Level and my Options.Detail Level. For example:\n\n- Set View Detail Level to `Fine`\n- Set Options.DetailLevel to `Medium`\n\nIf I try that same code on a family instance where visibility of edges or faces is not controlled by the view's detail level, then everything works out fine.\n\nLooking up this property in the API help file I see the following:\n\n> Type: Autodesk.Revit.DB.ViewDetailLevel: Value of the detail level. ViewDetailLevel.Undefined means no override is set.\n\nMy guess is that there is some sort of disconnect between what PickObject is allowing you to select and the Options class. I should also note that I tested this again to confirm that setting `IncludeNonVisibleObjects` to `true` or `false` made no difference in my test case.\n\nTo summarize, if I always make sure my `Options.DetailLevel` is set to that of my view detail level, then I shouldn't run into any problems (I hope).\n\n**Response:** The Undefined setting was an attempt to make the code more generalised, It worked fine on a few cases I tested it with before posting it, but i might have just got lucky (or unlucky...). I thought that having `ViewDetailLevel` set to `Undefined` would provide the full set of geometry from which to find the matching face no-matter what the setting of the view where the selection was made. Maybe that's not how `ViewDetailLevel.Undefined` works. If it is as you say and it signifies to only return geometry that does not have the detail visibility override set, then to fix it, I would loop through on each `ViewDetailLevel` setting until the geometry was found. Thanks for testing it out and giving a heads-up. Btw, which documentation mentions \"ViewDetailLevel.Undefined means no override is set\"? I just checked and the docs say \"View does not use Detail Level\" which I think means something completly different to both mine and your interpretations; odd.\n\nOut of interest have you changed the code to include the view in the geometry options?\n\nIf so, does removing it help?\n\n**Answer:** Scott, I may have been looking in the wrong location on the api help documents.\n\nI found that snippet of text under OverrideGraphicSettings.SetDetailLevel Method.\n\nI am currently using the active view's detail level in my geometry options. For my case its the only reliable way I can ensure that the user doesn't get an exception error.\n\n<pre class=\"code\">\n  gOptions.DetailLevel = doc.ActiveView.DetailLevel;\n</pre>"
  },
  {
    "original_filename": "1429_stable_references",
    "header_text": "<a name=\"6\"></a>Reformat Stable Representation String for Dimensioning",
    "local_header_href": "#a-name6areformat-stable-representation-string-for-dimensioning",
    "chunk_text": "#### <a name=\"6\"></a>Reformat Stable Representation String for Dimensioning\n\nJoshua Lumley added an important note on using the stable references to create dimensioning in\nhis [comment below](http://thebuildingcoder.typepad.com/blog/2016/04/stable-reference-string-magic-voodoo.html#comment-4068022721):\n\nWhen creating dimensions based on objects from linked files, you may see an error message saying *Invalid number of references*.\n\nTo resolve that, all you do is rearrange the string a little to match the following format:\n\n<pre>\n  fb332d47-8286-4829-bd40-46c26de8ebac-000258d5:0:RVTLINK:2796184:1:SURFACE/5\"\n</pre>\n\nYou do NOT want this:\n\n<pre>\n  fb332d47-8286-4829-bd40-46c26de8ebac-000258d5:RVTLINK/fb332d47-8286-4829-bd40-46c26de8ebac-000258d4:2796184:1:SURFACE/5\"\n</pre>\n\nMany thanks to Joshua for pointing it out!"
  },
  {
    "original_filename": "1429_stable_references",
    "header_text": "<a name=\"7\"></a>Handle Element Category Override",
    "local_header_href": "#a-name7ahandle-element-category-override",
    "chunk_text": "#### <a name=\"7\"></a>Handle Element Category Override\n\nMustafa Khalil invested some research in this and added\nanother [comment below](https://thebuildingcoder.typepad.com/blog/2016/04/stable-reference-string-magic-voodoo.html#comment-4710182554),\nexplaining:\n\nI played with this for a while and was impressed with this detailed study.\nFor some reason, however, it sometimes did not work for me.\n\nWhile cracking on every angle to find out why, I realized I should consider how the element is actually displayed in the current view.\nMeaning, I should not only rely on the `ViewDetail` of the current view, but I should also check if there is any ViewDetail category overridden as well.\nIf there is no override to an element category, it will report `ViewDetailLevel.Undefined`.\nThen, it is trustworthy to select the ViewDetail of the current view.\n\nSo, I considered the following resolution:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;view&nbsp;=&nbsp;doc.ActiveView;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;overriddenCatView&nbsp;=&nbsp;view.GetCategoryOverrides(\n&nbsp;&nbsp;&nbsp;&nbsp;elem.Category.Id&nbsp;);\n \n&nbsp;&nbsp;op&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;DetailLevel&nbsp;=&nbsp;overriddenCatView.DetailLevel&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;==&nbsp;<span style=\"color:#2b91af;\">ViewDetailLevel</span>.Undefined\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;view.DetailLevel\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;overriddenCatView.DetailLevel,\n&nbsp;&nbsp;&nbsp;&nbsp;IncludeNonVisibleObjects&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>\n&nbsp;&nbsp;};\n</pre>\n\nInstead of this:\n \n<pre class=\"code\">\n&nbsp;&nbsp;op&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;DetailLevel&nbsp;=&nbsp;m_doc.ActiveView.DetailLevel,\n&nbsp;&nbsp;&nbsp;&nbsp;IncludeNonVisibleObjects&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>\n&nbsp;&nbsp;};\n</pre>\n\nMany thanks to Mustafa for his research and explanation!"
  }
]