[
  {
    "original_filename": "2013_pernickety",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- pernickety blogging\n\ntwitter:\n\nImportant, less important and absolutely pernickety recommendations on perfecting API-related blog posts for the @AutodeskAPS @AutodeskRevit #RevitAPI #BIM @DynamoBIM @AutodeskAPS https://autode.sk/pernickety\n\nSome important, some less important and some absolutely pernickety recommendations on perfecting API-related blog posts...\n\n&ndash; ...\n\nlinkedin:\n\nImportant, less important and absolutely pernickety recommendations on perfecting API-related blog posts for the #RevitAPI\n\nhttps://autode.sk/pernickety\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2013_pernickety",
    "header_text": "Pernickety Blogging",
    "local_header_href": "#pernickety-blogging",
    "chunk_text": "### Pernickety Blogging\n\nI am still in hospital, convalescent with 9 fractured ribs and the right broken hip screwed back together again front and back.\nThe main screw is 7.3 mm x 180 mm.\nThey would have preferred to use 190 mm length but didn't have any available.\nI have big bones.\n\nMy friend Madlee has a nice saying in her smartphone email footer:\n\n- Alles isch gued; wenn's no nid gued isch denn isch es au no nid am End aacho!\n<span style=\"text-align: right; font-style: italic\">&ndash;  [Alemannic](https://en.wikipedia.org/wiki/Alemannic_German) saying\n&ndash; All is well; if it's not well, it's not over yet</span>\n\nThat applies to my broken hip, basically to all of life, and also to every blog post.\n\nMy colleague George published his first Revit-API-related blog post last week,\n[How to use ToElements Method correctly](https://adndevblog.typepad.com/aec/2023/10/how-to-use-toelements-method-correctly.html).\n\nCongratulations on that, George, and many thanks for your work and contributions!\nIt is perfect in every way.\nAnd yet, it also provides an opportunity for me to share one slightly crazy aspect of my personality: exaggerated perfectionism.\n\nBefore getting to the exaggerated perfectionism, let me point out\nthe more important [blogging tips and tricks](https://thebuildingcoder.typepad.com/blog/2014/07/wishlist-blogging-smartgeometry-dynamo-and-formit.html) that\nI listed for earlier colleagues getting started with this.\n\nI checked the post in advance before publication and gave it my OK.\nHowever, to me, it makes a total difference checking it in advance or actually seeing it in print, in its final published version.\nThe effect of that difference on my perception is tremendous and astounding.\nI use this effect myself writing my own blog posts, correcting, previewing, checking, fixing, twiddling and often making a huge number of minute corrections and improvements in the final stages of publication, just before hitting the ultimate publish button.\n\nIn this case, I noticed a typo to correct.\nWhen I was about to tell George, I noticed another little detail to improve, and another.\nI was astounded by the number and irrelevance of the improvement possibilities that struck my eye.\n\nExcept for the two typos, all my suggestions can be ignored.\nAnd yet, re-reading them, I decided to share them both with George and Carol, who is also just starting to blog, and with you, dear reader, to ponder; please also feel perfectly free to ignore, refute, reject and ridicule:\n\nThe post currently looks like this:\n\n<center>\n<img src=\"img/pernickety_blogging.png\" alt=\"Pernickety blogging\" title=\"Pernickety blogging\" width=\"600\"/> <!-- Pixel Height: 1,702 Pixel Width: 1,572 -->\n</center>\n\n<!--\n\nStill, I made a note of one or two things to improve, e.g., the typo in one of the repetitions of the methos name.\nOnce I'd started, I fiound it hard to stop. One thing added to another, and I ended up with an absolutely shocking list of possible enhancement.\nSince I want to praise George and not criticise in any way whatsoever, I pondered my options and ended up deciding that I am crazy and willing to share the fact including this list of suggestions for pernickety blogging:\n-->\n\nHere are my pernickety suggestions for enhancement:\n\n- Title case in title, Capital U and C: How to Use ToElements Method Correctly\n- Plural 'couple of questions': There *have* been a couple of questions\n- Missing 'the'\n- `ToElements` is code, so should be noted as such typographically, e.g., using a monospace font such as Courier\n- In HTML, code is normally tagged using `pre` or `code`;\n  in [Markdown](https://en.wikipedia.org/wiki/Markdown), you can use a backtick, i.e., <code>&grave;ToElements&grave;</code>\n- The word 'method' is lowercase: usage of `ToElements` Method\n- The word 'class' is lowercase: `FilteredElementCollector` class\n- Typo, missing 'n': ToElemets\n- Typo, 'examples' is plural: examples that demonstrate\n- Code indentation: leading spaces inside the loops\n- Code colourisation: C# syntax and keywords in different colours\n- Avoid long lines in sample code; add line breaks to improve readability\n- Readable link, not just the naked raw URL\n\nMy corrected version ends up looking like this:\n\n<hr/>"
  },
  {
    "original_filename": "2013_pernickety",
    "header_text": "How to Use ToElements Method Correctly",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> How to Use ToElements Method Correctly\n\nThere have been a couple of questions regarding the usage of the `ToElements` method while filtering elements using the `FilteredElementCollector` class.\nThe `ToElements` method in the `FilteredElementCollector` class returns the complete set of elements that meet the specified filter criteria as a generic `IList`.\n\nHowever, it's also worth noting that some members of the Revit API community tend to use the ToElemets method after using the FilteredElementCollector which in turn increases memory usage and slows down the performance of the same.\n\nOne reason for using ToElements is to obtain the element count. However, that can also be achieved by calling GetElementCount.\n\nAnother more valid reason is to access the elements in the list by index, e.g., you have 1000 elements in the list and you want to read their data in a specific order, e.g., #999, #1, #998, #2 or whatever. Then, you need the index provided by the list, and cannot just iterate over them on the predefined order provided by the enumerator.\n\nHere are examples that demonstrate the usage of the two:\n\nExample 1, using FilteredElementCollector alone to iterate over all Wall elements:\n\n<pre class=\"prettyprint\">\n  IEnumerable walls\n    = new FilteredElementCollector(doc)\n      .OfClass(typeof(Wall));\n\n  foreach (Element item in walls)\n  {\n    ElementId id = item.Id;\n  }\n</pre>\n\nExample 2, using both FilteredElementCollector and ToElements to iterate over all Wall elements:\n\n<pre class=\"prettyprint\">\n  IList wallList\n    = new FilteredElementCollector(doc)\n      .OfClass(typeof(Wall))\n        .ToElements();\n\n  foreach (Element item in wallList)\n  {\n    ElementId id = item.Id;\n  }\n</pre>\n\nMore details and links to further related discussions are provided in the analysis of\nthe [performance](https://thebuildingcoder.typepad.com/blog/2016/04/how-to-distinguish-redundant-rooms.html#2)\nin [how to distinguish redundant rooms](https://thebuildingcoder.typepad.com/blog/2016/04/how-to-distinguish-redundant-rooms.html).\n\n<hr/>\n\nHere is a link to the markdown source code for this blog post,\n[2013_pernickety.md](https://github.com/jeremytammik/tbc/blob/gh-pages/a/2013_pernickety.md),\nwhere you can see the Markdown text I edited to produce this.\n\nI have used a variety\nof [tools for C&#35;, Python and VB code colourisation](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.36) in\nthe past.\n\nIn this post, I just employed the [Google JavaScript code prettifier `code-prettify`](https://github.com/googlearchive/code-prettify) instead.\n\nHowever, this tool is no longer being maintained, so it is actually time to switch to yet another solution...\n\nAnother reason to replace it would be that it requires me to manually replace `<` and `>` signs with their HTML escape characters `&lt;` and `&gt;`.\n\nSo, to wrap up:\n\nPlease excuse me for being pernickety, George and Carol.\nIt seems to be my nature, so best accept it and let it be...\nDoes this extra work have any advantages?\nIs it worth the effort?\nUp to each and every person to decide for herself, I would say...\n\n[Jonathon Broughton adds](https://www.linkedin.com/feed/update/urn:li:activity:7124104311315279872?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7124104311315279872%2C7124255520466554880%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287124255520466554880%2Curn%3Ali%3Aactivity%3A7124104311315279872%29):\n\nThe second paragraph of your corrected version contains a typo.\n`ToElemets` should be `ToElements`.\n\nIt takes a persnickety practitioner to know one ðŸ˜Ž\n\n*Response:* Great.\nI wonder should I leave it for other practitioners to pick up as well?\nI think it would be appreciated...\nI'll add your correction to the post and out myself (yet again) as a pernickety failure."
  }
]