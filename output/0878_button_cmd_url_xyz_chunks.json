[
  {
    "original_filename": "0878_button_cmd_url_xyz",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0878_button_cmd_url_xyz",
    "header_text": "URL and Other Buttons, XYZ Points and Vectors",
    "local_header_href": "#url-and-other-buttons-xyz-points-and-vectors",
    "chunk_text": "<h3>URL and Other Buttons, XYZ Points and Vectors</h3><p>Let me summarise a very few of the topics I have been chatting with people about in the past few days:\n\n<ul>\n<li><a href=\"#2\">Ribbon button identification</a></li>\n<li><a href=\"#3\">Opening a URL from a ribbon button</a></li>\n<li><a href=\"#4\">XYZ comparison and point and vector behaviour</a></li>\n<li><a href=\"#5\">Autodesk API overview</a></li>\n<li><a href=\"#6\">The Green Building Studio GBS REST API</a></li>\n</ul>\n<p>Actually, to tell the truth, it is just one day, so far, this week.\nWow, my days are too full.\nI am getting nothing else done!</p>\n<a name=\"2\"></a>\n<h4>Ribbon Button Identification</h4>\n<p>Here is a simple question that came up a few times in the past:</p>\n<p><strong>Question:</strong> I have implemented a ribbon push button.\nNow I would like to find out which button was pushed in the event handler, i.e. external command, so that I can attach the same external command to handle multiple different buttons.\nHow can this be achieved, please?\n\n<p>I would like to identify the button pushed and access its data in the external command Execute method.\n\n\n<p><strong>Answer:</strong> The official Revit API user interface design expects you to implement a separate command class for each push button.\n\n<p>If you do so, then you can identify the push button clicked by the user by the command class whose Execute method was triggered.\n\n<p>If you choose to circumvent this official approach somehow, e.g. by attaching the same external command implementation to several different push buttons, than you will have to identify them by some other means.\n\n<p>When you define a push button, you also specify its Name via the RibbonItemData.Name property. This name is unique across the entire ribbon, or at least within the panel containing the button, so you could use this to identify the button.\n\n<p>Unfortunately, the Revit API does not provide any support for finding out which push button was used to trigger the external command.\n\n<p>While this functionality is not provided by the Revit API, you may be able to make use of the generic .NET Framework libraries to find out.\n\n<p>For instance, you can\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/subscribing-to-ui-automation-events.html\">\nsubscribe to certain events</a> to\n\nreceive a notification whenever a ribbon button is pressed by making use of the .NET\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/automation\">\nUI Automation</a> library.\n\n<p>A concrete example of subscribing to a UI Automation event telling you which button was clicked is given by Rodolf Honke to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/pimp-my-autocad-or-revit-ribbon.html\">\npimp my ribbon</a>,\n\nwhere he shows how to implement an event listener for both Revit and AutoCAD ribbon systems:</p>\n<pre class=\"code\">\nComponentManager.UIElementActivated\n  += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;Autodesk.Windows\n    .<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n      ComponentManager_UIElementActivated );\n \n<span class=\"blue\">void</span> ComponentManager_UIElementActivated(\n  <span class=\"blue\">object</span> sender,\n  Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n{\n  <span class=\"green\">// e.UiElement.PersistId says which item has been pressed</span>\n}\n</pre>\n<p>You will need to test whether this is of any use to you. This event listener may be pretty inefficient and slow.\n\n<p>The use of these APIs is unsupported and at your own risk.\nIf you wish to use the unsupported UI Automation option, you will have to find out for yourself how to do so using the ample information available on the web and elsewhere.\n\n<p>Probably the easiest way to go is indeed tom implement a separate command handler for each button.\nIf you have many commands requiring similar functionality, e.g. an identical initialisation procedure, you can either derive them all from one common base class, or wrap the common functionality in a method that you can call from each separate external command Execute method.</p>\n<a name=\"3\"></a>\n<h4>Opening a URL from a Ribbon Button</h4>\n<p>Another, simpler, question on hooking up ribbon buttons was also happily and rapidly resolved:</p>\n<p><strong>Question:</strong> I am attempting to create a URL link like this:</p>\n<center>\n<img alt=\"URL ribbon button\" src=\"img/url_button_1.png\"/>\n</center>\n<p>How can I enable the user to click on the button and get the link to open in a web browser?\nI know how to create the ribbon panel and push button, but not how to connect to the URL in a web browser.\n\n<p><strong>Answer:</strong> Two options:\n\n<ol>\n<li>Official, easy, supported: implement an external command and launch the browser from that.</li>\n<li>Unofficial, harder, unsupported: use something else, e.g. the .NET framework UI Automation library discussed above.</li>\n</ol>\n<p><strong>Response:</strong> Option #1 worked and it was very easy indeed.\nAll it required was adding just one line of code in the external command, System.Diagnostics.Process.Start, and then simply implementing it in the external application file.\n\n<p>This enables us to populate a custom ribbon panel that includes URLs linking to PDFs and webpages containing office Revit standards.\nThis provides our staff a quick and easy way to access our standards within the Revit environment.\n\n<p>External command:</p>\n<center>\n<img alt=\"External command opening a URL\" src=\"img/url_button_2.png\"/>\n</center>\n<p>External application:</p>\n<center>\n<img alt=\"External application setting up ribbon button\" src=\"img/url_button_3.png\"/>\n</center>\n<p>Revit ribbon:</p>\n<center>\n<img alt=\"URL ribbon button\" src=\"img/url_button_4.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>XYZ Comparison and Point and Vector Behaviour</h4>\n<p>A completely different topic deals with the Revit API XYZ class, its dual use to represent points and vectors, and how to compare them, raised by Graham Cook in the Revit API discussion forum in the thread on a\n\n<a href=\"http://forums.autodesk.com/t5/Autodesk-Revit-API/XYZ-IsAlmostEqualTo-problem/td-p/3701684\">\nXYZ.IsAlmostEqualTo problem</a>:</p>\n<p><strong>Question:</strong> Maybe I'm misinterpreting the IsAlmostEqualTo method.\nI want to determine whether two points are within 4 inches of each other, i.e. 0.3333 feet.\nI thought the following code would achieve that:</p>\n<pre>\n  XYZ a = new XYZ(41.7, -76, 0);\n  XYZ b = new XYZ(4.7, -76, 0);\n  bool almostEqual = a.IsAlmostEqualTo(b, 0.333);\n</pre>\n<p>But even though in this example the two points are 37 feet apart, IsAlmostEqualTo returns true.\nAm I misunderstanding the tolerance part of the method?</p>\n<p><strong>Answer:</strong> The behaviour you observe is correct and intended and has a simple explanation:\n\n<p>IsAlmostEqualTo is implemented for vector comparison, not point comparison, and is mostly designed around small tolerances.\nThe default for IsAlmostEqualTo with no tolerance input argument given is 1e-09.\nAt small tolerances, points and vectors are more interchangeable, so I would use the default IsAlmostEqualTo to find \"equivalent\" points too.\n\n<p>Because this is a directional comparison, not a distance one, 0.333 for the epsilon means to check if the two vectors are within a significant angular range of each other, which the example input points actually pass.\nEven if the points are treated as vectors and normalized, they will still pass the comparison because of the wide epsilon permitted.\n\n<p>If you want to compare points with a non-tiny epsilon using the allowed distance between them, use XYZ.DistanceTo method instead.\n\n<p>The Util.cs module of The Building Coder samples provides example implementations of point comparison predicate methods.\nHere is\n\n<span class=\"asset asset-generic at-xid-6a00e553e168978833017c326955af970b\">\n<a href=\"http://thebuildingcoder.typepad.com/files/bc_13_99_4.zip\">version 2013.0.99.4</a></span> from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/slab-boundary-revisited.html\">\nslab boundary command update</a>.\n\n\n\n<a name=\"5\"></a>\n<h4>Autodesk API Overview</h4>\n<p>Autodesk provides a large number of programming platforms and APIs.\nAn overview is given by the\n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=5781281\">\nPlatform Technologies</a> overview on the Autodesk Developer Network.\n\nJust to see and be astounded by their sheer number, here is a list of links to the associated developer pages:\n\n<ul>\n<li><a href=\"http://www.autodesk.com/develop3dsmax\">3DS Max</a></li>\n<li><a href=\"http://www.autodesk.com/developadt\">AutoCAD Architecture</a></li>\n<li><a href=\"http://www.autodesk.com/developapps\">Autodesk Exchange Apps Developer Center</a></li>\n<li><a href=\"http://www.autodesk.com/developautocad\">AutoCAD</a></li>\n<li><a href=\"http://www.autodesk.com/developcivil\">AutoCAD Civil 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developcloud\">Cloud &amp; Mobile</a></li>\n<li><a href=\"http://www.autodesk.com/developdwf\">DWF</a></li>\n<li><a href=\"http://www.autodesk.com/developfbx\">FBX</a></li>\n<li><a href=\"http://www.autodesk.com/developinventor\">Inventor</a></li>\n<li><a href=\"http://www.autodesk.com/developmap\">AutoCAD Map 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developmapguide\">Autodesk Infrastructure Map Server AIMS</a></li>\n<li><a href=\"http://www.autodesk.com/developmaya\">Maya</a></li>\n<li><a href=\"http://www.autodesk.com/developmotionbuilder\">MotionBuilder</a></li>\n<li><a href=\"http://www.autodesk.com/developnavisworks\">Navisworks</a></li>\n<li><a href=\"http://www.autodesk.com/developrevit\">Revit</a></li>\n<li><a href=\"http://www.autodesk.com/developvault\">Vault</a></li>\n<li><a href=\"http://www.autodesk.com/developwiretap\">Wiretap</a></li>\n<li><a href=\"http://www.autodesk.com/objectarx\">ObjectARX</a></li>\n<li><a href=\"http://www.autodesk.com/oem\">AutoCAD OEM</a></li>\n<li><a href=\"http://www.autodesk.com/realdwg\">RealDWG</a></li>\n</ul>\n<a name=\"6\"></a>\n<h4>The Green Building Studio GBS REST API</h4>\n<p>I recently played around with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">\nBIM 360 Glue REST API</a>\n\nand showed how to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">\nuse Python to access it interactively</a>.\n\nI also recently mentioned the new\n\n<a href=\"http://autodesk.typepad.com/bpa\">\nbuilding performance analysis blog</a> which\n\ndiscusses topics such as the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html#0\">\nProject Falcon</a> computational\n\nfluid dynamics Revit add-in and GBS, the Autodesk Green Building Studio cloud-based energy analysis web service.\n\n<p>Emile Kfouri now pointed out this discussion of the\n\n<a href=\"http://autodesk.typepad.com/bpa/2013/01/green-building-studio-api-part-i.html\">\nGBS REST API</a> that\n\nwill certainly enable you (yes, you!) to achieve very cool things.\nI am looking forward to hearing about your ideas!\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0878_button_cmd_url_xyz",
    "header_text": "Ribbon Button Identification",
    "local_header_href": "#ribbon-button-identification",
    "chunk_text": "<h4>Ribbon Button Identification</h4><p>Here is a simple question that came up a few times in the past:</p><p><strong>Question:</strong> I have implemented a ribbon push button.\nNow I would like to find out which button was pushed in the event handler, i.e. external command, so that I can attach the same external command to handle multiple different buttons.\nHow can this be achieved, please?\n\n<p>I would like to identify the button pushed and access its data in the external command Execute method.\n\n\n<p><strong>Answer:</strong> The official Revit API user interface design expects you to implement a separate command class for each push button.\n\n<p>If you do so, then you can identify the push button clicked by the user by the command class whose Execute method was triggered.\n\n<p>If you choose to circumvent this official approach somehow, e.g. by attaching the same external command implementation to several different push buttons, than you will have to identify them by some other means.\n\n<p>When you define a push button, you also specify its Name via the RibbonItemData.Name property. This name is unique across the entire ribbon, or at least within the panel containing the button, so you could use this to identify the button.\n\n<p>Unfortunately, the Revit API does not provide any support for finding out which push button was used to trigger the external command.\n\n<p>While this functionality is not provided by the Revit API, you may be able to make use of the generic .NET Framework libraries to find out.\n\n<p>For instance, you can\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/subscribing-to-ui-automation-events.html\">\nsubscribe to certain events</a> to\n\nreceive a notification whenever a ribbon button is pressed by making use of the .NET\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/automation\">\nUI Automation</a> library.\n\n<p>A concrete example of subscribing to a UI Automation event telling you which button was clicked is given by Rodolf Honke to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/pimp-my-autocad-or-revit-ribbon.html\">\npimp my ribbon</a>,\n\nwhere he shows how to implement an event listener for both Revit and AutoCAD ribbon systems:</p>\n<pre class=\"code\">\nComponentManager.UIElementActivated\n  += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;Autodesk.Windows\n    .<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n      ComponentManager_UIElementActivated );\n \n<span class=\"blue\">void</span> ComponentManager_UIElementActivated(\n  <span class=\"blue\">object</span> sender,\n  Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n{\n  <span class=\"green\">// e.UiElement.PersistId says which item has been pressed</span>\n}\n</pre>\n<p>You will need to test whether this is of any use to you. This event listener may be pretty inefficient and slow.\n\n<p>The use of these APIs is unsupported and at your own risk.\nIf you wish to use the unsupported UI Automation option, you will have to find out for yourself how to do so using the ample information available on the web and elsewhere.\n\n<p>Probably the easiest way to go is indeed tom implement a separate command handler for each button.\nIf you have many commands requiring similar functionality, e.g. an identical initialisation procedure, you can either derive them all from one common base class, or wrap the common functionality in a method that you can call from each separate external command Execute method.</p>\n<a name=\"3\"></a>\n<h4>Opening a URL from a Ribbon Button</h4>\n<p>Another, simpler, question on hooking up ribbon buttons was also happily and rapidly resolved:</p>\n<p><strong>Question:</strong> I am attempting to create a URL link like this:</p>\n<center>\n<img alt=\"URL ribbon button\" src=\"img/url_button_1.png\"/>\n</center>\n<p>How can I enable the user to click on the button and get the link to open in a web browser?\nI know how to create the ribbon panel and push button, but not how to connect to the URL in a web browser.\n\n<p><strong>Answer:</strong> Two options:\n\n<ol>\n<li>Official, easy, supported: implement an external command and launch the browser from that.</li>\n<li>Unofficial, harder, unsupported: use something else, e.g. the .NET framework UI Automation library discussed above.</li>\n</ol>\n<p><strong>Response:</strong> Option #1 worked and it was very easy indeed.\nAll it required was adding just one line of code in the external command, System.Diagnostics.Process.Start, and then simply implementing it in the external application file.\n\n<p>This enables us to populate a custom ribbon panel that includes URLs linking to PDFs and webpages containing office Revit standards.\nThis provides our staff a quick and easy way to access our standards within the Revit environment.\n\n<p>External command:</p>\n<center>\n<img alt=\"External command opening a URL\" src=\"img/url_button_2.png\"/>\n</center>\n<p>External application:</p>\n<center>\n<img alt=\"External application setting up ribbon button\" src=\"img/url_button_3.png\"/>\n</center>\n<p>Revit ribbon:</p>\n<center>\n<img alt=\"URL ribbon button\" src=\"img/url_button_4.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>XYZ Comparison and Point and Vector Behaviour</h4>\n<p>A completely different topic deals with the Revit API XYZ class, its dual use to represent points and vectors, and how to compare them, raised by Graham Cook in the Revit API discussion forum in the thread on a\n\n<a href=\"http://forums.autodesk.com/t5/Autodesk-Revit-API/XYZ-IsAlmostEqualTo-problem/td-p/3701684\">\nXYZ.IsAlmostEqualTo problem</a>:</p>\n<p><strong>Question:</strong> Maybe I'm misinterpreting the IsAlmostEqualTo method.\nI want to determine whether two points are within 4 inches of each other, i.e. 0.3333 feet.\nI thought the following code would achieve that:</p>\n<pre>\n  XYZ a = new XYZ(41.7, -76, 0);\n  XYZ b = new XYZ(4.7, -76, 0);\n  bool almostEqual = a.IsAlmostEqualTo(b, 0.333);\n</pre>\n<p>But even though in this example the two points are 37 feet apart, IsAlmostEqualTo returns true.\nAm I misunderstanding the tolerance part of the method?</p>\n<p><strong>Answer:</strong> The behaviour you observe is correct and intended and has a simple explanation:\n\n<p>IsAlmostEqualTo is implemented for vector comparison, not point comparison, and is mostly designed around small tolerances.\nThe default for IsAlmostEqualTo with no tolerance input argument given is 1e-09.\nAt small tolerances, points and vectors are more interchangeable, so I would use the default IsAlmostEqualTo to find \"equivalent\" points too.\n\n<p>Because this is a directional comparison, not a distance one, 0.333 for the epsilon means to check if the two vectors are within a significant angular range of each other, which the example input points actually pass.\nEven if the points are treated as vectors and normalized, they will still pass the comparison because of the wide epsilon permitted.\n\n<p>If you want to compare points with a non-tiny epsilon using the allowed distance between them, use XYZ.DistanceTo method instead.\n\n<p>The Util.cs module of The Building Coder samples provides example implementations of point comparison predicate methods.\nHere is\n\n<span class=\"asset asset-generic at-xid-6a00e553e168978833017c326955af970b\">\n<a href=\"http://thebuildingcoder.typepad.com/files/bc_13_99_4.zip\">version 2013.0.99.4</a></span> from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/slab-boundary-revisited.html\">\nslab boundary command update</a>.\n\n\n\n<a name=\"5\"></a>\n<h4>Autodesk API Overview</h4>\n<p>Autodesk provides a large number of programming platforms and APIs.\nAn overview is given by the\n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=5781281\">\nPlatform Technologies</a> overview on the Autodesk Developer Network.\n\nJust to see and be astounded by their sheer number, here is a list of links to the associated developer pages:\n\n<ul>\n<li><a href=\"http://www.autodesk.com/develop3dsmax\">3DS Max</a></li>\n<li><a href=\"http://www.autodesk.com/developadt\">AutoCAD Architecture</a></li>\n<li><a href=\"http://www.autodesk.com/developapps\">Autodesk Exchange Apps Developer Center</a></li>\n<li><a href=\"http://www.autodesk.com/developautocad\">AutoCAD</a></li>\n<li><a href=\"http://www.autodesk.com/developcivil\">AutoCAD Civil 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developcloud\">Cloud &amp; Mobile</a></li>\n<li><a href=\"http://www.autodesk.com/developdwf\">DWF</a></li>\n<li><a href=\"http://www.autodesk.com/developfbx\">FBX</a></li>\n<li><a href=\"http://www.autodesk.com/developinventor\">Inventor</a></li>\n<li><a href=\"http://www.autodesk.com/developmap\">AutoCAD Map 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developmapguide\">Autodesk Infrastructure Map Server AIMS</a></li>\n<li><a href=\"http://www.autodesk.com/developmaya\">Maya</a></li>\n<li><a href=\"http://www.autodesk.com/developmotionbuilder\">MotionBuilder</a></li>\n<li><a href=\"http://www.autodesk.com/developnavisworks\">Navisworks</a></li>\n<li><a href=\"http://www.autodesk.com/developrevit\">Revit</a></li>\n<li><a href=\"http://www.autodesk.com/developvault\">Vault</a></li>\n<li><a href=\"http://www.autodesk.com/developwiretap\">Wiretap</a></li>\n<li><a href=\"http://www.autodesk.com/objectarx\">ObjectARX</a></li>\n<li><a href=\"http://www.autodesk.com/oem\">AutoCAD OEM</a></li>\n<li><a href=\"http://www.autodesk.com/realdwg\">RealDWG</a></li>\n</ul>\n<a name=\"6\"></a>\n<h4>The Green Building Studio GBS REST API</h4>\n<p>I recently played around with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">\nBIM 360 Glue REST API</a>\n\nand showed how to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">\nuse Python to access it interactively</a>.\n\nI also recently mentioned the new\n\n<a href=\"http://autodesk.typepad.com/bpa\">\nbuilding performance analysis blog</a> which\n\ndiscusses topics such as the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html#0\">\nProject Falcon</a> computational\n\nfluid dynamics Revit add-in and GBS, the Autodesk Green Building Studio cloud-based energy analysis web service.\n\n<p>Emile Kfouri now pointed out this discussion of the\n\n<a href=\"http://autodesk.typepad.com/bpa/2013/01/green-building-studio-api-part-i.html\">\nGBS REST API</a> that\n\nwill certainly enable you (yes, you!) to achieve very cool things.\nI am looking forward to hearing about your ideas!\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0878_button_cmd_url_xyz",
    "header_text": "Opening a URL from a Ribbon Button",
    "local_header_href": "#opening-a-url-from-a-ribbon-button",
    "chunk_text": "<h4>Opening a URL from a Ribbon Button</h4><p>Another, simpler, question on hooking up ribbon buttons was also happily and rapidly resolved:</p><p><strong>Question:</strong> I am attempting to create a URL link like this:</p><center>\n<img alt=\"URL ribbon button\" src=\"img/url_button_1.png\"/>\n</center><p>How can I enable the user to click on the button and get the link to open in a web browser?\nI know how to create the ribbon panel and push button, but not how to connect to the URL in a web browser.\n\n<p><strong>Answer:</strong> Two options:\n\n<ol>\n<li>Official, easy, supported: implement an external command and launch the browser from that.</li>\n<li>Unofficial, harder, unsupported: use something else, e.g. the .NET framework UI Automation library discussed above.</li>\n</ol>\n<p><strong>Response:</strong> Option #1 worked and it was very easy indeed.\nAll it required was adding just one line of code in the external command, System.Diagnostics.Process.Start, and then simply implementing it in the external application file.\n\n<p>This enables us to populate a custom ribbon panel that includes URLs linking to PDFs and webpages containing office Revit standards.\nThis provides our staff a quick and easy way to access our standards within the Revit environment.\n\n<p>External command:</p>\n<center>\n<img alt=\"External command opening a URL\" src=\"img/url_button_2.png\"/>\n</center>\n<p>External application:</p>\n<center>\n<img alt=\"External application setting up ribbon button\" src=\"img/url_button_3.png\"/>\n</center>\n<p>Revit ribbon:</p>\n<center>\n<img alt=\"URL ribbon button\" src=\"img/url_button_4.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>XYZ Comparison and Point and Vector Behaviour</h4>\n<p>A completely different topic deals with the Revit API XYZ class, its dual use to represent points and vectors, and how to compare them, raised by Graham Cook in the Revit API discussion forum in the thread on a\n\n<a href=\"http://forums.autodesk.com/t5/Autodesk-Revit-API/XYZ-IsAlmostEqualTo-problem/td-p/3701684\">\nXYZ.IsAlmostEqualTo problem</a>:</p>\n<p><strong>Question:</strong> Maybe I'm misinterpreting the IsAlmostEqualTo method.\nI want to determine whether two points are within 4 inches of each other, i.e. 0.3333 feet.\nI thought the following code would achieve that:</p>\n<pre>\n  XYZ a = new XYZ(41.7, -76, 0);\n  XYZ b = new XYZ(4.7, -76, 0);\n  bool almostEqual = a.IsAlmostEqualTo(b, 0.333);\n</pre>\n<p>But even though in this example the two points are 37 feet apart, IsAlmostEqualTo returns true.\nAm I misunderstanding the tolerance part of the method?</p>\n<p><strong>Answer:</strong> The behaviour you observe is correct and intended and has a simple explanation:\n\n<p>IsAlmostEqualTo is implemented for vector comparison, not point comparison, and is mostly designed around small tolerances.\nThe default for IsAlmostEqualTo with no tolerance input argument given is 1e-09.\nAt small tolerances, points and vectors are more interchangeable, so I would use the default IsAlmostEqualTo to find \"equivalent\" points too.\n\n<p>Because this is a directional comparison, not a distance one, 0.333 for the epsilon means to check if the two vectors are within a significant angular range of each other, which the example input points actually pass.\nEven if the points are treated as vectors and normalized, they will still pass the comparison because of the wide epsilon permitted.\n\n<p>If you want to compare points with a non-tiny epsilon using the allowed distance between them, use XYZ.DistanceTo method instead.\n\n<p>The Util.cs module of The Building Coder samples provides example implementations of point comparison predicate methods.\nHere is\n\n<span class=\"asset asset-generic at-xid-6a00e553e168978833017c326955af970b\">\n<a href=\"http://thebuildingcoder.typepad.com/files/bc_13_99_4.zip\">version 2013.0.99.4</a></span> from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/slab-boundary-revisited.html\">\nslab boundary command update</a>.\n\n\n\n<a name=\"5\"></a>\n<h4>Autodesk API Overview</h4>\n<p>Autodesk provides a large number of programming platforms and APIs.\nAn overview is given by the\n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=5781281\">\nPlatform Technologies</a> overview on the Autodesk Developer Network.\n\nJust to see and be astounded by their sheer number, here is a list of links to the associated developer pages:\n\n<ul>\n<li><a href=\"http://www.autodesk.com/develop3dsmax\">3DS Max</a></li>\n<li><a href=\"http://www.autodesk.com/developadt\">AutoCAD Architecture</a></li>\n<li><a href=\"http://www.autodesk.com/developapps\">Autodesk Exchange Apps Developer Center</a></li>\n<li><a href=\"http://www.autodesk.com/developautocad\">AutoCAD</a></li>\n<li><a href=\"http://www.autodesk.com/developcivil\">AutoCAD Civil 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developcloud\">Cloud &amp; Mobile</a></li>\n<li><a href=\"http://www.autodesk.com/developdwf\">DWF</a></li>\n<li><a href=\"http://www.autodesk.com/developfbx\">FBX</a></li>\n<li><a href=\"http://www.autodesk.com/developinventor\">Inventor</a></li>\n<li><a href=\"http://www.autodesk.com/developmap\">AutoCAD Map 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developmapguide\">Autodesk Infrastructure Map Server AIMS</a></li>\n<li><a href=\"http://www.autodesk.com/developmaya\">Maya</a></li>\n<li><a href=\"http://www.autodesk.com/developmotionbuilder\">MotionBuilder</a></li>\n<li><a href=\"http://www.autodesk.com/developnavisworks\">Navisworks</a></li>\n<li><a href=\"http://www.autodesk.com/developrevit\">Revit</a></li>\n<li><a href=\"http://www.autodesk.com/developvault\">Vault</a></li>\n<li><a href=\"http://www.autodesk.com/developwiretap\">Wiretap</a></li>\n<li><a href=\"http://www.autodesk.com/objectarx\">ObjectARX</a></li>\n<li><a href=\"http://www.autodesk.com/oem\">AutoCAD OEM</a></li>\n<li><a href=\"http://www.autodesk.com/realdwg\">RealDWG</a></li>\n</ul>\n<a name=\"6\"></a>\n<h4>The Green Building Studio GBS REST API</h4>\n<p>I recently played around with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">\nBIM 360 Glue REST API</a>\n\nand showed how to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">\nuse Python to access it interactively</a>.\n\nI also recently mentioned the new\n\n<a href=\"http://autodesk.typepad.com/bpa\">\nbuilding performance analysis blog</a> which\n\ndiscusses topics such as the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html#0\">\nProject Falcon</a> computational\n\nfluid dynamics Revit add-in and GBS, the Autodesk Green Building Studio cloud-based energy analysis web service.\n\n<p>Emile Kfouri now pointed out this discussion of the\n\n<a href=\"http://autodesk.typepad.com/bpa/2013/01/green-building-studio-api-part-i.html\">\nGBS REST API</a> that\n\nwill certainly enable you (yes, you!) to achieve very cool things.\nI am looking forward to hearing about your ideas!\n\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0878_button_cmd_url_xyz",
    "header_text": "XYZ Comparison and Point and Vector Behaviour",
    "local_header_href": "#xyz-comparison-and-point-and-vector-behaviour",
    "chunk_text": "<h4>XYZ Comparison and Point and Vector Behaviour</h4><p>A completely different topic deals with the Revit API XYZ class, its dual use to represent points and vectors, and how to compare them, raised by Graham Cook in the Revit API discussion forum in the thread on a\n\n<a href=\"http://forums.autodesk.com/t5/Autodesk-Revit-API/XYZ-IsAlmostEqualTo-problem/td-p/3701684\">\nXYZ.IsAlmostEqualTo problem</a>:</p><p><strong>Question:</strong> Maybe I'm misinterpreting the IsAlmostEqualTo method.\nI want to determine whether two points are within 4 inches of each other, i.e. 0.3333 feet.\nI thought the following code would achieve that:</p><pre>\n  XYZ a = new XYZ(41.7, -76, 0);\n  XYZ b = new XYZ(4.7, -76, 0);\n  bool almostEqual = a.IsAlmostEqualTo(b, 0.333);\n</pre><p>But even though in this example the two points are 37 feet apart, IsAlmostEqualTo returns true.\nAm I misunderstanding the tolerance part of the method?</p><p><strong>Answer:</strong> The behaviour you observe is correct and intended and has a simple explanation:\n\n<p>IsAlmostEqualTo is implemented for vector comparison, not point comparison, and is mostly designed around small tolerances.\nThe default for IsAlmostEqualTo with no tolerance input argument given is 1e-09.\nAt small tolerances, points and vectors are more interchangeable, so I would use the default IsAlmostEqualTo to find \"equivalent\" points too.\n\n<p>Because this is a directional comparison, not a distance one, 0.333 for the epsilon means to check if the two vectors are within a significant angular range of each other, which the example input points actually pass.\nEven if the points are treated as vectors and normalized, they will still pass the comparison because of the wide epsilon permitted.\n\n<p>If you want to compare points with a non-tiny epsilon using the allowed distance between them, use XYZ.DistanceTo method instead.\n\n<p>The Util.cs module of The Building Coder samples provides example implementations of point comparison predicate methods.\nHere is\n\n<span class=\"asset asset-generic at-xid-6a00e553e168978833017c326955af970b\">\n<a href=\"http://thebuildingcoder.typepad.com/files/bc_13_99_4.zip\">version 2013.0.99.4</a></span> from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/slab-boundary-revisited.html\">\nslab boundary command update</a>.\n\n\n\n<a name=\"5\"></a>\n<h4>Autodesk API Overview</h4>\n<p>Autodesk provides a large number of programming platforms and APIs.\nAn overview is given by the\n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=5781281\">\nPlatform Technologies</a> overview on the Autodesk Developer Network.\n\nJust to see and be astounded by their sheer number, here is a list of links to the associated developer pages:\n\n<ul>\n<li><a href=\"http://www.autodesk.com/develop3dsmax\">3DS Max</a></li>\n<li><a href=\"http://www.autodesk.com/developadt\">AutoCAD Architecture</a></li>\n<li><a href=\"http://www.autodesk.com/developapps\">Autodesk Exchange Apps Developer Center</a></li>\n<li><a href=\"http://www.autodesk.com/developautocad\">AutoCAD</a></li>\n<li><a href=\"http://www.autodesk.com/developcivil\">AutoCAD Civil 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developcloud\">Cloud &amp; Mobile</a></li>\n<li><a href=\"http://www.autodesk.com/developdwf\">DWF</a></li>\n<li><a href=\"http://www.autodesk.com/developfbx\">FBX</a></li>\n<li><a href=\"http://www.autodesk.com/developinventor\">Inventor</a></li>\n<li><a href=\"http://www.autodesk.com/developmap\">AutoCAD Map 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developmapguide\">Autodesk Infrastructure Map Server AIMS</a></li>\n<li><a href=\"http://www.autodesk.com/developmaya\">Maya</a></li>\n<li><a href=\"http://www.autodesk.com/developmotionbuilder\">MotionBuilder</a></li>\n<li><a href=\"http://www.autodesk.com/developnavisworks\">Navisworks</a></li>\n<li><a href=\"http://www.autodesk.com/developrevit\">Revit</a></li>\n<li><a href=\"http://www.autodesk.com/developvault\">Vault</a></li>\n<li><a href=\"http://www.autodesk.com/developwiretap\">Wiretap</a></li>\n<li><a href=\"http://www.autodesk.com/objectarx\">ObjectARX</a></li>\n<li><a href=\"http://www.autodesk.com/oem\">AutoCAD OEM</a></li>\n<li><a href=\"http://www.autodesk.com/realdwg\">RealDWG</a></li>\n</ul>\n<a name=\"6\"></a>\n<h4>The Green Building Studio GBS REST API</h4>\n<p>I recently played around with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">\nBIM 360 Glue REST API</a>\n\nand showed how to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">\nuse Python to access it interactively</a>.\n\nI also recently mentioned the new\n\n<a href=\"http://autodesk.typepad.com/bpa\">\nbuilding performance analysis blog</a> which\n\ndiscusses topics such as the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html#0\">\nProject Falcon</a> computational\n\nfluid dynamics Revit add-in and GBS, the Autodesk Green Building Studio cloud-based energy analysis web service.\n\n<p>Emile Kfouri now pointed out this discussion of the\n\n<a href=\"http://autodesk.typepad.com/bpa/2013/01/green-building-studio-api-part-i.html\">\nGBS REST API</a> that\n\nwill certainly enable you (yes, you!) to achieve very cool things.\nI am looking forward to hearing about your ideas!\n\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0878_button_cmd_url_xyz",
    "header_text": "Autodesk API Overview",
    "local_header_href": "#autodesk-api-overview",
    "chunk_text": "<h4>Autodesk API Overview</h4><p>Autodesk provides a large number of programming platforms and APIs.\nAn overview is given by the\n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=5781281\">\nPlatform Technologies</a> overview on the Autodesk Developer Network.\n\nJust to see and be astounded by their sheer number, here is a list of links to the associated developer pages:\n\n<ul>\n<li><a href=\"http://www.autodesk.com/develop3dsmax\">3DS Max</a></li>\n<li><a href=\"http://www.autodesk.com/developadt\">AutoCAD Architecture</a></li>\n<li><a href=\"http://www.autodesk.com/developapps\">Autodesk Exchange Apps Developer Center</a></li>\n<li><a href=\"http://www.autodesk.com/developautocad\">AutoCAD</a></li>\n<li><a href=\"http://www.autodesk.com/developcivil\">AutoCAD Civil 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developcloud\">Cloud &amp; Mobile</a></li>\n<li><a href=\"http://www.autodesk.com/developdwf\">DWF</a></li>\n<li><a href=\"http://www.autodesk.com/developfbx\">FBX</a></li>\n<li><a href=\"http://www.autodesk.com/developinventor\">Inventor</a></li>\n<li><a href=\"http://www.autodesk.com/developmap\">AutoCAD Map 3D</a></li>\n<li><a href=\"http://www.autodesk.com/developmapguide\">Autodesk Infrastructure Map Server AIMS</a></li>\n<li><a href=\"http://www.autodesk.com/developmaya\">Maya</a></li>\n<li><a href=\"http://www.autodesk.com/developmotionbuilder\">MotionBuilder</a></li>\n<li><a href=\"http://www.autodesk.com/developnavisworks\">Navisworks</a></li>\n<li><a href=\"http://www.autodesk.com/developrevit\">Revit</a></li>\n<li><a href=\"http://www.autodesk.com/developvault\">Vault</a></li>\n<li><a href=\"http://www.autodesk.com/developwiretap\">Wiretap</a></li>\n<li><a href=\"http://www.autodesk.com/objectarx\">ObjectARX</a></li>\n<li><a href=\"http://www.autodesk.com/oem\">AutoCAD OEM</a></li>\n<li><a href=\"http://www.autodesk.com/realdwg\">RealDWG</a></li>\n</ul>\n<a name=\"6\"></a>\n<h4>The Green Building Studio GBS REST API</h4>\n<p>I recently played around with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">\nBIM 360 Glue REST API</a>\n\nand showed how to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">\nuse Python to access it interactively</a>.\n\nI also recently mentioned the new\n\n<a href=\"http://autodesk.typepad.com/bpa\">\nbuilding performance analysis blog</a> which\n\ndiscusses topics such as the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html#0\">\nProject Falcon</a> computational\n\nfluid dynamics Revit add-in and GBS, the Autodesk Green Building Studio cloud-based energy analysis web service.\n\n<p>Emile Kfouri now pointed out this discussion of the\n\n<a href=\"http://autodesk.typepad.com/bpa/2013/01/green-building-studio-api-part-i.html\">\nGBS REST API</a> that\n\nwill certainly enable you (yes, you!) to achieve very cool things.\nI am looking forward to hearing about your ideas!\n\n</p></p></p>"
  },
  {
    "original_filename": "0878_button_cmd_url_xyz",
    "header_text": "The Green Building Studio GBS REST API",
    "local_header_href": "#the-green-building-studio-gbs-rest-api",
    "chunk_text": "<h4>The Green Building Studio GBS REST API</h4><p>I recently played around with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">\nBIM 360 Glue REST API</a>\n\nand showed how to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">\nuse Python to access it interactively</a>.\n\nI also recently mentioned the new\n\n<a href=\"http://autodesk.typepad.com/bpa\">\nbuilding performance analysis blog</a> which\n\ndiscusses topics such as the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html#0\">\nProject Falcon</a> computational\n\nfluid dynamics Revit add-in and GBS, the Autodesk Green Building Studio cloud-based energy analysis web service.\n\n<p>Emile Kfouri now pointed out this discussion of the\n\n<a href=\"http://autodesk.typepad.com/bpa/2013/01/green-building-studio-api-part-i.html\">\nGBS REST API</a> that\n\nwill certainly enable you (yes, you!) to achieve very cool things.\nI am looking forward to hearing about your ideas!\n\n</p></p>"
  }
]