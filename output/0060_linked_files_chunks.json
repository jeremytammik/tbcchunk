[
  {
    "original_filename": "0060_linked_files",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0060_linked_files",
    "header_text": "Linked Files",
    "local_header_href": "#linked-files",
    "chunk_text": "<h3>Linked Files</h3><p>Here is pretty thorough exploration by Joe Ye on how to retrieve linked Revit files in a project.</p><p>The built-in category of a linked Revit file is BuiltInCategory.OST_RvtLinks, and the class storing it in the Revit database is Instance.\nTherefore, we can retrieve all linked Revit files in a document like this:</p><pre class=\"code\">\nAutodesk.Revit.Creation.<span class=\"teal\">Filter</span> cf\n  = app.Create.Filter;\n \n<span class=\"teal\">BuiltInCategory</span> bic\n  = <span class=\"teal\">BuiltInCategory</span>.OST_RvtLinks;\n \n<span class=\"teal\">Filter</span> f1\n  = cf.NewCategoryFilter( bic );\n \n<span class=\"teal\">Filter</span> f2\n  = cf.NewTypeFilter( <span class=\"blue\">typeof</span>( <span class=\"teal\">Instance</span> ) );\n \n<span class=\"teal\">Filter</span> f3\n  = cf.NewLogicAndFilter( f1, f2 );\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; links = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\ndoc.get_Elements( f3, links );\n</pre><p>We simply set up filters for the category and class, which is also the System.Type, combine them in a Boolean expression, and ask the document for the elements matching this filter.</p><p>Revit 2008 did not provide a valid category property for the linked model, and at that time the API did not support filtering for specific elements, so one had to use a slower and more complex approach such as this:</p><pre class=\"code\">\n<span class=\"teal\">BuiltInParameter</span> bip\n  = <span class=\"teal\">BuiltInParameter</span>.ELEM_TYPE_PARAM;\n \n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n<span class=\"teal\">ElementIterator</span> it = doc.Elements;\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; links = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n<span class=\"blue\">while</span>( it.MoveNext() )\n{\n  <span class=\"teal\">Instance</span> inst = it.Current <span class=\"blue\">as</span> <span class=\"teal\">Instance</span>;\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != inst )\n  {\n    <span class=\"teal\">Parameter</span> p = inst.get_Parameter( bip );\n    <span class=\"teal\">ElementId</span> id = p.AsElementId();\n    <span class=\"teal\">Element</span> e = doc.get_Element( <span class=\"blue\">ref</span> id );\n    <span class=\"blue\">string</span> n = e.Name;\n    <span class=\"blue\">string</span> s = n.Substring( n.Length - 4 );\n    <span class=\"blue\">if</span>( s.ToLower().Equals( <span class=\"maroon\">\".rvt\"</span> ) )\n    {\n      links.Add( inst );\n    }\n  }\n}\n</pre><p>In this loop we check all elements whose class is Instance.\nOn those, we check for the built-in parameter ELEM_TYPE_PARAM, which gives us the family.\nThe parameter is an element id.\nWith the id, we can ask the document to retrieve the element 'e' and ask it for its name 'n'.\nThe linked file's element name is the file name, which ends in \".rvt\".</p>"
  },
  {
    "original_filename": "0060_linked_files",
    "header_text": "Linked File Path",
    "local_header_href": "#linked-file-path",
    "chunk_text": "<h4>Linked File Path</h4><p>This quickly leads to a new question: Having the file name, is it possible to also get the file path for a given Revit link?</p><p>For that, we can make use of the fact that Application.Documents manages all imported Revit files.\nThe linked Revit files' full path can be retrieved from the Document.PathName property.\nHere is some code to set up a dictionary mapping each Revit link's file name to its full path:</p><pre class=\"code\">\n<span class=\"teal\">DocumentSet</span> docs = app.Documents;\n<span class=\"blue\">int</span> n = docs.Size;\n \n<span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt; dict\n  = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;( n );\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">Document</span> doc <span class=\"blue\">in</span> docs )\n{\n  <span class=\"blue\">string</span> path = doc.PathName;\n  <span class=\"blue\">int</span> i = path.LastIndexOf( <span class=\"maroon\">\"\\\\\"</span> ) + 1;\n  <span class=\"blue\">string</span> name = path.Substring( i );\n  dict.Add( name, path );\n}\n</pre><p>Unfortunately, the question still has some thorny bits in it, because it remains unclear how to get the linked files in a Revit project when there are two open projects, both referencing a files with the\nsame name are but at different paths. For example:</p><ul>\n<li>Open a Revit project: C:\\tmp\\a\\link.rvt with a link to C:\\tmp\\a\\x.rvt.</li>\n<li>Open another Revit project in the same Revit session: C:\\tmp\\b\\x.rvt.</li>\n</ul><p>Now we want the Revit links for the project \"link.rvt\".\nFrom the elements collection we can find the name of the linked file \"x.rvt\".\nBut there are two files with the same name in the documents collection and we don't know which one of them to choose.\nThe files in the documents collection are:</p><ul>\n<li>C:\\tmp\\a\\link.rvt</li>\n<li>C:\\tmp\\a\\x.rvt</li>\n<li>C:\\tmp\\b\\x.rvt</li>\n</ul><p>For this situation, you can distinguish between the opened Revit document and the imported one.\nWhen you retrieve a document from Application.Documents and it is currently open in Revit, its property Document.ActiveView is not null.\nIf the document is imported, its Document.ActiveView is null.\nThis can be used to tell which one is imported.</p><p>Unfortunately, this still does not solve the problem if two opened documents import two Revit files with the same file name in different folders.<p>\n<p>Here is the mainline of an external command making use of these methods:</p>\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n \n<span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt; dict\n  = GetFilePaths( app );\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; links\n  = GetLinkedFiles( app );\n \n<span class=\"blue\">int</span> n = links.Count;\n<span class=\"teal\">Debug</span>.WriteLine( <span class=\"blue\">string</span>.Format(\n  <span class=\"maroon\">\"There {0} {1} linked Revit model{2}.\"</span>,\n  (1 == n ? <span class=\"maroon\">\"is\"</span> : <span class=\"maroon\">\"are\"</span>), n,\n  <span class=\"teal\">Util</span>.PluralSuffix( n ) ) );\n \n<span class=\"blue\">string</span> name;\n<span class=\"blue\">char</span>[] sep = <span class=\"blue\">new</span> <span class=\"blue\">char</span>[] { <span class=\"maroon\">':'</span> };\n<span class=\"blue\">string</span>[] a;\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> link <span class=\"blue\">in</span> links )\n{\n  name = link.Name;\n  a = name.Split( sep );\n  name = a[0].Trim();\n \n  <span class=\"teal\">Debug</span>.WriteLine( <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"Link '{0}' full path is '{1}'.\"</span>,\n    name, dict[name] ) );\n}\n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n</pre>\n<p>It makes use of the fact that the link instance element names use \" : \" to delimit the file name, as in:</p>\n<pre>\n\"two_rooms.rvt : 2 : location <not shared=\"\">\"\n</not></pre>\n<p>Here is the output from running this command in a simple sample file:</p>\n<pre>\nThere are 2 linked Revit models.\nLink 'roof.rvt' full path is 'C:\\tmp\\roof.rvt'.\nLink 'two_rooms.rvt' full path is 'C:\\tmp\\two_rooms.rvt'.\n</pre>\n<p>Joe suggests that yet another situation also needs to be considered. Assuming the following situation:</p>\n<ul>\n<li>C:\\temp\\a\\file1.rvt is opened.</li>\n<li>C:\\temp\\a\\main.rvt is also opened.</li>\n<li>C:\\temp\\b\\file1.rvt is imported into main.rvt.</li>\n</ul>\n<p>In this case, the GetFilePaths method retrieves two file paths:</p>\n<ol>\n<li>C:\\temp\\a\\file1.rvt</li>\n<li>C:\\temp\\b\\file1.rvt</li>\n</ol>\n<p>From the link name file1.rvt alone, we cannot tell which path is the imported one.\nTo do so, we need to remove the non-imported files from the mapping.\nIn this case, GetFilePaths should remove the opened Revit file and only contain non-opened ones, which represent the imported files.\nThis can be achieved by using the ActiveView property, for instance by enhancing GetFilePaths like this:</p>\n<pre class=\"code\">\n<span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>,<span class=\"blue\">string</span>&gt; GetFilePaths(\n  <span class=\"teal\">Application</span> app,\n  <span class=\"blue\">bool</span> onlyImportedFiles )\n{\n  <span class=\"teal\">DocumentSet</span> docs = app.Documents;\n  <span class=\"blue\">int</span> n = docs.Size;\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt; dict\n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;( n );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Document</span> doc <span class=\"blue\">in</span> docs )\n  {\n    <span class=\"blue\">if</span>( !onlyImportedFiles\n      || ( <span class=\"blue\">null</span> == doc.ActiveView ) )\n    {\n      <span class=\"blue\">string</span> path = doc.PathName;\n      <span class=\"blue\">int</span> i = path.LastIndexOf( <span class=\"maroon\">\"\\\\\"</span> ) + 1;\n      <span class=\"blue\">string</span> name = path.Substring( i );\n      dict.Add( name, path );\n    }\n  }\n  <span class=\"blue\">return</span> dict;\n}\n</pre>\n<p>I hope that this discussion is useful for exploring situations requiring handling of linked files in Revit.\nMany thanks to Joe for his thorough exploration!</p>\n<p>Here is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10017.zip\">\nversion 1.0.0.17</a>\n\nof the complete Visual Studio solution with the new command CmdLinkedFiles discussed here.</p>\n</p></p>"
  }
]