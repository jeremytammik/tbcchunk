[
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Room and Furniture Loops Using Symbols",
    "local_header_href": "#room-and-furniture-loops-using-symbols",
    "chunk_text": "<h3>Room and Furniture Loops Using Symbols</h3><p>Continuing the research and development for my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-editor-project-overview-and-couchdb-configuration.html\">\ncloud-based round-trip 2D Revit model editing project</a>,\n\nI now implemented the first of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-editor-project-overview-and-couchdb-configuration.html#7\">\nnext steps</a> mentioned\n\nat the end:\n\n<ul>\n<li>Separation of symbol and instance data in my add-in and database structure: currently, the furniture loops are placed absolutely, and multiple instances of a symbol duplicate the same loop over and over again at different locations.\nI will rewrite this to separate the furniture loop definition, defined by the family symbol, and its placement, defined by the instance.\nThis needs to be done anyway to enable editing the placement data through the editor interaction on the mobile device.</li>\n</ul>\n<p>The\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html\">\nfirst implementation</a> just\n\nuploaded the room and furniture instance 2D boundary polygon loops, absolutely placed.</p>\n<p>Besides converting that to defining and reusing symbols, I also added support for exporting the model and level data to the cloud.</p>\n<p>I discuss the implementation of that here now:</p>\n<ul>\n<li><a href=\"#2\">Database structure</a></li>\n<li><a href=\"#3\">Database upload</a></li>\n<li><a href=\"#4\">Integer based 2D placement</a></li>\n<li><a href=\"#5\">Populating symbols and instances</a></li>\n<li><a href=\"#6\">Retrieving the boundary loops</a></li>\n<li><a href=\"#7\">GeoSnoop loop display</a></li>\n<li><a href=\"#8\">Caveats</a></li>\n<li><a href=\"#9\">Download</a></li>\n<li><a href=\"#10\">Next steps</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>Database Structure</h4>\n<p>I enhanced the database classes to include a new class DbSymbol.\nIt defines the family symbol loop, which is reused by the family instances.\n\n<p>The DbFurniture class no longer has its own individual loop data.\nInstead, it has a reference to a symbol and placement data defining its 2D translation and rotation.</p>\n<p>All the database classes are derived from the DbObj base class:</p>\n<ul>\n<li>DbObj</li>\n<ul>\n<li>Type</li>\n<li>Description</li>\n<li>Name</li>\n</ul>\n</ul>\n<p>Some of the derived classes have no additional properties of their own at all.\nThe data structure is this as simple as this:</p>\n<ul>\n<li>DbModel</li>\n<li>DbLevel</li>\n<ul>\n<li>ModelId</li>\n</ul>\n<li>DbRoom</li>\n<ul>\n<li>LevelId</li>\n<li>Loops</li>\n<li>ViewBox</li>\n</ul>\n<li>DbSymbol</li>\n<ul>\n<li>Loop</li>\n</ul>\n<li>DbFurniture</li>\n<ul>\n<li>RoomId</li>\n<li>SymbolId</li>\n<li>Transform</li>\n</ul>\n</ul>\n<p>The source code does nothing but exactly reproduce this structure.\nHere is the complete implementation of these classes:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Base class for all Jeremy Room Editor classes.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbObj</span> : <span class=\"teal\">CouchDocument</span>\n  {\n    <span class=\"blue\">protected</span> DbObj()\n    {\n      Type = <span class=\"maroon\">\"obj\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Type { <span class=\"blue\">get</span>; <span class=\"blue\">protected</span> <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Description { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Current model, i.e. Revit project.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbModel</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbModel()\n    {\n      Type = <span class=\"maroon\">\"model\"</span>;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Level.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbLevel</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbLevel()\n    {\n      Type = <span class=\"maroon\">\"level\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> ModelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Room</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbRoom</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbRoom()\n    {\n      Type = <span class=\"maroon\">\"room\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> LevelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loops { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> ViewBox { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Family symbol, i.e. element type defining </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the geometry, i.e. the 2D boundary loop.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbSymbol</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbSymbol()\n    {\n      Type = <span class=\"maroon\">\"symbol\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loop { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Family instance, defining placement, i.e.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> transform, i.e. translation and rotation,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and referring to the symbol geometry.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbFurniture</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbFurniture()\n    {\n      Type = <span class=\"maroon\">\"furniture\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> RoomId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> SymbolId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Transform { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n</pre>\n<a name=\"3\"></a>\n<h4>Database Upload</h4>\n<p>The database upload has not changed very much from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html#6\">\nprevious version</a>,\n\nexcept that the model, level and symbol data is now added, and the furniture and equipment instances store their symbol reference and transformation:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Upload model, level, room and furniture data </span>\n<span class=\"gray\">///</span><span class=\"green\"> to an IrisCouch hosted CouchDB data repository.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">void</span> DbUploadRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture,\n  <span class=\"teal\">JtLoops</span> roomLoops,\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances )\n{\n  <span class=\"teal\">CouchClient</span> client = <span class=\"blue\">new</span> <span class=\"teal\">CouchClient</span>(\n    _web_url,\n    5984 );\n \n  <span class=\"teal\">CouchDatabase</span> db = client.GetDatabase(\n    _database_name, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">Document</span> doc = room.Document;\n \n  <span class=\"teal\">Element</span> projectInfo\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ProjectInfo</span> ) )\n      .FirstElement();\n \n  <span class=\"blue\">string</span> uid = projectInfo.UniqueId;\n \n  <span class=\"teal\">DbModel</span> dbModel;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbModel = db.GetDocument&lt;<span class=\"teal\">DbModel</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbModel.Id.Equals( projectInfo.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbModel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      projectInfo );\n \n    dbModel.Name = projectInfo.Document.Title;\n \n    dbModel = db.UpdateDocument&lt;<span class=\"teal\">DbModel</span>&gt;(\n      dbModel );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbModel = <span class=\"blue\">new</span> <span class=\"teal\">DbModel</span>();\n \n    dbModel.Id = uid;\n    dbModel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      projectInfo );\n \n    dbModel.Name = projectInfo.Name;\n    dbModel = db.CreateDocument&lt;<span class=\"teal\">DbModel</span>&gt;( dbModel );\n  }\n \n  <span class=\"teal\">Level</span> level = room.Level;\n \n  uid = level.UniqueId;\n \n  <span class=\"teal\">DbLevel</span> dbLevel;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbLevel = db.GetDocument&lt;<span class=\"teal\">DbLevel</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbLevel.Id.Equals( level.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbLevel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      level );\n \n    dbLevel.Name = level.Name;\n    dbLevel.ModelId = projectInfo.UniqueId;\n \n    dbLevel = db.UpdateDocument&lt;<span class=\"teal\">DbLevel</span>&gt;(\n      dbLevel );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbLevel = <span class=\"blue\">new</span> <span class=\"teal\">DbLevel</span>();\n \n    dbLevel.Id = uid;\n    dbLevel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      level );\n \n    dbLevel.Name = level.Name;\n    dbLevel.ModelId = projectInfo.UniqueId;\n \n    dbLevel = db.CreateDocument&lt;<span class=\"teal\">DbLevel</span>&gt;(\n      dbLevel );\n  }\n \n  uid = room.UniqueId;\n \n  <span class=\"teal\">DbRoom</span> dbRoom;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbRoom = db.GetDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbRoom.Id.Equals( room.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom.ViewBox = roomLoops.BoundingBox.SvgViewBox;\n \n    dbRoom = db.UpdateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbRoom = <span class=\"blue\">new</span> <span class=\"teal\">DbRoom</span>();\n \n    dbRoom.Id = uid;\n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom.ViewBox = roomLoops.BoundingBox.SvgViewBox;\n \n    dbRoom = db.CreateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">KeyValuePair</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; p <span class=\"blue\">in</span> furnitureLoops )\n  {\n    uid = p.Key;\n    <span class=\"teal\">Element</span> e = doc.GetElement( uid );\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbSymbol</span> symbol = db.GetDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;(\n        uid );\n \n      symbol.Description = <span class=\"teal\">Util</span>.ElementDescription( e );\n      symbol.Name = e.Name;\n      symbol.Loop = p.Value.SvgPath;\n \n      symbol = db.UpdateDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;( symbol );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbSymbol</span> symbol = <span class=\"blue\">new</span> <span class=\"teal\">DbSymbol</span>();\n      symbol.Id = uid;\n      symbol.Description = <span class=\"teal\">Util</span>.ElementDescription( e );\n      symbol.Name = e.Name;\n      symbol.Loop = p.Value.SvgPath;\n \n      symbol = db.CreateDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;( symbol );\n    }\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> f <span class=\"blue\">in</span> furniture )\n  {\n    uid = f.UniqueId;\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = db.GetDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;(\n        uid );\n \n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.SymbolId = f.Symbol.UniqueId;\n      dbf.Transform = <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f )\n        .SvgTransform;\n \n      dbf = db.UpdateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = <span class=\"blue\">new</span> <span class=\"teal\">DbFurniture</span>();\n      dbf.Id = uid;\n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.SymbolId = f.Symbol.UniqueId;\n      dbf.Transform = <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f )\n        .SvgTransform;\n \n      dbf = db.CreateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n  }\n}\n</pre>\n<a name=\"4\"></a>\n<h4>Integer Based 2D Placement</h4>\n<p>I implemented the following simple class to manage the 2D placement.</p>\n<p>It is based on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#2\">\n2D point class</a>,\n\nstoring the coordinate data in integers, for various reasons:</p>\n<ul>\n<li>Revit precision is no smaller than one sixteenth of an inch, ca. 1.2 mm.</li>\n<li>The data is stored in the cloud and rendered on a mobile device: the use of integers</li>\n<ul>\n<li>eliminates rounding issues,</li>\n<li>lowers the data volume,</li>\n<li>enhances performance,</li>\n<li>simplifies storage,</li>\n<li>improves human reading and understanding.</li>\n</ul>\n</ul>\n<p>Since I am already using millimetres for the length measurement, I find it fitting to store the rotation in degrees.\nThe SVG rendering expects degrees as input, anyway.</p>\n<p>Here is the class implementation:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A 2D integer-based transformation, </span>\n<span class=\"gray\">///</span><span class=\"green\"> i.e. translation and rotation.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtPlacement2dInt</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Translation.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point2dInt</span> Translation { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Rotation in degrees.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> Rotation { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The family symbol UniqueId.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SymbolId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"blue\">public</span> JtPlacement2dInt( <span class=\"teal\">FamilyInstance</span> fi )\n  {\n    <span class=\"teal\">LocationPoint</span> lp = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != lp,\n      <span class=\"maroon\">\"expected valid family instanace location point\"</span> );\n \n    Translation = <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( lp.Point );\n \n    Rotation = (<span class=\"blue\">int</span>) (\n      ( ( 180 * lp.Rotation ) + 0.5 ) / <span class=\"teal\">Math</span>.PI );\n \n    SymbolId = fi.Symbol.UniqueId;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return an SVG transform,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> either for native SVG or Raphael.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgTransform\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"R{2}T{0},{1}\"</span>,\n        <span class=\"green\">//\"translate({0},{1}) rotate({2})\",</span>\n        Translation.X, Translation.Y, Rotation );\n    }\n  }\n}\n</pre>\n<p>The placement is instantiated from a family instance, and returns a suitably formatted SVG transformation string, either for native SVG or the\n\n<a href=\"http://raphaeljs.com\">Raphaël</a> JavaScript SVG library.</p>\n<a name=\"5\"></a>\n<h4>Populating Symbols and Instances</h4>\n<p>To populate the symbol and instance data, I loop over all the instances exactly like I did previously.</p>\n<p>Now, instead of exporting the family instance boundary loop in situ, I transform it back to the symbol definition coordinate system instead, and save that in a dictionary mapping the family symbol UniqueId to its boundary loop.</p>\n<p>The family instance exports a reference to that symbol and its placement data:</p>\n<pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture\n    = GetFurniture( room );\n \n  <span class=\"green\">// Map symbol UniqueId to symbol loop</span>\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops\n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt;();\n \n  <span class=\"green\">// List of instances referring to symbols</span>\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt;(\n      furniture.Count );\n \n  <span class=\"blue\">int</span> nFailures;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> f <span class=\"blue\">in</span> furniture )\n  {\n    <span class=\"teal\">FamilySymbol</span> s = f.Symbol;\n \n    <span class=\"blue\">string</span> uid = s.UniqueId;\n \n    <span class=\"blue\">if</span>( !furnitureLoops.ContainsKey( uid ) )\n    {\n      nFailures = 0;\n \n      <span class=\"teal\">JtLoops</span> loops = GetPlanViewBoundaryLoops(\n        f, <span class=\"blue\">ref</span> nFailures );\n \n      <span class=\"blue\">if</span>( 0 &lt; nFailures )\n      {\n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} extrusion analyser failure{2}\"</span>,\n          <span class=\"teal\">Util</span>.ElementDescription( f ), nFailures,\n          <span class=\"teal\">Util</span>.PluralSuffix( nFailures ) );\n      }\n      ListLoops( f, loops );\n \n      <span class=\"blue\">if</span>( 0 &lt; loops.Count )\n      {\n        <span class=\"green\">// Assume first loop is outer one</span>\n \n        furnitureLoops.Add( uid, loops[0] );\n      }\n    }\n    furnitureInstances.Add(\n      <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f ) );\n  }\n</pre>\n<a name=\"6\"></a>\n<h4>Retrieving the Boundary Loops</h4>\n<p>The boundary loop retrieval has not changed very much, although the following significant enhancements were made:</p>\n<ul>\n<li>Store the symbol loop in the original symbol definition coordinate system.</li>\n<li>Store the instance transformation data.</li>\n<li>Manage the dictionary of symbols and the instances referencing them.</li>\n<li>Save intermediate tessellated curve points, not just start and end point. This functionality can be toggled on and off by setting the Boolean _tessellate_curves switch.</li>\n</ul>\n<p>The implementation is separated into two methods:</p>\n<ul>\n<li>AddLoops: add the plan view boundary loops from a given solid to the list of loops.</li>\n<li>GetPlanViewBoundaryLoops: Retrieve the plan view boundary loops from all solids of given element united together.\nIf the element is a family instance, transform its loops from the instance placement coordinate system back to the symbol definition one.</li>\n</ul>\n<p>Here is the implementation:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Add all plan view boundary loops from </span>\n<span class=\"gray\">///</span><span class=\"green\"> given solid to the list of loops.</span>\n<span class=\"gray\">///</span><span class=\"green\"> The creation application argument is used to</span>\n<span class=\"gray\">///</span><span class=\"green\"> reverse the extrusion analyser output curves</span>\n<span class=\"gray\">///</span><span class=\"green\"> in case they are badly oriented.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Number of loops added</span><span class=\"gray\">&lt;/returns&gt;</span>\n<span class=\"blue\">int</span> AddLoops(\n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp,\n  <span class=\"teal\">JtLoops</span> loops,\n  <span class=\"teal\">GeometryObject</span> obj,\n  <span class=\"blue\">ref</span> <span class=\"blue\">int</span> nExtrusionAnalysisFailures )\n{\n  <span class=\"blue\">int</span> nAdded = 0;\n \n  <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n    &amp;&amp; 0 &lt; solid.Faces.Size )\n  {\n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( <span class=\"teal\">XYZ</span>.BasisX,\n      <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.Zero );\n \n    <span class=\"teal\">ExtrusionAnalyzer</span> extrusionAnalyzer = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      extrusionAnalyzer = <span class=\"teal\">ExtrusionAnalyzer</span>.Create(\n        solid, plane, <span class=\"teal\">XYZ</span>.BasisZ );\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n      .<span class=\"teal\">InvalidOperationException</span> )\n    {\n      ++nExtrusionAnalysisFailures;\n      <span class=\"blue\">return</span> nAdded;\n    }\n \n    <span class=\"teal\">Face</span> face = extrusionAnalyzer\n      .GetExtrusionBase();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> a <span class=\"blue\">in</span> face.EdgeLoops )\n    {\n      <span class=\"blue\">int</span> nEdges = a.Size;\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt; curves\n        = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt;( nEdges );\n \n      <span class=\"teal\">XYZ</span> p0 = <span class=\"blue\">null</span>; <span class=\"green\">// loop start point</span>\n      <span class=\"teal\">XYZ</span> p; <span class=\"green\">// edge start point</span>\n      <span class=\"teal\">XYZ</span> q = <span class=\"blue\">null</span>; <span class=\"green\">// edge end point</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> a )\n      {\n        <span class=\"green\">// This returns the curves already</span>\n        <span class=\"green\">// correctly oriented:</span>\n \n        curve = e.AsCurveFollowingFace(\n          face );\n \n        <span class=\"blue\">if</span>( _debug_output )\n        {\n          p = curve.get_EndPoint( 0 );\n          q = curve.get_EndPoint( 1 );\n          <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} --&gt; {1} following face\"</span>,\n            <span class=\"teal\">Util</span>.PointString( p ),\n            <span class=\"teal\">Util</span>.PointString( q ) );\n        }\n \n        curves.Add( curve );\n      }\n \n      q = <span class=\"blue\">null</span>;\n \n      <span class=\"teal\">JtLoop</span> loop = <span class=\"blue\">new</span> <span class=\"teal\">JtLoop</span>( nEdges );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Curve</span> curve <span class=\"blue\">in</span> curves )\n      {\n        p = curve.get_EndPoint( 0 );\n \n        <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> == q\n          || q.IsAlmostEqualTo( p, 1e-05 ),\n          <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"expected last endpoint to equal current start point, not distance {0}\"</span>,\n            (<span class=\"blue\">null</span> == q ? 0 : p.DistanceTo( q ))  ) );\n \n        q = curve.get_EndPoint( 1 );\n \n        <span class=\"blue\">if</span>( _debug_output )\n        {\n          <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} --&gt; {1}\"</span>,\n            <span class=\"teal\">Util</span>.PointString( p ),\n            <span class=\"teal\">Util</span>.PointString( q ) );\n        }\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n        {\n          p0 = p; <span class=\"green\">// save loop start point</span>\n        }\n \n        <span class=\"blue\">int</span> n = -1;\n \n        <span class=\"blue\">if</span>( _tessellate_curves\n          &amp;&amp; _min_tessellation_curve_length_in_feet\n            &lt; q.DistanceTo( p ) )\n        {\n          <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = curve.Tessellate();\n          n = pts.Count;\n \n          <span class=\"teal\">Debug</span>.Assert( 1 &lt; n, <span class=\"maroon\">\"expected at least two points\"</span> );\n          <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( pts[0] ), <span class=\"maroon\">\"expected tessellation start equal curve start point\"</span> );\n          <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( pts[n-1] ), <span class=\"maroon\">\"expected tessellation end equal curve end point\"</span> );\n \n          <span class=\"blue\">if</span>( 2 == n )\n          {\n            n = -1; <span class=\"green\">// this is a straight line</span>\n          }\n          <span class=\"blue\">else</span>\n          {\n            --n; <span class=\"green\">// skip last point</span>\n \n            <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n            {\n              loop.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( pts[i] ) );\n            }\n          }\n        }\n \n        <span class=\"green\">// If tessellation is disabled,</span>\n        <span class=\"green\">// or curve is too short to tessellate,</span>\n        <span class=\"green\">// or has only two tessellation points,</span>\n        <span class=\"green\">// just add the start point:</span>\n \n        <span class=\"blue\">if</span>( -1 == n )\n        {\n          loop.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( p ) );\n        }\n      }\n      <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( p0, 1e-05 ),\n        <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"expected last endpoint to equal current start point, not distance {0}\"</span>,\n          p0.DistanceTo( q ) ) );\n \n      loops.Add( loop );\n \n      ++nAdded;\n    }\n  }\n  <span class=\"blue\">return</span> nAdded;\n}\n\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve all plan view boundary loops from </span>\n<span class=\"gray\">///</span><span class=\"green\"> all solids of given element united together.</span>\n<span class=\"gray\">///</span><span class=\"green\"> If the element is a family instance, transform</span>\n<span class=\"gray\">///</span><span class=\"green\"> its loops from the instance placement </span>\n<span class=\"gray\">///</span><span class=\"green\"> coordinate system back to the symbol </span>\n<span class=\"gray\">///</span><span class=\"green\"> definition one.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">JtLoops</span> GetPlanViewBoundaryLoops(\n  <span class=\"teal\">Element</span> e,\n  <span class=\"blue\">ref</span> <span class=\"blue\">int</span> nFailures )\n{\n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n    = e.Document.Application.Create;\n \n  <span class=\"teal\">JtLoops</span> loops = <span class=\"blue\">new</span> <span class=\"teal\">JtLoops</span>( 1 );\n \n  <span class=\"teal\">Options</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"teal\">Document</span> doc = e.Document;\n \n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      <span class=\"green\">// Retrieve family instance geometry </span>\n      <span class=\"green\">// transformed back to symbol definition</span>\n      <span class=\"green\">// coordinate space by inverting the </span>\n      <span class=\"green\">// family instance placement transformation</span>\n \n      <span class=\"teal\">LocationPoint</span> lp = e.Location\n        <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n      <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.get_Translation(\n        -lp.Point );\n \n      <span class=\"teal\">Transform</span> r = <span class=\"teal\">Transform</span>.get_Rotation(\n        lp.Point, <span class=\"teal\">XYZ</span>.BasisZ, -lp.Rotation );\n \n      geo = geo.GetTransformed( t * r );\n    }\n \n    <span class=\"teal\">Solid</span> union = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( <span class=\"teal\">XYZ</span>.BasisX,\n      <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.Zero );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"green\">// Some solids, e.g. in the standard </span>\n        <span class=\"green\">// content 'Furniture Chair - Office' </span>\n        <span class=\"green\">// cause an extrusion analyser failure,</span>\n        <span class=\"green\">// so skip adding those.</span>\n \n        <span class=\"blue\">try</span>\n        {\n          <span class=\"teal\">ExtrusionAnalyzer</span> extrusionAnalyzer\n            = <span class=\"teal\">ExtrusionAnalyzer</span>.Create(\n              solid, plane, <span class=\"teal\">XYZ</span>.BasisZ );\n        }\n        <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n          .<span class=\"teal\">InvalidOperationException</span> )\n        {\n          solid = <span class=\"blue\">null</span>;\n          ++nFailures;\n        }\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == union )\n          {\n            union = solid;\n          }\n          <span class=\"blue\">else</span>\n          {\n            union = <span class=\"teal\">BooleanOperationsUtils</span>\n              .ExecuteBooleanOperation( union, solid,\n                <span class=\"teal\">BooleanOperationsType</span>.Union );\n          }\n        }\n      }\n    }\n    AddLoops( creapp, loops, union, <span class=\"blue\">ref</span> nFailures );\n  }\n  <span class=\"blue\">return</span> loops;\n}\n</pre>\n<a name=\"7\"></a>\n<h4>GeoSnoop Loop Display</h4>\n<p>I obviously had to update my GeoSnoop display to take the symbol loop dictionary lookup into account.</p>\n<p>I invoke it passing in the room loops, symbol loops, and instance placements:</p>\n<pre class=\"code\">\n  <span class=\"teal\">GeoSnoop</span>.DisplayLoops( revit_window,\n    <span class=\"maroon\">\"Room and furniture\"</span>, roomLoops,\n    furnitureLoops, furnitureInstances );\n</pre>\n<p>The new implementation displays the instances at their respective location by transforming the referenced symbol geometry accordingly.</p>\n<p>I make use of two transformations:</p>\n<ul>\n<li>Matrix transform: Transform from native loop coordinate system to target display coordinates.</li>\n<li>Matrix placement: Additional transformation from symbol definition to instance location for placing an individual instance.</li>\n</ul>\n<p>It also takes the aspect ratio of the room to display into account and adjusts the window height to fit, based on the room bounding box aspect ratio:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Display a collection of loops in a .NET form.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">GeoSnoop</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Pen size.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _pen_size = 1;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Pen colour.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">Color</span> _pen_color = <span class=\"teal\">Color</span>.Black;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Margin around graphics.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _margin = 10;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Draw loops on graphics with the specified</span>\n  <span class=\"gray\">///</span><span class=\"green\"> transform and graphics attributes.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> DrawLoopsOnGraphics(\n    <span class=\"teal\">Graphics</span> graphics,\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt; loops,\n    <span class=\"teal\">Matrix</span> transform )\n  {\n    <span class=\"teal\">Pen</span> pen = <span class=\"blue\">new</span> <span class=\"teal\">Pen</span>( _pen_color, _pen_size );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Point</span>[] loop <span class=\"blue\">in</span> loops )\n    {\n      <span class=\"teal\">GraphicsPath</span> path = <span class=\"blue\">new</span> <span class=\"teal\">GraphicsPath</span>();\n \n      transform.TransformPoints( loop );\n \n      path.AddLines( loop );\n \n      graphics.DrawPath( pen, path );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Display loops in a temporary form generated</span>\n  <span class=\"gray\">///</span><span class=\"green\"> on the fly.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"owner\"&gt;</span><span class=\"green\">Owner window</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"caption\"&gt;</span><span class=\"green\">Form caption</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"loops\"&gt;</span><span class=\"green\">Boundary loops</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> DisplayLoops(\n    <span class=\"teal\">IWin32Window</span> owner,\n    <span class=\"blue\">string</span> caption,\n    <span class=\"teal\">JtLoops</span> roomLoops,\n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops,\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances )\n  {\n    <span class=\"teal\">JtBoundingBox2dInt</span> bb = roomLoops.BoundingBox;\n \n    <span class=\"green\">// Adjust target rectangle height to the </span>\n    <span class=\"green\">// displayee loop height.</span>\n \n    <span class=\"blue\">int</span> width = 400;\n    <span class=\"blue\">int</span> height = (<span class=\"blue\">int</span>) (width * bb.AspectRatio + 0.5);\n \n    <span class=\"green\">// Specify transformation target rectangle </span>\n    <span class=\"green\">// including a margin.</span>\n \n    <span class=\"blue\">int</span> bottom = height - (_margin + _margin);\n \n    <span class=\"teal\">Point</span>[] parallelogramPoints = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>[] {\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( _margin, bottom ), <span class=\"green\">// upper left</span>\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( width - _margin, bottom ), <span class=\"green\">// upper right</span>\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( _margin, _margin ) <span class=\"green\">// lower left</span>\n    };\n \n    <span class=\"green\">// Transform from native loop coordinate system</span>\n    <span class=\"green\">// to target display coordinates.</span>\n \n    <span class=\"teal\">Matrix</span> transform = <span class=\"blue\">new</span> <span class=\"teal\">Matrix</span>(\n      bb.Rectangle, parallelogramPoints );\n \n    <span class=\"teal\">Bitmap</span> bmp = <span class=\"blue\">new</span> <span class=\"teal\">Bitmap</span>( width, height );\n    <span class=\"teal\">Graphics</span> graphics = <span class=\"teal\">Graphics</span>.FromImage( bmp );\n \n    graphics.Clear( System.Drawing.<span class=\"teal\">Color</span>.White );\n \n    DrawLoopsOnGraphics( graphics,\n      roomLoops.GetGraphicsPathLines(), transform );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt;( 1 );\n    loops.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point</span>[] { } );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">JtPlacement2dInt</span> i <span class=\"blue\">in</span> furnitureInstances )\n    {\n      <span class=\"teal\">Point2dInt</span> v = i.Translation;\n      <span class=\"teal\">Matrix</span> placement = <span class=\"blue\">new</span> <span class=\"teal\">Matrix</span>();\n      placement.Rotate(i.Rotation);\n      placement.Translate(v.X, v.Y, <span class=\"teal\">MatrixOrder</span>.Append);\n      placement.Multiply( transform, <span class=\"teal\">MatrixOrder</span>.Append );\n      loops[0] = furnitureLoops[i.SymbolId]\n        .GetGraphicsPathLines();\n \n      DrawLoopsOnGraphics( graphics, loops, placement );\n    }\n \n    <span class=\"teal\">Form</span> form = <span class=\"blue\">new</span> <span class=\"teal\">Form</span>();\n    form.Text = caption;\n    form.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( width + 7, height + 13 );\n    form.FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>\n      .FixedToolWindow;\n \n    <span class=\"teal\">PictureBox</span> pb = <span class=\"blue\">new</span> <span class=\"teal\">PictureBox</span>();\n    pb.Location = <span class=\"blue\">new</span> System.Drawing.<span class=\"teal\">Point</span>( 0, 0 );\n    pb.Dock = System.Windows.Forms.<span class=\"teal\">DockStyle</span>.Fill;\n    pb.Size = bmp.Size;\n    pb.Parent = form;\n    pb.Image = bmp;\n \n    form.ShowDialog( owner );\n  }\n}\n</pre>\n<p>Still very short and sweet, isn't it?</p>\n<p>Here is the result of displaying a room from the advanced sample project provided with Revit:</p>\n<center>\n<img alt=\"Room with furniture\" src=\"img/room_with_furniture3.png\"/>\n</center>\n<p>Those eight straight lines in the corners are columns.\nI should eliminate those.\nWe don't want to move those around indiscriminately on a mobile device anyway, or the whole house might come crashing down around us.</p>\n<a name=\"8\"></a>\n<h4>Caveats</h4>\n<p>Rudolf Honke wrote in a reaction to my plan described last time:\n\n<p>You say that you want to avoid redundant geometry data in your cloud project:\n\n<p>As you know, it is possible to modify the geometry of an individual family instance by cutting voids off it.\nThe geometry of such an instance differs from other ones.\n\n<p>As far as I remember, modifying instance geometry this way has been possible since Revit 2012 or so; the API 2013 says:\n\n<p>\"FamilyInstance.GetOriginalGeometry: Returns the original geometry of the instance, before the instance is modified by joins, cuts, coping, extensions, or other post-processing.\"\n\n<p>Thus, there are at least three groups of elements to be handled:\n\n<ul>\n<li>Individual elements, such as walls – have individual geometry, cannot be reused</li>\n<li>Family instances which have not been modified – can be instantiated, geometry is reusable</li>\n<li>Family instances which are post-processed, resulting in individual geometry – not reusable</li>\n</ul>\n<p>In this case, I am only handling furniture and equipment instances that I do not expect to be modified.</p>\n<p>After all, the plan is to move them around in the room, so they have to be free of constraints for it to work.</p>\n<p>Still, these considerations obviously have to be taken into account for other applications.</p>\n<a name=\"9\"></a>\n<h4>Download</h4>\n<p>To wrap this up for the moment, here is\n\n<a href=\"zip/GeoSnoopSymbols.zip\">GeoSnoopSymbols.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the current state of this external command.\n\n<a name=\"10\"></a>\n<h4>Next Steps</h4>\n<p>My next steps will be:</p>\n<ul>\n<li>Migrate this add-in from Revit 2013 to 2014.</li>\n<li>Implement server-side generated SVG code to display the room and furniture plan in CouchDB using Kanso.</li>\n<li>Implement editing of SVG on the mobile device and reflect changes back to CouchDB (I know how now).</li>\n<li>Implement Idling event handler and polling of CouchDB in the desktop add-in to reflect the changes back to the BIM in real-time.</li>\n<li>Implement an external application wrapper for the add-in providing four commands:</li>\n<ul>\n<li>Upload to cloud</li>\n<li>Refresh from cloud</li>\n<li>Subscribe to cloud</li>\n<li>Unsubscribe from cloud</li>\n</ul>\n</ul>\n<p>I know exactly how to address all these points now, no exceptions left.\nYay!</p>\n<p>I look forward to hearing your comments and suggestions.</p>\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Database Structure",
    "local_header_href": "#database-structure",
    "chunk_text": "<h4>Database Structure</h4><p>I enhanced the database classes to include a new class DbSymbol.\nIt defines the family symbol loop, which is reused by the family instances.\n\n<p>The DbFurniture class no longer has its own individual loop data.\nInstead, it has a reference to a symbol and placement data defining its 2D translation and rotation.</p>\n<p>All the database classes are derived from the DbObj base class:</p>\n<ul>\n<li>DbObj</li>\n<ul>\n<li>Type</li>\n<li>Description</li>\n<li>Name</li>\n</ul>\n</ul>\n<p>Some of the derived classes have no additional properties of their own at all.\nThe data structure is this as simple as this:</p>\n<ul>\n<li>DbModel</li>\n<li>DbLevel</li>\n<ul>\n<li>ModelId</li>\n</ul>\n<li>DbRoom</li>\n<ul>\n<li>LevelId</li>\n<li>Loops</li>\n<li>ViewBox</li>\n</ul>\n<li>DbSymbol</li>\n<ul>\n<li>Loop</li>\n</ul>\n<li>DbFurniture</li>\n<ul>\n<li>RoomId</li>\n<li>SymbolId</li>\n<li>Transform</li>\n</ul>\n</ul>\n<p>The source code does nothing but exactly reproduce this structure.\nHere is the complete implementation of these classes:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Base class for all Jeremy Room Editor classes.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbObj</span> : <span class=\"teal\">CouchDocument</span>\n  {\n    <span class=\"blue\">protected</span> DbObj()\n    {\n      Type = <span class=\"maroon\">\"obj\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Type { <span class=\"blue\">get</span>; <span class=\"blue\">protected</span> <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Description { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Current model, i.e. Revit project.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbModel</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbModel()\n    {\n      Type = <span class=\"maroon\">\"model\"</span>;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Level.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbLevel</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbLevel()\n    {\n      Type = <span class=\"maroon\">\"level\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> ModelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Room</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbRoom</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbRoom()\n    {\n      Type = <span class=\"maroon\">\"room\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> LevelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loops { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> ViewBox { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Family symbol, i.e. element type defining </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the geometry, i.e. the 2D boundary loop.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbSymbol</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbSymbol()\n    {\n      Type = <span class=\"maroon\">\"symbol\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loop { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Family instance, defining placement, i.e.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> transform, i.e. translation and rotation,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and referring to the symbol geometry.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">DbFurniture</span> : <span class=\"teal\">DbObj</span>\n  {\n    <span class=\"blue\">public</span> DbFurniture()\n    {\n      Type = <span class=\"maroon\">\"furniture\"</span>;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> RoomId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> SymbolId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Transform { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n</pre>\n<a name=\"3\"></a>\n<h4>Database Upload</h4>\n<p>The database upload has not changed very much from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html#6\">\nprevious version</a>,\n\nexcept that the model, level and symbol data is now added, and the furniture and equipment instances store their symbol reference and transformation:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Upload model, level, room and furniture data </span>\n<span class=\"gray\">///</span><span class=\"green\"> to an IrisCouch hosted CouchDB data repository.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">void</span> DbUploadRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture,\n  <span class=\"teal\">JtLoops</span> roomLoops,\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances )\n{\n  <span class=\"teal\">CouchClient</span> client = <span class=\"blue\">new</span> <span class=\"teal\">CouchClient</span>(\n    _web_url,\n    5984 );\n \n  <span class=\"teal\">CouchDatabase</span> db = client.GetDatabase(\n    _database_name, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">Document</span> doc = room.Document;\n \n  <span class=\"teal\">Element</span> projectInfo\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ProjectInfo</span> ) )\n      .FirstElement();\n \n  <span class=\"blue\">string</span> uid = projectInfo.UniqueId;\n \n  <span class=\"teal\">DbModel</span> dbModel;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbModel = db.GetDocument&lt;<span class=\"teal\">DbModel</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbModel.Id.Equals( projectInfo.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbModel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      projectInfo );\n \n    dbModel.Name = projectInfo.Document.Title;\n \n    dbModel = db.UpdateDocument&lt;<span class=\"teal\">DbModel</span>&gt;(\n      dbModel );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbModel = <span class=\"blue\">new</span> <span class=\"teal\">DbModel</span>();\n \n    dbModel.Id = uid;\n    dbModel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      projectInfo );\n \n    dbModel.Name = projectInfo.Name;\n    dbModel = db.CreateDocument&lt;<span class=\"teal\">DbModel</span>&gt;( dbModel );\n  }\n \n  <span class=\"teal\">Level</span> level = room.Level;\n \n  uid = level.UniqueId;\n \n  <span class=\"teal\">DbLevel</span> dbLevel;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbLevel = db.GetDocument&lt;<span class=\"teal\">DbLevel</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbLevel.Id.Equals( level.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbLevel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      level );\n \n    dbLevel.Name = level.Name;\n    dbLevel.ModelId = projectInfo.UniqueId;\n \n    dbLevel = db.UpdateDocument&lt;<span class=\"teal\">DbLevel</span>&gt;(\n      dbLevel );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbLevel = <span class=\"blue\">new</span> <span class=\"teal\">DbLevel</span>();\n \n    dbLevel.Id = uid;\n    dbLevel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      level );\n \n    dbLevel.Name = level.Name;\n    dbLevel.ModelId = projectInfo.UniqueId;\n \n    dbLevel = db.CreateDocument&lt;<span class=\"teal\">DbLevel</span>&gt;(\n      dbLevel );\n  }\n \n  uid = room.UniqueId;\n \n  <span class=\"teal\">DbRoom</span> dbRoom;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbRoom = db.GetDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbRoom.Id.Equals( room.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom.ViewBox = roomLoops.BoundingBox.SvgViewBox;\n \n    dbRoom = db.UpdateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbRoom = <span class=\"blue\">new</span> <span class=\"teal\">DbRoom</span>();\n \n    dbRoom.Id = uid;\n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom.ViewBox = roomLoops.BoundingBox.SvgViewBox;\n \n    dbRoom = db.CreateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">KeyValuePair</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; p <span class=\"blue\">in</span> furnitureLoops )\n  {\n    uid = p.Key;\n    <span class=\"teal\">Element</span> e = doc.GetElement( uid );\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbSymbol</span> symbol = db.GetDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;(\n        uid );\n \n      symbol.Description = <span class=\"teal\">Util</span>.ElementDescription( e );\n      symbol.Name = e.Name;\n      symbol.Loop = p.Value.SvgPath;\n \n      symbol = db.UpdateDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;( symbol );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbSymbol</span> symbol = <span class=\"blue\">new</span> <span class=\"teal\">DbSymbol</span>();\n      symbol.Id = uid;\n      symbol.Description = <span class=\"teal\">Util</span>.ElementDescription( e );\n      symbol.Name = e.Name;\n      symbol.Loop = p.Value.SvgPath;\n \n      symbol = db.CreateDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;( symbol );\n    }\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> f <span class=\"blue\">in</span> furniture )\n  {\n    uid = f.UniqueId;\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = db.GetDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;(\n        uid );\n \n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.SymbolId = f.Symbol.UniqueId;\n      dbf.Transform = <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f )\n        .SvgTransform;\n \n      dbf = db.UpdateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = <span class=\"blue\">new</span> <span class=\"teal\">DbFurniture</span>();\n      dbf.Id = uid;\n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.SymbolId = f.Symbol.UniqueId;\n      dbf.Transform = <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f )\n        .SvgTransform;\n \n      dbf = db.CreateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n  }\n}\n</pre>\n<a name=\"4\"></a>\n<h4>Integer Based 2D Placement</h4>\n<p>I implemented the following simple class to manage the 2D placement.</p>\n<p>It is based on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#2\">\n2D point class</a>,\n\nstoring the coordinate data in integers, for various reasons:</p>\n<ul>\n<li>Revit precision is no smaller than one sixteenth of an inch, ca. 1.2 mm.</li>\n<li>The data is stored in the cloud and rendered on a mobile device: the use of integers</li>\n<ul>\n<li>eliminates rounding issues,</li>\n<li>lowers the data volume,</li>\n<li>enhances performance,</li>\n<li>simplifies storage,</li>\n<li>improves human reading and understanding.</li>\n</ul>\n</ul>\n<p>Since I am already using millimetres for the length measurement, I find it fitting to store the rotation in degrees.\nThe SVG rendering expects degrees as input, anyway.</p>\n<p>Here is the class implementation:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A 2D integer-based transformation, </span>\n<span class=\"gray\">///</span><span class=\"green\"> i.e. translation and rotation.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtPlacement2dInt</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Translation.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point2dInt</span> Translation { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Rotation in degrees.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> Rotation { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The family symbol UniqueId.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SymbolId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"blue\">public</span> JtPlacement2dInt( <span class=\"teal\">FamilyInstance</span> fi )\n  {\n    <span class=\"teal\">LocationPoint</span> lp = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != lp,\n      <span class=\"maroon\">\"expected valid family instanace location point\"</span> );\n \n    Translation = <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( lp.Point );\n \n    Rotation = (<span class=\"blue\">int</span>) (\n      ( ( 180 * lp.Rotation ) + 0.5 ) / <span class=\"teal\">Math</span>.PI );\n \n    SymbolId = fi.Symbol.UniqueId;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return an SVG transform,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> either for native SVG or Raphael.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgTransform\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"R{2}T{0},{1}\"</span>,\n        <span class=\"green\">//\"translate({0},{1}) rotate({2})\",</span>\n        Translation.X, Translation.Y, Rotation );\n    }\n  }\n}\n</pre>\n<p>The placement is instantiated from a family instance, and returns a suitably formatted SVG transformation string, either for native SVG or the\n\n<a href=\"http://raphaeljs.com\">Raphaël</a> JavaScript SVG library.</p>\n<a name=\"5\"></a>\n<h4>Populating Symbols and Instances</h4>\n<p>To populate the symbol and instance data, I loop over all the instances exactly like I did previously.</p>\n<p>Now, instead of exporting the family instance boundary loop in situ, I transform it back to the symbol definition coordinate system instead, and save that in a dictionary mapping the family symbol UniqueId to its boundary loop.</p>\n<p>The family instance exports a reference to that symbol and its placement data:</p>\n<pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture\n    = GetFurniture( room );\n \n  <span class=\"green\">// Map symbol UniqueId to symbol loop</span>\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops\n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt;();\n \n  <span class=\"green\">// List of instances referring to symbols</span>\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt;(\n      furniture.Count );\n \n  <span class=\"blue\">int</span> nFailures;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> f <span class=\"blue\">in</span> furniture )\n  {\n    <span class=\"teal\">FamilySymbol</span> s = f.Symbol;\n \n    <span class=\"blue\">string</span> uid = s.UniqueId;\n \n    <span class=\"blue\">if</span>( !furnitureLoops.ContainsKey( uid ) )\n    {\n      nFailures = 0;\n \n      <span class=\"teal\">JtLoops</span> loops = GetPlanViewBoundaryLoops(\n        f, <span class=\"blue\">ref</span> nFailures );\n \n      <span class=\"blue\">if</span>( 0 &lt; nFailures )\n      {\n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} extrusion analyser failure{2}\"</span>,\n          <span class=\"teal\">Util</span>.ElementDescription( f ), nFailures,\n          <span class=\"teal\">Util</span>.PluralSuffix( nFailures ) );\n      }\n      ListLoops( f, loops );\n \n      <span class=\"blue\">if</span>( 0 &lt; loops.Count )\n      {\n        <span class=\"green\">// Assume first loop is outer one</span>\n \n        furnitureLoops.Add( uid, loops[0] );\n      }\n    }\n    furnitureInstances.Add(\n      <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f ) );\n  }\n</pre>\n<a name=\"6\"></a>\n<h4>Retrieving the Boundary Loops</h4>\n<p>The boundary loop retrieval has not changed very much, although the following significant enhancements were made:</p>\n<ul>\n<li>Store the symbol loop in the original symbol definition coordinate system.</li>\n<li>Store the instance transformation data.</li>\n<li>Manage the dictionary of symbols and the instances referencing them.</li>\n<li>Save intermediate tessellated curve points, not just start and end point. This functionality can be toggled on and off by setting the Boolean _tessellate_curves switch.</li>\n</ul>\n<p>The implementation is separated into two methods:</p>\n<ul>\n<li>AddLoops: add the plan view boundary loops from a given solid to the list of loops.</li>\n<li>GetPlanViewBoundaryLoops: Retrieve the plan view boundary loops from all solids of given element united together.\nIf the element is a family instance, transform its loops from the instance placement coordinate system back to the symbol definition one.</li>\n</ul>\n<p>Here is the implementation:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Add all plan view boundary loops from </span>\n<span class=\"gray\">///</span><span class=\"green\"> given solid to the list of loops.</span>\n<span class=\"gray\">///</span><span class=\"green\"> The creation application argument is used to</span>\n<span class=\"gray\">///</span><span class=\"green\"> reverse the extrusion analyser output curves</span>\n<span class=\"gray\">///</span><span class=\"green\"> in case they are badly oriented.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Number of loops added</span><span class=\"gray\">&lt;/returns&gt;</span>\n<span class=\"blue\">int</span> AddLoops(\n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp,\n  <span class=\"teal\">JtLoops</span> loops,\n  <span class=\"teal\">GeometryObject</span> obj,\n  <span class=\"blue\">ref</span> <span class=\"blue\">int</span> nExtrusionAnalysisFailures )\n{\n  <span class=\"blue\">int</span> nAdded = 0;\n \n  <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n    &amp;&amp; 0 &lt; solid.Faces.Size )\n  {\n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( <span class=\"teal\">XYZ</span>.BasisX,\n      <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.Zero );\n \n    <span class=\"teal\">ExtrusionAnalyzer</span> extrusionAnalyzer = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      extrusionAnalyzer = <span class=\"teal\">ExtrusionAnalyzer</span>.Create(\n        solid, plane, <span class=\"teal\">XYZ</span>.BasisZ );\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n      .<span class=\"teal\">InvalidOperationException</span> )\n    {\n      ++nExtrusionAnalysisFailures;\n      <span class=\"blue\">return</span> nAdded;\n    }\n \n    <span class=\"teal\">Face</span> face = extrusionAnalyzer\n      .GetExtrusionBase();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> a <span class=\"blue\">in</span> face.EdgeLoops )\n    {\n      <span class=\"blue\">int</span> nEdges = a.Size;\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt; curves\n        = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt;( nEdges );\n \n      <span class=\"teal\">XYZ</span> p0 = <span class=\"blue\">null</span>; <span class=\"green\">// loop start point</span>\n      <span class=\"teal\">XYZ</span> p; <span class=\"green\">// edge start point</span>\n      <span class=\"teal\">XYZ</span> q = <span class=\"blue\">null</span>; <span class=\"green\">// edge end point</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> a )\n      {\n        <span class=\"green\">// This returns the curves already</span>\n        <span class=\"green\">// correctly oriented:</span>\n \n        curve = e.AsCurveFollowingFace(\n          face );\n \n        <span class=\"blue\">if</span>( _debug_output )\n        {\n          p = curve.get_EndPoint( 0 );\n          q = curve.get_EndPoint( 1 );\n          <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} --&gt; {1} following face\"</span>,\n            <span class=\"teal\">Util</span>.PointString( p ),\n            <span class=\"teal\">Util</span>.PointString( q ) );\n        }\n \n        curves.Add( curve );\n      }\n \n      q = <span class=\"blue\">null</span>;\n \n      <span class=\"teal\">JtLoop</span> loop = <span class=\"blue\">new</span> <span class=\"teal\">JtLoop</span>( nEdges );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Curve</span> curve <span class=\"blue\">in</span> curves )\n      {\n        p = curve.get_EndPoint( 0 );\n \n        <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> == q\n          || q.IsAlmostEqualTo( p, 1e-05 ),\n          <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"expected last endpoint to equal current start point, not distance {0}\"</span>,\n            (<span class=\"blue\">null</span> == q ? 0 : p.DistanceTo( q ))  ) );\n \n        q = curve.get_EndPoint( 1 );\n \n        <span class=\"blue\">if</span>( _debug_output )\n        {\n          <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} --&gt; {1}\"</span>,\n            <span class=\"teal\">Util</span>.PointString( p ),\n            <span class=\"teal\">Util</span>.PointString( q ) );\n        }\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n        {\n          p0 = p; <span class=\"green\">// save loop start point</span>\n        }\n \n        <span class=\"blue\">int</span> n = -1;\n \n        <span class=\"blue\">if</span>( _tessellate_curves\n          &amp;&amp; _min_tessellation_curve_length_in_feet\n            &lt; q.DistanceTo( p ) )\n        {\n          <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = curve.Tessellate();\n          n = pts.Count;\n \n          <span class=\"teal\">Debug</span>.Assert( 1 &lt; n, <span class=\"maroon\">\"expected at least two points\"</span> );\n          <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( pts[0] ), <span class=\"maroon\">\"expected tessellation start equal curve start point\"</span> );\n          <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( pts[n-1] ), <span class=\"maroon\">\"expected tessellation end equal curve end point\"</span> );\n \n          <span class=\"blue\">if</span>( 2 == n )\n          {\n            n = -1; <span class=\"green\">// this is a straight line</span>\n          }\n          <span class=\"blue\">else</span>\n          {\n            --n; <span class=\"green\">// skip last point</span>\n \n            <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n            {\n              loop.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( pts[i] ) );\n            }\n          }\n        }\n \n        <span class=\"green\">// If tessellation is disabled,</span>\n        <span class=\"green\">// or curve is too short to tessellate,</span>\n        <span class=\"green\">// or has only two tessellation points,</span>\n        <span class=\"green\">// just add the start point:</span>\n \n        <span class=\"blue\">if</span>( -1 == n )\n        {\n          loop.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( p ) );\n        }\n      }\n      <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( p0, 1e-05 ),\n        <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"expected last endpoint to equal current start point, not distance {0}\"</span>,\n          p0.DistanceTo( q ) ) );\n \n      loops.Add( loop );\n \n      ++nAdded;\n    }\n  }\n  <span class=\"blue\">return</span> nAdded;\n}\n\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve all plan view boundary loops from </span>\n<span class=\"gray\">///</span><span class=\"green\"> all solids of given element united together.</span>\n<span class=\"gray\">///</span><span class=\"green\"> If the element is a family instance, transform</span>\n<span class=\"gray\">///</span><span class=\"green\"> its loops from the instance placement </span>\n<span class=\"gray\">///</span><span class=\"green\"> coordinate system back to the symbol </span>\n<span class=\"gray\">///</span><span class=\"green\"> definition one.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">JtLoops</span> GetPlanViewBoundaryLoops(\n  <span class=\"teal\">Element</span> e,\n  <span class=\"blue\">ref</span> <span class=\"blue\">int</span> nFailures )\n{\n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n    = e.Document.Application.Create;\n \n  <span class=\"teal\">JtLoops</span> loops = <span class=\"blue\">new</span> <span class=\"teal\">JtLoops</span>( 1 );\n \n  <span class=\"teal\">Options</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"teal\">Document</span> doc = e.Document;\n \n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      <span class=\"green\">// Retrieve family instance geometry </span>\n      <span class=\"green\">// transformed back to symbol definition</span>\n      <span class=\"green\">// coordinate space by inverting the </span>\n      <span class=\"green\">// family instance placement transformation</span>\n \n      <span class=\"teal\">LocationPoint</span> lp = e.Location\n        <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n      <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.get_Translation(\n        -lp.Point );\n \n      <span class=\"teal\">Transform</span> r = <span class=\"teal\">Transform</span>.get_Rotation(\n        lp.Point, <span class=\"teal\">XYZ</span>.BasisZ, -lp.Rotation );\n \n      geo = geo.GetTransformed( t * r );\n    }\n \n    <span class=\"teal\">Solid</span> union = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( <span class=\"teal\">XYZ</span>.BasisX,\n      <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.Zero );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"green\">// Some solids, e.g. in the standard </span>\n        <span class=\"green\">// content 'Furniture Chair - Office' </span>\n        <span class=\"green\">// cause an extrusion analyser failure,</span>\n        <span class=\"green\">// so skip adding those.</span>\n \n        <span class=\"blue\">try</span>\n        {\n          <span class=\"teal\">ExtrusionAnalyzer</span> extrusionAnalyzer\n            = <span class=\"teal\">ExtrusionAnalyzer</span>.Create(\n              solid, plane, <span class=\"teal\">XYZ</span>.BasisZ );\n        }\n        <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n          .<span class=\"teal\">InvalidOperationException</span> )\n        {\n          solid = <span class=\"blue\">null</span>;\n          ++nFailures;\n        }\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == union )\n          {\n            union = solid;\n          }\n          <span class=\"blue\">else</span>\n          {\n            union = <span class=\"teal\">BooleanOperationsUtils</span>\n              .ExecuteBooleanOperation( union, solid,\n                <span class=\"teal\">BooleanOperationsType</span>.Union );\n          }\n        }\n      }\n    }\n    AddLoops( creapp, loops, union, <span class=\"blue\">ref</span> nFailures );\n  }\n  <span class=\"blue\">return</span> loops;\n}\n</pre>\n<a name=\"7\"></a>\n<h4>GeoSnoop Loop Display</h4>\n<p>I obviously had to update my GeoSnoop display to take the symbol loop dictionary lookup into account.</p>\n<p>I invoke it passing in the room loops, symbol loops, and instance placements:</p>\n<pre class=\"code\">\n  <span class=\"teal\">GeoSnoop</span>.DisplayLoops( revit_window,\n    <span class=\"maroon\">\"Room and furniture\"</span>, roomLoops,\n    furnitureLoops, furnitureInstances );\n</pre>\n<p>The new implementation displays the instances at their respective location by transforming the referenced symbol geometry accordingly.</p>\n<p>I make use of two transformations:</p>\n<ul>\n<li>Matrix transform: Transform from native loop coordinate system to target display coordinates.</li>\n<li>Matrix placement: Additional transformation from symbol definition to instance location for placing an individual instance.</li>\n</ul>\n<p>It also takes the aspect ratio of the room to display into account and adjusts the window height to fit, based on the room bounding box aspect ratio:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Display a collection of loops in a .NET form.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">GeoSnoop</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Pen size.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _pen_size = 1;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Pen colour.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">Color</span> _pen_color = <span class=\"teal\">Color</span>.Black;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Margin around graphics.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _margin = 10;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Draw loops on graphics with the specified</span>\n  <span class=\"gray\">///</span><span class=\"green\"> transform and graphics attributes.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> DrawLoopsOnGraphics(\n    <span class=\"teal\">Graphics</span> graphics,\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt; loops,\n    <span class=\"teal\">Matrix</span> transform )\n  {\n    <span class=\"teal\">Pen</span> pen = <span class=\"blue\">new</span> <span class=\"teal\">Pen</span>( _pen_color, _pen_size );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Point</span>[] loop <span class=\"blue\">in</span> loops )\n    {\n      <span class=\"teal\">GraphicsPath</span> path = <span class=\"blue\">new</span> <span class=\"teal\">GraphicsPath</span>();\n \n      transform.TransformPoints( loop );\n \n      path.AddLines( loop );\n \n      graphics.DrawPath( pen, path );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Display loops in a temporary form generated</span>\n  <span class=\"gray\">///</span><span class=\"green\"> on the fly.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"owner\"&gt;</span><span class=\"green\">Owner window</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"caption\"&gt;</span><span class=\"green\">Form caption</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"loops\"&gt;</span><span class=\"green\">Boundary loops</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> DisplayLoops(\n    <span class=\"teal\">IWin32Window</span> owner,\n    <span class=\"blue\">string</span> caption,\n    <span class=\"teal\">JtLoops</span> roomLoops,\n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops,\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances )\n  {\n    <span class=\"teal\">JtBoundingBox2dInt</span> bb = roomLoops.BoundingBox;\n \n    <span class=\"green\">// Adjust target rectangle height to the </span>\n    <span class=\"green\">// displayee loop height.</span>\n \n    <span class=\"blue\">int</span> width = 400;\n    <span class=\"blue\">int</span> height = (<span class=\"blue\">int</span>) (width * bb.AspectRatio + 0.5);\n \n    <span class=\"green\">// Specify transformation target rectangle </span>\n    <span class=\"green\">// including a margin.</span>\n \n    <span class=\"blue\">int</span> bottom = height - (_margin + _margin);\n \n    <span class=\"teal\">Point</span>[] parallelogramPoints = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>[] {\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( _margin, bottom ), <span class=\"green\">// upper left</span>\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( width - _margin, bottom ), <span class=\"green\">// upper right</span>\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( _margin, _margin ) <span class=\"green\">// lower left</span>\n    };\n \n    <span class=\"green\">// Transform from native loop coordinate system</span>\n    <span class=\"green\">// to target display coordinates.</span>\n \n    <span class=\"teal\">Matrix</span> transform = <span class=\"blue\">new</span> <span class=\"teal\">Matrix</span>(\n      bb.Rectangle, parallelogramPoints );\n \n    <span class=\"teal\">Bitmap</span> bmp = <span class=\"blue\">new</span> <span class=\"teal\">Bitmap</span>( width, height );\n    <span class=\"teal\">Graphics</span> graphics = <span class=\"teal\">Graphics</span>.FromImage( bmp );\n \n    graphics.Clear( System.Drawing.<span class=\"teal\">Color</span>.White );\n \n    DrawLoopsOnGraphics( graphics,\n      roomLoops.GetGraphicsPathLines(), transform );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt;( 1 );\n    loops.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point</span>[] { } );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">JtPlacement2dInt</span> i <span class=\"blue\">in</span> furnitureInstances )\n    {\n      <span class=\"teal\">Point2dInt</span> v = i.Translation;\n      <span class=\"teal\">Matrix</span> placement = <span class=\"blue\">new</span> <span class=\"teal\">Matrix</span>();\n      placement.Rotate(i.Rotation);\n      placement.Translate(v.X, v.Y, <span class=\"teal\">MatrixOrder</span>.Append);\n      placement.Multiply( transform, <span class=\"teal\">MatrixOrder</span>.Append );\n      loops[0] = furnitureLoops[i.SymbolId]\n        .GetGraphicsPathLines();\n \n      DrawLoopsOnGraphics( graphics, loops, placement );\n    }\n \n    <span class=\"teal\">Form</span> form = <span class=\"blue\">new</span> <span class=\"teal\">Form</span>();\n    form.Text = caption;\n    form.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( width + 7, height + 13 );\n    form.FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>\n      .FixedToolWindow;\n \n    <span class=\"teal\">PictureBox</span> pb = <span class=\"blue\">new</span> <span class=\"teal\">PictureBox</span>();\n    pb.Location = <span class=\"blue\">new</span> System.Drawing.<span class=\"teal\">Point</span>( 0, 0 );\n    pb.Dock = System.Windows.Forms.<span class=\"teal\">DockStyle</span>.Fill;\n    pb.Size = bmp.Size;\n    pb.Parent = form;\n    pb.Image = bmp;\n \n    form.ShowDialog( owner );\n  }\n}\n</pre>\n<p>Still very short and sweet, isn't it?</p>\n<p>Here is the result of displaying a room from the advanced sample project provided with Revit:</p>\n<center>\n<img alt=\"Room with furniture\" src=\"img/room_with_furniture3.png\"/>\n</center>\n<p>Those eight straight lines in the corners are columns.\nI should eliminate those.\nWe don't want to move those around indiscriminately on a mobile device anyway, or the whole house might come crashing down around us.</p>\n<a name=\"8\"></a>\n<h4>Caveats</h4>\n<p>Rudolf Honke wrote in a reaction to my plan described last time:\n\n<p>You say that you want to avoid redundant geometry data in your cloud project:\n\n<p>As you know, it is possible to modify the geometry of an individual family instance by cutting voids off it.\nThe geometry of such an instance differs from other ones.\n\n<p>As far as I remember, modifying instance geometry this way has been possible since Revit 2012 or so; the API 2013 says:\n\n<p>\"FamilyInstance.GetOriginalGeometry: Returns the original geometry of the instance, before the instance is modified by joins, cuts, coping, extensions, or other post-processing.\"\n\n<p>Thus, there are at least three groups of elements to be handled:\n\n<ul>\n<li>Individual elements, such as walls – have individual geometry, cannot be reused</li>\n<li>Family instances which have not been modified – can be instantiated, geometry is reusable</li>\n<li>Family instances which are post-processed, resulting in individual geometry – not reusable</li>\n</ul>\n<p>In this case, I am only handling furniture and equipment instances that I do not expect to be modified.</p>\n<p>After all, the plan is to move them around in the room, so they have to be free of constraints for it to work.</p>\n<p>Still, these considerations obviously have to be taken into account for other applications.</p>\n<a name=\"9\"></a>\n<h4>Download</h4>\n<p>To wrap this up for the moment, here is\n\n<a href=\"zip/GeoSnoopSymbols.zip\">GeoSnoopSymbols.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the current state of this external command.\n\n<a name=\"10\"></a>\n<h4>Next Steps</h4>\n<p>My next steps will be:</p>\n<ul>\n<li>Migrate this add-in from Revit 2013 to 2014.</li>\n<li>Implement server-side generated SVG code to display the room and furniture plan in CouchDB using Kanso.</li>\n<li>Implement editing of SVG on the mobile device and reflect changes back to CouchDB (I know how now).</li>\n<li>Implement Idling event handler and polling of CouchDB in the desktop add-in to reflect the changes back to the BIM in real-time.</li>\n<li>Implement an external application wrapper for the add-in providing four commands:</li>\n<ul>\n<li>Upload to cloud</li>\n<li>Refresh from cloud</li>\n<li>Subscribe to cloud</li>\n<li>Unsubscribe from cloud</li>\n</ul>\n</ul>\n<p>I know exactly how to address all these points now, no exceptions left.\nYay!</p>\n<p>I look forward to hearing your comments and suggestions.</p>\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Database Upload",
    "local_header_href": "#database-upload",
    "chunk_text": "<h4>Database Upload</h4><p>The database upload has not changed very much from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html#6\">\nprevious version</a>,\n\nexcept that the model, level and symbol data is now added, and the furniture and equipment instances store their symbol reference and transformation:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Upload model, level, room and furniture data </span>\n<span class=\"gray\">///</span><span class=\"green\"> to an IrisCouch hosted CouchDB data repository.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">void</span> DbUploadRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture,\n  <span class=\"teal\">JtLoops</span> roomLoops,\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances )\n{\n  <span class=\"teal\">CouchClient</span> client = <span class=\"blue\">new</span> <span class=\"teal\">CouchClient</span>(\n    _web_url,\n    5984 );\n \n  <span class=\"teal\">CouchDatabase</span> db = client.GetDatabase(\n    _database_name, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">Document</span> doc = room.Document;\n \n  <span class=\"teal\">Element</span> projectInfo\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ProjectInfo</span> ) )\n      .FirstElement();\n \n  <span class=\"blue\">string</span> uid = projectInfo.UniqueId;\n \n  <span class=\"teal\">DbModel</span> dbModel;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbModel = db.GetDocument&lt;<span class=\"teal\">DbModel</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbModel.Id.Equals( projectInfo.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbModel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      projectInfo );\n \n    dbModel.Name = projectInfo.Document.Title;\n \n    dbModel = db.UpdateDocument&lt;<span class=\"teal\">DbModel</span>&gt;(\n      dbModel );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbModel = <span class=\"blue\">new</span> <span class=\"teal\">DbModel</span>();\n \n    dbModel.Id = uid;\n    dbModel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      projectInfo );\n \n    dbModel.Name = projectInfo.Name;\n    dbModel = db.CreateDocument&lt;<span class=\"teal\">DbModel</span>&gt;( dbModel );\n  }\n \n  <span class=\"teal\">Level</span> level = room.Level;\n \n  uid = level.UniqueId;\n \n  <span class=\"teal\">DbLevel</span> dbLevel;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbLevel = db.GetDocument&lt;<span class=\"teal\">DbLevel</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbLevel.Id.Equals( level.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbLevel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      level );\n \n    dbLevel.Name = level.Name;\n    dbLevel.ModelId = projectInfo.UniqueId;\n \n    dbLevel = db.UpdateDocument&lt;<span class=\"teal\">DbLevel</span>&gt;(\n      dbLevel );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbLevel = <span class=\"blue\">new</span> <span class=\"teal\">DbLevel</span>();\n \n    dbLevel.Id = uid;\n    dbLevel.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      level );\n \n    dbLevel.Name = level.Name;\n    dbLevel.ModelId = projectInfo.UniqueId;\n \n    dbLevel = db.CreateDocument&lt;<span class=\"teal\">DbLevel</span>&gt;(\n      dbLevel );\n  }\n \n  uid = room.UniqueId;\n \n  <span class=\"teal\">DbRoom</span> dbRoom;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbRoom = db.GetDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbRoom.Id.Equals( room.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom.ViewBox = roomLoops.BoundingBox.SvgViewBox;\n \n    dbRoom = db.UpdateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbRoom = <span class=\"blue\">new</span> <span class=\"teal\">DbRoom</span>();\n \n    dbRoom.Id = uid;\n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom.ViewBox = roomLoops.BoundingBox.SvgViewBox;\n \n    dbRoom = db.CreateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">KeyValuePair</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; p <span class=\"blue\">in</span> furnitureLoops )\n  {\n    uid = p.Key;\n    <span class=\"teal\">Element</span> e = doc.GetElement( uid );\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbSymbol</span> symbol = db.GetDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;(\n        uid );\n \n      symbol.Description = <span class=\"teal\">Util</span>.ElementDescription( e );\n      symbol.Name = e.Name;\n      symbol.Loop = p.Value.SvgPath;\n \n      symbol = db.UpdateDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;( symbol );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbSymbol</span> symbol = <span class=\"blue\">new</span> <span class=\"teal\">DbSymbol</span>();\n      symbol.Id = uid;\n      symbol.Description = <span class=\"teal\">Util</span>.ElementDescription( e );\n      symbol.Name = e.Name;\n      symbol.Loop = p.Value.SvgPath;\n \n      symbol = db.CreateDocument&lt;<span class=\"teal\">DbSymbol</span>&gt;( symbol );\n    }\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> f <span class=\"blue\">in</span> furniture )\n  {\n    uid = f.UniqueId;\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = db.GetDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;(\n        uid );\n \n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.SymbolId = f.Symbol.UniqueId;\n      dbf.Transform = <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f )\n        .SvgTransform;\n \n      dbf = db.UpdateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = <span class=\"blue\">new</span> <span class=\"teal\">DbFurniture</span>();\n      dbf.Id = uid;\n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.SymbolId = f.Symbol.UniqueId;\n      dbf.Transform = <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f )\n        .SvgTransform;\n \n      dbf = db.CreateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n  }\n}\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Integer Based 2D Placement",
    "local_header_href": "#integer-based-2d-placement",
    "chunk_text": "<h4>Integer Based 2D Placement</h4><p>I implemented the following simple class to manage the 2D placement.</p><p>It is based on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#2\">\n2D point class</a>,\n\nstoring the coordinate data in integers, for various reasons:</p><ul>\n<li>Revit precision is no smaller than one sixteenth of an inch, ca. 1.2 mm.</li>\n<li>The data is stored in the cloud and rendered on a mobile device: the use of integers</li>\n<ul>\n<li>eliminates rounding issues,</li>\n<li>lowers the data volume,</li>\n<li>enhances performance,</li>\n<li>simplifies storage,</li>\n<li>improves human reading and understanding.</li>\n</ul>\n</ul><p>Since I am already using millimetres for the length measurement, I find it fitting to store the rotation in degrees.\nThe SVG rendering expects degrees as input, anyway.</p><p>Here is the class implementation:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A 2D integer-based transformation, </span>\n<span class=\"gray\">///</span><span class=\"green\"> i.e. translation and rotation.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtPlacement2dInt</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Translation.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point2dInt</span> Translation { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Rotation in degrees.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> Rotation { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The family symbol UniqueId.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SymbolId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"blue\">public</span> JtPlacement2dInt( <span class=\"teal\">FamilyInstance</span> fi )\n  {\n    <span class=\"teal\">LocationPoint</span> lp = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != lp,\n      <span class=\"maroon\">\"expected valid family instanace location point\"</span> );\n \n    Translation = <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( lp.Point );\n \n    Rotation = (<span class=\"blue\">int</span>) (\n      ( ( 180 * lp.Rotation ) + 0.5 ) / <span class=\"teal\">Math</span>.PI );\n \n    SymbolId = fi.Symbol.UniqueId;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return an SVG transform,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> either for native SVG or Raphael.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgTransform\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"R{2}T{0},{1}\"</span>,\n        <span class=\"green\">//\"translate({0},{1}) rotate({2})\",</span>\n        Translation.X, Translation.Y, Rotation );\n    }\n  }\n}\n</pre><p>The placement is instantiated from a family instance, and returns a suitably formatted SVG transformation string, either for native SVG or the\n\n<a href=\"http://raphaeljs.com\">Raphaël</a> JavaScript SVG library.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Populating Symbols and Instances",
    "local_header_href": "#populating-symbols-and-instances",
    "chunk_text": "<h4>Populating Symbols and Instances</h4><p>To populate the symbol and instance data, I loop over all the instances exactly like I did previously.</p><p>Now, instead of exporting the family instance boundary loop in situ, I transform it back to the symbol definition coordinate system instead, and save that in a dictionary mapping the family symbol UniqueId to its boundary loop.</p><p>The family instance exports a reference to that symbol and its placement data:</p><pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture\n    = GetFurniture( room );\n \n  <span class=\"green\">// Map symbol UniqueId to symbol loop</span>\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops\n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt;();\n \n  <span class=\"green\">// List of instances referring to symbols</span>\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt;(\n      furniture.Count );\n \n  <span class=\"blue\">int</span> nFailures;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> f <span class=\"blue\">in</span> furniture )\n  {\n    <span class=\"teal\">FamilySymbol</span> s = f.Symbol;\n \n    <span class=\"blue\">string</span> uid = s.UniqueId;\n \n    <span class=\"blue\">if</span>( !furnitureLoops.ContainsKey( uid ) )\n    {\n      nFailures = 0;\n \n      <span class=\"teal\">JtLoops</span> loops = GetPlanViewBoundaryLoops(\n        f, <span class=\"blue\">ref</span> nFailures );\n \n      <span class=\"blue\">if</span>( 0 &lt; nFailures )\n      {\n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} extrusion analyser failure{2}\"</span>,\n          <span class=\"teal\">Util</span>.ElementDescription( f ), nFailures,\n          <span class=\"teal\">Util</span>.PluralSuffix( nFailures ) );\n      }\n      ListLoops( f, loops );\n \n      <span class=\"blue\">if</span>( 0 &lt; loops.Count )\n      {\n        <span class=\"green\">// Assume first loop is outer one</span>\n \n        furnitureLoops.Add( uid, loops[0] );\n      }\n    }\n    furnitureInstances.Add(\n      <span class=\"blue\">new</span> <span class=\"teal\">JtPlacement2dInt</span>( f ) );\n  }\n</pre><a name=\"6\"></a>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Retrieving the Boundary Loops",
    "local_header_href": "#retrieving-the-boundary-loops",
    "chunk_text": "<h4>Retrieving the Boundary Loops</h4><p>The boundary loop retrieval has not changed very much, although the following significant enhancements were made:</p><ul>\n<li>Store the symbol loop in the original symbol definition coordinate system.</li>\n<li>Store the instance transformation data.</li>\n<li>Manage the dictionary of symbols and the instances referencing them.</li>\n<li>Save intermediate tessellated curve points, not just start and end point. This functionality can be toggled on and off by setting the Boolean _tessellate_curves switch.</li>\n</ul><p>The implementation is separated into two methods:</p><ul>\n<li>AddLoops: add the plan view boundary loops from a given solid to the list of loops.</li>\n<li>GetPlanViewBoundaryLoops: Retrieve the plan view boundary loops from all solids of given element united together.\nIf the element is a family instance, transform its loops from the instance placement coordinate system back to the symbol definition one.</li>\n</ul><p>Here is the implementation:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Add all plan view boundary loops from </span>\n<span class=\"gray\">///</span><span class=\"green\"> given solid to the list of loops.</span>\n<span class=\"gray\">///</span><span class=\"green\"> The creation application argument is used to</span>\n<span class=\"gray\">///</span><span class=\"green\"> reverse the extrusion analyser output curves</span>\n<span class=\"gray\">///</span><span class=\"green\"> in case they are badly oriented.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Number of loops added</span><span class=\"gray\">&lt;/returns&gt;</span>\n<span class=\"blue\">int</span> AddLoops(\n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp,\n  <span class=\"teal\">JtLoops</span> loops,\n  <span class=\"teal\">GeometryObject</span> obj,\n  <span class=\"blue\">ref</span> <span class=\"blue\">int</span> nExtrusionAnalysisFailures )\n{\n  <span class=\"blue\">int</span> nAdded = 0;\n \n  <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n    &amp;&amp; 0 &lt; solid.Faces.Size )\n  {\n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( <span class=\"teal\">XYZ</span>.BasisX,\n      <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.Zero );\n \n    <span class=\"teal\">ExtrusionAnalyzer</span> extrusionAnalyzer = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      extrusionAnalyzer = <span class=\"teal\">ExtrusionAnalyzer</span>.Create(\n        solid, plane, <span class=\"teal\">XYZ</span>.BasisZ );\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n      .<span class=\"teal\">InvalidOperationException</span> )\n    {\n      ++nExtrusionAnalysisFailures;\n      <span class=\"blue\">return</span> nAdded;\n    }\n \n    <span class=\"teal\">Face</span> face = extrusionAnalyzer\n      .GetExtrusionBase();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> a <span class=\"blue\">in</span> face.EdgeLoops )\n    {\n      <span class=\"blue\">int</span> nEdges = a.Size;\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt; curves\n        = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt;( nEdges );\n \n      <span class=\"teal\">XYZ</span> p0 = <span class=\"blue\">null</span>; <span class=\"green\">// loop start point</span>\n      <span class=\"teal\">XYZ</span> p; <span class=\"green\">// edge start point</span>\n      <span class=\"teal\">XYZ</span> q = <span class=\"blue\">null</span>; <span class=\"green\">// edge end point</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> a )\n      {\n        <span class=\"green\">// This returns the curves already</span>\n        <span class=\"green\">// correctly oriented:</span>\n \n        curve = e.AsCurveFollowingFace(\n          face );\n \n        <span class=\"blue\">if</span>( _debug_output )\n        {\n          p = curve.get_EndPoint( 0 );\n          q = curve.get_EndPoint( 1 );\n          <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} --&gt; {1} following face\"</span>,\n            <span class=\"teal\">Util</span>.PointString( p ),\n            <span class=\"teal\">Util</span>.PointString( q ) );\n        }\n \n        curves.Add( curve );\n      }\n \n      q = <span class=\"blue\">null</span>;\n \n      <span class=\"teal\">JtLoop</span> loop = <span class=\"blue\">new</span> <span class=\"teal\">JtLoop</span>( nEdges );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Curve</span> curve <span class=\"blue\">in</span> curves )\n      {\n        p = curve.get_EndPoint( 0 );\n \n        <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> == q\n          || q.IsAlmostEqualTo( p, 1e-05 ),\n          <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"expected last endpoint to equal current start point, not distance {0}\"</span>,\n            (<span class=\"blue\">null</span> == q ? 0 : p.DistanceTo( q ))  ) );\n \n        q = curve.get_EndPoint( 1 );\n \n        <span class=\"blue\">if</span>( _debug_output )\n        {\n          <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} --&gt; {1}\"</span>,\n            <span class=\"teal\">Util</span>.PointString( p ),\n            <span class=\"teal\">Util</span>.PointString( q ) );\n        }\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n        {\n          p0 = p; <span class=\"green\">// save loop start point</span>\n        }\n \n        <span class=\"blue\">int</span> n = -1;\n \n        <span class=\"blue\">if</span>( _tessellate_curves\n          &amp;&amp; _min_tessellation_curve_length_in_feet\n            &lt; q.DistanceTo( p ) )\n        {\n          <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = curve.Tessellate();\n          n = pts.Count;\n \n          <span class=\"teal\">Debug</span>.Assert( 1 &lt; n, <span class=\"maroon\">\"expected at least two points\"</span> );\n          <span class=\"teal\">Debug</span>.Assert( p.IsAlmostEqualTo( pts[0] ), <span class=\"maroon\">\"expected tessellation start equal curve start point\"</span> );\n          <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( pts[n-1] ), <span class=\"maroon\">\"expected tessellation end equal curve end point\"</span> );\n \n          <span class=\"blue\">if</span>( 2 == n )\n          {\n            n = -1; <span class=\"green\">// this is a straight line</span>\n          }\n          <span class=\"blue\">else</span>\n          {\n            --n; <span class=\"green\">// skip last point</span>\n \n            <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n            {\n              loop.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( pts[i] ) );\n            }\n          }\n        }\n \n        <span class=\"green\">// If tessellation is disabled,</span>\n        <span class=\"green\">// or curve is too short to tessellate,</span>\n        <span class=\"green\">// or has only two tessellation points,</span>\n        <span class=\"green\">// just add the start point:</span>\n \n        <span class=\"blue\">if</span>( -1 == n )\n        {\n          loop.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( p ) );\n        }\n      }\n      <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( p0, 1e-05 ),\n        <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"expected last endpoint to equal current start point, not distance {0}\"</span>,\n          p0.DistanceTo( q ) ) );\n \n      loops.Add( loop );\n \n      ++nAdded;\n    }\n  }\n  <span class=\"blue\">return</span> nAdded;\n}\n\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve all plan view boundary loops from </span>\n<span class=\"gray\">///</span><span class=\"green\"> all solids of given element united together.</span>\n<span class=\"gray\">///</span><span class=\"green\"> If the element is a family instance, transform</span>\n<span class=\"gray\">///</span><span class=\"green\"> its loops from the instance placement </span>\n<span class=\"gray\">///</span><span class=\"green\"> coordinate system back to the symbol </span>\n<span class=\"gray\">///</span><span class=\"green\"> definition one.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">JtLoops</span> GetPlanViewBoundaryLoops(\n  <span class=\"teal\">Element</span> e,\n  <span class=\"blue\">ref</span> <span class=\"blue\">int</span> nFailures )\n{\n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n    = e.Document.Application.Create;\n \n  <span class=\"teal\">JtLoops</span> loops = <span class=\"blue\">new</span> <span class=\"teal\">JtLoops</span>( 1 );\n \n  <span class=\"teal\">Options</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"teal\">Document</span> doc = e.Document;\n \n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      <span class=\"green\">// Retrieve family instance geometry </span>\n      <span class=\"green\">// transformed back to symbol definition</span>\n      <span class=\"green\">// coordinate space by inverting the </span>\n      <span class=\"green\">// family instance placement transformation</span>\n \n      <span class=\"teal\">LocationPoint</span> lp = e.Location\n        <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n      <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.get_Translation(\n        -lp.Point );\n \n      <span class=\"teal\">Transform</span> r = <span class=\"teal\">Transform</span>.get_Rotation(\n        lp.Point, <span class=\"teal\">XYZ</span>.BasisZ, -lp.Rotation );\n \n      geo = geo.GetTransformed( t * r );\n    }\n \n    <span class=\"teal\">Solid</span> union = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( <span class=\"teal\">XYZ</span>.BasisX,\n      <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.Zero );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"green\">// Some solids, e.g. in the standard </span>\n        <span class=\"green\">// content 'Furniture Chair - Office' </span>\n        <span class=\"green\">// cause an extrusion analyser failure,</span>\n        <span class=\"green\">// so skip adding those.</span>\n \n        <span class=\"blue\">try</span>\n        {\n          <span class=\"teal\">ExtrusionAnalyzer</span> extrusionAnalyzer\n            = <span class=\"teal\">ExtrusionAnalyzer</span>.Create(\n              solid, plane, <span class=\"teal\">XYZ</span>.BasisZ );\n        }\n        <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n          .<span class=\"teal\">InvalidOperationException</span> )\n        {\n          solid = <span class=\"blue\">null</span>;\n          ++nFailures;\n        }\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == union )\n          {\n            union = solid;\n          }\n          <span class=\"blue\">else</span>\n          {\n            union = <span class=\"teal\">BooleanOperationsUtils</span>\n              .ExecuteBooleanOperation( union, solid,\n                <span class=\"teal\">BooleanOperationsType</span>.Union );\n          }\n        }\n      }\n    }\n    AddLoops( creapp, loops, union, <span class=\"blue\">ref</span> nFailures );\n  }\n  <span class=\"blue\">return</span> loops;\n}\n</pre><a name=\"7\"></a>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "GeoSnoop Loop Display",
    "local_header_href": "#geosnoop-loop-display",
    "chunk_text": "<h4>GeoSnoop Loop Display</h4><p>I obviously had to update my GeoSnoop display to take the symbol loop dictionary lookup into account.</p><p>I invoke it passing in the room loops, symbol loops, and instance placements:</p><pre class=\"code\">\n  <span class=\"teal\">GeoSnoop</span>.DisplayLoops( revit_window,\n    <span class=\"maroon\">\"Room and furniture\"</span>, roomLoops,\n    furnitureLoops, furnitureInstances );\n</pre><p>The new implementation displays the instances at their respective location by transforming the referenced symbol geometry accordingly.</p><p>I make use of two transformations:</p><ul>\n<li>Matrix transform: Transform from native loop coordinate system to target display coordinates.</li>\n<li>Matrix placement: Additional transformation from symbol definition to instance location for placing an individual instance.</li>\n</ul><p>It also takes the aspect ratio of the room to display into account and adjusts the window height to fit, based on the room bounding box aspect ratio:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Display a collection of loops in a .NET form.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">GeoSnoop</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Pen size.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _pen_size = 1;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Pen colour.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">Color</span> _pen_color = <span class=\"teal\">Color</span>.Black;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Margin around graphics.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _margin = 10;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Draw loops on graphics with the specified</span>\n  <span class=\"gray\">///</span><span class=\"green\"> transform and graphics attributes.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> DrawLoopsOnGraphics(\n    <span class=\"teal\">Graphics</span> graphics,\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt; loops,\n    <span class=\"teal\">Matrix</span> transform )\n  {\n    <span class=\"teal\">Pen</span> pen = <span class=\"blue\">new</span> <span class=\"teal\">Pen</span>( _pen_color, _pen_size );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Point</span>[] loop <span class=\"blue\">in</span> loops )\n    {\n      <span class=\"teal\">GraphicsPath</span> path = <span class=\"blue\">new</span> <span class=\"teal\">GraphicsPath</span>();\n \n      transform.TransformPoints( loop );\n \n      path.AddLines( loop );\n \n      graphics.DrawPath( pen, path );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Display loops in a temporary form generated</span>\n  <span class=\"gray\">///</span><span class=\"green\"> on the fly.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"owner\"&gt;</span><span class=\"green\">Owner window</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"caption\"&gt;</span><span class=\"green\">Form caption</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"loops\"&gt;</span><span class=\"green\">Boundary loops</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> DisplayLoops(\n    <span class=\"teal\">IWin32Window</span> owner,\n    <span class=\"blue\">string</span> caption,\n    <span class=\"teal\">JtLoops</span> roomLoops,\n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">JtLoop</span>&gt; furnitureLoops,\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtPlacement2dInt</span>&gt; furnitureInstances )\n  {\n    <span class=\"teal\">JtBoundingBox2dInt</span> bb = roomLoops.BoundingBox;\n \n    <span class=\"green\">// Adjust target rectangle height to the </span>\n    <span class=\"green\">// displayee loop height.</span>\n \n    <span class=\"blue\">int</span> width = 400;\n    <span class=\"blue\">int</span> height = (<span class=\"blue\">int</span>) (width * bb.AspectRatio + 0.5);\n \n    <span class=\"green\">// Specify transformation target rectangle </span>\n    <span class=\"green\">// including a margin.</span>\n \n    <span class=\"blue\">int</span> bottom = height - (_margin + _margin);\n \n    <span class=\"teal\">Point</span>[] parallelogramPoints = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>[] {\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( _margin, bottom ), <span class=\"green\">// upper left</span>\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( width - _margin, bottom ), <span class=\"green\">// upper right</span>\n      <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( _margin, _margin ) <span class=\"green\">// lower left</span>\n    };\n \n    <span class=\"green\">// Transform from native loop coordinate system</span>\n    <span class=\"green\">// to target display coordinates.</span>\n \n    <span class=\"teal\">Matrix</span> transform = <span class=\"blue\">new</span> <span class=\"teal\">Matrix</span>(\n      bb.Rectangle, parallelogramPoints );\n \n    <span class=\"teal\">Bitmap</span> bmp = <span class=\"blue\">new</span> <span class=\"teal\">Bitmap</span>( width, height );\n    <span class=\"teal\">Graphics</span> graphics = <span class=\"teal\">Graphics</span>.FromImage( bmp );\n \n    graphics.Clear( System.Drawing.<span class=\"teal\">Color</span>.White );\n \n    DrawLoopsOnGraphics( graphics,\n      roomLoops.GetGraphicsPathLines(), transform );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point</span>[]&gt;( 1 );\n    loops.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point</span>[] { } );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">JtPlacement2dInt</span> i <span class=\"blue\">in</span> furnitureInstances )\n    {\n      <span class=\"teal\">Point2dInt</span> v = i.Translation;\n      <span class=\"teal\">Matrix</span> placement = <span class=\"blue\">new</span> <span class=\"teal\">Matrix</span>();\n      placement.Rotate(i.Rotation);\n      placement.Translate(v.X, v.Y, <span class=\"teal\">MatrixOrder</span>.Append);\n      placement.Multiply( transform, <span class=\"teal\">MatrixOrder</span>.Append );\n      loops[0] = furnitureLoops[i.SymbolId]\n        .GetGraphicsPathLines();\n \n      DrawLoopsOnGraphics( graphics, loops, placement );\n    }\n \n    <span class=\"teal\">Form</span> form = <span class=\"blue\">new</span> <span class=\"teal\">Form</span>();\n    form.Text = caption;\n    form.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( width + 7, height + 13 );\n    form.FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>\n      .FixedToolWindow;\n \n    <span class=\"teal\">PictureBox</span> pb = <span class=\"blue\">new</span> <span class=\"teal\">PictureBox</span>();\n    pb.Location = <span class=\"blue\">new</span> System.Drawing.<span class=\"teal\">Point</span>( 0, 0 );\n    pb.Dock = System.Windows.Forms.<span class=\"teal\">DockStyle</span>.Fill;\n    pb.Size = bmp.Size;\n    pb.Parent = form;\n    pb.Image = bmp;\n \n    form.ShowDialog( owner );\n  }\n}\n</pre><p>Still very short and sweet, isn't it?</p><p>Here is the result of displaying a room from the advanced sample project provided with Revit:</p><center>\n<img alt=\"Room with furniture\" src=\"img/room_with_furniture3.png\"/>\n</center><p>Those eight straight lines in the corners are columns.\nI should eliminate those.\nWe don't want to move those around indiscriminately on a mobile device anyway, or the whole house might come crashing down around us.</p><a name=\"8\"></a>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Caveats",
    "local_header_href": "#caveats",
    "chunk_text": "<h4>Caveats</h4><p>Rudolf Honke wrote in a reaction to my plan described last time:\n\n<p>You say that you want to avoid redundant geometry data in your cloud project:\n\n<p>As you know, it is possible to modify the geometry of an individual family instance by cutting voids off it.\nThe geometry of such an instance differs from other ones.\n\n<p>As far as I remember, modifying instance geometry this way has been possible since Revit 2012 or so; the API 2013 says:\n\n<p>\"FamilyInstance.GetOriginalGeometry: Returns the original geometry of the instance, before the instance is modified by joins, cuts, coping, extensions, or other post-processing.\"\n\n<p>Thus, there are at least three groups of elements to be handled:\n\n<ul>\n<li>Individual elements, such as walls – have individual geometry, cannot be reused</li>\n<li>Family instances which have not been modified – can be instantiated, geometry is reusable</li>\n<li>Family instances which are post-processed, resulting in individual geometry – not reusable</li>\n</ul>\n<p>In this case, I am only handling furniture and equipment instances that I do not expect to be modified.</p>\n<p>After all, the plan is to move them around in the room, so they have to be free of constraints for it to work.</p>\n<p>Still, these considerations obviously have to be taken into account for other applications.</p>\n<a name=\"9\"></a>\n<h4>Download</h4>\n<p>To wrap this up for the moment, here is\n\n<a href=\"zip/GeoSnoopSymbols.zip\">GeoSnoopSymbols.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the current state of this external command.\n\n<a name=\"10\"></a>\n<h4>Next Steps</h4>\n<p>My next steps will be:</p>\n<ul>\n<li>Migrate this add-in from Revit 2013 to 2014.</li>\n<li>Implement server-side generated SVG code to display the room and furniture plan in CouchDB using Kanso.</li>\n<li>Implement editing of SVG on the mobile device and reflect changes back to CouchDB (I know how now).</li>\n<li>Implement Idling event handler and polling of CouchDB in the desktop add-in to reflect the changes back to the BIM in real-time.</li>\n<li>Implement an external application wrapper for the add-in providing four commands:</li>\n<ul>\n<li>Upload to cloud</li>\n<li>Refresh from cloud</li>\n<li>Subscribe to cloud</li>\n<li>Unsubscribe from cloud</li>\n</ul>\n</ul>\n<p>I know exactly how to address all these points now, no exceptions left.\nYay!</p>\n<p>I look forward to hearing your comments and suggestions.</p>\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>To wrap this up for the moment, here is\n\n<a href=\"zip/GeoSnoopSymbols.zip\">GeoSnoopSymbols.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the current state of this external command.\n\n<a name=\"10\"></a>\n<h4>Next Steps</h4>\n<p>My next steps will be:</p>\n<ul>\n<li>Migrate this add-in from Revit 2013 to 2014.</li>\n<li>Implement server-side generated SVG code to display the room and furniture plan in CouchDB using Kanso.</li>\n<li>Implement editing of SVG on the mobile device and reflect changes back to CouchDB (I know how now).</li>\n<li>Implement Idling event handler and polling of CouchDB in the desktop add-in to reflect the changes back to the BIM in real-time.</li>\n<li>Implement an external application wrapper for the add-in providing four commands:</li>\n<ul>\n<li>Upload to cloud</li>\n<li>Refresh from cloud</li>\n<li>Subscribe to cloud</li>\n<li>Unsubscribe from cloud</li>\n</ul>\n</ul>\n<p>I know exactly how to address all these points now, no exceptions left.\nYay!</p>\n<p>I look forward to hearing your comments and suggestions.</p>\n</p>"
  },
  {
    "original_filename": "0936_room_loops_symbols",
    "header_text": "Next Steps",
    "local_header_href": "#next-steps",
    "chunk_text": "<h4>Next Steps</h4><p>My next steps will be:</p><ul>\n<li>Migrate this add-in from Revit 2013 to 2014.</li>\n<li>Implement server-side generated SVG code to display the room and furniture plan in CouchDB using Kanso.</li>\n<li>Implement editing of SVG on the mobile device and reflect changes back to CouchDB (I know how now).</li>\n<li>Implement Idling event handler and polling of CouchDB in the desktop add-in to reflect the changes back to the BIM in real-time.</li>\n<li>Implement an external application wrapper for the add-in providing four commands:</li>\n<ul>\n<li>Upload to cloud</li>\n<li>Refresh from cloud</li>\n<li>Subscribe to cloud</li>\n<li>Unsubscribe from cloud</li>\n</ul>\n</ul><p>I know exactly how to address all these points now, no exceptions left.\nYay!</p><p>I look forward to hearing your comments and suggestions.</p>"
  }
]