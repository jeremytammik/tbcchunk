[
  {
    "original_filename": "1742_asstringvalue_batch",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n\n</head>\n\n<!---\n\n15302696 [Revit API]\n15302918 [Parameter values are different into method AsValueString() and AsString()]\n  \ntwitter:\n\nBatch processing and aspects of AsStringValue in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/asstringvalue\n\nI avoid answering non-confidential questions in private, as I tell everyone who tries to do so.\nHowever, some non-confidential queries still come in via ADN.\nHere are two that came in today that might be of general interest and therefore seem worth sharing\n&ndash; Batch processing Revit families and documents\n&ndash; <code>AsString</code> and <code>AsValueString</code> results differ...\n\nlinkedin:\n\nBatch processing and aspects of AsStringValue in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon #Revit #API\n\nhttp://bit.ly/asstringvalue\n\nI avoid answering non-confidential questions in private, as I tell everyone who tries to do so.\n\nHowever, some non-confidential queries still come in via ADN.\n\nHere are two that came in today that might be of general interest and therefore seem worth sharing\n\n- Batch processing Revit families and documents\n- AsString and AsValueString results differ...\n\n\n-->"
  },
  {
    "original_filename": "1742_asstringvalue_batch",
    "header_text": "Batch Processing and Aspects of AsStringValue",
    "local_header_href": "#batch-processing-and-aspects-of-asstringvalue",
    "chunk_text": "### Batch Processing and Aspects of AsStringValue\n\nI avoid answering non-confidential questions in private, as I tell everyone who tries to do so.\n\nHowever, some non-confidential queries still come in via ADN, the Autodesk Developer Network.\n\nHere are two that came in today that might be of general interest and therefore seem worth sharing:\n\n- [Batch processing Revit families and documents](#2) \n- [`AsString` and `AsValueString` results differ](#3)"
  },
  {
    "original_filename": "1742_asstringvalue_batch",
    "header_text": "Batch Processing Revit Families and Documents",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Batch Processing Revit Families and Documents\n\n**Question:** Revit 2019 is leaking memory when importing families.\nWe need to do this 1000s of times using automation.\nIt is a blocking issue.\n\nPlease can you advise?\n\n**Answer:** Revit on the desktop is an end user product designed for manual use through the manual user interface.\n\nIf you are using it to perform any kind of operation thousands of times, you are using it in an unexpected manner.\n\nYou should not be surprised if you run into problems eventually.\n\nThe standard method to handle such tasks is something like this:\n\n- Keep exact track of processing so you always know what has been processed so far and what still need to be done.\n- Monitor the process health.\n- Shut down, restart and continue where you left off if the process starts deteriorating or terminates.\n\nHere is more on the topic of using Revit as a server\nfor [batch processing Revit documents](http://thebuildingcoder.typepad.com/blog/2015/08/batch-processing-dwfx-links-and-future-proofing.html#4).\n\nHowever, [Revit is not designed to be used as a server](https://thebuildingcoder.typepad.com/blog/2016/04/fireratingcloud-context-and-architecture.html#3), and the EULA actually prohibits such use.\n\nA better and more robust alternative nowadays that also saves you the maintenance of a local Revit installation and enables integration of your batch processing into other web-based workflows is to perform your batch processing using\nthe [Forge Design Automation API for Revit](https://forge.autodesk.com/en/docs/design-automation/v3/developers_guide/overview).\n\nHere are more articles describing specific aspects\nof [DA4R, or Design Automation for Revit](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.55)"
  },
  {
    "original_filename": "1742_asstringvalue_batch",
    "header_text": "AsString and AsValueString Results Differ",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> AsString and AsValueString Results Differ\n\n**Question:** I am running into a problem using `AsValuesString` and `AsString`.\n\nThey return different values.\n\nFor instance, a view has a parameter named \"Sheet Number\".\nIts storage type is string.\n`AsValueString` returns a blank value for it, whereas `AsString` returns \"---\":\n\n<center>\n<img src=\"img/asvaluestring_sheet_number.png\" alt=\"Sheet number\" width=\"600\">\n</center>\n\nSimilarly for the Duct Accessory parameter \"Loss Method\":\n\n<center>\n<img src=\"img/asvaluestring_loss_method.png\" alt=\"Loss method\" width=\"600\">\n</center>\n\nThe same problem occurs with many other element and parameters.\n\nIs there a way to identify which value is correct and to identify which method to use to always to get the correct value?\n\nI am running into the issue exporting schedule data to Excel. In some cases, I export a blank value for a non-blank data item.\n\nWhen importing back the data, I cannot determine whether the user modified it or it was incorrectly exported.\n\n**Answer:** The Revit Parameter class has\na [storage type](https://apidocs.co/apps/revit/2019/3dbebcb8-792b-a3dd-fe63-faaa05704f3c.htm) that\ncan take one of the following values:\n\n- None &ndash; None represents an invalid storage type. This value should not be used.\n- Integer &ndash; The internal data is stored in the form of a signed 32-bit integer.\n- Double &ndash; The data will be stored internally in the form of an 8-byte floating point number.\n- String &ndash; The internal data will be stored in the form of a string of characters.\n- ElementId &ndash; The data type represents an element and is stored as the id of the element.\n\nCorresponding to the four valid storage types, there are four accessors to read the stored value from the database:\n\n- `AsDouble` &ndash; Provides access to the double precision number within the parameter.\n- `AsElementId` &ndash; Provides access to the Autodesk::Revit::DB::ElementId^ stored within the parameter.\n- `AsInteger` &ndash; Provides access to the integer number within the parameter.\n- `AsString` &ndash; Provides access to the string contents of the parameter.\n\nUse those four, and you will have no problem.\n\n`AsValueString` is a completely different creature that returns the parameter value as a string with units, like the user would see it.\n\nIt may perform complex conversions while rendering the string.\n\nFurthermore, a string-valued parameter value can only be retrieved using `AsString`, and `AsValueString` returns an empty string for it, as you already noticed.\n\nI would avoid using `AsValueString` at all in your situation, and keep track of the parameter storage type as well as its value."
  }
]