[
  {
    "original_filename": "0694_avf_hilite_rooms",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0694_avf_hilite_rooms",
    "header_text": "Using AVF to Display Intersections and Highlight Rooms",
    "local_header_href": "#using-avf-to-display-intersections-and-highlight-rooms",
    "chunk_text": "<h3>Using AVF to Display Intersections and Highlight Rooms</h3><p>We held a DevLab in Gothenburg yesterday with lots of interesting things to discuss with our Scandinavian developer guests.\nToday we are in Munich, Germany.\nSo is \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2011/12/back-in-munich.html\">Kean</a>  :-)\n\n<p>One of the topics that came up yesterday is a thing I have been wanting to write about for over a year now and never gotten around to, the use of the AVF or Analysis Visualisation Framework to display temporary geometry to the user.\n\n<p>I used it myself to display a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html\">\nlive webcam image on a building element</a>,\n\nand Saikat used it in the AVF part of his \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/structural-dynamic-model-update-sample.html\">\nstructural AVF and DMU sample</a>,\n\nalthough I only documented the DMU or Dynamic Model Update aspect of it in detail.\n\n<p>This kind of use of the AVF is also demonstrated by the Revit SDK sample GeometryCreation_BooleanOperation. \nIt creates geometry solids using the GeometryCreationUtils and BooleanOperationUtils classes and displays them in a view using AVF.\n\n\n<a name=\"2\"></a>\n<h4>FindColumns Using Geometry Creation and Booleans</h4>\n<p>Transient AVF visualisation was used very impressively in the presentation of new geometry functionality at the developer conferences last year. \n\n<!--\n385_devcamp_whats_new.htm:<li><a href=\"http://thebuildingcoder.typepad.com/blog/\n2010/01/findreferencesbydirection.html\">FindColumns</a>\n572_devdays_online.htm:<li>Updated version of the FindColumns SDK sample, using\nnew geometry and AVF API features instead of FindReferencesByDirection to find a\nnd display all intersections between walls and columns.\n694_avf_hilite_rooms.htm:You may and should be aware of the FindColumns example\nof using the FindReferencesByDirection method to determine collisions between wa\nlls and columns.\n-->\n\nYou may and should be aware of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/findreferencesbydirection.html\">FindColumns</a>\n\nexample of using the FindReferencesByDirection method to determine collisions between walls and columns in a situation like this:</p>\n<center>\n<img alt=\"Wall and column intersections\" src=\"img/wall_column_intersections.png\" width=\"400\"/>\n</center>\n<p>As I mentioned in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/devdays-2010-online-with-revit-2012-api-news.html#3\">\nDevDays 2010 Online with Revit 2012 API news</a>,\n\nit was converted to use the exact wall and column geometry instead of the original approximate ray tracing approach, and the results are displayed exactly by hiding the wall and column categories in the view and displaying their intersection solids using AVF instead.\n\n<p>It defines two commands:\n\n<ul>\n<li>HighlightIntersectionsCommand to determine and display the intersections, and \n<li>RestoreViewCommand to restore the view afterwards, i.e. reset the wall and column category visibility in the view.\n</li></li></ul>\n<p>Here is the original 3D view of the situation:</p>\n<center>\n<img alt=\"3D view of wall and column intersections\" src=\"img/wall_column_intersections_3d.png\"/>\n</center>\n<p>Running HighlightIntersectionsCommand performs the following steps:\n\n<ul>\n<li>Hide the wall and column categories in the current view.\n<li>Set up an AVF view.\n<li>Collect all walls and column elements.\n<li>Query them for their solid geometry.\n<li>Calculate their intersections.\n<li>List and display the results.\n</li></li></li></li></li></li></ul>\n<p>Here is the list of the resulting intersections:</p>\n<center>\n<img alt=\"Wall and column intersection results\" src=\"img/wall_column_intersections_result.png\"/>\n</center>\n<p>This is what the intersection geometry looks like in AVF:</p>\n<center>\n<img alt=\"Wall and column intersection solids in AVF\" src=\"img/wall_column_intersections_avf.png\"/>\n</center>\n<p>As said, you can call RestoreViewCommand afterwards to restore the view by resetting the wall and column category visibility in the view.\n\n<p>For your reference, here is \n\n<a href=\"zip/Geometry2012.zip\">Geometry2012.zip</a> containing the C# sample code and Visual Studio solution together the suitable sample model to run it in.\n\n<p>So all of that is really important stuff from last year that I have been dying to publish for such a long time and never gotten around to.\nFinally!\n\n\n<a name=\"3\"></a>\n<h4>Highlight Rooms Using AVF in VB</h4>\n<p>I passed the geometry sample on to Betina Mette Zimmermann of \n\n<a href=\"http://www.nti.dk\">\nNTI CAD Center A/S</a> in \n\nDenmark, and she converted it to VB and modified it to highlight the room geometry returned by the Room.ClosedShell method instead of wall and column intersections within half an hour:\n\n<pre class=\"code\">\n<span class=\"blue\">#Region</span> <span class=\"maroon\">\"Namespaces\"</span>\n<span class=\"blue\">Imports</span> System\n<span class=\"blue\">Imports</span> System.Collections.Generic\n<span class=\"blue\">Imports</span> Autodesk.Revit.ApplicationServices\n<span class=\"blue\">Imports</span> Autodesk.Revit.Attributes\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB.Analysis\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB.Architecture\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI.Selection\n<span class=\"blue\">#End</span> <span class=\"blue\">Region</span>\n \n&lt;<span class=\"teal\">Transaction</span>(<span class=\"teal\">TransactionMode</span>.Manual)&gt;\n<span class=\"blue\">Public</span> <span class=\"blue\">Class</span> <span class=\"teal\">Command</span>\n  <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>\n \n  <span class=\"blue\">Private</span> schemaId <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> = -1\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute(\n    <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>,\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>,\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> <span class=\"teal\">ElementSet</span>) _\n  <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n \n    <span class=\"blue\">Dim</span> uidoc <span class=\"blue\">As</span> <span class=\"teal\">UIDocument</span> = commandData.Application.ActiveUIDocument\n    <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span> = uidoc.Document\n \n    <span class=\"blue\">Dim</span> transaction <span class=\"blue\">As</span> <span class=\"teal\">Transaction</span> = <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n \n    <span class=\"blue\">Try</span>\n      <span class=\"blue\">Dim</span> col <span class=\"blue\">As</span> <span class=\"teal\">FilteredElementCollector</span> _\n        = <span class=\"blue\">New</span> <span class=\"teal\">FilteredElementCollector</span>(uidoc.Document)\n \n      col.WhereElementIsNotElementType.ToElements()\n      col.OfCategory(<span class=\"teal\">BuiltInCategory</span>.OST_Rooms)\n \n \n      <span class=\"blue\">Dim</span> value <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = 1.0\n      <span class=\"blue\">For</span> <span class=\"blue\">Each</span> room <span class=\"blue\">As</span> <span class=\"teal\">Room</span> <span class=\"blue\">In</span> col\n        <span class=\"blue\">Dim</span> geo <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span> = room.ClosedShell()\n        <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = GetGeometry(geo)\n        <span class=\"blue\">If</span> <span class=\"blue\">Not</span> solid <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n          PaintSolid(doc, solid, value)\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        value = value + 1\n      <span class=\"blue\">Next</span>\n \n      transaction.Start(<span class=\"maroon\">\"Hide Walls\"</span>)\n \n      <span class=\"blue\">Dim</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span> _\n        = uidoc.Document.Settings.Categories\n \n      SetCategoryInvisible( _\n        categories, <span class=\"teal\">BuiltInCategory</span>.OST_Walls,\n        uidoc.ActiveView)\n \n      transaction.Commit()\n \n      <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n \n    <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> <span class=\"teal\">Exception</span>\n      message = ex.Message\n      <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Failed\n    <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Sub</span> SetCategoryInvisible( _\n    <span class=\"blue\">ByVal</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span>, _\n    <span class=\"blue\">ByVal</span> bic <span class=\"blue\">As</span> <span class=\"teal\">BuiltInCategory</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>)\n \n    SetCategoryVisibility(categories, bic, view, <span class=\"blue\">False</span>)\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Sub</span> SetCategoryVisibility( _\n    <span class=\"blue\">ByVal</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span>, _\n    <span class=\"blue\">ByVal</span> bic <span class=\"blue\">As</span> <span class=\"teal\">BuiltInCategory</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>, _\n    <span class=\"blue\">ByVal</span> visible <span class=\"blue\">As</span> <span class=\"blue\">Boolean</span>)\n \n    <span class=\"blue\">Dim</span> category <span class=\"blue\">As</span> <span class=\"teal\">Category</span> = categories.Item(bic)\n    category.Visible(view) = visible\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> GetGeometry( _\n    <span class=\"blue\">ByVal</span> geomElem <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span>) <span class=\"blue\">As</span> <span class=\"teal\">Solid</span>\n \n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> geomObj <span class=\"blue\">As</span> <span class=\"teal\">GeometryObject</span> <span class=\"blue\">In</span> geomElem.Objects\n \n      <span class=\"green\">' Walls and some columns will have a solid </span>\n      <span class=\"green\">' directly in its geometry</span>\n \n      <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> geomObj <span class=\"blue\">Is</span> <span class=\"teal\">Solid</span> <span class=\"blue\">Then</span>\n        <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = <span class=\"blue\">DirectCast</span>(geomObj, <span class=\"teal\">Solid</span>)\n        <span class=\"blue\">If</span> solid.Volume &gt; 0 <span class=\"blue\">Then</span>\n          <span class=\"blue\">Return</span> solid\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n      <span class=\"green\">' Some columns will have a instance </span>\n      <span class=\"green\">' pointing to symbol geometry</span>\n \n      <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> geomObj <span class=\"blue\">Is</span> <span class=\"teal\">GeometryInstance</span> <span class=\"blue\">Then</span>\n \n        <span class=\"blue\">Dim</span> geomInst <span class=\"blue\">As</span> <span class=\"teal\">GeometryInstance</span> _\n          = <span class=\"blue\">DirectCast</span>(geomObj, <span class=\"teal\">GeometryInstance</span>)\n \n        <span class=\"green\">' Instance geometry is obtained so that the </span>\n        <span class=\"green\">' intersection works as expected without </span>\n        <span class=\"green\">' requiring transformation</span>\n \n        <span class=\"blue\">Dim</span> instElem <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span> _\n          = geomInst.GetInstanceGeometry()\n \n        <span class=\"blue\">For</span> <span class=\"blue\">Each</span> instObj <span class=\"blue\">As</span> <span class=\"teal\">GeometryObject</span> <span class=\"blue\">In</span> instElem.Objects\n          <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> instObj <span class=\"blue\">Is</span> <span class=\"teal\">Solid</span> <span class=\"blue\">Then</span>\n            <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = <span class=\"blue\">DirectCast</span>(instObj, <span class=\"teal\">Solid</span>)\n            <span class=\"blue\">If</span> solid.Volume &gt; 0 <span class=\"blue\">Then</span>\n              <span class=\"blue\">Return</span> solid\n            <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">Next</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">Next</span>\n    <span class=\"blue\">Return</span> <span class=\"blue\">Nothing</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> PaintSolid( _\n    <span class=\"blue\">ByVal</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>, _\n    <span class=\"blue\">ByVal</span> s <span class=\"blue\">As</span> <span class=\"teal\">Solid</span>, _\n    <span class=\"blue\">ByVal</span> value <span class=\"blue\">As</span> <span class=\"blue\">Double</span>)\n \n    <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> <span class=\"teal\">Application</span> = doc.Application\n \n    <span class=\"blue\">Dim</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span> = doc.ActiveView\n \n    <span class=\"blue\">If</span> view.AnalysisDisplayStyleId _\n      = <span class=\"teal\">ElementId</span>.InvalidElementId <span class=\"blue\">Then</span>\n \n      CreateAVFDisplayStyle(doc, view)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Dim</span> sfm <span class=\"blue\">As</span> <span class=\"teal\">SpatialFieldManager</span> _\n      = <span class=\"teal\">SpatialFieldManager</span>.GetSpatialFieldManager(view)\n \n    <span class=\"blue\">If</span> sfm <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n      sfm = <span class=\"teal\">SpatialFieldManager</span> _\n        .CreateSpatialFieldManager(view, 1)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">If</span> schemaId &lt;&gt; -1 <span class=\"blue\">Then</span>\n      <span class=\"blue\">Dim</span> results <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"blue\">Integer</span>) _\n        = sfm.GetRegisteredResults()\n \n      <span class=\"blue\">If</span> <span class=\"blue\">Not</span> results.Contains(schemaId) <span class=\"blue\">Then</span>\n        schemaId = -1\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">If</span> schemaId = -1 <span class=\"blue\">Then</span>\n      <span class=\"blue\">Dim</span> resultSchema1 <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">AnalysisResultSchema</span>( _\n        <span class=\"maroon\">\"PaintedSolid\"</span>, <span class=\"maroon\">\"Description\"</span>)\n \n      schemaId = sfm.RegisterResult(resultSchema1)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Dim</span> faces <span class=\"blue\">As</span> <span class=\"teal\">FaceArray</span> = s.Faces\n    <span class=\"blue\">Dim</span> trf <span class=\"blue\">As</span> <span class=\"teal\">Transform</span> = <span class=\"teal\">Transform</span>.Identity\n \n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> face <span class=\"blue\">As</span> <span class=\"teal\">Face</span> <span class=\"blue\">In</span> faces\n      <span class=\"blue\">Dim</span> idx <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> _\n        = sfm.AddSpatialFieldPrimitive(face, trf)\n \n      <span class=\"blue\">Dim</span> uvPts <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"teal\">UV</span>) = <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"teal\">UV</span>)()\n      <span class=\"blue\">Dim</span> doubleList <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"blue\">Double</span>)()\n \n      <span class=\"blue\">Dim</span> valList <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"teal\">ValueAtPoint</span>) _\n        = <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"teal\">ValueAtPoint</span>)()\n \n      <span class=\"blue\">Dim</span> bb <span class=\"blue\">As</span> <span class=\"teal\">BoundingBoxUV</span> = face.GetBoundingBox()\n      uvPts.Add(bb.Min)\n      doubleList.Add(value)\n      valList.Add(<span class=\"blue\">New</span> <span class=\"teal\">ValueAtPoint</span>(doubleList))\n      <span class=\"blue\">Dim</span> pnts <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">FieldDomainPointsByUV</span>(uvPts)\n      <span class=\"blue\">Dim</span> vals <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">FieldValues</span>(valList)\n \n      sfm.UpdateSpatialFieldPrimitive( _\n        idx, pnts, vals, schemaId)\n    <span class=\"blue\">Next</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> CreateAVFDisplayStyle( _\n    <span class=\"blue\">ByVal</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>)\n \n    <span class=\"blue\">Dim</span> t <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n    t.Start(<span class=\"maroon\">\"Create AVF Style\"</span>)\n \n    <span class=\"blue\">Dim</span> coloredSurfaceSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayColoredSurfaceSettings</span>()\n \n    coloredSurfaceSettings.ShowGridLines = <span class=\"blue\">True</span>\n \n    <span class=\"blue\">Dim</span> colorSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayColorSettings</span>()\n \n    <span class=\"blue\">Dim</span> legendSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayLegendSettings</span>()\n \n    legendSettings.ShowLegend = <span class=\"blue\">False</span>\n \n    <span class=\"blue\">Dim</span> analysisDisplayStyle <span class=\"blue\">As</span> <span class=\"teal\">AnalysisDisplayStyle</span> _\n      = analysisDisplayStyle.CreateAnalysisDisplayStyle( _\n        doc, <span class=\"maroon\">\"Paint Solid\"</span>, coloredSurfaceSettings, _\n        colorSettings, legendSettings)\n \n    view.AnalysisDisplayStyleId = analysisDisplayStyle.Id\n \n    t.Commit()\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n<span class=\"blue\">End</span> <span class=\"blue\">Class</span>\n</pre>\n<p>To test this, I created the following Revit model of a cow hotel, implemented according to a design suggested by Jim Quanci in the Gothenburg airport:</p>\n<center>\n<img alt=\"Jim's cow hotel\" src=\"img/highlight_rooms_cow_hotel.png\"/>\n</center>\n<p>Here are the resulting highlighted rooms using AVF:</p>\n<center>\n<img alt=\"Cow hotel rooms highlighted\" src=\"img/highlight_rooms_cow_hotel_shaded.png\"/>\n</center>\n<p>Here is \n\n<a href=\"zip/HighlightRooms.zip\">HighlightRooms.zip</a> containing \n\nthe VB code and complete Visual Studio solution for this command.\n\n<p>Many thanks to Betina for implementing and sharing this!\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0694_avf_hilite_rooms",
    "header_text": "FindColumns Using Geometry Creation and Booleans",
    "local_header_href": "#findcolumns-using-geometry-creation-and-booleans",
    "chunk_text": "<h4>FindColumns Using Geometry Creation and Booleans</h4><p>Transient AVF visualisation was used very impressively in the presentation of new geometry functionality at the developer conferences last year. \n\n<!--\n385_devcamp_whats_new.htm:<li><a href=\"http://thebuildingcoder.typepad.com/blog/\n2010/01/findreferencesbydirection.html\">FindColumns</a>\n572_devdays_online.htm:<li>Updated version of the FindColumns SDK sample, using\nnew geometry and AVF API features instead of FindReferencesByDirection to find a\nnd display all intersections between walls and columns.\n694_avf_hilite_rooms.htm:You may and should be aware of the FindColumns example\nof using the FindReferencesByDirection method to determine collisions between wa\nlls and columns.\n-->\n\nYou may and should be aware of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/findreferencesbydirection.html\">FindColumns</a>\n\nexample of using the FindReferencesByDirection method to determine collisions between walls and columns in a situation like this:</p><center>\n<img alt=\"Wall and column intersections\" src=\"img/wall_column_intersections.png\" width=\"400\"/>\n</center><p>As I mentioned in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/devdays-2010-online-with-revit-2012-api-news.html#3\">\nDevDays 2010 Online with Revit 2012 API news</a>,\n\nit was converted to use the exact wall and column geometry instead of the original approximate ray tracing approach, and the results are displayed exactly by hiding the wall and column categories in the view and displaying their intersection solids using AVF instead.\n\n<p>It defines two commands:\n\n<ul>\n<li>HighlightIntersectionsCommand to determine and display the intersections, and \n<li>RestoreViewCommand to restore the view afterwards, i.e. reset the wall and column category visibility in the view.\n</li></li></ul>\n<p>Here is the original 3D view of the situation:</p>\n<center>\n<img alt=\"3D view of wall and column intersections\" src=\"img/wall_column_intersections_3d.png\"/>\n</center>\n<p>Running HighlightIntersectionsCommand performs the following steps:\n\n<ul>\n<li>Hide the wall and column categories in the current view.\n<li>Set up an AVF view.\n<li>Collect all walls and column elements.\n<li>Query them for their solid geometry.\n<li>Calculate their intersections.\n<li>List and display the results.\n</li></li></li></li></li></li></ul>\n<p>Here is the list of the resulting intersections:</p>\n<center>\n<img alt=\"Wall and column intersection results\" src=\"img/wall_column_intersections_result.png\"/>\n</center>\n<p>This is what the intersection geometry looks like in AVF:</p>\n<center>\n<img alt=\"Wall and column intersection solids in AVF\" src=\"img/wall_column_intersections_avf.png\"/>\n</center>\n<p>As said, you can call RestoreViewCommand afterwards to restore the view by resetting the wall and column category visibility in the view.\n\n<p>For your reference, here is \n\n<a href=\"zip/Geometry2012.zip\">Geometry2012.zip</a> containing the C# sample code and Visual Studio solution together the suitable sample model to run it in.\n\n<p>So all of that is really important stuff from last year that I have been dying to publish for such a long time and never gotten around to.\nFinally!\n\n\n<a name=\"3\"></a>\n<h4>Highlight Rooms Using AVF in VB</h4>\n<p>I passed the geometry sample on to Betina Mette Zimmermann of \n\n<a href=\"http://www.nti.dk\">\nNTI CAD Center A/S</a> in \n\nDenmark, and she converted it to VB and modified it to highlight the room geometry returned by the Room.ClosedShell method instead of wall and column intersections within half an hour:\n\n<pre class=\"code\">\n<span class=\"blue\">#Region</span> <span class=\"maroon\">\"Namespaces\"</span>\n<span class=\"blue\">Imports</span> System\n<span class=\"blue\">Imports</span> System.Collections.Generic\n<span class=\"blue\">Imports</span> Autodesk.Revit.ApplicationServices\n<span class=\"blue\">Imports</span> Autodesk.Revit.Attributes\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB.Analysis\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB.Architecture\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI.Selection\n<span class=\"blue\">#End</span> <span class=\"blue\">Region</span>\n \n&lt;<span class=\"teal\">Transaction</span>(<span class=\"teal\">TransactionMode</span>.Manual)&gt;\n<span class=\"blue\">Public</span> <span class=\"blue\">Class</span> <span class=\"teal\">Command</span>\n  <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>\n \n  <span class=\"blue\">Private</span> schemaId <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> = -1\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute(\n    <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>,\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>,\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> <span class=\"teal\">ElementSet</span>) _\n  <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n \n    <span class=\"blue\">Dim</span> uidoc <span class=\"blue\">As</span> <span class=\"teal\">UIDocument</span> = commandData.Application.ActiveUIDocument\n    <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span> = uidoc.Document\n \n    <span class=\"blue\">Dim</span> transaction <span class=\"blue\">As</span> <span class=\"teal\">Transaction</span> = <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n \n    <span class=\"blue\">Try</span>\n      <span class=\"blue\">Dim</span> col <span class=\"blue\">As</span> <span class=\"teal\">FilteredElementCollector</span> _\n        = <span class=\"blue\">New</span> <span class=\"teal\">FilteredElementCollector</span>(uidoc.Document)\n \n      col.WhereElementIsNotElementType.ToElements()\n      col.OfCategory(<span class=\"teal\">BuiltInCategory</span>.OST_Rooms)\n \n \n      <span class=\"blue\">Dim</span> value <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = 1.0\n      <span class=\"blue\">For</span> <span class=\"blue\">Each</span> room <span class=\"blue\">As</span> <span class=\"teal\">Room</span> <span class=\"blue\">In</span> col\n        <span class=\"blue\">Dim</span> geo <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span> = room.ClosedShell()\n        <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = GetGeometry(geo)\n        <span class=\"blue\">If</span> <span class=\"blue\">Not</span> solid <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n          PaintSolid(doc, solid, value)\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        value = value + 1\n      <span class=\"blue\">Next</span>\n \n      transaction.Start(<span class=\"maroon\">\"Hide Walls\"</span>)\n \n      <span class=\"blue\">Dim</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span> _\n        = uidoc.Document.Settings.Categories\n \n      SetCategoryInvisible( _\n        categories, <span class=\"teal\">BuiltInCategory</span>.OST_Walls,\n        uidoc.ActiveView)\n \n      transaction.Commit()\n \n      <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n \n    <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> <span class=\"teal\">Exception</span>\n      message = ex.Message\n      <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Failed\n    <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Sub</span> SetCategoryInvisible( _\n    <span class=\"blue\">ByVal</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span>, _\n    <span class=\"blue\">ByVal</span> bic <span class=\"blue\">As</span> <span class=\"teal\">BuiltInCategory</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>)\n \n    SetCategoryVisibility(categories, bic, view, <span class=\"blue\">False</span>)\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Sub</span> SetCategoryVisibility( _\n    <span class=\"blue\">ByVal</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span>, _\n    <span class=\"blue\">ByVal</span> bic <span class=\"blue\">As</span> <span class=\"teal\">BuiltInCategory</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>, _\n    <span class=\"blue\">ByVal</span> visible <span class=\"blue\">As</span> <span class=\"blue\">Boolean</span>)\n \n    <span class=\"blue\">Dim</span> category <span class=\"blue\">As</span> <span class=\"teal\">Category</span> = categories.Item(bic)\n    category.Visible(view) = visible\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> GetGeometry( _\n    <span class=\"blue\">ByVal</span> geomElem <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span>) <span class=\"blue\">As</span> <span class=\"teal\">Solid</span>\n \n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> geomObj <span class=\"blue\">As</span> <span class=\"teal\">GeometryObject</span> <span class=\"blue\">In</span> geomElem.Objects\n \n      <span class=\"green\">' Walls and some columns will have a solid </span>\n      <span class=\"green\">' directly in its geometry</span>\n \n      <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> geomObj <span class=\"blue\">Is</span> <span class=\"teal\">Solid</span> <span class=\"blue\">Then</span>\n        <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = <span class=\"blue\">DirectCast</span>(geomObj, <span class=\"teal\">Solid</span>)\n        <span class=\"blue\">If</span> solid.Volume &gt; 0 <span class=\"blue\">Then</span>\n          <span class=\"blue\">Return</span> solid\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n      <span class=\"green\">' Some columns will have a instance </span>\n      <span class=\"green\">' pointing to symbol geometry</span>\n \n      <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> geomObj <span class=\"blue\">Is</span> <span class=\"teal\">GeometryInstance</span> <span class=\"blue\">Then</span>\n \n        <span class=\"blue\">Dim</span> geomInst <span class=\"blue\">As</span> <span class=\"teal\">GeometryInstance</span> _\n          = <span class=\"blue\">DirectCast</span>(geomObj, <span class=\"teal\">GeometryInstance</span>)\n \n        <span class=\"green\">' Instance geometry is obtained so that the </span>\n        <span class=\"green\">' intersection works as expected without </span>\n        <span class=\"green\">' requiring transformation</span>\n \n        <span class=\"blue\">Dim</span> instElem <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span> _\n          = geomInst.GetInstanceGeometry()\n \n        <span class=\"blue\">For</span> <span class=\"blue\">Each</span> instObj <span class=\"blue\">As</span> <span class=\"teal\">GeometryObject</span> <span class=\"blue\">In</span> instElem.Objects\n          <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> instObj <span class=\"blue\">Is</span> <span class=\"teal\">Solid</span> <span class=\"blue\">Then</span>\n            <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = <span class=\"blue\">DirectCast</span>(instObj, <span class=\"teal\">Solid</span>)\n            <span class=\"blue\">If</span> solid.Volume &gt; 0 <span class=\"blue\">Then</span>\n              <span class=\"blue\">Return</span> solid\n            <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">Next</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">Next</span>\n    <span class=\"blue\">Return</span> <span class=\"blue\">Nothing</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> PaintSolid( _\n    <span class=\"blue\">ByVal</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>, _\n    <span class=\"blue\">ByVal</span> s <span class=\"blue\">As</span> <span class=\"teal\">Solid</span>, _\n    <span class=\"blue\">ByVal</span> value <span class=\"blue\">As</span> <span class=\"blue\">Double</span>)\n \n    <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> <span class=\"teal\">Application</span> = doc.Application\n \n    <span class=\"blue\">Dim</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span> = doc.ActiveView\n \n    <span class=\"blue\">If</span> view.AnalysisDisplayStyleId _\n      = <span class=\"teal\">ElementId</span>.InvalidElementId <span class=\"blue\">Then</span>\n \n      CreateAVFDisplayStyle(doc, view)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Dim</span> sfm <span class=\"blue\">As</span> <span class=\"teal\">SpatialFieldManager</span> _\n      = <span class=\"teal\">SpatialFieldManager</span>.GetSpatialFieldManager(view)\n \n    <span class=\"blue\">If</span> sfm <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n      sfm = <span class=\"teal\">SpatialFieldManager</span> _\n        .CreateSpatialFieldManager(view, 1)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">If</span> schemaId &lt;&gt; -1 <span class=\"blue\">Then</span>\n      <span class=\"blue\">Dim</span> results <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"blue\">Integer</span>) _\n        = sfm.GetRegisteredResults()\n \n      <span class=\"blue\">If</span> <span class=\"blue\">Not</span> results.Contains(schemaId) <span class=\"blue\">Then</span>\n        schemaId = -1\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">If</span> schemaId = -1 <span class=\"blue\">Then</span>\n      <span class=\"blue\">Dim</span> resultSchema1 <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">AnalysisResultSchema</span>( _\n        <span class=\"maroon\">\"PaintedSolid\"</span>, <span class=\"maroon\">\"Description\"</span>)\n \n      schemaId = sfm.RegisterResult(resultSchema1)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Dim</span> faces <span class=\"blue\">As</span> <span class=\"teal\">FaceArray</span> = s.Faces\n    <span class=\"blue\">Dim</span> trf <span class=\"blue\">As</span> <span class=\"teal\">Transform</span> = <span class=\"teal\">Transform</span>.Identity\n \n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> face <span class=\"blue\">As</span> <span class=\"teal\">Face</span> <span class=\"blue\">In</span> faces\n      <span class=\"blue\">Dim</span> idx <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> _\n        = sfm.AddSpatialFieldPrimitive(face, trf)\n \n      <span class=\"blue\">Dim</span> uvPts <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"teal\">UV</span>) = <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"teal\">UV</span>)()\n      <span class=\"blue\">Dim</span> doubleList <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"blue\">Double</span>)()\n \n      <span class=\"blue\">Dim</span> valList <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"teal\">ValueAtPoint</span>) _\n        = <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"teal\">ValueAtPoint</span>)()\n \n      <span class=\"blue\">Dim</span> bb <span class=\"blue\">As</span> <span class=\"teal\">BoundingBoxUV</span> = face.GetBoundingBox()\n      uvPts.Add(bb.Min)\n      doubleList.Add(value)\n      valList.Add(<span class=\"blue\">New</span> <span class=\"teal\">ValueAtPoint</span>(doubleList))\n      <span class=\"blue\">Dim</span> pnts <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">FieldDomainPointsByUV</span>(uvPts)\n      <span class=\"blue\">Dim</span> vals <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">FieldValues</span>(valList)\n \n      sfm.UpdateSpatialFieldPrimitive( _\n        idx, pnts, vals, schemaId)\n    <span class=\"blue\">Next</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> CreateAVFDisplayStyle( _\n    <span class=\"blue\">ByVal</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>)\n \n    <span class=\"blue\">Dim</span> t <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n    t.Start(<span class=\"maroon\">\"Create AVF Style\"</span>)\n \n    <span class=\"blue\">Dim</span> coloredSurfaceSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayColoredSurfaceSettings</span>()\n \n    coloredSurfaceSettings.ShowGridLines = <span class=\"blue\">True</span>\n \n    <span class=\"blue\">Dim</span> colorSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayColorSettings</span>()\n \n    <span class=\"blue\">Dim</span> legendSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayLegendSettings</span>()\n \n    legendSettings.ShowLegend = <span class=\"blue\">False</span>\n \n    <span class=\"blue\">Dim</span> analysisDisplayStyle <span class=\"blue\">As</span> <span class=\"teal\">AnalysisDisplayStyle</span> _\n      = analysisDisplayStyle.CreateAnalysisDisplayStyle( _\n        doc, <span class=\"maroon\">\"Paint Solid\"</span>, coloredSurfaceSettings, _\n        colorSettings, legendSettings)\n \n    view.AnalysisDisplayStyleId = analysisDisplayStyle.Id\n \n    t.Commit()\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n<span class=\"blue\">End</span> <span class=\"blue\">Class</span>\n</pre>\n<p>To test this, I created the following Revit model of a cow hotel, implemented according to a design suggested by Jim Quanci in the Gothenburg airport:</p>\n<center>\n<img alt=\"Jim's cow hotel\" src=\"img/highlight_rooms_cow_hotel.png\"/>\n</center>\n<p>Here are the resulting highlighted rooms using AVF:</p>\n<center>\n<img alt=\"Cow hotel rooms highlighted\" src=\"img/highlight_rooms_cow_hotel_shaded.png\"/>\n</center>\n<p>Here is \n\n<a href=\"zip/HighlightRooms.zip\">HighlightRooms.zip</a> containing \n\nthe VB code and complete Visual Studio solution for this command.\n\n<p>Many thanks to Betina for implementing and sharing this!\n\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0694_avf_hilite_rooms",
    "header_text": "Highlight Rooms Using AVF in VB",
    "local_header_href": "#highlight-rooms-using-avf-in-vb",
    "chunk_text": "<h4>Highlight Rooms Using AVF in VB</h4><p>I passed the geometry sample on to Betina Mette Zimmermann of \n\n<a href=\"http://www.nti.dk\">\nNTI CAD Center A/S</a> in \n\nDenmark, and she converted it to VB and modified it to highlight the room geometry returned by the Room.ClosedShell method instead of wall and column intersections within half an hour:\n\n<pre class=\"code\">\n<span class=\"blue\">#Region</span> <span class=\"maroon\">\"Namespaces\"</span>\n<span class=\"blue\">Imports</span> System\n<span class=\"blue\">Imports</span> System.Collections.Generic\n<span class=\"blue\">Imports</span> Autodesk.Revit.ApplicationServices\n<span class=\"blue\">Imports</span> Autodesk.Revit.Attributes\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB.Analysis\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB.Architecture\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI.Selection\n<span class=\"blue\">#End</span> <span class=\"blue\">Region</span>\n \n&lt;<span class=\"teal\">Transaction</span>(<span class=\"teal\">TransactionMode</span>.Manual)&gt;\n<span class=\"blue\">Public</span> <span class=\"blue\">Class</span> <span class=\"teal\">Command</span>\n  <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>\n \n  <span class=\"blue\">Private</span> schemaId <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> = -1\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute(\n    <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>,\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>,\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> <span class=\"teal\">ElementSet</span>) _\n  <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n \n    <span class=\"blue\">Dim</span> uidoc <span class=\"blue\">As</span> <span class=\"teal\">UIDocument</span> = commandData.Application.ActiveUIDocument\n    <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span> = uidoc.Document\n \n    <span class=\"blue\">Dim</span> transaction <span class=\"blue\">As</span> <span class=\"teal\">Transaction</span> = <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n \n    <span class=\"blue\">Try</span>\n      <span class=\"blue\">Dim</span> col <span class=\"blue\">As</span> <span class=\"teal\">FilteredElementCollector</span> _\n        = <span class=\"blue\">New</span> <span class=\"teal\">FilteredElementCollector</span>(uidoc.Document)\n \n      col.WhereElementIsNotElementType.ToElements()\n      col.OfCategory(<span class=\"teal\">BuiltInCategory</span>.OST_Rooms)\n \n \n      <span class=\"blue\">Dim</span> value <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = 1.0\n      <span class=\"blue\">For</span> <span class=\"blue\">Each</span> room <span class=\"blue\">As</span> <span class=\"teal\">Room</span> <span class=\"blue\">In</span> col\n        <span class=\"blue\">Dim</span> geo <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span> = room.ClosedShell()\n        <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = GetGeometry(geo)\n        <span class=\"blue\">If</span> <span class=\"blue\">Not</span> solid <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n          PaintSolid(doc, solid, value)\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        value = value + 1\n      <span class=\"blue\">Next</span>\n \n      transaction.Start(<span class=\"maroon\">\"Hide Walls\"</span>)\n \n      <span class=\"blue\">Dim</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span> _\n        = uidoc.Document.Settings.Categories\n \n      SetCategoryInvisible( _\n        categories, <span class=\"teal\">BuiltInCategory</span>.OST_Walls,\n        uidoc.ActiveView)\n \n      transaction.Commit()\n \n      <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n \n    <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> <span class=\"teal\">Exception</span>\n      message = ex.Message\n      <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Failed\n    <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Sub</span> SetCategoryInvisible( _\n    <span class=\"blue\">ByVal</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span>, _\n    <span class=\"blue\">ByVal</span> bic <span class=\"blue\">As</span> <span class=\"teal\">BuiltInCategory</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>)\n \n    SetCategoryVisibility(categories, bic, view, <span class=\"blue\">False</span>)\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Sub</span> SetCategoryVisibility( _\n    <span class=\"blue\">ByVal</span> categories <span class=\"blue\">As</span> <span class=\"teal\">Categories</span>, _\n    <span class=\"blue\">ByVal</span> bic <span class=\"blue\">As</span> <span class=\"teal\">BuiltInCategory</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>, _\n    <span class=\"blue\">ByVal</span> visible <span class=\"blue\">As</span> <span class=\"blue\">Boolean</span>)\n \n    <span class=\"blue\">Dim</span> category <span class=\"blue\">As</span> <span class=\"teal\">Category</span> = categories.Item(bic)\n    category.Visible(view) = visible\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> GetGeometry( _\n    <span class=\"blue\">ByVal</span> geomElem <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span>) <span class=\"blue\">As</span> <span class=\"teal\">Solid</span>\n \n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> geomObj <span class=\"blue\">As</span> <span class=\"teal\">GeometryObject</span> <span class=\"blue\">In</span> geomElem.Objects\n \n      <span class=\"green\">' Walls and some columns will have a solid </span>\n      <span class=\"green\">' directly in its geometry</span>\n \n      <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> geomObj <span class=\"blue\">Is</span> <span class=\"teal\">Solid</span> <span class=\"blue\">Then</span>\n        <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = <span class=\"blue\">DirectCast</span>(geomObj, <span class=\"teal\">Solid</span>)\n        <span class=\"blue\">If</span> solid.Volume &gt; 0 <span class=\"blue\">Then</span>\n          <span class=\"blue\">Return</span> solid\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n      <span class=\"green\">' Some columns will have a instance </span>\n      <span class=\"green\">' pointing to symbol geometry</span>\n \n      <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> geomObj <span class=\"blue\">Is</span> <span class=\"teal\">GeometryInstance</span> <span class=\"blue\">Then</span>\n \n        <span class=\"blue\">Dim</span> geomInst <span class=\"blue\">As</span> <span class=\"teal\">GeometryInstance</span> _\n          = <span class=\"blue\">DirectCast</span>(geomObj, <span class=\"teal\">GeometryInstance</span>)\n \n        <span class=\"green\">' Instance geometry is obtained so that the </span>\n        <span class=\"green\">' intersection works as expected without </span>\n        <span class=\"green\">' requiring transformation</span>\n \n        <span class=\"blue\">Dim</span> instElem <span class=\"blue\">As</span> <span class=\"teal\">GeometryElement</span> _\n          = geomInst.GetInstanceGeometry()\n \n        <span class=\"blue\">For</span> <span class=\"blue\">Each</span> instObj <span class=\"blue\">As</span> <span class=\"teal\">GeometryObject</span> <span class=\"blue\">In</span> instElem.Objects\n          <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> instObj <span class=\"blue\">Is</span> <span class=\"teal\">Solid</span> <span class=\"blue\">Then</span>\n            <span class=\"blue\">Dim</span> solid <span class=\"blue\">As</span> <span class=\"teal\">Solid</span> = <span class=\"blue\">DirectCast</span>(instObj, <span class=\"teal\">Solid</span>)\n            <span class=\"blue\">If</span> solid.Volume &gt; 0 <span class=\"blue\">Then</span>\n              <span class=\"blue\">Return</span> solid\n            <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">Next</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">Next</span>\n    <span class=\"blue\">Return</span> <span class=\"blue\">Nothing</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> PaintSolid( _\n    <span class=\"blue\">ByVal</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>, _\n    <span class=\"blue\">ByVal</span> s <span class=\"blue\">As</span> <span class=\"teal\">Solid</span>, _\n    <span class=\"blue\">ByVal</span> value <span class=\"blue\">As</span> <span class=\"blue\">Double</span>)\n \n    <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> <span class=\"teal\">Application</span> = doc.Application\n \n    <span class=\"blue\">Dim</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span> = doc.ActiveView\n \n    <span class=\"blue\">If</span> view.AnalysisDisplayStyleId _\n      = <span class=\"teal\">ElementId</span>.InvalidElementId <span class=\"blue\">Then</span>\n \n      CreateAVFDisplayStyle(doc, view)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Dim</span> sfm <span class=\"blue\">As</span> <span class=\"teal\">SpatialFieldManager</span> _\n      = <span class=\"teal\">SpatialFieldManager</span>.GetSpatialFieldManager(view)\n \n    <span class=\"blue\">If</span> sfm <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n      sfm = <span class=\"teal\">SpatialFieldManager</span> _\n        .CreateSpatialFieldManager(view, 1)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">If</span> schemaId &lt;&gt; -1 <span class=\"blue\">Then</span>\n      <span class=\"blue\">Dim</span> results <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"blue\">Integer</span>) _\n        = sfm.GetRegisteredResults()\n \n      <span class=\"blue\">If</span> <span class=\"blue\">Not</span> results.Contains(schemaId) <span class=\"blue\">Then</span>\n        schemaId = -1\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">If</span> schemaId = -1 <span class=\"blue\">Then</span>\n      <span class=\"blue\">Dim</span> resultSchema1 <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">AnalysisResultSchema</span>( _\n        <span class=\"maroon\">\"PaintedSolid\"</span>, <span class=\"maroon\">\"Description\"</span>)\n \n      schemaId = sfm.RegisterResult(resultSchema1)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Dim</span> faces <span class=\"blue\">As</span> <span class=\"teal\">FaceArray</span> = s.Faces\n    <span class=\"blue\">Dim</span> trf <span class=\"blue\">As</span> <span class=\"teal\">Transform</span> = <span class=\"teal\">Transform</span>.Identity\n \n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> face <span class=\"blue\">As</span> <span class=\"teal\">Face</span> <span class=\"blue\">In</span> faces\n      <span class=\"blue\">Dim</span> idx <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> _\n        = sfm.AddSpatialFieldPrimitive(face, trf)\n \n      <span class=\"blue\">Dim</span> uvPts <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"teal\">UV</span>) = <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"teal\">UV</span>)()\n      <span class=\"blue\">Dim</span> doubleList <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"blue\">Double</span>)()\n \n      <span class=\"blue\">Dim</span> valList <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"teal\">ValueAtPoint</span>) _\n        = <span class=\"blue\">New</span> <span class=\"teal\">List</span>(<span class=\"blue\">Of</span> <span class=\"teal\">ValueAtPoint</span>)()\n \n      <span class=\"blue\">Dim</span> bb <span class=\"blue\">As</span> <span class=\"teal\">BoundingBoxUV</span> = face.GetBoundingBox()\n      uvPts.Add(bb.Min)\n      doubleList.Add(value)\n      valList.Add(<span class=\"blue\">New</span> <span class=\"teal\">ValueAtPoint</span>(doubleList))\n      <span class=\"blue\">Dim</span> pnts <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">FieldDomainPointsByUV</span>(uvPts)\n      <span class=\"blue\">Dim</span> vals <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">FieldValues</span>(valList)\n \n      sfm.UpdateSpatialFieldPrimitive( _\n        idx, pnts, vals, schemaId)\n    <span class=\"blue\">Next</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> CreateAVFDisplayStyle( _\n    <span class=\"blue\">ByVal</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>, _\n    <span class=\"blue\">ByVal</span> view <span class=\"blue\">As</span> <span class=\"teal\">View</span>)\n \n    <span class=\"blue\">Dim</span> t <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n    t.Start(<span class=\"maroon\">\"Create AVF Style\"</span>)\n \n    <span class=\"blue\">Dim</span> coloredSurfaceSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayColoredSurfaceSettings</span>()\n \n    coloredSurfaceSettings.ShowGridLines = <span class=\"blue\">True</span>\n \n    <span class=\"blue\">Dim</span> colorSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayColorSettings</span>()\n \n    <span class=\"blue\">Dim</span> legendSettings <span class=\"blue\">As</span> _\n      <span class=\"blue\">New</span> <span class=\"teal\">AnalysisDisplayLegendSettings</span>()\n \n    legendSettings.ShowLegend = <span class=\"blue\">False</span>\n \n    <span class=\"blue\">Dim</span> analysisDisplayStyle <span class=\"blue\">As</span> <span class=\"teal\">AnalysisDisplayStyle</span> _\n      = analysisDisplayStyle.CreateAnalysisDisplayStyle( _\n        doc, <span class=\"maroon\">\"Paint Solid\"</span>, coloredSurfaceSettings, _\n        colorSettings, legendSettings)\n \n    view.AnalysisDisplayStyleId = analysisDisplayStyle.Id\n \n    t.Commit()\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n \n<span class=\"blue\">End</span> <span class=\"blue\">Class</span>\n</pre>\n<p>To test this, I created the following Revit model of a cow hotel, implemented according to a design suggested by Jim Quanci in the Gothenburg airport:</p>\n<center>\n<img alt=\"Jim's cow hotel\" src=\"img/highlight_rooms_cow_hotel.png\"/>\n</center>\n<p>Here are the resulting highlighted rooms using AVF:</p>\n<center>\n<img alt=\"Cow hotel rooms highlighted\" src=\"img/highlight_rooms_cow_hotel_shaded.png\"/>\n</center>\n<p>Here is \n\n<a href=\"zip/HighlightRooms.zip\">HighlightRooms.zip</a> containing \n\nthe VB code and complete Visual Studio solution for this command.\n\n<p>Many thanks to Betina for implementing and sharing this!\n\n</p></p></p>"
  }
]