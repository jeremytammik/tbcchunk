[
  {
    "original_filename": "1746_filter_location",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n\n</head>\n\n<!---\n\n- don't trust the family instance location point\n  [Element Location property value is far from the element bounding box](https://forums.autodesk.com/t5/revit-api-forum/element-location-property-value-is-far-from-the-element-bounding/m-p/8762611)\n\n- find by name element type, family symbol, text note type\n  15324672 [Creating a TextNote with a specific Type (i.e 1/10\" Arial, 1/10\" Monospace...)]\n  https://forums.autodesk.com/t5/revit-api-forum/creating-a-textnote-with-a-specific-type-i-e-1-10-quot-arial-1/m-p/8765648\n\n- delete non-room-separator lines\n  15324372 [Deleting Lines that are not assigned to the <Room Separation> subcategory]\n  https://forums.autodesk.com/t5/revit-api-forum/deleting-lines-that-are-not-assigned-to-the-lt-room-separation/m-p/8765491\n\ntwitter:\n\nLocation point and filtering hints for the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/locpntfilter\n\nI am probably doomed to spend the rest of my life telling people not to unnecessarily apply <code>ToList</code> to a filtered element collector.\nIt happened several times again today answering questions in the Revit API discussion forum\n&ndash; Don't trust the family instance location point\n&ndash; Searching by name for element type and text note type\n&ndash; Searching using a negated category filter...\n\nlinkedin:\n\nLocation point and filtering hints for the #RevitAPI #bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nhttp://bit.ly/locpntfilter\n\nI am probably doomed to spend the rest of my life telling people not to unnecessarily apply ToList to a filtered element collector.\n\nIt happened several times again today answering questions in the Revit API discussion forum:\n\n- Don't trust the family instance location point\n- Searching by name for element type and text note type\n- Searching using a negated category filter...\n\n\n-->"
  },
  {
    "original_filename": "1746_filter_location",
    "header_text": "Location Point and Filtering Hints",
    "local_header_href": "#location-point-and-filtering-hints",
    "chunk_text": "### Location Point and Filtering Hints\n\nI am probably doomed to spend the rest of my life telling people not to unnecessarily apply `ToList` to a filtered element collector.\n\nIt happened several times again today answering questions in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160):\n\n- [Don't trust the family instance location point](#2) \n- [Searching by name for element type and text note type](#3) \n- [Searching using a negated category filter](#4)"
  },
  {
    "original_filename": "1746_filter_location",
    "header_text": "Don't Trust the Family Instance Location Point",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Don't Trust the Family Instance Location Point\n\nThe first issue is not directly related to filtering, however; Benoit explains why\nthe [element `Location` property value is far from the element bounding box](https://forums.autodesk.com/t5/revit-api-forum/element-location-property-value-is-far-from-the-element-bounding/m-p/8762611):\n\n**Question:** I have a FamilyInstance element.\nI'm trying to determine its location (X,Y,Z) coordinates.\nThe value that is returned is ca. (33, -86, 0).\nThe true location of the element is ca. (-153, -32, 58).\nIt doesn't seem to be related to the document Transform since it doesn't fix it, and also the bounding box doesn't even bound this element, neither before nor after applying the transform.\nNot even close.\nI even tried to look at the element geometry and it still doesn't match.\nIs there something I'm missing?\nThe element location is a `LocationPoint`:\n\n<pre class=\"code\">\n  <span style=\"color:#2b91af;\">Location</span>&nbsp;L&nbsp;=&nbsp;e.Location;\n  <span style=\"color:#2b91af;\">LocationPoint</span>&nbsp;lp&nbsp;=&nbsp;L&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">LocationPoint</span>;\n  lp.Point;\n</pre>\n\n**Answer:** The location point only depends on how the family is modelled.\n\nIf you don't like this, you can modify the family, save it and update it in the model.\n\nThat is why you should never use the `LocationPoint` to find an element.\n\nYou can't know how the family was modelled, or whether it was modified later...\n\nMany thanks to Benoit Favre, CEO of [etudes &amp; automates](http://www.etudesetautomates.com), for this answer!"
  },
  {
    "original_filename": "1746_filter_location",
    "header_text": "Searching by Name for Element Type and Text Note Type",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Searching by Name for Element Type and Text Note Type\n\nA question\non [creating a `TextNote` with a specific type, e.g., 1/10\" Arial, 1/10\" Monospace...](https://forums.autodesk.com/t5/revit-api-forum/creating-a-textnote-with-a-specific-type-i-e-1-10-quot-arial-1/m-p/8765648):\n\n**Question:** I am trying to create a text note using `TextNote.Create`.\n\nBut I am struggling to use anything other than the default `TextNoteType` id.\n\nI want to be able to create text using the '1/10\" Monospace' family type that I already have loaded in:\n\n<center>\n<img src=\"img/tnt_3_type_properties.png\" alt=\"Text note type type properties\" width=\"439\">\n</center>\n\nCan anyone please tell me how to easily do that? I think there used to be a `GetFamilyTypeIdByName` function which no longer exists.\n\nHere are the creation options I set up:\n\n<center>\n<img src=\"img/tnt_1_textnoteoptions.png\" alt=\"Text note options\" width=\"516\">\n</center>\n\nI use them like this:\n\n<center>\n<img src=\"img/tnt_2_textnote_create.png\" alt=\"Text note create\" width=\"639\">\n</center>\n\nThank you!\n\n**Answer:** You can obtain the text note type from the document with a filtered element collector and LINQ.\n\nHere is a code snippet showing how:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">TextNoteType</span>&nbsp;textNoteType\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">TextNoteType</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Cast&lt;<span style=\"color:#2b91af;\">TextNoteType</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;q&nbsp;=&gt;&nbsp;q.Name&nbsp;==&nbsp;<span style=\"color:#a31515;\">&quot;2.5mm&nbsp;Arial&quot;</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.First();\n</pre>\n\nThen you can set the text note id in text note creation call or after it has been created.\n\n<pre class=\"code\">\n  TypeId = textNoteType.Id;\n</pre>\n\nThe method you mention, `GetFamilyTypeIdByName`, was probably implemented very similarly.\n\nHowever, pondering its name, *FamilyType* is really more suited for the family editor context.\n\nIn the project context, you have a base class for types, `ElementType`.\n\nThe `TextNoteType` class is derived from that, as is the `FamilySymbol` class.\n\nJust from the name, I cannot infer whether `GetFamilyTypeIdByName` retrieved `ElementType` objects, `FamilySymbol` ones, or something else.\n\nAnyway, for safety's sake, to cover all bases, I implemented and added three new methods to The Building Coder samples for you:\n\n- GetElementTypeByName\n- GetFamilySymbolByName\n- GetTextNoteTypeByName\n\nTheir implementations are almost identical, except that they retrieve the first named object of the specific class, respectively.\n\nSince there are more `ElementType` objects than `TextNoteType` ones in the project, the latter method is certainly faster.\n\nAlso, all three methods could be speeded up by using a (quick) parameter filter instead of the (slower than slow) LINQ post-processing accessed by the `First` method, as described in the recent discussion\non [slow, slower still and faster filtering](https://thebuildingcoder.typepad.com/blog/2019/04/slow-slower-still-and-faster-filtering.html#2).\n\nYou can see the methods I added in\nthis [diff to the previous version](https://github.com/jeremytammik/the_building_coder_samples/compare/2020.0.145.1...2020.0.145.2).\n\nFor the sake of completeness, I copied their code here as well:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;the&nbsp;first&nbsp;element&nbsp;type&nbsp;matching&nbsp;the&nbsp;given&nbsp;name.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;This&nbsp;filter&nbsp;could&nbsp;be&nbsp;speeded&nbsp;up&nbsp;by&nbsp;using&nbsp;a&nbsp;(quick)</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;parameter&nbsp;filter&nbsp;instead&nbsp;of&nbsp;the&nbsp;(slower&nbsp;than&nbsp;slow)</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;LINQ&nbsp;post-processing.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">ElementType</span>&nbsp;GetElementTypeByName(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;name&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">ElementType</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.First(&nbsp;q&nbsp;=&gt;&nbsp;q.Name.Equals(&nbsp;name&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">ElementType</span>;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;the&nbsp;first&nbsp;family&nbsp;symbol&nbsp;matching&nbsp;the&nbsp;given&nbsp;name.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Note&nbsp;that&nbsp;FamilySymbol&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;ElementType,</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;so&nbsp;this&nbsp;method&nbsp;is&nbsp;more&nbsp;restrictive&nbsp;above&nbsp;all&nbsp;faster</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;than&nbsp;the&nbsp;previous&nbsp;one.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">ElementType</span>&nbsp;GetFamilySymbolByName(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;name&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">FamilySymbol</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.First(&nbsp;q&nbsp;=&gt;&nbsp;q.Name.Equals(&nbsp;name&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">FamilySymbol</span>;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;the&nbsp;first&nbsp;text&nbsp;note&nbsp;type&nbsp;matching&nbsp;the&nbsp;given&nbsp;name.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Note&nbsp;that&nbsp;TextNoteType&nbsp;is&nbsp;a&nbsp;subclass&nbsp;of&nbsp;ElementType,</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;so&nbsp;this&nbsp;method&nbsp;is&nbsp;more&nbsp;restrictive&nbsp;above&nbsp;all&nbsp;faster</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;than&nbsp;Util.GetElementTypeByName.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">TextNoteType</span>&nbsp;GetTextNoteTypeByName(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;name&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">TextNoteType</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.First(&nbsp;q&nbsp;=&gt;&nbsp;q.Name.Equals(&nbsp;name&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">TextNoteType</span>;\n&nbsp;&nbsp;}\n</pre>"
  },
  {
    "original_filename": "1746_filter_location",
    "header_text": "Searching using a Negated Category Filter",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Searching using a Negated Category Filter\n\nFinally, we got a chance to make use of a negated category filter answering this question \non [deleting lines that are not assigned to the &lt;Room Separation&gt; subcategory](https://forums.autodesk.com/t5/revit-api-forum/deleting-lines-that-are-not-assigned-to-the-lt-room-separation/m-p/8765491):\n\n**Question:** I have code that deletes all lines in the document.\nI only want to delete the lines that are not on the &lt;Room Separation&gt; subcategory.\nI probably need to add something to my `FilteredElementCollector`, but I can't figure out what. \n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:green;\">//Lines</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;linIds&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc,&nbsp;vw.Id&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">CurveElement</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.ToElementIds();\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;lin_id&nbsp;<span style=\"color:blue;\">in</span>&nbsp;linIds)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;doc.Delete(lin_id);\n&nbsp;&nbsp;&nbsp;&nbsp;linCount++;\n&nbsp;&nbsp;}\n</pre>\n\n**Answer:** You can use LINQ to query the elements.\n\nWith LINQ, you can check an element's category like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;This&nbsp;filtered&nbsp;element&nbsp;collector&nbsp;collects&nbsp;all&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;elements&nbsp;in&nbsp;the&nbsp;document&nbsp;except&nbsp;room&nbsp;separation&nbsp;lines</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;lines&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">CurveElement</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;q&nbsp;=&gt;&nbsp;q.Category.Id&nbsp;!=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_RoomSeparationLines&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.ToList();\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>&nbsp;(<span style=\"color:blue;\">var</span>&nbsp;line&nbsp;<span style=\"color:blue;\">in</span>&nbsp;lines)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;doc.Delete(line.Id);\n&nbsp;&nbsp;}\n</pre>\n\nHowever, this initial suggestion can be improved upon significantly.\n\nAs I already very frequently pointed out, calling `ToList` at the end is a waste of time and space.\n\nIt requests a (totally unnecessary) copy of all the results from the filtered element collector.\n\nYou can iterate over the collector itself directly.\n\nFurthermore, a built-in Revit filter will always be faster than LINQ post-processing.\n\nIn this case, you can use\na [negated `ElementCategoryFilter`](https://apidocs.co/apps/revit/2019/6b8f4e3a-1975-7388-3848-462cf305d523.htm) taking\na Boolean argument.\n\nYet further, you might gain some additional performance by deleting all the elements in one single call to `Delete`, rather than by stepping through them one by one.\n\nFor instance, like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Delete&nbsp;all&nbsp;non-room-separating&nbsp;curve&nbsp;elements</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">void</span>&nbsp;DeleteNonRoomSeparators(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementCategoryFilter</span>&nbsp;non_room_separator\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementCategoryFilter</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_RoomSeparationLines,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">true</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;a\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">CurveElement</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WherePasses(&nbsp;non_room_separator&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;doc.Delete(&nbsp;a.ToElementIds()&nbsp;);\n&nbsp;&nbsp;}\n</pre>\n\nI added this method to The Building Coder samples for you, as you can see from\nthe [diff to the preceding version](https://github.com/jeremytammik/the_building_coder_samples/compare/2020.0.145.2...2020.0.145.3)."
  }
]