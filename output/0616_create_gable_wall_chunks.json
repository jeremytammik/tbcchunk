[
  {
    "original_filename": "0616_create_gable_wall",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0616_create_gable_wall",
    "header_text": "Create Gable Wall",
    "local_header_href": "#create-gable-wall",
    "chunk_text": "<h3>Create Gable Wall</h3><p>I discussed \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/creating-a-wall-with-a-sloped-profile.html\">\ncreating a wall with a sloped profile</a> using \n\nRevit 2009. \nNow Saikat Bhattacharya created a similar command to answer a similar question in Revit 2012:\n\n<p><strong>Question:</strong> Using the Revit user interface, I can create walls that consist of more then four edges, i.e. non-rectangular. \nUsually they would represent some sort of gable wall in a building.\nHow can I achieve this using the API, please?\n\n<p><strong>Answer:</strong> To answer your question, I wrote some quick code which creates a gable wall with seven faces, instead of the usual six faces of a rectangular wall.\nIt creates the following wall:</p>\n<center>\n<img alt=\"Gable wall\" src=\"img/gable_wall.png\"/>\n</center>\n<p><strong>Jeremy adds:</strong> Many thanks to Saikat for setting this up!\n\n<p>I created a new Building Coder sample command CmdCreateGableWall based on Saikat's code.\nIt is similar to the existing external command \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/creating-a-wall-with-a-sloped-profile.html\">\nCmdSlopedWall</a>,\n\nupdated to use new Revit API functionality to use manual transaction mode and filtered element collectors and LINQ to determine a suitable wall type and level:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdCreateGableWall</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Build a wall profile for the wall creation </span>\n \n    <span class=\"teal\">XYZ</span> [] pts = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[] {\n      <span class=\"teal\">XYZ</span>.Zero,\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 20, 0, 0 ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 20, 0, 15 ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 0, 30 ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 15 )\n    };\n \n    <span class=\"green\">// Get application creation object </span>\n \n    Autodesk.Revit.Creation.<span class=\"teal\">Application</span> appCreation \n      = app.Create;\n \n    <span class=\"green\">// Create wall profile</span>\n \n    <span class=\"teal\">CurveArray</span> profile = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n    <span class=\"teal\">XYZ</span> q = pts[ pts.Length - 1 ];\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n    {\n      profile.Append( appCreation.NewLineBound( \n        q, p ) );\n \n      q = p;\n    }\n \n    <span class=\"teal\">XYZ</span> normal = <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">//WallType wallType </span>\n    <span class=\"green\">//  = new FilteredElementCollector( doc )</span>\n    <span class=\"green\">//    .OfClass( typeof( WallType ) )</span>\n    <span class=\"green\">//    .First&lt;Element&gt;( e </span>\n    <span class=\"green\">//      =&gt; e.Name.Contains( \"Generic\" ) ) </span>\n    <span class=\"green\">//    as WallType;</span>\n \n    <span class=\"teal\">WallType</span> wallType\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">WallType</span> ) )\n        .First&lt;<span class=\"teal\">Element</span>&gt;()\n          <span class=\"blue\">as</span> <span class=\"teal\">WallType</span>;\n \n    <span class=\"teal\">Level</span> level \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) )\n        .First&lt;<span class=\"teal\">Element</span>&gt;( e \n          =&gt; e.Name.Equals( <span class=\"maroon\">\"Level 1\"</span> ) ) \n        <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n    trans.Start( <span class=\"maroon\">\"Create Gable Wall\"</span> );\n \n    <span class=\"teal\">Wall</span> wall = doc.Create.NewWall( \n      profile, wallType, level, <span class=\"blue\">true</span>, normal );\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>Here is \n\n<a href=\"zip/bc_12_88.zip\">\nversion 2012.0.88.0</a> of\n\nThe Building Coder samples including the new command CmdCreateGableWall as well as the existing simpler CmdSlopedWall one.\n</p></p></p></p></p>"
  }
]