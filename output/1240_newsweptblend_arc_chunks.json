[
  {
    "original_filename": "1240_newsweptblend_arc",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1240_newsweptblend_arc",
    "header_text": "Rotation by π and NewSweptBlend Using Arcs",
    "local_header_href": "#rotation-by-π-and-newsweptblend-using-arcs",
    "chunk_text": "<h3>Rotation by π and NewSweptBlend Using Arcs</h3><p>Let me address two questions concerning form generation in family documents raised by Alex Hearn:</p><ul>\n<li><a href=\"#2\">Rotation by π</a></li>\n<li><a href=\"#3\">NewSweptBlend using arcs</a></li>\n</ul><p>Among other things, the answers also demonstrate some trivial migration steps of the form generation code from Revit 2012 to 2015 and, yet again, the occasional\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.33\">\ncrucial importance of regeneration</a>.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1240_newsweptblend_arc",
    "header_text": "Rotation by π",
    "local_header_href": "#rotation-by-π",
    "chunk_text": "<h4>Rotation by π</h4><p><strong>Question:</strong> I am exploring and really enjoying your blog site.\nThanks for all the detailed information.</p><p>I have been attempting to build a Revit translator that takes in model data from SolidWorks (my usual programming environment) and redraws the elements in Revit. The idea is that I can then recreate SolidWorks models in Revit.</p><p>I have come across a very odd behaviour in ElementTransformUtils.RotateElement and I was wondering if you have ever seen it or have any advice. I’m using Revit 2012 with C#. Here’s some sample code:</p><pre class=\"code\">\n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n    = fdoc.Application.Create;\n \n  <span class=\"teal\">XYZ</span> normal = <span class=\"teal\">XYZ</span>.BasisZ;\n \n  <span class=\"teal\">SketchPlane</span> sketchPlane\n    = CreateSketchPlane( normal, <span class=\"teal\">XYZ</span>.Zero );\n \n  <span class=\"teal\">XYZ</span> p0 = <span class=\"teal\">XYZ</span>.Zero;\n  <span class=\"teal\">XYZ</span> p1 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 0, 0 );\n  <span class=\"teal\">XYZ</span> p2 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 10, 0 );\n  <span class=\"teal\">XYZ</span> p3 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 10, 0 );\n  <span class=\"teal\">XYZ</span> p4 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 20, 0 );\n  <span class=\"teal\">Line</span> line1 = creapp.NewLineBound( p0, p1 );\n  <span class=\"teal\">Line</span> line2 = creapp.NewLineBound( p1, p2 );\n  <span class=\"teal\">Line</span> line3 = creapp.NewLineBound( p2, p3 );\n  <span class=\"teal\">Line</span> line4 = creapp.NewLineBound( p3, p0 );\n  <span class=\"teal\">Line</span> line5 = creapp.NewLineBound( p2, p4 );\n  <span class=\"teal\">CurveArray</span> curveArray1 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n  curveArray1.Append( line1 );\n  curveArray1.Append( line2 );\n  curveArray1.Append( line3 );\n  curveArray1.Append( line4 );\n  <span class=\"teal\">CurveArrArray</span> curveArrArray = <span class=\"blue\">new</span> <span class=\"teal\">CurveArrArray</span>();\n  curveArrArray.Append( curveArray1 );\n \n  <span class=\"teal\">Revolution</span> aRevolution\n    = fdoc.FamilyCreate.NewRevolution( <span class=\"blue\">true</span>,\n      curveArrArray, sketchPlane, line5,\n      <span class=\"teal\">Math</span>.PI / -2, 0 );\n \n  <span class=\"green\">// THE FOLLOWING DOES NOT WORK!</span>\n \n  <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n    fdoc, aRevolution.Id, line5, <span class=\"teal\">Math</span>.PI );\n</pre><p>The problem is apparently with the Math.PI value used by RotateElement. I have messed around with it and it seems that you <b><i>cannot</i></b> use a value that is greater than <b><i>or equal to</i></b> Math.PI for this argument. As a workaround, I am using Math.PI * 0.995 which means the resulting component is veeeery slightly off from the true square.</p><p>Any suggestions welcome but don’t be too concerned because as I’ve said above I do have an acceptable (for now) workaround.</p><p><strong>Answer:</strong> The following implementation based on your sample code migrated to Revit 2015 works perfectly well for me:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">XYZ</span> p0 = <span class=\"teal\">XYZ</span>.Zero;\n    <span class=\"teal\">XYZ</span> p1 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 0, 0 );\n    <span class=\"teal\">XYZ</span> p2 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 10, 0 );\n    <span class=\"teal\">XYZ</span> p3 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 10, 0 );\n    <span class=\"teal\">XYZ</span> p4 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 20, 0 );\n    <span class=\"teal\">Line</span> line1 = <span class=\"teal\">Line</span>.CreateBound( p0, p1 );\n    <span class=\"teal\">Line</span> line2 = <span class=\"teal\">Line</span>.CreateBound( p1, p2 );\n    <span class=\"teal\">Line</span> line3 = <span class=\"teal\">Line</span>.CreateBound( p2, p3 );\n    <span class=\"teal\">Line</span> line4 = <span class=\"teal\">Line</span>.CreateBound( p3, p0 );\n    <span class=\"teal\">Line</span> line5 = <span class=\"teal\">Line</span>.CreateBound( p2, p4 );\n    <span class=\"teal\">CurveArray</span> curveArray1 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n    curveArray1.Append( line1 );\n    curveArray1.Append( line2 );\n    curveArray1.Append( line3 );\n    curveArray1.Append( line4 );\n    <span class=\"teal\">CurveArrArray</span> curveArrArray = <span class=\"blue\">new</span> <span class=\"teal\">CurveArrArray</span>();\n    curveArrArray.Append( curveArray1 );\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Revolution and Rotate\"</span> );\n \n      <span class=\"green\">//XYZ normal = XYZ.BasisZ;</span>\n      <span class=\"green\">//Plane plane = new Plane( normal, XYZ.Zero );</span>\n      <span class=\"green\">//SketchPlane sketchPlane = SketchPlane.Create( doc, plane );</span>\n \n      <span class=\"teal\">SketchPlane</span> sketchPlane\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">SketchPlane</span> ) )\n          .Cast&lt;<span class=\"teal\">SketchPlane</span>&gt;()\n          .Where&lt;<span class=\"teal\">SketchPlane</span>&gt;( x\n            =&gt; x.Name.Equals( <span class=\"maroon\">\"Ref. Level\"</span> ) )\n          .FirstOrDefault&lt;<span class=\"teal\">SketchPlane</span>&gt;();\n \n      <span class=\"teal\">Revolution</span> aRevolution\n        = doc.FamilyCreate.NewRevolution(\n          <span class=\"blue\">true</span>, curveArrArray, sketchPlane,\n          line5, <span class=\"teal\">Math</span>.PI / -2, 0 );\n \n      doc.Regenerate();\n \n      <span class=\"teal\">ElementTransformUtils</span>.RotateElement(\n        doc, aRevolution.Id, line5, <span class=\"teal\">Math</span>.PI ); <span class=\"green\">// WORKs FINE!</span>\n \n      tx.Commit();\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><p>There are only a few differences, besides the fact that I migrated the code from Revit 2012 to 2015.</p><p>I also replaced the generation of a new geometric plane and sketch plane by a filtered element collector retrieving the existing sketch plane from the family document instead.</p><p>Most significantly: I added a call to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.33\">\nregenerate the document</a> before\n\ncalling the RotateElement method.</p><p>Please note that it takes an element id as an argument. That is a hint that it relies on the element being a valid resident of the Revit database, which it does not become until after it has been regenerated.</p><p>Here is the result of running this command:</p><center>\n<img alt=\"Revolution rotated by π\" src=\"img/rotate_by_pi.png\" width=\"223\"/>\n</center><a name=\"3\"></a>"
  },
  {
    "original_filename": "1240_newsweptblend_arc",
    "header_text": "NewSweptBlend Using Arcs",
    "local_header_href": "#newsweptblend-using-arcs",
    "chunk_text": "<h4>NewSweptBlend Using Arcs</h4><p>The next query comes from this\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/10/adva-webinar-free-student-software-and-au.html?cid=6a00e553e16897883301bb07a94cba970d#comment-6a00e553e16897883301bb07a94cba970d\">\ncomment</a>:</p><p><strong>Question:</strong> Thank you for your response. I have another issue, this time with SweptBlend.</p><p>Is it possible to have the sweep path be an arc?\nI would think yes, but I cannot get it to work.\nAll the examples show the path as a line.</p><p>Here’s my code:</p><pre class=\"code\">\n  <span class=\"teal\">XYZ</span> pnt1 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, -1, 0 );\n  <span class=\"teal\">XYZ</span> pnt2 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 1, 0, 0 );\n  <span class=\"teal\">XYZ</span> pnt3 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 1, 0 );\n  <span class=\"teal\">XYZ</span> pnt4 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -1, 0, 0 );\n  <span class=\"teal\">Arc</span> aArc1 = creapp.NewArc( pnt1, pnt3, pnt2 );\n  <span class=\"teal\">Arc</span> aArc2 = creapp.NewArc( pnt3, pnt1, pnt4 );\n  <span class=\"teal\">CurveArrArray</span> arrarr1 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArrArray</span>();\n \n  <span class=\"teal\">SweepProfile</span> bottomProfile\n    = creapp.NewCurveLoopsProfile( arrarr1 );\n \n  <span class=\"teal\">CurveArray</span> arr1 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n  arr1.Append( aArc1 );\n  arr1.Append( aArc2 );\n  <span class=\"teal\">XYZ</span> pnt6 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, -2, 0 );\n  <span class=\"teal\">XYZ</span> pnt7 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 2, 0, 0 );\n  <span class=\"teal\">XYZ</span> pnt8 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 2, 0 );\n  <span class=\"teal\">XYZ</span> pnt9 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -2, 0, 0 );\n  <span class=\"teal\">Arc</span> aArc3 = creapp.NewArc( pnt6, pnt8, pnt7 );\n  <span class=\"teal\">Arc</span> aArc4 = creapp.NewArc( pnt8, pnt6, pnt9 );\n  <span class=\"teal\">CurveArrArray</span> arrarr2 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArrArray</span>();\n  <span class=\"teal\">CurveArray</span> arr2 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n  arr2.Append( aArc3 );\n  arr2.Append( aArc4 );\n  arrarr2.Append( arr2 );\n \n  <span class=\"teal\">SweepProfile</span> topProfile\n    = creapp.NewCurveLoopsProfile( arrarr2 );\n \n  <span class=\"teal\">XYZ</span> pnt10 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 0 );\n  <span class=\"teal\">XYZ</span> pnt11 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 5, 0 );\n  <span class=\"teal\">XYZ</span> pnt122 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 2.5, 2.5, 0 );\n  <span class=\"teal\">Arc</span> testArc = creapp.NewArc( pnt10, pnt11, pnt122 );\n  <span class=\"teal\">Curve</span> curve = (<span class=\"teal\">Curve</span>) testArc;\n \n  <span class=\"teal\">Plane</span> geometryPlane = creapp.NewPlane(\n    <span class=\"teal\">XYZ</span>.BasisZ, <span class=\"teal\">XYZ</span>.Zero );\n \n  <span class=\"teal\">SketchPlane</span> sketchPlane = doc.NewSketchPlane(\n    geometryPlane );\n \n  <span class=\"teal\">SweptBlend</span> aSweptBlend = doc.NewSweptBlend(\n    <span class=\"blue\">true</span>, curve, sketchPlane, bottomProfile,\n    topProfile );\n</pre><p><strong>Answer:</strong> The curve defining the swept blend extrusion path can be any valid curve and is definitely not limited to just straight lines.</p><p>Just ensure that you are not generating any self-intersecting solids.</p><p>If you run into any problems, remove the final solid generation call, replace it by code to generate model curves instaed, and see what happens when you try to generate the same solid manually in the user interface, as described for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/debug-geometric-form-creation.html\">\ndebugging geometric form creation</a>.</p><p>The top and bottom profiles must be planar and lie in the XY plane.</p><p>I added a new helper method CreateNewSweptBlendArc to the existing CmdNewSweptBlend external command in The Building Coder samples to create a second solid shape to answer your query.</p><p>This external command implementation was still using automatic transaction mode until now, so I went ahead and converted it to use manual transaction mode, while I was at it anyway.</p><p>Here is the new CreateNewSweptBlendArc method based on your sample code:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create a new swept blend form using arcs to</span>\n  <span class=\"gray\">///</span><span class=\"green\"> define circular start and end profiles and an</span>\n  <span class=\"gray\">///</span><span class=\"green\"> arc path. The NewSweptBlend method requires </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the input profiles to be in the XY plane.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> CreateNewSweptBlendArc( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">Debug</span>.Assert( doc.IsFamilyDocument,\n      <span class=\"maroon\">\"this method will only work in a family document\"</span> );\n \n    <span class=\"teal\">Application</span> app = doc.Application;\n \n    Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n      = app.Create;\n \n    Autodesk.Revit.Creation.<span class=\"teal\">FamilyItemFactory</span> credoc\n      = doc.FamilyCreate;\n \n    <span class=\"teal\">XYZ</span> px = <span class=\"teal\">XYZ</span>.BasisX;\n    <span class=\"teal\">XYZ</span> py = <span class=\"teal\">XYZ</span>.BasisY;\n    <span class=\"teal\">Arc</span> arc1 = <span class=\"teal\">Arc</span>.Create( -px, px, -py );\n    <span class=\"teal\">Arc</span> arc2 = <span class=\"teal\">Arc</span>.Create( px, -px, py );\n    <span class=\"teal\">CurveArray</span> arr1 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n    arr1.Append( arc1 );\n    arr1.Append( arc2 );\n    <span class=\"teal\">CurveArrArray</span> arrarr1 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArrArray</span>();\n    arrarr1.Append( arr1 );\n \n    <span class=\"teal\">SweepProfile</span> bottomProfile\n      = creapp.NewCurveLoopsProfile( arrarr1 );\n \n    px += px;\n    py += py;\n    <span class=\"teal\">Arc</span> arc3 = <span class=\"teal\">Arc</span>.Create( -px, px, -py );\n    <span class=\"teal\">Arc</span> arc4 = <span class=\"teal\">Arc</span>.Create( px, -px, py );\n    <span class=\"teal\">CurveArray</span> arr2 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n    arr2.Append( arc3 );\n    arr2.Append( arc4 );\n    <span class=\"teal\">CurveArrArray</span> arrarr2 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArrArray</span>();\n    arrarr2.Append( arr2 );\n \n    <span class=\"teal\">SweepProfile</span> topProfile\n      = creapp.NewCurveLoopsProfile( arrarr2 );\n \n    <span class=\"teal\">XYZ</span> p0 = <span class=\"teal\">XYZ</span>.Zero;\n    <span class=\"teal\">XYZ</span> p5 = 5 * <span class=\"teal\">XYZ</span>.BasisY;\n    <span class=\"teal\">XYZ</span> pmid = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 2.5, 2.5, 0 );\n    <span class=\"teal\">Arc</span> testArc = <span class=\"teal\">Arc</span>.Create( p0, p5, pmid );\n \n    <span class=\"teal\">Plane</span> geometryPlane = creapp.NewPlane(\n      <span class=\"teal\">XYZ</span>.BasisZ, <span class=\"teal\">XYZ</span>.Zero );\n \n    <span class=\"teal\">SketchPlane</span> sketchPlane = <span class=\"teal\">SketchPlane</span>.Create(\n      doc, geometryPlane );\n \n    <span class=\"teal\">SweptBlend</span> aSweptBlend = credoc.NewSweptBlend(\n      <span class=\"blue\">true</span>, testArc, sketchPlane, bottomProfile,\n      topProfile );\n  }\n</pre><p>This creates a swept blend with circular start and end profiles with radius one and two respectively, swept along an arc with a diameter of five.</p><p>I added the call to this method to the existing one that generates a shape with straight edges, which I left unchanged from the original CmdNewSweptBlend implementation.</p><p>I fixed a few obvious small but crucial errors in your code, such as mixing up the endpoint and the midpoint in the calls to generate some of the arcs and passing in an empty CurveArrArray arrarr1 as an argument to the NewCurveLoopsProfile method when defining the SweepProfile bottomProfile...</p><p>Here is a screen snapshot of the two swept blends now generated by this command:</p><center>\n<img alt=\"New swept blend using arcs\" src=\"img/newsweptblendarc.png\" width=\"274\"/>\n</center><p>Here is another snapshot from a different point of view:</p><center>\n<img alt=\"New swept blend using arcs\" src=\"img/newsweptblendarc2.png\" width=\"400\"/>\n</center><p>As always, the most up to date version of The Building Coder samples is provided in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">its GitHub repository</a>,\n\nand the version described above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.115.2\">\nrelease 2015.0.115.2</a>.</p>"
  }
]