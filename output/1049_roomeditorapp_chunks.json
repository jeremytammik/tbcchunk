[
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "RoomEditorApp Architecture and External Application",
    "local_header_href": "#roomeditorapp-architecture-and-external-application",
    "chunk_text": "<h3>RoomEditorApp Architecture and External Application</h3><p>A couple of days ago, I wrote about\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/roomeditorapp-for-revit-2014-on-github.html\">\ncreating the RoomEditorApp GitHub repository</a> for\n\nthe Revit add-in part of my cloud-based real-time round-trip 2D Revit model editing application on any mobile device and promised to discuss its implementation details anon.</p><p>Well, the obvious place to start that is by providing an\n\n<a href=\"#2\">architectural overview</a>,\n\nfollowed by a look at its\n\n<a href=\"#3\">external application implementation</a>.</p><p>I'll also mention an issue with\n\n<a href=\"#4\">unresponsive Idling</a> that\n\nI am currently experiencing and hope to resolve, and where to\n\n<a href=\"#5\">download</a> the\ncurrent state of things.</p><p>Before getting to the nitty-gritty, by the way, have you already heard that\n\n<a href=\"http://www.archdaily.com/441499/top-10-apps-for-architects\">\nthree out of the top ten mobile apps for architects are developed by Autodesk</a>?</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "RoomEditorApp Architectural Overview",
    "local_header_href": "#roomeditorapp-architectural-overview",
    "chunk_text": "<h4>RoomEditorApp Architectural Overview</h4><p>The room editor add-in consists of the following modules:</p><ul>\n<li>App.cs</li>\n<li>CmdAbout.cs</li>\n<li>CmdSubscribe.cs</li>\n<li>CmdUpdate.cs</li>\n<li>CmdUpload.cs</li>\n<li>CmdUploadAll.cs</li>\n<li>ContiguousCurveSorter.cs</li>\n<li>DbModel.cs</li>\n<li>DbUpdater.cs</li>\n<li>DbUpload.cs</li>\n<li>GeoSnoop.cs</li>\n<li>JtBoundingBox2dInt.cs</li>\n<li>JtBoundingBoxXyz.cs</li>\n<li>JtPlacement2dInt.cs</li>\n<li>JtWindowHandle.cs</li>\n<li>Point2dInt.cs</li>\n<li>Point2dIntLoop.cs</li>\n<li>RoomEditorDb.cs</li>\n<li>Util.cs</li>\n</ul><p>Starting at the end of the list, Util.cs contains a bunch of utilities to handle little details such as:</p><ul>\n<li>Unit conversion</li>\n<li>Formatting</li>\n<li>Messages</li>\n<li>Browsing for a directory</li>\n<li>Flipping SVG Y coordinates</li>\n</ul><p>Moving back to the beginning of the list, the five modules with a Cmd prefix are external command implementations driven by the custom panel created by the external application defined in App.cs.</p><p>They fulfil the following tasks:</p><ul>\n<li>CmdAbout – display an about message.</li>\n<li>CmdUpload – upload selected rooms and their furniture and equipment to the cloud database.</li>\n<li>CmdUploadAll – upload all rooms in the model and their furniture and equipment to the cloud database.</li>\n<li>CmdUpdate – refresh all furniture and equipment family instance placements from the cloud database.</li>\n<li>CmdSubscribe – toggle back and forth between real-time subscription to updates from the cloud database.</li>\n</ul><p>A noteworthy aspect of subscription command is that it switches the button text dynamically to reflect its state. </p><p>They are represented by corresponding icons displayed by the ribbon panel user interface:</p><center>\n<img alt=\"Room editor add-in user interface\" src=\"img/roomedit_2014_ext_app_icons.png\" width=\"300\"/>\n</center><p>The remaining modules can be grouped into the following main areas:</p><ul>\n<li>Boundary loops – determine the room and family instance boundary loop polygons, driven by CmdUpload:</li>\n<ul>\n<li>ContiguousCurveSorter.cs</li>\n<li>JtBoundingBox2dInt.cs</li>\n<li>JtBoundingBoxXyz.cs</li>\n<li>JtPlacement2dInt.cs</li>\n<li>Point2dInt.cs</li>\n<li>Point2dIntLoop.cs</li>\n</ul>\n<li>GeoSnoop – temporary graphical display of the boundary loops, triggered by CmdUpload when it has done its job:</li>\n<ul>\n<li>GeoSnoop.cs</li>\n<li>JtWindowHandle.cs</li>\n</ul>\n<li>Database model – manage the information uploaded to and retrieved from the cloud database:</li>\n<ul>\n<li>DbModel.cs</li>\n<li>DbUpdater.cs</li>\n<li>DbUpload.cs</li>\n<li>RoomEditorDb.cs</li>\n</ul>\n</ul><p>I already discussed all the aspects of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html\">\nboundary loop determination, GeoSnoop graphical debugging display and database representation</a> in\n\npretty good detail back in April:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html#2\">Database structure</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html#3\">Database upload</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html#4\">Integer based 2D placement</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html#5\">Populating symbols and instances</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html#6\">Retrieving the boundary loops</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html#7\">GeoSnoop loop display</a></li>\n</ul><p>Actually, that was the last time I discussed anything at all related to this add-in until migrating it to Revit 2014 last week, so all the items I listed as\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html#10\">\nnext steps</a> back\n\nthen and that have now been implemented remain to be discussed.</p><p>Let's begin with the external application implementation:</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "RoomEditorApp External Application Implementation",
    "local_header_href": "#roomeditorapp-external-application-implementation",
    "chunk_text": "<h4>RoomEditorApp External Application Implementation</h4><p>The external application fulfils the following main tasks:</p><ol>\n<li><a href=\"3.1\">Handle retrieval of the embedded icon resources</a>.</li>\n<li><a href=\"3.2\">Create and populate the custom ribbon panel</a>.</li>\n<li><a href=\"3.3\">Toggle subscription command text and manage the Idling event handler</a>.</li>\n<li><a href=\"3.4\">Main entry points</a>.</li>\n</ol><p>Let's look at each of these in more detail.</p><a name=\"3.1\"></a>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "Handle Retrieval of Embedded Icon Resources",
    "local_header_href": "#handle-retrieval-of-embedded-icon-resources",
    "chunk_text": "<h4>Handle Retrieval of Embedded Icon Resources</h4><p>All the icons are saved into the Revit add-in assembly as embedded resources, living in an own subfolder named Icon:</p><center>\n<img alt=\"Embedded icon resources\" src=\"img/roomedit_2014_embedded_icon_resource.png\" width=\"220\"/>\n</center><p>This is obviously very handy, as there is no need to copy the icon files around separately.</p><p>Here are the methods used to extract the bitmap image information at runtime:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Executing assembly namespace</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> _namespace = <span class=\"blue\">typeof</span>( <span class=\"teal\">App</span> ).Namespace;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return path to embedded resource icon</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> IconResourcePath(\n    <span class=\"blue\">string</span> name,\n    <span class=\"blue\">string</span> size )\n  {\n    <span class=\"blue\">return</span> _namespace\n      + <span class=\"maroon\">\".\"</span> + <span class=\"maroon\">\"Icon\"</span> <span class=\"green\">// folder name</span>\n      + <span class=\"maroon\">\".\"</span> + name + size <span class=\"green\">// icon name</span>\n      + <span class=\"maroon\">\".png\"</span>; <span class=\"green\">// filename extension</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Load a new icon bitmap from embedded resources.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> For the BitmapImage, make sure you reference </span>\n  <span class=\"gray\">///</span><span class=\"green\"> WindowsBase and PresentationCore, and import </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the System.Windows.Media.Imaging namespace. </span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">BitmapImage</span> GetBitmapImage(\n    <span class=\"teal\">Assembly</span> a,\n    <span class=\"blue\">string</span> path )\n  {\n    <span class=\"blue\">string</span>[] names = a.GetManifestResourceNames();\n \n    <span class=\"teal\">Stream</span> s = a.GetManifestResourceStream( path );\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != s,\n      <span class=\"maroon\">\"expected valid icon resource\"</span> );\n \n    <span class=\"teal\">BitmapImage</span> img = <span class=\"blue\">new</span> <span class=\"teal\">BitmapImage</span>();\n \n    img.BeginInit();\n    img.StreamSource = s;\n    img.EndInit();\n \n    <span class=\"blue\">return</span> img;\n  }\n</pre><a name=\"3.2\"></a>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "Create and Populate Custom Ribbon Panel",
    "local_header_href": "#create-and-populate-custom-ribbon-panel",
    "chunk_text": "<h4>Create and Populate Custom Ribbon Panel</h4><p>I define the various command button data such as its text, implementation class, icon and tooltip in arrays of strings to enable defining the ribbon items in a simple loop.</p><p>With the bitmap handling functionality in place, the entire custom ribbon panel creation is handled in one fell swoop by the following AddRibbonPanel method:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Caption</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">const</span> <span class=\"blue\">string</span> Caption = <span class=\"maroon\">\"Room Editor\"</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Command name prefix</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _cmd_prefix = <span class=\"maroon\">\"Cmd\"</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Currently executing assembly path</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> _path = <span class=\"blue\">typeof</span>( <span class=\"teal\">App</span> )\n    .Assembly.Location;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of our ribbon buttons to toggle</span>\n  <span class=\"gray\">///</span><span class=\"green\"> them on and off later and change their text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">RibbonItem</span>[] _buttons;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create a custom ribbon panel and populate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> it with our commands, saving the resulting</span>\n  <span class=\"gray\">///</span><span class=\"green\"> ribbon items for later access.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> AddRibbonPanel(\n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">string</span>[] tooltip = <span class=\"blue\">new</span> <span class=\"blue\">string</span>[] {\n      <span class=\"maroon\">\"Upload selected rooms to cloud.\"</span>,\n      <span class=\"maroon\">\"Upload all rooms to cloud.\"</span>,\n      <span class=\"maroon\">\"Update furniture from the last cloud edit.\"</span>,\n      <span class=\"maroon\">\"Subscribe to or unsubscribe from updates.\"</span>,\n      <span class=\"maroon\">\"About \"</span> + Caption + <span class=\"maroon\">\": ...\"</span>\n    };\n \n    <span class=\"blue\">string</span>[] text = <span class=\"blue\">new</span> <span class=\"blue\">string</span>[] {\n      <span class=\"maroon\">\"Upload Selected\"</span>,\n      <span class=\"maroon\">\"Upload All\"</span>,\n      <span class=\"maroon\">\"Update Furniture\"</span>,\n      <span class=\"maroon\">\"Subscribe\"</span>,\n      <span class=\"maroon\">\"About...\"</span>\n    };\n \n    <span class=\"blue\">string</span>[] classNameStem = <span class=\"blue\">new</span> <span class=\"blue\">string</span>[] {\n      <span class=\"maroon\">\"Upload\"</span>,\n      <span class=\"maroon\">\"UploadAll\"</span>,\n      <span class=\"maroon\">\"Update\"</span>,\n      <span class=\"maroon\">\"Subscribe\"</span>,\n      <span class=\"maroon\">\"About\"</span>\n    };\n \n    <span class=\"blue\">string</span>[] iconName = <span class=\"blue\">new</span> <span class=\"blue\">string</span>[] {\n      <span class=\"maroon\">\"1Up\"</span>,\n      <span class=\"maroon\">\"2Up\"</span>,\n      <span class=\"maroon\">\"1Down\"</span>,\n      <span class=\"maroon\">\"ZigZagRed\"</span>,\n      <span class=\"maroon\">\"Question\"</span>\n    };\n \n    <span class=\"blue\">int</span> n = classNameStem.Length;\n \n    <span class=\"teal\">Debug</span>.Assert( text.Length == n,\n      <span class=\"maroon\">\"expected equal number of text and class name entries\"</span> );\n \n    _buttons = <span class=\"blue\">new</span> <span class=\"teal\">RibbonItem</span>[n];\n \n    <span class=\"teal\">RibbonPanel</span> panel\n      = a.CreateRibbonPanel( Caption );\n \n    <span class=\"teal\">SplitButtonData</span> splitBtnData\n      = <span class=\"blue\">new</span> <span class=\"teal\">SplitButtonData</span>( Caption, Caption );\n \n    <span class=\"teal\">SplitButton</span> splitBtn = panel.AddItem(\n      splitBtnData ) <span class=\"blue\">as</span> <span class=\"teal\">SplitButton</span>;\n \n    <span class=\"teal\">Assembly</span> asm = <span class=\"blue\">typeof</span>( <span class=\"teal\">App</span> ).Assembly;\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n    {\n      <span class=\"teal\">PushButtonData</span> d = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n        classNameStem[i], text[i], _path,\n        _namespace + <span class=\"maroon\">\".\"</span> + _cmd_prefix\n        + classNameStem[i] );\n \n      d.ToolTip = tooltip[i];\n \n      d.Image = GetBitmapImage( asm,\n        IconResourcePath( iconName[i], <span class=\"maroon\">\"16\"</span> ) );\n \n      d.LargeImage = GetBitmapImage( asm,\n        IconResourcePath( iconName[i], <span class=\"maroon\">\"32\"</span> ) );\n \n      d.ToolTipImage = GetBitmapImage( asm,\n        IconResourcePath( iconName[i], <span class=\"maroon\">\"\"</span> ) );\n \n      _buttons[i] = splitBtn.AddPushButton( d );\n    }\n  }\n</pre><a name=\"3.3\"></a>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "Toggle the Subscription Command Text and Idling Event Handler Management",
    "local_header_href": "#toggle-the-subscription-command-text-and-idling-event-handler-management",
    "chunk_text": "<h4>Toggle the Subscription Command Text and Idling Event Handler Management</h4><p>With all of the commands in place, the subscription command text toggling and Idling event handler management becomes almost trivial.</p><p>I presented the principles to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/roll-your-own-toggle-button.html#3\">\nimplement your own toggle button</a>\n\na year ago, and we simply make use of that here.</p><p>The button icon could be toggled as well, if we like.</p><p>The Idling event handler is defined in the subscription command implementation, where it belongs.</p><p>However, best practice as demonstrated by the ModelessDialog ModelessForm_IdlingEvent Revit SDK sample retains the final control and the subscription to the event in the external application.</p><p>In order for the command to define the handler and toggle the subscription on and off, the external application provides a method named ToggleSubscription taking the event handler implementation as an argument.</p><p>It subscribes to or unsubscribes from the event as requested, and also toggles the text displayed by the corresponding command button:</p><p>I define a property name 'Subscribed' to determine the current subscription status, and toggle it on and off by calling the ToggleSubscription method:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Our one and only Revit-provided </span>\n  <span class=\"gray\">///</span><span class=\"green\"> UIControlledApplication instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">UIControlledApplication</span> _uiapp;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Switch between subscribe </span>\n  <span class=\"gray\">///</span><span class=\"green\"> and unsubscribe commands.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _subscribe = <span class=\"maroon\">\"Subscribe\"</span>;\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _unsubscribe = <span class=\"maroon\">\"Unsubscribe\"</span>;\n\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Are we currently subscribed </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to automatic cloud updates?</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> Subscribed\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _buttons[3].ItemText.Equals(\n        _unsubscribe );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Toggle on and off subscription to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> automatic cloud updates.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> ToggleSubscription(\n    <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt; handler )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      _uiapp.Idling -= handler;\n      _buttons[3].ItemText = _subscribe;\n    }\n    <span class=\"blue\">else</span>\n    {\n      _uiapp.Idling += handler;\n      _buttons[3].ItemText = _unsubscribe;\n    }\n  }\n</pre><a name=\"3.4\"></a>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "Main Entry Points OnStartup and OnShutdown",
    "local_header_href": "#main-entry-points-onstartup-and-onshutdown",
    "chunk_text": "<h4>Main Entry Points OnStartup and OnShutdown</h4><p>All that remains to do for the external application is initialise the _uiapp variable and add the custom ribbon panel on start-up, and remove the Idling event handler if it is still active on shutdown:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup(\n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _uiapp = a;\n \n    AddRibbonPanel( a );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown(\n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      _uiapp.Idling\n        -= <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;(\n          ( sender, ea ) =&gt; { } );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p>This is probably my most complex external application to date.</p><p>I hope you appreciate its simplicity in spite of all the requirements it fulfils, and that this presentation helps you keep your add-ins as simple as possible as well.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "Unresponsive Idling",
    "local_header_href": "#unresponsive-idling",
    "chunk_text": "<h4>Unresponsive Idling</h4><p>Before closing, let me mention that my tests of this application so far on Revit 2014 and Windows 7 show a decreased responsiveness of the Idling event compared to Revit 2013 and Windows XP.</p><p>In Revit 2013, I was even calling the SetRaiseWithoutDelay method to get as many Idling calls as possible with no problem.</p><p>Regardless of that setting, the system is currently much less responsive in Revit 2014.</p><p>The task manager shows Revit.exe hogging almost 100% percent of the CPU as soon as I subscribe to the Idling event.</p><p>Debugging this, I also note that my attempts to unsubscribe from the Idling event handler have no effect; surprisingly, the Idling event handler still gets called anyway.\nSomething seems to have changed in the interaction between Revit 2014 and the Idling event.</p><p>I added some debugging variables to count the number of Idling calls received, print a message now and then, and skip the database query for most of them.\nI also removed the exception wrapping the database query.\nThe problem is somewhat alleviated but not yet solved.</p><p>I don't know yet whether I have an issue with my virtual machine in Parallels in Mac, or my cloud database is acting differently on Windows 7 than it did on Windows XP, or some other suboptimal setting is causing this.\nHopefully I can get it resolved soon, though.</p><p>Any advice on this is much appreciated!</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1049_roomeditorapp",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>This application lives in the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">\nRoomEditorApp GitHub repository</a> and\n\nthe version discussed above is\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.0.15\">\nrelease 2014.0.0.15</a>.</p>"
  }
]