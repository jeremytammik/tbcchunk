[
  {
    "original_filename": "1984_transient",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.jsdelivr.net/gh/google/code-prettify@master/loader/run_prettify.js\"></script>\n</head>\n\n<!---\n\n- RevitLookup Ideas #146\n  https://github.com/jeremytammik/RevitLookup/discussions/146\n\n- transient elements, jig, graphics:\n  draw line visible on screen\n  https://forums.autodesk.com/t5/revit-api-forum/draw-line-visible-on-screen/m-p/11778165#M69522\n\n- Open files located in ACC Docs\n  https://stackoverflow.com/questions/75530623/open-files-located-in-the-accdocs\n  https://forums.autodesk.com/t5/revit-api-forum/opening-a-cloud-model-with-revit-api/m-p/11767222\n\n- RVT to IFC export with DA4 Revit\n  https://autodesk.slack.com/archives/C03FXKR0H6J/p1676932151859789\n\n- stop using jpeg\n  https://daniel.do/article/its-the-future-stop-using-jpegs/\n  It’s the future — you can stop using JPEGs\n  An overview of some compelling alternatives.\n\ntwitter:\n\nA request for new ideas for enhancing RevitLookup, implementing transient elements for a jig, e.g., a pickpoint rubber band, and opening BIMs on ACC Docs with the @AutodeskRevit #RevitAPI #BIM @DynamoBIM @AutodeskAPS https://autode.sk/openaccdocs`\n\nA request for new ideas for enhancing RevitLookup, implementing a pickpoint rubber band and opening BIMs on ACC Docs\n&ndash; Request for RevitLookup ideas\n&ndash; Transient elements for jig\n&ndash; Opening a model in ACC Docs\n&ndash; Stop using JPEG\n&ndash; Stop using voice id...\n\nlinkedin:\n\nA request for new ideas for enhancing RevitLookup, implementing transient elements for a jig, e.g., a pickpoint rubber band, and opening BIMs on ACC Docs with the #RevitAPI\n\nhttps://autode.sk/openaccdocs`\n\n- Request for RevitLookup ideas\n- Transient elements for jig\n- Opening a model in ACC Docs\n- Stop using JPEG\n- Stop using voice id...\n\n#BIM #DynamoBim #AutodeskAPS #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n<pre class=\"code\">\n</pre>\n\n-->"
  },
  {
    "original_filename": "1984_transient",
    "header_text": "Lookup Ideas, Jigs and ACC Docs Access",
    "local_header_href": "#lookup-ideas-jigs-and-acc-docs-access",
    "chunk_text": "### Lookup Ideas, Jigs and ACC Docs Access\n\nToday, we look at a request for new ideas for enhancing RevitLookup, implementing a pickpoint rubber band and opening BIMs on ACC Docs:\n\n- [Request for RevitLookup ideas](#2)\n- [Transient elements for jig](#3)\n- [Transient `DirectShape` jig](#3.1)\n- [Opening a model in ACC Docs](#4)\n- [Stop using JPEG](#5)\n- [Stop using voice id](#6)"
  },
  {
    "original_filename": "1984_transient",
    "header_text": "Request for RevitLookup Ideas",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Request for RevitLookup Ideas\n\nDo you have any ideas\nfor [RevitLookup](https://github.com/jeremytammik/RevitLookup) enhancements?\n\nA lot of exciting functionality has already been worked on in\nthe [dev](https://github.com/jeremytammik/RevitLookup/tree/dev)\nand [dev_winui](https://github.com/jeremytammik/RevitLookup/tree/dev_winui) branches.\nWe expect to see that coming out quite soon.\n\nMeanwhile, Roman [Nice3point](https://github.com/Nice3point) opened a discussion for collecting\n[RevitLookup Ideas](https://github.com/jeremytammik/RevitLookup/discussions/146).\nYour contributions there are welcome.\nThank you!"
  },
  {
    "original_filename": "1984_transient",
    "header_text": "Transient Elements for Jig",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Transient Elements for Jig\n\nA couple of ideas on creating transient elements graphics similar to the AutoCAD jig functionality using\nthe `IDirectContext3DServer` functionality or the temporary InCanvas graphics API were recapitulated in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [drawing line visible on screen](https://forums.autodesk.com/t5/revit-api-forum/draw-line-visible-on-screen/m-p/11778165):\n\n<ul>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2020/10/onbox-directcontext-jig-and-no-cdn.html\" target=\"_blank\" rel=\"noopener\">Onbox, DirectContext Jig and No CDN</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2021/01/transient-graphics-humane-ai-basic-income-and-lockdown.html\" target=\"_blank\" rel=\"noopener\">Transient Graphics, Humane AI, BI and Lockdown</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2021/05/flip-mirror-transform-and-transient-graphics.html\" target=\"_blank\" rel=\"noopener\">Flip, Mirror, Transform and Transient Graphics</a></li>\n</ul>\n\n<center>\n<img src=\"img/pick_point_rubber_band.png\" alt=\"Pick point rubber band\" title=\"Pick point rubber band\" width=\"600\"/> <!-- 600 x 367 pixels -->\n</center>\n\nLorenzo Virone shared a [different approach](https://forums.autodesk.com/t5/revit-api-forum/draw-line-visible-on-screen/m-p/11778165#M69522), creating and deleting database-resident Revit elements on the fly in a loop:\n\nI faced a similar UI problem to create a rubber band between two points.\nI used two functions, `Line.CreateBound` and `NewDetailCurve`, inside a loop to create a line at the cursor position, refresh, and delete the line every 0.1 seconds, until the user chooses the second point.\nA little tricky, but it works fine for me, and Revit seems to execute these 2 functions very fast.\n\nThis trick will technically work with anything:\ncreate new elements on each mouse movement, refresh, delete the created elements and replace them with new ones.\nYou can use either model or detail elements.\nIt's easy to implement, because you just need to call the two methods, e.g., like this:\n\n<div style=\"border: #000080 1px solid; color: #000; font-family: 'Cascadia Mono', Consolas, 'Courier New', Courier, Monospace; font-size: 10pt\">\n<div style=\"background: #f3f3f3; color: #000000; max-height: 300px; overflow: auto\">\n<ol start=\"28\" style=\"background: #ffffff; margin: 0; padding: 0;\">\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#0000ff\">bool</span> done = <span style=\"color:#0000ff\">false</span>;</li>\n<li>&#160; List&lt;ElementId&gt; temp = <span style=\"color:#0000ff\">new</span> List&lt;ElementId&gt;();</li>\n<li style=\"background: #f3f3f3\">&nbsp;</li>\n<li>&#160; <span style=\"color:#0000ff\">while</span> (!done)</li>\n<li style=\"background: #f3f3f3\">&#160; {</li>\n<li>&#160;&#160;&#160; doc.Delete(temp);</li>\n<li style=\"background: #f3f3f3\">&nbsp;</li>\n<li>&#160;&#160;&#160; <span style=\"color:#008000\">// Create temp elements</span></li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; <span style=\"color:#008000\">// Save their IDs in `temp`</span></li>\n<li>&#160;&#160;&#160; <span style=\"color:#008000\">// Set `done` to `true` when finished</span></li>\n<li style=\"background: #f3f3f3\">&nbsp;</li>\n<li>&#160;&#160;&#160; doc.regenerate();</li>\n<li style=\"background: #f3f3f3\">&#160;&#160;&#160; uidoc.RefreshActiveView();</li>\n<li>&#160;&#160;&#160; Thread.Sleep(500); <span style=\"color:#008000\">// milliseconds</span></li>\n<li style=\"background: #f3f3f3\">&#160; }</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\">&#160; <span style=\"color:#008000\">// Your final elements are in `temp`</span></li>\n</ol>\n</div>\n</div>\n\nMany thanks to Lorenzo for sharing this nice solution.\n\n####<a name=\"3.1\"></a> Transient DirectShape Jig\n\nChuong Ho adds: This technique can also be used with a `DirectShape` element:\n\n<div style=\"border: #000080 1px solid; color: #000; font-family: 'Cascadia Mono', Consolas, 'Courier New', Courier, Monospace; font-size: 10pt\">\n<div style=\"background: #f3f3f3; color: #000000; max-height: 300px; overflow: auto\">\n<ol start=\"1\" style=\"background: #ffffff; margin: 0; padding: 0;\">\n<li><span style=\"color:#0000ff\">using</span> Autodesk.Revit.DB;</li>\n<li style=\"background: #f3f3f3\"><span style=\"color:#0000ff\">using</span> Autodesk.Revit.UI.Selection;</li>\n<li><span style=\"color:#0000ff\">using</span> System.Collections.Generic;</li>\n<li style=\"background: #f3f3f3\"><span style=\"color:#0000ff\">using</span> Line = Autodesk.Revit.DB.Line;</li>\n<li><span style=\"color:#0000ff\">using</span> Point = Autodesk.Revit.DB.Point;</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\"><span style=\"color:#0000ff\">var</span> Doc = commandData.Application.ActiveUIDocument.Document;</li>\n<li>&nbsp;</li>\n<li style=\"background: #f3f3f3\"><span style=\"color:#0000ff\">using</span> TransactionGroup trang = <span style=\"color:#0000ff\">new</span> TransactionGroup(Doc, <span style=\"color:#a31515\">&quot;test&quot;</span>);</li>\n<li>trang.Start();</li>\n<li style=\"background: #f3f3f3\">XYZ a = UIDoc.Selection.PickPoint(ObjectSnapTypes.None);</li>\n<li>SetPoint(a);</li>\n<li style=\"background: #f3f3f3\">XYZ b = UIDoc.Selection.PickPoint(ObjectSnapTypes.None);</li>\n<li>SetPoint(b);</li>\n<li style=\"background: #f3f3f3\">SetLine(a, b);</li>\n<li>XYZ p1 = UIDoc.Selection.PickPoint(ObjectSnapTypes.None);</li>\n<li style=\"background: #f3f3f3\">SetPoint(p1);</li>\n<li>XYZ p2 = UIDoc.Selection.PickPoint(ObjectSnapTypes.None);</li>\n<li style=\"background: #f3f3f3\">SetPoint(p2);</li>\n<li><span style=\"color:#0000ff\">bool</span> isSamSide = IsSamSide(p1, p2, a, b);</li>\n<li style=\"background: #f3f3f3\">MessageBox.Show(isSamSide.ToString());</li>\n<li>trang.Assimilate();</li>\n<li style=\"background: #f3f3f3\">&nbsp;</li>\n<li><span style=\"color:#008000\">// visualize a point</span></li>\n<li style=\"background: #f3f3f3\"><span style=\"color:#0000ff\">void</span> SetPoint(XYZ xyz)</li>\n<li>{</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;<span style=\"color:#0000ff\">using</span> (Transaction tran = <span style=\"color:#0000ff\">new</span> Transaction(Doc, <span style=\"color:#a31515\">&quot;Add point&quot;</span>))</li>\n<li>&nbsp;&nbsp;{</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;tran.Start();</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;Point point1 = Point.Create(xyz);</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;DirectShape ds =</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DirectShape.CreateElement(Doc, <span style=\"color:#0000ff\">new</span> ElementId(BuiltInCategory.OST_GenericModel));</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;ds.SetShape(<span style=\"color:#0000ff\">new</span> List&lt;GeometryObject&gt;() { point1 });</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;tran.Commit();</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;}</li>\n<li>}</li>\n<li style=\"background: #f3f3f3\">&nbsp;</li>\n<li><span style=\"color:#008000\">// visualize a line</span></li>\n<li style=\"background: #f3f3f3\"><span style=\"color:#0000ff\">void</span> SetLine(XYZ x1, XYZ x2)</li>\n<li>{</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;<span style=\"color:#0000ff\">using</span> (Transaction tran = <span style=\"color:#0000ff\">new</span> Transaction(Doc, <span style=\"color:#a31515\">&quot;Add line&quot;</span>))</li>\n<li>&nbsp;&nbsp;{</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;tran.Start();</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;Line line = Line.CreateBound(x1, x2);</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;DirectShape ds = DirectShape.CreateElement(</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Doc, <span style=\"color:#0000ff\">new</span> ElementId(BuiltInCategory.OST_GenericModel));</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;&nbsp;&nbsp;ds.SetShape(<span style=\"color:#0000ff\">new</span> List&lt;GeometryObject&gt;() { line });</li>\n<li>&nbsp;&nbsp;&nbsp;&nbsp;tran.Commit();</li>\n<li style=\"background: #f3f3f3\">&nbsp;&nbsp;}</li>\n<li>}</li>\n</ol>\n</div>\n</div>\n\n<center>\n<img src=\"img/pick_point_rubber_band_jig_directshape.gif\" alt=\"Pick point rubber band\" title=\"Pick point rubber band\" width=\"426\"/> <!-- 426 x 271 pixels -->\n</center>\n\nMany thanks to Chuong Ho for this addition!"
  },
  {
    "original_filename": "1984_transient",
    "header_text": "Opening a Model in ACC Docs",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Opening a Model in ACC Docs\n\nWe started out\ndiscussing [opening a cloud model with Revit API](https://forums.autodesk.com/t5/revit-api-forum/opening-a-cloud-model-with-revit-api/m-p/11767222) in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160),\nbut then moved it over to StackOverflow, the better place for such a cloud-related topic, where my colleague Eason Kang explains\nhow to [open files located in ACC Docs](https://stackoverflow.com/questions/75530623/open-files-located-in-the-accdocs):\n\n**Question:** My Visual Studio Revit API add-in open Revit files to export data in a batch.\nI can add many files which are on the networks and the plugin automatically opens them all.\nIs it possible to also open files that are in the ACC Docs cloud?\n\nI know I can open AccDocs which were be already downloaded locally by searching for them in the collaboration cache folder, but how to open files which have not yet been downloaded?\n\n**Answer:** Since you mention the collaboration cache folder, I assume you are using\nthe [Revit Cloud Worksharing model](https://knowledge.autodesk.com/support/bim-360/learn-explore/caas/CloudHelp/cloudhelp/ENU/About-BIM360/files/about-bim-360-design/About-BIM360-about-bim-360-design-about-revit-cloud-worksharing-html-html.html),\na.k.a. `C4R`, the model for Autodesk Collaboration for Revit.\n\nIf so, you can make use of\nthe [APS Data Management API](https://aps.autodesk.com/en/docs/data/v2/developers_guide/overview/) to\nobtain the `projectGuid` and `modelGuid` in the model version tip like this:\n\n<pre class=\"prettyprint lang-json\">\n{\n   \"type\":\"versions\",\n   \"id\":\"urn:adsk.wipprod:fs.file:vf.abcd1234?version=1\",\n   \"attributes\":{\n      \"name\":\"fileName.rvt\",\n      \"displayName\":\"fileName.rvt\",\n      ...\n      \"mimeType\":\"application/vnd.autodesk.r360\",\n      \"storageSize\":123456,\n      \"fileType\":\"rvt\",\n      \"extension\":{\n         \"type\":\"versions:autodesk.bim360:C4RModel\",\n         ....\n         \"data\":{\n            ...\n            \"projectGuid\":\"48da72af-3aa6-4b76-866b-c11bb3d53883\",\n            ....\n            \"modelGuid\":\"e666fa30-9808-42f4-a05b-8cb8da576fe9\",\n            ....\n         }\n      }\n   },\n   ....\n}\n</pre>\n\nWith those in hand, you can open the C4R model using Revit API like this:\n\n<pre class=\"prettyprint lang-cs\">\n  // where is your BIM360/ACC account based, US or EU?\n\n  var region = ModelPathUtils.CloudRegionUS;\n\n  var projectGuid = new Guid(\"48da72af-3aa6-4b76-866b-c11bb3d53883\");\n  var modelGuid = new Guid(\"e666fa30-9808-42f4-a05b-8cb8da576fe9\");\n\n  // For Revit 2023 and newer:\n\n  var modelPath = ModelPathUtils.ConvertCloudGUIDsToCloudPath(\n    region, projectGuid, modelGuid );\n\n  // For Revit 2019 - 2022:\n\n  //var modelPath = ModelPathUtils.ConvertCloudGUIDsToCloudPath(\n  //  projectGuid, modelGuid );\n\n  var openOptions = new OpenOptions();\n\n  app.OpenAndActivateDocument( modelPath, openOptions ); // on desktop\n\n  // on Design Automation for Revit or\n  // to not activate the model on Revit desktop:\n\n  // app.OpenDocumentFile( modelPath, openOptions );\n</pre>\n\nYou can also make use\nthe [Visual Studio APS Data Management package on NuGet](https://www.nuget.org/packages/Autodesk.Forge) for this.\nThe [Hubs Browser tutorial](https://tutorials.autodesk.io/tutorials/hubs-browser/) demonstrates its use.\n\nReferences:\n\n- [Accessing BIM 360 design models on Revit](https://aps.autodesk.com/blog/accessing-bim-360-design-models-revit)\n- [How to open a cloud model](https://thebuildingcoder.typepad.com/blog/2020/04/revit-2021-cloud-model-api.html#4.4)\n- [Developer's guide online help on cloud models](https://help.autodesk.com/view/RVT/2023/ENU/?guid=Revit_API_Revit_API_Developers_Guide_Introduction_Application_and_Document_CloudFiles_html)\n\nMany thanks to Eason for this comprehensive answer!"
  },
  {
    "original_filename": "1984_transient",
    "header_text": "Stop Using JPEG",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Stop Using JPEG\n\nMoving away from Revit and its API to other interesting current news, Daniel Immke suggests\nthat [it’s the future &ndash; you can stop using JPEGs ](https://daniel.do/article/its-the-future-stop-using-jpegs) and\npresents an overview and rationale for some compelling alternatives, e.g., AVIF and WebP."
  },
  {
    "original_filename": "1984_transient",
    "header_text": "Stop Using Voice Id",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Stop Using Voice Id\n\nJoseph Cox describes [how he broke into a bank account with an AI-generated voice](https://www.vice.com/en/article/dy7axa/how-i-broke-into-a-bank-account-with-an-ai-generated-voice)\n&ndash; some banks tout voice ID as a secure way to log into your account.\nHe proves it's possible to trick such systems with free or cheap AI-generated voices."
  }
]