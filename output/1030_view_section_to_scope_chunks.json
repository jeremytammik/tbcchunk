[
  {
    "original_filename": "1030_view_section_to_scope",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1030_view_section_to_scope",
    "header_text": "Set View Section Box to Match Scope Box Updated for Revit 2014",
    "local_header_href": "#set-view-section-box-to-match-scope-box-updated-for-revit-2014",
    "chunk_text": "<h3>Set View Section Box to Match Scope Box Updated for Revit 2014</h3><p>A year ago, we looked at\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/set-view-section-box-to-match-scope-box.html\">\nsetting the view section box to match its scope box</a>,\n\nin particular:</p><ul>\n<li>How to retrieve the exact geometric location, size and orientation of the scope box.</li>\n<li>How to set the exact geometric location, size and orientation of the 3D view section box.</li>\n</ul><p>Dan Rumery of\n\n<a href=\"http://www.bvn.com.au\">\nBVN Donovan Hill</a> recently\n\nsubmitted a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/set-view-section-box-to-match-scope-box.html?cid=6a00e553e168978833019aff6c2563970d#comment-6a00e553e168978833019aff6c2563970d\">\ncomment</a> to\n\npoint out an error in the code presented there:</p><blockquote>\n<p>I think you'll find there's a bug in both versions of your code above where you're setting the bounding box maximum to the sum of the three basis vectors. What that gives you is the maximum point in world space when it should be the maximum point in the local space of the bounding box. This is probably why people were having trouble getting this code to work correctly for the general case.</p>\n<p>I believe changing the offending line to the following makes both of your solutions work in all cases:</p>\n<pre class=\"code\">\n  bbox.Max = new XYZ(vx.GetLength(),\n    vy.GetLength(), vz.GetLength())\n</pre>\n<p>Happy days!</p>\n</blockquote><p>Since several others tried to use the code and it appears to be of general interest, I took this opportunity to fix the error and update the add-in for Revit 2014.</p><p>Here is\n\n<a href=\"zip/SetSectionBox2014.zip\">SetSectionBox2014.zip</a> containing\n\nthe full new source code, Visual Studio solution and add-in manifest.</p><p>Dan very kindly checked that the new setting is correct and adds:</p><p>Your code does indeed appear to work, at least the version that uses the GetSectionBoundingBoxFromScopeBox method.</p><p>An example that exhibits the bug in question is if you move the scope box away from the origin and / or rotate the scope box around the Z axis so that it no longer aligns to the X and Y axes.\nThe fixed version of the code handles this case perfectly.</p><p>For reference, here's a similar implementation in Python that does not rely on supplying a view direction to the function (copy and paste to an editor or view source to see the truncated lines in full):</p><pre class=\"prettyprint\">\n# Get the line endpoint that has the lowest Z value.\ndef GetLowerZEndPoint(line):\n  return line.get_EndPoint(0 if line.Direction.Z &gt; 0 else 1)\n\n# Determine if the line is vertical (parallel to the Z axis).\ndef IsVerticalLine(line):\n  return line.Direction.CrossProduct(XYZ.BasisZ).IsAlmostEqualTo(XYZ.Zero)\n\n# Determine if the vector represented by an XYZ value is oriented vertically up (parallel to the Z axis).\ndef IsUpVector(xyz):\n  return xyz.Normalize().IsAlmostEqualTo(XYZ.BasisZ)\n\n# Get a list of lines representing the scope box geometry.\ndef GetScopeBoxLines(scopeBox):\n  return list(scopeBox.get_Geometry(Options()))\n\n# Given a line and one of its end points, return the other end point.\ndef GetOppositeEndPoint(line, endPoint):\n  ep1 = line.get_EndPoint(0)\n  ep2 = line.get_EndPoint(1)\n  return ep1 if ep2.IsAlmostEqualTo(endPoint) else ep2 if ep1.IsAlmostEqualTo(endPoint) else None\n\n# Given an origin and three vectors representing the direction and lengths of three dimensions,\n# return a bounding box with an appropriate transform, min and max values.\ndef GetBoundingBoxXYZ(origin, v_x, v_y, v_z):\n  t = Transform.Identity\n  t.Origin = origin\n  t.BasisX = v_x.Normalize()\n  t.BasisY = v_y.Normalize()\n  t.BasisZ = v_z.Normalize()\n  bbox = BoundingBoxXYZ()\n  bbox.Transform = t\n  bbox.Min = XYZ.Zero\n  bbox.Max = XYZ(v_x.GetLength(), v_y.GetLength(), v_z.GetLength())\n  return bbox\n\n# Given a scope box element, return a bounding box matching the scope box geometry.\ndef GetScopeBoxBoundingBoxXYZ(scopeBox):\n  lines = GetScopeBoxLines(scopeBox)\n  # Choose an appropriate origin point.\n  verticalLines = list(l for l in lines if IsVerticalLine(l))\n  origin = GetLowerZEndPoint(verticalLines[0])\n  # Compute a list of vectors representing the length and orientation of scope box lines emanating\n  # from the chosen origin point. These vectors represent the three dimensions of the scope box.\n  originVectors = list(p - origin for p in (GetOppositeEndPoint(l, origin) for l in lines) if p is not None)\n  # Choose the vector that points up from the origin. This vector serves as the Z dimension of the bounding box.\n  v_z = list(v for v in originVectors if IsUpVector(v))[0]\n  # Choose the other two vectors representing the X and Y dimensions of the bounding box.\n  v1, v2 = list(v for v in originVectors if not v.IsAlmostEqualTo(v_z))\n  # Which vector is the X dimension and which is the Y dimension depends on their cross product.\n  # The three dimension vectors must form a right handed coordinate system.\n  v_x, v_y = (v1, v2) if v1.CrossProduct(v2).Normalize().IsAlmostEqualTo(v_z.Normalize()) else (v2, v1)\n  # Construct a bounding box representing the scope box geometry.\n  return GetBoundingBoxXYZ(origin, v_x, v_y, v_z)\n\n# Set 3D view's section box to match the specified scope box element extents.\ndef Test(scopeBox, view3d):\n  bbox = GetScopeBoxBoundingBoxXYZ(scopeBox)\n  tranny = Transaction(doc, \"set view section box to scope box extents\")\n  tranny.Start()\n  view3d.SectionBox = bbox\n  tranny.Commit()\n  return tranny.GetStatus()\n\n# Before running the following sample code, ensure the active view is a 3D view,\n# and ensure that you've selected exactly one scope box in the view.\n\n#scopeBox = selection[0]\n#view3d = doc.ActiveView\n#Test(scopeBox, view3d)\n</pre><p>Here is the raw Python file\n\n<a href=\"zip/bbox_from_scope_box.py.txt\">\nbbox_from_scope_box.py</a>.</p><p>You can run this code in the Revit Python Shell.\nIt should work on both Revit 2013 and Revit 2014.\nTest code and instructions are included at the end of the script.\nUncomment the three last lines to test that it works.\nIt requires a 3D view active and exactly one scope box selected in it, and assumes the first element of the selection set is a scope box element.</p><p>Please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/set-view-section-box-to-match-scope-box.html\">\noriginal post</a> for\n\nall further details and a usage example.\n\n<p>Many thanks to Dan for the fix, testing and nice Python sample!</p>\n</p>"
  }
]