[
  {
    "original_filename": "0939_transact_sub_group",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0939_transact_sub_group",
    "header_text": "Transactions, Sub-Transactions and Transaction Groups",
    "local_header_href": "#transactions-sub-transactions-and-transaction-groups",
    "chunk_text": "<h3>Transactions, Sub-Transactions and Transaction Groups</h3><p>Here is a recent query from a developer that led to a nice succinct overview of transactions, sub-transactions and transaction groups by Arnošt Löbel.\n\n<p>This makes a change from the recent rash of monster posts.\nThe last ten posts were all rather overwhelming in size, and hopefully impressive in content as well.\nFrom Aril 16 until 29, I posted a total of 26228 words, 245504 bytes.</p>\n<p>So let's keep this one short, sweet and to the point.</p>\n<p><strong>Question:</strong> When should I use a transaction group with transactions versus transaction with sub-transactions?\n\n<p>At first glance, it looks as if both can achieve the same result, but there must be some kind of difference, mustn't there?\n\n<p><strong>Answer:</strong> This question is actually covered at large in the API documentation for the respective classes.\nOf course, you could write a whole book about the detailed usage of transaction phases (i.e. Transaction, Transaction groups, Sub-Transaction), if you wanted to, but the documentation already covers all the really necessary information.\n\n<p>Here is a brief summary:\n\n<ul>\n<li>A <b>transaction</b> is a phase that is needed to make modifications to a model. A transaction is undoable. Once committed, it appears on the undo/redo menu, where the end user can make it undone or later redone. Transactions cannot be nested, for only one client can modify the model at any given time.</li>\n<li>A <b>sub-transaction</b> marks a phase within an open transaction. It is to control (if a control is needed) a set of modifications done in a transaction, meaning that the modification enclosed in a sub-transaction can be rolled back as if they have not happened. In a sense, it allows an application to go back to a certain point (the start of the sub-transaction) in a sequence of model changes. Sub-transactions can be nested. A sub-transaction cannot be undone/redone once committed.</li>\n<li>A <b>transaction group</b> can control a set of transactions in the sense that even transaction that have already been successfully submitted can be rolled back if they were committed while inside an open transaction group. This give an application a way of undoing past transaction if some other transactions later (but still within the group) do not go as well as expected. For example, if three transactions are required (for whatever reason) to achieve something, and it is necessary to commit all three for the changes to make sense, the transactions could be controlled by a group. If the second or the third transaction fails, the whole group can be rolled back. Transaction groups can be nested, but they cannot be undone/redone, i.e. there is no trace of them in the undo/redo menu for the end user to see.</li>\n</ul>\n<p>The\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\ntemporary transaction trick touch-up</a> describes\n\na scenario using a transaction group to enable a transaction to be committed, so the model is updated and the new state can be queried, and still enabling the whole action can be undone afterwards.</p>\n<p>For more information on the transaction framework, please refer to Arnošt's Autodesk University presentation\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/au-classes-on-python-ui-server-and-framework-apis.html#4\">\nCP3426 Core Frameworks in the Revit API</a>.</p>\n<p><strong>Response:</strong> Thank you!\nI use the temporary transaction trick quite a lot, so I'll definitely start using transaction groups now as well.\n</p></p></p></p></p></p>"
  }
]