[
  {
    "original_filename": "0672_pick_create_floor",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0672_pick_create_floor",
    "header_text": "Pick Corners and Create Floor",
    "local_header_href": "#pick-corners-and-create-floor",
    "chunk_text": "<h3>Pick Corners and Create Floor</h3><p>I presented an example demonstrating\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/floor-creation.html\">\nfloor creation</a> and\n\npointed out that\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/activate-a-3d-view.html\">\nsetting a view</a> using \n\nthe ActiveView property cannot be achieved within a transaction.\n\n<p>Ishwar Nagwani, Technical Consultant in our Bangalore organisation, contributed a sample command to create a new a floor which demonstrates both of these aspects in conjunction with the interactive PickBox method to determine the floor corners.\n\n<p>It makes use of the FindElement method, which we have seen in various incarnations to select an element of a given type with a specified name:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Helper function to find an element of </span>\n<span class=\"gray\">///</span><span class=\"green\"> the given type and the name. </span>\n<span class=\"gray\">///</span><span class=\"green\"> For example, use this to find a Reference </span>\n<span class=\"gray\">///</span><span class=\"green\"> or Level with the given name.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Element</span> findElement( \n  <span class=\"teal\">Document</span> doc, \n  <span class=\"teal\">Type</span> targetType, \n  <span class=\"blue\">string</span> targetName )\n{\n  <span class=\"green\">// Get the elements of the given type</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> col \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( targetType );\n \n  <span class=\"green\">// Return first one with the given name</span>\n \n  <span class=\"teal\">Element</span> targetElement = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n  {\n    <span class=\"blue\">if</span>( e.Name.Equals( targetName ) )\n    {\n      targetElement = e;\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"blue\">return</span> targetElement;\n}\n</pre>\n<p>By the way, here is another more succinct implementation to achieve the same thing using generics.\nI first implemented it using the generic First method, which has the disadvantage of throwing an exception if no element matching the requirements is found.\nLuckily, right after the first publication of this, Jon Smith pointed out in a comment below that it can easily be remedied by using FirstOrDefault instead, in which case the implementation is nice and short with no disadvantages at all:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the first element found of the </span>\n<span class=\"gray\">///</span><span class=\"green\"> specific target type with the given name.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Element</span> FindElement(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"teal\">Type</span> targetType,\n  <span class=\"blue\">string</span> targetName )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n    .OfClass( targetType )\n    .FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;( \n      e =&gt; e.Name.Equals( targetName ) );\n}\n</pre>\n<p>That method is used in the mainline Execute method of the external command to select a level and a plan view to create the floor on, before switching to that view in order to pick the floor corner points:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> External command to create a floor element </span>\n<span class=\"gray\">///</span><span class=\"green\"> by selecting two points in plan view.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Result</span> rc = <span class=\"teal\">Result</span>.Failed;\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Get the level for floor</span>\n \n  <span class=\"teal\">Level</span> floorLevel = findElement( \n    doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ), <span class=\"maroon\">\"Level 1\"</span> ) <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n \n  <span class=\"green\">// Get the plan view</span>\n \n  <span class=\"teal\">View</span> planView = findElement( \n    doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">View</span> ), <span class=\"maroon\">\"Level 1\"</span> ) <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n \n  <span class=\"green\">// Set the active view to plan</span>\n \n  uidoc.ActiveView = planView;\n \n  <span class=\"green\">// Create the floor in transaction</span>\n \n  <span class=\"teal\">Transaction</span> tr = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">TransactionStatus</span>.Started \n    == tr.Start( <span class=\"maroon\">\"Create Floor\"</span> ) )\n  {\n    <span class=\"blue\">try</span>\n    {\n      PickCreateFloor( uiapp, floorLevel );\n \n      tr.Commit();\n \n      rc = <span class=\"teal\">Result</span>.Succeeded;\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      tr.RollBack();\n \n      message = ex.Message;\n    }\n  }\n  <span class=\"blue\">return</span> rc;\n}\n</pre>\n<p>Once the level has been selected and the view has been set, the PickCreateFloor method is called to select the floor type to use, prompt the user to pick two corner points, use those to create the floor profile, and generate the floor element based on that:\n\n<pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _floorTypeName = <span class=\"maroon\">\"Generic - 12\\\"\"</span>;\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Create a rectangular floor on the given level,</span>\n<span class=\"gray\">///</span><span class=\"green\"> asking the user to interactively specify its </span>\n<span class=\"gray\">///</span><span class=\"green\"> corner points.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Floor</span> PickCreateFloor( \n  <span class=\"teal\">UIApplication</span> uiapp, \n  <span class=\"teal\">Level</span> level )\n{\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> appCreation \n    = uiapp.Application.Create;\n \n  <span class=\"green\">// Get a floor type for floor creation,</span>\n  <span class=\"green\">// e.g. Generic - 12\"</span>\n \n  <span class=\"teal\">FloorType</span> floorType = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FloorType</span> ft <span class=\"blue\">in</span> doc.FloorTypes )\n  {\n    <span class=\"blue\">if</span>( ft.Name.Equals( _floorTypeName ) )\n    {\n      floorType = ft;\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"teal\">PickedBox</span> box = uidoc.Selection.PickBox(\n      <span class=\"teal\">PickBoxStyle</span>.Directional,\n      <span class=\"maroon\">\"Click and drag to define two corners of a floor\"</span> );\n \n  <span class=\"green\">// Get the two user selected points on screen</span>\n \n  <span class=\"teal\">XYZ</span> first = box.Min;\n  <span class=\"teal\">XYZ</span> third = box.Max;\n \n  <span class=\"green\">// Build a floor profile for the floor creation</span>\n \n  <span class=\"teal\">XYZ</span> second = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( third.X, first.Y, 0 );\n  <span class=\"teal\">XYZ</span> fourth = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( first.X, third.Y, 0 );\n \n  <span class=\"teal\">CurveArray</span> profile = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n  profile.Append( appCreation.NewLineBound( first, second ) );\n  profile.Append( appCreation.NewLineBound( second, third ) );\n  profile.Append( appCreation.NewLineBound( third, fourth ) );\n  profile.Append( appCreation.NewLineBound( fourth, first ) );\n \n  <span class=\"green\">// The normal vector must be perpendicular </span>\n  <span class=\"green\">// to the profile</span>\n \n  <span class=\"teal\">XYZ</span> normal = <span class=\"teal\">XYZ</span>.BasisZ;\n \n  <span class=\"blue\">return</span> doc.Create.NewFloor( \n    profile, floorType, level, <span class=\"blue\">true</span>, normal );\n}\n</pre>\n<p>Here is \n\n<a href=\"zip/PickCreateFloor.zip\">\nPickCreateFloor.zip</a> including \n\nthe complete source code and Visual Studio solution of this command.\n\n<p>Many thanks to Ishwar for sharing this!\n</p></p></p></p></p></p></p></p>"
  }
]