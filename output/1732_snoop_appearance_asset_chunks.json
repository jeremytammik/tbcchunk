[
  {
    "original_filename": "1732_snoop_appearance_asset",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- Would you like to quickly understand the Forge architecture, including all relevant aspects, without getting inundated in nitty-gritty details?\n  Check out Scott Sheppard's very cool high-level executive overview in the\n  [Forge high-level picture for software development managers](https://labs.blogs.com/its_alive_in_the_lab/2019/03/whats-so-hot-about-this-forge-thing-the-high-level-picture-for-software-development-managers.html)\n  forge_high_level_picture.jpg 800\n\n- edit and continue when debugging a revit add-in\n  Why is my DLL still being used by Revit after execution?\n  https://stackoverflow.com/questions/55256817/why-is-my-dll-still-being-used-by-revit-after-execution\n  [debugging revit add-ins](http://archi-lab.net/debugging-revit-add-ins)\n  Following up on the comment I made whether you are restarting Revit. I did a write up on my blog that explains how you can use the Revit Add-In Manager to achieve the result you are after:\n  http://archi-lab.net/debugging-revit-add-ins/\n  The difference between this, and a standard method of debugging is that Revit loads the DLL using the LoadFrom() method, locking it up for as long as the Revit.exe process is on, while the Add-In Manager uses the Load() method that only reads the byte[] of the DLL which means its available, and you can re-build your solution in VS, and reload in Revit without closing it. It does have drawbacks obviously so please read the post.\n\ntwitter:\n\nHigh-level picture of Forge architecture, RevitLookup snooping appearance assets, debug and continue in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/snoopasset\n\nToday, let's look at the Forge architecture, Revit add-in debug, edit and continue, and yet another RevitLookup enhancement\n&ndash; High-level picture of Forge\n&ndash; Debug and continue in a Revit add-in\n&ndash; Snooping appearance assets...\n\nlinkedin:\n\nHigh-level picture of Forge architecture, RevitLookup snooping appearance assets, debug and continue in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/snoopasset\n\nToday, let's look at the Forge architecture, Revit add-in debug, edit and continue, and yet another RevitLookup enhancement:\n\n- High-level picture of Forge\n- Debug and continue in a Revit add-in\n- Snooping appearance assets...\n\nof [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2019.0.145.4).\n\n-->"
  },
  {
    "original_filename": "1732_snoop_appearance_asset",
    "header_text": "Forge Picture, Debugging, Snooping Appearances",
    "local_header_href": "#forge-picture-debugging-snooping-appearances",
    "chunk_text": "###  Forge Picture, Debugging, Snooping Appearances\n\nToday, let's look at the Forge architecture, Revit add-in debug, edit and continue, and yet another RevitLookup enhancement:\n\n- [High-level picture of Forge](#2) \n- [Debug and continue in a Revit add-in](#3) \n- [Snooping appearance assets](#4)"
  },
  {
    "original_filename": "1732_snoop_appearance_asset",
    "header_text": "<a name=\"2\"></a> High-Level Picture of Forge",
    "local_header_href": "#a-name2a-high-level-picture-of-forge",
    "chunk_text": "#### <a name=\"2\"></a> High-Level Picture of Forge\n\nWould you like to quickly understand\nthe [Forge](https://forge.autodesk.com) architecture,\nincluding all relevant aspects, without getting mired in its nitty-gritty details?\n\nCheck out Scott Sheppard's very cool executive overview in\nthe [Forge high-level picture for software development managers](https://labs.blogs.com/its_alive_in_the_lab/2019/03/whats-so-hot-about-this-forge-thing-the-high-level-picture-for-software-development-managers.html).\n\n<center>\n<img src=\"img/forge_high_level_picture.jpg\" alt=\"Forge high-level picture\" width=\"400\">\n</center>"
  },
  {
    "original_filename": "1732_snoop_appearance_asset",
    "header_text": "<a name=\"3\"></a> Debug and Continue in a Revit Add-In",
    "local_header_href": "#a-name3a-debug-and-continue-in-a-revit-add-in",
    "chunk_text": "#### <a name=\"3\"></a> Debug and Continue in a Revit Add-In\n\nDevelopers are continuously seeking reliable, efficient development approaches.\nSome ways have been described in the past implementing the functionality\nto [edit and continue, and debug without restarting](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.49).\n\nThis question arose again in the StackOverflow question\nasking [why is my DLL still being used by Revit after execution?](https://stackoverflow.com/questions/55256817/why-is-my-dll-still-being-used-by-revit-after-execution).\n\nKonrad Sobon jumped in and pointed out his solution:\n\n> I did a write-up on my blog that explains how you can use the Revit Add-In Manager to achieve the result you are after:\n\n>    - [debugging revit add-ins](http://archi-lab.net/debugging-revit-add-ins)\n\n> The difference between this and a standard method of debugging is that Revit loads the DLL using the `LoadFrom` method, locking it up for as long as the Revit.exe process is running, while the Add-In Manager uses the `Load` method that only reads the `byte[]` stream of the DLL which means it remains available, and you can re-build your solution in VS, and reload in Revit without closing it. It does have drawbacks, obviously, so please read the post."
  },
  {
    "original_filename": "1732_snoop_appearance_asset",
    "header_text": "<a name=\"4\"></a> Snooping Appearance Assets",
    "local_header_href": "#a-name4a-snooping-appearance-assets",
    "chunk_text": "#### <a name=\"4\"></a> Snooping Appearance Assets\n\nIn further support of efficient debugging and Revit database exploration, here is\nanother [RevitLookup](https://github.com/jeremytammik/RevitLookup) enhancement\nenabling snooping of appearance assets, based on two pull requests \nby [Victor Chekalin](http://www.facebook.com/profile.php?id=100003616852588), aka Виктор Чекалин:\n\n- [#48 &ndash; snoop rendering `AssetProperty`](https://github.com/jeremytammik/RevitLookup/pull/48)\n- [#49 &ndash; pushed the missed files](https://github.com/jeremytammik/RevitLookup/pull/49)\n- [#50 &ndash; handle `AssetPropertyDoubleArray4d`](https://github.com/jeremytammik/RevitLookup/pull/50)\n\nThe description is sweet and simple:\n\n- Snoop rendering `AssetProperty` &ndash; `Material` &rarr; `AppearanceAssetId` &rarr; `GetRenderingAssset`\n\nThis is supported by more than a thousand words:\n\n<center>\n<img src=\"img/revitlookup_snoop_appearance_asset_1.png\" alt=\"Snooping appearance assets\" width=\"401\">\n<br/>\n<img src=\"img/revitlookup_snoop_appearance_asset_2.png\" alt=\"Snooping appearance assets\" width=\"401\">\n<br/>\n<img src=\"img/revitlookup_snoop_appearance_asset_3.png\" alt=\"Snooping appearance assets\" width=\"401\">\n<br/>\n<img src=\"img/revitlookup_snoop_appearance_asset_4.png\" alt=\"Snooping appearance assets\" width=\"401\">\n<br/>\n<img src=\"img/revitlookup_snoop_appearance_asset_5.png\" alt=\"Snooping appearance assets\" width=\"401\">\n<br/>\n</center>\n\nI integrated Victor's pull requests\nin [RevitLookup release 2019.0.0.11](https://github.com/jeremytammik/RevitLookup/releases/tag/2019.0.0.11).\n\nMany thanks to Victor for this useful enhancement!"
  }
]