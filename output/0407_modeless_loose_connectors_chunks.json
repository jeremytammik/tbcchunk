[
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Modeless Loose Connectors",
    "local_header_href": "#modeless-loose-connectors",
    "chunk_text": "<h3>Modeless Loose Connectors</h3><p>One of the most enthusiastically received samples I presented at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/devcamp-devlabs-and-updated-api-training-schedule.html\">\nAEC DevCamp</a> conference\n\nhas also proved a valuable resource since then, in answering various questions on modeless dialogues and ensuring that the Revit application main window becomes the foreground window in certain situations.\nIt demonstrates how we can combine several ubiquitously useful pieces of functionality that we already discussed in the past to implement a homogenous whole.\nWe create an application which collects information from the Revit model and then displays it in a context that is pretty independent of Revit yet allows very close interaction with the Revit model.\n\n<p>This is the continuation and final instalment on the series on navigating through unconnected connectors in Revit MEP. So far, we covered the following topics:\n\n<ul>\n<li>Retrieving\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">\nMEP elements and connectors</a>.\n\n<li>Determining and hooking up a modeless form with the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a>.\n\n<li>Populating a\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\ndata grid view</a>.\n\n</li></li></li></ul>\n<p>After populating and displaying the data grid view, all that remains is to implement the interaction from it with Revit. The challenging aspect of this is the fact that the modeless form is not in a Revit API context, and the Revit API is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/asynchronous-api-calls-and-idling.html\">\nnot asynchronously accessible</a>.\n\nAs mentioned and as you can see from the last line of the implementation of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\nExecute</a> method,\n\nwe can work around that using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/idling-event.html\">\nIdling event</a>.\n\n<p>In short, the modeless dialogue passes back a pending element id to the command class.\nIn the Idling event handler, the pending element id is picked up and displayed to the user on the Revit graphics screen.\t\n\n\n<p>This actually shows that the challenge of\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/driving-revit-from-outside.html\">\ndriving Revit from outside</a> can\n\nnow be addressed pretty reliably and seamlessly, while it was not really solvable at all in prior releases.\n\n<p>Here is an overview of the complete functionality of the loose connectors sample:\n\n<ol>\n<li>Determine unconnected connectors in a Revit MEP model.\n<ul>\n<li>Filter for all MEP elements that can host connectors.\n<li>Iterate over the element connectors and list all unconnected ones\n</li></li></ul>\n<li>Display a modeless dialogue as a child window of the Revit main application displaying a list of the loose connectors.\n<ul>\n<li>Determine the main Revit application window handle.\n<li>Display a modeless Windows form and assign Revit as its parent window.\n</li></li></ul>\n<li>Drive Revit from outside from the modeless dialogue box using the idling event.\n<ul>\n<li>The modeless form lists all unconnected connectors in a data grid view.\n<li>The user can double click on any one of the listed connectors.\n<li>This selection is relayed to Revit via the Idling event, which causes Revit to switch to an appropriate view and zoom to display and highlight the element hosting the selected connector.\n</li></li></li></ul>\n</li></li></li></ol>\n<p>Its implementation was originally triggered by the following question and suggestion from Martin Schmid:</p>\n<h4>Martin's Proposal</h4>\n<p>I was wondering if there was a straight forward way to find all 'open' connections via the API?\n\n<p>Is there a generic way to get all 'Connectors' in a model, and then check if they are connected to another connector?\nOtherwise, I presume one would have to check all object instances that may have an MEP model, and check their Connector Manager for the connectors.\n\n<p>I think a sample that is able to find unconnected connectors (Duct, Pipe, Conduit, and Cable Tray) would be useful, because currently the UI doesn't provide a way to identify, for example, disconnected duct segments or fittings, etc.\n\n<p>A very nice to have additional feature would be to list all the unconnected elements and be able to click on a part to zoom to it in the Revit model, to step through the results.\nIt would be most useful if you could zoom to part, fix the connection, then zoom to the next part.\nNot sure how practical that is because in many cases you'd have to switch views and the like, unless the 'results' could be modeless.\n\n<h4>Additional Loose Connector Sample Features</h4>\n<p>In addition to the main required functionality, the sample implements a couple of additional ones not directly related to its main functionality and are useful in many generic add-in development areas:</p>\n<ul>\n<li>Write and display a text-based log file.</li>\n<li>Use a simple data container to populate a data grid view with minimal coding effort.</li>\n<li>Use a sortable binding list to add sorting functionality to the data grid view columns.</li>\n</ul>\n<p>As you noticed, all these topics that I wanted to dive into makes it almost more work to document than to implement, which is why it has taken me a while to get around to finally completing this overview, and requiring it to be split up into several separate posts to keep them down to a reasonable and manageable size.</p>\n<h4>Idling Event</h4>\n<p>I already discussed one example of driving Revit from outside using the idling event to display a continuously updated\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html\">\nwebcam image</a> on\n\nthe face of a Revit building element.\nIn that case, the webcam image update event triggered an update in the Revit model.\nIn the current sample, the double click of the user triggers a reaction in Revit, so the interaction seems very snappy.\nI have yet another sample up my sleeve which also reacts to an external event which can be triggered either by user interaction or programmatically, by detecting when the last modified timestamp of an external file on disk is updated and then automatically importing changes and modifying the Revit model.\n\n<p>In those cases, however, the external event is actually not driving Revit directly.\nOn the contrary, we are making use of the Revit Idling event which is polling, i.e. checking whether a certain flag or signal has been set by the external event, and then reacting to that.\n\n<p>The apparent snappiness of the reaction is due to the fact that the Idling event is triggered very frequently when Revit is not busy with other tasks, possibly hundreds of times per second.\n\n<p>So how can we use the Idling event to really drive Revit from outside, i.e. react immediately to a double click in our external modeless loose connector navigator form and react to that input within Revit through the Revit API?</p>\n<p>So far, we discussed how to retrieve the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">\nMEP elements and connectors</a>,\n\ndetermine the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a> and\n\nattach a form to it, and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\npopulate and display the modeless form</a>.\n\n<p>We set up Revit as the parent window of the modeless form, ensuring that it stays on top of Revit when Revit is visible, and also that it is minimised when the user minimises Revit.\n\n<h4>Driving Revit From Outside Revisited</h4>\n<p>Now let's discuss how to drive Revit from the modeless form, which is technically outside of Revit, and does not have synchronous access to the Revit API.\n\n<p>The form is populated with the unconnected connectors, and our intention is for the user to double click on an element to zoom to it in Revit.\n\n<p>The double click event is handled by subscribing to the CellDoubleClick event of the data grid view, which is the only widget displayed by our form.</p>\n<p>Once we are within a valid Revit API context, we can zoom to the desired element by calling the UIDocument ShowElements method.</p>\n<p>The question is how to get from one to the other.</p>\n<p>One possible answer is to post a message saying what to do in the double click event handler, and look out for it and react appropriately in the Idling event handler.</p>\n<p>In our case, the message that we post could be a pending element id to display.\nThe pending element id can be stored in a global variable somewhere.</p>\n<p>In the Idling event handler, we check the value of the pending element id.\nIf it is zero, we have nothing to do.\nOtherwise, we can zoom to the respective element, and set it back to zero when we are done.</p>\n<h4>Delegation</h4>\n<p>To decouple the two parts even further, we define a delegate method for setting the pending element id, store it in the Command class, and pass a reference to the delegate to the dialogue implementation class.\nWe also simply store the element id as an integer value in this phase, so that the dialogue implementation does not even have to know what a Revit element id is.</p>\n<p>Here is the static variable in the external command class implementation holding the pending element id, the delegate method for setting it, and the implementation of the delegate that gets passed over to the modeless form:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Pending element id, element to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> next time the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">int</span> _pending_element_id;\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Set a pending element id to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> when the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> SetPendingElementId( <span class=\"blue\">int</span> id )\n{\n  _pending_element_id = id;\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Delegate to set a pending </span>\n<span class=\"gray\">///</span><span class=\"green\"> element id to zoom to.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">delegate</span> <span class=\"blue\">void</span> <span class=\"teal\">SetElementId</span>( <span class=\"blue\">int</span> id );\n</pre>\n<p>You already saw the code instantiating and displaying the modeless form, but may not have noticed that in addition to passing in the Revit widow handle to its Show method, we also passed in a delegate to the SetPendingElementId method in the constructor:</p>\n<pre class=\"code\">\n  <span class=\"teal\">LooseConnectorNavigator</span> navigator\n    = <span class=\"blue\">new</span> <span class=\"teal\">LooseConnectorNavigator</span>(\n      data,\n      <span class=\"blue\">new</span> <span class=\"teal\">SetElementId</span>( SetPendingElementId )  );\n \n  navigator.Show( _hWndRevit );\n</pre>\n<p>The LooseConnectorNavigator, derived from the System.Windows.Forms base class Form, stores the delegate in a local variable _set_id:</p>\n<pre class=\"code\">\n<span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> _set_id;\n \n<span class=\"blue\">public</span> LooseConnectorNavigator(\n  <span class=\"teal\">SortableBindingList</span>&lt;<span class=\"teal\">ConnectorData</span>&gt; a,\n  <span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> set_id )\n{\n  InitializeComponent();\n  dataGridView1.DataSource = a;\n  _set_id = set_id;\n}\n</pre>\n<p>Right after instantiating and displaying the form, we subscribe to the Idling event and terminate the command.\nAt that point, our access to the Revit API is closed, and the modeless form lives outside of the Revit API context.\nHowever, as said, every time the Idling event is triggered, our event handler is called, and we re-enter the Revit API context, giving us a chance to check whether we have a pending element id to display and giving us full access to the Revit API in order to do so.</p>\n<p>So let's look at the two event handlers.</p>\n<h4>Double Click Event Handler</h4>\n<p>The double click event handler has to determine the element id of the pending element to display.\nIt can do so by retrieving the current row in the data grid view and extracting the appropriate cell contents.\nThe element id of the element hosting the unconnected connector is stored in the last column of the grid view. Here is the implementation of the event handler and its SetElementIdFromRow helper method, which calls _set_id to transmit the pending element id back to the main command and the Idling event handler:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> SetElementIdFromRow(\n  <span class=\"blue\">int</span> rowIndex,\n  <span class=\"blue\">bool</span> doubleClick )\n{\n  <span class=\"green\">//</span>\n  <span class=\"green\">// do something on double click, </span>\n  <span class=\"green\">// except when on the header:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">if</span>( rowIndex &gt; -1 )\n  {\n    <span class=\"teal\">DataGridViewRow</span> row\n      = dataGridView1.Rows[rowIndex];\n \n    <span class=\"blue\">int</span> n = row.Cells.Count;\n \n    <span class=\"teal\">DataGridViewCell</span> cell = row.Cells[n - 1];\n \n    <span class=\"blue\">int</span> id = ( <span class=\"blue\">int</span> ) cell.Value;\n \n    _set_id( id );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"{0} click on row {1} --&gt; element id {2}\"</span>,\n      doubleClick ? <span class=\"maroon\">\"Double\"</span> : <span class=\"maroon\">\"Single\"</span>,\n      rowIndex, id );\n  }\n}\n \n<span class=\"blue\">void</span> dataGridView1_CellDoubleClick(\n  <span class=\"blue\">object</span> sender,\n  <span class=\"teal\">DataGridViewCellEventArgs</span> e )\n{\n  SetElementIdFromRow( e.RowIndex, <span class=\"blue\">true</span> );\n}\n</pre>\n<h4>Idling Event Handler</h4>\n<p>In the Idling event handler, we first of all check whether we have anything to do at all.\nThis check should be extremely quick, since the event handler may be called hundreds of times per second if Revit has nothing else to do.\nIf the pending element id is non-zero, we wish to highlight and display it on the Revit screen.\n\n<p>This can be achieved using the ShowElements, which requires access to the active UIdocument and Document, which we can retrieve from the Revit application.\nWe already explained how to access the Revit application from an Idling event handler in the initial discussion of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/idling-event.html\">\nIdling event</a>,\n\nby simply casting the sender argument to an Application instance.</p>\n<p>So here is the final resulting implementation of the Revit Idling event handler.\nAs said, whenever the user has selected an element to zoom to in the modeless dialogue, the pending element id is set. The event handler picks it up and zooms to it.\n\n<p>Since we are not modifying the Revit document in any way, there is no need to start a transaction.\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> OnIdling( <span class=\"blue\">object</span> sender, <span class=\"teal\">IdlingEventArgs</span> ea )\n{\n  <span class=\"blue\">int</span> id = _pending_element_id;\n \n  <span class=\"blue\">if</span>( 0 != id )\n  {\n    <span class=\"teal\">Application</span> app\n      = sender <span class=\"blue\">as</span> <span class=\"teal\">Application</span>;\n \n    <span class=\"teal\">UIApplication</span> uiapp\n      = <span class=\"blue\">new</span> <span class=\"teal\">UIApplication</span>( app );\n \n    <span class=\"teal\">UIDocument</span> uidoc\n      = uiapp.ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc\n      = uidoc.Document;\n \n    <span class=\"teal\">ElementId</span> eid = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( id );\n    <span class=\"teal\">Element</span> e = doc.get_Element( eid );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"Element id {0} requested --&gt; {1}\"</span>,\n      id, <span class=\"blue\">new</span> <span class=\"teal\">ElementData</span>( e, doc ) );\n \n    <span class=\"green\">// look, mom, no transaction required!</span>\n \n    uidoc.Selection.Elements.Clear();\n    uidoc.Selection.Elements.Add( e );\n    uidoc.ShowElements( e );\n \n    <span class=\"green\">//LooseConnectorNavigator.Id = 0;</span>\n    _pending_element_id = 0;\n  }\n}\n</pre>\n<h4>Reaction</h4>\n<p>The reaction to a double click is surprisingly snappy, if you know what is going on in the background.\nIf you don't know there is nothing to indicate that the modeless form is not an integral part of Revit itself.</p>\n<p>I showed the modeless form in the discussion on populating a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\ndata grid view</a>:</p>\n<center>\n<img alt=\"Modeless loose connector form\" src=\"img/modeless_loose_connector_form.png\"/>\n</center>\n<p>Once a user clicks on one of the unconnected connectors listed in the form, Revit immediately zooms to it.\nIn some cases, if the element is not visible in the current view, Revit will ask whether to search for another suitable view to display it in:</p>\n<center>\n<img alt=\"Revit asking whether to search for a suitable view\" src=\"img/modeless_loose_connector_search_view.png\"/>\n</center>\n<p>If the current view was suitable or a suitable one was found, the double clicked element is highlighted and zoomed in:</p>\n<center>\n<img alt=\"Highlighted element with a loose connector\" src=\"img/modeless_loose_connector_element.png\"/>\n</center>\n<p>I hope you find this sample useful in your development work. \nAs said, the response at the AEC DevCamp conference in Boston and the Waltham and Munich DevLabs was pretty enthusiastic.\n\n<p>Here is a slightly further cleaned up version of this sample,\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\loose_connectors_6.zip -->\n<a href=\"zip/loose_connectors_6.zip\">\nloose_connectors_6.zip</a>,\n\nincluding the complete source code and Visual Studio solution.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Martin's Proposal",
    "local_header_href": "#martins-proposal",
    "chunk_text": "<h4>Martin's Proposal</h4><p>I was wondering if there was a straight forward way to find all 'open' connections via the API?\n\n<p>Is there a generic way to get all 'Connectors' in a model, and then check if they are connected to another connector?\nOtherwise, I presume one would have to check all object instances that may have an MEP model, and check their Connector Manager for the connectors.\n\n<p>I think a sample that is able to find unconnected connectors (Duct, Pipe, Conduit, and Cable Tray) would be useful, because currently the UI doesn't provide a way to identify, for example, disconnected duct segments or fittings, etc.\n\n<p>A very nice to have additional feature would be to list all the unconnected elements and be able to click on a part to zoom to it in the Revit model, to step through the results.\nIt would be most useful if you could zoom to part, fix the connection, then zoom to the next part.\nNot sure how practical that is because in many cases you'd have to switch views and the like, unless the 'results' could be modeless.\n\n<h4>Additional Loose Connector Sample Features</h4>\n<p>In addition to the main required functionality, the sample implements a couple of additional ones not directly related to its main functionality and are useful in many generic add-in development areas:</p>\n<ul>\n<li>Write and display a text-based log file.</li>\n<li>Use a simple data container to populate a data grid view with minimal coding effort.</li>\n<li>Use a sortable binding list to add sorting functionality to the data grid view columns.</li>\n</ul>\n<p>As you noticed, all these topics that I wanted to dive into makes it almost more work to document than to implement, which is why it has taken me a while to get around to finally completing this overview, and requiring it to be split up into several separate posts to keep them down to a reasonable and manageable size.</p>\n<h4>Idling Event</h4>\n<p>I already discussed one example of driving Revit from outside using the idling event to display a continuously updated\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html\">\nwebcam image</a> on\n\nthe face of a Revit building element.\nIn that case, the webcam image update event triggered an update in the Revit model.\nIn the current sample, the double click of the user triggers a reaction in Revit, so the interaction seems very snappy.\nI have yet another sample up my sleeve which also reacts to an external event which can be triggered either by user interaction or programmatically, by detecting when the last modified timestamp of an external file on disk is updated and then automatically importing changes and modifying the Revit model.\n\n<p>In those cases, however, the external event is actually not driving Revit directly.\nOn the contrary, we are making use of the Revit Idling event which is polling, i.e. checking whether a certain flag or signal has been set by the external event, and then reacting to that.\n\n<p>The apparent snappiness of the reaction is due to the fact that the Idling event is triggered very frequently when Revit is not busy with other tasks, possibly hundreds of times per second.\n\n<p>So how can we use the Idling event to really drive Revit from outside, i.e. react immediately to a double click in our external modeless loose connector navigator form and react to that input within Revit through the Revit API?</p>\n<p>So far, we discussed how to retrieve the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">\nMEP elements and connectors</a>,\n\ndetermine the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a> and\n\nattach a form to it, and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\npopulate and display the modeless form</a>.\n\n<p>We set up Revit as the parent window of the modeless form, ensuring that it stays on top of Revit when Revit is visible, and also that it is minimised when the user minimises Revit.\n\n<h4>Driving Revit From Outside Revisited</h4>\n<p>Now let's discuss how to drive Revit from the modeless form, which is technically outside of Revit, and does not have synchronous access to the Revit API.\n\n<p>The form is populated with the unconnected connectors, and our intention is for the user to double click on an element to zoom to it in Revit.\n\n<p>The double click event is handled by subscribing to the CellDoubleClick event of the data grid view, which is the only widget displayed by our form.</p>\n<p>Once we are within a valid Revit API context, we can zoom to the desired element by calling the UIDocument ShowElements method.</p>\n<p>The question is how to get from one to the other.</p>\n<p>One possible answer is to post a message saying what to do in the double click event handler, and look out for it and react appropriately in the Idling event handler.</p>\n<p>In our case, the message that we post could be a pending element id to display.\nThe pending element id can be stored in a global variable somewhere.</p>\n<p>In the Idling event handler, we check the value of the pending element id.\nIf it is zero, we have nothing to do.\nOtherwise, we can zoom to the respective element, and set it back to zero when we are done.</p>\n<h4>Delegation</h4>\n<p>To decouple the two parts even further, we define a delegate method for setting the pending element id, store it in the Command class, and pass a reference to the delegate to the dialogue implementation class.\nWe also simply store the element id as an integer value in this phase, so that the dialogue implementation does not even have to know what a Revit element id is.</p>\n<p>Here is the static variable in the external command class implementation holding the pending element id, the delegate method for setting it, and the implementation of the delegate that gets passed over to the modeless form:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Pending element id, element to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> next time the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">int</span> _pending_element_id;\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Set a pending element id to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> when the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> SetPendingElementId( <span class=\"blue\">int</span> id )\n{\n  _pending_element_id = id;\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Delegate to set a pending </span>\n<span class=\"gray\">///</span><span class=\"green\"> element id to zoom to.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">delegate</span> <span class=\"blue\">void</span> <span class=\"teal\">SetElementId</span>( <span class=\"blue\">int</span> id );\n</pre>\n<p>You already saw the code instantiating and displaying the modeless form, but may not have noticed that in addition to passing in the Revit widow handle to its Show method, we also passed in a delegate to the SetPendingElementId method in the constructor:</p>\n<pre class=\"code\">\n  <span class=\"teal\">LooseConnectorNavigator</span> navigator\n    = <span class=\"blue\">new</span> <span class=\"teal\">LooseConnectorNavigator</span>(\n      data,\n      <span class=\"blue\">new</span> <span class=\"teal\">SetElementId</span>( SetPendingElementId )  );\n \n  navigator.Show( _hWndRevit );\n</pre>\n<p>The LooseConnectorNavigator, derived from the System.Windows.Forms base class Form, stores the delegate in a local variable _set_id:</p>\n<pre class=\"code\">\n<span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> _set_id;\n \n<span class=\"blue\">public</span> LooseConnectorNavigator(\n  <span class=\"teal\">SortableBindingList</span>&lt;<span class=\"teal\">ConnectorData</span>&gt; a,\n  <span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> set_id )\n{\n  InitializeComponent();\n  dataGridView1.DataSource = a;\n  _set_id = set_id;\n}\n</pre>\n<p>Right after instantiating and displaying the form, we subscribe to the Idling event and terminate the command.\nAt that point, our access to the Revit API is closed, and the modeless form lives outside of the Revit API context.\nHowever, as said, every time the Idling event is triggered, our event handler is called, and we re-enter the Revit API context, giving us a chance to check whether we have a pending element id to display and giving us full access to the Revit API in order to do so.</p>\n<p>So let's look at the two event handlers.</p>\n<h4>Double Click Event Handler</h4>\n<p>The double click event handler has to determine the element id of the pending element to display.\nIt can do so by retrieving the current row in the data grid view and extracting the appropriate cell contents.\nThe element id of the element hosting the unconnected connector is stored in the last column of the grid view. Here is the implementation of the event handler and its SetElementIdFromRow helper method, which calls _set_id to transmit the pending element id back to the main command and the Idling event handler:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> SetElementIdFromRow(\n  <span class=\"blue\">int</span> rowIndex,\n  <span class=\"blue\">bool</span> doubleClick )\n{\n  <span class=\"green\">//</span>\n  <span class=\"green\">// do something on double click, </span>\n  <span class=\"green\">// except when on the header:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">if</span>( rowIndex &gt; -1 )\n  {\n    <span class=\"teal\">DataGridViewRow</span> row\n      = dataGridView1.Rows[rowIndex];\n \n    <span class=\"blue\">int</span> n = row.Cells.Count;\n \n    <span class=\"teal\">DataGridViewCell</span> cell = row.Cells[n - 1];\n \n    <span class=\"blue\">int</span> id = ( <span class=\"blue\">int</span> ) cell.Value;\n \n    _set_id( id );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"{0} click on row {1} --&gt; element id {2}\"</span>,\n      doubleClick ? <span class=\"maroon\">\"Double\"</span> : <span class=\"maroon\">\"Single\"</span>,\n      rowIndex, id );\n  }\n}\n \n<span class=\"blue\">void</span> dataGridView1_CellDoubleClick(\n  <span class=\"blue\">object</span> sender,\n  <span class=\"teal\">DataGridViewCellEventArgs</span> e )\n{\n  SetElementIdFromRow( e.RowIndex, <span class=\"blue\">true</span> );\n}\n</pre>\n<h4>Idling Event Handler</h4>\n<p>In the Idling event handler, we first of all check whether we have anything to do at all.\nThis check should be extremely quick, since the event handler may be called hundreds of times per second if Revit has nothing else to do.\nIf the pending element id is non-zero, we wish to highlight and display it on the Revit screen.\n\n<p>This can be achieved using the ShowElements, which requires access to the active UIdocument and Document, which we can retrieve from the Revit application.\nWe already explained how to access the Revit application from an Idling event handler in the initial discussion of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/idling-event.html\">\nIdling event</a>,\n\nby simply casting the sender argument to an Application instance.</p>\n<p>So here is the final resulting implementation of the Revit Idling event handler.\nAs said, whenever the user has selected an element to zoom to in the modeless dialogue, the pending element id is set. The event handler picks it up and zooms to it.\n\n<p>Since we are not modifying the Revit document in any way, there is no need to start a transaction.\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> OnIdling( <span class=\"blue\">object</span> sender, <span class=\"teal\">IdlingEventArgs</span> ea )\n{\n  <span class=\"blue\">int</span> id = _pending_element_id;\n \n  <span class=\"blue\">if</span>( 0 != id )\n  {\n    <span class=\"teal\">Application</span> app\n      = sender <span class=\"blue\">as</span> <span class=\"teal\">Application</span>;\n \n    <span class=\"teal\">UIApplication</span> uiapp\n      = <span class=\"blue\">new</span> <span class=\"teal\">UIApplication</span>( app );\n \n    <span class=\"teal\">UIDocument</span> uidoc\n      = uiapp.ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc\n      = uidoc.Document;\n \n    <span class=\"teal\">ElementId</span> eid = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( id );\n    <span class=\"teal\">Element</span> e = doc.get_Element( eid );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"Element id {0} requested --&gt; {1}\"</span>,\n      id, <span class=\"blue\">new</span> <span class=\"teal\">ElementData</span>( e, doc ) );\n \n    <span class=\"green\">// look, mom, no transaction required!</span>\n \n    uidoc.Selection.Elements.Clear();\n    uidoc.Selection.Elements.Add( e );\n    uidoc.ShowElements( e );\n \n    <span class=\"green\">//LooseConnectorNavigator.Id = 0;</span>\n    _pending_element_id = 0;\n  }\n}\n</pre>\n<h4>Reaction</h4>\n<p>The reaction to a double click is surprisingly snappy, if you know what is going on in the background.\nIf you don't know there is nothing to indicate that the modeless form is not an integral part of Revit itself.</p>\n<p>I showed the modeless form in the discussion on populating a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\ndata grid view</a>:</p>\n<center>\n<img alt=\"Modeless loose connector form\" src=\"img/modeless_loose_connector_form.png\"/>\n</center>\n<p>Once a user clicks on one of the unconnected connectors listed in the form, Revit immediately zooms to it.\nIn some cases, if the element is not visible in the current view, Revit will ask whether to search for another suitable view to display it in:</p>\n<center>\n<img alt=\"Revit asking whether to search for a suitable view\" src=\"img/modeless_loose_connector_search_view.png\"/>\n</center>\n<p>If the current view was suitable or a suitable one was found, the double clicked element is highlighted and zoomed in:</p>\n<center>\n<img alt=\"Highlighted element with a loose connector\" src=\"img/modeless_loose_connector_element.png\"/>\n</center>\n<p>I hope you find this sample useful in your development work. \nAs said, the response at the AEC DevCamp conference in Boston and the Waltham and Munich DevLabs was pretty enthusiastic.\n\n<p>Here is a slightly further cleaned up version of this sample,\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\loose_connectors_6.zip -->\n<a href=\"zip/loose_connectors_6.zip\">\nloose_connectors_6.zip</a>,\n\nincluding the complete source code and Visual Studio solution.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Additional Loose Connector Sample Features",
    "local_header_href": "#additional-loose-connector-sample-features",
    "chunk_text": "<h4>Additional Loose Connector Sample Features</h4><p>In addition to the main required functionality, the sample implements a couple of additional ones not directly related to its main functionality and are useful in many generic add-in development areas:</p><ul>\n<li>Write and display a text-based log file.</li>\n<li>Use a simple data container to populate a data grid view with minimal coding effort.</li>\n<li>Use a sortable binding list to add sorting functionality to the data grid view columns.</li>\n</ul><p>As you noticed, all these topics that I wanted to dive into makes it almost more work to document than to implement, which is why it has taken me a while to get around to finally completing this overview, and requiring it to be split up into several separate posts to keep them down to a reasonable and manageable size.</p>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Idling Event",
    "local_header_href": "#idling-event",
    "chunk_text": "<h4>Idling Event</h4><p>I already discussed one example of driving Revit from outside using the idling event to display a continuously updated\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html\">\nwebcam image</a> on\n\nthe face of a Revit building element.\nIn that case, the webcam image update event triggered an update in the Revit model.\nIn the current sample, the double click of the user triggers a reaction in Revit, so the interaction seems very snappy.\nI have yet another sample up my sleeve which also reacts to an external event which can be triggered either by user interaction or programmatically, by detecting when the last modified timestamp of an external file on disk is updated and then automatically importing changes and modifying the Revit model.\n\n<p>In those cases, however, the external event is actually not driving Revit directly.\nOn the contrary, we are making use of the Revit Idling event which is polling, i.e. checking whether a certain flag or signal has been set by the external event, and then reacting to that.\n\n<p>The apparent snappiness of the reaction is due to the fact that the Idling event is triggered very frequently when Revit is not busy with other tasks, possibly hundreds of times per second.\n\n<p>So how can we use the Idling event to really drive Revit from outside, i.e. react immediately to a double click in our external modeless loose connector navigator form and react to that input within Revit through the Revit API?</p>\n<p>So far, we discussed how to retrieve the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">\nMEP elements and connectors</a>,\n\ndetermine the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-parent-window.html\">\nRevit parent window</a> and\n\nattach a form to it, and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\npopulate and display the modeless form</a>.\n\n<p>We set up Revit as the parent window of the modeless form, ensuring that it stays on top of Revit when Revit is visible, and also that it is minimised when the user minimises Revit.\n\n<h4>Driving Revit From Outside Revisited</h4>\n<p>Now let's discuss how to drive Revit from the modeless form, which is technically outside of Revit, and does not have synchronous access to the Revit API.\n\n<p>The form is populated with the unconnected connectors, and our intention is for the user to double click on an element to zoom to it in Revit.\n\n<p>The double click event is handled by subscribing to the CellDoubleClick event of the data grid view, which is the only widget displayed by our form.</p>\n<p>Once we are within a valid Revit API context, we can zoom to the desired element by calling the UIDocument ShowElements method.</p>\n<p>The question is how to get from one to the other.</p>\n<p>One possible answer is to post a message saying what to do in the double click event handler, and look out for it and react appropriately in the Idling event handler.</p>\n<p>In our case, the message that we post could be a pending element id to display.\nThe pending element id can be stored in a global variable somewhere.</p>\n<p>In the Idling event handler, we check the value of the pending element id.\nIf it is zero, we have nothing to do.\nOtherwise, we can zoom to the respective element, and set it back to zero when we are done.</p>\n<h4>Delegation</h4>\n<p>To decouple the two parts even further, we define a delegate method for setting the pending element id, store it in the Command class, and pass a reference to the delegate to the dialogue implementation class.\nWe also simply store the element id as an integer value in this phase, so that the dialogue implementation does not even have to know what a Revit element id is.</p>\n<p>Here is the static variable in the external command class implementation holding the pending element id, the delegate method for setting it, and the implementation of the delegate that gets passed over to the modeless form:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Pending element id, element to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> next time the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">int</span> _pending_element_id;\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Set a pending element id to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> when the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> SetPendingElementId( <span class=\"blue\">int</span> id )\n{\n  _pending_element_id = id;\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Delegate to set a pending </span>\n<span class=\"gray\">///</span><span class=\"green\"> element id to zoom to.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">delegate</span> <span class=\"blue\">void</span> <span class=\"teal\">SetElementId</span>( <span class=\"blue\">int</span> id );\n</pre>\n<p>You already saw the code instantiating and displaying the modeless form, but may not have noticed that in addition to passing in the Revit widow handle to its Show method, we also passed in a delegate to the SetPendingElementId method in the constructor:</p>\n<pre class=\"code\">\n  <span class=\"teal\">LooseConnectorNavigator</span> navigator\n    = <span class=\"blue\">new</span> <span class=\"teal\">LooseConnectorNavigator</span>(\n      data,\n      <span class=\"blue\">new</span> <span class=\"teal\">SetElementId</span>( SetPendingElementId )  );\n \n  navigator.Show( _hWndRevit );\n</pre>\n<p>The LooseConnectorNavigator, derived from the System.Windows.Forms base class Form, stores the delegate in a local variable _set_id:</p>\n<pre class=\"code\">\n<span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> _set_id;\n \n<span class=\"blue\">public</span> LooseConnectorNavigator(\n  <span class=\"teal\">SortableBindingList</span>&lt;<span class=\"teal\">ConnectorData</span>&gt; a,\n  <span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> set_id )\n{\n  InitializeComponent();\n  dataGridView1.DataSource = a;\n  _set_id = set_id;\n}\n</pre>\n<p>Right after instantiating and displaying the form, we subscribe to the Idling event and terminate the command.\nAt that point, our access to the Revit API is closed, and the modeless form lives outside of the Revit API context.\nHowever, as said, every time the Idling event is triggered, our event handler is called, and we re-enter the Revit API context, giving us a chance to check whether we have a pending element id to display and giving us full access to the Revit API in order to do so.</p>\n<p>So let's look at the two event handlers.</p>\n<h4>Double Click Event Handler</h4>\n<p>The double click event handler has to determine the element id of the pending element to display.\nIt can do so by retrieving the current row in the data grid view and extracting the appropriate cell contents.\nThe element id of the element hosting the unconnected connector is stored in the last column of the grid view. Here is the implementation of the event handler and its SetElementIdFromRow helper method, which calls _set_id to transmit the pending element id back to the main command and the Idling event handler:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> SetElementIdFromRow(\n  <span class=\"blue\">int</span> rowIndex,\n  <span class=\"blue\">bool</span> doubleClick )\n{\n  <span class=\"green\">//</span>\n  <span class=\"green\">// do something on double click, </span>\n  <span class=\"green\">// except when on the header:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">if</span>( rowIndex &gt; -1 )\n  {\n    <span class=\"teal\">DataGridViewRow</span> row\n      = dataGridView1.Rows[rowIndex];\n \n    <span class=\"blue\">int</span> n = row.Cells.Count;\n \n    <span class=\"teal\">DataGridViewCell</span> cell = row.Cells[n - 1];\n \n    <span class=\"blue\">int</span> id = ( <span class=\"blue\">int</span> ) cell.Value;\n \n    _set_id( id );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"{0} click on row {1} --&gt; element id {2}\"</span>,\n      doubleClick ? <span class=\"maroon\">\"Double\"</span> : <span class=\"maroon\">\"Single\"</span>,\n      rowIndex, id );\n  }\n}\n \n<span class=\"blue\">void</span> dataGridView1_CellDoubleClick(\n  <span class=\"blue\">object</span> sender,\n  <span class=\"teal\">DataGridViewCellEventArgs</span> e )\n{\n  SetElementIdFromRow( e.RowIndex, <span class=\"blue\">true</span> );\n}\n</pre>\n<h4>Idling Event Handler</h4>\n<p>In the Idling event handler, we first of all check whether we have anything to do at all.\nThis check should be extremely quick, since the event handler may be called hundreds of times per second if Revit has nothing else to do.\nIf the pending element id is non-zero, we wish to highlight and display it on the Revit screen.\n\n<p>This can be achieved using the ShowElements, which requires access to the active UIdocument and Document, which we can retrieve from the Revit application.\nWe already explained how to access the Revit application from an Idling event handler in the initial discussion of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/idling-event.html\">\nIdling event</a>,\n\nby simply casting the sender argument to an Application instance.</p>\n<p>So here is the final resulting implementation of the Revit Idling event handler.\nAs said, whenever the user has selected an element to zoom to in the modeless dialogue, the pending element id is set. The event handler picks it up and zooms to it.\n\n<p>Since we are not modifying the Revit document in any way, there is no need to start a transaction.\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> OnIdling( <span class=\"blue\">object</span> sender, <span class=\"teal\">IdlingEventArgs</span> ea )\n{\n  <span class=\"blue\">int</span> id = _pending_element_id;\n \n  <span class=\"blue\">if</span>( 0 != id )\n  {\n    <span class=\"teal\">Application</span> app\n      = sender <span class=\"blue\">as</span> <span class=\"teal\">Application</span>;\n \n    <span class=\"teal\">UIApplication</span> uiapp\n      = <span class=\"blue\">new</span> <span class=\"teal\">UIApplication</span>( app );\n \n    <span class=\"teal\">UIDocument</span> uidoc\n      = uiapp.ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc\n      = uidoc.Document;\n \n    <span class=\"teal\">ElementId</span> eid = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( id );\n    <span class=\"teal\">Element</span> e = doc.get_Element( eid );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"Element id {0} requested --&gt; {1}\"</span>,\n      id, <span class=\"blue\">new</span> <span class=\"teal\">ElementData</span>( e, doc ) );\n \n    <span class=\"green\">// look, mom, no transaction required!</span>\n \n    uidoc.Selection.Elements.Clear();\n    uidoc.Selection.Elements.Add( e );\n    uidoc.ShowElements( e );\n \n    <span class=\"green\">//LooseConnectorNavigator.Id = 0;</span>\n    _pending_element_id = 0;\n  }\n}\n</pre>\n<h4>Reaction</h4>\n<p>The reaction to a double click is surprisingly snappy, if you know what is going on in the background.\nIf you don't know there is nothing to indicate that the modeless form is not an integral part of Revit itself.</p>\n<p>I showed the modeless form in the discussion on populating a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\ndata grid view</a>:</p>\n<center>\n<img alt=\"Modeless loose connector form\" src=\"img/modeless_loose_connector_form.png\"/>\n</center>\n<p>Once a user clicks on one of the unconnected connectors listed in the form, Revit immediately zooms to it.\nIn some cases, if the element is not visible in the current view, Revit will ask whether to search for another suitable view to display it in:</p>\n<center>\n<img alt=\"Revit asking whether to search for a suitable view\" src=\"img/modeless_loose_connector_search_view.png\"/>\n</center>\n<p>If the current view was suitable or a suitable one was found, the double clicked element is highlighted and zoomed in:</p>\n<center>\n<img alt=\"Highlighted element with a loose connector\" src=\"img/modeless_loose_connector_element.png\"/>\n</center>\n<p>I hope you find this sample useful in your development work. \nAs said, the response at the AEC DevCamp conference in Boston and the Waltham and Munich DevLabs was pretty enthusiastic.\n\n<p>Here is a slightly further cleaned up version of this sample,\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\loose_connectors_6.zip -->\n<a href=\"zip/loose_connectors_6.zip\">\nloose_connectors_6.zip</a>,\n\nincluding the complete source code and Visual Studio solution.\n\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Driving Revit From Outside Revisited",
    "local_header_href": "#driving-revit-from-outside-revisited",
    "chunk_text": "<h4>Driving Revit From Outside Revisited</h4><p>Now let's discuss how to drive Revit from the modeless form, which is technically outside of Revit, and does not have synchronous access to the Revit API.\n\n<p>The form is populated with the unconnected connectors, and our intention is for the user to double click on an element to zoom to it in Revit.\n\n<p>The double click event is handled by subscribing to the CellDoubleClick event of the data grid view, which is the only widget displayed by our form.</p>\n<p>Once we are within a valid Revit API context, we can zoom to the desired element by calling the UIDocument ShowElements method.</p>\n<p>The question is how to get from one to the other.</p>\n<p>One possible answer is to post a message saying what to do in the double click event handler, and look out for it and react appropriately in the Idling event handler.</p>\n<p>In our case, the message that we post could be a pending element id to display.\nThe pending element id can be stored in a global variable somewhere.</p>\n<p>In the Idling event handler, we check the value of the pending element id.\nIf it is zero, we have nothing to do.\nOtherwise, we can zoom to the respective element, and set it back to zero when we are done.</p>\n<h4>Delegation</h4>\n<p>To decouple the two parts even further, we define a delegate method for setting the pending element id, store it in the Command class, and pass a reference to the delegate to the dialogue implementation class.\nWe also simply store the element id as an integer value in this phase, so that the dialogue implementation does not even have to know what a Revit element id is.</p>\n<p>Here is the static variable in the external command class implementation holding the pending element id, the delegate method for setting it, and the implementation of the delegate that gets passed over to the modeless form:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Pending element id, element to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> next time the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">int</span> _pending_element_id;\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Set a pending element id to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> when the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> SetPendingElementId( <span class=\"blue\">int</span> id )\n{\n  _pending_element_id = id;\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Delegate to set a pending </span>\n<span class=\"gray\">///</span><span class=\"green\"> element id to zoom to.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">delegate</span> <span class=\"blue\">void</span> <span class=\"teal\">SetElementId</span>( <span class=\"blue\">int</span> id );\n</pre>\n<p>You already saw the code instantiating and displaying the modeless form, but may not have noticed that in addition to passing in the Revit widow handle to its Show method, we also passed in a delegate to the SetPendingElementId method in the constructor:</p>\n<pre class=\"code\">\n  <span class=\"teal\">LooseConnectorNavigator</span> navigator\n    = <span class=\"blue\">new</span> <span class=\"teal\">LooseConnectorNavigator</span>(\n      data,\n      <span class=\"blue\">new</span> <span class=\"teal\">SetElementId</span>( SetPendingElementId )  );\n \n  navigator.Show( _hWndRevit );\n</pre>\n<p>The LooseConnectorNavigator, derived from the System.Windows.Forms base class Form, stores the delegate in a local variable _set_id:</p>\n<pre class=\"code\">\n<span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> _set_id;\n \n<span class=\"blue\">public</span> LooseConnectorNavigator(\n  <span class=\"teal\">SortableBindingList</span>&lt;<span class=\"teal\">ConnectorData</span>&gt; a,\n  <span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> set_id )\n{\n  InitializeComponent();\n  dataGridView1.DataSource = a;\n  _set_id = set_id;\n}\n</pre>\n<p>Right after instantiating and displaying the form, we subscribe to the Idling event and terminate the command.\nAt that point, our access to the Revit API is closed, and the modeless form lives outside of the Revit API context.\nHowever, as said, every time the Idling event is triggered, our event handler is called, and we re-enter the Revit API context, giving us a chance to check whether we have a pending element id to display and giving us full access to the Revit API in order to do so.</p>\n<p>So let's look at the two event handlers.</p>\n<h4>Double Click Event Handler</h4>\n<p>The double click event handler has to determine the element id of the pending element to display.\nIt can do so by retrieving the current row in the data grid view and extracting the appropriate cell contents.\nThe element id of the element hosting the unconnected connector is stored in the last column of the grid view. Here is the implementation of the event handler and its SetElementIdFromRow helper method, which calls _set_id to transmit the pending element id back to the main command and the Idling event handler:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> SetElementIdFromRow(\n  <span class=\"blue\">int</span> rowIndex,\n  <span class=\"blue\">bool</span> doubleClick )\n{\n  <span class=\"green\">//</span>\n  <span class=\"green\">// do something on double click, </span>\n  <span class=\"green\">// except when on the header:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">if</span>( rowIndex &gt; -1 )\n  {\n    <span class=\"teal\">DataGridViewRow</span> row\n      = dataGridView1.Rows[rowIndex];\n \n    <span class=\"blue\">int</span> n = row.Cells.Count;\n \n    <span class=\"teal\">DataGridViewCell</span> cell = row.Cells[n - 1];\n \n    <span class=\"blue\">int</span> id = ( <span class=\"blue\">int</span> ) cell.Value;\n \n    _set_id( id );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"{0} click on row {1} --&gt; element id {2}\"</span>,\n      doubleClick ? <span class=\"maroon\">\"Double\"</span> : <span class=\"maroon\">\"Single\"</span>,\n      rowIndex, id );\n  }\n}\n \n<span class=\"blue\">void</span> dataGridView1_CellDoubleClick(\n  <span class=\"blue\">object</span> sender,\n  <span class=\"teal\">DataGridViewCellEventArgs</span> e )\n{\n  SetElementIdFromRow( e.RowIndex, <span class=\"blue\">true</span> );\n}\n</pre>\n<h4>Idling Event Handler</h4>\n<p>In the Idling event handler, we first of all check whether we have anything to do at all.\nThis check should be extremely quick, since the event handler may be called hundreds of times per second if Revit has nothing else to do.\nIf the pending element id is non-zero, we wish to highlight and display it on the Revit screen.\n\n<p>This can be achieved using the ShowElements, which requires access to the active UIdocument and Document, which we can retrieve from the Revit application.\nWe already explained how to access the Revit application from an Idling event handler in the initial discussion of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/idling-event.html\">\nIdling event</a>,\n\nby simply casting the sender argument to an Application instance.</p>\n<p>So here is the final resulting implementation of the Revit Idling event handler.\nAs said, whenever the user has selected an element to zoom to in the modeless dialogue, the pending element id is set. The event handler picks it up and zooms to it.\n\n<p>Since we are not modifying the Revit document in any way, there is no need to start a transaction.\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> OnIdling( <span class=\"blue\">object</span> sender, <span class=\"teal\">IdlingEventArgs</span> ea )\n{\n  <span class=\"blue\">int</span> id = _pending_element_id;\n \n  <span class=\"blue\">if</span>( 0 != id )\n  {\n    <span class=\"teal\">Application</span> app\n      = sender <span class=\"blue\">as</span> <span class=\"teal\">Application</span>;\n \n    <span class=\"teal\">UIApplication</span> uiapp\n      = <span class=\"blue\">new</span> <span class=\"teal\">UIApplication</span>( app );\n \n    <span class=\"teal\">UIDocument</span> uidoc\n      = uiapp.ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc\n      = uidoc.Document;\n \n    <span class=\"teal\">ElementId</span> eid = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( id );\n    <span class=\"teal\">Element</span> e = doc.get_Element( eid );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"Element id {0} requested --&gt; {1}\"</span>,\n      id, <span class=\"blue\">new</span> <span class=\"teal\">ElementData</span>( e, doc ) );\n \n    <span class=\"green\">// look, mom, no transaction required!</span>\n \n    uidoc.Selection.Elements.Clear();\n    uidoc.Selection.Elements.Add( e );\n    uidoc.ShowElements( e );\n \n    <span class=\"green\">//LooseConnectorNavigator.Id = 0;</span>\n    _pending_element_id = 0;\n  }\n}\n</pre>\n<h4>Reaction</h4>\n<p>The reaction to a double click is surprisingly snappy, if you know what is going on in the background.\nIf you don't know there is nothing to indicate that the modeless form is not an integral part of Revit itself.</p>\n<p>I showed the modeless form in the discussion on populating a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\ndata grid view</a>:</p>\n<center>\n<img alt=\"Modeless loose connector form\" src=\"img/modeless_loose_connector_form.png\"/>\n</center>\n<p>Once a user clicks on one of the unconnected connectors listed in the form, Revit immediately zooms to it.\nIn some cases, if the element is not visible in the current view, Revit will ask whether to search for another suitable view to display it in:</p>\n<center>\n<img alt=\"Revit asking whether to search for a suitable view\" src=\"img/modeless_loose_connector_search_view.png\"/>\n</center>\n<p>If the current view was suitable or a suitable one was found, the double clicked element is highlighted and zoomed in:</p>\n<center>\n<img alt=\"Highlighted element with a loose connector\" src=\"img/modeless_loose_connector_element.png\"/>\n</center>\n<p>I hope you find this sample useful in your development work. \nAs said, the response at the AEC DevCamp conference in Boston and the Waltham and Munich DevLabs was pretty enthusiastic.\n\n<p>Here is a slightly further cleaned up version of this sample,\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\loose_connectors_6.zip -->\n<a href=\"zip/loose_connectors_6.zip\">\nloose_connectors_6.zip</a>,\n\nincluding the complete source code and Visual Studio solution.\n\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Delegation",
    "local_header_href": "#delegation",
    "chunk_text": "<h4>Delegation</h4><p>To decouple the two parts even further, we define a delegate method for setting the pending element id, store it in the Command class, and pass a reference to the delegate to the dialogue implementation class.\nWe also simply store the element id as an integer value in this phase, so that the dialogue implementation does not even have to know what a Revit element id is.</p><p>Here is the static variable in the external command class implementation holding the pending element id, the delegate method for setting it, and the implementation of the delegate that gets passed over to the modeless form:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Pending element id, element to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> next time the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">int</span> _pending_element_id;\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Set a pending element id to zoom to</span>\n<span class=\"gray\">///</span><span class=\"green\"> when the Idling event fires.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> SetPendingElementId( <span class=\"blue\">int</span> id )\n{\n  _pending_element_id = id;\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Delegate to set a pending </span>\n<span class=\"gray\">///</span><span class=\"green\"> element id to zoom to.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">delegate</span> <span class=\"blue\">void</span> <span class=\"teal\">SetElementId</span>( <span class=\"blue\">int</span> id );\n</pre><p>You already saw the code instantiating and displaying the modeless form, but may not have noticed that in addition to passing in the Revit widow handle to its Show method, we also passed in a delegate to the SetPendingElementId method in the constructor:</p><pre class=\"code\">\n  <span class=\"teal\">LooseConnectorNavigator</span> navigator\n    = <span class=\"blue\">new</span> <span class=\"teal\">LooseConnectorNavigator</span>(\n      data,\n      <span class=\"blue\">new</span> <span class=\"teal\">SetElementId</span>( SetPendingElementId )  );\n \n  navigator.Show( _hWndRevit );\n</pre><p>The LooseConnectorNavigator, derived from the System.Windows.Forms base class Form, stores the delegate in a local variable _set_id:</p><pre class=\"code\">\n<span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> _set_id;\n \n<span class=\"blue\">public</span> LooseConnectorNavigator(\n  <span class=\"teal\">SortableBindingList</span>&lt;<span class=\"teal\">ConnectorData</span>&gt; a,\n  <span class=\"teal\">Command</span>.<span class=\"teal\">SetElementId</span> set_id )\n{\n  InitializeComponent();\n  dataGridView1.DataSource = a;\n  _set_id = set_id;\n}\n</pre><p>Right after instantiating and displaying the form, we subscribe to the Idling event and terminate the command.\nAt that point, our access to the Revit API is closed, and the modeless form lives outside of the Revit API context.\nHowever, as said, every time the Idling event is triggered, our event handler is called, and we re-enter the Revit API context, giving us a chance to check whether we have a pending element id to display and giving us full access to the Revit API in order to do so.</p><p>So let's look at the two event handlers.</p>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Double Click Event Handler",
    "local_header_href": "#double-click-event-handler",
    "chunk_text": "<h4>Double Click Event Handler</h4><p>The double click event handler has to determine the element id of the pending element to display.\nIt can do so by retrieving the current row in the data grid view and extracting the appropriate cell contents.\nThe element id of the element hosting the unconnected connector is stored in the last column of the grid view. Here is the implementation of the event handler and its SetElementIdFromRow helper method, which calls _set_id to transmit the pending element id back to the main command and the Idling event handler:</p><pre class=\"code\">\n<span class=\"blue\">void</span> SetElementIdFromRow(\n  <span class=\"blue\">int</span> rowIndex,\n  <span class=\"blue\">bool</span> doubleClick )\n{\n  <span class=\"green\">//</span>\n  <span class=\"green\">// do something on double click, </span>\n  <span class=\"green\">// except when on the header:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">if</span>( rowIndex &gt; -1 )\n  {\n    <span class=\"teal\">DataGridViewRow</span> row\n      = dataGridView1.Rows[rowIndex];\n \n    <span class=\"blue\">int</span> n = row.Cells.Count;\n \n    <span class=\"teal\">DataGridViewCell</span> cell = row.Cells[n - 1];\n \n    <span class=\"blue\">int</span> id = ( <span class=\"blue\">int</span> ) cell.Value;\n \n    _set_id( id );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"{0} click on row {1} --&gt; element id {2}\"</span>,\n      doubleClick ? <span class=\"maroon\">\"Double\"</span> : <span class=\"maroon\">\"Single\"</span>,\n      rowIndex, id );\n  }\n}\n \n<span class=\"blue\">void</span> dataGridView1_CellDoubleClick(\n  <span class=\"blue\">object</span> sender,\n  <span class=\"teal\">DataGridViewCellEventArgs</span> e )\n{\n  SetElementIdFromRow( e.RowIndex, <span class=\"blue\">true</span> );\n}\n</pre>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Idling Event Handler",
    "local_header_href": "#idling-event-handler",
    "chunk_text": "<h4>Idling Event Handler</h4><p>In the Idling event handler, we first of all check whether we have anything to do at all.\nThis check should be extremely quick, since the event handler may be called hundreds of times per second if Revit has nothing else to do.\nIf the pending element id is non-zero, we wish to highlight and display it on the Revit screen.\n\n<p>This can be achieved using the ShowElements, which requires access to the active UIdocument and Document, which we can retrieve from the Revit application.\nWe already explained how to access the Revit application from an Idling event handler in the initial discussion of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/idling-event.html\">\nIdling event</a>,\n\nby simply casting the sender argument to an Application instance.</p>\n<p>So here is the final resulting implementation of the Revit Idling event handler.\nAs said, whenever the user has selected an element to zoom to in the modeless dialogue, the pending element id is set. The event handler picks it up and zooms to it.\n\n<p>Since we are not modifying the Revit document in any way, there is no need to start a transaction.\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> OnIdling( <span class=\"blue\">object</span> sender, <span class=\"teal\">IdlingEventArgs</span> ea )\n{\n  <span class=\"blue\">int</span> id = _pending_element_id;\n \n  <span class=\"blue\">if</span>( 0 != id )\n  {\n    <span class=\"teal\">Application</span> app\n      = sender <span class=\"blue\">as</span> <span class=\"teal\">Application</span>;\n \n    <span class=\"teal\">UIApplication</span> uiapp\n      = <span class=\"blue\">new</span> <span class=\"teal\">UIApplication</span>( app );\n \n    <span class=\"teal\">UIDocument</span> uidoc\n      = uiapp.ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc\n      = uidoc.Document;\n \n    <span class=\"teal\">ElementId</span> eid = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( id );\n    <span class=\"teal\">Element</span> e = doc.get_Element( eid );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"Element id {0} requested --&gt; {1}\"</span>,\n      id, <span class=\"blue\">new</span> <span class=\"teal\">ElementData</span>( e, doc ) );\n \n    <span class=\"green\">// look, mom, no transaction required!</span>\n \n    uidoc.Selection.Elements.Clear();\n    uidoc.Selection.Elements.Add( e );\n    uidoc.ShowElements( e );\n \n    <span class=\"green\">//LooseConnectorNavigator.Id = 0;</span>\n    _pending_element_id = 0;\n  }\n}\n</pre>\n<h4>Reaction</h4>\n<p>The reaction to a double click is surprisingly snappy, if you know what is going on in the background.\nIf you don't know there is nothing to indicate that the modeless form is not an integral part of Revit itself.</p>\n<p>I showed the modeless form in the discussion on populating a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\ndata grid view</a>:</p>\n<center>\n<img alt=\"Modeless loose connector form\" src=\"img/modeless_loose_connector_form.png\"/>\n</center>\n<p>Once a user clicks on one of the unconnected connectors listed in the form, Revit immediately zooms to it.\nIn some cases, if the element is not visible in the current view, Revit will ask whether to search for another suitable view to display it in:</p>\n<center>\n<img alt=\"Revit asking whether to search for a suitable view\" src=\"img/modeless_loose_connector_search_view.png\"/>\n</center>\n<p>If the current view was suitable or a suitable one was found, the double clicked element is highlighted and zoomed in:</p>\n<center>\n<img alt=\"Highlighted element with a loose connector\" src=\"img/modeless_loose_connector_element.png\"/>\n</center>\n<p>I hope you find this sample useful in your development work. \nAs said, the response at the AEC DevCamp conference in Boston and the Waltham and Munich DevLabs was pretty enthusiastic.\n\n<p>Here is a slightly further cleaned up version of this sample,\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\loose_connectors_6.zip -->\n<a href=\"zip/loose_connectors_6.zip\">\nloose_connectors_6.zip</a>,\n\nincluding the complete source code and Visual Studio solution.\n\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0407_modeless_loose_connectors",
    "header_text": "Reaction",
    "local_header_href": "#reaction",
    "chunk_text": "<h4>Reaction</h4><p>The reaction to a double click is surprisingly snappy, if you know what is going on in the background.\nIf you don't know there is nothing to indicate that the modeless form is not an integral part of Revit itself.</p><p>I showed the modeless form in the discussion on populating a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">\ndata grid view</a>:</p><center>\n<img alt=\"Modeless loose connector form\" src=\"img/modeless_loose_connector_form.png\"/>\n</center><p>Once a user clicks on one of the unconnected connectors listed in the form, Revit immediately zooms to it.\nIn some cases, if the element is not visible in the current view, Revit will ask whether to search for another suitable view to display it in:</p><center>\n<img alt=\"Revit asking whether to search for a suitable view\" src=\"img/modeless_loose_connector_search_view.png\"/>\n</center><p>If the current view was suitable or a suitable one was found, the double clicked element is highlighted and zoomed in:</p><center>\n<img alt=\"Highlighted element with a loose connector\" src=\"img/modeless_loose_connector_element.png\"/>\n</center><p>I hope you find this sample useful in your development work. \nAs said, the response at the AEC DevCamp conference in Boston and the Waltham and Munich DevLabs was pretty enthusiastic.\n\n<p>Here is a slightly further cleaned up version of this sample,\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\loose_connectors_6.zip -->\n<a href=\"zip/loose_connectors_6.zip\">\nloose_connectors_6.zip</a>,\n\nincluding the complete source code and Visual Studio solution.\n\n</p></p>"
  }
]