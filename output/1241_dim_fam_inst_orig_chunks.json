[
  {
    "original_filename": "1241_dim_fam_inst_orig",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1241_dim_fam_inst_orig",
    "header_text": "Picking Pairs and Dimensioning Family Instance Origin",
    "local_header_href": "#picking-pairs-and-dimensioning-family-instance-origin",
    "chunk_text": "<h3>Picking Pairs and Dimensioning Family Instance Origin</h3><p>We looked at various aspects of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.45\">creating dimensioning</a> in\n\nthe past.\nThere is still one glaring omission, though: how to dimension to a family instance origin point.</p><p>Let's take a look at that, after quickly mentioning the official announcement of the movie matching game that we created at the recent Berlin hackathon.</p><p>Actually, coincidentally, I discuss two topics today that are both completely and utterly dedicated to picking pairs: the Movie Match MasterY game, matching pairs of cards representing films, and my new pair picker utility class, for selecting pairs of Revit elements of a given type:</p><ul>\n<li><a href=\"#2\">Movie Match MasterY</a></li>\n<li><a href=\"#3\">Creating dimensioning referencing family instance origin</a></li>\n<li><a href=\"#4\">JtPairPicker pair picker utility class</a></li>\n<li><a href=\"#5\">Download</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1241_dim_fam_inst_orig",
    "header_text": "Movie Match MasterY",
    "local_header_href": "#movie-match-mastery",
    "chunk_text": "<h4>Movie Match MasterY</h4><p>As reported during the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/10/berlin-hackathon-begin.html\">Berlin hackathon</a>, its\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/10/attached-detail-groups-and-inverse-relationships.html\">progress</a> and\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/10/berlin-hackathon-results-3d-viewer-and-web-news.html\">results</a>,\n\nI was part of the\n\n<a href=\"https://github.com/m3my\">m3my team</a> creating the\n\n<a href=\"https://m3my.github.io\">Movie Match MasterY</a> movie matching memory game.</p><p>We were forced to rename it from the original <i>MovieMemory</i>, because the German company Ravensburger has a trademark on 'Memory' in numerous countries, causing Apple to\n\n<a href=\"https://www.google.de/webhp?sourceid=chrome-instant&amp;ion=1&amp;espv=2&amp;ie=UTF-8#q=memory%20ravensburger%20trademark\">\nban all games whose name contains 'Memory' from its AppStore</a>.</p><p>Anyway, here is now the (German)\n\n<a href=\"http://blog.neofonie.de/2014/11/12/wie-mit-hilfe-von-textanalysen-und-natural-language-processing-ein-moviegame-entstand/\">\nMovie Match MasterY announcement</a> on the\n\n<a href=\"http://www.neofonie.de\">Neofonie</a> tech blog.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1241_dim_fam_inst_orig",
    "header_text": "Creating Dimensioning Referencing Family Instance Origin",
    "local_header_href": "#creating-dimensioning-referencing-family-instance-origin",
    "chunk_text": "<h4>Creating Dimensioning Referencing Family Instance Origin</h4><p>Back to the Revit API and the main topic for today:</p><p><strong>Question:</strong> I know how to create dimensioning between two family edges.</p><p>How can I create dimensioning between the centre point or origin point of the family, however?</p><p>Here is an example showing the two situations with manually generated dimensioning:</p><center>\n<img alt=\"Dimensioning family instance edge versus origin\" src=\"img/dimension_instance_edge_or_origin_before.png\" width=\"280\"/>\n</center><p><strong>Answer:</strong> The secret lies in accessing the hidden elements embedded within the family instance and definition.</p><p>In your case, you can use the non-visible family instance geometry origin point.</p><p>Turn on both ComputeReferences and IncludeNonVisibleObjects when you request the geometry from the family instances:</p><pre class=\"code\">\n  _opt = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n  _opt.ComputeReferences = <span class=\"blue\">true</span>;\n  _opt.IncludeNonVisibleObjects = <span class=\"blue\">true</span>;\n</pre><p>The geometry of the hidden elements includes a point from which you can retrieve a reference to use to define your dimensioning.</p><p>The current version of RevitLookup enables you to query and explore non-visible objects in the element geometry:</p><center>\n<img alt=\"RevitLookup accessing non-visible geometry\" src=\"img/snoop_non_visible_objects.png\" width=\"600\"/>\n</center><p>Navigate into the geometry element collection of geometry objects to explore the point object we are looking for:</p><center>\n<img alt=\"RevitLookup displaying family instance geometry element point\" src=\"img/snoop_non_visible_geometry_element_point.png\" width=\"600\"/>\n</center><p>As always, the most up-to-date version of RevitLookup is available from the\n\n<a href=\"https://github.com/jeremytammik/RevitLookup\">RevitLookup GitHub repository</a>.</p><p>Based on that, I implemented the following rather compact helper method retrieving the non-visible family instance element geometry, extracting the Point object and returning a reference to it:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Retrieve the given family instance's</span>\n  <span class=\"gray\">///</span><span class=\"green\"> non-visible geometry point reference.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">Reference</span> GetFamilyInstancePointReference(\n    <span class=\"teal\">FamilyInstance</span> fi )\n  {\n    <span class=\"blue\">return</span> fi.get_Geometry( _opt )\n      .OfType&lt;<span class=\"teal\">Point</span>&gt;()\n      .Select&lt;<span class=\"teal\">Point</span>, <span class=\"teal\">Reference</span>&gt;( x =&gt; x.Reference )\n      .FirstOrDefault();\n  }\n</pre><p>I implemented a new external command CmdDimensionInstanceOrigin in The Building Coder samples to make use of that to pick the two family instances in your sample model and create dimensioning between them like this:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdDimensionInstanceOrigin</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">static</span> <span class=\"teal\">Options</span> _opt = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">JtPairPicker</span>&lt;<span class=\"teal\">FamilyInstance</span>&gt; picker\n      = <span class=\"blue\">new</span> <span class=\"teal\">JtPairPicker</span>&lt;<span class=\"teal\">FamilyInstance</span>&gt;( uidoc );\n \n    <span class=\"teal\">Result</span> rc = picker.Pick();\n \n    <span class=\"blue\">if</span>( <span class=\"teal\">Result</span>.Failed == rc )\n    {\n      message = <span class=\"maroon\">\"We need at least two \"</span>\n        + <span class=\"maroon\">\"FamilyInstance elements in the model.\"</span>;\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"teal\">Result</span>.Succeeded == rc )\n    {\n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FamilyInstance</span>&gt; a = picker.Selected;\n \n      _opt = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n      _opt.ComputeReferences = <span class=\"blue\">true</span>;\n      _opt.IncludeNonVisibleObjects = <span class=\"blue\">true</span>;\n \n      <span class=\"teal\">XYZ</span>[] pts = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[2];\n      <span class=\"teal\">Reference</span>[] refs = <span class=\"blue\">new</span> <span class=\"teal\">Reference</span>[2];\n \n      pts[0] = ( a[0].Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span> ).Point;\n      pts[1] = ( a[1].Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span> ).Point;\n \n      refs[0] = GetFamilyInstancePointReference( a[0] );\n      refs[1] = GetFamilyInstancePointReference( a[1] );\n \n      <span class=\"teal\">CmdDimensionWallsIterateFaces</span>\n        .CreateDimensionElement( doc.ActiveView,\n        pts[0], refs[0], pts[1], refs[1] );\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n}\n</pre><p>Besides accessing the required point and reference, it makes use of my new <a href=\"#3\">JtPairPicker class described below</a> to select the two family instances.</p><p>Here is the result of running the new command in your sample model:</p><center>\n<img alt=\"Programmatically generated dimensioning to family instance origin\" src=\"img/dimension_instance_edge_or_origin_after.png\" width=\"280\"/>\n</center><p>The dimensioning element at the bottom right is the programmatically generated one.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1241_dim_fam_inst_orig",
    "header_text": "JtPairPicker Pair Picker Utility Class",
    "local_header_href": "#jtpairpicker-pair-picker-utility-class",
    "chunk_text": "<h4>JtPairPicker Pair Picker Utility Class</h4><p>The external command implementation above is very succinct.</p><p>To a large extent, this is due to my new JtPairPicker pair picker utility class.</p><p>It can be used whenever you wish to automatically retrieve or interactively select two elements of the same type.</p><p>For a maximum of flexibility, comfort and efficiency in testing the command, it supports three different possibilities for selecting the two elements:</p><ul>\n<li>Run in a model containing exactly two parallel offset pipe elements, they will be automatically selected.</li>\n<li>If no two elements of the required type exist in the model, the command is aborted.</li>\n<li>If more than two such elements exist, we check whether some have been pre-selected before launching the command. If so, the first two are used.</li>\n<li>Otherwise, the user is prompted to interactively (post-) select two elements of the required type.</li>\n</ul><p>The implementation is based on my code selecting two pipes for creating\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/explicitly-placing-rolling-offset-pipe-elbow-fittings.html\">\nrolling offset pipe elbow fittings</a>,\n\nin which the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/calculating-a-rolling-offset-between-two-pipes.html#2\">\npipe selection implementation</a> constitutes\n\nthe major part of the code.</p><p>Extracting that into a separate utility class saves a lot of space!</p><p>I therefore converted this to a generic templated class and used it in the dimensioning example above to retrieve or pick the two family instances.</p><p>Here is the full class implementation:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Pick a pair of elements of a specific type.</span>\n<span class=\"gray\">///</span><span class=\"green\"> If exactly two exist in the entire model,</span>\n<span class=\"gray\">///</span><span class=\"green\"> take them. If there are less than two, give</span>\n<span class=\"gray\">///</span><span class=\"green\"> up. If elements have been preselected, use</span>\n<span class=\"gray\">///</span><span class=\"green\"> those. Otherwise, prompt for interactive</span>\n<span class=\"gray\">///</span><span class=\"green\"> picking.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtPairPicker</span>&lt;T&gt; <span class=\"blue\">where</span> T : <span class=\"teal\">Element</span>\n{\n  <span class=\"teal\">UIDocument</span> _uidoc;\n  <span class=\"teal\">Document</span> _doc;\n  <span class=\"teal\">List</span>&lt;T&gt; _a;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Allow selection of elements of type T only.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">ElementsOfClassSelectionFilter</span>&lt;T2&gt; : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> e <span class=\"blue\">is</span> T2;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> JtPairPicker( <span class=\"teal\">UIDocument</span> uidoc )\n  {\n    _uidoc = uidoc;\n    _doc = _uidoc.Document;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return selection result.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">IList</span>&lt;T&gt; Selected\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _a;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Run the automatic or interactive </span>\n  <span class=\"gray\">///</span><span class=\"green\"> selection process.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Pick()\n  {\n    <span class=\"green\">// Retrieve all T elements in the entire model.</span>\n \n    _a = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;T&gt;(\n      <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( _doc )\n        .OfClass( <span class=\"blue\">typeof</span>( T ) )\n        .ToElements()\n        .Cast&lt;T&gt;() );\n \n    <span class=\"blue\">int</span> n = _a.Count;\n \n    <span class=\"green\">// If there are less than two, </span>\n    <span class=\"green\">// there is nothing we can do.</span>\n \n    <span class=\"blue\">if</span>( 2 &gt; n )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// If there are exactly two, pick those.</span>\n \n    <span class=\"blue\">if</span>( 2 == n )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"green\">// There are more than two to choose from.</span>\n    <span class=\"green\">// Check for a pre-selection.</span>\n \n    _a.Clear();\n \n    <span class=\"teal\">Selection</span> sel = _uidoc.Selection;\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n      = sel.GetElementIds();\n \n    n = ids.Count;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} pre-selected elements.\"</span>, n );\n \n    <span class=\"green\">// If two or more T elements were pre-</span>\n    <span class=\"green\">// selected, use the first two encountered.</span>\n \n    <span class=\"blue\">if</span>( 1 &lt; n )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n      {\n        T e = _doc.GetElement( id ) <span class=\"blue\">as</span> T;\n \n        <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != e,\n          <span class=\"maroon\">\"only elements of type T can be picked\"</span> );\n \n        _a.Add( e );\n \n        <span class=\"blue\">if</span>( 2 == _a.Count )\n        {\n          <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Found two pre-selected \"</span>\n            + <span class=\"maroon\">\"elements of desired type and \"</span>\n            + <span class=\"maroon\">\"ignoring everything else.\"</span> );\n \n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n \n    <span class=\"green\">// None or less than two elements were pre-</span>\n    <span class=\"green\">// selected, so prompt for an interactive </span>\n    <span class=\"green\">// post-selection instead.</span>\n \n    <span class=\"blue\">if</span>( 2 != _a.Count )\n    {\n      _a.Clear();\n \n      <span class=\"green\">// Select first element.</span>\n \n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">Reference</span> r = sel.PickObject(\n          <span class=\"teal\">ObjectType</span>.Element,\n          <span class=\"blue\">new</span> <span class=\"teal\">ElementsOfClassSelectionFilter</span>&lt;T&gt;(),\n          <span class=\"maroon\">\"Please pick first element.\"</span> );\n \n        _a.Add( _doc.GetElement( r.ElementId )\n          <span class=\"blue\">as</span> T );\n      }\n      <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n        .<span class=\"teal\">OperationCanceledException</span> )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n      }\n \n      <span class=\"green\">// Select second element.</span>\n \n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">Reference</span> r = sel.PickObject(\n          <span class=\"teal\">ObjectType</span>.Element,\n          <span class=\"blue\">new</span> <span class=\"teal\">ElementsOfClassSelectionFilter</span>&lt;T&gt;(),\n          <span class=\"maroon\">\"Please pick second element.\"</span> );\n \n        _a.Add( _doc.GetElement( r.ElementId )\n          <span class=\"blue\">as</span> T );\n      }\n      <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n        .<span class=\"teal\">OperationCanceledException</span> )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><a name=\"5\"></a>"
  },
  {
    "original_filename": "1241_dim_fam_inst_orig",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>As always, the most up to date version of The Building Coder samples is provided in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">its GitHub repository</a>,\n\nand the version including the new JtPairPicker class and CmdDimensionInstanceOrigin external command described above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.116.0\">\nrelease 2015.0.116.0</a>.</p>"
  }
]