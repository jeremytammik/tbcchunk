[
  {
    "original_filename": "0090_compound_wall_layer_volumes",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0090_compound_wall_layer_volumes",
    "header_text": "Compound Wall Layer Volumes",
    "local_header_href": "#compound-wall-layer-volumes",
    "chunk_text": "<h3>Compound Wall Layer Volumes</h3><p>Here I continue the discussion of one of the topics that were raised in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/verona-revit-api-training.html\">\nRevit API training in Verona</a>\n\nlast week.\n\n<p>We can combine the two discussion strands analysing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/3d-polygon-areas.html\">\nwall areas</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/wall-compound-layers.html\">\ncompound wall layers</a>\n\nto calculate the volumes of each individual layer in a compound wall.</p>\n<p>In our initial idea for implementing this, we thought of making use of the wall area that we calculated ourselves from the appropriate face of the wall's solid geometry.\nWhatever method we use to determine the area, there will be some imprecision in the calculation, since the wall profile area will be calculated either for the inner or outer face of the wall, which will not exactly match the area of some of the interior layers, depending on how the wall layers connect in the corners and wall intersections.</p>\n<p>Later, we discovered that a simpler and sometimes exact approach is given by using the value of the built-in parameter HOST_AREA_COMPUTED instead.\nIn a compound wall with multiple layers, we can simply multiply this value with the thickness of each of the component layers to obtain the volume of each layer.\nWe implemented a test to compare the sum of all the component layer volumes with the total wall volume obtained from the HOST_VOLUME_COMPUTED parameter.\nDepending on the type of wall connection, the two results are sometimes exactly equal.<p>\n<p>Since the Revit database unit for length is feet, all our raw values will be in feet for length, square feet for area, and cubic feet for volume. We convert the data to metric before displaying it.</p>\n<p>To store the cumulated volumes for each wall layer as well as the wall total, we make use of a dictionary mapping a key to a double number representing the volume. The key is defined by concatenating the wall type name and the layer function, using the string \" : \" as a separator.</p>\n<p>Since we want to cumulate the volumes for all selected walls, we implemented a derived class MapLayerToVolume with a Cumulate method. If we used the generic Dictionary class directly, we would have to use the ContainsKey as well as the Add method to check whether the key is present before adding to its volume:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">MapLayerToVolume</span>\n  : <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">double</span>&gt;\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Cumulate(\n    <span class=\"blue\">string</span> key,\n    <span class=\"blue\">double</span> value )\n  {\n    <span class=\"blue\">if</span>( !ContainsKey( key ) )\n    {\n      <span class=\"blue\">this</span>[key] = 0.0;\n    }\n    <span class=\"blue\">this</span>[key] += value;\n  }\n}\n</pre>\n<p>We define constants for the two parameters we are interested in and a little helper method to retrieve their values from a given wall:</p>\n<pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"teal\">BuiltInParameter</span> _bipArea\n  = <span class=\"teal\">BuiltInParameter</span>.HOST_AREA_COMPUTED;\n \n<span class=\"blue\">const</span> <span class=\"teal\">BuiltInParameter</span> _bipVolume\n  = <span class=\"teal\">BuiltInParameter</span>.HOST_VOLUME_COMPUTED;\n \n<span class=\"blue\">double</span> GetWallParameter(\n  <span class=\"teal\">Wall</span> wall,\n  <span class=\"teal\">BuiltInParameter</span> bip )\n{\n  <span class=\"teal\">Parameter</span> p = wall.get_Parameter( bip );\n \n  <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != p,\n    <span class=\"maroon\">\"expected wall to have \"</span>\n    + <span class=\"maroon\">\"HOST_AREA_COMPUTED and \"</span>\n    + <span class=\"maroon\">\"HOST_VOLUME_COMPUTED parameters\"</span> );\n \n  <span class=\"blue\">return</span> p.AsDouble();\n}\n</pre>\n<p>The method GetWallLayerVolumes uses this helper method to determine and cumulate the compound wall layer volumes for a given wall:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> GetWallLayerVolumes(\n  <span class=\"teal\">Wall</span> wall,\n  <span class=\"blue\">ref</span> <span class=\"teal\">MapLayerToVolume</span> totalVolumes )\n{\n  <span class=\"teal\">WallType</span> wt = wall.WallType;\n \n  <span class=\"teal\">CompoundStructure</span> structure\n    = wt.CompoundStructure;\n \n  <span class=\"teal\">CompoundStructureLayerArray</span> layers\n    = structure.Layers;\n \n  <span class=\"blue\">int</span> i, n = layers.Size;\n  <span class=\"blue\">double</span> area = GetWallParameter( wall, _bipArea );\n  <span class=\"blue\">double</span> volume = GetWallParameter( wall, _bipVolume );\n  <span class=\"blue\">double</span> thickness = wt.Width;\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( wall );\n \n  <span class=\"teal\">Debug</span>.WriteLine( <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} with thickness {1}\"</span>\n    + <span class=\"maroon\">\" and volume {2}\"</span>\n    + <span class=\"maroon\">\" has {3} layer{4}{5}\"</span>,\n    desc,\n    <span class=\"teal\">Util</span>.MmString( thickness ),\n    <span class=\"teal\">Util</span>.RealString( volume ),\n    n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n    <span class=\"teal\">Util</span>.DotOrColon( n ) ) );\n \n  <span class=\"green\">//</span>\n  <span class=\"green\">// volume for entire wall:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">string</span> key = wall.WallType.Name;\n  totalVolumes.Cumulate( key, volume );\n \n  <span class=\"green\">//</span>\n  <span class=\"green\">// volume for compound wall layers:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    i = 0;\n    <span class=\"blue\">double</span> total = 0.0;\n    <span class=\"blue\">double</span> layerVolume;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">CompoundStructureLayer</span>\n      layer <span class=\"blue\">in</span> layers )\n    {\n      key = wall.WallType.Name + <span class=\"maroon\">\" : \"</span>\n        + layer.Function;\n \n      layerVolume = area * layer.Thickness;\n \n      totalVolumes.Cumulate( key, layerVolume );\n      total += layerVolume;\n \n      <span class=\"teal\">Debug</span>.WriteLine( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"  Layer {0}: function {1}, \"</span>\n        + <span class=\"maroon\">\"thickness {2}, volume {3}\"</span>,\n        ++i, layer.Function,\n        <span class=\"teal\">Util</span>.MmString( layer.Thickness ),\n        <span class=\"teal\">Util</span>.RealString( layerVolume ) ) );\n    }\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Wall volume = {0},\"</span>\n      + <span class=\"maroon\">\" total layer volume = {1}\"</span>,\n      <span class=\"teal\">Util</span>.RealString( volume ),\n      <span class=\"teal\">Util</span>.RealString( total ) );\n \n    <span class=\"blue\">if</span>( !<span class=\"teal\">Util</span>.IsEqual( volume, total ) )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Wall host volume parameter\"</span>\n        + <span class=\"maroon\">\" value differs from sum of all layer\"</span>\n        + <span class=\"maroon\">\" volumes: {0}\"</span>,\n        volume - total );\n    }\n}\n</pre>\n<p>It iterates over each layer in the compound structure of the wall and determines its volume by multiplying the wall area with the layer thickness.\nIt checks whether the total wall volume obtained from the HOST_VOLUME_COMPUTED parameter is equal to the sum of all the individual layer volumes and reports the difference if this is not the case.</p>\n<p>The mainline of the command selects the walls to process, applies GetWallLayerVolumes to each one in turn, and presents the results.\nThe user can preselect some specific walls, otherwise all walls in the project will be processed:</p>\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; walls = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n<span class=\"blue\">if</span>( !<span class=\"teal\">Util</span>.GetSelectedElementsOrAll(\n  walls, doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ) ) )\n{\n  <span class=\"teal\">Selection</span> sel = doc.Selection;\n  message = ( 0 &lt; sel.Elements.Size )\n    ? <span class=\"maroon\">\"Please select some wall elements.\"</span>\n    : <span class=\"maroon\">\"No wall elements found.\"</span>;\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n}\n \n<span class=\"teal\">MapLayerToVolume</span> totalVolumes\n  = <span class=\"blue\">new</span> <span class=\"teal\">MapLayerToVolume</span>();\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">Wall</span> wall <span class=\"blue\">in</span> walls )\n{\n  GetWallLayerVolumes( wall, <span class=\"blue\">ref</span> totalVolumes );\n}\n \n<span class=\"blue\">string</span> msg\n  = <span class=\"maroon\">\"Compound wall layer volumes formatted as '\"</span>\n  + <span class=\"maroon\">\"wall type : layer function :\"</span>;\n  + <span class=\"maroon\">\" volume in cubic meters':\\n\"</span>;\n \n<span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;(\n  totalVolumes.Keys );\n \nkeys.Sort();\n \n<span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> key <span class=\"blue\">in</span> keys )\n{\n  msg += <span class=\"maroon\">\"\\n\"</span> + key + <span class=\"maroon\">\" : \"</span>\n    + <span class=\"teal\">Util</span>.RealString(\n      <span class=\"teal\">Util</span>.CubicFootToCubicMeter(\n      totalVolumes[key] ) );\n}\n \n<span class=\"teal\">Util</span>.InfoMsg( msg );\n \n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Cancelled;\n</pre>\n<p>The command returns CmdResult.Cancelled, because no changes have been made to the Revit database.\nIf we return Succeeded, the document is unnecessarily marked as dirty.</p>\n<p>Before displaying the volumes, they are converted from the raw internal cubic feet units to cubic meters using a new utility function CubicFootToCubicMeter:</p>\n<pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">double</span> _convertFootToMm = 12 * 25.4;\n \n<span class=\"blue\">const</span> <span class=\"blue\">double</span> _convertFootToMeter\n  = _convertFootToMm * 0.001;\n \n<span class=\"blue\">const</span> <span class=\"blue\">double</span> _convertCubicFootToCubicMeter\n  = _convertFootToMeter\n  * _convertFootToMeter\n  * _convertFootToMeter;\n \n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">double</span> CubicFootToCubicMeter(\n  <span class=\"blue\">double</span> volume )\n{\n  <span class=\"blue\">return</span> volume * _convertCubicFootToCubicMeter;\n}\n</pre>\n<p>Here is the debug output produced by running this analysis in a simple project with just a few walls:</p>\n<pre>\nWalls &lt;130328 Exterior - Block on Mtl. Stud&gt; with thickness 460 mm and volume 679.68 has 7 layers:\n  Layer 1: function Finish1, thickness 200 mm, volume 295.51\n  Layer 2: function ThermalOrAir, thickness 76 mm, volume 112.29\n  Layer 3: function MembraneLayer, thickness 0 mm, volume 0\n  Layer 4: function Substrate, thickness 19 mm, volume 28.07\n  Layer 5: function Structure, thickness 152 mm, volume 224.59\n  Layer 6: function MembraneLayer, thickness 0 mm, volume 0\n  Layer 7: function Finish2, thickness 13 mm, volume 19.21\nWall volume = 679.68, total layer volume = 679.68\n\nWalls &lt;130357 Exterior - Block on Mtl. Stud&gt; with thickness 460 mm and volume 489.94 has 7 layers:\n  Layer 1: function Finish1, thickness 200 mm, volume 213.02\n  Layer 2: function ThermalOrAir, thickness 76 mm, volume 80.95\n  Layer 3: function MembraneLayer, thickness 0 mm, volume 0\n  Layer 4: function Substrate, thickness 19 mm, volume 20.24\n  Layer 5: function Structure, thickness 152 mm, volume 161.89\n  Layer 6: function MembraneLayer, thickness 0 mm, volume 0\n  Layer 7: function Finish2, thickness 13 mm, volume 13.85\nWall volume = 489.94, total layer volume = 489.94\n\nWalls &lt;130424 Generic - 200mm&gt; with thickness 200 mm and volume 791.05 has 1 layer:\n  Layer 1: function Structure, thickness 200 mm, volume 791.05\nWall volume = 791.05, total layer volume = 791.05\n\nCompound wall layer volumes formatted as 'wall type : layer function : volume in cubic meters':\n\nExterior - Block on Mtl. Stud : 33.12\nExterior - Block on Mtl. Stud : Finish1 : 14.4\nExterior - Block on Mtl. Stud : Finish2 : 0.94\nExterior - Block on Mtl. Stud : MembraneLayer : 0\nExterior - Block on Mtl. Stud : Structure : 10.94\nExterior - Block on Mtl. Stud : Substrate : 1.37\nExterior - Block on Mtl. Stud : ThermalOrAir : 5.47\nGeneric - 200mm : 22.4\nGeneric - 200mm : Structure : 22.4\n</pre>\n<p>To see the full text, you will have to copy and paste to a text editor.</p>\n<p>The final result is displayed in a dialogue box:</p>\n<img alt=\"Compound wall layer volumes\" src=\"img/compound_wall_layer_volumes.png\"/>\n<p>Here is an updated\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10021.zip\">\nversion 1.0.0.21</a>\n\nof the complete Visual Studio solution with this new command implementation.</p>\n</p></p></p>"
  }
]