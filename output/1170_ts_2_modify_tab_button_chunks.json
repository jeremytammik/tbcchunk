[
  {
    "original_filename": "1170_ts_2_modify_tab_button",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1170_ts_2_modify_tab_button",
    "header_text": "Room Editor Live and Unofficial Custom Ribbon Button",
    "local_header_href": "#room-editor-live-and-unofficial-custom-ribbon-button",
    "chunk_text": "<h3>Room Editor Live and Unofficial Custom Ribbon Button</h3><p>I spent a wonderful weekend and yesterday's\n\n<a href=\"http://en.wikipedia.org/wiki/Whit_Monday\">Whit Monday</a> holiday\n\nenjoying high summer in Swiss nature with no electricity and a Chäschessi, the Swiss variant of a Jacuzzi or hot tub.\nToday I am leaving for a ten-day camping vacation in nature in Sweden.</p><p>Here are two topics I would like to address before leaving that will hopefully keep you occupied and entertained during my absence:</p><ul>\n<li><a href=\"#3\">Room Editor Live</a></li>\n<li><a href=\"#4\">Adding a custom button to the Modify tab</a></li>\n<li><a href=\"#5\">Vacation time</a></li>\n</ul><a name=\"3\"></a>"
  },
  {
    "original_filename": "1170_ts_2_modify_tab_button",
    "header_text": "Room Editor Live",
    "local_header_href": "#room-editor-live",
    "chunk_text": "<h4>Room Editor Live</h4><p>I presented my room editor version two at the internal Autodesk technical summit in Toronto.\n\n<p>The presentation is obviously similar to the recently presented\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/05/adn-revit-2015-api-training-material.html#2\">\npreview recording</a> of\n\nthe enhanced cloud-based round-trip simplified 2D BIM editor.</p>\n<p>Here comes the live thing with an additional illuminating Q and A session at the end:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/room_editor_2/tech_summit_live/ts2014_jeremy_tammik.pdf\">Slide deck</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/room_editor_2/tech_summit_live/index.html\">Half hour live recording</a></li>\n</ul>\n<p>An hour before the presentation, I happened to discover and fix a bug related to the buttons defined by the external application.</p>\n<p>I modify the text on one of them to implement a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/roll-your-own-toggle-button.html\">\ntoggle button</a>,\n\nand its index was off by one since I added a new button at the top.</p>\n<p>The RoomEditorApp source code, Visual Studio solution and add-in manifest is updated in the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">\nRoomEditorApp GitHub repository</a> and\n\nnow sports the final release\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2015.0.2.20\">\nrelease 2015.0.2.20</a>.\n\n\n\n<a name=\"4\"></a>\n<h4>Adding a custom button to the Modify tab</h4>\n<p>In a completely different vein:</p>\n<p>A Revit add-in can only add its commands to the Revit Add-Ins and Analyze ribbon tabs.</p>\n<p>However, if you really need more flexibility, Frode Tørresdal of\n\n<a href=\"http://www.nois.no\">\nNorconsult Informasjonssystemer</a> has\n\na clever and interesting workaround to offer:</p>\n<p>You can add a non-API custom button to any Revit ribbon tab you want using the .NET UI Automation library.</p>\n<p>You can also add an event handler to catch a button click on it.</p>\n<p>Revit will know nothing about it, however, and you cannot use the Revit API in the custom button click event handler.</p>\n<p>You can however subscribe to the Idling event beforehand, send your Idling event handler a message from the button click event handler, use the Revit API in the Idling event handler, and unsubscribe from Idling again.<p>\n<p>Here is a quick demo of ModifyTabButton, a Revit add-in demonstrating how to\n\n<a href=\"https://www.youtube.com/watch?v=LwrBlRrplD8\">\nadd a custom button to the Modify tab and trigger Revit API functionality from it</a>:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"253\" src=\"http://www.youtube.com/embed/LwrBlRrplD8\" width=\"450\"></iframe>\n</center>\n<p>Frode raised the question and provided the solution in the following discussion:</p>\n<p><strong>Question:</strong> I'm trying to add buttons to Revit's modify tab. I retrieve the Autodesk.Windows.RibbonTab with id=\"Modify\" and add a Autodesk.Windows.RibbonPanel to this tab. This seems to work.</p>\n<p>But how do I disable and hide my buttons? I do not want them to show when e.g. placing a wall. I only want them to show when no command is selected or a detail item is selected.</p>\n<p>Also please let me know if there is a better way to add buttons to the Modify tab.</p>\n<p><strong>Answer:</strong> The Revit API officially does not support use of the Autodesk.Windows functionality, so you are on your own if you are making use of that.</p>\n<p>As far as I can tell, the UIControlledApplication.CreateRibbonPanel method taking two string arguments allows you to create an own panel in any of the ribbon tabs. Why do you not use that?</p>\n<p>To disable and hide your button, you can make us of an\n\n<a href=\"http://lmgtfy.com/?q=revit+api+building+coder+AvailabilityClassName\">availability class</a>,\n\ni.e. a class implementing the\n\n<a href=\"http://lmgtfy.com/?q=revit+api+building+coder+IExternalCommandAvailability\">IExternalCommandAvailability interface</a> and\n\nthe PushButton.AvailabilityClassName property specifying its name:</p>\n<p>That will allow you to toggle the visibility and availability of your class at will, just as you require.</p>\n<p><strong>Response:</strong> Thanks for the answer. I have found out how to do this using the Autodesk.Windows functionality, but I would rather use the official API. I tried to use the UIControlledApplication.CreateRibbonPanel method, but it does not find the Modify tab. I guess it's not supposed to, or am I using the method incorrectly?</p>\n<p><strong>Answer:</strong> Yes, you are perfectly correct.\nThe Revit API officially only supports adding panels to the Add-Ins and Analyse tabs.</p>\n<p>Sorry for misleading you there, and thank you for checking.</p>\n<p>When you add your own custom Autodesk.Windows.RibbonPanel to the modify tab, are you still able to use the standard Revit API functionality to add buttons etc. to it?</p>\n<p>If not, it will be hard to hook it up properly to your external command...</p>\n<p><strong>Response:</strong> I use the Autodesk.Windows.RibbonButton and the Autodesk.Windows.RibbonPanel classes.\nTo check if a user click button I use this event handler:</p>\n<pre class=\"code\">\n  Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.UIElementActivated\n    += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;\n      Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n        OnUiElementActivated );\n</pre>\n<p>In the OnUIElementActivated method I check if one of my buttons is clicked and use another EventHandler like this:</p>\n<pre class=\"code\">\n  _controlledApp.Idling\n    += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;(\n      OnButtonIdling );\n</pre>\n<p>Finally, in the Idling function, I execute my command and remove the idling event handler.</p>\n<p><strong>Answer:</strong> Oh, I see, you are not defining an external command at all.</p>\n<p>You are just using .NET UI Automation to add a button that the Revit API knows nothing about and capture the click event on it and then passing that information in to your external application working with the Idling event.</p>\n<p>That is very interesting.</p>\n<p>One question: do you observe acceptable performance? I heard rumours that using UI Automation to interact with the Revit ribbon was intolerably slow. Apparently not, if you can make effective use of it.</p>\n<p>One suggestion: I found that the Idling event has very significant drawbacks, mainly due to the fact that Revit provides no possibility to control the frequency of calls. Therefore, I found\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/replacing-an-idling-event-handler-by-an-external-event.html\">using an external event instead of Idling</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/triggering-immediate-external-event-execute.html\">triggering immediate external event execute</a> a\n\nmore effective approach.\nI now basically never recommend use of the Idling event at all, except for one-off call.</p>\n<p>Ah, maybe in your case it is a single call that you are interested in?</p>\n<p><strong>Response:</strong> Yes, I just use one single call, so Idling is the proper solution.</p>\n<p>I have not noticed any performance issues.</p>\n<p><strong>Answer:</strong> One little bit of feedback on your code: TransactionMode does not need to be specified for an external application. It only applies to external commands.</p>\n<p>I implemented a new sample application ModifyTabButton making use of your code, but I do not see the custom panel when I load and run it.</p>\n<p>Oh, I also added a line to break out of the loop once its purpose has been served.</p>\n<p>In the debugger, everything seems to work fine, but nothing appears.</p>\n<p>How does it look for you?</p>\n<p><strong>Response:</strong> Your example works for me. The buttons should only be visible in a 3D view. The only fault I have found is that I cannot see the image on the buttons. We use 16 x 16 ico files and they work fine.</p>\n<p>I found out that _currentView could be null when I run both my own and yours application. There should be a test for this in the setModifyPanelVisible function.</p>\n<p>The modify panel should only be visible in 3d views when an element is selected.</p>\n<p><strong>Answer:</strong> Aha, my button is 64 x 64, so I'll change that then.</p>\n<p>Yes, the problem was that it requires 16 x 16 format to display at this point.</p>\n<p>I looked in the debugger and saw _currentView being set correctly.</p>\n<p>I also discovered that I have to be in a 3D view <b><i>and</i></b> I need to select an element, e.g. a wall.</p>\n<p>It works now!</p>\n<p>I refactored the code a bit to make it easy to add a third button as well, while we are at it.</p>\n<p>Here is the 'My Modify' panel and its three buttons displayed by the ModifyTabButton add-in in the Revit Modify ribbon tab when a wall is selected in a 3D view:</p>\n<center>\n<img alt=\"ModifyTabButton panel displayed in the Revit Modify ribbon tab\" src=\"img/ModifyTabButton_panel.png\" width=\"413\"/>\n</center>\n<p>Clicking any one of the three buttons triggers the sequence of events and handlers described above and displays a message box like this:</p>\n<center>\n<img alt=\"ModifyTabButton command message\" src=\"img/ModifyTabButton_message.png\" width=\"366\"/>\n</center>\n<p>Notes and ideas:</p>\n<ul>\n<li>No availability class</li>\n<li>No Revit API access here! ... in the UI Automation event handlers</li>\n<li>Make a note of elements selected? Identify type, at least?</li>\n</ul>\n<p>Here is the totally trivial button click handler implementation:</p>\n<pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">#endregion</span> <span class=\"green\">// Namespaces</span>\n \n<span class=\"blue\">namespace</span> ModifyTabButton\n{\n  <span class=\"blue\">class</span> <span class=\"teal\">Command</span>\n  {\n    <span class=\"blue\">const</span> <span class=\"blue\">string</span> _prompt =\n      <span class=\"maroon\">\"Button {0} clicked in view '{1}' in document '{2}'.\"</span>;\n \n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> OnButton(\n      <span class=\"blue\">int</span> button_nr,\n      <span class=\"teal\">View</span> view )\n    {\n      <span class=\"teal\">Document</span> doc = view.Document;\n \n      <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n        _prompt, button_nr, view.Name, doc.Title );\n \n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"teal\">App</span>.Caption, msg );\n    }\n  }\n}\n</pre>\n<p>Note that this is a custom command class, not an official Revit API external command.</p>\n<p>Here is the full external application implementation doing all the interesting stuff:</p>\n<pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"green\">// BitmapImage requires PresentationCore</span>\n<span class=\"green\">// System.Windows.Controls requires PresentationFramework</span>\n \n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.IO;\n<span class=\"blue\">using</span> System.Reflection;\n<span class=\"blue\">using</span> System.Windows.Media.Imaging;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Revit.UI.Events;\n \n<span class=\"blue\">#endregion</span> <span class=\"green\">// Namespaces</span>\n \n<span class=\"blue\">namespace</span> ModifyTabButton\n{\n  <span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span> Caption = <span class=\"maroon\">\"ModifyTabButton\"</span>;\n \n    <span class=\"teal\">UIControlledApplication</span> _controlledApp;\n    <span class=\"teal\">View</span> _currentView;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The button that was clicked, 1, 2 or 3.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">int</span> _button_nr;\n \n    Autodesk.Windows.<span class=\"teal\">RibbonPanel</span> _modifyPanel;\n    Autodesk.Windows.<span class=\"teal\">RibbonButton</span> _button1;\n    Autodesk.Windows.<span class=\"teal\">RibbonButton</span> _button2;\n    Autodesk.Windows.<span class=\"teal\">RibbonButton</span> _button3;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Set the visibility of our custom panel</span>\n    <span class=\"gray\">///</span><span class=\"green\"> and its buttons.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> SetCustomPanelVisible( <span class=\"blue\">bool</span> a )\n    {\n      _modifyPanel.IsVisible = a;\n      _button1.IsVisible = a;\n      _button2.IsVisible = a;\n      _button3.IsVisible = a;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Retrieve an embedded resource image</span>\n    <span class=\"gray\">///</span><span class=\"green\"> for the button icons.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">static</span> <span class=\"teal\">BitmapSource</span> GetEmbeddedImage( <span class=\"blue\">string</span> name )\n    {\n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">Assembly</span> a = <span class=\"teal\">Assembly</span>.GetExecutingAssembly();\n        <span class=\"teal\">Stream</span> s = a.GetManifestResourceStream( name );\n        <span class=\"blue\">return</span> <span class=\"teal\">BitmapFrame</span>.Create( s );\n      }\n      <span class=\"blue\">catch</span>\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Create a basic ribbon button with an </span>\n    <span class=\"gray\">///</span><span class=\"green\"> identifying number and an image.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">static</span> Autodesk.Windows.<span class=\"teal\">RibbonButton</span> CreateButton(\n      <span class=\"blue\">int</span> nr,\n      <span class=\"teal\">BitmapSource</span> image )\n    {\n      <span class=\"blue\">string</span> s = nr.ToString();\n \n      Autodesk.Windows.<span class=\"teal\">RibbonButton</span> b\n        = <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonButton</span>();\n \n      b.Name = <span class=\"maroon\">\"_Button\"</span> + s;\n      b.Id = <span class=\"maroon\">\"ID_MYBUTTON\"</span> + s;\n      b.AllowInStatusBar = <span class=\"blue\">true</span>;\n      b.AllowInToolBar = <span class=\"blue\">true</span>;\n      b.GroupLocation = Autodesk.Private.Windows\n        .<span class=\"teal\">RibbonItemGroupLocation</span>.Middle;\n      b.IsEnabled = <span class=\"blue\">true</span>;\n      b.IsToolTipEnabled = <span class=\"blue\">true</span>;\n      b.IsVisible = <span class=\"blue\">false</span>;\n      b.LargeImage = image;\n      b.Image = image;\n      b.ShowImage = <span class=\"blue\">true</span>; <span class=\"green\">//  true;</span>\n      b.ShowText = <span class=\"blue\">true</span>;\n      b.ShowToolTipOnDisabled = <span class=\"blue\">true</span>;\n      b.Text = <span class=\"maroon\">\"Button \"</span> + s;\n      b.ToolTip = <span class=\"maroon\">\"Button \"</span> + s;\n      b.MinHeight = 0;\n      b.MinWidth = 0;\n      b.Size = Autodesk.Windows.<span class=\"teal\">RibbonItemSize</span>.Standard;\n      b.ResizeStyle = Autodesk.Windows\n        .<span class=\"teal\">RibbonItemResizeStyles</span>.HideText;\n      b.IsCheckable = <span class=\"blue\">true</span>;\n      b.Orientation = System.Windows.Controls\n        .<span class=\"teal\">Orientation</span>.Horizontal; <span class=\"green\">// PresentationFramework</span>\n      b.KeyTip = <span class=\"maroon\">\"Button\"</span> + s;\n \n      <span class=\"blue\">return</span> b;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup(\n      <span class=\"teal\">UIControlledApplication</span> a )\n    {\n      _controlledApp = a;\n \n      <span class=\"green\">// Locate and load embedded button images.</span>\n \n      <span class=\"teal\">BitmapSource</span> image = GetEmbeddedImage(\n        <span class=\"maroon\">\"ModifyTabButton.icon.cartoon_house_16.ico\"</span> );\n \n      <span class=\"green\">// Add modify panel</span>\n \n      Autodesk.Windows.<span class=\"teal\">RibbonControl</span> ribbon\n        = Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.Ribbon;\n \n      <span class=\"blue\">foreach</span>( Autodesk.Windows.<span class=\"teal\">RibbonTab</span> tab\n        <span class=\"blue\">in</span> ribbon.Tabs )\n      {\n        <span class=\"blue\">if</span>( tab.Id == <span class=\"maroon\">\"Modify\"</span> )\n        {\n          _modifyPanel = <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonPanel</span>();\n          _modifyPanel.IsVisible = <span class=\"blue\">false</span>;\n \n          Autodesk.Windows.<span class=\"teal\">RibbonPanelSource</span> source\n            = <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonPanelSource</span>();\n \n          source.Name = <span class=\"maroon\">\"mymod\"</span>;\n          source.Id = <span class=\"maroon\">\"mymod\"</span>;\n          source.Title = <span class=\"maroon\">\"My Modify\"</span>;\n          _modifyPanel.Source = source;\n          _modifyPanel.FloatingOrientation\n            = System.Windows.Controls.<span class=\"teal\">Orientation</span>.Vertical;\n \n          _button1 = CreateButton( 1, image );\n          _button2 = CreateButton( 2, image );\n          _button3 = CreateButton( 3, image );\n \n          Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.UIElementActivated\n            += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;\n              Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n                OnUiElementActivated );\n \n          Autodesk.Windows.<span class=\"teal\">RibbonRowPanel</span> rowPanel\n            = <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonRowPanel</span>();\n \n          rowPanel.Items.Add( _button1 );\n          rowPanel.Items.Add( <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonRowBreak</span>() );\n          rowPanel.Items.Add( _button2 );\n          rowPanel.Items.Add( <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonRowBreak</span>() );\n          rowPanel.Items.Add( _button3 );\n \n          _modifyPanel.Source.Items.Add( rowPanel );\n \n          tab.Panels.Add( _modifyPanel );\n \n          tab.Panels.CollectionChanged\n            += <span class=\"blue\">new</span> System.Collections.Specialized\n              .<span class=\"teal\">NotifyCollectionChangedEventHandler</span>(\n                OnCollectionChanged );\n \n          a.ViewActivated\n            += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">ViewActivatedEventArgs</span>&gt;(\n              OnViewActivated );\n \n          <span class=\"blue\">break</span>;\n        }\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown(\n      <span class=\"teal\">UIControlledApplication</span> a )\n    {\n      Autodesk.Windows.<span class=\"teal\">ComponentManager</span>\n        .UIElementActivated -= OnUiElementActivated;\n \n      a.ViewActivated -= OnViewActivated;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> React to Revit view activation.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnViewActivated(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">ViewActivatedEventArgs</span> e )\n    {\n      _currentView = e.CurrentActiveView;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> React to ribbon panel changes, triggered by </span>\n    <span class=\"gray\">///</span><span class=\"green\"> Revit element selection. We have no external</span>\n    <span class=\"gray\">///</span><span class=\"green\"> command, hence no availability class, so we </span>\n    <span class=\"gray\">///</span><span class=\"green\"> use this to hide and show our custom panel.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> We have absolutely no access to the </span>\n    <span class=\"gray\">///</span><span class=\"green\"> Revit API in this method!</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnCollectionChanged(\n      <span class=\"blue\">object</span> sender,\n      System.Collections.Specialized\n        .<span class=\"teal\">NotifyCollectionChangedEventArgs</span> e )\n    {\n      <span class=\"blue\">if</span>( e.NewItems != <span class=\"blue\">null</span> )\n      {\n        <span class=\"blue\">bool</span> visible = ( <span class=\"blue\">null</span> != _currentView )\n          &amp;&amp; ( _currentView <span class=\"blue\">is</span> <span class=\"teal\">View3D</span> );\n \n        SetCustomPanelVisible( visible );\n      }\n      <span class=\"blue\">if</span>( e.OldItems != <span class=\"blue\">null</span> )\n      {\n        SetCustomPanelVisible( <span class=\"blue\">false</span> );\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> React to UI element activation, </span>\n    <span class=\"gray\">///</span><span class=\"green\"> e.g. button click. We have absolutely </span>\n    <span class=\"gray\">///</span><span class=\"green\"> no access to the Revit PI in this method!</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> OnUiElementActivated(\n      <span class=\"blue\">object</span> sender,\n      Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n    {\n      <span class=\"blue\">if</span>( e.Item != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// We could just remember the button id here</span>\n        <span class=\"green\">// and use one single Idling event handler</span>\n        <span class=\"green\">// for both.</span>\n \n        <span class=\"blue\">if</span>( e.Item.Id == <span class=\"maroon\">\"ID_MYBUTTON1\"</span>\n          || e.Item.Id == <span class=\"maroon\">\"ID_MYBUTTON2\"</span>\n          || e.Item.Id == <span class=\"maroon\">\"ID_MYBUTTON3\"</span> )\n        {\n          _button_nr = <span class=\"blue\">int</span>.Parse(\n            e.Item.Id.Substring( 11 ) );\n \n          _controlledApp.Idling\n            += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;(\n              OnButtonIdling );\n        }\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Idling event handler for all buttons.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> This is where we have access to the Revit</span>\n    <span class=\"gray\">///</span><span class=\"green\"> API again.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> OnButtonIdling(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">IdlingEventArgs</span> e )\n    {\n      <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n \n      <span class=\"blue\">if</span>( uiapp != <span class=\"blue\">null</span> )\n      {\n        <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n        <span class=\"teal\">Command</span>.OnButton( _button_nr, uidoc.ActiveView );\n      }\n \n      _controlledApp.Idling -= OnButtonIdling;\n    }\n  }\n}\n</pre>\n<p>The complete ModifyTabButton source code, Visual Studio solution and add-in manifest is provided in the\n\n<a href=\"https://github.com/jeremytammik/ModifyTabButton\">\nModifyTabButton GitHub repository</a>.</p>\n<a name=\"5\"></a>\n<h4>Vacation Time</h4>\n<p>I'm off now.</p>\n<p>Have fun with the Revit API, and enjoy summer!</p>\n<p>Or winter, down under...</p>\n<p>Bye bye!</p>\n</p></p></p></p>"
  },
  {
    "original_filename": "1170_ts_2_modify_tab_button",
    "header_text": "Adding a custom button to the Modify tab",
    "local_header_href": "#adding-a-custom-button-to-the-modify-tab",
    "chunk_text": "<h4>Adding a custom button to the Modify tab</h4><p>In a completely different vein:</p><p>A Revit add-in can only add its commands to the Revit Add-Ins and Analyze ribbon tabs.</p><p>However, if you really need more flexibility, Frode Tørresdal of\n\n<a href=\"http://www.nois.no\">\nNorconsult Informasjonssystemer</a> has\n\na clever and interesting workaround to offer:</p><p>You can add a non-API custom button to any Revit ribbon tab you want using the .NET UI Automation library.</p><p>You can also add an event handler to catch a button click on it.</p><p>Revit will know nothing about it, however, and you cannot use the Revit API in the custom button click event handler.</p><p>You can however subscribe to the Idling event beforehand, send your Idling event handler a message from the button click event handler, use the Revit API in the Idling event handler, and unsubscribe from Idling again.<p>\n<p>Here is a quick demo of ModifyTabButton, a Revit add-in demonstrating how to\n\n<a href=\"https://www.youtube.com/watch?v=LwrBlRrplD8\">\nadd a custom button to the Modify tab and trigger Revit API functionality from it</a>:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"253\" src=\"http://www.youtube.com/embed/LwrBlRrplD8\" width=\"450\"></iframe>\n</center>\n<p>Frode raised the question and provided the solution in the following discussion:</p>\n<p><strong>Question:</strong> I'm trying to add buttons to Revit's modify tab. I retrieve the Autodesk.Windows.RibbonTab with id=\"Modify\" and add a Autodesk.Windows.RibbonPanel to this tab. This seems to work.</p>\n<p>But how do I disable and hide my buttons? I do not want them to show when e.g. placing a wall. I only want them to show when no command is selected or a detail item is selected.</p>\n<p>Also please let me know if there is a better way to add buttons to the Modify tab.</p>\n<p><strong>Answer:</strong> The Revit API officially does not support use of the Autodesk.Windows functionality, so you are on your own if you are making use of that.</p>\n<p>As far as I can tell, the UIControlledApplication.CreateRibbonPanel method taking two string arguments allows you to create an own panel in any of the ribbon tabs. Why do you not use that?</p>\n<p>To disable and hide your button, you can make us of an\n\n<a href=\"http://lmgtfy.com/?q=revit+api+building+coder+AvailabilityClassName\">availability class</a>,\n\ni.e. a class implementing the\n\n<a href=\"http://lmgtfy.com/?q=revit+api+building+coder+IExternalCommandAvailability\">IExternalCommandAvailability interface</a> and\n\nthe PushButton.AvailabilityClassName property specifying its name:</p>\n<p>That will allow you to toggle the visibility and availability of your class at will, just as you require.</p>\n<p><strong>Response:</strong> Thanks for the answer. I have found out how to do this using the Autodesk.Windows functionality, but I would rather use the official API. I tried to use the UIControlledApplication.CreateRibbonPanel method, but it does not find the Modify tab. I guess it's not supposed to, or am I using the method incorrectly?</p>\n<p><strong>Answer:</strong> Yes, you are perfectly correct.\nThe Revit API officially only supports adding panels to the Add-Ins and Analyse tabs.</p>\n<p>Sorry for misleading you there, and thank you for checking.</p>\n<p>When you add your own custom Autodesk.Windows.RibbonPanel to the modify tab, are you still able to use the standard Revit API functionality to add buttons etc. to it?</p>\n<p>If not, it will be hard to hook it up properly to your external command...</p>\n<p><strong>Response:</strong> I use the Autodesk.Windows.RibbonButton and the Autodesk.Windows.RibbonPanel classes.\nTo check if a user click button I use this event handler:</p>\n<pre class=\"code\">\n  Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.UIElementActivated\n    += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;\n      Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n        OnUiElementActivated );\n</pre>\n<p>In the OnUIElementActivated method I check if one of my buttons is clicked and use another EventHandler like this:</p>\n<pre class=\"code\">\n  _controlledApp.Idling\n    += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;(\n      OnButtonIdling );\n</pre>\n<p>Finally, in the Idling function, I execute my command and remove the idling event handler.</p>\n<p><strong>Answer:</strong> Oh, I see, you are not defining an external command at all.</p>\n<p>You are just using .NET UI Automation to add a button that the Revit API knows nothing about and capture the click event on it and then passing that information in to your external application working with the Idling event.</p>\n<p>That is very interesting.</p>\n<p>One question: do you observe acceptable performance? I heard rumours that using UI Automation to interact with the Revit ribbon was intolerably slow. Apparently not, if you can make effective use of it.</p>\n<p>One suggestion: I found that the Idling event has very significant drawbacks, mainly due to the fact that Revit provides no possibility to control the frequency of calls. Therefore, I found\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/replacing-an-idling-event-handler-by-an-external-event.html\">using an external event instead of Idling</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/triggering-immediate-external-event-execute.html\">triggering immediate external event execute</a> a\n\nmore effective approach.\nI now basically never recommend use of the Idling event at all, except for one-off call.</p>\n<p>Ah, maybe in your case it is a single call that you are interested in?</p>\n<p><strong>Response:</strong> Yes, I just use one single call, so Idling is the proper solution.</p>\n<p>I have not noticed any performance issues.</p>\n<p><strong>Answer:</strong> One little bit of feedback on your code: TransactionMode does not need to be specified for an external application. It only applies to external commands.</p>\n<p>I implemented a new sample application ModifyTabButton making use of your code, but I do not see the custom panel when I load and run it.</p>\n<p>Oh, I also added a line to break out of the loop once its purpose has been served.</p>\n<p>In the debugger, everything seems to work fine, but nothing appears.</p>\n<p>How does it look for you?</p>\n<p><strong>Response:</strong> Your example works for me. The buttons should only be visible in a 3D view. The only fault I have found is that I cannot see the image on the buttons. We use 16 x 16 ico files and they work fine.</p>\n<p>I found out that _currentView could be null when I run both my own and yours application. There should be a test for this in the setModifyPanelVisible function.</p>\n<p>The modify panel should only be visible in 3d views when an element is selected.</p>\n<p><strong>Answer:</strong> Aha, my button is 64 x 64, so I'll change that then.</p>\n<p>Yes, the problem was that it requires 16 x 16 format to display at this point.</p>\n<p>I looked in the debugger and saw _currentView being set correctly.</p>\n<p>I also discovered that I have to be in a 3D view <b><i>and</i></b> I need to select an element, e.g. a wall.</p>\n<p>It works now!</p>\n<p>I refactored the code a bit to make it easy to add a third button as well, while we are at it.</p>\n<p>Here is the 'My Modify' panel and its three buttons displayed by the ModifyTabButton add-in in the Revit Modify ribbon tab when a wall is selected in a 3D view:</p>\n<center>\n<img alt=\"ModifyTabButton panel displayed in the Revit Modify ribbon tab\" src=\"img/ModifyTabButton_panel.png\" width=\"413\"/>\n</center>\n<p>Clicking any one of the three buttons triggers the sequence of events and handlers described above and displays a message box like this:</p>\n<center>\n<img alt=\"ModifyTabButton command message\" src=\"img/ModifyTabButton_message.png\" width=\"366\"/>\n</center>\n<p>Notes and ideas:</p>\n<ul>\n<li>No availability class</li>\n<li>No Revit API access here! ... in the UI Automation event handlers</li>\n<li>Make a note of elements selected? Identify type, at least?</li>\n</ul>\n<p>Here is the totally trivial button click handler implementation:</p>\n<pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">#endregion</span> <span class=\"green\">// Namespaces</span>\n \n<span class=\"blue\">namespace</span> ModifyTabButton\n{\n  <span class=\"blue\">class</span> <span class=\"teal\">Command</span>\n  {\n    <span class=\"blue\">const</span> <span class=\"blue\">string</span> _prompt =\n      <span class=\"maroon\">\"Button {0} clicked in view '{1}' in document '{2}'.\"</span>;\n \n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> OnButton(\n      <span class=\"blue\">int</span> button_nr,\n      <span class=\"teal\">View</span> view )\n    {\n      <span class=\"teal\">Document</span> doc = view.Document;\n \n      <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n        _prompt, button_nr, view.Name, doc.Title );\n \n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"teal\">App</span>.Caption, msg );\n    }\n  }\n}\n</pre>\n<p>Note that this is a custom command class, not an official Revit API external command.</p>\n<p>Here is the full external application implementation doing all the interesting stuff:</p>\n<pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"green\">// BitmapImage requires PresentationCore</span>\n<span class=\"green\">// System.Windows.Controls requires PresentationFramework</span>\n \n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.IO;\n<span class=\"blue\">using</span> System.Reflection;\n<span class=\"blue\">using</span> System.Windows.Media.Imaging;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Revit.UI.Events;\n \n<span class=\"blue\">#endregion</span> <span class=\"green\">// Namespaces</span>\n \n<span class=\"blue\">namespace</span> ModifyTabButton\n{\n  <span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span> Caption = <span class=\"maroon\">\"ModifyTabButton\"</span>;\n \n    <span class=\"teal\">UIControlledApplication</span> _controlledApp;\n    <span class=\"teal\">View</span> _currentView;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The button that was clicked, 1, 2 or 3.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">int</span> _button_nr;\n \n    Autodesk.Windows.<span class=\"teal\">RibbonPanel</span> _modifyPanel;\n    Autodesk.Windows.<span class=\"teal\">RibbonButton</span> _button1;\n    Autodesk.Windows.<span class=\"teal\">RibbonButton</span> _button2;\n    Autodesk.Windows.<span class=\"teal\">RibbonButton</span> _button3;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Set the visibility of our custom panel</span>\n    <span class=\"gray\">///</span><span class=\"green\"> and its buttons.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> SetCustomPanelVisible( <span class=\"blue\">bool</span> a )\n    {\n      _modifyPanel.IsVisible = a;\n      _button1.IsVisible = a;\n      _button2.IsVisible = a;\n      _button3.IsVisible = a;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Retrieve an embedded resource image</span>\n    <span class=\"gray\">///</span><span class=\"green\"> for the button icons.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">static</span> <span class=\"teal\">BitmapSource</span> GetEmbeddedImage( <span class=\"blue\">string</span> name )\n    {\n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">Assembly</span> a = <span class=\"teal\">Assembly</span>.GetExecutingAssembly();\n        <span class=\"teal\">Stream</span> s = a.GetManifestResourceStream( name );\n        <span class=\"blue\">return</span> <span class=\"teal\">BitmapFrame</span>.Create( s );\n      }\n      <span class=\"blue\">catch</span>\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Create a basic ribbon button with an </span>\n    <span class=\"gray\">///</span><span class=\"green\"> identifying number and an image.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">static</span> Autodesk.Windows.<span class=\"teal\">RibbonButton</span> CreateButton(\n      <span class=\"blue\">int</span> nr,\n      <span class=\"teal\">BitmapSource</span> image )\n    {\n      <span class=\"blue\">string</span> s = nr.ToString();\n \n      Autodesk.Windows.<span class=\"teal\">RibbonButton</span> b\n        = <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonButton</span>();\n \n      b.Name = <span class=\"maroon\">\"_Button\"</span> + s;\n      b.Id = <span class=\"maroon\">\"ID_MYBUTTON\"</span> + s;\n      b.AllowInStatusBar = <span class=\"blue\">true</span>;\n      b.AllowInToolBar = <span class=\"blue\">true</span>;\n      b.GroupLocation = Autodesk.Private.Windows\n        .<span class=\"teal\">RibbonItemGroupLocation</span>.Middle;\n      b.IsEnabled = <span class=\"blue\">true</span>;\n      b.IsToolTipEnabled = <span class=\"blue\">true</span>;\n      b.IsVisible = <span class=\"blue\">false</span>;\n      b.LargeImage = image;\n      b.Image = image;\n      b.ShowImage = <span class=\"blue\">true</span>; <span class=\"green\">//  true;</span>\n      b.ShowText = <span class=\"blue\">true</span>;\n      b.ShowToolTipOnDisabled = <span class=\"blue\">true</span>;\n      b.Text = <span class=\"maroon\">\"Button \"</span> + s;\n      b.ToolTip = <span class=\"maroon\">\"Button \"</span> + s;\n      b.MinHeight = 0;\n      b.MinWidth = 0;\n      b.Size = Autodesk.Windows.<span class=\"teal\">RibbonItemSize</span>.Standard;\n      b.ResizeStyle = Autodesk.Windows\n        .<span class=\"teal\">RibbonItemResizeStyles</span>.HideText;\n      b.IsCheckable = <span class=\"blue\">true</span>;\n      b.Orientation = System.Windows.Controls\n        .<span class=\"teal\">Orientation</span>.Horizontal; <span class=\"green\">// PresentationFramework</span>\n      b.KeyTip = <span class=\"maroon\">\"Button\"</span> + s;\n \n      <span class=\"blue\">return</span> b;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup(\n      <span class=\"teal\">UIControlledApplication</span> a )\n    {\n      _controlledApp = a;\n \n      <span class=\"green\">// Locate and load embedded button images.</span>\n \n      <span class=\"teal\">BitmapSource</span> image = GetEmbeddedImage(\n        <span class=\"maroon\">\"ModifyTabButton.icon.cartoon_house_16.ico\"</span> );\n \n      <span class=\"green\">// Add modify panel</span>\n \n      Autodesk.Windows.<span class=\"teal\">RibbonControl</span> ribbon\n        = Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.Ribbon;\n \n      <span class=\"blue\">foreach</span>( Autodesk.Windows.<span class=\"teal\">RibbonTab</span> tab\n        <span class=\"blue\">in</span> ribbon.Tabs )\n      {\n        <span class=\"blue\">if</span>( tab.Id == <span class=\"maroon\">\"Modify\"</span> )\n        {\n          _modifyPanel = <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonPanel</span>();\n          _modifyPanel.IsVisible = <span class=\"blue\">false</span>;\n \n          Autodesk.Windows.<span class=\"teal\">RibbonPanelSource</span> source\n            = <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonPanelSource</span>();\n \n          source.Name = <span class=\"maroon\">\"mymod\"</span>;\n          source.Id = <span class=\"maroon\">\"mymod\"</span>;\n          source.Title = <span class=\"maroon\">\"My Modify\"</span>;\n          _modifyPanel.Source = source;\n          _modifyPanel.FloatingOrientation\n            = System.Windows.Controls.<span class=\"teal\">Orientation</span>.Vertical;\n \n          _button1 = CreateButton( 1, image );\n          _button2 = CreateButton( 2, image );\n          _button3 = CreateButton( 3, image );\n \n          Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.UIElementActivated\n            += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;\n              Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span>&gt;(\n                OnUiElementActivated );\n \n          Autodesk.Windows.<span class=\"teal\">RibbonRowPanel</span> rowPanel\n            = <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonRowPanel</span>();\n \n          rowPanel.Items.Add( _button1 );\n          rowPanel.Items.Add( <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonRowBreak</span>() );\n          rowPanel.Items.Add( _button2 );\n          rowPanel.Items.Add( <span class=\"blue\">new</span> Autodesk.Windows.<span class=\"teal\">RibbonRowBreak</span>() );\n          rowPanel.Items.Add( _button3 );\n \n          _modifyPanel.Source.Items.Add( rowPanel );\n \n          tab.Panels.Add( _modifyPanel );\n \n          tab.Panels.CollectionChanged\n            += <span class=\"blue\">new</span> System.Collections.Specialized\n              .<span class=\"teal\">NotifyCollectionChangedEventHandler</span>(\n                OnCollectionChanged );\n \n          a.ViewActivated\n            += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">ViewActivatedEventArgs</span>&gt;(\n              OnViewActivated );\n \n          <span class=\"blue\">break</span>;\n        }\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown(\n      <span class=\"teal\">UIControlledApplication</span> a )\n    {\n      Autodesk.Windows.<span class=\"teal\">ComponentManager</span>\n        .UIElementActivated -= OnUiElementActivated;\n \n      a.ViewActivated -= OnViewActivated;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> React to Revit view activation.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnViewActivated(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">ViewActivatedEventArgs</span> e )\n    {\n      _currentView = e.CurrentActiveView;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> React to ribbon panel changes, triggered by </span>\n    <span class=\"gray\">///</span><span class=\"green\"> Revit element selection. We have no external</span>\n    <span class=\"gray\">///</span><span class=\"green\"> command, hence no availability class, so we </span>\n    <span class=\"gray\">///</span><span class=\"green\"> use this to hide and show our custom panel.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> We have absolutely no access to the </span>\n    <span class=\"gray\">///</span><span class=\"green\"> Revit API in this method!</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnCollectionChanged(\n      <span class=\"blue\">object</span> sender,\n      System.Collections.Specialized\n        .<span class=\"teal\">NotifyCollectionChangedEventArgs</span> e )\n    {\n      <span class=\"blue\">if</span>( e.NewItems != <span class=\"blue\">null</span> )\n      {\n        <span class=\"blue\">bool</span> visible = ( <span class=\"blue\">null</span> != _currentView )\n          &amp;&amp; ( _currentView <span class=\"blue\">is</span> <span class=\"teal\">View3D</span> );\n \n        SetCustomPanelVisible( visible );\n      }\n      <span class=\"blue\">if</span>( e.OldItems != <span class=\"blue\">null</span> )\n      {\n        SetCustomPanelVisible( <span class=\"blue\">false</span> );\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> React to UI element activation, </span>\n    <span class=\"gray\">///</span><span class=\"green\"> e.g. button click. We have absolutely </span>\n    <span class=\"gray\">///</span><span class=\"green\"> no access to the Revit PI in this method!</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> OnUiElementActivated(\n      <span class=\"blue\">object</span> sender,\n      Autodesk.Windows.<span class=\"teal\">UIElementActivatedEventArgs</span> e )\n    {\n      <span class=\"blue\">if</span>( e.Item != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// We could just remember the button id here</span>\n        <span class=\"green\">// and use one single Idling event handler</span>\n        <span class=\"green\">// for both.</span>\n \n        <span class=\"blue\">if</span>( e.Item.Id == <span class=\"maroon\">\"ID_MYBUTTON1\"</span>\n          || e.Item.Id == <span class=\"maroon\">\"ID_MYBUTTON2\"</span>\n          || e.Item.Id == <span class=\"maroon\">\"ID_MYBUTTON3\"</span> )\n        {\n          _button_nr = <span class=\"blue\">int</span>.Parse(\n            e.Item.Id.Substring( 11 ) );\n \n          _controlledApp.Idling\n            += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;(\n              OnButtonIdling );\n        }\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Idling event handler for all buttons.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> This is where we have access to the Revit</span>\n    <span class=\"gray\">///</span><span class=\"green\"> API again.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> OnButtonIdling(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">IdlingEventArgs</span> e )\n    {\n      <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n \n      <span class=\"blue\">if</span>( uiapp != <span class=\"blue\">null</span> )\n      {\n        <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n        <span class=\"teal\">Command</span>.OnButton( _button_nr, uidoc.ActiveView );\n      }\n \n      _controlledApp.Idling -= OnButtonIdling;\n    }\n  }\n}\n</pre>\n<p>The complete ModifyTabButton source code, Visual Studio solution and add-in manifest is provided in the\n\n<a href=\"https://github.com/jeremytammik/ModifyTabButton\">\nModifyTabButton GitHub repository</a>.</p>\n<a name=\"5\"></a>\n<h4>Vacation Time</h4>\n<p>I'm off now.</p>\n<p>Have fun with the Revit API, and enjoy summer!</p>\n<p>Or winter, down under...</p>\n<p>Bye bye!</p>\n</p></p>"
  },
  {
    "original_filename": "1170_ts_2_modify_tab_button",
    "header_text": "Vacation Time",
    "local_header_href": "#vacation-time",
    "chunk_text": "<h4>Vacation Time</h4><p>I'm off now.</p><p>Have fun with the Revit API, and enjoy summer!</p><p>Or winter, down under...</p><p>Bye bye!</p>"
  }
]