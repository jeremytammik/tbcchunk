[
  {
    "original_filename": "0037_editing_floor_profile",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0037_editing_floor_profile",
    "header_text": "Editing a Floor Profile",
    "local_header_href": "#editing-a-floor-profile",
    "chunk_text": "<h3>Editing a Floor Profile</h3><p>A question that recently came up was how to edit an existing floor profile. This also leads to the question of whether one can access the existing sketch lines through the API and modify them.</p><p>In the user interface, one can enter the Floor Edit mode and modify the sketch lines of a floor. In the API, this is not possible. However, it is possible to simply recreate the floor with a new curve array.</p><p>The next question that pops up is how to determine the sketch lines of the existing floor, as a starting point for recreating a new floor with a slightly modified set of sketch lines.</p><p>To recreate a floor from the existing one, one can determine the topmost horizontal face of the floor solid, using an algorithm very similar to the one we looked at for determining the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/slab-boundary.html\">\nslab boundary</a>.\n\nWe can extract the top face edges, create line elements from them to assemble the floor profile, and generate the new floor from that. In case the existing floor has holes in it, the face will have several loops. The largest loop is the outer perimeter. In my tests so far, this was also the first loop in the EdgeArrayArray, but that may not always be true.</p><p>Here is a helper method to extract the topmost face from the solid:</p><pre class=\"code\">\n<span class=\"teal\">PlanarFace</span> GetTopFace( <span class=\"teal\">Solid</span> solid )\n{\n  <span class=\"teal\">PlanarFace</span> topFace = <span class=\"blue\">null</span>;\n  <span class=\"teal\">FaceArray</span> faces = solid.Faces;\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> faces )\n  {\n    <span class=\"teal\">PlanarFace</span> pf = f <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != pf\n      &amp;&amp; <span class=\"teal\">Util</span>.IsHorizontal( pf ) )\n    {\n      <span class=\"blue\">if</span>( (<span class=\"blue\">null</span> == topFace)\n        || (topFace.Origin.Z &lt; pf.Origin.Z) )\n      {\n        topFace = pf;\n      }\n    }\n  }\n  <span class=\"blue\">return</span> topFace;\n}\n</pre><p>Here is the code for the rest of the command:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt; floors = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt;();\n  <span class=\"blue\">if</span>( !<span class=\"teal\">Util</span>.GetSelectedElementsOrAll(\n    floors, doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Floor</span> ) ) )\n  {\n    <span class=\"teal\">Selection</span> sel = doc.Selection;\n    message = ( 0 &lt; sel.Elements.Size )\n      ? <span class=\"maroon\">\"Please select some floor elements.\"</span>\n      : <span class=\"maroon\">\"No floor elements found.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n  }\n\n  <span class=\"blue\">int</span> nNullFaces = 0;\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Face</span>&gt; topFaces = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Face</span>&gt;();\n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Floor</span> floor <span class=\"blue\">in</span> floors )\n  {\n    <span class=\"teal\">GeoElement</span> geo = floor.get_Geometry( opt );\n    <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n    {\n      <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n      <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n      {\n        <span class=\"teal\">PlanarFace</span> f = GetTopFace( solid );\n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == f )\n        {\n          <span class=\"teal\">Debug</span>.WriteLine(\n            <span class=\"teal\">Util</span>.ElementDescription( floor )\n            + <span class=\"maroon\">\" has no top face.\"</span> );\n          ++nNullFaces;\n        }\n        topFaces.Add( f );\n      }\n    }\n  }\n\n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creApp = app.Create;\n  Autodesk.Revit.Creation.<span class=\"teal\">Document</span> creDoc = doc.Create;\n \n  <span class=\"blue\">int</span> i = 0;\n  <span class=\"blue\">int</span> n = topFaces.Count - nNullFaces;\n \n  <span class=\"teal\">Debug</span>.WriteLine( <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} top face{1} found.\"</span>,\n    n, <span class=\"teal\">Util</span>.PluralSuffix( n ) ) );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> topFaces )\n  {\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != f )\n    {\n      <span class=\"teal\">CurveArray</span> profile = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n      <span class=\"teal\">EdgeArrayArray</span> eaa = f.EdgeLoops;\n\n      <span class=\"teal\">EdgeArray</span> ea = eaa.get_Item( 0 );\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> e <span class=\"blue\">in</span> ea )\n      {\n        <span class=\"teal\">XYZArray</span> pts = e.Tessellate();\n        <span class=\"blue\">int</span> m = pts.Size;\n        <span class=\"teal\">XYZ</span> p = pts.get_Item( 0 );\n        <span class=\"teal\">XYZ</span> q = pts.get_Item( m - 1 );\n        <span class=\"teal\">Line</span> line = creApp.NewLineBound( p, q );\n        profile.Append( line );\n      }\n      <span class=\"teal\">Floor</span> floor = floors[i++] <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      floor = creDoc.NewFloor( profile, floor.FloorType, floor.Level, <span class=\"blue\">true</span> );\n      doc.Move( floor, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 5, 5, 0 ) );\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n</pre><p>The first section retrieves selected floors from the current selection set, or all floors from the database, if nothing has been preselected.\nThen the top face of each selected floor is determined by retrieving each floor's solid and calling GetTopFace on it.\nEven if no top face was found, we still store the null result, so that the list of floors and faces match up.\nFinally we go through the array of top faces and create new floors from them.\nBefore creating the new floor, we would obviously apply whatever modifications are required to the new floor profile.\nIn this case, we have no modifications to apply, so the new floor will be identical to the existing one.\nTo differentiate it, we move it away from the original location, five feet up and to the right.\nIn case the original floor had some non-linear edges, these will be replaced by straight ones.\nAll holes will also be lost.\nFrom the EdgeArrayArray instance returned by the face EdgeLoops property, we only make use of the first element, which seems to be the outer perimeter, i.e. boundary.\nHoles seem to be listed later in this array.\nIf this assumption is not true, we would have to iterate over the array and analyse each loop to find the maximum size, which would ensure that is the outer boundary and not an inner hole loop.\n</p><p>Here is a sample floor element before running the command:</p><img alt=\"Floor original\" src=\"img/floor_original.png\"/><p>Here is the original floor and the newly created copy offset from it and lacking holes after running the command:</p><img alt=\"Floor duplicated\" src=\"img/floor_duplicated.png\"/><p>I am adding a new version 1.0.0.11 of the complete Visual Studio solution\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10011.zip\">here</a>,\n\nincluding the new CmdEditFloor and all other commands discussed so far.</p>"
  }
]