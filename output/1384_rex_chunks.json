[
  {
    "original_filename": "1384_rex",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!---\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n11256445 [Revit API Development]\n\n#dotnet #csharp\n#fsharp #python\n#grevit\n#responsivedesign #typepad\n#ah8 #augi #dotnet\n#stingray #rendering\n#3dweb #3dviewapi #html5 #threejs #webgl #3d #apis #mobile #vr #ecommerce\n#Markdown #Fusion360 #Fusion360Hackathon\n#javascript\n#RestSharp #restapi\n#mongoosejs #mongodb #nodejs\n#rtceur\n#geometry #3d\n#xaml\n\nRevit API, Jeremy Tammik, akn_include\n\nREX Add-In Development and Migration #revitapi #bim #aec #3dwebcoder #adsk #RevitStructure #adsklabs\n\n\nIt's been a while since I talked about REX. Some old dedicated posts include\n&ndash; The REX SDK\n&ndash; Extensions for Revit 2012\n&ndash; REX Content Generator.\nMore recent mentions occur in my discussion of a framing cross section analyser with and without REX and its migration to Revit 2015. Now the time has come for another look...\n\n-->"
  },
  {
    "original_filename": "1384_rex",
    "header_text": "REX Add-In Development and Migration",
    "local_header_href": "#rex-add-in-development-and-migration",
    "chunk_text": "### REX Add-In Development and Migration\n\nIt's been a while since I talked about REX.\n\nSome old dedicated posts include:\n\n<!--- 0570 0601 0691 -->\n\n- [The REX SDK](http://thebuildingcoder.typepad.com/blog/2011/04/the-rex-sdk.html)\n- [Extensions for Revit 2012](http://thebuildingcoder.typepad.com/blog/2011/06/extensions-for-revit-2012.html)\n- [REX Content Generator](http://thebuildingcoder.typepad.com/blog/2011/12/rex-content-generator.html)\n\n<!--- 1076 1294 -->\n\nMore recent mentions occur in my discussion of\na [framing cross section analyser with and without REX](http://thebuildingcoder.typepad.com/blog/2013/12/security-framing-cross-section-analyser-and-rex.html) and\nits [migration to Revit 2015](http://thebuildingcoder.typepad.com/blog/2015/03/framing-cross-section-analyser-and-rex-in-revit-2015.html).\n\nNow the time has come for another look, prompted by the following developer query:\n\n**Question:** I am currently working on an API to generate plan views with loads. The API works fine on my machine, it's not super-efficient probably; as I am not an expert about programming (limitations of structural engineers &ndash; sorry), but it does the job.\n\nThe project has been built based on the REX 2014 SDK.\n\nWhen I started the project, I used my personal <!--- Visual Studio --> account, without any subscription, thus I was not entitled to use the advanced settings. This is because I didn't intend to deploy it to the entire company &ndash; however, we are now thinking of doing so.\n\nI had a look at the REX SDK manual and it says that I need the subscription to use the advanced settings.\n\n<!--- Attached, a small document showing the problem I encounter, as per my understanding. -->\n\nIn general, I am not entirely sure about how to finalise the job so I would be very grateful if someone could give me advice on the following:\n\n1. Upgrade the API to newer versions;\n2. Create a custom ribbon palette that is automatically installed when Revit is installed on someone else's machine;\n3. Make sure the add-in goes under that ribbon palette;\n4. Generate an installer EXE file to distribute to the company.\n\nThank you very much in advance.\n\n**Answer:** Congratulations on implementing an add-in that does the job.\n\nI am not familiar with the advanced settings that you mention.\n\n<!--- I also do not see 'attached small document' that you refer to. -->\n\nAs far as I know, all different possible flavours of the Revit and REX APIs are identical, and there is no differentiation whatsoever between different levels of entitlement or access.\n\n<!---\nTherefore, I assume that you are referring to some kind of product feature.\n\nCan you confirm that, please, and maybe clarify exactly what you mean by 'advanced settings'?\n-->\n\nI do not have anything much to suggest regarding your questions on creating an installer, either.\n\nThat is obviously not really related to the Revit or REX APIs.\n\nI have seen various cool examples of installers in several publicly available sample applications, and mentioned some of them now and then on The Building Coder, e.g.,\nfor the [RevitRubyShell](http://thebuildingcoder.typepad.com/blog/2012/07/revitrubyshell-implementation-and-installer.html).\n\nOne way to get official help from Autodesk with you installer is to package your add-in for the [AppStore](https://apps.autodesk.com).\n\nIf you are happy to make it available in public, that would probably be the easiest way to go, and offer lots of possible additional benefits as well.\n\n**Answer II:** This was followed up by a more in-depth answer from the development team:\n\nI assume that user project was built in Visual Studio 2010 for Revit 2014 and now it's planned to have it working in Revit 2016.\n\nIt's possible to update your project to new version by following steps:\n\n1. Install Autodesk Revit 2016.\n2. Install Microsoft Visual Studio 2012 (or later).\n3. Open source project, update all references to 2016 version, e.g., RevitAPI.dll, RevitAPIUI.dll, Autodesk.REX.Framework, etc.\n4. Change target .NET platform version from 4.0 to 4.5.\n5. Update version in settings.xml file\n6. Update version in DirectRevitAccess.cs in the method `currentDomain_AssemblyResolve` replacing \"2014\" by `Autodesk.REX.Framework.REXConfiguration.Control.VersionName`.\n7. Update version in Program.cs in similar way as point 6\n8. Update source code with latest Revit API changes &ndash; the documentation file \"Revit Platform API Changes and Additions.docx\" might be helpful.\n9. Addin manifest file should be placed now in Revit 2016 addins directory.\n\nThere is information about advanced settings in SDK but it means that the end user needs to have the Revit Extensions (subscription only) installed.\n\nIf you would like to have your module working for users without Revit Extensions installed, you need to handle this yourself, for example by creating your own external application.\n\nIn this case you can do everything supported by the Revit API with the ribbon, e.g., create your own ribbon tab, add panels and buttons to it, etc.\n\nThe 'advanced settings' give the ability to integrate the module into the Revit Extension ribbon and create an installation project (Visual Studio 2010 only):\n\n<center>\n<img src=\"img/rex_app_1.png\" alt=\"REX app\" width=\"798\">\n</center>\n\nIt appears that you would like to create your own ribbon.\n\nAnother option is create a new module with 'Support for Exchange' enabled and move all code to that:\n\n<center>\n<img src=\"img/rex_app_2.png\" alt=\"REX app\" width=\"754\">\n</center>\n\nThis will give the possibility to launch the Extension ribbon on computers with or without Revit Extensions with following results:\n\n<center>\n<img src=\"img/rex_app_3.png\" alt=\"REX app\" width=\"710\">\n</center>\n\nThe REX SDK documentation includes a description about how this can be achieved. The new module is also an external application ready to be installed in the ApplicationPlugins directory.\n\nUnfortunately, you have to manage your own deployment and installation using the current Visual Studio deployment projects or some other installation system\nlike [NSIS](http://sourceforge.net/projects/nsis).\n\nI hope this helps.\n\nGood luck and have fun making use of the REX SDK!"
  }
]