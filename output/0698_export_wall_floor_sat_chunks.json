[
  {
    "original_filename": "0698_export_wall_floor_sat",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0698_export_wall_floor_sat",
    "header_text": "Export Walls and Floors to SAT",
    "local_header_href": "#export-walls-and-floors-to-sat",
    "chunk_text": "<h3>Export Walls and Floors to SAT</h3><p>Happy New Year 2012 and welcome back to our explorations of the Revit API!\n\n<p>I had a nice winter break, and I hope you did too.\n\n<p>Let us start again by picking up an idea I recently mentioned for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/export-solid-to-acis.html\">\nexporting a Revit element to an ACIS SAT file</a>.\n\nNow Ishwar Nagwani presents a sample add-in implementing this idea to export all floor and wall elements to individual SAT files.\nIn his words:\n\n<p>Based on Miro's suggestion to create SAT file from individual elements, I wrote a sample to export all wall and floor elements to individual SAT files. \nFor each wall and floor element, all other elements are made temporarily invisible in the current view, and the current view with a single visible wall or floor element is exported to a SAT file.\nThe SAT files are saved in the system defined temp folder.\n\n<p>Note: Do not save the Revit file after export, since the document has been marked dirty due to committing transactions.\n\n<p>Here is Ishwar's code, with some slight editing by me.\nIt defines three methods:\n\n<ul>\n<li>GetAllModelElements retrieves all model elements, which in this case we define as all non-ElementType elements having a valid category with valid material quantities assigned to it.\n<li>CreateSatFileFor, which temporarily hides all other elements and exports an individual floor or wall to SAT.\n<li>Execute, the external command mainline implementation.\n</li></li></li></ul>\n<p>Here is the code for GetAllModelElements to retrieve all visible elements that need to be hidden:\n\n<pre class=\"code\">\n<span class=\"teal\">IList</span>&lt;<span class=\"teal\">Element</span>&gt; GetAllModelElements( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elements = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category\n      &amp;&amp; e.Category.HasMaterialQuantities )\n    {\n      elements.Add( e );\n    }\n  }\n  <span class=\"blue\">return</span> elements;\n}\n</pre>\n<p>This is the main worker method CreateSatFileFor:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> CreateSatFileFor(\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Element</span>&gt; allElements,\n  <span class=\"blue\">string</span> filename_prefix )\n{\n  <span class=\"teal\">Document</span> doc = e.Document;\n \n  <span class=\"green\">// Keep this element visible and </span>\n  <span class=\"green\">// hide all other model elements</span>\n \n  <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n  trans.Start( <span class=\"maroon\">\"Hide Elements\"</span> );\n \n  <span class=\"green\">// Create element set other than current wall/floor </span>\n \n  <span class=\"teal\">ElementSet</span> eset = <span class=\"blue\">new</span> <span class=\"teal\">ElementSet</span>();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> ele <span class=\"blue\">in</span> allElements )\n  {\n    <span class=\"blue\">if</span>( e.Id.IntegerValue != ele.Id.IntegerValue )\n    {\n      <span class=\"blue\">if</span>( ele.CanBeHidden( doc.ActiveView ) )\n        eset.Insert( ele );\n    }\n  }\n \n  <span class=\"green\">// Hide all elements other than current </span>\n  <span class=\"green\">// one in current view</span>\n \n  doc.ActiveView.Hide( eset );\n \n  <span class=\"green\">// Commit the transaction so that </span>\n  <span class=\"green\">// visibility is affected</span>\n \n  trans.Commit();\n \n  <span class=\"green\">// Export the ActiveView containing current </span>\n  <span class=\"green\">// element to SAT file</span>\n \n  <span class=\"teal\">SATExportOptions</span> satExportOptions\n    = <span class=\"blue\">new</span> <span class=\"teal\">SATExportOptions</span>();\n \n  <span class=\"teal\">ViewSet</span> vset = <span class=\"blue\">new</span> <span class=\"teal\">ViewSet</span>();\n  vset.Insert( doc.ActiveView );\n \n  <span class=\"green\">// Get the material information</span>\n \n  <span class=\"teal\">IEnumerator</span>&lt;<span class=\"teal\">Material</span>&gt; mats =\n    e.Materials.Cast&lt;<span class=\"teal\">Material</span>&gt;().GetEnumerator();\n \n  <span class=\"green\">// Get the last material, as walls may </span>\n  <span class=\"green\">// have multiple materials assigned</span>\n \n  <span class=\"teal\">Material</span> mat = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">while</span>( mats.MoveNext() )\n  {\n    mat = mats.Current;\n  }\n \n  <span class=\"green\">// Get temp folder path for saving SAT files</span>\n \n  <span class=\"blue\">string</span> folder = System.IO.<span class=\"teal\">Path</span>.GetTempPath();\n \n  <span class=\"blue\">string</span> filename = filename_prefix\n    + <span class=\"maroon\">\"-\"</span> + e.Id.ToString()\n    + <span class=\"maroon\">\"-\"</span> + mat.Name\n    + <span class=\"maroon\">\"-\"</span> + mat.Id.ToString()\n    + <span class=\"maroon\">\".sat\"</span>;\n \n  doc.Export( folder, filename, vset,\n    satExportOptions );\n \n  <span class=\"green\">// After export make all model elements visible</span>\n \n  trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n  trans.Start( <span class=\"maroon\">\"Unhide Elements\"</span> );\n  doc.ActiveView.Unhide( eset );\n  trans.Commit();\n}\n</pre>\n<p>Finally, here is the Execute mainline collecting the walls and floors and driving the worked method:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"green\">// Get all elements with material </span>\n    <span class=\"green\">// for hiding all except current</span>\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Element</span>&gt; allElements \n      = GetAllModelElements( doc );\n \n    <span class=\"green\">// Process all walls</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> col =\n      <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WhereElementIsNotElementType()\n        .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Walls );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Wall</span> wall <span class=\"blue\">in</span> col )\n    {\n      CreateSatFileFor( wall, allElements, <span class=\"maroon\">\"wall\"</span> );\n    }\n \n    <span class=\"green\">// Process all floors</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Floors );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Floor</span> floor <span class=\"blue\">in</span> col )\n    {\n      CreateSatFileFor( floor, allElements, <span class=\"maroon\">\"floor\"</span> );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">catch</span>\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Error\"</span>, <span class=\"maroon\">\"Could not create SAT Files\"</span> );\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n}\n</pre>\n<p>Here is \n\n<a href=\"zip/ExportToSat.zip\">ExportToSat.zip</a> containing \n\nthe complete source code, Visual Studio solution and add-in manifest of this external command.\n\n<p>Many thanks to Ishwar for putting together and sharing this!\n</p></p></p></p></p></p></p></p></p></p></p>"
  }
]