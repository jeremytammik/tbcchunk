[
  {
    "original_filename": "1845_raycast_linked",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- The “What is Forge” introduction video is now live on YouTube!\n\n- Using ReferenceIntersector in Linked Files\n  https://forums.autodesk.com/t5/revit-api-forum/using-referenceintersector-in-linked-files/m-p/9516302/thread-id/47142\n\n- programming for Robobat\n  email Pawel Czepiec <Pawel.Czepiec@autodesk.com> RE: 16540602 : Robot Structural Analysis Professional 2020 Generic\n\n- open RVT file managed by BIM360\n\ntwitter:\n\nForge in 90 seconds, locally opening an RVT file managed by BIM360, programming tools for Robobat and using ReferenceIntersector in linked files in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://bit.ly/raytracelinked\n\nHere are our topics for today\n&ndash; What is Forge in 90 seconds\n&ndash; Locally opening RVT file managed by BIM360\n&ndash; Programming tools for Robobat\n&ndash; Using <code>ReferenceIntersector</code> in linked files...\n\nlinkedin:\n\nForge in 90 seconds, locally opening an RVT file managed by BIM360, programming tools for Robobat and using ReferenceIntersector in linked files in the #RevitAPI \n\nhttps://bit.ly/raytracelinked\n\nHere are our topics for today:\n\n- What is Forge in 90 seconds\n- Locally opening RVT file managed by BIM360\n- Programming tools for Robobat\n- Using <code>ReferenceIntersector</code> in linked files...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1845_raycast_linked",
    "header_text": "Using ReferenceIntersector with a Linked File",
    "local_header_href": "#using-referenceintersector-with-a-linked-file",
    "chunk_text": "### Using ReferenceIntersector with a Linked File\n\nHere are our topics for today:\n\n- [What is Forge in 90 seconds](#2)\n- [Locally opening RVT file managed by BIM360](#3)\n- [Programming tools for Robobat](#5)\n- [Using `ReferenceIntersector` in linked files](#5)"
  },
  {
    "original_filename": "1845_raycast_linked",
    "header_text": "What is Forge in 90 Seconds",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> What is Forge in 90 Seconds\n\nA new quick, high-level, non-technical overview of [Autodesk Forge](https://forge.autodesk.com) is\nnow available on YouTube, the 90-second [*What is Forge* introduction video](https://youtu.be/LvtwXf0AgME).\nThis short introduction showcases the endless possibilities and some innovative solutions and workflows built with it.\nFeatured footage includes demos from Moicon, CADshare, Xinaps, Project Frog, and InsiteVR."
  },
  {
    "original_filename": "1845_raycast_linked",
    "header_text": "Locally Opening RVT File Managed by BIM360",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Locally Opening RVT File Managed by BIM360\n\n**Question:** How can I open an RVT file managed by BIM360 locally using the Revit API, e.g., using `OpenAndActivateDocument`?\n\n**Answer:** What exactly do you mean by *RVT file managed by BIM 360 locally*?\n\nIs the file stored in *%localappdata%\\autodesk\\revit\\CollboarationCache*, coming from RCM?\n\n**Response:** I am using BIM360 to manage the RVT file.\nI would now like to add some local processing using full Revit plus my custom add-in.\nOf course, I could use the [Forge Data Management API](https://forge.autodesk.com/api/data-management-cover-page/) to\ndownload it, but I hope there is some way to achieve this directly using the Revit API.\n\n**Answer:** Currently, Revit only supports opening RCM-based cloud models.\nRevit doesn’t yet support opening files directly uploaded to BIM360.\n\n**Response:** What if the file was uploaded to BIM360 via RCW?\n\nDoes the Revit API provide access to it then?\n\n**Answer:** If the file was uploaded to BIM360 via RCW, officially termed as Initiate, and only accessible through the Revit UI and API, then yes, it can be opened via `OpenAndActivateDocument`.\n\nHere is a documentation on [opening a BIM360 file in Design Automation](https://stackoverflow.com/questions/61098804/autodesk-forge-design-automation-error-opening-a-model-how-to-bypass-dialog/61101203#61101203); note that this file is an eTransmitted Workshared file.\n\nIf DA is not an option here, the right overload of to use in the Revit API is the `UIApplication` method `OpenAndActivateDocument` taking the arguments `ModelPath`, `OpenOptions`, `Boolean` and `IOpenFromCloudCallback`.\n\nYou will also have to call the `ModelPathUtils` method `ConvertCloudGUIDsToCloudPath` taking `String`, `Guid`, `Guid` first.\nThe two guids are the project id and model id used by RCM to identify the project and model.\nFor an example, please refer to the discussion\non [how to get project Guid and model Guid from `PathName`](https://stackoverflow.com/questions/51370445/how-to-get-project-guid-and-model-guid-from-pathname)."
  },
  {
    "original_filename": "1845_raycast_linked",
    "header_text": "Programming Tools for Robobat",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Programming Tools for Robobat\n\n**Question:** I would like to program using the Robobat API.\n\nThe documentation in RSA 2020 suggests using Visual Studio 2008.\nThe current version of Visual Studio is 2020.\n\nCan you confirm what version of Visual Studio I can use for programming the Robobat API?\n\n**Answer:** The Robot SDK can be installed from any version the standard Robot Structural Analysis installer.\n\nSelect *Tools and Utilities* followed by *Autodesk Robot Structural Analysis Professional SDK*.\n\nThe SDK includes the document *Getting Started Guide Robot API.pdf* with  information about Visual Studio.\n \nThe statement about VS 2008 should be more precise and should in fact suggest VS2008 and all later versions.\n \nA few other things worth knowing:\n\n- Starting from RSA 2012 all projects need to be compiled in x64 version\n- You can use any programming language you like that supports .NET \n- RSA 2020 uses the .NET Framework 4.7\n- RSA 2021 uses the .NET Framework 4.8"
  },
  {
    "original_filename": "1845_raycast_linked",
    "header_text": "Using ReferenceIntersector in Linked Files",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Using ReferenceIntersector in Linked Files\n\nDiving in a bit deeper into the Revit API,\n[Ilia Ivanov](https://www.linkedin.com/in/ilya-ivanov-298997161/?locale=en_US) shares a nice example\nof [using `ReferenceIntersector` in linked files](https://forums.autodesk.com/t5/revit-api-forum/using-referenceintersector-in-linked-files/m-p/9516302):\n\nI faced the problem of how to use a `ReferenceIntersector` with `RevitLinkInstance` elements.\n\nI achieved a solution using filters etc. that works rather well and I would like to share with the community.\n\nMy task was to add opening family instances to each wall intersected by a crossing pipe.\nI decided to implement that using `IUpdater`.\nMy solution worked well with non-linked walls, using filters to make the `ReferenceIntersector` find only walls.\nHowever, when I started preparing the solution for linked walls, I faced a problem: references from the list `ReferenceWithContext` contain the id of a `RevitLinkInstance` and not the id of the target wall, so I couldn't gather the linked walls. \n\nI looked through the post\non [using `ReferenceIntersector` in linked files](https://thebuildingcoder.typepad.com/blog/2015/07/using-referenceintersector-in-linked-files.html) and\nfound that we can't get the references from a linked file.\n\nDebugging my code further, I realized a solution.\nThe `Reference` class has a property `LinkedElementId`.\nGiven a `RevitLinkInstance` and the property of the element in the linked file we can retrieve the element in the linked file.\nBut, when my pipe crosses the linked wall, the `ReferenceWithContext` list  contains some amount of elements with the same ids (LinkedElementId, Id), maybe because it also gathers geometry like faces etc.\nTo distinguish the values in this list, I had to create a custom `EqualityCompare`.\n\nFinally, the code worked perfectly.\n\nBelow is the method to gather count of intersected walls.\n\nNote that you need to run it in a 3D view without section boxes achieve good results.\n\n<pre class=\"code\">\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;GetWalls(&nbsp;<span style=\"color:#2b91af;\">UIDocument</span>&nbsp;uidoc&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;pipeRef&nbsp;=&nbsp;uidoc.Selection.PickObject(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ObjectType</span>.Element&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;pipeElem&nbsp;=&nbsp;doc.GetElement(&nbsp;pipeRef&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">LocationCurve</span>&nbsp;lc&nbsp;=&nbsp;pipeElem.Location&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">LocationCurve</span>;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Curve</span>&nbsp;curve&nbsp;=&nbsp;lc.Curve;\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">ReferenceComparer</span>&nbsp;reference1&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReferenceComparer</span>();\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementFilter</span>&nbsp;filter&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementCategoryFilter</span>(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Walls&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;collector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Func</span>&lt;<span style=\"color:#2b91af;\">View3D</span>,&nbsp;<span style=\"color:blue;\">bool</span>&gt;&nbsp;isNotTemplate&nbsp;=&nbsp;v3&nbsp;=&gt;&nbsp;!(v3.IsTemplate);\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">View3D</span>&nbsp;view3D&nbsp;=&nbsp;collector\n&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">View3D</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.Cast&lt;<span style=\"color:#2b91af;\">View3D</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;.First&lt;<span style=\"color:#2b91af;\">View3D</span>&gt;(&nbsp;isNotTemplate&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">ReferenceIntersector</span>&nbsp;refIntersector&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReferenceIntersector</span>(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter,&nbsp;<span style=\"color:#2b91af;\">FindReferenceTarget</span>.Element,&nbsp;view3D&nbsp;);\n \n&nbsp;&nbsp;refIntersector.FindReferencesInRevitLinks&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">ReferenceWithContext</span>&gt;&nbsp;referenceWithContext&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;refIntersector.Find(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve.GetEndPoint(&nbsp;0&nbsp;),&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(curve&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>).Direction&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">Reference</span>&gt;&nbsp;references&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;referenceWithContext\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Select(&nbsp;p&nbsp;=&gt;&nbsp;p.GetReference()&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Distinct(&nbsp;reference1&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;p&nbsp;=&gt;&nbsp;p.GlobalPoint.DistanceTo(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curve.GetEndPoint(&nbsp;0&nbsp;)&nbsp;)&nbsp;&lt;&nbsp;curve.Length&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToList();\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">Element</span>&gt;&nbsp;walls&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Element</span>&gt;();\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;reference&nbsp;<span style=\"color:blue;\">in</span>&nbsp;references&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">RevitLinkInstance</span>&nbsp;instance&nbsp;=&nbsp;doc.GetElement(&nbsp;reference&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">RevitLinkInstance</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;linkDoc&nbsp;=&nbsp;instance.GetLinkDocument();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;element&nbsp;=&nbsp;linkDoc.GetElement(&nbsp;reference.LinkedElementId&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;walls.Add(&nbsp;element&nbsp;);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">TaskDialog</span>.Show(&nbsp;<span style=\"color:#a31515;\">&quot;Count&nbsp;of&nbsp;wall&quot;</span>,&nbsp;walls.Count.ToString()&nbsp;);\n}\n \n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">ReferenceComparer</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IEqualityComparer</span>&lt;<span style=\"color:#2b91af;\">Reference</span>&gt;\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;Equals(&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;x,&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;y&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;x.ElementId&nbsp;==&nbsp;y.ElementId&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;x.LinkedElementId&nbsp;==&nbsp;y.LinkedElementId&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;GetHashCode(&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;obj&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;hashName&nbsp;=&nbsp;obj.ElementId.GetHashCode();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;hashId&nbsp;=&nbsp;obj.LinkedElementId.GetHashCode();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;hashId&nbsp;^&nbsp;hashId;\n&nbsp;&nbsp;}\n}\n</pre>\n\nUnfortunately, no time to add comments to the code.\n\nHope it may help somebody.\n\nHere is [reference_intersector_in_linked_files.zip](zip/reference_intersector_in_linked_files.zip) containing\na sample project with a macro to test.\n\nIt includes two Revit files:\n\n- Architectural link.rvt\n- CountOfLinkedWalls.rvt\n\nThe latter hosts the former as a linked file and contains a macro module named `CountOfIntersectedWalls` defining the method `GetWalls` listed above:\n\n<center>\n<img src=\"img/reference_intersector_in_linked_files.png\" alt=\"ReferenceIntersector in linked files\" title=\"ReferenceIntersector in linked files\" width=\"327\"/>\n</center>\n\nIn case of need, here is also a code snippet to get a `StableRepresentation` for a linked wall's exterior face:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;GetFaceRefRepresentation(&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Wall</span>&nbsp;wall,&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">RevitLinkInstance</span>&nbsp;instance&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;faceRef&nbsp;=&nbsp;<span style=\"color:#2b91af;\">HostObjectUtils</span>.GetSideFaces(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;wall,&nbsp;<span style=\"color:#2b91af;\">ShellLayerType</span>.Exterior&nbsp;).FirstOrDefault();\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;stRef&nbsp;=&nbsp;faceRef.CreateLinkReference(&nbsp;instance&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;stable&nbsp;=&nbsp;stRef.ConvertToStableRepresentation(&nbsp;doc&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;stable;\n}\n</pre>\n\nMany thanks to Ilia for this nice solution and very helpful explanation!\n\nAdded to [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples) \n[release 2021.0.148.2](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2021.0.148.2)."
  }
]