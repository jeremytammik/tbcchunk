[
  {
    "original_filename": "0301_detail_curve_level",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0301_detail_curve_level",
    "header_text": "Detail Curve on Level",
    "local_header_href": "#detail-curve-on-level",
    "chunk_text": "<h3>Detail Curve on Level</h3><p>In the past, we discussed \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/detail-lines.html\">\ndetail curve creation</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/model-and-detail-curve-colour.html\">\nmodifying their colour</a>.\n\nSeveral parties including \n\n<!-- http://thebuildingcoder.typepad.com/blog/2008/12/linked-files.html?cid=6a00e553e1689788330120a7f65ac4970b#comment-6a00e553e1689788330120a7f65ac4970b -->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/linked-files.html?cid=6a00e553e168978833012876fee5bf970c#comment-6a00e553e168978833012876fee5bf970c\">\nShifali</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/08/the-revit-sdk-c.html?cid=6a00e553e1689788330120a555869e970c#comment-6a00e553e1689788330120a555869e970c\">\nDharanidharan</a> inquired \n\nabout creating detail curves on a specified level.\nHere is a solution to that issue by Joe Ye.\n\n<p><strong>Question:</strong> I am using the following code to draw some circles using arcs: \n\n<pre class=\"code\">\n  <span class=\"teal\">XYZ</span> p = <span class=\"teal\">XYZ</span>.Zero;\n  <span class=\"teal\">XYZ</span> norm = <span class=\"teal\">XYZ</span>.BasisZ;\n  <span class=\"blue\">double</span> startAngle = 0;\n  <span class=\"blue\">double</span> endAngle = 2 * <span class=\"teal\">Math</span>.PI;\n  <span class=\"blue\">double</span> radius = 1.23;\n \n  <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( norm, p );\n \n  <span class=\"teal\">Arc</span> arc = app.Create.NewArc(\n    plane, radius, startAngle, endAngle );\n \n  <span class=\"teal\">DetailArc</span> detailArc\n    = doc.Create.NewDetailCurve(\n      doc.ActiveView, arc ) <span class=\"blue\">as</span> <span class=\"teal\">DetailArc</span>;\n</pre>\n<p>This code draws an arc in the active level of the active view. \nI would like to specify the level as a parameter and draw the arc on that level independently of the current active level. \nIn the code above, I am setting the Z coordinate to the height of the level, hoping the curves will be drawn on the desired level. \nInstead, they are drawn on the active level of the active view of the document. \nIs there any way to draw the arcs on a specified level independent of the current active level? \n\n<p><strong>Answer:</strong> You just need to set the first argument of the NewDetailCurve method to the specific level ViewPlan. \nFor example, to draw an arc on Level 2, first find the ViewPlan instance associated with that level. \nTo find the target view plan, you can iterate over all ViewPlan instances and check their GenLevel property.\nIf it matches the desired target level, this is the one we need.   \nHere is some sample code illustrating this:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> Autodesk.Revit;\n<span class=\"blue\">using</span> Autodesk.Revit.Elements;\n<span class=\"blue\">using</span> Autodesk.Revit.Geometry;\n \n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RevitCommand</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">Application</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n    <span class=\"green\">// Create an arc on the plane whose </span>\n    <span class=\"green\">// center is at the plane origin:</span>\n \n    <span class=\"teal\">XYZ</span> end0 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 1 );\n    <span class=\"teal\">XYZ</span> end1 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 1, 3, 2 );\n    <span class=\"teal\">XYZ</span> norm;\n \n    <span class=\"blue\">if</span>( end0.X == end1.X )\n    {\n      norm = <span class=\"teal\">XYZ</span>.BasisZ;\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span> ( end0.Y == end1.Y )\n    {\n      norm = <span class=\"teal\">XYZ</span>.BasisZ;\n    }\n    <span class=\"blue\">else</span>\n    {\n      norm = <span class=\"teal\">XYZ</span>.BasisZ;\n    }\n \n    <span class=\"blue\">double</span> startAngle = 0;\n    <span class=\"blue\">double</span> endAngle = 2 * <span class=\"teal\">Math</span>.PI;\n    <span class=\"blue\">double</span> radius = 5;\n \n    <span class=\"teal\">Plane</span> objPlane \n      = app.Create.NewPlane( norm, <span class=\"teal\">XYZ</span>.Zero );\n \n    <span class=\"green\">// ViewPlan of \"Level 2\"</span>\n \n    <span class=\"teal\">ViewPlan</span> vp2 = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">ElementIterator</span> ei \n      = doc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewPlan</span> ) );\n \n    <span class=\"blue\">while</span>( ei.MoveNext() )\n    {\n      <span class=\"teal\">ViewPlan</span> vp = ei.Current <span class=\"blue\">as</span> <span class=\"teal\">ViewPlan</span>;\n \n      <span class=\"blue\">if</span>( vp.GenLevel.Name.Equals( <span class=\"maroon\">\"Level 2\"</span> ) )\n      {\n        vp2 = vp;\n        <span class=\"blue\">break</span>;\n      }\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == vp2 )\n    {\n      vp2 = doc.ActiveView <span class=\"blue\">as</span> <span class=\"teal\">ViewPlan</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != vp2 )\n    {\n      <span class=\"green\">// draw the circle:</span>\n \n      <span class=\"teal\">Arc</span> arc = app.Create.NewArc( objPlane,\n        radius, startAngle, endAngle );\n \n      <span class=\"teal\">DetailArc</span> detailArc\n        = doc.Create.NewDetailCurve(\n          vp2, arc ) <span class=\"blue\">as</span> <span class=\"teal\">DetailArc</span>;\n    }\n    <span class=\"blue\">return</span> (<span class=\"blue\">null</span> == vp2)\n      ? <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Failed\n      : <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>Another point I would like to mention:\nI noticed in your code that you create the Plane instance using one of its constructor member methods.\nThis works fine as long as you are not working in VSTA. \nYou can also use the dedicated Autodesk.Revit.Creation.Application method NewPlane to create the plane object. \nUV and XYZ instances can also be created both ways, either using their constructor member methods or dedicated creation application methods.\nIf you are working in VSTA, you have to use the application creation methods, because the constructors will not work.\n\n<p>For completeness sake, here is the complete \n\n<a href=\"zip/detail_curve_level.zip\">\ndetail_curve_level</a> source code and Visual Studio solution.\nMany thanks to Joe for providing it!\n</p></p></p></p></p></p>"
  }
]