[
  {
    "original_filename": "1954_batch_snip_selfsign",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- Revit 2023: Parameters Service\n  https://youtu.be/cRz7kQz88mA\n  2:36 video\n  Manage your parameters library more efficiently across projects and locations using the Parameters Service with Revit and the Autodesk Construction Cloud\n\n- 2023 parameters:\n  Jesika DiGregorio\n  This post is part of my ongoing effort to be proactively prepared for the transition from BuiltInParameter to the ForgeTypeId equivalent ParameterTypeId.\n  I have a few questions about how modifications to the ParameterTypeId will be documented. I am trying to ensure that if I reference a particular parameter by ParameterTypeId I can track when I need to handle a change between Revit versions and the new value that should be used, as well as write code to translate serialization that may have been generated by a different version of Revit.\n  1. Currently when a BuiltInParameter value is renamed I can easily tell by comparing the enumeration between 2 versions and seeing that two values with the same numeric value have a different enumeration value. The ParameterTypeId doesn't have a corresponding value that can help track renames and there is currently no note in the summary indicating it was renamed. What technique should we use to correlate such a change between Revit versions and now that it was a rename rather than a drop and add?\n  Example:\n  * 2022 Revit: \"Electrial Load Zone Type\" \n  RBS_ELECTRICAL_LOAD_ZONE_TYPE = -1153533 \n  ParameterTypeId.RbsElectricalLoadZoneType\n  * December Preview Build: \"Area Based Load Type\" \n  RBS_AREA_BASED_LOAD_TYPE = -1153533 \n  ParameterTypeId.RbsAreaBasedLoadType\n  2. BuiltInParameter has a few \"equivalents\", values with different names but the same numeric values. Will ParameterTypeId have a similar implementation in the future? In the December Preview Build, it appears that the ParameterTypeId references were renamed in the cases where an equivalent was added to BuiltInParameter for that value.\n  Example:\n  * Revit 2022: \"Spot Top Elevation with Insulation\"\n  FABRICATION_SPOT_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART = -1140985\n  ParameterTypeId.FabricationSpotTopElevationIncludeInsulationOfPart\n  * December Preview Build: \"Spot Top of Insulation Elevation\"\n  FABRICATION_SPOT_TOP_ELEVATION_INCLUDE_INSULATION_OF_PART = -1140985\n  MEP_SPOT_TOP_ELEVATION_INCLUDE_INSULATION = -1140985\n  ParameterTypeId.MepSpotTopElevationIncludeInsulation\n  3. If I have an older (from 2022) ForgeTypeId.TypeId value stored for a ParameterTypeId that has been renamed in the new version, will the new version of Revit know that it is equivalent to the one with the new name? \n  Specifically using the old value to create a ForgeTypeId and then either comparing it to one retrieved from a parameter definition using NameEquals(ForgeTypeId other) or use it to call Element.GetParameter(ForgeTypeId parameterTypeId)? \n  I understand the the older version of Revit won't know, but only having one direction to manage is better than both.\n  Dec 22, 2021 @ 3:30 PM\t \n  David Becroft\n  The Factory\n  Unified Parameters Service - INTERNAL\n  Good morning Jesika, these are great questions, and a Happy New Year to you! You've nailed it, and I hope the rest of my answer won't bum you out too much. Because of the issues you describe, only the ElementId will identify a built-in parameter consistently across Revit versions. The ForgeTypeId string of a built-in parameter is generated from the parameter's symbolic identifier. In your first example, the symbolic identifier changes from one release to the next. In your second example, a new symbolic identifier is introduced and the original one is treated as an alias, but only the new one produces a ForgeTypeId string. To recover the underlying ElementId from a ForgeTypeId string, use [code]ParameterUtils.GetBuiltInParameter(ForgeTypeId)[/code]. For the opposite conversion, use [code]ParameterUtils.GetParameterTypeId(BuiltInParameter)[/code]. \n  To your third question: No, Revit does not know that the old and new ForgeTypeId strings correspond to the same ElementId. [code]ForgeTypeId.NameEquals(ForgeTypeId)[/code] behaves the same way as the default equality comparison operator for ForgeTypeId objects; it simply compares the strings inside the two ForgeTypeId objects while ignoring their version numbers. [code]Element.GetParameter(ForgeTypeId)[/code] maps the given ForgeTypeId to its corresponding ElementId before searching for the matching parameter, but it does not have a record of legacy ForgeTypeId strings for built-in parameters.\n  Jan 4, 2022 @ 9:46 AM\n\n- tired of struggling with the Revit add-in security warning about an unsigned add-in saying, the publisher of this add-in could not be verified?\nKONRAD SOBON of [archi+lab](https://archi-lab.net) explains how\nto [Create a Self-signed Code Signing Certificate](https://archi-lab.net/creating-a-self-signed-code-signing-certificate) for free, valid for the next 17 years or so:\n> ... <i>[detailed explanation]</i> ... That’s it! That should create your PFX file that you can now use with signtool, and code sign your Revit plugins for free! This self-signed code signing certificate won’t expire for another 17 years so you should be good to go for a while.\nNow, be aware of the fact that this self-signed code signing certificate is not the same as one issued to you by a 3rd party. I guess the level of “trust” here would be a little different, but in this particular case, I don’t think it matters to me. I am fed up with paying money to companies that have just atrocious customer support. If you are using these code signing certificates literally to just sign Revit plugins, then there is no reason to obtain one from a 3rd party and pay a hefty price for it on top of all the hoops that they will make you jump through.\nI hope this helps some of the AEC development community out there save some money and time.\n\n- main discussion forumthread on resolving this + other threads\n\n- thesde threads mentioined before?\n\n- code snippets\nMaycon Freitas\nArchitect | Dynamo, Revit API Developer & Forge Enthusiast | Blossom Consult\nMaycon Freitas  5:23 PM\n\nHi Jeremy, how are you?\nI'm creating this repository on github to share Revit API code snippets with our Revit developers community.\nIf you're interested in contributing somehow, I would really appreciate.\nThe idea is to create an open source project to help developers to improve coding performance.\nBest regards,\nMaycon Freitas.\n\nhttps://youtu.be/moD7CYUkJHw\n\nRevitAPISnippets: 170+ code lines in 2 minutes (Revit API)\n\n18 May 2022\nAn example of the use of Revit API snippet codes in Visual Studio.\nUsing snippets to improve coding performance in Revit API development.\n\nGithub Repo:\n\nhttps://github.com/mayconrfreitas/RevitAPISnippets\n\nDevelop Branch with the snippets:\n\nhttps://github.com/mayconrfreitas/RevitAPISnippets/tree/develop/Snippets/RevitAPI2020\n\n- batch processing and monitoring progress\n  Way to check if family is corrupt\n  https://forums.autodesk.com/t5/revit-api-forum/way-to-check-if-family-is-corrupt/m-p/11174180\n\ntwitter:\n\nTest run the Revit 2023 parameters service cloud, rolling your own verified publisher, Revit API code snippet repository, batch processing and monitoring progress in the #RevitAPI SDK @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/paramcloud\n\nTest run the Revit 2023 parameters service cloud\n&ndash; Roll your own verified publisher\n&ndash; Revit API code snippet repository\n&ndash; Batch processing and monitoring progress...\n\nlinkedin:\n\nTest run the Revit 2023 parameters service cloud, rolling your own verified publisher, Revit API code snippet repository, batch processing and monitoring progress in the #RevitAPI \n\nhttps://autode.sk/paramcloud\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1954_batch_snip_selfsign",
    "header_text": "Parameters, Snippets, Batch Mode and Self-Signing",
    "local_header_href": "#parameters-snippets-batch-mode-and-self-signing",
    "chunk_text": "### Parameters, Snippets, Batch Mode and Self-Signing\n\nPicking up some specially interesting topics from\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) and\nelsewhere:\n\n- [Revit 2023 parameters service cloud](#2)\n- [Roll your own verified publisher](#3)\n- [Reset the unsigned add-in security warning](#3b)\n- [Remove the code signing certificate](#3c)\n- [Revit API code snippet repository](#4)\n- [Batch processing and monitoring progress](#5)"
  },
  {
    "original_filename": "1954_batch_snip_selfsign",
    "header_text": "Revit 2023 Parameters Service Cloud",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Revit 2023 Parameters Service Cloud\n\nIn Revit 2023, a new cloud-based parameters service is under evaluation.\n\nLearn all about it in the two-and-a-half-minute video\non [Revit 2023 Parameters Service](https://youtu.be/cRz7kQz88mA).\n\n> Manage your parameters library more efficiently across projects and locations using the Parameters Service with Revit and the Autodesk Construction Cloud...\n\nIt’s currently in a preview phase with no API, yet.\nAPI support will presumably be coming along after the evaluation phase."
  },
  {
    "original_filename": "1954_batch_snip_selfsign",
    "header_text": "Roll Your Own Verified Publisher",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Roll Your Own Verified Publisher\n\nAre you getting tired of struggling with the Revit add-in security warning about an unsigned add-in saying, *the publisher of this add-in could not be verified*?\n\nKonrad Sobon of [archi+lab](https://archi-lab.net) explains how\nto [create a self-signed code signing certificate](https://archi-lab.net/creating-a-self-signed-code-signing-certificate) for yourself for free:\n\n> ... <i>[detailed explanation]</i> ... That’s it!\nThat should create your PFX file that you can now use with signtool, and code sign your Revit plugins for free!\nThis self-signed code signing certificate won’t expire for another 17 years so you should be good to go for a while.\nNow, be aware of the fact that this self-signed code signing certificate is not the same as one issued to you by a 3rd party.\nI guess the level of “trust” here would be a little different, but in this particular case, I don’t think it matters to me.\nI am fed up with paying money to companies that have just atrocious customer support.\nIf you are using these code signing certificates literally to just sign Revit plugins, then there is no reason to obtain one from a 3rd party and pay a hefty price for it on top of all the hoops that they will make you jump through.\nI hope this helps some of the AEC development community out there save some money and time.\n\nThank you very much, Konrad for digging in so deep and sharing this very helpful approach!\n\nFor the sake of completeness, you can also check out\nKonrad's previous post on [code signing of your Revit plug-ins](http://archi-lab.net/code-signing-of-your-revit-plug-ins),\nthe main [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [Code signing of Revit Addins](https://forums.autodesk.com/t5/revit-api-forum/code-signing-of-revit-addins/m-p/5981560)\nand previous articles on this by The Building Coder:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2016/04/whats-new-in-the-revit-2017-api.html#2.4\">What's New in the Revit 2017 API &ndash; Code signing of Revit Addins</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2016/09/trusted-signature-motivation-and-fishing.html#2\">How Does Code Signing of Revit Add-Ins Increase Security?</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2020/09/code-signing-preview-and-element-type-predicates.html#2\">Revit Add-In Code Signing YAML</a> to automate code signing in CI</li>\n</ul>\n\n####<a name=\"3b\"></a> Reset the Unsigned Add-In Security Warning\n\nIf, on the contrary, you wish to see the message, and accidentally disabled it, Eatrevitpoopcad's discovery how \nto [reset the unsigned add-in security warning](https://forums.autodesk.com/t5/revit-api-forum/reset-the-unsigned-add-in-security-warning/td-p/11090662) will\ncome in useful:\n\n**Question:** Does anyone know how to reset the security warning Revit gives you when loading unsigned add-ins?\n\nAfter you click *Always Load* and you never see it again?\n\nLet's say I pressed *Always Load* and then changed my mind and would like to keep seeing that message:\n\n<center>\n<img src=\"img/unsigned_addin_warning_message.png\" alt=\"Unsigned add-in security warning message\" title=\"Unsigned add-in security warning message\" width=\"575\"/> <!-- 575 -->\n</center>\n\n**Answer:** I found it in the registry!\n\nHere is how to reset code signing warnings:\n\n- Go to START \n- Enter REGEDIT\n- Go to the following registry key:\n  *HKEY_CURRENT_USER\\SOFTWARE\\Autodesk\\Revit\\Autodesk Revit 2022\\CodeSigning*\n\nYou will see a bunch of GUID value names with data values 0 or 1.\nEach one is for a different plugin you codesigned.\nSelect them all and delete them.\n\nThis is for Revit 2022; for other versions of Revit, go up a folder and pick the Revit version for which you would like to clear code signing entries.\n\nMany thanks to Eatrevitpoopcad for sharing this!\n\n####<a name=\"3c\"></a> Remove the Code Signing Certificate\n\nMatthew Taylor adds:\n\nIf you want to completely remove the code signing certificate, you can follow these steps:\n\n- From a cmd prompt, run MMC, the Microsoft Management Console. \n  You may also type MMC after bringing up the Windows ‘Start’ menu.\n- File &gt; Add/Remove Snap-in... &gt; Certificates &gt; Add &gt; My user account &gt; Okay.\n- Navigate to Certificates - Current User &gt; Trusted Publishers &gt; Certificates.\n- You should now see a list of signatures.\n- Proceed with extreme caution.\n- To delete a certificate, just right-click &gt; Delete.\n- To close the console: File &gt; Close &gt; No.\n\nThank you, Matt!"
  },
  {
    "original_filename": "1954_batch_snip_selfsign",
    "header_text": "Revit API Code Snippet Repository",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Revit API Code Snippet Repository\n\nMaycon Freitas, architect, Dynamo, Revit API Developer and Forge enthusiast at [Blossom Consult](https://www.blossomconsult.com),\nshares a new collection of Revit API code snippets and invites the community to join in:\n\n> I'm creating the [RevitAPISnippets GitHub repository](https://github.com/mayconrfreitas/RevitAPISnippets) to\nshare Revit API code snippets with our Revit developer community.\nIf you're interested in contributing somehow, I would really appreciate.\nThe idea is to create an open source project to help developers to improve coding performance.\n\nMore about this project in the two-and-a-half-minute video\non [RevitAPISnippets: 170+ code lines in 2 minutes (Revit API)](https://youtu.be/moD7CYUkJHw)."
  },
  {
    "original_filename": "1954_batch_snip_selfsign",
    "header_text": "Batch Processing and Monitoring Progress",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Batch Processing and Monitoring Progress\n\nQuestions on batch processing BIMs come up on a regular basis, and surfaced again discussing \na [way to check if family is corrupt](https://forums.autodesk.com/t5/revit-api-forum/way-to-check-if-family-is-corrupt/m-p/11174180) with\n[Phillip Miller](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/311888) and\nRichard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas:\n\n**Question:** I have a simple addon that iterates over all the families in a document and exports them to a folder amongst other things, using `fam.SaveAs(path, options)`.\n\nAll works as expected until the very rare case when it hits a family that is corrupt.\nThis doesn't happen often, but it does happen.\nWhen it hits such a family there are no warning messages, doesn't crash, just hangs.\n\nMy question: Is there a way that I can check for this situation or a way to skip on to the next family?\n\n**Answer:** I don't think so.\n\nYou can't cancel the process either so also no possibility of setting a time limit. Only thing you could do is create a logging system where the last item that caused the issue along with those already exported up to that point can be skipped on the next run of the Add-in.\n\nFor these kind of issues, all you can really do from an API developer perspective is get end user to open a support case with Autodesk regarding the attached project file (or you could open one).\nA brief review of the journal indicates an issue with many short curves.\n\nRegarding end user support case they can easily replicate the issue outside of the API by attempting to edit the family in the UI.\nIt seems to be getting stuck in a regeneration loop and may eventually resolve.\nI wouldn't classify it as document corruption because that tends to have an abrupt end, i.e., file would not open and error message would be shown in UI.\nSeems to be an issue with how Revit responds to a certain circumstance that the file causes, i.e., problem with Revit.\n\n**Response:** Thanks for your reply.\n\nIt was what I thought but just wanted to make sure I wasn't missing anything.\n\nThis is meant to be a totally automated process with no user interaction so is a bit of a shame I can't get around this catch and move on.\nWhat I will have to do is set a timer and if there is a long period of time opening a family, pop up a message box of some sort to notify the user of the issue when they get back to their workstation.\n\n**Answer:** Should also mention the `ProgressChangedEventArgs.Cancel` of `Application.ProgressChanged`.\n\nThis reports the progress of the little green bar that appears in the bottom left.\nThis has a cancel button next to it that is available when opening a family.\nSo, it may be possible to cancel via that if you spot a recurring pattern of progress as appears to happen with this family, e.g., how many times it goes to 25% after 50% etc.\n\nProgressChangedEventArgs.Caption may also report `Regenerating`, so you could also count those and set limits on that.\n\nThis all hinges on if ProgressChangedEventArgs.Cancel works, i.e., it works in the UI immediately for the family in question.\n\nBelow is an example that seems to work well for English Language Revit.\n\nWhen you call cancel on the event it throws an exception for the calling method so you can catch that and move onto the next item. The below works by counting the occurrences of \"Regenerating\", a count of around 2200 is about right for that family (when it starts to loop).\n\nYou could as an alternative use the progress Position property but to get a percentage you need to divide the Position property by the UpperRange property. This approach doesn't seem as good as the regen caption approach because the percentages encountered are more random and not a good indicator of a pattern of repetition (would have to store more in an array to check against).\n\n<pre class=\"prettyprint\">\n  Private IntRegenCount As Integer = 0\n  \n  Private Sub ProgressChanged(a As Object, e As Autodesk.Revit.DB.Events.ProgressChangedEventArgs)\n    If e.Caption = \"Regenerating\" Then\n      IntRegenCount += 1\n    End If\n    If IntRegenCount > 2200 Then\n      'IntRegenCount = 0\n      e.Cancel()\n    End If\n  End Sub\n\n  Public Function Obj_220516d(commandData As ExternalCommandData, ByRef message As String, elements As ElementSet) As Result\n    Dim IntUIApp As UIApplication = commandData.Application\n    Dim IntUIDoc As UIDocument = commandData.Application.ActiveUIDocument\n    Dim IntDoc As Document = IntUIDoc.Document\n\n    AddHandler commandData.Application.Application.ProgressChanged, AddressOf ProgressChanged\n    Const NM As String = \"Vantage Metro Series Hinged Door Jamb\"\n\n    Dim FEC As New FilteredElementCollector(IntDoc)\n    Dim ECF As New ElementClassFilter(GetType(Family))\n    Dim F As Family = FEC.WherePasses(ECF) _\n      .Where(Function(x) x.Name = NM) _\n      .Cast(Of Family) _\n      .FirstOrDefault\n\n     Dim FDoc As Document = Nothing\n\n    Try\n      FDoc = IntDoc.EditFamily(F)\n    Catch ex As Exception\n      Return Result.Cancelled\n    Finally\n      RemoveHandler commandData.Application.Application.ProgressChanged, AddressOf ProgressChanged\n    End Try\n\n    Return Result.Succeeded\n\n  End Function\n</pre>\n\nThis below non-language dependant example appears to work also.\nIn below I attempt to edit the problem family before moving on to a second family in the project file that does open.\n\nAgain, you have to look at the numbers for variables N and T below.\nThe limit of T below often occurs first and seems to give adequate time allowance to edit problem family.\n\nFor either case, you have to handle the DialogBoxShowing event to cancel the dialogue that appears after cancelling the progress changed event.\n\n<pre class=\"prettyprint\">\n  Private IntProgressLog As Integer() = New Integer(20) {}\n  \n  Private Sub ProgressChanged(s As Object, e As Autodesk.Revit.DB.Events.ProgressChangedEventArgs)\n    Dim ULim As Double = e.UpperRange\n    Dim Pos As Double = e.Position\n    Dim Perc As Integer = ((Pos / ULim) * 20)\n    IntProgressLog(Perc) += 1\n\n    Dim N As Integer = IntProgressLog.Max\n    Dim T As Integer = IntProgressLog.Sum\n    If N > 2000 OrElse T > 15000 Then\n      e.Cancel()\n    End If\n  End Sub\n  Private Sub MsgBoxShowing(s As Object, e As Autodesk.Revit.UI.Events.DialogBoxShowingEventArgs)\n    Dim IntUIApp As UIApplication = s\n    IntProgressLog = New Integer(20) {} 'reset the variable for next family\n    e.OverrideResult(2)\n  End Sub\n\n  Public Function Obj_220516d(commandData As ExternalCommandData, ByRef message As String, elements As ElementSet) As Result\n    Dim IntUIApp As UIApplication = commandData.Application\n    Dim IntUIDoc As UIDocument = commandData.Application.ActiveUIDocument\n    Dim IntDoc As Document = IntUIDoc.Document\n\n    AddHandler IntUIApp.Application.ProgressChanged, AddressOf ProgressChanged\n    AddHandler IntUIApp.DialogBoxShowing, AddressOf MsgBoxShowing\n\n    Dim NM As String() = New String(1) {\"Vantage Metro Series Hinged Door Jamb\", \"_ Callout Head\"}\n\n    Dim FDoc As Document = Nothing\n    For i = 0 To 1\n      Dim K As Integer = i\n      Dim FEC As New FilteredElementCollector(IntDoc)\n      Dim ECF As New ElementClassFilter(GetType(Family))\n      Dim F As Family = FEC.WherePasses(ECF) _\n        .Where(Function(x) x.Name = NM(K)) _\n        .Cast(Of Family) _\n        .FirstOrDefault\n\n      Try\n        FDoc = IntDoc.EditFamily(F)\n      Catch ex As Exception\n      End Try\n      If FDoc IsNot Nothing Then\n        Debug.WriteLine(\"Edit of: \" & NM(i))\n      End If\n    Next\n\n    RemoveHandler IntUIApp.Application.ProgressChanged, AddressOf ProgressChanged\n    RemoveHandler IntUIApp.DialogBoxShowing, AddressOf MsgBoxShowing\n\n    Return Result.Succeeded\n  End Function\n</pre>\n\n**Answer 2:** Following up on some of your initial thoughts, I would assume that this can be totally automated after all, like this:\n\n- Run an external Windows app that monitors progress and can kill Revit.exe by terminating the process via native OS calls\n- Loop through all the families and call SaveAs on each, logging progress to an external file (or wherever you like)\n- The log file helps keep track of where you are and where you need to proceed next\n- If the external file has not been updated for a while (a minute? ten minutes?), kill Revit.exe and restart with the next family to export, logging and skipping the corrupt one\n\nSound feasible? It is a pretty standard approach to run a batch process.\nRevit is not designed for batch processing dozens of files, let alone hundreds or thousands, so crashes of all kinds are to be expected, perfectly normal, and need to be handled gracefully by batch processing workflows.\nCheck out [The Building Coder 'batch' category](https://thebuildingcoder.typepad.com/blog/batch).\n\n**Response:** Thank you so much.\n\nYou have gone way above and beyond with providing examples etc, and I thank you for that.\n\nI'm back working on this project next week and I will let you know how I get on.\n\nMany thanks to Phillip for raising the issue and Richard for his indefatigable help.\n\n<center>\n<img src=\"img/programming_progress_joke.png\" alt=\"Programming progress\" title=\"Programming progress\" width=\"320\"/> <!-- 960 -->\n</center>"
  }
]