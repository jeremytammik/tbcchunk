[
  {
    "original_filename": "1257_selfilter",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1257_selfilter",
    "header_text": "SelFilter, a Powerful Generic Selection Filter Utility",
    "local_header_href": "#selfilter-a-powerful-generic-selection-filter-utility",
    "chunk_text": "<h3>SelFilter, a Powerful Generic Selection Filter Utility</h3><p>I recently discussed the minimalist generic selection filter implementation\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/selection-filters-adjacency-and-the-good-universe.html#2\">\nJtElementsOfClassSelectionFilter</a> that\n\nI added to\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a>.</p><p>Alexander Buschmann of\n\n<a href=\"http://www.idat.de\">\nIDAT GmbH</a> responded to that and says:</p><p>I saw your generic SelectionFilter class and this reminded me of a little pet project I've done in my spare time that I thought your readers might be interested in.</p><p>Two things always bothered me about the ISelectionFilter:</p><ul>\n<li>You have to create a class to use it.</li>\n<li>Though most often you just want to select Elements that match certain criteria, you can't use the already existing ElementFilters instead. It just feels wrong to create my own class to do something that a Revit class can do for me – and most probably it can do it even better than I could do it myself.</li>\n</ul><p>I therefore implemented a class <b><code>GetFilter</code></b> that provides fast and easy access to the (probably?) most common selection filtering scenarios:</p><p>It supports filtering for one or more classes, for one or more ElementIds, filtering using ElementFilters, some example ReferenceFilterings (for PlanarFaces and for normal vectors of Faces), some methods to filter with delegates or lambdas and some logical combinators, i.e. \"and\", \"or\" and \"not\".</p><p>For the logical combinators there are extension methods for ISelectionFilter defined, so every ISelectionFilter can be combined using these.</p><p>Using this should be quite easy – here is an\n\n<a href=\"zip/SelFilters.zip\">example command and a Revit project to run it in</a>.</p><p>Here are some usage examples:</p><ul>\n<li>SelFilter.GetElementFilter&lt;Wall&gt;() – returns a filter for Walls.</li>\n<li>SelFilter.GetElementFilter(typeof(Wall), typeof(Floor), typeof(Pipe)) – returns a filter for Walls, Floors and Pipes.</li>\n<li>SelFilter.GetElementFilter (elementFilter) – return a filter using an Autodesk.Revit.DB.ElementFilter.</li>\n<li>SelFilter.GetElementFilter(idList) – returns a filter that will let only elements in the idList pass; this might be useful to select faces or edges on some preselected elements.</li>\n<li>filter1.And(filter2) – returns a filter that will check both filter1 and filter2.</li>\n</ul><p>Further information:</p><ul>\n<li>The GetFilter class itself is a static class with static methods that return an interface of an instance of the actual (private) filter classes.</li>\n<li>The actual Filter classes are private to reduce namespace cluttering – it's mostly a matter of taste.</li>\n<li>GetElementFilter methods return an IElementSelectionFilter which does the filtering using the AllowElement method; those classes just return true for the AllowReference method.</li>\n<li>GetReferenceFilter, GetPlanarFaceFilter and GetFaceNormalFilter return an IReferenceSelectionFilter that performs the filtering using the AllowReference method; these classes just return true for the AllowElement method.</li>\n<li>As a consequence, the combination of IElementSelectionFilters with IReferenceSelectionFilters is only meaningful using \"and\". If \"or\" is used, everything will pass the combined filter.</li>\n<li>The \"and\" and \"or\" filter methods return an ILogicalCombinationFilter that combines two or more filters. This interface exposes a property \"ExecuteAll\" – if it is set to \"true\", all the filters are called, even when the result already is fixed. This might or might not be helpful for debugging purposes.</li>\n<li>The \"not\" filter is just an inversion of any other filter and directly returns an \"ISelectionFilter\".</li>\n<li>The GetFilter method creates a filter class for delegates, method groups or lambdas. This gives the option to create arbitrary and complex filters on the fly without creating classes for them.</li>\n</ul><p>I think the mightiest of the methods is the ElementFilter method – all different types of ElementFilter can be used, including CategoryFilters, IntersectionFilters, ExtensibleStorageFilters, ParameterFilters, etc.</p><p>If the power of ElementFilters is not needed, the Class and ElementId filters give easy access to simpler filtering, and if more power is needed, this can easily be done with lambdas or delegates.</p><p>There are lots of comments in the code, though it is really very easy and straightforward.\nThe great thing about this class is not something complicated, just having everything needed in one single place.</p><p>The\n\n<a href=\"zip/SelFilters.zip\">zip file SelFilters.zip</a> contains\n\nthe SelFilter class, the interface files, an example external command using some of the SelFilter functionality, an add-in manifest file for the example command and a small Revit project to test it in.</p><p>Hopefully, you and your readers find this class helpful.</p><p>Thank you very much, Alexander, for sharing this!</p><p>For the sake of completeness, and especially for the convenience of all those search engines out there, here is the source code for the sample external command mainline Execute method (to see the truncated lines in full, view source or copy and paste to a text editor):</p><pre class=\"code\">\n<span class=\"green\">//</span>\n<span class=\"green\">// Copyright (c) 2014 Alexander Buschmann</span>\n<span class=\"green\">//</span>\n<span class=\"green\">// Permission is hereby granted, free of charge, to any person obtaining a copy</span>\n<span class=\"green\">// of this software and associated documentation files (the \"Software\"), to </span>\n<span class=\"green\">// deal in the Software without restriction, including without limitation the </span>\n<span class=\"green\">// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or </span>\n<span class=\"green\">// sell copies of the Software, and to permit persons to whom the Software is </span>\n<span class=\"green\">// furnished to do so, subject to the following conditions:</span>\n<span class=\"green\">//</span>\n<span class=\"green\">// The above copyright notice and this permission notice shall be included in </span>\n<span class=\"green\">// all copies or substantial portions of the Software.</span>\n<span class=\"green\">//</span>\n<span class=\"green\">// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR </span>\n<span class=\"green\">// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, </span>\n<span class=\"green\">// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>\n<span class=\"green\">// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER </span>\n<span class=\"green\">// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING </span>\n<span class=\"green\">// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER </span>\n<span class=\"green\">// DEALINGS IN THE SOFTWARE.</span>\n<span class=\"green\">//</span>\n \n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Collections.ObjectModel;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Revit.UI.Selection;\n \n<span class=\"blue\">namespace</span> RevitSelectionFilters\n{\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">SelectionExamples</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n<span class=\"blue\">    #region</span> Implementation of IExternalCommand\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">UIDocument</span> uiDoc = commandData.Application.ActiveUIDocument;\n      <span class=\"teal\">Document</span> doc = uiDoc.Document;\n      <span class=\"teal\">Selection</span> sel = uiDoc.Selection;\n \n      <span class=\"blue\">try</span>\n      {\n        <span class=\"green\">//</span>\n        <span class=\"green\">// Select Wall or Floor</span>\n        <span class=\"green\">//</span>\n        <span class=\"teal\">Reference</span> pickedReference = sel.PickObject(\n          <span class=\"teal\">ObjectType</span>.Element,\n          <span class=\"teal\">SelFilter</span>.GetElementFilter( <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ), <span class=\"blue\">typeof</span>( <span class=\"teal\">Floor</span> ) ),\n          <span class=\"maroon\">\"Select Wall or Floor\"</span> );\n        <span class=\"blue\">if</span>( pickedReference == <span class=\"blue\">null</span> ) <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n        <span class=\"teal\">Element</span> firstElement = doc.GetElement( pickedReference );\n \n        <span class=\"teal\">TaskDialog</span>.Show(\n          <span class=\"maroon\">\"Result\"</span>,\n          <span class=\"maroon\">\"First Selection: \"</span> + firstElement.Category.Name + <span class=\"maroon\">\": \"</span> + firstElement.Name + <span class=\"maroon\">\" (\"</span> +\n          firstElement.Id + <span class=\"maroon\">\")\"</span> );\n \n        <span class=\"green\">//</span>\n        <span class=\"green\">// Select anything intersecting:</span>\n        <span class=\"green\">//</span>\n        <span class=\"teal\">ElementFilter</span> filter = <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>( firstElement );\n        <span class=\"teal\">ElementFilter</span> notTheFirst = <span class=\"blue\">new</span> <span class=\"teal\">ExclusionFilter</span>( <span class=\"blue\">new</span> <span class=\"teal\">Collection</span>&lt;<span class=\"teal\">ElementId</span>&gt; { firstElement.Id } );\n        <span class=\"teal\">ISelectionFilter</span> intersectionFilter =\n          <span class=\"teal\">SelFilter</span>.GetElementFilter( filter ).And( <span class=\"teal\">SelFilter</span>.GetElementFilter( notTheFirst ) );\n        pickedReference = sel.PickObject(\n          <span class=\"teal\">ObjectType</span>.Element, intersectionFilter,\n          <span class=\"maroon\">\"Select anything intersecting the first picked Element\"</span> );\n        <span class=\"blue\">if</span>( pickedReference == <span class=\"blue\">null</span> ) <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n        <span class=\"teal\">Element</span> secondElement = doc.GetElement( pickedReference );\n        <span class=\"teal\">TaskDialog</span>.Show(\n          <span class=\"maroon\">\"Result\"</span>,\n          <span class=\"maroon\">\"Second Selection: \"</span> + secondElement.Category.Name + <span class=\"maroon\">\": \"</span> + secondElement.Name + <span class=\"maroon\">\" (\"</span> +\n          secondElement.Id + <span class=\"maroon\">\")\"</span> );\n \n        <span class=\"green\">//</span>\n        <span class=\"green\">// Select colums or beams or foundations within 20 feet of the second element in any direction, </span>\n        <span class=\"green\">// but not if they do intersect with the first element</span>\n        <span class=\"green\">//</span>\n        <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">BuiltInCategory</span>&gt; categories = <span class=\"blue\">new</span>[] {\n          <span class=\"teal\">BuiltInCategory</span>.OST_StructuralColumns,\n          <span class=\"teal\">BuiltInCategory</span>.OST_Columns,\n          <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming,\n          <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFoundation,\n        };\n        <span class=\"teal\">ElementFilter</span> catFilter = <span class=\"blue\">new</span> <span class=\"teal\">ElementMulticategoryFilter</span>( categories );\n        <span class=\"teal\">BoundingBoxXYZ</span> box = secondElement.get_BoundingBox( <span class=\"blue\">null</span> );\n        <span class=\"teal\">XYZ</span> vector = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 20, 20, 20 );\n        <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( box.Min - vector, box.Max + vector );\n        <span class=\"teal\">ElementFilter</span> boxFilter = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>( outline );\n        <span class=\"teal\">ISelectionFilter</span> selectionFilter = intersectionFilter.Not().And(\n          <span class=\"teal\">SelFilter</span>.GetElementFilter( catFilter ),\n          <span class=\"teal\">SelFilter</span>.GetElementFilter( boxFilter ) );\n        pickedReference = sel.PickObject(\n          <span class=\"teal\">ObjectType</span>.Element, selectionFilter,\n          <span class=\"maroon\">\"Select Column, Beam, Foundation within 20 feet of second element, not intersecting first element\"</span> );\n        <span class=\"blue\">if</span>( pickedReference == <span class=\"blue\">null</span> ) <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n        <span class=\"teal\">Element</span> thirdElement = doc.GetElement( pickedReference );\n        <span class=\"teal\">TaskDialog</span>.Show(\n          <span class=\"maroon\">\"Result\"</span>,\n          <span class=\"maroon\">\"Third Selection: \"</span> + thirdElement.Category.Name + <span class=\"maroon\">\": \"</span> + thirdElement.Name + <span class=\"maroon\">\" (\"</span> +\n          thirdElement.Id + <span class=\"maroon\">\")\"</span> );\n \n        <span class=\"green\">//</span>\n        <span class=\"green\">// Select Face of thirdElement with normal parallel to BasisZ</span>\n        <span class=\"green\">//</span>\n        selectionFilter = <span class=\"teal\">SelFilter</span>.GetReferenceFilter( ( reference, xyz ) =&gt;\n        {\n          <span class=\"blue\">if</span>( reference.ElementId != thirdElement.Id ) <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n          <span class=\"teal\">Face</span> face =\n            thirdElement.GetGeometryObjectFromReference( reference ) <span class=\"blue\">as</span> <span class=\"teal\">Face</span>;\n          <span class=\"blue\">if</span>( face == <span class=\"blue\">null</span> ) <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n          <span class=\"teal\">XYZ</span> normal = face.ComputeNormal( <span class=\"teal\">UV</span>.Zero );\n          <span class=\"teal\">XYZ</span> crossProduct = normal.CrossProduct( <span class=\"teal\">XYZ</span>.BasisZ );\n          <span class=\"blue\">return</span> ( crossProduct.IsAlmostEqualTo( <span class=\"teal\">XYZ</span>.Zero ) );\n        } );\n        pickedReference = sel.PickObject(\n          <span class=\"teal\">ObjectType</span>.Face, selectionFilter,\n          <span class=\"maroon\">\"Select Face of third element with normal parallel to z-Axis\"</span> );\n        <span class=\"teal\">Face</span> pickedFace = thirdElement.GetGeometryObjectFromReference( pickedReference ) <span class=\"blue\">as</span> <span class=\"teal\">Face</span>;\n        <span class=\"teal\">XYZ</span> pickedNormal = pickedFace.ComputeNormal( <span class=\"teal\">UV</span>.Zero );\n        <span class=\"teal\">TaskDialog</span>.Show(\n          <span class=\"maroon\">\"Result\"</span>,\n          <span class=\"maroon\">\"Fourth Selection: \"</span> + pickedFace.GetType().Name + <span class=\"maroon\">\" (\"</span> +\n          pickedReference.ConvertToStableRepresentation( doc ) + <span class=\"maroon\">\")\\n\"</span> +\n          <span class=\"maroon\">\"Normal: (\"</span> + pickedNormal.X.ToString( <span class=\"maroon\">\"0.###\"</span> ) + <span class=\"maroon\">\" / \"</span> + pickedNormal.Y.ToString( <span class=\"maroon\">\"0.###\"</span> ) + <span class=\"maroon\">\" / \"</span> +\n          pickedNormal.Z.ToString( <span class=\"maroon\">\"0.###\"</span> ) + <span class=\"maroon\">\")\"</span> );\n \n        <span class=\"green\">//</span>\n        <span class=\"green\">// Now select any Face with an X oder Y-Normal from any previously selected Element</span>\n        <span class=\"green\">//</span>\n        <span class=\"teal\">IElementSelectionFilter</span> idFilter = <span class=\"teal\">SelFilter</span>.GetElementFilter( firstElement.Id, secondElement.Id, thirdElement.Id );\n        <span class=\"teal\">IReferenceSelectionFilter</span> xFilter = <span class=\"teal\">SelFilter</span>.GetFaceNormalFilter( doc, <span class=\"teal\">XYZ</span>.BasisX, <span class=\"blue\">true</span> );\n        <span class=\"teal\">IReferenceSelectionFilter</span> yFilter = <span class=\"teal\">SelFilter</span>.GetFaceNormalFilter( doc, <span class=\"teal\">XYZ</span>.BasisY, <span class=\"blue\">true</span> );\n        <span class=\"teal\">ILogicalCombinationFilter</span> logicalFilter = idFilter.And( xFilter.Or( yFilter ) );\n<span class=\"blue\">#if</span> DEBUG\n        logicalFilter.ExecuteAll = <span class=\"blue\">true</span>;\n<span class=\"blue\">#endif</span>\n        pickedReference = sel.PickObject(\n          <span class=\"teal\">ObjectType</span>.Face, logicalFilter,\n          <span class=\"maroon\">\"Now select any Face with an x oder y-Normal from any previously selected Element\"</span> );\n        <span class=\"teal\">Element</span> element = doc.GetElement( pickedReference );\n        pickedFace = element.GetGeometryObjectFromReference( pickedReference ) <span class=\"blue\">as</span> <span class=\"teal\">Face</span>;\n        pickedNormal = pickedFace.ComputeNormal( <span class=\"teal\">UV</span>.Zero );\n        <span class=\"teal\">TaskDialog</span>.Show(\n          <span class=\"maroon\">\"Result\"</span>,\n          <span class=\"maroon\">\"Fifth Selection: \"</span> + pickedFace.GetType().Name + <span class=\"maroon\">\" (\"</span> +\n          pickedReference.ConvertToStableRepresentation( doc ) + <span class=\"maroon\">\")\\n\"</span> +\n          <span class=\"maroon\">\"Normal: (\"</span> + pickedNormal.X.ToString( <span class=\"maroon\">\"0.###\"</span> ) + <span class=\"maroon\">\" / \"</span> + pickedNormal.Y.ToString( <span class=\"maroon\">\"0.###\"</span> ) + <span class=\"maroon\">\" / \"</span> +\n          pickedNormal.Z.ToString( <span class=\"maroon\">\"0.###\"</span> ) + <span class=\"maroon\">\")\"</span> );\n      }\n      <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions.<span class=\"teal\">OperationCanceledException</span> )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Cancelled\"</span>, <span class=\"maroon\">\"User cancelled\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n}\n</pre><p>Here is the pretty fully documented SelFilter class source code:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">SelFilter</span>\n{\n  <span class=\"green\">//</span>\n  <span class=\"green\">// Element-Filters: Will filter only for </span>\n  <span class=\"green\">// elements, not for references</span>\n  <span class=\"green\">//</span>\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter that only </span>\n  <span class=\"gray\">///</span><span class=\"green\"> elements of type T will pass</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IElementSelectionFilter</span> GetElementFilter&lt;T&gt;()\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">ElementTypeFilter</span>( <span class=\"blue\">typeof</span>( T ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter that elements of </span>\n  <span class=\"gray\">///</span><span class=\"green\"> any type in the collection will pass</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IElementSelectionFilter</span> GetElementFilter(\n    <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Type</span>&gt; allowedTypes )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">ElementTypeFilter</span>( allowedTypes );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter that elements </span>\n  <span class=\"gray\">///</span><span class=\"green\"> of any of the given types  will pass</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IElementSelectionFilter</span> GetElementFilter(\n    <span class=\"teal\">Type</span> type,\n    <span class=\"blue\">params</span> <span class=\"teal\">Type</span>[] types )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">ElementTypeFilter</span>( type, types );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter from an ElementFilter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IElementSelectionFilter</span> GetElementFilter(\n    <span class=\"teal\">ElementFilter</span> filter )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">ElementFilterFilter</span>( filter );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter that will use </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the \"filterMethod\" to filter the elements</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IElementSelectionFilter</span> GetElementFilter(\n    <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">bool</span>&gt; filterMethod )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">DelegatesFilter</span>( filterMethod, <span class=\"teal\">DelegatesFilter</span>.AllReferences );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter that will use </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the \"filterMethod\" to filter the elements</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IElementSelectionFilter</span> GetElementFilter(\n    <span class=\"teal\">Predicate</span>&lt;<span class=\"teal\">Element</span>&gt; filterMethod )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">DelegatesFilter</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">bool</span>&gt;( filterMethod ),\n      <span class=\"teal\">DelegatesFilter</span>.AllReferences );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\">  Creates a selection filter that will </span>\n  <span class=\"gray\">///</span><span class=\"green\">  let pass only the elements defined by the ids</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IElementSelectionFilter</span> GetElementFilter(\n    <span class=\"teal\">ElementId</span> id,\n    <span class=\"blue\">params</span> <span class=\"teal\">ElementId</span>[] ids )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">ElementIdFilter</span>( id, ids );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\">  Creates a selection filter that will </span>\n  <span class=\"gray\">///</span><span class=\"green\">  let pass only the elements defined by the ids</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IElementSelectionFilter</span> GetElementFilter(\n    <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">ElementIdFilter</span>( ids );\n  }\n \n  <span class=\"green\">//</span>\n  <span class=\"green\">// Reference-Filters: Will filter only for </span>\n  <span class=\"green\">// references, let all elements pass</span>\n  <span class=\"green\">//</span>\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter that will use </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the \"filterMethod\" to filter the references</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IReferenceSelectionFilter</span> GetReferenceFilter(\n    <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Reference</span>, <span class=\"teal\">XYZ</span>, <span class=\"blue\">bool</span>&gt; filterMethod )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">DelegatesFilter</span>( <span class=\"teal\">DelegatesFilter</span>.AllElements,\n      filterMethod );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter that will let only </span>\n  <span class=\"gray\">///</span><span class=\"green\"> PlanarFace-References pass</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IReferenceSelectionFilter</span> GetPlanarFaceFilter( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"blue\">return</span> GetReferenceFilter( ( reference, xyz ) =&gt;\n    {\n      <span class=\"teal\">Element</span> element = doc.GetElement( reference );\n      <span class=\"teal\">PlanarFace</span> planarFace = element.GetGeometryObjectFromReference(\n        reference ) <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n      <span class=\"blue\">return</span> planarFace != <span class=\"blue\">null</span>;\n    } );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a selection filter that will let faces </span>\n  <span class=\"gray\">///</span><span class=\"green\"> pass if their normal vector at (0/0) is </span>\n  <span class=\"gray\">///</span><span class=\"green\"> codirectional or parallel to the given normal </span>\n  <span class=\"gray\">///</span><span class=\"green\"> vector</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IReferenceSelectionFilter</span> GetFaceNormalFilter(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">XYZ</span> normal,\n    <span class=\"blue\">bool</span> acceptParallel = <span class=\"blue\">false</span> )\n  {\n    <span class=\"teal\">XYZ</span> _normal = normal.Normalize();\n    <span class=\"teal\">XYZ</span> minusNormal = -1 * _normal;\n    <span class=\"blue\">return</span> GetReferenceFilter( ( reference, xyz ) =&gt;\n    {\n      <span class=\"teal\">Element</span> element = doc.GetElement( reference );\n      <span class=\"teal\">Face</span> face = element.GetGeometryObjectFromReference( reference ) <span class=\"blue\">as</span> <span class=\"teal\">Face</span>;\n      <span class=\"blue\">if</span>( face == <span class=\"blue\">null</span> ) <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n      <span class=\"teal\">XYZ</span> faceNormal = face.ComputeNormal( <span class=\"teal\">UV</span>.Zero );\n      <span class=\"blue\">bool</span> erg = faceNormal.IsAlmostEqualTo( _normal );\n      <span class=\"blue\">if</span>( acceptParallel ) erg |= faceNormal.IsAlmostEqualTo( minusNormal );\n      <span class=\"blue\">return</span> erg;\n    } );\n  }\n \n  <span class=\"green\">//</span>\n  <span class=\"green\">// Filter for Elements and References</span>\n  <span class=\"green\">//</span>\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ISelectionFilter</span> GetFilter(\n    <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">bool</span>&gt; elementFilterMethod,\n    <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Reference</span>, <span class=\"teal\">XYZ</span>, <span class=\"blue\">bool</span>&gt; referencesFilterMethod )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">DelegatesFilter</span>( elementFilterMethod,\n      referencesFilterMethod );\n  }\n \n  <span class=\"green\">//</span>\n  <span class=\"green\">// Logical-Filters: Will call other filters</span>\n  <span class=\"green\">//</span>\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"or\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ILogicalCombinationFilter</span> GetLogicalOrFilter(\n    <span class=\"teal\">ISelectionFilter</span> first,\n    <span class=\"teal\">ISelectionFilter</span> second,\n    <span class=\"blue\">bool</span> executeAll = <span class=\"blue\">false</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( first, second, executeAll );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"or\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ILogicalCombinationFilter</span> GetLogicalOrFilter(\n    <span class=\"teal\">ISelectionFilter</span> first,\n    <span class=\"blue\">params</span> <span class=\"teal\">ISelectionFilter</span>[] filters )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( first, filters );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"or\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ILogicalCombinationFilter</span> GetLogicalOrFilter(\n    <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ISelectionFilter</span>&gt; filters )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( filters );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"and\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ILogicalCombinationFilter</span> GetLogicalAndFilter(\n    <span class=\"teal\">ISelectionFilter</span> first,\n    <span class=\"teal\">ISelectionFilter</span> second,\n    <span class=\"blue\">bool</span> executeAll = <span class=\"blue\">false</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalAndFilter</span>( first, second, executeAll );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"and\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ILogicalCombinationFilter</span> GetLogicalAndFilter(\n    <span class=\"teal\">ISelectionFilter</span> first,\n    <span class=\"blue\">params</span> <span class=\"teal\">ISelectionFilter</span>[] filters )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalAndFilter</span>( first, filters );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"and\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ILogicalCombinationFilter</span> GetLogicalAndFilter(\n    <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ISelectionFilter</span>&gt; filters )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalAndFilter</span>( filters );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"not\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ISelectionFilter</span> GetLogicalNotFilter(\n    <span class=\"teal\">ISelectionFilter</span> filter )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalNotFilter</span>( filter );\n  }\n \n  <span class=\"green\">//</span>\n  <span class=\"green\">// Extension Methods for SelectionFilters</span>\n  <span class=\"green\">// </span>\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"or\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"_this\"&gt;&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"filters\"&gt;&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;&lt;/returns&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ILogicalCombinationFilter</span> Or(\n    <span class=\"blue\">this</span> <span class=\"teal\">ISelectionFilter</span> _this,\n    <span class=\"blue\">params</span> <span class=\"teal\">ISelectionFilter</span>[] filters )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>( _this, filters );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"and\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ILogicalCombinationFilter</span> And(\n    <span class=\"blue\">this</span> <span class=\"teal\">ISelectionFilter</span> _this,\n    <span class=\"blue\">params</span> <span class=\"teal\">ISelectionFilter</span>[] filters )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalAndFilter</span>( _this, filters );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Creates a logical \"not\" filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ISelectionFilter</span> Not(\n    <span class=\"blue\">this</span> <span class=\"teal\">ISelectionFilter</span> _this )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">LogicalNotFilter</span>( _this );\n  }\n \n  <span class=\"green\">//</span>\n  <span class=\"green\">// Interfaces</span>\n  <span class=\"green\">//</span>\n \n  <span class=\"green\">//</span>\n  <span class=\"green\">// Private classes will do the actual work - </span>\n  <span class=\"green\">// don't need to be visible.</span>\n  <span class=\"green\">// ISelectionFilter is not strictly neccessary on </span>\n  <span class=\"green\">//each class, but I like to explicitly say what I </span>\n  <span class=\"green\">// am doing.</span>\n  <span class=\"green\">//</span>\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents a selection </span>\n  <span class=\"gray\">///</span><span class=\"green\"> filter that will filter only for elements</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and lets all references pass</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">abstract</span> <span class=\"blue\">class</span> <span class=\"teal\">ElementSelectionFilter</span>\n    : <span class=\"teal\">IElementSelectionFilter</span>,\n    <span class=\"teal\">IReferenceSelectionFilter</span>,\n    <span class=\"teal\">ISelectionFilter</span>\n  {\n<span class=\"blue\">    #region</span> Implementation of ISelectionFilter\n \n    <span class=\"blue\">public</span> <span class=\"blue\">abstract</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> elem );\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> This class does not filter for references</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference(\n      <span class=\"teal\">Reference</span> reference,\n      <span class=\"teal\">XYZ</span> position )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents a </span>\n  <span class=\"gray\">///</span><span class=\"green\"> filter for one or more ElementTypes</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">class</span> <span class=\"teal\">ElementTypeFilter</span>\n    : <span class=\"teal\">ElementSelectionFilter</span>,\n    <span class=\"teal\">IElementSelectionFilter</span>,\n    <span class=\"teal\">IReferenceSelectionFilter</span>,\n    <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> List of the allowed types </span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">readonly</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; m_types\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt;();\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a Filter for a single Type</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> ElementTypeFilter( <span class=\"teal\">Type</span> type )\n    {\n      m_types.Add( type );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a Filter for a list of Types</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> ElementTypeFilter( <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Type</span>&gt; types )\n    {\n      m_types.AddRange( types );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a Filter for a number of Types</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> ElementTypeFilter(\n      <span class=\"teal\">Type</span> type,\n      <span class=\"blue\">params</span> <span class=\"teal\">Type</span>[] types )\n      : <span class=\"blue\">this</span>( type )\n    {\n      m_types.AddRange( types );\n    }\n \n<span class=\"blue\">    #region</span> Implementation of ISelectionFilter\n \n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> elem )\n    {\n      <span class=\"blue\">return</span> m_types.Any( type\n        =&gt; type.IsInstanceOfType( elem ) );\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents a </span>\n  <span class=\"gray\">///</span><span class=\"green\"> filter using an ElementFilter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">class</span> <span class=\"teal\">ElementFilterFilter</span>\n    : <span class=\"teal\">ElementSelectionFilter</span>,\n    <span class=\"teal\">IElementSelectionFilter</span>,\n    <span class=\"teal\">IReferenceSelectionFilter</span>,\n    <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The ElementFilter that is used</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">readonly</span> <span class=\"teal\">ElementFilter</span> m_filter;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a SelectionFilter for an ElementFilter</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> ElementFilterFilter( <span class=\"teal\">ElementFilter</span> filter )\n    {\n      m_filter = filter;\n    }\n \n<span class=\"blue\">    #region</span> Overrides of ElementSelectionFilter\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> An element passes if it passes the ElementFilter</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> elem )\n    {\n      <span class=\"blue\">return</span> m_filter.PassesFilter( elem );\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents a filter </span>\n  <span class=\"gray\">///</span><span class=\"green\"> for one or more specific elements.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Especially usefull when and-combined </span>\n  <span class=\"gray\">///</span><span class=\"green\"> with a ReferenceFilter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">class</span> <span class=\"teal\">ElementIdFilter</span>\n    : <span class=\"teal\">ElementSelectionFilter</span>,\n    <span class=\"teal\">IElementSelectionFilter</span>,\n    <span class=\"teal\">IReferenceSelectionFilter</span>,\n    <span class=\"teal\">ISelectionFilter</span>\n  {\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The list of valid ElementIds</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">readonly</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; m_ids\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a ElementIdFilter for one or more ElementIds</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> ElementIdFilter(\n      <span class=\"teal\">ElementId</span> id,\n      <span class=\"blue\">params</span> <span class=\"teal\">ElementId</span>[] ids )\n    {\n      m_ids.Add( id );\n      m_ids.AddRange( ids );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a ElementIdFilter for a </span>\n    <span class=\"gray\">///</span><span class=\"green\"> collection of ElementIds</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> ElementIdFilter( <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids )\n    {\n      m_ids.AddRange( ids );\n    }\n \n<span class=\"blue\">    #region</span> Overrides of ElementSelectionFilter\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> An Element passes if its Id is </span>\n    <span class=\"gray\">///</span><span class=\"green\"> in the list of valid Ids</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> elem )\n    {\n      <span class=\"blue\">return</span> m_ids.Contains( elem.Id );\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents </span>\n  <span class=\"gray\">///</span><span class=\"green\"> a filter using delegate methods</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">class</span> <span class=\"teal\">DelegatesFilter</span>\n    : <span class=\"teal\">IElementSelectionFilter</span>,\n    <span class=\"teal\">IReferenceSelectionFilter</span>,\n    <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The delegate used to filter elements</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">readonly</span> <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">bool</span>&gt; m_elementFilter;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The delegate used to filter References</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">readonly</span> <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Reference</span>, <span class=\"teal\">XYZ</span>, <span class=\"blue\">bool</span>&gt; m_referenceFilter;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a filter that uses the element </span>\n    <span class=\"gray\">///</span><span class=\"green\"> and reference filter delegates</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> DelegatesFilter(\n      <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">bool</span>&gt; elementFilter,\n      <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Reference</span>, <span class=\"teal\">XYZ</span>, <span class=\"blue\">bool</span>&gt; referenceFilter )\n    {\n      m_elementFilter = elementFilter;\n      m_referenceFilter = referenceFilter;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Use this if all Elements should pass the Filter</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">bool</span>&gt; AllElements\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> element =&gt; <span class=\"blue\">true</span>; }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Use this, if all References should pass the Filter</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Func</span>&lt;<span class=\"teal\">Reference</span>, <span class=\"teal\">XYZ</span>, <span class=\"blue\">bool</span>&gt; AllReferences\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> ( reference, xyz ) =&gt; <span class=\"blue\">true</span>; }\n    }\n \n<span class=\"blue\">    #region</span> Implementation of ISelectionFilter\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Elements that pass the element filter </span>\n    <span class=\"gray\">///</span><span class=\"green\"> predicate will pass</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> elem )\n    {\n      <span class=\"blue\">return</span> m_elementFilter( elem );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Elements that pass the reference filter </span>\n    <span class=\"gray\">///</span><span class=\"green\"> predicate will pass</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference(\n      <span class=\"teal\">Reference</span> reference,\n      <span class=\"teal\">XYZ</span> position )\n    {\n      <span class=\"blue\">return</span> m_referenceFilter( reference, position );\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents a logical or filter for selection filters.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">abstract</span> <span class=\"blue\">class</span> <span class=\"teal\">LogicalCombinationFilter</span> : <span class=\"teal\">ISelectionFilter</span>, <span class=\"teal\">ILogicalCombinationFilter</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> List of the filters to check</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">protected</span> <span class=\"blue\">readonly</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ISelectionFilter</span>&gt; m_filterList\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ISelectionFilter</span>&gt;();\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> If true, all filters are executed, </span>\n    <span class=\"gray\">///</span><span class=\"green\"> even if the result is already obvious</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> ExecuteAll { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical filter for two selectionFilters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">protected</span> LogicalCombinationFilter(\n      <span class=\"teal\">ISelectionFilter</span> first,\n      <span class=\"teal\">ISelectionFilter</span> second,\n      <span class=\"blue\">bool</span> executeAll = <span class=\"blue\">false</span> )\n    {\n      <span class=\"blue\">this</span>.ExecuteAll = executeAll;\n      m_filterList.Add( first );\n      m_filterList.Add( second );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical filter for </span>\n    <span class=\"gray\">///</span><span class=\"green\"> a number of selectionsFilters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> executeAll is set to false</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">protected</span> LogicalCombinationFilter(\n      <span class=\"teal\">ISelectionFilter</span> first,\n      <span class=\"blue\">params</span> <span class=\"teal\">ISelectionFilter</span>[] filters )\n    {\n      <span class=\"blue\">this</span>.ExecuteAll = <span class=\"blue\">false</span>;\n      m_filterList.Add( first );\n      m_filterList.AddRange( filters );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical filter for </span>\n    <span class=\"gray\">///</span><span class=\"green\"> a number of selectionsFilters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> executeAll is set to false</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"filters\"&gt;&lt;/param&gt;</span>\n    <span class=\"blue\">protected</span> LogicalCombinationFilter(\n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ISelectionFilter</span>&gt; filters )\n    {\n      ExecuteAll = <span class=\"blue\">false</span>;\n      m_filterList.AddRange( filters );\n    }\n \n<span class=\"blue\">    #region</span> Implementation of ISelectionFilter\n \n    <span class=\"blue\">public</span> <span class=\"blue\">abstract</span> <span class=\"blue\">bool</span> AllowElement(\n      <span class=\"teal\">Element</span> elem );\n \n    <span class=\"blue\">public</span> <span class=\"blue\">abstract</span> <span class=\"blue\">bool</span> AllowReference(\n      <span class=\"teal\">Reference</span> reference,\n      <span class=\"teal\">XYZ</span> position );\n \n<span class=\"blue\">    #endregion</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents a logical or filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">class</span> <span class=\"teal\">LogicalOrFilter</span>\n    : <span class=\"teal\">LogicalCombinationFilter</span>, <span class=\"teal\">ISelectionFilter</span>\n  {\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical or filter for two Filters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> LogicalOrFilter(\n      <span class=\"teal\">ISelectionFilter</span> first,\n      <span class=\"teal\">ISelectionFilter</span> second,\n      <span class=\"blue\">bool</span> executeAll )\n      : <span class=\"blue\">base</span>( first, second, executeAll )\n    {\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical or filter for </span>\n    <span class=\"gray\">///</span><span class=\"green\"> a number of filters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> LogicalOrFilter(\n      <span class=\"teal\">ISelectionFilter</span> first,\n      <span class=\"blue\">params</span> <span class=\"teal\">ISelectionFilter</span>[] filters )\n      : <span class=\"blue\">base</span>( first, filters )\n    {\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical or filter for </span>\n    <span class=\"gray\">///</span><span class=\"green\"> a number of filters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> LogicalOrFilter(\n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ISelectionFilter</span>&gt; filters )\n      : <span class=\"blue\">base</span>( filters )\n    {\n    }\n \n<span class=\"blue\">    #region</span> Implementation of ISelectionFilter\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Elements that pass at least on </span>\n    <span class=\"gray\">///</span><span class=\"green\"> of the filters will pass</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> elem )\n    {\n      <span class=\"blue\">bool</span> erg = <span class=\"blue\">false</span>;\n      <span class=\"blue\">if</span>( ExecuteAll )\n      {\n        m_filterList.ForEach( filter\n          =&gt; erg |= filter.AllowElement( elem ) );\n      }\n      <span class=\"blue\">else</span>\n      {\n        erg = m_filterList.Any( filter\n          =&gt; filter.AllowElement( elem ) );\n      }\n      <span class=\"blue\">return</span> erg;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> References that pass at least one </span>\n    <span class=\"gray\">///</span><span class=\"green\"> of the filters will pass</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">bool</span> AllowReference(\n      <span class=\"teal\">Reference</span> reference,\n      <span class=\"teal\">XYZ</span> position )\n    {\n      <span class=\"blue\">bool</span> erg = <span class=\"blue\">false</span>;\n      <span class=\"blue\">if</span>( ExecuteAll )\n      {\n        m_filterList.ForEach( filter\n          =&gt; erg |= filter.AllowReference(\n            reference, position ) );\n      }\n      <span class=\"blue\">else</span>\n      {\n        erg = m_filterList.Any( filter\n          =&gt; filter.AllowReference(\n            reference, position ) );\n      }\n      <span class=\"blue\">return</span> erg;\n    }\n \n<span class=\"blue\">    #endregion</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents a logical and filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">class</span> <span class=\"teal\">LogicalAndFilter</span>\n    : <span class=\"teal\">LogicalCombinationFilter</span>, <span class=\"teal\">ISelectionFilter</span>\n  {\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical and filter for two Filters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> LogicalAndFilter(\n      <span class=\"teal\">ISelectionFilter</span> first,\n      <span class=\"teal\">ISelectionFilter</span> second,\n      <span class=\"blue\">bool</span> executeAll )\n      : <span class=\"blue\">base</span>( first, second, executeAll )\n    {\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical and filter </span>\n    <span class=\"gray\">///</span><span class=\"green\"> for a number of filters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> LogicalAndFilter(\n      <span class=\"teal\">ISelectionFilter</span> first,\n      <span class=\"blue\">params</span> <span class=\"teal\">ISelectionFilter</span>[] filters )\n      : <span class=\"blue\">base</span>( first, filters )\n    {\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructs a logical and </span>\n    <span class=\"gray\">///</span><span class=\"green\"> filter for a number of filters</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> LogicalAndFilter(\n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">ISelectionFilter</span>&gt; filters )\n      : <span class=\"blue\">base</span>( filters )\n    {\n    }\n \n<span class=\"blue\">    #region</span> Implementation of ISelectionFilter\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Elements that pass all of the filters will pass</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> elem )\n    {\n      <span class=\"blue\">bool</span> erg = <span class=\"blue\">true</span>;\n      <span class=\"blue\">if</span>( ExecuteAll )\n      {\n        m_filterList.ForEach( filter\n          =&gt; erg = erg &amp; filter.AllowElement( elem ) );\n      }\n      <span class=\"blue\">else</span>\n      {\n        erg = m_filterList.All( filter\n          =&gt; filter.AllowElement( elem ) );\n      }\n      <span class=\"blue\">return</span> erg;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> References that pass all of the filters will pass</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">bool</span> AllowReference(\n      <span class=\"teal\">Reference</span> reference,\n      <span class=\"teal\">XYZ</span> position )\n    {\n      <span class=\"blue\">bool</span> erg = <span class=\"blue\">true</span>;\n      <span class=\"blue\">if</span>( ExecuteAll )\n      {\n        m_filterList.ForEach( filter\n          =&gt; erg = erg &amp; filter.AllowReference(\n            reference, position ) );\n      }\n      <span class=\"blue\">else</span>\n      {\n        erg = m_filterList.All( filter\n          =&gt; filter.AllowReference(\n            reference, position ) );\n      }\n      <span class=\"blue\">return</span> erg;\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Private class that represents a logical Not filter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">class</span> <span class=\"teal\">LogicalNotFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The filter, that will get negated</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">readonly</span> <span class=\"teal\">ISelectionFilter</span> m_filter;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> constructs a not-Filter</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"filter\"&gt;</span><span class=\"green\"> </span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"blue\">public</span> LogicalNotFilter( <span class=\"teal\">ISelectionFilter</span> filter )\n    {\n      m_filter = filter;\n    }\n \n<span class=\"blue\">    #region</span> Implementation of ISelectionFilter\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Elements will pass, if they don't </span>\n    <span class=\"gray\">///</span><span class=\"green\"> pass the original filter</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> elem )\n    {\n      <span class=\"blue\">return</span> !m_filter.AllowElement( elem );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> References will pass, if they </span>\n    <span class=\"gray\">///</span><span class=\"green\"> don't pass the original filter</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference(\n      <span class=\"teal\">Reference</span> reference,\n      <span class=\"teal\">XYZ</span> position )\n    {\n      <span class=\"blue\">return</span> !m_filter.AllowReference(\n        reference, position );\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n}\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "1257_selfilter",
    "header_text": "Culinary Notes from Paris",
    "local_header_href": "#culinary-notes-from-paris",
    "chunk_text": "<h4>Culinary Notes from Paris</h4><p>By the way, I am sitting in the meetup in London now.</p><p>Before ending for today, I have two little culinary notes from Paris to share:</p><p>I was lucky enough not to stay in horrible huge hotel there, but in a really nice little bed and breakfast instead, right next to\n\n<a href=\"https://en.wikipedia.org/wiki/Montmartre\">Montmartre</a> and\n\n<a href=\"https://en.wikipedia.org/wiki/Sacr%C3%A9-C%C5%93ur,_Paris\">Sacré-Cœur</a>.</p><p>Better still, it was right next to the prize-winning baker and patissier\n\n<a href=\"http://boulangerieraphaelle.fr\">Boulangerie Raphaëlle</a>, so I had great croissants and chocolate for breakfast.</p><p>Then, to my surprise, arriving a bit early at the airport, I discovered the\n\n<a href=\"http://www.laduree.com\">Ladurée</a> restaurant\n\nat the Charles de Gaulle airport and enjoyed my first ever\n\n<a href=\"http://www.traditionalfrenchfood.com/truffle-omelette.html\">\ntruffle omelette</a> before\n\nhopping on to the plane.</p>"
  }
]