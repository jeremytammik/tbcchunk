[
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Graphics Pipeline Custom Exporter",
    "local_header_href": "#graphics-pipeline-custom-exporter",
    "chunk_text": "<h3>Graphics Pipeline Custom Exporter</h3><p>One important\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/revit-2014-api-and-room-plan-view-boundary-polygon-loops.html#2\">\nRevit 2014 API highlight</a> is\n\nthe new custom exporter framework providing direct API access to the rendering output pipeline, including geometry and material properties.</p><p>The\n\n<i><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">\nWhat's New</a></i> section\n\nof the Revit API help file describes it in more detail like this:</p><span style=\"color: darkblue\">\n<h4>Custom Export</h4>\n<p>The Custom Export API provides access to the rendering output pipeline through which Revit sends a processed model (its graphics 3D representation) to an output device.\nIn the case of Custom Export, the \"device\" is represented by a context object that could be any kind of a device, even a file – the most common case, actually.\nA client of Custom Export provides a context and invokes rendering of a model, upon which Revit starts processing the model and sends graphic data out via methods of the context.\nThe data describes the model exactly as it would have appeared in Revit when the model is rendered.\nThe data includes all geometry and material properties.</p>\n<p>The following classes have been exposed:</p>\n<h5>CustomExporter</h5>\n<p>A class that allows exporting 3D views via a custom export context.\nThe Export method of this class triggers the standard rendering process in Revit, but instead of displaying the result on screen or printer, the output is channeled through the given custom context that handles processing the geometric as well as non-geometric information.</p>\n<h5>IExportContext</h5>\n<p>An interface of which interface is used in a custom export of a Revit model.\nThe instance of this class is passed in as a parameter of a CustomExporter.\nThe methods are then called by Revit at times of exporting entities of the model.</p>\n<h5>Render Node Classes</h5>\n<p>Classes of which instance are sent to an export context during a custom export.</p>\n<ul>\n<li>RenderNode – base class for all output nodes</li>\n<li>ViewNode – represents a View</li>\n<li>GroupNode – base class for family and link instances</li>\n<li>InstanceNode – represents an instance of a family</li>\n<li>LinkNode – represents an external link</li>\n<li>ContentNode – base class from RPC, Light, and Daylight nodes</li>\n<li>RPCNode – represents an RPC object</li>\n<li>DaylightPortalNode – represents a daylight portal</li>\n<li>LightNode – represents a light</li>\n<li>MaterialNode – represents a material change</li>\n</ul>\n<h5>CameraInfo</h5>\n<p>A class that describes information about projection mapping of a 3D view to a rendered image.\nAn instance of this class can be obtained via a property of ViewNode.</p>\n</span><a name=\"2\"></a>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Custom Export",
    "local_header_href": "#custom-export",
    "chunk_text": "<h4>Custom Export</h4><p>The Custom Export API provides access to the rendering output pipeline through which Revit sends a processed model (its graphics 3D representation) to an output device.\nIn the case of Custom Export, the \"device\" is represented by a context object that could be any kind of a device, even a file – the most common case, actually.\nA client of Custom Export provides a context and invokes rendering of a model, upon which Revit starts processing the model and sends graphic data out via methods of the context.\nThe data describes the model exactly as it would have appeared in Revit when the model is rendered.\nThe data includes all geometry and material properties.</p><p>The following classes have been exposed:</p>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "CustomExporter",
    "local_header_href": "#customexporter",
    "chunk_text": "<h5>CustomExporter</h5><p>A class that allows exporting 3D views via a custom export context.\nThe Export method of this class triggers the standard rendering process in Revit, but instead of displaying the result on screen or printer, the output is channeled through the given custom context that handles processing the geometric as well as non-geometric information.</p>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "IExportContext",
    "local_header_href": "#iexportcontext",
    "chunk_text": "<h5>IExportContext</h5><p>An interface of which interface is used in a custom export of a Revit model.\nThe instance of this class is passed in as a parameter of a CustomExporter.\nThe methods are then called by Revit at times of exporting entities of the model.</p>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Render Node Classes",
    "local_header_href": "#render-node-classes",
    "chunk_text": "<h5>Render Node Classes</h5><p>Classes of which instance are sent to an export context during a custom export.</p><ul>\n<li>RenderNode – base class for all output nodes</li>\n<li>ViewNode – represents a View</li>\n<li>GroupNode – base class for family and link instances</li>\n<li>InstanceNode – represents an instance of a family</li>\n<li>LinkNode – represents an external link</li>\n<li>ContentNode – base class from RPC, Light, and Daylight nodes</li>\n<li>RPCNode – represents an RPC object</li>\n<li>DaylightPortalNode – represents a daylight portal</li>\n<li>LightNode – represents a light</li>\n<li>MaterialNode – represents a material change</li>\n</ul>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "CameraInfo",
    "local_header_href": "#camerainfo",
    "chunk_text": "<h5>CameraInfo</h5><p>A class that describes information about projection mapping of a 3D view to a rendered image.\nAn instance of this class can be obtained via a property of ViewNode.</p>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Usage Outline",
    "local_header_href": "#usage-outline",
    "chunk_text": "<h4>Usage Outline</h4><p>Here is minimal code snippet outlining the main components' interaction:</p><pre class=\"code\">\n  <span class=\"green\">// Instantiate custom context</span>\n \n  <span class=\"teal\">MyExportContext</span> context = <span class=\"blue\">new</span> <span class=\"teal\">MyExportContext</span>(\n    document );\n \n  <span class=\"green\">// Instantiate custom exporter</span>\n \n  <span class=\"teal\">CustomExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">CustomExporter</span>(\n    document, context );\n \n  <span class=\"green\">// Specify exporter settings</span>\n \n  exporter.IncludeFaces = <span class=\"blue\">false</span>;\n \n  exporter.ShouldStopOnError = <span class=\"blue\">false</span>;\n \n  <span class=\"green\">// Launch export process</span>\n \n  exporter.Export( view3D );\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Example Exporters",
    "local_header_href": "#example-exporters",
    "chunk_text": "<h4>Example Exporters</h4><p>I would like to present several different examples and ideas for making use of this functionality:</p><ul>\n<li><a href=\"#4\">Custom Exporter to XML</a></li>\n<li><a href=\"#5\">Custom Exporter to Collada</a></li>\n<li><a href=\"#6\">Custom Exporter to OBJ</a></li>\n<li><a href=\"#7\">Custom Exporter to JSON</a></li>\n</ul><p>The first two of these are discussed below; the latter two are currently just ideas for future projects.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Custom Exporter to XML",
    "local_header_href": "#custom-exporter-to-xml",
    "chunk_text": "<h4>Custom Exporter to XML</h4><p>Arnošt Löbel provided a sample add-in demonstrating and exercising just about all possible aspects of the custom exporter functionality.</p><p>It initially presents a user interface in which the different available options can be manually selected for testing purposes:</p><center>\n<img alt=\"Custom exporter options\" src=\"img/CustomExporterXml.png\" width=\"500\"/>\n</center><p>On validating the dialogue, the custom export is started and the data it receives is logged to an XML file.</p><p>I adapted Arnošt's original code slightly to ensure that spaces in the asset names and properties are replaced by underscore characters in order to define valid XML tags.</p><p>Here is\n\n<a href=\"zip/rac_basic_sample_project.xml\">rac_basic_sample_project.xml</a> containing\n\nthe XML output generated from the {3D} view of the standard Revit architectural basic sample project with that replacement in place, so you can see directly for yourself what the exact output generated by this system looks like.\nActually, maybe you cannot, because it is a rather unwieldy 41 MB in size.\nHere is\n\n<a href=\"zip/family_api_kitchen.xml\">family_api_kitchen.xml</a> instead, just over 4 MB, making it a bit more manageable, generated from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/family-api-nested-type-instance-and-symbol-retrieval.html#30\">\nfamily API kitchen sample model</a>.</p><p>I can see you are raring to go and explore this for yourself, so without further ado I hereby present\n\n<a href=\"zip/CustomExporterXml.zip\">\nCustomExporterXml.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for the XML custom exporter external command add-in.</p><p>Since the goal of this XML exporter sample is to present and test all possible custom exporter functionality, it is rather more complex than an average simple exporter, e.g. the following one to the Collada file format.</p><p>Thank you, Arnošt, for providing this powerful full-fledged exploration and testing tool!</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Custom Exporter to Collada",
    "local_header_href": "#custom-exporter-to-collada",
    "chunk_text": "<h4>Custom Exporter to Collada</h4><p>A much simpler custom exporter example than the full-featured export to XML described above is this real-world\n\n<a href=\"http://lumion3d.com/lumion-exporter-for-autodesk-revit\">Revit Collada exporter</a> by\n\nArtur Brzegowy of\n\n<!-- <a href=\"http://www.vaal-triangle.com\">Vaal Triangle Systems Pvt. Ltd</a> -->\n<a href=\"http://www.lumion3d.com\">Act-3D B.V.</a> supporting\n\nexport to the\n\n<a href=\"https://collada.org\">\nCollada</a> model\n\nvisualisation format.</p><p>The external command mainline is very simple, basically just matching the outline presented above.</p><p>All the work resides in the custom exporter implementation and its numerous methods:</p><center>\n<img alt=\"Collada custom exporter methods\" src=\"img/CustomExporterCollada_methods.png\" width=\"300\"/>\n</center><p>Here is\n\n<a href=\"zip/CustomExporterCollada.zip\">\nCustomExporterCollada.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for the Collada custom exporter external command add-in.</p><p>Many thanks to Artur for sharing this!</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Custom Exporter to OBJ",
    "local_header_href": "#custom-exporter-to-obj",
    "chunk_text": "<h4>Custom Exporter to OBJ</h4><p>Another custom exporter candidate that I might return to later would be a replacement for my OBJ exporter for Revit 2013.\n\n<p>That implementation and its detailed description show the complications required to determine and traverse all the solids of all relevant model elements and export their graphics prior to the custom exporter API.\nAdditional work was required to determine their colour and other properties:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html\">OBJ model export considerations</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-exporter-take-one.html\">Take one</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-colours.html\">Colours</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-multiple-solid-support.html\">Multiple solid support</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-transparency-support.html\">Transparency support</a></li>\n</ul>\n<p>Almost of all of that complexity is now provided for free by the custom exporter API.</p>\n<p>Yet another example of the significant simplification provided by the custom exporter is the handling of\n\n<a href=\"http://forums.autodesk.com/t5/Autodesk-Revit-API/Is-element-hidden-in-linked-file/td-p/3754418\">\nhidden elements from a linked file in the host view</a>.\n\nFor instance, the API provides no external method to whether a specific wall in a linked file is hidden in the host 3D view.\nThe custom export support in 2014, however, will respect this and not pass elements which are hidden, whether locally, in links, or any of the other 40 or so possible ways to hide an element.\nOf course, this support is only available for 3D views and 3D exports, and restricted to Revit 2014 and later.\n\n\n<a name=\"7\"></a>\n<h4>Custom Exporter to JSON</h4>\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html\">Philippe Leefsma</a> recently\n\npresented an online\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/06/3d-webgl-viewer-with-javascript-and-threejs.html\">\n3D WebGL viewer</a> for\n\nboth mobile and desktop devices implemented using JavaScript,\n\n<a href=\"http://en.wikipedia.org/wiki/WebGL\">WebGL</a> and the\n\n<a href=\"http://threejs.org\">\nthreejs</a> library.\n\n<p>It displays graphics stored in the same custom JSON format that Philippe already defined for his initial\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/02/creating-a-cloud-based-viewer-part-x.html\">\ncloud based viewer</a> and\n\n<!--\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/liberate-your-apps-presentation-and-demo-recording.html\">\nADN DevDays cloud and mobile demonstration</a>,\n-->\n\nfor which\n\n<a href=\"http://adndevblog.typepad.com/aec/adam-nagy.html\">Adam Nagy</a> in\n\nturn implemented a\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-1.html\">\nRevit 2013 exporter</a>.</p>\n<p>I would love to create a Revit exporter for this format based on the new custom exporter API, for fun and comparison.</p>\n<p>As you can see, this framework provides powerful new functionality with many important applications.</p>\n<p>I am looking forward to hearing what you make use of it for.</p>\n</p></p>"
  },
  {
    "original_filename": "0979_custom_exporter",
    "header_text": "Custom Exporter to JSON",
    "local_header_href": "#custom-exporter-to-json",
    "chunk_text": "<h4>Custom Exporter to JSON</h4><a href=\"http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html\">Philippe Leefsma</a><a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/06/3d-webgl-viewer-with-javascript-and-threejs.html\">\n3D WebGL viewer</a><a href=\"http://en.wikipedia.org/wiki/WebGL\">WebGL</a><a href=\"http://threejs.org\">\nthreejs</a><p>It displays graphics stored in the same custom JSON format that Philippe already defined for his initial\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/02/creating-a-cloud-based-viewer-part-x.html\">\ncloud based viewer</a> and\n\n<!--\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/liberate-your-apps-presentation-and-demo-recording.html\">\nADN DevDays cloud and mobile demonstration</a>,\n-->\n\nfor which\n\n<a href=\"http://adndevblog.typepad.com/aec/adam-nagy.html\">Adam Nagy</a> in\n\nturn implemented a\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-1.html\">\nRevit 2013 exporter</a>.</p><p>I would love to create a Revit exporter for this format based on the new custom exporter API, for fun and comparison.</p><p>As you can see, this framework provides powerful new functionality with many important applications.</p><p>I am looking forward to hearing what you make use of it for.</p>"
  }
]