[
  {
    "original_filename": "0171_view_sketch_plane",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0171_view_sketch_plane",
    "header_text": "View Sketch Plane",
    "local_header_href": "#view-sketch-plane",
    "chunk_text": "<h3>View Sketch Plane</h3><p>Some views provide a sketch plane, others do not. In particular, the section views do not. \nHere is a little exploration into this subject prompted by the following question from Toste Wallmark of \n\n<a href=\"http://www.i-tecton.com\">\nTecton Limited</a>:</p><p><strong>Question:</strong>\nI'm trying to get the SketchPlane property of currently active view, which is a section view. \nHowever, it returns null.\nDo I need to manually create a sketch plane for section views?\nOther types of views, like floor plans, do correctly return a SketchPlane object.</p><p><strong>Answer:</strong>\nI implemented a little dedicated sample application to test your assertion, and I can reproduce what you say in the sample projects that I have looked at so far.</p><p>I would recommend to always check whether the sketch plane returned from a view is null or not. \nIn case it is null, you will obviously have to create your own.\nYou can do so using the view origin and direction. \nThese values are always available from the corresponding properties on the view object, even though the view plane is null.</p><p>Here is the result of searching for all document elements that are of the View class or one of its five derived classes.\nLooking at a separate listing of all database elements, I noticed that many of the view related objects occur in pairs, like the elements used for level 1 and 2 below with the element id pairs (13073, 13077) and (15915, 15919). \nIn the other cases, the object type of only one of the two related objects is View, whereas the other is simply a Revit Element and thus does not appear in this list:</p><center>\n<img alt=\"View sketch planes\" src=\"img/view_sketch_planes.png\"/>\n</center><p>I also print out this list to the Visual Studio debug output window. \nThe overly long lines can be seen by copying this text to an editor:</p><pre>\nList of document views' sketch planes: \n\nView [3651] Project View origin (0,0,0) direction (0,-1,0): <null sketch=\"\">\nViewPlan [13073] Level 1 origin (0,0,0) direction (0,0,1): Level 1 plane origin (0,0,0), plane normal (0,0,1)\nViewPlan [13077] Level 1 origin (0,0,0) direction (0,0,1): Level 1 plane origin (0,0,0), plane normal (0,0,1)\nViewPlan [15915] Level 2 origin (0,0,0) direction (0,0,1): Level 2 plane origin (0,0,13.12), plane normal (0,0,1)\nViewPlan [15919] Level 2 origin (0,0,0) direction (0,0,1): Level 2 plane origin (0,0,13.12), plane normal (0,0,1)\nView [29152] North origin (-1.04,84.1,3.94) direction (0,1,0): <null sketch=\"\">\nView [29193] East origin (84.12,-2.54,3.94) direction (1,0,0): <null sketch=\"\">\nView [29214] West origin (-84.13,-2.42,3.94) direction (-1,0,0): <null sketch=\"\">\nView [29233] South origin (-1.08,-84.12,3.94) direction (0,-1,0): <null sketch=\"\">\nViewPlan [29273] Site origin (0,0,0) direction (0,0,1): Level 1 plane origin (0,0,0), plane normal (0,0,1)\nView [92030] System Browser origin (0,0,0) direction (0,0,1): <null sketch=\"\">\nView [138046] Section 1 origin (-20.55,2.78,13.12) direction (-1,0,0): <null sketch=\"\">\n</null></null></null></null></null></null></null></pre><p>Note that this list includes a view object for the system browser, which obviously has no sketch plane at all. \nIt still returns valid values for the view origin and direction.</p><p>Here are the utility methods used by the external command which generates this list:</p><pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> RealString( <span class=\"blue\">double</span> a )\n{\n  <span class=\"blue\">return</span> a.ToString( <span class=\"maroon\">\"0.##\"</span> );\n}\n \n<span class=\"blue\">static</span> <span class=\"blue\">string</span> PointString( <span class=\"teal\">XYZ</span> p )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( \n    <span class=\"maroon\">\"({0},{1},{2})\"</span>,\n    RealString( p.X ), \n    RealString( p.Y ),\n    RealString( p.Z ) );\n}\n \n<span class=\"blue\">static</span> <span class=\"blue\">string</span> PlaneString( <span class=\"teal\">Plane</span> p )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( \n    <span class=\"maroon\">\"plane origin {0}, plane normal {1}\"</span>,\n    PointString( p.Origin ), \n    PointString( p.Normal ) );\n}\n \n<span class=\"blue\">static</span> <span class=\"teal\">Filter</span> OrType( \n  <span class=\"teal\">Filter</span> f, \n  <span class=\"teal\">Type</span> t, \n  Autodesk.Revit.Creation.<span class=\"teal\">Filter</span> cf )\n{\n  <span class=\"teal\">Filter</span> f2 = cf.NewTypeFilter( t );\n  <span class=\"blue\">return</span> cf.NewLogicOrFilter( f, f2 );\n}\n</pre><p>Here is the code of the external command Execute method:</p><pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n<span class=\"teal\">View</span> activeView = doc.ActiveView;\n \nAutodesk.Revit.Creation.<span class=\"teal\">Filter</span> cf \n  = app.Create.Filter;\n \n<span class=\"teal\">Filter</span> f1 = cf.NewTypeFilter( <span class=\"blue\">typeof</span>( <span class=\"teal\">View</span> ) );\n<span class=\"teal\">Filter</span> f2 = OrType( f1, <span class=\"blue\">typeof</span>( <span class=\"teal\">View3D</span> ), cf );\n<span class=\"teal\">Filter</span> f3 = OrType( f2, <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewDrafting</span> ), cf );\n<span class=\"teal\">Filter</span> f4 = OrType( f3, <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewPlan</span> ), cf );\n<span class=\"teal\">Filter</span> f5 = OrType( f4, <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewSection</span> ), cf );\n<span class=\"teal\">Filter</span> f6 = OrType( f5, <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewSheet</span> ), cf );\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt; views = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt;();\ndoc.get_Elements( f6, views );\n \n<span class=\"teal\">Debug</span>.Assert( 0 &lt; views.Count, \n  <span class=\"maroon\">\"expected document to have at leat one view\"</span> );\n \n<span class=\"blue\">string</span> msg \n  = <span class=\"maroon\">\"List of document views' sketch planes: \"</span> \n  + <span class=\"teal\">Environment</span>.NewLine;\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> view <span class=\"blue\">in</span> views )\n{\n  msg += <span class=\"blue\">string</span>.Format( \n    <span class=\"maroon\">\"{0}{1} [{2}] {3} origin {4} direction {5}: \"</span>, \n    <span class=\"teal\">Environment</span>.NewLine, \n    view.GetType().Name, \n    view.Id.Value, \n    view.Name,\n    PointString( view.Origin ),\n    PointString( view.ViewDirection ) );\n \n  <span class=\"teal\">SketchPlane</span> sketch = view.SketchPlane;\n  msg += ( <span class=\"blue\">null</span> == sketch ) \n    ? <span class=\"maroon\">\"&lt;null sketch&gt;\"</span> \n    : sketch.Name + <span class=\"maroon\">\" \"</span> + PlaneString( sketch.Plane );\n}\n<span class=\"teal\">Debug</span>.Print( msg );\nWinForms.<span class=\"teal\">MessageBox</span>.Show( msg, <span class=\"maroon\">\"View Sketch Planes\"</span> );\n<span class=\"blue\">return</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Failed;\n</pre><p>Note that specifying a type filter when calling the document get_Elements method does not return derived types, only the specific type given.\nSince I wish to retrieve all types derived from the View class as well as base class View elements, I need to create a Boolean expression or'ing together all of them.\nFor this purpose, I invented a nice new little OrType method for succinctly or'ing together a sequence of type filters.</p>"
  }
]