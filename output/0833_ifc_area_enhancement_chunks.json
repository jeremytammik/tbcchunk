[
  {
    "original_filename": "0833_ifc_area_enhancement",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0833_ifc_area_enhancement",
    "header_text": "IFC Export Area Calculation Enhancement",
    "local_header_href": "#ifc-export-area-calculation-enhancement",
    "chunk_text": "<h3>IFC Export Area Calculation Enhancement</h3><p>Here is a typical question that may arise when working with IFC export and shows the importance of the extension possibilities provided by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/revit-ifc-exporter-released-as-open-source.html\">\nIFC export open source project</a>:\n\n<p><strong>Question:</strong> How are the areas and volumes of walls, rooms, floors, etc. calculated for the IFC export? \nAre any standards being used?\n\n<p>Some examples of values and parameters in question when we export IFC files from Revit:\n\n<ul>\n<li>For rooms IfcSpace under BaseQuantities: GrossFloorArea, NetFloorArea; these values are the same in my trials.\n\n<li>Base quantities of walls are missing for IfcWall but present in IfcWallStandardCase; why is this?\n\n<li>For IfcWall under dimensions (IfcPropertySet): Area, Volume, Length.\n\n<li>For IfcWallStandardCase under BaseQuantities (IfcElementQuantity): Height, Length, Width, GrossSideArea, GrossFootPrintArea, GrossVolume.\n</li></li></li></li></ul>\n<p>Some other CAD products define other parameters as well; for example, a wall may provide both GrossSideArea and NetSideArea, GrossVolume and NetVolume.\n\n<p>Can we get this from Revit also? \nWould this require us to modify the export, e.g. through the open source project, calculate net parameters, and so on?\n\n\n<p><strong>Answer:</strong> Good questions!\n\n<ul>\n<li>Regarding the rooms IfcSpace BaseQuantities GrossFloorArea and NetFloorArea: I think currently they point to the same internal area, which of course is not ideal.  \nRevit only has one type of room area calculation at a time, so it is a bit difficult to get multiple areas from the same room.\n\n<li>Some of the wall areas are calculated based on the extrusion that is generated on output.  \nGenerally, for IfcWall, there is no extrusion, so we can't calculate the particular values.  \nThat said, we can re-examine to see if there are more properties that can be retrieved directly from the original Revit element.\n\n<li>Regarding 'more parameters from other products':  I'll summarize how it currently works, and what could be done:\n\n<ol type=\"a\">\n<li>We generally export the parameters that Revit already calculates.  \nThe IFC export intentionally does not implement a lot of its own 'QTO' (Quantity Take-Off) calculations.\n\n<li>Since the IFC code was originally written for QTO, it is possible that more Revit quantities have been added to the project since then.\nAdding to the open source project would easily write out those quantities to the IFC file.\n\n<li>For others, we would have to do some calculations.\nThese could be done as part of the open source project, requested from the Revit development team, or implemented as a separate Revit add-in, e.g. by adding custom parameters or extensible storage data to the model, which the IFC export could pick up and handle if it is found.\n</li></li></li></ol>\n</li></li></li></ul>\n<p>If you are thinking of amending the open source code and you make changes that you think would be beneficial to the entire community, we'd appreciate if you considered 'donating' your changes to the project.\n\n\n\n<a name=\"2\"></a>\n<h4>Async and Await Easily Enable Asynchronous Interaction</h4>\n<p>Continuing our cloud and web service ruminations, here is an interesting little hint on asynchronous interactions:\n\n<p>If you are thinking of implementing asynchronous interaction in your web service, which is often a very commendable and necessary thing to do in order to ensure responsiveness and avoid user frustration at a program that just hangs and does nothing, you can save yourself a lot of effort by looking at the async and await keywords provided in the .NET Framework 4.5 Beta.\n\n<p>The asynchronous programming model used in last few years requires a lot of careful attention while coding, which is tremendously simplified by the async features in the latest versions of C# and Visual Basic.\n\n<p>For a very readable overview of this new feature, here is an MSDN article by Brandon Bray, \n\n<a href=\"http://blogs.msdn.com/b/dotnet/archive/2012/04/03/async-in-4-5-worth-the-await.aspx\">\nAsync in 4.5: Worth the Await</a>,\n\nand an\n\n<a href=\"http://blogs.msdn.com/b/pfxteam/archive/2012/04/12/10293335.aspx\">\nasync and await FAQ</a> by \n\nStephen Toub.\n\n<p>Unfortunately, as far as I can tell, .NET 4.5 cannot be used with Visual Studio 2010, so I cannot play with this until I move on a bit, which I will try to postpone until I get a new machine, which should happen any time now.\nI recently installed \n\n<a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=30683\">\nMVC 4</a> and\n\nthus proved first-hand that it works with VS 2010, which in turn proves that that does not require .NET 4.5.\n\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0833_ifc_area_enhancement",
    "header_text": "Async and Await Easily Enable Asynchronous Interaction",
    "local_header_href": "#async-and-await-easily-enable-asynchronous-interaction",
    "chunk_text": "<h4>Async and Await Easily Enable Asynchronous Interaction</h4><p>Continuing our cloud and web service ruminations, here is an interesting little hint on asynchronous interactions:\n\n<p>If you are thinking of implementing asynchronous interaction in your web service, which is often a very commendable and necessary thing to do in order to ensure responsiveness and avoid user frustration at a program that just hangs and does nothing, you can save yourself a lot of effort by looking at the async and await keywords provided in the .NET Framework 4.5 Beta.\n\n<p>The asynchronous programming model used in last few years requires a lot of careful attention while coding, which is tremendously simplified by the async features in the latest versions of C# and Visual Basic.\n\n<p>For a very readable overview of this new feature, here is an MSDN article by Brandon Bray, \n\n<a href=\"http://blogs.msdn.com/b/dotnet/archive/2012/04/03/async-in-4-5-worth-the-await.aspx\">\nAsync in 4.5: Worth the Await</a>,\n\nand an\n\n<a href=\"http://blogs.msdn.com/b/pfxteam/archive/2012/04/12/10293335.aspx\">\nasync and await FAQ</a> by \n\nStephen Toub.\n\n<p>Unfortunately, as far as I can tell, .NET 4.5 cannot be used with Visual Studio 2010, so I cannot play with this until I move on a bit, which I will try to postpone until I get a new machine, which should happen any time now.\nI recently installed \n\n<a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=30683\">\nMVC 4</a> and\n\nthus proved first-hand that it works with VS 2010, which in turn proves that that does not require .NET 4.5.\n\n</p></p></p></p></p>"
  }
]