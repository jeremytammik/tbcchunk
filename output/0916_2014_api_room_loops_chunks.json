[
  {
    "original_filename": "0916_2014_api_room_loops",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0916_2014_api_room_loops",
    "header_text": "Revit 2014 API and Plan View Room Boundary Loops",
    "local_header_href": "#revit-2014-api-and-plan-view-room-boundary-loops",
    "chunk_text": "<h3>Revit 2014 API and Plan View Room Boundary Loops</h3><p>I am continuing the research and development for my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/cloud-mobile-extensible-storage-data-use-in-schedules.html#3\">\ncloud-based round-trip 2D Revit model editing project</a>.\n\n<p>At the same time, Revit 2014 has been announced, and I am sure you are eager to hear more about that, especially from the API point of view, so let's have a look at that first.</p>\n<a name=\"2\"></a>\n<h4>The Revit 2014 API</h4>\n<p>It is impossible to cover everything, and I have to start somewhere.</p>\n<p>Here are a couple of highlights:</p>\n<ul>\n<li>API access to the project browser and selected elements; API commands and macros are enabled.</li>\n<li>Copy and paste API supports copy within or between documents including view-specific elements.</li>\n<li>Full API support for the new non-rectangular crop regions.</li>\n<li>Schedule API now provides formatting control and read-write access to individual data items.</li>\n<li>Command API enables programmatic command launch including built-in Revit, external add-in and macro.</li>\n<li>Add-in API supports mid-session loading and execution.</li>\n<li>Displaced elements API enables exploded views.</li>\n<li>Join geometry API to create or remove a Boolean join and control join order.</li>\n<li>FreeForm element API enables modification of solid geometry imported from  e.g. DWG or SAT.</li>\n<li>Site API enables editing of topography surface points and supports sub-regions.</li>\n<li>MEP calculations are moved to external services and can be replaced by add-ins.</li>\n<li>Structural reinforcement and rebar enhancements.</li>\n<li>Enhanced document open, save and worksharing API.</li>\n<li>Linked model API supports loading, unloading, path manipulation, link identification and creation.</li>\n<li>Linked model interaction enables tag creation for linked rooms, linked element selection, geometric reference conversion, etc.</li>\n<li>Import DXF markup, import and link SAT and SketchUp.</li>\n<li>Export to NavisWorks via add-in, access DWG, IFC and DGN layer, linetype, lineweight, font and pattern tables.</li>\n<li>Direct API access to rendering output pipeline including all geometry and material properties.</li>\n<li>Macro API provides support for Python and Ruby development plus List, create, delete and execute modules, macros and security settings.</li>\n</ul>\n<p>How does that sound?</p>\n<p>Rather a lot of new stuff, isn't there?</p>\n<p>Rather a lot of <b>really exciting</b> new stuff, isn't there?</p>\n<p>Joe Ye describes a few of these API features in a little more detail on the\n\n<a href=\"http://adndevblog.typepad.com/aec/2013/03/revit-2014-announced.html\">AEC DevBlog</a>.</p>\n<p>To round this off, here are the complete materials from the Revit 2014 DevDays presentations:</p>\n<ul>\n<li><a href=\"file:///a/lib/revit/2014/adn/devdays_online/revit_2014_api_presentation_slides.pdf\">Presentation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/revit_2014_api/index.html\">Recording</a>  <a href=\"/a/lib/revit/2014/adn/devdays_online/camtasia/web/revit_2014_api/index.html\">^</a></li>\n<li><a href=\"file:///a/lib/revit/2014/adn/devdays_online/revit_2014_api_sample_source_code.zip\">Sample code</a></li>\n</ul>\n<p>We will have all the time in the world to explore this in more detail anon.</p>\n<p>The material provided above should keep you occupied over the Easter weekend, however  :-)</p>\n<p>Enjoy!</p>\n<a name=\"3\"></a>\n<h4>Retrieving Plan View Room Boundary Polygon Loops</h4>\n<p>Returning to the cloud-based 2D model editing project, one of the first required components is an add-in that determines and uploads the room, furniture and equipment family instance boundary polygons to some globally accessible data repository for a simplified 2D plan view rendering on a mobile device.\n\n<p>As a first step in that direction, I revamped my code to retrieve and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/graphically-display-area-boundary-loops.html\">\ngraphically display area boundary loops</a> and\n\ncombined it with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#7\">\ninteger-based point class</a> that\n\nI implemented for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-transparency-support.html\">\nOBJ model exporter</a>.</p>\n<p>The task I want to achieve for the first part of this first step is to retrieve the room boundary and store the 2D loops in a cloud-based data repository.</p>\n<p>Since Revit does not support precision below one sixteenth of an inch, I might as well approximate all my data to something in that region.</p>\n<p>For performance and efficiency reasons, it is also useful to move my calculations from floating point double numbers to integers.</p>\n<p>Since I want to display my model on a mobile device with a limited resolution using SVG, integers also seem pretty appropriate.</p>\n<p>Very handily, a millimetre is just a little bit less than a sixteenth of an inch.</p>\n<p>That leads me to define the following integer-based 2D point class:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> An integer-based 2D point class.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">Point2dInt</span> : <span class=\"teal\">IComparable</span>&lt;<span class=\"teal\">Point2dInt</span>&gt;\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> X { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> Y { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _feet_to_mm = 25.4 * 12;\n \n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> ConvertFeetToMillimetres( <span class=\"blue\">double</span> d )\n  {\n    <span class=\"blue\">return</span> (<span class=\"blue\">int</span>) ( _feet_to_mm * d + 0.5 );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Convert a 3D Revit XYZ to a 2D millimetre </span>\n  <span class=\"gray\">///</span><span class=\"green\"> integer point by discarding the Z coordinate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and scaling from feet to mm.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> Point2dInt( <span class=\"teal\">XYZ</span> p )\n  {\n    X = ConvertFeetToMillimetres( p.X );\n    Y = ConvertFeetToMillimetres( p.Y );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> CompareTo( <span class=\"teal\">Point2dInt</span> a )\n  {\n    <span class=\"blue\">int</span> d = X - a.X;\n \n    <span class=\"blue\">if</span>( 0 == d )\n    {\n      d = Y - a.Y;\n    }\n    <span class=\"blue\">return</span> d;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">string</span> ToString()\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"({0},{1})\"</span>, X, Y );\n  }\n}\n</pre>\n<p>A room boundary may include several loops, for instance if a room surrounds some other space such as an elevator, i.e. its outer boundary loop contains some interior loops representing 'holes'.</p>\n<p>Therefore, the room GetBoundarySegments method returns a list of loops, and each loop as a list of boundary segments:</p>\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops = room.\n    GetBoundarySegments( opt );\n</pre>\n<p>I therefore define my own integer-based 2D loop and list of loops classes like this:</p>\n<pre class=\"code\">\n  <span class=\"blue\">class</span> <span class=\"teal\">JtLoop</span> : <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point2dInt</span>&gt;\n  {\n    <span class=\"blue\">public</span> JtLoop( <span class=\"blue\">int</span> capacity )\n      : <span class=\"blue\">base</span>( capacity )\n    {\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">string</span> ToString()\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>, <span class=\"blue\">this</span> );\n    }\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">JtLoops</span> : <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtLoop</span>&gt;\n  {\n    <span class=\"blue\">public</span> JtLoops( <span class=\"blue\">int</span> capacity )\n      : <span class=\"blue\">base</span>( capacity )\n    {\n    }\n  }\n</pre>\n<p>The code to retrieve the boundary segments and convert them to my own representation can be implemented as follows:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the room plan view boundary </span>\n<span class=\"gray\">///</span><span class=\"green\"> polygon loops and convert to 2D integer-based.</span>\n<span class=\"gray\">///</span><span class=\"green\"> For optimisation and consistency reasons, </span>\n<span class=\"gray\">///</span><span class=\"green\"> convert all coordinates to integer values in</span>\n<span class=\"gray\">///</span><span class=\"green\"> millimetres. Revit precision is limited to </span>\n<span class=\"gray\">///</span><span class=\"green\"> 1/16 of an inch, which is abaut 1.2 mm, anyway.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">JtLoops</span> GetRoomLoops( <span class=\"teal\">Room</span> room )\n{\n  <span class=\"teal\">SpatialElementBoundaryOptions</span> opt\n    = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n  opt.SpatialElementBoundaryLocation =\n    <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center; <span class=\"green\">// loops closed</span>\n    <span class=\"green\">//SpatialElementBoundaryLocation.Finish; // loops not closed</span>\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops = room.\n    GetBoundarySegments( opt );\n \n  <span class=\"blue\">int</span> nLoops = loops.Count;\n \n  <span class=\"teal\">JtLoops</span> jtloops = <span class=\"blue\">new</span> <span class=\"teal\">JtLoops</span>( nLoops );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt; loop <span class=\"blue\">in</span> loops )\n  {\n    <span class=\"blue\">int</span> nSegments = loop.Count;\n \n    <span class=\"teal\">JtLoop</span> jtloop = <span class=\"blue\">new</span> <span class=\"teal\">JtLoop</span>( nSegments );\n \n    <span class=\"teal\">XYZ</span> p0 = <span class=\"blue\">null</span>; <span class=\"green\">// loop start point</span>\n    <span class=\"teal\">XYZ</span> p; <span class=\"green\">// segment start point</span>\n    <span class=\"teal\">XYZ</span> q = <span class=\"blue\">null</span>; <span class=\"green\">// segment end point</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">BoundarySegment</span> seg <span class=\"blue\">in</span> loop )\n    {\n      p = seg.Curve.get_EndPoint( 0 );\n \n      jtloop.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( p ) );\n \n      <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> == q || q.IsAlmostEqualTo( p ),\n        <span class=\"maroon\">\"expected last endpoint to equal current start point\"</span> );\n \n      q = seg.Curve.get_EndPoint( 1 );\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} --&gt; {1}\"</span>,\n        <span class=\"teal\">Util</span>.PointString( p.ToUv() ),\n        <span class=\"teal\">Util</span>.PointString( q.ToUv() ) );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n      {\n        p0 = p; <span class=\"green\">// save loop start point</span>\n      }\n    }\n    <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( p0 ),\n      <span class=\"maroon\">\"expected last endpoint to equal loop start point\"</span> );\n \n    jtloops.Add( jtloop );\n  }\n  <span class=\"blue\">return</span> jtloops;\n}\n</pre>\n<p>My external command mainline Execute method driving this method also implements some fancy pre- and post-selection support and reporting code listing the contents of my 2D integer-based loops in the Visual Studio debug output window:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == doc )\n  {\n    ErrorMsg( <span class=\"maroon\">\"Please run this command in a valid\"</span>\n      + <span class=\"maroon\">\" Revit project document.\"</span> );\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"green\">// Iterate over all pre-selected rooms</span>\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">if</span>( 0 &lt; sel.Elements.Size )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( !( e <span class=\"blue\">is</span> <span class=\"teal\">Room</span> ) )\n      {\n        ErrorMsg( <span class=\"maroon\">\"Please pre-select only room\"</span>\n          + <span class=\"maroon\">\" elements before running this command.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ids )\n      {\n        ids = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( 1 );\n      }\n \n      ids.Add( e.Id );\n    }\n  }\n \n  <span class=\"green\">// If no rooms were pre-selected, </span>\n  <span class=\"green\">// prompt for post-selection</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ids )\n  {\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Reference</span>&gt; refs = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      refs = sel.PickObjects( <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">RoomSelectionFilter</span>(),\n        <span class=\"maroon\">\"Please select rooms.\"</span> );\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n      .<span class=\"teal\">OperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n    ids = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n      refs.Select&lt;<span class=\"teal\">Reference</span>, <span class=\"teal\">ElementId</span>&gt;(\n        r =&gt; r.ElementId ) );\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n  {\n    <span class=\"teal\">Element</span> e = doc.GetElement( id );\n \n    <span class=\"teal\">Debug</span>.Assert( e <span class=\"blue\">is</span> <span class=\"teal\">Room</span>,\n      <span class=\"maroon\">\"expected parts only\"</span> );\n \n    <span class=\"teal\">JtLoops</span> roomLoops = GetRoomLoops( e <span class=\"blue\">as</span> <span class=\"teal\">Room</span> );\n \n    <span class=\"blue\">int</span> nLoops = roomLoops.Count;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} has {1} loop{2}{3}\"</span>,\n      <span class=\"teal\">Util</span>.ElementDescription( e ), nLoops,\n      <span class=\"teal\">Util</span>.PluralSuffix( nLoops ),\n      <span class=\"teal\">Util</span>.DotOrColon( nLoops ) );\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">JtLoop</span> loop <span class=\"blue\">in</span> roomLoops )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>, i++, loop.ToString() );\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>I tested this on a simple sample room with one hole:</p>\n<center>\n<img alt=\"Room with a hole\" src=\"img/room_with_hole.png\" width=\"300\"/>\n</center>\n<p>The original start and end points of the boundary segments for this room are reported as follows:</p>\n<pre class=\"code\">\n  (9.03,10.13,0) --&gt; (-14.59,10.13,0)\n  (-14.59,10.13,0) --&gt; (-14.59,1.93,0)\n  (-14.59,1.93,0) --&gt; (-2.45,1.93,0)\n  (-2.45,1.93,0) --&gt; (-2.45,-3.98,0)\n  (-2.45,-3.98,0) --&gt; (9.03,-3.98,0)\n  (9.03,-3.98,0) --&gt; (9.03,10.13,0)\n  (0.98,-0.37,0) --&gt; (0.98,1.93,0)\n  (0.98,1.93,0) --&gt; (5.57,1.93,0)\n  (5.57,1.93,0) --&gt; (5.57,-0.37,0)\n  (5.57,-0.37,0) --&gt; (0.98,-0.37,0)\n</pre>\n<p>Converting these to my 2D integer-based loop classes and listing those generates the following debug output:</p>\n<pre class=\"code\">\nRoom Rooms &lt;212639 Room 1&gt; has 2 loops:\n  0: (2753,3087), (-4446,3087), (-4446,587),\n     (-746,587), (-746,-1212), (2753,-1212)\n  1: (298,-112), (298,587), (1698,587), (1698,-112)\n</pre>\n<p>So far, so good.</p>\n<p>As far as I can tell, all systems go.</p>\n<p>My next step for this add-in is to implement code to determine 2D plan view boundary polygons for the furniture and equipment family instances contained within the selected room.</p>\n<p>I am hoping to be able to make use of the ExtrusionAnalyzer class for this.\nAs I mentioned, it is supplied a solid geometry, a plane, and a direction.\nFrom those, it calculates the outer boundary of the shadow cast by the solid onto the input plane along the extrusion direction.</p>\n<p>At the same time, I am continuing to explore options for a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html\">\ncloud-based data repository</a>.</p>\n<p>And I have my day-to-day support tasks to attend to too...</p>\n<p>Anyway, here is\n\n<a href=\"zip/GetRoomLoops.zip\">GetRoomLoops.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the current state of this external command.\n</p></p></p>"
  },
  {
    "original_filename": "0916_2014_api_room_loops",
    "header_text": "The Revit 2014 API",
    "local_header_href": "#the-revit-2014-api",
    "chunk_text": "<h4>The Revit 2014 API</h4><p>It is impossible to cover everything, and I have to start somewhere.</p><p>Here are a couple of highlights:</p><ul>\n<li>API access to the project browser and selected elements; API commands and macros are enabled.</li>\n<li>Copy and paste API supports copy within or between documents including view-specific elements.</li>\n<li>Full API support for the new non-rectangular crop regions.</li>\n<li>Schedule API now provides formatting control and read-write access to individual data items.</li>\n<li>Command API enables programmatic command launch including built-in Revit, external add-in and macro.</li>\n<li>Add-in API supports mid-session loading and execution.</li>\n<li>Displaced elements API enables exploded views.</li>\n<li>Join geometry API to create or remove a Boolean join and control join order.</li>\n<li>FreeForm element API enables modification of solid geometry imported from  e.g. DWG or SAT.</li>\n<li>Site API enables editing of topography surface points and supports sub-regions.</li>\n<li>MEP calculations are moved to external services and can be replaced by add-ins.</li>\n<li>Structural reinforcement and rebar enhancements.</li>\n<li>Enhanced document open, save and worksharing API.</li>\n<li>Linked model API supports loading, unloading, path manipulation, link identification and creation.</li>\n<li>Linked model interaction enables tag creation for linked rooms, linked element selection, geometric reference conversion, etc.</li>\n<li>Import DXF markup, import and link SAT and SketchUp.</li>\n<li>Export to NavisWorks via add-in, access DWG, IFC and DGN layer, linetype, lineweight, font and pattern tables.</li>\n<li>Direct API access to rendering output pipeline including all geometry and material properties.</li>\n<li>Macro API provides support for Python and Ruby development plus List, create, delete and execute modules, macros and security settings.</li>\n</ul><p>How does that sound?</p><p>Rather a lot of new stuff, isn't there?</p><p>Rather a lot of <b>really exciting</b> new stuff, isn't there?</p><p>Joe Ye describes a few of these API features in a little more detail on the\n\n<a href=\"http://adndevblog.typepad.com/aec/2013/03/revit-2014-announced.html\">AEC DevBlog</a>.</p><p>To round this off, here are the complete materials from the Revit 2014 DevDays presentations:</p><ul>\n<li><a href=\"file:///a/lib/revit/2014/adn/devdays_online/revit_2014_api_presentation_slides.pdf\">Presentation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/revit_2014_api/index.html\">Recording</a>  <a href=\"/a/lib/revit/2014/adn/devdays_online/camtasia/web/revit_2014_api/index.html\">^</a></li>\n<li><a href=\"file:///a/lib/revit/2014/adn/devdays_online/revit_2014_api_sample_source_code.zip\">Sample code</a></li>\n</ul><p>We will have all the time in the world to explore this in more detail anon.</p><p>The material provided above should keep you occupied over the Easter weekend, however  :-)</p><p>Enjoy!</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0916_2014_api_room_loops",
    "header_text": "Retrieving Plan View Room Boundary Polygon Loops",
    "local_header_href": "#retrieving-plan-view-room-boundary-polygon-loops",
    "chunk_text": "<h4>Retrieving Plan View Room Boundary Polygon Loops</h4><p>Returning to the cloud-based 2D model editing project, one of the first required components is an add-in that determines and uploads the room, furniture and equipment family instance boundary polygons to some globally accessible data repository for a simplified 2D plan view rendering on a mobile device.\n\n<p>As a first step in that direction, I revamped my code to retrieve and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/graphically-display-area-boundary-loops.html\">\ngraphically display area boundary loops</a> and\n\ncombined it with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#7\">\ninteger-based point class</a> that\n\nI implemented for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-transparency-support.html\">\nOBJ model exporter</a>.</p>\n<p>The task I want to achieve for the first part of this first step is to retrieve the room boundary and store the 2D loops in a cloud-based data repository.</p>\n<p>Since Revit does not support precision below one sixteenth of an inch, I might as well approximate all my data to something in that region.</p>\n<p>For performance and efficiency reasons, it is also useful to move my calculations from floating point double numbers to integers.</p>\n<p>Since I want to display my model on a mobile device with a limited resolution using SVG, integers also seem pretty appropriate.</p>\n<p>Very handily, a millimetre is just a little bit less than a sixteenth of an inch.</p>\n<p>That leads me to define the following integer-based 2D point class:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> An integer-based 2D point class.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">Point2dInt</span> : <span class=\"teal\">IComparable</span>&lt;<span class=\"teal\">Point2dInt</span>&gt;\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> X { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> Y { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _feet_to_mm = 25.4 * 12;\n \n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> ConvertFeetToMillimetres( <span class=\"blue\">double</span> d )\n  {\n    <span class=\"blue\">return</span> (<span class=\"blue\">int</span>) ( _feet_to_mm * d + 0.5 );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Convert a 3D Revit XYZ to a 2D millimetre </span>\n  <span class=\"gray\">///</span><span class=\"green\"> integer point by discarding the Z coordinate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and scaling from feet to mm.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> Point2dInt( <span class=\"teal\">XYZ</span> p )\n  {\n    X = ConvertFeetToMillimetres( p.X );\n    Y = ConvertFeetToMillimetres( p.Y );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> CompareTo( <span class=\"teal\">Point2dInt</span> a )\n  {\n    <span class=\"blue\">int</span> d = X - a.X;\n \n    <span class=\"blue\">if</span>( 0 == d )\n    {\n      d = Y - a.Y;\n    }\n    <span class=\"blue\">return</span> d;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">string</span> ToString()\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"({0},{1})\"</span>, X, Y );\n  }\n}\n</pre>\n<p>A room boundary may include several loops, for instance if a room surrounds some other space such as an elevator, i.e. its outer boundary loop contains some interior loops representing 'holes'.</p>\n<p>Therefore, the room GetBoundarySegments method returns a list of loops, and each loop as a list of boundary segments:</p>\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops = room.\n    GetBoundarySegments( opt );\n</pre>\n<p>I therefore define my own integer-based 2D loop and list of loops classes like this:</p>\n<pre class=\"code\">\n  <span class=\"blue\">class</span> <span class=\"teal\">JtLoop</span> : <span class=\"teal\">List</span>&lt;<span class=\"teal\">Point2dInt</span>&gt;\n  {\n    <span class=\"blue\">public</span> JtLoop( <span class=\"blue\">int</span> capacity )\n      : <span class=\"blue\">base</span>( capacity )\n    {\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">string</span> ToString()\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>, <span class=\"blue\">this</span> );\n    }\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">JtLoops</span> : <span class=\"teal\">List</span>&lt;<span class=\"teal\">JtLoop</span>&gt;\n  {\n    <span class=\"blue\">public</span> JtLoops( <span class=\"blue\">int</span> capacity )\n      : <span class=\"blue\">base</span>( capacity )\n    {\n    }\n  }\n</pre>\n<p>The code to retrieve the boundary segments and convert them to my own representation can be implemented as follows:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the room plan view boundary </span>\n<span class=\"gray\">///</span><span class=\"green\"> polygon loops and convert to 2D integer-based.</span>\n<span class=\"gray\">///</span><span class=\"green\"> For optimisation and consistency reasons, </span>\n<span class=\"gray\">///</span><span class=\"green\"> convert all coordinates to integer values in</span>\n<span class=\"gray\">///</span><span class=\"green\"> millimetres. Revit precision is limited to </span>\n<span class=\"gray\">///</span><span class=\"green\"> 1/16 of an inch, which is abaut 1.2 mm, anyway.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">JtLoops</span> GetRoomLoops( <span class=\"teal\">Room</span> room )\n{\n  <span class=\"teal\">SpatialElementBoundaryOptions</span> opt\n    = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n  opt.SpatialElementBoundaryLocation =\n    <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center; <span class=\"green\">// loops closed</span>\n    <span class=\"green\">//SpatialElementBoundaryLocation.Finish; // loops not closed</span>\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops = room.\n    GetBoundarySegments( opt );\n \n  <span class=\"blue\">int</span> nLoops = loops.Count;\n \n  <span class=\"teal\">JtLoops</span> jtloops = <span class=\"blue\">new</span> <span class=\"teal\">JtLoops</span>( nLoops );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt; loop <span class=\"blue\">in</span> loops )\n  {\n    <span class=\"blue\">int</span> nSegments = loop.Count;\n \n    <span class=\"teal\">JtLoop</span> jtloop = <span class=\"blue\">new</span> <span class=\"teal\">JtLoop</span>( nSegments );\n \n    <span class=\"teal\">XYZ</span> p0 = <span class=\"blue\">null</span>; <span class=\"green\">// loop start point</span>\n    <span class=\"teal\">XYZ</span> p; <span class=\"green\">// segment start point</span>\n    <span class=\"teal\">XYZ</span> q = <span class=\"blue\">null</span>; <span class=\"green\">// segment end point</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">BoundarySegment</span> seg <span class=\"blue\">in</span> loop )\n    {\n      p = seg.Curve.get_EndPoint( 0 );\n \n      jtloop.Add( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( p ) );\n \n      <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> == q || q.IsAlmostEqualTo( p ),\n        <span class=\"maroon\">\"expected last endpoint to equal current start point\"</span> );\n \n      q = seg.Curve.get_EndPoint( 1 );\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} --&gt; {1}\"</span>,\n        <span class=\"teal\">Util</span>.PointString( p.ToUv() ),\n        <span class=\"teal\">Util</span>.PointString( q.ToUv() ) );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n      {\n        p0 = p; <span class=\"green\">// save loop start point</span>\n      }\n    }\n    <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( p0 ),\n      <span class=\"maroon\">\"expected last endpoint to equal loop start point\"</span> );\n \n    jtloops.Add( jtloop );\n  }\n  <span class=\"blue\">return</span> jtloops;\n}\n</pre>\n<p>My external command mainline Execute method driving this method also implements some fancy pre- and post-selection support and reporting code listing the contents of my 2D integer-based loops in the Visual Studio debug output window:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == doc )\n  {\n    ErrorMsg( <span class=\"maroon\">\"Please run this command in a valid\"</span>\n      + <span class=\"maroon\">\" Revit project document.\"</span> );\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"green\">// Iterate over all pre-selected rooms</span>\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">if</span>( 0 &lt; sel.Elements.Size )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( !( e <span class=\"blue\">is</span> <span class=\"teal\">Room</span> ) )\n      {\n        ErrorMsg( <span class=\"maroon\">\"Please pre-select only room\"</span>\n          + <span class=\"maroon\">\" elements before running this command.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ids )\n      {\n        ids = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( 1 );\n      }\n \n      ids.Add( e.Id );\n    }\n  }\n \n  <span class=\"green\">// If no rooms were pre-selected, </span>\n  <span class=\"green\">// prompt for post-selection</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ids )\n  {\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Reference</span>&gt; refs = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">try</span>\n    {\n      refs = sel.PickObjects( <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"blue\">new</span> <span class=\"teal\">RoomSelectionFilter</span>(),\n        <span class=\"maroon\">\"Please select rooms.\"</span> );\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n      .<span class=\"teal\">OperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n    ids = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n      refs.Select&lt;<span class=\"teal\">Reference</span>, <span class=\"teal\">ElementId</span>&gt;(\n        r =&gt; r.ElementId ) );\n  }\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n  {\n    <span class=\"teal\">Element</span> e = doc.GetElement( id );\n \n    <span class=\"teal\">Debug</span>.Assert( e <span class=\"blue\">is</span> <span class=\"teal\">Room</span>,\n      <span class=\"maroon\">\"expected parts only\"</span> );\n \n    <span class=\"teal\">JtLoops</span> roomLoops = GetRoomLoops( e <span class=\"blue\">as</span> <span class=\"teal\">Room</span> );\n \n    <span class=\"blue\">int</span> nLoops = roomLoops.Count;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} has {1} loop{2}{3}\"</span>,\n      <span class=\"teal\">Util</span>.ElementDescription( e ), nLoops,\n      <span class=\"teal\">Util</span>.PluralSuffix( nLoops ),\n      <span class=\"teal\">Util</span>.DotOrColon( nLoops ) );\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">JtLoop</span> loop <span class=\"blue\">in</span> roomLoops )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>, i++, loop.ToString() );\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>I tested this on a simple sample room with one hole:</p>\n<center>\n<img alt=\"Room with a hole\" src=\"img/room_with_hole.png\" width=\"300\"/>\n</center>\n<p>The original start and end points of the boundary segments for this room are reported as follows:</p>\n<pre class=\"code\">\n  (9.03,10.13,0) --&gt; (-14.59,10.13,0)\n  (-14.59,10.13,0) --&gt; (-14.59,1.93,0)\n  (-14.59,1.93,0) --&gt; (-2.45,1.93,0)\n  (-2.45,1.93,0) --&gt; (-2.45,-3.98,0)\n  (-2.45,-3.98,0) --&gt; (9.03,-3.98,0)\n  (9.03,-3.98,0) --&gt; (9.03,10.13,0)\n  (0.98,-0.37,0) --&gt; (0.98,1.93,0)\n  (0.98,1.93,0) --&gt; (5.57,1.93,0)\n  (5.57,1.93,0) --&gt; (5.57,-0.37,0)\n  (5.57,-0.37,0) --&gt; (0.98,-0.37,0)\n</pre>\n<p>Converting these to my 2D integer-based loop classes and listing those generates the following debug output:</p>\n<pre class=\"code\">\nRoom Rooms &lt;212639 Room 1&gt; has 2 loops:\n  0: (2753,3087), (-4446,3087), (-4446,587),\n     (-746,587), (-746,-1212), (2753,-1212)\n  1: (298,-112), (298,587), (1698,587), (1698,-112)\n</pre>\n<p>So far, so good.</p>\n<p>As far as I can tell, all systems go.</p>\n<p>My next step for this add-in is to implement code to determine 2D plan view boundary polygons for the furniture and equipment family instances contained within the selected room.</p>\n<p>I am hoping to be able to make use of the ExtrusionAnalyzer class for this.\nAs I mentioned, it is supplied a solid geometry, a plane, and a direction.\nFrom those, it calculates the outer boundary of the shadow cast by the solid onto the input plane along the extrusion direction.</p>\n<p>At the same time, I am continuing to explore options for a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html\">\ncloud-based data repository</a>.</p>\n<p>And I have my day-to-day support tasks to attend to too...</p>\n<p>Anyway, here is\n\n<a href=\"zip/GetRoomLoops.zip\">GetRoomLoops.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the current state of this external command.\n</p></p>"
  }
]