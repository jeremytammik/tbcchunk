[
  {
    "original_filename": "0673_elementid_relationships",
    "header_text": "ElementId Relationships",
    "local_header_href": "#elementid-relationships",
    "chunk_text": "<h3>ElementId Relationships</h3><p>I recently looked at determining the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/filledregion-corrdinates.html\">\ncoordinates of a filled region</a> by\n\nlooking at the sketch related to it, which we can identify by using an unsupported feature of the current Revit implementation, the generation of consecutive element ids for related elements.\n\n<p>Rudolf Honke of \n\n<a href=\"http://www.acadgraph.de\">\nMensch und Maschine acadGraph GmbH</a> pointed \n\nout that this approach can be used to determine other relationships as well, and brought up a whole bunch of ideas related to this topic.\nHe says:\n\n<p>The sketch of a stair for example can also be found by 'stair.Id - 1', so we can access this type's generating curves, too. \n\n<p>Did you know that you also can access a section view symbol by decreasing the ViewSection.Id.IntegerValue by 1?\nI don't know if this is always the case, but in my files, the symbol for the section, i.e. the visible element that you use for manipulating the view itself, always has this relation to the according view.\n\n<p>In this case, 'symbol' means the 'viewer' or the 'viewPort', not the ElementType. \n'Viewer' versus 'view'.\n\n<p>This viewer-to-view relation is just an observation.\nApparently there are some other elements paired with each other that can also be identified in this way.\n\n<p>This opens up lots of possibilities to explore the viewer-view theme in more depth.\n\n<p>Thinking of Parameters that are 'shared' between viewer and view. \nThey will react to each other, but how are they 'mapped' to each other?\nOr think of a Parameter that is read-only in views but settable in viewers (but Parameters may have different names).\n\n<p>As mentioned looking at the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/filledregion-corrdinates.html\">\nfilled region coordinates</a>,\n\nthe difference between the paired elements may be greater than 1.\nSo one has to scan the nearer neighborhood, in fact.\n\n<p>In case of the FilledRegion/Sketch pair, we know that the type of the paired element is a Sketch.\nIn the case of View/Viewer, we must filter the \u001cnear\u001dby elements by category, which is \u001cOst_Viewers\u001d because the \u001cViewers\u001d are just elements\u001d.\n\n<p>I searched for some correlating parameters between them, but the only link between them seems to be their similar element ids.\n\n<p>Another thought on the stairs theme:\nif we can access the lines of the stair sketch, then perhaps we can edit them as well and and thus edit the shape of a whole stair programmatically?\n\n<p>These thoughts are just ideas.\nIt would be interesting to explore deeper into these topics.\nAny takers?\n\n<p>Obviously these kind of explorations make use of completely unsdocumented and unsupported features.\nUse of such features is completely at your own risk, and the behaviour may and will almost certainly change with no notice whatsoever at some point.\n\n<p><strong>Addendum by Arnošt Löbel</strong>, Sr. Principal Engineer in the Revit development team: I find the ideas presented in this article slightly disturbing especially if it was meant as suggestions for any production-level code. One thing is to poke around and look at the IDs to get some ideas how Revit put parts together or just for one's amusement. Another thing all together is using any of such discovered relations and assumed dependencies between Ids in actual production code. Please be aware that Revit (and Autodesk Revit developers) does not guarantee any fixed schema around element Ids. Assignments of Ids can change and possibly changes between versions and even between minor updates. Also, Ids are not constant – they can change and definitely would change in work-sharing environment.\n\n<p>I cannot agree more with Jeremy's wise advice: 'If you wish to have particular features in the Revit API, submit a 'wish' through Revit customer support.' Revit R&amp;D takes all requests very seriously and even though they cannot possibly satisfy all, they do their best to implement at least the 'hottest' wish-list items every release.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]