[
  {
    "original_filename": "0388_regen_required",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0388_regen_required",
    "header_text": "To Regenerate or Not to Regenerate...",
    "local_header_href": "#to-regenerate-or-not-to-regenerate",
    "chunk_text": "<h3>To Regenerate or Not to Regenerate...</h3><p>... that is the question.\n\n<p>We already discussed some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/regeneration-option-best-practices.html\">\nbest practices concerning the regeneration option</a>.\n\nA related topic is how often and when to make calls to the Document.Regenerate method, and how to eliminate such calls when possible.\n\n<p>One of the issues we ran into during today's DevLab had to do with performance and elimination of extraneous calls to this method.\nWe also learned that the location curve of a newly inserted family instance does not reflect the true insertion location until such a call has been made.\n\n<p>One participant is inserting a large number of vertical columns into the model, which require a rotation around their axis after insertion. \nThe original code required a document regeneration after each insertion and before rotating each column, which was very expensive and seemed rather mysterious.\nThis is actually a continuation of the issues we discussed in the comments on the post on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/performance-profiling.html\">\nperformance profiling</a>.\n\n<p>We finally tracked down the problem and found a simple solution to this.\nThe need for the extra regeneration call was caused because the rotation axis was being determined by querying each element for its location curve, i.e. something like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">XYZ</span> p = get_insertion_point();\n  <span class=\"teal\">XYZ</span> q = p + <span class=\"teal\">XYZ</span>.BasisZ;\n \n  <span class=\"teal\">Line</span> line = creapp.NewLineBound( p, q );\n \n  <span class=\"teal\">FamilyInstance</span> fi = credoc.NewFamilyInstance( \n    line, symbol, level, structuralType );\n \n  doc.Regenerate();\n \n  <span class=\"teal\">LocationCurve</span> lc = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n  <span class=\"teal\">Line</span> axis = lc.Curve <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n \n  doc.Rotate( fi, axis, angle );\n</pre>\n<p>Unfortunately, the code making the call to rotate the element was implemented in a different function, and it was not at all obvious that the rotation axis could easily make use of the same data that was used to define the symbol insertion point.\nInstead, querying the element location curve and using that to define the rotation axis seemed like a much more self-contained solution.\n\n<p>Every attempt to eliminate the regeneration call caused the element to return a stale location curve, which caused the rotation to unexpectedly move its position.\n\n<p>A much simpler solution is to determine the rotation axis directly from the known insertion point. \nThen we no longer rely on the element location property, and the regeneration can be eliminated:\n\n<pre class=\"code\">\n  <span class=\"teal\">XYZ</span> p = get_insertion_point();\n  <span class=\"teal\">XYZ</span> q = p + <span class=\"teal\">XYZ</span>.BasisZ;\n \n  <span class=\"teal\">Line</span> line = creapp.NewLineBound( p, q );\n \n  <span class=\"teal\">FamilyInstance</span> fi = credoc.NewFamilyInstance( \n    line, symbol, level, structuralType );\n \n  <span class=\"teal\">Line</span> axis = line;\n \n  doc.Rotate( fi, axis, angle );\n</pre>\n<p>A good thing to know.\nAlways be aware that not regenerating may cause properties to return stale values.\nIf you have other reliable methods to access up-to-date information, make use of them, and avoid the danger of stale data.\n\n<p>Looking at the code cleaned up and isolated like this, the use of the original line as the rotation axis seems very obvious.\nIn the original version, with the rotation was performed in a different function, it was not obvious at all.\n\n<!--\n  Autodesk.Revit.Creation.Application creapp = app.Application.Create;\n  Autodesk.Revit.Creation.Document credoc = doc.Create;\n  FamilySymbol symbol = null;\n  Level level = null;\n  Autodesk.Revit.DB.Structure.StructuralType structuralType = Autodesk.Revit.DB.Structure.StructuralType.NonStructural;\n  double angle = 0;\n-->\n</p></p></p></p></p></p></p></p></p></p>"
  }
]