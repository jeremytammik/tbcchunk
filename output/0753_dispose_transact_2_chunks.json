[
  {
    "original_filename": "0753_dispose_transact_2",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0753_dispose_transact_2",
    "header_text": "Using Using Automagically Disposes and Rolls Back",
    "local_header_href": "#using-using-automagically-disposes-and-rolls-back",
    "chunk_text": "<h3>Using Using Automagically Disposes and Rolls Back</h3><p>I talked about \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/scope-and-dispose-transactions.html\">\nscoping and disposing of transactions</a> last \n\nweek, and received prompt and interesting comments from two competent and experienced Revit add-in developers, Danny Polkinhorn and Guy Robinson (your name has to end in 'y' to be really good – tongue in cheek).\n\n<p><strong>Danny says:</strong> Should we also use Try...Catch blocks as well? \n\n<pre class=\"code\">\n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> trans \n    = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    <span class=\"blue\">try</span>\n    {\n      trans.Start();\n      <span class=\"green\">//code here</span>\n      trans.Commit();\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      trans.RollBack();\n      <span class=\"green\">//exception code here</span>\n    }\n  }\n</pre>\n<p>Do we need to roll back the transaction or does the Using block take care of that?\n\n\n<p><strong>Guy replies:</strong> I'm with Danny here, prefer to gracefully fail so use this format:\n\n<pre class=\"code\">\n  <span class=\"teal\">TransactionGroup</span> group;\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"blue\">using</span>( group = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n    {\n      group.Start( <span class=\"maroon\">\"Some group\"</span> );\n      <span class=\"green\">// . . .</span>\n    }\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> )\n  {\n    <span class=\"blue\">if</span>( group.HasStarted() &amp;&amp; !group.HasEnded() )\n    {\n      group.RollBack();\n    }\n  }\n</pre>\n<p>As so often in the past, I leave the final verdict to Arnošt Löbel, who replies with a clear 'no' to the suggestion of adding an exception handler around the 'using' block, because, as implied by the title, it automatically disposes, rolls back, and even handles exceptions:\n\n\n<p><strong>Answer:</strong> No, there is no need to explicitly roll back a transaction (or sub-transaction, transaction group) declared in a 'using' block. The destructor of the object will take of the rolling back when the object leaves the 'using' block.\n\n<p>However, it is still the responsibility of the programmer to commit the object properly.\nFor example, using what Guy wrote:\n\n<pre class=\"code\">\n  <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> group \n    = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n  {\n    group.Start( <span class=\"maroon\">\"Some group\"</span> );\n \n    <span class=\"green\">// do something here</span>\n \n    <span class=\"green\">// need to commit explicitly to</span>\n    <span class=\"green\">// avoid implicit rolling back</span>\n \n    group.Commit();  \n  }\n</pre>\n<p>By the way: I always commit or rollback explicitly if it is under my control. \nI only rely on the destructor for exceptions. \nI believe it makes the code easier to comprehend.\n\n<p>The snippet above is equivalent to (but more elegant than) the following:\n\n<pre class=\"code\">\n  <span class=\"teal\">TransactionGroup</span> group\n    = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc );\n \n  <span class=\"blue\">try</span>\n  {\n    group.Start( <span class=\"maroon\">\"Some group\"</span> );\n    <span class=\"green\">// do something here</span>\n    group.Commit();\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> )\n  {\n    <span class=\"green\">// this needs to be tested to </span>\n    <span class=\"green\">// avoid another potential exception</span>\n \n    <span class=\"blue\">if</span>( group.HasStarted() )\n    {\n      group.RollBack();\n    }\n \n    <span class=\"green\">// should re-throw if you do </span>\n    <span class=\"green\">// not know how to handle</span>\n \n    <span class=\"blue\">throw</span>;  \n  }\n</pre>\n<p>Adding  a 'using' block around this try-catch (like Guy did) is completely unnecessary and worthless.\n\n<p>Again: If you always use 'using' for all scope object, you code will be more elegant, transparent and safer.\n</p></p></p></p></p></p></p></p></p></p></p>"
  }
]