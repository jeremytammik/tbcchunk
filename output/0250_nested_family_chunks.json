[
  {
    "original_filename": "0250_nested_family",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0250_nested_family",
    "header_text": "Nested Family",
    "local_header_href": "#nested-family",
    "chunk_text": "<h3>Nested Family</h3><p>Here is another interesting question that came up on the creation of a nested family.\n\n<p><strong>Question:</strong> Can you help me to create a nested family via the API?\nI have a column family and a shelf family stored in RFA files, and I would like to implement a command which creates a new family with column and the shelf, and load it into a project.\nHow can this be achieved?\n\n<p><strong>Answer:</strong> The solution to this task is quite easy.\nI assume you have two existing families named column and shelf, and wish to create a third family hosting instances of these two.\nThe two families can be defined either in external RFA files or as in-memory documents.\n\n<p>Inserting instances of each of these into a third new family document means that we are working in the family context instead of the project context.\nHowever, the steps to load and insert the family instances are almost identical in both environments:\n\n<ul>\n<li>Load the family into the target document.\n<li>Select the symbol to insert.\n<li>Create a new family instance.\n</li></li></li></ul>\n<p>Here is a helper method InsertFamilySymbolFromRfa which implements these three steps:\n\n<pre class=\"code\">\n<span class=\"teal\">StructuralType</span> _non_rst = <span class=\"teal\">StructuralType</span>.NonStructural;\n \n<span class=\"teal\">FamilyInstance</span> InsertFamilySymbolFromRfa(\n  <span class=\"blue\">string</span> filename,\n  <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">FamilyInstance</span> fi = <span class=\"blue\">null</span>;\n  <span class=\"green\">//</span>\n  <span class=\"green\">// load family file:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">Family</span> f;\n  <span class=\"blue\">if</span>( doc.LoadFamily( filename, <span class=\"blue\">out</span> f ) )\n  {\n    <span class=\"green\">//</span>\n    <span class=\"green\">// retrieve family symbol:</span>\n    <span class=\"green\">//</span>\n    <span class=\"teal\">FamilySymbol</span> symbol = <span class=\"blue\">null</span>;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> f.Symbols )\n    {\n      symbol = s;\n      <span class=\"blue\">break</span>;\n    }\n    <span class=\"green\">//</span>\n    <span class=\"green\">// create family instance:</span>\n    <span class=\"green\">//</span>\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != symbol )\n    {\n      <span class=\"blue\">if</span>( doc.IsFamilyDocument )\n      {\n        fi = doc.FamilyCreate.NewFamilyInstance(\n          <span class=\"teal\">XYZ</span>.Zero, symbol, _non_rst );\n      }\n      <span class=\"blue\">else</span>\n      {\n        fi = doc.Create.NewFamilyInstance(\n          <span class=\"teal\">XYZ</span>.Zero, symbol, _non_rst );\n      }\n    }\n  }\n  <span class=\"blue\">return</span> fi;\n}\n</pre>\n<p>It accesses the NewFamilyInstance method on either the creation document returned by doc.Create in the project context, or on the family item factory returned by doc.FamilyCreate in the family one.\n\n<p>The NewFamilyInstance method provides several different overloads, and which one to use depends on the details of the families you are working with. In this case, we simply used the one that was easiest to call in this context.\n\n<p>Here is an example of a simple external command Execute method mainline with no error checking whatsoever calling this method to insert the two column and shelf families you mention:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"teal\">FamilyInstance</span> a = InsertFamilySymbolFromRfa(\n    <span class=\"maroon\">\"C:/tmp/column.rfa\"</span>, doc );\n \n  <span class=\"teal\">FamilyInstance</span> b = InsertFamilySymbolFromRfa(\n    <span class=\"maroon\">\"C:/tmp/shelf.rfa\"</span>, doc );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>I created both column.rfa and shelf.rfa from the metric column template with rather arbitrarily defined geometry for the column and shelf symbols. Here is the result of running the command in a new third target family document, which is also based on the metric column template:\n\n<center>\n<img alt=\"Nested column and shelf family instances\" src=\"img/column_and_shelf.png\"/>\n</center>\n<p>Here is an\n\n<a href=\"zip/rfa_labs_20091028.zip\">\nupdated version</a>\n\nof the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/revit-family-creation-api-labs.html\">\nFamily API Labs</a>\n\nthat I will be using for my Family API virtual session at\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/au-2009.html\">\nAutodesk University 2009</a>\n\nincluding this new command as Lab 5, though only in the C# project.\n</p></p></p></p></p></p></p></p></p></p>"
  }
]