[
  {
    "original_filename": "0612_create_section_view",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0612_create_section_view",
    "header_text": "Section View Creation",
    "local_header_href": "#section-view-creation",
    "chunk_text": "<h3>Section View Creation</h3><p>I mentioned some basics of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/elevation-view.html\">\nelevation and section view creation</a>\n\na long time ago, but omitted to publicise the results of the ensuing discussion\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/elevation-view.html?cid=6a00e553e1689788330133f4c6fea6970b#comment-6a00e553e1689788330133f4c6fea6970b\">\nwith</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/elevation-view.html?cid=6a00e553e168978833013487e73089970c#comment-6a00e553e168978833013487e73089970c\">\nKonstanty</a>\n\nand similar ones \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/autodesk-university-2010-class-materials.html?cid=6a00e553e1689788330134890c7687970c#comment-6a00e553e1689788330134890c7687970c\">\nwith \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/autodesk-university-2010-class-materials.html?cid=6a00e553e168978833013489161808970c#comment-6a00e553e168978833013489161808970c\">\nJenney</a>\n\nand \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html?cid=6a00e553e168978833014e600d7423970c#comment-6a00e553e168978833014e600d7423970c\">\nBhavana</a>.\n\nThe issue came up in some ADN cases as well, so it really is time to get a bit more information on this out there to you.\n\n<p><strong>Question:</strong> I see that the CreateViewSection SDK creates a detail view of a wall seen from one side. \n\nHow can I create similar top and front views of it?\n\n<p><strong>Answer:</strong> First of all, as always, of course, take a look at the developer guide, e.g. section 18.1.4 Creating and Deleting Views.\nIt explains the different view types and how they are defined and created programmatically.\n\n<p>The main aspect in defining the section view direction is setting up the BoundingBoxXYZ appropriately.\nAs you say, this is demonstrated by the CreateViewSection SDK sample.\nIt sets up the bounding box used in the call to the NewViewSection method in a helper method GenerateBoundingBoxXYZ.\nThe latter creates a new BoundingBoxXYZ and sets its Min and Max properties.\nThe most important thing is its Transform property, which defines the origin and directions (RightDirection, UpDirection and ViewDirection) of the created view.\nThat is defined by the GenerateTransform helper method, which branches off into different flavours depending on the selected element type, wall, beam or floor.\nIn the case of a wall, it uses the wall location line to determine its midpoint and direction.\n\n<p>Here is some simpler code that does the same thing without branching out into any helper functions, uses the element bounding box to determine the view origin, and a hard-wired view direction to set up a front view:\n\n<pre class=\"code\">\n  <span class=\"blue\">Dim</span> uiapp <span class=\"blue\">As</span> <span class=\"teal\">UIApplication</span> = commandData.Application\n  <span class=\"blue\">Dim</span> uidoc <span class=\"blue\">As</span> <span class=\"teal\">UIDocument</span> = uiapp.ActiveUIDocument\n  <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> <span class=\"teal\">Application</span> = uiapp.Application\n  <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span> = uidoc.Document\n \n  <span class=\"blue\">Dim</span> sel <span class=\"blue\">As</span> <span class=\"teal\">Selection</span> = uidoc.Selection\n \n  <span class=\"blue\">Dim</span> e <span class=\"blue\">As</span> <span class=\"teal\">Element</span> = sel.Elements(0)\n \n  <span class=\"green\">' get the element bounding box;</span>\n  <span class=\"green\">' 'nothing' means model geometry:</span>\n \n  <span class=\"blue\">Dim</span> ebbox <span class=\"blue\">As</span> <span class=\"teal\">BoundingBoxXYZ</span> =\n    e.BoundingBox(<span class=\"blue\">Nothing</span>)\n \n  <span class=\"green\">' determine size of box</span>\n \n  <span class=\"blue\">Dim</span> w <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = (ebbox.Max.X - ebbox.Min.X)\n  <span class=\"blue\">Dim</span> d <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = (ebbox.Max.Y - ebbox.Min.Y)\n  <span class=\"blue\">Dim</span> h <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = (ebbox.Max.Z - ebbox.Min.Z)\n \n  <span class=\"green\">' make it easier to see, e.g., not too narrow</span>\n \n  <span class=\"blue\">If</span> w &lt; 10.0 <span class=\"blue\">Then</span>\n    w = 10.0\n  <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n  <span class=\"blue\">If</span> d &lt; 10.0 <span class=\"blue\">Then</span>\n    d = 10.0\n  <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n  <span class=\"green\">' from front </span>\n \n  <span class=\"blue\">Dim</span> maxPt <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>(w, h, 0.0)\n  <span class=\"blue\">Dim</span> minPt <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>(-w, -h, -d)\n \n  <span class=\"blue\">Dim</span> bbox <span class=\"blue\">As</span> <span class=\"teal\">BoundingBoxXYZ</span> = <span class=\"blue\">New</span> <span class=\"teal\">BoundingBoxXYZ</span>()\n \n  bbox.Enabled = <span class=\"blue\">True</span>\n  bbox.Max = maxPt\n  bbox.Min = minPt\n \n  <span class=\"green\">' set the transform</span>\n \n  <span class=\"blue\">Dim</span> trans <span class=\"blue\">As</span> <span class=\"teal\">Transform</span> = <span class=\"teal\">Transform</span>.Identity\n \n  <span class=\"green\">' find the mid point of the element</span>\n \n  <span class=\"blue\">Dim</span> midPt <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = 0.5 * (ebbox.Max + ebbox.Min)\n \n  <span class=\"green\">' set it as origin </span>\n \n  trans.Origin = midPt\n \n  <span class=\"green\">' determine view direction </span>\n \n  trans.BasisX = <span class=\"teal\">XYZ</span>.BasisX\n  trans.BasisY = <span class=\"teal\">XYZ</span>.BasisZ\n  trans.BasisZ = -<span class=\"teal\">XYZ</span>.BasisY\n \n  bbox.Transform = trans\n \n  <span class=\"green\">' create the section view</span>\n \n  <span class=\"blue\">Dim</span> viewSection <span class=\"blue\">As</span> <span class=\"teal\">ViewSection</span> =\n    doc.Create.NewViewSection(bbox)\n</pre>\n<p>To set up a different view, e.g. the right-hand side, you just modify the following lines:\n\n<pre class=\"code\">\n  <span class=\"green\">' . . .</span>\n\n  <span class=\"green\">' from right </span>\n\n  <span class=\"blue\">Dim</span> maxPt <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>(d, h, 0.0)\n  <span class=\"blue\">Dim</span> minPt <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>(-d, -h, -w)\n\n  <span class=\"green\">' . . .</span>\n\n  <span class=\"green\">' determine view direction </span>\n\n  trans.BasisX = <span class=\"teal\">XYZ</span>.BasisY\n  trans.BasisY = <span class=\"teal\">XYZ</span>.BasisZ\n  trans.BasisZ = <span class=\"teal\">XYZ</span>.BasisX\n</pre>\n<p>For the sake of completeness and your comfort, here is <a href=\"zip/BackSectionView.zip\">BackSectionView.zip</a> containing the rough draft of two entire little VB and C# sample projects.\nThe C# version implements three methods GetFrontView, GetBackView and GetTopView, which may or may not fulfil the promise of their names, but at least they will give you a starting point.\n\n<a name=\"2\"></a>\n<h4>Detail View, Not Section View</h4>\n<p>When using the NewViewSection method, you should be aware of the note at the end of the developer guide section 18.5 ViewSection, which points out that these views will appear as details views in the project browser, unlike section views created manually using section using the command View &gt; New &gt; Section, which show up under the Sections (Building Section) node in the Project Browser.\n\n</p></p></p></p></p></p></p></a></p>"
  },
  {
    "original_filename": "0612_create_section_view",
    "header_text": "Detail View, Not Section View",
    "local_header_href": "#detail-view-not-section-view",
    "chunk_text": "<h4>Detail View, Not Section View</h4><p>When using the NewViewSection method, you should be aware of the note at the end of the developer guide section 18.5 ViewSection, which points out that these views will appear as details views in the project browser, unlike section views created manually using section using the command View &gt; New &gt; Section, which show up under the Sections (Building Section) node in the Project Browser.\n\n</p>"
  }
]