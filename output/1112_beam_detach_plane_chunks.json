[
  {
    "original_filename": "1112_beam_detach_plane",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1112_beam_detach_plane",
    "header_text": "Detach Beam from Plane",
    "local_header_href": "#detach-beam-from-plane",
    "chunk_text": "<h3>Detach Beam from Plane</h3><p>Here is a long-standing question raised once again now by Miroslav Schonauer of Autodesk Consulting and solved with help from Sasha Crotty of the Revit development team:</p><p><strong>Question:</strong> Is there a way to programmatically replicate the 'Detach from Plane' functionality accessible in the user interface through the beam context menu?</p><p>I can right click on a structural beam and select 'Detach from Plane'.\nRevit removes the parameter 'Work plane', i.e. BuiltInParameter.SKETCH_PLANE_PARAM, and enables the 'Reference Level' parameter, which is read-only otherwise.\nI would like to replicate this behaviour using the API.</p><p>I tried to delete the Work plane parameter but that did not help.\nEven the FamilyInstance.Host for a beam is returned as read-only.</p><p>Is there a way to achieve this using the API?</p><p><strong>Answer:</strong> Changing the end elevation of the beam using the end elevation parameters will force it to go out of plane.\nThat should also detach it from the reference plane.</p><p><strong>Response:</strong> I need the beam to remain in the same physical position, so should I do it like this, then?\n\n<ul>\n<li>First transaction: move the end elevations +dv in plane normal direction.</li>\n<li>Second transaction: move it back by –dv.</li>\n</ul>\n<p><strong>Answer:</strong> I think you may be able to get away without two transactions.\nMove the beam and then move it back in the same transaction.</p>\n<p>If that doesn't work, you could use a TransactionGroup and assimilate the two transactions into one.</p>\n<p><strong>Response:</strong> Thanks all a lot.\nIt works like a charm, all from a single transaction!\nHere is some sample code:</p>\n<pre class=\"code\">\n  <span class=\"blue\">class</span> <span class=\"teal\">SelectionFilterBeam</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">if</span>( !(e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span>) )\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n      }\n \n      <span class=\"blue\">if</span>( e.Category.Id.IntegerValue != (<span class=\"blue\">int</span>)\n        <span class=\"teal\">BuiltInCategory</span>.OST_StructuralFraming )\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n      }\n \n      <span class=\"green\">// In theory could still be a Brace, but </span>\n      <span class=\"green\">// Structural Usage is sometimes NOT set and </span>\n      <span class=\"green\">// cannot be relied upon!</span>\n      <span class=\"green\">// So, good enough as \"Beam\" if here.</span>\n \n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Automatic )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdDetachBeamFromPlane</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"green\">// Pick a beam</span>\n \n      <span class=\"teal\">SelectionFilterBeam</span> selFilterBeam\n        = <span class=\"blue\">new</span> <span class=\"teal\">SelectionFilterBeam</span>();\n \n      <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element, selFilterBeam,\n        <span class=\"maroon\">\"Select a Beam to 'Detach From Plane'\"</span> );\n \n      <span class=\"teal\">FamilyInstance</span> beam = doc.GetElement( r )\n        <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n      <span class=\"green\">// Check if it has 'Work Plane' to detach</span>\n      <span class=\"green\">//</span>\n      <span class=\"green\">// One would expect that it is simplest to </span>\n      <span class=\"green\">// check .Host as commented below, BUT there </span>\n      <span class=\"green\">// are some strange situations where Host IS </span>\n      <span class=\"green\">// null and Revit STILL displays (as read-only):</span>\n      <span class=\"green\">// \"Work Plane = &lt;not associated&gt;\" !?</span>\n      <span class=\"green\">//</span>\n      <span class=\"green\">//if (null == beam.Host)</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//  MessageBox.Show(\"Selected Family Instance of 'Structural Framing' Category has NO 'Work Plane'!\");</span>\n      <span class=\"green\">//  return Result.Cancelled;</span>\n      <span class=\"green\">//}</span>\n      <span class=\"green\">//</span>\n      <span class=\"green\">// So, must check if that read-only SKETCH_PLANE_PARAM param exists:</span>\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == beam.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.SKETCH_PLANE_PARAM ) )\n      {\n        MessageBox.Show( <span class=\"maroon\">\"Selected Family Instance \"</span>\n          + <span class=\"maroon\">\"of 'Structural Framing' Category has NO \"</span>\n          + <span class=\"maroon\">\"'Work Plane'!\"</span> );\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n      }\n \n      <span class=\"green\">// In theory, the plane could be non-horizontal </span>\n      <span class=\"green\">// but in 99% should be and in 99.99% for beams </span>\n      <span class=\"green\">// it would NOT be vertical which is the only </span>\n      <span class=\"green\">// case that would not work using the following </span>\n      <span class=\"green\">// (adjusting the elevation):</span>\n      <span class=\"green\">// As .Host is RO property, the workaround is </span>\n      <span class=\"green\">// to move the END ELEVATIONs outside the plane</span>\n      <span class=\"green\">// which will internally \"detach\" it in Revit, </span>\n      <span class=\"green\">// then simply move back!</span>\n      <span class=\"green\">// Note that Moving the element would not work </span>\n      <span class=\"green\">// as it is constrained to the plane.</span>\n \n      <span class=\"blue\">double</span> elevOldSta = beam.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.STRUCTURAL_BEAM_END0_ELEVATION )\n          .AsDouble();\n \n      <span class=\"blue\">double</span> elevOldEnd = beam.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.STRUCTURAL_BEAM_END1_ELEVATION )\n          .AsDouble();\n \n      <span class=\"blue\">double</span> elevTmpSta = elevOldSta + 1.0;\n      <span class=\"blue\">double</span> elevTmpEnd = elevOldEnd + 1.0;\n \n      <span class=\"green\">// This will \"detach from plane\"...</span>\n \n      beam.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.STRUCTURAL_BEAM_END0_ELEVATION )\n          .Set( elevTmpSta );\n \n      beam.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.STRUCTURAL_BEAM_END1_ELEVATION )\n          .Set( elevTmpEnd );\n \n      <span class=\"green\">// ...and this move back to the </span>\n      <span class=\"green\">// same original position</span>\n \n      beam.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.STRUCTURAL_BEAM_END0_ELEVATION )\n          .Set( elevOldSta );\n \n      beam.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.STRUCTURAL_BEAM_END1_ELEVATION )\n          .Set( elevOldEnd );\n \n      MessageBox.Show( <span class=\"maroon\">\"Successfully removed the \"</span>\n        + <span class=\"maroon\">\"'Work Plane' constraint\"</span> );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n</pre>\n<p>Please note the numerous valuable hints included in the code comments.</p>\n<p>Also note that a slight performance improvement might be achievable by adjusting just one end of the beam instead of both.</p>\n<p>Finally, note that the code could be made more readable by defining shorthand variables for the lengthy built-in paramenter enumeration values :-)</p>\n<p>Many thanks to Miro and Sascha for this useful solution!</p>\n</p>"
  }
]