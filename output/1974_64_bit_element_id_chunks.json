[
  {
    "original_filename": "1974_64_bit_element_id",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n\n<style>\ntable, th, td {\n  border: 1px solid black;\n  border-collapse: collapse;\n}\nth, td {\n  padding-left: 1em;\n  padding-right: 1em;\n}\nth{\n  text-align:left;\n}\n</style>\n</head>\n\n<!---\n\n- 10168713 [Revit Schedule - Title/headers]\n  [Revit schedule title/headers](https://forums.autodesk.com/t5/revit-api-forum/revit-schedule-title-headers/m-p/11573145).\n\n- How to make an Interior Designer Happy (with Electron, IFC.js and Revit API)\n  https://www.linkedin.com/pulse/how-make-interior-designer-happy-electron-ifcjs-revit-capasso\n  speed up the process of comparing and selecting families for our interior design projects.\n  numerous categories of families with hundreds of families in each\n\ntwitter:\n\nMaybe need to scale up the handling of element id integer values, a #DynamoBim book, a web-based family showroom browser and retrieving schedule headers with the #RevitAPI @AutodeskForge @AutodeskRevit #bim #ForgeDevCon https://autode.sk/64bitelementid\n\nWe may need to scale up the handling of element id integer values in future, a sample snippet to retrieve schedule headers, a Dynamo book, and a web-based family showroom browser\n&ndash; 64-bit element ids\n&ndash; Revit schedule title headers\n&ndash; Beyond Dynamo: Python manual for Revit\n&ndash; Web-based family management showroom\n&ndash; Tree view in pure CSS\n&ndash; High-documentation, low-meeting work culture...\n\nlinkedin:\n\nMaybe need to scale up the handling of element id integer values, a Dynamo book, a web-based family showroom browser and retrieving schedule headers with the #RevitAPI\n\nhttps://autode.sk/64bitelementid\n\n- 64-bit element ids\n- Revit schedule title headers\n- Beyond Dynamo: Python manual for Revit\n- Web-based family management showroom\n- Tree view in pure CSS\n- High-documentation, low-meeting work culture...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n<pre class=\"code\">\n</pre>\n\n-->"
  },
  {
    "original_filename": "1974_64_bit_element_id",
    "header_text": "64-Bit Element Ids, Maybe?",
    "local_header_href": "#64-bit-element-ids-maybe",
    "chunk_text": "### 64-Bit Element Ids, Maybe?\n\nWe may need to scale up the handling of element id integer values in future, a sample snippet to retrieve schedule headers, a Dynamo book, and a web-based family showroom browser:\n\n- [64-bit element ids](#2)\n- [Amendment &ndash; how to handle overflow](#2.1)\n- [Revit schedule title headers](#3)\n- [Beyond Dynamo: Python manual for Revit](#4)\n- [Web-based family management showroom](#5)\n- [Tree view in pure CSS](#6)\n- [High-documentation, low-meeting work culture](#7)"
  },
  {
    "original_filename": "1974_64_bit_element_id",
    "header_text": "64-Bit Element Ids",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> 64-Bit Element Ids\n\nAutodesk almost never discusses any upcoming functionality in future products whatsoever, for legal reasons.\n\nStill, just as a heads-up warning, the development team thought it worthwhile to point out that we are thinking about possibly converting the internal representation of Revit element ids from 32 to 64 bit in a future release of Revit.\n\n<!--\n\n> Forward looking statements Disclaimer. This document contains “forward looking statements” as defined or implied in common law and within the meaning of the Corporations Law. All expressions an expectations or belief sas to future events or results are expressed in good faith... However, forward looking statements are subject to risks, uncertainties and other factors, which could cause actual results to differ materially from future results expressed, projected or implied by such forward looking statements...\n\n-->\n\nHere is a writeup of what that would imply and what a developer would need to do about it:\n\nElementIds will change from storing 32-bit integers to storing 64-bit values (type `long` in C# or `Int64` in .NET).\nThis will allow for larger and more complicated models.\nMost functions which take or return ElementIds will continue to work with no changes.\nHowever, there are a few things to keep in mind:\n \nIf you are storing ElementIds externally as integers, you will need to update your storage to take 64-bit values.\n \nThe constructor Autodesk.Revit.DB.ElementId(Int32) has been deprecated and replaced by a new constructor, Autodesk.Revit.DB.ElementId(Int64).\n\nThe property Autodesk.Revit.DB.ElementId.IntegerValue has been deprecated.\nIt returns only the lowest 32-bits of the ElementId value.\nPlease use the replacement property Autodesk.Revit.DB.ElementId.Value, which will return the entire value.\n \nSupport has been added for using 64-bit types in ExtensibleStorage.\nBoth Autodesk.Revit.DB.ExtensibleStorage.SchemaBuilder.AddSimpleField() and AddMapField() can now take in 64-bit values for the fieldType, keyType, and valueType parameters.\n \nTwo binary breaking changes have been made.\nBoth Autodesk.Revit.DB.BuiltInCategory and Autodesk.Revit.DB.BuiltInParameter have been updated so that the size type of the underlying enums are 64-bits instead of 32.\nCode built against earlier versions of the API may experience type cast and other type related exceptions when run against the next versions of the API when working with the enum.\nPlease rebuild your addins against the next release's API when it is available.\n \nHere is an overview mapping the deprecated to the replacement members:\n\n- Autodesk.Revit.DB.ElementId(Int32) <br/> &rarr; Autodesk.Revit.DB.ElementId(Int64)\n- Autodesk.Revit.DB.ElementId.IntegerValue <br/> &rarr; Autodesk.Revit.DB.ElementId.Value\n\n<!--\n\nHere is a table showing the deprecated and replacement members:\n\n<center>\n<table>\n<tr><th>Deprecated API</th><th>Replacement</th></tr>\n<tr><td>Autodesk.Revit.DB.ElementId(Int32)</td><td>Autodesk.Revit.DB.ElementId(Int64)</td></tr>\n<tr><td>Autodesk.Revit.DB.ElementId.IntegerValue</td><td>Autodesk.Revit.DB.ElementId.Value</td></tr>\n</table>\n</center>\n\n-->\n\n####<a name=\"2.1\"></a> Amendment &ndash; How to Handle Overflow\n\nWe have an amendment to add to the original post.\nOne of the things we originally said above has actually changed, and I think it also helps\naddress [cadferret’s question below](https://thebuildingcoder.typepad.com/blog/2022/11/64-bit-element-ids-maybe.html#comment-6054377627):\n \nWith the caveat that anything we say here might change, we want to amend the initially published proposal.\n \nThe previous version stated that `ElementId.IntegerValue` would\nhandle [integer overflow](https://en.wikipedia.org/wiki/Integer_overflow) by\ntruncating 64-bit values down to 32 bits.\nFor values which will fit in 32 bits, we will return the value as an integer.\nHowever, if the value would actually need more than 32 bits to represent it, we will throw an exception.\n \nTo add a bit more about our intentions, as things currently stand:\n \nOur intention is to find an optimal balance between 64-bit readiness and minimising disruption for API developers.\nWe would NOT remap existing ElementIds to higher values.\nAn `Element` with an `Id` of 50 would still have an `Id` of 50, and either property would return the correct value.\n \nMost models will not get so large as to exhaust the 32-bit id space.\nSo, in general, `ElementId.IntegerValue` would still work.\nThis would give developers a chance to update their applications, rather than having the function immediately disappear.\n \nHowever, if a model were so large as to have Ids that needed more than 32 bits to store the value, the `ElementId.IntegerValue` property would throw an exception, return a truncated value, or something similar.\n \nThis is an attempt to allow models which need 64-bit ids sooner, simultaneously minimising outright breaking changes in the API."
  },
  {
    "original_filename": "1974_64_bit_element_id",
    "header_text": "Revit Schedule Title Headers",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Revit Schedule Title Headers\n\nA number of developers asked for a snippet of sample code in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [Revit schedule title/headers](https://forums.autodesk.com/t5/revit-api-forum/revit-schedule-title-headers/m-p/11573145).\n\nHernan  [H.echeva](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/3063892) Echevarria\nkindly jumped in and shared his implementation:\n\n> I found this post, which was very helpful; thank you for the info.\n\n> I created a small example macro that gets the header text.\nI hope this helps:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;This&nbsp;macro&nbsp;gets&nbsp;the&nbsp;header&nbsp;text&nbsp;of&nbsp;the&nbsp;active&nbsp;Schedule&nbsp;View</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;<span style=\"color:#74531f;\">ScheduleHeader</span>()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;UIDocument&nbsp;<span style=\"color:#1f377f;\">uidoc</span>&nbsp;=&nbsp;<span style=\"color:blue;\">this</span>.ActiveUIDocument;\n&nbsp;&nbsp;&nbsp;&nbsp;Document&nbsp;<span style=\"color:#1f377f;\">doc</span>&nbsp;=&nbsp;uidoc.Document;\n \n&nbsp;&nbsp;&nbsp;&nbsp;ViewSchedule&nbsp;<span style=\"color:#1f377f;\">mySchedule</span>&nbsp;=&nbsp;uidoc.ActiveView&nbsp;<span style=\"color:blue;\">as</span>&nbsp;ViewSchedule;\n \n&nbsp;&nbsp;&nbsp;&nbsp;TableData&nbsp;<span style=\"color:#1f377f;\">myTableData</span>&nbsp;=&nbsp;mySchedule.GetTableData();\n \n&nbsp;&nbsp;&nbsp;&nbsp;TableSectionData&nbsp;<span style=\"color:#1f377f;\">myData</span>&nbsp;=&nbsp;myTableData.GetSectionData(SectionType.Header);\n \n&nbsp;&nbsp;&nbsp;&nbsp;TaskDialog.Show(<span style=\"color:#a31515;\">&quot;Header&nbsp;Info&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;The&nbsp;Header&nbsp;Text&nbsp;is:&nbsp;\\n&quot;</span>&nbsp;+&nbsp;myData.GetCellText(0,&nbsp;0));\n&nbsp;&nbsp;}\n</pre>\n\nThank you, Hernan!"
  },
  {
    "original_filename": "1974_64_bit_element_id",
    "header_text": "Beyond Dynamo: Python Manual for Revit",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Beyond Dynamo: Python Manual for Revit\n\nI avoid advertising commercial products, but I made an exception\nfor [Más Allá de Dynamo](https://thebuildingcoder.typepad.com/blog/2020/12/dynamo-book-and-texture-bitmap-uv-coordinates.html#3),\nthe Spanish-Language Python manual focused on Dynamo and the Revit API.\n\nIt is now also available in English\nas [Beyond Dynamo: Python manual for Revit](https://www.amazon.com/dp/B0BMSV6YXD),\nby Kevin Himmelreich, Alejandro Martín-Herrer and Ignacio Moreu:\n\n> This is a Python handbook specifically created for working on BIM methodology with Autodesk Dynamo and Revit.\nIt has a practical approach aimed at professionals who have never programmed before.\nIf you know how to program in Python, it will be equally useful, as it explains deeply most of the classes, methods and properties of the Revit API.\n\n<center>\n<img src=\"img/beyond_dynamo_en.png\" alt=\"Beyond Dynamo\" title=\"Beyond Dynamo\" width=\"252\"/>  <!-- 252 × 330 -->\n</center>\n\nNote that we also discussed lots of other resources\nfor [learning Python and Dynamo](https://thebuildingcoder.typepad.com/blog/2021/02/addin-file-learning-python-and-ifcjs.html#3)."
  },
  {
    "original_filename": "1974_64_bit_element_id",
    "header_text": "Web-Based Family Management Showroom",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Web-Based Family Management Showroom\n\nEmiliano Capasso, Head of BIM at [Antonio Citterio Patricia Viel](https://www.citterio-viel.com),\nshared some interesting advice on managing thousands of families and\non [how to make an interior designer happy with Electron, IFC.js and Revit API](https://www.linkedin.com/pulse/how-make-interior-designer-happy-electron-ifcjs-revit-capasso).\n\nThe aim is to speed up the process of comparing and selecting families for large interior design projects.\nThey require numerous categories of families with hundreds of families in each.\nInitial idea: developing a nice web viewer in IFC.js for viewing families instead of buildings.\nNow, every interior designer or architect in the office can navigate (way faster than opening the showrooms in Revit) inside all the showrooms using their browser.\nThat leads to the even better idea...\n\nThank you, Emiliano, for sharing this great idea and nice write-up."
  },
  {
    "original_filename": "1974_64_bit_element_id",
    "header_text": "Tree View in Pure CSS",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Tree View in Pure CSS\n\nA very nice, clean and lean tree view (collapsible list) can be created using only HTML and CSS, without any need for JavaScript.\nCheck out the demonstration and detailed step-by-step explanation,\n[tree views in CSS](https://iamkate.com/code/tree-views).\n\n<!--\n\n<style>\n.tree-padding{\n  --spacing    : 1.5rem;\n  --radius     : 10px;\n  padding-left : 1rem;\n}\n\n.tree-padding li{\n  display      : block;\n  position     : relative;\n  padding-left : calc(2 * var(--spacing) - var(--radius) - 2px);\n}\n\n.tree-padding ul{\n  margin-left  : calc(var(--radius) - var(--spacing));\n  padding-left : 0;\n}\n\n.tree-vertical-lines ul li{\n  border-left : 2px solid var(--dark-grey);\n}\n\n.tree-vertical-lines ul li:last-child{\n  border-color : transparent;\n}\n\n.tree-horizontal-lines ul li::before{\n  content      : '';\n  display      : block;\n  position     : absolute;\n  top          : calc(var(--spacing) / -2);\n  left         : -2px;\n  width        : calc(var(--spacing) + 2px);\n  height       : calc(var(--spacing) + 1px);\n  border       : solid var(--dark-grey);\n  border-width : 0 0 2px 2px;\n}\n\n.tree-summaries summary{\n  display : block;\n  cursor  : pointer;\n}\n\n.tree-summaries summary::marker,\n.tree-summaries summary::-webkit-details-marker{\n  display : none;\n}\n\n.tree-summaries summary:focus{\n  outline : none;\n}\n\n.tree-summaries summary:focus-visible{\n  outline : 1px dotted #000;\n}\n\n.tree-markers li::after,\n.tree-markers summary::before{\n  content       : '';\n  display       : block;\n  position      : absolute;\n  top           : calc(var(--spacing) / 2 - var(--radius));\n  left          : calc(var(--spacing) - var(--radius) - 1px);\n  width         : calc(2 * var(--radius));\n  height        : calc(2 * var(--radius));\n  border-radius : 50%;\n  background    : var(--dark-grey);\n}\n\n.tree-buttons summary::before{\n  content     : '+';\n  z-index     : 1;\n  background  : var(--accent);\n  color       : #fff;\n  font-weight : 400;\n  line-height : calc(2 * var(--radius) - 2px);\n  text-align  : center;\n}\n\n.tree-buttons details[open] > summary::before{\n  content : '−';\n}\n</style>\n\n<center>\n<ul class=\"tree-padding tree-vertical-lines tree-horizontal-lines tree-summaries tree-markers tree-buttons\">\n  <li>\n    <details open>\n      <summary>Giant planets</summary>\n      <ul>\n        <li>\n          <details>\n            <summary>Gas giants</summary>\n            <ul>\n              <li>Jupiter</li>\n              <li>Saturn</li>\n            </ul>\n          </details>\n        </li>\n        <li>\n          <details>\n            <summary>Ice giants</summary>\n            <ul>\n              <li>Uranus</li>\n              <li>Neptune</li>\n            </ul>\n          </details>\n        </li>\n      </ul>\n    </details>\n  </li>\n</ul>\n</center>\n\n-->"
  },
  {
    "original_filename": "1974_64_bit_element_id",
    "header_text": "High-Documentation, Low-Meeting Work Culture",
    "local_header_href": "#7",
    "chunk_text": "####<a name=\"7\"></a> High-Documentation, Low-Meeting Work Culture\n\nI enjoyed this analysis\nof [the perks of a high-documentation, low-meeting work culture](https://www.tremendous.com/blog/the-perks-of-a-high-documentation-low-meeting-work-culture).\nIt seems highly relevant to our distributed DAS team, Autodesk Developer Advocacy and Support.\nIt also lines up very well with my personal experience working within our team, and also in my external interactions, both with the diffuse blog- and forum-based Revit API pseudo-community as well as occasionally consulting individually add-in developers with special requirements.\nLooking forward to hearing what you think of it."
  }
]