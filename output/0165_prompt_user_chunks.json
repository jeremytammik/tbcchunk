[
  {
    "original_filename": "0165_prompt_user",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0165_prompt_user",
    "header_text": "Prompt the User for Pinning and IFC Export",
    "local_header_href": "#prompt-the-user-for-pinning-and-ifc-export",
    "chunk_text": "<h3>Prompt the User for Pinning and IFC Export</h3><p>We recently touched on the topic of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/vb-samples-and-other-questions.html#1\">\nIFC export</a>\n\nand the lack of API access to this functionality.\nAnother property that the Revit API also does not provide write access to is the Element.Pinned property.\nIn both of these cases, however, write access is provided through the user interface, and it is possible to programmatically read the current state.\nTherefore, an application can determine the current state and prompt the user to execute the required action if necessary.\nWhile it would be nicer to be able to implement a fully automated process, this approach is fool-proof and safe.\n\n<h3>Prompt the User to Pin a Link</h3>\n<p>Jim Bish of \n\n<a href=\"http://www.inlettechnology.com\">\nInlet Technology</a>\n\nrecently suggested an effective, simple and reliable work-around for the lack of write access to the Element.Pinned property.\nHis requirement is especially to pin unpinned Revit link instances.\nOne solution is to simply\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/convex-hull-and-volume-computation.html?cid=6a00e553e1689788330115718ed107970b#comment-6a00e553e1689788330115718ed107970b\">\nprompt the user to pin them</a>:\n\n<pre class=\"code\">\n<span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute( _\n  <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> ExternalCommandData, _\n  <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>, _\n  <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> ElementSet) _\n<span class=\"blue\">As</span> IExternalCommand.Result _\n<span class=\"blue\">Implements</span> IExternalCommand.Execute\n\n  <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> Application = commandData.Application\n  <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> Document = app.ActiveDocument\n  <span class=\"blue\">Dim</span> element <span class=\"blue\">As</span> Element = <span class=\"blue\">Nothing</span>\n  <span class=\"blue\">Dim</span> f <span class=\"blue\">As</span> Filter\n\n  f = app.Create.Filter.NewCategoryFilter( _\n    BuiltInCategory.OST_RvtLinks)\n\n  <span class=\"blue\">Dim</span> result <span class=\"blue\">As</span> <span class=\"blue\">New</span> List(<span class=\"blue\">Of</span> Element)\n  <span class=\"blue\">Dim</span> n <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> = doc.Elements(f, result)\n\n  <span class=\"blue\">For</span> <span class=\"blue\">Each</span> element <span class=\"blue\">In</span> result\n    <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> (element) <span class=\"blue\">Is</span> Instance <span class=\"blue\">Then</span>\n      <span class=\"blue\">If</span> <span class=\"blue\">Not</span> element.Pinned <span class=\"blue\">Then</span>\n        MsgBox(<span class=\"maroon\">\"Hello! \"</span> _\n          &amp; element.ObjectType.Name _\n          &amp; <span class=\"maroon\">\" is not pinned! Please pin it.\"</span>)\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n  <span class=\"blue\">Next</span>\n<span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre>\n<p>Some features that might be worth adding to Jim's quick solution:\nSome kind of logging functionality, so that you are not forced to acknowledge the message box individually for each non-pinned link.\nIt might also be helpful to add some more information to the message, such as the link's element id, in a widget allowing you to copy it to the clipboard.\nThis will enable you to select it in the user interface, for instance in order to zoom in to it.</p>\n<h3>Prompt the User to Export to IFC</h3>\n<p>Another solution prompting the user to execute a command due to the lack of programmatic access was proposed by Richard Brand of \n\n<a href=\"http://www.itannex.com\">\nItannex</a>,\n\nto handle the lack of an API to drive the IFC export functionality:\n\n<p>My tool needs to generate a ZIP file containing the Revit file and the IFC export. \nThis ZIP file should be created when the user selects a menu item in my application. \nThat is why I cannot produce the IFC files through a nightly batch process driving Revit through a journal file. \nI 'solved' it by checking if there is an IFC file present. If not, or if it is not recent, I ask the user to export the model to IFC by hand into a particular directory.\nAs long as the Revit API does not provide access to the IFC export I guess we have to solve this issue this way. \nIt should be much more user friendly if the IFC export would be generated automatically.</p>\n</p></p></p>"
  },
  {
    "original_filename": "0165_prompt_user",
    "header_text": "Prompt the User to Pin a Link",
    "local_header_href": "#prompt-the-user-to-pin-a-link",
    "chunk_text": "<h3>Prompt the User to Pin a Link</h3><p>Jim Bish of \n\n<a href=\"http://www.inlettechnology.com\">\nInlet Technology</a>\n\nrecently suggested an effective, simple and reliable work-around for the lack of write access to the Element.Pinned property.\nHis requirement is especially to pin unpinned Revit link instances.\nOne solution is to simply\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/convex-hull-and-volume-computation.html?cid=6a00e553e1689788330115718ed107970b#comment-6a00e553e1689788330115718ed107970b\">\nprompt the user to pin them</a>:\n\n<pre class=\"code\">\n<span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute( _\n  <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> ExternalCommandData, _\n  <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>, _\n  <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> ElementSet) _\n<span class=\"blue\">As</span> IExternalCommand.Result _\n<span class=\"blue\">Implements</span> IExternalCommand.Execute\n\n  <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> Application = commandData.Application\n  <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> Document = app.ActiveDocument\n  <span class=\"blue\">Dim</span> element <span class=\"blue\">As</span> Element = <span class=\"blue\">Nothing</span>\n  <span class=\"blue\">Dim</span> f <span class=\"blue\">As</span> Filter\n\n  f = app.Create.Filter.NewCategoryFilter( _\n    BuiltInCategory.OST_RvtLinks)\n\n  <span class=\"blue\">Dim</span> result <span class=\"blue\">As</span> <span class=\"blue\">New</span> List(<span class=\"blue\">Of</span> Element)\n  <span class=\"blue\">Dim</span> n <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> = doc.Elements(f, result)\n\n  <span class=\"blue\">For</span> <span class=\"blue\">Each</span> element <span class=\"blue\">In</span> result\n    <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> (element) <span class=\"blue\">Is</span> Instance <span class=\"blue\">Then</span>\n      <span class=\"blue\">If</span> <span class=\"blue\">Not</span> element.Pinned <span class=\"blue\">Then</span>\n        MsgBox(<span class=\"maroon\">\"Hello! \"</span> _\n          &amp; element.ObjectType.Name _\n          &amp; <span class=\"maroon\">\" is not pinned! Please pin it.\"</span>)\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n  <span class=\"blue\">Next</span>\n<span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre>\n<p>Some features that might be worth adding to Jim's quick solution:\nSome kind of logging functionality, so that you are not forced to acknowledge the message box individually for each non-pinned link.\nIt might also be helpful to add some more information to the message, such as the link's element id, in a widget allowing you to copy it to the clipboard.\nThis will enable you to select it in the user interface, for instance in order to zoom in to it.</p>\n<h3>Prompt the User to Export to IFC</h3>\n<p>Another solution prompting the user to execute a command due to the lack of programmatic access was proposed by Richard Brand of \n\n<a href=\"http://www.itannex.com\">\nItannex</a>,\n\nto handle the lack of an API to drive the IFC export functionality:\n\n<p>My tool needs to generate a ZIP file containing the Revit file and the IFC export. \nThis ZIP file should be created when the user selects a menu item in my application. \nThat is why I cannot produce the IFC files through a nightly batch process driving Revit through a journal file. \nI 'solved' it by checking if there is an IFC file present. If not, or if it is not recent, I ask the user to export the model to IFC by hand into a particular directory.\nAs long as the Revit API does not provide access to the IFC export I guess we have to solve this issue this way. \nIt should be much more user friendly if the IFC export would be generated automatically.</p>\n</p></p>"
  },
  {
    "original_filename": "0165_prompt_user",
    "header_text": "Prompt the User to Export to IFC",
    "local_header_href": "#prompt-the-user-to-export-to-ifc",
    "chunk_text": "<h3>Prompt the User to Export to IFC</h3><p>Another solution prompting the user to execute a command due to the lack of programmatic access was proposed by Richard Brand of \n\n<a href=\"http://www.itannex.com\">\nItannex</a>,\n\nto handle the lack of an API to drive the IFC export functionality:\n\n<p>My tool needs to generate a ZIP file containing the Revit file and the IFC export. \nThis ZIP file should be created when the user selects a menu item in my application. \nThat is why I cannot produce the IFC files through a nightly batch process driving Revit through a journal file. \nI 'solved' it by checking if there is an IFC file present. If not, or if it is not recent, I ask the user to export the model to IFC by hand into a particular directory.\nAs long as the Revit API does not provide access to the IFC export I guess we have to solve this issue this way. \nIt should be much more user friendly if the IFC export would be generated automatically.</p>\n</p>"
  }
]