[
  {
    "original_filename": "0221_add_category_to_binding",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0221_add_category_to_binding",
    "header_text": "Adding a Category to a Parameter Binding",
    "local_header_href": "#adding-a-category-to-a-parameter-binding",
    "chunk_text": "<h3>Adding a Category to a Parameter Binding</h3><p>Here is another interesting question raised and answered by Henrik Bengtsson of\n\n<a href=\"http://www.lindab.se\">\nLindab</a>.\n\nIt is another example of how you sometimes need to dig in rather deeply into Revit to update certain internal information stored in the Revit application or document object, a little bit similar to but also a bit more complex than the discussion on how to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/library-paths.html\">\nmodify the application options library paths</a>.</p><p>Before getting into Henrik's issue, here is some background information on the classes involved in defining the parameter binding.\nThe Binding class is a base class used to manage this kind of relationship.\nThis is what the Revit API documentation has to say about this class:</p><p style=\"color:darkblue\">There are currently two types of bindings available, instance and type binding.\nThe key difference between the two is that the instance bound parameters appear on all instances of the elements in those categories.\nChanging the parameter on one does not affect the other instances of the parameter.\nThe Type bound parameters appear only on the type object and is shared by all the instances that use that type.\nChanging the type bound parameter affects all instances of the elements that use that type.\nNote that a definition can only be bound to an instance or a type and not both.</p><p>The API defines a derived class named ElementBinding as a base class for all types of binding that attach to an element, and two further classes InstanceBinding and TypeBinding derived from that.\n\n<p>The ElementBinding class has a property named Categories returning a CategorySet class instance which allows us to retrieve or modify the categories to which a parameter definition will be bound.\nUnfortunately, simply adding a new category to this collection does not have the desired effect of updating the categories bound to a parameter in the Revit document.\nHere is Henrik's original question:\n\n<p><strong>Question:</strong> I have a set of existing parameter bindings which each bind a parameter definition to one or more categories.\nI now wish to implement a method to add a new category to an existing binding.\nSomething like this, which retrieves an external parameter definition from my shared parameters file and then checks whether it is connected to all the different required categories.\nIf not, I loop through my desired categories and add the missing ones:</p>\n<pre>\nDim extDef an ExternalBinding\n\nDim b As InstanceBinding _\n  = doc.ParameterBindings.Item(extDef)\n\nFor Each c As Category In categorySet\n  If Not b.Categories.Contains(c) Then\n    b.Categories.Insert(c)\n  End If\nNext\n</pre>\n<p>From the external definition, I obtain the instance binding object.\nI then try to add new categories to that.\nIt works fine programmatically, but has no effect on the Project Parameters displayed in the Revit user interface.</p>\n<p>After a rather convoluted communication process, a couple of misunderstandings, a period of rest for Henrik to enjoy a well-earned holiday in Spain, various demonstration projects and lots of research, here is Henrik's final solution:</p>\n<p><strong>Answer:</strong> Here is part of the routine which checks and adds required parameters, including four statements marked 'HB'.\nIf a given external definition for a specific shared parameter has not yet been added to the document for a given element binding, it does so.\nOtherwise, it retrieves the existing element binding and checks whether all required categories are present in it.\nIf not, they are added.\nIf the 'HB' lines are commented out, this is not reflected in the project.\nUncommenting the lines marked 'HB' causes the ReInsert method to be called after modifying the binding's category collection.\nThis is apparently the only way to force the update to have an effect on the project document:\n\n<pre class=\"code\">\n  <span class=\"blue\">For</span> <span class=\"blue\">Each</span> extDef <span class=\"blue\">As</span> ExternalDefinition <span class=\"blue\">In</span> Binding.ParametersCol\n\n    <span class=\"blue\">If</span> doc.ParameterBindings.Contains(extDef) <span class=\"blue\">Then</span>\n\n      <span class=\"blue\">Dim</span> Added <span class=\"blue\">As</span> <span class=\"blue\">Boolean</span> = <span class=\"blue\">False</span>\n      <span class=\"blue\">Dim</span> b <span class=\"blue\">As</span> ElementBinding = doc.ParameterBindings.Item(extDef)\n\n      <span class=\"blue\">For</span> <span class=\"blue\">Each</span> c <span class=\"blue\">As</span> Category <span class=\"blue\">In</span> categorySet\n\n        <span class=\"blue\">If</span> <span class=\"blue\">Not</span> b.Categories.Contains(c) <span class=\"blue\">Then</span>\n          b.Categories.Insert(c)\n          <b><span class=\"green\">'Added = True  ' HB</span></b>\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n\n      <span class=\"blue\">Next</span>\n\n<b>      <span class=\"green\">'If Added = True Then  ' HB</span>\n      <span class=\"green\">'  doc.ParameterBindings.ReInsert(extDef, b)  ' HB</span>\n      <span class=\"green\">'End If  ' HB</span></b>\n\n    <span class=\"blue\">Else</span>\n\n      doc.ParameterBindings.Insert(extDef, elementBinding)\n\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n\n  <span class=\"blue\">Next</span>\n</pre>\n\nHere are the steps to reproduce the issue:</p>\n<ol>\n<li>Run the external command with the lines marked HB commented out.\nLook at the Project Parameters section afterwards.\nThe parameter is only is connected to ProjectInformation, like it was originally.\nNo changes have been applied.\n\n<li>Remove the remark character in the lines marked HB and run the external command.\nNow there is a connection between the parameter and both ProjectInformation and Column, i.e. the changes have been successfully applied to the Revit project document.\n\n</li></li></ol>\n<p>Apparently, you have to make a call to the  ReInsert method  for the changes to have any effect.\nNothing else seems to be good enough.</p>\n<p>Many thanks to Henrik for all his research and this clean solution!</p>\n</p></p>"
  }
]