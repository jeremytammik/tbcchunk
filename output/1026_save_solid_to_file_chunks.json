[
  {
    "original_filename": "1026_save_solid_to_file",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1026_save_solid_to_file",
    "header_text": "Saving a Solid to a SAT File Implementation",
    "local_header_href": "#saving-a-solid-to-a-sat-file-implementation",
    "chunk_text": "<h3>Saving a Solid to a SAT File Implementation</h3><p>During my recent vacation, I published a description by my colleague\n\n<a href=\"http://adndevblog.typepad.com/technology_perspective/akira-kudo.html\">\nAkira Kudo</a> describing\n\nhow to research the Revit SDK samples to find all the required bits and pieces to solve the task of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/09/how-to-save-a-solid-to-a-file.html\">\nsaving a temporary in-memory Revit solid to an external SAT file</a>.</p><p>Victor Chekalin, or Виктор Чекалин, reacted to that and provides a complete Visual Studio project to demonstrate the full implementation of that functionality.</p><p>You can download it as a\n\n<a href=\"https://github.com/vchekalin/SaveSolidToFileSample/archive/master.zip\">\nzip archive</a> or\n\nclone the project from\n\n<a href=\"https://github.com/vchekalin/SaveSolidToFileSample\">GitHub</a>.</p><p>I grabbed Victor's sample, added a couple of trivial enhancements and included it as a new command CmdExportSolidToSat to The Building Coder sample collection.</p><p>It demonstrates the following steps:</p><ul>\n<li>Retrieve all floors from the model.</li>\n<li>Retrieve the floor solids.</li>\n<li>Calculate the intersection solid.</li>\n<li><a href=\"#2\">Search for the metric mass family template file</a>.</li>\n<li>Create a new temporary family.</li>\n<li>Create a free form element from the intersection solid.</li>\n<li>Create a 3D view.</li>\n<li>Export to SAT.</li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1026_save_solid_to_file",
    "header_text": "Determining the Full Path of a Family Template",
    "local_header_href": "#determining-the-full-path-of-a-family-template",
    "chunk_text": "<h4>Determining the Full Path of a Family Template</h4><p>One of the steps implements functionality to find the full file path of a given family template file using a recursive directory search method:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the full path of the first file </span>\n  <span class=\"gray\">///</span><span class=\"green\"> found matching the given filename pattern</span>\n  <span class=\"gray\">///</span><span class=\"green\"> in a recursive search through all </span>\n  <span class=\"gray\">///</span><span class=\"green\"> subdirectories of the given starting folder.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">string</span> DirSearch(\n    <span class=\"blue\">string</span> start_dir,\n    <span class=\"blue\">string</span> filename_pattern )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> d <span class=\"blue\">in</span> <span class=\"teal\">Directory</span>.GetDirectories(\n      start_dir ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> f <span class=\"blue\">in</span> <span class=\"teal\">Directory</span>.GetFiles(\n        d, filename_pattern ) )\n      {\n        <span class=\"blue\">return</span> f;\n      }\n \n      <span class=\"blue\">string</span> f2 = DirSearch( d, filename_pattern );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != f2 )\n      {\n        <span class=\"blue\">return</span> f2;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n</pre><p>With this method in place, I can determine the full path of the standard metric mass family template using a single statement like this:</p><pre class=\"code\">\n  <span class=\"green\">// Search for the metric mass family template file</span>\n \n  <span class=\"blue\">string</span> template_path = DirSearch(\n    app.FamilyTemplatePath,\n    <span class=\"maroon\">\"Metric Mass.rft\"</span> );\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "1026_save_solid_to_file",
    "header_text": "CmdExportSolidToSat External Command Implementation",
    "local_header_href": "#cmdexportsolidtosat-external-command-implementation",
    "chunk_text": "<h4>CmdExportSolidToSat External Command Implementation</h4><p>The other steps listed above are all pretty standard.</p><p>Here is the complete code of the external command:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"green\">// Retrieve all floors from the model</span>\n \n  <span class=\"blue\">var</span> floors\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Floor</span> ) )\n      .ToElements()\n      .Cast&lt;<span class=\"teal\">Floor</span>&gt;()\n      .ToList();\n \n  <span class=\"blue\">if</span>( 2 != floors.Count )\n  {\n    message = <span class=\"maroon\">\"Please create two intersected floors\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"green\">// Retrieve the floor solids</span>\n \n  <span class=\"teal\">Options</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n \n  <span class=\"blue\">var</span> geometry1 = floors[0].get_Geometry( opt );\n  <span class=\"blue\">var</span> geometry2 = floors[1].get_Geometry( opt );\n \n  <span class=\"blue\">var</span> solid1 = geometry1.FirstOrDefault() <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n  <span class=\"blue\">var</span> solid2 = geometry2.FirstOrDefault() <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n  <span class=\"green\">// Calculate the intersection solid</span>\n \n  <span class=\"blue\">var</span> intersectedSolid = <span class=\"teal\">BooleanOperationsUtils</span>\n    .ExecuteBooleanOperation( solid1, solid2,\n      <span class=\"teal\">BooleanOperationsType</span>.Intersect );\n \n  <span class=\"green\">// Search for the metric mass family template file</span>\n \n  <span class=\"blue\">string</span> template_path = DirSearch(\n    app.FamilyTemplatePath,\n    <span class=\"maroon\">\"Metric Mass.rft\"</span> );\n \n  <span class=\"green\">// Create a new temporary family</span>\n \n  <span class=\"blue\">var</span> family_doc = app.NewFamilyDocument(\n    template_path );\n \n  <span class=\"green\">// Create a free form element </span>\n  <span class=\"green\">// from the intersection solid</span>\n \n  <span class=\"blue\">using</span>( <span class=\"blue\">var</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( family_doc ) )\n  {\n    t.Start( <span class=\"maroon\">\"Add Free Form Element\"</span> );\n \n    <span class=\"blue\">var</span> freeFormElement = <span class=\"teal\">FreeFormElement</span>.Create(\n      family_doc, intersectedSolid );\n \n    t.Commit();\n  }\n \n  <span class=\"blue\">string</span> dir = <span class=\"teal\">Path</span>.GetTempPath();\n \n  <span class=\"blue\">string</span> filepath = <span class=\"teal\">Path</span>.Combine( dir,\n    <span class=\"maroon\">\"floor_intersection_family.rfa\"</span> );\n \n  <span class=\"teal\">SaveAsOptions</span> sao = <span class=\"blue\">new</span> <span class=\"teal\">SaveAsOptions</span>()\n  {\n    OverwriteExistingFile = <span class=\"blue\">true</span>\n  };\n \n  family_doc.SaveAs( filepath, sao );\n \n  <span class=\"green\">// Create 3D View</span>\n \n  <span class=\"blue\">var</span> viewFamilyType\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( family_doc )\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewFamilyType</span> ) )\n    .OfType&lt;<span class=\"teal\">ViewFamilyType</span>&gt;()\n    .FirstOrDefault( x =&gt;\n      x.ViewFamily == <span class=\"teal\">ViewFamily</span>.ThreeDimensional );\n \n  <span class=\"teal\">View3D</span> threeDView;\n \n  <span class=\"blue\">using</span>( <span class=\"blue\">var</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( family_doc ) )\n  {\n    t.Start( <span class=\"maroon\">\"Create 3D View\"</span> );\n \n    threeDView = <span class=\"teal\">View3D</span>.CreateIsometric(\n      family_doc, viewFamilyType.Id );\n \n    t.Commit();\n  }\n \n  <span class=\"green\">// Export to SAT</span>\n \n  <span class=\"blue\">var</span> viewSet = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;()\n  {\n    threeDView.Id\n  };\n \n  <span class=\"teal\">SATExportOptions</span> exportOptions\n    = <span class=\"blue\">new</span> <span class=\"teal\">SATExportOptions</span>();\n \n  <span class=\"blue\">var</span> res = family_doc.Export( dir,\n    <span class=\"maroon\">\"SolidFile.sat\"</span>, viewSet, exportOptions );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre><p>Here is the SAT file\n\n<a href=\"zip/SolidFile.sat\">SolidFile.sat</a> generated\n\nby the two intersecting floors example that I used to test the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/09/boolean-operations-for-2d-polygons.html\">\nRvtClipper Boolean operations for 2D polygons</a>:</p><center>\n<img alt=\"SAT file reimported into Revit\" src=\"img/import_sat.png\" width=\"220\"/>\n</center><p>It generates the following warning when reimported into Revit, but the missing pieces do not make any visibly detectable difference:</p><center>\n<img alt=\"SAT file import warning\" src=\"img/import_sat_warning.png\" width=\"400\"/>\n</center><p>They do however affect what Revit considers the size of imported object, because if I zoom the model containing nothing but this SAT import to its extents, the actual geometry appears pretty miniscular:</p><center>\n<img alt=\"SAT file import extents\" src=\"img/import_sat_extents.png\" width=\"400\"/>\n</center><p>That need not worry us here, though.</p><p>Here is\n\n<a href=\"zip/bc_14_104_0.zip\">\nversion 2014.0.104.0</a> of\n\nThe Building Coder samples source code, Visual Studio solution and RvtSamples include file including the new CmdExportSolidToSat command.</p><p>Very many thanks to Victor for providing this nice implementation!</p>"
  }
]