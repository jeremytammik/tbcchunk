[
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "UIView, Windows Coordinates, ReferenceIntersector and My Own Tooltip",
    "local_header_href": "#uiview-windows-coordinates-referenceintersector-and-my-own-tooltip",
    "chunk_text": "<h3>UIView, Windows Coordinates, ReferenceIntersector and My Own Tooltip</h3><p>Here is my well-meant contribution to making this the most exciting Wednesday of your entire week.\n\n<p>For the first time in history, the Revit 2013 UIView class provides a possibility to convert back and forth between Revit model coordinates and Windows device screen points.\n\n<p>I imagined making use of that right away when I read about the UIView class, and mentioned it when discussing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/uiview-and-windows-device-coordinates.html\">\nUIView and Windows device coordinates</a>.\n\n<p>I am still a bit surprised that I have not yet received any questions about these exciting possibilities.\nWell, anyway, that gives me a chance to finally dive into this exploration free of preconceptions.\n\n<p>Another Revit 2013 topic that I wanted to talk about for a long time is the new ReferenceIntersector class.\nMy previous attempts at publishing anything on it were thwarted by running into some unintended features which have meanwhile been attended to.\n\n<p>Now I can combine both of these topics into a single nice example, presenting my very own tooltips displaying any information I like based on the cursor location in the Revit BIM.\n\n<p>Does that sound cool, or what?\n\n<p>To give you an idea of what I am talking about, here is a \n\n<a href=\"http://youtu.be/-5cx_I9OzFM\">\ntwo-minute video</a> depicting \n\na sample run demonstrating the final result, with the normal Revit tooltips and my own specialised ones displayed side by side.\n\n<p>To run the demo, I open up the basic architectural sample project, switch away from the perspective view, since add-ins are disabled there, select Level 2, turn on my own tooltips, hover around different elements to compare the Revit tooltip with my own one, and turn off my tooltips again:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/-5cx_I9OzFM?rel=0\" width=\"480\"></iframe>\n<a name=\"1\"></a>\n<h4>Table of Contents</h4>\n<p>To display a useful tooltip, the user needs to be free to play around in the model.\n\n<p>Simultaneously, my add-in needs to be able to access the Windows cursor location, determine the corresponding Revit model coordinates from it, and query the Revit BIM to determine the information I would like to display.\n\n<p>This calls for an Idling event handler, adding a third topic to the two already mentioned above.\n\n<p>We thus end up with the following list, including hints on the respective approaches, solutions, and helper  methods:\n\n<ul>\n<li><a href=\"#2\">Top-level form and Idling event management</a>: ModelessForm_IdlingEvent.\n<li><a href=\"#3\">Helper methods</a>: GetActiveUiView, GetView3d, ElementDescription.\n<li><a href=\"#4\">Idling event handler</a>:\n<ul>\n<li>Access <a href=\"#5\">Windows cursor location</a>: System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position.\n<li>Determine <a href=\"#6\">Revit model coordinates</a>: <span class=\"teal\">UIView</span>.\n<li><a href=\"#7\">Query Revit BIM for information</a>: <span class=\"teal\">ReferenceIntersector</span>.\n<li><a href=\"#8\">Display tooltip</a>: <span class=\"teal\">JtTooltipForm</span>.\n<li><a href=\"#9\">Entire implementation</a>.\n</li></li></li></li></li></ul>\n<li>Toggle tooltip <a href=\"#10\">on and off commands</a>.\n<li><a href=\"#11\">Conclusion and download</a>.\n</li></li></li></li></li></ul>\n<p>Before closing, I also mention Saikat's new posts on \n\n<a href=\"#21\">multi-image naming conventions</a> and\n<a href=\"#22\">text file TaskDialog command links</a>,\n<a href=\"#23\">DesignScript</a> availability on Autodesk Labs, and a nice video of my friend \n<a href=\"#24\">Falk on the Schafberg</a>.\n\n\n<a name=\"2\"></a>\n<h4>Top-level Form and Idling Event Management</h4>\n<p>As you hopefully know by now, the implementation to handle the Idling event needs to be really clean and clear and is a little bit tricky.\n\n<p>I strongly suggest basing anything you do on the ModelessForm_IdlingEvent SDK sample.\n\n<p>If you implemented your Idling event handler in any other way in the past, it might be a good idea revisiting it now and comparing notes with that sample.\n\n<p>I based my WinTooltip external application on it, anyway.\n\n<p>It handles all the modeless form interaction in the external application implementation.\n\n<p>In my case, the modeless form is either a Visual Studio designer generated JtTooltipForm or a hand-built JtTooltipForm2.\n\n<p>The external application is instantiated as a singleton instance, and provides public access to that instance so that external commands can access it and use its functionality to show and hide the modeless form.\n\n<p>It implements an internal CloseForm method, public methods ShowForm and HideForm, called by the external commands, and the standard interface methods OnStartup and OnShutdown, like this:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Singleton external application class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> _app = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Provide access to singleton class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> Instance\n  {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _app; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The tooltip form to display.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">JtTooltipForm2</span> _form = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Dispose and null out form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return true if it was previously not disposed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> CloseForm()\n  {\n    <span class=\"blue\">bool</span> rc = _form != <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( rc )\n    {\n      <span class=\"blue\">if</span>( !_form.IsDisposed )\n      {\n        _form.Dispose();\n      }\n      _form = <span class=\"blue\">null</span>;\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and show the form, </span>\n  <span class=\"gray\">///</span><span class=\"green\"> unless it already exists.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The external command invokes </span>\n  <span class=\"gray\">///</span><span class=\"green\"> this on end-user request.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ShowForm( <span class=\"teal\">UIApplication</span> uiapp )\n  {\n    <span class=\"green\">// If we do not have a form yet, create and show it</span>\n \n    <span class=\"blue\">if</span>( _form == <span class=\"blue\">null</span> || _form.IsDisposed )\n    {\n      <span class=\"green\">// Instantiate JtTooltipForm to use </span>\n      <span class=\"green\">// the designer generated form.</span>\n \n      _form = <span class=\"blue\">new</span> <span class=\"teal\">JtTooltipForm2</span>();\n \n      _form.Show();\n \n      <span class=\"green\">// If we have a form, we need Idling too</span>\n \n      uiapp.Idling += IdlingHandler;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Hide the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The external command invokes </span>\n  <span class=\"gray\">///</span><span class=\"green\"> this on end-user request.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> HideForm( <span class=\"teal\">UIApplication</span> uiapp )\n  {\n    <span class=\"blue\">if</span>( CloseForm() )\n    {\n      <span class=\"green\">// If the form was showing, we had subscribed</span>\n \n      uiapp.Idling -= IdlingHandler;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _app = <span class=\"blue\">this</span>;\n    _form = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">if</span>( CloseForm() )\n    {\n      a.Idling -= IdlingHandler;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<a name=\"3\"></a>\n<h4>Helper Methods</h4>\n<p>Apart from the top-level management, the Idling event handler does all the rest of the work.\n\n<p>Before we get to the event handler itself, I'll present the three helper methods it uses:\n\n<ul>\n<li>GetActiveUiView: retrieve the active UIView.\n<li>GetView3d: retrieve the 3D view named \"{3D}\".\n<li>ElementDescription: return a descriptive text for a given Revit element.\n</li></li></li></ul>\n<p>We can get the active document view directly, but need some additional coding to determine the associated UIView, for example like this:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return currently active UIView or null.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"teal\">UIView</span> GetActiveUiView( \n  <span class=\"teal\">UIDocument</span> uidoc )\n{\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n  <span class=\"teal\">View</span> view = doc.ActiveView;\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">UIView</span>&gt; uiviews = uidoc.GetOpenUIViews();\n  <span class=\"teal\">UIView</span> uiview = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">UIView</span> uv <span class=\"blue\">in</span> uiviews )\n  {\n    <span class=\"blue\">if</span>( uv.ViewId.Equals( view.Id ) )\n    {\n      uiview = uv;\n      <span class=\"blue\">break</span>;\n    }\n  }\n  <span class=\"blue\">return</span> uiview;\n}\n</pre>\n<p>The ReferenceIntersector constructor requires a 3D view argument in which the ray tracing takes place.\nIn this sample, I assume that a suitable 3D view named \"{3D}\" is available and retrieve that using one single line of filtered element and LINQ driven code:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the 3D view named \"{3D}\".</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">View3D</span> GetView3d( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">View3D</span> ) )\n    .Cast&lt;<span class=\"teal\">View3D</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">View3D</span>&gt;( \n      v =&gt; v.Name.Equals( <span class=\"maroon\">\"{3D}\"</span> ) );\n}\n</pre>\n<p>You can obviously modify this in any way you like and set up a suitable 3D view to suit your specific view setting, sectioning and filtering needs.\n\n<p>The location dependent BIM information displayed in the tooltip can be determined completely freely.\nIn my case, I simply detect what element the cursor is hovering over and use the ElementDescription method to put together a descriptive text for it:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return a string describing the given element:</span>\n<span class=\"gray\">///</span><span class=\"green\"> .NET type name,</span>\n<span class=\"gray\">///</span><span class=\"green\"> category name,</span>\n<span class=\"gray\">///</span><span class=\"green\"> family and symbol name for a family instance,</span>\n<span class=\"gray\">///</span><span class=\"green\"> element id and element name.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> ElementDescription(\n  <span class=\"teal\">Element</span> e )\n{\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"&lt;null&gt;\"</span>;\n  }\n \n  <span class=\"green\">// For a wall, the element name equals the</span>\n  <span class=\"green\">// wall type name, which is equivalent to the</span>\n  <span class=\"green\">// family name ...</span>\n \n  <span class=\"teal\">FamilyInstance</span> fi = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"blue\">string</span> typeName = e.GetType().Name;\n \n  <span class=\"blue\">string</span> categoryName = ( <span class=\"blue\">null</span> == e.Category )\n    ? <span class=\"blue\">string</span>.Empty\n    : e.Category.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">string</span> familyName = ( <span class=\"blue\">null</span> == fi )\n    ? <span class=\"blue\">string</span>.Empty\n    : fi.Symbol.Family.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">string</span> symbolName = ( <span class=\"blue\">null</span> == fi\n    || e.Name.Equals( fi.Symbol.Name ) )\n      ? <span class=\"blue\">string</span>.Empty\n      : fi.Symbol.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} {1}{2}{3}&lt;{4} {5}&gt;\"</span>,\n    typeName, categoryName, familyName,\n    symbolName, e.Id.IntegerValue, e.Name );\n}\n</pre>\n<p>This is somewhat similar to and yet does not exactly match the information displayed by the standard Revit tooltip and other parts of the user interface, as you might have noticed in the \n\n<a href=\"http://youtu.be/-5cx_I9OzFM\">\nvideo recording</a>.\n\n\n<a name=\"4\"></a>\n<h4>Idling Event Handler</h4>\n<p>The Idling event handler implements the following steps, which we first discuss one by one before presenting the entire code in context:\n\n<ul>\n<li>Access <a href=\"#5\">Windows cursor location</a>: System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position.\n<li>Determine <a href=\"#6\">Revit model coordinates</a>: <span class=\"teal\">UIView</span>.\n<li><a href=\"#7\">Query Revit BIM for information</a>: <span class=\"teal\">ReferenceIntersector</span>.\n<li><a href=\"#8\">Display tooltip</a>: <span class=\"teal\">JtTooltipForm</span>.\n<li><a href=\"#9\">Entire implementation</a>.\n</li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Access Windows Cursor Location</h4>\n<p>Converting from the cursor position retrieved in Windows device coordinates to Revit model coordinates is possible by calculating the relative position in the UIView.\n\n<p>Here is an illustration assuming a screen resolution of 1600 x 1200 with a Revit view located at the rectangle 800,150 to 1500,650, displaying a plan view of part of the Revit model, with model coordinates ranging from 10,40,0 to 220,120,0.\nThe current cursor location is represented by the green spot:</p>\n<center>\n<img alt=\"Windows device coordinate to Revit model coordinate mapping\" src=\"img/wincoords_mapping.png\"/>\n</center>\n<p>The Windows device coordinate origin 0,0 is at the upper left, and Y values increase downwards, whereas the Revit model coordinate Y values increase upwards.\n\n<p>You can easily query the cursor position in device coordinates on the Windows screen from .NET framework at any time using the System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position property:\n\n<pre class=\"code\">\n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n</pre>\n<a name=\"6\"></a>\n<h4>Determine Revit Model Coordinates</h4>\n<p>The cursor location is obviously returned in Windows device coordinates, stored in the point (or vector) variable 'p'.\n\n<p>The aim is to determine the location indicated by this point in Revit model coordinates, for example by determining the vector v from the lower left corner of the Revit view to that location.\n\n<p>We can easily determine the relative position of p between the two corners of the UIView in Windows device coordinates by subtracting the lower left hand corner and dividing by the total width and height to obtain the relative width and height location values dx and dy like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n  <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n  <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n    / ( rect.Right - rect.Left );\n \n  <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n    / ( rect.Top - rect.Bottom );\n</pre>\n<!--\n<p>For instance, if p is at 900,300, then its relative location is a bit more than 0.5 in the X and 0.25 in the Y direction.\nThese two relative values are calculated and stored in dx and dy.\n-->\n<p>From the UIView, we can also determine model coordinates of the view corners.\nThey are stored in a and b, respectively.\n\n<p>Now it is easy to calculate the cursor point 'q' in model coordinates from the two relative values like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n  <span class=\"teal\">XYZ</span> a = corners[0];\n  <span class=\"teal\">XYZ</span> b = corners[1];\n  <span class=\"teal\">XYZ</span> v = b - a;\n \n  <span class=\"teal\">XYZ</span> q = a\n    + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n    + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n</pre>\n<a name=\"7\"></a>\n<h4>Query Revit BIM for Information using ReferenceIntersector Ray Casting</h4>\n<p>Once we have the model space cursor location 'q', we can calculate a point beyond the model extents (hopefully) from which one can picture the user looking into the model.\n\n<p>The first element intersected by a ray cast from that point in the view direction should be the one we are interested in displaying information about.\n\n<p>Initially, the sample run was a bit boring, because the only element encountered when looking from straight above was always the roof.\n\n<p>I tweaked that to make the example more interesting, not by modifying the model itself – I use the standard architectural basic sample project rac_basic_sample_project.rvt – but by adding a filter to remove all roof category elements from the reference intersector results instead.\nThe exact elements of interest and information to display are entirely up to you and your needs to determine, of course.\n\n<p>The ray casting requires a 3D view to operate in. \nIn this case, I simply pick the one named \"{3D}\" returned by the GetView3d helper method.\nYou can set up your own view with specific graphics properties, section cuts, and only certain elements visible, if that better suits your requirements.\n\n<p>Here is the code determining the view, view direction and ray origin, setting up the intersector, determining the target element, and defining the tooltip text to display in the variable 's':\n\n<pre class=\"code\">\n  <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n  <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n  <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n  <span class=\"green\">// Find all elements:</span>\n \n  <span class=\"green\">//ReferenceIntersector ri</span>\n  <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n  <span class=\"green\">// Find all elements except roofs:</span>\n \n  <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n    <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ReferenceIntersector</span> ri \n    = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n      <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n  <span class=\"teal\">ReferenceWithContext</span> rc\n    = ri.FindNearest( origin, -viewdir );\n \n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n  {\n    <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    s = ElementDescription( e );\n  }\n</pre>\n<a name=\"8\"></a>\n<h4>Display Tooltip and the JtTooltipForm class</h4>\n<p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Table of Contents",
    "local_header_href": "#table-of-contents",
    "chunk_text": "<h4>Table of Contents</h4><p>To display a useful tooltip, the user needs to be free to play around in the model.\n\n<p>Simultaneously, my add-in needs to be able to access the Windows cursor location, determine the corresponding Revit model coordinates from it, and query the Revit BIM to determine the information I would like to display.\n\n<p>This calls for an Idling event handler, adding a third topic to the two already mentioned above.\n\n<p>We thus end up with the following list, including hints on the respective approaches, solutions, and helper  methods:\n\n<ul>\n<li><a href=\"#2\">Top-level form and Idling event management</a>: ModelessForm_IdlingEvent.\n<li><a href=\"#3\">Helper methods</a>: GetActiveUiView, GetView3d, ElementDescription.\n<li><a href=\"#4\">Idling event handler</a>:\n<ul>\n<li>Access <a href=\"#5\">Windows cursor location</a>: System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position.\n<li>Determine <a href=\"#6\">Revit model coordinates</a>: <span class=\"teal\">UIView</span>.\n<li><a href=\"#7\">Query Revit BIM for information</a>: <span class=\"teal\">ReferenceIntersector</span>.\n<li><a href=\"#8\">Display tooltip</a>: <span class=\"teal\">JtTooltipForm</span>.\n<li><a href=\"#9\">Entire implementation</a>.\n</li></li></li></li></li></ul>\n<li>Toggle tooltip <a href=\"#10\">on and off commands</a>.\n<li><a href=\"#11\">Conclusion and download</a>.\n</li></li></li></li></li></ul>\n<p>Before closing, I also mention Saikat's new posts on \n\n<a href=\"#21\">multi-image naming conventions</a> and\n<a href=\"#22\">text file TaskDialog command links</a>,\n<a href=\"#23\">DesignScript</a> availability on Autodesk Labs, and a nice video of my friend \n<a href=\"#24\">Falk on the Schafberg</a>.\n\n\n<a name=\"2\"></a>\n<h4>Top-level Form and Idling Event Management</h4>\n<p>As you hopefully know by now, the implementation to handle the Idling event needs to be really clean and clear and is a little bit tricky.\n\n<p>I strongly suggest basing anything you do on the ModelessForm_IdlingEvent SDK sample.\n\n<p>If you implemented your Idling event handler in any other way in the past, it might be a good idea revisiting it now and comparing notes with that sample.\n\n<p>I based my WinTooltip external application on it, anyway.\n\n<p>It handles all the modeless form interaction in the external application implementation.\n\n<p>In my case, the modeless form is either a Visual Studio designer generated JtTooltipForm or a hand-built JtTooltipForm2.\n\n<p>The external application is instantiated as a singleton instance, and provides public access to that instance so that external commands can access it and use its functionality to show and hide the modeless form.\n\n<p>It implements an internal CloseForm method, public methods ShowForm and HideForm, called by the external commands, and the standard interface methods OnStartup and OnShutdown, like this:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Singleton external application class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> _app = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Provide access to singleton class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> Instance\n  {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _app; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The tooltip form to display.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">JtTooltipForm2</span> _form = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Dispose and null out form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return true if it was previously not disposed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> CloseForm()\n  {\n    <span class=\"blue\">bool</span> rc = _form != <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( rc )\n    {\n      <span class=\"blue\">if</span>( !_form.IsDisposed )\n      {\n        _form.Dispose();\n      }\n      _form = <span class=\"blue\">null</span>;\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and show the form, </span>\n  <span class=\"gray\">///</span><span class=\"green\"> unless it already exists.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The external command invokes </span>\n  <span class=\"gray\">///</span><span class=\"green\"> this on end-user request.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ShowForm( <span class=\"teal\">UIApplication</span> uiapp )\n  {\n    <span class=\"green\">// If we do not have a form yet, create and show it</span>\n \n    <span class=\"blue\">if</span>( _form == <span class=\"blue\">null</span> || _form.IsDisposed )\n    {\n      <span class=\"green\">// Instantiate JtTooltipForm to use </span>\n      <span class=\"green\">// the designer generated form.</span>\n \n      _form = <span class=\"blue\">new</span> <span class=\"teal\">JtTooltipForm2</span>();\n \n      _form.Show();\n \n      <span class=\"green\">// If we have a form, we need Idling too</span>\n \n      uiapp.Idling += IdlingHandler;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Hide the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The external command invokes </span>\n  <span class=\"gray\">///</span><span class=\"green\"> this on end-user request.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> HideForm( <span class=\"teal\">UIApplication</span> uiapp )\n  {\n    <span class=\"blue\">if</span>( CloseForm() )\n    {\n      <span class=\"green\">// If the form was showing, we had subscribed</span>\n \n      uiapp.Idling -= IdlingHandler;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _app = <span class=\"blue\">this</span>;\n    _form = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">if</span>( CloseForm() )\n    {\n      a.Idling -= IdlingHandler;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<a name=\"3\"></a>\n<h4>Helper Methods</h4>\n<p>Apart from the top-level management, the Idling event handler does all the rest of the work.\n\n<p>Before we get to the event handler itself, I'll present the three helper methods it uses:\n\n<ul>\n<li>GetActiveUiView: retrieve the active UIView.\n<li>GetView3d: retrieve the 3D view named \"{3D}\".\n<li>ElementDescription: return a descriptive text for a given Revit element.\n</li></li></li></ul>\n<p>We can get the active document view directly, but need some additional coding to determine the associated UIView, for example like this:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return currently active UIView or null.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"teal\">UIView</span> GetActiveUiView( \n  <span class=\"teal\">UIDocument</span> uidoc )\n{\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n  <span class=\"teal\">View</span> view = doc.ActiveView;\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">UIView</span>&gt; uiviews = uidoc.GetOpenUIViews();\n  <span class=\"teal\">UIView</span> uiview = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">UIView</span> uv <span class=\"blue\">in</span> uiviews )\n  {\n    <span class=\"blue\">if</span>( uv.ViewId.Equals( view.Id ) )\n    {\n      uiview = uv;\n      <span class=\"blue\">break</span>;\n    }\n  }\n  <span class=\"blue\">return</span> uiview;\n}\n</pre>\n<p>The ReferenceIntersector constructor requires a 3D view argument in which the ray tracing takes place.\nIn this sample, I assume that a suitable 3D view named \"{3D}\" is available and retrieve that using one single line of filtered element and LINQ driven code:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the 3D view named \"{3D}\".</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">View3D</span> GetView3d( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">View3D</span> ) )\n    .Cast&lt;<span class=\"teal\">View3D</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">View3D</span>&gt;( \n      v =&gt; v.Name.Equals( <span class=\"maroon\">\"{3D}\"</span> ) );\n}\n</pre>\n<p>You can obviously modify this in any way you like and set up a suitable 3D view to suit your specific view setting, sectioning and filtering needs.\n\n<p>The location dependent BIM information displayed in the tooltip can be determined completely freely.\nIn my case, I simply detect what element the cursor is hovering over and use the ElementDescription method to put together a descriptive text for it:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return a string describing the given element:</span>\n<span class=\"gray\">///</span><span class=\"green\"> .NET type name,</span>\n<span class=\"gray\">///</span><span class=\"green\"> category name,</span>\n<span class=\"gray\">///</span><span class=\"green\"> family and symbol name for a family instance,</span>\n<span class=\"gray\">///</span><span class=\"green\"> element id and element name.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> ElementDescription(\n  <span class=\"teal\">Element</span> e )\n{\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"&lt;null&gt;\"</span>;\n  }\n \n  <span class=\"green\">// For a wall, the element name equals the</span>\n  <span class=\"green\">// wall type name, which is equivalent to the</span>\n  <span class=\"green\">// family name ...</span>\n \n  <span class=\"teal\">FamilyInstance</span> fi = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"blue\">string</span> typeName = e.GetType().Name;\n \n  <span class=\"blue\">string</span> categoryName = ( <span class=\"blue\">null</span> == e.Category )\n    ? <span class=\"blue\">string</span>.Empty\n    : e.Category.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">string</span> familyName = ( <span class=\"blue\">null</span> == fi )\n    ? <span class=\"blue\">string</span>.Empty\n    : fi.Symbol.Family.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">string</span> symbolName = ( <span class=\"blue\">null</span> == fi\n    || e.Name.Equals( fi.Symbol.Name ) )\n      ? <span class=\"blue\">string</span>.Empty\n      : fi.Symbol.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} {1}{2}{3}&lt;{4} {5}&gt;\"</span>,\n    typeName, categoryName, familyName,\n    symbolName, e.Id.IntegerValue, e.Name );\n}\n</pre>\n<p>This is somewhat similar to and yet does not exactly match the information displayed by the standard Revit tooltip and other parts of the user interface, as you might have noticed in the \n\n<a href=\"http://youtu.be/-5cx_I9OzFM\">\nvideo recording</a>.\n\n\n<a name=\"4\"></a>\n<h4>Idling Event Handler</h4>\n<p>The Idling event handler implements the following steps, which we first discuss one by one before presenting the entire code in context:\n\n<ul>\n<li>Access <a href=\"#5\">Windows cursor location</a>: System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position.\n<li>Determine <a href=\"#6\">Revit model coordinates</a>: <span class=\"teal\">UIView</span>.\n<li><a href=\"#7\">Query Revit BIM for information</a>: <span class=\"teal\">ReferenceIntersector</span>.\n<li><a href=\"#8\">Display tooltip</a>: <span class=\"teal\">JtTooltipForm</span>.\n<li><a href=\"#9\">Entire implementation</a>.\n</li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Access Windows Cursor Location</h4>\n<p>Converting from the cursor position retrieved in Windows device coordinates to Revit model coordinates is possible by calculating the relative position in the UIView.\n\n<p>Here is an illustration assuming a screen resolution of 1600 x 1200 with a Revit view located at the rectangle 800,150 to 1500,650, displaying a plan view of part of the Revit model, with model coordinates ranging from 10,40,0 to 220,120,0.\nThe current cursor location is represented by the green spot:</p>\n<center>\n<img alt=\"Windows device coordinate to Revit model coordinate mapping\" src=\"img/wincoords_mapping.png\"/>\n</center>\n<p>The Windows device coordinate origin 0,0 is at the upper left, and Y values increase downwards, whereas the Revit model coordinate Y values increase upwards.\n\n<p>You can easily query the cursor position in device coordinates on the Windows screen from .NET framework at any time using the System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position property:\n\n<pre class=\"code\">\n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n</pre>\n<a name=\"6\"></a>\n<h4>Determine Revit Model Coordinates</h4>\n<p>The cursor location is obviously returned in Windows device coordinates, stored in the point (or vector) variable 'p'.\n\n<p>The aim is to determine the location indicated by this point in Revit model coordinates, for example by determining the vector v from the lower left corner of the Revit view to that location.\n\n<p>We can easily determine the relative position of p between the two corners of the UIView in Windows device coordinates by subtracting the lower left hand corner and dividing by the total width and height to obtain the relative width and height location values dx and dy like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n  <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n  <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n    / ( rect.Right - rect.Left );\n \n  <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n    / ( rect.Top - rect.Bottom );\n</pre>\n<!--\n<p>For instance, if p is at 900,300, then its relative location is a bit more than 0.5 in the X and 0.25 in the Y direction.\nThese two relative values are calculated and stored in dx and dy.\n-->\n<p>From the UIView, we can also determine model coordinates of the view corners.\nThey are stored in a and b, respectively.\n\n<p>Now it is easy to calculate the cursor point 'q' in model coordinates from the two relative values like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n  <span class=\"teal\">XYZ</span> a = corners[0];\n  <span class=\"teal\">XYZ</span> b = corners[1];\n  <span class=\"teal\">XYZ</span> v = b - a;\n \n  <span class=\"teal\">XYZ</span> q = a\n    + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n    + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n</pre>\n<a name=\"7\"></a>\n<h4>Query Revit BIM for Information using ReferenceIntersector Ray Casting</h4>\n<p>Once we have the model space cursor location 'q', we can calculate a point beyond the model extents (hopefully) from which one can picture the user looking into the model.\n\n<p>The first element intersected by a ray cast from that point in the view direction should be the one we are interested in displaying information about.\n\n<p>Initially, the sample run was a bit boring, because the only element encountered when looking from straight above was always the roof.\n\n<p>I tweaked that to make the example more interesting, not by modifying the model itself – I use the standard architectural basic sample project rac_basic_sample_project.rvt – but by adding a filter to remove all roof category elements from the reference intersector results instead.\nThe exact elements of interest and information to display are entirely up to you and your needs to determine, of course.\n\n<p>The ray casting requires a 3D view to operate in. \nIn this case, I simply pick the one named \"{3D}\" returned by the GetView3d helper method.\nYou can set up your own view with specific graphics properties, section cuts, and only certain elements visible, if that better suits your requirements.\n\n<p>Here is the code determining the view, view direction and ray origin, setting up the intersector, determining the target element, and defining the tooltip text to display in the variable 's':\n\n<pre class=\"code\">\n  <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n  <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n  <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n  <span class=\"green\">// Find all elements:</span>\n \n  <span class=\"green\">//ReferenceIntersector ri</span>\n  <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n  <span class=\"green\">// Find all elements except roofs:</span>\n \n  <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n    <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ReferenceIntersector</span> ri \n    = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n      <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n  <span class=\"teal\">ReferenceWithContext</span> rc\n    = ri.FindNearest( origin, -viewdir );\n \n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n  {\n    <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    s = ElementDescription( e );\n  }\n</pre>\n<a name=\"8\"></a>\n<h4>Display Tooltip and the JtTooltipForm class</h4>\n<p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Top-level Form and Idling Event Management",
    "local_header_href": "#top-level-form-and-idling-event-management",
    "chunk_text": "<h4>Top-level Form and Idling Event Management</h4><p>As you hopefully know by now, the implementation to handle the Idling event needs to be really clean and clear and is a little bit tricky.\n\n<p>I strongly suggest basing anything you do on the ModelessForm_IdlingEvent SDK sample.\n\n<p>If you implemented your Idling event handler in any other way in the past, it might be a good idea revisiting it now and comparing notes with that sample.\n\n<p>I based my WinTooltip external application on it, anyway.\n\n<p>It handles all the modeless form interaction in the external application implementation.\n\n<p>In my case, the modeless form is either a Visual Studio designer generated JtTooltipForm or a hand-built JtTooltipForm2.\n\n<p>The external application is instantiated as a singleton instance, and provides public access to that instance so that external commands can access it and use its functionality to show and hide the modeless form.\n\n<p>It implements an internal CloseForm method, public methods ShowForm and HideForm, called by the external commands, and the standard interface methods OnStartup and OnShutdown, like this:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Singleton external application class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> _app = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Provide access to singleton class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> Instance\n  {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _app; }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The tooltip form to display.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">JtTooltipForm2</span> _form = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Dispose and null out form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return true if it was previously not disposed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> CloseForm()\n  {\n    <span class=\"blue\">bool</span> rc = _form != <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( rc )\n    {\n      <span class=\"blue\">if</span>( !_form.IsDisposed )\n      {\n        _form.Dispose();\n      }\n      _form = <span class=\"blue\">null</span>;\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and show the form, </span>\n  <span class=\"gray\">///</span><span class=\"green\"> unless it already exists.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The external command invokes </span>\n  <span class=\"gray\">///</span><span class=\"green\"> this on end-user request.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ShowForm( <span class=\"teal\">UIApplication</span> uiapp )\n  {\n    <span class=\"green\">// If we do not have a form yet, create and show it</span>\n \n    <span class=\"blue\">if</span>( _form == <span class=\"blue\">null</span> || _form.IsDisposed )\n    {\n      <span class=\"green\">// Instantiate JtTooltipForm to use </span>\n      <span class=\"green\">// the designer generated form.</span>\n \n      _form = <span class=\"blue\">new</span> <span class=\"teal\">JtTooltipForm2</span>();\n \n      _form.Show();\n \n      <span class=\"green\">// If we have a form, we need Idling too</span>\n \n      uiapp.Idling += IdlingHandler;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Hide the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The external command invokes </span>\n  <span class=\"gray\">///</span><span class=\"green\"> this on end-user request.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> HideForm( <span class=\"teal\">UIApplication</span> uiapp )\n  {\n    <span class=\"blue\">if</span>( CloseForm() )\n    {\n      <span class=\"green\">// If the form was showing, we had subscribed</span>\n \n      uiapp.Idling -= IdlingHandler;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _app = <span class=\"blue\">this</span>;\n    _form = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">if</span>( CloseForm() )\n    {\n      a.Idling -= IdlingHandler;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<a name=\"3\"></a>\n<h4>Helper Methods</h4>\n<p>Apart from the top-level management, the Idling event handler does all the rest of the work.\n\n<p>Before we get to the event handler itself, I'll present the three helper methods it uses:\n\n<ul>\n<li>GetActiveUiView: retrieve the active UIView.\n<li>GetView3d: retrieve the 3D view named \"{3D}\".\n<li>ElementDescription: return a descriptive text for a given Revit element.\n</li></li></li></ul>\n<p>We can get the active document view directly, but need some additional coding to determine the associated UIView, for example like this:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return currently active UIView or null.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"teal\">UIView</span> GetActiveUiView( \n  <span class=\"teal\">UIDocument</span> uidoc )\n{\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n  <span class=\"teal\">View</span> view = doc.ActiveView;\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">UIView</span>&gt; uiviews = uidoc.GetOpenUIViews();\n  <span class=\"teal\">UIView</span> uiview = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">UIView</span> uv <span class=\"blue\">in</span> uiviews )\n  {\n    <span class=\"blue\">if</span>( uv.ViewId.Equals( view.Id ) )\n    {\n      uiview = uv;\n      <span class=\"blue\">break</span>;\n    }\n  }\n  <span class=\"blue\">return</span> uiview;\n}\n</pre>\n<p>The ReferenceIntersector constructor requires a 3D view argument in which the ray tracing takes place.\nIn this sample, I assume that a suitable 3D view named \"{3D}\" is available and retrieve that using one single line of filtered element and LINQ driven code:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the 3D view named \"{3D}\".</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">View3D</span> GetView3d( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">View3D</span> ) )\n    .Cast&lt;<span class=\"teal\">View3D</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">View3D</span>&gt;( \n      v =&gt; v.Name.Equals( <span class=\"maroon\">\"{3D}\"</span> ) );\n}\n</pre>\n<p>You can obviously modify this in any way you like and set up a suitable 3D view to suit your specific view setting, sectioning and filtering needs.\n\n<p>The location dependent BIM information displayed in the tooltip can be determined completely freely.\nIn my case, I simply detect what element the cursor is hovering over and use the ElementDescription method to put together a descriptive text for it:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return a string describing the given element:</span>\n<span class=\"gray\">///</span><span class=\"green\"> .NET type name,</span>\n<span class=\"gray\">///</span><span class=\"green\"> category name,</span>\n<span class=\"gray\">///</span><span class=\"green\"> family and symbol name for a family instance,</span>\n<span class=\"gray\">///</span><span class=\"green\"> element id and element name.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> ElementDescription(\n  <span class=\"teal\">Element</span> e )\n{\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"&lt;null&gt;\"</span>;\n  }\n \n  <span class=\"green\">// For a wall, the element name equals the</span>\n  <span class=\"green\">// wall type name, which is equivalent to the</span>\n  <span class=\"green\">// family name ...</span>\n \n  <span class=\"teal\">FamilyInstance</span> fi = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"blue\">string</span> typeName = e.GetType().Name;\n \n  <span class=\"blue\">string</span> categoryName = ( <span class=\"blue\">null</span> == e.Category )\n    ? <span class=\"blue\">string</span>.Empty\n    : e.Category.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">string</span> familyName = ( <span class=\"blue\">null</span> == fi )\n    ? <span class=\"blue\">string</span>.Empty\n    : fi.Symbol.Family.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">string</span> symbolName = ( <span class=\"blue\">null</span> == fi\n    || e.Name.Equals( fi.Symbol.Name ) )\n      ? <span class=\"blue\">string</span>.Empty\n      : fi.Symbol.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} {1}{2}{3}&lt;{4} {5}&gt;\"</span>,\n    typeName, categoryName, familyName,\n    symbolName, e.Id.IntegerValue, e.Name );\n}\n</pre>\n<p>This is somewhat similar to and yet does not exactly match the information displayed by the standard Revit tooltip and other parts of the user interface, as you might have noticed in the \n\n<a href=\"http://youtu.be/-5cx_I9OzFM\">\nvideo recording</a>.\n\n\n<a name=\"4\"></a>\n<h4>Idling Event Handler</h4>\n<p>The Idling event handler implements the following steps, which we first discuss one by one before presenting the entire code in context:\n\n<ul>\n<li>Access <a href=\"#5\">Windows cursor location</a>: System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position.\n<li>Determine <a href=\"#6\">Revit model coordinates</a>: <span class=\"teal\">UIView</span>.\n<li><a href=\"#7\">Query Revit BIM for information</a>: <span class=\"teal\">ReferenceIntersector</span>.\n<li><a href=\"#8\">Display tooltip</a>: <span class=\"teal\">JtTooltipForm</span>.\n<li><a href=\"#9\">Entire implementation</a>.\n</li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Access Windows Cursor Location</h4>\n<p>Converting from the cursor position retrieved in Windows device coordinates to Revit model coordinates is possible by calculating the relative position in the UIView.\n\n<p>Here is an illustration assuming a screen resolution of 1600 x 1200 with a Revit view located at the rectangle 800,150 to 1500,650, displaying a plan view of part of the Revit model, with model coordinates ranging from 10,40,0 to 220,120,0.\nThe current cursor location is represented by the green spot:</p>\n<center>\n<img alt=\"Windows device coordinate to Revit model coordinate mapping\" src=\"img/wincoords_mapping.png\"/>\n</center>\n<p>The Windows device coordinate origin 0,0 is at the upper left, and Y values increase downwards, whereas the Revit model coordinate Y values increase upwards.\n\n<p>You can easily query the cursor position in device coordinates on the Windows screen from .NET framework at any time using the System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position property:\n\n<pre class=\"code\">\n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n</pre>\n<a name=\"6\"></a>\n<h4>Determine Revit Model Coordinates</h4>\n<p>The cursor location is obviously returned in Windows device coordinates, stored in the point (or vector) variable 'p'.\n\n<p>The aim is to determine the location indicated by this point in Revit model coordinates, for example by determining the vector v from the lower left corner of the Revit view to that location.\n\n<p>We can easily determine the relative position of p between the two corners of the UIView in Windows device coordinates by subtracting the lower left hand corner and dividing by the total width and height to obtain the relative width and height location values dx and dy like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n  <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n  <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n    / ( rect.Right - rect.Left );\n \n  <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n    / ( rect.Top - rect.Bottom );\n</pre>\n<!--\n<p>For instance, if p is at 900,300, then its relative location is a bit more than 0.5 in the X and 0.25 in the Y direction.\nThese two relative values are calculated and stored in dx and dy.\n-->\n<p>From the UIView, we can also determine model coordinates of the view corners.\nThey are stored in a and b, respectively.\n\n<p>Now it is easy to calculate the cursor point 'q' in model coordinates from the two relative values like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n  <span class=\"teal\">XYZ</span> a = corners[0];\n  <span class=\"teal\">XYZ</span> b = corners[1];\n  <span class=\"teal\">XYZ</span> v = b - a;\n \n  <span class=\"teal\">XYZ</span> q = a\n    + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n    + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n</pre>\n<a name=\"7\"></a>\n<h4>Query Revit BIM for Information using ReferenceIntersector Ray Casting</h4>\n<p>Once we have the model space cursor location 'q', we can calculate a point beyond the model extents (hopefully) from which one can picture the user looking into the model.\n\n<p>The first element intersected by a ray cast from that point in the view direction should be the one we are interested in displaying information about.\n\n<p>Initially, the sample run was a bit boring, because the only element encountered when looking from straight above was always the roof.\n\n<p>I tweaked that to make the example more interesting, not by modifying the model itself – I use the standard architectural basic sample project rac_basic_sample_project.rvt – but by adding a filter to remove all roof category elements from the reference intersector results instead.\nThe exact elements of interest and information to display are entirely up to you and your needs to determine, of course.\n\n<p>The ray casting requires a 3D view to operate in. \nIn this case, I simply pick the one named \"{3D}\" returned by the GetView3d helper method.\nYou can set up your own view with specific graphics properties, section cuts, and only certain elements visible, if that better suits your requirements.\n\n<p>Here is the code determining the view, view direction and ray origin, setting up the intersector, determining the target element, and defining the tooltip text to display in the variable 's':\n\n<pre class=\"code\">\n  <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n  <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n  <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n  <span class=\"green\">// Find all elements:</span>\n \n  <span class=\"green\">//ReferenceIntersector ri</span>\n  <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n  <span class=\"green\">// Find all elements except roofs:</span>\n \n  <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n    <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ReferenceIntersector</span> ri \n    = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n      <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n  <span class=\"teal\">ReferenceWithContext</span> rc\n    = ri.FindNearest( origin, -viewdir );\n \n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n  {\n    <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    s = ElementDescription( e );\n  }\n</pre>\n<a name=\"8\"></a>\n<h4>Display Tooltip and the JtTooltipForm class</h4>\n<p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Helper Methods",
    "local_header_href": "#helper-methods",
    "chunk_text": "<h4>Helper Methods</h4><p>Apart from the top-level management, the Idling event handler does all the rest of the work.\n\n<p>Before we get to the event handler itself, I'll present the three helper methods it uses:\n\n<ul>\n<li>GetActiveUiView: retrieve the active UIView.\n<li>GetView3d: retrieve the 3D view named \"{3D}\".\n<li>ElementDescription: return a descriptive text for a given Revit element.\n</li></li></li></ul>\n<p>We can get the active document view directly, but need some additional coding to determine the associated UIView, for example like this:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return currently active UIView or null.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"teal\">UIView</span> GetActiveUiView( \n  <span class=\"teal\">UIDocument</span> uidoc )\n{\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n  <span class=\"teal\">View</span> view = doc.ActiveView;\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">UIView</span>&gt; uiviews = uidoc.GetOpenUIViews();\n  <span class=\"teal\">UIView</span> uiview = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">UIView</span> uv <span class=\"blue\">in</span> uiviews )\n  {\n    <span class=\"blue\">if</span>( uv.ViewId.Equals( view.Id ) )\n    {\n      uiview = uv;\n      <span class=\"blue\">break</span>;\n    }\n  }\n  <span class=\"blue\">return</span> uiview;\n}\n</pre>\n<p>The ReferenceIntersector constructor requires a 3D view argument in which the ray tracing takes place.\nIn this sample, I assume that a suitable 3D view named \"{3D}\" is available and retrieve that using one single line of filtered element and LINQ driven code:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the 3D view named \"{3D}\".</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">View3D</span> GetView3d( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">View3D</span> ) )\n    .Cast&lt;<span class=\"teal\">View3D</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">View3D</span>&gt;( \n      v =&gt; v.Name.Equals( <span class=\"maroon\">\"{3D}\"</span> ) );\n}\n</pre>\n<p>You can obviously modify this in any way you like and set up a suitable 3D view to suit your specific view setting, sectioning and filtering needs.\n\n<p>The location dependent BIM information displayed in the tooltip can be determined completely freely.\nIn my case, I simply detect what element the cursor is hovering over and use the ElementDescription method to put together a descriptive text for it:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return a string describing the given element:</span>\n<span class=\"gray\">///</span><span class=\"green\"> .NET type name,</span>\n<span class=\"gray\">///</span><span class=\"green\"> category name,</span>\n<span class=\"gray\">///</span><span class=\"green\"> family and symbol name for a family instance,</span>\n<span class=\"gray\">///</span><span class=\"green\"> element id and element name.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> ElementDescription(\n  <span class=\"teal\">Element</span> e )\n{\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"&lt;null&gt;\"</span>;\n  }\n \n  <span class=\"green\">// For a wall, the element name equals the</span>\n  <span class=\"green\">// wall type name, which is equivalent to the</span>\n  <span class=\"green\">// family name ...</span>\n \n  <span class=\"teal\">FamilyInstance</span> fi = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"blue\">string</span> typeName = e.GetType().Name;\n \n  <span class=\"blue\">string</span> categoryName = ( <span class=\"blue\">null</span> == e.Category )\n    ? <span class=\"blue\">string</span>.Empty\n    : e.Category.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">string</span> familyName = ( <span class=\"blue\">null</span> == fi )\n    ? <span class=\"blue\">string</span>.Empty\n    : fi.Symbol.Family.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">string</span> symbolName = ( <span class=\"blue\">null</span> == fi\n    || e.Name.Equals( fi.Symbol.Name ) )\n      ? <span class=\"blue\">string</span>.Empty\n      : fi.Symbol.Name + <span class=\"maroon\">\" \"</span>;\n \n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} {1}{2}{3}&lt;{4} {5}&gt;\"</span>,\n    typeName, categoryName, familyName,\n    symbolName, e.Id.IntegerValue, e.Name );\n}\n</pre>\n<p>This is somewhat similar to and yet does not exactly match the information displayed by the standard Revit tooltip and other parts of the user interface, as you might have noticed in the \n\n<a href=\"http://youtu.be/-5cx_I9OzFM\">\nvideo recording</a>.\n\n\n<a name=\"4\"></a>\n<h4>Idling Event Handler</h4>\n<p>The Idling event handler implements the following steps, which we first discuss one by one before presenting the entire code in context:\n\n<ul>\n<li>Access <a href=\"#5\">Windows cursor location</a>: System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position.\n<li>Determine <a href=\"#6\">Revit model coordinates</a>: <span class=\"teal\">UIView</span>.\n<li><a href=\"#7\">Query Revit BIM for information</a>: <span class=\"teal\">ReferenceIntersector</span>.\n<li><a href=\"#8\">Display tooltip</a>: <span class=\"teal\">JtTooltipForm</span>.\n<li><a href=\"#9\">Entire implementation</a>.\n</li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Access Windows Cursor Location</h4>\n<p>Converting from the cursor position retrieved in Windows device coordinates to Revit model coordinates is possible by calculating the relative position in the UIView.\n\n<p>Here is an illustration assuming a screen resolution of 1600 x 1200 with a Revit view located at the rectangle 800,150 to 1500,650, displaying a plan view of part of the Revit model, with model coordinates ranging from 10,40,0 to 220,120,0.\nThe current cursor location is represented by the green spot:</p>\n<center>\n<img alt=\"Windows device coordinate to Revit model coordinate mapping\" src=\"img/wincoords_mapping.png\"/>\n</center>\n<p>The Windows device coordinate origin 0,0 is at the upper left, and Y values increase downwards, whereas the Revit model coordinate Y values increase upwards.\n\n<p>You can easily query the cursor position in device coordinates on the Windows screen from .NET framework at any time using the System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position property:\n\n<pre class=\"code\">\n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n</pre>\n<a name=\"6\"></a>\n<h4>Determine Revit Model Coordinates</h4>\n<p>The cursor location is obviously returned in Windows device coordinates, stored in the point (or vector) variable 'p'.\n\n<p>The aim is to determine the location indicated by this point in Revit model coordinates, for example by determining the vector v from the lower left corner of the Revit view to that location.\n\n<p>We can easily determine the relative position of p between the two corners of the UIView in Windows device coordinates by subtracting the lower left hand corner and dividing by the total width and height to obtain the relative width and height location values dx and dy like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n  <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n  <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n    / ( rect.Right - rect.Left );\n \n  <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n    / ( rect.Top - rect.Bottom );\n</pre>\n<!--\n<p>For instance, if p is at 900,300, then its relative location is a bit more than 0.5 in the X and 0.25 in the Y direction.\nThese two relative values are calculated and stored in dx and dy.\n-->\n<p>From the UIView, we can also determine model coordinates of the view corners.\nThey are stored in a and b, respectively.\n\n<p>Now it is easy to calculate the cursor point 'q' in model coordinates from the two relative values like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n  <span class=\"teal\">XYZ</span> a = corners[0];\n  <span class=\"teal\">XYZ</span> b = corners[1];\n  <span class=\"teal\">XYZ</span> v = b - a;\n \n  <span class=\"teal\">XYZ</span> q = a\n    + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n    + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n</pre>\n<a name=\"7\"></a>\n<h4>Query Revit BIM for Information using ReferenceIntersector Ray Casting</h4>\n<p>Once we have the model space cursor location 'q', we can calculate a point beyond the model extents (hopefully) from which one can picture the user looking into the model.\n\n<p>The first element intersected by a ray cast from that point in the view direction should be the one we are interested in displaying information about.\n\n<p>Initially, the sample run was a bit boring, because the only element encountered when looking from straight above was always the roof.\n\n<p>I tweaked that to make the example more interesting, not by modifying the model itself – I use the standard architectural basic sample project rac_basic_sample_project.rvt – but by adding a filter to remove all roof category elements from the reference intersector results instead.\nThe exact elements of interest and information to display are entirely up to you and your needs to determine, of course.\n\n<p>The ray casting requires a 3D view to operate in. \nIn this case, I simply pick the one named \"{3D}\" returned by the GetView3d helper method.\nYou can set up your own view with specific graphics properties, section cuts, and only certain elements visible, if that better suits your requirements.\n\n<p>Here is the code determining the view, view direction and ray origin, setting up the intersector, determining the target element, and defining the tooltip text to display in the variable 's':\n\n<pre class=\"code\">\n  <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n  <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n  <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n  <span class=\"green\">// Find all elements:</span>\n \n  <span class=\"green\">//ReferenceIntersector ri</span>\n  <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n  <span class=\"green\">// Find all elements except roofs:</span>\n \n  <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n    <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ReferenceIntersector</span> ri \n    = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n      <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n  <span class=\"teal\">ReferenceWithContext</span> rc\n    = ri.FindNearest( origin, -viewdir );\n \n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n  {\n    <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    s = ElementDescription( e );\n  }\n</pre>\n<a name=\"8\"></a>\n<h4>Display Tooltip and the JtTooltipForm class</h4>\n<p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Idling Event Handler",
    "local_header_href": "#idling-event-handler",
    "chunk_text": "<h4>Idling Event Handler</h4><p>The Idling event handler implements the following steps, which we first discuss one by one before presenting the entire code in context:\n\n<ul>\n<li>Access <a href=\"#5\">Windows cursor location</a>: System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position.\n<li>Determine <a href=\"#6\">Revit model coordinates</a>: <span class=\"teal\">UIView</span>.\n<li><a href=\"#7\">Query Revit BIM for information</a>: <span class=\"teal\">ReferenceIntersector</span>.\n<li><a href=\"#8\">Display tooltip</a>: <span class=\"teal\">JtTooltipForm</span>.\n<li><a href=\"#9\">Entire implementation</a>.\n</li></li></li></li></li></ul>\n<a name=\"5\"></a>\n<h4>Access Windows Cursor Location</h4>\n<p>Converting from the cursor position retrieved in Windows device coordinates to Revit model coordinates is possible by calculating the relative position in the UIView.\n\n<p>Here is an illustration assuming a screen resolution of 1600 x 1200 with a Revit view located at the rectangle 800,150 to 1500,650, displaying a plan view of part of the Revit model, with model coordinates ranging from 10,40,0 to 220,120,0.\nThe current cursor location is represented by the green spot:</p>\n<center>\n<img alt=\"Windows device coordinate to Revit model coordinate mapping\" src=\"img/wincoords_mapping.png\"/>\n</center>\n<p>The Windows device coordinate origin 0,0 is at the upper left, and Y values increase downwards, whereas the Revit model coordinate Y values increase upwards.\n\n<p>You can easily query the cursor position in device coordinates on the Windows screen from .NET framework at any time using the System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position property:\n\n<pre class=\"code\">\n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n</pre>\n<a name=\"6\"></a>\n<h4>Determine Revit Model Coordinates</h4>\n<p>The cursor location is obviously returned in Windows device coordinates, stored in the point (or vector) variable 'p'.\n\n<p>The aim is to determine the location indicated by this point in Revit model coordinates, for example by determining the vector v from the lower left corner of the Revit view to that location.\n\n<p>We can easily determine the relative position of p between the two corners of the UIView in Windows device coordinates by subtracting the lower left hand corner and dividing by the total width and height to obtain the relative width and height location values dx and dy like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n  <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n  <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n    / ( rect.Right - rect.Left );\n \n  <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n    / ( rect.Top - rect.Bottom );\n</pre>\n<!--\n<p>For instance, if p is at 900,300, then its relative location is a bit more than 0.5 in the X and 0.25 in the Y direction.\nThese two relative values are calculated and stored in dx and dy.\n-->\n<p>From the UIView, we can also determine model coordinates of the view corners.\nThey are stored in a and b, respectively.\n\n<p>Now it is easy to calculate the cursor point 'q' in model coordinates from the two relative values like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n  <span class=\"teal\">XYZ</span> a = corners[0];\n  <span class=\"teal\">XYZ</span> b = corners[1];\n  <span class=\"teal\">XYZ</span> v = b - a;\n \n  <span class=\"teal\">XYZ</span> q = a\n    + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n    + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n</pre>\n<a name=\"7\"></a>\n<h4>Query Revit BIM for Information using ReferenceIntersector Ray Casting</h4>\n<p>Once we have the model space cursor location 'q', we can calculate a point beyond the model extents (hopefully) from which one can picture the user looking into the model.\n\n<p>The first element intersected by a ray cast from that point in the view direction should be the one we are interested in displaying information about.\n\n<p>Initially, the sample run was a bit boring, because the only element encountered when looking from straight above was always the roof.\n\n<p>I tweaked that to make the example more interesting, not by modifying the model itself – I use the standard architectural basic sample project rac_basic_sample_project.rvt – but by adding a filter to remove all roof category elements from the reference intersector results instead.\nThe exact elements of interest and information to display are entirely up to you and your needs to determine, of course.\n\n<p>The ray casting requires a 3D view to operate in. \nIn this case, I simply pick the one named \"{3D}\" returned by the GetView3d helper method.\nYou can set up your own view with specific graphics properties, section cuts, and only certain elements visible, if that better suits your requirements.\n\n<p>Here is the code determining the view, view direction and ray origin, setting up the intersector, determining the target element, and defining the tooltip text to display in the variable 's':\n\n<pre class=\"code\">\n  <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n  <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n  <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n  <span class=\"green\">// Find all elements:</span>\n \n  <span class=\"green\">//ReferenceIntersector ri</span>\n  <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n  <span class=\"green\">// Find all elements except roofs:</span>\n \n  <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n    <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ReferenceIntersector</span> ri \n    = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n      <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n  <span class=\"teal\">ReferenceWithContext</span> rc\n    = ri.FindNearest( origin, -viewdir );\n \n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n  {\n    <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    s = ElementDescription( e );\n  }\n</pre>\n<a name=\"8\"></a>\n<h4>Display Tooltip and the JtTooltipForm class</h4>\n<p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Access Windows Cursor Location",
    "local_header_href": "#access-windows-cursor-location",
    "chunk_text": "<h4>Access Windows Cursor Location</h4><p>Converting from the cursor position retrieved in Windows device coordinates to Revit model coordinates is possible by calculating the relative position in the UIView.\n\n<p>Here is an illustration assuming a screen resolution of 1600 x 1200 with a Revit view located at the rectangle 800,150 to 1500,650, displaying a plan view of part of the Revit model, with model coordinates ranging from 10,40,0 to 220,120,0.\nThe current cursor location is represented by the green spot:</p>\n<center>\n<img alt=\"Windows device coordinate to Revit model coordinate mapping\" src=\"img/wincoords_mapping.png\"/>\n</center>\n<p>The Windows device coordinate origin 0,0 is at the upper left, and Y values increase downwards, whereas the Revit model coordinate Y values increase upwards.\n\n<p>You can easily query the cursor position in device coordinates on the Windows screen from .NET framework at any time using the System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position property:\n\n<pre class=\"code\">\n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n</pre>\n<a name=\"6\"></a>\n<h4>Determine Revit Model Coordinates</h4>\n<p>The cursor location is obviously returned in Windows device coordinates, stored in the point (or vector) variable 'p'.\n\n<p>The aim is to determine the location indicated by this point in Revit model coordinates, for example by determining the vector v from the lower left corner of the Revit view to that location.\n\n<p>We can easily determine the relative position of p between the two corners of the UIView in Windows device coordinates by subtracting the lower left hand corner and dividing by the total width and height to obtain the relative width and height location values dx and dy like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n  <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n  <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n    / ( rect.Right - rect.Left );\n \n  <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n    / ( rect.Top - rect.Bottom );\n</pre>\n<!--\n<p>For instance, if p is at 900,300, then its relative location is a bit more than 0.5 in the X and 0.25 in the Y direction.\nThese two relative values are calculated and stored in dx and dy.\n-->\n<p>From the UIView, we can also determine model coordinates of the view corners.\nThey are stored in a and b, respectively.\n\n<p>Now it is easy to calculate the cursor point 'q' in model coordinates from the two relative values like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n  <span class=\"teal\">XYZ</span> a = corners[0];\n  <span class=\"teal\">XYZ</span> b = corners[1];\n  <span class=\"teal\">XYZ</span> v = b - a;\n \n  <span class=\"teal\">XYZ</span> q = a\n    + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n    + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n</pre>\n<a name=\"7\"></a>\n<h4>Query Revit BIM for Information using ReferenceIntersector Ray Casting</h4>\n<p>Once we have the model space cursor location 'q', we can calculate a point beyond the model extents (hopefully) from which one can picture the user looking into the model.\n\n<p>The first element intersected by a ray cast from that point in the view direction should be the one we are interested in displaying information about.\n\n<p>Initially, the sample run was a bit boring, because the only element encountered when looking from straight above was always the roof.\n\n<p>I tweaked that to make the example more interesting, not by modifying the model itself – I use the standard architectural basic sample project rac_basic_sample_project.rvt – but by adding a filter to remove all roof category elements from the reference intersector results instead.\nThe exact elements of interest and information to display are entirely up to you and your needs to determine, of course.\n\n<p>The ray casting requires a 3D view to operate in. \nIn this case, I simply pick the one named \"{3D}\" returned by the GetView3d helper method.\nYou can set up your own view with specific graphics properties, section cuts, and only certain elements visible, if that better suits your requirements.\n\n<p>Here is the code determining the view, view direction and ray origin, setting up the intersector, determining the target element, and defining the tooltip text to display in the variable 's':\n\n<pre class=\"code\">\n  <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n  <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n  <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n  <span class=\"green\">// Find all elements:</span>\n \n  <span class=\"green\">//ReferenceIntersector ri</span>\n  <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n  <span class=\"green\">// Find all elements except roofs:</span>\n \n  <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n    <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ReferenceIntersector</span> ri \n    = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n      <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n  <span class=\"teal\">ReferenceWithContext</span> rc\n    = ri.FindNearest( origin, -viewdir );\n \n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n  {\n    <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    s = ElementDescription( e );\n  }\n</pre>\n<a name=\"8\"></a>\n<h4>Display Tooltip and the JtTooltipForm class</h4>\n<p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Determine Revit Model Coordinates",
    "local_header_href": "#determine-revit-model-coordinates",
    "chunk_text": "<h4>Determine Revit Model Coordinates</h4><p>The cursor location is obviously returned in Windows device coordinates, stored in the point (or vector) variable 'p'.\n\n<p>The aim is to determine the location indicated by this point in Revit model coordinates, for example by determining the vector v from the lower left corner of the Revit view to that location.\n\n<p>We can easily determine the relative position of p between the two corners of the UIView in Windows device coordinates by subtracting the lower left hand corner and dividing by the total width and height to obtain the relative width and height location values dx and dy like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n  <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n  <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n  <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n    / ( rect.Right - rect.Left );\n \n  <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n    / ( rect.Top - rect.Bottom );\n</pre>\n<!--\n<p>For instance, if p is at 900,300, then its relative location is a bit more than 0.5 in the X and 0.25 in the Y direction.\nThese two relative values are calculated and stored in dx and dy.\n-->\n<p>From the UIView, we can also determine model coordinates of the view corners.\nThey are stored in a and b, respectively.\n\n<p>Now it is easy to calculate the cursor point 'q' in model coordinates from the two relative values like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n  <span class=\"teal\">XYZ</span> a = corners[0];\n  <span class=\"teal\">XYZ</span> b = corners[1];\n  <span class=\"teal\">XYZ</span> v = b - a;\n \n  <span class=\"teal\">XYZ</span> q = a\n    + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n    + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n</pre>\n<a name=\"7\"></a>\n<h4>Query Revit BIM for Information using ReferenceIntersector Ray Casting</h4>\n<p>Once we have the model space cursor location 'q', we can calculate a point beyond the model extents (hopefully) from which one can picture the user looking into the model.\n\n<p>The first element intersected by a ray cast from that point in the view direction should be the one we are interested in displaying information about.\n\n<p>Initially, the sample run was a bit boring, because the only element encountered when looking from straight above was always the roof.\n\n<p>I tweaked that to make the example more interesting, not by modifying the model itself – I use the standard architectural basic sample project rac_basic_sample_project.rvt – but by adding a filter to remove all roof category elements from the reference intersector results instead.\nThe exact elements of interest and information to display are entirely up to you and your needs to determine, of course.\n\n<p>The ray casting requires a 3D view to operate in. \nIn this case, I simply pick the one named \"{3D}\" returned by the GetView3d helper method.\nYou can set up your own view with specific graphics properties, section cuts, and only certain elements visible, if that better suits your requirements.\n\n<p>Here is the code determining the view, view direction and ray origin, setting up the intersector, determining the target element, and defining the tooltip text to display in the variable 's':\n\n<pre class=\"code\">\n  <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n  <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n  <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n  <span class=\"green\">// Find all elements:</span>\n \n  <span class=\"green\">//ReferenceIntersector ri</span>\n  <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n  <span class=\"green\">// Find all elements except roofs:</span>\n \n  <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n    <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ReferenceIntersector</span> ri \n    = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n      <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n  <span class=\"teal\">ReferenceWithContext</span> rc\n    = ri.FindNearest( origin, -viewdir );\n \n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n  {\n    <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    s = ElementDescription( e );\n  }\n</pre>\n<a name=\"8\"></a>\n<h4>Display Tooltip and the JtTooltipForm class</h4>\n<p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Query Revit BIM for Information using ReferenceIntersector Ray Casting",
    "local_header_href": "#query-revit-bim-for-information-using-referenceintersector-ray-casting",
    "chunk_text": "<h4>Query Revit BIM for Information using ReferenceIntersector Ray Casting</h4><p>Once we have the model space cursor location 'q', we can calculate a point beyond the model extents (hopefully) from which one can picture the user looking into the model.\n\n<p>The first element intersected by a ray cast from that point in the view direction should be the one we are interested in displaying information about.\n\n<p>Initially, the sample run was a bit boring, because the only element encountered when looking from straight above was always the roof.\n\n<p>I tweaked that to make the example more interesting, not by modifying the model itself – I use the standard architectural basic sample project rac_basic_sample_project.rvt – but by adding a filter to remove all roof category elements from the reference intersector results instead.\nThe exact elements of interest and information to display are entirely up to you and your needs to determine, of course.\n\n<p>The ray casting requires a 3D view to operate in. \nIn this case, I simply pick the one named \"{3D}\" returned by the GetView3d helper method.\nYou can set up your own view with specific graphics properties, section cuts, and only certain elements visible, if that better suits your requirements.\n\n<p>Here is the code determining the view, view direction and ray origin, setting up the intersector, determining the target element, and defining the tooltip text to display in the variable 's':\n\n<pre class=\"code\">\n  <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n  <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n  <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n  <span class=\"green\">// Find all elements:</span>\n \n  <span class=\"green\">//ReferenceIntersector ri</span>\n  <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n  <span class=\"green\">// Find all elements except roofs:</span>\n \n  <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n    <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n  <span class=\"teal\">ReferenceIntersector</span> ri \n    = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n      <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n  <span class=\"teal\">ReferenceWithContext</span> rc\n    = ri.FindNearest( origin, -viewdir );\n \n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n  {\n    <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    s = ElementDescription( e );\n  }\n</pre>\n<a name=\"8\"></a>\n<h4>Display Tooltip and the JtTooltipForm class</h4>\n<p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Display Tooltip and the JtTooltipForm class",
    "local_header_href": "#display-tooltip-and-the-jttooltipform-class",
    "chunk_text": "<h4>Display Tooltip and the JtTooltipForm class</h4><p>I originally used the Visual Studio designer to create a simple tooltip form named JtTooltipForm for me, then tweaked that auto-generated code to create one named JtTooltipForm2 myself programmatically from scratch.\n\n<p>Besides the constructor setting up the form and the Label object to display the tooltip text, it also manages an offset from the cursor position at which to display itself, provides a method to set the tooltip text, and overrides the OnShown and OnVisibleChanged methods to react appropriately to position changes:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> A tooltip window designed to move </span>\n<span class=\"gray\">///</span><span class=\"green\"> around with the cursor position.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">class</span> <span class=\"teal\">JtTooltipForm2</span> : <span class=\"teal\">Form</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The offset from the mouse pointer </span>\n  <span class=\"gray\">///</span><span class=\"green\"> at which to show the form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Point</span> Offset { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Label</span> _label;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the tooltip text.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> SetText( <span class=\"blue\">string</span> s )\n  {\n    _label.Text = s;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnShown( <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnShown( e );\n \n    Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n      MousePosition.X + Offset.X,\n      MousePosition.Y + Offset.Y );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Move the window to an offset of mouse pointer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">protected</span> <span class=\"blue\">override</span> <span class=\"blue\">void</span> OnVisibleChanged(\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">base</span>.OnVisibleChanged( e );\n \n    <span class=\"blue\">if</span>( Visible )\n    {\n      Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>(\n        MousePosition.X + Offset.X,\n        MousePosition.Y + Offset.Y );\n    }\n  }\n \n  <span class=\"blue\">public</span> JtTooltipForm2()\n  {\n    Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 20 );\n \n    _label = <span class=\"blue\">new</span> <span class=\"teal\">Label</span>();\n \n    SuspendLayout();\n \n    _label.AutoSize = <span class=\"blue\">false</span>; <span class=\"green\">// the label will not change its height automatically, only width, so switch off AutoSize to wrap text</span>\n    _label.CausesValidation = <span class=\"blue\">false</span>;\n    _label.Dock = <span class=\"teal\">DockStyle</span>.Fill;\n    _label.Location = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 0, 0 );\n    _label.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 35, 13 );\n    _label.Parent = <span class=\"blue\">this</span>;\n \n    AutoScaleDimensions = <span class=\"blue\">new</span> <span class=\"teal\">SizeF</span>( 6F, 13F );\n    AutoScaleMode = <span class=\"teal\">AutoScaleMode</span>.Font;\n    BackColor = <span class=\"teal\">SystemColors</span>.Info;\n    ClientSize = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 200, 12 );\n    Controls.Add( _label );\n    FormBorderStyle = <span class=\"teal\">FormBorderStyle</span>.None;\n    Name = <span class=\"maroon\">\"JtTooltipForm\"</span>;\n    Opacity = 0.8D;\n    ShowInTaskbar = <span class=\"blue\">false</span>;\n    TopMost = <span class=\"blue\">true</span>;\n    TransparencyKey = <span class=\"teal\">Color</span>.White;\n \n    ResumeLayout( <span class=\"blue\">false</span> );\n    PerformLayout();\n \n    Offset = <span class=\"blue\">new</span> <span class=\"teal\">Point</span>( 10, 0 );\n  }\n}\n</pre>\n<!--\n<a name=\"?\"></a>\n\n<h4>Wrapping Text in Windows Forms Label Control</h4>\n-->\n<p>You may note that I switched off the AutoSize property. \nSetting it to true enables the label to automatically expand, and that just means getting wider to fit the text length.\nThe label will not change its height automatically, only width.\n\n<p>A neat trick to wrap text before putting it into the label that I spotted and did not make use of employs a regular expression to do the job:\n\n<pre>\n  WrappedMessage := RegExReplace( \n    LongMessage, \"(.{50}\\s)\", \"$1`n\" );\n</pre>\n<p>Controlling the text and position from the Idling event handler is a trivial two-liner:\n\n<pre class=\"code\">\n  <span class=\"green\">// Move tooltip to current cursor </span>\n  <span class=\"green\">// location and set tooltip text.</span>\n \n  _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n  _form.SetText( s );\n</pre>\n<a name=\"9\"></a>\n<h4>Entire Idling Event Handler Implementation</h4>\n<p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Entire Idling Event Handler Implementation",
    "local_header_href": "#entire-idling-event-handler-implementation",
    "chunk_text": "<h4>Entire Idling Event Handler Implementation</h4><p>For better readability, here is the entire Idling event handler implementation in all its glory.\n\n<p>It even includes one slight improvement that is not demonstrated by the ModelessForm_IdlingEvent SDK sample implementation:\n\n<p>If the Revit project is closed while the Idling event is still subscribed to, the UI document may be null.\nOne needs to add a check for that situation as well in the Idling handler, in case the hander relies on an open document.\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;remarks&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> We keep the handler very simple. First check</span>\n<span class=\"gray\">///</span><span class=\"green\"> if we still have the form. If not, unsubscribe </span>\n<span class=\"gray\">///</span><span class=\"green\"> from Idling, for we no longer need it and it </span>\n<span class=\"gray\">///</span><span class=\"green\"> makes Revit speedier. If the form is around, </span>\n<span class=\"gray\">///</span><span class=\"green\"> check if it has a request ready and process </span>\n<span class=\"gray\">///</span><span class=\"green\"> it accordingly.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/remarks&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> IdlingHandler( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">IdlingEventArgs</span> args )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc || _form.IsDisposed )\n  {\n    uiapp.Idling -= IdlingHandler;\n  }\n  <span class=\"blue\">else</span> <span class=\"green\">// form still exists</span>\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"teal\">UIView</span> uiview = GetActiveUiView( uidoc );\n \n    <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n \n    <span class=\"teal\">Point</span> p = System.Windows.Forms.<span class=\"teal\">Cursor</span>.Position;\n \n    <span class=\"blue\">double</span> dx = (<span class=\"blue\">double</span>) ( p.X - rect.Left )\n      / ( rect.Right - rect.Left );\n \n    <span class=\"blue\">double</span> dy = (<span class=\"blue\">double</span>) ( p.Y - rect.Bottom )\n      / ( rect.Top - rect.Bottom );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n    <span class=\"teal\">XYZ</span> a = corners[0];\n    <span class=\"teal\">XYZ</span> b = corners[1];\n    <span class=\"teal\">XYZ</span> v = b - a;\n \n    <span class=\"teal\">XYZ</span> q = a\n      + dx * v.X * <span class=\"teal\">XYZ</span>.BasisX\n      + dy * v.Y * <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"green\">// If the current view happens to be a 3D view, </span>\n    <span class=\"green\">// we could simply use it right away. In </span>\n    <span class=\"green\">// general we have to find a different one to </span>\n    <span class=\"green\">// run the ReferenceIntersector in.</span>\n \n    <span class=\"teal\">View3D</span> view3d = GetView3d( doc );\n \n    <span class=\"teal\">XYZ</span> viewdir = view.ViewDirection;\n \n    <span class=\"teal\">XYZ</span> origin = q + 1000 * viewdir;\n \n    <span class=\"green\">// Find all elements:</span>\n \n    <span class=\"green\">//ReferenceIntersector ri</span>\n    <span class=\"green\">//  = new ReferenceIntersector( view3d );</span>\n \n    <span class=\"green\">// Find all elements except roofs:</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>( \n      <span class=\"teal\">BuiltInCategory</span>.OST_Roofs, <span class=\"blue\">true</span> );\n \n    <span class=\"teal\">ReferenceIntersector</span> ri \n      = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceIntersector</span>( f, \n        <span class=\"teal\">FindReferenceTarget</span>.Element, view3d );\n \n    <span class=\"teal\">ReferenceWithContext</span> rc\n      = ri.FindNearest( origin, -viewdir );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"Element not found\"</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != rc )\n    {\n      <span class=\"teal\">Reference</span> r = rc.GetReference();\n \n      <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n      s = ElementDescription( e );\n    }\n \n    <span class=\"green\">// Move tooltip to current cursor </span>\n    <span class=\"green\">// location and set tooltip text.</span>\n \n    _form.Location = p + <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( _form.Offset );\n    _form.SetText( s );\n  }\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Toggle Tooltip On and Off Commands</h4>\n<p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Toggle Tooltip On and Off Commands",
    "local_header_href": "#toggle-tooltip-on-and-off-commands",
    "chunk_text": "<h4>Toggle Tooltip On and Off Commands</h4><p>To simplify the usage and cooperation with other add-ins, I implemented two trivial read-only external commands calling the external application ShowForm and HideForm methods to toggle my personal tooltips on and off:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOn</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.ShowForm( \n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdTooltipOff</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.HideForm(\n      commandData.Application );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Conclusion and Download</h4>\n<p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Conclusion and Download",
    "local_header_href": "#conclusion-and-download",
    "chunk_text": "<h4>Conclusion and Download</h4><p>I hope you find this as useful as I imagine it might become, and look forward to your feedback.\n\n<p>By the way, I will be talking about this sample and the possibilities it demonstrates along with many other topics in my Autodesk University presentation\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=4107\">\nCP4107</a> on \n\nthe new Revit 2013 UI API functionality, probably making this the most exciting one of my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/au-registration-and-adn-open.html\">three AU sessions</a>.\n\n\n<p>Here is a \n\n<a href=\"zip/CP4107_2012-10-09.zip\">\ncurrent snapshot</a> of \n\nthe entire source code, Visual Studio solution and add-in manifest of the WinTooltip sample application, together the rest of my CP4107 sample material.\nThe latter is based on my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html#2\">\nDevCamp Revit 2013 UI API</a> samples.\n\n<p>Here are a couple of other items of interest before I wrap up, related to the Revit API, technology and purely human interst.\n\n\n<a name=\"21\"></a>\n<h4>DWG and Image Export Naming Convention</h4>\n<p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "DWG and Image Export Naming Convention",
    "local_header_href": "#dwg-and-image-export-naming-convention",
    "chunk_text": "<h4>DWG and Image Export Naming Convention</h4><p>Saikat Bhattacharya points out that the \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/naming-rules-and-prefixes-for-multiple-image-exports-in-revit.html\">\nnaming convention for exporting multiple images</a> follows \n\nthe one used for DWG export:\n\n[FileName]-[ViewType]-[ViewName].[image format].\n\n\n<a name=\"22\"></a>\n<h4>Displaying a Text File from a TaskDialog Command Link</h4>\n<p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Displaying a Text File from a TaskDialog Command Link",
    "local_header_href": "#displaying-a-text-file-from-a-taskdialog-command-link",
    "chunk_text": "<h4>Displaying a Text File from a TaskDialog Command Link</h4><p>I recently mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/detach-workset-and-taskdialog-command-link-order.html\">\norder of TaskDialog command links</a>.\n\n<p>Now Saikat Bhattacharya picked up a related issue, on how to define a TaskDialog command link to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/linking-local-file-to-taskdialog.html\">\nopen up a text file in the local system</a>.\n\n<p>URLs and local system HTML links work fine out of the box.\nA text file, however, needs special processing.\nOne way to launch it is by using the Process.Start method in the .NET System.Diagnostics namespace.\nSaikat provides the source.\n\n\n<a name=\"23\"></a>\n<h4>DesignScript</h4>\n<p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "DesignScript",
    "local_header_href": "#designscript",
    "chunk_text": "<h4>DesignScript</h4><p>A very exciting new technology is now publicly available on Autodesk Labs: \n\n<a href=\"http://labs.autodesk.com/utilities/designscript\">\nDesignScript</a>:\n\n<ul>\n<li>A powerful scripting language for exploratory programming.\n<li>Managing and distinguishing between a generative description of a design (as a script) and the resulting generated model.\n<li>A language to help designers build and analyze complex geometric models that would be difficult to model with interactive techniques.\n<li>Integrated into a host geometry application (currently AutoCAD).\n</li></li></li></li></ul>\n<p>The designer no longer directly models the resulting design: instead she develops a script whose execution generates the model. \nThis enables a completely different kind of design model to be created. \nThe design process is also different. \nAn apparently minor edit to the script can have a profound effect on the generated model, enabling the exploration of a vast array of alternatives, with much less effort than manual interactive modeling.\nHere is a five-minute video explanation of \n\n<a href=\"http://www.youtube.com/watch?v=_mPag-y_SG0\">\nDesign Computation</a> by Robert Aish for Autodesk University last year:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_mPag-y_SG0\" width=\"480\"></iframe>\n<p>Kean Walmsley provides a very nice explanation and \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2012/10/designscript-now-available-for-download-from-autodesk-labs.html\">\ndescription of the DesignScript sample</a> he \n\nimplemented for it together with Robert in 2008 for the Design Computation Symposium and AU mainstage presentation.\n\n<p>Now you can try it for yourself.\nUnfortunately, DesignScript is not yet available for Revit...\n\n\n<a name=\"24\"></a>\n<h4>Falk on Schafberg</h4>\n<!-- C:\\j\\photo\\jeremy\\2012\\2012-09-08_wildhaus\\mvi_1006.avi -->\n<p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>\n</p></p></p>"
  },
  {
    "original_filename": "0840_wincoord_tooltip",
    "header_text": "Falk on Schafberg",
    "local_header_href": "#falk-on-schafberg",
    "chunk_text": "<h4>Falk on Schafberg</h4><p>For something completely unrelated to any technology at all, here is a nice little \n\n<a href=\"http://youtu.be/_kXMtG2RRGs\">\nvideo</a> of\n\nmy friend \n\n<a href=\"http://www.falkstein.de\">\nFalk</a> recently \n\nwhen we hiked over the \n\n<a href=\"http://de.wikipedia.org/wiki/Schafberg_%28Wildhaus%29\">\nWildhauser Schafberg</a> (sheep \n\nmountain) together, clearly illustrating some basic and sympathetic human and \n\n<a href=\"http://uk.answers.yahoo.com/question/index?qid=20080323175133AAFCTeb\">\novine</a> commonalities  :-)</p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/_kXMtG2RRGs\" width=\"480\"></iframe>"
  }
]