[
  {
    "original_filename": "0352_idling",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0352_idling",
    "header_text": "Idling Event",
    "local_header_href": "#idling-event",
    "chunk_text": "<h3>Idling Event</h3><p>One of the most exciting of the many \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/revit-2011-is-coming.html\">\nnew Revit 2011 API features</a> which \n\nopens up completely new possibilities for applications to interact with Revit is the Idling event.\nThe What's New section of the Revit API help file RevitAPI.chm describes it as follows:\n\n<span style=\"color:darkblue\">\n<p>The new event\n\n<ul>\n<li>UIApplication.Idling \n</li></ul>\n<p>is raised when it is safe for the API application to access the active document between user interactions. \nThis event is raised only when the Revit UI is in a state where the user could successfully click on an API command button. \nThe event allows changes to a document if a new transaction is opened.\n\n<p>Because this event is invoked between user actions in the Revit UI, if the handler for this event requires a significant amount of processing time, users will perceive a slowdown in the responsiveness of Revit. \nIf the execution for updates can be safely split across multiple calls to this event, the user perception of Revit responsiveness will be improved.\n\n</p></p></p></span>\n<p>In the detailed description of the event itself, it says further:\n\n<span style=\"color:darkblue\">\n<p>Subscribe to the Idling event to be notified when Revit is not in an active tool or transaction. \n\n<p>This event is raised when it is safe for the API application to access the active document between user interactions. The event is raised only when the Revit UI is in a state where the user could successfully click on an API command button.\n\n<p>Handlers of this event are permitted to make modifications to any document (including the active document), except for documents that are currently in read-only mode. \n\n<p>In order to change a document, you must begin a new transaction for that document. This transaction will appear in the Revit undo stack and may be undone by the Revit user.\n\n<p>This event is invoked between user actions in the Revit UI. If the handler for this event requires a significant amount of processing time, users will perceive a slowdown in the responsiveness of Revit. If the execution for updates can be safely split across multiple calls to this event, the user perception of Revit responsiveness will be improved. \n\n<p>Event is not cancellable. \n\n</p></p></p></p></p></p></span>\n<p>As far as I can tell, there is no Revit SDK sample demonstrating its use.\n\n<p>The reason why this is so exciting is because it makes it a little bit more feasible to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/driving-revit-from-outside.html\">\ncontrol Revit from an external application</a> or a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/modeless-dialogues-in-revit.html\">\nmodeless dialogue</a>,\n\ntopics that have always been very high on the developer wish list and frequently discussed in this blog.\nThe fact still remains in Revit 2011 that Revit insists on being the boss and cannot be driven from outside by any direct API calls, but at least this new event makes it possible to set up a pair of an external application wishing to do something from outside and an internal Revit plug-in that supports it in doing so.\n\n<p>The scenario that I envision would be that the external application raises some kind of signal letting the plug-in know that it would like to do something and possibly provide detailed data on what that is.\nThe internal plug-in registers to the Idling event, and every time it is raised, it checks whether the external application has queued up some task for it and then performs it.\n\n<p>I implemented a new little minimal Building Coder sample command CmdIdling to demonstrate how to subscribe to this event.\n\n<p>The event handler for this event takes two arguments, the sender and the event arguments, as defined by the \n\n<a href=\"http://msdn.microsoft.com/en-us/library/db0etb8x\">\nstandard .NET event model</a>.\n\nThe Revit API defines a new class IdlingEventArgs for it, derived from the PreEventArgs and RevitEventArgs classes without adding any extra functionality, so it does not provide any useful members for us to access the application or documents through.\n\n<p>Happily, the sender argument is in fact the Revit application instance, a fact that is currently not documented anywhere, as far as I can tell.\nThis obviously provides access to the documents and the active document, enabling us to open a transaction and perform any required actions on the Revit model.\n\n<p>In my minimalistic first sample, I do nothing but demonstrate the access to the active document and log a message with a time stamp using the following little helper method:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> Log( <span class=\"blue\">string</span> msg )\n{\n  <span class=\"blue\">string</span> dt = <span class=\"teal\">DateTime</span>.Now.ToString( <span class=\"maroon\">\"u\"</span> );\n  <span class=\"teal\">Debug</span>.Print( dt + <span class=\"maroon\">\" \"</span> + msg );\n}\n</pre>\n<p>Here is my event handler implementation demonstrating how to access the Revit application instance from the sender argument, obtain and query the active document, and log a message to the Visual Studio debug output window:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> OnIdling( <span class=\"blue\">object</span> sender, <span class=\"teal\">IdlingEventArgs</span> e )\n{\n  <span class=\"green\">// access active document from sender:</span>\n \n  <span class=\"teal\">Application</span> app = sender <span class=\"blue\">as</span> <span class=\"teal\">Application</span>;\n \n  <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != app, \n    <span class=\"maroon\">\"expected a valid Revit application instance\"</span> );\n \n  <span class=\"blue\">if</span>( app != <span class=\"blue\">null</span> )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = <span class=\"blue\">new</span> <span class=\"teal\">UIApplication</span>( app );\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    Log( <span class=\"maroon\">\"OnIdling with active document \"</span> \n      + doc.Title );\n  }\n}\n</pre>\n<p>The command implementation is simpler still, basically just one single line of code to register my event handler and subscribe to the UI application event:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  Log( <span class=\"maroon\">\"Execute begin\"</span> );\n \n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n \n  uiapp.Idling \n    += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;( \n      OnIdling );\n \n  Log( <span class=\"maroon\">\"Execute end\"</span> );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Since I am not modifying the database in any way whatsoever, I use the most restrictive \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/regeneration-option-best-practices.html\">\nregeneration option</a> and \n\ntransaction mode:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n</pre>\n<p>As soon as I launch this command, it prints out its initial two log messages specified in the Execute method.\nFrom that moment onwards, the Idling event fires almost continuously as long as no other Revit commands are invoked, so my event handler method is called with great frequency:\n\n<pre>\n2010-04-22 12:04:18Z Execute begin\n2010-04-22 12:04:18Z Execute end\n2010-04-22 12:04:18Z OnIdling with active document wall.rvt\n2010-04-22 12:04:18Z OnIdling with active document wall.rvt\n2010-04-22 12:04:18Z OnIdling with active document wall.rvt\n. . .\n</pre>\n<p>This is yet another addition to the Revit API which really opens up completely new doors, so it will be very exciting to see what use can be made of this in the coming months!\n\n<p>Here is \n\n<a href=\"zip/bc_11_65.zip\">\nversion 2011.0.0.65</a>\n\nof the complete Visual Studio solution including the new command.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]