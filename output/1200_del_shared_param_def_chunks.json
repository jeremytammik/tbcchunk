[
  {
    "original_filename": "1200_del_shared_param_def",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1200_del_shared_param_def",
    "header_text": "How to Remove a Shared Parameter Definition",
    "local_header_href": "#how-to-remove-a-shared-parameter-definition",
    "chunk_text": "<h3>How to Remove a Shared Parameter Definition</h3><p>Here is yet another example of the importance of the RevitLookup database exploration tool.</p><p>In this case, Trevor Taylor of <a href=\"http://www.zgf.com\">ZGF</a>, Zimmer Gunsul Frasca Architects LLP, shows his use of it to discover how to remove a shared parameter definition.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1200_del_shared_param_def",
    "header_text": "Task at Hand",
    "local_header_href": "#task-at-hand",
    "chunk_text": "<h4>Task at Hand</h4><p>When I remove a shared parameter definition, it disappears from the UI.\nHowever, the parameter definition isn't truly removed from the model.\nIts definition persists.</p><p>Steps to repeat:</p><ol>\n<li>In a shared parameter definition file, create a parameter named 'MyTest' of data type TEXT.</li>\n<li>Add that shared parameter to a Revit project associated with Rooms (or whatever).</li>\n<li>Check a room to verify that the 'MyTest' parameter exists, then remove it using Manage &gt; Project Parameters.</li>\n<li>Edit the parameter definition in your shared parameters text file using a text editor.\nChange the data type to YESNO.</li>\n<li>Re-add the edited shared parameter file to your project.</li>\n</ol><p>Revit will report that the shared parameter GUID exists and cannot be added.</p><p>So, it appears that once a parameter GUID is created, it exists eternally in the model file.</p><p>This makes it impossible to change the definition of the original parameter once it has been created.\nTherefore, if a user creates a parameter with a certain GUID and needs to go back and change the properties (perhaps it was mistakenly created as the wrong data type), it can never be corrected.</p><p>So, my question is how to either delete the parameter definition from a project file so that it really goes away or, how to modify the parameter definition properties after creation?</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1200_del_shared_param_def",
    "header_text": "Solution",
    "local_header_href": "#solution",
    "chunk_text": "<h4>Solution</h4><p>I found a way around this problem using the ADN RevitLookup add-in.\nI used Snoop DB to explore an element bound to the parameter and looked up the parameter element id.\nThen I use Modify &gt; Select by ID and by jingo, it selects it.\nPress delete and to my amazement, it actually deletes the parameter definition.</p><p>I guess I just need to do some more digging in the API to see how the parameter's id is accessed.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1200_del_shared_param_def",
    "header_text": "Conclusion",
    "local_header_href": "#conclusion",
    "chunk_text": "<h4>Conclusion</h4><p>Congratulations on solving the issue!</p><p>Many thanks to Trevor for his exploration and sharing!</p><p>RevitLookup is miraculously useful, isn't it?\nIn fact, any tool that enables interactive API access to the Revit database is extremely powerful, and the more interactive it is, the more flexibility and power it will provide.</p><p>E.g., the Revit Python and Ruby shells provide an even higher level of interaction, exploration and even modification possibilities, as explained in this demonstration of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/intimate-revit-database-exploration-with-the-python-shell.html\">intimate Revit database exploration</a>.</p><p>RevitLookup is read-only, whereas the Ruby and Python shells can set up and commit transactions and write to the database as well.</p><p>As you also discovered, another thing that is more powerful than you might expect is the simple Document.Delete method.\nJust as you say, feed it the right element id, or collection of element ids, and it will remove just about anything.</p><p>Actually, this approach reminds me of one of the very early posts on The Building Coder, from 2009, on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/deleting-a-shared-parameter.html\">\ndeleting a shared parameter</a>.\n\n<p>Also, by the way, before closing, as an additional reading item, I just happened across this nice overview by Paul Aubin of the\n\n<a href=\"http://paulaubin.com/blog/revit-parameters\">\nfour different types of parameters managed by Revit</a>.</p>\n</p>"
  }
]