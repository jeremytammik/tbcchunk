[
  {
    "original_filename": "1323_au_line_intersect",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<style type=\"text/css\">p.en { font-style: italic; }</style>\n<!-- <script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>-->\n</head>"
  },
  {
    "original_filename": "1323_au_line_intersect",
    "header_text": "Connect Desktop and Cloud & Intersecting Lines or Grid Segments",
    "local_header_href": "#connect-desktop-and-cloud-intersecting-lines-or-grid-segments",
    "chunk_text": "<h3>Connect Desktop and Cloud &amp; Intersecting Lines or Grid Segments</h3><p>The call for Autodesk University proposals closes today, May 26<sup>th</sup>, and I quickly submitted my second one before the deadline falls.</p><p>I also have another contribution from Magson Leone to share with you, a little helper function for calculating (unbounded) grid line intersections:</p><ul>\n<li><a href=\"#2\">Autodesk University proposal – connect desktop and cloud</a></li>\n<li><a href=\"#3\">Intersection of Unbounded Lines</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1323_au_line_intersect",
    "header_text": "Autodesk University Proposal – Connect Desktop and Cloud",
    "local_header_href": "#autodesk-university-proposal-connect-desktop-and-cloud",
    "chunk_text": "<h4>Autodesk University Proposal – Connect Desktop and Cloud</h4><p>As said, the AU 2015 call for proposals ends today, so now is your last chance to join the AU community of experts, contribute to industry excellence, creative design, and the future of making things around the world by submitting your OWN class proposal at <a href=\"http://au.autodesk.com/speaker-resource-center/call-for-proposals\">autode.sk/CFPAU2015</a>.</p><p>I presented my first\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/05/autodesk-university-q1-adn-labs-and-wizard-update.html#3\">\nproposal for the annual 90-minute Revit API expert panel</a> last week.</p><p>Here is my second one:</p><blockquote>\n<p><strong>Connect Desktop and Cloud: Analyse, Visualise and Report Universal Component Usage</strong></p>\n<p>We describe the nitty-gritty programming details to implement a cloud-based system to analyse, visualise and report on universal component usage. The components can be Revit families used in BIM or any other kind of assets in any other kind of system. The focus is on the cloud-based database used to manage the component occurrences, either in global or project based coordinate systems. Searches can be made based on both keywords and geographical location. Models are visualised using pure WebGL, Three.js and the Autodesk View and Data API, providing support for online viewing and model navigation. The web app can be used in any browser and on any mobile device with no need to install any additional software whatsoever. This is an advanced class for experienced programmers.</p>\n</blockquote><p>I will be presenting this class together with my friend, colleague and manager\n<a href=\"http://around-the-corner.typepad.com/adn/cyrille-fauvel.html\">Cyrille Fauvel</a>,\nand am looking forward to that very much.</p><p>As always, I plan to discuss and share my progress as we go along, with most of the web related stuff on\n<a href=\"http://the3dwebcoder.typepad.com/\">The 3D Web Coder</a>, of course.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1323_au_line_intersect",
    "header_text": "Intersection of Unbounded Lines",
    "local_header_href": "#intersection-of-unbounded-lines",
    "chunk_text": "<h4>Intersection of Unbounded Lines</h4><p>Another contribution from Magson Leone, who recently provided the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/05/compatibilizar-entre-vers%C3%B5es-api-compatibility-helper.html\">\nRevit API compatibility helper methods</a>:</p><p>Eu quero lhe fazer mais uma sugestão de postagem para seu blog.\n\n<!--\nEstou te enviando esta sugestão por email porque eu não sei qual é forma correta para lhe enviar sugestão de postagem.\nVocê já me falou como devo proceder para te enviar perguntas, mas não me falou nada sobre como lhe enviar sugestão de postagem.\nEntão resolvi te enviar por email mesmo, assim como fiz da ultima vez.</p>\n\n, by email, in order to easily add both code and images.\n-->\n\nA postagem que eu quero sugerir é sobre como pegar a intersecção entre dois seguimentos de reta.\nEu procurei exaustivamente sobre este assunto e não achei nada.\nAté que eu resolvi colocar a mão na massa e criar uma solução para isto.</p><p class=\"en\">Here is another blog post suggestion, on calculating the intersection point between two grid segments.\nI searched extensively for a solution with no results, so I decided to create my own.</p><p>Eu precisei desta solução quando estava programando uma função para o comando Aparar:</p><p class=\"en\">I need this to implement a stretch command:</p><center>\n<img alt=\"Stretch command\" src=\"img/intersect_lines_3.png\" width=\"533\"/>\n</center><p>Na imagem abaixo está um exemplo: Temos dois seguimentos de reta ou duas curvas, mas não temos o ponto p5 onde as duas retas se cruzam:</p><p class=\"en\">Here is an example with two grid segments or two lines, and determining the point <code>p5</code> where they cross:</p><center>\n<img alt=\"Line intersection\" src=\"img/intersect_lines_2.png\" width=\"538\"/>\n</center><p>Aplicando os conhecimentos de Geometria Analítica, eu criei o método abaixo:</p><p class=\"en\">Using some basic analytic geometry, I created this method:</p><pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"teal\">XYZ</span> Intersection( <span class=\"teal\">Curve</span> c1, <span class=\"teal\">Curve</span> c2 )\n  {\n    <span class=\"teal\">XYZ</span> p1 = c1.GetEndPoint( 0 );\n    <span class=\"teal\">XYZ</span> p2 = c1.GetEndPoint( 1 );\n    <span class=\"teal\">XYZ</span> p3 = c2.GetEndPoint( 0 );\n    <span class=\"teal\">XYZ</span> p4 = c2.GetEndPoint( 1 );\n \n    <span class=\"blue\">double</span> x = p1.X + ( p2.X - p1.X )\n      * ( ( ( p4.X - p3.X ) * ( p3.Y - p1.Y )\n      - ( p4.Y - p3.Y ) * ( p3.X - p1.X ) )\n      / ( ( p4.X - p3.X ) * ( p2.Y - p1.Y )\n      - ( p4.Y - p3.Y ) * ( p2.X - p1.X ) ) );\n \n    <span class=\"blue\">double</span> y = p1.Y + ( p2.Y - p1.Y )\n      * ( ( ( p4.X - p3.X ) * ( p3.Y - p1.Y )\n      - ( p4.Y - p3.Y ) * ( p3.X - p1.X ) )\n      / ( ( p4.X - p3.X ) * ( p2.Y - p1.Y )\n      - ( p4.Y - p3.Y ) * ( p2.X - p1.X ) ) );\n \n    <span class=\"teal\">XYZ</span> p5 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( x, y, 0 );\n \n    <span class=\"blue\">return</span> p5;\n  }\n</pre><p>Many thanks to Magson for this neat little helper function!</p><p>I added it to\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a>\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/Util.cs\">Util class</a> and\nsimplified it a bit like this:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the intersection point between two </span>\n  <span class=\"gray\">///</span><span class=\"green\"> unbounded lines defined by the start and end</span>\n  <span class=\"gray\">///</span><span class=\"green\"> points of the two given curves. By Magson Leone.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">XYZ</span> Intersection( <span class=\"teal\">Curve</span> c1, <span class=\"teal\">Curve</span> c2 )\n  {\n    <span class=\"teal\">XYZ</span> p1 = c1.GetEndPoint( 0 );\n    <span class=\"teal\">XYZ</span> q1 = c1.GetEndPoint( 1 );\n    <span class=\"teal\">XYZ</span> p2 = c2.GetEndPoint( 0 );\n    <span class=\"teal\">XYZ</span> q2 = c2.GetEndPoint( 1 );\n    <span class=\"teal\">XYZ</span> v1 = q1 - p1;\n    <span class=\"teal\">XYZ</span> v2 = q2 - p2;\n    <span class=\"teal\">XYZ</span> w = p2 - p1;\n \n    <span class=\"blue\">double</span> c = ( v2.X * w.Y - v2.Y * w.X )\n      / ( v2.X * v1.Y - v2.Y * v1.X );\n \n    <span class=\"blue\">double</span> x = p1.X + c * v1.X;\n    <span class=\"blue\">double</span> y = p1.Y + c * v1.Y;\n \n    <span class=\"teal\">XYZ</span> p5 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( x, y, 0 );\n \n    <span class=\"blue\">return</span> p5;\n  }\n</pre><p>As always, the most up-to-date version is provided in\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples GitHub repository</a>,\nand the version containing this new method described above is\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2016.0.120.1\">\nrelease 2016.0.120.1</a>.</p>"
  }
]