[
  {
    "original_filename": "0294_abg09_findReferencesByDir",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0294_abg09_findReferencesByDir",
    "header_text": "FindReferencesByDirection",
    "local_header_href": "#findreferencesbydirection",
    "chunk_text": "<h3>FindReferencesByDirection</h3><p>This is part 9 of Scott Conover's AU 2009 class on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/analyse-building-geometry.html\">\nanalysing building geometry</a>, \n\ndealing with the FindReferencesByDirection method and its use as an applications 'eyes'.\n\n<p>We mentioned the method briefly in our discussions on how to find a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/host-reference.html\">\nhost</a> or a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/analytical-support-tolerance.html\">\nfoundation</a> element,\n\nHarry Mattison recently presented a very compelling example using it to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/raytracebounce-pool-table.html\">\nsimulate a pool table</a>\n\nin a Revit model, and Scott himself provided the real-world example for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/spot-elevation-creation-on-top-of-beam.html\">\ncreating spot elevations on the top surface of a beam</a>\n\nwhich we discussed yesterday.\nThe Revit 2010 SDK Samples AvoidObstruction and RaytraceBounce also both demonstrate its use.\n\n<p>Here and now Scott presents more background information and several additional working examples proving how powerful and useful it can be for other real-world tasks.\n\n<h4>FindReferencesByDirection</h4>\n<p>This new method introduced in Revit 2010 allows you to use Revit's picking tools to find elements and geometry. \nWith this method, a ray is projected from a point in a specified direction. \nThe geometry that is hit by the ray is returned by the method.\nLook at its description in the Revit API help.\nHere are some additional notes:</p>\n<ul>\n<li>The method intersects 3D geometry only and requires a 3D view as input. It is possible to use a 3D view which has been cut by a section box, or which has view-specific geometry and graphics options set, to find intersections which would not be found in the uncut and uncropped 3D model.\n<li>This method finds both elements and geometric references which intersect the ray. Some element references returned will not have a corresponding geometric object which is also intersected (for example, rays passing through openings in walls will intersect the wall and the opening element). If you are interested only in true physical intersections you should discard all references whose GeometryObject is of type Element, leaving behind only intersections with faces.\n<li>References will be found and returned only for elements that are in front of the ray. (This is a contradiction to the note in the 2010 documentation, which states that negative results are possible; they are not).\n<li>This method will not return intersections in linked files.\n<li>This method will not return intersections with elements which are not in the active design option.\n</li></li></li></li></li></ul>\n<h4>Find Elements Near Elements</h4>\n<p>One major use for this tool is to find elements in close proximity to other elements. \nThis allows you to use the tool as your application's 'eyes' and determine relationships between elements which don't have a built-in relationship already.</p>\n<h5>Example: Find Columns Embedded in Walls</h5>\n<p>In this example, we use the ray-tracing capability to find columns embedded in walls. \nAs columns and walls don't maintain a relationship directly, this utility allows us to find potential candidates by tracing rays just outside the extents of the wall, and looking for intersections with columns. \nThe implementation covers flat walls (where only two rays, one for either side, are necessary), as well as curved walls, where the rays are traced tangent to the walls at incremental distances, and only matches in close proximity are accepted.</p>\n<center>\n<img alt=\"Columns embedded in walls\" src=\"img/abg9_columns_on_wall.png\"/>\n</center>\n<h4>Measure distances</h4>\n<p>The results of the FindReferencesByDirection are an array of Reference objects intersected by the ray. When the References are obtained from this method, the References' ProximityParameter will be set.</p>\n<p>This is the distance between the origin of the ray and the intersection point. You can use this distance to exclude items too far from the origin for a particular geometric analysis. You can also use this distance to take on some interesting problems involving analyzing the in place geometry of the model.</p>\n<h5>Example: Measure Distance with FindReferencesByDirection</h5>\n<p>In this example, we measure the vertical distance from a skylight to a preselected floor. \nYes, this could be obtained through geometric tools as well (Face.Project()), but with the ray-tracing tool, we don't have to examine the floor to find its top face(s), nor deal with sloped slabs or other problematic details. \nWe just look at all the intersections with the floor, pick the closest one, and thus have found our distance and intersection point.</p>\n<center>\n<img alt=\"Measure distance to floor with FindReferencesByDirection\" src=\"img/abg9_distance_to_floor.png\"/>\n</center>\n<h4>Ray bouncing analysis</h4>\n<p>The references returned by FindReferencesByDirection also include the intersection point on the geometry. \nKnowing the intersection point on the face, the face's material, and the ray direction allows you analyze reflection and refraction within the building.\nThis is illustrated by the Revit SDK sample RayTraceBounce, which is used to track a ray bouncing off the walls of an enclosed space:</p>\n<center>\n<img alt=\"Rays bouncing off intersected faces\" src=\"img/abg9_RayTraceBounce.png\"/>\n</center>\n<p>Please refer to Scott's \n\n<a href=\"http://au.autodesk.com/?nd=class&amp;session_id=5256\">\nAU class material</a> for \n\nthe full source code of his sample project defining the column intersection and distance measurement implementations.\n\n<p>We are nearing the end of this series.\nWhat an impressive amount of new content Scott packed into that one presentation!\nThe next and last intalment of this series deals with material quantity extraction.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0294_abg09_findReferencesByDir",
    "header_text": "FindReferencesByDirection",
    "local_header_href": "#findreferencesbydirection",
    "chunk_text": "<h4>FindReferencesByDirection</h4><p>This new method introduced in Revit 2010 allows you to use Revit's picking tools to find elements and geometry. \nWith this method, a ray is projected from a point in a specified direction. \nThe geometry that is hit by the ray is returned by the method.\nLook at its description in the Revit API help.\nHere are some additional notes:</p><ul>\n<li>The method intersects 3D geometry only and requires a 3D view as input. It is possible to use a 3D view which has been cut by a section box, or which has view-specific geometry and graphics options set, to find intersections which would not be found in the uncut and uncropped 3D model.\n<li>This method finds both elements and geometric references which intersect the ray. Some element references returned will not have a corresponding geometric object which is also intersected (for example, rays passing through openings in walls will intersect the wall and the opening element). If you are interested only in true physical intersections you should discard all references whose GeometryObject is of type Element, leaving behind only intersections with faces.\n<li>References will be found and returned only for elements that are in front of the ray. (This is a contradiction to the note in the 2010 documentation, which states that negative results are possible; they are not).\n<li>This method will not return intersections in linked files.\n<li>This method will not return intersections with elements which are not in the active design option.\n</li></li></li></li></li></ul>"
  },
  {
    "original_filename": "0294_abg09_findReferencesByDir",
    "header_text": "Find Elements Near Elements",
    "local_header_href": "#find-elements-near-elements",
    "chunk_text": "<h4>Find Elements Near Elements</h4><p>One major use for this tool is to find elements in close proximity to other elements. \nThis allows you to use the tool as your application's 'eyes' and determine relationships between elements which don't have a built-in relationship already.</p>"
  },
  {
    "original_filename": "0294_abg09_findReferencesByDir",
    "header_text": "Example: Find Columns Embedded in Walls",
    "local_header_href": "#example-find-columns-embedded-in-walls",
    "chunk_text": "<h5>Example: Find Columns Embedded in Walls</h5><p>In this example, we use the ray-tracing capability to find columns embedded in walls. \nAs columns and walls don't maintain a relationship directly, this utility allows us to find potential candidates by tracing rays just outside the extents of the wall, and looking for intersections with columns. \nThe implementation covers flat walls (where only two rays, one for either side, are necessary), as well as curved walls, where the rays are traced tangent to the walls at incremental distances, and only matches in close proximity are accepted.</p><center>\n<img alt=\"Columns embedded in walls\" src=\"img/abg9_columns_on_wall.png\"/>\n</center>"
  },
  {
    "original_filename": "0294_abg09_findReferencesByDir",
    "header_text": "Measure distances",
    "local_header_href": "#measure-distances",
    "chunk_text": "<h4>Measure distances</h4><p>The results of the FindReferencesByDirection are an array of Reference objects intersected by the ray. When the References are obtained from this method, the References' ProximityParameter will be set.</p><p>This is the distance between the origin of the ray and the intersection point. You can use this distance to exclude items too far from the origin for a particular geometric analysis. You can also use this distance to take on some interesting problems involving analyzing the in place geometry of the model.</p>"
  },
  {
    "original_filename": "0294_abg09_findReferencesByDir",
    "header_text": "Example: Measure Distance with FindReferencesByDirection",
    "local_header_href": "#example-measure-distance-with-findreferencesbydirection",
    "chunk_text": "<h5>Example: Measure Distance with FindReferencesByDirection</h5><p>In this example, we measure the vertical distance from a skylight to a preselected floor. \nYes, this could be obtained through geometric tools as well (Face.Project()), but with the ray-tracing tool, we don't have to examine the floor to find its top face(s), nor deal with sloped slabs or other problematic details. \nWe just look at all the intersections with the floor, pick the closest one, and thus have found our distance and intersection point.</p><center>\n<img alt=\"Measure distance to floor with FindReferencesByDirection\" src=\"img/abg9_distance_to_floor.png\"/>\n</center>"
  },
  {
    "original_filename": "0294_abg09_findReferencesByDir",
    "header_text": "Ray bouncing analysis",
    "local_header_href": "#ray-bouncing-analysis",
    "chunk_text": "<h4>Ray bouncing analysis</h4><p>The references returned by FindReferencesByDirection also include the intersection point on the geometry. \nKnowing the intersection point on the face, the face's material, and the ray direction allows you analyze reflection and refraction within the building.\nThis is illustrated by the Revit SDK sample RayTraceBounce, which is used to track a ray bouncing off the walls of an enclosed space:</p><center>\n<img alt=\"Rays bouncing off intersected faces\" src=\"img/abg9_RayTraceBounce.png\"/>\n</center><p>Please refer to Scott's \n\n<a href=\"http://au.autodesk.com/?nd=class&amp;session_id=5256\">\nAU class material</a> for \n\nthe full source code of his sample project defining the column intersection and distance measurement implementations.\n\n<p>We are nearing the end of this series.\nWhat an impressive amount of new content Scott packed into that one presentation!\nThe next and last intalment of this series deals with material quantity extraction.\n</p></p>"
  }
]