[
  {
    "original_filename": "0626_label_utils",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0626_label_utils",
    "header_text": "Built-in Parameter Name and LabelUtils",
    "local_header_href": "#built-in-parameter-name-and-labelutils",
    "chunk_text": "<h3>Built-in Parameter Name and LabelUtils</h3><p>Over a year ago, I mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/user-visible-enumeration-value-labels.html\">\nLabelUtils class</a> introduced \n\nin the Revit 2011 API. \nHere is another question that came up and shows that it might be useful to point it out again:\n\n\n<p><strong>Question:</strong> I need access to the definition of an internal (built-in) parameter, because I want to retrieve its name via Autodesk.Revit.DB.Definition.Name. \nI know there's an overload of the Element.Parameter property which takes a BuiltInParameter argument.\nThe problem is that there is no element available at the time when I need to obtain the parameter name. \nSo I am looking for something similar to Document.Settings.Categories which allows global access to built-in categories. \nI've tried to find something similar via Document.ParameterBindings, but this map seems to contain only external definitions, i.e. definitions of shared parameters, not of built-in ones.\n\n\n<p><strong>Answer:</strong> Is this what you are after?\n\n<pre class=\"code\">\n  <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Empty;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInParameter</span> bip <span class=\"blue\">in</span> \n    <span class=\"teal\">Enum</span>.GetValues( <span class=\"blue\">typeof</span>( <span class=\"teal\">BuiltInParameter</span> ) ) )\n  {\n    s += <span class=\"maroon\">\"\\r\\n\"</span> + bip.ToString();\n  }\n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Parameter Names\"</span>, s ); \n</pre>\n<p>It retrieves the string values of all the built-in parameter enumeration values.\n\n\n<p><strong>Reponse:</strong> No, I do not want to use the BuiltInParameter.ToString method, since the string is presented to the user. \nTherefore, I would like to use the Parameter.Definition.Name instead, which is user friendlier and also localized.\n\n<p>To access the definition name, I would need to have an element with all the parameters I am interested in attached to it. \nIf I had such an element 'e', I could use the following code to create a mapping from built-in parameters to the corresponding user visible names:\n\n<pre class=\"code\">\n  <span class=\"teal\">Element</span> e;\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">BuiltInParameter</span>, <span class=\"blue\">string</span>&gt; mapBipToName \n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">BuiltInParameter</span>, <span class=\"blue\">string</span>&gt;();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInParameter</span> bip <span class=\"blue\">in</span>\n    <span class=\"teal\">Enum</span>.GetValues( <span class=\"blue\">typeof</span>( <span class=\"teal\">BuiltInParameter</span> ) ) )\n  {\n    <span class=\"green\">// translate built-in enum to parameter name</span>\n \n    <span class=\"teal\">Parameter</span> p = e.get_Parameter( bip );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n    {\n      mapBipToName.Add( bip, p.Definition.Name );\n    }\n  }\n</pre>\n<p>However, I do not have such an element available.\n\n\n<p><strong>Answer:</strong> Please have a look at the LabelUtils class, especially its GetLabelFor method taking a BuiltInParameter argument.\n\n<p>It returns the user-visible name for a given built-in parameter. \nThe name is obtained in the current Revit language.\n\n\n<p><strong>Reponse:</strong> Exactly what I was looking for! Thank you.\n\n</p></p></p></p></p></p></p></p></p></p>"
  }
]