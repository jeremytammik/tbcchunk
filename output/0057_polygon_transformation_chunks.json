[
  {
    "original_filename": "0057_polygon_transformation",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0057_polygon_transformation",
    "header_text": "Polygon Transformation",
    "local_header_href": "#polygon-transformation",
    "chunk_text": "<h3>Polygon Transformation</h3><p>As promised in the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/3d-polygon-areas.html\">\nthree-dimensional polygon area calculation</a>,\n\nI have now implemented some test code to transform the 3D polygon into a horizontal position.\nI can then ignore its Z coordinate and apply the 2D polygon area calculation algorithm to it as well and then compare the results.\nTo my surprise, the results of the 2D and 3D algorithms do indeed exactly match.\n\nThis is a continuation of the analysis for determining the profile boundary loop polygons for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/slab-boundary.html\">\nfloor slabs</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/wall-elevation-profile.html\">\nwalls</a>,\n\nand on the calculation of areas for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/2d-polygon-areas-and-outer-loop.html\">\n2D</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/3d-polygon-areas.html\">\n3D</a>\n\npolygons.</p><p>First let us discuss the top level code for transforming the polygon, so that we can understand and discuss the required lower level functions afterwards.\nSince this is only for testing purposes, I have enclosed it in a debug pragma.\nWe start out with the 3D planar polygon obtained from a wall face and located somewhere arbitrarily in space.\nWe have also determined the normal vector of the plane it is lying in.\nThe goal is to transform it into the XY plane so we can apply the 2D polygon area calculation algorithm to it.\nThis can be achieved through the following steps:</p><ul>\n<li>Determine the transform to rotate the polygon so it is parallel to the XY plane.</li>\n<li>Apply this transform to the polygon.</li>\n<li>Flatten the polygon by dropping the Z coordinate.</li>\n<li>Calculate the 2D polygon area.</li>\n</ul><p>Here is the code implementing these steps:</p><pre class=\"code\">\n<span class=\"blue\">#if</span> DEBUG\n  <span class=\"teal\">Transform</span> t = GetTransformToZ( normal );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; polygonHorizontal\n    = ApplyTransform( polygon, t );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">UV</span>&gt; polygon2d\n    = <span class=\"teal\">CmdSlabBoundaryArea</span>.Flatten(\n      polygonHorizontal );\n \n  <span class=\"blue\">double</span> a2\n    = <span class=\"teal\">CmdSlabBoundaryArea</span>.GetSignedPolygonArea(\n      polygon2d );\n \n  <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">Util</span>.IsEqual( a, a2 ),\n    <span class=\"maroon\">\"expected same area from 2D and 3D calculations\"</span> );\n<span class=\"blue\">#endif</span>\n</pre><p>This code transforms the 3D polygon into a horizontal plane so we can use the 2D GetSignedPolygonArea() and compare its results with the 3D calculation.\nNext, let us look at the detailed implementation of the required low level functions.</p><p>To determine the transform for rotating the polygon parallel to the XY plane, we first calculate the angle α between the normal vector and the Z axis.\nWe have the following cases to consider:</p><ul>\n<li>α is zero, so the normal vector is identical to the Z axis; in this case, the required transform is the identity.</li>\n<li>α equals π, so the normal vector is equal to the negative Z axis; in this case, we have to rotate the polygon by 180 degrees around an arbitrary axis perpendicular to the Z axis, for instance the X axis.</li>\n<li>In all other cases, we can determine a rotation axis that is perpendicular to both the normal vector and the Z axis, and rotate around that by the angle α.</li>\n</ul><p>Here is the code returning such a transformation:</p><pre class=\"code\">\n<span class=\"teal\">Transform</span> GetTransformToZ( <span class=\"teal\">XYZ</span> v )\n{\n  <span class=\"teal\">Transform</span> t;\n \n  <span class=\"blue\">double</span> a = <span class=\"teal\">XYZ</span>.BasisZ.Angle( v );\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">Util</span>.IsZero( a ) )\n  {\n    t = <span class=\"teal\">Transform</span>.Identity;\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"teal\">XYZ</span> axis = <span class=\"teal\">Util</span>.IsEqual( a, <span class=\"teal\">Math</span>.PI )\n      ? <span class=\"teal\">XYZ</span>.BasisX\n      : v.Cross( <span class=\"teal\">XYZ</span>.BasisZ );\n \n    t = <span class=\"teal\">Transform</span>.get_Rotation( <span class=\"teal\">XYZ</span>.Zero, axis, a );\n  }\n  <span class=\"blue\">return</span> t;\n}\n</pre><p>The other three steps are trivial or have already been discussed.\nApplying the transform to the polygon is achieved by applying it individually to each vertex.\nFlattening is done by simply dropping the Z coordinate and implemented in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/2d-polygon-areas-and-outer-loop.html\">\nCmdSlabBoundaryArea</a>,\n\nas is the 2D polygon area calculation.</p><p>As previously mentioned, it would also be interesting to compare the relative speed of transforming the 3D situation to 2D and using 2D area calculation versus direct 3D area calculation.\nUnfortunately, I still have not installed Visual Studio 2008, and my 2005 version is just a so-called professional edition.\nApparently, I should have installed the team edition to have access to the profiling functionality.\nI hope to be able to do so with the 2008 version which I will soon be switching to.</p><p>I am also looking forward to making use of the enhanced generic functionality and libraries provided by the new versions of .NET and C# to improve the implementation of some of the polygon transformation methods which work by applying some transformation to each vertex.</p><p>Here is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10016.zip\">\nversion 1.0.0.16</a>\n\nof the complete Visual Studio solution with the updated code discussed here, still using the VS 2005 platform.</p>"
  }
]