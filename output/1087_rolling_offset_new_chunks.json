[
  {
    "original_filename": "1087_rolling_offset_new",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1087_rolling_offset_new",
    "header_text": "Creating a Rolling Offset Pipe Between Two Pipes",
    "local_header_href": "#creating-a-rolling-offset-pipe-between-two-pipes",
    "chunk_text": "<h3>Creating a Rolling Offset Pipe Between Two Pipes</h3><p>I talked about my nice little MEP related\n\n<a href=\"http://content.case-inc.com/au-hackathon-2013\">\nCASE BIM Hackathon</a> project to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/calculating-a-rolling-offset-between-two-pipes.html\">\ncalculate a rolling offset</a> between\n\ntwo pipes the day before yesterday.</p><p>An obvious immediate question is: OK, and now how do I insert a real pipe segment element instead of just displaying a model line to represent the calculation result?</p><p>Actually, this involves two separate steps:</p><ul>\n<li>Create the rolling offset pipe segment</li>\n<li>Connect the three pipes with each other</li>\n</ul><p>As I mentioned previously, e.g. discussing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/move-duct-join-add-in-with-video-and-github-support.html\">\nhow to move a duct join</a>,\n\nthere are two different approaches to completing these two tasks:</p><ul>\n<li>First place the pipes and then connect their connectors with each other; this automatically generates, places and connects the appropriate fittings.</li>\n<li>Place the fittings, then connect those with each other and the two original pipes; this will automatically generate, place and connect the rolling offset pipe.</li>\n</ul><p>Long term, I would like to implement and discuss both of these approaches here.</p><p>For the moment, I will just look at the first step, placing a pipe to define the rolling offset, and not worry at all about connecting it yet.</p><p>Even just looking at that raises an interesting issue or two.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1087_rolling_offset_new",
    "header_text": "Two Pipe Creation Methods",
    "local_header_href": "#two-pipe-creation-methods",
    "chunk_text": "<h4>Two Pipe Creation Methods</h4><p>The Revit API provides two methods to create a new pipe:</p><ul>\n<li>The new static creation method on the class itself: <a href=\"#3\">Pipe.Create</a>.</li>\n<li>The old method on the creation document: <a href=\"#4\">Document.Create.NewPipe.</a></li>\n</ul><a name=\"3\"></a>"
  },
  {
    "original_filename": "1087_rolling_offset_new",
    "header_text": "Initial Problems Using Pipe.Create",
    "local_header_href": "#initial-problems-using-pipecreate",
    "chunk_text": "<h4>Initial Problems Using Pipe.Create</h4><p>I obviously tried to use the new method first.\n\n<p>The static Pipe.Create method to create the pipe takes six arguments:</p>\n<ul>\n<li>document: The document.</li>\n<li>systemTypeId: The id of the piping system type.</li>\n<li>pipeTypeId: The id of the pipe type.</li>\n<li>levelId: The level id for the pipe.</li>\n<li>firstPoint: The first point of the pipe.</li>\n<li>secondPoint: The second point of the pipe.</li>\n</ul>\n<p>I tried to grab the required information from one of the two pre-existing pipes and call the creation method like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">ElementId</span> idSystem = pipe.MEPSystem.Id;\n  <span class=\"teal\">ElementId</span> idType = pipe.PipeType.Id;\n  <span class=\"teal\">ElementId</span> idLevel = pipe.LevelId;\n \n  pipe = <span class=\"teal\">Pipe</span>.Create( doc, idSystem,\n    idType, idLevel, q0, q1 );\n</pre>\n<p>Unfortunately, this throws an argument exception saying \"The systemTypeId is not valid piping system type. Parameter name: systemTypeId\".</p>\n<p>I tried several other options to retrieve a useable piping system type id, including the ElementId.InvalidElementId and creating a new PipingSystem element, but so far they all failed, unfortunately.</p>\n<p>I'll let you know as soon as I have a running solution.</p>\n<a name=\"4\"></a>\n<h4>Pipe Creation Using NewPipe</h4>\n<p>As a workaround, I resorted to the old pipe creation method NewPipe provided by the creation document.</p>\n<p>I had some old code lying around, so it was no problem reusing that, and it works fine.</p>\n<p>The NewPipe method requires the start point, end point, and pipe type.</p>\n<p>I use a filtered element collector to retrieve the standard pipe type by comparing its name to \"Standard\".\nI am sure there is also a language independent way of achieving this.</p>\n<p>I added an assertion to check that one of the two original pipes is using the same pipe type, so I could also just grab that instead.\nThat is the case in this super simple sample model.\nIn the real world, the situation would obviously be more complex.</p>\n<p>I also grab the original pipe diameter and set the new one to the same value via its built-in parameter RBS_PIPE_DIAMETER_PARAM.</p>\n<p>Here is the resulting code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">BuiltInParameter</span> bip\n    = <span class=\"teal\">BuiltInParameter</span>.RBS_PIPE_DIAMETER_PARAM;\n \n  <span class=\"blue\">double</span> diameter = pipe\n    .get_Parameter( bip ) <span class=\"green\">// \"Diameter\"</span>\n    .AsDouble();\n \n  <span class=\"teal\">PipeType</span> pipe_type_standard\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">PipeType</span> ) )\n      .Cast&lt;<span class=\"teal\">PipeType</span>&gt;()\n      .Where&lt;<span class=\"teal\">PipeType</span>&gt;( e\n        =&gt; e.Name.Equals( <span class=\"maroon\">\"Standard\"</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">PipeType</span>&gt;();\n \n  <span class=\"teal\">Debug</span>.Assert(\n    pipe_type_standard.Id.IntegerValue.Equals(\n      pipe.PipeType.Id.IntegerValue ),\n    <span class=\"maroon\">\"expected all pipes in this simple \"</span>\n    + <span class=\"maroon\">\"model to use the same pipe type\"</span> );\n \n  pipe = doc.Create.NewPipe( q0, q1,\n    pipe_type_standard );\n \n  pipe.get_Parameter( bip )\n    .Set( diameter );\n</pre>\n<p>Here is a screen snapshot of the situation with the two pipes before executing the command:</p>\n<center>\n<img alt=\"Two original pipes\" src=\"img/rolling_offset_pipe_1.png\"/>\n</center>\n<p>The command identifies the two, calculates the rolling offset, adjusts the two existing pipe end points, and generates a new pipe segment between them:</p>\n<center>\n<img alt=\"New rolling offset pipe segment\" src=\"img/rolling_offset_pipe_2.png\"/>\n</center>\n<p>Note that I have not made any attempt so far to connect the three.</p>\n<p>I'll have a look at that some other time.</p>\n<p>As promised, I will also try to get the new Pipe.Create method up and running.</p>\n<p>The code presented above is available from\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> GitHub\n\nrepository, in the external command CmdRollingOffset, and the version discussed here is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.106.2\">\nrelease 2014.0.106.2</a>.</p>\n<p>It implements two Boolean variables to switch between the different tests discussed so far:</p>\n<ul>\n<li>Creation of a model line placeholder</li>\n<li>Pipe creation using Pipe.Create</li>\n<li>Pipe creation using Document.Create.NewPipe</li>\n</ul>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> This command can place either a model line</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to represent the rolling offset calculation</span>\n  <span class=\"gray\">///</span><span class=\"green\"> result, or insert a real pipe segment and the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> associated fittings.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> _place_model_line = <span class=\"blue\">false</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Switch between the new static Pipe.Create</span>\n  <span class=\"gray\">///</span><span class=\"green\"> method and the obsolete </span>\n  <span class=\"gray\">///</span><span class=\"green\"> Document.Create.NewPipe.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> _use_static_pipe_create = <span class=\"blue\">false</span>;\n</pre>\n<p>I hope you find this useful, and look forward to the further exploration.</p>\n<p>If you already know how to achieve some of the missing steps, please feel free to fork and enhance the sample code on GitHub. Thank you!</p>\n</p>"
  },
  {
    "original_filename": "1087_rolling_offset_new",
    "header_text": "Pipe Creation Using NewPipe",
    "local_header_href": "#pipe-creation-using-newpipe",
    "chunk_text": "<h4>Pipe Creation Using NewPipe</h4><p>As a workaround, I resorted to the old pipe creation method NewPipe provided by the creation document.</p><p>I had some old code lying around, so it was no problem reusing that, and it works fine.</p><p>The NewPipe method requires the start point, end point, and pipe type.</p><p>I use a filtered element collector to retrieve the standard pipe type by comparing its name to \"Standard\".\nI am sure there is also a language independent way of achieving this.</p><p>I added an assertion to check that one of the two original pipes is using the same pipe type, so I could also just grab that instead.\nThat is the case in this super simple sample model.\nIn the real world, the situation would obviously be more complex.</p><p>I also grab the original pipe diameter and set the new one to the same value via its built-in parameter RBS_PIPE_DIAMETER_PARAM.</p><p>Here is the resulting code:</p><pre class=\"code\">\n  <span class=\"teal\">BuiltInParameter</span> bip\n    = <span class=\"teal\">BuiltInParameter</span>.RBS_PIPE_DIAMETER_PARAM;\n \n  <span class=\"blue\">double</span> diameter = pipe\n    .get_Parameter( bip ) <span class=\"green\">// \"Diameter\"</span>\n    .AsDouble();\n \n  <span class=\"teal\">PipeType</span> pipe_type_standard\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">PipeType</span> ) )\n      .Cast&lt;<span class=\"teal\">PipeType</span>&gt;()\n      .Where&lt;<span class=\"teal\">PipeType</span>&gt;( e\n        =&gt; e.Name.Equals( <span class=\"maroon\">\"Standard\"</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">PipeType</span>&gt;();\n \n  <span class=\"teal\">Debug</span>.Assert(\n    pipe_type_standard.Id.IntegerValue.Equals(\n      pipe.PipeType.Id.IntegerValue ),\n    <span class=\"maroon\">\"expected all pipes in this simple \"</span>\n    + <span class=\"maroon\">\"model to use the same pipe type\"</span> );\n \n  pipe = doc.Create.NewPipe( q0, q1,\n    pipe_type_standard );\n \n  pipe.get_Parameter( bip )\n    .Set( diameter );\n</pre><p>Here is a screen snapshot of the situation with the two pipes before executing the command:</p><center>\n<img alt=\"Two original pipes\" src=\"img/rolling_offset_pipe_1.png\"/>\n</center><p>The command identifies the two, calculates the rolling offset, adjusts the two existing pipe end points, and generates a new pipe segment between them:</p><center>\n<img alt=\"New rolling offset pipe segment\" src=\"img/rolling_offset_pipe_2.png\"/>\n</center><p>Note that I have not made any attempt so far to connect the three.</p><p>I'll have a look at that some other time.</p><p>As promised, I will also try to get the new Pipe.Create method up and running.</p><p>The code presented above is available from\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> GitHub\n\nrepository, in the external command CmdRollingOffset, and the version discussed here is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.106.2\">\nrelease 2014.0.106.2</a>.</p><p>It implements two Boolean variables to switch between the different tests discussed so far:</p><ul>\n<li>Creation of a model line placeholder</li>\n<li>Pipe creation using Pipe.Create</li>\n<li>Pipe creation using Document.Create.NewPipe</li>\n</ul><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> This command can place either a model line</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to represent the rolling offset calculation</span>\n  <span class=\"gray\">///</span><span class=\"green\"> result, or insert a real pipe segment and the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> associated fittings.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> _place_model_line = <span class=\"blue\">false</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Switch between the new static Pipe.Create</span>\n  <span class=\"gray\">///</span><span class=\"green\"> method and the obsolete </span>\n  <span class=\"gray\">///</span><span class=\"green\"> Document.Create.NewPipe.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> _use_static_pipe_create = <span class=\"blue\">false</span>;\n</pre><p>I hope you find this useful, and look forward to the further exploration.</p><p>If you already know how to achieve some of the missing steps, please feel free to fork and enhance the sample code on GitHub. Thank you!</p>"
  }
]