[
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- https://stackoverflow.com/questions/53756458/how-to-get-the-bounding-box-from-a-revit-element-with-revit-api-then-call-to-ce\n\nRotate picked element around its bounding box centre using Python in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon @ThePSF http://bit.ly/pybbcentre\n\nLet's highlight a nice interactive didactical Python-based Revit API learning challenge on how to get the bounding box from a Revit element and determine its centre\n&ndash; Cyril's Python HVAC blog\n&ndash; Rotating elements around their centre in Python\n&ndash; Retrieve element and bounding box from picked reference\n&ndash; Use location point instead of bounding box centre\n&ndash; Final working solution...\n\n-->"
  },
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "Python Rotate Picked Around Bounding Box Centre",
    "local_header_href": "#python-rotate-picked-around-bounding-box-centre",
    "chunk_text": "### Python Rotate Picked Around Bounding Box Centre\n\nLet's highlight a nice interactive didactical Python-based Revit API learning challenge from StackOverflow, for a change, raised, discussed and solved\nby [Christian Gentry](https://stackoverflow.com/users/9662317/christian-gentry),\nwith help from [Cyril Waechter](https://stackoverflow.com/users/4098083/cyril-waechter),\non [how to get the bounding box from a Revit element and determine its centre](https://stackoverflow.com/questions/53756458/how-to-get-the-bounding-box-from-a-revit-element-with-revit-api-then-call-to-ce):\n\n- [Cyril's Python HVAC blog](#1) \n- [Rotating elements around their centre in Python](#2) \n- [Retrieve element and bounding box from picked reference](#3) \n- [Use location point instead of bounding box centre](#4) \n- [Final working solution](#5)\n- [Updated final working solution](#5.1)\n- [Python popularity growing](#6) \n\n<center>\n<img src=\"img/pyRevitMepRotate3d.png\" alt=\"PyRevitMEP 3D rotation script\" width=\"391\">\n</center>"
  },
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "<a name=\"1\"></a> Cyril's Python HVAC Blog",
    "local_header_href": "#a-name1a-cyrils-python-hvac-blog",
    "chunk_text": "#### <a name=\"1\"></a> Cyril's Python HVAC Blog\n\nYou can see below why the following discussion also prompted me to look at\nCyril's very nice [Python HVAC blog](http://pythoncvc.net).\n\nIn his own words:\n\n> Welcome on this website which promotes and provides scripts and applications for HVAC and BIM purposes.\nThese are written in Python language.\n\n> When I started my career, I wished I had many time saver tools.\nMany people don't realise how much time you can save with just a few lines of code.\nIn my opinion, everything which can be automated should be.\nA human being is here to use his mind, not to copy, paste and input data which doesn't need any brain.\n\n> Why Python? Because it is handy, interactive, open source and cross platform.\n\n[Cyril's FAQ](http://pythoncvc.net/?page_id=302) includes very useful information and resources for getting started with his own [pyRevitMEP MEP extensions for pyRevit](https://github.com/CyrilWaechter/pyRevitMEP), Python and the base Revit API."
  },
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "<a name=\"2\"></a> Rotating Elements Around Their Centre in Python",
    "local_header_href": "#a-name2a-rotating-elements-around-their-centre-in-python",
    "chunk_text": "#### <a name=\"2\"></a> Rotating Elements Around Their Centre in Python\n\n**Question:** I am trying to rotate Revit elements about their centre points.\nIn order to do that, I need to select a Revit element and find its centre point, then create a line with the coordinates at that point.\n\nMy best idea to accomplish this is to wrap a Revit element in a bounding box and then find the centre of that box.\nMy problem is that I am unsure how to accomplish this.\n\nI am using [pyRevit](https://github.com/eirannejad/pyRevit) (amazing tool) and I am stuck on how to either wrap the selected element with a bounding box or retrieve its existing bounding box.\n\nAny help would be greatly appreciated!\nI am really trying to learn the Revit API and understand how everything works.\nI am making progress but there is a lot to unpack.\n\n<pre class=\"prettyprint\">\n  def pickobject():\n    from Autodesk.Revit.UI.Selection import ObjectType\n    \n    #define the active Revit application and document\n    app = __revit__.Application\n    doc = __revit__.ActiveUIDocument.Document\n    uidoc = __revit__.ActiveUIDocument\n    \n    #define a transaction variable and describe the transaction\n    t = Transaction(doc, 'This is my new transaction')\n    \n    # Begin new transaction\n    t.Start()\n    \n    # Select an element in Revit\n    picked = uidoc.Selection.PickObject(ObjectType.Element, \"Select something.\")\n\n    ### ?????????? ###\n    \n    # Get bounding box of selected element.\n    picked_bb = BoundingBoxXYZ(picked)  \n    \n    # Get max and min points of bounding box.\n    picked_bb_max = picked_bb.Max\n    picked_bb_min = picked_bb.Min\n    \n    # Get center point between max and min points of bounding box.\n    picked_bb_center = (picked_bb_max + picked_bb_min) / 2\n    \n    ### ?????????? ###    \n    \n    # Close the transaction\n    t.Commit()\n    \n    return picked, picked_bb_center\n</pre>\n\nThanks in advance for taking a look at what I have so far."
  },
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "<a name=\"3\"></a> Retrieve Element and Bounding Box from Picked Reference",
    "local_header_href": "#a-name3a-retrieve-element-and-bounding-box-from-picked-reference",
    "chunk_text": "#### <a name=\"3\"></a> Retrieve Element and Bounding Box from Picked Reference\n\nThe centre of the bounding box is very easy to obtain.\n`picked` is a `Reference`.\nGet the `ElementId` from that, open it using `doc.GetElement`, and retrieve the bounding box using `get_BoundingBox`,\ncf. this code snippet from the discussion\nof [conduits intersecting a junction box](https://thebuildingcoder.typepad.com/blog/2018/03/create-2d-arc-and-filter-for-intersecting-elements.html#3):\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.SelectSingleElement(\n&nbsp;&nbsp;&nbsp;&nbsp;uidoc,&nbsp;<span style=\"color:#a31515;\">&quot;a&nbsp;junction&nbsp;box&quot;</span>&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">BoundingBoxXYZ</span>&nbsp;bb&nbsp;=&nbsp;e.get_BoundingBox(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;);\n</pre>\n\nFor certain elements and certain irregular shapes, you might want to use the centroid instead of the bounding box:\n\n- [Solid centroid and volume calculation](http://thebuildingcoder.typepad.com/blog/2012/12/solid-centroid-and-volume-calculation.html)\n- [GetCentroid on GitHub](https://thebuildingcoder.typepad.com/blog/2015/06/dynamo-centroid-volume-calculation-migration-blitz.html#3)"
  },
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "<a name=\"4\"></a> Use Location Point Instead of Bounding Box Centre?",
    "local_header_href": "#a-name4a-use-location-point-instead-of-bounding-box-centre",
    "chunk_text": "#### <a name=\"4\"></a> Use Location Point Instead of Bounding Box Centre?\n\n**Answer:** Is it not more interesting to use `LocationPoint` instead in your case? In my case it is almost always better. You might be interested to take a look at the two-minute video showing my tool,\na [Revit API 3D rotate script for pyRevit](https://youtu.be/60Y_DJbIL5Y), and its [source code](https://github.com/CyrilWaechter/pyRevitMEP/tree/master/pyRevitMEP.tab/Tools.panel/Element3DRotation.pushbutton):\n\n<center>\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/60Y_DJbIL5Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</center>\n\nI describe the script shown in the video in full detail in\nthe [Python HVAC blog](http://pythoncvc.net) in the article\non a [script rotating elements in any direction](http://pythoncvc.net/?p=255).\n\n**Response:** Thanks for this! \n\nI think you are right. Using `LocationPoint` would probably make more sense.\n\nI looked through the script you linked (thank you btw!) and tried implementing this section in my code:\n\n<pre class=\"prettyprint\">\n  transform = doc.GetElement(picked.ElementId).GetTransform()\n</pre>\n\nI am passing the `ElementId` through this statement, but I get an error saying that the `Wall` object has no attribute `GetTransform`. Could you please help me understand this?\n\n**Answer:** Because, as said in the error message, the `GetTransform` method do not exist for a `Wall` class instance.\n\nHave you tried to use `ElementTransformUtils` instead?"
  },
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "<a name=\"5\"></a> Final Working Solution",
    "local_header_href": "#a-name5a-final-working-solution",
    "chunk_text": "#### <a name=\"5\"></a> Final Working Solution\n\nHere is how I was able to solve my problem using pyRevit. This code allows you to rotate an element about its Z axis from the centre of its bounding box.\n\n<pre class=\"prettyprint\">\n  def pickobject():\n    from Autodesk.Revit.UI.Selection import ObjectType\n    \n    #define the active Revit application and document\n    app = __revit__.Application\n    doc = __revit__.ActiveUIDocument.Document\n    uidoc = __revit__.ActiveUIDocument\n    \n    #define a transaction variable and describe the transaction\n    t = Transaction(doc, 'This is my new transaction')\n    \n    # Begin new transaction\n    t.Start()\n    \n    # Select an element in Revit\n    el = uidoc.Selection.PickObject(ObjectType.Element, \"Select something.\")\n    \n    # Get the element from the selected element reference\n    el_ID = doc.GetElement(el)      \n    \n    # Get the Bounding Box of the selected element.\n    el_bb = el_ID.get_BoundingBox(doc.ActiveView)\n    \n    # Get the min and max values of the elements bounding box.\n    el_bb_max = el_bb.Max\n    el_bb_min = el_bb.Min\n    \n    # Get the center of the selected elements bounding box.\n    el_bb_center = (el_bb_max + el_bb_min) / 2\n    \n    #Create a line to use as a vector using the center location of the bounding box.\n    p1 = XYZ(el_bb_center[0], el_bb_center[1], 0)\n    p2 = XYZ(el_bb_center[0], el_bb_center[1], 1)\n    myLine = Line.CreateBound(p1, p2)\n    \n    # Rotate the selected element.\n    ElementTransformUtils.RotateElement(doc, el, myLine, converted_value)\n    \n    # Close the transaction\n    t.Commit()\n</pre>\n\nMany thanks to Christian for the interesting discussion and Cyril for the wealth of additional information he provides!"
  },
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "<a name=\"5.1\"></a> Updated Final Working Solution",
    "local_header_href": "#a-name51a-updated-final-working-solution",
    "chunk_text": "#### <a name=\"5.1\"></a> Updated Final Working Solution\n\nAfter the winter break, Christian added:\n\n> I have updated my code solution to work directly in the Revit Python Shell without any further modifications. I have also added comments that better explain the code. Would you mind updating your blog post with this latest solution? I feel that the new solution is more beneficial to people with this same issue. Thanks!\n\nHere is how I was able to solve my problem using pyRevit. This code allows you to rotate an element about its Z axis from the center of its bounding box.\n\nTo use this code, select a single Revit element and then open the Revit Python Shell. Copy and paste the code below into the Revit Python Shell notepad and click the run button. This will rotate the element by 45 degrees because the current `rotateSelectedElement` argument is `45`. You may change this number to any value before running.\n\n<pre class=\"prettyprint\">\n  # Import the math module to convert user input degrees to radians.\n  import math\n  \n  # Get a list of all user selected objects in the Revit Document.\n  selection = [doc.GetElement(x) for x in uidoc.Selection.GetElementIds()]\n  \n  # Definitions\n  def rotateSelectedElement(degrees_to_rotate):\n    from Autodesk.Revit.UI.Selection import ObjectType\n  \n    #define the active Revit application and document\n    app = __revit__.Application\n    doc = __revit__.ActiveUIDocument.Document\n    uidoc = __revit__.ActiveUIDocument\n  \n    #define a transaction variable and describe the transaction\n    t = Transaction(doc, 'This is my new transaction')\n  \n    # Convert the user input from degrees to radians.\n    converted_value = float(degrees_to_rotate) * (math.pi / 180.0)\n  \n    # Begin new transaction\n    t.Start()\n  \n    # Get the first selected element from the current Revit doc.\n    el = selection[0].Id\n  \n    # Get the element from the selected element reference\n    el_ID = doc.GetElement(el)      \n  \n    # Get the Bounding Box of the selected element.\n    el_bb = el_ID.get_BoundingBox(doc.ActiveView)\n  \n    # Get the min and max values of the elements bounding box.\n    el_bb_max = el_bb.Max\n    el_bb_min = el_bb.Min\n  \n    # Get the center of the selected elements bounding box.\n    el_bb_center = (el_bb_max + el_bb_min) / 2\n  \n    #Create a line to use as a vector using the center location of the bounding box.\n    p1 = XYZ(el_bb_center[0], el_bb_center[1], 0)\n    p2 = XYZ(el_bb_center[0], el_bb_center[1], 1)\n    myLine = Line.CreateBound(p1, p2)\n  \n    # Rotate the selected element.\n    ElementTransformUtils.RotateElement(doc, el, myLine, converted_value)\n  \n    # Close the transaction\n    t.Commit()\n  \n    \n  # Execute    \n  # Add the desired degrees to rotate by as an argument for rotateSelectedElement()\n  rotateSelectedElement(45)\n</pre>\n\nHappy New Year to Christian and all!"
  },
  {
    "original_filename": "1712_py_rot_bb_midp",
    "header_text": "<a name=\"6\"></a> Python Popularity Growing",
    "local_header_href": "#a-name6a-python-popularity-growing",
    "chunk_text": "#### <a name=\"6\"></a> Python Popularity Growing\n\nTalking about Python, \n[Python is becoming the world’s most popular coding language](https://www.economist.com/graphic-detail/2018/07/26/python-is-becoming-the-worlds-most-popular-coding-language), according to the Economist and global search engine statistics:\n\n<center>\n<img src=\"img/python_gains_popularity.png\" alt=\"Python popularity growing\" width=\"640\">\n</center>"
  }
]