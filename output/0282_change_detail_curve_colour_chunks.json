[
  {
    "original_filename": "0282_change_detail_curve_colour",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0282_change_detail_curve_colour",
    "header_text": "Model and Detail Curve Colour",
    "local_header_href": "#model-and-detail-curve-colour",
    "chunk_text": "<h3>Model and Detail Curve Colour</h3><p>We have had several questions on how to change the colour of model or detail curves.\nHere is an answer to this question from a recent case handled by Joe:\n\n<p><strong>Question:</strong> I am drawing a detail arc using the Revit API DetailArc class and\ntrying to change its properties like colour, graphic style etc.\nHow can this be achieved?\n\n<p><strong>Answer:</strong> You can change the detail arc line colour by changing the colour of the detail curve category's line style. \n\n<p>Here is The Building Coder sample command \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/detail-lines.html\">\nCmdDetailCurves</a>\n\ndemonstrating the creation of a few detail curves and enhanced to modify the line colour of their graphics style:\n\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n<span class=\"teal\">View</span> view = doc.ActiveView;\n \n<span class=\"green\">// Create a geometry line</span>\n \n<span class=\"teal\">XYZ</span> startPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 0 );\n<span class=\"teal\">XYZ</span> endPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 10, 0 );\n \n<span class=\"teal\">Line</span> geomLine = app.Create.NewLine(\n  startPoint, endPoint, <span class=\"blue\">true</span> );\n \n<span class=\"green\">// Create a geometry arc</span>\n \n<span class=\"teal\">XYZ</span> end0 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 1, 0, 0 );\n<span class=\"teal\">XYZ</span> end1 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 10, 10 );\n<span class=\"teal\">XYZ</span> pointOnCurve = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 10, 0, 0 );\n \n<span class=\"teal\">Arc</span> geomArc = app.Create.NewArc(\n  end0, end1, pointOnCurve );\n \n<span class=\"green\">// Create a geometry plane</span>\n \n<span class=\"teal\">XYZ</span> origin = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 0 );\n<span class=\"teal\">XYZ</span> normal = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 1, 1, 0 );\n \n<span class=\"teal\">Plane</span> geomPlane = app.Create.NewPlane(\n  normal, origin );\n \n<span class=\"green\">// Create a sketch plane in current document</span>\n \n<span class=\"teal\">SketchPlane</span> sketch = doc.Create.NewSketchPlane(\n  geomPlane );\n \n<span class=\"green\">// Create a DetailLine element using the </span>\n<span class=\"green\">// newly created geometry line and sketch plane</span>\n \n<span class=\"teal\">DetailLine</span> line = doc.Create.NewDetailCurve(\n  view, geomLine ) <span class=\"blue\">as</span> <span class=\"teal\">DetailLine</span>;\n \n<span class=\"green\">// Create a DetailArc element using the </span>\n<span class=\"green\">// newly created geometry arc and sketch plane</span>\n \n<span class=\"teal\">DetailArc</span> arc = doc.Create.NewDetailCurve(\n  view, geomArc ) <span class=\"blue\">as</span> <span class=\"teal\">DetailArc</span>;\n \n<span class=\"green\">// Change detail curve colour.</span>\n<span class=\"green\">// Initially, this only affects the newly </span>\n<span class=\"green\">// created curves. However, when the view </span>\n<span class=\"green\">// is refreshed, all detail curves will </span>\n<span class=\"green\">// be updated.</span>\n \n<span class=\"teal\">GraphicsStyle</span> gs = arc.LineStyle <span class=\"blue\">as</span> <span class=\"teal\">GraphicsStyle</span>;\n \ngs.GraphicsStyleCategory.LineColor \n  = <span class=\"blue\">new</span> <span class=\"teal\">Color</span>( 250, 10, 10 );\n \n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n</pre>\n<p>Note that you need to ensure that detail curves are visible in the view that you are working in in order to see the changes taking effect.\n\n<p>Also note that the newly defined colour will be applied to all detail curves after the view is refreshed or closed and reopened. \nIt is not possible to change one single detail line's colour individually in the long run.\n\n<p>Here are a couple of detail curves drawn in the default drawing before running this command:\n\n<center>\n<img alt=\"Default detail curves\" src=\"img/detail_curves_1.png\"/>\n</center>\n<p>Here are the new detail curves added by the command with their modified line colour:\n\n<center>\n<img alt=\"Detail curves with modified settings\" src=\"img/detail_curves_2.png\"/>\n</center>\n<p>When the view is refreshed or closed and reopened, all detail lines will adopt the new colour.\n\n<p>Here is\n\n<a href=\"zip/bc11058.zip\">\nversion 1.1.0.58</a>\n\nof the complete Building Coder sample source code and Visual Studio solution including the updated version of this command.</p>\n<p>Many thanks to Joe for handling this case!\n</p></p></p></p></p></p></p></p></p></p>"
  }
]