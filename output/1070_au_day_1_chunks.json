[
  {
    "original_filename": "1070_au_day_1",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1070_au_day_1",
    "header_text": "AU Day 1, Revit 2014 API Class, Keynote, DevLab and Rotated Bounding Box Rotation",
    "local_header_href": "#au-day-1-revit-2014-api-class-keynote-devlab-and-rotated-bounding-box-rotation",
    "chunk_text": "<h3>AU Day 1, Revit 2014 API Class, Keynote, DevLab and Rotated Bounding Box Rotation</h3>"
  },
  {
    "original_filename": "1070_au_day_1",
    "header_text": "AU Day 1, Revit 2014 API Class and Bounding Box Rotation",
    "local_header_href": "#au-day-1-revit-2014-api-class-and-bounding-box-rotation",
    "chunk_text": "<h3>AU Day 1, Revit 2014 API Class and Bounding Box Rotation</h3><p>Tuesday was the first real day at AU after the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/devdayau-chronicle-estorage-view-depth-sound-of-noise.html\">\nDevDay</a> pre-event conference yesterday.</p><p>Here are my main activities of the day in chronological order:</p><ul>\n<li><a href=\"#2\">Advanced Revit 2014 API features and samples</a></li>\n<li><a href=\"#3\">AU Keynote by Jeff and Carl</a></li>\n<li><a href=\"#4\">DevLab and bounding box rotation</a></li>\n<li><a href=\"#5\">Adding a marker at the Revit project origin</a></li>\n<li><a href=\"#6\">Download</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1070_au_day_1",
    "header_text": "Advanced Revit 2014 API Features and Samples",
    "local_header_href": "#advanced-revit-2014-api-features-and-samples",
    "chunk_text": "<h4>Advanced Revit 2014 API Features and Samples</h4><p>I presented my first class\n\n<a href=\"https://events.au.autodesk.com/connect/sessionDetail.ww?SESSION_ID=2010\">\nDV2010 – Advanced Revit 2014 API Features and Samples</a> right\n\naway starting at the very first moment of AU, at eight in the morning.</p><p>Here is the most up-to-date\n\n<a href=\"file:///a/doc/revit/au/2013/doc/dv2010_advanced_revit_2014_api_handout.pdf\">\nhandout</a> and\n\n<a href=\"file:///a/doc/revit/au/2013/doc/dv2010_advanced_revit_2014_api_slides.pdf\">\nslide deck</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1070_au_day_1",
    "header_text": "Keynote",
    "local_header_href": "#keynote",
    "chunk_text": "<h4>Keynote</h4><p>As usual, the keynote presentation was given by Jeff Kowalski and Carl Bass, with Jeff focusing on ideas and long-term vision and Carl presenting real live usage examples of existing products.</p><p>Jeff expounded on the power and advantages of collaboration and open source, and how the Autodesk 360 platform supports that.\nHe suggested picking a class by chance, to learn something completely new, mentioned reverse mentoring, where young people mentor older experienced folk, pointed out how much there is to learn from each other, e.g. using reverse innovation, consciously looking outside, beyond what you and everybody else thinks is possible, to learn, unlearn and relearn.</p><p>Carl highlighted a number of different original and creative companies making use of new technologies to save huge amounts of time and effort, e.g.:\n\n<ul>\n<li>Orphanage guitars via fusion 360 to create custom made guitars involving the customer directly in the process.</li>\n<li>Aston Martin creating a new car, concept sketches, Sketchbook, Alias, CNC-generated clay model, post processed including hand sculpting, laser scanned to bring it back into Alias, completing the cycle to market in record time.</li>\n<li><a href=\"http://www.autodeskplm360.com\">PLM 360</a> cloud-based example with a four month adoption period, to search for data and create documentation</li>\n<li>Prosthetic leg collaboration project using A360 and CAM 360.</li>\n<li>Airport project complexity BIM developer share coordinate using BIM 360 Glue thousands of hours saved BIM 360 Field solve problems in real-time, Infraworks 360, ReCap point cloud image based 3D modelling, the only input you can really trust, saving thousands of hours of modelling work.</li>\n<li>BioLite building a stove scaled up by a factor of 500 from the normal design on short notice using SIM 360.</li>\n<li>Bot &amp; Dolly film and robots Maya animate robots in real life the way you would normally animate virtual characters.\nComplete control of robot motion in time and space.\nRobot \"Iris\" danced for us.\nFor a sample, look at\n\n<a href=\"http://www.youtube.com/watch?v=lX6JcybgDFo\">Box</a> on YouTube.\n</li>\n</ul>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"236\" src=\"http://www.youtube.com/embed/lX6JcybgDFo\" width=\"420\"></iframe>\n<p>According to Carl, the most important things to look at in the coming days are Autodesk 360 and computational design, e.g. Dynamo.\nIt currently drives Revit.\nBeing open source, it can be adapted by anyone for other products as well, and an implementation driving Inventor has already been unveiled.</p>\n<p>Lots of great new technology to discover, and more than 500 classes to choose from.</p>\n<a name=\"4\"></a>\n<h4>DevLab and Bounding Box Rotation</h4>\n<p>DevLab was active, lots of questions addressed.</p>\n<p>One little issue I was able to capture was this snippet of code to calculate the max and min of a rotated bounding box, initially inspired by Angel Velez, Revit developer, and heavily edited by your humble scribe:</p>\n<p>Angel pointed out that if you wish to calculate the result of rotating a bounding box representing a rectangle around the origin in the XY plane, you cannot simply rotate the min and max points, because the rotated max point may easily end up being 'smaller' in some coordinate than the rotated min.</p>\n<p>One way to work around that is to extract all four bounding box corners, rotate each of them and determine new min and max values from those.</p>\n<p>I implemented this little helper method to generate the four XY corner points of a bounding box, flattened onto its minimum Z elevation:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the four XYZ corners of the given </span>\n  <span class=\"gray\">///</span><span class=\"green\"> bounding box in the XY plane at the minimum </span>\n  <span class=\"gray\">///</span><span class=\"green\"> Z elevation in the order lower left, lower </span>\n  <span class=\"gray\">///</span><span class=\"green\"> right, upper right, upper left:</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">XYZ</span>[] GetCorners( <span class=\"teal\">BoundingBoxXYZ</span> b )\n  {\n    <span class=\"blue\">double</span> z = b.Min.Z;\n \n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[] {\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( b.Min.X, b.Min.Y, z ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( b.Max.X, b.Min.Y, z ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( b.Max.X, b.Max.Y, z ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( b.Min.X, b.Max.Y, z )\n    };\n  }\n</pre>\n<p>In order to be able to use the standard .NET Min and Max methods to extract the min and max points from the rotated corners, I need to use a flavour of the XYZ point and vector class which implements the IComparable interface.</p>\n<p>To obtain that, I implemented this little XyzComparable wrapper class:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span><span class=\"green\"> </span>\n  <span class=\"gray\">///</span><span class=\"green\"> XYZ wrapper class implementing IComparable. </span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span><span class=\"green\"> </span>\n  <span class=\"blue\">class</span> <span class=\"teal\">XyzComparable</span> : <span class=\"teal\">XYZ</span>, <span class=\"teal\">IComparable</span>&lt;<span class=\"teal\">XYZ</span>&gt;\n  {\n    <span class=\"blue\">public</span> XyzComparable( <span class=\"teal\">XYZ</span> a )\n      : <span class=\"blue\">base</span>( a.X, a.Y, a.Z )\n    {\n    }\n \n    <span class=\"blue\">int</span> <span class=\"teal\">IComparable</span>&lt;<span class=\"teal\">XYZ</span>&gt;.CompareTo( <span class=\"teal\">XYZ</span> a )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Util</span>.Compare( <span class=\"blue\">this</span>, a );\n    }\n  }\n</pre>\n<p>It makes use of my pre-existing XYZ Compare utility method:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">int</span> Compare( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">int</span> d = Compare( p.X, q.X );\n \n    <span class=\"blue\">if</span>( 0 == d )\n    {\n      d = Compare( p.Y, q.Y );\n \n      <span class=\"blue\">if</span>( 0 == d )\n      {\n        d = Compare( p.Z, q.Z );\n      }\n    }\n    <span class=\"blue\">return</span> d;\n  }\n</pre>\n<p>With all of that in place, the bounding box rotation ends up quite simple and readable:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a rotated bounding box around </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the origin in the XY plane.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> We cannot just rotate the min and max points, </span>\n  <span class=\"gray\">///</span><span class=\"green\"> because the rotated max point may easily end</span>\n  <span class=\"gray\">///</span><span class=\"green\"> up being 'smaller' in some coordinate than the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> min. To work around that, we extract all four </span>\n  <span class=\"gray\">///</span><span class=\"green\"> bounding box corners, rotate each of them and</span>\n  <span class=\"gray\">///</span><span class=\"green\"> determine new min and max values from those.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"teal\">BoundingBoxXYZ</span> RotateBoundingBox(\n    <span class=\"teal\">BoundingBoxXYZ</span> b,\n    <span class=\"teal\">Transform</span> t )\n  {\n    <span class=\"blue\">double</span> height = b.Max.Z - b.Min.Z;\n \n    <span class=\"green\">// Four corners: lower left, lower right, </span>\n    <span class=\"green\">// upper right, upper left:</span>\n \n    <span class=\"teal\">XYZ</span>[] corners = <span class=\"teal\">Util</span>.GetCorners( b );\n \n    <span class=\"teal\">XyzComparable</span>[] cornersTransformed\n      = corners.Select&lt;<span class=\"teal\">XYZ</span>, <span class=\"teal\">XyzComparable</span>&gt;(\n        p =&gt; <span class=\"blue\">new</span> <span class=\"teal\">XyzComparable</span>( t.OfPoint( p ) ) )\n          .ToArray();\n \n    b.Min = cornersTransformed.Min();\n    b.Max = cornersTransformed.Max();\n    b.Max += height * <span class=\"teal\">XYZ</span>.BasisZ;\n \n    <span class=\"blue\">return</span> b;\n  }\n</pre>\n<p>In order to test this new functionality, I dug up the old\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/element-bounding-box.html\">\nCmdBoundingBox</a> implementation\n\nfrom The Building Coder samples, from one of the very first posts back in the year 2008.</p>\n<p>It prompts you to select an element and used to just report its bounding box coordinates in a message box.</p>\n<p>I modified that to draw model lines for the box instead, again making use of the GetCorners method defined above to extract the four vertices required.\nThis also obviously requires changing the command's transaction mode from read-only to manual and adding a transaction, since the model line creation modifies the database.</p>\n<p>To test the rotation functionality, I call the RotateBoundingBox method with a 60 degree rotation transformation and print and display the result like this:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> app = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e = <span class=\"teal\">Util</span>.SelectSingleElement(\n    uidoc, <span class=\"maroon\">\"an element\"</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n  {\n    message = <span class=\"maroon\">\"No element selected\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"green\">// Trying to call this property returns the</span>\n  <span class=\"green\">// compile time error: Property, indexer, or</span>\n  <span class=\"green\">// event 'BoundingBox' is not supported by</span>\n  <span class=\"green\">// the language; try directly calling</span>\n  <span class=\"green\">// accessor method 'get_BoundingBox( View )'</span>\n \n  <span class=\"green\">//BoundingBoxXYZ b = e.BoundingBox[null];</span>\n \n  <span class=\"teal\">View</span> v = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">BoundingBoxXYZ</span> b = e.get_BoundingBox( v );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == b )\n  {\n    v = commandData.View;\n    b = e.get_BoundingBox( v );\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == b )\n  {\n    <span class=\"teal\">Util</span>.InfoMsg(\n      <span class=\"teal\">Util</span>.ElementDescription( e )\n      + <span class=\"maroon\">\" has no bounding box.\"</span> );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Draw Model Line Bounding Box Outline\"</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( b.Transform.IsIdentity,\n        <span class=\"maroon\">\"expected identity bounding box transform\"</span> );\n \n      <span class=\"blue\">string</span> in_view = ( <span class=\"blue\">null</span> == v )\n        ? <span class=\"maroon\">\"model space\"</span>\n        : <span class=\"maroon\">\"view \"</span> + v.Name;\n \n      <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Element bounding box of {0} in \"</span>\n        + <span class=\"maroon\">\"{1} extends from {2} to {3}.\"</span>,\n        <span class=\"teal\">Util</span>.ElementDescription( e ),\n        in_view,\n        <span class=\"teal\">Util</span>.PointString( b.Min ),\n        <span class=\"teal\">Util</span>.PointString( b.Max ) ) );\n \n      <span class=\"teal\">Creator</span> creator = <span class=\"blue\">new</span> <span class=\"teal\">Creator</span>( doc );\n \n      creator.DrawPolygon( <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;(\n        <span class=\"teal\">Util</span>.GetCorners( b ) ) );\n \n      <span class=\"teal\">Transform</span> rotation = <span class=\"teal\">Transform</span>.CreateRotation(\n        <span class=\"teal\">XYZ</span>.BasisZ, 60 * <span class=\"teal\">Math</span>.PI / 180.0 );\n \n      b = RotateBoundingBox( b, rotation );\n \n      <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Bounding box rotated by 60 degrees \"</span>\n        + <span class=\"maroon\">\"extends from {0} to {1}.\"</span>,\n        <span class=\"teal\">Util</span>.PointString( b.Min ),\n        <span class=\"teal\">Util</span>.PointString( b.Max ) ) );\n \n      creator.DrawPolygon( <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;(\n        <span class=\"teal\">Util</span>.GetCorners( b ) ) );\n \n      tx.Commit();\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>I tested that on a single wall element, with the following resulting model lines displaying the original and rotated bounding boxes:</p>\n<center>\n<img alt=\"Original and rotated bounding box\" src=\"img/bounding_box_rotated.png\" width=\"350\"/>\n</center>\n<p>See how skewed it gets?</p>\n<p><strong>Addemdum</strong> by Angel Velez:\nthis code assumes that the rotation is in XY only, hence the 'flattening' of the bounding box cube to 4 points.\nIf you wanted to make it applicable to a truly arbitrary rotation, you would take the 8 points of the cube – so factor Min.Z and Max.Z into it – then you wouldn’t have to do any 'add Z back in at the end' hacks.\nOf course, you also have to do an extra 4 transforms.</p>\n<p>That would add a significant amount of complecxity, however, and the above should cover the most common cases by far.</p>\n<a name=\"5\"></a>\n<h4>Adding a Marker at the Revit Project Origin</h4>\n<p>In order to understand properly and analyse the rotation results, we obviously need to know around which point it is taking place.</p>\n<p>It would be handy to add a marker at a specific point in the Revit model, in this case at the origin.</p>\n<p>One way to achieve this, was described by the Revit Clinic discussing\n\n<a href=\"http://revitclinic.typepad.com/my_weblog/2009/01/the-2-mile-barrier.html\">the two mile barrier</a>:\n\n\"If you want to be sure, the easiest method is to import a DWG file that contains a circle or X at AutoCAD's 0,0 and make sure to select the option origin-to-origin while importing the DWG file.  This will show you exactly where the Revit origin is located (centre of the circle or x).\nHere is an\n\n<a href=\"zip/revit-origin-dwg.dwg\">\nAutoCAD file with a symbol at the origin</a>.\"</p>\n<p>When importing the DWG into my model using Insert &gt; Import CAD, I left all the default setting values except the following:</p>\n<ul>\n<li>Import units: Custom factor: 0.5</li>\n<li>Positioning: Auto - Origin to Origin</li>\n</ul>\n<center>\n<img alt=\"Importing the origin marker DWG\" src=\"img/origin_marker_import.png\" width=\"600\"/>\n</center>\n<p>You can admire the resulting origin marker in the screen snapshot above, along with model lines displaying the positions of the original and rotated bounding box.</p>\n<a name=\"6\"></a>\n<h4>Download</h4>\n<p>The updated version of this command is available from\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples GitHub repository</a> and\n\nthe version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.106.0\">\nrelease 2014.0.106.0</a>.</p>\n<p>Have fun, and wish me a good quick sleep, since there are only a very few hours left before my next meeting...</p>\n</p>"
  },
  {
    "original_filename": "1070_au_day_1",
    "header_text": "DevLab and Bounding Box Rotation",
    "local_header_href": "#devlab-and-bounding-box-rotation",
    "chunk_text": "<h4>DevLab and Bounding Box Rotation</h4><p>DevLab was active, lots of questions addressed.</p><p>One little issue I was able to capture was this snippet of code to calculate the max and min of a rotated bounding box, initially inspired by Angel Velez, Revit developer, and heavily edited by your humble scribe:</p><p>Angel pointed out that if you wish to calculate the result of rotating a bounding box representing a rectangle around the origin in the XY plane, you cannot simply rotate the min and max points, because the rotated max point may easily end up being 'smaller' in some coordinate than the rotated min.</p><p>One way to work around that is to extract all four bounding box corners, rotate each of them and determine new min and max values from those.</p><p>I implemented this little helper method to generate the four XY corner points of a bounding box, flattened onto its minimum Z elevation:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the four XYZ corners of the given </span>\n  <span class=\"gray\">///</span><span class=\"green\"> bounding box in the XY plane at the minimum </span>\n  <span class=\"gray\">///</span><span class=\"green\"> Z elevation in the order lower left, lower </span>\n  <span class=\"gray\">///</span><span class=\"green\"> right, upper right, upper left:</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">XYZ</span>[] GetCorners( <span class=\"teal\">BoundingBoxXYZ</span> b )\n  {\n    <span class=\"blue\">double</span> z = b.Min.Z;\n \n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[] {\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( b.Min.X, b.Min.Y, z ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( b.Max.X, b.Min.Y, z ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( b.Max.X, b.Max.Y, z ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( b.Min.X, b.Max.Y, z )\n    };\n  }\n</pre><p>In order to be able to use the standard .NET Min and Max methods to extract the min and max points from the rotated corners, I need to use a flavour of the XYZ point and vector class which implements the IComparable interface.</p><p>To obtain that, I implemented this little XyzComparable wrapper class:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span><span class=\"green\"> </span>\n  <span class=\"gray\">///</span><span class=\"green\"> XYZ wrapper class implementing IComparable. </span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span><span class=\"green\"> </span>\n  <span class=\"blue\">class</span> <span class=\"teal\">XyzComparable</span> : <span class=\"teal\">XYZ</span>, <span class=\"teal\">IComparable</span>&lt;<span class=\"teal\">XYZ</span>&gt;\n  {\n    <span class=\"blue\">public</span> XyzComparable( <span class=\"teal\">XYZ</span> a )\n      : <span class=\"blue\">base</span>( a.X, a.Y, a.Z )\n    {\n    }\n \n    <span class=\"blue\">int</span> <span class=\"teal\">IComparable</span>&lt;<span class=\"teal\">XYZ</span>&gt;.CompareTo( <span class=\"teal\">XYZ</span> a )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Util</span>.Compare( <span class=\"blue\">this</span>, a );\n    }\n  }\n</pre><p>It makes use of my pre-existing XYZ Compare utility method:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">int</span> Compare( <span class=\"teal\">XYZ</span> p, <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">int</span> d = Compare( p.X, q.X );\n \n    <span class=\"blue\">if</span>( 0 == d )\n    {\n      d = Compare( p.Y, q.Y );\n \n      <span class=\"blue\">if</span>( 0 == d )\n      {\n        d = Compare( p.Z, q.Z );\n      }\n    }\n    <span class=\"blue\">return</span> d;\n  }\n</pre><p>With all of that in place, the bounding box rotation ends up quite simple and readable:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a rotated bounding box around </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the origin in the XY plane.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> We cannot just rotate the min and max points, </span>\n  <span class=\"gray\">///</span><span class=\"green\"> because the rotated max point may easily end</span>\n  <span class=\"gray\">///</span><span class=\"green\"> up being 'smaller' in some coordinate than the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> min. To work around that, we extract all four </span>\n  <span class=\"gray\">///</span><span class=\"green\"> bounding box corners, rotate each of them and</span>\n  <span class=\"gray\">///</span><span class=\"green\"> determine new min and max values from those.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"teal\">BoundingBoxXYZ</span> RotateBoundingBox(\n    <span class=\"teal\">BoundingBoxXYZ</span> b,\n    <span class=\"teal\">Transform</span> t )\n  {\n    <span class=\"blue\">double</span> height = b.Max.Z - b.Min.Z;\n \n    <span class=\"green\">// Four corners: lower left, lower right, </span>\n    <span class=\"green\">// upper right, upper left:</span>\n \n    <span class=\"teal\">XYZ</span>[] corners = <span class=\"teal\">Util</span>.GetCorners( b );\n \n    <span class=\"teal\">XyzComparable</span>[] cornersTransformed\n      = corners.Select&lt;<span class=\"teal\">XYZ</span>, <span class=\"teal\">XyzComparable</span>&gt;(\n        p =&gt; <span class=\"blue\">new</span> <span class=\"teal\">XyzComparable</span>( t.OfPoint( p ) ) )\n          .ToArray();\n \n    b.Min = cornersTransformed.Min();\n    b.Max = cornersTransformed.Max();\n    b.Max += height * <span class=\"teal\">XYZ</span>.BasisZ;\n \n    <span class=\"blue\">return</span> b;\n  }\n</pre><p>In order to test this new functionality, I dug up the old\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/element-bounding-box.html\">\nCmdBoundingBox</a> implementation\n\nfrom The Building Coder samples, from one of the very first posts back in the year 2008.</p><p>It prompts you to select an element and used to just report its bounding box coordinates in a message box.</p><p>I modified that to draw model lines for the box instead, again making use of the GetCorners method defined above to extract the four vertices required.\nThis also obviously requires changing the command's transaction mode from read-only to manual and adding a transaction, since the model line creation modifies the database.</p><p>To test the rotation functionality, I call the RotateBoundingBox method with a 60 degree rotation transformation and print and display the result like this:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> app = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e = <span class=\"teal\">Util</span>.SelectSingleElement(\n    uidoc, <span class=\"maroon\">\"an element\"</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n  {\n    message = <span class=\"maroon\">\"No element selected\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"green\">// Trying to call this property returns the</span>\n  <span class=\"green\">// compile time error: Property, indexer, or</span>\n  <span class=\"green\">// event 'BoundingBox' is not supported by</span>\n  <span class=\"green\">// the language; try directly calling</span>\n  <span class=\"green\">// accessor method 'get_BoundingBox( View )'</span>\n \n  <span class=\"green\">//BoundingBoxXYZ b = e.BoundingBox[null];</span>\n \n  <span class=\"teal\">View</span> v = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">BoundingBoxXYZ</span> b = e.get_BoundingBox( v );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == b )\n  {\n    v = commandData.View;\n    b = e.get_BoundingBox( v );\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == b )\n  {\n    <span class=\"teal\">Util</span>.InfoMsg(\n      <span class=\"teal\">Util</span>.ElementDescription( e )\n      + <span class=\"maroon\">\" has no bounding box.\"</span> );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Draw Model Line Bounding Box Outline\"</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( b.Transform.IsIdentity,\n        <span class=\"maroon\">\"expected identity bounding box transform\"</span> );\n \n      <span class=\"blue\">string</span> in_view = ( <span class=\"blue\">null</span> == v )\n        ? <span class=\"maroon\">\"model space\"</span>\n        : <span class=\"maroon\">\"view \"</span> + v.Name;\n \n      <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Element bounding box of {0} in \"</span>\n        + <span class=\"maroon\">\"{1} extends from {2} to {3}.\"</span>,\n        <span class=\"teal\">Util</span>.ElementDescription( e ),\n        in_view,\n        <span class=\"teal\">Util</span>.PointString( b.Min ),\n        <span class=\"teal\">Util</span>.PointString( b.Max ) ) );\n \n      <span class=\"teal\">Creator</span> creator = <span class=\"blue\">new</span> <span class=\"teal\">Creator</span>( doc );\n \n      creator.DrawPolygon( <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;(\n        <span class=\"teal\">Util</span>.GetCorners( b ) ) );\n \n      <span class=\"teal\">Transform</span> rotation = <span class=\"teal\">Transform</span>.CreateRotation(\n        <span class=\"teal\">XYZ</span>.BasisZ, 60 * <span class=\"teal\">Math</span>.PI / 180.0 );\n \n      b = RotateBoundingBox( b, rotation );\n \n      <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Bounding box rotated by 60 degrees \"</span>\n        + <span class=\"maroon\">\"extends from {0} to {1}.\"</span>,\n        <span class=\"teal\">Util</span>.PointString( b.Min ),\n        <span class=\"teal\">Util</span>.PointString( b.Max ) ) );\n \n      creator.DrawPolygon( <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;(\n        <span class=\"teal\">Util</span>.GetCorners( b ) ) );\n \n      tx.Commit();\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre><p>I tested that on a single wall element, with the following resulting model lines displaying the original and rotated bounding boxes:</p><center>\n<img alt=\"Original and rotated bounding box\" src=\"img/bounding_box_rotated.png\" width=\"350\"/>\n</center><p>See how skewed it gets?</p><p><strong>Addemdum</strong> by Angel Velez:\nthis code assumes that the rotation is in XY only, hence the 'flattening' of the bounding box cube to 4 points.\nIf you wanted to make it applicable to a truly arbitrary rotation, you would take the 8 points of the cube – so factor Min.Z and Max.Z into it – then you wouldn’t have to do any 'add Z back in at the end' hacks.\nOf course, you also have to do an extra 4 transforms.</p><p>That would add a significant amount of complecxity, however, and the above should cover the most common cases by far.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1070_au_day_1",
    "header_text": "Adding a Marker at the Revit Project Origin",
    "local_header_href": "#adding-a-marker-at-the-revit-project-origin",
    "chunk_text": "<h4>Adding a Marker at the Revit Project Origin</h4><p>In order to understand properly and analyse the rotation results, we obviously need to know around which point it is taking place.</p><p>It would be handy to add a marker at a specific point in the Revit model, in this case at the origin.</p><p>One way to achieve this, was described by the Revit Clinic discussing\n\n<a href=\"http://revitclinic.typepad.com/my_weblog/2009/01/the-2-mile-barrier.html\">the two mile barrier</a>:\n\n\"If you want to be sure, the easiest method is to import a DWG file that contains a circle or X at AutoCAD's 0,0 and make sure to select the option origin-to-origin while importing the DWG file.  This will show you exactly where the Revit origin is located (centre of the circle or x).\nHere is an\n\n<a href=\"zip/revit-origin-dwg.dwg\">\nAutoCAD file with a symbol at the origin</a>.\"</p><p>When importing the DWG into my model using Insert &gt; Import CAD, I left all the default setting values except the following:</p><ul>\n<li>Import units: Custom factor: 0.5</li>\n<li>Positioning: Auto - Origin to Origin</li>\n</ul><center>\n<img alt=\"Importing the origin marker DWG\" src=\"img/origin_marker_import.png\" width=\"600\"/>\n</center><p>You can admire the resulting origin marker in the screen snapshot above, along with model lines displaying the positions of the original and rotated bounding box.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1070_au_day_1",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>The updated version of this command is available from\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples GitHub repository</a> and\n\nthe version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.106.0\">\nrelease 2014.0.106.0</a>.</p><p>Have fun, and wish me a good quick sleep, since there are only a very few hours left before my next meeting...</p>"
  }
]