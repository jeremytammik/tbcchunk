[
  {
    "original_filename": "0814_obj_on_android",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0814_obj_on_android",
    "header_text": "Validate Roof Type and View OBJ on Android",
    "local_header_href": "#validate-roof-type-and-view-obj-on-android",
    "chunk_text": "<h3>Validate Roof Type and View OBJ on Android</h3><p>I spent some time exploring how to view the output generated by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-transparency-support.html\">\nOBJ exporter</a> on an Android tablet.\n\n<!--\n\nchecking out have had this Android tablet lying around for quite a while now, and so far still find it less handy than my laptop.\n\n<p>On the other hand, I do see other people doing powerful things with these devices, and a friend of mine replaced his computer completely and nowadays uses nothing but his iPhone and iPad, with an external wireless keyboard attached to it. \nHe wrote an entire book using that system, in fact.\n\n<p>The most useful application for me so far is the star map, and I have learned a few new constellations and star names in the past weeks with its help.\n\n<p>Anyway, the main reason I implemented the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-transparency-support.html\">\nOBJ exporter</a> was\n\nto show how it can be viewed on a tablet device.\n\n-->\n<a name=\"2\"></a>\n<h4>Viewing an OBJ Model on Android</h4>\n<p>That proved to be easy.\nI installed the \n\n<a href=\"http://www.kiwiviewer.org\">KiwiViewer</a>\n\nopen-source visualization app, which supports OBJ, and used \n\n<a href=\"https://www.dropbox.com\">Dropbox</a>\n\nto upload the OBJ export of my Revit model to the Internet, from where I could access it on the tablet from anywhere.\nAnywhere with a wifi Internet link, that is.\n\n<p>It works fine as far as the pure geometry defined in the OBJ file is concerned.\nUnfortunately, the separate MTL material file was ignored, eliminating the colour and transparency information.\n\n<p>The viewer displays other models with colour and other rendering information perfectly well, so I'll explore how those are defined appropriately next.\n\n<p>Alternatively, I'll have to implement my own viewer. \nThat may be the easiest route to go in order to achieve something useful, since that will soon require identifying the original Revit elements in the viewer, e.g. to communicate information from the tablet device back to the original Revit model.\nFor example, I might want to pick a building element and add a comment to it on the tablet, then have that information integrated back into the original document.\nI hope to look at something like that soon.\n\n\n<a name=\"3\"></a>\n<h4>Validate the Roof Type Compound Structure for the Little House</h4>\n<p>I also happened to run the 'little house' command provided by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/xtra-adn-revit-2013-api-training-labs.html\">\nXtra ADN training labs</a> again \n\nand was a bit surprised that the roof did not appear as expected.\n\n<p>Exploring the resulting model in more depth, I notice that the roof was in fact being created successfully, but was not visible in the graphic view.\n\n<p>I tracked it down to the roof type being used.\nThe sample just picks the first roof type encountered, which happened to be 'sloped glazing'.\nThis type has zero entries in its compound structure, or even worse, no compound structure defined at all.\n\n<p>After adding a check for a valid compound structure to the type selection code, the roof appeared again:</p>\n<center>\n<img alt=\"Little house 3D view\" src=\"img/little_house_3d_view_2013.png\"/>\n</center>\n<p>Here is the plan view as well, although that does not show the roof, of course:</p>\n<center>\n<img alt=\"Little house plan view\" src=\"img/little_house_plan_view_2013.png\"/>\n</center>\n<p>This is the code checking for a valid compound structure in the list of roof types returned by the filtered element collector, then creating the roof and adding the slope to it:\n\n<pre class=\"code\">\n  <span class=\"green\">// Add a floor, a roof and the roof slope:</span>\n \n  <span class=\"blue\">bool</span> structural = <span class=\"blue\">false</span>;\n  <span class=\"teal\">Floor</span> floor = createDoc.NewFloor( \n    profile, structural );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; roofTypes \n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;( \n      <span class=\"teal\">LabUtils</span>.GetElementsOfType(\n        doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">RoofType</span> ), \n        <span class=\"teal\">BuiltInCategory</span>.OST_Roofs ) );\n \n  <span class=\"teal\">Debug</span>.Assert( 0 &lt; roofTypes.Count, \n    <span class=\"maroon\">\"expected at least one roof type\"</span>\n    + <span class=\"maroon\">\" to be loaded into project\"</span> );\n \n  <span class=\"green\">// Ensure that we get a valid roof type. </span>\n  <span class=\"green\">// In Revit 2013, the first one encountered </span>\n  <span class=\"green\">// is sloped glazing with zero entries in</span>\n  <span class=\"green\">// its compound layers; actually, the entire</span>\n  <span class=\"green\">// compound structure is null:</span>\n \n  <span class=\"teal\">RoofType</span> roofType = roofTypes\n    .Cast&lt;<span class=\"teal\">RoofType</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">RoofType</span>&gt;(\n      t =&gt; <span class=\"blue\">null</span> != t.GetCompoundStructure() );\n \n  <span class=\"teal\">ModelCurveArray</span> modelCurves \n    = <span class=\"blue\">new</span> <span class=\"teal\">ModelCurveArray</span>();\n \n  <span class=\"teal\">FootPrintRoof</span> roof \n    = createDoc.NewFootPrintRoof( profile, \n      levelTop, roofType, <span class=\"blue\">out</span> modelCurves );\n \n  <span class=\"green\">// Regenerate the model after roof creation, </span>\n  <span class=\"green\">// otherwise the calls to set_DefinesSlope and </span>\n  <span class=\"green\">// set_SlopeAngle throwing the exception \"Unable</span>\n  <span class=\"green\">// to access curves from the roof sketch.\"</span>\n \n  doc.Regenerate();\n \n  <span class=\"green\">// The argument to set_SlopeAngle is NOT an </span>\n  <span class=\"green\">// angle, it is really a slope, i.e. relation </span>\n  <span class=\"green\">// of height to distance, e.g. 0.5 = 6\" / 12\", </span>\n  <span class=\"green\">// 0.75  = 9\" / 12\", etc.</span>\n \n  <span class=\"blue\">double</span> slope = 0.3;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ModelCurve</span> curve <span class=\"blue\">in</span> modelCurves )\n  {\n    roof.set_DefinesSlope( curve, <span class=\"blue\">true</span> );\n    roof.set_SlopeAngle( curve, slope );\n  }\n</pre>\n<p>Here is \n\n<a href=\"zip/adn_labs_2013_2012-08-27.zip\">adn_labs_2013_2012-08-27.zip</a> \n\ncontaining the complete source code, Visual Studio solution, and RvtSamples include file to load my version of the ADN Revit API training labs including the additional commands defined by the Xtra projects, among them the little house creation lab described above.\n\n\n\n<a name=\"4\"></a>\n<h4>Updated ADN Revit API Training Material</h4>\n<p>This ties in very nicely with another little item: as\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/updated-revit-api-2013-training-labs-.html\">\nMikako just pointed out</a> on \n\n<!-- C:\\a\\lib\\revit\\2013\\adn\\zip\\Revit2013APITraining.zip -->\n\nthe AEC DevBlog, the Revit API 2013 training labs material on the \n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Center</a> \n\nin the public Autodesk Developer Network site has been updated and is available for download in the 'Samples and Documentation' section.\n\nHere is also a \n\n<a href=\"http://images.autodesk.com/adsk/files/Revit2013APITraining.zip\">\ndirect link</a> to it.\n\n<p>As Mikako points out, this is the material that we use for classroom trainings. \nIf you know the basic of .NET programming and are interested in learning the Revit API, it also provides a good starting point for self-learning, since both source code and documents describing the steps to perform are included.\n\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0814_obj_on_android",
    "header_text": "Viewing an OBJ Model on Android",
    "local_header_href": "#viewing-an-obj-model-on-android",
    "chunk_text": "<h4>Viewing an OBJ Model on Android</h4><p>That proved to be easy.\nI installed the \n\n<a href=\"http://www.kiwiviewer.org\">KiwiViewer</a>\n\nopen-source visualization app, which supports OBJ, and used \n\n<a href=\"https://www.dropbox.com\">Dropbox</a>\n\nto upload the OBJ export of my Revit model to the Internet, from where I could access it on the tablet from anywhere.\nAnywhere with a wifi Internet link, that is.\n\n<p>It works fine as far as the pure geometry defined in the OBJ file is concerned.\nUnfortunately, the separate MTL material file was ignored, eliminating the colour and transparency information.\n\n<p>The viewer displays other models with colour and other rendering information perfectly well, so I'll explore how those are defined appropriately next.\n\n<p>Alternatively, I'll have to implement my own viewer. \nThat may be the easiest route to go in order to achieve something useful, since that will soon require identifying the original Revit elements in the viewer, e.g. to communicate information from the tablet device back to the original Revit model.\nFor example, I might want to pick a building element and add a comment to it on the tablet, then have that information integrated back into the original document.\nI hope to look at something like that soon.\n\n\n<a name=\"3\"></a>\n<h4>Validate the Roof Type Compound Structure for the Little House</h4>\n<p>I also happened to run the 'little house' command provided by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/xtra-adn-revit-2013-api-training-labs.html\">\nXtra ADN training labs</a> again \n\nand was a bit surprised that the roof did not appear as expected.\n\n<p>Exploring the resulting model in more depth, I notice that the roof was in fact being created successfully, but was not visible in the graphic view.\n\n<p>I tracked it down to the roof type being used.\nThe sample just picks the first roof type encountered, which happened to be 'sloped glazing'.\nThis type has zero entries in its compound structure, or even worse, no compound structure defined at all.\n\n<p>After adding a check for a valid compound structure to the type selection code, the roof appeared again:</p>\n<center>\n<img alt=\"Little house 3D view\" src=\"img/little_house_3d_view_2013.png\"/>\n</center>\n<p>Here is the plan view as well, although that does not show the roof, of course:</p>\n<center>\n<img alt=\"Little house plan view\" src=\"img/little_house_plan_view_2013.png\"/>\n</center>\n<p>This is the code checking for a valid compound structure in the list of roof types returned by the filtered element collector, then creating the roof and adding the slope to it:\n\n<pre class=\"code\">\n  <span class=\"green\">// Add a floor, a roof and the roof slope:</span>\n \n  <span class=\"blue\">bool</span> structural = <span class=\"blue\">false</span>;\n  <span class=\"teal\">Floor</span> floor = createDoc.NewFloor( \n    profile, structural );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; roofTypes \n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;( \n      <span class=\"teal\">LabUtils</span>.GetElementsOfType(\n        doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">RoofType</span> ), \n        <span class=\"teal\">BuiltInCategory</span>.OST_Roofs ) );\n \n  <span class=\"teal\">Debug</span>.Assert( 0 &lt; roofTypes.Count, \n    <span class=\"maroon\">\"expected at least one roof type\"</span>\n    + <span class=\"maroon\">\" to be loaded into project\"</span> );\n \n  <span class=\"green\">// Ensure that we get a valid roof type. </span>\n  <span class=\"green\">// In Revit 2013, the first one encountered </span>\n  <span class=\"green\">// is sloped glazing with zero entries in</span>\n  <span class=\"green\">// its compound layers; actually, the entire</span>\n  <span class=\"green\">// compound structure is null:</span>\n \n  <span class=\"teal\">RoofType</span> roofType = roofTypes\n    .Cast&lt;<span class=\"teal\">RoofType</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">RoofType</span>&gt;(\n      t =&gt; <span class=\"blue\">null</span> != t.GetCompoundStructure() );\n \n  <span class=\"teal\">ModelCurveArray</span> modelCurves \n    = <span class=\"blue\">new</span> <span class=\"teal\">ModelCurveArray</span>();\n \n  <span class=\"teal\">FootPrintRoof</span> roof \n    = createDoc.NewFootPrintRoof( profile, \n      levelTop, roofType, <span class=\"blue\">out</span> modelCurves );\n \n  <span class=\"green\">// Regenerate the model after roof creation, </span>\n  <span class=\"green\">// otherwise the calls to set_DefinesSlope and </span>\n  <span class=\"green\">// set_SlopeAngle throwing the exception \"Unable</span>\n  <span class=\"green\">// to access curves from the roof sketch.\"</span>\n \n  doc.Regenerate();\n \n  <span class=\"green\">// The argument to set_SlopeAngle is NOT an </span>\n  <span class=\"green\">// angle, it is really a slope, i.e. relation </span>\n  <span class=\"green\">// of height to distance, e.g. 0.5 = 6\" / 12\", </span>\n  <span class=\"green\">// 0.75  = 9\" / 12\", etc.</span>\n \n  <span class=\"blue\">double</span> slope = 0.3;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ModelCurve</span> curve <span class=\"blue\">in</span> modelCurves )\n  {\n    roof.set_DefinesSlope( curve, <span class=\"blue\">true</span> );\n    roof.set_SlopeAngle( curve, slope );\n  }\n</pre>\n<p>Here is \n\n<a href=\"zip/adn_labs_2013_2012-08-27.zip\">adn_labs_2013_2012-08-27.zip</a> \n\ncontaining the complete source code, Visual Studio solution, and RvtSamples include file to load my version of the ADN Revit API training labs including the additional commands defined by the Xtra projects, among them the little house creation lab described above.\n\n\n\n<a name=\"4\"></a>\n<h4>Updated ADN Revit API Training Material</h4>\n<p>This ties in very nicely with another little item: as\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/updated-revit-api-2013-training-labs-.html\">\nMikako just pointed out</a> on \n\n<!-- C:\\a\\lib\\revit\\2013\\adn\\zip\\Revit2013APITraining.zip -->\n\nthe AEC DevBlog, the Revit API 2013 training labs material on the \n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Center</a> \n\nin the public Autodesk Developer Network site has been updated and is available for download in the 'Samples and Documentation' section.\n\nHere is also a \n\n<a href=\"http://images.autodesk.com/adsk/files/Revit2013APITraining.zip\">\ndirect link</a> to it.\n\n<p>As Mikako points out, this is the material that we use for classroom trainings. \nIf you know the basic of .NET programming and are interested in learning the Revit API, it also provides a good starting point for self-learning, since both source code and documents describing the steps to perform are included.\n\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0814_obj_on_android",
    "header_text": "Validate the Roof Type Compound Structure for the Little House",
    "local_header_href": "#validate-the-roof-type-compound-structure-for-the-little-house",
    "chunk_text": "<h4>Validate the Roof Type Compound Structure for the Little House</h4><p>I also happened to run the 'little house' command provided by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/xtra-adn-revit-2013-api-training-labs.html\">\nXtra ADN training labs</a> again \n\nand was a bit surprised that the roof did not appear as expected.\n\n<p>Exploring the resulting model in more depth, I notice that the roof was in fact being created successfully, but was not visible in the graphic view.\n\n<p>I tracked it down to the roof type being used.\nThe sample just picks the first roof type encountered, which happened to be 'sloped glazing'.\nThis type has zero entries in its compound structure, or even worse, no compound structure defined at all.\n\n<p>After adding a check for a valid compound structure to the type selection code, the roof appeared again:</p>\n<center>\n<img alt=\"Little house 3D view\" src=\"img/little_house_3d_view_2013.png\"/>\n</center>\n<p>Here is the plan view as well, although that does not show the roof, of course:</p>\n<center>\n<img alt=\"Little house plan view\" src=\"img/little_house_plan_view_2013.png\"/>\n</center>\n<p>This is the code checking for a valid compound structure in the list of roof types returned by the filtered element collector, then creating the roof and adding the slope to it:\n\n<pre class=\"code\">\n  <span class=\"green\">// Add a floor, a roof and the roof slope:</span>\n \n  <span class=\"blue\">bool</span> structural = <span class=\"blue\">false</span>;\n  <span class=\"teal\">Floor</span> floor = createDoc.NewFloor( \n    profile, structural );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; roofTypes \n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;( \n      <span class=\"teal\">LabUtils</span>.GetElementsOfType(\n        doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">RoofType</span> ), \n        <span class=\"teal\">BuiltInCategory</span>.OST_Roofs ) );\n \n  <span class=\"teal\">Debug</span>.Assert( 0 &lt; roofTypes.Count, \n    <span class=\"maroon\">\"expected at least one roof type\"</span>\n    + <span class=\"maroon\">\" to be loaded into project\"</span> );\n \n  <span class=\"green\">// Ensure that we get a valid roof type. </span>\n  <span class=\"green\">// In Revit 2013, the first one encountered </span>\n  <span class=\"green\">// is sloped glazing with zero entries in</span>\n  <span class=\"green\">// its compound layers; actually, the entire</span>\n  <span class=\"green\">// compound structure is null:</span>\n \n  <span class=\"teal\">RoofType</span> roofType = roofTypes\n    .Cast&lt;<span class=\"teal\">RoofType</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">RoofType</span>&gt;(\n      t =&gt; <span class=\"blue\">null</span> != t.GetCompoundStructure() );\n \n  <span class=\"teal\">ModelCurveArray</span> modelCurves \n    = <span class=\"blue\">new</span> <span class=\"teal\">ModelCurveArray</span>();\n \n  <span class=\"teal\">FootPrintRoof</span> roof \n    = createDoc.NewFootPrintRoof( profile, \n      levelTop, roofType, <span class=\"blue\">out</span> modelCurves );\n \n  <span class=\"green\">// Regenerate the model after roof creation, </span>\n  <span class=\"green\">// otherwise the calls to set_DefinesSlope and </span>\n  <span class=\"green\">// set_SlopeAngle throwing the exception \"Unable</span>\n  <span class=\"green\">// to access curves from the roof sketch.\"</span>\n \n  doc.Regenerate();\n \n  <span class=\"green\">// The argument to set_SlopeAngle is NOT an </span>\n  <span class=\"green\">// angle, it is really a slope, i.e. relation </span>\n  <span class=\"green\">// of height to distance, e.g. 0.5 = 6\" / 12\", </span>\n  <span class=\"green\">// 0.75  = 9\" / 12\", etc.</span>\n \n  <span class=\"blue\">double</span> slope = 0.3;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ModelCurve</span> curve <span class=\"blue\">in</span> modelCurves )\n  {\n    roof.set_DefinesSlope( curve, <span class=\"blue\">true</span> );\n    roof.set_SlopeAngle( curve, slope );\n  }\n</pre>\n<p>Here is \n\n<a href=\"zip/adn_labs_2013_2012-08-27.zip\">adn_labs_2013_2012-08-27.zip</a> \n\ncontaining the complete source code, Visual Studio solution, and RvtSamples include file to load my version of the ADN Revit API training labs including the additional commands defined by the Xtra projects, among them the little house creation lab described above.\n\n\n\n<a name=\"4\"></a>\n<h4>Updated ADN Revit API Training Material</h4>\n<p>This ties in very nicely with another little item: as\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/updated-revit-api-2013-training-labs-.html\">\nMikako just pointed out</a> on \n\n<!-- C:\\a\\lib\\revit\\2013\\adn\\zip\\Revit2013APITraining.zip -->\n\nthe AEC DevBlog, the Revit API 2013 training labs material on the \n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Center</a> \n\nin the public Autodesk Developer Network site has been updated and is available for download in the 'Samples and Documentation' section.\n\nHere is also a \n\n<a href=\"http://images.autodesk.com/adsk/files/Revit2013APITraining.zip\">\ndirect link</a> to it.\n\n<p>As Mikako points out, this is the material that we use for classroom trainings. \nIf you know the basic of .NET programming and are interested in learning the Revit API, it also provides a good starting point for self-learning, since both source code and documents describing the steps to perform are included.\n\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0814_obj_on_android",
    "header_text": "Updated ADN Revit API Training Material",
    "local_header_href": "#updated-adn-revit-api-training-material",
    "chunk_text": "<h4>Updated ADN Revit API Training Material</h4><p>This ties in very nicely with another little item: as\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/updated-revit-api-2013-training-labs-.html\">\nMikako just pointed out</a> on \n\n<!-- C:\\a\\lib\\revit\\2013\\adn\\zip\\Revit2013APITraining.zip -->\n\nthe AEC DevBlog, the Revit API 2013 training labs material on the \n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Center</a> \n\nin the public Autodesk Developer Network site has been updated and is available for download in the 'Samples and Documentation' section.\n\nHere is also a \n\n<a href=\"http://images.autodesk.com/adsk/files/Revit2013APITraining.zip\">\ndirect link</a> to it.\n\n<p>As Mikako points out, this is the material that we use for classroom trainings. \nIf you know the basic of .NET programming and are interested in learning the Revit API, it also provides a good starting point for self-learning, since both source code and documents describing the steps to perform are included.\n\n</p></p>"
  }
]