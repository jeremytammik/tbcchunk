[
  {
    "original_filename": "0172_newly_created_elements",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0172_newly_created_elements",
    "header_text": "Retrieving Newly Created Elements",
    "local_header_href": "#retrieving-newly-created-elements",
    "chunk_text": "<h3>Retrieving Newly Created Elements</h3><p>The day before yesterday, I demonstrated the use of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/mirror-an-element.html\">\nMirror method</a>.\n\nHenrik Bengtsson of \n\n<a href=\"http://www.lindab.se\">\nLindab</a>\n\nimmediately came back with a question on this.\n\nFunnily enough, the reason I quickly posted the article the day before yesterday was because someone completely different asked the exact same two questions as Henrik in the exact same sequence.\nThere seems to be some kind of \n\n<a href=\"http://en.wikipedia.org/wiki/Morphic_field#Morphogenetic_field\">\nmorphogenetic resonance</a>\n\ngoing on among Revit developers.\nAnyway, here is Henrik's question:</p><p><strong>Question:</strong>\nThe mirror command works all right according to the description.\nI now face another issue that I had not thought of before. \nHow can I get a reference to the newly created mirrored objects?\nThose are actually the objects that I want to continue working with.</p><p><strong>Answer:</strong>\nBecause this question was already asked once this morning, I had some time to meditate deeply on how to retrieve the newly created elements generated by the mirroring operation. \nMy first idea was to grab them by parsing the tail of the journal file, but unfortunately they are not listed there. \nMy second idea works, however:</p><ul>\n<li>Ask the document for all its elements before the mirroring operation and remember the total number <i><strong>n</strong></i>.\n<li>Call the Mirror method, generating a number of new elements.\n<li>Ask the document for all its elements again, and retrieve the ones whose index exceeds <i><strong>n</strong></i>.\n</li></li></li></ul><p>I make use of two helper methods for this:</p><ul>\n<li>GetElementCount determines the total number of document elements before the mirroring operation.</li>\n<li>GetElementsAfter returns a list of all document elements whose index exceeds a given number.</li>\n</ul><p>Here is the implementation of these two methods:</p><pre class=\"code\">\n<span class=\"blue\">int</span> GetElementCount( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"blue\">int</span> count = 0;\n  <span class=\"teal\">ElementIterator</span> it = doc.Elements;\n  <span class=\"blue\">while</span>( it.MoveNext() ) \n  { \n    ++count; \n  }\n  <span class=\"blue\">return</span> count;\n}\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; GetElementsAfter( <span class=\"blue\">int</span> n, <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; a = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;( n );\n  <span class=\"teal\">ElementIterator</span> it = doc.Elements;\n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">while</span>( it.MoveNext() ) \n  {\n    ++i;\n \n    <span class=\"blue\">if</span>( n &lt; i )\n    {\n      a.Add( it.Current <span class=\"blue\">as</span> <span class=\"teal\">Element</span> );\n    }\n  }\n  <span class=\"blue\">return</span> a;\n}\n</pre><p>Here is the code for the new external command implementing this.\nIt is a simple extension of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/mirror-an-element.html\">\nmirroring command CmdMirror</a>\n\npresented on Wednesday:</p><pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n<span class=\"teal\">ElementSet</span> els = doc.Selection.Elements;\n \n<span class=\"teal\">Line</span> line = app.Create.NewLine( \n  <span class=\"teal\">XYZ</span>.Zero, <span class=\"teal\">XYZ</span>.BasisX, <span class=\"blue\">true</span> );\n \n<span class=\"blue\">int</span> n = GetElementCount( doc );\n \ndoc.Mirror( els, line );\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; a = GetElementsAfter( n, doc );\n \n<span class=\"blue\">string</span> s = <span class=\"maroon\">\"The following elements were mirrored:\\r\\n\"</span>;\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> a )\n{\n  s += <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"\\r\\n  {0}\"</span>,\n    <span class=\"teal\">Util</span>.ElementDescription( e ) );\n}\n<span class=\"teal\">Util</span>.InfoMsg( s );\n \n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n</pre><p>Here is\n\n<a href=\"zip/bc11041.zip\">\nversion 1.1.0.41</a>\n\nof the complete Visual Studio solution including the mirroring command CmdMirror and the new command CmdMirrorListAdded.</p><p><strong>Disclaimer:</strong>\nPlease note that there is nothing in the Revit API documentation stating that the iterator returned by doc.Elements will traverse the elements in the order they were added to the database.\nThat happens to be the case today and has been so in the past.\nThis behaviour may change without notice in the future.\nSince the GetElementCount and GetElementsAfter methods depend on this behaviour, they will stop working if it changes.\n</p>"
  }
]