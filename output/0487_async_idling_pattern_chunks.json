[
  {
    "original_filename": "0487_async_idling_pattern",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0487_async_idling_pattern",
    "header_text": "Pattern for Semi-Asynchronous Idling API Access",
    "local_header_href": "#pattern-for-semi-asynchronous-idling-api-access",
    "chunk_text": "<h3>Pattern for Semi-Asynchronous Idling API Access</h3><p>Here is another wonderful contribution from Daren Thomas: \n\n<a href=\"http://darenatwork.blogspot.com/2010/11/pattern-for-asynchronously-updating.html\">\nA Pattern for Asynchronously Updating Revit Documents</a>.\n\n<p>As an attentive reader of this blog, you will certainly remember one of my favourite and most powerful recent projects, the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/modeless-loose-connectors.html\">\nmodeless loose connector navigator</a>.\n\nIt retrieves and displays a list of unconnected MEP connectors in a modeless dialogue box.\nBeing modeless, the dialogue is not within the context of a Revit external command Execute method, nor any other Revit API call-back, and thus has no access to the Revit API, which does not permit \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/asynchronous-api-calls-and-idling.html\">\nasynchronous access</a>.\n\nHappily, the Idling event provides a workaround for that.\n\n<p>The modeless loose connector navigator demonstrates a solution for handling a very specialised need, accessing the Revit API semi-asynchronously to highlight the elements with loose connectors.\n\n<p>Daren's post generalises this solution, allowing a modeless dialogue to queue up a whole collection of actions to be taken, which can then be picked up and processed by the Idling event handler the next time it becomes active.\nA wonderful generic solution, including neat features such as:\n\n<ul>\n<li>Use of the generic Queue template class.\n<li>Use of the generic Action delegate, cf. <a href=\"http://geekswithblogs.net/BlackRabbitCoder/archive/2010/09/09/c.net-five-final-little-wonders-that-make-code-better-3.aspx\">5. Generic Delegates</a>.\n<li>Locking support to protect against simultaneous access to the queue from the modeless dialogue and the Idling event.\n<li>Use of .NET =&gt; lambda statements to execute the queued-up tasks.\n</li></li></li></li></ul>\n<p>A truly beautiful job, Daren. \nThank you!\n</p></p></p></p></p>"
  }
]