[
  {
    "original_filename": "0219_mep_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0219_mep_api",
    "header_text": "The Revit MEP API",
    "local_header_href": "#the-revit-mep-api",
    "chunk_text": "<h3>The Revit MEP API</h3><p>By the time you read this, I will be away happily on a one-week vacation in Italy.\nI hope you and the blog manage yourselves and behave well until I return.\nI scheduled some items to be published in my absence, though.\n\n<p>In previous posts, we already had a look at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/revit-mep-api.html\">\nnew MEP-specific API features in Revit 2010</a> and\n\nthe classes involved in defining and representing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/mep-connectors.html\">\nMEP connectors</a> in\n\nparticular.\n\nOn August 27<sup>th</sup> 2009, we held the first\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/revit-mep-api-webcast.html\">\nwebcast</a> dedicated\n\nentirely to Revit MEP programming.\nThis post provides an abbreviated overview of the complete Revit MEP and the webcast contents with links to available related materials, including the following topics:\n\n<ul>\n<li><a href=\"#1\">The Revit MEP API\n<li><a href=\"#2\">MEP model analysis\n<li><a href=\"#3\">Hierarchical systems and connectors\n<li><a href=\"#4\">Electrical systems\n<li><a href=\"#5\">HVAC and plumbing systems\n<li><a href=\"#6\">Sample applications\n<li><a href=\"#7\">Materials and further reading\n</a></li></a></li></a></li></a></li></a></li></a></li></a></li></ul>\n<a name=\"1\"></a>\n<h4>The Revit MEP API</h4>\n<p>Revit MEP is a flavour of Revit for work in the mechanical, electrical and plumbing domains. HVAC, i.e. heating, ventilation and air conditioning, is considered part of the mechanical domain. Efficient work in these areas requires strong model analysis tools in addition to read and write access to the components and data used to model the electrical, HVAC and piping systems in Revit MEP. Some of the required MEP specific functionality includes access to the MEP project information, Green Building XML, spaces and zones, the electrical, duct and pipe systems, their components, properties and parameters, methods for element creation and modification, and system traversal and analysis.\n<p>Most of the Revit API is generic and applies to all three flavours of the Revit product, i.e. Architecture, MEP and Structure. All three flavours of Revit also include the same .NET assembly named RevitAPI.dll providing API access to third-party applications. However, some specific additional features exist for each of the flavours as well, for instance some room-related functionality in Revit Architecture and access to the analytical and MEP models in Revit Structure and MEP respectively. If API functionality not supported by the currently running flavour is accessed, the call will simply do nothing or return null.\n<p>In Revit 2008, no MEP-specific functionality was provided by the API. It was still possible to analyse and manipulate an HVAC system using the generic Revit API methods, for instance by accessing ducts as generic Revit elements and reading and writing their properties using the generic parameter access. We used this to create a sample application for HVAC air terminal analysis and sizing, presented at Autodesk University 2007. Revit 2009 introduced the first MEP-specific API support, including classes for electrical and mechanical equipment, lighting device and fixture, connector, electrical system, space and zone, the MEP model property on family instances, and the ability to create and modify MEP elements. In Revit 2010, the MEP-specific API was a focal point of the API development and greatly enhanced, especially the support for HVAC and piping systems.\n\n<a name=\"2\"></a>\n<h4>MEP Model Analysis</h4>\n<p>Access to the MEP Project Info is provided through the gbXMLParamElem element and its properties, which is accessed through the ProjectInfo.gbXMLSettings property. The available data includes PostalCode, ProjectLocation, BuildingService, BuildingConstruction, GroundPlane, ShadingSurfaces, and ProjectPhase.\n<p>Green Building XML or gbXML export is initiated by a call to the Document.Export method:\n\n<pre>\nDocument.Export( string folder, string name, GBXMLExportOptions );\n</pre>\n<p>Using spaces instead of rooms, and zones to group spaces, enables a subdivision of the architectural rooms into subspaces required for MEP analysis. The AddSpaceAndZone SDK sample demonstrates the programmatic creation and management of spaces and zones. The FamilyInstance class already had a Room property to determine in which room an instance is located, and now an analogous Space property has been added for MEP usage.\n<p>Several model inspection utility methods added in Revit 2010 are especially useful in the MEP domain. One group helps determine the relationships between and contents of volumes, rooms and spaces:\n\n<ul>\n<li>Room.IsPointInRoom determines if a 3D point is in the volume of a room.\n<li>Space.IsPointInSpace determines if a 3D point is in the volume of a space.\n<li>GetRoomAtPoint and GetSpaceAtPoint return the room or space containing a given 3D point.\n</li></li></li></ul>\n<p>The new ray intersection method can be used to determine proximity of elements:\n\n<ul>\n<li>FindReferencesByDirection returns an array of elements, faces, and references found when moving through the model from a specified point in a specified direction.\n</li></ul>\n<p>One use of FindReferencesByDirection is demonstrated by the RayTraceBounce SDK sample.\n\n<a name=\"3\"></a>\n<h4>Hierarchical Systems and Connectors</h4>\n<p>Many of the building blocks of an MEP system are represented in Revit by family instances. The generic family instance definition in the Revit API has been enhanced to provide access to additional MEP-specific properties and data, and provide classes to represent systems and connections between system components.\n<p>The objects dealt with in the MEP domain are organised into hierarchical structures. The top level node in these structures is an MEP system, represented by the MEPSystem class. This is the base class for the derived classes ElectricalSystem, MechanicalSystem and PipingSystem. The system has properties to access the base equipment or panel, the terminal elements, and the connector manager. The derived classes have many additional domain specific properties.\n<p>The Revit 2009 API introduced the MEPModel and Connector classes as fundamentals for programmatically representing and accessing the MEP model. It is accessed through the FamilyInstance.MEPModel property, and one of its main purposes is to provide access to the connector manager.\n<p>We have logical and physical connections between MEP components. Logical connections are used in the electrical domain, where wires and cables are not necessarily modelled individually. Physical connections are used in the mechanical and plumbing domains, where the connectors define and transmit sizing and flow information from one part to the next.\n<p>A connector is part of an MEP element such as a duct, pipe, fitting, or piece of equipment. The Connector class is used to represent connectors in the project environment. Individual stand-alone connector elements need to be created inside a family to define the component and are represented there by the DuctConnector, PipeConnector and ElectricalConnector classes.\n<p>The connector defines geometry, e.g. its oval, round or rectangular shape, and dimensions such as width, height and radius. It also maintains a coordinate system and system data such as domain, system type, flow, direction.\n\n<a name=\"4\"></a>\n<h4>Electrical Systems</h4>\n<p>Electrical systems are organised hierarchically in Revit MEP. The root elements are panels. Each panel is connected to a number of systems, also known as circuits. Each system or circuit consists of a number of circuit elements, some of which may be further panels, and so on, recursively. Cables and wires need not be modelled individually, and the connections between the electrical system components are defined by logical connectors rather than physical ones. The Revit 2009 API introduced the classes ElectricalEquipment, LightingDevice, LightingFixture, ElectricalSystem, specialisations of the base MEPModel and MEPSystem classes, to represent electrical components and systems. These elements all have a connector manager, whose Connectors property returns logical as well as physical type connectors:\n\n<pre>\nElectricalSystem sys;\nConnectorSet connectors = sys.ConnectorManager.Connectors;\n</pre>\n<p>This makes it very simple to analyse and traverse the electrical system hierarchies similarly to the approach demonstrated by the TraverseSystem SDK sample for duct and piping ones.\n\n<a name=\"5\"></a>\n<h4>HVAC and Plumbing Systems</h4>\n<p>New support for HVAC and plumbing was provided with Revit 2010, which introduced the Autodesk.Revit.MEP namespace containing a wealth of new classes and functionality, as well as moving existing MEP-related classes to the MEP namespace. The main components in HVAC and piping hierarchy are the top level systems, ducts, pipes, fittings and connectors:\n\n<ul>\n<li>Systems to manage the top level system properties.\n<li>Ducts and pipes to define the main flow elements.\n<li>Fittings to implement bends and branches in the system.\n<li>Connectors to hook up the ducts, pipes and fittings.\n</li></li></li></li></ul>\n<p>The classes MechanicalSystem and PipingSystem introduced in Revit 2010 provide the following top-level system functionality:\n\n<ul>\n<li>Access to equipment, connectors and system type.\n<li>Access to system properties such as flow and static pressure.\n<li>Analysis of system contents through the DuctNetwork or PipeNetwork property.\n</li></li></li></ul>\n<p>The elements contained within a system are not automatically returned in the flow direction. The TraverseSystem SDK sample demonstrates how to query the connector managers to implement traversal in direction of flow for a given system.\n<p>Ducts and pipes are represented by the classes Duct, FlexDuct, Pipe and FlexPipe, derived from the MEP curve type. They provide the following functionality:\n\n<ul>\n<li>Read access to duct properties, types, and geometry.\n<li>Change duct or pipe type.\n<li>Move or layout duct or pipe.\n</li></li></li></ul>\n<p>The layout functionality can be driven by two points, one point and a connector, or two connectors.\n<p>Fittings are represented by family instances, which are created with dedicated methods on the Autodesk.Revit.Creation.Document class for inserting Elbow, Tee, Cross, Takeoff, Transition, and Union elements. The fitting properties, shape and dimensions can be accessed through the FamilyInstance.MEPModel property.\n<p>Connectors limited to the electrical realm were introduced in Revit 2009. In Revit 2010, we have connectors for the mechanical and piping domains as well. The connector is an item that is a part of another element such as a duct, pipe, fitting, or equipment. The basic features of connectors and the different classed used to represent them in the family and project contexts were mentioned above. The additional HVAC-specific connector features include properties to read the flow, coefficient and demand. They also provide access to physical properties like Origin, Angle, Height, Width and Radius.\n<p>We have read and write access to so-called assigned connector properties. These are connector properties that can be overridden by the user and are dependent on the overall network condition, including characteristics like Flow, Flow Config, Coefficient, Loss etc. These depend on the system being well connected, the configuration of the family within the system, and how the family is constructed.\n<p>Connector size and location can be modified. Connectors can be disconnected to insert a new fitting into a network or connect two ducts into a transition.\n\n<ul>\n<li>The family connector elements define Flow, Flow Configuration, Coefficients, and Loss Method.\n<li>Read duct, pipe, and fitting connector properties such as Flow, Coefficient, and Demand.\n<li>Access physical connector properties e.g. Origin, Angle, Height, Width, Radius.\n<li>Change connector size and location.\n<li>Connect and disconnect.\n</li></li></li></li></li></ul>\n<p>The creation document provides a number of methods for the creation of HVAC and plumbing elements within the project environment, including new mechanical or piping systems, new duct and pipe elements, and new fittings. In the context of a family, the different types of duct, pipe and electrical connectors are represented by specific elements that can be created by the FamilyItemFactory class, accessed through the Document.FamilyCreate property.\n\n<a name=\"6\"></a>\n<h4>Sample Applications</h4>\n<p>The MEP-specific sample applications include both those provided in the standard Revit SDK as well as a non-SDK one created for this presentation on the RME API.\n\n<p>The introduction of an MEP specific API with Revit 2009 was accompanied by two SDK samples: \n\n<ul>\n<li>AddSpaceAndZone demonstrates handling the new space and zone elements.\n<li>PowerCircuit demonstrates manipulation of electrical power circuits.\n</li></li></ul>\n<p>The Revit 2010 SDK includes the following new MEP-specific SDK sample applications:\n\n<ul>\n<li>AutoRoute: Route a set of ducts and fittings between a source, the air supply equipment, and the sink, two air outlet terminals.\n<li>AvoidObstruction: Detect and resolve obstructions between ducts, pipes, and beams.\n<li>TraverseSystem: Traverse a well-connected mechanical or piping system in the direction of flow.\n<li>CreateAirHandler: Create an air handler and add connectors.\n</li></li></li></li></ul>\n<p>The first three demonstrate RME API features in the project context, the fourth uses the family API.\n<p>Finally, we provide a non-SDK sample application named mep. It implements some HVAC oriented commands making use of the generic Revit API to analyse and manipulate duct elements for automatic air terminal sizing, and others which implement an electrical sample for analysis and display of an electrical system in a tree view reproducing the Revit system browser structure or showing the full connection hierarchy tree:\n\n<ul>\n<li>HVAC air terminal analysis and sizing.\n<li>Electrical system connectivity analysis and hierarchical display.\n</li></li></ul>\n<a name=\"7\"></a>\n<h4>Materials and Further Reading</h4>\n<p>A more extensive document discussing the Revit MEP API and the related samples in deeper detail as well as other useful material is provided with the recording of Revit MEP Programming Webcast held on August 27th 2009, available through the \n\nADN or Autodesk Developer Network \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nAPI training schedule</a>\n\n(also accessible via \n\n<a href=\"http://www.autodesk.com/apitraining\">\nwww.autodesk.com/apitraining</a>),\n\nfilter for 'Revit MEP API', and click on the \n\n<a href=\"http://download.autodesk.com/media/adn/RevitMEPAPI_27Aug09.zip\">\ndownload</a> \n\nlink.\nThis material is accessible to all developers, regardless of ADN membership.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0219_mep_api",
    "header_text": "The Revit MEP API",
    "local_header_href": "#the-revit-mep-api",
    "chunk_text": "<h4>The Revit MEP API</h4><p>Revit MEP is a flavour of Revit for work in the mechanical, electrical and plumbing domains. HVAC, i.e. heating, ventilation and air conditioning, is considered part of the mechanical domain. Efficient work in these areas requires strong model analysis tools in addition to read and write access to the components and data used to model the electrical, HVAC and piping systems in Revit MEP. Some of the required MEP specific functionality includes access to the MEP project information, Green Building XML, spaces and zones, the electrical, duct and pipe systems, their components, properties and parameters, methods for element creation and modification, and system traversal and analysis.\n<p>Most of the Revit API is generic and applies to all three flavours of the Revit product, i.e. Architecture, MEP and Structure. All three flavours of Revit also include the same .NET assembly named RevitAPI.dll providing API access to third-party applications. However, some specific additional features exist for each of the flavours as well, for instance some room-related functionality in Revit Architecture and access to the analytical and MEP models in Revit Structure and MEP respectively. If API functionality not supported by the currently running flavour is accessed, the call will simply do nothing or return null.\n<p>In Revit 2008, no MEP-specific functionality was provided by the API. It was still possible to analyse and manipulate an HVAC system using the generic Revit API methods, for instance by accessing ducts as generic Revit elements and reading and writing their properties using the generic parameter access. We used this to create a sample application for HVAC air terminal analysis and sizing, presented at Autodesk University 2007. Revit 2009 introduced the first MEP-specific API support, including classes for electrical and mechanical equipment, lighting device and fixture, connector, electrical system, space and zone, the MEP model property on family instances, and the ability to create and modify MEP elements. In Revit 2010, the MEP-specific API was a focal point of the API development and greatly enhanced, especially the support for HVAC and piping systems.\n\n<a name=\"2\"></a>\n<h4>MEP Model Analysis</h4>\n<p>Access to the MEP Project Info is provided through the gbXMLParamElem element and its properties, which is accessed through the ProjectInfo.gbXMLSettings property. The available data includes PostalCode, ProjectLocation, BuildingService, BuildingConstruction, GroundPlane, ShadingSurfaces, and ProjectPhase.\n<p>Green Building XML or gbXML export is initiated by a call to the Document.Export method:\n\n<pre>\nDocument.Export( string folder, string name, GBXMLExportOptions );\n</pre>\n<p>Using spaces instead of rooms, and zones to group spaces, enables a subdivision of the architectural rooms into subspaces required for MEP analysis. The AddSpaceAndZone SDK sample demonstrates the programmatic creation and management of spaces and zones. The FamilyInstance class already had a Room property to determine in which room an instance is located, and now an analogous Space property has been added for MEP usage.\n<p>Several model inspection utility methods added in Revit 2010 are especially useful in the MEP domain. One group helps determine the relationships between and contents of volumes, rooms and spaces:\n\n<ul>\n<li>Room.IsPointInRoom determines if a 3D point is in the volume of a room.\n<li>Space.IsPointInSpace determines if a 3D point is in the volume of a space.\n<li>GetRoomAtPoint and GetSpaceAtPoint return the room or space containing a given 3D point.\n</li></li></li></ul>\n<p>The new ray intersection method can be used to determine proximity of elements:\n\n<ul>\n<li>FindReferencesByDirection returns an array of elements, faces, and references found when moving through the model from a specified point in a specified direction.\n</li></ul>\n<p>One use of FindReferencesByDirection is demonstrated by the RayTraceBounce SDK sample.\n\n<a name=\"3\"></a>\n<h4>Hierarchical Systems and Connectors</h4>\n<p>Many of the building blocks of an MEP system are represented in Revit by family instances. The generic family instance definition in the Revit API has been enhanced to provide access to additional MEP-specific properties and data, and provide classes to represent systems and connections between system components.\n<p>The objects dealt with in the MEP domain are organised into hierarchical structures. The top level node in these structures is an MEP system, represented by the MEPSystem class. This is the base class for the derived classes ElectricalSystem, MechanicalSystem and PipingSystem. The system has properties to access the base equipment or panel, the terminal elements, and the connector manager. The derived classes have many additional domain specific properties.\n<p>The Revit 2009 API introduced the MEPModel and Connector classes as fundamentals for programmatically representing and accessing the MEP model. It is accessed through the FamilyInstance.MEPModel property, and one of its main purposes is to provide access to the connector manager.\n<p>We have logical and physical connections between MEP components. Logical connections are used in the electrical domain, where wires and cables are not necessarily modelled individually. Physical connections are used in the mechanical and plumbing domains, where the connectors define and transmit sizing and flow information from one part to the next.\n<p>A connector is part of an MEP element such as a duct, pipe, fitting, or piece of equipment. The Connector class is used to represent connectors in the project environment. Individual stand-alone connector elements need to be created inside a family to define the component and are represented there by the DuctConnector, PipeConnector and ElectricalConnector classes.\n<p>The connector defines geometry, e.g. its oval, round or rectangular shape, and dimensions such as width, height and radius. It also maintains a coordinate system and system data such as domain, system type, flow, direction.\n\n<a name=\"4\"></a>\n<h4>Electrical Systems</h4>\n<p>Electrical systems are organised hierarchically in Revit MEP. The root elements are panels. Each panel is connected to a number of systems, also known as circuits. Each system or circuit consists of a number of circuit elements, some of which may be further panels, and so on, recursively. Cables and wires need not be modelled individually, and the connections between the electrical system components are defined by logical connectors rather than physical ones. The Revit 2009 API introduced the classes ElectricalEquipment, LightingDevice, LightingFixture, ElectricalSystem, specialisations of the base MEPModel and MEPSystem classes, to represent electrical components and systems. These elements all have a connector manager, whose Connectors property returns logical as well as physical type connectors:\n\n<pre>\nElectricalSystem sys;\nConnectorSet connectors = sys.ConnectorManager.Connectors;\n</pre>\n<p>This makes it very simple to analyse and traverse the electrical system hierarchies similarly to the approach demonstrated by the TraverseSystem SDK sample for duct and piping ones.\n\n<a name=\"5\"></a>\n<h4>HVAC and Plumbing Systems</h4>\n<p>New support for HVAC and plumbing was provided with Revit 2010, which introduced the Autodesk.Revit.MEP namespace containing a wealth of new classes and functionality, as well as moving existing MEP-related classes to the MEP namespace. The main components in HVAC and piping hierarchy are the top level systems, ducts, pipes, fittings and connectors:\n\n<ul>\n<li>Systems to manage the top level system properties.\n<li>Ducts and pipes to define the main flow elements.\n<li>Fittings to implement bends and branches in the system.\n<li>Connectors to hook up the ducts, pipes and fittings.\n</li></li></li></li></ul>\n<p>The classes MechanicalSystem and PipingSystem introduced in Revit 2010 provide the following top-level system functionality:\n\n<ul>\n<li>Access to equipment, connectors and system type.\n<li>Access to system properties such as flow and static pressure.\n<li>Analysis of system contents through the DuctNetwork or PipeNetwork property.\n</li></li></li></ul>\n<p>The elements contained within a system are not automatically returned in the flow direction. The TraverseSystem SDK sample demonstrates how to query the connector managers to implement traversal in direction of flow for a given system.\n<p>Ducts and pipes are represented by the classes Duct, FlexDuct, Pipe and FlexPipe, derived from the MEP curve type. They provide the following functionality:\n\n<ul>\n<li>Read access to duct properties, types, and geometry.\n<li>Change duct or pipe type.\n<li>Move or layout duct or pipe.\n</li></li></li></ul>\n<p>The layout functionality can be driven by two points, one point and a connector, or two connectors.\n<p>Fittings are represented by family instances, which are created with dedicated methods on the Autodesk.Revit.Creation.Document class for inserting Elbow, Tee, Cross, Takeoff, Transition, and Union elements. The fitting properties, shape and dimensions can be accessed through the FamilyInstance.MEPModel property.\n<p>Connectors limited to the electrical realm were introduced in Revit 2009. In Revit 2010, we have connectors for the mechanical and piping domains as well. The connector is an item that is a part of another element such as a duct, pipe, fitting, or equipment. The basic features of connectors and the different classed used to represent them in the family and project contexts were mentioned above. The additional HVAC-specific connector features include properties to read the flow, coefficient and demand. They also provide access to physical properties like Origin, Angle, Height, Width and Radius.\n<p>We have read and write access to so-called assigned connector properties. These are connector properties that can be overridden by the user and are dependent on the overall network condition, including characteristics like Flow, Flow Config, Coefficient, Loss etc. These depend on the system being well connected, the configuration of the family within the system, and how the family is constructed.\n<p>Connector size and location can be modified. Connectors can be disconnected to insert a new fitting into a network or connect two ducts into a transition.\n\n<ul>\n<li>The family connector elements define Flow, Flow Configuration, Coefficients, and Loss Method.\n<li>Read duct, pipe, and fitting connector properties such as Flow, Coefficient, and Demand.\n<li>Access physical connector properties e.g. Origin, Angle, Height, Width, Radius.\n<li>Change connector size and location.\n<li>Connect and disconnect.\n</li></li></li></li></li></ul>\n<p>The creation document provides a number of methods for the creation of HVAC and plumbing elements within the project environment, including new mechanical or piping systems, new duct and pipe elements, and new fittings. In the context of a family, the different types of duct, pipe and electrical connectors are represented by specific elements that can be created by the FamilyItemFactory class, accessed through the Document.FamilyCreate property.\n\n<a name=\"6\"></a>\n<h4>Sample Applications</h4>\n<p>The MEP-specific sample applications include both those provided in the standard Revit SDK as well as a non-SDK one created for this presentation on the RME API.\n\n<p>The introduction of an MEP specific API with Revit 2009 was accompanied by two SDK samples: \n\n<ul>\n<li>AddSpaceAndZone demonstrates handling the new space and zone elements.\n<li>PowerCircuit demonstrates manipulation of electrical power circuits.\n</li></li></ul>\n<p>The Revit 2010 SDK includes the following new MEP-specific SDK sample applications:\n\n<ul>\n<li>AutoRoute: Route a set of ducts and fittings between a source, the air supply equipment, and the sink, two air outlet terminals.\n<li>AvoidObstruction: Detect and resolve obstructions between ducts, pipes, and beams.\n<li>TraverseSystem: Traverse a well-connected mechanical or piping system in the direction of flow.\n<li>CreateAirHandler: Create an air handler and add connectors.\n</li></li></li></li></ul>\n<p>The first three demonstrate RME API features in the project context, the fourth uses the family API.\n<p>Finally, we provide a non-SDK sample application named mep. It implements some HVAC oriented commands making use of the generic Revit API to analyse and manipulate duct elements for automatic air terminal sizing, and others which implement an electrical sample for analysis and display of an electrical system in a tree view reproducing the Revit system browser structure or showing the full connection hierarchy tree:\n\n<ul>\n<li>HVAC air terminal analysis and sizing.\n<li>Electrical system connectivity analysis and hierarchical display.\n</li></li></ul>\n<a name=\"7\"></a>\n<h4>Materials and Further Reading</h4>\n<p>A more extensive document discussing the Revit MEP API and the related samples in deeper detail as well as other useful material is provided with the recording of Revit MEP Programming Webcast held on August 27th 2009, available through the \n\nADN or Autodesk Developer Network \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nAPI training schedule</a>\n\n(also accessible via \n\n<a href=\"http://www.autodesk.com/apitraining\">\nwww.autodesk.com/apitraining</a>),\n\nfilter for 'Revit MEP API', and click on the \n\n<a href=\"http://download.autodesk.com/media/adn/RevitMEPAPI_27Aug09.zip\">\ndownload</a> \n\nlink.\nThis material is accessible to all developers, regardless of ADN membership.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0219_mep_api",
    "header_text": "MEP Model Analysis",
    "local_header_href": "#mep-model-analysis",
    "chunk_text": "<h4>MEP Model Analysis</h4><p>Access to the MEP Project Info is provided through the gbXMLParamElem element and its properties, which is accessed through the ProjectInfo.gbXMLSettings property. The available data includes PostalCode, ProjectLocation, BuildingService, BuildingConstruction, GroundPlane, ShadingSurfaces, and ProjectPhase.\n<p>Green Building XML or gbXML export is initiated by a call to the Document.Export method:\n\n<pre>\nDocument.Export( string folder, string name, GBXMLExportOptions );\n</pre>\n<p>Using spaces instead of rooms, and zones to group spaces, enables a subdivision of the architectural rooms into subspaces required for MEP analysis. The AddSpaceAndZone SDK sample demonstrates the programmatic creation and management of spaces and zones. The FamilyInstance class already had a Room property to determine in which room an instance is located, and now an analogous Space property has been added for MEP usage.\n<p>Several model inspection utility methods added in Revit 2010 are especially useful in the MEP domain. One group helps determine the relationships between and contents of volumes, rooms and spaces:\n\n<ul>\n<li>Room.IsPointInRoom determines if a 3D point is in the volume of a room.\n<li>Space.IsPointInSpace determines if a 3D point is in the volume of a space.\n<li>GetRoomAtPoint and GetSpaceAtPoint return the room or space containing a given 3D point.\n</li></li></li></ul>\n<p>The new ray intersection method can be used to determine proximity of elements:\n\n<ul>\n<li>FindReferencesByDirection returns an array of elements, faces, and references found when moving through the model from a specified point in a specified direction.\n</li></ul>\n<p>One use of FindReferencesByDirection is demonstrated by the RayTraceBounce SDK sample.\n\n<a name=\"3\"></a>\n<h4>Hierarchical Systems and Connectors</h4>\n<p>Many of the building blocks of an MEP system are represented in Revit by family instances. The generic family instance definition in the Revit API has been enhanced to provide access to additional MEP-specific properties and data, and provide classes to represent systems and connections between system components.\n<p>The objects dealt with in the MEP domain are organised into hierarchical structures. The top level node in these structures is an MEP system, represented by the MEPSystem class. This is the base class for the derived classes ElectricalSystem, MechanicalSystem and PipingSystem. The system has properties to access the base equipment or panel, the terminal elements, and the connector manager. The derived classes have many additional domain specific properties.\n<p>The Revit 2009 API introduced the MEPModel and Connector classes as fundamentals for programmatically representing and accessing the MEP model. It is accessed through the FamilyInstance.MEPModel property, and one of its main purposes is to provide access to the connector manager.\n<p>We have logical and physical connections between MEP components. Logical connections are used in the electrical domain, where wires and cables are not necessarily modelled individually. Physical connections are used in the mechanical and plumbing domains, where the connectors define and transmit sizing and flow information from one part to the next.\n<p>A connector is part of an MEP element such as a duct, pipe, fitting, or piece of equipment. The Connector class is used to represent connectors in the project environment. Individual stand-alone connector elements need to be created inside a family to define the component and are represented there by the DuctConnector, PipeConnector and ElectricalConnector classes.\n<p>The connector defines geometry, e.g. its oval, round or rectangular shape, and dimensions such as width, height and radius. It also maintains a coordinate system and system data such as domain, system type, flow, direction.\n\n<a name=\"4\"></a>\n<h4>Electrical Systems</h4>\n<p>Electrical systems are organised hierarchically in Revit MEP. The root elements are panels. Each panel is connected to a number of systems, also known as circuits. Each system or circuit consists of a number of circuit elements, some of which may be further panels, and so on, recursively. Cables and wires need not be modelled individually, and the connections between the electrical system components are defined by logical connectors rather than physical ones. The Revit 2009 API introduced the classes ElectricalEquipment, LightingDevice, LightingFixture, ElectricalSystem, specialisations of the base MEPModel and MEPSystem classes, to represent electrical components and systems. These elements all have a connector manager, whose Connectors property returns logical as well as physical type connectors:\n\n<pre>\nElectricalSystem sys;\nConnectorSet connectors = sys.ConnectorManager.Connectors;\n</pre>\n<p>This makes it very simple to analyse and traverse the electrical system hierarchies similarly to the approach demonstrated by the TraverseSystem SDK sample for duct and piping ones.\n\n<a name=\"5\"></a>\n<h4>HVAC and Plumbing Systems</h4>\n<p>New support for HVAC and plumbing was provided with Revit 2010, which introduced the Autodesk.Revit.MEP namespace containing a wealth of new classes and functionality, as well as moving existing MEP-related classes to the MEP namespace. The main components in HVAC and piping hierarchy are the top level systems, ducts, pipes, fittings and connectors:\n\n<ul>\n<li>Systems to manage the top level system properties.\n<li>Ducts and pipes to define the main flow elements.\n<li>Fittings to implement bends and branches in the system.\n<li>Connectors to hook up the ducts, pipes and fittings.\n</li></li></li></li></ul>\n<p>The classes MechanicalSystem and PipingSystem introduced in Revit 2010 provide the following top-level system functionality:\n\n<ul>\n<li>Access to equipment, connectors and system type.\n<li>Access to system properties such as flow and static pressure.\n<li>Analysis of system contents through the DuctNetwork or PipeNetwork property.\n</li></li></li></ul>\n<p>The elements contained within a system are not automatically returned in the flow direction. The TraverseSystem SDK sample demonstrates how to query the connector managers to implement traversal in direction of flow for a given system.\n<p>Ducts and pipes are represented by the classes Duct, FlexDuct, Pipe and FlexPipe, derived from the MEP curve type. They provide the following functionality:\n\n<ul>\n<li>Read access to duct properties, types, and geometry.\n<li>Change duct or pipe type.\n<li>Move or layout duct or pipe.\n</li></li></li></ul>\n<p>The layout functionality can be driven by two points, one point and a connector, or two connectors.\n<p>Fittings are represented by family instances, which are created with dedicated methods on the Autodesk.Revit.Creation.Document class for inserting Elbow, Tee, Cross, Takeoff, Transition, and Union elements. The fitting properties, shape and dimensions can be accessed through the FamilyInstance.MEPModel property.\n<p>Connectors limited to the electrical realm were introduced in Revit 2009. In Revit 2010, we have connectors for the mechanical and piping domains as well. The connector is an item that is a part of another element such as a duct, pipe, fitting, or equipment. The basic features of connectors and the different classed used to represent them in the family and project contexts were mentioned above. The additional HVAC-specific connector features include properties to read the flow, coefficient and demand. They also provide access to physical properties like Origin, Angle, Height, Width and Radius.\n<p>We have read and write access to so-called assigned connector properties. These are connector properties that can be overridden by the user and are dependent on the overall network condition, including characteristics like Flow, Flow Config, Coefficient, Loss etc. These depend on the system being well connected, the configuration of the family within the system, and how the family is constructed.\n<p>Connector size and location can be modified. Connectors can be disconnected to insert a new fitting into a network or connect two ducts into a transition.\n\n<ul>\n<li>The family connector elements define Flow, Flow Configuration, Coefficients, and Loss Method.\n<li>Read duct, pipe, and fitting connector properties such as Flow, Coefficient, and Demand.\n<li>Access physical connector properties e.g. Origin, Angle, Height, Width, Radius.\n<li>Change connector size and location.\n<li>Connect and disconnect.\n</li></li></li></li></li></ul>\n<p>The creation document provides a number of methods for the creation of HVAC and plumbing elements within the project environment, including new mechanical or piping systems, new duct and pipe elements, and new fittings. In the context of a family, the different types of duct, pipe and electrical connectors are represented by specific elements that can be created by the FamilyItemFactory class, accessed through the Document.FamilyCreate property.\n\n<a name=\"6\"></a>\n<h4>Sample Applications</h4>\n<p>The MEP-specific sample applications include both those provided in the standard Revit SDK as well as a non-SDK one created for this presentation on the RME API.\n\n<p>The introduction of an MEP specific API with Revit 2009 was accompanied by two SDK samples: \n\n<ul>\n<li>AddSpaceAndZone demonstrates handling the new space and zone elements.\n<li>PowerCircuit demonstrates manipulation of electrical power circuits.\n</li></li></ul>\n<p>The Revit 2010 SDK includes the following new MEP-specific SDK sample applications:\n\n<ul>\n<li>AutoRoute: Route a set of ducts and fittings between a source, the air supply equipment, and the sink, two air outlet terminals.\n<li>AvoidObstruction: Detect and resolve obstructions between ducts, pipes, and beams.\n<li>TraverseSystem: Traverse a well-connected mechanical or piping system in the direction of flow.\n<li>CreateAirHandler: Create an air handler and add connectors.\n</li></li></li></li></ul>\n<p>The first three demonstrate RME API features in the project context, the fourth uses the family API.\n<p>Finally, we provide a non-SDK sample application named mep. It implements some HVAC oriented commands making use of the generic Revit API to analyse and manipulate duct elements for automatic air terminal sizing, and others which implement an electrical sample for analysis and display of an electrical system in a tree view reproducing the Revit system browser structure or showing the full connection hierarchy tree:\n\n<ul>\n<li>HVAC air terminal analysis and sizing.\n<li>Electrical system connectivity analysis and hierarchical display.\n</li></li></ul>\n<a name=\"7\"></a>\n<h4>Materials and Further Reading</h4>\n<p>A more extensive document discussing the Revit MEP API and the related samples in deeper detail as well as other useful material is provided with the recording of Revit MEP Programming Webcast held on August 27th 2009, available through the \n\nADN or Autodesk Developer Network \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nAPI training schedule</a>\n\n(also accessible via \n\n<a href=\"http://www.autodesk.com/apitraining\">\nwww.autodesk.com/apitraining</a>),\n\nfilter for 'Revit MEP API', and click on the \n\n<a href=\"http://download.autodesk.com/media/adn/RevitMEPAPI_27Aug09.zip\">\ndownload</a> \n\nlink.\nThis material is accessible to all developers, regardless of ADN membership.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0219_mep_api",
    "header_text": "Hierarchical Systems and Connectors",
    "local_header_href": "#hierarchical-systems-and-connectors",
    "chunk_text": "<h4>Hierarchical Systems and Connectors</h4><p>Many of the building blocks of an MEP system are represented in Revit by family instances. The generic family instance definition in the Revit API has been enhanced to provide access to additional MEP-specific properties and data, and provide classes to represent systems and connections between system components.\n<p>The objects dealt with in the MEP domain are organised into hierarchical structures. The top level node in these structures is an MEP system, represented by the MEPSystem class. This is the base class for the derived classes ElectricalSystem, MechanicalSystem and PipingSystem. The system has properties to access the base equipment or panel, the terminal elements, and the connector manager. The derived classes have many additional domain specific properties.\n<p>The Revit 2009 API introduced the MEPModel and Connector classes as fundamentals for programmatically representing and accessing the MEP model. It is accessed through the FamilyInstance.MEPModel property, and one of its main purposes is to provide access to the connector manager.\n<p>We have logical and physical connections between MEP components. Logical connections are used in the electrical domain, where wires and cables are not necessarily modelled individually. Physical connections are used in the mechanical and plumbing domains, where the connectors define and transmit sizing and flow information from one part to the next.\n<p>A connector is part of an MEP element such as a duct, pipe, fitting, or piece of equipment. The Connector class is used to represent connectors in the project environment. Individual stand-alone connector elements need to be created inside a family to define the component and are represented there by the DuctConnector, PipeConnector and ElectricalConnector classes.\n<p>The connector defines geometry, e.g. its oval, round or rectangular shape, and dimensions such as width, height and radius. It also maintains a coordinate system and system data such as domain, system type, flow, direction.\n\n<a name=\"4\"></a>\n<h4>Electrical Systems</h4>\n<p>Electrical systems are organised hierarchically in Revit MEP. The root elements are panels. Each panel is connected to a number of systems, also known as circuits. Each system or circuit consists of a number of circuit elements, some of which may be further panels, and so on, recursively. Cables and wires need not be modelled individually, and the connections between the electrical system components are defined by logical connectors rather than physical ones. The Revit 2009 API introduced the classes ElectricalEquipment, LightingDevice, LightingFixture, ElectricalSystem, specialisations of the base MEPModel and MEPSystem classes, to represent electrical components and systems. These elements all have a connector manager, whose Connectors property returns logical as well as physical type connectors:\n\n<pre>\nElectricalSystem sys;\nConnectorSet connectors = sys.ConnectorManager.Connectors;\n</pre>\n<p>This makes it very simple to analyse and traverse the electrical system hierarchies similarly to the approach demonstrated by the TraverseSystem SDK sample for duct and piping ones.\n\n<a name=\"5\"></a>\n<h4>HVAC and Plumbing Systems</h4>\n<p>New support for HVAC and plumbing was provided with Revit 2010, which introduced the Autodesk.Revit.MEP namespace containing a wealth of new classes and functionality, as well as moving existing MEP-related classes to the MEP namespace. The main components in HVAC and piping hierarchy are the top level systems, ducts, pipes, fittings and connectors:\n\n<ul>\n<li>Systems to manage the top level system properties.\n<li>Ducts and pipes to define the main flow elements.\n<li>Fittings to implement bends and branches in the system.\n<li>Connectors to hook up the ducts, pipes and fittings.\n</li></li></li></li></ul>\n<p>The classes MechanicalSystem and PipingSystem introduced in Revit 2010 provide the following top-level system functionality:\n\n<ul>\n<li>Access to equipment, connectors and system type.\n<li>Access to system properties such as flow and static pressure.\n<li>Analysis of system contents through the DuctNetwork or PipeNetwork property.\n</li></li></li></ul>\n<p>The elements contained within a system are not automatically returned in the flow direction. The TraverseSystem SDK sample demonstrates how to query the connector managers to implement traversal in direction of flow for a given system.\n<p>Ducts and pipes are represented by the classes Duct, FlexDuct, Pipe and FlexPipe, derived from the MEP curve type. They provide the following functionality:\n\n<ul>\n<li>Read access to duct properties, types, and geometry.\n<li>Change duct or pipe type.\n<li>Move or layout duct or pipe.\n</li></li></li></ul>\n<p>The layout functionality can be driven by two points, one point and a connector, or two connectors.\n<p>Fittings are represented by family instances, which are created with dedicated methods on the Autodesk.Revit.Creation.Document class for inserting Elbow, Tee, Cross, Takeoff, Transition, and Union elements. The fitting properties, shape and dimensions can be accessed through the FamilyInstance.MEPModel property.\n<p>Connectors limited to the electrical realm were introduced in Revit 2009. In Revit 2010, we have connectors for the mechanical and piping domains as well. The connector is an item that is a part of another element such as a duct, pipe, fitting, or equipment. The basic features of connectors and the different classed used to represent them in the family and project contexts were mentioned above. The additional HVAC-specific connector features include properties to read the flow, coefficient and demand. They also provide access to physical properties like Origin, Angle, Height, Width and Radius.\n<p>We have read and write access to so-called assigned connector properties. These are connector properties that can be overridden by the user and are dependent on the overall network condition, including characteristics like Flow, Flow Config, Coefficient, Loss etc. These depend on the system being well connected, the configuration of the family within the system, and how the family is constructed.\n<p>Connector size and location can be modified. Connectors can be disconnected to insert a new fitting into a network or connect two ducts into a transition.\n\n<ul>\n<li>The family connector elements define Flow, Flow Configuration, Coefficients, and Loss Method.\n<li>Read duct, pipe, and fitting connector properties such as Flow, Coefficient, and Demand.\n<li>Access physical connector properties e.g. Origin, Angle, Height, Width, Radius.\n<li>Change connector size and location.\n<li>Connect and disconnect.\n</li></li></li></li></li></ul>\n<p>The creation document provides a number of methods for the creation of HVAC and plumbing elements within the project environment, including new mechanical or piping systems, new duct and pipe elements, and new fittings. In the context of a family, the different types of duct, pipe and electrical connectors are represented by specific elements that can be created by the FamilyItemFactory class, accessed through the Document.FamilyCreate property.\n\n<a name=\"6\"></a>\n<h4>Sample Applications</h4>\n<p>The MEP-specific sample applications include both those provided in the standard Revit SDK as well as a non-SDK one created for this presentation on the RME API.\n\n<p>The introduction of an MEP specific API with Revit 2009 was accompanied by two SDK samples: \n\n<ul>\n<li>AddSpaceAndZone demonstrates handling the new space and zone elements.\n<li>PowerCircuit demonstrates manipulation of electrical power circuits.\n</li></li></ul>\n<p>The Revit 2010 SDK includes the following new MEP-specific SDK sample applications:\n\n<ul>\n<li>AutoRoute: Route a set of ducts and fittings between a source, the air supply equipment, and the sink, two air outlet terminals.\n<li>AvoidObstruction: Detect and resolve obstructions between ducts, pipes, and beams.\n<li>TraverseSystem: Traverse a well-connected mechanical or piping system in the direction of flow.\n<li>CreateAirHandler: Create an air handler and add connectors.\n</li></li></li></li></ul>\n<p>The first three demonstrate RME API features in the project context, the fourth uses the family API.\n<p>Finally, we provide a non-SDK sample application named mep. It implements some HVAC oriented commands making use of the generic Revit API to analyse and manipulate duct elements for automatic air terminal sizing, and others which implement an electrical sample for analysis and display of an electrical system in a tree view reproducing the Revit system browser structure or showing the full connection hierarchy tree:\n\n<ul>\n<li>HVAC air terminal analysis and sizing.\n<li>Electrical system connectivity analysis and hierarchical display.\n</li></li></ul>\n<a name=\"7\"></a>\n<h4>Materials and Further Reading</h4>\n<p>A more extensive document discussing the Revit MEP API and the related samples in deeper detail as well as other useful material is provided with the recording of Revit MEP Programming Webcast held on August 27th 2009, available through the \n\nADN or Autodesk Developer Network \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nAPI training schedule</a>\n\n(also accessible via \n\n<a href=\"http://www.autodesk.com/apitraining\">\nwww.autodesk.com/apitraining</a>),\n\nfilter for 'Revit MEP API', and click on the \n\n<a href=\"http://download.autodesk.com/media/adn/RevitMEPAPI_27Aug09.zip\">\ndownload</a> \n\nlink.\nThis material is accessible to all developers, regardless of ADN membership.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0219_mep_api",
    "header_text": "Electrical Systems",
    "local_header_href": "#electrical-systems",
    "chunk_text": "<h4>Electrical Systems</h4><p>Electrical systems are organised hierarchically in Revit MEP. The root elements are panels. Each panel is connected to a number of systems, also known as circuits. Each system or circuit consists of a number of circuit elements, some of which may be further panels, and so on, recursively. Cables and wires need not be modelled individually, and the connections between the electrical system components are defined by logical connectors rather than physical ones. The Revit 2009 API introduced the classes ElectricalEquipment, LightingDevice, LightingFixture, ElectricalSystem, specialisations of the base MEPModel and MEPSystem classes, to represent electrical components and systems. These elements all have a connector manager, whose Connectors property returns logical as well as physical type connectors:\n\n<pre>\nElectricalSystem sys;\nConnectorSet connectors = sys.ConnectorManager.Connectors;\n</pre>\n<p>This makes it very simple to analyse and traverse the electrical system hierarchies similarly to the approach demonstrated by the TraverseSystem SDK sample for duct and piping ones.\n\n<a name=\"5\"></a>\n<h4>HVAC and Plumbing Systems</h4>\n<p>New support for HVAC and plumbing was provided with Revit 2010, which introduced the Autodesk.Revit.MEP namespace containing a wealth of new classes and functionality, as well as moving existing MEP-related classes to the MEP namespace. The main components in HVAC and piping hierarchy are the top level systems, ducts, pipes, fittings and connectors:\n\n<ul>\n<li>Systems to manage the top level system properties.\n<li>Ducts and pipes to define the main flow elements.\n<li>Fittings to implement bends and branches in the system.\n<li>Connectors to hook up the ducts, pipes and fittings.\n</li></li></li></li></ul>\n<p>The classes MechanicalSystem and PipingSystem introduced in Revit 2010 provide the following top-level system functionality:\n\n<ul>\n<li>Access to equipment, connectors and system type.\n<li>Access to system properties such as flow and static pressure.\n<li>Analysis of system contents through the DuctNetwork or PipeNetwork property.\n</li></li></li></ul>\n<p>The elements contained within a system are not automatically returned in the flow direction. The TraverseSystem SDK sample demonstrates how to query the connector managers to implement traversal in direction of flow for a given system.\n<p>Ducts and pipes are represented by the classes Duct, FlexDuct, Pipe and FlexPipe, derived from the MEP curve type. They provide the following functionality:\n\n<ul>\n<li>Read access to duct properties, types, and geometry.\n<li>Change duct or pipe type.\n<li>Move or layout duct or pipe.\n</li></li></li></ul>\n<p>The layout functionality can be driven by two points, one point and a connector, or two connectors.\n<p>Fittings are represented by family instances, which are created with dedicated methods on the Autodesk.Revit.Creation.Document class for inserting Elbow, Tee, Cross, Takeoff, Transition, and Union elements. The fitting properties, shape and dimensions can be accessed through the FamilyInstance.MEPModel property.\n<p>Connectors limited to the electrical realm were introduced in Revit 2009. In Revit 2010, we have connectors for the mechanical and piping domains as well. The connector is an item that is a part of another element such as a duct, pipe, fitting, or equipment. The basic features of connectors and the different classed used to represent them in the family and project contexts were mentioned above. The additional HVAC-specific connector features include properties to read the flow, coefficient and demand. They also provide access to physical properties like Origin, Angle, Height, Width and Radius.\n<p>We have read and write access to so-called assigned connector properties. These are connector properties that can be overridden by the user and are dependent on the overall network condition, including characteristics like Flow, Flow Config, Coefficient, Loss etc. These depend on the system being well connected, the configuration of the family within the system, and how the family is constructed.\n<p>Connector size and location can be modified. Connectors can be disconnected to insert a new fitting into a network or connect two ducts into a transition.\n\n<ul>\n<li>The family connector elements define Flow, Flow Configuration, Coefficients, and Loss Method.\n<li>Read duct, pipe, and fitting connector properties such as Flow, Coefficient, and Demand.\n<li>Access physical connector properties e.g. Origin, Angle, Height, Width, Radius.\n<li>Change connector size and location.\n<li>Connect and disconnect.\n</li></li></li></li></li></ul>\n<p>The creation document provides a number of methods for the creation of HVAC and plumbing elements within the project environment, including new mechanical or piping systems, new duct and pipe elements, and new fittings. In the context of a family, the different types of duct, pipe and electrical connectors are represented by specific elements that can be created by the FamilyItemFactory class, accessed through the Document.FamilyCreate property.\n\n<a name=\"6\"></a>\n<h4>Sample Applications</h4>\n<p>The MEP-specific sample applications include both those provided in the standard Revit SDK as well as a non-SDK one created for this presentation on the RME API.\n\n<p>The introduction of an MEP specific API with Revit 2009 was accompanied by two SDK samples: \n\n<ul>\n<li>AddSpaceAndZone demonstrates handling the new space and zone elements.\n<li>PowerCircuit demonstrates manipulation of electrical power circuits.\n</li></li></ul>\n<p>The Revit 2010 SDK includes the following new MEP-specific SDK sample applications:\n\n<ul>\n<li>AutoRoute: Route a set of ducts and fittings between a source, the air supply equipment, and the sink, two air outlet terminals.\n<li>AvoidObstruction: Detect and resolve obstructions between ducts, pipes, and beams.\n<li>TraverseSystem: Traverse a well-connected mechanical or piping system in the direction of flow.\n<li>CreateAirHandler: Create an air handler and add connectors.\n</li></li></li></li></ul>\n<p>The first three demonstrate RME API features in the project context, the fourth uses the family API.\n<p>Finally, we provide a non-SDK sample application named mep. It implements some HVAC oriented commands making use of the generic Revit API to analyse and manipulate duct elements for automatic air terminal sizing, and others which implement an electrical sample for analysis and display of an electrical system in a tree view reproducing the Revit system browser structure or showing the full connection hierarchy tree:\n\n<ul>\n<li>HVAC air terminal analysis and sizing.\n<li>Electrical system connectivity analysis and hierarchical display.\n</li></li></ul>\n<a name=\"7\"></a>\n<h4>Materials and Further Reading</h4>\n<p>A more extensive document discussing the Revit MEP API and the related samples in deeper detail as well as other useful material is provided with the recording of Revit MEP Programming Webcast held on August 27th 2009, available through the \n\nADN or Autodesk Developer Network \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nAPI training schedule</a>\n\n(also accessible via \n\n<a href=\"http://www.autodesk.com/apitraining\">\nwww.autodesk.com/apitraining</a>),\n\nfilter for 'Revit MEP API', and click on the \n\n<a href=\"http://download.autodesk.com/media/adn/RevitMEPAPI_27Aug09.zip\">\ndownload</a> \n\nlink.\nThis material is accessible to all developers, regardless of ADN membership.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0219_mep_api",
    "header_text": "HVAC and Plumbing Systems",
    "local_header_href": "#hvac-and-plumbing-systems",
    "chunk_text": "<h4>HVAC and Plumbing Systems</h4><p>New support for HVAC and plumbing was provided with Revit 2010, which introduced the Autodesk.Revit.MEP namespace containing a wealth of new classes and functionality, as well as moving existing MEP-related classes to the MEP namespace. The main components in HVAC and piping hierarchy are the top level systems, ducts, pipes, fittings and connectors:\n\n<ul>\n<li>Systems to manage the top level system properties.\n<li>Ducts and pipes to define the main flow elements.\n<li>Fittings to implement bends and branches in the system.\n<li>Connectors to hook up the ducts, pipes and fittings.\n</li></li></li></li></ul>\n<p>The classes MechanicalSystem and PipingSystem introduced in Revit 2010 provide the following top-level system functionality:\n\n<ul>\n<li>Access to equipment, connectors and system type.\n<li>Access to system properties such as flow and static pressure.\n<li>Analysis of system contents through the DuctNetwork or PipeNetwork property.\n</li></li></li></ul>\n<p>The elements contained within a system are not automatically returned in the flow direction. The TraverseSystem SDK sample demonstrates how to query the connector managers to implement traversal in direction of flow for a given system.\n<p>Ducts and pipes are represented by the classes Duct, FlexDuct, Pipe and FlexPipe, derived from the MEP curve type. They provide the following functionality:\n\n<ul>\n<li>Read access to duct properties, types, and geometry.\n<li>Change duct or pipe type.\n<li>Move or layout duct or pipe.\n</li></li></li></ul>\n<p>The layout functionality can be driven by two points, one point and a connector, or two connectors.\n<p>Fittings are represented by family instances, which are created with dedicated methods on the Autodesk.Revit.Creation.Document class for inserting Elbow, Tee, Cross, Takeoff, Transition, and Union elements. The fitting properties, shape and dimensions can be accessed through the FamilyInstance.MEPModel property.\n<p>Connectors limited to the electrical realm were introduced in Revit 2009. In Revit 2010, we have connectors for the mechanical and piping domains as well. The connector is an item that is a part of another element such as a duct, pipe, fitting, or equipment. The basic features of connectors and the different classed used to represent them in the family and project contexts were mentioned above. The additional HVAC-specific connector features include properties to read the flow, coefficient and demand. They also provide access to physical properties like Origin, Angle, Height, Width and Radius.\n<p>We have read and write access to so-called assigned connector properties. These are connector properties that can be overridden by the user and are dependent on the overall network condition, including characteristics like Flow, Flow Config, Coefficient, Loss etc. These depend on the system being well connected, the configuration of the family within the system, and how the family is constructed.\n<p>Connector size and location can be modified. Connectors can be disconnected to insert a new fitting into a network or connect two ducts into a transition.\n\n<ul>\n<li>The family connector elements define Flow, Flow Configuration, Coefficients, and Loss Method.\n<li>Read duct, pipe, and fitting connector properties such as Flow, Coefficient, and Demand.\n<li>Access physical connector properties e.g. Origin, Angle, Height, Width, Radius.\n<li>Change connector size and location.\n<li>Connect and disconnect.\n</li></li></li></li></li></ul>\n<p>The creation document provides a number of methods for the creation of HVAC and plumbing elements within the project environment, including new mechanical or piping systems, new duct and pipe elements, and new fittings. In the context of a family, the different types of duct, pipe and electrical connectors are represented by specific elements that can be created by the FamilyItemFactory class, accessed through the Document.FamilyCreate property.\n\n<a name=\"6\"></a>\n<h4>Sample Applications</h4>\n<p>The MEP-specific sample applications include both those provided in the standard Revit SDK as well as a non-SDK one created for this presentation on the RME API.\n\n<p>The introduction of an MEP specific API with Revit 2009 was accompanied by two SDK samples: \n\n<ul>\n<li>AddSpaceAndZone demonstrates handling the new space and zone elements.\n<li>PowerCircuit demonstrates manipulation of electrical power circuits.\n</li></li></ul>\n<p>The Revit 2010 SDK includes the following new MEP-specific SDK sample applications:\n\n<ul>\n<li>AutoRoute: Route a set of ducts and fittings between a source, the air supply equipment, and the sink, two air outlet terminals.\n<li>AvoidObstruction: Detect and resolve obstructions between ducts, pipes, and beams.\n<li>TraverseSystem: Traverse a well-connected mechanical or piping system in the direction of flow.\n<li>CreateAirHandler: Create an air handler and add connectors.\n</li></li></li></li></ul>\n<p>The first three demonstrate RME API features in the project context, the fourth uses the family API.\n<p>Finally, we provide a non-SDK sample application named mep. It implements some HVAC oriented commands making use of the generic Revit API to analyse and manipulate duct elements for automatic air terminal sizing, and others which implement an electrical sample for analysis and display of an electrical system in a tree view reproducing the Revit system browser structure or showing the full connection hierarchy tree:\n\n<ul>\n<li>HVAC air terminal analysis and sizing.\n<li>Electrical system connectivity analysis and hierarchical display.\n</li></li></ul>\n<a name=\"7\"></a>\n<h4>Materials and Further Reading</h4>\n<p>A more extensive document discussing the Revit MEP API and the related samples in deeper detail as well as other useful material is provided with the recording of Revit MEP Programming Webcast held on August 27th 2009, available through the \n\nADN or Autodesk Developer Network \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nAPI training schedule</a>\n\n(also accessible via \n\n<a href=\"http://www.autodesk.com/apitraining\">\nwww.autodesk.com/apitraining</a>),\n\nfilter for 'Revit MEP API', and click on the \n\n<a href=\"http://download.autodesk.com/media/adn/RevitMEPAPI_27Aug09.zip\">\ndownload</a> \n\nlink.\nThis material is accessible to all developers, regardless of ADN membership.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0219_mep_api",
    "header_text": "Sample Applications",
    "local_header_href": "#sample-applications",
    "chunk_text": "<h4>Sample Applications</h4><p>The MEP-specific sample applications include both those provided in the standard Revit SDK as well as a non-SDK one created for this presentation on the RME API.\n\n<p>The introduction of an MEP specific API with Revit 2009 was accompanied by two SDK samples: \n\n<ul>\n<li>AddSpaceAndZone demonstrates handling the new space and zone elements.\n<li>PowerCircuit demonstrates manipulation of electrical power circuits.\n</li></li></ul>\n<p>The Revit 2010 SDK includes the following new MEP-specific SDK sample applications:\n\n<ul>\n<li>AutoRoute: Route a set of ducts and fittings between a source, the air supply equipment, and the sink, two air outlet terminals.\n<li>AvoidObstruction: Detect and resolve obstructions between ducts, pipes, and beams.\n<li>TraverseSystem: Traverse a well-connected mechanical or piping system in the direction of flow.\n<li>CreateAirHandler: Create an air handler and add connectors.\n</li></li></li></li></ul>\n<p>The first three demonstrate RME API features in the project context, the fourth uses the family API.\n<p>Finally, we provide a non-SDK sample application named mep. It implements some HVAC oriented commands making use of the generic Revit API to analyse and manipulate duct elements for automatic air terminal sizing, and others which implement an electrical sample for analysis and display of an electrical system in a tree view reproducing the Revit system browser structure or showing the full connection hierarchy tree:\n\n<ul>\n<li>HVAC air terminal analysis and sizing.\n<li>Electrical system connectivity analysis and hierarchical display.\n</li></li></ul>\n<a name=\"7\"></a>\n<h4>Materials and Further Reading</h4>\n<p>A more extensive document discussing the Revit MEP API and the related samples in deeper detail as well as other useful material is provided with the recording of Revit MEP Programming Webcast held on August 27th 2009, available through the \n\nADN or Autodesk Developer Network \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nAPI training schedule</a>\n\n(also accessible via \n\n<a href=\"http://www.autodesk.com/apitraining\">\nwww.autodesk.com/apitraining</a>),\n\nfilter for 'Revit MEP API', and click on the \n\n<a href=\"http://download.autodesk.com/media/adn/RevitMEPAPI_27Aug09.zip\">\ndownload</a> \n\nlink.\nThis material is accessible to all developers, regardless of ADN membership.</p>\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0219_mep_api",
    "header_text": "Materials and Further Reading",
    "local_header_href": "#materials-and-further-reading",
    "chunk_text": "<h4>Materials and Further Reading</h4><p>A more extensive document discussing the Revit MEP API and the related samples in deeper detail as well as other useful material is provided with the recording of Revit MEP Programming Webcast held on August 27th 2009, available through the \n\nADN or Autodesk Developer Network \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nAPI training schedule</a>\n\n(also accessible via \n\n<a href=\"http://www.autodesk.com/apitraining\">\nwww.autodesk.com/apitraining</a>),\n\nfilter for 'Revit MEP API', and click on the \n\n<a href=\"http://download.autodesk.com/media/adn/RevitMEPAPI_27Aug09.zip\">\ndownload</a> \n\nlink.\nThis material is accessible to all developers, regardless of ADN membership.</p>"
  }
]