[
  {
    "original_filename": "0707_etabs_rst_link",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0707_etabs_rst_link",
    "header_text": "Curved Analytical Model Approximation and Etabs Structural Link",
    "local_header_href": "#curved-analytical-model-approximation-and-etabs-structural-link",
    "chunk_text": "<h3>Curved Analytical Model Approximation and Etabs Structural Link</h3><p>Here is a note on how to retrieve approximate straight line segments for the analytical model of curved structural elements, and on a free Revit Structural link tool to the\n\n<a href=\"http://www.csiberkeley.com\">\nComputers and Structures, Inc. (CSI)</a>\n<a href=\"http://www.csiberkeley.com/etabs\">\nETABS</a>\n\nbuilding analysis and design environment.\n\n<p>A couple of weeks ago Nasser emailed me about a method he was trying to use for his Revit Structure link add-in.\nHe was trying to export floor elements with curved edges to the structural analysis software ETABS.\nLike many other structural analysis applications, ETABS does not handle arcs and splines, so linear segmentation of curved elements is required.\n\n<p>The Revit API AnalyticalModel class provides an Approximate method which promises to achieve exactly that.\nUnfortunately, it is not yet implemented for this case.\n\n<p>A simple workaround is to use the Tessellate method instead.\nIn addition, by skipping some of the intermediate points, the precision of the approximation can be lowered if needed.\n\n<p>Here is an example of how the Tessellate method can be used instead of the Approximate.\nThe minimum line segment length required is defined by the LineSegmentLength argument:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Curve</span>&gt;\n    GetStraightLineCurvesFromFloorAnalyticalModel(\n      <span class=\"teal\">Document</span> doc,\n      <span class=\"teal\">AnalyticalModel</span> analyticalmodel,\n      <span class=\"blue\">double</span> lineSegmentLength )\n  {\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Curve</span>&gt; Curves;\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Curve</span>&gt; SegmentedCurves = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt;();\n \n    <span class=\"green\">// If no analytical model then skip</span>\n \n    <span class=\"blue\">if</span>( analyticalmodel == <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n    }\n \n    Curves = analyticalmodel.GetCurves(\n      <span class=\"teal\">AnalyticalCurveType</span>.ActiveCurves );\n \n    <span class=\"green\">// This does not work:</span>\n    <span class=\"green\">//Curves = analyticalmodel.GetCurves(</span>\n    <span class=\"green\">//  AnalyticalCurveType.ApproximatedCurves);</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Curve</span> curve <span class=\"blue\">in</span> Curves )\n    {\n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = curve.Tessellate();\n \n      <span class=\"blue\">int</span> ibefore = 0;\n \n      <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 1; i &lt; pts.Count; i++ )\n      {\n        <span class=\"blue\">double</span> distance\n          = GeometryUtility.Get3DDistance(\n            pts[ibefore], pts[i] );\n \n        <span class=\"blue\">if</span>( pts.Count - 1 == i )\n        {\n          SegmentedCurves.Add(\n            doc.Application.Create.NewLineBound(\n              pts[ibefore], pts[i] ) );\n        }\n        <span class=\"blue\">else</span>\n        {\n          <span class=\"blue\">if</span>( distance &lt; lineSegmentLength )\n          {\n            <span class=\"blue\">continue</span>;\n          }\n          <span class=\"blue\">else</span>\n          {\n            SegmentedCurves.Add(\n              doc.Application.Create.NewLineBound(\n                pts[ibefore], pts[i] ) );\n \n            ibefore = i;\n          }\n        }\n      }\n    }\n    <span class=\"blue\">return</span> SegmentedCurves;\n  }\n</pre>\n<p>This method is part of\n\n<a href=\"http://www.nassermarafi.com/?page_id=69\">\nNasser's Revit Tools</a>,\n\na Revit Structural link add-in to integrate with the\n\n<a href=\"http://www.csiberkeley.com\">\nComputers and Structures, Inc. (CSI)</a>\n<a href=\"http://www.csiberkeley.com/etabs\">\nETABS</a>\n\nbuilding analysis and design environment.\n\n<p>Nasser's add-in exports the following elements to ETABS: Columns, Braces, Beams, Walls, Slabs, Openings, Grids, Levels and Rigid Links.\nIt recognizes most family elements.\nCustom created structural family instance elements will be exported as null, and their properties can later be adjusted in ETABS.</p>\n<p>Here is a sample model in Revit:<p>\n<center>\n<img alt=\"Revit sample model\" src=\"img/nasser_example_revit.png\"/>\n</center>\n<p>This is the result of exporting it to ETABS:<p>\n<center>\n<img alt=\"Revit model exported to ETABS\" src=\"img/nasser_example_etabs.png\"/>\n</center>\n<p>Visit\n\n<a href=\"http://www.nassermarafi.com\">www.nassermarafi.com</a> for\n\nmore information or to access the free download.\n\nFeel free to\n\n<a href=\"mailto:me@nassermarafi.com\">contact Nasser directly</a> for\n\nany questions or other issues.</p>\n</p></p></p></p></p></p></p></p></p></p>"
  }
]