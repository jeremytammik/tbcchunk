[
  {
    "original_filename": "0519_set_duct_width_height",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0519_set_duct_width_height",
    "header_text": "Setting Duct Width and Height Requires Regeneration",
    "local_header_href": "#setting-duct-width-and-height-requires-regeneration",
    "chunk_text": "<h3>Setting Duct Width and Height Requires Regeneration</h3><p>Whenever you have a problem modifying or querying the model with your Revit plug-in, one of the first things to check is always your regeneration mode.\nIf you are using the manual regeneration option, you need to check whether you possibly omitted a required intermediate regeneration call.\nIt seems that there can never be enough reminders of this.\nHere is another case at hand:\n\n<p><strong>Question:</strong> I am sizing rectangular duct fittings through the API, and I noticed that the different dimensions for width and height must be set in different transactions. \nOtherwise, you lose the first size change when the second one is made.\n\n<p>Is this a feature or a bug? \n\n<p>The requirement to start and commit a separate transaction for each dimension change makes sizing of the network quite clumsy and even slow with larger drawings.\n\n<p>Here are two simple example code snippets in managed C++ setting the width and height of an elbow to 500x500 mm.\nThey have both the TransactionMode and the RegenerationOption set to Manual.\nThe first one uses a single transaction and does not work.\nThe second uses two transactions and does.\n\n<p>Here is the first test with the size changes in same transaction:\n\n<pre class=\"code\">\nResult AddinTest1::Execute(\n  ExternalCommandData^ commandData, \n  System::String^% message, \n  ElementSet^ elements)\n{  \n  Document ^doc = commandData-&gt;Application\n    -&gt;ActiveUIDocument-&gt;Document;\n \n  <span class=\"green\">// Duct/bend IDs in example project</span>\n  \n  <span class=\"blue\">int</span> west_east   = 505594;\n  <span class=\"blue\">int</span> north_south = 505598;\n  <span class=\"blue\">int</span> bend_id     = 505610;\n \n  ElementId ^elemId = <span class=\"blue\">gcnew</span> ElementId(west_east);\n  Element ^ductElem1 = doc-&gt;Element::get(elemId);\n \n  elemId = <span class=\"blue\">gcnew</span> ElementId(north_south);\n  Element ^ductElem2 = doc-&gt;Element::get(elemId);\n \n  elemId = <span class=\"blue\">gcnew</span> ElementId(bend_id);\n  Element ^bendElem1 = doc-&gt;Element::get(elemId);\n \n  FamilyInstance ^bend \n    = <span class=\"blue\">safe_cast</span>&lt;FamilyInstance^&gt;(bendElem1);\n \n  ConnectorSet ^cSet \n    = bend-&gt;MEPModel-&gt;ConnectorManager-&gt;Connectors;\n \n  Transaction tr(doc, L<span class=\"maroon\">\"sizing\"</span>);\n  tr.Start();\n \n  <span class=\"blue\">for</span> <span class=\"blue\">each</span> (Connector ^connector <span class=\"blue\">in</span> cSet)\n  {\n    <span class=\"blue\">if</span> (connector-&gt;ConnectorType \n      != ConnectorType::EndConn)\n    {\n      <span class=\"blue\">continue</span>;\n    }\n \n    connector-&gt;Width::set((500 * 0.0032808399));\n    connector-&gt;Height::set((500 * 0.0032808399));   <span class=\"green\">// This is not set into the drawing</span>\n    <span class=\"blue\">break</span>;\n  }\n \n  tr.Commit();\n \n  <span class=\"blue\">return</span> Result::Succeeded;\n}\n</pre>\n\nHere is the second test doing exactly the same thing but using two separate transactions:\n\n<pre class=\"code\">\n  Transaction tr(doc, L<span class=\"maroon\">\"sizing\"</span>);\n  tr.Start();\n \n  <span class=\"green\">// We do separate transactions for both dimensions</span>\n \n  <span class=\"blue\">for</span> <span class=\"blue\">each</span> (Connector ^connector <span class=\"blue\">in</span> cSet)\n  {\n    <span class=\"blue\">if</span> (connector-&gt;ConnectorType \n      != ConnectorType::EndConn)\n    {\n      <span class=\"blue\">continue</span>;\n    }\n \n    connector-&gt;Width::set((500 * 0.0032808399));\n    <span class=\"blue\">break</span>;\n  }\n \n  tr.Commit();\n \n  tr.Start();\n \n  <span class=\"blue\">for</span> <span class=\"blue\">each</span> (Connector ^connector <span class=\"blue\">in</span> cSet)\n  {\n    <span class=\"blue\">if</span> (connector-&gt;ConnectorType \n      != ConnectorType::EndConn)\n    {\n      <span class=\"blue\">continue</span>;\n    }\n \n    connector-&gt;Height::set((500 * 0.0032808399));\n    <span class=\"blue\">break</span>;\n  }\n \n  tr.Commit();\n</pre>\n<p><strong>Answer:</strong> I have two suggestions for you, but only one is meant seriously:\n\n<ol>\n<li>You could use automatic regeneration mode. \nI would not recommend this, however, for many reasons, not least because it is obsolete and will soon be removed.\n<li>You could try to regenerate the document between the setting of the two parameters. Does this help?\n</li></li></ol>\n<p><strong>Response:</strong> Thanks for your quick and complete answer. \n\n<p>Yes, regeneration between those settings <strong>does</strong> help; no whole additional transaction procedure is needed.\n\n<p>Thanks again and best wishes for this New Year 2011!\n</p></p></p></p></p></p></p></p></p></p>"
  }
]