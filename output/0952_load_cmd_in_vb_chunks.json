[
  {
    "original_filename": "0952_load_cmd_in_vb",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0952_load_cmd_in_vb",
    "header_text": "Load Your Own External Command on the Fly",
    "local_header_href": "#load-your-own-external-command-on-the-fly",
    "chunk_text": "<h3>Load Your Own External Command on the Fly</h3><p>How to reload an external Revit command without having to restart the Revit session has been a subject of discussion many times in the past, e.g. in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/reload-add-in-for-debug-without-restart.html\">\nreloading an add-in for debug without restart</a>,\n\nwhich lists four possibilities:\n\n<ul>\n<li>Set up Visual Studio to efficiently load the desired project and the debugee, use the standard cycle hitting F5 to start debugging, and stop debugging when you need to make code changes.</li>\n<li>Use the\n\n<a href=\"https://github.com/hakonhc/RevitRubyShell\">\nRevitRubyShell</a> or\n\n<a href=\"http://code.google.com/p/revitpythonshell\">\nRevitPythonShell</a> to\n\nwork interactively with the Revit API on the command line.</li>\n<li>Use the SharpDevelop IDE, temporarily converting the debugee source code to a macro.</li>\n<li>Use the AddInManager.</li>\n</ul>\n<p>Revit 2014 adds some new twists to the scenario by the introduction of the MacroManager API, which enables programmatic listing, creating, removing, editing, debugging, and running of macros, and the option to load an add-in mid-session without restarting Revit.\nUnfortunately, there is no option to unload an add-in, once loaded.</p>\n<p>The difficulty is that the AppDomain into which the add-in is loaded locks the add-in DLL, preventing any further changes to it.</p>\n<p>One could create a new individual AppDomain for each add-in to work around that.</p>\n<p>Another option is to not load the add-in from a DLL at all, but stream in the source code using reflection instead.</p>\n<p>Here is an example of the latter approach in VB by\nDavid Rock and Yamin Tengono of\n\n<a href=\"http://www.bse.com.au\">\nBSE – Building Services Engineers</a>.\n\nDavid says:</p>\n<p>I am running my commands from the ribbon with the following function:</p>\n<pre class=\"code\">\n<span class=\"blue\">Public</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Sub</span> InvokeRevitCommand( _\n  <span class=\"blue\">ByVal</span> strCommandName <span class=\"blue\">As</span> <span class=\"blue\">String</span>,\n  <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> <span class=\"blue\">Object</span>,\n  <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>,\n  <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> <span class=\"blue\">Object</span>,\n  <span class=\"blue\">ByVal</span> fullPathDllName <span class=\"blue\">As</span> <span class=\"blue\">String</span>)\n \n  <span class=\"green\">' Load the assembly into a byte array. </span>\n  <span class=\"green\">' This way it WON'T lock the dll to disk.</span>\n \n  <span class=\"blue\">Dim</span> assemblyBytes <span class=\"blue\">As</span> <span class=\"blue\">Byte</span>() = File.ReadAllBytes(\n    fullPathDllName)\n \n  <span class=\"blue\">Dim</span> objAssembly <span class=\"blue\">As</span> Assembly = Assembly.Load(\n    assemblyBytes)\n \n  <span class=\"green\">' Walk through each type in the assembly.</span>\n \n  <span class=\"blue\">For</span> <span class=\"blue\">Each</span> objType <span class=\"blue\">As</span> Type <span class=\"blue\">In</span> objAssembly.GetTypes()\n    <span class=\"green\">' Pick up a class.</span>\n    <span class=\"blue\">If</span> objType.IsClass <span class=\"blue\">Then</span>\n      <span class=\"blue\">If</span> objType.Name.ToLower = strCommandName.ToLower <span class=\"blue\">Then</span>\n \n        <span class=\"blue\">Dim</span> ibaseObject <span class=\"blue\">As</span> <span class=\"blue\">Object</span> = Activator.CreateInstance(objType)\n \n        <span class=\"blue\">Dim</span> arguments <span class=\"blue\">As</span> <span class=\"blue\">Object</span>() = <span class=\"blue\">New</span> <span class=\"blue\">Object</span>() {\n          commandData, message, elements}\n \n        <span class=\"blue\">Dim</span> result <span class=\"blue\">As</span> <span class=\"blue\">Object</span>\n \n        result = objType.InvokeMember(\n          <span class=\"maroon\">\"Execute\"</span>,\n          BindingFlags.[Default] <span class=\"blue\">Or</span> BindingFlags.InvokeMethod,\n          <span class=\"blue\">Nothing</span>, ibaseObject, arguments)\n \n        <span class=\"blue\">Exit For</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n  <span class=\"blue\">Next</span>\n<span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n</pre>\n<p>This way I can re-build the DLL without exiting Revit and my sometimes quite large Revit projects.</p>\n<p>I have over 100 Revit commands now and most are loaded via this dynamic method.\nThis makes it super easy to update them on the fly.</p>\n<p>Very many thanks to David and Yamin for developing and sharing this effective solution!</p>\n</p>"
  }
]