[
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "What's New in the Revit 2016 API",
    "local_header_href": "#whats-new-in-the-revit-2016-api",
    "chunk_text": "<h3>What's New in the Revit 2016 API</h3><p>Here is the online version of the 'What's New' section of the Revit 2016 API help file.</p><p>The information provided here is extracted from the document 'Revit Platform API Changes and Additions.docx' provided with the Revit SDK.\nAs said, is also included in the 'What's New' section in the Revit API help file RevitAPI.chm.</p><p>This is very important information, even for later reference. The explanation of the changes and enhancements are well worth referring to later on as well, to understand how things work together the way they do.</p><p>I am putting it online to ensure that this valuable information is available through web searches.</p><p>To look up the introduction of older features, here are links to the previous 'What's New in the API' discussions:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2010-api.html\">What's New in the Revit 2010 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2011-api.html\">What's New in the Revit 2011 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">What's New in the Revit 2012 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/whats-new-in-the-revit-2013-api.html\">What's New in the Revit 2013 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">What's New in the Revit 2014 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html\">What's New in the Revit 2015 API</a></li>\n</ul><p>For more detailed information, please refer to the complete API documentation in the SDK and the online\n<a href=\"http://help.autodesk.com/view/RVT/2016/ENU/?guid=GUID-F0A122E0-E556-4D0D-9D0F-7E72A9315A42\">Revit API Developers Guide</a>\nprovided within the\n<a href=\"http://help.autodesk.com/view/RVT/2016/ENU\">Revit 2016 Help</a>.</p><p>For an introduction and quick overview of the main highlights of the new API functionality and a couple of sample application demonstrating their use, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/04/revit-2016-api-news-and-devdays-online-recording.html\">\nRevit 2016 API News and DevDays Online Recording</a>.</p><p>Before diving into the API news, a note on RevitLookup:</p><ul>\n<li><a href=\"#2\">RevitLookup for Revit 2016 updated again</a></li>\n<li><a href=\"#3\">Major changes and renovations to the Revit API</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RevitLookup for Revit 2016 Updated Again",
    "local_header_href": "#revitlookup-for-revit-2016-updated-again",
    "chunk_text": "<h4>RevitLookup for Revit 2016 Updated Again</h4><p>I released the first version of RevitLookup for Revit 2016 two days ago, and am following up with a little fix.</p><p>In the post-build event, the previous version was copying the add-in manifest and DLL assembly it produced to the Revit 2015 add-ins folder.</p><p>Happily I happened to try to make use of it in Revit 2015 and thus noticed quite soon, because obviously the 2016 version did not work there.</p><p>The new updated version with that rectified is provided in <a href=\"https://github.com/jeremytammik/RevitLookup/releases/tag/2016.0.0.7\">release 2016.0.0.7</a></p><p>In general, you can simply grab the latest version from the <a href=\"https://github.com/jeremytammik/RevitLookup\">RevitLookup GitHub repository</a>.</p><p>If you need a version for Revit 2015, the latest available one for that is <a href=\"https://github.com/jeremytammik/RevitLookup/releases/tag/2015.0.0.8\">release 2015.0.0.8</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Major changes and renovations to the Revit API",
    "local_header_href": "#major-changes-and-renovations-to-the-revit-api",
    "chunk_text": "<h3>Major changes and renovations to the Revit API</h3><p>This document consists of two main sections, on API changes and additions:</p><ul>\n<li><a href=\"#4\">API Changes</a></li>\n<ul>\n<li><a href=\"#4.01\">NewFamilyInstance() exception when presented inactive FamilySymbols</a></li>\n<li><a href=\"#4.02\">TextNote and Leader API behavior and interface changes</a></li>\n<li><a href=\"#4.03\">DatumPlane API (Levels, Grids, Reference Planes) changes</a></li>\n<li><a href=\"#4.04\">Structural API changes</a></li>\n<li><a href=\"#4.05\">Geometry API behavior and interface changes</a></li>\n<li><a href=\"#4.06\">Energy Analysis and gbXML API changes</a></li>\n<li><a href=\"#4.07\">RevisionSettings API changes</a></li>\n<li><a href=\"#4.08\">ExternalDefinitionCreationOptions</a></li>\n<li><a href=\"#4.09\">MirrorElements</a></li>\n<li><a href=\"#4.10\">ReferenceIntersector</a></li>\n<li><a href=\"#4.11\">BaseImportOptions</a></li>\n<li><a href=\"#4.12\">BoundarySegment</a></li>\n<li><a href=\"#4.13\">ParameterType enum change</a></li>\n<li><a href=\"#4.14\">Schedule view rotation behavior</a></li>\n<li><a href=\"#4.15\">Creating HostedSweeps (Fascia, Gutter, SlabEdge)</a></li>\n<li><a href=\"#4.16\">DirectShape API and behavioral changes</a></li>\n<li><a href=\"#4.17\">Wire API behavioral changes</a></li>\n<li><a href=\"#4.18\">BrowserOrganization enum namespace change</a></li>\n<li><a href=\"#4.19\">AdaptivePointOrientationType enumerated items renamed</a></li>\n<li><a href=\"#4.20\">CompoundStructure.SetLayers() behavioral change</a></li>\n<li><a href=\"#4.21\">API events – behavioral change</a></li>\n<li><a href=\"#4.22\">Collections removed from API</a></li>\n<li><a href=\"#4.23\">Methods and properties removed from API </a></li>\n<li><a href=\"#4.24\">Classes removed from API</a></li>\n</ul>\n<li><a href=\"#5\">API Additions</a></li>\n<ul>\n<li><a href=\"#5.01\">Worksharing API additions</a></li>\n<li><a href=\"#5.02\">Parameter API additions</a></li>\n<li><a href=\"#5.03\">Geometry API additions</a></li>\n<li><a href=\"#5.04\">Custom Export API improvements</a></li>\n<li><a href=\"#5.05\">Export API additions</a></li>\n<li><a href=\"#5.06\">Dimension API additions</a></li>\n<li><a href=\"#5.07\">Reinforcement API additions</a></li>\n<li><a href=\"#5.08\">Structural Analytical Model API additions</a></li>\n<li><a href=\"#5.09\">MEP Fabrication API</a></li>\n<li><a href=\"#5.10\">View3D additions</a></li>\n<li><a href=\"#5.11\">ScheduleDefinition </a></li>\n<li><a href=\"#5.12\">StairsType API changes</a></li>\n<li><a href=\"#5.13\">ElectricalSetting API additions</a></li>\n<li><a href=\"#5.14\">PanelScheduleView</a></li>\n<li><a href=\"#5.15\">FamilyInstance additions</a></li>\n<li><a href=\"#5.16\">Category API additions</a></li>\n<li><a href=\"#5.17\">Family API additions</a></li>\n<li><a href=\"#5.18\">ComponentRepeater additions</a></li>\n<li><a href=\"#5.19\">Point cloud API additions</a></li>\n<li><a href=\"#5.20\">Application additions</a></li>\n<li><a href=\"#5.21\">Thin lines options</a></li>\n<li><a href=\"#5.22\">3D view API additions</a></li>\n<li><a href=\"#5.23\">UI API additions</a></li>\n<li><a href=\"#5.24\">AddInUtility API additions</a></li>\n</ul>\n</ul><a name=\"4\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "API changes",
    "local_header_href": "#api-changes",
    "chunk_text": "<h3>API changes</h3><a name=\"4.01\"></a><h3newfamilyinstance() exception=\"\" familysymbols<=\"\" h3=\"\" inactive=\"\" presented=\"\" when=\"\"> <!-- h2 -->\n<ul>\n<li>All NewFamilyInstance() overloads on Autodesk.Revit.Creation.Document and Autodesk.Revit.Creation.ItemFactoryBase now check to ensure that the input FamilySymbol is active (FamilySymbol.IsActive). Symbols that are not used in the document may be deactivated to conserve memory and regeneration time. When the symbol is inactive, its geometry is empty and cannot be accessed. In order to access the geometry of a symbol that is not active in the document, the symbol should first be activated by calling FamilySymbol.Activate().</li>\n<li>If the symbol is not active the method will now throw. This prevents the situation where the new FamilyInstance created will not generate proper geometry or intersections with related elements.</li>\n</ul>\n<a name=\"4.02\"></a>\n<h3>TextNote and Leader API behavior and interface changes</h3> <!-- h2 -->\n<p>The Revit API classes related to TextNotes and Leaders have been significantly renovated.</p>\n<h4>TextElement class</h4> <!-- h3 -->\n<p>New methods and properties</p>\n<ul>\n<li>TextElement.Width – Width of the area of the text content</li>\n<ul><li>This replaces <b>TextNote.LineWidth</b></li></ul>\n<li>TextElement.HorizontalAlignment – Horizontal alignment of the text content within the text box of the element.</li>\n<li>TextElement.VerticalAlignment – Vertical alignment of the text content within the text box of the element.</li>\n<ul><li>Collectively, these two new properties replace <b>TextNote.Align</b></li></ul>\n<li>TextElement.KeepRotatedTextReadable – A flag to control how text behaves within a rotated text box.</li>\n<li>TextElement.IsTextWrappingActive – A flag identifying whether text-wrapping is currently active in this text element or not.</li>\n</ul>\n<h4>TextNote class</h4> <!-- h3 -->\n<p>New methods and properties </p>\n<ul>\n<li>TextNote.Create – Creates a new text note element with the given properties. This includes a TextNoteOptions object, which encapsulates several options used for creating notes.</li>\n<ul>\n<li>This replaces <b>ItemFactoryBase.NewTextNote()</b></li>\n<li>This change also fixes an issue where creating a text note would incorrectly wrap text lines to be too short</li>\n</ul>\n<li>TextNote.LeaderCount – The number of leader objects currently attached to the text note.</li>\n<li>TextNote.LeaderLeftAttachment – Gets/sets the attachment position of leaders on the left side of the text note.</li>\n<li>TextNote.LeaderRightAttachment – Gets/sets the attachment position of leaders on the right side of the text note.</li>\n<li>TextNote.GetLeaders – Returns a collection of leaders currently attached to the text note.</li>\n<ul>\n<li>This replaces <b>TextNote.Leaders</b></li>\n</ul>\n</ul>\n<h4>Leaders</h4> <!-- h3 -->\n<p>The LeaderArray class has been deprecated, thus members which referred to it have been replaced:</p>\n<ul>\n<li><b>Deprecated member → Replacement</b></li>\n<li>TextNote.Leaders → TextNote.GetLeaders()</li>\n<li>AnnotationSymbol.Leaders → AnnotationSymbol.GetLeaders()</li>\n</ul>\n<p>The Leader class now includes new members:</p>\n<ul>\n<li>Leader.Anchor – Anchor point of the Leader.</li>\n<li>Leader.LeaderShape – Geometric style of the leader.</li>\n<li>Leader.IsOwned – Validates that the leader is attached to (owned by) a valid element, such as an annotation tag.</li>\n</ul>\n<a name=\"4.03\"></a>\n<h3>DatumPlane API (Levels, Grids, Reference Planes) changes</h3> <!-- h2 -->\n<h4>DatumPlane</h4> <!-- h3 -->\n<p>The new class: </p>\n<ul>\n<li>Autodesk.Revit.DB.DatumPlane</li>\n</ul>\n<p>is now a base class for element types that represent a datum surface (level, grid or reference plane)</p>\n<p>This base classes offers many new methods and properties:</p>\n<ul>\n<li>DatumPlane.ShowBubble() – Shows bubble in the specified view. </li>\n<li>DatumPlane.HideBubble() – Hides bubble in the specified view.</li>\n<li>DatumPlane.IsBubbleVisibleInView() – Identifies if the bubble is visible or not in a view. </li>\n<li>DatumPlane.HasBubble() – Identifies if the DatumPlane has bubble or not.</li>\n<li>DatumPlane.IsVisibleInView() – Checks if the datum plane is visible in the specified view. </li>\n<li>DatumPlane.Maximize3DExtents() – Maximize the 3D extents of datum plane.</li>\n<li>DatumPlane.GetDatumExtentType() – Identifies if the end of the datum plane is aligned with 3D extents or is set to vary specifically in the indicated view.</li>\n<li>DatumPlane.SetDatumExtentType() – Sets whether or not the end of the datum plane is aligned with 3D extents or is set to vary specifically in the indicated view. </li>\n<li>DatumPlane.GetCurvesInView() – Gets the extents to match the curves within a view. </li>\n<li>DatumPlane.SetCurveInView() – Sets the extents to match the curve. </li>\n<li>DatumPlane.IsCurveValidInView() – Checks if the curve is valid to be as the extents for the datum plane in a view. The curve must be bound and coincident with the original one of the datum plane.</li>\n<li>DatumPlane.GetPropagationViews() – Gets a list of candidate views which are parallel to the current view and to which the 2D extents of the datum may be propagated.</li>\n<li>DatumPlane.PropagateToViews() – Propagates the 2D extents applied to this datum to the specified parallel views. </li>\n<li>DatumPlane.IsLeaderValid() – Checks if the specified leader is valid for the datum plane in the given view. </li>\n<li>DatumPlane.GetLeader() – Gets a copy of the leader applied to the indicated end of the datum plane. </li>\n<li>DatumPlane.SetLeader() – Sets the leader to the indicated end of the datum plane. </li>\n<li>DatumPlane.AddLeader() – Adds leader to the indicated end of the datum plane. </li>\n</ul>\n<h4>Level</h4> <!-- h3 -->\n<p>Some members related to levels have been obsoleted and replaced:</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>Level.LevelType → Element.GetTypeId(), Element.ChangeTypeId()</li>\n<li>Level.PlaneReference → Level.GetPlaneReference()</li>\n<li>ItemFactoryBase.NewLevel() → Level.Create()</li>\n</ul>\n<h4>Grid</h4> <!-- h3 -->\n<p>Some members related to grids have been added, or obsoleted and replaced:</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>Grid.GridType → Element.GetTypeId(), Element.ChangeTypeId()</li>\n<li>Grid.ExtendToAllLevels() → DatumPlane.MaximizeExtents()</li>\n<li>N/A → Grid.SetVerticalExtents() – Adjusts the grid to extend through only the vertical range between bottom and top.</li>\n<li>Autodesk.Revit.Creation.Document.NewGrid() → Grid.Create()</li>\n<li>Autodesk.Revit.Creation.Document.NewGrids() → Use Grid.Create() repeated as necessary.</li>\n</ul>\n<h4>ReferencePlane</h4> <!-- h3 -->\n<p>Some members related to levels have been obsoleted and replaced:</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>ReferencePlane.Plane → ReferencePlane.GetPlane()</li>\n<li>ReferencePlane.Reference → ReferencePlane.GetReference()</li>\n</ul>\n<a name=\"4.04\"></a>\n<h3>Structural API changes</h3> <!-- h2 -->\n<h4>ContFooting and ContFootingType class and members renamed</h4> <!-- h3 -->\n<p>The ContFooting and ContFootingType classes have been replaced by new classes:</p>\n<ul>\n<li>WallFoundation</li>\n<li>WallFoundationType</li>\n</ul>\n<p>The following members have been modified or added to WallFoundation:</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>ContFooting.FootingType → WallFoundation.GetFoundationType(), WallFoundation.SetFoundationType()</li>\n<li>Document.NewFoundationWall(ContFootingType, Wall) → Document.NewFoundationWall(WallFoundationType, Wall)</li>\n<li>N/A → WallFoundation.WallId</li>\n</ul>\n<h4>AnalyticalModel</h4> <!-- h3 -->\n<ul>\n<li>AnalyticalModel.GetLocalCoordinateSystem() now supports cylindrical walls and bent analytical model sticks.</li>\n</ul>\n<h4>AnalyticalModelSweptProfile class renamed and relocated</h4> <!-- h3 -->\n<p>The class:</p>\n<ul>\n<li>Autodesk.Revit.DB.Structural.AnalyticalModelSweptProfile</li>\n</ul>\n<p>has been renamed and moved to become:</p>\n<ul>\n<li>Autodesk.Revit.DB.SweptProfile</li>\n</ul>\n<p>All members of the class stay the same.</p>\n<p>Two members have been transferred from the AnalyticalModel class to the FamilyInstance class:</p>\n<ul>\n<li><b>Removed member → New/replacement member</b></li>\n<li>AnalyticalModel.HasSweptProfile → FamilyInstance.HasSweptProfile</li>\n<li>AnalyticalModel.GetSweptProfile() → FamilyInstance.GetSweptProfile()</li>\n</ul>\n<h4>Loads</h4> <!-- h3 -->\n<p>The Revit API classes related to Loads have been significantly renovated.</p>\n<p>The new class</p>\n<ul>\n<li>Autodesk.Revit.DB.Structure.LoadBase</li>\n</ul>\n<p>has been introduced as a new base class for PointLoad, LineLoad and AreaLoad. Properties of this class affect properties of all 3 types of loads:</p>\n<ul>\n<li>LoadBase.LoadCaseId – read/write property representing the load case for this load</li>\n<li>LoadBase.IsHosted</li>\n<li>LoadBase.LoadCase</li>\n<li>LoadBase.IsReaction</li>\n</ul>\n<p>In the subclasses of LoadBase, there are some new members, and many members have been deprecated and replaced, as shown in the following table.</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>PointLoad.Force → PointLoad.ForceVector</li>\n<li>PointLoad.Moment → PointLoad.MomentVector</li>\n<li>N/A → PointLoad.Point – this property is now read/write.</li>\n<li>LineLoad.Point[] → LineLoad.StartPoint, LineLoad.EndPoint, LineLoad.SetPoints()</li>\n<li>LineLoad.Force[], LineLoad.Force1, LineLoad.Force2 → LineLoad.ForceVector1, LineLoad.ForceVector2</li>\n<li>LineLoad.Moment[], LineLoad.Moment1, LineLoad.Moment2 → LineLoad.MomentVector1, LineLoad.MomentVector2</li>\n<li>LineLoad.UniformLoad → LineLoad.IsUniform</li>\n<li>N/A → LineLoad.IsProjected</li>\n<li>Document.NewLineLoad() → LineLoad.Create()</li>\n<li>AreaLoad.NumLoops, AreaLoad.NumCurves[], AreaLoad.Curve[] → AreaLoad.GetLoops(), AreaLoad.SetLoops()</li>\n<li>AreaLoad.Force[], AreaLoad.Force1, AreaLoad.Force2, AreaLoad.Force3 → AreaLoad.ForceVector1, AreaLoad.ForceVector2, AreaLoad.ForceVector3</li>\n<li>AreaLoad.RefPoint[] → AreaLoad.GetRefPoint()</li>\n<li>N/A → AreaLoad.IsProjected</li>\n<li>N/A → AreaLoad.Area</li>\n<li>Document.NewAreaLoad() → AreaLoad.Create()</li>\n</ul>\n<h4>Load cases and load combinations</h4> <!-- h3 -->\n<p>The Revit API classes related to Load Cases and Load Combinations have been significantly renovated. This has introduced new members to the LoadCombnation, LoadCase, LoadNature and LoadUsage class, and resulted in several previously existing member being marked deprecated and replaced, as shown in this table:</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>Document.NewLoadCombination() → LoadCombination.Create()</li>\n<li>LoadCombination.CombinationCaseName[] → LoadCombination.GetCaseOrCombinationIds(), obtain the name from associated LoadCase element</li>\n<li>LoadCombination.CombinationNatureName[] → LoadCombination.GetCaseOrCombinationIds(), obtain the name from associated LoadNature element</li>\n<li>LoadCombination.Factor[], LoadCombination.NumberOfComponents → LoadCombination.GetComponents(), LoadCombination.SetComponents()</li>\n<li>LoadCombintation.UsageName[], LoadCombination.NumberOfUsages → LoadCombination.GetUsageIds(), LoadCombination.SetUsageIds()</li>\n<li>LoadCombination.CombinationState, LoadCombination.CombinationStateIndex → LoadCombination.State (translate the enum to string or int as required)</li>\n<li>LoadCombination.CombinationType, LoadCombination.CombinationTypeIndex → LoadCombination.Type (translate the enum to string or int as required)</li>\n<li>N/A → LoadCombination.IsThirdPartyGenerated</li>\n<li>Document.NewLoadCase() → LoadCase.Create()</li>\n<li>N/A → LoadCase.Name is now connected to this element's name properly</li>\n<li>N/A → LoadCase.Number</li>\n<li>N/A → LoadCase.NatureId</li>\n<li>N/A → LoadCase.NatureCategory</li>\n<li>Document.NewLoadNature() → LoadNature.Create()</li>\n<li>N/A → LoadNature.Name is now connected to this element's name properly</li>\n<li>Document.NewLoadUsage() → LoadUsage.Create()</li>\n<li>N/A → LoadUsage.Name is now connected to this element's name properly</li>\n</ul>\n<h4>LoadComponent</h4> <!-- h3 -->\n<p>The new class:</p>\n<ul>\n<li>Autodesk.Revit.DB.Structure.LoadComponent</li>\n</ul>\n<p>is responsible for association of LoadCase or LoadCombination ids as factors in the load combination.</p>\n<h4>BoundaryConditions</h4> <!-- h3 -->\n<p>In the BoundaryConditions class, there are some new members, and some members have been deprecated and replaced, as shown in the following table.</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>BoundaryConditions.AssociatedLoad, BoundaryConditions.associateWithLoad() → BoundaryConditions.AssociatedLoadId</li>\n<li>N/A → BoundaryConditions.HostElementId</li>\n<li>BoundaryConditions.Curve[] → BoundaryConditions.GetCurve()</li>\n<li>BoundaryConditions.NumCurves, BoundaryConditions.Curve[] → BoundaryConditions.GetLoops()</li>\n</ul>\n<h4>RebarShapeDefinition</h4> <!-- h3 -->\n<p>New validation has been introduced to confirm that the name of a shared parameter to be added was notalready used by another shared parameter on the element. This new validation was added to methods:</p>\n<ul>\n<li>RebarShapeDefinition.AddParameter()</li>\n<li>RebarShapeDefinition.AddFormulaParameter()</li>\n</ul>\n<p>and this situation will now trigger an exception.</p>\n<a name=\"4.05\"></a>\n<h3>Geometry API behavior and interface changes</h3> <!-- h2 -->\n<h4>PlanarFace</h4> <!-- h3 -->\n<p>The properties:</p>\n<ul>\n<li>PlanarFace.Normal</li>\n<li>PlanarFace.Vector[int]</li>\n</ul>\n<p>have been obsoleted.</p>\n<p>The replacement properties are:</p>\n<ul>\n<li>PlanarFace.FaceNormal</li>\n<li>PlanarFace.XVector</li>\n<li>PlanarFace.YVector</li>\n</ul>\n<p>Note that PlanarFace.FaceNormal will return a vector consistently pointing out of the solid that this face is a boundary for (if it is a part of a solid) (unlike PlanarFace.Normal which it replaced).</p>\n<h4>Curve.MakeBound() and Curve.MakeUnbound()</h4> <!-- h3 -->\n<p>These previously threw an exception if the Curve was marked read-only (IsReadOnly). These methods now will succeed, but cause the read-only Curve handle to automatically contain a copy of the original curve which is disconnected from its source. It is still not possible to modify a read-only geometry object directly through manipulation of its geometry.</p>\n<h4>CurveLoop iteration</h4> <!-- h3 -->\n<p>When iterating Curves contained in a CurveLoop, a copy is now received instead of a reference to the original CurveLoop Curve. This is to prevent possible instability due to attempting to modify the CurveLoop's Curves directly, or if the CurveLoop is collected by the garbage collector while a Curve is still in use.</p>\n<h4>CurveLoop.CreateViaThicken()</h4> <!-- h3 -->\n<p>This method now enforces that the thickness value parameter will result in a curve which exceed Revit's short curve tolerance (Application.ShortCurveTolerance).</p>\n<h4>Point creation</h4> <!-- h3 -->\n<p>New methods to create a Point object had been added.</p>\n<ul>\n<li>Point.Create(XYZ) creates a Point at given coordinates.</li>\n<li>Point.Create(XYZ, ElementId) creates a Point at given coordinates and associates with it a GStyle with the specified ElementId</li>\n</ul>\n<p>The methods replace the deprecated:</p>\n<ul>\n<li>Autodesk.Revit.Creation.Application.NewPoint()</li>\n</ul>\n<h4>TessellatedShapeBuilderOutcome</h4> <!-- h3 -->\n<p>The enumerated value SolidOrSheet has been removed from this outcome, and replaced by separate values Solid and Sheet. That allows the TessellatedShapeBuilder caller to detect if the builder was able to create a true solid or an open manifold (\"sheet\")..</p>\n<a name=\"4.06\"></a>\n<h3>Energy Analysis and gbXML API changes</h3> <!-- h2 -->\n<h4>EnergyAnalysisDetailModel creation from building elements and volumes</h4> <!-- h3 -->\n<p>The function:</p>\n<ul>\n<li>EnergyAnalysisDetailModel.Create()</li>\n</ul>\n<p>now offers the ability to create energy model based on analysis of building element boundaries and volumes (set EnergyAnalysisDetailModelOptions.EnergyModelType to BuildingElement). This option matches the default energy model creation used by Revit's user interface. The generated energy model is affected by settings in EnergyDataSettings, including the option to use the new enumerated value:</p>\n<ul>\n<li>AnalysisMode.ConceptualMassesAndBuildingElements</li>\n</ul>\n<p>This option sets the generation of the EnergyAnalysisDetailModel to use the combination of conceptual masses and building elements.</p>\n<h4>EnergyAnalysisDetailModelOptions</h4>\n<p>The new property:</p>\n<ul>\n<li>EnergyAnalysisDetailModelOptions.EnergyModelType</li>\n</ul>\n<p>indicates whether the energy model is based on rooms/spaces or building elements.. Options are:</p>\n<ul>\n<li>SpatialElement – Energy model based on rooms or spaces. This is the default for calls when this option is not set, and matches behavior in Revit 2015.</li>\n<li>BuildingElement – Energy model based on analysis of building element volumes.</li>\n</ul>\n<h4>Lifecycle of EnergyAnalysisDetailModel elements</h4> <!-- h3 -->\n<p>Users and API application are now able to create a persistent energy model which can be activated in displays and views. As a result,</p>\n<ul>\n<li>EnergyAnalysisDetailModel.Create()</li>\n</ul>\n<p>now requires a transaction to be active so the new elements can be created in the associated document.</p>\n<p>The new function:</p>\n<ul>\n<li>EnergyAnalysisDetailModel.GetMainEnergyAnalysisDetailModel()</li>\n</ul>\n<p>returns the main EnergyAnalysisDetailModel contained in the given document – this is the model that may be displayed in associated views.</p>\n<p>As a result of this behavioral change, the class EnergyAnalysisDetailModel and the sub-objects EnergyAnalysisSpace, EnergyAnalysisSurface, and EnergyAnalysisOpening are now subclasses of Element. These elements can be found by element filtering and other Revit API tools.</p>\n<p>Because the energy model is now an element, the function:</p>\n<ul>\n<li>EnergyAnalysisDetailModel.Destroy()</li>\n</ul>\n<p>has been obsoleted in favor of using Document.Delete() on the EnergyAnalysisDetailModel instead to remove the model and all associated elements.</p>\n<p>It is recommended that applications call Document.Delete() on the EnergyAnalysisDetailModel elements that they create, but any energy models created after the main energy model will be deleted automatically before document saving or synchronization.</p>\n<h4>EnergyAnalysisSpace API changes</h4> <!-- h3 -->\n<p>The property:</p>\n<ul>\n<li>EnergyAnalysisSpace.SpaceName</li>\n</ul>\n<p>has been renamed from EnergyAnalysisSpace.Name. This change was necessary due to the inherited Name property on the new parent class, Element.</p>\n<h4>EnergyAnalysisSurface API changes</h4> <!-- h3 -->\n<p>The properties:</p>\n<ul>\n<li>EnergyAnalysisSurface.SurfaceName</li>\n<li>EnergyAnalysisSurface.SurfaceId</li>\n</ul>\n<p>have been renamed from EnergyAnalysisSurface.Name and EnergyAnalysisSurface.Id. These changes were necessary due to the inherited Name and Id properties on the new parent class, Element.</p>\n<h4>EnergyAnalysisOpening API changes</h4> <!-- h3 -->\n<p>The properties:</p>\n<ul>\n<li>EnergyAnalysisOpening.OpeningName</li>\n<li>EnergyAnalysisOpening.OpeningId</li>\n</ul>\n<p>have been renamed from EnergyAnalysisOpening.Name and EnergyAnalysisOpening.Id. These changes were necessary due to the inherited Name and Id properties on the new parent class, Element.</p>\n<h4>Export to gbXML behavioral changes</h4> <!-- h3 -->\n<p>The method:</p>\n<ul>\n<li>Document.Export(string, string, GBXMLExportOptions)</li>\n</ul>\n<p>no longer generates the energy model. It is now required that there be a main energy model stored in the document before this export is invoked. If no energy model of the designated type exists prior to the call to export, this method will throw an exception.</p>\n<a name=\"4.07\"></a>\n<h3>RevisionSettings API changes</h3> <!-- h2 -->\n<p>Enhanced RevisionSettings provide greater control over Revision numbering.</p>\n<h4>Alphanumeric revision settings</h4> <!-- h3 -->\n<p>Alphanumeric revision settings replace the Alphabetic setting available prior to 2016.</p>\n<p>The new class AlphanumericRevisionSettings offers the following members:</p>\n<ul>\n<li>AlphanumericRevisionSettings.Prefix – a prefix to be prepended to each revision number with alphanumeric type.</li>\n<li>AlphanumericRevisionSettings.Suffix – a suffix to be appended to each revision number with alphanumeric type.</li>\n<li>AlphanumericRevisionSettings.GetSequence() – the sequence is a ist of arbitrary strings to be used in consecutive sequence as revision numbers.</li>\n<li>AlphanumericRevisionSettings.SetSequence()</li>\n</ul>\n<p>The enumerated value:</p>\n<ul>\n<li>RevisionNumberType.Alphanumeric </li>\n</ul>\n<p>replaces the now removed RevisionNumberType.Alphabetic.</p>\n<p>In the RevisionSettings class, new members were introduced to provide access to the AlphanumericRevisionSettings:</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>RevisionSettings.GetRevisionAlphabet() → RevisionSettings.GetAlphanumericRevisionSettings()\n<br/>For 2016, GetRevisionAlphabet() returns information if the revision can be represented with alphabetic settings; otherwise, an exception is thrown.</li>\n<li>RevisionSettings.SetRevisionAlphabet() → RevisionSettings.SetAlphanumericRevisionSettings()\n<br/>For 2016, SetRevisionAlphabet() redirects to set up an alphanumeric revision setting.</li>\n</ul>\n<h4>Numeric revision settings</h4> <!-- h3 -->\n<p>The new class NumericRevisionSettings offers the following members:</p>\n<ul>\n<li>NumericRevisionSettings.Prefix – a prefix to be prepended to each revision number with numeric type.</li>\n<li>NumericRevisionSettings.Suffix – a suffix to be appended to each revision number with numeric type.</li>\n<li>NumericRevisionSettings.StartNumber property – the value to be used as the first number in the sequence of numeric revisions.</li>\n</ul>\n<p>The numeric revision settings can be accessed from:</p>\n<ul>\n<li>RevisionSettings.GetNumericRevisionSettings()</li>\n<li>RevisionSettings.SetNumericRevisionSettings()</li>\n</ul>\n<a name=\"4.08\"></a>\n<h3>ExternalDefinitionCreationOptions</h3> <!-- h2 -->\n<p>The class:</p>\n<ul>\n<li>ExternalDefinitionCreationOptions</li>\n</ul>\n<p>has been renamed from ExternalDefinitonCreationOptions to correct a spelling error.</p>\n<a name=\"4.09\"></a>\n<h3>MirrorElements</h3> <!-- h2 -->\n<p>The new overload:</p>\n<ul>\n<li>ElementTransformUtils.MirrorElements(Document, ICollection&lt;ElementId&gt;, Plane, bool)</li>\n</ul>\n<p>allows mirroring with or without copying the elements first. The previously existing overload has been obsoleted in favor of this new method.</p>\n<a name=\"4.10\"></a>\n<h3>ReferenceIntersector</h3> <!-- h2 -->\n<p>The behavior of ReferenceIntersector with the flag:</p>\n<ul>\n<li>ReferenceIntersector.FindReferencesInRevitLinks</li>\n</ul>\n<p>set to true has been improved. Previously, an applied filter was ignored when returning elements encountered in Revit links, and any element encountered would be returned. Now the filter will be evaluated for the elements found in the links, and those elements returned only if they pass the filter. Note that results may not be as expected if the filter applied is geometric (such as a BoundingBox filter or ElementIntersects filter). This is because the filter will be evaluated for linked elements in the coordinates of the linked model, which may not match the coordinates of the elements as they appear in the host model. Also, ElementFilters that accept a Document and/or ElementId as input during their instantiation will not correctly pass elements that appear in the link, because the filter will not be able to match link elements to the filter's criteria.</p>\n<p>As before, if a list of target ElementIds is set, references in links will be returned only if the ElementId matches the id of the intersected RevitLinkInstance, and the ids will not be compared with the target list.</p>\n<a name=\"4.11\"></a>\n<h3>BaseImportOptions</h3> <!-- h2 -->\n<p>The new property:</p>\n<ul>\n<li>BaseImportOptions.ReferencePoint</li>\n</ul>\n<p>replaces the BaseImportOptions.SetRefPoint() and BaseImportOptions.GetRefPoint() methods.</p>\n<a name=\"4.12\"></a>\n<h3>BoundarySegment</h3> <!-- h2 -->\n<p>As a cleanup, the unused duplicate classes Autodesk.Revit.DB.Architecture.BoundarySegment and Autodesk.Revit.DB.Mechanical.BoundarySegment have been removed from the API. The API interfaces already used Autodesk.Revit.DB.BoundarySegment instead.</p>\n<p>The following changes were made to the BoundarySegment class:</p>\n<ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>BoundarySegment.Document → There is no replacement as this class will not carry a reference to the created document after this property is removed.</li>\n<li>BoundarySegment.Element → BoundarySegment.ElementId</li>\n<li>BoundarySegment.Curve → BoundarySegment.GetCurve()</li>\n<li>N/A → BoundarySegment.LinkElementId – the element id of the element in a link instance that forms this boundary.</li>\n</ul>\n<a name=\"4.13\"></a>\n<h3>ParameterType enum change</h3> <!-- h2 -->\n<p>The enumerated value ParameterType.Image has been reordered internally in the ParameterType enumeration. Be sure to rebuild all API clients that use ParameterType and to only compare ParameterType values to each other and not to their internal integer values.</p>\n<a name=\"4.14\"></a>\n<h3>Schedule view rotation behavior</h3> <!-- h2 -->\n<p>Some improvements have been made to API behavior for ScheduleSheetInstance if the instance is currently pinned (Element.Pinned is true):</p>\n<ul>\n<li>Settting ScheduleSheetInstance.Rotation will throw an exception.</li>\n<li>Viewport parameter VIEWPORT_ATTR_ORIENTATION_ON_SHEET cannot be modified.</li>\n</ul>\n<a name=\"4.15\"></a>\n<h3>Creating HostedSweeps (Fascia, Gutter, SlabEdge)</h3> <!-- h2 -->\n<p>The validation of the input edges for:</p>\n<ul>\n<li>Autodesk.Revit.DB.Creation.Document.NewFascia()</li>\n<li>Autodesk.Revit.DB.Creation.Document.NewGutter()</li>\n<li>Autodesk.Revit.DB.Creation.Document.NewSlabEdge()</li>\n</ul>\n<p>has been relaxed, and should allow edges that are also allowed by the Revit UI.</p>\n<a name=\"4.16\"></a>\n<h3>DirectShape API and behavioral changes</h3> <!-- h2 -->\n<h4>DirectShapes in families</h4> <!-- h3 -->\n<p>DirectShape elements can now be added directly to families and their geometry will be reflected in instances of that family placed in a host document.</p>\n<h4>DirectShape category</h4> <!-- h3 -->\n<p>DirectShape elements may now only be assigned to top-level Model categories.</p>\n<h4>WireframeBuilder and DirectShape support for curves and points</h4> <!-- h3 -->\n<p>The new class:</p>\n<ul>\n<li>WireframeBuilder</li>\n</ul>\n<p>supports input of curves and points to form a geometry representation. This representation can be assigned to or appended to the geometry shown by a DirectShape or DirectShapeType element.</p>\n<p>Curves and points can also now be directly passed to DirectShapes and DirectShapeType via SetShape(ShapeBuilder) or AppendShape(ShapeBuilder).</p>\n<h4>ViewShapeBuilder</h4> <!-- h3 -->\n<p>The methods:</p>\n<ul>\n<li>ViewShapeBuilder.SetShape(DirectShape)</li>\n<li>ViewShapeBuilder.SetShape(DirectShapeType)</li>\n</ul>\n<p>have been deprecated. Their replacements are DirectShape.SetShape(ShapeBuilder) and DirectShapeType.SetShape(ShapeBuilder).</p>\n<h4>DirectShape options</h4> <!-- h3 -->\n<p>The new class:</p>\n<ul>\n<li>DirectShapeOptions</li>\n</ul>\n<p>offers options that the API developer can use to control the behavior of created DirectShape elements. Options can be set on either DirectShape or DirectShapeType.</p>\n<h4>Referencing option</h4> <!-- h3 -->\n<p>DirectShape elements now support by default element references, including dimensions, alignments, and face hosting, as well as snapping.</p>\n<p>The property:</p>\n<ul>\n<li>DirectShapeOptions.ReferencingOption</li>\n</ul>\n<p>supports options related to the referenceablility of the DirectShape or DirectShapeType – if set to NotReferenceable, the geometry may not be used for dimensioning, snapping, alignment, or face-hosting. The element may still be selected by the user for operations which do not reference individual geometry objects.</p>\n<h4>RoomBounding option</h4> <!-- h3 -->\n<p>DirectShape elements now supports the ability to participate in room boundary calculations, if they are of an appropriate category for room boundary calculations, and if the associated \"Room Bounding\" parameter is set to true.</p>\n<p>The property:</p>\n<ul>\n<li>DirectShapeOptions.RoomBoundingOption</li>\n</ul>\n<p>identifies whether the DirectShape supports an option for the \"Room Bounding\" parameter to permit participation in room boundary calculations. The default value is NotApplicable, but this will be changed automatically to SetByParameter for applicable DirectShapes.</p>\n<a name=\"4.17\"></a>\n<h3>Wire API behavioral changes</h3> <!-- h2 -->\n<p>Several methods offer modified behavior from Revit 2015, so that they work in a manner more consistent with the Revit UI.</p>\n<ul>\n<li>Wire.Create() – in Revit 2016, after creating the wire, the wire ends display on the device boundary, not the device connector position.</li>\n<li>Wire.ConnectTo() – in Revit 2016, if the wire is already connected when this method is used, the old connection will be disconnected and the wire connected to the new target.</li>\n<li>Wire.RemoveVertex() – in Revit 2016, if the wire vertex is already connected to an element, this method will fail to remove the vertex.\n<br/>In order to remove this vertex, it should be disconnected first, then removed, and then reconnected (if required).</li>\n<li>Wire.InsertVertex() – in Revit 2016, if the start vertex already connects to an element, it is not permtted to insert a new vertex before the start vertex. </li>\n<li>Connector.ConnectTo() – in Revit 2016, if one device already connects multiple wires, only the affected wire's connection will be removed or changed.</li>\n</ul>\n<a name=\"4.18\"></a>\n<h3>BrowserOrganization enum namespace change</h3> <!-- h2 -->\n<p>The enumerated type BrowserOrganizationType has been moved to the Autodesk.Revit.DB namespace.</p>\n<a name=\"4.19\"></a>\n<h3>AdaptivePointOrientationType enumerated items renamed</h3> <!-- h2 -->\n<p>All items of this enumerated type were renamed to better align the names with the corresponding text in the Revit UI. The numeric values of the items weren't modified, allowing existing applications to work. However, to be able to rebuild an application, all point orientations need to be changed to their respective new names.</p>\n<ul>\n<li><b>Old name → New Name</b></li>\n<li>HostReferenceStrictly → ToHost</li>\n<li>HostReferenceAutoFlip → ToHostAndLoopSystem</li>\n<li>PlacementVertical → ToGlobalZthenHost</li>\n<li>PlacementOrthogonal → ToGlobalXYZ</li>\n<li>FamilyVertical → ToInstanceZthenHost</li>\n<li>FamilyOrthogonal → ToInstance</li>\n</ul>\n<a name=\"4.20\"></a>\n<h3>CompoundStructure.SetLayers() behavioral change</h3> <!-- h2 -->\n<p>The method:</p>\n<ul>\n<li>CompoundStructure.SetLayers()</li>\n</ul>\n<p>now unsets the structural material layer index automatically.. Code that needs this property to be set after changing layers will need to set it explicitly.</p>\n<a name=\"4.21\"></a>\n<h3>API events – behavioral change</h3> <!-- h2 -->\n<p>Although the Revit API has never officially supported such a work-flow it is now enforced that registering to and unregistering from events must happen while executing on the main thread. An exception will be thrown if an external application attempts to register to (or unregister from) events from outside of valid API context.</p>\n<a name=\"4.22\"></a>\n<h3>Collections removed from API</h3> <!-- h2 -->\n<p>The following unused Revit API collection types have been removed from the API in 2016:</p>\n<ul>\n<li>Autodesk.Revit.DB.Strucure.LoadTypeBaseSet</li>\n<li>Autodesk.Revit.DB.Strucure.PointLoadTypeSet</li>\n<li>Autodesk.Revit.DB.Strucure.LineLoadTypeSet</li>\n<li>Autodesk.Revit.DB.Strucure.AreaLoadTypeSet</li>\n<li>Autodesk.Revit.DB.Mechanical.SpaceTagTypeSet</li>\n<li>Autodesk.Revit.DB.AnnotationSymbolTypeSet</li>\n<li>Autodesk.Revit.DB.BoundarySegmentArray</li>\n<li>Autodesk.Revit.DB.BoundarySegmentArrayArray</li>\n<li>Autodesk.Revit.DB.AreaTagTypeSet</li>\n<li>Autodesk.Revit.DB.BeamSystemTypeSet</li>\n<li>Autodesk.Revit.DB.FamilySymbolSet</li>\n<li>Autodesk.Revit.DB.Architecture.FasciaTypeSet</li>\n<li>Autodesk.Revit.DB.FloorTypeSet</li>\n<li>Autodesk.Revit.DB.GenericFormSet</li>\n<li>Autodesk.Revit.DB.GridTypeSet</li>\n<li>Autodesk.Revit.DB.Architecture.GutterTypeSet</li>\n<li>Autodesk.Revit.DB.LevelTypeSet</li>\n<li>Autodesk.Revit.DB.MaterialSet</li>\n<li>Autodesk.Revit.DB.Structure.RebarBarTypeSet</li>\n<li>Autodesk.Revit.DB.Structure.RebarHookTypeSet</li>\n<li>Autodesk.Revit.DB.Structure.RebarCoverTypeSet</li>\n<li>Autodesk.Revit.DB.Structure.RebarShapeSet</li>\n<li>Autodesk.Revit.DB.RoofTypeSet</li>\n<li>Autodesk.Revit.DB.Architecture.BoundarySegmentArray</li>\n<li>Autodesk.Revit.DB.Architecture.BoundarySegmentArrayArray</li>\n<li>Autodesk.Revit.DB.Architecture.RoomTagTypeSet</li>\n<li>Autodesk.Revit.DB.SlabEdgeTypeSet</li>\n<li>Autodesk.Revit.DB.TextNoteTypeSet</li>\n<li>Autodesk.Revit.DB.Structure.TrussTypeSet</li>\n<li>Autodesk.Revit.DB.ViewSheetSets</li>\n<li>Autodesk.Revit.DB.WallTypeSet</li>\n<li>Autodesk.Revit.DB.InstanceArray</li>\n<li>Autodesk.Revit.DB.MeshArray</li>\n<li>Autodesk.Revit.DB.GeometryObjectArray</li>\n<li>Autodesk.Revit.DB.SolidArray</li>\n<li>Autodesk.Revit.DB.Mechanical.BoundarySegmentArray</li>\n<li>Autodesk.Revit.DB.Mechanical.BoundarySegmentArrayArray</li>\n<li>Autodesk.Revit.DB.CurtainSystemTypeSet</li>\n<li>Autodesk.Revit.DB.DimensionTypeSet</li>\n<li>Autodesk.Revit.DB.SpotDimensionTypeSet</li>\n<li>Autodesk.Revit.DB.ContFootingTypeSet</li>\n</ul>\n<a name=\"4.23\"></a>\n<h3>Methods and properties removed from API </h3> <!-- h2 -->\n<p>The following previously deprecated methods and properties have been removed from the API:</p>\n<ul>\n<li>Autodesk.RevitAddIns.RevitProduct.Language</li>\n<li>Autodesk.Revit.Creation.Document.NewViewDrafting()</li>\n<li>Autodesk.Revit.DB.Electrical.Wire Autodesk.Revit.Creation.Document.NewWire(Curve, View, Connector, Connector, WireType, WiringType);</li>\n<li>Autodesk.Revit.DB.Plumbing.Pipe Autodesk.Revit.Creation.Document.NewPipe(XYZ, Connector, PipeType)</li>\n<li>Autodesk.Revit.DB.Plumbing.Pipe Autodesk.Revit.Creation.Document.NewPipe(Connector, Connector, PipeType)</li>\n<li>Autodesk.Revit.DB.Element.Parameter[System.String]</li>\n<li>Autodesk.Revit.DB.PointOnEdge.PointOnEdge(Reference, double)</li>\n<li>Autodesk.Revit.DB.CurtainGridLine.Move(XYZ)</li>\n<li>Autodesk.Revit.DB.Line.get_Bound(XYZ, XYZ)</li>\n<li>Autodesk.Revit.DB.Line.get_Unbound(XYZ, XYZ)</li>\n<li>Autodesk.Revit.DB.Definitions.Create(System.String, ParameterType)</li>\n<li>Autodesk.Revit.DB.Definitions.Create(System.String, ParameterType, bool)</li>\n<li>Autodesk.Revit.DB.Definitions.Create(System.String, ParameterType, bool, System.Guid%)</li>\n<li>Autodesk.Revit.DB.ViewSheet.Views</li>\n<li>Autodesk.Revit.DB.Analysis.EnergyAnalysisOpening.OriginatingElementId</li>\n<li>Autodesk.Revit.DB.Analysis.EnergyAnalysisSpace.SpatialElementId</li>\n<li>Autodesk.Revit.DB.Analysis.EnergyAnalysisSurface.OriginatingElementId</li>\n<li>Autodesk.Revit.DB.ViewSheet.GetAllProjectRevisionIds()</li>\n<li>Autodesk.Revit.DB.ViewSheet.GetAdditionalProjectRevisionIds()</li>\n<li>Autodesk.Revit.DB.ViewSheet.SetAdditionalProjectRevisionIds(ICollection&lt;ElementId&gt;)</li>\n<li>Autodesk.Revit.DB.LayerModifier.Seperator</li>\n<li>Autodesk.Revit.DB.Units.GetDisplayUnitType()</li>\n<li>Autodesk.Revit.DB.Units.SetDecimalSymbolAndGrouping(DecimalSymbol, DigitGroupingSymbol, DigitGroupingAmount);</li>\n<li>Autodesk.Revit.DB.Units.IsValidDecimalSymbolAndGrouping(DecimalSymbol, DigitGroupingSymbol, DigitGroupingAmount)</li>\n<li>Autodesk.Revit.DB.FormatOptions.FormatOptions(UnitSymbolType, DisplayUnitType)</li>\n<li>Autodesk.Revit.DB.FormatOptions.GetRounding()</li>\n<li>Autodesk.Revit.DB.FormatOptions.HasRounding()</li>\n<li>Autodesk.Revit.DB.FormatOptions.UseGrouping</li>\n<li>Autodesk.Revit.DB.FormatOptions.GetName()</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.GetLayout(UVGridlineType)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.SetLayout(UVGridlineType, SpacingRuleLayout)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.GetNumber(UVGridlineType)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.SetNumber(UVGridlineType, int)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.GetDistance(UVGridlineType)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.SetDistance(UVGridlineType, double)</li>\n<li>Autodesk.Revit.DB.FabricArea.Create(Document, Element, IList&lt;CurveLoop&gt;, XYZ, XYZ)</li>\n<li>Autodesk.Revit.DB.FabricArea.GetCurveElementIds()</li>\n<li>Autodesk.Revit.DB.Structure.AreaReinforcement.Create(Document, Element, IList&lt;Curve&gt;, XYZ)</li>\n<li>Autodesk.Revit.DB.Structure.AreaReinforcement.GetCurveElementIds()</li>\n<li>Autodesk.Revit.DB.Structure.PathReinforcement.Create(Document, Element, IList&lt;Curve&gt;, Boolean)</li>\n<li>Autodesk.Revit.DB.Structure.RebarHookType.GetDefaultHookLength(double)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsValidProjectionType(AnalyticalElementSelector, AnalyticalDirection, AnalyticalProjectionType)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsValidDirectionForProjection(AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsValidSelectorAndDirection(AnalyticalElementSelector, AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsValidProjectionDatumPlane(AnalyticalElementSelector, AnalyticalDirection, ElementId)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.HasAlignment(AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.GetAnalyticalProjectionType(AnalyticalElementSelector, AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.SetAnalyticalProjectionType(AnalyticalElementSelector, AnalyticalDirection, AnalyticalProjectionType)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.GetAlignmentMethod(AnalyticalElementSelector, AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.SetAlignmentMethod(AnalyticalElementSelector, AnalyticalDirection, AnalyticalAlignmentMethod)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.GetAnalyticalProjectionDatumPlane(AnalyticalElementSelector, AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.SetAnalyticalProjectionDatumPlane(AnalyticalElementSelector, AnalyticalDirection, ElementId)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsSurface()</li>\n<li>Autodesk.Revit.DB.TableSectionData.InsertColumn(int, bool)</li>\n<li>Autodesk.Revit.DB.FormatValueOptions.AreValidForUnitType(UnitType)</li>\n<li>Autodesk.Revit.DB.UnitFormatUtils.FormatValueToString(Units, UnitType, Double, Boolean, Boolean)</li>\n<li>Autodesk.Revit.DB.UnitFormatUtils.FormatValueToString(Units, UnitType, Double, Boolean, Boolean, FormatValueOptions)</li>\n<li>Autodesk.Revit.DB.ValueParsingOptions.FormatOptions</li>\n<li>Autodesk.Revit.DB.Material.MaterialCagtegory</li>\n<li>Autodesk.Revit.DB.View.SurfaceTransparency</li>\n<li>Autodesk.Revit.DB.View.ShowEdges</li>\n<li>Autodesk.Revit.DB.View.ShowSilhouettes</li>\n<li>Autodesk.Revit.DB.View.SilhouetteLineStyleId</li>\n<li>Autodesk.Revit.DB.WorksetConfiguration.CloseAll()</li>\n<li>Autodesk.Revit.DB.WorksetConfiguration.OpenLastViewed()</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;IFCAnyHandle &gt; values);</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;System.String &gt; values);</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;double&gt; values);</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;int&gt; values);</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;bool&gt; values);</li>\n<li>Autodesk.Revit.UI.Selection.Selection.Elements</li>\n</ul>\n<a name=\"4.24\"></a>\n<h3>Classes removed from API</h3> <!-- h2 -->\n<p>The following previously deprecated classes have been removed from the API:</p>\n<ul>\n<li>Autodesk.Revit.DB.Plumbing.PipeConnectionType</li>\n<li>Autodesk.Revit.UI.Selection.SelElementSet</li>\n<li>Autodesk.Revit.DB.IFC.ExporterIFCRegistry</li>\n</ul>\n<a name=\"5\"></a>\n<h3>API additions</h3> <!-- h1 -->\n<a name=\"5.01\"></a>\n<h3>Worksharing API additions</h3> <!-- h2 -->\n<h4>Workset creation</h4> <!-- h3 -->\n<p>The new static method:</p>\n<ul>\n<li>Workset.Create()</li>\n</ul>\n<p>creates a new Workset.</p>\n<h4>WorksetTable operations</h4> <!-- h3 -->\n<p>New static methods:</p>\n<ul>\n<li>WorksetTable.RenameWorkset() – Renames the Workset.</li>\n<li>WorksetTable.IsWorksetNameUnique() – Checks if the given Workset name is unique in the document.</li>\n</ul>\n<p>The new method:</p>\n<ul>\n<li>WorksetTable.SetActiveWorksetId()</li>\n</ul>\n<p>sets the active Workset.</p>\n<a name=\"5.02\"></a>\n<h3>Parameter API additions</h3> <!-- h2 -->\n<h4>Elements that store a reference to a parameter</h4> <!-- h3 -->\n<p>The new class:</p>\n<ul>\n<li>ParameterElement</li>\n</ul>\n<p>is an Element that stores information about a particular user-defined parameter in the document. This parameter's id is used when referencing that user-defined parameter. The ParameterElement class exposes:</p>\n<ul>\n<li>ParameterElement.GetDefinition()</li>\n</ul>\n<p>The new class:</p>\n<ul>\n<li>SharedParameterElement</li>\n</ul>\n<p>is an Element that stores the definition of a shared parameter which is loaded into the document. This class is a child of ParameterElement, and exposes the following additional members:</p>\n<ul>\n<li>GuidValue – The Guid that identifies this shared parameter.</li>\n<li>Create() – Creates a new shared parameter element in the document representing the parameter stored in the input ExternalDefinition.</li>\n<li>Lookup() – Finds the shared parameter element that corresponds to the given Guid.</li>\n</ul>\n<a name=\"5.03\"></a>\n<h3>Geometry API additions</h3> <!-- h2 -->\n<h4>Create loft</h4> <!-- h3 -->\n<p>The new method:</p>\n<ul>\n<li>GeometryCreationUtilities.CreateLoftGeometry()</li>\n</ul>\n<p>creates a solid or open shell geometry by lofting between a sequence of curve loops.</p>\n<h4>Solid – copy</h4> <!-- h3 -->\n<p>The new method:</p>\n<ul>\n<li>SolidUtils.Clone()</li>\n</ul>\n<p>creates a new Solid which is a copy of the input Solid.</p>\n<h4>Solid – create transformed</h4> <!-- h3 -->\n<p>The new method:</p>\n<ul>\n<li>SolidUtils.CreateTransformed()</li>\n</ul>\n<p>creates a new Solid which is the transformation of the input Solid.</p>\n<h4>Solid – cut with half-space</h4> <!-- h3 -->\n<p>The new methods:</p>\n<ul>\n<li>BooleanOperationsUtils.CutWithHalfSpace()</li>\n<li>BooleanOperationsUtils.CutWithHalfSpaceModifyingOriginalSolid()</li>\n</ul>\n<p>produce a solid which is the intersection of the input Solid with the half-space on the positive side of the given Plane. The positive side of the plane is the side to which Plane.Normal points. The first function creates a new Solid with the results, while the second modifies the existing solid (which must be a solid created by the application instead of one obtained from a Revit element).</p>\n<h4>Curve – set graphics style</h4> <!-- h3 -->\n<p>The new method:</p>\n<ul>\n<li>Curve.SetGraphicsStyleId()</li>\n</ul>\n<p>Sets the graphics style id for the curve. Many methods in the Revit API will not use the graphics style associated to this curve. For example, curves used as portions of the sketch of an element will not read this property. Newly created curve elements will not use this value either, as they inherit their graphical properties from their associated category.</p>\n<h4>CurveLoop – transform</h4> <!-- h3 -->\n<p>The new methods:</p>\n<ul>\n<li>CurveLoop.Transform()</li>\n<li>CurveLoop.CreateViaTransform()</li>\n</ul>\n<p>allow transformation of an existing CurveLoop. The former transforms the curves contained within the CurveLoop (modifying itself), while the latter creates a copy of the original curve loop containing the transformed curves. In both cases, the new/modified CurveLoop is guaranteed to be valid with all consituent curves contiguous (assuming that the curves were contiguous in the input curve loop).</p>\n<h4>FaceSecondDerivatives</h4> <!-- h3 -->\n<p>The new class:</p>\n<ul>\n<li>Autodesk.Revit.DB.FaceSecondDerivatives</li>\n</ul>\n<p>contains second partial derivatives of a face at a specified point.</p>\n<h4>Face.ComputeSecondDerivatives</h4> <!-- h3 -->\n<p>The new method:</p>\n<ul>\n<li>Face.ComputeSecondDerivatives</li>\n</ul>\n<p>allows users to access second coordinate derivatives of a face.</p>\n<a name=\"5.04\"></a>\n<h3>Custom Export API improvements</h3> <!-- h2 -->\n<p>The API allowing custom export of 3D views and their contents has been extended to allow for more data in the output.</p>\n<h4>IExportContext</h4> <!-- h3 -->\n<p>IExportContext is now a base class for two other interfaces that support different contents on export. This base class contains methods that are common to both the leaf interfaces. Although it is still possible to use classes deriving directly from this base interface (for backward compatibility), future applications should implement the new leaf interfaces only.</p>\n<h4>IPhotoRenderContext</h4> <!-- h3 -->\n<p>This new leaf interface should be used for processing elements in the view in the same manner that Revit's Render command does. This is equivalent to what IExportContext allowed in Revit 2015 and earlier.</p>\n<h4>IModelExportContext</h4> <!-- h3 -->\n<p>This new interface should be used for processing elements in the view in the same manner that Revit's processes them in 3D views. This context supports additional contents including model curves and text as shown in the 3D views. The new interface methods are:</p>\n<ul>\n<li>OnCurve – export of a geometric curve, such as lines, arcs, Bezier curves, etc. </li>\n<li>OnPolyline – export of a polyline element </li>\n<li>OnPoint – export of a point element </li>\n<li>OnLineSegment – export of a tessellated line segment </li>\n<li>OnPolylineSegments – export of a tessellated polyline segments </li>\n<li>OnText – export of text annotation elements </li>\n</ul>\n<p>The methods of this interface use the following new classes:</p>\n<table style=\"margin-left: 20px\">\n<tr><td>ModelCurveNode</td><td>A base class of output nodes that represent various model curves.</td></tr>\n<tr><td>CurveNode</td><td>An output node that represents a model curve.</td></tr>\n<tr><td>PolylineNode</td><td> An output node that represents a 3D polyline.</td></tr>\n<tr><td>PointNode</td><td> An output node that represents a 3D point</td></tr>\n<tr><td>LineSegment</td><td>An output node that represents a tessellated line segment</td></tr>\n<tr><td>PolylineSegment</td><td>An output node that represents a tessellated polyline segments.</td></tr>\n<tr><td>TextNode</td><td>An output node representing a text annotation object.</td></tr>\n<tr><td>FormatedTextRun</td><td>A structure that defines a single run of a formatted text.</td></tr>\n<tr><td>LineProperties</td><td>A structure that provides access to pen properties of exported lines/curves</td></tr>\n</table>\n<a name=\"5.05\"></a>\n<h3>Export API additions</h3> <!-- h2 -->\n<h4>DWFExportOptions</h4> <!-- h3 -->\n<p>The new property:</p>\n<ul>\n<li>DWFExportOptions.ExportTexture</li>\n</ul>\n<p>sets an option indicating whether to export textures from Revit to 3D DWF files.</p>\n<h4>BaseExportOptions</h4> <!-- h3 -->\n<p>The new property:</p>\n<ul>\n<li>BaseExportOptions.PreserveCoincidentLines</li>\n</ul>\n<p>sets an option indicating whether the export process to DWG, DXF or DGN preserves coincident lines during export.</p>\n<p>There is a newly supported string value for:</p>\n<ul>\n<li>BaseExportOptions.LayerMapping</li>\n</ul>\n<p>The value \"DGN7\" can be used only for DGN export.</p>\n<a name=\"5.06\"></a>\n<h3>Dimension API additions</h3> <!-- h2 -->\n<h4>Dimension class</h4> <!-- h3 -->\n<p>The following new members have been added to support adjustment of the text location and corresponding leaders of a given single dimension:</p>\n<ul>\n<li>Dimension.Origin – returns the origin of the dimension (the middle point of the dimension line that makes up the dimension).</li>\n<li>Dimension.LeaderEndPosition – a read/write property representing the position of the dimension's leader end point.</li>\n<li>Dimension.TextPosition – a read/write property representing the position of the dimension text's drag point.</li>\n<li>Dimenson.IsTextPositionAdjustable() – indicates if this dimension is supported to get and set TextPosition/LeaderPosition.</li>\n<li>Dimension.ResetTextPosition() – resets the text position of the dimension to the initial position determined by its type and parameters.</li>\n</ul>\n<h4>DimensionSegment</h4> <!-- h3 -->\n<p>The following new members have been added to support adjustment of the text location and corresponding leaders of a given dimension segment in a multi-segment dimension:</p>\n<ul>\n<li>DimensionSegment.LeaderEndPosition – a read/write property representing the position of the dimension segment's leader end point.</li>\n<li>DimensionSegment.TextPosition – a read/write property representing the position of the dimension segment's text's drag point.</li>\n<li>DimensionSegment.IsTextPositionAdjustable() – indicates if this dimension segment is supported to set/get TextPosition/LeaderPosition</li>\n<li>DimensionSegment.ResetTextPosition() – resets the text position of the segment to the initial position determined by its type and parameters.</li>\n</ul>\n<a name=\"5.07\"></a>\n<h3>Reinforcement API additions</h3> <!-- h2 -->\n<h4>RebarContainer</h4> <!-- h3 -->\n<p>The new element RebarContainer represents an aggregation of multiple Rebar sets. At this time it can only be created via the API. The advantages of using a RebarContainer are:</p>\n<ul>\n<li>Defining new types of rebar distributions not possible with the Revit user interface</li>\n<li>Improve rebar performance by combining multiple rebar sets into the definition of a single element</li>\n</ul>\n<p>A RebarContainer element contains a collection of RebarContainerItem objects. RebarContainerItem is a new class offering an API similar to that of the Rebar element. RebarContainerItems can be created directly or duplicated from the properties of an existing Rebar element. RebarContainer has support for iteration of the items directly from the RebarContainer object.</p>\n<h4>RebarContainer API</h4>\n<p>RebarContainer offers several collections of APIs similar to those offered by Rebar for management of rounding settings, presentation in a given view, and host. In addition, it offers the following members for management of the container and its items:</p>\n<ul>\n<li>RebarContainer.Create() – Creates a new instance of a RebarContainer element within the project.</li>\n<li>RebarContainer.AppendItemFromRebar() – Appends an Item to the RebarContainer. Fills its data on base of the Rebar.</li>\n<li>RebarContainer.AppendItemFromCurves() – Appends an Item to the RebarContainer. Fills its data on base of the Rebar.</li>\n<li>RebarContainer.AppendItemFromRebarShape() – Appends an Item to the RebarContainer. Fills its data on base of the Rebar.</li>\n<li>RebarContainer.AppendItemFromCurvesAndShape() – Appends an Item to the RebarContainer. Fills its data on base of the Rebar.</li>\n<li>RebarContainer.RemoveItem() – Removes Item from the RebarContainer.</li>\n<li>RebarContainer.ClearItems() – Clears all the Items stored in this RebarContainer element.</li>\n<li>RebarContainer.Contains() – Checks if the RebarContainer has this item as one of its members.</li>\n<li>RebarContainer.ItemsCount – The count of Items in this RebarContainer.</li>\n</ul>\n<h4>RebarContainerItem API</h4>\n<p>RebarContainerItem offers many of the same APIs that Rebar offers, along with a few new members that allow management of the item within its parent container:</p>\n<ul>\n<li>RebarContainerItem.SetFromRebar() – Set an instance of a RebarContainerItem element according to the parameters list</li>\n<li>RebarContainerItem.SetFromCurves() – Set an instance of a RebarContainerItem element according to the parameters list.</li>\n<li>RebarContainerItem.SetFromRebarShape() – Set an instance of a RebarContainerItem element, as an instance of a RebarShape. </li>\n<li>RebarContainerItem.SetFromCurvesAndShape() – Set an instance of a RebarContainerItem element according to the parameters list.</li>\n<li>RebarContainerItem.BarTypeId – The identifier of the rebar bar type.</li>\n</ul>\n<h4>RebarContainerType API</h4>\n<p>The new class:</p>\n<ul>\n<li>RebarContainerType</li>\n</ul>\n<p>represents the type element used in the generation of a RebarContainer.</p>\n<h4>RebarContainer parameters management</h4>\n<p>The new class:</p>\n<ul>\n<li>RebarContainerParameterManager</li>\n</ul>\n<p>allows an application to manage and apply parameter overrides to a RebarContainer parameter. Normally parameters of the RebarContainer are derived from the parameters of the individual items it contains (if the parameter exists and has the same value in all items, it will exist and have the same value in the RebarContainer, while if the parameters are different in the individual items, the parameter will display without a value). Overrides allow an application to set a different value for a given parameter, or to add new shared parameters directly to the individual RebarContainer element.</p>\n<p>The method:</p>\n<ul>\n<li>RebarContainer.GetParametersManager</li>\n</ul>\n<p>returns an object used to manage parameters of the RebarContainer.</p>\n<p>The following methods are provided by the RebarContainerParameterManager class:</p>\n<ul>\n<li>RebarContainerParameterManager.AddOverride – Adds an override for the given parameter as its value will be displayed for the RebarContainer element.</li>\n<li>RebarContainerParameterManager.RemoveOverride – Removes an overridden value from the given parameter.</li>\n<li>RebarContainerParameterManager.ClearOverrides – Clears any overridden values from all parameters of the associated RebarContainer element.</li>\n<li>RebarContainerParameterManager.SetOverriddenParameterReadonly – Sets this overridden parameter to be read-only.</li>\n<li>RebarContainerParameterManager.SetOverriddenParameterModifiable – Sets this overridden parameter to be modifiable.</li>\n<li>RebarContainerParameterManager.IsOverriddenParameterModifiable – Checks if overridden parameter is modifiable.</li>\n<li>RebarContainerParameterManager.IsParameterOverridden – Checks if the parameter has an override.</li>\n<li>RebarContainerParameterManager.IsRebarContainerParameter – Checks if the parameter is a RebarContainer parameter</li>\n<li>RebarContainerParameterManager.AddSharedParameterAsOverride – Adds a shared parameter as one of the parameter overrides stored by this RebarContainer element.</li>\n</ul>\n<h4>Bent Fabric Sheets</h4> <!-- h3 -->\n<p>It is possible using the Revit 2016 API to create a fabric sheet bent along bending curves. This is not possible in the Revit user interface.</p>\n<p>It is not possible to convert a Fabric Sheet between flat and bent.</p>\n<p>The following members allow creation and modification of bend fabric sheets:</p>\n<ul>\n<li>FabricSheet.Create(.., CurveLoop BendProfile) – creates a bent fabric sheet driven by the input BendProfile</li>\n<li>FabricSheet.GetBendProfile() – gets the curves that drive the shape of bent fabric sheet</li>\n<li>FabricSheet.SetBendProfile() – modifies the curves that drive the shape of bent fabric sheet</li>\n<li>FabricSheet.GetBendProfileWithFillets() – gets the curves that drive the shape of bent fabric sheet.including automatically generated fillets if they exist</li>\n<li>FabricSheet.IsBent – identifies if the fabric sheet is bent or flat</li>\n<li>FabricSheet.BentFabricBendDirection – read/write to control which set of wires will be bent</li>\n<li>FabricSheet.bentFabricWiresOrientation – read/write to control the bars' orientation</li>\n<li>FabricSheet.bentFabricLongitudinalCutLength – read/write to control a cut to be applied – if the sheet should be shortened and the amount</li>\n</ul>\n<h4>PathReinforcement additions</h4> <!-- h3 -->\n<p>The new static method:</p>\n<ul>\n<li>PathReinforcement.Create() – Creates a new PathReinforcement object from an array of curves and given Rebar Shape id.</li>\n</ul>\n<p>New methods:</p>\n<ul>\n<li>PathReinforcement.GetOrCreateDefaultRebarShape() – Creates a new RebarShape object with a default name or returns existing one which fulfills PathReinforcement bending data requirements</li>\n<li>PathReinforcement.IsAlternatingLayerEnabled() – checks if the alternating bars exist in the Path Reinforcement instance.</li>\n<li>PathReinforcement.IsValidRebarShapeId() – checks if the ElementId corresponds to valid RebarShape for use in Path Reinforcement.</li>\n<li>PathReinforcement.IsValidPrimaryBarOrientation() – checks the orientation is valid for primary bars.</li>\n<li>PathReinforcement.IsValidAlternatingBarOrientation() – checks the orientation is valid for alternating bars.</li>\n</ul>\n<p>New properties:</p>\n<ul>\n<li>PathReinforcement.PrimaryBarShapeId – The RebarShape element that defines the shape of the primary bars of the PathReinforcement.</li>\n<li>PathReinforcement.PrimaryBarOrientation – The orientation of the primary bars.</li>\n<li>PathReinforcement.AlternatingBarShapeId – The RebarShape element that defines the shape of the alternating bars of the PathReinforcement.</li>\n<li>PathReinforcement.AlternatingBarOrientation – The orientation of the alternating bars.</li>\n</ul>\n<h4>Reinforcement Settings API additions</h4> <!-- h3 -->\n<p>The new methods:</p>\n<ul>\n<li>ReinforcementSettings.GetReinforcementAbbreviationTag()</li>\n<li>ReinforcementSettings.GetReinforcementAbbreviationTags()</li>\n<li>ReinforcementSettings.SetReinforcementAbbreviationTag()</li>\n</ul>\n<p>provide access to the settings related to tagging abbreviations for area or path reinforcement.</p>\n<h4>Reinforcement rounding API additions</h4> <!-- h3 -->\n<p>The new members:</p>\n<ul>\n<li>RebarRoundingManager.TotalLengthRoundingMethod</li>\n<li>RebarRoundingManager.SegmentLengthRoundingMethod</li>\n<li>RebarRoundingManager.ApplicableTotalLengthRoundingMethod</li>\n<li>RebarRoundingManager.ApplicableSegmentLengthRoundingMethod</li>\n<li>FabricRoundingManager.TotalLengthRoundingMethod</li>\n<li>FabricRoundingManager.ApplicableTotalLengthRoundingMethod</li>\n</ul>\n<p>provide access to the rounding method applied to different values found in reinforcement lengths. The new property:</p>\n<ul>\n<li>FormatOptions.RoundingMethod</li>\n</ul>\n<p>specifies the rounding method used to for specific format options. This property is currently only supported for Rebar parameters. FormatOptions objects used in other contexts must contain the default rounding method (Nearest).</p>\n<a name=\"5.08\"></a>\n<h3>Structural Analytical Model API additions</h3> <!-- h2 -->\n<h4>Member Forces for Analytical Model</h4> <!-- h3 -->\n<p>The new class:</p>\n<ul>\n<li>MemberForces</li>\n</ul>\n<p>defines the internal forces and moments applied to the start or end of an AnalyticalModelStick element. Access these forces through the new methods:</p>\n<ul>\n<li>AnalyticalModelStick.GetMemberForces() – Gets the Member Forces associated with the element.</li>\n<li>AnalyticalModelStick.SetMemberForces() – Sets and adds Member Forces to the element.</li>\n<li>AnalyticalModelStick.RemoveMemberForces() – Removes Member Forces defined for the given position.</li>\n<li>AnalyticalModelStick.RemoveAllMemberForces() – Removes all Member Forces associated with the element.</li>\n</ul>\n<h4>AnalyticalModelStick</h4> <!-- h3 -->\n<p>New Methods:</p>\n<ul>\n<li>AnalyticalModelStick.GetLocalCoordinateSystem(XYZ point) – Get the local coordinate system in a specified point on the analytical model.</li>\n<li>AnalyticalModelStick.GetLocalCoordinateSystem(double parameter) – Get the local coordinate system in a specified point on the analytical model.</li>\n</ul>\n<h4>AnalyticalModelSurface</h4> <!-- h3 -->\n<p>New Method:</p>\n<ul>\n<li>AnalyticalModelSurface.GetLocalCoordinateSystem(XYZ point): allow to possess LCS in specified point on analytical model</li>\n</ul>\n<p>Change in the SurfaceElementProjectionZ enumeration:</p>\n<p>The enumerated value SurfaceElementProjectionZ.Center has been replaced by SurfaceElementProjectionZ.CenterOfElement.</p>\n<a name=\"5.09\"></a>\n<h3>MEP Fabrication API</h3> <!-- h2 -->\n<p>The new MEP Fabrication API allows users to connect various FabricationConfigurations to Revit. With a FabricationConfiguration, they can create and use FabricationParts in their project, and define connectors to those parts.</p>\n<h4>FabricationConfiguration</h4> <!-- h3 -->\n<p>The new class FabricationConfiguration contains information about the fabrication configuration settings used by the project. Using this class, users can get and set the fabrication configuration settings for the document. They can also load and unload services, reload the fabrication configuration, get loaded services, get fabrication specifications, get material and insulation information from the configuration, and get connector information.</p>\n<p>The new static method:</p>\n<ul>\n<li>FabricationConfiguration.GetFabricationConfiguration</li>\n</ul>\n<p>gets the fabrication configuration element in the document.</p>\n<p>Some new methods include:</p>\n<ul>\n<li>static FabricationConfiguration.GetFabricationConfiguration – Gets the fabrication configuration settings in the document.</li>\n<li>FabricationConfiguration.SetConfiguration() – Sets the fabrication configuration for the document.</li>\n<li>FabricationConfiguration.LoadServices() – Load the specified fabrication services into the project.</li>\n<li>FabricationConfiguration.UnloadServices() – Unload the specified fabrication services from the project.</li>\n<li>FabricationConfiguration.ReloadConfiguration() – Reloads the fabrication configuration from its source fabrication configuration.</li>\n<li>FabricationConfiguration.GetAllSpecifications() – Gets all specification identifiers in the fabrication configuration.</li>\n<li>FabricationConfiguration.GetAllLoadedServices() – Returns all the loaded fabrication services.</li>\n</ul>\n<h4>FabricationService</h4> <!-- h3 -->\n<p>The new class FabricationService is part of the fabrication configuration and defines what FabricationServiceButtons can be used.</p>\n<p>Some new properties include:</p>\n<ul>\n<li>FabricationService.Name – The name of the service.</li>\n<li>FabricationService.TabCount – The number of tabs in the service.</li>\n</ul>\n<p>Some new methods include:</p>\n<ul>\n<li>FabricationService.GetButtonCount() – Gets the number of buttons for a given tab in the service. </li>\n<li>FabricationService.GetButton() – Gets the service button for a given tab index and button index from the service. </li>\n</ul>\n<h4>FabricationPart</h4> <!-- h3 -->\n<p>The new class FabricationPart represents a fabrication component in the Autodesk Revit MEP product. Using this class, users can create, place, move and align fabrication parts in a Revit model. Users can also get or set the dimensions of the fabrication part, and get the fabrication hosted information and rod information.</p>\n<p>Some new methods include:</p>\n<ul>\n<li>static FabricationPart.Create() – Creates a fabrication part based on a FabricationServiceButton.</li>\n<li>static FabricationPart.CreateHanger() – Creates a fabrication hanger on another fabrication part.</li>\n<li>static FabricationPart.AlignPartByConnectors() – Moves and aligns fabrication part by one of its connectors to align to another connector.</li>\n<li>FabricationPart.GetDimensionValue() – Gets the value of fabrication dimension.</li>\n<li>FabricationPart.SetDimensionValue() – Sets the fabrication dimension value.</li>\n<li>FabricationPart.GetHostedInfo() – Gets the fabrication hosted element information.</li>\n<li>FabricationPart.GetRodInfo() – Gets the fabrication rod information.</li>\n</ul>\n<h4>FabricationServiceButton</h4> <!-- h3 -->\n<p>The new class FabricationServiceButton defines a button used in a FabricationService. A fabrication service button defines what items to use for different conditions.</p>\n<p>Some new methods include:</p>\n<ul>\n<li>FabricationServiceButton.GetConditionLowerValue() – Gets the condition lower value for a given condition.</li>\n<li>FabricationServiceButton.GetContionUpperValue() – Gets the condition upper value for a given condition.</li>\n<li>FabricationServiceButton.IsAHanger()-Checks if the fabrication service button is a hanger.</li>\n</ul>\n<h4>Other Fabrication Classes</h4> <!-- h3 -->\n<p>The following fabrication-based classes are also added to Revit:</p>\n<ul>\n<li>FabricationPartType – Defines the type of a FabricationPart.</li>\n<li>FabricationRodInfo – Gives rod information for a FabricationPart.</li>\n<li>FabricationHostedInfo – Contains hosting information for a FabricationPart and provides the ability to disconnect from the host.</li>\n<li>FabricationConnectorInfo – Contains information about the connectors of a FabricationPart.</li>\n<li>FabricationUtils – Provides a new method to check the validity of connections.</li>\n<li>FabricationDimensionDefinition – Contains information about a fabrication dimension. </li>\n<li>FabricationConfigurationInfo – Contains information about the properties of a FabricationConfiguration.</li>\n<li>ConfigurationReloadInfo – Contains results from reloading a FabricationConfiguration.</li>\n<li>ConnectionValidationInfo – Contains connection-related warnings generated by reloading a FabricationConfiguration. </li>\n</ul>\n<h4>Other Fabrication API related changes</h4> <!-- h3 -->\n<h4>Connector API</h4>\n<p>Several new members were added to the Connector class:</p>\n<ul>\n<li>Connector.Id – A unique identifier to identify this connector.</li>\n<li>Connector.GetFabricationConnectorInfo() – Gets fabrication connectivity information from a connector.</li>\n<li>Connector.GetMEPConnectorInfo() – Gets MEP connector information from a connector.</li>\n</ul>\n<p>In addition, the new static method:</p>\n<ul>\n<li>Pipe.IsPipingConnector()</li>\n</ul>\n<p>checks if the given connector is a valid piping connector.</p>\n<a name=\"5.10\"></a>\n<h3>View3D additions</h3> <!-- h2 -->\n<p>Several new methods provide support for switching camera targets and for switching between perspective and isometric for a 3D view:</p>\n<ul>\n<li>View3D.CanResetCameraTarget() – Checks whether the camera target can be reset for this view.</li>\n<li>View3D.ResetCameraTarget() – Resets the camera target to the center of the field of view. </li>\n<li>View3D.CanToggleBetweenPerspectiveAndIsometric() – Checks whether the view can toggle between Perspective and isometric.</li>\n<li>View3D.ToggleToPerspective() – Toggles the view to perspective.</li>\n<li>View3D.ToggleToIsometric() – Toggles the view to isometric.</li>\n</ul>\n<a name=\"5.11\"></a>\n<h3>ScheduleDefinition </h3> <!-- h2 -->\n<p>New Properties:</p>\n<ul>\n<li>ScheduleDefinition.ShowTitle – Indicates if the title will be displayed in the schedule.</li>\n<li>ScheduleDefinition.ShowHeaders – Indicates if the headers will be displayed in the schedule.</li>\n</ul>\n<a name=\"5.12\"></a>\n<h3>StairsType API changes</h3> <!-- h2 -->\n<p>The properties:</p>\n<ul>\n<li>StairsType.LeftSideSupportType</li>\n<li>StairsType.RightSideSupportType</li>\n</ul>\n<p>are now correctly allowed to be set when the left or right string style is set to Closed.</p>\n<a name=\"5.13\"></a>\n<h3>ElectricalSetting API additions</h3> <!-- h2 -->\n<p>The following new properties have been exposed:</p>\n<ul>\n<li>ElectricalSetting.CircuitSequence – Accesses the circuit sequence numbering schema</li>\n<li>ElectricalSetting.CircuitNamePhaseA – Accesses the circuit naming by phase (Phase A Label).</li>\n<li>ElectricalSetting.CircuitNamePhaseB – Accesses the circuit naming by phase (Phase B Label).</li>\n<li>ElectricalSetting.CircuitNamePhaseC – Accesses the circuit naming by phase (Phase C Label).</li>\n</ul>\n<a name=\"5.14\"></a>\n<h3>PanelScheduleView</h3> <!-- h2 -->\n<p>New Methods</p>\n<ul>\n<li>PanelScheduleView.GetCellsBySlotNumber () – Returns a range of cells for the given slot number</li>\n<li>PanelScheduleView.CanMoveSlotTo() – Verifies if can circuits in the source slot to the specific slot.</li>\n<li>PanelScheduleView.MoveSlotTo() – Move the circuits in the source slot to the specific slot.</li>\n</ul>\n<a name=\"5.15\"></a>\n<h3>FamilyInstance additions</h3> <!-- h2 -->\n<p>The new method:</p>\n<ul>\n<li>FamilyInstance.HasModifiedGeometry() – Identifies if the geometry of this FamilyInstance has been modified from the automatically generated default.</li>\n</ul>\n<p>New properties and methods introduced for reading the information about spatial calculation point(s) directly from family instances:</p>\n<ul>\n<li>FamilyInstance.HasSpatialElementCalculationPoint – Identifies if this instance has a single SpatialElementCalculationPoint used as the search point for Revit to identify if the instance is inside a room or space.</li>\n<li>FamilyInstance.HasSpatialElementFromToCalculationPoints – Identifies if this instance has a pair of SpatialElementCalculationPoints used as the search points for Revit to identify if the instance lies between up to two rooms or spaces. The points determine which room or space is considered the \"from\" and which is considered the \"to\" for a family instance which connects two rooms or spaces, such as a door or window.</li>\n<li>FamilyInstance.GetSpatialElementCalculationPoint() – Gets the location of the calculation point for this instance.</li>\n<li>FamilyInstance.GetSpatialElementFromToCalculationPoints() – Gets the locations for the calculation points for this instance. For a family instance which connects two rooms or spaces, such as a door or window, the points determine which room or space is considered the \"from\" and which is considered the \"to\".</li>\n</ul>\n<a name=\"5.16\"></a>\n<h3>Category API additions</h3> <!-- h2 -->\n<p>The new static methods:</p>\n<ul>\n<li>Category.GetCategory(Document, ElementId)</li>\n<li>Category.GetCategory(Document, BuiltInCategory)</li>\n</ul>\n<p>act as a shortcut to lookup and return a Category object.</p>\n<a name=\"5.17\"></a>\n<h3>Family API additions</h3> <!-- h2 -->\n<h4>Family.GetFamilyTypeParameterValues method</h4> <!-- h3 -->\n<p>Returns all applicable values for a <b>FamilyType</b> parameter of a family.</p>\n<p>The values are Element Ids of all family types that match the category specified by the definition of the given parameter. The elements are either of class <b>ElementType</b> or <b>NestedFamilyTypeReference</b>. The second variant is for the types that are nested in families and thus are not accessible otherwise.</p>\n<h4>NestedFamilyTypeReference class</h4> <!-- h3 -->\n<p>A class representing a proxy element for a nested family type.</p>\n<p>In Revit, this element represents a value of a <b>FamilyType</b> parameter of a loaded family. Each such element corresponds to a nested FamilyType element in the original family document where the family was defined. This element stores only basic information about the nested FamilyType, such as the name of the Type, name of the Family, and a Category.</p>\n<p>It is possible to obtain a set of applicable elements of this class for a particular FamilyType parameter of a family by calling Family.<b>GetFamilyTypeParameterValues</b>.</p>\n<h4>Creation of adaptive component instances</h4> <!-- h3 -->\n<p>The new constructor:</p>\n<ul>\n<li>FamilyInstanceCreationData(Autodesk::Revit::DB::FamilySymbol^ symbol, System::Collections::Generic::IList<revit::db::xyz^>^ adaptivePoints)</revit::db::xyz^></li>\n</ul>\n<p>creates an instance of a class wrapping the arguments used to place adaptive components. This may be more efficient than placing individual adaptive components one-by-one.</p>\n<a name=\"5.18\"></a>\n<h3>ComponentRepeater additions</h3> <!-- h2 -->\n<p>New Methods</p>\n<ul>\n<li>ComponentRepeater.CanElementBeRepeated() – Determines whether an element can be repeated using the RepeatElements method. </li>\n<li>ComponentRepeater.RemoveRepeaters() – Removes component repeaters from the document, but leaves the individual repeated components in their respective locations and hosted on their original hosts.</li>\n</ul>\n<a name=\"5.19\"></a>\n<h3>Point cloud API additions</h3> <!-- h2 -->\n<p>The new method:</p>\n<ul>\n<li>PointCloudType.GetPath()</li>\n</ul>\n<p>gets the path of the link source from which the points are loaded.</p>\n<p>The new property:</p>\n<ul>\n<li>Application.PointCloudsRootPath</li>\n</ul>\n<p>gets the root path for point cloud files. This root path is used by Revit to calculate relative paths to point cloud files.</p>\n<a name=\"5.20\"></a>\n<h3>Application additions</h3> <!-- h2 -->\n<h4>Application.BackgroundColor</h4> <!-- h3 -->\n<p>The new property:</p>\n<ul>\n<li>Application.BackgroundColor</li>\n</ul>\n<p>allows read and write of the background color to use for model views in this session.</p>\n<h4>Application.OptimizePerformanceDuringRedraw</h4> <!-- h3 -->\n<p>The new property:</p>\n<ul>\n<li>Application.OptimizePerformanceDuringRedraw</li>\n</ul>\n<p>enables or disables the option to allow view manipulation during redraw.</p>\n<h4>Application.IsLoggedIn</h4> <!-- h3 -->\n<p>The new static property:</p>\n<ul>\n<li>Application.IsLoggedIn</li>\n</ul>\n<p>checks if the user is logged in from this session to their Autodesk account.</p>\n<h4>Application.LoginUserId</h4> <!-- h3 -->\n<p>The new property:</p>\n<ul>\n<li>Application.LoginUserId</li>\n</ul>\n<p>returns the user id of the user currently logged in. This is an internal id used by Autodesk to represent the logged in user. This user id is in human unrecognizable form. In conjunction with the Autodesk Exchange Store Entitlement REST API, a publisher of an Autodesk Exchange Store application can verify if the current user has purchased their app from the store. For more information about the Exchange Store, please refer to www.autodesk.com/developapps.</p>\n<h4>Application.IsSubscriptionUpdate</h4> <!-- h3 -->\n<p>The new property:</p>\n<ul>\n<li>Application.IsSubscriptionUpdate</li>\n</ul>\n<p>checks if the running Revit is a subscription update.</p>\n<h4>Application.ShowGraphicalWarningHangerDisconnects</h4> <!-- h3 -->\n<p>The new property</p>\n<ul>\n<li>Application.ShowGraphicalWarningHangerDisconnects</li>\n</ul>\n<p>indicates whether or not to show the graphical warnings for Fabrication Hanger disconnects.</p>\n<a name=\"5.21\"></a>\n<h3>Thin lines options</h3> <!-- h2 -->\n<p>A utility class <b>ThinLinesOptions</b> is added that contains the setting related to the Thin Lines options which affects the display in the UI.</p>\n<p>The static property:</p>\n<ul>\n<li>ThinLinesOptions.AreThinLinesEnabled </li>\n</ul>\n<p>defines if the 'Thin Lines' setting is on or off in this session.</p>\n<a name=\"5.22\"></a>\n<h3>3D view API additions</h3> <!-- h2 -->\n<h4>ViewNavigationToolSettings</h4> <!-- h3 -->\n<p>The new class</p>\n<ul>\n<li>ViewNavigationToolSettings</li>\n</ul>\n<p>carries settings related to the View Cube and other view navigation tools. There is one element carrying these settings in each document. Use:</p>\n<ul>\n<li>ViewNavigationToolSettings.GetViewNavigationToolSettings(Document)</li>\n</ul>\n<p>to obtain it.</p>\n<p>The methods:</p>\n<ul>\n<li>ViewNavigationToolSettings.GetHomeCamera() – Returns an object of type HomeCamera which has information about the camera and view.</li>\n<li>ViewNavigationToolSettings.IsHomeCameraSet() – Checks if the home view is set in the settings.</li>\n</ul>\n<h4>HomeCamera</h4> <!-- h3 -->\n<p>The new class HomeCamera contains information about the camera and view for the Home view orientation stored in the model.</p>\n<p>New properties:</p>\n<ul>\n<li>HomeCamera.EyePosition</li>\n<li>HomeCamera.Center</li>\n<li>HomeCamera.UpDirection</li>\n<li>HomeCamera.Pivot</li>\n<li>HomeCamera.LeftAngleOfFieldOfView</li>\n<li>HomeCamera.RightAngleOfFieldOfView</li>\n<li>HomeCamera.TopAngleOfFieldOfView</li>\n<li>HomeCamera.BottomAngleOfFieldOfView</li>\n<li>HomeCamera.OrthogonalProjectionWidth</li>\n<li>HomeCamera.OrthogonalProjectionHeight</li>\n<li>HomeCamera.ViewId</li>\n</ul>\n<a name=\"5.23\"></a>\n<h3>UI API additions</h3> <!-- h2 -->\n<h4>UIDocument.SaveAs</h4> <!-- h3 -->\n<p>The new class:</p>\n<ul>\n<li>Autodesk.Revit.UI.UISaveAsOptions</li>\n</ul>\n<p>offers options for UIDocument.SaveAs method as below.</p>\n<p>The new overload method:</p>\n<ul>\n<li>UIDocument.SaveAs(UISaveAsOptions)</li>\n</ul>\n<p>takes a UISaveAsOptions parameter to allow the dialog prompting the user to overwrite existing files to be shown or suppressed.</p>\n<h4>TableViewUIUtils.TestCellAndPromptToEditTypeParameter</h4> <!-- h3 -->\n<p>The new static method:</p>\n<ul>\n<li>TableViewUIUtils.TestCellAndPromptToEditTypeParameter(TableView, SectionType, int, int)</li>\n</ul>\n<p>involves the Revit UI and operate on schedule views or MEP electrical panel schedules, and prompts the end-user to control whether a type parameter contained in the specified table cell should be allowed edited,</p>\n<p>It replaced the method:</p>\n<ul>\n<li>TableView.IsOkToEditParam()</li>\n</ul>\n<p>which has been removed completely in Revit 2016.</p>\n<h4>SetupEnergySimulationDialog</h4> <!-- h3 -->\n<p>The new class:</p>\n<ul>\n<li>Autodesk.Revit.UI.SetupEnergySimulationDialog</li>\n</ul>\n<p>represents the Revit dialog which typically precedes invocation of an Energy Simulation run on the Green Building Studio server to get user selection of project and run info.</p>\n<p>New methods and properties:</p>\n<ul>\n<li>SetupEnergySimulationDialog.Show() – Shows the SetupEnergySimulationDialog to the user as a modal dialog. The user has the option to select the project and run name, these can be ready by the application when the user closes the dialog.</li>\n<li>SetupEnergySimulationDialog.ProjectId – The identifier of the project (on the Green Building Studio server) that was selected by the user.</li>\n<li>SetupEnergySimulationDialog.ProjectName – The project name (representing a project on the Green Building Studio server) selected or supplied by the user.</li>\n<li>SetupEnergySimulationDialog.RunName – The name of the analysis run that was supplied by the user.</li>\n</ul>\n<a name=\"5.24\"></a>\n<h3>AddInUtility API additions</h3> <!-- h2 -->\n<h4>RevitProduct.IsSubscriptionUpdate</h4> <!-- h3 -->\n<p>The new property:</p>\n<ul>\n<li>RevitProduct.IsSubscriptionUpdate</li>\n</ul>\n<p>allows users to check if a particular Revit is a subscription update.</p>\n</h3newfamilyinstance()>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "TextNote and Leader API behavior and interface changes",
    "local_header_href": "#textnote-and-leader-api-behavior-and-interface-changes",
    "chunk_text": "<h3>TextNote and Leader API behavior and interface changes</h3><p>The Revit API classes related to TextNotes and Leaders have been significantly renovated.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "TextElement class",
    "local_header_href": "#textelement-class",
    "chunk_text": "<h4>TextElement class</h4><p>New methods and properties</p><ul>\n<li>TextElement.Width – Width of the area of the text content</li>\n<ul><li>This replaces <b>TextNote.LineWidth</b></li></ul>\n<li>TextElement.HorizontalAlignment – Horizontal alignment of the text content within the text box of the element.</li>\n<li>TextElement.VerticalAlignment – Vertical alignment of the text content within the text box of the element.</li>\n<ul><li>Collectively, these two new properties replace <b>TextNote.Align</b></li></ul>\n<li>TextElement.KeepRotatedTextReadable – A flag to control how text behaves within a rotated text box.</li>\n<li>TextElement.IsTextWrappingActive – A flag identifying whether text-wrapping is currently active in this text element or not.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "TextNote class",
    "local_header_href": "#textnote-class",
    "chunk_text": "<h4>TextNote class</h4><p>New methods and properties </p><ul>\n<li>TextNote.Create – Creates a new text note element with the given properties. This includes a TextNoteOptions object, which encapsulates several options used for creating notes.</li>\n<ul>\n<li>This replaces <b>ItemFactoryBase.NewTextNote()</b></li>\n<li>This change also fixes an issue where creating a text note would incorrectly wrap text lines to be too short</li>\n</ul>\n<li>TextNote.LeaderCount – The number of leader objects currently attached to the text note.</li>\n<li>TextNote.LeaderLeftAttachment – Gets/sets the attachment position of leaders on the left side of the text note.</li>\n<li>TextNote.LeaderRightAttachment – Gets/sets the attachment position of leaders on the right side of the text note.</li>\n<li>TextNote.GetLeaders – Returns a collection of leaders currently attached to the text note.</li>\n<ul>\n<li>This replaces <b>TextNote.Leaders</b></li>\n</ul>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Leaders",
    "local_header_href": "#leaders",
    "chunk_text": "<h4>Leaders</h4><p>The LeaderArray class has been deprecated, thus members which referred to it have been replaced:</p><ul>\n<li><b>Deprecated member → Replacement</b></li>\n<li>TextNote.Leaders → TextNote.GetLeaders()</li>\n<li>AnnotationSymbol.Leaders → AnnotationSymbol.GetLeaders()</li>\n</ul><p>The Leader class now includes new members:</p><ul>\n<li>Leader.Anchor – Anchor point of the Leader.</li>\n<li>Leader.LeaderShape – Geometric style of the leader.</li>\n<li>Leader.IsOwned – Validates that the leader is attached to (owned by) a valid element, such as an annotation tag.</li>\n</ul><a name=\"4.03\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "DatumPlane API (Levels, Grids, Reference Planes) changes",
    "local_header_href": "#datumplane-api-levels-grids-reference-planes-changes",
    "chunk_text": "<h3>DatumPlane API (Levels, Grids, Reference Planes) changes</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "DatumPlane",
    "local_header_href": "#datumplane",
    "chunk_text": "<h4>DatumPlane</h4><p>The new class: </p><ul>\n<li>Autodesk.Revit.DB.DatumPlane</li>\n</ul><p>is now a base class for element types that represent a datum surface (level, grid or reference plane)</p><p>This base classes offers many new methods and properties:</p><ul>\n<li>DatumPlane.ShowBubble() – Shows bubble in the specified view. </li>\n<li>DatumPlane.HideBubble() – Hides bubble in the specified view.</li>\n<li>DatumPlane.IsBubbleVisibleInView() – Identifies if the bubble is visible or not in a view. </li>\n<li>DatumPlane.HasBubble() – Identifies if the DatumPlane has bubble or not.</li>\n<li>DatumPlane.IsVisibleInView() – Checks if the datum plane is visible in the specified view. </li>\n<li>DatumPlane.Maximize3DExtents() – Maximize the 3D extents of datum plane.</li>\n<li>DatumPlane.GetDatumExtentType() – Identifies if the end of the datum plane is aligned with 3D extents or is set to vary specifically in the indicated view.</li>\n<li>DatumPlane.SetDatumExtentType() – Sets whether or not the end of the datum plane is aligned with 3D extents or is set to vary specifically in the indicated view. </li>\n<li>DatumPlane.GetCurvesInView() – Gets the extents to match the curves within a view. </li>\n<li>DatumPlane.SetCurveInView() – Sets the extents to match the curve. </li>\n<li>DatumPlane.IsCurveValidInView() – Checks if the curve is valid to be as the extents for the datum plane in a view. The curve must be bound and coincident with the original one of the datum plane.</li>\n<li>DatumPlane.GetPropagationViews() – Gets a list of candidate views which are parallel to the current view and to which the 2D extents of the datum may be propagated.</li>\n<li>DatumPlane.PropagateToViews() – Propagates the 2D extents applied to this datum to the specified parallel views. </li>\n<li>DatumPlane.IsLeaderValid() – Checks if the specified leader is valid for the datum plane in the given view. </li>\n<li>DatumPlane.GetLeader() – Gets a copy of the leader applied to the indicated end of the datum plane. </li>\n<li>DatumPlane.SetLeader() – Sets the leader to the indicated end of the datum plane. </li>\n<li>DatumPlane.AddLeader() – Adds leader to the indicated end of the datum plane. </li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Level",
    "local_header_href": "#level",
    "chunk_text": "<h4>Level</h4><p>Some members related to levels have been obsoleted and replaced:</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>Level.LevelType → Element.GetTypeId(), Element.ChangeTypeId()</li>\n<li>Level.PlaneReference → Level.GetPlaneReference()</li>\n<li>ItemFactoryBase.NewLevel() → Level.Create()</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Grid",
    "local_header_href": "#grid",
    "chunk_text": "<h4>Grid</h4><p>Some members related to grids have been added, or obsoleted and replaced:</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>Grid.GridType → Element.GetTypeId(), Element.ChangeTypeId()</li>\n<li>Grid.ExtendToAllLevels() → DatumPlane.MaximizeExtents()</li>\n<li>N/A → Grid.SetVerticalExtents() – Adjusts the grid to extend through only the vertical range between bottom and top.</li>\n<li>Autodesk.Revit.Creation.Document.NewGrid() → Grid.Create()</li>\n<li>Autodesk.Revit.Creation.Document.NewGrids() → Use Grid.Create() repeated as necessary.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ReferencePlane",
    "local_header_href": "#referenceplane",
    "chunk_text": "<h4>ReferencePlane</h4><p>Some members related to levels have been obsoleted and replaced:</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>ReferencePlane.Plane → ReferencePlane.GetPlane()</li>\n<li>ReferencePlane.Reference → ReferencePlane.GetReference()</li>\n</ul><a name=\"4.04\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Structural API changes",
    "local_header_href": "#structural-api-changes",
    "chunk_text": "<h3>Structural API changes</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ContFooting and ContFootingType class and members renamed",
    "local_header_href": "#contfooting-and-contfootingtype-class-and-members-renamed",
    "chunk_text": "<h4>ContFooting and ContFootingType class and members renamed</h4><p>The ContFooting and ContFootingType classes have been replaced by new classes:</p><ul>\n<li>WallFoundation</li>\n<li>WallFoundationType</li>\n</ul><p>The following members have been modified or added to WallFoundation:</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>ContFooting.FootingType → WallFoundation.GetFoundationType(), WallFoundation.SetFoundationType()</li>\n<li>Document.NewFoundationWall(ContFootingType, Wall) → Document.NewFoundationWall(WallFoundationType, Wall)</li>\n<li>N/A → WallFoundation.WallId</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "AnalyticalModel",
    "local_header_href": "#analyticalmodel",
    "chunk_text": "<h4>AnalyticalModel</h4><ul>\n<li>AnalyticalModel.GetLocalCoordinateSystem() now supports cylindrical walls and bent analytical model sticks.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "AnalyticalModelSweptProfile class renamed and relocated",
    "local_header_href": "#analyticalmodelsweptprofile-class-renamed-and-relocated",
    "chunk_text": "<h4>AnalyticalModelSweptProfile class renamed and relocated</h4><p>The class:</p><ul>\n<li>Autodesk.Revit.DB.Structural.AnalyticalModelSweptProfile</li>\n</ul><p>has been renamed and moved to become:</p><ul>\n<li>Autodesk.Revit.DB.SweptProfile</li>\n</ul><p>All members of the class stay the same.</p><p>Two members have been transferred from the AnalyticalModel class to the FamilyInstance class:</p><ul>\n<li><b>Removed member → New/replacement member</b></li>\n<li>AnalyticalModel.HasSweptProfile → FamilyInstance.HasSweptProfile</li>\n<li>AnalyticalModel.GetSweptProfile() → FamilyInstance.GetSweptProfile()</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Loads",
    "local_header_href": "#loads",
    "chunk_text": "<h4>Loads</h4><p>The Revit API classes related to Loads have been significantly renovated.</p><p>The new class</p><ul>\n<li>Autodesk.Revit.DB.Structure.LoadBase</li>\n</ul><p>has been introduced as a new base class for PointLoad, LineLoad and AreaLoad. Properties of this class affect properties of all 3 types of loads:</p><ul>\n<li>LoadBase.LoadCaseId – read/write property representing the load case for this load</li>\n<li>LoadBase.IsHosted</li>\n<li>LoadBase.LoadCase</li>\n<li>LoadBase.IsReaction</li>\n</ul><p>In the subclasses of LoadBase, there are some new members, and many members have been deprecated and replaced, as shown in the following table.</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>PointLoad.Force → PointLoad.ForceVector</li>\n<li>PointLoad.Moment → PointLoad.MomentVector</li>\n<li>N/A → PointLoad.Point – this property is now read/write.</li>\n<li>LineLoad.Point[] → LineLoad.StartPoint, LineLoad.EndPoint, LineLoad.SetPoints()</li>\n<li>LineLoad.Force[], LineLoad.Force1, LineLoad.Force2 → LineLoad.ForceVector1, LineLoad.ForceVector2</li>\n<li>LineLoad.Moment[], LineLoad.Moment1, LineLoad.Moment2 → LineLoad.MomentVector1, LineLoad.MomentVector2</li>\n<li>LineLoad.UniformLoad → LineLoad.IsUniform</li>\n<li>N/A → LineLoad.IsProjected</li>\n<li>Document.NewLineLoad() → LineLoad.Create()</li>\n<li>AreaLoad.NumLoops, AreaLoad.NumCurves[], AreaLoad.Curve[] → AreaLoad.GetLoops(), AreaLoad.SetLoops()</li>\n<li>AreaLoad.Force[], AreaLoad.Force1, AreaLoad.Force2, AreaLoad.Force3 → AreaLoad.ForceVector1, AreaLoad.ForceVector2, AreaLoad.ForceVector3</li>\n<li>AreaLoad.RefPoint[] → AreaLoad.GetRefPoint()</li>\n<li>N/A → AreaLoad.IsProjected</li>\n<li>N/A → AreaLoad.Area</li>\n<li>Document.NewAreaLoad() → AreaLoad.Create()</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Load cases and load combinations",
    "local_header_href": "#load-cases-and-load-combinations",
    "chunk_text": "<h4>Load cases and load combinations</h4><p>The Revit API classes related to Load Cases and Load Combinations have been significantly renovated. This has introduced new members to the LoadCombnation, LoadCase, LoadNature and LoadUsage class, and resulted in several previously existing member being marked deprecated and replaced, as shown in this table:</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>Document.NewLoadCombination() → LoadCombination.Create()</li>\n<li>LoadCombination.CombinationCaseName[] → LoadCombination.GetCaseOrCombinationIds(), obtain the name from associated LoadCase element</li>\n<li>LoadCombination.CombinationNatureName[] → LoadCombination.GetCaseOrCombinationIds(), obtain the name from associated LoadNature element</li>\n<li>LoadCombination.Factor[], LoadCombination.NumberOfComponents → LoadCombination.GetComponents(), LoadCombination.SetComponents()</li>\n<li>LoadCombintation.UsageName[], LoadCombination.NumberOfUsages → LoadCombination.GetUsageIds(), LoadCombination.SetUsageIds()</li>\n<li>LoadCombination.CombinationState, LoadCombination.CombinationStateIndex → LoadCombination.State (translate the enum to string or int as required)</li>\n<li>LoadCombination.CombinationType, LoadCombination.CombinationTypeIndex → LoadCombination.Type (translate the enum to string or int as required)</li>\n<li>N/A → LoadCombination.IsThirdPartyGenerated</li>\n<li>Document.NewLoadCase() → LoadCase.Create()</li>\n<li>N/A → LoadCase.Name is now connected to this element's name properly</li>\n<li>N/A → LoadCase.Number</li>\n<li>N/A → LoadCase.NatureId</li>\n<li>N/A → LoadCase.NatureCategory</li>\n<li>Document.NewLoadNature() → LoadNature.Create()</li>\n<li>N/A → LoadNature.Name is now connected to this element's name properly</li>\n<li>Document.NewLoadUsage() → LoadUsage.Create()</li>\n<li>N/A → LoadUsage.Name is now connected to this element's name properly</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "LoadComponent",
    "local_header_href": "#loadcomponent",
    "chunk_text": "<h4>LoadComponent</h4><p>The new class:</p><ul>\n<li>Autodesk.Revit.DB.Structure.LoadComponent</li>\n</ul><p>is responsible for association of LoadCase or LoadCombination ids as factors in the load combination.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "BoundaryConditions",
    "local_header_href": "#boundaryconditions",
    "chunk_text": "<h4>BoundaryConditions</h4><p>In the BoundaryConditions class, there are some new members, and some members have been deprecated and replaced, as shown in the following table.</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>BoundaryConditions.AssociatedLoad, BoundaryConditions.associateWithLoad() → BoundaryConditions.AssociatedLoadId</li>\n<li>N/A → BoundaryConditions.HostElementId</li>\n<li>BoundaryConditions.Curve[] → BoundaryConditions.GetCurve()</li>\n<li>BoundaryConditions.NumCurves, BoundaryConditions.Curve[] → BoundaryConditions.GetLoops()</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RebarShapeDefinition",
    "local_header_href": "#rebarshapedefinition",
    "chunk_text": "<h4>RebarShapeDefinition</h4><p>New validation has been introduced to confirm that the name of a shared parameter to be added was notalready used by another shared parameter on the element. This new validation was added to methods:</p><ul>\n<li>RebarShapeDefinition.AddParameter()</li>\n<li>RebarShapeDefinition.AddFormulaParameter()</li>\n</ul><p>and this situation will now trigger an exception.</p><a name=\"4.05\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Geometry API behavior and interface changes",
    "local_header_href": "#geometry-api-behavior-and-interface-changes",
    "chunk_text": "<h3>Geometry API behavior and interface changes</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "PlanarFace",
    "local_header_href": "#planarface",
    "chunk_text": "<h4>PlanarFace</h4><p>The properties:</p><ul>\n<li>PlanarFace.Normal</li>\n<li>PlanarFace.Vector[int]</li>\n</ul><p>have been obsoleted.</p><p>The replacement properties are:</p><ul>\n<li>PlanarFace.FaceNormal</li>\n<li>PlanarFace.XVector</li>\n<li>PlanarFace.YVector</li>\n</ul><p>Note that PlanarFace.FaceNormal will return a vector consistently pointing out of the solid that this face is a boundary for (if it is a part of a solid) (unlike PlanarFace.Normal which it replaced).</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Curve.MakeBound() and Curve.MakeUnbound()",
    "local_header_href": "#curvemakebound-and-curvemakeunbound",
    "chunk_text": "<h4>Curve.MakeBound() and Curve.MakeUnbound()</h4><p>These previously threw an exception if the Curve was marked read-only (IsReadOnly). These methods now will succeed, but cause the read-only Curve handle to automatically contain a copy of the original curve which is disconnected from its source. It is still not possible to modify a read-only geometry object directly through manipulation of its geometry.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "CurveLoop iteration",
    "local_header_href": "#curveloop-iteration",
    "chunk_text": "<h4>CurveLoop iteration</h4><p>When iterating Curves contained in a CurveLoop, a copy is now received instead of a reference to the original CurveLoop Curve. This is to prevent possible instability due to attempting to modify the CurveLoop's Curves directly, or if the CurveLoop is collected by the garbage collector while a Curve is still in use.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "CurveLoop.CreateViaThicken()",
    "local_header_href": "#curveloopcreateviathicken",
    "chunk_text": "<h4>CurveLoop.CreateViaThicken()</h4><p>This method now enforces that the thickness value parameter will result in a curve which exceed Revit's short curve tolerance (Application.ShortCurveTolerance).</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Point creation",
    "local_header_href": "#point-creation",
    "chunk_text": "<h4>Point creation</h4><p>New methods to create a Point object had been added.</p><ul>\n<li>Point.Create(XYZ) creates a Point at given coordinates.</li>\n<li>Point.Create(XYZ, ElementId) creates a Point at given coordinates and associates with it a GStyle with the specified ElementId</li>\n</ul><p>The methods replace the deprecated:</p><ul>\n<li>Autodesk.Revit.Creation.Application.NewPoint()</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "TessellatedShapeBuilderOutcome",
    "local_header_href": "#tessellatedshapebuilderoutcome",
    "chunk_text": "<h4>TessellatedShapeBuilderOutcome</h4><p>The enumerated value SolidOrSheet has been removed from this outcome, and replaced by separate values Solid and Sheet. That allows the TessellatedShapeBuilder caller to detect if the builder was able to create a true solid or an open manifold (\"sheet\")..</p><a name=\"4.06\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Energy Analysis and gbXML API changes",
    "local_header_href": "#energy-analysis-and-gbxml-api-changes",
    "chunk_text": "<h3>Energy Analysis and gbXML API changes</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "EnergyAnalysisDetailModel creation from building elements and volumes",
    "local_header_href": "#energyanalysisdetailmodel-creation-from-building-elements-and-volumes",
    "chunk_text": "<h4>EnergyAnalysisDetailModel creation from building elements and volumes</h4><p>The function:</p><ul>\n<li>EnergyAnalysisDetailModel.Create()</li>\n</ul><p>now offers the ability to create energy model based on analysis of building element boundaries and volumes (set EnergyAnalysisDetailModelOptions.EnergyModelType to BuildingElement). This option matches the default energy model creation used by Revit's user interface. The generated energy model is affected by settings in EnergyDataSettings, including the option to use the new enumerated value:</p><ul>\n<li>AnalysisMode.ConceptualMassesAndBuildingElements</li>\n</ul><p>This option sets the generation of the EnergyAnalysisDetailModel to use the combination of conceptual masses and building elements.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "EnergyAnalysisDetailModelOptions",
    "local_header_href": "#energyanalysisdetailmodeloptions",
    "chunk_text": "<h4>EnergyAnalysisDetailModelOptions</h4><p>The new property:</p><ul>\n<li>EnergyAnalysisDetailModelOptions.EnergyModelType</li>\n</ul><p>indicates whether the energy model is based on rooms/spaces or building elements.. Options are:</p><ul>\n<li>SpatialElement – Energy model based on rooms or spaces. This is the default for calls when this option is not set, and matches behavior in Revit 2015.</li>\n<li>BuildingElement – Energy model based on analysis of building element volumes.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Lifecycle of EnergyAnalysisDetailModel elements",
    "local_header_href": "#lifecycle-of-energyanalysisdetailmodel-elements",
    "chunk_text": "<h4>Lifecycle of EnergyAnalysisDetailModel elements</h4><p>Users and API application are now able to create a persistent energy model which can be activated in displays and views. As a result,</p><ul>\n<li>EnergyAnalysisDetailModel.Create()</li>\n</ul><p>now requires a transaction to be active so the new elements can be created in the associated document.</p><p>The new function:</p><ul>\n<li>EnergyAnalysisDetailModel.GetMainEnergyAnalysisDetailModel()</li>\n</ul><p>returns the main EnergyAnalysisDetailModel contained in the given document – this is the model that may be displayed in associated views.</p><p>As a result of this behavioral change, the class EnergyAnalysisDetailModel and the sub-objects EnergyAnalysisSpace, EnergyAnalysisSurface, and EnergyAnalysisOpening are now subclasses of Element. These elements can be found by element filtering and other Revit API tools.</p><p>Because the energy model is now an element, the function:</p><ul>\n<li>EnergyAnalysisDetailModel.Destroy()</li>\n</ul><p>has been obsoleted in favor of using Document.Delete() on the EnergyAnalysisDetailModel instead to remove the model and all associated elements.</p><p>It is recommended that applications call Document.Delete() on the EnergyAnalysisDetailModel elements that they create, but any energy models created after the main energy model will be deleted automatically before document saving or synchronization.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "EnergyAnalysisSpace API changes",
    "local_header_href": "#energyanalysisspace-api-changes",
    "chunk_text": "<h4>EnergyAnalysisSpace API changes</h4><p>The property:</p><ul>\n<li>EnergyAnalysisSpace.SpaceName</li>\n</ul><p>has been renamed from EnergyAnalysisSpace.Name. This change was necessary due to the inherited Name property on the new parent class, Element.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "EnergyAnalysisSurface API changes",
    "local_header_href": "#energyanalysissurface-api-changes",
    "chunk_text": "<h4>EnergyAnalysisSurface API changes</h4><p>The properties:</p><ul>\n<li>EnergyAnalysisSurface.SurfaceName</li>\n<li>EnergyAnalysisSurface.SurfaceId</li>\n</ul><p>have been renamed from EnergyAnalysisSurface.Name and EnergyAnalysisSurface.Id. These changes were necessary due to the inherited Name and Id properties on the new parent class, Element.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "EnergyAnalysisOpening API changes",
    "local_header_href": "#energyanalysisopening-api-changes",
    "chunk_text": "<h4>EnergyAnalysisOpening API changes</h4><p>The properties:</p><ul>\n<li>EnergyAnalysisOpening.OpeningName</li>\n<li>EnergyAnalysisOpening.OpeningId</li>\n</ul><p>have been renamed from EnergyAnalysisOpening.Name and EnergyAnalysisOpening.Id. These changes were necessary due to the inherited Name and Id properties on the new parent class, Element.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Export to gbXML behavioral changes",
    "local_header_href": "#export-to-gbxml-behavioral-changes",
    "chunk_text": "<h4>Export to gbXML behavioral changes</h4><p>The method:</p><ul>\n<li>Document.Export(string, string, GBXMLExportOptions)</li>\n</ul><p>no longer generates the energy model. It is now required that there be a main energy model stored in the document before this export is invoked. If no energy model of the designated type exists prior to the call to export, this method will throw an exception.</p><a name=\"4.07\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RevisionSettings API changes",
    "local_header_href": "#revisionsettings-api-changes",
    "chunk_text": "<h3>RevisionSettings API changes</h3><p>Enhanced RevisionSettings provide greater control over Revision numbering.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Alphanumeric revision settings",
    "local_header_href": "#alphanumeric-revision-settings",
    "chunk_text": "<h4>Alphanumeric revision settings</h4><p>Alphanumeric revision settings replace the Alphabetic setting available prior to 2016.</p><p>The new class AlphanumericRevisionSettings offers the following members:</p><ul>\n<li>AlphanumericRevisionSettings.Prefix – a prefix to be prepended to each revision number with alphanumeric type.</li>\n<li>AlphanumericRevisionSettings.Suffix – a suffix to be appended to each revision number with alphanumeric type.</li>\n<li>AlphanumericRevisionSettings.GetSequence() – the sequence is a ist of arbitrary strings to be used in consecutive sequence as revision numbers.</li>\n<li>AlphanumericRevisionSettings.SetSequence()</li>\n</ul><p>The enumerated value:</p><ul>\n<li>RevisionNumberType.Alphanumeric </li>\n</ul><p>replaces the now removed RevisionNumberType.Alphabetic.</p><p>In the RevisionSettings class, new members were introduced to provide access to the AlphanumericRevisionSettings:</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>RevisionSettings.GetRevisionAlphabet() → RevisionSettings.GetAlphanumericRevisionSettings()\n<br/>For 2016, GetRevisionAlphabet() returns information if the revision can be represented with alphabetic settings; otherwise, an exception is thrown.</li>\n<li>RevisionSettings.SetRevisionAlphabet() → RevisionSettings.SetAlphanumericRevisionSettings()\n<br/>For 2016, SetRevisionAlphabet() redirects to set up an alphanumeric revision setting.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Numeric revision settings",
    "local_header_href": "#numeric-revision-settings",
    "chunk_text": "<h4>Numeric revision settings</h4><p>The new class NumericRevisionSettings offers the following members:</p><ul>\n<li>NumericRevisionSettings.Prefix – a prefix to be prepended to each revision number with numeric type.</li>\n<li>NumericRevisionSettings.Suffix – a suffix to be appended to each revision number with numeric type.</li>\n<li>NumericRevisionSettings.StartNumber property – the value to be used as the first number in the sequence of numeric revisions.</li>\n</ul><p>The numeric revision settings can be accessed from:</p><ul>\n<li>RevisionSettings.GetNumericRevisionSettings()</li>\n<li>RevisionSettings.SetNumericRevisionSettings()</li>\n</ul><a name=\"4.08\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ExternalDefinitionCreationOptions",
    "local_header_href": "#externaldefinitioncreationoptions",
    "chunk_text": "<h3>ExternalDefinitionCreationOptions</h3><p>The class:</p><ul>\n<li>ExternalDefinitionCreationOptions</li>\n</ul><p>has been renamed from ExternalDefinitonCreationOptions to correct a spelling error.</p><a name=\"4.09\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "MirrorElements",
    "local_header_href": "#mirrorelements",
    "chunk_text": "<h3>MirrorElements</h3><p>The new overload:</p><ul>\n<li>ElementTransformUtils.MirrorElements(Document, ICollection&lt;ElementId&gt;, Plane, bool)</li>\n</ul><p>allows mirroring with or without copying the elements first. The previously existing overload has been obsoleted in favor of this new method.</p><a name=\"4.10\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ReferenceIntersector",
    "local_header_href": "#referenceintersector",
    "chunk_text": "<h3>ReferenceIntersector</h3><p>The behavior of ReferenceIntersector with the flag:</p><ul>\n<li>ReferenceIntersector.FindReferencesInRevitLinks</li>\n</ul><p>set to true has been improved. Previously, an applied filter was ignored when returning elements encountered in Revit links, and any element encountered would be returned. Now the filter will be evaluated for the elements found in the links, and those elements returned only if they pass the filter. Note that results may not be as expected if the filter applied is geometric (such as a BoundingBox filter or ElementIntersects filter). This is because the filter will be evaluated for linked elements in the coordinates of the linked model, which may not match the coordinates of the elements as they appear in the host model. Also, ElementFilters that accept a Document and/or ElementId as input during their instantiation will not correctly pass elements that appear in the link, because the filter will not be able to match link elements to the filter's criteria.</p><p>As before, if a list of target ElementIds is set, references in links will be returned only if the ElementId matches the id of the intersected RevitLinkInstance, and the ids will not be compared with the target list.</p><a name=\"4.11\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "BaseImportOptions",
    "local_header_href": "#baseimportoptions",
    "chunk_text": "<h3>BaseImportOptions</h3><p>The new property:</p><ul>\n<li>BaseImportOptions.ReferencePoint</li>\n</ul><p>replaces the BaseImportOptions.SetRefPoint() and BaseImportOptions.GetRefPoint() methods.</p><a name=\"4.12\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "BoundarySegment",
    "local_header_href": "#boundarysegment",
    "chunk_text": "<h3>BoundarySegment</h3><p>As a cleanup, the unused duplicate classes Autodesk.Revit.DB.Architecture.BoundarySegment and Autodesk.Revit.DB.Mechanical.BoundarySegment have been removed from the API. The API interfaces already used Autodesk.Revit.DB.BoundarySegment instead.</p><p>The following changes were made to the BoundarySegment class:</p><ul>\n<li><b>Deprecated member → New/replacement member</b></li>\n<li>BoundarySegment.Document → There is no replacement as this class will not carry a reference to the created document after this property is removed.</li>\n<li>BoundarySegment.Element → BoundarySegment.ElementId</li>\n<li>BoundarySegment.Curve → BoundarySegment.GetCurve()</li>\n<li>N/A → BoundarySegment.LinkElementId – the element id of the element in a link instance that forms this boundary.</li>\n</ul><a name=\"4.13\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ParameterType enum change",
    "local_header_href": "#parametertype-enum-change",
    "chunk_text": "<h3>ParameterType enum change</h3><p>The enumerated value ParameterType.Image has been reordered internally in the ParameterType enumeration. Be sure to rebuild all API clients that use ParameterType and to only compare ParameterType values to each other and not to their internal integer values.</p><a name=\"4.14\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Schedule view rotation behavior",
    "local_header_href": "#schedule-view-rotation-behavior",
    "chunk_text": "<h3>Schedule view rotation behavior</h3><p>Some improvements have been made to API behavior for ScheduleSheetInstance if the instance is currently pinned (Element.Pinned is true):</p><ul>\n<li>Settting ScheduleSheetInstance.Rotation will throw an exception.</li>\n<li>Viewport parameter VIEWPORT_ATTR_ORIENTATION_ON_SHEET cannot be modified.</li>\n</ul><a name=\"4.15\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Creating HostedSweeps (Fascia, Gutter, SlabEdge)",
    "local_header_href": "#creating-hostedsweeps-fascia-gutter-slabedge",
    "chunk_text": "<h3>Creating HostedSweeps (Fascia, Gutter, SlabEdge)</h3><p>The validation of the input edges for:</p><ul>\n<li>Autodesk.Revit.DB.Creation.Document.NewFascia()</li>\n<li>Autodesk.Revit.DB.Creation.Document.NewGutter()</li>\n<li>Autodesk.Revit.DB.Creation.Document.NewSlabEdge()</li>\n</ul><p>has been relaxed, and should allow edges that are also allowed by the Revit UI.</p><a name=\"4.16\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "DirectShape API and behavioral changes",
    "local_header_href": "#directshape-api-and-behavioral-changes",
    "chunk_text": "<h3>DirectShape API and behavioral changes</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "DirectShapes in families",
    "local_header_href": "#directshapes-in-families",
    "chunk_text": "<h4>DirectShapes in families</h4><p>DirectShape elements can now be added directly to families and their geometry will be reflected in instances of that family placed in a host document.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "DirectShape category",
    "local_header_href": "#directshape-category",
    "chunk_text": "<h4>DirectShape category</h4><p>DirectShape elements may now only be assigned to top-level Model categories.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "WireframeBuilder and DirectShape support for curves and points",
    "local_header_href": "#wireframebuilder-and-directshape-support-for-curves-and-points",
    "chunk_text": "<h4>WireframeBuilder and DirectShape support for curves and points</h4><p>The new class:</p><ul>\n<li>WireframeBuilder</li>\n</ul><p>supports input of curves and points to form a geometry representation. This representation can be assigned to or appended to the geometry shown by a DirectShape or DirectShapeType element.</p><p>Curves and points can also now be directly passed to DirectShapes and DirectShapeType via SetShape(ShapeBuilder) or AppendShape(ShapeBuilder).</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ViewShapeBuilder",
    "local_header_href": "#viewshapebuilder",
    "chunk_text": "<h4>ViewShapeBuilder</h4><p>The methods:</p><ul>\n<li>ViewShapeBuilder.SetShape(DirectShape)</li>\n<li>ViewShapeBuilder.SetShape(DirectShapeType)</li>\n</ul><p>have been deprecated. Their replacements are DirectShape.SetShape(ShapeBuilder) and DirectShapeType.SetShape(ShapeBuilder).</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "DirectShape options",
    "local_header_href": "#directshape-options",
    "chunk_text": "<h4>DirectShape options</h4><p>The new class:</p><ul>\n<li>DirectShapeOptions</li>\n</ul><p>offers options that the API developer can use to control the behavior of created DirectShape elements. Options can be set on either DirectShape or DirectShapeType.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Referencing option",
    "local_header_href": "#referencing-option",
    "chunk_text": "<h4>Referencing option</h4><p>DirectShape elements now support by default element references, including dimensions, alignments, and face hosting, as well as snapping.</p><p>The property:</p><ul>\n<li>DirectShapeOptions.ReferencingOption</li>\n</ul><p>supports options related to the referenceablility of the DirectShape or DirectShapeType – if set to NotReferenceable, the geometry may not be used for dimensioning, snapping, alignment, or face-hosting. The element may still be selected by the user for operations which do not reference individual geometry objects.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RoomBounding option",
    "local_header_href": "#roombounding-option",
    "chunk_text": "<h4>RoomBounding option</h4><p>DirectShape elements now supports the ability to participate in room boundary calculations, if they are of an appropriate category for room boundary calculations, and if the associated \"Room Bounding\" parameter is set to true.</p><p>The property:</p><ul>\n<li>DirectShapeOptions.RoomBoundingOption</li>\n</ul><p>identifies whether the DirectShape supports an option for the \"Room Bounding\" parameter to permit participation in room boundary calculations. The default value is NotApplicable, but this will be changed automatically to SetByParameter for applicable DirectShapes.</p><a name=\"4.17\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Wire API behavioral changes",
    "local_header_href": "#wire-api-behavioral-changes",
    "chunk_text": "<h3>Wire API behavioral changes</h3><p>Several methods offer modified behavior from Revit 2015, so that they work in a manner more consistent with the Revit UI.</p><ul>\n<li>Wire.Create() – in Revit 2016, after creating the wire, the wire ends display on the device boundary, not the device connector position.</li>\n<li>Wire.ConnectTo() – in Revit 2016, if the wire is already connected when this method is used, the old connection will be disconnected and the wire connected to the new target.</li>\n<li>Wire.RemoveVertex() – in Revit 2016, if the wire vertex is already connected to an element, this method will fail to remove the vertex.\n<br/>In order to remove this vertex, it should be disconnected first, then removed, and then reconnected (if required).</li>\n<li>Wire.InsertVertex() – in Revit 2016, if the start vertex already connects to an element, it is not permtted to insert a new vertex before the start vertex. </li>\n<li>Connector.ConnectTo() – in Revit 2016, if one device already connects multiple wires, only the affected wire's connection will be removed or changed.</li>\n</ul><a name=\"4.18\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "BrowserOrganization enum namespace change",
    "local_header_href": "#browserorganization-enum-namespace-change",
    "chunk_text": "<h3>BrowserOrganization enum namespace change</h3><p>The enumerated type BrowserOrganizationType has been moved to the Autodesk.Revit.DB namespace.</p><a name=\"4.19\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "AdaptivePointOrientationType enumerated items renamed",
    "local_header_href": "#adaptivepointorientationtype-enumerated-items-renamed",
    "chunk_text": "<h3>AdaptivePointOrientationType enumerated items renamed</h3><p>All items of this enumerated type were renamed to better align the names with the corresponding text in the Revit UI. The numeric values of the items weren't modified, allowing existing applications to work. However, to be able to rebuild an application, all point orientations need to be changed to their respective new names.</p><ul>\n<li><b>Old name → New Name</b></li>\n<li>HostReferenceStrictly → ToHost</li>\n<li>HostReferenceAutoFlip → ToHostAndLoopSystem</li>\n<li>PlacementVertical → ToGlobalZthenHost</li>\n<li>PlacementOrthogonal → ToGlobalXYZ</li>\n<li>FamilyVertical → ToInstanceZthenHost</li>\n<li>FamilyOrthogonal → ToInstance</li>\n</ul><a name=\"4.20\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "CompoundStructure.SetLayers() behavioral change",
    "local_header_href": "#compoundstructuresetlayers-behavioral-change",
    "chunk_text": "<h3>CompoundStructure.SetLayers() behavioral change</h3><p>The method:</p><ul>\n<li>CompoundStructure.SetLayers()</li>\n</ul><p>now unsets the structural material layer index automatically.. Code that needs this property to be set after changing layers will need to set it explicitly.</p><a name=\"4.21\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "API events – behavioral change",
    "local_header_href": "#api-events-behavioral-change",
    "chunk_text": "<h3>API events – behavioral change</h3><p>Although the Revit API has never officially supported such a work-flow it is now enforced that registering to and unregistering from events must happen while executing on the main thread. An exception will be thrown if an external application attempts to register to (or unregister from) events from outside of valid API context.</p><a name=\"4.22\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Collections removed from API",
    "local_header_href": "#collections-removed-from-api",
    "chunk_text": "<h3>Collections removed from API</h3><p>The following unused Revit API collection types have been removed from the API in 2016:</p><ul>\n<li>Autodesk.Revit.DB.Strucure.LoadTypeBaseSet</li>\n<li>Autodesk.Revit.DB.Strucure.PointLoadTypeSet</li>\n<li>Autodesk.Revit.DB.Strucure.LineLoadTypeSet</li>\n<li>Autodesk.Revit.DB.Strucure.AreaLoadTypeSet</li>\n<li>Autodesk.Revit.DB.Mechanical.SpaceTagTypeSet</li>\n<li>Autodesk.Revit.DB.AnnotationSymbolTypeSet</li>\n<li>Autodesk.Revit.DB.BoundarySegmentArray</li>\n<li>Autodesk.Revit.DB.BoundarySegmentArrayArray</li>\n<li>Autodesk.Revit.DB.AreaTagTypeSet</li>\n<li>Autodesk.Revit.DB.BeamSystemTypeSet</li>\n<li>Autodesk.Revit.DB.FamilySymbolSet</li>\n<li>Autodesk.Revit.DB.Architecture.FasciaTypeSet</li>\n<li>Autodesk.Revit.DB.FloorTypeSet</li>\n<li>Autodesk.Revit.DB.GenericFormSet</li>\n<li>Autodesk.Revit.DB.GridTypeSet</li>\n<li>Autodesk.Revit.DB.Architecture.GutterTypeSet</li>\n<li>Autodesk.Revit.DB.LevelTypeSet</li>\n<li>Autodesk.Revit.DB.MaterialSet</li>\n<li>Autodesk.Revit.DB.Structure.RebarBarTypeSet</li>\n<li>Autodesk.Revit.DB.Structure.RebarHookTypeSet</li>\n<li>Autodesk.Revit.DB.Structure.RebarCoverTypeSet</li>\n<li>Autodesk.Revit.DB.Structure.RebarShapeSet</li>\n<li>Autodesk.Revit.DB.RoofTypeSet</li>\n<li>Autodesk.Revit.DB.Architecture.BoundarySegmentArray</li>\n<li>Autodesk.Revit.DB.Architecture.BoundarySegmentArrayArray</li>\n<li>Autodesk.Revit.DB.Architecture.RoomTagTypeSet</li>\n<li>Autodesk.Revit.DB.SlabEdgeTypeSet</li>\n<li>Autodesk.Revit.DB.TextNoteTypeSet</li>\n<li>Autodesk.Revit.DB.Structure.TrussTypeSet</li>\n<li>Autodesk.Revit.DB.ViewSheetSets</li>\n<li>Autodesk.Revit.DB.WallTypeSet</li>\n<li>Autodesk.Revit.DB.InstanceArray</li>\n<li>Autodesk.Revit.DB.MeshArray</li>\n<li>Autodesk.Revit.DB.GeometryObjectArray</li>\n<li>Autodesk.Revit.DB.SolidArray</li>\n<li>Autodesk.Revit.DB.Mechanical.BoundarySegmentArray</li>\n<li>Autodesk.Revit.DB.Mechanical.BoundarySegmentArrayArray</li>\n<li>Autodesk.Revit.DB.CurtainSystemTypeSet</li>\n<li>Autodesk.Revit.DB.DimensionTypeSet</li>\n<li>Autodesk.Revit.DB.SpotDimensionTypeSet</li>\n<li>Autodesk.Revit.DB.ContFootingTypeSet</li>\n</ul><a name=\"4.23\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Methods and properties removed from API",
    "local_header_href": "#methods-and-properties-removed-from-api",
    "chunk_text": "<h3>Methods and properties removed from API </h3><p>The following previously deprecated methods and properties have been removed from the API:</p><ul>\n<li>Autodesk.RevitAddIns.RevitProduct.Language</li>\n<li>Autodesk.Revit.Creation.Document.NewViewDrafting()</li>\n<li>Autodesk.Revit.DB.Electrical.Wire Autodesk.Revit.Creation.Document.NewWire(Curve, View, Connector, Connector, WireType, WiringType);</li>\n<li>Autodesk.Revit.DB.Plumbing.Pipe Autodesk.Revit.Creation.Document.NewPipe(XYZ, Connector, PipeType)</li>\n<li>Autodesk.Revit.DB.Plumbing.Pipe Autodesk.Revit.Creation.Document.NewPipe(Connector, Connector, PipeType)</li>\n<li>Autodesk.Revit.DB.Element.Parameter[System.String]</li>\n<li>Autodesk.Revit.DB.PointOnEdge.PointOnEdge(Reference, double)</li>\n<li>Autodesk.Revit.DB.CurtainGridLine.Move(XYZ)</li>\n<li>Autodesk.Revit.DB.Line.get_Bound(XYZ, XYZ)</li>\n<li>Autodesk.Revit.DB.Line.get_Unbound(XYZ, XYZ)</li>\n<li>Autodesk.Revit.DB.Definitions.Create(System.String, ParameterType)</li>\n<li>Autodesk.Revit.DB.Definitions.Create(System.String, ParameterType, bool)</li>\n<li>Autodesk.Revit.DB.Definitions.Create(System.String, ParameterType, bool, System.Guid%)</li>\n<li>Autodesk.Revit.DB.ViewSheet.Views</li>\n<li>Autodesk.Revit.DB.Analysis.EnergyAnalysisOpening.OriginatingElementId</li>\n<li>Autodesk.Revit.DB.Analysis.EnergyAnalysisSpace.SpatialElementId</li>\n<li>Autodesk.Revit.DB.Analysis.EnergyAnalysisSurface.OriginatingElementId</li>\n<li>Autodesk.Revit.DB.ViewSheet.GetAllProjectRevisionIds()</li>\n<li>Autodesk.Revit.DB.ViewSheet.GetAdditionalProjectRevisionIds()</li>\n<li>Autodesk.Revit.DB.ViewSheet.SetAdditionalProjectRevisionIds(ICollection&lt;ElementId&gt;)</li>\n<li>Autodesk.Revit.DB.LayerModifier.Seperator</li>\n<li>Autodesk.Revit.DB.Units.GetDisplayUnitType()</li>\n<li>Autodesk.Revit.DB.Units.SetDecimalSymbolAndGrouping(DecimalSymbol, DigitGroupingSymbol, DigitGroupingAmount);</li>\n<li>Autodesk.Revit.DB.Units.IsValidDecimalSymbolAndGrouping(DecimalSymbol, DigitGroupingSymbol, DigitGroupingAmount)</li>\n<li>Autodesk.Revit.DB.FormatOptions.FormatOptions(UnitSymbolType, DisplayUnitType)</li>\n<li>Autodesk.Revit.DB.FormatOptions.GetRounding()</li>\n<li>Autodesk.Revit.DB.FormatOptions.HasRounding()</li>\n<li>Autodesk.Revit.DB.FormatOptions.UseGrouping</li>\n<li>Autodesk.Revit.DB.FormatOptions.GetName()</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.GetLayout(UVGridlineType)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.SetLayout(UVGridlineType, SpacingRuleLayout)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.GetNumber(UVGridlineType)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.SetNumber(UVGridlineType, int)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.GetDistance(UVGridlineType)</li>\n<li>Autodesk.Revit.DB.DefaultDivideSettings.SetDistance(UVGridlineType, double)</li>\n<li>Autodesk.Revit.DB.FabricArea.Create(Document, Element, IList&lt;CurveLoop&gt;, XYZ, XYZ)</li>\n<li>Autodesk.Revit.DB.FabricArea.GetCurveElementIds()</li>\n<li>Autodesk.Revit.DB.Structure.AreaReinforcement.Create(Document, Element, IList&lt;Curve&gt;, XYZ)</li>\n<li>Autodesk.Revit.DB.Structure.AreaReinforcement.GetCurveElementIds()</li>\n<li>Autodesk.Revit.DB.Structure.PathReinforcement.Create(Document, Element, IList&lt;Curve&gt;, Boolean)</li>\n<li>Autodesk.Revit.DB.Structure.RebarHookType.GetDefaultHookLength(double)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsValidProjectionType(AnalyticalElementSelector, AnalyticalDirection, AnalyticalProjectionType)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsValidDirectionForProjection(AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsValidSelectorAndDirection(AnalyticalElementSelector, AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsValidProjectionDatumPlane(AnalyticalElementSelector, AnalyticalDirection, ElementId)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.HasAlignment(AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.GetAnalyticalProjectionType(AnalyticalElementSelector, AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.SetAnalyticalProjectionType(AnalyticalElementSelector, AnalyticalDirection, AnalyticalProjectionType)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.GetAlignmentMethod(AnalyticalElementSelector, AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.SetAlignmentMethod(AnalyticalElementSelector, AnalyticalDirection, AnalyticalAlignmentMethod)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.GetAnalyticalProjectionDatumPlane(AnalyticalElementSelector, AnalyticalDirection)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.SetAnalyticalProjectionDatumPlane(AnalyticalElementSelector, AnalyticalDirection, ElementId)</li>\n<li>Autodesk.Revit.DB.Structure.AnalyticalModel.IsSurface()</li>\n<li>Autodesk.Revit.DB.TableSectionData.InsertColumn(int, bool)</li>\n<li>Autodesk.Revit.DB.FormatValueOptions.AreValidForUnitType(UnitType)</li>\n<li>Autodesk.Revit.DB.UnitFormatUtils.FormatValueToString(Units, UnitType, Double, Boolean, Boolean)</li>\n<li>Autodesk.Revit.DB.UnitFormatUtils.FormatValueToString(Units, UnitType, Double, Boolean, Boolean, FormatValueOptions)</li>\n<li>Autodesk.Revit.DB.ValueParsingOptions.FormatOptions</li>\n<li>Autodesk.Revit.DB.Material.MaterialCagtegory</li>\n<li>Autodesk.Revit.DB.View.SurfaceTransparency</li>\n<li>Autodesk.Revit.DB.View.ShowEdges</li>\n<li>Autodesk.Revit.DB.View.ShowSilhouettes</li>\n<li>Autodesk.Revit.DB.View.SilhouetteLineStyleId</li>\n<li>Autodesk.Revit.DB.WorksetConfiguration.CloseAll()</li>\n<li>Autodesk.Revit.DB.WorksetConfiguration.OpenLastViewed()</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;IFCAnyHandle &gt; values);</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;System.String &gt; values);</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;double&gt; values);</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;int&gt; values);</li>\n<li>Autodesk.Revit.DB.IFC.IFCAnyHandle.SetAttribute(System.String name, System.Collections.Generic.ICollection&lt;bool&gt; values);</li>\n<li>Autodesk.Revit.UI.Selection.Selection.Elements</li>\n</ul><a name=\"4.24\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Classes removed from API",
    "local_header_href": "#classes-removed-from-api",
    "chunk_text": "<h3>Classes removed from API</h3><p>The following previously deprecated classes have been removed from the API:</p><ul>\n<li>Autodesk.Revit.DB.Plumbing.PipeConnectionType</li>\n<li>Autodesk.Revit.UI.Selection.SelElementSet</li>\n<li>Autodesk.Revit.DB.IFC.ExporterIFCRegistry</li>\n</ul><a name=\"5\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "API additions",
    "local_header_href": "#api-additions",
    "chunk_text": "<h3>API additions</h3><a name=\"5.01\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Worksharing API additions",
    "local_header_href": "#worksharing-api-additions",
    "chunk_text": "<h3>Worksharing API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Workset creation",
    "local_header_href": "#workset-creation",
    "chunk_text": "<h4>Workset creation</h4><p>The new static method:</p><ul>\n<li>Workset.Create()</li>\n</ul><p>creates a new Workset.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "WorksetTable operations",
    "local_header_href": "#worksettable-operations",
    "chunk_text": "<h4>WorksetTable operations</h4><p>New static methods:</p><ul>\n<li>WorksetTable.RenameWorkset() – Renames the Workset.</li>\n<li>WorksetTable.IsWorksetNameUnique() – Checks if the given Workset name is unique in the document.</li>\n</ul><p>The new method:</p><ul>\n<li>WorksetTable.SetActiveWorksetId()</li>\n</ul><p>sets the active Workset.</p><a name=\"5.02\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Parameter API additions",
    "local_header_href": "#parameter-api-additions",
    "chunk_text": "<h3>Parameter API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Elements that store a reference to a parameter",
    "local_header_href": "#elements-that-store-a-reference-to-a-parameter",
    "chunk_text": "<h4>Elements that store a reference to a parameter</h4><p>The new class:</p><ul>\n<li>ParameterElement</li>\n</ul><p>is an Element that stores information about a particular user-defined parameter in the document. This parameter's id is used when referencing that user-defined parameter. The ParameterElement class exposes:</p><ul>\n<li>ParameterElement.GetDefinition()</li>\n</ul><p>The new class:</p><ul>\n<li>SharedParameterElement</li>\n</ul><p>is an Element that stores the definition of a shared parameter which is loaded into the document. This class is a child of ParameterElement, and exposes the following additional members:</p><ul>\n<li>GuidValue – The Guid that identifies this shared parameter.</li>\n<li>Create() – Creates a new shared parameter element in the document representing the parameter stored in the input ExternalDefinition.</li>\n<li>Lookup() – Finds the shared parameter element that corresponds to the given Guid.</li>\n</ul><a name=\"5.03\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Geometry API additions",
    "local_header_href": "#geometry-api-additions",
    "chunk_text": "<h3>Geometry API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Create loft",
    "local_header_href": "#create-loft",
    "chunk_text": "<h4>Create loft</h4><p>The new method:</p><ul>\n<li>GeometryCreationUtilities.CreateLoftGeometry()</li>\n</ul><p>creates a solid or open shell geometry by lofting between a sequence of curve loops.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Solid – copy",
    "local_header_href": "#solid-copy",
    "chunk_text": "<h4>Solid – copy</h4><p>The new method:</p><ul>\n<li>SolidUtils.Clone()</li>\n</ul><p>creates a new Solid which is a copy of the input Solid.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Solid – create transformed",
    "local_header_href": "#solid-create-transformed",
    "chunk_text": "<h4>Solid – create transformed</h4><p>The new method:</p><ul>\n<li>SolidUtils.CreateTransformed()</li>\n</ul><p>creates a new Solid which is the transformation of the input Solid.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Solid – cut with half-space",
    "local_header_href": "#solid-cut-with-half-space",
    "chunk_text": "<h4>Solid – cut with half-space</h4><p>The new methods:</p><ul>\n<li>BooleanOperationsUtils.CutWithHalfSpace()</li>\n<li>BooleanOperationsUtils.CutWithHalfSpaceModifyingOriginalSolid()</li>\n</ul><p>produce a solid which is the intersection of the input Solid with the half-space on the positive side of the given Plane. The positive side of the plane is the side to which Plane.Normal points. The first function creates a new Solid with the results, while the second modifies the existing solid (which must be a solid created by the application instead of one obtained from a Revit element).</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Curve – set graphics style",
    "local_header_href": "#curve-set-graphics-style",
    "chunk_text": "<h4>Curve – set graphics style</h4><p>The new method:</p><ul>\n<li>Curve.SetGraphicsStyleId()</li>\n</ul><p>Sets the graphics style id for the curve. Many methods in the Revit API will not use the graphics style associated to this curve. For example, curves used as portions of the sketch of an element will not read this property. Newly created curve elements will not use this value either, as they inherit their graphical properties from their associated category.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "CurveLoop – transform",
    "local_header_href": "#curveloop-transform",
    "chunk_text": "<h4>CurveLoop – transform</h4><p>The new methods:</p><ul>\n<li>CurveLoop.Transform()</li>\n<li>CurveLoop.CreateViaTransform()</li>\n</ul><p>allow transformation of an existing CurveLoop. The former transforms the curves contained within the CurveLoop (modifying itself), while the latter creates a copy of the original curve loop containing the transformed curves. In both cases, the new/modified CurveLoop is guaranteed to be valid with all consituent curves contiguous (assuming that the curves were contiguous in the input curve loop).</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "FaceSecondDerivatives",
    "local_header_href": "#facesecondderivatives",
    "chunk_text": "<h4>FaceSecondDerivatives</h4><p>The new class:</p><ul>\n<li>Autodesk.Revit.DB.FaceSecondDerivatives</li>\n</ul><p>contains second partial derivatives of a face at a specified point.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Face.ComputeSecondDerivatives",
    "local_header_href": "#facecomputesecondderivatives",
    "chunk_text": "<h4>Face.ComputeSecondDerivatives</h4><p>The new method:</p><ul>\n<li>Face.ComputeSecondDerivatives</li>\n</ul><p>allows users to access second coordinate derivatives of a face.</p><a name=\"5.04\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Custom Export API improvements",
    "local_header_href": "#custom-export-api-improvements",
    "chunk_text": "<h3>Custom Export API improvements</h3><p>The API allowing custom export of 3D views and their contents has been extended to allow for more data in the output.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "IExportContext",
    "local_header_href": "#iexportcontext",
    "chunk_text": "<h4>IExportContext</h4><p>IExportContext is now a base class for two other interfaces that support different contents on export. This base class contains methods that are common to both the leaf interfaces. Although it is still possible to use classes deriving directly from this base interface (for backward compatibility), future applications should implement the new leaf interfaces only.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "IPhotoRenderContext",
    "local_header_href": "#iphotorendercontext",
    "chunk_text": "<h4>IPhotoRenderContext</h4><p>This new leaf interface should be used for processing elements in the view in the same manner that Revit's Render command does. This is equivalent to what IExportContext allowed in Revit 2015 and earlier.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "IModelExportContext",
    "local_header_href": "#imodelexportcontext",
    "chunk_text": "<h4>IModelExportContext</h4><p>This new interface should be used for processing elements in the view in the same manner that Revit's processes them in 3D views. This context supports additional contents including model curves and text as shown in the 3D views. The new interface methods are:</p><ul>\n<li>OnCurve – export of a geometric curve, such as lines, arcs, Bezier curves, etc. </li>\n<li>OnPolyline – export of a polyline element </li>\n<li>OnPoint – export of a point element </li>\n<li>OnLineSegment – export of a tessellated line segment </li>\n<li>OnPolylineSegments – export of a tessellated polyline segments </li>\n<li>OnText – export of text annotation elements </li>\n</ul><p>The methods of this interface use the following new classes:</p><table style=\"margin-left: 20px\">\n<tr><td>ModelCurveNode</td><td>A base class of output nodes that represent various model curves.</td></tr>\n<tr><td>CurveNode</td><td>An output node that represents a model curve.</td></tr>\n<tr><td>PolylineNode</td><td> An output node that represents a 3D polyline.</td></tr>\n<tr><td>PointNode</td><td> An output node that represents a 3D point</td></tr>\n<tr><td>LineSegment</td><td>An output node that represents a tessellated line segment</td></tr>\n<tr><td>PolylineSegment</td><td>An output node that represents a tessellated polyline segments.</td></tr>\n<tr><td>TextNode</td><td>An output node representing a text annotation object.</td></tr>\n<tr><td>FormatedTextRun</td><td>A structure that defines a single run of a formatted text.</td></tr>\n<tr><td>LineProperties</td><td>A structure that provides access to pen properties of exported lines/curves</td></tr>\n</table><a name=\"5.05\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Export API additions",
    "local_header_href": "#export-api-additions",
    "chunk_text": "<h3>Export API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "DWFExportOptions",
    "local_header_href": "#dwfexportoptions",
    "chunk_text": "<h4>DWFExportOptions</h4><p>The new property:</p><ul>\n<li>DWFExportOptions.ExportTexture</li>\n</ul><p>sets an option indicating whether to export textures from Revit to 3D DWF files.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "BaseExportOptions",
    "local_header_href": "#baseexportoptions",
    "chunk_text": "<h4>BaseExportOptions</h4><p>The new property:</p><ul>\n<li>BaseExportOptions.PreserveCoincidentLines</li>\n</ul><p>sets an option indicating whether the export process to DWG, DXF or DGN preserves coincident lines during export.</p><p>There is a newly supported string value for:</p><ul>\n<li>BaseExportOptions.LayerMapping</li>\n</ul><p>The value \"DGN7\" can be used only for DGN export.</p><a name=\"5.06\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Dimension API additions",
    "local_header_href": "#dimension-api-additions",
    "chunk_text": "<h3>Dimension API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Dimension class",
    "local_header_href": "#dimension-class",
    "chunk_text": "<h4>Dimension class</h4><p>The following new members have been added to support adjustment of the text location and corresponding leaders of a given single dimension:</p><ul>\n<li>Dimension.Origin – returns the origin of the dimension (the middle point of the dimension line that makes up the dimension).</li>\n<li>Dimension.LeaderEndPosition – a read/write property representing the position of the dimension's leader end point.</li>\n<li>Dimension.TextPosition – a read/write property representing the position of the dimension text's drag point.</li>\n<li>Dimenson.IsTextPositionAdjustable() – indicates if this dimension is supported to get and set TextPosition/LeaderPosition.</li>\n<li>Dimension.ResetTextPosition() – resets the text position of the dimension to the initial position determined by its type and parameters.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "DimensionSegment",
    "local_header_href": "#dimensionsegment",
    "chunk_text": "<h4>DimensionSegment</h4><p>The following new members have been added to support adjustment of the text location and corresponding leaders of a given dimension segment in a multi-segment dimension:</p><ul>\n<li>DimensionSegment.LeaderEndPosition – a read/write property representing the position of the dimension segment's leader end point.</li>\n<li>DimensionSegment.TextPosition – a read/write property representing the position of the dimension segment's text's drag point.</li>\n<li>DimensionSegment.IsTextPositionAdjustable() – indicates if this dimension segment is supported to set/get TextPosition/LeaderPosition</li>\n<li>DimensionSegment.ResetTextPosition() – resets the text position of the segment to the initial position determined by its type and parameters.</li>\n</ul><a name=\"5.07\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Reinforcement API additions",
    "local_header_href": "#reinforcement-api-additions",
    "chunk_text": "<h3>Reinforcement API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RebarContainer",
    "local_header_href": "#rebarcontainer",
    "chunk_text": "<h4>RebarContainer</h4><p>The new element RebarContainer represents an aggregation of multiple Rebar sets. At this time it can only be created via the API. The advantages of using a RebarContainer are:</p><ul>\n<li>Defining new types of rebar distributions not possible with the Revit user interface</li>\n<li>Improve rebar performance by combining multiple rebar sets into the definition of a single element</li>\n</ul><p>A RebarContainer element contains a collection of RebarContainerItem objects. RebarContainerItem is a new class offering an API similar to that of the Rebar element. RebarContainerItems can be created directly or duplicated from the properties of an existing Rebar element. RebarContainer has support for iteration of the items directly from the RebarContainer object.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RebarContainer API",
    "local_header_href": "#rebarcontainer-api",
    "chunk_text": "<h4>RebarContainer API</h4><p>RebarContainer offers several collections of APIs similar to those offered by Rebar for management of rounding settings, presentation in a given view, and host. In addition, it offers the following members for management of the container and its items:</p><ul>\n<li>RebarContainer.Create() – Creates a new instance of a RebarContainer element within the project.</li>\n<li>RebarContainer.AppendItemFromRebar() – Appends an Item to the RebarContainer. Fills its data on base of the Rebar.</li>\n<li>RebarContainer.AppendItemFromCurves() – Appends an Item to the RebarContainer. Fills its data on base of the Rebar.</li>\n<li>RebarContainer.AppendItemFromRebarShape() – Appends an Item to the RebarContainer. Fills its data on base of the Rebar.</li>\n<li>RebarContainer.AppendItemFromCurvesAndShape() – Appends an Item to the RebarContainer. Fills its data on base of the Rebar.</li>\n<li>RebarContainer.RemoveItem() – Removes Item from the RebarContainer.</li>\n<li>RebarContainer.ClearItems() – Clears all the Items stored in this RebarContainer element.</li>\n<li>RebarContainer.Contains() – Checks if the RebarContainer has this item as one of its members.</li>\n<li>RebarContainer.ItemsCount – The count of Items in this RebarContainer.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RebarContainerItem API",
    "local_header_href": "#rebarcontaineritem-api",
    "chunk_text": "<h4>RebarContainerItem API</h4><p>RebarContainerItem offers many of the same APIs that Rebar offers, along with a few new members that allow management of the item within its parent container:</p><ul>\n<li>RebarContainerItem.SetFromRebar() – Set an instance of a RebarContainerItem element according to the parameters list</li>\n<li>RebarContainerItem.SetFromCurves() – Set an instance of a RebarContainerItem element according to the parameters list.</li>\n<li>RebarContainerItem.SetFromRebarShape() – Set an instance of a RebarContainerItem element, as an instance of a RebarShape. </li>\n<li>RebarContainerItem.SetFromCurvesAndShape() – Set an instance of a RebarContainerItem element according to the parameters list.</li>\n<li>RebarContainerItem.BarTypeId – The identifier of the rebar bar type.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RebarContainerType API",
    "local_header_href": "#rebarcontainertype-api",
    "chunk_text": "<h4>RebarContainerType API</h4><p>The new class:</p><ul>\n<li>RebarContainerType</li>\n</ul><p>represents the type element used in the generation of a RebarContainer.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RebarContainer parameters management",
    "local_header_href": "#rebarcontainer-parameters-management",
    "chunk_text": "<h4>RebarContainer parameters management</h4><p>The new class:</p><ul>\n<li>RebarContainerParameterManager</li>\n</ul><p>allows an application to manage and apply parameter overrides to a RebarContainer parameter. Normally parameters of the RebarContainer are derived from the parameters of the individual items it contains (if the parameter exists and has the same value in all items, it will exist and have the same value in the RebarContainer, while if the parameters are different in the individual items, the parameter will display without a value). Overrides allow an application to set a different value for a given parameter, or to add new shared parameters directly to the individual RebarContainer element.</p><p>The method:</p><ul>\n<li>RebarContainer.GetParametersManager</li>\n</ul><p>returns an object used to manage parameters of the RebarContainer.</p><p>The following methods are provided by the RebarContainerParameterManager class:</p><ul>\n<li>RebarContainerParameterManager.AddOverride – Adds an override for the given parameter as its value will be displayed for the RebarContainer element.</li>\n<li>RebarContainerParameterManager.RemoveOverride – Removes an overridden value from the given parameter.</li>\n<li>RebarContainerParameterManager.ClearOverrides – Clears any overridden values from all parameters of the associated RebarContainer element.</li>\n<li>RebarContainerParameterManager.SetOverriddenParameterReadonly – Sets this overridden parameter to be read-only.</li>\n<li>RebarContainerParameterManager.SetOverriddenParameterModifiable – Sets this overridden parameter to be modifiable.</li>\n<li>RebarContainerParameterManager.IsOverriddenParameterModifiable – Checks if overridden parameter is modifiable.</li>\n<li>RebarContainerParameterManager.IsParameterOverridden – Checks if the parameter has an override.</li>\n<li>RebarContainerParameterManager.IsRebarContainerParameter – Checks if the parameter is a RebarContainer parameter</li>\n<li>RebarContainerParameterManager.AddSharedParameterAsOverride – Adds a shared parameter as one of the parameter overrides stored by this RebarContainer element.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Bent Fabric Sheets",
    "local_header_href": "#bent-fabric-sheets",
    "chunk_text": "<h4>Bent Fabric Sheets</h4><p>It is possible using the Revit 2016 API to create a fabric sheet bent along bending curves. This is not possible in the Revit user interface.</p><p>It is not possible to convert a Fabric Sheet between flat and bent.</p><p>The following members allow creation and modification of bend fabric sheets:</p><ul>\n<li>FabricSheet.Create(.., CurveLoop BendProfile) – creates a bent fabric sheet driven by the input BendProfile</li>\n<li>FabricSheet.GetBendProfile() – gets the curves that drive the shape of bent fabric sheet</li>\n<li>FabricSheet.SetBendProfile() – modifies the curves that drive the shape of bent fabric sheet</li>\n<li>FabricSheet.GetBendProfileWithFillets() – gets the curves that drive the shape of bent fabric sheet.including automatically generated fillets if they exist</li>\n<li>FabricSheet.IsBent – identifies if the fabric sheet is bent or flat</li>\n<li>FabricSheet.BentFabricBendDirection – read/write to control which set of wires will be bent</li>\n<li>FabricSheet.bentFabricWiresOrientation – read/write to control the bars' orientation</li>\n<li>FabricSheet.bentFabricLongitudinalCutLength – read/write to control a cut to be applied – if the sheet should be shortened and the amount</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "PathReinforcement additions",
    "local_header_href": "#pathreinforcement-additions",
    "chunk_text": "<h4>PathReinforcement additions</h4><p>The new static method:</p><ul>\n<li>PathReinforcement.Create() – Creates a new PathReinforcement object from an array of curves and given Rebar Shape id.</li>\n</ul><p>New methods:</p><ul>\n<li>PathReinforcement.GetOrCreateDefaultRebarShape() – Creates a new RebarShape object with a default name or returns existing one which fulfills PathReinforcement bending data requirements</li>\n<li>PathReinforcement.IsAlternatingLayerEnabled() – checks if the alternating bars exist in the Path Reinforcement instance.</li>\n<li>PathReinforcement.IsValidRebarShapeId() – checks if the ElementId corresponds to valid RebarShape for use in Path Reinforcement.</li>\n<li>PathReinforcement.IsValidPrimaryBarOrientation() – checks the orientation is valid for primary bars.</li>\n<li>PathReinforcement.IsValidAlternatingBarOrientation() – checks the orientation is valid for alternating bars.</li>\n</ul><p>New properties:</p><ul>\n<li>PathReinforcement.PrimaryBarShapeId – The RebarShape element that defines the shape of the primary bars of the PathReinforcement.</li>\n<li>PathReinforcement.PrimaryBarOrientation – The orientation of the primary bars.</li>\n<li>PathReinforcement.AlternatingBarShapeId – The RebarShape element that defines the shape of the alternating bars of the PathReinforcement.</li>\n<li>PathReinforcement.AlternatingBarOrientation – The orientation of the alternating bars.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Reinforcement Settings API additions",
    "local_header_href": "#reinforcement-settings-api-additions",
    "chunk_text": "<h4>Reinforcement Settings API additions</h4><p>The new methods:</p><ul>\n<li>ReinforcementSettings.GetReinforcementAbbreviationTag()</li>\n<li>ReinforcementSettings.GetReinforcementAbbreviationTags()</li>\n<li>ReinforcementSettings.SetReinforcementAbbreviationTag()</li>\n</ul><p>provide access to the settings related to tagging abbreviations for area or path reinforcement.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Reinforcement rounding API additions",
    "local_header_href": "#reinforcement-rounding-api-additions",
    "chunk_text": "<h4>Reinforcement rounding API additions</h4><p>The new members:</p><ul>\n<li>RebarRoundingManager.TotalLengthRoundingMethod</li>\n<li>RebarRoundingManager.SegmentLengthRoundingMethod</li>\n<li>RebarRoundingManager.ApplicableTotalLengthRoundingMethod</li>\n<li>RebarRoundingManager.ApplicableSegmentLengthRoundingMethod</li>\n<li>FabricRoundingManager.TotalLengthRoundingMethod</li>\n<li>FabricRoundingManager.ApplicableTotalLengthRoundingMethod</li>\n</ul><p>provide access to the rounding method applied to different values found in reinforcement lengths. The new property:</p><ul>\n<li>FormatOptions.RoundingMethod</li>\n</ul><p>specifies the rounding method used to for specific format options. This property is currently only supported for Rebar parameters. FormatOptions objects used in other contexts must contain the default rounding method (Nearest).</p><a name=\"5.08\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Structural Analytical Model API additions",
    "local_header_href": "#structural-analytical-model-api-additions",
    "chunk_text": "<h3>Structural Analytical Model API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Member Forces for Analytical Model",
    "local_header_href": "#member-forces-for-analytical-model",
    "chunk_text": "<h4>Member Forces for Analytical Model</h4><p>The new class:</p><ul>\n<li>MemberForces</li>\n</ul><p>defines the internal forces and moments applied to the start or end of an AnalyticalModelStick element. Access these forces through the new methods:</p><ul>\n<li>AnalyticalModelStick.GetMemberForces() – Gets the Member Forces associated with the element.</li>\n<li>AnalyticalModelStick.SetMemberForces() – Sets and adds Member Forces to the element.</li>\n<li>AnalyticalModelStick.RemoveMemberForces() – Removes Member Forces defined for the given position.</li>\n<li>AnalyticalModelStick.RemoveAllMemberForces() – Removes all Member Forces associated with the element.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "AnalyticalModelStick",
    "local_header_href": "#analyticalmodelstick",
    "chunk_text": "<h4>AnalyticalModelStick</h4><p>New Methods:</p><ul>\n<li>AnalyticalModelStick.GetLocalCoordinateSystem(XYZ point) – Get the local coordinate system in a specified point on the analytical model.</li>\n<li>AnalyticalModelStick.GetLocalCoordinateSystem(double parameter) – Get the local coordinate system in a specified point on the analytical model.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "AnalyticalModelSurface",
    "local_header_href": "#analyticalmodelsurface",
    "chunk_text": "<h4>AnalyticalModelSurface</h4><p>New Method:</p><ul>\n<li>AnalyticalModelSurface.GetLocalCoordinateSystem(XYZ point): allow to possess LCS in specified point on analytical model</li>\n</ul><p>Change in the SurfaceElementProjectionZ enumeration:</p><p>The enumerated value SurfaceElementProjectionZ.Center has been replaced by SurfaceElementProjectionZ.CenterOfElement.</p><a name=\"5.09\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "MEP Fabrication API",
    "local_header_href": "#mep-fabrication-api",
    "chunk_text": "<h3>MEP Fabrication API</h3><p>The new MEP Fabrication API allows users to connect various FabricationConfigurations to Revit. With a FabricationConfiguration, they can create and use FabricationParts in their project, and define connectors to those parts.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "FabricationConfiguration",
    "local_header_href": "#fabricationconfiguration",
    "chunk_text": "<h4>FabricationConfiguration</h4><p>The new class FabricationConfiguration contains information about the fabrication configuration settings used by the project. Using this class, users can get and set the fabrication configuration settings for the document. They can also load and unload services, reload the fabrication configuration, get loaded services, get fabrication specifications, get material and insulation information from the configuration, and get connector information.</p><p>The new static method:</p><ul>\n<li>FabricationConfiguration.GetFabricationConfiguration</li>\n</ul><p>gets the fabrication configuration element in the document.</p><p>Some new methods include:</p><ul>\n<li>static FabricationConfiguration.GetFabricationConfiguration – Gets the fabrication configuration settings in the document.</li>\n<li>FabricationConfiguration.SetConfiguration() – Sets the fabrication configuration for the document.</li>\n<li>FabricationConfiguration.LoadServices() – Load the specified fabrication services into the project.</li>\n<li>FabricationConfiguration.UnloadServices() – Unload the specified fabrication services from the project.</li>\n<li>FabricationConfiguration.ReloadConfiguration() – Reloads the fabrication configuration from its source fabrication configuration.</li>\n<li>FabricationConfiguration.GetAllSpecifications() – Gets all specification identifiers in the fabrication configuration.</li>\n<li>FabricationConfiguration.GetAllLoadedServices() – Returns all the loaded fabrication services.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "FabricationService",
    "local_header_href": "#fabricationservice",
    "chunk_text": "<h4>FabricationService</h4><p>The new class FabricationService is part of the fabrication configuration and defines what FabricationServiceButtons can be used.</p><p>Some new properties include:</p><ul>\n<li>FabricationService.Name – The name of the service.</li>\n<li>FabricationService.TabCount – The number of tabs in the service.</li>\n</ul><p>Some new methods include:</p><ul>\n<li>FabricationService.GetButtonCount() – Gets the number of buttons for a given tab in the service. </li>\n<li>FabricationService.GetButton() – Gets the service button for a given tab index and button index from the service. </li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "FabricationPart",
    "local_header_href": "#fabricationpart",
    "chunk_text": "<h4>FabricationPart</h4><p>The new class FabricationPart represents a fabrication component in the Autodesk Revit MEP product. Using this class, users can create, place, move and align fabrication parts in a Revit model. Users can also get or set the dimensions of the fabrication part, and get the fabrication hosted information and rod information.</p><p>Some new methods include:</p><ul>\n<li>static FabricationPart.Create() – Creates a fabrication part based on a FabricationServiceButton.</li>\n<li>static FabricationPart.CreateHanger() – Creates a fabrication hanger on another fabrication part.</li>\n<li>static FabricationPart.AlignPartByConnectors() – Moves and aligns fabrication part by one of its connectors to align to another connector.</li>\n<li>FabricationPart.GetDimensionValue() – Gets the value of fabrication dimension.</li>\n<li>FabricationPart.SetDimensionValue() – Sets the fabrication dimension value.</li>\n<li>FabricationPart.GetHostedInfo() – Gets the fabrication hosted element information.</li>\n<li>FabricationPart.GetRodInfo() – Gets the fabrication rod information.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "FabricationServiceButton",
    "local_header_href": "#fabricationservicebutton",
    "chunk_text": "<h4>FabricationServiceButton</h4><p>The new class FabricationServiceButton defines a button used in a FabricationService. A fabrication service button defines what items to use for different conditions.</p><p>Some new methods include:</p><ul>\n<li>FabricationServiceButton.GetConditionLowerValue() – Gets the condition lower value for a given condition.</li>\n<li>FabricationServiceButton.GetContionUpperValue() – Gets the condition upper value for a given condition.</li>\n<li>FabricationServiceButton.IsAHanger()-Checks if the fabrication service button is a hanger.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Other Fabrication Classes",
    "local_header_href": "#other-fabrication-classes",
    "chunk_text": "<h4>Other Fabrication Classes</h4><p>The following fabrication-based classes are also added to Revit:</p><ul>\n<li>FabricationPartType – Defines the type of a FabricationPart.</li>\n<li>FabricationRodInfo – Gives rod information for a FabricationPart.</li>\n<li>FabricationHostedInfo – Contains hosting information for a FabricationPart and provides the ability to disconnect from the host.</li>\n<li>FabricationConnectorInfo – Contains information about the connectors of a FabricationPart.</li>\n<li>FabricationUtils – Provides a new method to check the validity of connections.</li>\n<li>FabricationDimensionDefinition – Contains information about a fabrication dimension. </li>\n<li>FabricationConfigurationInfo – Contains information about the properties of a FabricationConfiguration.</li>\n<li>ConfigurationReloadInfo – Contains results from reloading a FabricationConfiguration.</li>\n<li>ConnectionValidationInfo – Contains connection-related warnings generated by reloading a FabricationConfiguration. </li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Other Fabrication API related changes",
    "local_header_href": "#other-fabrication-api-related-changes",
    "chunk_text": "<h4>Other Fabrication API related changes</h4>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Connector API",
    "local_header_href": "#connector-api",
    "chunk_text": "<h4>Connector API</h4><p>Several new members were added to the Connector class:</p><ul>\n<li>Connector.Id – A unique identifier to identify this connector.</li>\n<li>Connector.GetFabricationConnectorInfo() – Gets fabrication connectivity information from a connector.</li>\n<li>Connector.GetMEPConnectorInfo() – Gets MEP connector information from a connector.</li>\n</ul><p>In addition, the new static method:</p><ul>\n<li>Pipe.IsPipingConnector()</li>\n</ul><p>checks if the given connector is a valid piping connector.</p><a name=\"5.10\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "View3D additions",
    "local_header_href": "#view3d-additions",
    "chunk_text": "<h3>View3D additions</h3><p>Several new methods provide support for switching camera targets and for switching between perspective and isometric for a 3D view:</p><ul>\n<li>View3D.CanResetCameraTarget() – Checks whether the camera target can be reset for this view.</li>\n<li>View3D.ResetCameraTarget() – Resets the camera target to the center of the field of view. </li>\n<li>View3D.CanToggleBetweenPerspectiveAndIsometric() – Checks whether the view can toggle between Perspective and isometric.</li>\n<li>View3D.ToggleToPerspective() – Toggles the view to perspective.</li>\n<li>View3D.ToggleToIsometric() – Toggles the view to isometric.</li>\n</ul><a name=\"5.11\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ScheduleDefinition",
    "local_header_href": "#scheduledefinition",
    "chunk_text": "<h3>ScheduleDefinition </h3><p>New Properties:</p><ul>\n<li>ScheduleDefinition.ShowTitle – Indicates if the title will be displayed in the schedule.</li>\n<li>ScheduleDefinition.ShowHeaders – Indicates if the headers will be displayed in the schedule.</li>\n</ul><a name=\"5.12\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "StairsType API changes",
    "local_header_href": "#stairstype-api-changes",
    "chunk_text": "<h3>StairsType API changes</h3><p>The properties:</p><ul>\n<li>StairsType.LeftSideSupportType</li>\n<li>StairsType.RightSideSupportType</li>\n</ul><p>are now correctly allowed to be set when the left or right string style is set to Closed.</p><a name=\"5.13\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ElectricalSetting API additions",
    "local_header_href": "#electricalsetting-api-additions",
    "chunk_text": "<h3>ElectricalSetting API additions</h3><p>The following new properties have been exposed:</p><ul>\n<li>ElectricalSetting.CircuitSequence – Accesses the circuit sequence numbering schema</li>\n<li>ElectricalSetting.CircuitNamePhaseA – Accesses the circuit naming by phase (Phase A Label).</li>\n<li>ElectricalSetting.CircuitNamePhaseB – Accesses the circuit naming by phase (Phase B Label).</li>\n<li>ElectricalSetting.CircuitNamePhaseC – Accesses the circuit naming by phase (Phase C Label).</li>\n</ul><a name=\"5.14\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "PanelScheduleView",
    "local_header_href": "#panelscheduleview",
    "chunk_text": "<h3>PanelScheduleView</h3><p>New Methods</p><ul>\n<li>PanelScheduleView.GetCellsBySlotNumber () – Returns a range of cells for the given slot number</li>\n<li>PanelScheduleView.CanMoveSlotTo() – Verifies if can circuits in the source slot to the specific slot.</li>\n<li>PanelScheduleView.MoveSlotTo() – Move the circuits in the source slot to the specific slot.</li>\n</ul><a name=\"5.15\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "FamilyInstance additions",
    "local_header_href": "#familyinstance-additions",
    "chunk_text": "<h3>FamilyInstance additions</h3><p>The new method:</p><ul>\n<li>FamilyInstance.HasModifiedGeometry() – Identifies if the geometry of this FamilyInstance has been modified from the automatically generated default.</li>\n</ul><p>New properties and methods introduced for reading the information about spatial calculation point(s) directly from family instances:</p><ul>\n<li>FamilyInstance.HasSpatialElementCalculationPoint – Identifies if this instance has a single SpatialElementCalculationPoint used as the search point for Revit to identify if the instance is inside a room or space.</li>\n<li>FamilyInstance.HasSpatialElementFromToCalculationPoints – Identifies if this instance has a pair of SpatialElementCalculationPoints used as the search points for Revit to identify if the instance lies between up to two rooms or spaces. The points determine which room or space is considered the \"from\" and which is considered the \"to\" for a family instance which connects two rooms or spaces, such as a door or window.</li>\n<li>FamilyInstance.GetSpatialElementCalculationPoint() – Gets the location of the calculation point for this instance.</li>\n<li>FamilyInstance.GetSpatialElementFromToCalculationPoints() – Gets the locations for the calculation points for this instance. For a family instance which connects two rooms or spaces, such as a door or window, the points determine which room or space is considered the \"from\" and which is considered the \"to\".</li>\n</ul><a name=\"5.16\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Category API additions",
    "local_header_href": "#category-api-additions",
    "chunk_text": "<h3>Category API additions</h3><p>The new static methods:</p><ul>\n<li>Category.GetCategory(Document, ElementId)</li>\n<li>Category.GetCategory(Document, BuiltInCategory)</li>\n</ul><p>act as a shortcut to lookup and return a Category object.</p><a name=\"5.17\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Family API additions",
    "local_header_href": "#family-api-additions",
    "chunk_text": "<h3>Family API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Family.GetFamilyTypeParameterValues method",
    "local_header_href": "#familygetfamilytypeparametervalues-method",
    "chunk_text": "<h4>Family.GetFamilyTypeParameterValues method</h4><p>Returns all applicable values for a <b>FamilyType</b> parameter of a family.</p><p>The values are Element Ids of all family types that match the category specified by the definition of the given parameter. The elements are either of class <b>ElementType</b> or <b>NestedFamilyTypeReference</b>. The second variant is for the types that are nested in families and thus are not accessible otherwise.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "NestedFamilyTypeReference class",
    "local_header_href": "#nestedfamilytypereference-class",
    "chunk_text": "<h4>NestedFamilyTypeReference class</h4><p>A class representing a proxy element for a nested family type.</p><p>In Revit, this element represents a value of a <b>FamilyType</b> parameter of a loaded family. Each such element corresponds to a nested FamilyType element in the original family document where the family was defined. This element stores only basic information about the nested FamilyType, such as the name of the Type, name of the Family, and a Category.</p><p>It is possible to obtain a set of applicable elements of this class for a particular FamilyType parameter of a family by calling Family.<b>GetFamilyTypeParameterValues</b>.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Creation of adaptive component instances",
    "local_header_href": "#creation-of-adaptive-component-instances",
    "chunk_text": "<h4>Creation of adaptive component instances</h4><p>The new constructor:</p><ul>\n<li>FamilyInstanceCreationData(Autodesk::Revit::DB::FamilySymbol^ symbol, System::Collections::Generic::IList<revit::db::xyz^>^ adaptivePoints)</revit::db::xyz^></li>\n</ul><p>creates an instance of a class wrapping the arguments used to place adaptive components. This may be more efficient than placing individual adaptive components one-by-one.</p><a name=\"5.18\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ComponentRepeater additions",
    "local_header_href": "#componentrepeater-additions",
    "chunk_text": "<h3>ComponentRepeater additions</h3><p>New Methods</p><ul>\n<li>ComponentRepeater.CanElementBeRepeated() – Determines whether an element can be repeated using the RepeatElements method. </li>\n<li>ComponentRepeater.RemoveRepeaters() – Removes component repeaters from the document, but leaves the individual repeated components in their respective locations and hosted on their original hosts.</li>\n</ul><a name=\"5.19\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Point cloud API additions",
    "local_header_href": "#point-cloud-api-additions",
    "chunk_text": "<h3>Point cloud API additions</h3><p>The new method:</p><ul>\n<li>PointCloudType.GetPath()</li>\n</ul><p>gets the path of the link source from which the points are loaded.</p><p>The new property:</p><ul>\n<li>Application.PointCloudsRootPath</li>\n</ul><p>gets the root path for point cloud files. This root path is used by Revit to calculate relative paths to point cloud files.</p><a name=\"5.20\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Application additions",
    "local_header_href": "#application-additions",
    "chunk_text": "<h3>Application additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Application.BackgroundColor",
    "local_header_href": "#applicationbackgroundcolor",
    "chunk_text": "<h4>Application.BackgroundColor</h4><p>The new property:</p><ul>\n<li>Application.BackgroundColor</li>\n</ul><p>allows read and write of the background color to use for model views in this session.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Application.OptimizePerformanceDuringRedraw",
    "local_header_href": "#applicationoptimizeperformanceduringredraw",
    "chunk_text": "<h4>Application.OptimizePerformanceDuringRedraw</h4><p>The new property:</p><ul>\n<li>Application.OptimizePerformanceDuringRedraw</li>\n</ul><p>enables or disables the option to allow view manipulation during redraw.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Application.IsLoggedIn",
    "local_header_href": "#applicationisloggedin",
    "chunk_text": "<h4>Application.IsLoggedIn</h4><p>The new static property:</p><ul>\n<li>Application.IsLoggedIn</li>\n</ul><p>checks if the user is logged in from this session to their Autodesk account.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Application.LoginUserId",
    "local_header_href": "#applicationloginuserid",
    "chunk_text": "<h4>Application.LoginUserId</h4><p>The new property:</p><ul>\n<li>Application.LoginUserId</li>\n</ul><p>returns the user id of the user currently logged in. This is an internal id used by Autodesk to represent the logged in user. This user id is in human unrecognizable form. In conjunction with the Autodesk Exchange Store Entitlement REST API, a publisher of an Autodesk Exchange Store application can verify if the current user has purchased their app from the store. For more information about the Exchange Store, please refer to www.autodesk.com/developapps.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Application.IsSubscriptionUpdate",
    "local_header_href": "#applicationissubscriptionupdate",
    "chunk_text": "<h4>Application.IsSubscriptionUpdate</h4><p>The new property:</p><ul>\n<li>Application.IsSubscriptionUpdate</li>\n</ul><p>checks if the running Revit is a subscription update.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Application.ShowGraphicalWarningHangerDisconnects",
    "local_header_href": "#applicationshowgraphicalwarninghangerdisconnects",
    "chunk_text": "<h4>Application.ShowGraphicalWarningHangerDisconnects</h4><p>The new property</p><ul>\n<li>Application.ShowGraphicalWarningHangerDisconnects</li>\n</ul><p>indicates whether or not to show the graphical warnings for Fabrication Hanger disconnects.</p><a name=\"5.21\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "Thin lines options",
    "local_header_href": "#thin-lines-options",
    "chunk_text": "<h3>Thin lines options</h3><p>A utility class <b>ThinLinesOptions</b> is added that contains the setting related to the Thin Lines options which affects the display in the UI.</p><p>The static property:</p><ul>\n<li>ThinLinesOptions.AreThinLinesEnabled </li>\n</ul><p>defines if the 'Thin Lines' setting is on or off in this session.</p><a name=\"5.22\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "3D view API additions",
    "local_header_href": "#3d-view-api-additions",
    "chunk_text": "<h3>3D view API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "ViewNavigationToolSettings",
    "local_header_href": "#viewnavigationtoolsettings",
    "chunk_text": "<h4>ViewNavigationToolSettings</h4><p>The new class</p><ul>\n<li>ViewNavigationToolSettings</li>\n</ul><p>carries settings related to the View Cube and other view navigation tools. There is one element carrying these settings in each document. Use:</p><ul>\n<li>ViewNavigationToolSettings.GetViewNavigationToolSettings(Document)</li>\n</ul><p>to obtain it.</p><p>The methods:</p><ul>\n<li>ViewNavigationToolSettings.GetHomeCamera() – Returns an object of type HomeCamera which has information about the camera and view.</li>\n<li>ViewNavigationToolSettings.IsHomeCameraSet() – Checks if the home view is set in the settings.</li>\n</ul>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "HomeCamera",
    "local_header_href": "#homecamera",
    "chunk_text": "<h4>HomeCamera</h4><p>The new class HomeCamera contains information about the camera and view for the Home view orientation stored in the model.</p><p>New properties:</p><ul>\n<li>HomeCamera.EyePosition</li>\n<li>HomeCamera.Center</li>\n<li>HomeCamera.UpDirection</li>\n<li>HomeCamera.Pivot</li>\n<li>HomeCamera.LeftAngleOfFieldOfView</li>\n<li>HomeCamera.RightAngleOfFieldOfView</li>\n<li>HomeCamera.TopAngleOfFieldOfView</li>\n<li>HomeCamera.BottomAngleOfFieldOfView</li>\n<li>HomeCamera.OrthogonalProjectionWidth</li>\n<li>HomeCamera.OrthogonalProjectionHeight</li>\n<li>HomeCamera.ViewId</li>\n</ul><a name=\"5.23\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "UI API additions",
    "local_header_href": "#ui-api-additions",
    "chunk_text": "<h3>UI API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "UIDocument.SaveAs",
    "local_header_href": "#uidocumentsaveas",
    "chunk_text": "<h4>UIDocument.SaveAs</h4><p>The new class:</p><ul>\n<li>Autodesk.Revit.UI.UISaveAsOptions</li>\n</ul><p>offers options for UIDocument.SaveAs method as below.</p><p>The new overload method:</p><ul>\n<li>UIDocument.SaveAs(UISaveAsOptions)</li>\n</ul><p>takes a UISaveAsOptions parameter to allow the dialog prompting the user to overwrite existing files to be shown or suppressed.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "TableViewUIUtils.TestCellAndPromptToEditTypeParameter",
    "local_header_href": "#tableviewuiutilstestcellandprompttoedittypeparameter",
    "chunk_text": "<h4>TableViewUIUtils.TestCellAndPromptToEditTypeParameter</h4><p>The new static method:</p><ul>\n<li>TableViewUIUtils.TestCellAndPromptToEditTypeParameter(TableView, SectionType, int, int)</li>\n</ul><p>involves the Revit UI and operate on schedule views or MEP electrical panel schedules, and prompts the end-user to control whether a type parameter contained in the specified table cell should be allowed edited,</p><p>It replaced the method:</p><ul>\n<li>TableView.IsOkToEditParam()</li>\n</ul><p>which has been removed completely in Revit 2016.</p>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "SetupEnergySimulationDialog",
    "local_header_href": "#setupenergysimulationdialog",
    "chunk_text": "<h4>SetupEnergySimulationDialog</h4><p>The new class:</p><ul>\n<li>Autodesk.Revit.UI.SetupEnergySimulationDialog</li>\n</ul><p>represents the Revit dialog which typically precedes invocation of an Energy Simulation run on the Green Building Studio server to get user selection of project and run info.</p><p>New methods and properties:</p><ul>\n<li>SetupEnergySimulationDialog.Show() – Shows the SetupEnergySimulationDialog to the user as a modal dialog. The user has the option to select the project and run name, these can be ready by the application when the user closes the dialog.</li>\n<li>SetupEnergySimulationDialog.ProjectId – The identifier of the project (on the Green Building Studio server) that was selected by the user.</li>\n<li>SetupEnergySimulationDialog.ProjectName – The project name (representing a project on the Green Building Studio server) selected or supplied by the user.</li>\n<li>SetupEnergySimulationDialog.RunName – The name of the analysis run that was supplied by the user.</li>\n</ul><a name=\"5.24\"></a>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "AddInUtility API additions",
    "local_header_href": "#addinutility-api-additions",
    "chunk_text": "<h3>AddInUtility API additions</h3>"
  },
  {
    "original_filename": "1311_whats_new_2016",
    "header_text": "RevitProduct.IsSubscriptionUpdate",
    "local_header_href": "#revitproductissubscriptionupdate",
    "chunk_text": "<h4>RevitProduct.IsSubscriptionUpdate</h4><p>The new property:</p><ul>\n<li>RevitProduct.IsSubscriptionUpdate</li>\n</ul><p>allows users to check if a particular Revit is a subscription update.</p>"
  }
]