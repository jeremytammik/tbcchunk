[
  {
    "original_filename": "0785_windows_device_coords",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0785_windows_device_coords",
    "header_text": "UIView and Windows Device Coordinates",
    "local_header_href": "#uiview-and-windows-device-coordinates",
    "chunk_text": "<h3>UIView and Windows Device Coordinates</h3><p>As I pointed out in the discussion of the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html\">\nRevit 2013 API</a> features,\n\nthe add-in integration enhancements include a new View API, and it provides a new UIView class.\n\n<p>The UIView class represents a view window, enables you to pan, zoom and determine its size for tiling etc., and may be useful for switchback functionality from other visualization environments, for example.\n\n<p>I am very surprised that I have not heard anything more from the developer community about this class yet, nor received any cases querying it and its behaviour.\n\n<p>Maybe the entire humanity falls into just one of two classes: those who missed it entirely, and those who noticed and made use of it without any problem whatsoever.\n\n<p>Anyway, after waiting for a couple of months now and still hearing nothing about it from anyone else, I decided to try it out myself, and I must say I belong to the second group.\n\n<p>The UIView class provides only three methods of interest to us:\n\n<ul>\n<li>GetWindowRectangle returning the rectangle containing the coordinates of the view's drawing area, in Windows coordinates. \n<li>GetZoomCorners returning the corners of the view's rectangle, in Revit model coordinates. \n<li>ZoomAndCenterRectangle, which zooms and centres the view to a specified rectangle. \n</li></li></li></ul>\n<p>The reason I find this so utterly exciting is that this is the first time in the history of mankind that we have any official possibility at all to correlate between Windows and Revit coordinates, opening unlimited new interaction possibilities.\nFor instance, how about displaying your own tooltip during the Idling event?\n\n<p>I created a little external command WinCoords which exercises all three of these methods.\n\n<p>By the way, the only way that I saw to access a UIView instance was using the UIDocument GetOpenUIViews method, which returns a list of all of them.\n\n<p>Since each UIView has a property ViewId, we can easily pick the one corresponding to the document active view.\n\n<p>Here is my command implementation, which \n\n<ul>\n<li>Gets the active view.\n<li>Gets all UIView instances.\n<li>Determines the UIView for the active view.\n<li>Queries and reports its Windows and Revit coordinates.\n<li>Calculates new Revit coordinates to zoom in by 10%.\n<li>Calls ZoomAndCenterRectangle to do so.\n</li></li></li></li></li></li></ul>\n<p>Short and sweet, and a read-only command, of course:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n  <span class=\"teal\">View</span> view = doc.ActiveView;\n  <span class=\"teal\">UIView</span> uiview = <span class=\"blue\">null</span>;\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">UIView</span>&gt; uiviews = uidoc.GetOpenUIViews();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">UIView</span> uv <span class=\"blue\">in</span> uiviews )\n  {\n    <span class=\"blue\">if</span>( uv.ViewId.Equals( view.Id ) )\n    {\n      uiview = uv;\n      <span class=\"blue\">break</span>;\n    }\n  }\n \n  <span class=\"teal\">Rectangle</span> rect = uiview.GetWindowRectangle();\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = uiview.GetZoomCorners();\n  <span class=\"teal\">XYZ</span> p = corners[0];\n  <span class=\"teal\">XYZ</span> q = corners[1];\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format( \n    <span class=\"maroon\">\"UIView Windows rectangle: {0}; \"</span>\n    + <span class=\"maroon\">\"zoom corners: {1}-{2}; \"</span>\n    + <span class=\"maroon\">\"click Close to zoom in by 10%.\"</span>, \n    RectangleString( rect ), \n    PointString( p ), PointString( q ) );\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"WinCoords\"</span>, msg );\n \n  <span class=\"green\">// Calculate new zoom corners to </span>\n  <span class=\"green\">// zoom in by 10%, i.e. the two corners</span>\n  <span class=\"green\">// end up at 0.45 of their previous</span>\n  <span class=\"green\">// distance to the centre point.</span>\n \n  <span class=\"teal\">XYZ</span> v = q - p;\n  <span class=\"teal\">XYZ</span> center = p + 0.5 * v;\n  v *= 0.45;\n  p = center - v;\n  q = center + v;\n \n  uiview.ZoomAndCenterRectangle( p, q );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>This is the task dialogue reporting the results in the 3D view of the rac_basic_sample_project.rvt:\n\n<center>\n<img alt=\"WinCoords\" src=\"img/WinCoords.png\"/>\n</center>\n<p>After clicking 'Close', the view is zoomed in  by 10 percent, as expected.\n\n<p>Since Windows coordinates have the Y direction reversed to normal systems, the rectangle display string is generated like this:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a string representing the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> given Rectangle instance size, in</span>\n  <span class=\"gray\">///</span><span class=\"green\"> the order left+top, right+bottom.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Windows coordinates reverse the Y </span>\n  <span class=\"gray\">///</span><span class=\"green\"> direction!</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> RectangleString( <span class=\"teal\">Rectangle</span> r )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"({0},{1})-({2},{3})\"</span>,\n      r.Left, r.Top, r.Right, r.Bottom );\n  }\n</pre>\n<p>Here is my little \n\n<a href=\"zip/WinCoords.zip\">\nWinCoords sample</a> including\n\nthe entire source code, Visual Studio solution and add-in manifest for this command.\n\n<p>I hope you find this useful and am excited to see what you come up with making use of this.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]