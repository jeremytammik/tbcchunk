[
  {
    "original_filename": "0944_addin_wizard_2014",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0944_addin_wizard_2014",
    "header_text": "Add-In Wizards for Revit 2014",
    "local_header_href": "#add-in-wizards-for-revit-2014",
    "chunk_text": "<h3>Add-In Wizards for Revit 2014</h3><p>I updated my Visual Studio Revit add-in wizards and am taking the time to publish them today, which is\n\n<a href=\"http://en.wikipedia.org/wiki/Ascension_Day\">\nAscension Day</a> and\n\na holiday in Neuchâtel.\n\n<p>That also gives me some extra time to prepare for the June 3-4 Tech Summit presentation of my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/cloud-mobile-extensible-storage-data-use-in-schedules.html#3\">\ncloud-based round-trip 2D Revit model editing project</a>.\n\n<p>The presentation must be pre-submitted by May 20, and a full recording by May 27, so pressure is rising.\nI completed the implementation and still want to catch up on documenting it here on the blog as well.\nYou will be happy to hear that the auto-updating functionality using the Idling event now works fine.\n\n\n<a name=\"1\"></a>\n<h4>Old and New Wizardry</h4>\n<p>I am starting to create numerous Revit 2014 add-ins now for quick testing purposes.\nAs soon as that stage is reached, I immediately update my Visual Studio Revit C# add-in wizard.\n\n<p>The 2014 version generates the same boiler-plate code as the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/add-in-wizard-for-revit-2013.html\">\nRevit 2013</a> one\n\ndid, which can be simply deleted if not needed.\n\n<p>Last time around, I egoistically did not implement the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/update-api-assembly-references-and-wizards.html#4\">\nVB version</a> until later.\n\n<!-- If you need it, why did you not provide it for the community in general? -->\n<p>This time though, better realising how much appreciated it is, I took care of that as well, right up front.</p>\n<!-- Therefore, for the sake of you VB folks, I went and updated the Visual Basic version also, even though I never actually use it.\nI did test it once, though, and it does do its job  :-) -->\n<p>It is important to understand how easy it is to modify the wizards for your own needs, and make copies with variations to support different requirements.</p>\n<p>Here is an overview of previous explanations of various aspects that also show how create your own flavours:</p>\n<ul>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/devtv-addin-templates.html\">\nOriginal introduction, benefits, and usage example</a> for C# and VB.\n\n<li>Personalised\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#2\">\nminimal C# version</a> for Revit 2011.\n\n<li>A short additional\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/snow-and-woe-with-manifest-files.html\">\nusage note</a>.\n\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/automate-designoption-and-64-bit-add-in-templates.html#2\">\n64-bit versions</a> for C# and VB.\n\n<li>Support for the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/visual-studio-add-in-wizards-for-revit-2012.html\">\nRevit 2012 API</a> for\n\nC# and VB.\n\n<li>Updated C# and VB versions placing\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/product-and-add-in-wizard-updates.html#3\">\nassembly DLL alongside add-in manifest</a> and\n\nincluding other changes.\n\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/add-in-wizard-for-revit-2013.html\">\nRevit 2013 C#</a> version including more skeleton code.</li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/update-api-assembly-references-and-wizards.html#4\">\nRevit 2013 VB</a> version.</li>\n</li></li></li></li></li></li></ul>\n<a name=\"2\"></a>\n<h4>Installing to non-x86 Program Files</h4>\n<p>I had a new issue to struggle with this time around, mentioned in the list above as well, dealing with 64-bit systems.</p>\n<p>My Windows 7 virtual machine is a 64-bit system.</p>\n<p>The $(ProgramFiles) used in the Visual Studio project template file automatically resolves that to \"C:\\Program Files (x86)\", which is the wrong location.</p>\n<p>Revit 2014 is installed in \"C:\\Program Files\" with no x86 suffix.</p>\n<p>Researching this, I found a resolution described and explained in this discussion on\n\n<a href=\"http://stackoverflow.com/questions/7066910/msbuild-and-programfiles-issue-with-32-64-bits\">\nMSBuild and $(ProgramFiles) issue with 32/64 bits</a>.</p>\n<p>Unfortunately, that did not work at all.\nMSBuildExtensionsPath64 is not recognised in the Visual Studio wizard, at least in my simple use of it.</p>\n<p>In the end, I simply checked what system variables are actually set on my system and found ProgramW6432 instead.\nThat works fine.</p>\n<p>Now both the C# and the VB versions work perfectly for me.\n\n\n<a name=\"3\"></a>\n<h4>Revit Add-in Wizard Usage</h4>\n<p>I can simply install the wizard zip files in the appropriate locations, start up Visual Studio, create a new C# or VB Revit add-in project using the wizard default settings, and immediately hit F5 to start up Revit.exe in the debugger.\n\n<p>Revit is started up, my add-in is automatically loaded, and I am able to click on my new external command in the External Tools menu to test it immediately without having entered even one single byte of code myself.\n\n<p>The new command even executes in zero document state, although the default external command skeleton implementation throws an exception trying to access a property on the current UI document, which is null.\nIt shows you that everything is working correctly right away, though.\n\n\n<a name=\"4\"></a>\n<h4>Revit 2014 C# and VB Add-in Wizard Download</h4>\n<p>So, what are the appropriate locations, then?\nAnd where are the zip files?</p>\n<p>Right here!</p>\n<p>To install, simply copy the zip file of your choice to the matching Visual Studio project template folder in your local file system:\n\n<ul>\n<li><a href=\"zip/Revit2014AddinWizardCs.zip\">Revit2014AddinWizardCs.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual C#\n<li><a href=\"zip/Revit2014AddinWizardVb.zip\">Revit2014AddinWizardVb.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual Basic\n</li></li></ul>\n<p>I hope you find this useful and look forward to your suggestions for improvement.\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0944_addin_wizard_2014",
    "header_text": "Old and New Wizardry",
    "local_header_href": "#old-and-new-wizardry",
    "chunk_text": "<h4>Old and New Wizardry</h4><p>I am starting to create numerous Revit 2014 add-ins now for quick testing purposes.\nAs soon as that stage is reached, I immediately update my Visual Studio Revit C# add-in wizard.\n\n<p>The 2014 version generates the same boiler-plate code as the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/add-in-wizard-for-revit-2013.html\">\nRevit 2013</a> one\n\ndid, which can be simply deleted if not needed.\n\n<p>Last time around, I egoistically did not implement the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/update-api-assembly-references-and-wizards.html#4\">\nVB version</a> until later.\n\n<!-- If you need it, why did you not provide it for the community in general? -->\n<p>This time though, better realising how much appreciated it is, I took care of that as well, right up front.</p>\n<!-- Therefore, for the sake of you VB folks, I went and updated the Visual Basic version also, even though I never actually use it.\nI did test it once, though, and it does do its job  :-) -->\n<p>It is important to understand how easy it is to modify the wizards for your own needs, and make copies with variations to support different requirements.</p>\n<p>Here is an overview of previous explanations of various aspects that also show how create your own flavours:</p>\n<ul>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/devtv-addin-templates.html\">\nOriginal introduction, benefits, and usage example</a> for C# and VB.\n\n<li>Personalised\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#2\">\nminimal C# version</a> for Revit 2011.\n\n<li>A short additional\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/snow-and-woe-with-manifest-files.html\">\nusage note</a>.\n\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/automate-designoption-and-64-bit-add-in-templates.html#2\">\n64-bit versions</a> for C# and VB.\n\n<li>Support for the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/visual-studio-add-in-wizards-for-revit-2012.html\">\nRevit 2012 API</a> for\n\nC# and VB.\n\n<li>Updated C# and VB versions placing\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/product-and-add-in-wizard-updates.html#3\">\nassembly DLL alongside add-in manifest</a> and\n\nincluding other changes.\n\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/add-in-wizard-for-revit-2013.html\">\nRevit 2013 C#</a> version including more skeleton code.</li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/update-api-assembly-references-and-wizards.html#4\">\nRevit 2013 VB</a> version.</li>\n</li></li></li></li></li></li></ul>\n<a name=\"2\"></a>\n<h4>Installing to non-x86 Program Files</h4>\n<p>I had a new issue to struggle with this time around, mentioned in the list above as well, dealing with 64-bit systems.</p>\n<p>My Windows 7 virtual machine is a 64-bit system.</p>\n<p>The $(ProgramFiles) used in the Visual Studio project template file automatically resolves that to \"C:\\Program Files (x86)\", which is the wrong location.</p>\n<p>Revit 2014 is installed in \"C:\\Program Files\" with no x86 suffix.</p>\n<p>Researching this, I found a resolution described and explained in this discussion on\n\n<a href=\"http://stackoverflow.com/questions/7066910/msbuild-and-programfiles-issue-with-32-64-bits\">\nMSBuild and $(ProgramFiles) issue with 32/64 bits</a>.</p>\n<p>Unfortunately, that did not work at all.\nMSBuildExtensionsPath64 is not recognised in the Visual Studio wizard, at least in my simple use of it.</p>\n<p>In the end, I simply checked what system variables are actually set on my system and found ProgramW6432 instead.\nThat works fine.</p>\n<p>Now both the C# and the VB versions work perfectly for me.\n\n\n<a name=\"3\"></a>\n<h4>Revit Add-in Wizard Usage</h4>\n<p>I can simply install the wizard zip files in the appropriate locations, start up Visual Studio, create a new C# or VB Revit add-in project using the wizard default settings, and immediately hit F5 to start up Revit.exe in the debugger.\n\n<p>Revit is started up, my add-in is automatically loaded, and I am able to click on my new external command in the External Tools menu to test it immediately without having entered even one single byte of code myself.\n\n<p>The new command even executes in zero document state, although the default external command skeleton implementation throws an exception trying to access a property on the current UI document, which is null.\nIt shows you that everything is working correctly right away, though.\n\n\n<a name=\"4\"></a>\n<h4>Revit 2014 C# and VB Add-in Wizard Download</h4>\n<p>So, what are the appropriate locations, then?\nAnd where are the zip files?</p>\n<p>Right here!</p>\n<p>To install, simply copy the zip file of your choice to the matching Visual Studio project template folder in your local file system:\n\n<ul>\n<li><a href=\"zip/Revit2014AddinWizardCs.zip\">Revit2014AddinWizardCs.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual C#\n<li><a href=\"zip/Revit2014AddinWizardVb.zip\">Revit2014AddinWizardVb.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual Basic\n</li></li></ul>\n<p>I hope you find this useful and look forward to your suggestions for improvement.\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0944_addin_wizard_2014",
    "header_text": "Installing to non-x86 Program Files",
    "local_header_href": "#installing-to-non-x86-program-files",
    "chunk_text": "<h4>Installing to non-x86 Program Files</h4><p>I had a new issue to struggle with this time around, mentioned in the list above as well, dealing with 64-bit systems.</p><p>My Windows 7 virtual machine is a 64-bit system.</p><p>The $(ProgramFiles) used in the Visual Studio project template file automatically resolves that to \"C:\\Program Files (x86)\", which is the wrong location.</p><p>Revit 2014 is installed in \"C:\\Program Files\" with no x86 suffix.</p><p>Researching this, I found a resolution described and explained in this discussion on\n\n<a href=\"http://stackoverflow.com/questions/7066910/msbuild-and-programfiles-issue-with-32-64-bits\">\nMSBuild and $(ProgramFiles) issue with 32/64 bits</a>.</p><p>Unfortunately, that did not work at all.\nMSBuildExtensionsPath64 is not recognised in the Visual Studio wizard, at least in my simple use of it.</p><p>In the end, I simply checked what system variables are actually set on my system and found ProgramW6432 instead.\nThat works fine.</p><p>Now both the C# and the VB versions work perfectly for me.\n\n\n<a name=\"3\"></a>\n<h4>Revit Add-in Wizard Usage</h4>\n<p>I can simply install the wizard zip files in the appropriate locations, start up Visual Studio, create a new C# or VB Revit add-in project using the wizard default settings, and immediately hit F5 to start up Revit.exe in the debugger.\n\n<p>Revit is started up, my add-in is automatically loaded, and I am able to click on my new external command in the External Tools menu to test it immediately without having entered even one single byte of code myself.\n\n<p>The new command even executes in zero document state, although the default external command skeleton implementation throws an exception trying to access a property on the current UI document, which is null.\nIt shows you that everything is working correctly right away, though.\n\n\n<a name=\"4\"></a>\n<h4>Revit 2014 C# and VB Add-in Wizard Download</h4>\n<p>So, what are the appropriate locations, then?\nAnd where are the zip files?</p>\n<p>Right here!</p>\n<p>To install, simply copy the zip file of your choice to the matching Visual Studio project template folder in your local file system:\n\n<ul>\n<li><a href=\"zip/Revit2014AddinWizardCs.zip\">Revit2014AddinWizardCs.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual C#\n<li><a href=\"zip/Revit2014AddinWizardVb.zip\">Revit2014AddinWizardVb.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual Basic\n</li></li></ul>\n<p>I hope you find this useful and look forward to your suggestions for improvement.\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0944_addin_wizard_2014",
    "header_text": "Revit Add-in Wizard Usage",
    "local_header_href": "#revit-add-in-wizard-usage",
    "chunk_text": "<h4>Revit Add-in Wizard Usage</h4><p>I can simply install the wizard zip files in the appropriate locations, start up Visual Studio, create a new C# or VB Revit add-in project using the wizard default settings, and immediately hit F5 to start up Revit.exe in the debugger.\n\n<p>Revit is started up, my add-in is automatically loaded, and I am able to click on my new external command in the External Tools menu to test it immediately without having entered even one single byte of code myself.\n\n<p>The new command even executes in zero document state, although the default external command skeleton implementation throws an exception trying to access a property on the current UI document, which is null.\nIt shows you that everything is working correctly right away, though.\n\n\n<a name=\"4\"></a>\n<h4>Revit 2014 C# and VB Add-in Wizard Download</h4>\n<p>So, what are the appropriate locations, then?\nAnd where are the zip files?</p>\n<p>Right here!</p>\n<p>To install, simply copy the zip file of your choice to the matching Visual Studio project template folder in your local file system:\n\n<ul>\n<li><a href=\"zip/Revit2014AddinWizardCs.zip\">Revit2014AddinWizardCs.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual C#\n<li><a href=\"zip/Revit2014AddinWizardVb.zip\">Revit2014AddinWizardVb.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual Basic\n</li></li></ul>\n<p>I hope you find this useful and look forward to your suggestions for improvement.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0944_addin_wizard_2014",
    "header_text": "Revit 2014 C# and VB Add-in Wizard Download",
    "local_header_href": "#revit-2014-c-and-vb-add-in-wizard-download",
    "chunk_text": "<h4>Revit 2014 C# and VB Add-in Wizard Download</h4><p>So, what are the appropriate locations, then?\nAnd where are the zip files?</p><p>Right here!</p><p>To install, simply copy the zip file of your choice to the matching Visual Studio project template folder in your local file system:\n\n<ul>\n<li><a href=\"zip/Revit2014AddinWizardCs.zip\">Revit2014AddinWizardCs.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual C#\n<li><a href=\"zip/Revit2014AddinWizardVb.zip\">Revit2014AddinWizardVb.zip</a> – copy to\n<br/>[My Documents]\\Visual Studio 2010\\Templates\\ProjectTemplates\\Visual Basic\n</li></li></ul>\n<p>I hope you find this useful and look forward to your suggestions for improvement.\n</p></p>"
  }
]