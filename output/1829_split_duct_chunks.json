[
  {
    "original_filename": "1829_split_duct",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\n- Is there any api available to split a duct programmatically?\n  https://forums.autodesk.com/t5/revit-api-forum/is-there-any-api-available-to-split-a-duct-programmatically/td-p/6926621\n\n- https://thebuildingcoder.typepad.com/blog/2020/03/split-pipe-and-headless-revit.html#comment-4835671086\n  Matt Taylor\n\ntwitter:\n\nWe discussed the BreakCurve API for splitting a pipe.\nHere comes a much more comprehensive discussion on splitting a duct, not just an example, an entire tutorial in the #RevitAPI #DynamoBim @AutodeskForge @AutodeskRevit #bim #ForgeDevCon https://bit.ly/splitduct\n\nWe recently shared a brief note on using the <code>BreakCurve</code> API for splitting a pipe.\nMatt Taylor now pointed out a much more comprehensive discussion asking, is there any API available to split a duct programmatically?\nThat is not just an example, but an entire tutorial, so I think it is very useful to share here as well for all to enjoy..\n\n&ndash; \n...\n\nlinkedin:\n\nWe discussed the BreakCurve API for splitting a pipe.\n\nHere comes a much more comprehensive discussion on splitting a duct, not just an example, an entire tutorial in the #RevitAPI\n\nhttps://bit.ly/splitduct\n\nWe recently shared a brief note on using the BreakCurve API for splitting a pipe.\n\nMatt Taylor now pointed out a much more comprehensive discussion asking, is there any API available to split a duct programmatically?\n\nThat is not just an example, but an entire tutorial, so I think it is very useful to share here as well for all to enjoy...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1829_split_duct",
    "header_text": "Splitting a Duct in More Depth",
    "local_header_href": "#splitting-a-duct-in-more-depth",
    "chunk_text": "### Splitting a Duct in More Depth\n\nWe recently shared a brief note on using the `BreakCurve` API for [splitting a pipe](https://thebuildingcoder.typepad.com/blog/2020/03/split-pipe-and-headless-revit.html).\n\nIn a [comment](https://thebuildingcoder.typepad.com/blog/2020/03/split-pipe-and-headless-revit.html#comment-4835671086) on that,\nMatt Taylor pointed out a much more comprehensive discussion in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\nasking [is there any API available to split a duct programmatically?](https://forums.autodesk.com/t5/revit-api-forum/is-there-any-api-available-to-split-a-duct-programmatically/td-p/6926621).\n\nThat is not just an example, but an entire tutorial, so I think it is very useful to share here as well for all to enjoy:\n\n**Question:** I need to split a duct programmatically ? Is there any API available to do so?\n\n**Answer:** I explained how this can be achieved using the `BreakCurve` method in my comments\non [duct splitting](https://forums.autodesk.com/t5/revit-api-forum/duct-splitting/m-p/6784012)\n\n**Response:** I tried using the `BreakCurve` method for splitting a duct, but it throws an exception at the time of execution.\n\nCan you please guide me on how to pass the third parameter, `XYZ` `ptBreak`?\n\n<center>\n<img src=\"img/split_duct_BreakCurveIssue.jpg\" alt=\"BreakCurve issue\" title=\"BreakCurve issue\" width=\"800\"/> <!-- 1264 -->\n</center>\n\n\n**Answer:** Well, I think the error says it all! The point isn't on the duct curve.\n\nHere's a simple example that breaks a duct 2 feet along its length.\n\n<pre class=\"code\">\n&lt;<span style=\"color:#2b91af;\">Transaction</span>(<span style=\"color:#2b91af;\">TransactionMode</span>.Manual)&gt;\n&lt;<span style=\"color:#2b91af;\">Regeneration</span>(<span style=\"color:#2b91af;\">RegenerationOption</span>.Manual)&gt;\n&lt;<span style=\"color:#2b91af;\">Journaling</span>(<span style=\"color:#2b91af;\">JournalingMode</span>.UsingCommandData)&gt;\n<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Class</span>&nbsp;<span style=\"color:#2b91af;\">TransactionCommand</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">Implements</span>&nbsp;UI.IExternalCommand\n&nbsp;&nbsp;<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;Execute(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ByVal</span>&nbsp;commandData&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UI.ExternalCommandData,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ByRef</span>&nbsp;message&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">String</span>,&nbsp;<span style=\"color:blue;\">ByVal</span>&nbsp;elements&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.ElementSet)&nbsp;_\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UI.Result&nbsp;<span style=\"color:blue;\">Implements</span>&nbsp;UI.IExternalCommand.Execute\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;app&nbsp;<span style=\"color:blue;\">As</span>&nbsp;ApplicationServices.Application&nbsp;=&nbsp;commandData.Application.Application\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;doc&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Document&nbsp;=&nbsp;commandData.Application.ActiveUIDocument.Document\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;docUi&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UI.UIDocument&nbsp;=&nbsp;commandData.Application.ActiveUIDocument\n \n&nbsp;&nbsp;&nbsp;&nbsp;Execute&nbsp;=&nbsp;UI.Result.Failed\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Using</span>&nbsp;transaction&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;DB.Transaction(doc,&nbsp;<span style=\"color:#a31515;\">&quot;Break&nbsp;Duct&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Start()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;duct&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Mechanical.Duct&nbsp;=&nbsp;<span style=\"color:blue;\">TryCast</span>(doc.GetElement(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">New</span>&nbsp;DB.ElementId(1789723)),&nbsp;DB.Mechanical.Duct)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;curve&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Curve&nbsp;=&nbsp;<span style=\"color:blue;\">TryCast</span>(duct.Location,&nbsp;DB.LocationCurve).Curve\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;pt0&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.XYZ&nbsp;=&nbsp;curve.GetEndPoint(0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;pt1&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.XYZ&nbsp;=&nbsp;curve.GetEndPoint(1)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;vector&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.XYZ&nbsp;=&nbsp;pt1.Subtract(pt0).Normalize\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;breakPt&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.XYZ&nbsp;=&nbsp;pt0.Add(vector.Multiply(2.0))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;newDuctId&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.ElementId&nbsp;=&nbsp;DB.Mechanical.MechanicalUtils.BreakCurve(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;duct.Id,&nbsp;breakPt)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Commit()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">&#39;&nbsp;change&nbsp;our&nbsp;result&nbsp;to&nbsp;successful</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute&nbsp;=&nbsp;UI.Result.Succeeded\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Using</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Execute\n&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Class</span>\n</pre>\n\n**Response:** It worked pleasantly.  Smiley Happy\n\nNormally, if I split a duct in the UI, it adds a family instance, e.g., a fitting, between the two separated elements. \n\n`BreakCurve` just breaks the element into two parts at the specified length, which is really good, but I also need a specific family instance to be added between the two elements, just like in the UI.\n\n<center>\n<img src=\"img/split_duct_2.jpg\" alt=\"Splitting duct\" title=\"Splitting duct\" width=\"600\"/> <!-- 1264 -->\n</center>\n\n**Answer:** Well, you probably need to break the duct in two places.\n\nYou have the elementIds of the two ducts after one break; you just need to use one of those in your second break.\n\nThe second break would have to be enclosed in a second transaction.\n\nOnce you have the third elementId, you can get its duct element and use `duct.ChangeTypeId` to change the type should you desire it.\n\n**Response:** My requirement is different.\nThis is what the `BreakCurve` method generates:\n\n<center>\n<img src=\"img/split_duct_AfterUsingBreakCurve.jpg\" alt=\"After using BreakCurve\" title=\"After using BreakCurve\" width=\"600\"/> <!-- 1264 -->\n</center>\n\nCan I add a fitting between the two duct elements that will act as a separation point?\n\nHere are screenshots showing the situation before and after splitting an element via the UI and API:\n\nBefore:\n\n<center>\n<img src=\"img/split_duct_BeforeFromUI.jpg\" alt=\"Before\" title=\"Before\" width=\"600\"/> <!-- 1264 -->\n</center>\n\nAfter, when splitting manually via UI:\n\n<center>\n<img src=\"img/split_duct_AfterUsingSplitFromUI.jpg\" alt=\"After UI split\" title=\"After UI split\" width=\"600\"/> <!-- 1264 -->\n</center>\n\nHere, you can see 3 elements.\nTwo are child elements created by splitting the parent element.\nThe third one is the fitting that separates the two.\n\nThis is the fitting that was added:\n\n<center>\n<img src=\"img/split_duct_ManualSplit.jpg\" alt=\"Fitting\" title=\"Fitting\" width=\"600\"/> <!-- 1264 -->\n</center>\n\nAfter, when splitting using the `BreakCurve` API:\n\n<center>\n<img src=\"img/split_duct_after_using_BreakCurve_2.jpg\" alt=\"BreakCurve result\" title=\"BreakCurve result\" width=\"600\"/> <!-- 1264 -->\n</center>\n\nSo, here the fitting needs to be added between the two duct elements, just like it was using the manual split command.\n\n**Answer:** Riiiiiiiight. You need to add a union fitting. That is a duct fitting, and a family instance.\n\nWhen in doubt about the wording, you can describe the elements using the Revit descriptions or the RevitLookup (API) names.\nThat reduces the potential for confusion.\n\nI originally used two transactions, but it appears a regen will do the trick:\n\n<pre class=\"code\">\n&lt;<span style=\"color:#2b91af;\">Transaction</span>(<span style=\"color:#2b91af;\">TransactionMode</span>.Manual)&gt;\n&lt;<span style=\"color:#2b91af;\">Regeneration</span>(<span style=\"color:#2b91af;\">RegenerationOption</span>.Manual)&gt;\n&lt;<span style=\"color:#2b91af;\">Journaling</span>(<span style=\"color:#2b91af;\">JournalingMode</span>.UsingCommandData)&gt;\n<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Class</span>&nbsp;<span style=\"color:#2b91af;\">TransactionCommand</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">Implements</span>&nbsp;UI.IExternalCommand\n&nbsp;&nbsp;<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;Execute(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ByVal</span>&nbsp;commandData&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UI.ExternalCommandData,&nbsp;<span style=\"color:blue;\">ByRef</span>&nbsp;message&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">String</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ByVal</span>&nbsp;elements&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.ElementSet)&nbsp;_\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UI.Result&nbsp;<span style=\"color:blue;\">Implements</span>&nbsp;UI.IExternalCommand.Execute\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;app&nbsp;<span style=\"color:blue;\">As</span>&nbsp;ApplicationServices.Application&nbsp;=&nbsp;commandData.Application.Application\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;doc&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Document&nbsp;=&nbsp;commandData.Application.ActiveUIDocument.Document\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;docUi&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UI.UIDocument&nbsp;=&nbsp;commandData.Application.ActiveUIDocument\n \n&nbsp;&nbsp;&nbsp;&nbsp;Execute&nbsp;=&nbsp;UI.Result.Failed\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;newDuctId&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.ElementId&nbsp;=&nbsp;<span style=\"color:blue;\">Nothing</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;ductOrig&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Mechanical.Duct&nbsp;=&nbsp;<span style=\"color:blue;\">Nothing</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;duct2&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Mechanical.Duct&nbsp;=&nbsp;<span style=\"color:blue;\">Nothing</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;breakPt&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.XYZ&nbsp;=&nbsp;<span style=\"color:blue;\">Nothing</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Using</span>&nbsp;transaction&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;DB.Transaction(doc,&nbsp;<span style=\"color:#a31515;\">&quot;Break&nbsp;Duct&nbsp;+&nbsp;Add&nbsp;Fitting&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Start()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ductOrig&nbsp;=&nbsp;<span style=\"color:blue;\">TryCast</span>(doc.GetElement(<span style=\"color:blue;\">New</span>&nbsp;DB.ElementId(1789660)),&nbsp;DB.Mechanical.Duct)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;curve&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Curve&nbsp;=&nbsp;<span style=\"color:blue;\">TryCast</span>(ductOrig.Location,&nbsp;DB.LocationCurve).Curve\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;pt0&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.XYZ&nbsp;=&nbsp;curve.GetEndPoint(0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;pt1&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.XYZ&nbsp;=&nbsp;curve.GetEndPoint(1)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;vector&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.XYZ&nbsp;=&nbsp;pt1.Subtract(pt0).Normalize\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;breakPt&nbsp;=&nbsp;pt0.Add(vector.Multiply(2.0))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newDuctId&nbsp;=&nbsp;DB.Mechanical.MechanicalUtils.BreakCurve(doc,&nbsp;ductOrig.Id,&nbsp;breakPt)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;duct2&nbsp;=&nbsp;<span style=\"color:blue;\">TryCast</span>(doc.GetElement(newDuctId),&nbsp;DB.Mechanical.Duct)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc.Regenerate()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;connectorOrig&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Connector&nbsp;=&nbsp;ductOrig.ConnectorManager.Lookup(0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;connector1&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Connector&nbsp;=&nbsp;duct2.ConnectorManager.Lookup(1)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;familySymbol&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.FamilySymbol&nbsp;=&nbsp;<span style=\"color:blue;\">TryCast</span>(doc.GetElement(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">New</span>&nbsp;DB.ElementId(755396)),&nbsp;DB.FamilySymbol)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;famInstance&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.FamilyInstance&nbsp;=&nbsp;doc.Create.NewFamilyInstance(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;breakPt,&nbsp;familySymbol,&nbsp;DB.Structure.StructuralType.NonStructural)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;fitting&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.MEPModel&nbsp;=&nbsp;famInstance.MEPModel\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;fittingConnector0&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Connector&nbsp;=&nbsp;fitting.ConnectorManager.Lookup(0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;fittingConnector1&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.Connector&nbsp;=&nbsp;fitting.ConnectorManager.Lookup(1)\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectorOrig.ConnectTo(fittingConnector1)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connector1.ConnectTo(fittingConnector0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Commit()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">&#39;&nbsp;change&nbsp;our&nbsp;result&nbsp;to&nbsp;successful</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;UI.Result.Succeeded\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Using</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Execute\n&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Class</span>\n</pre>\n\n**Response:** It works great.\n\nYet, I have another issue. This method only works well if we are not modifying the element's orientation. \n\nI tested this on a duct. I first added a duct and implemented the method just after placing an instance of that duct and it worked great.\n\nBut, If I rotate the element to its opposite direction and then implementing that methods throws multiple errors. \n\nDo you have any idea how to resolve these?\n\nHere are the instructions to reproduce the issue:\n\n<center>\n<img src=\"img/split_duct_step_1_AddedDuct.jpg\" alt=\"Added duct\" title=\"Added duct\" width=\"600\"/> <!-- 1264 -->\n<br/>\n<img src=\"img/split_duct_step_2_RotateDuct.jpg\" alt=\"Rotated duct\" title=\"Rotated duct\" width=\"600\"/> <!-- 1264 -->\n<br/>\n<img src=\"img/split_duct_step_3_SplitError.jpg\" alt=\"Split error\" title=\"Split error\" width=\"600\"/> <!-- 1264 -->\n</center>\n\n**Answer:** The family instance needs rotating in the same orientation as the duct curve.\n\nI'm sure there are plenty of examples of how to rotate family instances on this forum. Report back with how you get on!\n\n**Response:** I searched but haven't found much on how to adjust (rotate) the duct fitting as per the element direction and shape.\n\nI tried the rotate method, but that just rotates the new instance (duct fitting) to a 180-degree angle.\nSo, this only works for a 180-degree rotated element.\n\n<center>\n<img src=\"img/split_duct_issue.jpg\" alt=\"Split issue\" title=\"Split issue\" width=\"600\"/> <!-- 1264 -->\n</center>\n\n**Answer:** You can find an example showing how to achieve what you ask by @aksaks in\nhis [GitHub repository](https://github.com/akseidel/WTA_FireP/blob/feb6cff675a2143fffb55e65dd95eb9a73b9c553/WTA_FireP/PlunkOClass.cs)\n\n**Response:** I checked the link.\nIt provides lots of methods.\n\nNot sure which one to choose.\nI tried implementing a few of them but there are many undefined and unknown classes.\n\nCan you please show me a precise way to get the resolution ?\n\n**Answer:** There is in fact no need for the rotation.\n\nYou can place the duct fitting with the right direction.\n\n<pre class=\"code\">\n  <span style=\"color:blue;\">Dim</span>&nbsp;famInstance&nbsp;<span style=\"color:blue;\">As</span>&nbsp;DB.FamilyInstance&nbsp;_\n  =&nbsp;doc.Create.NewFamilyInstance(\n  &nbsp;&nbsp;breakPt,&nbsp;FamilySymbol,&nbsp;vector,&nbsp;null,\n  &nbsp;&nbsp;DB.Structure.StructuralType.NonStructural)\n</pre>\n\nOf course, it can't hurt to learn how to rotate an element.\n\n**Response:** Thank you so much.\nIt worked pleasantly\n\nVery many thanks to Matt and Fair59 for their kind support and great patience helping out in such detail and depth!"
  }
]