[
  {
    "original_filename": "1280_transaction_group",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1280_transaction_group",
    "header_text": "Using Transaction Groups",
    "local_header_href": "#using-transaction-groups",
    "chunk_text": "<h3>Using Transaction Groups</h3><p>We repeatedly discussed the optimal usage and error handling of transactions, mainly based on the expert advice of Arnošt Löbel, Sr. Principal Engineer of the Autodesk Revit R&amp;D team:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/scope-and-dispose-transactions.html\">Scope and Dispose of Transactions</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/using-using-automagically-disposes-and-rolls-back.html\">Using Using Automagically Disposes and Rolls Back</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/handling-transaction-status-and-errors.html#4\">Handling Transaction Status and Errors</a></li>\n</ul><p>Let's complete this with his most recent advice on handling transaction groups to\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/combine-multiple-transactions-into-one-undo/m-p/5502149\">\ncombine multiple transactions into one undo</a>:</p><p><strong>Question:</strong>\n\nI am creating an application that must do the following steps:</p><ol>\n<li>Load a FamilySymbol from a file.</li>\n<li>Get the FamilyManager from the Family document and access some parameters.</li>\n<li>Place an instance of the FamilySymbol into the project.</li>\n</ol><p>In order to load the FamilySymbol into the project, I have to have a transaction running. Then, in order to open the Family document, the transaction has to be closed.  In order to place an instance of the component, a transaction has to be running.</p><p>This causes the application to create two undo points – one for each transaction.</p><p>Is there a way to combine the two transactions into a single undo point so the entire action of the command can be undone?</p><p>I am using the Manual TransactionMode.</p><p><strong>Answer:</strong>\n\nI am glad you asked.\nYes, it can certainly be done.\nIt is what Transaction Groups are for.\nThe steps are simple:</p><ol>\n<li>Start a transaction group. Give it a name.</li>\n<li>Do your first transaction.</li>\n<li>Open the family document.</li>\n<li>Load the family into the project</li>\n<li>Close the transaction group by calling Assimilate method</li>\n</ol><p>The last operation will merge all transactions that have been committed within the group into just one transaction.\nIt will bear the name of the transaction group.</p><p>When working with transaction group, make sure you scope them by the 'using' block, just like you would with transactions.</p><p>I hope this helps. There is more info if needed in the RevitAPI.chm file.\nSimply look up the TransactionGroup class.</p><p><strong>Response:</strong>\n\nOk, let me make sure I'm doing this correctly when dealing with exceptions.</p><p>When the TransactionGroup is rolled back, all of the committed and uncommitted Transactions inside it are rolled back?</p><p>When a TransactionGroup is committed or assimilated, all of the Transactions inside of it must already be committed?</p><pre class=\"code\">\n  <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> transGroup = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( document ) )\n  {\n    transGroup.Start( <span class=\"maroon\">\"Transaction Group\"</span> );\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> firstTrans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( document ) )\n    {\n      <span class=\"blue\">try</span>\n      {\n        firstTrans.Start( <span class=\"maroon\">\"First Transaction\"</span> );\n \n        <span class=\"green\">// do some stuff</span>\n \n        firstTrans.Commit();\n      }\n      <span class=\"blue\">catch</span>\n      {\n        transGroup.Rollback(); <span class=\"green\">// &lt;-- We do not have to roll back firstTrans?</span>\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n    }\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> secondTrans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( document ) )\n    {\n      <span class=\"blue\">try</span>\n      {\n        secondTrans.Start( <span class=\"maroon\">\"Second Transaction\"</span> );\n \n        <span class=\"green\">// do some stuff</span>\n \n        secondTrans.Commit();\n      }\n      <span class=\"blue\">catch</span>\n      {\n        transGroup.Rollback(); <span class=\"green\">// &lt;-- We do not have to roll back secondTrans?</span>\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n    }\n \n    transGroup.Assimilate();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p><strong>Answer:</strong>\n\nRegarding to your two questions:</p><p>Yes and No, actually.\nYour statement is almost correct except one part, which I highlight here: \"... all of the committed and <strong>uncommitted</strong> Transactions...\"\nThe thing is that you cannot close (that is either Commit, RollBack, or Assimilate) a transaction group while there is an uncommitted transaction still open.\nAll transactions that start inside a transaction group must be either properly committed or rolled back before any of the aforementioned methods can be called upon the transaction group object.</p><p>Yes, basically what I have just stated above.\nAll transactions inside a group must be either committed or rolled back.\nIf you try to call any of the transaction-group closing methods while there is still a transaction open (in the same document), you will get an exception.</p><p>As for your code snippet, it is quite all right, except for two details, one more important than the other.\nI’ll start with that one:</p><p>You do not have to Roll Back the open transaction in the catch blocks, because it will be rolled back automatically upon leaving its using block.\nHowever, in your case it can in fact even be dangerous to call RollBack in the catch.\nThe problem is that you may actually (in theory) get an exception from the Start method too, and if you do, you would most certainly get another one when attempting to roll the transaction back.\nThat would be an exception thrown while exception handling, and that is never a good thing.\nThus, if you want to call RollBack as you do, you need to test whether the transaction has actually started.\n(There is a method for that or you could test the status.)</p><p>This second problem is less dangerous, but could lead to unexpected results.\n(Unexpected as your code goes, I mean.)\nA programmer should anticipate that committing a transaction does not need to succeed.\nIt can fail and it is not all that uncommon, in fact.\nThere are several possible reasons for such an outcome, one of which is a failed regeneration. When that happens and your transaction actually fails, it is most likely that you would not like to continue with opening another transaction that might only work if the previous transaction succeeded.\nIgnoring the results of transactions can lead to a spiral of errors and failures that might be rather challenging to untangle.</p><p>Lastly, a very minor thingy, that is not a problem, but could make your code simpler. You do not have to have instantiate a new transaction for each and every transaction. You can re-start an existing one instead; simply give it a proper name in the Start method.</p><p>Putting all the above comments into action, I’ve rewritten your simple snippet as follows:</p><pre class=\"code\">\n  <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> transGroup\n    = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( document ) )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> trans\n      = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( document ) )\n    {\n      <span class=\"blue\">try</span>\n      {\n        transGroup.Start( <span class=\"maroon\">\"Action\"</span> );\n \n        trans.Start( <span class=\"maroon\">\"First Transaction\"</span> );\n \n        <span class=\"green\">// do some stuff</span>\n \n        <span class=\"blue\">if</span>( trans.Commit() != <span class=\"teal\">TransactionStatus</span>.Committed )\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n        }\n \n        trans.Start( <span class=\"maroon\">\"Second Transaction\"</span> );\n \n        <span class=\"green\">// do some more stuff</span>\n \n        trans.Commit();\n \n        <span class=\"blue\">if</span>( trans.Commit() != <span class=\"teal\">TransactionStatus</span>.Committed )\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n        }\n \n        transGroup.Assimilate();\n      }\n      <span class=\"blue\">catch</span>\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p><strong>Response:</strong>\n\nOne more question:\nIn the same logic as checking that Transaction.Commit returns TransactionStatus.Committed, is it a good idea to check that Transaction.Start returns TransactionStatus.Started?\nIs there a reason why it wouldn't?</p><p><strong>Answer:</strong>\n\nI have been asked that very question many times in the past.\nMy answer is that even though it is indeed possible in theory that the Start method returns a status other then Started, it is rather unlikely that it actually happens, if is it all possible in the public API. (Note: We, Revit programmers use the same classes internally and for us it is a tiny bit more likely that such a situation may happen.) In most situations that come to my mind the Start method would raise an exception if it is not possible (or permitted) to start a transaction, or any one of the three transaction-phase objects for that matter.</p><p>And since I am back on this particular case, there is one small detail I could have changed in the snippet I wrote above:\nI could have explicitly roll back the transaction group in the two places where I return with a failure due to a transaction failing to commit.\nAlthough this explicit closing of the group is not necessary (for it will be closed implicitly upon leaving its using block), I do tend to write my code that way.\nThe reason is more style related; I simply prefer to make it clear to anyone who comes across my code that I knew what I was doing (here, I am aware that the group must be rolled back.)</p><p>Thank you very much, Arnošt, for your on-going support and expert in-depth advice!</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1280_transaction_group",
    "header_text": "Finally Finished Eliminating The Building Coder Samples Obsolete API Usage",
    "local_header_href": "#finally-finished-eliminating-the-building-coder-samples-obsolete-api-usage",
    "chunk_text": "<h4>Finally Finished Eliminating The Building Coder Samples Obsolete API Usage</h4><p>I finally completed the on-going effort to eliminate all Obsolete API Usage from The Building Coder samples.</p><p>After <a href=\"http://thebuildingcoder.typepad.com/blog/2015/02/list-pipe-sizes-and-more-obsolete-api-usage-removal.html\">the last step</a>,\n\nthere were still <a href=\"zip/bc_migr_2015_g.txt\">15 warnings</a> left:</p><ul>\n<li>ViewSheet.Views is obsolete: Use GetAllPlacedViews() instead.</li>\n<li>Autodesk.Revit.Creation.Document.NewPipe: Use Pipe.Create() instead.</li>\n<li>Definitions.Create(string, Autodesk.Revit.DB.ParameterType, bool) is obsolete: Use Create(Autodesk.Revit.DB.ExternalDefinitonCreationOptions) instead.</li>\n<li>Element.get_Parameter(string) is obsolete: More than one parameter can have the same name on a given element. Use Element.Parameters to obtain a complete list of parameters on this Element, or Element.GetParameters(String) to get a list of all parameters by name, or Element.LookupParameter(String) to return the first available parameter with the given name (11 occurrences).</li>\n</ul><p>I cleaned them up systematically, step by step, and published\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.117.2\">\nrelease 2015.0.117.2</a>,\n\nwhich is completely clean and compiles with no warnings at all.</p><p>Look at this\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/compare/2015.0.117.1...2015.0.117.2\">diff between 2015.0.117.1 and 2015.0.117.2</a> to\n\nsee exactly what I changed.</p><p>This is an important milestone to accomplish before tackling the migration to upcoming future versions of the API.</p><p>As always,\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder sample GitHub repository</a> provides\n\nthe most up-to-date version.</p>"
  }
]