[
  {
    "original_filename": "0204_rvtmgddbg_mep_connectors",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0204_rvtmgddbg_mep_connectors",
    "header_text": "Fixing RvtMgdDbg for MEP Connectors",
    "local_header_href": "#fixing-rvtmgddbg-for-mep-connectors",
    "chunk_text": "<h3>Fixing RvtMgdDbg for MEP Connectors</h3><p>Still working on preparations for the MEP webcast mentioned \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/mep-sample-ribbon-panel.html\">\nlast week</a>, \n\nI notice that RvtMgdDbg is having trouble displaying the connectors on electrical components, throwing an exception saying \n\n<pre>\nAngle is available only for connectors of DomainHavc and DomainPiping.\n</pre>\n<p>The method I describe here to fix this problem can be used by anyone who runs into a problem with RvtMgdDbg.\nIt is not limited to the case of MEP connectors, and intended more as an example and a how-to on how to fix RvtMgdDbg to display specific information that you are interested in.\n\n<p>Luckily, RvtMgdDbg is provided in source code format, and everybody can debug it and fix problems for themselves as they see fit.\nIn my case, I debugged the RvtMgdDbg code and traced the problem to the implementation of the overloaded method Stream( ArrayList data, Connector connector ) in the module \nSnoop &gt; CollectorExts &gt; CollectorExtMEP.cs.\nThe fix is to add an exception handler to the offending property.\nIn this case, the original code simply went ahead and blindly accessed the Angle property:</p>\n<pre class=\"code\">\ndata.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Angle\"</span>, connector.Angle ) );\n</pre>\n<p>As the exception message says, this access is prohibited unless the connector is defined for the HVAC or piping domain.\nI therefore added a check to test the connector domain before accessing it, and the updated code now reads:\n\n<pre class=\"code\">\n<span class=\"blue\">if</span>( <span class=\"teal\">Domain</span>.DomainHvac == connector.Domain \n  || <span class=\"teal\">Domain</span>.DomainPiping == connector.Domain )\n{\n  data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Angle\"</span>, \n    connector.Angle ) );\n}\n</pre>\n<p>That solves that little problem.\n\n<p>Another way to handle this would be to simply encapsulate the offending line of code into its own individual little exception handler, but that would add considerable unnecessary execution overhead.\nRemember, an exception should be used only for unexpected, exceptional circumstances.\nIf a property is expected to fail under certain circumstances, then these should be caught using traditional and more effective means.\n\n<p>Unfortunately, there are quite a few more properties on the connector class which are similarly limited and throw exceptions if called under invalid circumstances, so the method Stream(ArrayList data, Connector connector) could use quite a few additional corrections.\nFor instance, the Radius property may only be queried in the case of a connector with a round cross section.\n\n<p>Since there are so many properties and I do not want to add individual checks for each of them, I have actually resorted to adding the individual exception handlers I mentioned above to each property for the time being, simply in order to use RvtMgdDbg for electrical connectors right away with no further ado.\n\n<p>I encapsulated each line of code accessing a property into an exception handler using the Visual Studio regular expression replacement feature, searching for a regular expression like this:\n\n<pre>\n{data\\.Add.*, connector\\.}{[^\\.\\)]*}{[\\)\\.].*}\\n\n</pre>\n<p>The replacement code looks like this:\n\n<pre>\ntry\\n{\\n\\1\\2\\3\\n}\\ncatch\\n{\\nDebug.Print( \"\\2: \"+ex.Message );\\n}\\n\n</pre>\n<p>Visual Studio automatically adds the proper indenting for me if I cut out the generated code and then paste it right back into the same place again.\n\n<p>For example, here is the unprotected call to access the AssignedDuctFlowConfiguration property:\n\n<pre class=\"code\">\n  data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( \n    <span class=\"maroon\">\"Duct flow configuration type\"</span>, \n    connector.AssignedDuctFlowConfiguration.ToString() ) );\n</pre>\n<p>The result of executing the regular expression search and replace operation on that single line of code is to convert the unprotected property access to one encapsulated within its own exception handler.\nHere is the resulting protected AssignedDuctFlowConfiguration property access:</p>\n<pre class=\"code\">\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( \n      <span class=\"maroon\">\"Duct flow configuration type\"</span>, \n      connector.AssignedDuctFlowConfiguration.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedDuctFlowConfiguration: \"</span> \n      + ex.Message );\n  }\n</pre>\n<p>Here is the complete code of my modified version of the overloaded method Stream( ArrayList data, Connector connector ):</p>\n<pre class=\"code\">\n<span class=\"blue\">private</span> <span class=\"blue\">void</span>\nStream(<span class=\"teal\">ArrayList</span> data, <span class=\"teal\">Connector</span> connector)\n{\n  data.Add(<span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">ClassSeparator</span>(<span class=\"blue\">typeof</span>(<span class=\"teal\">Connector</span>)));\n \n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Enumerable</span>( <span class=\"maroon\">\"All refs\"</span>, connector.AllRefs ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AllRefs: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">if</span>( <span class=\"teal\">Domain</span>.DomainHvac == connector.Domain \n    || <span class=\"teal\">Domain</span>.DomainPiping == connector.Domain )\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Angle\"</span>, connector.Angle ) );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Duct flow configuration type\"</span>, connector.AssignedDuctFlowConfiguration.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedDuctFlowConfiguration: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Duct loss method type\"</span>, connector.AssignedDuctLossMethod.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedDuctLossMethod: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Assigned fixture units\"</span>, connector.AssignedFixtureUnits ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedFixtureUnits: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Assigned flow\"</span>, connector.AssignedFlow ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedFlow: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Assigned flow direction\"</span>, connector.AssignedFlowDirection.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedFlowDirection: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Assigned flow factor\"</span>, connector.AssignedFlowFactor ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedFlowFactor: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Assigned K coefficient\"</span>, connector.AssignedKCoefficient ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedKCoefficient: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Assigned loss coefficient\"</span>, connector.AssignedLossCoefficient ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedLossCoefficient: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Assigned pipe flow configuration\"</span>, connector.AssignedPipeFlowConfiguration.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedPipeFlowConfiguration: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Assigned pipe loss method\"</span>, connector.AssignedPipeLossMethod.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedPipeLossMethod: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Assigned pressure drop\"</span>, connector.AssignedPressureDrop ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"AssignedPressureDrop: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Coefficient\"</span>, connector.Coefficient ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Coefficient: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Object</span>( <span class=\"maroon\">\"Connector manager\"</span>, connector.ConnectorManager ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ConnectorManager: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Connector type\"</span>, connector.ConnectorType.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ConnectorType: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Object</span>( <span class=\"maroon\">\"Coordinate system\"</span>, connector.CoordinateSystem ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"CoordinateSystem: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Demand\"</span>, connector.Demand ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Demand: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Direction\"</span>, connector.Direction.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Direction: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Domain\"</span>, connector.Domain.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Domain: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Duct system type\"</span>, connector.DuctSystemType.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"DuctSystemType: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Electrical system type\"</span>, connector.ElectricalSystemType.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"ElectricalSystemType: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Flow\"</span>, connector.Flow ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Flow: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Height\"</span>, connector.Height ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Height: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Bool</span>( <span class=\"maroon\">\"Is connected\"</span>, connector.IsConnected ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"IsConnected: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Bool</span>( <span class=\"maroon\">\"Is movable\"</span>, connector.IsMovable ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"IsMovable: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Object</span>( <span class=\"maroon\">\"MEP system\"</span>, connector.MEPSystem ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"MEPSystem: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Xyz</span>( <span class=\"maroon\">\"Origin\"</span>, connector.Origin ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Origin: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Pipe system type\"</span>, connector.PipeSystemType.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"PipeSystemType: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Pressure drop\"</span>, connector.PressureDrop ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"PressureDrop: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Velocity pressure\"</span>, connector.VelocityPressure ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"VelocityPressure: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Width\"</span>, connector.Width ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Width: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Double</span>( <span class=\"maroon\">\"Radius\"</span>, connector.Radius ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Radius: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">String</span>( <span class=\"maroon\">\"Shape\"</span>, connector.Shape.ToString() ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Shape: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">try</span>\n  {\n    data.Add( <span class=\"blue\">new</span> Snoop.Data.<span class=\"teal\">Object</span>( <span class=\"maroon\">\"Owner\"</span>, connector.Owner ) );\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">NotSupportedException</span> ex )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Owner: \"</span> + ex.Message );\n  }\n}\n</pre>\n<p>If you wish to examine the truncated overly long lines, you can copy and paste them to an editor.\n\n<p>Running the modified version of RvtMgdDbg and selecting an electrical connector produces the following list in the Visual Studio debug output window of all the properties that are throwing exceptions:</p>\n<pre>\nAssignedDuctFlowConfiguration: Assigned duct flow configuration is available only for connectors of DomainPiping.\nAssignedDuctLossMethod: Assigned duct loss method is available only in connectors of DomainHvac.\nAssignedFixtureUnits: Assigned fixture units available only for connectors of DomainPiping.\nAssignedFlow: Assigned flow is available only for connectors of DomainHavc or DomainPiping.\nAssignedFlowDirection: Assigned flow direction is available only for connectors of DomainHavc and DomainPiping.\nAssignedFlowFactor: Assigned flow factor is available only for connectors of DomainPiping or DomainHvac.\nAssignedKCoefficient: Assigned KCoefficient is available only for connectors of DomainPiping.\nAssignedLossCoefficient: Assigned loss coefficient is available only for connectors of DomainHavc.\nAssignedPipeFlowConfiguration: Assigned pipe flow configuration is available only for connectors of DomainPiping.\nAssignedPipeLossMethod: Assigned pipe loss method is available only for connectors of DomainPiping.\nAssignedPressureDrop: Assigned pressure drop is available only for connectors of DomainHavc and DomainPiping.\nCoefficient: Coefficient is available only for connectors of DomainHavc and DomainPiping.\nCoordinateSystem: Coordinate System is available only for connectors of PhysicalConn.\nDemand: Demand is available only for connector of DomainPiping.\nDirection: Direction is available only for connectors of DomainHvac and DoaminPiping.\nDuctSystemType: Duct system type is available only for connectors of DomainHvac.\nElectricalSystemType: Electrical system type is available only for connectors of DomainElectrical.\nFlow: Flow is available only for connectors of DomainHavc and DomainPiping.\nHeight: The shape of the connector is not rectangular.\nIsConnected: Connection status is available only for connectors of PhysicalConn type.\nOrigin: Origin is available only for connectors of PhysicalConn type.\nPipeSystemType: Pipe system type is available only for connectors of DomainPiping.\nPressureDrop: Pressure drop is available only for connectors of DomainHavc and DomainPiping.\nVelocityPressure: Velocity pressure is available only for connectors of DomainHavc and DomainPiping.\nWidth: The shape of the connector is not rectangular.\nRadius: The shape of the connector is not round.\n</pre>\n<p>Again, copy and paste to an editor to see the complete truncated lines.\n\n<p>Since each exception caught by an invalid property access is caught individually and processing can continue with an attempt at the next property, the other desired result is that the property window is now successfully populated and displayed with the remaining properties that have not thrown an exception:</p>\n<img alt=\"RvtMgdDbg connector properties\" src=\"img/rvtmgddbg_connector_1.jpg\"/>\n<p>As pointed out above, this is only a partial and temporary fix.\nIn the long run, the individual exception handlers should be replaced by if clauses, as done for the Angle property.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]