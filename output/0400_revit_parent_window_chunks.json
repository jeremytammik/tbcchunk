[
  {
    "original_filename": "0400_revit_parent_window",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0400_revit_parent_window",
    "header_text": "Revit Parent Window",
    "local_header_href": "#revit-parent-window",
    "chunk_text": "<h3>Revit Parent Window</h3><p>Today is the last day of the Munich AEC\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/devcamp-devlabs-and-updated-api-training-schedule.html#devlabs\">\nDevLab</a>.\n\nIt has been a great week here, both meeting with developers to discuss their issues, find quite a few solutions, and connect again with many old friends here in the Munich Autodesk office.\nOne issue that came up repeatedly was also a topic in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/devlab-and-birthday.html\">\nWaltham DevLab</a>, \n\nso it is well worth exploring here in more detail:\n\n<p>People have repeatedly asked how to properly hook up their .NET forms to the Revit main application window so that it is always displayed on top of Revit and reacts properly when Revit is minimised and restored. \nThe technique presented below works equally well for modal and modeless forms.\nHere is an example of such a query:\n\n<p><strong>Question:</strong> I am displaying a dialogue that I want to associate with Revit.\nIs there a way to explicitly specify the Revit window with the call to the ShowDialog method so that my form is associated with the Revit window instance and session?\n\n<p><strong>Answer:</strong> I believe that the simplest way to achieve what you need is the following:\n\n<ol>\n<li>Determine the Revit main application window handle.\n<li>Implement an IWin32Window wrapper class returning the window handle.\n<li>Provide the IWin32Window instance as an argument to the ShowDialog method.\n</li></li></li></ol>\n<p>Let us look at these steps one by one:\n\n<p>1. If you are inside a Revit add-in, e.g. an external command, so that your code is part of Revit, so to speak, you can access the HWND window handle of the main Revit application using the following code:\n\n<pre class=\"code\">\n  <span class=\"teal\">Process</span> process = <span class=\"teal\">Process</span>.GetCurrentProcess();\n \n  <span class=\"teal\">IntPtr</span> h = process.MainWindowHandle;\n</pre>\n<p>2. The Windows.Forms Form.Show and ShowDialog methods are overloaded. You can call them without an argument, or with an instance of an IWin32Window interface implementation. That interface requires you to implement the Handle method, which can return the window handle determined in step 1. Here is an example of such a wrapper class implementation, with its constructor taking an IntPtr argument representing a HWND window handle:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">JtWindowHandle</span> : <span class=\"teal\">IWin32Window</span>\n{\n  <span class=\"teal\">IntPtr</span> _hwnd;\n \n  <span class=\"blue\">public</span> JtWindowHandle( <span class=\"teal\">IntPtr</span> h )\n  {\n    <span class=\"teal\">Debug</span>.Assert( <span class=\"teal\">IntPtr</span>.Zero != h,\n      <span class=\"maroon\">\"expected non-null window handle\"</span> );\n \n    _hwnd = h;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">IntPtr</span> Handle\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _hwnd;\n    }\n  }\n}\n</pre>\n<p>I presented an example of implementing and using such a wrapper class in the discussion on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/driving-revit-from-outside.html\">\ndriving Revit from outside</a>.\n\nIt demonstrates an alternative but less reliable method based on FindWindow to determine the main Revit window handle.\n\n<p>3. Provide an instance of your IWin32Window class to your form's Show or ShowDialog method.\n\n<pre class=\"code\">\n  form.ShowDialog( <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>( h ) );\n</pre>\n<p>Now your dialogue will be correctly recognised as a child window of the main Revit application window:\n\n<ul>\n<li>The dialogue remains on top of the Revit window when it is not minimised.\n<li>The dialogue is automatically minimised when Revit is minimised, and restored again when Revit is restored.\n</li></li></ul>\n<p>I am attaching my \n\n<a href=\"zip/loose_connectors_4.zip\">\nLooseConnectors</a> sample \n\napplication that I recently created for the AEC DevCamp Revit MEP API presentation. \nIt makes use of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">\nMEP element collector and connector retrieval</a>\n\nmethods that I presented a few days ago and then displays a list of all unconnected connectors in a modeless dialogue box.\nIt ensures that it stays on top of the Revit window by passing in the Revit window handle to the Form.Show method via an IWin32Window wrapper class, thus making Revit its parent window. \nThis requires converting the Windows API HWND which is represented as an IntPtr in .NET to an IWin32Window instance which is the incarnation preferred in the .NET System.Windows.Forms environment.\nI will return to a more in depth discussion of this sample and various other of its interesting features and implementation aspects soon.\n\n<p>Here is some response to suggestions similar to those above:\n\n<p><strong>Response:</strong> Thank you for the tip on making my form a child of the Revit window.  \nI did not realize that the Show method could simply take an argument.  \nYour wrapper for the IWin32Window was very helpful.\n\n<p>I discovered one remaining problem with handling a double click in a tree view, and implemented a workaround for that.\n\n<p>I was invoking a routine to place a family instance from a double-click event on a tree view in my form. It turns out that almost anything else works perfectly but not double-click.\nI call it from the single-click of a button, and smoothly drag in my instance.  \nSame thing for a single-click in the list, or a right-click.\nIt seems that something about the double-click is pulling the focus back to my form, probably some kind of timing issue.  \nClearly a windows forms issue, and nothing to do with Revit.\n\n<p>For now, I have changed my interface so the user selects the appropriate item in the list and right-clicks, and everything runs smoothly.\n\nI thought you might want to know about this in case someone else runs into a similar glitch and can save some aggravation.  \nIn the long run, I may want to figure out how to make it work with a double-click, but for the moment, I will move on to the many other challenges.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]