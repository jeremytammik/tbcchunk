[
  {
    "original_filename": "1503_material_shared_param",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n- AU classes posted\n  https://www.linkedin.com/pulse/au2016-classes-posted-fernando-malard?trk=hb_ntf_MEGAPHONE_ARTICLE_POST\n  https://www.linkedin.com/pulse/au2016-classes-posted-fernando-malard\n\n- updated ADN Xtra\n\n- shared param on material element - email with orsi Re: API\n\n- connect desktop and cloud recording from AU\n  http://au.autodesk.com/au-online/classes-on-demand/class-catalog/2016/revit/sd20908#chapter=0\n  http://au.autodesk.com/au-online/classes-on-demand/class-catalog/2016/forge/sd16837#\n  http://player.ooyala.com/iframe.js#pbid=34ee2c04f0304af88c76585f87c5bd8c&ec=xyM2hvNzE6uwSdozxVspBc0eDumVZA5F\n\n- Cornelius story: cured by natural remedies\n  http://on-lyme.org/en/sufferers/lyme-stories/item/241-cornelius-story-cured-by-natural-remedies\n\nMaterial Shared Parameters and ADN Xtra Labs #RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge\n\nHow to attach a shared parameter to Material elements? \n&ndash; Updated ADN Xtra labs to remove all deprecated API usage\n&ndash; A new addin that creates and populates a shared parameter to provide material information for each element\n&ndash; Autodesk University 2016 class materials have now been posted, including the recording of my session on connecting desktop and cloud\n&ndash; Linking <code>Material</code> elements to external database entries\n&ndash; Binding a shared parameter to elements\n&ndash; Attaching a shared parameter to <code>Material</code> elements\n&ndash; Create and populate a shared parameter <code>ForgeMaterial</code>\n&ndash; Cornelius story &ndash; cured by natural remedies...\n\n-->"
  },
  {
    "original_filename": "1503_material_shared_param",
    "header_text": "Material Shared Parameters and ADN Xtra Labs",
    "local_header_href": "#material-shared-parameters-and-adn-xtra-labs",
    "chunk_text": "### Material Shared Parameters and ADN Xtra Labs\n\nCan we attach a shared parameter to `Material` elements?\n\nYes, we can!\n\nIn the course of proving that, I finally updated the ADN Xtra labs to remove all deprecated API usage.\n\nI also implemented a new add-in that creates and populates a shared parameter to provide material information for each element to the Forge translation process... in a way, the opposite of the above, if you will.\n\nAnd, talking about materials, the Autodesk University 2016 class materials have now been posted, including the recording of my session on connecting desktop and cloud.\n\nFinally, I end with an absolutely non-technical topic, on healing:\n\n- [AU2016 Classes posted](#2)\n- [ADN Xtra labs updated](#3)\n- [Linking `Material` elements to external database entries](#4)\n- [Binding a shared parameter to elements](#5)\n- [Attaching a shared parameter to `Material` elements](#6)\n- [Create and populate a shared parameter `ForgeMaterial`](#7)\n- [Cornelius story &ndash; cured by natural remedies](#8)\n\nBefore getting to all that, let me mention that I am now busy at the Munich DevDays conference.\n\n<center>\n<img src=\"img/2016-12-05_devday_munich_305_500x225.jpg\" alt=\"Munich DevDay\" width=\"500\"/>\n</center>\n\nFor more impressions from this event, check out Kean Walmsley's notes on [the European DevDay in Munich](http://through-the-interface.typepad.com/through_the_interface/2016/12/the-european-devday-in-munich.html).\n\n####<a name=\"2\"></a>AU2016 Classes Posted\n\nAll the recordings made of Autodesk University 2016 classes have now been posted and are available\nvia [AU Online](http://au.autodesk.com/au-online/overview).\n\nYou can explore the material\nfor [my two classes](http://thebuildingcoder.typepad.com/blog/2016/10/au-revit-20171-and-rex-freezedrawing.html#2)\nby [filtering for `tammik`](http://au.autodesk.com/au-online/classes-on-demand/search?full-text=tammik),\nor directly through the following links:\n\n- [**SD20891** &ndash; Revit API Expert Roundtable &ndash; Open House on the Factory Floor](http://au.autodesk.com/au-online/classes-on-demand/class-catalog/2016/revit/sd20891)\n- [**SD20908** &ndash; Connect Desktop and Cloud &ndash; Free Your BIM Data!](http://au.autodesk.com/au-online/classes-on-demand/class-catalog/2016/revit/sd20908)\n\n<center>\n<script height=\"468px\" width=\"832px\" src=\"http://player.ooyala.com/iframe.js#pbid=34ee2c04f0304af88c76585f87c5bd8c&ec=xyM2hvNzE6uwSdozxVspBc0eDumVZA5F\"></script>\n</center>\n\nA related class that may also be of interest is\nFernando Malard's [**SD16837** *From Desktop to the Cloud with Autodesk Forge*](http://au.autodesk.com/au-online/classes-on-demand/class-catalog/2016/forge/sd16837).\n\nIn case you have not yet enjoyed it, you might also want to check out\nthe great [AU2016 opening keynote](http://au.autodesk.com/au-online/classes-on-demand/class-catalog/2016/class-detail/22760).\n\n\n\n####<a name=\"3\"></a>ADN Xtra Labs Updated\n\nThe last time I worked on the *ADN Xtra Labs* hosted in\nthe [AdnRevitApiLabsXtra GitHub repository](https://github.com/jeremytammik/AdnRevitApiLabsXtra) was for\nthe [Revit 2017 migration](http://thebuildingcoder.typepad.com/blog/2016/08/trusted-signature-and-updated-revit-2017-api-resources.html#5),\nand the [migration to Revit 2016](http://thebuildingcoder.typepad.com/blog/2015/06/adn-labs-xtra-multi-version-add-ins-and-cnc-direct.html#2) before that.\n\nThey are a superset of the\nofficial [ADN Revit API labs training material]()\n([2016](http://thebuildingcoder.typepad.com/blog/2015/05/autodesk-university-q1-adn-labs-and-wizard-update.html#4))\navailable from\nthe [Revit Developer Centre](http://www.autodesk.com/developrevit) and\nthe [Revit API Training GitHub repository](https://github.com/ADN-DevTech/RevitTrainingMaterial).\n\nThey are used for our standard two- or three-day hands-on Revit API introduction training courses.\nThey are also suitable for self-learning and include full step-by-step instructions, separate for both C# and VB add-ins.\n\nI maintain an extended version of these including the precursor versions, repackaged in the ADN Revit API Training Labs Xtra modules.\n\nThe Xtra version Visual Studio solution implements the following projects:\n\n<center>\n<img src=\"img/AdnXtra_solution.png\" alt=\"ADN Revit API Training Labs Xtra Visual Studio solution\" width=\"210\"/>\n</center>\n\nThe first six are the official, standard, ADN training labs to introduce the Revit API basics, UI programming and Family API.\n\nObviously, the Xtra labs have advantages and disadvantages over the standard labs, so you should check out both and decide which you prefer for yourself.\n\nThey also include a couple of additional utilities that I frequently find useful, especially a simplified version of the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/05/geometry-creation-and-line-intersection-exceptions.html#5\">BipChecker</a>\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2014/05/bipchecker-for-revit-2015-on-github.html#3\">2015</a>) and the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/09/debugging-and-maintaining-the-image-relationship.html#2\">element lister</a>.\n\nAnyway, I left off the migration to the Revit 2017 API before it was entirely completed; several of the external commands were still making use of the obsolete and deprecated automatic transaction mode.\n\nI finally got around to fixing that now, resulting in a\nnew [release 2017.0.0.7](https://github.com/jeremytammik/AdnRevitApiLabsXtra/releases/tag/2017.0.0.7).\n\nYou can examine the changes I made\nby comparing the last few versions using the GitHub comparison functionality, e.g.,\n[between 2017.0.0.4 and 2017.0.0.7](https://github.com/jeremytammik/AdnRevitApiLabsXtra/compare/2017.0.0.3...2017.0.0.7).\n\nHere is my external application RvtSamples listing entry points to launch all the Revit SDK, ADN Xtra lab and The Building Coder samples:\n\n<center>\n<img src=\"img/AdnXtra_2016.png\" alt=\"RvtSamples listing SDK, Adn Xtra and The Building Coder samples\" width=\"452\"/>\n</center>\n\nAs always, the most up-to-date version of the ADN Revit API Training Labs Xtra is provided in the\n<a href=\"https://github.com/jeremytammik/AdnRevitApiLabsXtra\">AdnRevitApiLabsXtra GitHub repository</a>,\nand the current version right now is\n<a href=\"https://github.com/jeremytammik/AdnRevitApiLabsXtra/releases/tag/2017.0.0.7\">release 2017.0.0.7</a>.</p>\n\n\n\n####<a name=\"4\"></a>Linking `Material` Elements to External Database Entries\n\n**Question:** Is it possible (maybe through API?) to assign new parameters for materials?\n\nThe original question in in German:\n\n*Um die Bilanzierung der Materialmassen zu automatisieren, wäre es hilfreich den Materialien in Revit eine Datenbank-ID zuzuschreiben, welche dauerhaft im Modell mitwandert. Über shared Parameter konnte ich bisher nur Elemente (Wand), aber nicht den untergeordneten Materialien zuschreiben. Die Funktionenen des Materialkatalogs wirken eingeschränkt. Gibt es hierfür Möglichkeiten Materialparameter neu zu erstellen?*\n\nIn other words, he would like to add specific IDs (parameters) to materials that he could write out to a database. He mentions the analogy with shared parameters &ndash; it seems he would like to create custom shared parameters and add them to materials.\n\nDo you know any solution for this idea?\n\n**Answer 1:** So, the user has an external database and wishes to link Revit materials to database entries.\n\nThat is good, and easy.\n\nNow I would suggest that we all switch on our brains for a moment.\n\nThe Revit materials reside in the Revit database and are therefore Revit elements.\n\nThey are therefore equipped with an element id and a unique id.\n\nThe external database exists and has entries for the materials, and needs some kind of link.\n\nYou might consider adding something new to the Revit database, e.g. a shared parameter on each material.\n\nThat is completely unnecessary, as far as I can tell.\n\nSince you are already managing an external database, and since each material already is equipped with a unique id, I would suggest that you use that existing unique id to identify the material, and store that in the database.\n\nIf you need to link multiple materials to the same database entry and are using a relational database, you might want to implement a `1:n` link using an auxiliary table.\n\nUnless there is more to the problem than has been mentioned so far, I would maintain that this is the most efficient solution.\n\nIt also has the advantage of solving the problem without introducing any new data elements or shared parameters anywhere.\n\nWhat do you think?\n\nOn the other hand, if you insist on pursuing the suggested path, the fact is that as far as I know any Revit element can be equipped with a shared parameter, as long as it has a valid category.\n\nIs there a category for materials?\n\nYes, there is.\n\nTherefore, materials can have a shared parameter attached to them.\n\nHere is an explanation of this that I wrote while [adding a shared parameter to a DWG file](http://thebuildingcoder.typepad.com/blog/2008/11/adding-a-shared-parameter-to-a-dwg-file.html).\n\nYou can look at the [list of things I already tested right there in the C# source code](https://github.com/jeremytammik/AdnRevitApiLabsXtra/blob/master/XtraCs/Labs4.cs#L511-L535).\n\nI am just in the process of testing for myself whether a shared param can be added to a material as well.\n\nI'll let you know when I know.\n\n**Answer 2:** I verified and tested successfully that shared parameters can be added to material elements.\n\nYou can see so by checking out and\nrunning [version 2017.0.0.6](https://github.com/jeremytammik/AdnRevitApiLabsXtra/releases/tag/2017.0.0.6).\n\nI switched back to the standard test using doors again after that, \nin [version 2017.0.0.7](https://github.com/jeremytammik/AdnRevitApiLabsXtra/releases/tag/2017.0.0.7).\n\nThe link to the list of things I already tested has changed, since the line numbers moved\nto [Labs4.cs#L518-L539](https://github.com/jeremytammik/AdnRevitApiLabsXtra/blob/master/XtraCs/Labs4.cs#L518-L539).\n\nYou should also always be aware of the possibility to\nuse [extensible storage](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.23) instead\nof shared parameters to store custom data, cf. also the SDK samples ExtensibleStorageManager and ExtensibleStorageUtility.\n\nShared parameters make sense if the user and/or Revit should be aware of the properties, e.g. to view or edit them in the properties panel or to make us of them for scheduling purposes.\n\nIf the data is purely intended for internal add-in use, extensible storage is normally the better way to go.\n\n\n\n####<a name=\"5\"></a>Binding a Shared Parameter to Elements\n\nOne way to add custom properties to Revit elements is by using a shared parameter.\nIf you can do that in the user interface, then you can do so programmatically as well.\n\nThe FireRating SDK sample shows how this can be achieved, and so does my modernised version of it,\n[FireRatingCloud](https://github.com/jeremytammik/FireRatingCloud), in\nthe [module Cmd_1_CreateAndBindSharedParameter.cs](https://github.com/jeremytammik/FireRatingCloud/blob/master/FireRatingCloud/Cmd_1_CreateAndBindSharedParameter.cs).\n\nHowever, this is one of the few things that can be done programmatically for some element types even when it is not allowed in the UI.\nIf the Revit development team decided that the end user should not be able to add a shared parameter to a certain element type, it will not show up in the UI.\nAs long as it has a valid category, you can mostly attach a shared parameter to it programmatically anyway.\n\nThe option `AllowsBoundParameters` is related to this, determining the so-called visibility of the new parameter: the\n`Category.AllowsBoundParameters` property determines whether a category is allowed to have user-visible shared or project parameters. If it is false, it may not be bound to visible shared parameters using the BindingMap. Note that non-user-visible parameters can still be bound to these categories.\n\n\n####<a name=\"6\"></a>Attaching a Shared Parameter to `Material` Elements\n\nI have repeatedly used the external command `Lab4_3_1_CreateAndBindSharedParam` implemented in\nthe [AdnRevitApiLabsXtra ](https://github.com/jeremytammik/AdnRevitApiLabsXtra)\n[module Labs4.cs](https://github.com/jeremytammik/AdnRevitApiLabsXtra/blob/master/XtraCs/Labs4.cs) to\ntest and verify the possibility of binding shared parameters to various classes of elements.\n\nI added `Material` elements to that list now as well, and that worked fine.\n\nHere is the complete list of the element types we are interested in:\n\nThe standard SDK FireRating sample uses BuiltInCategory.OST_Doors. \nWe also test using BuiltInCategory.OST_Walls to demonstrate that the same technique\nworks with system families just as well as with standard ones.\n\nTo test attaching shared parameters to inserted DWG files,\nwhich generate their own category on the fly, we also identify\nthe category by category name.\nNote that every DWG file linked in generates an own new category named after the DWG filename.\nTherefore, I use the filename stem to determine the category to use for a DWG file, and the built-in category for all other classes of elements.\n\nFurther tests confirm the possibility to attach \nshared parameters to model groups, model lines, \nrectangular straight wall openings and material \nelements.\n\nI successfully tested the following built-in categories:\n\n- OST_Doors\n- OST_Walls\n- OST_Lines \n- OST_SWallRectOpening \n- OST_Materials \n\nYou can examine exactly what modifications I made to test adding a shared parameter to `Material` elements by looking at the differences between the releases before and after doing so:\n\n- [compare 2017.0.0.5...2017.0.0.6](https://github.com/jeremytammik/AdnRevitApiLabsXtra/compare/2017.0.0.5...2017.0.0.6) &ndash; compare the original code binding to the `Doors` category and the modifications made to switch to `Materials` instead.\n- [compare 2017.0.0.6...2017.0.0.7](https://github.com/jeremytammik/AdnRevitApiLabsXtra/compare/2017.0.0.6...2017.0.0.7) &ndash; compare the code binding to the `Materials` category and the code after switching back to `Doors`.\n\n\n####<a name=\"7\"></a>Create and Populate a Shared Parameter `ForgeMaterial`\n\nFunnily enough, Philippe just came up with a request to equip a sample BIM that he needs for his Forge demo with some enhanced material information.\n\nI chose to create and populate a new shared parameter named `ForgeMaterial` to transport that through the translation process across to the Forge ecosystem.\n\nYou can check it out in its new [PopulateMaterialProperty GitHub repository](https://github.com/jeremytammik/PopulateMaterialProperty).\n\nNote that my algorithm to determine what material to use for each element is rather arbitrary:\n\nIf the element category `HasMaterialQuantities` property is true, the element is deemed to consist of the first material with non-zero area.\n\nOtherwise, the material element is simply set to the element category name.\n\n\n####<a name=\"8\"></a>Cornelius Story &ndash; Cured by Natural Remedies\n\nLet me finish off on a personal note, sharing with you my\nson [Cornelius story &ndash; cured by natural remedies](http://on-lyme.org/en/sufferers/lyme-stories/item/241-cornelius-story-cured-by-natural-remedies) on suffering and recovering from Lyme chronic disease.\n\n<center>\n<img src=\"img/cornelius_iris.jpg\" alt=\"Iris\" width=\"200\">\n</center>"
  }
]