[
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Migrate Building Coder Samples to Revit 2013",
    "local_header_href": "#migrate-building-coder-samples-to-revit-2013",
    "chunk_text": "<h3>Migrate Building Coder Samples to Revit 2013</h3><p>I migrated The Building Coder samples to Revit 2013.\n\n<h4>Revit Onebox</h4>\n<p>Before diving into that, however, a short note on Revit Onebox.\nHere is a \n\n<a href=\"http://www.cadac.com/nl/brochures/Documents/autodesk-revit-mep-2013-comparison-matrix-en.pdf\">\ncomparison matrix</a> of\n\nthe features provided by the different flavours, all of which are available in the Onebox version.\nThere is even a short 1.5 minute \n\n<a href=\"http://www.youtube.com/watch?v=ryuAPnIhiO8\">\nyoutube video</a> on\n\nthe topic.\n\n<p><strong>Question:</strong> I would like to install the Revit 2013 Onebox product which contains Revit Architecture, Structure and MEP as one product. \nWhere can I find it?\n\n<p><strong>Answer:</strong> Revit Onebox is included in Autodesk Building Design Suite 2013 Premium and Ultimate, and not in Standard.\nFor \n\n<a href=\"http://www.autodesk.com/joinadn\">\nADN members</a>, \n\nthe Autodesk Building Design Suites are now available for download from the \n\n<a href=\"http://adn.autodesk.com/adn\">\nADN extranet</a>\n\nat \n\n<a href=\"http://adn.autodesk.com/adn/servlet/index?siteID=4814862&amp;id=9923886\">\nSoftware &amp; Support</a> &gt; \n\n<a href=\"http://adn.autodesk.com/adn/servlet/autoindex?siteID=4814862&amp;id=4832864&amp;linkID=16829826\">\nAutodesk Building Design Suite</a> &gt; \n\n<a href=\"http://adn.autodesk.com/adn/servlet/index?siteID=4814862&amp;id=16829938&amp;linkID=16829826\">\nDownloads</a>.\n\n\n<a name=\"0\"></a>\n<h4>The Building Coder Samples Migration to Revit 2013</h4>\n<p>Back to the API related topics.\n\n<p>Migrating from one release of Revit to the next is an exercise we have gone through several times in the past, of course.\n\n<p>This time I was especially well prepared, since I recently intentionally eliminated the Revit 2012 API \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/eliminating-compiler-warnings-and-deprecated-calls.html\">\ncompiler warnings and deprecated calls</a>.\n\n<p>Look at that post for links back to the previous migration efforts.\n\n<p>Here are the main issues I had to tackle:\n\n<ul>\n<li><a href=\"#1\">.NET framework</a> update\n<li><a href=\"#2\">Materials collection</a> update\n<li>New Document <a href=\"#3\">GetElement method</a>\n<li>Remaining <a href=\"#4\">errors</a>\n<li><a href=\"#5\">Enumerable GeometryElement</a>\n<li>Updated <a href=\"#6\">Group and Ungroup methods</a>\n<li><a href=\"#7\">Revit 2012 comparison</a>\n<li>Final initial <a href=\"#8\">Revit 2013 version\n</a></li></li></li></li></li></li></li></li></ul>\n<a name=\"1\"></a>\n<h4>.NET Framework Update</h4>\n<p>The first thing that strikes one this time around when migrating an add-in from the previous version is the message displayed by Visual Studio on changing the Revit API assemblies, telling us that the add-in project now needs to reference the .NET framework version 4:</p>\n<center>\n<img alt=\".NET Framework version update message\" src=\"img/bc_migr_2013_1.png\"/>\n</center>\n<p>Trying to rebuild now without updating the framework version causes 1545 errors and 94 warnings:\n\n<p>The primary reference \"RevitAPI\" could not be resolved because it has an indirect dependency on the .NET Framework assembly \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" which has a higher version \"4.0.0.0\" than the version \"2.0.0.0\" in the current target framework.\n\n<p>Go to Solution Explorer &gt; BuildingCoder &gt; [right click] &gt; Properties &gt; Application &gt; Target Framework and change it to version 4.0 to remove them all again:</p>\n<center>\n<img alt=\"Set .NET Framework version\" src=\"img/bc_migr_2013_2.png\"/>\n</center>\n<a name=\"2\"></a>\n<h4>Materials Collection Update</h4>\n<p>After that, recompiling causes one single error:\n\n<p>The type or namespace name 'Materials' could not be found (are you missing a using directive or an assembly reference?) in CmdGetMaterials.cs, line 460.\n\n<p>The Materials collection class, derived from the MaterialSet class, was defined in the Revit 2012 API to provide access to the materials used in the Revit project.\nInstances of this class were returned by the Settings.Materials property.\n\n<p>This class no longer exists in the Revit 2013 API, a fact not mentioned in the What's New section of the Revit API help file RevitAPI.chm, to my surprise.\nIt does however mention that its creation members have been replaced by the new static Material.Create method:\n\n<ul>\n<li>AddConcrete\n<li>AddGeneric\n<li>AddOther\n<li>AddSteel\n<li>AddWood\n</li></li></li></li></li></ul>\n<p>Just seeing one single error reported was of course too good to be true.\nThere are actually many more than one errors relating to materials.\nThey are caused in various places in the module CmdGetMaterials, which we used to compare different ways to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/materials-collection-and-filtering.html\">\nretrieve materials</a> using\n\neither the obsolete Materials collection property or directly via filtered element collectors.\n\n<p>Commenting out the initial offending usage of the Materials class in the GetMaterialByName extension class caused lots of other errors and warnings to be listed, \n\n<a href=\"zip/bc_migr_2013_1.txt\">\n13 errors and 52 warnings</a>,\n\nto be precise.\n\n\n<a name=\"3\"></a>\n<h4>New Document GetElement method</h4>\n<p>Most of the warnings refer to the obsolete Document.Element property taking an element id argument, which has now been converted to a method named\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/getelement-method-and-get-element-type.html\">\nGetElement, as I recently explained</a>.\n\n<p>I globally replaced \".get_Element(\" by \".GetElement(\" to fix that, reducing the count to \n\n<a href=\"zip/bc_migr_2013_2.txt\">\n13 errors and 33 warnings</a>.\n\n<p>Most of the errors are still related to the removal of the Materials collection class in the CmdGetMaterials.cs module, so I fixed that next by simply encapsulating all the offending the code in an '#if BEFORE_REVIT_2013' pragma, effectively removing it, reducing the count to \n\n<a href=\"zip/bc_migr_2013_3.txt\">\n5 errors and 33 warnings</a>.\n\n\n<a name=\"4\"></a>\n<h4>Remaining Errors</h4>\n<p>The five remaining errors look pretty trivial:\n\n<ul>\n<li>Replace ConnectorProfileType.RectProfile by ConnectorProfileType.Rectangular in CmdRectDuctCorners.cs.\n<li>Replace DetailLevels.Fine by ViewDetailLevel.Fine, also in CmdRectDuctCorners.cs.\n<li>Remove the references to ParameterType.TemperalExp and UnitType.UT_TemperalExp in ParameterUnitConverter.cs.\n</li></li></li></ul>\n<p>One single error remains:\n\n<p>The type 'System.Windows.Markup.IUriContext' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' in line 73 of CmdPreviewImage.cs.\n\n<p>So I did what the man says and added the required reference, resulting in \n\n<a href=\"zip/bc_migr_2013_4.txt\">\nzero errors and 33 warnings</a>.\n\n<p>Rebuild all now succeeds, so I could in fact load and test my little baby at this point.\n\n\n<a name=\"5\"></a>\n<h4>Enumerable GeometryElement</h4>\n<p>However, since most of the warnings are caused by the obsolete GeometryElement Objects property returning a GeometryObjectArray, I decided to address that as well first.\n\n<p>The Obsolete attribute on this property actually states that \"This property will be obsolete from 2013; Call GetEnumerator() instead.\"\nStrictly taken, this is only true if I interpret \"from\" as \"after\", as far as I can tell.\n\n<p>The fix is very simple and reduces the number of lines of code, since the GeometryElement class is now in itself enumerable.\nHere is a code snippet from CmdSlabBoundary.cs using the obsolete Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n\n  <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>This can now be replaced by a shorter version iterating over the geometry element itself directly, like this:\n \n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>Put differently, we used to access a GeometryObjectArray containing the geometry objects from the geometry element using its Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objs = ge.Objects; <span class=\"green\">// 2012</span>\n</pre>\n<p>Nowadays, the geometry element itself is an enumeration of the contained objects, and derived from the appropriate interface to access them:\n\n<pre class=\"code\">\n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; objs = ge; <span class=\"green\">// 2013</span>\n</pre>\n<p>I did not replace the use of the Objects property in those places that query the number of elements contained, since the new enumerator interface does not return that information directly, whereas the GeometryObjectArray provides a Size property returning the total count of collection members.\n\n<p>After this cleanup, I am left with \n\n<a href=\"zip/bc_migr_2013_5.txt\">\nzero errors and 13 warnings</a>,\n\nwhich I am happy to live with for the moment, since I have other things to do besides this.\n\n\n\n<a name=\"6\"></a>\n<h4>Updated Group and Ungroup Methods</h4>\n<p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Revit Onebox",
    "local_header_href": "#revit-onebox",
    "chunk_text": "<h4>Revit Onebox</h4><p>Before diving into that, however, a short note on Revit Onebox.\nHere is a \n\n<a href=\"http://www.cadac.com/nl/brochures/Documents/autodesk-revit-mep-2013-comparison-matrix-en.pdf\">\ncomparison matrix</a> of\n\nthe features provided by the different flavours, all of which are available in the Onebox version.\nThere is even a short 1.5 minute \n\n<a href=\"http://www.youtube.com/watch?v=ryuAPnIhiO8\">\nyoutube video</a> on\n\nthe topic.\n\n<p><strong>Question:</strong> I would like to install the Revit 2013 Onebox product which contains Revit Architecture, Structure and MEP as one product. \nWhere can I find it?\n\n<p><strong>Answer:</strong> Revit Onebox is included in Autodesk Building Design Suite 2013 Premium and Ultimate, and not in Standard.\nFor \n\n<a href=\"http://www.autodesk.com/joinadn\">\nADN members</a>, \n\nthe Autodesk Building Design Suites are now available for download from the \n\n<a href=\"http://adn.autodesk.com/adn\">\nADN extranet</a>\n\nat \n\n<a href=\"http://adn.autodesk.com/adn/servlet/index?siteID=4814862&amp;id=9923886\">\nSoftware &amp; Support</a> &gt; \n\n<a href=\"http://adn.autodesk.com/adn/servlet/autoindex?siteID=4814862&amp;id=4832864&amp;linkID=16829826\">\nAutodesk Building Design Suite</a> &gt; \n\n<a href=\"http://adn.autodesk.com/adn/servlet/index?siteID=4814862&amp;id=16829938&amp;linkID=16829826\">\nDownloads</a>.\n\n\n<a name=\"0\"></a>\n<h4>The Building Coder Samples Migration to Revit 2013</h4>\n<p>Back to the API related topics.\n\n<p>Migrating from one release of Revit to the next is an exercise we have gone through several times in the past, of course.\n\n<p>This time I was especially well prepared, since I recently intentionally eliminated the Revit 2012 API \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/eliminating-compiler-warnings-and-deprecated-calls.html\">\ncompiler warnings and deprecated calls</a>.\n\n<p>Look at that post for links back to the previous migration efforts.\n\n<p>Here are the main issues I had to tackle:\n\n<ul>\n<li><a href=\"#1\">.NET framework</a> update\n<li><a href=\"#2\">Materials collection</a> update\n<li>New Document <a href=\"#3\">GetElement method</a>\n<li>Remaining <a href=\"#4\">errors</a>\n<li><a href=\"#5\">Enumerable GeometryElement</a>\n<li>Updated <a href=\"#6\">Group and Ungroup methods</a>\n<li><a href=\"#7\">Revit 2012 comparison</a>\n<li>Final initial <a href=\"#8\">Revit 2013 version\n</a></li></li></li></li></li></li></li></li></ul>\n<a name=\"1\"></a>\n<h4>.NET Framework Update</h4>\n<p>The first thing that strikes one this time around when migrating an add-in from the previous version is the message displayed by Visual Studio on changing the Revit API assemblies, telling us that the add-in project now needs to reference the .NET framework version 4:</p>\n<center>\n<img alt=\".NET Framework version update message\" src=\"img/bc_migr_2013_1.png\"/>\n</center>\n<p>Trying to rebuild now without updating the framework version causes 1545 errors and 94 warnings:\n\n<p>The primary reference \"RevitAPI\" could not be resolved because it has an indirect dependency on the .NET Framework assembly \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" which has a higher version \"4.0.0.0\" than the version \"2.0.0.0\" in the current target framework.\n\n<p>Go to Solution Explorer &gt; BuildingCoder &gt; [right click] &gt; Properties &gt; Application &gt; Target Framework and change it to version 4.0 to remove them all again:</p>\n<center>\n<img alt=\"Set .NET Framework version\" src=\"img/bc_migr_2013_2.png\"/>\n</center>\n<a name=\"2\"></a>\n<h4>Materials Collection Update</h4>\n<p>After that, recompiling causes one single error:\n\n<p>The type or namespace name 'Materials' could not be found (are you missing a using directive or an assembly reference?) in CmdGetMaterials.cs, line 460.\n\n<p>The Materials collection class, derived from the MaterialSet class, was defined in the Revit 2012 API to provide access to the materials used in the Revit project.\nInstances of this class were returned by the Settings.Materials property.\n\n<p>This class no longer exists in the Revit 2013 API, a fact not mentioned in the What's New section of the Revit API help file RevitAPI.chm, to my surprise.\nIt does however mention that its creation members have been replaced by the new static Material.Create method:\n\n<ul>\n<li>AddConcrete\n<li>AddGeneric\n<li>AddOther\n<li>AddSteel\n<li>AddWood\n</li></li></li></li></li></ul>\n<p>Just seeing one single error reported was of course too good to be true.\nThere are actually many more than one errors relating to materials.\nThey are caused in various places in the module CmdGetMaterials, which we used to compare different ways to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/materials-collection-and-filtering.html\">\nretrieve materials</a> using\n\neither the obsolete Materials collection property or directly via filtered element collectors.\n\n<p>Commenting out the initial offending usage of the Materials class in the GetMaterialByName extension class caused lots of other errors and warnings to be listed, \n\n<a href=\"zip/bc_migr_2013_1.txt\">\n13 errors and 52 warnings</a>,\n\nto be precise.\n\n\n<a name=\"3\"></a>\n<h4>New Document GetElement method</h4>\n<p>Most of the warnings refer to the obsolete Document.Element property taking an element id argument, which has now been converted to a method named\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/getelement-method-and-get-element-type.html\">\nGetElement, as I recently explained</a>.\n\n<p>I globally replaced \".get_Element(\" by \".GetElement(\" to fix that, reducing the count to \n\n<a href=\"zip/bc_migr_2013_2.txt\">\n13 errors and 33 warnings</a>.\n\n<p>Most of the errors are still related to the removal of the Materials collection class in the CmdGetMaterials.cs module, so I fixed that next by simply encapsulating all the offending the code in an '#if BEFORE_REVIT_2013' pragma, effectively removing it, reducing the count to \n\n<a href=\"zip/bc_migr_2013_3.txt\">\n5 errors and 33 warnings</a>.\n\n\n<a name=\"4\"></a>\n<h4>Remaining Errors</h4>\n<p>The five remaining errors look pretty trivial:\n\n<ul>\n<li>Replace ConnectorProfileType.RectProfile by ConnectorProfileType.Rectangular in CmdRectDuctCorners.cs.\n<li>Replace DetailLevels.Fine by ViewDetailLevel.Fine, also in CmdRectDuctCorners.cs.\n<li>Remove the references to ParameterType.TemperalExp and UnitType.UT_TemperalExp in ParameterUnitConverter.cs.\n</li></li></li></ul>\n<p>One single error remains:\n\n<p>The type 'System.Windows.Markup.IUriContext' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' in line 73 of CmdPreviewImage.cs.\n\n<p>So I did what the man says and added the required reference, resulting in \n\n<a href=\"zip/bc_migr_2013_4.txt\">\nzero errors and 33 warnings</a>.\n\n<p>Rebuild all now succeeds, so I could in fact load and test my little baby at this point.\n\n\n<a name=\"5\"></a>\n<h4>Enumerable GeometryElement</h4>\n<p>However, since most of the warnings are caused by the obsolete GeometryElement Objects property returning a GeometryObjectArray, I decided to address that as well first.\n\n<p>The Obsolete attribute on this property actually states that \"This property will be obsolete from 2013; Call GetEnumerator() instead.\"\nStrictly taken, this is only true if I interpret \"from\" as \"after\", as far as I can tell.\n\n<p>The fix is very simple and reduces the number of lines of code, since the GeometryElement class is now in itself enumerable.\nHere is a code snippet from CmdSlabBoundary.cs using the obsolete Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n\n  <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>This can now be replaced by a shorter version iterating over the geometry element itself directly, like this:\n \n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>Put differently, we used to access a GeometryObjectArray containing the geometry objects from the geometry element using its Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objs = ge.Objects; <span class=\"green\">// 2012</span>\n</pre>\n<p>Nowadays, the geometry element itself is an enumeration of the contained objects, and derived from the appropriate interface to access them:\n\n<pre class=\"code\">\n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; objs = ge; <span class=\"green\">// 2013</span>\n</pre>\n<p>I did not replace the use of the Objects property in those places that query the number of elements contained, since the new enumerator interface does not return that information directly, whereas the GeometryObjectArray provides a Size property returning the total count of collection members.\n\n<p>After this cleanup, I am left with \n\n<a href=\"zip/bc_migr_2013_5.txt\">\nzero errors and 13 warnings</a>,\n\nwhich I am happy to live with for the moment, since I have other things to do besides this.\n\n\n\n<a name=\"6\"></a>\n<h4>Updated Group and Ungroup Methods</h4>\n<p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "The Building Coder Samples Migration to Revit 2013",
    "local_header_href": "#the-building-coder-samples-migration-to-revit-2013",
    "chunk_text": "<h4>The Building Coder Samples Migration to Revit 2013</h4><p>Back to the API related topics.\n\n<p>Migrating from one release of Revit to the next is an exercise we have gone through several times in the past, of course.\n\n<p>This time I was especially well prepared, since I recently intentionally eliminated the Revit 2012 API \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/eliminating-compiler-warnings-and-deprecated-calls.html\">\ncompiler warnings and deprecated calls</a>.\n\n<p>Look at that post for links back to the previous migration efforts.\n\n<p>Here are the main issues I had to tackle:\n\n<ul>\n<li><a href=\"#1\">.NET framework</a> update\n<li><a href=\"#2\">Materials collection</a> update\n<li>New Document <a href=\"#3\">GetElement method</a>\n<li>Remaining <a href=\"#4\">errors</a>\n<li><a href=\"#5\">Enumerable GeometryElement</a>\n<li>Updated <a href=\"#6\">Group and Ungroup methods</a>\n<li><a href=\"#7\">Revit 2012 comparison</a>\n<li>Final initial <a href=\"#8\">Revit 2013 version\n</a></li></li></li></li></li></li></li></li></ul>\n<a name=\"1\"></a>\n<h4>.NET Framework Update</h4>\n<p>The first thing that strikes one this time around when migrating an add-in from the previous version is the message displayed by Visual Studio on changing the Revit API assemblies, telling us that the add-in project now needs to reference the .NET framework version 4:</p>\n<center>\n<img alt=\".NET Framework version update message\" src=\"img/bc_migr_2013_1.png\"/>\n</center>\n<p>Trying to rebuild now without updating the framework version causes 1545 errors and 94 warnings:\n\n<p>The primary reference \"RevitAPI\" could not be resolved because it has an indirect dependency on the .NET Framework assembly \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" which has a higher version \"4.0.0.0\" than the version \"2.0.0.0\" in the current target framework.\n\n<p>Go to Solution Explorer &gt; BuildingCoder &gt; [right click] &gt; Properties &gt; Application &gt; Target Framework and change it to version 4.0 to remove them all again:</p>\n<center>\n<img alt=\"Set .NET Framework version\" src=\"img/bc_migr_2013_2.png\"/>\n</center>\n<a name=\"2\"></a>\n<h4>Materials Collection Update</h4>\n<p>After that, recompiling causes one single error:\n\n<p>The type or namespace name 'Materials' could not be found (are you missing a using directive or an assembly reference?) in CmdGetMaterials.cs, line 460.\n\n<p>The Materials collection class, derived from the MaterialSet class, was defined in the Revit 2012 API to provide access to the materials used in the Revit project.\nInstances of this class were returned by the Settings.Materials property.\n\n<p>This class no longer exists in the Revit 2013 API, a fact not mentioned in the What's New section of the Revit API help file RevitAPI.chm, to my surprise.\nIt does however mention that its creation members have been replaced by the new static Material.Create method:\n\n<ul>\n<li>AddConcrete\n<li>AddGeneric\n<li>AddOther\n<li>AddSteel\n<li>AddWood\n</li></li></li></li></li></ul>\n<p>Just seeing one single error reported was of course too good to be true.\nThere are actually many more than one errors relating to materials.\nThey are caused in various places in the module CmdGetMaterials, which we used to compare different ways to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/materials-collection-and-filtering.html\">\nretrieve materials</a> using\n\neither the obsolete Materials collection property or directly via filtered element collectors.\n\n<p>Commenting out the initial offending usage of the Materials class in the GetMaterialByName extension class caused lots of other errors and warnings to be listed, \n\n<a href=\"zip/bc_migr_2013_1.txt\">\n13 errors and 52 warnings</a>,\n\nto be precise.\n\n\n<a name=\"3\"></a>\n<h4>New Document GetElement method</h4>\n<p>Most of the warnings refer to the obsolete Document.Element property taking an element id argument, which has now been converted to a method named\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/getelement-method-and-get-element-type.html\">\nGetElement, as I recently explained</a>.\n\n<p>I globally replaced \".get_Element(\" by \".GetElement(\" to fix that, reducing the count to \n\n<a href=\"zip/bc_migr_2013_2.txt\">\n13 errors and 33 warnings</a>.\n\n<p>Most of the errors are still related to the removal of the Materials collection class in the CmdGetMaterials.cs module, so I fixed that next by simply encapsulating all the offending the code in an '#if BEFORE_REVIT_2013' pragma, effectively removing it, reducing the count to \n\n<a href=\"zip/bc_migr_2013_3.txt\">\n5 errors and 33 warnings</a>.\n\n\n<a name=\"4\"></a>\n<h4>Remaining Errors</h4>\n<p>The five remaining errors look pretty trivial:\n\n<ul>\n<li>Replace ConnectorProfileType.RectProfile by ConnectorProfileType.Rectangular in CmdRectDuctCorners.cs.\n<li>Replace DetailLevels.Fine by ViewDetailLevel.Fine, also in CmdRectDuctCorners.cs.\n<li>Remove the references to ParameterType.TemperalExp and UnitType.UT_TemperalExp in ParameterUnitConverter.cs.\n</li></li></li></ul>\n<p>One single error remains:\n\n<p>The type 'System.Windows.Markup.IUriContext' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' in line 73 of CmdPreviewImage.cs.\n\n<p>So I did what the man says and added the required reference, resulting in \n\n<a href=\"zip/bc_migr_2013_4.txt\">\nzero errors and 33 warnings</a>.\n\n<p>Rebuild all now succeeds, so I could in fact load and test my little baby at this point.\n\n\n<a name=\"5\"></a>\n<h4>Enumerable GeometryElement</h4>\n<p>However, since most of the warnings are caused by the obsolete GeometryElement Objects property returning a GeometryObjectArray, I decided to address that as well first.\n\n<p>The Obsolete attribute on this property actually states that \"This property will be obsolete from 2013; Call GetEnumerator() instead.\"\nStrictly taken, this is only true if I interpret \"from\" as \"after\", as far as I can tell.\n\n<p>The fix is very simple and reduces the number of lines of code, since the GeometryElement class is now in itself enumerable.\nHere is a code snippet from CmdSlabBoundary.cs using the obsolete Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n\n  <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>This can now be replaced by a shorter version iterating over the geometry element itself directly, like this:\n \n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>Put differently, we used to access a GeometryObjectArray containing the geometry objects from the geometry element using its Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objs = ge.Objects; <span class=\"green\">// 2012</span>\n</pre>\n<p>Nowadays, the geometry element itself is an enumeration of the contained objects, and derived from the appropriate interface to access them:\n\n<pre class=\"code\">\n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; objs = ge; <span class=\"green\">// 2013</span>\n</pre>\n<p>I did not replace the use of the Objects property in those places that query the number of elements contained, since the new enumerator interface does not return that information directly, whereas the GeometryObjectArray provides a Size property returning the total count of collection members.\n\n<p>After this cleanup, I am left with \n\n<a href=\"zip/bc_migr_2013_5.txt\">\nzero errors and 13 warnings</a>,\n\nwhich I am happy to live with for the moment, since I have other things to do besides this.\n\n\n\n<a name=\"6\"></a>\n<h4>Updated Group and Ungroup Methods</h4>\n<p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": ".NET Framework Update",
    "local_header_href": "#net-framework-update",
    "chunk_text": "<h4>.NET Framework Update</h4><p>The first thing that strikes one this time around when migrating an add-in from the previous version is the message displayed by Visual Studio on changing the Revit API assemblies, telling us that the add-in project now needs to reference the .NET framework version 4:</p><center>\n<img alt=\".NET Framework version update message\" src=\"img/bc_migr_2013_1.png\"/>\n</center><p>Trying to rebuild now without updating the framework version causes 1545 errors and 94 warnings:\n\n<p>The primary reference \"RevitAPI\" could not be resolved because it has an indirect dependency on the .NET Framework assembly \"mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" which has a higher version \"4.0.0.0\" than the version \"2.0.0.0\" in the current target framework.\n\n<p>Go to Solution Explorer &gt; BuildingCoder &gt; [right click] &gt; Properties &gt; Application &gt; Target Framework and change it to version 4.0 to remove them all again:</p>\n<center>\n<img alt=\"Set .NET Framework version\" src=\"img/bc_migr_2013_2.png\"/>\n</center>\n<a name=\"2\"></a>\n<h4>Materials Collection Update</h4>\n<p>After that, recompiling causes one single error:\n\n<p>The type or namespace name 'Materials' could not be found (are you missing a using directive or an assembly reference?) in CmdGetMaterials.cs, line 460.\n\n<p>The Materials collection class, derived from the MaterialSet class, was defined in the Revit 2012 API to provide access to the materials used in the Revit project.\nInstances of this class were returned by the Settings.Materials property.\n\n<p>This class no longer exists in the Revit 2013 API, a fact not mentioned in the What's New section of the Revit API help file RevitAPI.chm, to my surprise.\nIt does however mention that its creation members have been replaced by the new static Material.Create method:\n\n<ul>\n<li>AddConcrete\n<li>AddGeneric\n<li>AddOther\n<li>AddSteel\n<li>AddWood\n</li></li></li></li></li></ul>\n<p>Just seeing one single error reported was of course too good to be true.\nThere are actually many more than one errors relating to materials.\nThey are caused in various places in the module CmdGetMaterials, which we used to compare different ways to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/materials-collection-and-filtering.html\">\nretrieve materials</a> using\n\neither the obsolete Materials collection property or directly via filtered element collectors.\n\n<p>Commenting out the initial offending usage of the Materials class in the GetMaterialByName extension class caused lots of other errors and warnings to be listed, \n\n<a href=\"zip/bc_migr_2013_1.txt\">\n13 errors and 52 warnings</a>,\n\nto be precise.\n\n\n<a name=\"3\"></a>\n<h4>New Document GetElement method</h4>\n<p>Most of the warnings refer to the obsolete Document.Element property taking an element id argument, which has now been converted to a method named\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/getelement-method-and-get-element-type.html\">\nGetElement, as I recently explained</a>.\n\n<p>I globally replaced \".get_Element(\" by \".GetElement(\" to fix that, reducing the count to \n\n<a href=\"zip/bc_migr_2013_2.txt\">\n13 errors and 33 warnings</a>.\n\n<p>Most of the errors are still related to the removal of the Materials collection class in the CmdGetMaterials.cs module, so I fixed that next by simply encapsulating all the offending the code in an '#if BEFORE_REVIT_2013' pragma, effectively removing it, reducing the count to \n\n<a href=\"zip/bc_migr_2013_3.txt\">\n5 errors and 33 warnings</a>.\n\n\n<a name=\"4\"></a>\n<h4>Remaining Errors</h4>\n<p>The five remaining errors look pretty trivial:\n\n<ul>\n<li>Replace ConnectorProfileType.RectProfile by ConnectorProfileType.Rectangular in CmdRectDuctCorners.cs.\n<li>Replace DetailLevels.Fine by ViewDetailLevel.Fine, also in CmdRectDuctCorners.cs.\n<li>Remove the references to ParameterType.TemperalExp and UnitType.UT_TemperalExp in ParameterUnitConverter.cs.\n</li></li></li></ul>\n<p>One single error remains:\n\n<p>The type 'System.Windows.Markup.IUriContext' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' in line 73 of CmdPreviewImage.cs.\n\n<p>So I did what the man says and added the required reference, resulting in \n\n<a href=\"zip/bc_migr_2013_4.txt\">\nzero errors and 33 warnings</a>.\n\n<p>Rebuild all now succeeds, so I could in fact load and test my little baby at this point.\n\n\n<a name=\"5\"></a>\n<h4>Enumerable GeometryElement</h4>\n<p>However, since most of the warnings are caused by the obsolete GeometryElement Objects property returning a GeometryObjectArray, I decided to address that as well first.\n\n<p>The Obsolete attribute on this property actually states that \"This property will be obsolete from 2013; Call GetEnumerator() instead.\"\nStrictly taken, this is only true if I interpret \"from\" as \"after\", as far as I can tell.\n\n<p>The fix is very simple and reduces the number of lines of code, since the GeometryElement class is now in itself enumerable.\nHere is a code snippet from CmdSlabBoundary.cs using the obsolete Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n\n  <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>This can now be replaced by a shorter version iterating over the geometry element itself directly, like this:\n \n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>Put differently, we used to access a GeometryObjectArray containing the geometry objects from the geometry element using its Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objs = ge.Objects; <span class=\"green\">// 2012</span>\n</pre>\n<p>Nowadays, the geometry element itself is an enumeration of the contained objects, and derived from the appropriate interface to access them:\n\n<pre class=\"code\">\n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; objs = ge; <span class=\"green\">// 2013</span>\n</pre>\n<p>I did not replace the use of the Objects property in those places that query the number of elements contained, since the new enumerator interface does not return that information directly, whereas the GeometryObjectArray provides a Size property returning the total count of collection members.\n\n<p>After this cleanup, I am left with \n\n<a href=\"zip/bc_migr_2013_5.txt\">\nzero errors and 13 warnings</a>,\n\nwhich I am happy to live with for the moment, since I have other things to do besides this.\n\n\n\n<a name=\"6\"></a>\n<h4>Updated Group and Ungroup Methods</h4>\n<p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Materials Collection Update",
    "local_header_href": "#materials-collection-update",
    "chunk_text": "<h4>Materials Collection Update</h4><p>After that, recompiling causes one single error:\n\n<p>The type or namespace name 'Materials' could not be found (are you missing a using directive or an assembly reference?) in CmdGetMaterials.cs, line 460.\n\n<p>The Materials collection class, derived from the MaterialSet class, was defined in the Revit 2012 API to provide access to the materials used in the Revit project.\nInstances of this class were returned by the Settings.Materials property.\n\n<p>This class no longer exists in the Revit 2013 API, a fact not mentioned in the What's New section of the Revit API help file RevitAPI.chm, to my surprise.\nIt does however mention that its creation members have been replaced by the new static Material.Create method:\n\n<ul>\n<li>AddConcrete\n<li>AddGeneric\n<li>AddOther\n<li>AddSteel\n<li>AddWood\n</li></li></li></li></li></ul>\n<p>Just seeing one single error reported was of course too good to be true.\nThere are actually many more than one errors relating to materials.\nThey are caused in various places in the module CmdGetMaterials, which we used to compare different ways to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/materials-collection-and-filtering.html\">\nretrieve materials</a> using\n\neither the obsolete Materials collection property or directly via filtered element collectors.\n\n<p>Commenting out the initial offending usage of the Materials class in the GetMaterialByName extension class caused lots of other errors and warnings to be listed, \n\n<a href=\"zip/bc_migr_2013_1.txt\">\n13 errors and 52 warnings</a>,\n\nto be precise.\n\n\n<a name=\"3\"></a>\n<h4>New Document GetElement method</h4>\n<p>Most of the warnings refer to the obsolete Document.Element property taking an element id argument, which has now been converted to a method named\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/getelement-method-and-get-element-type.html\">\nGetElement, as I recently explained</a>.\n\n<p>I globally replaced \".get_Element(\" by \".GetElement(\" to fix that, reducing the count to \n\n<a href=\"zip/bc_migr_2013_2.txt\">\n13 errors and 33 warnings</a>.\n\n<p>Most of the errors are still related to the removal of the Materials collection class in the CmdGetMaterials.cs module, so I fixed that next by simply encapsulating all the offending the code in an '#if BEFORE_REVIT_2013' pragma, effectively removing it, reducing the count to \n\n<a href=\"zip/bc_migr_2013_3.txt\">\n5 errors and 33 warnings</a>.\n\n\n<a name=\"4\"></a>\n<h4>Remaining Errors</h4>\n<p>The five remaining errors look pretty trivial:\n\n<ul>\n<li>Replace ConnectorProfileType.RectProfile by ConnectorProfileType.Rectangular in CmdRectDuctCorners.cs.\n<li>Replace DetailLevels.Fine by ViewDetailLevel.Fine, also in CmdRectDuctCorners.cs.\n<li>Remove the references to ParameterType.TemperalExp and UnitType.UT_TemperalExp in ParameterUnitConverter.cs.\n</li></li></li></ul>\n<p>One single error remains:\n\n<p>The type 'System.Windows.Markup.IUriContext' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' in line 73 of CmdPreviewImage.cs.\n\n<p>So I did what the man says and added the required reference, resulting in \n\n<a href=\"zip/bc_migr_2013_4.txt\">\nzero errors and 33 warnings</a>.\n\n<p>Rebuild all now succeeds, so I could in fact load and test my little baby at this point.\n\n\n<a name=\"5\"></a>\n<h4>Enumerable GeometryElement</h4>\n<p>However, since most of the warnings are caused by the obsolete GeometryElement Objects property returning a GeometryObjectArray, I decided to address that as well first.\n\n<p>The Obsolete attribute on this property actually states that \"This property will be obsolete from 2013; Call GetEnumerator() instead.\"\nStrictly taken, this is only true if I interpret \"from\" as \"after\", as far as I can tell.\n\n<p>The fix is very simple and reduces the number of lines of code, since the GeometryElement class is now in itself enumerable.\nHere is a code snippet from CmdSlabBoundary.cs using the obsolete Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n\n  <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>This can now be replaced by a shorter version iterating over the geometry element itself directly, like this:\n \n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>Put differently, we used to access a GeometryObjectArray containing the geometry objects from the geometry element using its Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objs = ge.Objects; <span class=\"green\">// 2012</span>\n</pre>\n<p>Nowadays, the geometry element itself is an enumeration of the contained objects, and derived from the appropriate interface to access them:\n\n<pre class=\"code\">\n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; objs = ge; <span class=\"green\">// 2013</span>\n</pre>\n<p>I did not replace the use of the Objects property in those places that query the number of elements contained, since the new enumerator interface does not return that information directly, whereas the GeometryObjectArray provides a Size property returning the total count of collection members.\n\n<p>After this cleanup, I am left with \n\n<a href=\"zip/bc_migr_2013_5.txt\">\nzero errors and 13 warnings</a>,\n\nwhich I am happy to live with for the moment, since I have other things to do besides this.\n\n\n\n<a name=\"6\"></a>\n<h4>Updated Group and Ungroup Methods</h4>\n<p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "New Document GetElement method",
    "local_header_href": "#new-document-getelement-method",
    "chunk_text": "<h4>New Document GetElement method</h4><p>Most of the warnings refer to the obsolete Document.Element property taking an element id argument, which has now been converted to a method named\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/getelement-method-and-get-element-type.html\">\nGetElement, as I recently explained</a>.\n\n<p>I globally replaced \".get_Element(\" by \".GetElement(\" to fix that, reducing the count to \n\n<a href=\"zip/bc_migr_2013_2.txt\">\n13 errors and 33 warnings</a>.\n\n<p>Most of the errors are still related to the removal of the Materials collection class in the CmdGetMaterials.cs module, so I fixed that next by simply encapsulating all the offending the code in an '#if BEFORE_REVIT_2013' pragma, effectively removing it, reducing the count to \n\n<a href=\"zip/bc_migr_2013_3.txt\">\n5 errors and 33 warnings</a>.\n\n\n<a name=\"4\"></a>\n<h4>Remaining Errors</h4>\n<p>The five remaining errors look pretty trivial:\n\n<ul>\n<li>Replace ConnectorProfileType.RectProfile by ConnectorProfileType.Rectangular in CmdRectDuctCorners.cs.\n<li>Replace DetailLevels.Fine by ViewDetailLevel.Fine, also in CmdRectDuctCorners.cs.\n<li>Remove the references to ParameterType.TemperalExp and UnitType.UT_TemperalExp in ParameterUnitConverter.cs.\n</li></li></li></ul>\n<p>One single error remains:\n\n<p>The type 'System.Windows.Markup.IUriContext' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' in line 73 of CmdPreviewImage.cs.\n\n<p>So I did what the man says and added the required reference, resulting in \n\n<a href=\"zip/bc_migr_2013_4.txt\">\nzero errors and 33 warnings</a>.\n\n<p>Rebuild all now succeeds, so I could in fact load and test my little baby at this point.\n\n\n<a name=\"5\"></a>\n<h4>Enumerable GeometryElement</h4>\n<p>However, since most of the warnings are caused by the obsolete GeometryElement Objects property returning a GeometryObjectArray, I decided to address that as well first.\n\n<p>The Obsolete attribute on this property actually states that \"This property will be obsolete from 2013; Call GetEnumerator() instead.\"\nStrictly taken, this is only true if I interpret \"from\" as \"after\", as far as I can tell.\n\n<p>The fix is very simple and reduces the number of lines of code, since the GeometryElement class is now in itself enumerable.\nHere is a code snippet from CmdSlabBoundary.cs using the obsolete Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n\n  <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>This can now be replaced by a shorter version iterating over the geometry element itself directly, like this:\n \n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>Put differently, we used to access a GeometryObjectArray containing the geometry objects from the geometry element using its Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objs = ge.Objects; <span class=\"green\">// 2012</span>\n</pre>\n<p>Nowadays, the geometry element itself is an enumeration of the contained objects, and derived from the appropriate interface to access them:\n\n<pre class=\"code\">\n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; objs = ge; <span class=\"green\">// 2013</span>\n</pre>\n<p>I did not replace the use of the Objects property in those places that query the number of elements contained, since the new enumerator interface does not return that information directly, whereas the GeometryObjectArray provides a Size property returning the total count of collection members.\n\n<p>After this cleanup, I am left with \n\n<a href=\"zip/bc_migr_2013_5.txt\">\nzero errors and 13 warnings</a>,\n\nwhich I am happy to live with for the moment, since I have other things to do besides this.\n\n\n\n<a name=\"6\"></a>\n<h4>Updated Group and Ungroup Methods</h4>\n<p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Remaining Errors",
    "local_header_href": "#remaining-errors",
    "chunk_text": "<h4>Remaining Errors</h4><p>The five remaining errors look pretty trivial:\n\n<ul>\n<li>Replace ConnectorProfileType.RectProfile by ConnectorProfileType.Rectangular in CmdRectDuctCorners.cs.\n<li>Replace DetailLevels.Fine by ViewDetailLevel.Fine, also in CmdRectDuctCorners.cs.\n<li>Remove the references to ParameterType.TemperalExp and UnitType.UT_TemperalExp in ParameterUnitConverter.cs.\n</li></li></li></ul>\n<p>One single error remains:\n\n<p>The type 'System.Windows.Markup.IUriContext' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Xaml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' in line 73 of CmdPreviewImage.cs.\n\n<p>So I did what the man says and added the required reference, resulting in \n\n<a href=\"zip/bc_migr_2013_4.txt\">\nzero errors and 33 warnings</a>.\n\n<p>Rebuild all now succeeds, so I could in fact load and test my little baby at this point.\n\n\n<a name=\"5\"></a>\n<h4>Enumerable GeometryElement</h4>\n<p>However, since most of the warnings are caused by the obsolete GeometryElement Objects property returning a GeometryObjectArray, I decided to address that as well first.\n\n<p>The Obsolete attribute on this property actually states that \"This property will be obsolete from 2013; Call GetEnumerator() instead.\"\nStrictly taken, this is only true if I interpret \"from\" as \"after\", as far as I can tell.\n\n<p>The fix is very simple and reduces the number of lines of code, since the GeometryElement class is now in itself enumerable.\nHere is a code snippet from CmdSlabBoundary.cs using the obsolete Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n\n  <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>This can now be replaced by a shorter version iterating over the geometry element itself directly, like this:\n \n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>Put differently, we used to access a GeometryObjectArray containing the geometry objects from the geometry element using its Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objs = ge.Objects; <span class=\"green\">// 2012</span>\n</pre>\n<p>Nowadays, the geometry element itself is an enumeration of the contained objects, and derived from the appropriate interface to access them:\n\n<pre class=\"code\">\n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; objs = ge; <span class=\"green\">// 2013</span>\n</pre>\n<p>I did not replace the use of the Objects property in those places that query the number of elements contained, since the new enumerator interface does not return that information directly, whereas the GeometryObjectArray provides a Size property returning the total count of collection members.\n\n<p>After this cleanup, I am left with \n\n<a href=\"zip/bc_migr_2013_5.txt\">\nzero errors and 13 warnings</a>,\n\nwhich I am happy to live with for the moment, since I have other things to do besides this.\n\n\n\n<a name=\"6\"></a>\n<h4>Updated Group and Ungroup Methods</h4>\n<p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Enumerable GeometryElement",
    "local_header_href": "#enumerable-geometryelement",
    "chunk_text": "<h4>Enumerable GeometryElement</h4><p>However, since most of the warnings are caused by the obsolete GeometryElement Objects property returning a GeometryObjectArray, I decided to address that as well first.\n\n<p>The Obsolete attribute on this property actually states that \"This property will be obsolete from 2013; Call GetEnumerator() instead.\"\nStrictly taken, this is only true if I interpret \"from\" as \"after\", as far as I can tell.\n\n<p>The fix is very simple and reduces the number of lines of code, since the GeometryElement class is now in itself enumerable.\nHere is a code snippet from CmdSlabBoundary.cs using the obsolete Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n\n  <span class=\"teal\">GeometryObjectArray</span> objects = geo.Objects;\n\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>This can now be replaced by a shorter version iterating over the geometry element itself directly, like this:\n \n<pre class=\"code\">\n  <span class=\"teal\">GeometryElement</span> geo = floor.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      GetBoundary( polygons, solid );\n    }\n  }\n</pre>\n<p>Put differently, we used to access a GeometryObjectArray containing the geometry objects from the geometry element using its Objects property:\n\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objs = ge.Objects; <span class=\"green\">// 2012</span>\n</pre>\n<p>Nowadays, the geometry element itself is an enumeration of the contained objects, and derived from the appropriate interface to access them:\n\n<pre class=\"code\">\n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; objs = ge; <span class=\"green\">// 2013</span>\n</pre>\n<p>I did not replace the use of the Objects property in those places that query the number of elements contained, since the new enumerator interface does not return that information directly, whereas the GeometryObjectArray provides a Size property returning the total count of collection members.\n\n<p>After this cleanup, I am left with \n\n<a href=\"zip/bc_migr_2013_5.txt\">\nzero errors and 13 warnings</a>,\n\nwhich I am happy to live with for the moment, since I have other things to do besides this.\n\n\n\n<a name=\"6\"></a>\n<h4>Updated Group and Ungroup Methods</h4>\n<p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Updated Group and Ungroup Methods",
    "local_header_href": "#updated-group-and-ungroup-methods",
    "chunk_text": "<h4>Updated Group and Ungroup Methods</h4><p>Well, actually, since its return value is not used anywhere, it costs me little effort to replace the two calls to the obsolete Group.Ungroup method by calls to the replacement method UngroupMembers in CmdDuplicateElement.cs.\n\n<p>Oh, and in the same module, it is also easy to fix the call to the obsolete overload of NewGroup taking an ElementSet argument:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.Elements );\n</pre>\n<p>The Selection class already provides a method GetElementIds returning a collection of element ids, so we can simply plug that in instead to invoke the other overload:\n\n<pre class=\"code\">\n  <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n    uidoc.Selection.GetElementIds() );\n</pre>\n<p>Now we are down to \n\n<a href=\"zip/bc_migr_2013_6.txt\">\nzero errors and ten warnings</a>.\n\n<p>Phew.\n\n\n<a name=\"7\"></a>\n<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4>\n<p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Pre-Release Revit 2013 Version for Revit 2012 Comparison",
    "local_header_href": "#pre-release-revit-2013-version-for-revit-2012-comparison",
    "chunk_text": "<h4>Pre-Release Revit 2013 Version for Revit 2012 Comparison</h4><p>Here is \n\n<a href=\"zip/bc_13_98_0.zip\">\nversion 2013.0.98.0</a>,\n\nthe pre-release version of The Building Coder samples for Revit 2013.\nTo compare it with the last Revit 2012 release, please refer to the version 2012.0.98.0, which introduced the command\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/remove-dwf-links.html\">\nCmdRemoveDwfLinks</a>.\n\n\n<a name=\"8\"></a>\n<h4>Final Initial Revit 2013 Version</h4>\n<p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p></p>"
  },
  {
    "original_filename": "0751_bc_migr_2013",
    "header_text": "Final Initial Revit 2013 Version",
    "local_header_href": "#final-initial-revit-2013-version",
    "chunk_text": "<h4>Final Initial Revit 2013 Version</h4><p>At long last, to wrap this up, here is the final\n\n<a href=\"zip/bc_13_98_1.zip\">\nversion 2013.0.98.1</a> of \n\nThe Building Coder samples for Revit 2013.\nThe difference to the previous one is a global update of all the copyright comments from 2011 to 2012, which makes just about every single file different from the Revit 2012 version.\nI postponed this to allow for easier comparison between the last Revit 2012 version 2012.0.98.0 and the pre-release Revit 2013 version 2013.0.98.0.\n\n<p>Phew again, and enjoy.\n</p></p>"
  }
]