[
  {
    "original_filename": "1182_createlinkreference",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1182_createlinkreference",
    "header_text": "CreateLinkReference Sample Code",
    "local_header_href": "#createlinkreference-sample-code",
    "chunk_text": "<h3>CreateLinkReference Sample Code</h3><p>The\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">\nRevit 2014 API</a> introduced\n\na whole bunch of linked RVT document interaction enhancements:</p><ul>\n<li>Identifying links</li>\n<li>Obtaining linked documents</li>\n<li>Link creation</li>\n<li>Link load and unload</li>\n<li>Link path type</li>\n<li>Conversion of geometric references</li>\n<li>Room tag creation from linked rooms</li>\n<li>Picking in links</li>\n</ul><p>They all provide important and useful functionality.</p><p>Let's take a look at one of them in particular as well as another issue that just cropped up:</p><ul>\n<li><a href=\"#2\">Conversion of a geometric reference</a> in a linked RVT model</li>\n<li><a href=\"#3\">Triggering a dynamic model updater by specific element ids</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1182_createlinkreference",
    "header_text": "Conversion of a Geometric Reference in a Linked RVT Model",
    "local_header_href": "#conversion-of-a-geometric-reference-in-a-linked-rvt-model",
    "chunk_text": "<h4>Conversion of a Geometric Reference in a Linked RVT Model</h4><p>As stated in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">\nWhat's New in the Revit 2014 API</a>,\n\n\"these methods enable conversion between Reference objects that reference the contents of the link and the host, respectively:</p><ul>\n<li>Reference.LinkedElementId</li>\n<li>Reference.CreateLinkReference</li>\n<li>Reference.CreateReferenceInLink</li>\n</ul><p>This allows an application, for example, to look at the geometry in the link, find the needed face, and convert the reference to that face into a reference in the host suitable for use to place a face-based instance.\nAlso, they enable you to obtain a reference in the host (e.g. from a dimension or family) and convert it to a reference in the link, suitable for use in Element.GetGeometryObjectFromReference.\"</p><p>This functionality raised some questions, though, e.g. in the recent comments on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/selecting-a-face-in-a-linked-file.html\">\nselecting a face in a linked file</a> by\n\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/selecting-a-face-in-a-linked-file.html?cid=6a00e553e16897883301a511dae999970c#comment-6a00e553e16897883301a511dae999970c\">\nRolando</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/selecting-a-face-in-a-linked-file.html?cid=6a00e553e16897883301a73dee4fed970d#comment-6a00e553e16897883301a73dee4fed970d\">\nPaul Marsland</a>:</p><p><strong>Question:</strong> Could you please give some example code about the use of Reference.CreateLinkReference(RvtLink) to place a face based family in a linked model.</p><p><strong>Question:</strong> Like Rolando, I have been toying (unsuccessfully) with CreateLinkReference since it appeared in the API, documentation and examples of how this is implemented are virtually non existent. I would greatly appreciate a code example showing how a face based family can be attached to a face in a linked file.</p><p><strong>Answer:</strong> Here is a sample code snippet from the development team exercising this functionality.\nNote that it includes hard-coded element ids from a specific sample model that you obviously need to modify to suit your own context:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> AddFaceBasedFamilyToLinks( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">ElementId</span> alignedLinkId = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( 125929 );\n \n    <span class=\"green\">// Get symbol</span>\n \n    <span class=\"teal\">ElementId</span> symbolId = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( 126580 );\n \n    <span class=\"teal\">FamilySymbol</span> fs = doc.GetElement( symbolId )\n      <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    <span class=\"green\">// Aligned</span>\n \n    <span class=\"teal\">RevitLinkInstance</span> linkInstance = doc.GetElement(\n      alignedLinkId ) <span class=\"blue\">as</span> <span class=\"teal\">RevitLinkInstance</span>;\n \n    <span class=\"teal\">Document</span> linkDocument = linkInstance\n      .GetLinkDocument();\n \n    <span class=\"teal\">FilteredElementCollector</span> wallCollector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( linkDocument );\n \n    wallCollector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ) );\n \n    <span class=\"teal\">Wall</span> targetWall = wallCollector.FirstElement()\n      <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n \n    <span class=\"teal\">Reference</span> exteriorFaceRef\n      = <span class=\"teal\">HostObjectUtils</span>.GetSideFaces(\n        targetWall, <span class=\"teal\">ShellLayerType</span>.Exterior )\n          .First&lt;<span class=\"teal\">Reference</span>&gt;();\n \n    <span class=\"teal\">Reference</span> linkToExteriorFaceRef\n      = exteriorFaceRef.CreateLinkReference(\n        linkInstance );\n \n    <span class=\"teal\">Line</span> wallLine = ( targetWall.Location\n      <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span> ).Curve <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n \n    <span class=\"teal\">XYZ</span> wallVector = ( wallLine.GetEndPoint( 1 )\n      - wallLine.GetEndPoint( 0 ) ).Normalize();\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      t.Start( <span class=\"maroon\">\"Add to face\"</span> );\n \n      doc.Create.NewFamilyInstance(\n        linkToExteriorFaceRef, <span class=\"teal\">XYZ</span>.Zero,\n        wallVector, fs );\n \n      t.Commit();\n    }\n  }\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "1182_createlinkreference",
    "header_text": "How to Trigger a Dynamic Model Updater by Specific Element Ids",
    "local_header_href": "#how-to-trigger-a-dynamic-model-updater-by-specific-element-ids",
    "chunk_text": "<h4>How to Trigger a Dynamic Model Updater by Specific Element Ids</h4><p><strong>Question:</strong> Is it possible to create an IUpdater triggered by changes to specific elements?\nOr, in other words, is there a way to make an ElementFilter that only passes a predefined list of element ids?</p><p><strong>Answer:</strong> This query is actually answered by a brief glance at the basic IUpdater documentation:</p><p>All updaters are activated based on triggers, defined by calling one of the\n\n<a href=\"http://revitapisearch.com/html/018aac7e-0c20-c988-b6ab-f592d61a4772.htm\">\noverloads of the UpdaterRegistry.AddTrigger method</a>.</p><p>They all take an ElementFilter argument specifying what criteria the modified elements need to fulfil in order to trigger the event.</p><p>The element filter can be as specific as you like, e.g. be based on a list of element ids, a single element id, etc., as you can see from the list of\n\n<a href=\"http://help.autodesk.com/view/RVT/2014/ENU/?guid=GUID-97F6B396-94D0-4BEC-A4CE-206D24C9F56D\">ElementFilter constructors</a>.</p><p>The situation where an updated is triggered by changes to one single specific element defined by its element id is illustrated by the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/associative-section-view-fix.html#2\">\nDynamicModelUpdate AssociativeSection SDK sample</a>.</p><p>Here is an overview of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.31\">\nother discussions on the Dynamic Model Updater framework</a>.</p>"
  }
]