[
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\nAuto-run a #RevitAPI add-in for @AutodeskForge Design Automation for @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/autorun4da4r\n\nStill at the Forge Accelerator in Rome and looking further into\nthe Forge Design Automation API for Revit.\nAlthpough it is not yet available or documented, you can still start preparing your add-in for the day when it comes\n&ndash; Aspects to consider\n&ndash; Accessing the Revit <code>Application</code> object\n&ndash; DB application add-in manifest\n&ndash; Next steps...\n\n-->"
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Auto-Run an Add-In for Design Automation",
    "local_header_href": "#auto-run-an-add-in-for-design-automation",
    "chunk_text": "### Auto-Run an Add-In for Design Automation\n\nStill at the Forge Accelerator in Rome and looking further into\nthe [Forge](https://autodesk-forge.github.io)\n[Design Automation API](https://forge.autodesk.com/en/docs/design-automation/v2/overview) for Revit.\n\nAs mentioned yesterday, it is not yet available or documented, except to a closely restricted private beta.\nFor more information on its current status, please refer to\n[Mikako Harada's discussion of Design Automation for Revit](https://fieldofviewblog.wordpress.com/revit).\n\nHowever, you can stiil start preparing your add-in for the day when it comes:\n\n- [Aspects to consider](#2) \n- [Implementing DB application and accessing the Revit `Application` object](#3) \n- [DB application add-in manifest](#4) \n- [Next steps](#5)\n- [Download](#6)"
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "<a name=\"2\"></a> Aspects to Consider",
    "local_header_href": "#a-name2a-aspects-to-consider",
    "chunk_text": "#### <a name=\"2\"></a> Aspects to Consider\n\nHere are some aspects to consider:\n\n- No user interface\n- Ensure that no warnings are displayed <!-- <br/>&ndash; done, cf. yesterday's discussion on [swallowing StairsAutomation warnings](http://thebuildingcoder.typepad.com/blog/2018/09/swallowing-stairsautomation-warnings.html) -->\n- No references to RevitAPIUI, Windows Forms, or other user interface related assemblies\n- Driven automatically with input received via JSON files and model path of RVT document to process\n- The app is responsible for opening the model itself\n\nYesterday, as a first example step,\nwe [modified the StairsAutomations sample to avoid displaying any warnings](http://thebuildingcoder.typepad.com/blog/2018/09/swallowing-stairsautomation-warnings.html),\nso the second item listed above is handled.\n\nToday, we'll address most of the remaining ones:\n\nWe'll move the execution away from an external command and trigger it from the `ApplicationInitialized` event instead.\n\nIn fact, we'll entirely remove all references to `RevitAPIUI.dll`.\n\nWe'll also open the model file ourselves.\n\nIn Forge, a different system will be used, so you cannot later use the `ApplicationInitialized` event there.\nDesign Automation for Revit continues doing setup past the point at which `ApplicationInitialized` is raised.\nFor the time being, though, we can use it to just mimic the 'run automatically' behaviour."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "<a name=\"3\"></a> Implementing DB Application and Accessing the Revit Application Object",
    "local_header_href": "#a-name3a-implementing-db-application-and-accessing-the-revit-application-object",
    "chunk_text": "#### <a name=\"3\"></a> Implementing DB Application and Accessing the Revit Application Object\n\nThe trickiest step for me was finding out how to access the Revit `Application` object using only the `IExternalDBApplication` interface, because that is apparently not documented anywhere at all.\n\nI finally found the solution in a previous blog post\non [automatically opening a project on start-up](http://thebuildingcoder.typepad.com/blog/2015/03/automatically-open-a-project-on-startup.html) &ndash;\nthe `sender` argument passed in to the `ApplicationInitialized` can be cast to `Application`.\n\nThat enables me to implement the entirely UI-independent DB application to drive the stairs creation utility class like this:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">using</span>&nbsp;System;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB.Events;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.ApplicationServices;\n \n<span style=\"color:blue;\">namespace</span>&nbsp;Revit.SDK.Samples.StairsAutomation.CS\n{\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Implement&nbsp;the&nbsp;Revit&nbsp;add-in&nbsp;IExternalDBApplication&nbsp;interface</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">DbApp</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IExternalDBApplication</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_model_path&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;C:/a/vs/StairsAutomation/CS/Stairs_automation_2019_1.rvt&quot;</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;The&nbsp;implementation&nbsp;of&nbsp;the&nbsp;automatic&nbsp;stairs&nbsp;creation.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;Execute(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;document&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;an&nbsp;automation&nbsp;utility&nbsp;with&nbsp;a&nbsp;hardcoded&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;stairs&nbsp;configuration&nbsp;number</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">StairsAutomationUtility</span>&nbsp;utility\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">StairsAutomationUtility</span>.Create(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document,&nbsp;stairsConfigs[stairsIndex]&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Generate&nbsp;the&nbsp;stairs</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;utility.GenerateStairs();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++stairsIndex;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;stairsIndex&nbsp;&gt;&nbsp;4&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stairsIndex&nbsp;=&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnApplicationInitialized(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">object</span>&nbsp;sender,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ApplicationInitializedEventArgs</span>&nbsp;e&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Sender&nbsp;is&nbsp;an&nbsp;Application&nbsp;instance:</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;=&nbsp;sender&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Application</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;app.OpenDocumentFile(&nbsp;_model_path&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;doc&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">InvalidOperationException</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Could&nbsp;not&nbsp;open&nbsp;document.&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Execute(&nbsp;doc&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDBApplicationResult</span>&nbsp;OnStartup(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ControlledApplication</span>&nbsp;a&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;ApplicationInitialized&nbsp;cannot&nbsp;be&nbsp;used&nbsp;in&nbsp;Forge!</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.ApplicationInitialized&nbsp;+=&nbsp;OnApplicationInitialized;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDBApplicationResult</span>.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDBApplicationResult</span>&nbsp;OnShutdown(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ControlledApplication</span>&nbsp;a&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDBApplicationResult</span>.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;stairsIndex&nbsp;=&nbsp;0;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;stairsConfigs&nbsp;=&nbsp;{&nbsp;0,&nbsp;3,&nbsp;4,&nbsp;1,&nbsp;2&nbsp;};\n&nbsp;&nbsp;}\n}\n</pre>\n\nNote the absence of all references to the `Autodesk.Revit.UI` namespace."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "<a name=\"4\"></a> DB Application Add-In Manifest",
    "local_header_href": "#a-name4a-db-application-add-in-manifest",
    "chunk_text": "#### <a name=\"4\"></a> DB Application Add-In Manifest\n\nNow that we implement no external command, Revit complains that no external command is found:\n\n<center>\n<img src=\"img/external_command_not_found.png\" alt=\"External command not found\" width=\"366\">\n</center>\n\nThat makes perfect sense, of course.\n\nWe need to adapt the add-in manifest and inform Revit that we are loading a DB application instead.\n\nAs an external application, it requires a `Name` node:\n\n<center>\n<img src=\"img/external_application_requires_name_node.png\" alt=\"External application requires a Name node\" width=\"369\">\n</center>\n\nWe end up with the following add-in manifest file:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">&lt;?</span><span style=\"color:#a31515;\">xml</span><span style=\"color:blue;\">&nbsp;</span><span style=\"color:red;\">version</span><span style=\"color:blue;\">=</span>&quot;<span style=\"color:blue;\">1.0</span>&quot;<span style=\"color:blue;\">&nbsp;</span><span style=\"color:red;\">encoding</span><span style=\"color:blue;\">=</span>&quot;<span style=\"color:blue;\">utf-8</span>&quot;<span style=\"color:blue;\">?&gt;</span>\n<span style=\"color:blue;\">&lt;</span><span style=\"color:#a31515;\">RevitAddIns</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">AddIn</span><span style=\"color:blue;\">&nbsp;</span><span style=\"color:red;\">Type</span><span style=\"color:blue;\">=</span>&quot;<span style=\"color:blue;\">DBApplication</span>&quot;<span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">Assembly</span><span style=\"color:blue;\">&gt;</span>StairsAutomation.dll<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">Assembly</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">ClientId</span><span style=\"color:blue;\">&gt;</span>4ce08562-a2e1-4cbf-816d-4923e1363a21<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">ClientId</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">FullClassName</span><span style=\"color:blue;\">&gt;</span>Revit.SDK.Samples.StairsAutomation.CS.DbApp<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">FullClassName</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">Name</span><span style=\"color:blue;\">&gt;</span>StairsAutomation<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">Name</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">Description</span><span style=\"color:blue;\">&gt;</span>A&nbsp;utility&nbsp;sample&nbsp;that&nbsp;creates&nbsp;a&nbsp;series&nbsp;of&nbsp;stairs,&nbsp;stairs&nbsp;runs&nbsp;and&nbsp;stairs&nbsp;landings&nbsp;configurations&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;based&nbsp;upon&nbsp;predefined&nbsp;rules&nbsp;and&nbsp;parameters.<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">Description</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;</span><span style=\"color:#a31515;\">VendorId</span><span style=\"color:blue;\">&gt;</span>ADSK<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">VendorId</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&nbsp;&nbsp;&lt;/</span><span style=\"color:#a31515;\">AddIn</span><span style=\"color:blue;\">&gt;</span>\n<span style=\"color:blue;\">&lt;/</span><span style=\"color:#a31515;\">RevitAddIns</span><span style=\"color:blue;\">&gt;</span>\n</pre>"
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "<a name=\"5\"></a> Next Steps",
    "local_header_href": "#a-name5a-next-steps",
    "chunk_text": "#### <a name=\"5\"></a> Next Steps\n\nThere is not much more left to do now, really.\n\nThese are all that come to mind off-hand:\n\n- Save the resulting model\n- Do we need to shut down Revit when we are done?\n- Read the required stair configuration from a JSON input file\n- Test in the real Forge environment\n\nThe first three we can address right away..."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "<a name=\"6\"></a> Download",
    "local_header_href": "#a-name6a-download",
    "chunk_text": "#### <a name=\"6\"></a> Download\n\nOops, I almost forgot:\nYou can download the modified SDK sample and examine every step I took in modifying it so far from and in\nthe [StairsAutomation GitHub repository](https://github.com/jeremytammik/StairsAutomation).\n\n\n<!--\n<hr/>"
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "How to convert your addin to work with Design Automation for Revit",
    "local_header_href": "#how-to-convert-your-addin-to-work-with-design-automation-for-revit",
    "chunk_text": "# How to convert your addin to work with Design Automation for Revit\n\nThank you so much for participating in our beta! This is our current documentation on how to get started. This documentation is also something for which we are seeking feedback, so don't hesitate to e-mail or talk to us on Slack as things don't work or don't make sense."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Start with a small subset of your code",
    "local_header_href": "#start-with-a-small-subset-of-your-code",
    "chunk_text": "## Start with a small subset of your code\n\nYou'll want to start with a single operation. Converting an External Command may be a good idea."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Referencing the DesignAutomationBridge DLL",
    "local_header_href": "#referencing-the-designautomationbridge-dll",
    "chunk_text": "## Referencing the DesignAutomationBridge DLL\n\nDownload the `DesignAutomationBridge.dll` and add it as a dependency for your project."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Convert your IExternalApplication or IExternalCommand to IExternalDBApplication",
    "local_header_href": "#convert-your-iexternalapplication-or-iexternalcommand-to-iexternaldbapplication",
    "chunk_text": "## Convert your IExternalApplication or IExternalCommand to IExternalDBApplication\n\nYou won't be adding any buttons or ribbon commands, since there won't be any UI interaction. \n\nYou will need to implement `OnStartup` and `OnShutdown`. These functions will get a `ControlledApplication` instead of a `UIControlledApplication`. The functions return an `ExternalDBApplicationResult` object. \n\n    using Autodesk.Revit.ApplicationServices;\n    using Autodesk.Revit.DB;\n    using DesignAutomationFramework;\n    namespace DeleteWalls\n    {    \n      [Autodesk.Revit.Attributes.Regeneration(Autodesk.Revit.Attributes.RegenerationOption.Manual)]\n      [Autodesk.Revit.Attributes.Transaction(Autodesk.Revit.Attributes.TransactionMode.Manual)]\n      public class DeleteWallsApp : IExternalDBApplication\n      {\n        public ExternalDBApplicationResult OnStartup(Autodesk.Revit.ApplicationServices.ControlledApplication app)\n        {\n          return ExternalDBApplicationResult.Succeeded;\n        }\n  \n        public ExternalDBApplicationResult OnShutdown(Autodesk.Revit.ApplicationServices.ControlledApplication app)\n        {\n          return ExternalDBApplicationResult.Succeeded;\n        }\n      }\n    }\n\nThe .addin file can go in the normal place, but the addin type is `DBApplication`.\n\n- Don't include references to RevitAPIUI! (Don't include WPF or Windows Forms or anything either, but we do not currently have a way to check this.) There's no UI interaction, so anything that pops up a dialog expecting user input will hang the system."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Add a reference to DesignAutomationBridge.dll and add an event handler for DesignAutomationReady",
    "local_header_href": "#add-a-reference-to-designautomationbridgedll-and-add-an-event-handler-for-designautomationready",
    "chunk_text": "## Add a reference to DesignAutomationBridge.dll and add an event handler for DesignAutomationReady\n\nAdd a reference `DesignAutomationBridge.dll`.  \n\n> For a C# project in Visual Studio, this is done by opening the Solution Explorer, finding your C# project, expanding its contents, right-clicking on the References node and doing “Add Reference…”  \n> In the Reference Manager dialog, use the “Browse…” button to browse to DesignAutomationBridge.dll.  Click “Add” and then “OK” to add the reference to your project.\n\nThe `DesignAutomationBridge` defines an event `DesignAutomationReadyEvent`. Revit's engine will raise this event when it's ready for you to run your addin. You should execute your code inside the event handler. \n\n    public class DeleteWallsApp : IExternalDBApplication\n    {\n      public ExternalDBApplicationResult OnStartup(Autodesk.Revit.ApplicationServices.ControlledApplication app)\n      {\n        DesignAutomationBridge.DesignAutomationReadyEvent += HandleDesignAutomationReadyEvent;\n        return ExternalDBApplicationResult.Succeeded;\n      } \n      public void HandleDesignAutomationReadyEvent(object sender, DesignAutomationReadyEventArgs e)\n      {\n        e.Succeeded = true;\n        DeleteAllWalls(e.DesignAutomationData);\n      }\n    }\n\nThe event will give you a path `DesignAutomationData.MainModelPath` to the \"main\" model indicated in the WorkItem's arguments. (We do not pre-open this model for you.) There is also a success/failure argument `DesignAutomationReadyEventArgs.Succeeded` you should set; it will let the service know whether potential failures happened in your code or elsewhere. \n\nAny files you load or create should be put into the working directory. On the cloud your write access is limited to the working directory and its children."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Handle failures encountered by Revit",
    "local_header_href": "#handle-failures-encountered-by-revit",
    "chunk_text": "## Handle failures encountered by Revit\n\nA fundamental feature in Revit is how warnings and errors (collectively referred to as \"failures\") are handled.  Understand your options for [handling failures](../FailureProcessor/) in Revit and implement a failure handling strategy in your application."
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Check that it works locally",
    "local_header_href": "#check-that-it-works-locally",
    "chunk_text": "## Check that it works locally\n\nWe are currently working on an application which will make testing more convenient. However, we have provided an alternate way of testing:"
  },
  {
    "original_filename": "1690_convert_addin_da4r",
    "header_text": "Handling Revit's `ApplicationInitialized` Event",
    "local_header_href": "#handling-revits-applicationinitialized-event",
    "chunk_text": "#### Handling Revit's `ApplicationInitialized` Event\n\nDon't use this event on the cloud, because Design Automation for Revit continues doing setup past the point at which `ApplicationInitialized` is raised. Locally it should mimic the \"run automatically\" behavior. For example, in `DeleteWalls`, we can do this:\n\n    public class DeleteWallsApp : IExternalDBApplication\n    {\n      public ExternalDBApplicationResult OnStartup(Autodesk.Revit.ApplicationServices.ControlledApplication app)\n      {\n        //Stop handling the event used by jobs on the cloud:\n        //DesignAutomationBridge.DesignAutomationReadyEvent += HandleDesignAutomationReadyEvent;\n        // And instead execute the code when desktop Revit is initialized.\n        app.ApplicationInitialized += HandleApplicationInitializedEvent;\n        return ExternalDBApplicationResult.Succeeded;\n      }\n      \n      //public void HandleDesignAutomationReadyEvent(object sender, DesignAutomationReadyEventArgs e)\n      //{\n      //  e.Succeeded = true;\n      //  DeleteAllWalls(e.DesignAutomationData);\n      //}\n      \n      public void HandleApplicationInitializedEvent(object sender, Autodesk.Revit.DB.Events.ApplicationInitializedEventArgs e)\n      {\n        Autodesk.Revit.ApplicationServices.Application app = sender as Autodesk.Revit.ApplicationServices.Application;\n        // We don't need to provide the file\n        DesignAutomationData data = new DesignAutomationData(app, \"/path/to/file.rvt\");\n        DeleteAllWalls(data);\n      }\n    }\n\nAdditionally, we must provide the .addin file to Revit. We added [this addin file](../DeleteWalls/DeleteWallsApp/DeleteWalls.addin) to `C:\\ProgramData\\Autodesk\\Revit\\Addins\\2018\\` (or `2019` if the target is Revit 2019) and changed `<Assembly>` to point to our DLL:\n\n- &lt;Assembly&gt;C:\\test\\DeleteWalls\\DeleteWallsTest\\bin\\Debug\\DeleteWalls.dll&lt;/Assembly&gt;\n\nThis way, we are able to run this locally without any UI intervention on Revit startup. See [this guide](http://usa.autodesk.com/adsk/servlet/index?siteID=123112&id=20132893) on debugging.\n\n**Note:** Your application cannot use the network, or write to any files outside of the current working directory. Restrictions on Design Automation for Revit can be found [here](QuotasAndRestrictions.md).\n-->"
  }
]