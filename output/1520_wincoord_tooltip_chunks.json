[
  {
    "original_filename": "1520_wincoord_tooltip",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n- 12593692 [mouse hover event]\n  https://github.com/jeremytammik/WinTooltip\n\n#RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge\n\nI revisited the custom tooltip implementation that I prepared to demonstrate the Revit 2013 API features including the View API and its <code>UIView</code> class. It class still provides the only possibility to convert back and forth between Revit model coordinates and Windows device screen points. That functionality can be combined with the <code>ReferenceIntersector</code> to shoot a ray through the model to determine what Revit database element is located under the current cursor position and display a custom tooltip presenting information about it or anything else you please...\n\n&ndash; ...\n\n#AULondon, #UI, #innovation, #RevitAPI, @AutodeskRevit\n\n\n-->"
  },
  {
    "original_filename": "1520_wincoord_tooltip",
    "header_text": "UIView Windows Coordinate Ray Casting Tooltip",
    "local_header_href": "#uiview-windows-coordinate-ray-casting-tooltip",
    "chunk_text": "### UIView Windows Coordinate Ray Casting Tooltip\n\nI was prompted by a recent Revit API support case to revisit the custom tooltip implementation that I prepared to demonstrate the Revit 2013 API features including the View API and its `UIView` class.\n\nAs far as I know, the `UIView` class still provides the only possibility to convert back and forth between Revit model coordinates and Windows device screen points.\n\nThat functionality can be combined with the `ReferenceIntersector` to shoot a ray through the model to determine what Revit database element is located under the current cursor position and display a custom tooltip presenting information about it or anything else you please.\n\nI explained the principles of doing so and the nitty-gritty implementation details of the `WinTooltip` sample add-in back in 2012:\n\n- [UIView and Windows Device Coordinates](http://thebuildingcoder.typepad.com/blog/2012/06/uiview-and-windows-device-coordinates.html)\n- [UIView, Windows Coordinates, ReferenceIntersector and My Own Tooltip](http://thebuildingcoder.typepad.com/blog/2012/10/uiview-windows-coordinates-referenceintersector-and-my-own-tooltip.html)\n\nHosted on GitHub and migrated to Revit 2017, [WinTooltip](https://github.com/jeremytammik/WinTooltip) now\ndisplays Revit database element information in a very rough custom tooltip like this:\n\n<center>\n<img src=\"img/wintooltip_2017_single.png\" alt=\"WinTooltip custom tooltip in Revit\" width=\"238\"/>\n</center>\n\nIf you are lucky, WinTooltip and Revit will agree on what element you are pointing at and both display information about the same item simultaneously:\n\n<center>\n<img src=\"img/wintooltip_2017_duplicate.png\" alt=\"Simultaneous Revit and WinTooltip tooltips\" width=\"302\"/>\n</center>\n\nBy the way, you might be surprised what minimal modifications were required for the migration.\n\nThe code was not modified at all.\n\nI only changed the .NET framework version, updated the Revit API references\nand [eliminated the architecture mismatch warning using `DisableMismatchWarning.exe`](http://thebuildingcoder.typepad.com/blog/2014/09/architecture-mismatch-warning-disabler-update.html).\n\nYou can examine the exact changes made by looking at the GitHub diffs:\n\n- [Update Revit API references](https://github.com/jeremytammik/WinTooltip/compare/2013.0.0.0...2017.0.0.0)\n- [Remove architecture mismatch warning messages](https://github.com/jeremytammik/WinTooltip/compare/2017.0.0.0...2017.0.0.1)\n\nPlease note that several important improvements on handling the `Idling` event properly that have been learned since 2012 have <b><i>not</i></b> been incorporated into this sample.\n\nFor more information about those, especially the recommendation\nto [avoid `Idling` in favour of external events except for one-off calls](http://thebuildingcoder.typepad.com/blog/2013/12/replacing-an-idling-event-handler-by-an-external-event.html),\nplease refer to The Building Coder topic group\non [`Idling` and external events for modeless access and driving Revit from outside](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.28).\n\nIn its current form, WinTooltip for Revit 2017 is still just a flat migration of the original Revit 2013 implementation with all its flaws, just as a proof of concept, and not suitable for production use.\n\nI hope you find it interesting and useful despite this caveat.\n\nCheck it out in its new [WinTooltip GitHub repository](https://github.com/jeremytammik/WinTooltip)."
  }
]