[
  {
    "original_filename": "1234_setout_points",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1234_setout_points",
    "header_text": "Concrete Setout Points for Revit Structure 2015",
    "local_header_href": "#concrete-setout-points-for-revit-structure-2015",
    "chunk_text": "<h3>Concrete Setout Points for Revit Structure 2015</h3><p>I was prompted by a Revit API forum discussion thread on\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/jeremy-s-setoutpoint/m-p/5376217\">Jeremy's setoutpoint</a> to\n\ntake another look at my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/structural-concrete-setout-point-add-in.html\">\nSetoutPoints structural concrete setout point add-in</a>,\n\npublish it on GitHub and migrate it from Revit Structure 2013 to 2015.</p><p>SetoutPoints is a Revit add-in for automatic placement and management of structural concrete setout points.</p><p>Setout point markers are automatically generated at all vertices of structural members.\nThey can be manually designated as minor or major:</p><center>\n<img alt=\"Minor and major structural concrete setout points\" src=\"img/setout_points_7.png\" width=\"285\"/>\n</center><p>The major points are automatically numbered, scheduled and converted to global northing and easting coordinates.</p><p>The numbering can be edited and regenerated to ensure schedule consistency and readability.</p><p>Here is a collection on background and further reading on this project:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/structural-concrete-setout-point-add-in.html\">Detailed description</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-devlab.html\">Original implementation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/basic-file-info-and-rvt-file-version.html\">Commercial use</a></li>\n<li><a href=\"http://forums.autodesk.com/t5/revit-api/jeremy-s-setoutpoint/m-p/5372337\">Discussion thread</a></li>\n</ul><p>Sanjaymann took a look at this project, encountering and solving a transformation issue with some structural foundations:</p><p><strong>Question:</strong> I was working with the setoutpoint example on structural foundations.\nThe code places the points on one foundation but not on the other.\nBoth of them are same family.</p><p>While debugging, the only difference that I saw was that in the case of the first foundation, the code directly retrieves a solid in the GetSolid function; in the case of the second one, it retrieves a geometry instance instead:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Retrieve the first non-empty solid found for </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the given element. In case the element is a </span>\n  <span class=\"gray\">///</span><span class=\"green\"> family instance, it may have its own non-empty</span>\n  <span class=\"gray\">///</span><span class=\"green\"> solid, in which case we use that. Otherwise we </span>\n  <span class=\"gray\">///</span><span class=\"green\"> search the symbol geometry. If we use the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> symbol geometry, we have to keep track of the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> instance transform to map it to the actual</span>\n  <span class=\"gray\">///</span><span class=\"green\"> instance project location.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">Solid</span> GetSolid(\n    <span class=\"teal\">Element</span> e,\n    <span class=\"teal\">Options</span> opt,\n    <span class=\"blue\">out</span> <span class=\"teal\">Transform</span> t )\n  {\n    <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n    <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n    <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n    t = <span class=\"teal\">Transform</span>.Identity;\n \n    <span class=\"green\">// Some columns have no solids, and we have to </span>\n    <span class=\"green\">// retrieve the geometry from the symbol; </span>\n    <span class=\"green\">// others do have solids on the instance itself </span>\n    <span class=\"green\">// and no contents in the instance geometry </span>\n    <span class=\"green\">// (e.g. in rst_basic_sample_project.rvt).</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      t = inst.Transform;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n    <span class=\"blue\">return</span> solid;\n  }\n</pre><p>As said, both foundations belong to the same family.\nWhy do they behave so differently?</p><p><strong>Answer:</strong> The difference may be caused by the fact that one foundation can use the unmodified family symbol geometry, whereas the other one needs some kind of instance specific modification, and therefore cannot use the unmodified symbol geometry.\nDoes that make sense?</p><p><strong>Response:</strong> Sometimes the sword fails and the needle does the job.</p><p>While looping over the corners:</p><pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n</pre><p>The point p has to be transformed:</p><pre class=\"code\">\n  <span class=\"teal\">XYZ</span> p1 = t.OfPoint( p );\n \n  <span class=\"teal\">FamilyInstance</span> fi\n    = doc.Create.NewFamilyInstance( p1,\n      symbols[1], <span class=\"teal\">StructuralType</span>.NonStructural );\n</pre><p>One line did the trick.</p><p><strong>Answer:</strong> Congratulations on finding the right needle for the job!</p><p>Thank you very much for your research!</p><p>Motivated by your work, I created a\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nGitHub repository for the SetoutPoints application</a> and\n\nmigrated it to Revit Structure 2015.</p><p>I applied the change that you suggest by adding the transformation as an 'out' parameter to the GetSolid method instead of moving the code out, cf. the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints/commit/13e134375c38573c9f45d755973359b98681db7c\">\nGitHub diffs</a>.</p><p>The updated solution for Revit 2015 with your transformation added is published in the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> and\n\nyour transformation enhancement is the content of\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints/releases/tag/2015.0.0.1\">release 2015.0.0.1</a>.</p><p>Many thanks to Sanjaymann for his interest and research!</p><p>I hope this is of interest to others as well.</p>"
  }
]