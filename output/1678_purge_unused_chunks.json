[
  {
    "original_filename": "1678_purge_unused",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\nPurge Unused in the #RevitAPI using Performance Adviser @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/purgeunused\n\nMatt Taylor of WSP shares a solution to Purge Unused using the Performance Adviser\n&ndash; <code>PurgeTool.vb</code> implements <code>GetPurgeableElements</code>\n&ndash; <code>PurgeUnused.vb</code> external command...\n\n--->"
  },
  {
    "original_filename": "1678_purge_unused",
    "header_text": "Purge Unused using Performance Adviser",
    "local_header_href": "#purge-unused-using-performance-adviser",
    "chunk_text": "### Purge Unused using Performance Adviser\n\nWe repeatedly looked at ways to detect and purge unused elements. \nA list of some previous discussions of the topic was given last time we looked\nat [purge and detecting an empty view](http://thebuildingcoder.typepad.com/blog/2017/11/purge-and-detecting-an-empty-view.html).\n\nMatt Taylor, associate and CAD developer at [WSP](https://www.wsp.com),\nwas [the first to congratulate](http://thebuildingcoder.typepad.com/blog/2018/08/ten-years-anniversary-and-revit-api-with-mvvm-wpf-and-winform.html#comment-4053631853)\non [The Building Coder's ten-year anniversary](http://thebuildingcoder.typepad.com/blog/2018/08/ten-years-anniversary-and-revit-api-with-mvvm-wpf-and-winform.html).\n\nHe now adds something really special to celebrate this:\n\n- [Purge Unused using the Performance Adviser](#2) \n- [PurgeTool.vb implements `GetPurgeableElements`](#3) \n- [PurgeUnused.vb External Command](#4) \n\n<center>\n<img src=\"img/broomstick.png\" alt=\"Broomstick\" width=\"201\"/>\n</center>"
  },
  {
    "original_filename": "1678_purge_unused",
    "header_text": "Purge Unused using the Performance Adviser",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Purge Unused using the Performance Adviser\n\nI’m sharing with you a new discovery of mine.\n \nApparently, nobody has previously publicly discovered a simple and effective way of purging all unused elements.\n\nI now found one:\n\nI have successfully used\nthe [Performance Adviser](http://help.autodesk.com/view/RVT/2019/ENU/?guid=Revit_API_Revit_API_Developers_Guide_Advanced_Topics_Performance_Adviser_html) to\ndo a similar job to the native `Purge Unused` command.\n\nPlease refer to\nmy [RevitPurgeUnused GitLab repository](https://gitlab.com/MattTaylor/RevitPurgeUnused).\n\nWhile the code will compile back to Revit 2012, it actually throws an `InternalException` for versions 2012-2016 (in my experience).\n \nIt doesn’t do a perfect job (e.g., it doesn’t purge materials and material assets), but it is very, very good, and quite fast.\n\nI also added a note of my solution to some of the existing threads on this topic in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160):\n\n- [Purge Unused Via the API](https://forums.autodesk.com/t5/revit-api-forum/purge-unused-via-the-api/m-p/8229573)\n- [CF-1201 *Purge unused objects*](https://forums.autodesk.com/t5/revit-api-forum/cf-1201-purge-unused-objects/m-p/8229574)\n  \nVery many thanks to Matt for sharing this solution to one of the top developer wish list items!"
  },
  {
    "original_filename": "1678_purge_unused",
    "header_text": "PurgeTool.vb implements GetPurgeableElements",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> PurgeTool.vb implements GetPurgeableElements\n\nHere is Matt's VB.NET code\nin [PurgeTool.vb](https://gitlab.com/MattTaylor/RevitPurgeUnused/blob/master/PurgeTool.vb),\ndefining the long-sought-after `GetPurgeableElements` method:\n\n<pre class=\"prettyprint\">\n#Region \"Imported Namespaces\"\nImports System\nImports System.Collections.Generic\nImports Autodesk.Revit.DB\n#End Region\n\nPublic Class PurgeTool\n  ''' &lt;summary&gt;\n  ''' The guid of the 'Project contains unused families and types' PerformanceAdviserRuleId.\n  ''' &lt;/summary&gt;\n  Const PurgeGuid As String = \"e8c63650-70b7-435a-9010-ec97660c1bda\"\n  \n  ''' &lt;summary&gt;\n  ''' Get all purgeable elements.\n  ''' Intended for Revit 2017+ as versions up to and including Revit 2016 throw an InternalException.\n  ''' &lt;/summary&gt;\n  ''' &lt;param name=\"doc\"&gt;&lt;/param&gt;\n  ''' &lt;param name=\"purgeableElementIds\"&gt;&lt;/param&gt;\n  ''' &lt;returns&gt;True if successful.&lt;/returns&gt;\n  Shared Function GetPurgeableElements(doc As Document, ByRef purgeableElementIds As ICollection(Of ElementId)) As Boolean\n    purgeableElementIds = New List(Of ElementId)()\n\n    Try\n      'create a new list of rules.\n      Dim ruleIds As IList(Of PerformanceAdviserRuleId) = New List(Of PerformanceAdviserRuleId)\n      Dim ruleId As PerformanceAdviserRuleId = Nothing\n      'find the intended rule.\n      If GetPerformanceAdvisorRuleId(PurgeGuid, ruleId) Then\n        'add the rule to the new list.\n        ruleIds.Add(ruleId)\n      Else\n        'cannot find rule.\n        Return False\n      End If\n      'execute our chosen rule only.\n      Dim failureMessages As IList(Of FailureMessage) = PerformanceAdviser.GetPerformanceAdviser().ExecuteRules(doc, ruleIds)\n      If failureMessages.Count &gt; 0 Then\n        'If there are any purgeable elements, we should have a failure message.\n        'the failure message should have a collection of failing elements - set to our byref collection\n        purgeableElementIds = failureMessages.Item(0).GetFailingElements\n      End If\n      'no errors - return true.\n      Return True\n    Catch ex As Autodesk.Revit.Exceptions.InternalException\n      'this exception gets thrown a lot in earlier versions of Revit - up to and including Revit 2016.\n\n    End Try\n    'likely thrown an internal exception\n    Return False\n  End Function\n  \n  ''' &lt;summary&gt;\n  ''' Find a PerformanceAdviserRuleId with a guid that matches a supplied guid.\n  ''' &lt;/summary&gt;\n  ''' &lt;param name=\"guidStr\"&gt;&lt;/param&gt;\n  ''' &lt;param name=\"ruleId\"&gt;&lt;/param&gt;\n  ''' &lt;returns&gt;true if successful, along with the rule as a byref.&lt;/returns&gt;\n  Private Shared Function GetPerformanceAdvisorRuleId(ByVal guidStr As String, ByRef ruleId As PerformanceAdviserRuleId) As Boolean\n    ruleId = Nothing\n    Dim guid As Guid = New Guid(guidStr)\n    For Each rule As PerformanceAdviserRuleId In PerformanceAdviser.GetPerformanceAdviser().GetAllRuleIds\n      'check if the rule Id matches our rule guid\n      If rule.Guid.Equals(guid) Then\n        'it does - set rule to our byref object\n        ruleId = rule\n        Return True\n      End If\n    Next\n    'failed to find the rule matching our guid.\n    Return Nothing\n  End Function\nEnd Class\n</pre>"
  },
  {
    "original_filename": "1678_purge_unused",
    "header_text": "PurgeUnused.vb External Command",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> PurgeUnused.vb External Command\n\nThe result is used like this in the external command defined \nby [PurgeUnused.vb](https://gitlab.com/MattTaylor/RevitPurgeUnused/blob/master/PurgeUnused.vb):\n\n<pre class=\"prettyprint\">\n  Dim purgeableElements As ICollection(Of ElementId) = Nothing\n  If PurgeTool.GetPurgeableElements(doc, purgeableElements) AndAlso purgeableElements.Count &gt; 0 Then\n    Using transaction As New Transaction(doc, \"Purge Unused\")\n      transaction.Start()\n      doc.Delete(purgeableElements)\n      transaction.Commit()\n      Return Result.Succeeded\n    End Using\n  Else\n    Return Result.Failed\n  End If\n</pre>"
  }
]