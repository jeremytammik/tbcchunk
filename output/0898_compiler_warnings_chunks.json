[
  {
    "original_filename": "0898_compiler_warnings",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0898_compiler_warnings",
    "header_text": "Eliminating Compiler Warnings and Deprecated Calls",
    "local_header_href": "#eliminating-compiler-warnings-and-deprecated-calls",
    "chunk_text": "<h3>Eliminating Compiler Warnings and Deprecated Calls</h3><p>I am revisiting this topic again, which we last looked at a year ago, to clean up our usage of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/eliminating-compiler-warnings-and-deprecated-calls.html\">\ndeprecated methods in the Revit 2012 API</a>.\n\n<p>In that discussion, I also pointed back to previous versions and other related issues.</p>\n<p>Here are the warnings about obsolete usage currently produced when compiling The Building Coder samples\n\n<a href=\"zip/bc_13_100_1.zip\">version 2013.0.100.1</a> against the Revit 2013 API – copy to a text editor or view source to see the truncated lines in full:</p>\n<pre>\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdTransformedCoords.cs(67,41): warning CS0618: 'Autodesk.Revit.DB.GeometryElement.Objects' is obsolete: 'This property will be obsolete from 2013; Call GetEnumerator() instead.'\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdNestedInstanceGeo.cs(119,32): warning CS0618: 'Autodesk.Revit.DB.GeometryElement.Objects' is obsolete: 'This property will be obsolete from 2013; Call GetEnumerator() instead.'\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdLinkedFiles.cs(103,41): warning CS0618: 'Autodesk.Revit.DB.GeometryElement.Objects' is obsolete: 'This property will be obsolete from 2013; Call GetEnumerator() instead.'\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdSetTagType.cs(171,19): warning CS0618: 'Autodesk.Revit.Creation.Document.NewWall(Autodesk.Revit.DB.Curve, Autodesk.Revit.DB.Level, bool)' is obsolete: 'This method is obsolete in Revit 2013. Please call a static creation method of Wall class instead.'\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdCreateGableWall.cs(89,19): warning CS0618: 'Autodesk.Revit.Creation.Document.NewWall(Autodesk.Revit.DB.CurveArray, Autodesk.Revit.DB.WallType, Autodesk.Revit.DB.Level, bool, Autodesk.Revit.DB.XYZ)' is obsolete: 'This method is obsolete in Revit 2013. Please call a static creation method of Wall class instead.'\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdPlanTopology.cs(103,26): warning CS0618: 'Autodesk.Revit.DB.PlanTopology.Rooms' is obsolete: 'This property is obsolete in Revit 2013.  Call GetRoomIds() instead.'\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdPressKeys.cs(222,19): warning CS0618: 'Autodesk.Revit.Creation.Document.NewWall(Autodesk.Revit.DB.Curve, Autodesk.Revit.DB.WallType, Autodesk.Revit.DB.Level, double, double, bool, bool)' is obsolete: 'This method is obsolete in Revit 2013. Please call a static creation method of Wall class instead.'\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdSlopedWall.cs(65,19): warning CS0618: 'Autodesk.Revit.Creation.Document.NewWall(Autodesk.Revit.DB.CurveArray, bool)' is obsolete: 'This method is obsolete in Revit 2013. Please call a static creation method of Wall class instead.'\nC:\\bc\\BuildingCoder\\BuildingCoder\\CmdSlopedWall.cs(140,19): warning CS0618: 'Autodesk.Revit.Creation.Document.NewWall(Autodesk.Revit.DB.CurveArray, Autodesk.Revit.DB.WallType, Autodesk.Revit.DB.Level, bool, Autodesk.Revit.DB.XYZ)' is obsolete: 'This method is obsolete in Revit 2013. Please call a static creation method of Wall class instead.'\n\nCompile complete -- 0 errors, 9 warnings\n</pre>\n<p>Basically, there are just three different warnings:</p>\n<ul>\n<li>The GeometryElement.Objects property is obsolete; <a href=\"#2\">GeometryElement itself is now enumerable</a>, so you can iterate directly over the instance instead of querying its obsolete property.\n<li>The creation document NewWall method is obsolete, and replaced by <a href=\"#3\">static creation methods on the Wall class</a>.\n<li>The PlanTopology.Rooms property is obsolete, and can be replaced using the <a href=\"#4\">GetRoomIds method</a>.\n</li></li></li></ul>\n<p>Let's tackle those right here and now to future-proof this guy.\n\n\n<a name=\"2\"></a>\n<h4>Enumerable GeometryElement</h4>\n<p>The first one is caused by accessing the GeometryElement.Objects property like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objects = geoElem.Objects;\n \n  n = objects.Size;\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n</pre>\n<p>The GeometryElement is now itself iterable, so the foreach loop can be implemented on geoElem itself directly, eliminating the need for the intermediate objects variable.</p>\n<p>The number of geometry objects is only used in an informational message and can be determine through the generic templated LINQ Count method:</p>\n<pre class=\"code\">\n  n = geoElem.Count&lt;<span class=\"teal\">GeometryObject</span>&gt;();\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geoElem )\n</pre>\n<p>The next two warnings are eliminated in the same way.</p>\n<a name=\"3\"></a>\n<h4>Static Creation Methods on Wall Class</h4>\n<p>We then get to the call using the creation document NewWall method:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Wall</span> wall = createDoc.NewWall(\n    line, levelBottom, <span class=\"blue\">false</span> );\n</pre>\n<p>This is simply replaced by a call to the new Wall class static Create method taking the same arguments plus the document:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Wall</span> wall = <span class=\"teal\">Wall</span>.Create(\n    doc, line, levelBottom.Id, <span class=\"blue\">false</span> );\n</pre>\n<p>The second occurence of this method in CmdCreateGableWall defines a profile for the wall.\nIt was passed in using a CurveArray instance in 2012:\n\n<pre class=\"code\">\n  <span class=\"green\">// Create wall profile</span>\n \n  <span class=\"teal\">CurveArray</span> profile = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n  <span class=\"teal\">XYZ</span> q = pts[pts.Length - 1];\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n  {\n    profile.Append( appCreation.NewLineBound(\n      q, p ) );\n \n    q = p;\n  }\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"teal\">Wall</span> wall = doc.Create.NewWall(\n    profile, wallType, level, <span class=\"blue\">true</span>, normal );\n</pre>\n<p>The Revit 2013 API eliminates the need for the custom collection class and uses a standard .NET List instead:</p>\n<pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt; profile = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt;(\n    pts.Length );\n \n  <span class=\"teal\">XYZ</span> q = pts[pts.Length - 1];\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n  {\n    profile.Add( appCreation.NewLineBound(\n      q, p ) );\n    q = p;\n  }\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"teal\">Wall</span> wall = <span class=\"teal\">Wall</span>.Create(\n    doc, profile, wallType.Id, level.Id, <span class=\"blue\">true</span>, normal );\n</pre>\n<a name=\"4\"></a>\n<h4>PlanTopology GetRoomIds Method</h4>\n<p>The PlanTopology Rooms property is obsolete and should be replaced by GetRoomIds, e.g. in the following old code in CmdPlanTopology:</p>\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Room</span> r <span class=\"blue\">in</span> pt.Rooms )\n  {\n    output += <span class=\"maroon\">\"\\n  \"</span> + r.Name + <span class=\"maroon\">\" : \"</span>\n      + <span class=\"teal\">Util</span>.RealString( r.Area ) + <span class=\"maroon\">\" sqf\"</span>;\n  }\n</pre>\n<p>Here is a possible reimplementation of that:</p>\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> pt.GetRoomIds() )\n  {\n    <span class=\"teal\">Room</span> r = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n \n    output += <span class=\"maroon\">\"\\n  \"</span> + r.Name + <span class=\"maroon\">\" : \"</span>\n      + <span class=\"teal\">Util</span>.RealString( r.Area ) + <span class=\"maroon\">\" sqf\"</span>;\n  }\n</pre>\n<p>The rest of the warnings are pointing out more calls to the obsolete NewWall method, that I converted similarly to above.</p>\n<p>Here is\n\n<a href=\"zip/bc_13_100_2.zip\">\nversion 2013.0.100.2</a> of\n\nThe Building Coder samples all deprecated API calls eliminated.\n\n<p>It also includes Victor's little\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/accessing-room-data.html?cid=6a00e553e168978833017c3690489f970b#comment-6a00e553e168978833017c3690489f970b\">\nupdate to the room retrieval</a> sample.</p>\n<p>All obsolete lines are marked with comments saying '// 2012', and their replacements are marked '// 2013'.\nIf you wish to analyse the exact differences, you can simply compare the code of this version with the\n\n<span class=\"asset asset-generic at-xid-6a00e553e168978833017d400b77ed970c\"><a href=\"http://thebuildingcoder.typepad.com/files/bc_13_100_1-1.zip\">version 2013.0.100.1</a></span> implementing\n\nthe updated\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/determine-revit-demo-mode-and-serial-number.html\">\nCmdDemoCheck command and serial number detection</a>.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0898_compiler_warnings",
    "header_text": "Enumerable GeometryElement",
    "local_header_href": "#enumerable-geometryelement",
    "chunk_text": "<h4>Enumerable GeometryElement</h4><p>The first one is caused by accessing the GeometryElement.Objects property like this:</p><pre class=\"code\">\n  <span class=\"teal\">GeometryObjectArray</span> objects = geoElem.Objects;\n \n  n = objects.Size;\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n</pre><p>The GeometryElement is now itself iterable, so the foreach loop can be implemented on geoElem itself directly, eliminating the need for the intermediate objects variable.</p><p>The number of geometry objects is only used in an informational message and can be determine through the generic templated LINQ Count method:</p><pre class=\"code\">\n  n = geoElem.Count&lt;<span class=\"teal\">GeometryObject</span>&gt;();\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geoElem )\n</pre><p>The next two warnings are eliminated in the same way.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0898_compiler_warnings",
    "header_text": "Static Creation Methods on Wall Class",
    "local_header_href": "#static-creation-methods-on-wall-class",
    "chunk_text": "<h4>Static Creation Methods on Wall Class</h4><p>We then get to the call using the creation document NewWall method:</p><pre class=\"code\">\n  <span class=\"teal\">Wall</span> wall = createDoc.NewWall(\n    line, levelBottom, <span class=\"blue\">false</span> );\n</pre><p>This is simply replaced by a call to the new Wall class static Create method taking the same arguments plus the document:</p><pre class=\"code\">\n  <span class=\"teal\">Wall</span> wall = <span class=\"teal\">Wall</span>.Create(\n    doc, line, levelBottom.Id, <span class=\"blue\">false</span> );\n</pre><p>The second occurence of this method in CmdCreateGableWall defines a profile for the wall.\nIt was passed in using a CurveArray instance in 2012:\n\n<pre class=\"code\">\n  <span class=\"green\">// Create wall profile</span>\n \n  <span class=\"teal\">CurveArray</span> profile = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n  <span class=\"teal\">XYZ</span> q = pts[pts.Length - 1];\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n  {\n    profile.Append( appCreation.NewLineBound(\n      q, p ) );\n \n    q = p;\n  }\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"teal\">Wall</span> wall = doc.Create.NewWall(\n    profile, wallType, level, <span class=\"blue\">true</span>, normal );\n</pre>\n<p>The Revit 2013 API eliminates the need for the custom collection class and uses a standard .NET List instead:</p>\n<pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt; profile = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt;(\n    pts.Length );\n \n  <span class=\"teal\">XYZ</span> q = pts[pts.Length - 1];\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n  {\n    profile.Add( appCreation.NewLineBound(\n      q, p ) );\n    q = p;\n  }\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"teal\">Wall</span> wall = <span class=\"teal\">Wall</span>.Create(\n    doc, profile, wallType.Id, level.Id, <span class=\"blue\">true</span>, normal );\n</pre>\n<a name=\"4\"></a>\n<h4>PlanTopology GetRoomIds Method</h4>\n<p>The PlanTopology Rooms property is obsolete and should be replaced by GetRoomIds, e.g. in the following old code in CmdPlanTopology:</p>\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Room</span> r <span class=\"blue\">in</span> pt.Rooms )\n  {\n    output += <span class=\"maroon\">\"\\n  \"</span> + r.Name + <span class=\"maroon\">\" : \"</span>\n      + <span class=\"teal\">Util</span>.RealString( r.Area ) + <span class=\"maroon\">\" sqf\"</span>;\n  }\n</pre>\n<p>Here is a possible reimplementation of that:</p>\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> pt.GetRoomIds() )\n  {\n    <span class=\"teal\">Room</span> r = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n \n    output += <span class=\"maroon\">\"\\n  \"</span> + r.Name + <span class=\"maroon\">\" : \"</span>\n      + <span class=\"teal\">Util</span>.RealString( r.Area ) + <span class=\"maroon\">\" sqf\"</span>;\n  }\n</pre>\n<p>The rest of the warnings are pointing out more calls to the obsolete NewWall method, that I converted similarly to above.</p>\n<p>Here is\n\n<a href=\"zip/bc_13_100_2.zip\">\nversion 2013.0.100.2</a> of\n\nThe Building Coder samples all deprecated API calls eliminated.\n\n<p>It also includes Victor's little\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/accessing-room-data.html?cid=6a00e553e168978833017c3690489f970b#comment-6a00e553e168978833017c3690489f970b\">\nupdate to the room retrieval</a> sample.</p>\n<p>All obsolete lines are marked with comments saying '// 2012', and their replacements are marked '// 2013'.\nIf you wish to analyse the exact differences, you can simply compare the code of this version with the\n\n<span class=\"asset asset-generic at-xid-6a00e553e168978833017d400b77ed970c\"><a href=\"http://thebuildingcoder.typepad.com/files/bc_13_100_1-1.zip\">version 2013.0.100.1</a></span> implementing\n\nthe updated\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/determine-revit-demo-mode-and-serial-number.html\">\nCmdDemoCheck command and serial number detection</a>.\n</p></p></p>"
  },
  {
    "original_filename": "0898_compiler_warnings",
    "header_text": "PlanTopology GetRoomIds Method",
    "local_header_href": "#plantopology-getroomids-method",
    "chunk_text": "<h4>PlanTopology GetRoomIds Method</h4><p>The PlanTopology Rooms property is obsolete and should be replaced by GetRoomIds, e.g. in the following old code in CmdPlanTopology:</p><pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Room</span> r <span class=\"blue\">in</span> pt.Rooms )\n  {\n    output += <span class=\"maroon\">\"\\n  \"</span> + r.Name + <span class=\"maroon\">\" : \"</span>\n      + <span class=\"teal\">Util</span>.RealString( r.Area ) + <span class=\"maroon\">\" sqf\"</span>;\n  }\n</pre><p>Here is a possible reimplementation of that:</p><pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> pt.GetRoomIds() )\n  {\n    <span class=\"teal\">Room</span> r = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n \n    output += <span class=\"maroon\">\"\\n  \"</span> + r.Name + <span class=\"maroon\">\" : \"</span>\n      + <span class=\"teal\">Util</span>.RealString( r.Area ) + <span class=\"maroon\">\" sqf\"</span>;\n  }\n</pre><p>The rest of the warnings are pointing out more calls to the obsolete NewWall method, that I converted similarly to above.</p><p>Here is\n\n<a href=\"zip/bc_13_100_2.zip\">\nversion 2013.0.100.2</a> of\n\nThe Building Coder samples all deprecated API calls eliminated.\n\n<p>It also includes Victor's little\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/accessing-room-data.html?cid=6a00e553e168978833017c3690489f970b#comment-6a00e553e168978833017c3690489f970b\">\nupdate to the room retrieval</a> sample.</p>\n<p>All obsolete lines are marked with comments saying '// 2012', and their replacements are marked '// 2013'.\nIf you wish to analyse the exact differences, you can simply compare the code of this version with the\n\n<span class=\"asset asset-generic at-xid-6a00e553e168978833017d400b77ed970c\"><a href=\"http://thebuildingcoder.typepad.com/files/bc_13_100_1-1.zip\">version 2013.0.100.1</a></span> implementing\n\nthe updated\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/determine-revit-demo-mode-and-serial-number.html\">\nCmdDemoCheck command and serial number detection</a>.\n</p></p>"
  }
]