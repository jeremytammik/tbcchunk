[
  {
    "original_filename": "1898_2022_job_column_inst",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- What's New in Revit 2022 Sneak Peek\n  https://youtu.be/FjSbv6W6tcg\n  Join Senior Revit Product Manager's Sasha Crotty and Harlan Brumm for a Live Preview of What's New in Revit 2022, including their favorite new features.\n\n- normalise arc start and end angle\n  How to retrieve startAngle and endAngle of Arc object\n  https://forums.autodesk.com/t5/revit-api-forum/how-to-retrieve-startangle-and-endangle-of-arc-object/m-p/10213537#M54910\n\n- the doughnut economic model is gaining official acceptnce, e.g.,\n  https://en.wikipedia.org/wiki/Doughnut_(economic_model)\n  Amsterdam bet its post-Covid recovery on ‘doughnut’ economics — more cities are now following suit\n  https://www.cnbc.com/2021/03/25/amsterdam-brussels-bet-on-doughnut-economics-amid-covid-crisis.html\n\n- create a set of column types from a list of dimensions\n  https://forums.autodesk.com/t5/revit-api-forum/create-columns-types/m-p/10181049\n\n- Automatic Column Creation from Imported CAD Drawing\n  https://forums.autodesk.com/t5/revit-api-forum/automatic-column-creation-from-imported-cad-drawing/m-p/9648240\n\n- The Object Oriented Guide to Microservices & Serverless Architecture Whitepaper\n  https://www.mongodb.com/collateral/download-the-oo-guide-to-microservices-and-serverless-architecture?utm_campaign=stack_ww_dg_flighted_overflowooguide_wp_dev&utm_source=stackoverflow&utm_medium=sponsored_newsletter\n\n- Intriguing new result from the LHCb experiment at CERN\n  https://home.cern/news/news/physics/intriguing-new-result-lhcb-experiment-cern\n  The LHCb results strengthen hints of a violation of lepton flavour universality\n  LHCb (Large Hadron Collider beauty) collaboration\n  Today the LHCb experiment at CERN announced new results which, if confirmed, would suggest hints of a violation of the Standard Model of particle physics.\n  \n  [Standard Model](https://home.cern/science/physics/standard-model)\n  The Standard Model explains how the basic building blocks of matter interact, governed by four fundamental forces.\n  The theories and discoveries of thousands of physicists since the 1930s have resulted in a remarkable insight into the fundamental structure of matter: everything in the universe is found to be made from a few basic building blocks called fundamental particles, governed by four fundamental forces. Our best understanding of how these particles and three of the forces are related to each other is encapsulated in the Standard Model of particle physics. Developed in the early 1970s, it has successfully explained almost all experimental results and precisely predicted a wide variety of phenomena. Over time and through many experiments, the Standard Model has become established as a well-tested physics theory.\n  \n  [Standard Model](https://en.wikipedia.org/wiki/Standard_Model)\n\ntwitter:\n\nA sneak peek at the new version of Revit coming soon, career opportunities, handling arc angles, solutions for automatic column type creation and instance placement in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://autode.sk/sneakpeek2022\n\nA new version of Revit coming soon, solutions for automatic column type creation and instance placement, handling arc angles, career opportunities and a sustainable economic model\n&ndash; What's new in Revit 2022 sneak peek\n&ndash; Creating column types from list\n&ndash; Normalising arc start and end angle\n&ndash; Many exciting opportunities at Autodesk\n&ndash; The sustainable doughnut economic model...\n\nlinkedin:\n\nA sneak peek at the new version of Revit coming soon, career opportunities, a sustainable economic model, handling arc angles, solutions for automatic column type creation and instance placement in the #RevitAPI \n\nhttp://autode.sk/sneakpeek2022\n\n- What's new in Revit 2022 sneak peek\n- Creating column types from list\n- Normalising arc start and end angle\n- Many exciting opportunities at Autodesk\n- The sustainable doughnut economic model...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n<p style=\"font-size: 80%; font-style:italic\">\n<a href=\"\"></a>\n</p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1898_2022_job_column_inst",
    "header_text": "Sneak Peek, Automatic Columns, Arcs Angles and Careers",
    "local_header_href": "#sneak-peek-automatic-columns-arcs-angles-and-careers",
    "chunk_text": "### Sneak Peek, Automatic Columns, Arcs Angles and Careers\n\nA new version of Revit coming soon, solutions for automatic column type creation and instance placement, handling arc angles, career opportunities and a sustainable economic model:\n\n- [What's new in Revit 2022 sneak peek](#2)\n- [Creating column types from list](#3)\n- [Normalising arc start and end angle](#4)\n- [Many exciting opportunities at Autodesk](#5)\n- [The sustainable doughnut economic model](#6)"
  },
  {
    "original_filename": "1898_2022_job_column_inst",
    "header_text": "What's New in Revit 2022 Sneak Peek",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> What's New in Revit 2022 Sneak Peek\n\nAre you interested in the new features and enhancements in the upcoming next release of Revit?\n\nTake the opportunity to join the *sneak peek on What's New in Revit 2022* later today,\non [April 6, 2021, at 21:30 CET](https://www.timeanddate.com/worldclock/converter.html?iso=20210406T193000&p1=268):\n\n- [What's New in Revit 2022 Sneak Peek](https://youtu.be/FjSbv6W6tcg)\n\nThen, register to join the Autodesk product experts for the full *What's New in Revit 2022* webinar next week,\n[April 13, 2021, at 10:00am PT, 1:00pm ET](https://www.timeanddate.com/worldclock/converter.html?iso=20210413T170000&p1=268&p2=tz_pt&p3=tz_et).\nYou can register here:\n\n- [Link to register for the full *What's New in Revit 2022* webinar on April 13](https://autode.sk/31xUn2g)\n\nHere are some other forward-looking Revit resources:\n\n- [Revit Public Roadmap](https://trello.com/b/ldRXK9Gw/revit-public-roadmap)\n- [Application to the Revit Community and the Revit Preview to try new features in advance](https://feedback.autodesk.com/key/LHMJFVHGJK085G2M)\n- [Join the Autodesk Product Research Community](https://www.autodeskproductresearch.com/hub)\n\n<center>\n<img src=\"img/2021-04-06_rvt_2022_sneak_peek.png\" alt=\"Revit 2022 sneak peek\" title=\"Revit 2022 sneak peek\" width=\"524\"/> <!-- 524 -->\n</center>"
  },
  {
    "original_filename": "1898_2022_job_column_inst",
    "header_text": "Creating Column Types from List",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Creating Column Types from List\n\nRichard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas provided\na nice complete solution to create all required column types from a list of rectangular width and height dimensions in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non how to [create columns types](https://forums.autodesk.com/t5/revit-api-forum/create-columns-types/m-p/10181049):\n\n**Question:** I have the family *M_Concrete-Rectangular-Column* and two lists of doubles that represent `b` and `h` of the column.\nHow can I extract the unique values of the two lists and then create new family types using them?\n\n**Answer:** Here is a solution in VB.NET:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">Private</span>&nbsp;<span style=\"color:blue;\">Class</span>&nbsp;<span style=\"color:#2b91af;\">ColumnType</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Inherits</span>&nbsp;EqualityComparer(<span style=\"color:blue;\">Of</span>&nbsp;ColumnType)\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Private</span>&nbsp;IntD&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>()&nbsp;=&nbsp;<span style=\"color:blue;\">New</span>&nbsp;<span style=\"color:blue;\">Integer</span>(1)&nbsp;{}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">ReadOnly</span>&nbsp;<span style=\"color:blue;\">Property</span>&nbsp;H&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Get</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;IntD(0)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Get</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Property</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">ReadOnly</span>&nbsp;<span style=\"color:blue;\">Property</span>&nbsp;W&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Get</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;IntD(1)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Get</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Property</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">ReadOnly</span>&nbsp;<span style=\"color:blue;\">Property</span>&nbsp;Name&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">String</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Get</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;<span style=\"color:blue;\">CStr</span>(H)&nbsp;&amp;&nbsp;<span style=\"color:#a31515;\">&quot;x&quot;</span>&nbsp;&amp;&nbsp;<span style=\"color:blue;\">CStr</span>(W)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Get</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Property</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Sub</span>&nbsp;<span style=\"color:blue;\">New</span>(D1&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>,&nbsp;D2&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">If</span>&nbsp;D1&nbsp;&gt;&nbsp;D2&nbsp;<span style=\"color:blue;\">Then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntD&nbsp;=&nbsp;<span style=\"color:blue;\">New</span>&nbsp;<span style=\"color:blue;\">Integer</span>()&nbsp;{D1,&nbsp;D2}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntD&nbsp;=&nbsp;<span style=\"color:blue;\">New</span>&nbsp;<span style=\"color:blue;\">Integer</span>()&nbsp;{D2,&nbsp;D1}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">If</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Sub</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Overrides</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;Equals(x&nbsp;<span style=\"color:blue;\">As</span>&nbsp;ColumnType,&nbsp;y&nbsp;<span style=\"color:blue;\">As</span>&nbsp;ColumnType)&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Boolean</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;x.H&nbsp;=&nbsp;y.H&nbsp;<span style=\"color:blue;\">AndAlso</span>&nbsp;x.W&nbsp;=&nbsp;y.W\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Overrides</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;GetHashCode(obj&nbsp;<span style=\"color:blue;\">As</span>&nbsp;ColumnType)&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;obj.Name.GetHashCode\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Class</span>\n \n&nbsp;&nbsp;<span style=\"color:blue;\">Private</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;TObj168(<span style=\"color:blue;\">ByVal</span>&nbsp;commandData&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Autodesk.Revit.UI.ExternalCommandData,\n<span style=\"color:blue;\">ByRef</span>&nbsp;message&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">String</span>,&nbsp;<span style=\"color:blue;\">ByVal</span>&nbsp;elements&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Autodesk.Revit.DB.ElementSet)&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Result\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;UIDoc&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UIDocument&nbsp;=&nbsp;commandData.Application.ActiveUIDocument\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">If</span>&nbsp;UIDoc&nbsp;<span style=\"color:blue;\">Is</span>&nbsp;<span style=\"color:blue;\">Nothing</span>&nbsp;<span style=\"color:blue;\">Then</span>&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Result.Cancelled&nbsp;<span style=\"color:blue;\">Else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;IntDoc&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Document&nbsp;=&nbsp;UIDoc.Document\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;L1&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Double</span>()&nbsp;=&nbsp;<span style=\"color:blue;\">New</span>&nbsp;<span style=\"color:blue;\">Double</span>()&nbsp;{100,&nbsp;200,&nbsp;150,&nbsp;500,&nbsp;400,&nbsp;300,&nbsp;250,&nbsp;250}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;L2&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Double</span>()&nbsp;=&nbsp;<span style=\"color:blue;\">New</span>&nbsp;<span style=\"color:blue;\">Double</span>()&nbsp;{200,&nbsp;200,&nbsp;150,&nbsp;500,&nbsp;400,&nbsp;300,&nbsp;250,&nbsp;250}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;all&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;ColumnType)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">For</span>&nbsp;i&nbsp;=&nbsp;0&nbsp;<span style=\"color:blue;\">To</span>&nbsp;L1.Length&nbsp;-&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;all.Add(<span style=\"color:blue;\">New</span>&nbsp;ColumnType(L1(i),&nbsp;L2(i)))\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Next</span>\n&nbsp;&nbsp;&nbsp;&nbsp;all&nbsp;=&nbsp;all.Distinct(<span style=\"color:blue;\">New</span>&nbsp;ColumnType(0,&nbsp;0)).ToList\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;FEC&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;FilteredElementCollector(IntDoc)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;ECF&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;ElementCategoryFilter(BuiltInCategory.OST_StructuralColumns)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;Els&nbsp;<span style=\"color:blue;\">As</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;FamilySymbol)&nbsp;=&nbsp;FEC.WherePasses(ECF).WhereElementIsElementType.Cast(<span style=\"color:blue;\">Of</span>&nbsp;FamilySymbol).ToList\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">&#39;Use&nbsp;column&nbsp;name&nbsp;here</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;Existing&nbsp;<span style=\"color:blue;\">As</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;FamilySymbol)&nbsp;=&nbsp;Els.FindAll(<span style=\"color:blue;\">Function</span>(x)&nbsp;x.FamilyName&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Concrete-Rectangular-Column&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">If</span>&nbsp;Existing.Count&nbsp;=&nbsp;0&nbsp;<span style=\"color:blue;\">Then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Result.Cancelled\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">If</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;AlreadyExists&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;ColumnType)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;ToBeMade&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;ColumnType)\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">For</span>&nbsp;i&nbsp;=&nbsp;0&nbsp;<span style=\"color:blue;\">To</span>&nbsp;all.Count&nbsp;-&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;Ix&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>&nbsp;=&nbsp;i\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;J&nbsp;<span style=\"color:blue;\">As</span>&nbsp;FamilySymbol&nbsp;=&nbsp;Existing.Find(<span style=\"color:blue;\">Function</span>(x)&nbsp;x.Name&nbsp;=&nbsp;all(Ix).Name)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">If</span>&nbsp;J&nbsp;<span style=\"color:blue;\">Is</span>&nbsp;<span style=\"color:blue;\">Nothing</span>&nbsp;<span style=\"color:blue;\">Then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToBeMade.Add(all(i))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlreadyExists.Add(all(i))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">If</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Next</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">If</span>&nbsp;ToBeMade.Count&nbsp;=&nbsp;0&nbsp;<span style=\"color:blue;\">Then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Result.Cancelled\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">If</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Using</span>&nbsp;Tr&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;Transaction(IntDoc,&nbsp;<span style=\"color:#a31515;\">&quot;Make&nbsp;types&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">If</span>&nbsp;Tr.Start&nbsp;=&nbsp;TransactionStatus.Started&nbsp;<span style=\"color:blue;\">Then</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">For</span>&nbsp;i&nbsp;=&nbsp;0&nbsp;<span style=\"color:blue;\">To</span>&nbsp;ToBeMade.Count&nbsp;-&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;Itm&nbsp;=&nbsp;ToBeMade(i)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;Et&nbsp;<span style=\"color:blue;\">As</span>&nbsp;ElementType&nbsp;=&nbsp;Existing(0).Duplicate(Itm.Name)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">&#39;Use&nbsp;actual&nbsp;type&nbsp;parameter&nbsp;names</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">&#39;Use&nbsp;GUIDs&nbsp;instead&nbsp;of&nbsp;LookupParameter&nbsp;where&nbsp;possible</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Et.LookupParameter(<span style=\"color:#a31515;\">&quot;h&quot;</span>)?.Set(304.8&nbsp;*&nbsp;Itm.H)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Et.LookupParameter(<span style=\"color:#a31515;\">&quot;b&quot;</span>)?.Set(304.8&nbsp;*&nbsp;Itm.W)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Next</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tr.Commit()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">If</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Using</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Result.Succeeded\n&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n</pre>\n\nI converted it to C#\nand [added it to The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples/compare/2021.0.150.21...2021.0.150.22) for\nfuture reference:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">ColumnType</span>&nbsp;:&nbsp;EqualityComparer&lt;ColumnType&gt;\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;_dim&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:blue;\">int</span>[&nbsp;2&nbsp;];\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;H\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">get</span>&nbsp;{&nbsp;<span style=\"color:blue;\">return</span>&nbsp;_dim[&nbsp;0&nbsp;];&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;W\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">get</span>&nbsp;{&nbsp;<span style=\"color:blue;\">return</span>&nbsp;_dim[&nbsp;1&nbsp;];&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Name\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">get</span>&nbsp;{&nbsp;<span style=\"color:blue;\">return</span>&nbsp;H.ToString()&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;x&quot;</span>&nbsp;+&nbsp;W.ToString();&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;ColumnType(&nbsp;<span style=\"color:blue;\">int</span>&nbsp;d1,&nbsp;<span style=\"color:blue;\">int</span>&nbsp;d2&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;d1&nbsp;&gt;&nbsp;d2&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_dim&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;{&nbsp;d1,&nbsp;d2&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_dim&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;{&nbsp;d2,&nbsp;d1&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">override</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;Equals(&nbsp;ColumnType&nbsp;x,&nbsp;ColumnType&nbsp;y&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;x.H&nbsp;==&nbsp;y.H&nbsp;&amp;&amp;&nbsp;x.W&nbsp;==&nbsp;y.W;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">override</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;GetHashCode(&nbsp;ColumnType&nbsp;obj&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;obj.Name.GetHashCode();\n&nbsp;&nbsp;}\n}\n \nResult&nbsp;CreateColumnTypes(&nbsp;Document&nbsp;doc&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;L1&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;{&nbsp;100,&nbsp;200,&nbsp;150,&nbsp;500,&nbsp;400,&nbsp;300,&nbsp;250,&nbsp;250&nbsp;};\n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;L2&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:blue;\">int</span>[]&nbsp;{&nbsp;200,&nbsp;200,&nbsp;150,&nbsp;500,&nbsp;400,&nbsp;300,&nbsp;250,&nbsp;250&nbsp;};\n \n&nbsp;&nbsp;List&lt;ColumnType&gt;&nbsp;all&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;ColumnType&gt;();\n \n&nbsp;&nbsp;<span style=\"color:blue;\">for</span>(&nbsp;<span style=\"color:blue;\">int</span>&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;L1.Length;&nbsp;++i&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;all.Add(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ColumnType(&nbsp;L1[&nbsp;i&nbsp;],&nbsp;L2[&nbsp;i&nbsp;]&nbsp;)&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;all&nbsp;=&nbsp;all.Distinct(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;ColumnType(&nbsp;0,&nbsp;0&nbsp;)&nbsp;).ToList();\n \n&nbsp;&nbsp;FilteredElementCollector&nbsp;symbols\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;FilteredElementCollector(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfCategory(&nbsp;BuiltInCategory.OST_StructuralColumns&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Column&nbsp;name&nbsp;to&nbsp;use</span>\n \n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;column_name&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Concrete-Rectangular-Column&quot;</span>;\n \n&nbsp;&nbsp;IEnumerable&lt;FamilySymbol&gt;&nbsp;existing&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;symbols.Cast&lt;FamilySymbol&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where&lt;FamilySymbol&gt;(&nbsp;x&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;x.FamilyName.Equals(&nbsp;column_name&nbsp;)&nbsp;);&nbsp;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;0&nbsp;==&nbsp;existing.Count()&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Result.Cancelled;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;List&lt;ColumnType&gt;&nbsp;AlreadyExists&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;ColumnType&gt;();\n&nbsp;&nbsp;List&lt;ColumnType&gt;&nbsp;ToBeMade&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;ColumnType&gt;();\n \n&nbsp;&nbsp;<span style=\"color:blue;\">for</span>(&nbsp;<span style=\"color:blue;\">int</span>&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;all.Count&nbsp;;&nbsp;++i&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;FamilySymbol&nbsp;fs&nbsp;=&nbsp;existing.FirstOrDefault(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;=&gt;&nbsp;x.Name&nbsp;==&nbsp;all[&nbsp;i&nbsp;].Name&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;fs&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ToBeMade.Add(&nbsp;all[&nbsp;i&nbsp;]&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlreadyExists.Add(&nbsp;all[&nbsp;i&nbsp;]&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;ToBeMade.Count&nbsp;==&nbsp;0&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Result.Cancelled;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;Transaction&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Transaction(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Make&nbsp;types&quot;</span>&nbsp;)&nbsp;==&nbsp;TransactionStatus.Started&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FamilySymbol&nbsp;first&nbsp;=&nbsp;existing.First();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;ColumnType&nbsp;ct&nbsp;<span style=\"color:blue;\">in</span>&nbsp;ToBeMade&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ElementType&nbsp;et&nbsp;=&nbsp;first.Duplicate(&nbsp;ct.Name&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Use&nbsp;actual&nbsp;type&nbsp;parameter&nbsp;names</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Use&nbsp;GUIDs&nbsp;instead&nbsp;of&nbsp;LookupParameter&nbsp;where&nbsp;possible</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;et.LookupParameter(&nbsp;<span style=\"color:#a31515;\">&quot;h&quot;</span>&nbsp;).Set(&nbsp;304.8&nbsp;*&nbsp;ct.H&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;et.LookupParameter(&nbsp;<span style=\"color:#a31515;\">&quot;b&quot;</span>&nbsp;).Set(&nbsp;304.8&nbsp;*&nbsp;ct.W&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;Result.Succeeded;\n}\n</pre>\n\nAn interesting aspect here is the notion of units.\nIf we were comparing internal units (fractions of feet), we could not have used the integer for comparison.\nHowever, since we assume it is mm and column sizes are rounded, we can use them easily.\n\nSo, if we take the smallest measurement of length, then we usually have less problems.\nIn an imperial example, if we had used inches, then we can compare an integer of 6 inches rather than a double 0.5 ft.\nI guess if it is 6.5 inches we are stuck.\nHowever, the mm is the smallest unit we generally work with (unless we are talking paint), so can represent smaller fractions of something as whole numbers.\n\nIt is what it is.\n\nIt would be interesting to explore intelligent rounding and unit dependent real-number fuzz.\n\nOne can well consider 1 mm the minimal metric unit in Revit, since it does not (or hardly) support smaller lengths.\n\nFor imperial sizes, I guess I would go for 1/16 of an inch.\n\nDepending on what units the model happens to prefer, one could select one or the other dynamically and implement an rounding algorithm that adapts accordingly.\n\nTalking about the creation of columns and column types, let's add a pointer to another related thread\non [automatic column creation from imported CAD drawing](https://forums.autodesk.com/t5/revit-api-forum/automatic-column-creation-from-imported-cad-drawing/m-p/9648240):\n\n<center>\n<img src=\"img/place_columns_from_cad_dwg_3.png\" alt=\"Place columns from imported 2D CAD\" title=\"Place columns from imported 2D CAD\" width=\"500\"/> <!-- 1202 -->\n</center>"
  },
  {
    "original_filename": "1898_2022_job_column_inst",
    "header_text": "Normalising Arc Start and End Angle",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Normalising Arc Start and End Angle\n\nRichard also shared some useful notes on normalising arc start and end angles in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [how to retrieve startAngle and endAngle of arc object](https://forums.autodesk.com/t5/revit-api-forum/how-to-retrieve-startangle-and-endangle-of-arc-object/m-p/10213537):\n\nWhat I've noticed recently is that the actual parameters of an arc can be far greater than 2 * pi, so how does this happen?\n\nIf you draw a detail arc and drag the ends of the arc one at a time around the circumference, the parameter values will accumulate and become greater than 2 pi (after 1 cycle).\nThey don't reset; you can effectively wind up the arc parameters this way (I discovered parameter numbers reaching 1000 degrees).\nWe could not create arcs otherwise since the creation method enforces p0 must be less than p1 and arcs are drawn anti clockwise.\nWhen you cross the 2 pi or 0 boundary, you need p1 not to be starting again from 0, otherwise it would be less than p0 on the other side of the boundary.\n\nSo, as @JimJia noted, they are not reliable for arc start end angles (or are if the ends have not been manipulated in such a way).\nHowever, in a way, you can get back to the correct angles between 0 and 2 x pi (since each rotation is a multiple of 2 x pi) i.e.\n\n- Divide by 2 * pi\n- Deduct integer part of result\n- If this is less than 0 add 1 (to negative number)\n- Multiply by 2 * pi\n\nI'm not sure why you would need to do this however.\n\nOther thing I would note is always use `Arc.XDirection` and `Arc.Normal` with `AngleOnPlaneTo` (rather than assuming), since arc can be flipped or rotated.\n\nAlso, above was related to winding the arc ends around the circumference in an anti-clockwise direction to increase parameter values.\n\nIf user drags ends around in a clockwise direction, then you get negative values for the parameters.\nTakes less movement from original by user to go into negative domain, so this is more likely to be seen perhaps.\n\nMany thanks to Richard for these helpful observations!"
  },
  {
    "original_filename": "1898_2022_job_column_inst",
    "header_text": "Many Exciting Opportunities at Autodesk",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Many Exciting Opportunities at Autodesk\n\nAutodesk is offering a many exciting career opportunities in Europe and elsewhere right now:\n\n- Software Engineering Manager &ndash; Krakow, Poland &ndash; Job ID 21WD47267\n- Construction Account Executive, Territory &ndash; Sweden, remote &ndash; Job ID 21WD47481\n- Territory Account Executive, Construction &ndash; The Netherlands &ndash; Job ID 21WD47524\n- Strategic Account Manager Manufacturing &ndash; Munich, Germany or home office &ndash; Job ID 21WD47310\n- Principal Software Engineer &ndash; Cambridge, UK &ndash; Job ID 21WD45889\n\nFeel free to ask me for a referral.\n\nGood luck applying for one of them and others all over the world in\nthe [Autodesk career site](https://www.autodesk.com/careers)!"
  },
  {
    "original_filename": "1898_2022_job_column_inst",
    "header_text": "The Sustainable Doughnut Economic Model",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> The Sustainable Doughnut Economic Model\n\nThe [doughnut economic model](https://en.wikipedia.org/wiki/Doughnut_(economic_model)) is\ngaining official acceptance.\nFor instance, [Amsterdam bet its post-Covid recovery on doughnut economics, and more cities are now following suit](https://www.cnbc.com/2021/03/25/amsterdam-brussels-bet-on-doughnut-economics-amid-covid-crisis.html).\n\n> The Doughnut, or Doughnut economics, is a visual framework for sustainable development &ndash; shaped like a doughnut or lifebelt &ndash; combining the concept of planetary boundaries with the complementary concept of social boundaries:\n\n<center>\n<img src=\"img/doughnut_economic_model.jpg\" alt=\"Doughnut economic model\" title=\"Doughnut economic model\" width=\"489\"/> <!-- 489 -->\n</center>"
  }
]