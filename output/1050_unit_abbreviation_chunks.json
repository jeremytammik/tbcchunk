[
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "Unit Abbreviations",
    "local_header_href": "#unit-abbreviations",
    "chunk_text": "<h3>Unit Abbreviations</h3><p>Today, we look at determining the units for a given parameter, and specifically providing a suitable unit abbreviation for it.</p><p>The Revit 2014 API introduced a new Unit API with a large number of enhancements to complete and simplify unit handling issues, and I have not yet explored all of them in depth.\nHere is the overview of it from\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">\nWhat's New in the Revit 2014 API</a>:</p><a name=\"0\"></a>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "Units API\nThe API for Units in Revit has been expanded and changed. The methods\n\nDocument.GetUnits()\nDocument.SetUnits()\n\nallow interaction with the units of a document.  The Units class provides access to data such as\n\nDecimalSymbol\nDigitGroupingAmount\nDigitGroupingSymbol\nFormatOptions\n\nThe FormatOptions class provides access to data including:\n\nRounding\nAccuracy\nDisplayUnits\nSuppressLeadingZeros\nSuppressTrailingZeros\nSuppressSpaces\n\nLabelUtils.GetLabelFor() has been enhanced so that it can now return the user-visible name for a UnitSymbolType.\nUnit Formatting and Parsing\nThe methods:\n\nUnitFormatUtils.FormatValueToString()\nUnitFormatUtils.TryParse()\n\nprovide the ability to format a value into a string based on formatting options and to parse a formatted string (including units) into a value if possible.\nUnit Conversion\nThe new class UnitUtils contains methods to convert between unit types:\n\nUnitUtils.Convert() – Converts a value from one unit type to another, such as square feet to square meters.\nUnitUtils.ConvertFromInternalUnits() – Converts a value from Revit's internal unit type.\nUnitUtils.ConvertToInternalUnits() – Converts a value to Revit's internal unit type.\n\nIn fact, probably very few people are aware of all the powerful functionality now available.\nThis became clear to me once again when I was prompted by this query to explore the specific aspect of retrieving or defining abbreviations for the display unit types:\n\nQuestion: How can I determine the units for a given Parameter or FamilyParameter?\nI tried to use the LabelUtils GetLabelFor method, passing in the parameter DisplayUnitType.\nThis returns the full unit name, e.g., \"Millimeters\" for DUT_MILLIMETERS.\nI would prefer something shorter, e.g. an abbreviation like \"mm\".\nHow could I achieve that, please?\nAnswer: First of all, congratulations on discovering the approach you describe.\nIt sounds like the best the way to go to me.\nThe parameter definition defines the basic unit type, e.g. simple ones like length and more complex combined ones like stress. The possible unit types are listed in the UnitType enumeration.\nThe parameter itself specifies the unit in which this data is displayed to the user, which is controlled by the unit settings, and may be set to things like ft, m or mm for length, and kg / (m · s²), ksi or MPa for stress.  The possible display unit types are listed in the DisplayUnitType enumeration.\nWe already looked at one\n\n\nunit conversion and display string formatting issue\n\nin some depth, e.g. to define the _map_parameter_type_to_unit_type mapping, the ParameterUnitConverter class and the external command CmdParameterUnitConverter included in\n\n\nThe Building Coder samples,\n\nand more recently at another\n\n\nParameter DisplayUnitType enhancement.\nThe LabelUtils class provides methods to return user-visible names for enumerations via the different overloads of the GetLabelFor method.\nThat leads to the approach you already discovered.\nIf you would like a method to return abbreviations for the display unit types instead of their full names, the most efficient approach is probably to implement your own abbreviation list.\nAlternatively, if you are clever, you can also use the Revit API functionality to automatically generate an abbreviation for you.\nI discuss those two options, implement an external command to test them, point to the download and wind up with a little gift.\n\nHow to Implement your Own Hard Coded Display Unit Type Abbreviation List\nYou can implement your own display unit type abbreviations right away and it is a very easy thing to do.\nIn fact, I went and did it for you, for the first 26 of them, at least:\n\n  /// <summary>\n  /// Hard coded abbreviations for the first 26\n  /// DisplayUnitType enumeration values.\n  /// </summary>\n  public static string[] DisplayUnitTypeAbbreviation\n    = new string[] {\n      \"m\", // DUT_METERS = 0,\n      \"cm\", // DUT_CENTIMETERS = 1,\n      \"mm\", // DUT_MILLIMETERS = 2,\n      \"ft\", // DUT_DECIMAL_FEET = 3,\n      \"N/A\", // DUT_FEET_FRACTIONAL_INCHES = 4,\n      \"N/A\", // DUT_FRACTIONAL_INCHES = 5,\n      \"in\", // DUT_DECIMAL_INCHES = 6,\n      \"ac\", // DUT_ACRES = 7,\n      \"ha\", // DUT_HECTARES = 8,\n      \"N/A\", // DUT_METERS_CENTIMETERS = 9,\n      \"y^3\", // DUT_CUBIC_YARDS = 10,\n      \"ft^2\", // DUT_SQUARE_FEET = 11,\n      \"m^2\", // DUT_SQUARE_METERS = 12,\n      \"ft^3\", // DUT_CUBIC_FEET = 13,\n      \"m^3\", // DUT_CUBIC_METERS = 14,\n      \"deg\", // DUT_DECIMAL_DEGREES = 15,\n      \"N/A\", // DUT_DEGREES_AND_MINUTES = 16,\n      \"N/A\", // DUT_GENERAL = 17,\n      \"N/A\", // DUT_FIXED = 18,\n      \"%\", // DUT_PERCENTAGE = 19,\n      \"in^2\", // DUT_SQUARE_INCHES = 20,\n      \"cm^2\", // DUT_SQUARE_CENTIMETERS = 21,\n      \"mm^2\", // DUT_SQUARE_MILLIMETERS = 22,\n      \"in^3\", // DUT_CUBIC_INCHES = 23,\n      \"cm^3\", // DUT_CUBIC_CENTIMETERS = 24,\n      \"mm^3\", // DUT_CUBIC_MILLIMETERS = 25,\n      \"l\" // DUT_LITERS = 26,\n    };\n\nNote that this a hard coded array, indexed with integer numbers.\nI am completely free to choose any abbreviation I like.\nAn integer index into the list can be obtained by casting from a DisplayUnitType enumeration value.\nThis array will only return the correct abbreviations as long as the underlying DisplayUnitType enumeration values correspond to the expected integer values.\nTherefore, I would strongly recommend you to implement some code in your application start-up that ensures that this is the case, e.g. by calling a sequence of debug assertions like the following:\n\n  const string _s = \"unexpected display unit type \"\n    + \"enumeration sequence\";\n \n  Debug.Assert( 0 == (int) DisplayUnitType.DUT_METERS, _s );\n  Debug.Assert( 1 == (int) DisplayUnitType.DUT_CENTIMETERS, _s );\n  Debug.Assert( 2 == (int) DisplayUnitType.DUT_MILLIMETERS, _s );\n\n  . . .\n\n  Debug.Assert( 26 == (int) DisplayUnitType.DUT_LITERS, _s );\n\nWouldn't it be nice to avoid this hard-coded list and this sequence of assertions?\nWell, you can!\n\nHow to Automatically Generate Display Unit Type Abbreviations Using the Revit API\nAs said, the Revit API provides a lot of unit handling functionality, and some of it is still poorly known.\nI first looked for ways extract the desired abbreviations from a value formatted to the desired unit by the FormatUtils.Format or UnitFormatUtils.Format methods.\nThey format a number with units into a string, either based on a list of input arguments or based on the units formatting settings for a given document.\nIf you set up a document to use millimetres and pass it in with the unit type UT_Length and the value 1.0, I would assume it will return the string \"1 mm\", from which you might be able to extract the desired abbreviation.\nI'll leave that as an exercise to the thus inclined reader, though, because I preferred to stick with the display unit types – with the DUT_ prefix – and completely avoid the non-display unit types – with the UT_ prefix – required by these methods.\nAfter some further digging on the Revit API help file RevitAPI.chm, I discovered the FormatOptions GetValidUnitSymbols method, which does indeed take a display unit type input argument and returns a list of valid unit symbols for it, represented by UnitSymbolType enumeration values.\nHere are the first 22 UnitSymbolType enumeration values, out of a total of about 300:\n\n  UST_NONE = 0,\n  UST_M = 1,\n  UST_CM = 101,\n  UST_MM = 201,\n  UST_LF = 301,\n  UST_FOOT_SINGLE_QUOTE = 302,\n  UST_INCH_DOUBLE_QUOTE = 601,\n  UST_ACRES = 701,\n  UST_HECTARES = 801,\n  UST_CY = 1001,\n  UST_SF = 1101,\n  UST_FT_SUP_2 = 1102,\n  UST_FT_CARET_2 = 1103,\n  UST_M_SUP_2 = 1201,\n  UST_M_CARET_2 = 1202,\n  UST_CF = 1301,\n  UST_FT_SUP_3 = 1302,\n  UST_FT_CARET_3 = 1303,\n  UST_M_SUP_3 = 1401,\n  UST_M_CARET_3 = 1402,\n  UST_DEGREE_SYMBOL = 1501,\n  UST_PERCENT_SIGN = 1901,\n  ...\n\nLooking at these enumeration values, I notice that they correspond pretty closely with the hard coded abbreviation strings that I define above.\nActually, all I have to do is replace the substring \"_SUP_\" by \"^\" and convert them to lower case to obtain an identical list.\nAccordingly, I implemented the following helper method to fulfil that task:\n\n  /// <summary>\n  /// Convert a UnitSymbolType enumeration value\n  /// to a brief human readable abbreviation string.\n  /// </summary>\n  public static string UnitSymbolTypeString(\n    UnitSymbolType u )\n  {\n    string s = u.ToString();\n \n    Debug.Assert( s.StartsWith( \"UST_\" ),\n      \"expected UnitSymbolType enumeration value \"\n      + \"to begin with 'UST_'\" );\n \n    s = s.Substring( 4 )\n      .Replace( \"_SUP_\", \"^\" )\n      .ToLower();\n \n    return s;\n  }\n \n\n\nCmdDutAbbreviation External Command to Test the Display Unit Type Abbreviations\nI added a new external command CmdDutAbbreviation to The Building Coder samples to test both versions of my new display unit type abbreviation functionality.\nIt obviously uses read-only transaction mode, since it does not interact with the Revit database in any way whatsoever.\nOmitting the list of assertions described above to verify the expected order of DisplayUnitType enumeration values, the implementation of the CmdDutAbbreviation external command mainline Execute method looks like this:\n\n  public Result Execute(\n    ExternalCommandData commandData,\n    ref string message,\n    ElementSet elements )\n  {\n    DisplayUnitType n\n      = DisplayUnitType.DUT_GALLONS_US;\n \n    Debug.Print( \"Here is a list of the first {0} \"\n      + \"display unit types with The Building Coder \"\n      + \"abbreviation and the valid unit symbols:\\n\",\n      (int) n - 1 );\n \n    string valid_unit_symbols;\n \n    for( DisplayUnitType i = DisplayUnitType\n      .DUT_METERS; i < n; ++i )\n    {\n      valid_unit_symbols = string.Join( \", \",\n        FormatOptions.GetValidUnitSymbols( i )\n          .Select<UnitSymbolType, string>(\n            u => Util.UnitSymbolTypeString( u ) ) );\n \n      Debug.Print( \"{0,6} - {1}: {2}\",\n        Util.DisplayUnitTypeAbbreviation[(int)i],\n        LabelUtils.GetLabelFor( i ),\n        valid_unit_symbols,\n        i );\n    }\n    return Result.Succeeded;\n  }\n\nFor the first 26 display unit types, it generates the following list of abbreviations from the hard coded string array and the UnitSymbolTypeString method applied to the valid unit symbols:\n\n     m - Meters: none, m\n    cm - Centimeters: none, cm\n    mm - Millimeters: none, mm\n    ft - Decimal feet: none, foot_single_quote, lf\n   N/A - Feet and fractional inches: none\n   N/A - Fractional inches: none\n    in - Decimal inches: none, inch_double_quote\n    ac - Acres: none, acres\n    ha - Hectares: none, hectares\n   N/A - Meters and centimeters: none\n   y^3 - Cubic yards: none, cy\n  ft^2 - Square feet: none, sf, ft^2\n   m^2 - Square meters: none, m^2\n  ft^3 - Cubic feet: none, cf, ft^3\n   m^3 - Cubic meters: none, m^3\n   deg - Decimal degrees: none, degree_symbol\n   N/A - Degrees minutes seconds: none\n   N/A - General: none\n   N/A - Fixed: none\n     % - Percentage: none, percent_sign\n  in^2 - Square inches: none, in^2\n  cm^2 - Square centimeters: none, cm^2\n  mm^2 - Square millimeters: none, mm^2\n  in^3 - Cubic inches: none, in^3\n  cm^3 - Cubic centimeters: none, cm^3\n  mm^3 - Cubic millimeters: none, mm^3\n     l - Liters: none, l\n\nFunnily enough, as you can see, my hand written hard coded abbreviations correspond exactly with the ones I generate automatically from the UnitSymbolType list returned by the FormatOptions GetValidUnitSymbols method.\n\nDownload\nAs you already know,\n\n\nThe Building Coder samples are on GitHub,\n\nso the most up-to-date code is available from the\n\n\nThe Building Coder samples GitHub repository.\n\nThe version discussed above is\n\n\nrelease 2014.0.105.0.\n\n\nGift\nLet me close for today with the following uplifting poem by Czeslaw Milosz (1911–2004), 1980 Nobel Prize winner in literature:\n\nGift\nA day so happy.\nFog lifted early. I worked in the garden.\nHummingbirds were stopping over the honeysuckle flowers.\nThere was no thing on earth I wanted to possess.\nI knew no one worth my envying him.\nWhatever evil I had suffered, I forgot.\nTo think that once I was the same man did not embarrass me.\nIn my body I felt no pain.\nWhen straightening up, I saw blue sea and sails.",
    "local_header_href": "#units-api-the-api-for-units-in-revit-has-been-expanded-and-changed-the-methods-documentgetunits-documentsetunits-allow-interaction-with-the-units-of-a-document-the-units-class-provides-access-to-data-such-as-decimalsymbol-digitgroupingamount-digitgroupingsymbol-formatoptions-the-formatoptions-class-provides-access-to-data-including-rounding-accuracy-displayunits-suppressleadingzeros-suppresstrailingzeros-suppressspaces-labelutilsgetlabelfor-has-been-enhanced-so-that-it-can-now-return-the-user-visible-name-for-a-unitsymboltype-unit-formatting-and-parsing-the-methods-unitformatutilsformatvaluetostring-unitformatutilstryparse-provide-the-ability-to-format-a-value-into-a-string-based-on-formatting-options-and-to-parse-a-formatted-string-including-units-into-a-value-if-possible-unit-conversion-the-new-class-unitutils-contains-methods-to-convert-between-unit-types-unitutilsconvert-converts-a-value-from-one-unit-type-to-another-such-as-square-feet-to-square-meters-unitutilsconvertfrominternalunits-converts-a-value-from-revits-internal-unit-type-unitutilsconverttointernalunits-converts-a-value-to-revits-internal-unit-type-in-fact-probably-very-few-people-are-aware-of-all-the-powerful-functionality-now-available-this-became-clear-to-me-once-again-when-i-was-prompted-by-this-query-to-explore-the-specific-aspect-of-retrieving-or-defining-abbreviations-for-the-display-unit-types-question-how-can-i-determine-the-units-for-a-given-parameter-or-familyparameter-i-tried-to-use-the-labelutils-getlabelfor-method-passing-in-the-parameter-displayunittype-this-returns-the-full-unit-name-eg-millimeters-for-dut_millimeters-i-would-prefer-something-shorter-eg-an-abbreviation-like-mm-how-could-i-achieve-that-please-answer-first-of-all-congratulations-on-discovering-the-approach-you-describe-it-sounds-like-the-best-the-way-to-go-to-me-the-parameter-definition-defines-the-basic-unit-type-eg-simple-ones-like-length-and-more-complex-combined-ones-like-stress-the-possible-unit-types-are-listed-in-the-unittype-enumeration-the-parameter-itself-specifies-the-unit-in-which-this-data-is-displayed-to-the-user-which-is-controlled-by-the-unit-settings-and-may-be-set-to-things-like-ft-m-or-mm-for-length-and-kg-m-s²-ksi-or-mpa-for-stress-the-possible-display-unit-types-are-listed-in-the-displayunittype-enumeration-we-already-looked-at-one-unit-conversion-and-display-string-formatting-issue-in-some-depth-eg-to-define-the-_map_parameter_type_to_unit_type-mapping-the-parameterunitconverter-class-and-the-external-command-cmdparameterunitconverter-included-in-the-building-coder-samples-and-more-recently-at-another-parameter-displayunittype-enhancement-the-labelutils-class-provides-methods-to-return-user-visible-names-for-enumerations-via-the-different-overloads-of-the-getlabelfor-method-that-leads-to-the-approach-you-already-discovered-if-you-would-like-a-method-to-return-abbreviations-for-the-display-unit-types-instead-of-their-full-names-the-most-efficient-approach-is-probably-to-implement-your-own-abbreviation-list-alternatively-if-you-are-clever-you-can-also-use-the-revit-api-functionality-to-automatically-generate-an-abbreviation-for-you-i-discuss-those-two-options-implement-an-external-command-to-test-them-point-to-the-download-and-wind-up-with-a-little-gift-how-to-implement-your-own-hard-coded-display-unit-type-abbreviation-list-you-can-implement-your-own-display-unit-type-abbreviations-right-away-and-it-is-a-very-easy-thing-to-do-in-fact-i-went-and-did-it-for-you-for-the-first-26-of-them-at-least-summary-hard-coded-abbreviations-for-the-first-26-displayunittype-enumeration-values-summary-public-static-string-displayunittypeabbreviation-new-string-m-dut_meters-0-cm-dut_centimeters-1-mm-dut_millimeters-2-ft-dut_decimal_feet-3-na-dut_feet_fractional_inches-4-na-dut_fractional_inches-5-in-dut_decimal_inches-6-ac-dut_acres-7-ha-dut_hectares-8-na-dut_meters_centimeters-9-y3-dut_cubic_yards-10-ft2-dut_square_feet-11-m2-dut_square_meters-12-ft3-dut_cubic_feet-13-m3-dut_cubic_meters-14-deg-dut_decimal_degrees-15-na-dut_degrees_and_minutes-16-na-dut_general-17-na-dut_fixed-18-dut_percentage-19-in2-dut_square_inches-20-cm2-dut_square_centimeters-21-mm2-dut_square_millimeters-22-in3-dut_cubic_inches-23-cm3-dut_cubic_centimeters-24-mm3-dut_cubic_millimeters-25-l-dut_liters-26-note-that-this-a-hard-coded-array-indexed-with-integer-numbers-i-am-completely-free-to-choose-any-abbreviation-i-like-an-integer-index-into-the-list-can-be-obtained-by-casting-from-a-displayunittype-enumeration-value-this-array-will-only-return-the-correct-abbreviations-as-long-as-the-underlying-displayunittype-enumeration-values-correspond-to-the-expected-integer-values-therefore-i-would-strongly-recommend-you-to-implement-some-code-in-your-application-start-up-that-ensures-that-this-is-the-case-eg-by-calling-a-sequence-of-debug-assertions-like-the-following-const-string-_s-unexpected-display-unit-type-enumeration-sequence-debugassert-0-int-displayunittypedut_meters-_s-debugassert-1-int-displayunittypedut_centimeters-_s-debugassert-2-int-displayunittypedut_millimeters-_s-debugassert-26-int-displayunittypedut_liters-_s-wouldnt-it-be-nice-to-avoid-this-hard-coded-list-and-this-sequence-of-assertions-well-you-can-how-to-automatically-generate-display-unit-type-abbreviations-using-the-revit-api-as-said-the-revit-api-provides-a-lot-of-unit-handling-functionality-and-some-of-it-is-still-poorly-known-i-first-looked-for-ways-extract-the-desired-abbreviations-from-a-value-formatted-to-the-desired-unit-by-the-formatutilsformat-or-unitformatutilsformat-methods-they-format-a-number-with-units-into-a-string-either-based-on-a-list-of-input-arguments-or-based-on-the-units-formatting-settings-for-a-given-document-if-you-set-up-a-document-to-use-millimetres-and-pass-it-in-with-the-unit-type-ut_length-and-the-value-10-i-would-assume-it-will-return-the-string-1-mm-from-which-you-might-be-able-to-extract-the-desired-abbreviation-ill-leave-that-as-an-exercise-to-the-thus-inclined-reader-though-because-i-preferred-to-stick-with-the-display-unit-types-with-the-dut_-prefix-and-completely-avoid-the-non-display-unit-types-with-the-ut_-prefix-required-by-these-methods-after-some-further-digging-on-the-revit-api-help-file-revitapichm-i-discovered-the-formatoptions-getvalidunitsymbols-method-which-does-indeed-take-a-display-unit-type-input-argument-and-returns-a-list-of-valid-unit-symbols-for-it-represented-by-unitsymboltype-enumeration-values-here-are-the-first-22-unitsymboltype-enumeration-values-out-of-a-total-of-about-300-ust_none-0-ust_m-1-ust_cm-101-ust_mm-201-ust_lf-301-ust_foot_single_quote-302-ust_inch_double_quote-601-ust_acres-701-ust_hectares-801-ust_cy-1001-ust_sf-1101-ust_ft_sup_2-1102-ust_ft_caret_2-1103-ust_m_sup_2-1201-ust_m_caret_2-1202-ust_cf-1301-ust_ft_sup_3-1302-ust_ft_caret_3-1303-ust_m_sup_3-1401-ust_m_caret_3-1402-ust_degree_symbol-1501-ust_percent_sign-1901-looking-at-these-enumeration-values-i-notice-that-they-correspond-pretty-closely-with-the-hard-coded-abbreviation-strings-that-i-define-above-actually-all-i-have-to-do-is-replace-the-substring-_sup_-by-and-convert-them-to-lower-case-to-obtain-an-identical-list-accordingly-i-implemented-the-following-helper-method-to-fulfil-that-task-summary-convert-a-unitsymboltype-enumeration-value-to-a-brief-human-readable-abbreviation-string-summary-public-static-string-unitsymboltypestring-unitsymboltype-u-string-s-utostring-debugassert-sstartswith-ust_-expected-unitsymboltype-enumeration-value-to-begin-with-ust_-s-ssubstring-4-replace-_sup_-tolower-return-s-cmddutabbreviation-external-command-to-test-the-display-unit-type-abbreviations-i-added-a-new-external-command-cmddutabbreviation-to-the-building-coder-samples-to-test-both-versions-of-my-new-display-unit-type-abbreviation-functionality-it-obviously-uses-read-only-transaction-mode-since-it-does-not-interact-with-the-revit-database-in-any-way-whatsoever-omitting-the-list-of-assertions-described-above-to-verify-the-expected-order-of-displayunittype-enumeration-values-the-implementation-of-the-cmddutabbreviation-external-command-mainline-execute-method-looks-like-this-public-result-execute-externalcommanddata-commanddata-ref-string-message-elementset-elements-displayunittype-n-displayunittypedut_gallons_us-debugprint-here-is-a-list-of-the-first-0-display-unit-types-with-the-building-coder-abbreviation-and-the-valid-unit-symbolsn-int-n-1-string-valid_unit_symbols-for-displayunittype-i-displayunittype-dut_meters-i-n-i-valid_unit_symbols-stringjoin-formatoptionsgetvalidunitsymbols-i-selectunitsymboltype-string-u-utilunitsymboltypestring-u-debugprint-06-1-2-utildisplayunittypeabbreviationinti-labelutilsgetlabelfor-i-valid_unit_symbols-i-return-resultsucceeded-for-the-first-26-display-unit-types-it-generates-the-following-list-of-abbreviations-from-the-hard-coded-string-array-and-the-unitsymboltypestring-method-applied-to-the-valid-unit-symbols-m-meters-none-m-cm-centimeters-none-cm-mm-millimeters-none-mm-ft-decimal-feet-none-foot_single_quote-lf-na-feet-and-fractional-inches-none-na-fractional-inches-none-in-decimal-inches-none-inch_double_quote-ac-acres-none-acres-ha-hectares-none-hectares-na-meters-and-centimeters-none-y3-cubic-yards-none-cy-ft2-square-feet-none-sf-ft2-m2-square-meters-none-m2-ft3-cubic-feet-none-cf-ft3-m3-cubic-meters-none-m3-deg-decimal-degrees-none-degree_symbol-na-degrees-minutes-seconds-none-na-general-none-na-fixed-none-percentage-none-percent_sign-in2-square-inches-none-in2-cm2-square-centimeters-none-cm2-mm2-square-millimeters-none-mm2-in3-cubic-inches-none-in3-cm3-cubic-centimeters-none-cm3-mm3-cubic-millimeters-none-mm3-l-liters-none-l-funnily-enough-as-you-can-see-my-hand-written-hard-coded-abbreviations-correspond-exactly-with-the-ones-i-generate-automatically-from-the-unitsymboltype-list-returned-by-the-formatoptions-getvalidunitsymbols-method-download-as-you-already-know-the-building-coder-samples-are-on-github-so-the-most-up-to-date-code-is-available-from-the-the-building-coder-samples-github-repository-the-version-discussed-above-is-release-201401050-gift-let-me-close-for-today-with-the-following-uplifting-poem-by-czeslaw-milosz-19112004-1980-nobel-prize-winner-in-literature-gift-a-day-so-happy-fog-lifted-early-i-worked-in-the-garden-hummingbirds-were-stopping-over-the-honeysuckle-flowers-there-was-no-thing-on-earth-i-wanted-to-possess-i-knew-no-one-worth-my-envying-him-whatever-evil-i-had-suffered-i-forgot-to-think-that-once-i-was-the-same-man-did-not-embarrass-me-in-my-body-i-felt-no-pain-when-straightening-up-i-saw-blue-sea-and-sails",
    "chunk_text": "<h4 style=\"color:darkblue\">Units API\n<p style=\"color:darkblue\">The API for Units in Revit has been expanded and changed. The methods</p>\n<ul>\n<li style=\"color:darkblue\">Document.GetUnits()</li>\n<li style=\"color:darkblue\">Document.SetUnits()</li>\n</ul>\n<p style=\"color:darkblue\">allow interaction with the units of a document.  The Units class provides access to data such as</p>\n<ul>\n<li style=\"color:darkblue\">DecimalSymbol</li>\n<li style=\"color:darkblue\">DigitGroupingAmount</li>\n<li style=\"color:darkblue\">DigitGroupingSymbol</li>\n<li style=\"color:darkblue\">FormatOptions</li>\n</ul>\n<p style=\"color:darkblue\">The FormatOptions class provides access to data including:</p>\n<ul>\n<li style=\"color:darkblue\">Rounding</li>\n<li style=\"color:darkblue\">Accuracy</li>\n<li style=\"color:darkblue\">DisplayUnits</li>\n<li style=\"color:darkblue\">SuppressLeadingZeros</li>\n<li style=\"color:darkblue\">SuppressTrailingZeros</li>\n<li style=\"color:darkblue\">SuppressSpaces</li>\n</ul>\n<p style=\"color:darkblue\">LabelUtils.GetLabelFor() has been enhanced so that it can now return the user-visible name for a UnitSymbolType.</p>\n<h5 style=\"color:darkblue\">Unit Formatting and Parsing</h5>\n<p style=\"color:darkblue\">The methods:</p>\n<ul>\n<li style=\"color:darkblue\">UnitFormatUtils.FormatValueToString()</li>\n<li style=\"color:darkblue\">UnitFormatUtils.TryParse()</li>\n</ul>\n<p style=\"color:darkblue\">provide the ability to format a value into a string based on formatting options and to parse a formatted string (including units) into a value if possible.</p>\n<h5 style=\"color:darkblue\">Unit Conversion</h5>\n<p style=\"color:darkblue\">The new class UnitUtils contains methods to convert between unit types:</p>\n<ul>\n<li style=\"color:darkblue\">UnitUtils.Convert() – Converts a value from one unit type to another, such as square feet to square meters.</li>\n<li style=\"color:darkblue\">UnitUtils.ConvertFromInternalUnits() – Converts a value from Revit's internal unit type.</li>\n<li style=\"color:darkblue\">UnitUtils.ConvertToInternalUnits() – Converts a value to Revit's internal unit type.</li>\n</ul>\n<p>In fact, probably very few people are aware of all the powerful functionality now available.</p>\n<p>This became clear to me once again when I was prompted by this query to explore the specific aspect of retrieving or defining abbreviations for the display unit types:</p>\n<a name=\"1\"></a>\n<p><strong>Question:</strong> How can I determine the units for a given Parameter or FamilyParameter?</p>\n<p>I tried to use the LabelUtils GetLabelFor method, passing in the parameter DisplayUnitType.</p>\n<p>This returns the full unit name, e.g., \"Millimeters\" for DUT_MILLIMETERS.</p>\n<p>I would prefer something shorter, e.g. an abbreviation like \"mm\".</p>\n<p>How could I achieve that, please?</p>\n<p><strong>Answer:</strong> First of all, congratulations on discovering the approach you describe.</p>\n<p>It sounds like the best the way to go to me.</p>\n<p>The parameter definition defines the basic unit type, e.g. simple ones like length and more complex combined ones like stress. The possible unit types are listed in the UnitType enumeration.</p>\n<p>The parameter itself specifies the unit in which this data is displayed to the user, which is controlled by the unit settings, and may be set to things like ft, m or mm for length, and kg / (m · s²), ksi or MPa for stress.  The possible display unit types are listed in the DisplayUnitType enumeration.</p>\n<p>We already looked at one\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/unit-conversion-and-display-string-formatting.html\">\nunit conversion and display string formatting</a> issue\n\nin some depth, e.g. to define the _map_parameter_type_to_unit_type mapping, the ParameterUnitConverter class and the external command CmdParameterUnitConverter included in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a>,\n\nand more recently at another\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/parameter-displayunittype-and-decompilers.html#2\">\nParameter DisplayUnitType enhancement</a>.</p>\n<p>The LabelUtils class provides methods to return user-visible names for enumerations via the different overloads of the GetLabelFor method.</p>\n<p>That leads to the approach you already discovered.</p>\n<p>If you would like a method to return abbreviations for the display unit types instead of their full names, the most efficient approach is probably to <a href=\"#2\">implement your own abbreviation list</a>.</p>\n<p>Alternatively, if you are clever, you can also use the Revit API functionality to <a href=\"#3\">automatically generate an abbreviation</a> for you.</p>\n<p>I discuss those two options, implement an <a href=\"#4\">external command to test</a> them, point to the <a href=\"#5\">download</a> and wind up with a little <a href=\"#6\">gift</a>.</p>\n<a name=\"2\"></a>\n<h4>How to Implement your Own Hard Coded Display Unit Type Abbreviation List</h4>\n<p>You can implement your own display unit type abbreviations right away and it is a very easy thing to do.</p>\n<p>In fact, I went and did it for you, for the first 26 of them, at least:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Hard coded abbreviations for the first 26</span>\n  <span class=\"gray\">///</span><span class=\"green\"> DisplayUnitType enumeration values.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span>[] DisplayUnitTypeAbbreviation\n    = <span class=\"blue\">new</span> <span class=\"blue\">string</span>[] {\n      <span class=\"maroon\">\"m\"</span>, <span class=\"green\">// DUT_METERS = 0,</span>\n      <span class=\"maroon\">\"cm\"</span>, <span class=\"green\">// DUT_CENTIMETERS = 1,</span>\n      <span class=\"maroon\">\"mm\"</span>, <span class=\"green\">// DUT_MILLIMETERS = 2,</span>\n      <span class=\"maroon\">\"ft\"</span>, <span class=\"green\">// DUT_DECIMAL_FEET = 3,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_FEET_FRACTIONAL_INCHES = 4,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_FRACTIONAL_INCHES = 5,</span>\n      <span class=\"maroon\">\"in\"</span>, <span class=\"green\">// DUT_DECIMAL_INCHES = 6,</span>\n      <span class=\"maroon\">\"ac\"</span>, <span class=\"green\">// DUT_ACRES = 7,</span>\n      <span class=\"maroon\">\"ha\"</span>, <span class=\"green\">// DUT_HECTARES = 8,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_METERS_CENTIMETERS = 9,</span>\n      <span class=\"maroon\">\"y^3\"</span>, <span class=\"green\">// DUT_CUBIC_YARDS = 10,</span>\n      <span class=\"maroon\">\"ft^2\"</span>, <span class=\"green\">// DUT_SQUARE_FEET = 11,</span>\n      <span class=\"maroon\">\"m^2\"</span>, <span class=\"green\">// DUT_SQUARE_METERS = 12,</span>\n      <span class=\"maroon\">\"ft^3\"</span>, <span class=\"green\">// DUT_CUBIC_FEET = 13,</span>\n      <span class=\"maroon\">\"m^3\"</span>, <span class=\"green\">// DUT_CUBIC_METERS = 14,</span>\n      <span class=\"maroon\">\"deg\"</span>, <span class=\"green\">// DUT_DECIMAL_DEGREES = 15,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_DEGREES_AND_MINUTES = 16,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_GENERAL = 17,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_FIXED = 18,</span>\n      <span class=\"maroon\">\"%\"</span>, <span class=\"green\">// DUT_PERCENTAGE = 19,</span>\n      <span class=\"maroon\">\"in^2\"</span>, <span class=\"green\">// DUT_SQUARE_INCHES = 20,</span>\n      <span class=\"maroon\">\"cm^2\"</span>, <span class=\"green\">// DUT_SQUARE_CENTIMETERS = 21,</span>\n      <span class=\"maroon\">\"mm^2\"</span>, <span class=\"green\">// DUT_SQUARE_MILLIMETERS = 22,</span>\n      <span class=\"maroon\">\"in^3\"</span>, <span class=\"green\">// DUT_CUBIC_INCHES = 23,</span>\n      <span class=\"maroon\">\"cm^3\"</span>, <span class=\"green\">// DUT_CUBIC_CENTIMETERS = 24,</span>\n      <span class=\"maroon\">\"mm^3\"</span>, <span class=\"green\">// DUT_CUBIC_MILLIMETERS = 25,</span>\n      <span class=\"maroon\">\"l\"</span> <span class=\"green\">// DUT_LITERS = 26,</span>\n    };\n</pre>\n<p>Note that this a hard coded array, indexed with integer numbers.</p>\n<p>I am completely free to choose any abbreviation I like.</p>\n<p>An integer index into the list can be obtained by casting from a DisplayUnitType enumeration value.</p>\n<p>This array will only return the correct abbreviations as long as the underlying DisplayUnitType enumeration values correspond to the expected integer values.</p>\n<p>Therefore, I would strongly recommend you to implement some code in your application start-up that ensures that this is the case, e.g. by calling a sequence of debug assertions like the following:</p>\n<pre class=\"code\">\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _s = <span class=\"maroon\">\"unexpected display unit type \"</span>\n    + <span class=\"maroon\">\"enumeration sequence\"</span>;\n \n  <span class=\"teal\">Debug</span>.Assert( 0 == (<span class=\"blue\">int</span>) <span class=\"teal\">DisplayUnitType</span>.DUT_METERS, _s );\n  <span class=\"teal\">Debug</span>.Assert( 1 == (<span class=\"blue\">int</span>) <span class=\"teal\">DisplayUnitType</span>.DUT_CENTIMETERS, _s );\n  <span class=\"teal\">Debug</span>.Assert( 2 == (<span class=\"blue\">int</span>) <span class=\"teal\">DisplayUnitType</span>.DUT_MILLIMETERS, _s );\n\n  . . .\n\n  <span class=\"teal\">Debug</span>.Assert( 26 == (<span class=\"blue\">int</span>) <span class=\"teal\">DisplayUnitType</span>.DUT_LITERS, _s );\n</pre>\n<p>Wouldn't it be nice to avoid this hard-coded list and this sequence of assertions?</p>\n<p>Well, you can!</p>\n<a name=\"3\"></a>\n<h4>How to Automatically Generate Display Unit Type Abbreviations Using the Revit API</h4>\n<p>As said, the Revit API provides a lot of unit handling functionality, and some of it is still poorly known.</p>\n<p>I first looked for ways extract the desired abbreviations from a value formatted to the desired unit by the FormatUtils.Format or UnitFormatUtils.Format methods.</p>\n<p>They format a number with units into a string, either based on a list of input arguments or based on the units formatting settings for a given document.</p>\n<p>If you set up a document to use millimetres and pass it in with the unit type UT_Length and the value 1.0, I would assume it will return the string \"1 mm\", from which you might be able to extract the desired abbreviation.</p>\n<p>I'll leave that as an exercise to the thus inclined reader, though, because I preferred to stick with the display unit types – with the DUT_ prefix – and completely avoid the non-display unit types – with the UT_ prefix – required by these methods.</p>\n<p>After some further digging on the Revit API help file RevitAPI.chm, I discovered the FormatOptions GetValidUnitSymbols method, which does indeed take a display unit type input argument and returns a list of valid unit symbols for it, represented by UnitSymbolType enumeration values.</p>\n<p>Here are the first 22 UnitSymbolType enumeration values, out of a total of about 300:</p>\n<pre class=\"code\">\n  UST_NONE = 0,\n  UST_M = 1,\n  UST_CM = 101,\n  UST_MM = 201,\n  UST_LF = 301,\n  UST_FOOT_SINGLE_QUOTE = 302,\n  UST_INCH_DOUBLE_QUOTE = 601,\n  UST_ACRES = 701,\n  UST_HECTARES = 801,\n  UST_CY = 1001,\n  UST_SF = 1101,\n  UST_FT_SUP_2 = 1102,\n  UST_FT_CARET_2 = 1103,\n  UST_M_SUP_2 = 1201,\n  UST_M_CARET_2 = 1202,\n  UST_CF = 1301,\n  UST_FT_SUP_3 = 1302,\n  UST_FT_CARET_3 = 1303,\n  UST_M_SUP_3 = 1401,\n  UST_M_CARET_3 = 1402,\n  UST_DEGREE_SYMBOL = 1501,\n  UST_PERCENT_SIGN = 1901,\n  ...\n</pre>\n<p>Looking at these enumeration values, I notice that they correspond pretty closely with the hard coded abbreviation strings that I define above.\nActually, all I have to do is replace the substring \"_SUP_\" by \"^\" and convert them to lower case to obtain an identical list.</p>\n<p>Accordingly, I implemented the following helper method to fulfil that task:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Convert a UnitSymbolType enumeration value</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to a brief human readable abbreviation string.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span> UnitSymbolTypeString(\n    <span class=\"teal\">UnitSymbolType</span> u )\n  {\n    <span class=\"blue\">string</span> s = u.ToString();\n \n    <span class=\"teal\">Debug</span>.Assert( s.StartsWith( <span class=\"maroon\">\"UST_\"</span> ),\n      <span class=\"maroon\">\"expected UnitSymbolType enumeration value \"</span>\n      + <span class=\"maroon\">\"to begin with 'UST_'\"</span> );\n \n    s = s.Substring( 4 )\n      .Replace( <span class=\"maroon\">\"_SUP_\"</span>, <span class=\"maroon\">\"^\"</span> )\n      .ToLower();\n \n    <span class=\"blue\">return</span> s;\n  }\n \n</pre>\n<a name=\"4\"></a>\n<h4>CmdDutAbbreviation External Command to Test the Display Unit Type Abbreviations</h4>\n<p>I added a new external command CmdDutAbbreviation to The Building Coder samples to test both versions of my new display unit type abbreviation functionality.</p>\n<p>It obviously uses read-only transaction mode, since it does not interact with the Revit database in any way whatsoever.</p>\n<p>Omitting the list of assertions described above to verify the expected order of DisplayUnitType enumeration values, the implementation of the CmdDutAbbreviation external command mainline Execute method looks like this:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">DisplayUnitType</span> n\n      = <span class=\"teal\">DisplayUnitType</span>.DUT_GALLONS_US;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Here is a list of the first {0} \"</span>\n      + <span class=\"maroon\">\"display unit types with The Building Coder \"</span>\n      + <span class=\"maroon\">\"abbreviation and the valid unit symbols:\\n\"</span>,\n      (<span class=\"blue\">int</span>) n - 1 );\n \n    <span class=\"blue\">string</span> valid_unit_symbols;\n \n    <span class=\"blue\">for</span>( <span class=\"teal\">DisplayUnitType</span> i = <span class=\"teal\">DisplayUnitType</span>\n      .DUT_METERS; i &lt; n; ++i )\n    {\n      valid_unit_symbols = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        <span class=\"teal\">FormatOptions</span>.GetValidUnitSymbols( i )\n          .Select&lt;<span class=\"teal\">UnitSymbolType</span>, <span class=\"blue\">string</span>&gt;(\n            u =&gt; <span class=\"teal\">Util</span>.UnitSymbolTypeString( u ) ) );\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0,6} - {1}: {2}\"</span>,\n        <span class=\"teal\">Util</span>.DisplayUnitTypeAbbreviation[(<span class=\"blue\">int</span>)i],\n        <span class=\"teal\">LabelUtils</span>.GetLabelFor( i ),\n        valid_unit_symbols,\n        i );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>For the first 26 display unit types, it generates the following list of abbreviations from the hard coded string array and the UnitSymbolTypeString method applied to the valid unit symbols:</p>\n<pre>\n     m - Meters: none, m\n    cm - Centimeters: none, cm\n    mm - Millimeters: none, mm\n    ft - Decimal feet: none, foot_single_quote, lf\n   N/A - Feet and fractional inches: none\n   N/A - Fractional inches: none\n    in - Decimal inches: none, inch_double_quote\n    ac - Acres: none, acres\n    ha - Hectares: none, hectares\n   N/A - Meters and centimeters: none\n   y^3 - Cubic yards: none, cy\n  ft^2 - Square feet: none, sf, ft^2\n   m^2 - Square meters: none, m^2\n  ft^3 - Cubic feet: none, cf, ft^3\n   m^3 - Cubic meters: none, m^3\n   deg - Decimal degrees: none, degree_symbol\n   N/A - Degrees minutes seconds: none\n   N/A - General: none\n   N/A - Fixed: none\n     % - Percentage: none, percent_sign\n  in^2 - Square inches: none, in^2\n  cm^2 - Square centimeters: none, cm^2\n  mm^2 - Square millimeters: none, mm^2\n  in^3 - Cubic inches: none, in^3\n  cm^3 - Cubic centimeters: none, cm^3\n  mm^3 - Cubic millimeters: none, mm^3\n     l - Liters: none, l\n</pre>\n<p>Funnily enough, as you can see, my hand written hard coded abbreviations correspond <b>exactly</b> with the ones I generate automatically from the UnitSymbolType list returned by the FormatOptions GetValidUnitSymbols method.</p>\n<a name=\"5\"></a>\n<h4>Download</h4>\n<p>As you already know,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/the-building-coder-samples-on-github.html\">\nThe Building Coder samples are on GitHub</a>,\n\nso the most up-to-date code is available from the\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples GitHub repository</a>.\n\nThe version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.105.0\">\nrelease 2014.0.105.0</a>.</p>\n<!--\n\nVictor Chekalin Re: Comment to the Unit Abbreviations post\n\n<a name=\"5.2\"></a>\n\n<h4>Addendum</h4>\n\n<p>Victor Chekalin, or Виктор Чекалин, reacted to this analysis and adds:</p>\n\n<p>Thank you for your investigation.</p>\n\n<p>But... There is a big 'but' :-)</p>\n\n<p>Your method with UnitSymbolType is not completely suitable for localised applications, e.g. Russian.</p>\n\n<p>As always, I have solved these little issues :-)</p>\n\n<p>You write above: 'After some further digging on the Revit API help file RevitAPI.chm, I discovered the FormatOptions GetValidUnitSymbols method'. But you did not dig deep enough to find the old GetLabelFor method in the static LabelUtils class.</p>\n\n<p>If you looked at that, you'll see that one of overridden method takes UnitSymbolType as parameter.</p>\n\n<p>And guess what it returns?</p>\n\n<p>Right. The <b>localizable</b> abbreviation for Unit Symbol :-)  &ndash; exactly what we need.</p>\n\n<p>So, the command to retrieve a suitable localised Unit Type abbreviation becomes much simpler &ndash; check out\n\n<a href=\"http://pastebin.com/ZZ0mVeYE\">http://pastebin.com/ZZ0mVeYE</a>:</p>\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n&nbsp; <span class=\"teal\">ExternalCommandData</span> commandData,\n&nbsp; <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n&nbsp; <span class=\"teal\">ElementSet</span> elements )\n{\n&nbsp; <span class=\"teal\">DisplayUnitType</span> n = <span class=\"teal\">DisplayUnitType</span>.DUT_GALLONS_US;\n&nbsp;\n&nbsp; <span class=\"blue\">for</span>( <span class=\"teal\">DisplayUnitType</span> i = <span class=\"teal\">DisplayUnitType</span>\n&nbsp; &nbsp; .DUT_METERS; i &lt; n; ++i )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"blue\">var</span> validUnitSymbols = <span class=\"teal\">FormatOptions</span>\n&nbsp; &nbsp; &nbsp; .GetValidUnitSymbols( i );\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> validUnitSymbol <span class=\"blue\">in</span> validUnitSymbols )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">if</span>( validUnitSymbol != <span class=\"teal\">UnitSymbolType</span>.UST_NONE )\n&nbsp; &nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"blue\">var</span> abbrUnitTypeLabel = <span class=\"teal\">LabelUtils</span>.GetLabelFor(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; validUnitSymbol );\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">&quot;{0} - {1}&quot;</span>, abbrUnitTypeLabel,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"teal\">LabelUtils</span>.GetLabelFor( i ) );\n&nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; }\n&nbsp; }\n&nbsp; <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n\n<p>Regards, Victor.</p>\n\n<p>Jeremy adds: I updated\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples GitHub repository</a> and\n\nintegrated Victor's enhancement to the existing CmdDutAbbreviation command, which also includes the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/mapping-display-unit-type-to-unit-types.html\">\nDisplay Unit Type to Unit Types mapping</a> that\n\nwe added in the meantime.</p>\n\n<p>The relevant code looks like this now and lists both the official Revit API LabelUtils and hard-coded abbreviations plus the valid unit symbols for the first 26 display unit types:</p>\n\n<pre class=\"code\">\n&nbsp; <span class=\"teal\">MapDutToUt</span> map_dut_to_ut = <span class=\"blue\">new</span> <span class=\"teal\">MapDutToUt</span>();\n&nbsp;\n&nbsp; <span class=\"teal\">DisplayUnitType</span> n\n&nbsp; &nbsp; = <span class=\"teal\">DisplayUnitType</span>.DUT_GALLONS_US;\n&nbsp;\n&nbsp; <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">&quot;Here is a list of the first {0} &quot;</span>\n&nbsp; &nbsp; + <span class=\"maroon\">&quot;display unit types with official Revit API &quot;</span>\n&nbsp; &nbsp; + <span class=\"maroon\">&quot;LabelUtils, hard-coded The Building Coder &quot;</span>\n&nbsp; &nbsp; + <span class=\"maroon\">&quot;abbreviations and valid unit symbols:\\n&quot;</span>,\n&nbsp; &nbsp; (<span class=\"blue\">int</span>) n - 1 );\n&nbsp;\n&nbsp; <span class=\"blue\">string</span> unit_types, valid_unit_symbols;\n&nbsp;\n&nbsp; <span class=\"blue\">for</span>( <span class=\"teal\">DisplayUnitType</span> i = <span class=\"teal\">DisplayUnitType</span>\n&nbsp; &nbsp; .DUT_METERS; i &lt; n; ++i )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; uts = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;(\n&nbsp; &nbsp; &nbsp; map_dut_to_ut[i]\n&nbsp; &nbsp; &nbsp; &nbsp; .Select&lt;<span class=\"teal\">UnitType</span>, <span class=\"blue\">string</span>&gt;(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; u =&gt; u.ToString().Substring( 3 ) ) );\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">int</span> m = uts.Count;\n&nbsp;\n&nbsp; &nbsp; unit_types = 4 &gt; m\n&nbsp; &nbsp; &nbsp; ? <span class=\"blue\">string</span>.Join( <span class=\"maroon\">&quot;, &quot;</span>, uts )\n&nbsp; &nbsp; &nbsp; : <span class=\"blue\">string</span>.Format( <span class=\"maroon\">&quot;{0}, {1} and {2} more&quot;</span>,\n&nbsp; &nbsp; &nbsp; &nbsp; uts[0], uts[1], m - 2 );\n&nbsp;\n&nbsp; &nbsp; valid_unit_symbols = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">&quot;, &quot;</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">FormatOptions</span>.GetValidUnitSymbols( i )\n&nbsp; &nbsp; &nbsp; &nbsp; .Where( u =&gt; <span class=\"teal\">UnitSymbolType</span>.UST_NONE != u )\n&nbsp; &nbsp; &nbsp; &nbsp; .Select&lt;<span class=\"teal\">UnitSymbolType</span>, <span class=\"blue\">string</span>&gt;(\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; u =&gt; <span class=\"teal\">LabelUtils</span>.GetLabelFor( u )\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; + <span class=\"maroon\">&quot;/&quot;</span> + <span class=\"teal\">Util</span>.UnitSymbolTypeString( u ) ) );\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">&quot;{0,6} - {1} - {2}: {3}&quot;</span>,\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">Util</span>.DisplayUnitTypeAbbreviation[(<span class=\"blue\">int</span>) i],\n&nbsp; &nbsp; &nbsp; <span class=\"teal\">LabelUtils</span>.GetLabelFor( i ),\n&nbsp; &nbsp; &nbsp; unit_types,\n&nbsp; &nbsp; &nbsp; <span class=\"green\">//i</span>\n&nbsp; &nbsp; &nbsp; <span class=\"green\">//UnitFormatUtils.Format( UnitType. ???</span>\n&nbsp; &nbsp; &nbsp; <span class=\"green\">//UnitUtils.ConvertFromInternalUnits( 1, i ),</span>\n&nbsp; &nbsp; &nbsp; valid_unit_symbols );\n&nbsp; }\n</pre>\n\n<p>This generates the following output in the Visual Studio debug output window:</p>\n\n<pre>\nHere is a list of the first 26 display unit types with\nofficial Revit API LabelUtils, hard-coded The Building\nCoder abbreviations and valid unit symbols:\n\n    m - Meters - Length, SheetLength and 19 more: m/m\n   cm - Centimeters - Length, SheetLength and 20 more: cm/cm\n   mm - Millimeters - Length, SheetLength and 20 more: mm/mm\n   ft - Decimal feet - Length, SheetLength and 19 more: '/foot_single_quote, LF/lf\n  N/A - Feet and fractional inches - Length, SheetLength and 19 more:\n  N/A - Fractional inches - Length, SheetLength and 20 more:\n   in - Decimal inches - Length, SheetLength and 20 more: \"/inch_double_quote\n   ac - Acres - Area, HVAC_CrossSection: acres/acres\n   ha - Hectares - Area, HVAC_CrossSection: hectare/hectares\n  N/A - Meters and centimeters - Length, SheetLength and 17 more:\n  y^3 - Cubic yards - Volume, Piping_Volume: CY/cy\n ft^2 - Square feet - Area, HVAC_CrossSection and 2 more: SF/sf, ft²/ft^2\n  m^2 - Square meters - Area, HVAC_CrossSection and 2 more: m²/m^2\n ft^3 - Cubic feet - Volume, Piping_Volume and 2 more: CF/cf, ft³/ft^3\n  m^3 - Cubic meters - Volume, Piping_Volume and 2 more: m³/m^3\n  deg - Decimal degrees - Angle, SiteAngle, Rotation: °/degree_symbol\n  N/A - Degrees minutes seconds - Angle, SiteAngle, Rotation:\n  N/A - General - Number:\n  N/A - Fixed - Number, HVAC_Factor, Electrical_Demand_Factor:\n    % - Percentage - Number, Slope and 4 more: %/percent_sign\n in^2 - Square inches - Area, HVAC_CrossSection and 2 more: in²/in^2\n cm^2 - Square centimeters - Area, HVAC_CrossSection and 2 more: cm²/cm^2\n mm^2 - Square millimeters - Area, HVAC_CrossSection and 2 more: mm²/mm^2\n in^3 - Cubic inches - Volume, Piping_Volume and 2 more: in³/in^3\n cm^3 - Cubic centimeters - Volume, Piping_Volume and 2 more: cm³/cm^3\n mm^3 - Cubic millimeters - Volume, Piping_Volume, Section_Modulus: mm³/mm^3\n    l - Liters - Volume, Piping_Volume: L/l\n</pre>\n\n<p>The updated version is published as\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.105.2\">\nrelease 2014.0.105.2</a> and\n\nincludes the release 2014.0.105.1\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/mapping-display-unit-type-to-unit-types.html\">\nDisplay Unit Type to Unit Types mapping</a>.</p>\n\n-->\n<a name=\"6\"></a>\n<h4>Gift</h4>\n<p>Let me close for today with the following uplifting poem by Czeslaw Milosz (1911–2004), 1980 Nobel Prize winner in literature:</p>\n<blockquote>\n<h4>Gift</h4>\n<p>A day so happy.\n<br/>Fog lifted early. I worked in the garden.\n<br/>Hummingbirds were stopping over the honeysuckle flowers.\n<br/>There was no thing on earth I wanted to possess.\n<br/>I knew no one worth my envying him.\n<br/>Whatever evil I had suffered, I forgot.\n<br/>To think that once I was the same man did not embarrass me.\n<br/>In my body I felt no pain.\n<br/>When straightening up, I saw blue sea and sails.</p>\n</blockquote>\n</h4>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "Unit Formatting and Parsing",
    "local_header_href": "#unit-formatting-and-parsing",
    "chunk_text": "<h5 style=\"color:darkblue\">Unit Formatting and Parsing</h5><p style=\"color:darkblue\">The methods:</p><ul>\n<li style=\"color:darkblue\">UnitFormatUtils.FormatValueToString()</li>\n<li style=\"color:darkblue\">UnitFormatUtils.TryParse()</li>\n</ul><p style=\"color:darkblue\">provide the ability to format a value into a string based on formatting options and to parse a formatted string (including units) into a value if possible.</p>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "Unit Conversion",
    "local_header_href": "#unit-conversion",
    "chunk_text": "<h5 style=\"color:darkblue\">Unit Conversion</h5><p style=\"color:darkblue\">The new class UnitUtils contains methods to convert between unit types:</p><ul>\n<li style=\"color:darkblue\">UnitUtils.Convert() – Converts a value from one unit type to another, such as square feet to square meters.</li>\n<li style=\"color:darkblue\">UnitUtils.ConvertFromInternalUnits() – Converts a value from Revit's internal unit type.</li>\n<li style=\"color:darkblue\">UnitUtils.ConvertToInternalUnits() – Converts a value to Revit's internal unit type.</li>\n</ul><p>In fact, probably very few people are aware of all the powerful functionality now available.</p><p>This became clear to me once again when I was prompted by this query to explore the specific aspect of retrieving or defining abbreviations for the display unit types:</p><a name=\"1\"></a><p><strong>Question:</strong> How can I determine the units for a given Parameter or FamilyParameter?</p><p>I tried to use the LabelUtils GetLabelFor method, passing in the parameter DisplayUnitType.</p><p>This returns the full unit name, e.g., \"Millimeters\" for DUT_MILLIMETERS.</p><p>I would prefer something shorter, e.g. an abbreviation like \"mm\".</p><p>How could I achieve that, please?</p><p><strong>Answer:</strong> First of all, congratulations on discovering the approach you describe.</p><p>It sounds like the best the way to go to me.</p><p>The parameter definition defines the basic unit type, e.g. simple ones like length and more complex combined ones like stress. The possible unit types are listed in the UnitType enumeration.</p><p>The parameter itself specifies the unit in which this data is displayed to the user, which is controlled by the unit settings, and may be set to things like ft, m or mm for length, and kg / (m · s²), ksi or MPa for stress.  The possible display unit types are listed in the DisplayUnitType enumeration.</p><p>We already looked at one\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/unit-conversion-and-display-string-formatting.html\">\nunit conversion and display string formatting</a> issue\n\nin some depth, e.g. to define the _map_parameter_type_to_unit_type mapping, the ParameterUnitConverter class and the external command CmdParameterUnitConverter included in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a>,\n\nand more recently at another\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/parameter-displayunittype-and-decompilers.html#2\">\nParameter DisplayUnitType enhancement</a>.</p><p>The LabelUtils class provides methods to return user-visible names for enumerations via the different overloads of the GetLabelFor method.</p><p>That leads to the approach you already discovered.</p><p>If you would like a method to return abbreviations for the display unit types instead of their full names, the most efficient approach is probably to <a href=\"#2\">implement your own abbreviation list</a>.</p><p>Alternatively, if you are clever, you can also use the Revit API functionality to <a href=\"#3\">automatically generate an abbreviation</a> for you.</p><p>I discuss those two options, implement an <a href=\"#4\">external command to test</a> them, point to the <a href=\"#5\">download</a> and wind up with a little <a href=\"#6\">gift</a>.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "How to Implement your Own Hard Coded Display Unit Type Abbreviation List",
    "local_header_href": "#how-to-implement-your-own-hard-coded-display-unit-type-abbreviation-list",
    "chunk_text": "<h4>How to Implement your Own Hard Coded Display Unit Type Abbreviation List</h4><p>You can implement your own display unit type abbreviations right away and it is a very easy thing to do.</p><p>In fact, I went and did it for you, for the first 26 of them, at least:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Hard coded abbreviations for the first 26</span>\n  <span class=\"gray\">///</span><span class=\"green\"> DisplayUnitType enumeration values.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span>[] DisplayUnitTypeAbbreviation\n    = <span class=\"blue\">new</span> <span class=\"blue\">string</span>[] {\n      <span class=\"maroon\">\"m\"</span>, <span class=\"green\">// DUT_METERS = 0,</span>\n      <span class=\"maroon\">\"cm\"</span>, <span class=\"green\">// DUT_CENTIMETERS = 1,</span>\n      <span class=\"maroon\">\"mm\"</span>, <span class=\"green\">// DUT_MILLIMETERS = 2,</span>\n      <span class=\"maroon\">\"ft\"</span>, <span class=\"green\">// DUT_DECIMAL_FEET = 3,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_FEET_FRACTIONAL_INCHES = 4,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_FRACTIONAL_INCHES = 5,</span>\n      <span class=\"maroon\">\"in\"</span>, <span class=\"green\">// DUT_DECIMAL_INCHES = 6,</span>\n      <span class=\"maroon\">\"ac\"</span>, <span class=\"green\">// DUT_ACRES = 7,</span>\n      <span class=\"maroon\">\"ha\"</span>, <span class=\"green\">// DUT_HECTARES = 8,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_METERS_CENTIMETERS = 9,</span>\n      <span class=\"maroon\">\"y^3\"</span>, <span class=\"green\">// DUT_CUBIC_YARDS = 10,</span>\n      <span class=\"maroon\">\"ft^2\"</span>, <span class=\"green\">// DUT_SQUARE_FEET = 11,</span>\n      <span class=\"maroon\">\"m^2\"</span>, <span class=\"green\">// DUT_SQUARE_METERS = 12,</span>\n      <span class=\"maroon\">\"ft^3\"</span>, <span class=\"green\">// DUT_CUBIC_FEET = 13,</span>\n      <span class=\"maroon\">\"m^3\"</span>, <span class=\"green\">// DUT_CUBIC_METERS = 14,</span>\n      <span class=\"maroon\">\"deg\"</span>, <span class=\"green\">// DUT_DECIMAL_DEGREES = 15,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_DEGREES_AND_MINUTES = 16,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_GENERAL = 17,</span>\n      <span class=\"maroon\">\"N/A\"</span>, <span class=\"green\">// DUT_FIXED = 18,</span>\n      <span class=\"maroon\">\"%\"</span>, <span class=\"green\">// DUT_PERCENTAGE = 19,</span>\n      <span class=\"maroon\">\"in^2\"</span>, <span class=\"green\">// DUT_SQUARE_INCHES = 20,</span>\n      <span class=\"maroon\">\"cm^2\"</span>, <span class=\"green\">// DUT_SQUARE_CENTIMETERS = 21,</span>\n      <span class=\"maroon\">\"mm^2\"</span>, <span class=\"green\">// DUT_SQUARE_MILLIMETERS = 22,</span>\n      <span class=\"maroon\">\"in^3\"</span>, <span class=\"green\">// DUT_CUBIC_INCHES = 23,</span>\n      <span class=\"maroon\">\"cm^3\"</span>, <span class=\"green\">// DUT_CUBIC_CENTIMETERS = 24,</span>\n      <span class=\"maroon\">\"mm^3\"</span>, <span class=\"green\">// DUT_CUBIC_MILLIMETERS = 25,</span>\n      <span class=\"maroon\">\"l\"</span> <span class=\"green\">// DUT_LITERS = 26,</span>\n    };\n</pre><p>Note that this a hard coded array, indexed with integer numbers.</p><p>I am completely free to choose any abbreviation I like.</p><p>An integer index into the list can be obtained by casting from a DisplayUnitType enumeration value.</p><p>This array will only return the correct abbreviations as long as the underlying DisplayUnitType enumeration values correspond to the expected integer values.</p><p>Therefore, I would strongly recommend you to implement some code in your application start-up that ensures that this is the case, e.g. by calling a sequence of debug assertions like the following:</p><pre class=\"code\">\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _s = <span class=\"maroon\">\"unexpected display unit type \"</span>\n    + <span class=\"maroon\">\"enumeration sequence\"</span>;\n \n  <span class=\"teal\">Debug</span>.Assert( 0 == (<span class=\"blue\">int</span>) <span class=\"teal\">DisplayUnitType</span>.DUT_METERS, _s );\n  <span class=\"teal\">Debug</span>.Assert( 1 == (<span class=\"blue\">int</span>) <span class=\"teal\">DisplayUnitType</span>.DUT_CENTIMETERS, _s );\n  <span class=\"teal\">Debug</span>.Assert( 2 == (<span class=\"blue\">int</span>) <span class=\"teal\">DisplayUnitType</span>.DUT_MILLIMETERS, _s );\n\n  . . .\n\n  <span class=\"teal\">Debug</span>.Assert( 26 == (<span class=\"blue\">int</span>) <span class=\"teal\">DisplayUnitType</span>.DUT_LITERS, _s );\n</pre><p>Wouldn't it be nice to avoid this hard-coded list and this sequence of assertions?</p><p>Well, you can!</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "How to Automatically Generate Display Unit Type Abbreviations Using the Revit API",
    "local_header_href": "#how-to-automatically-generate-display-unit-type-abbreviations-using-the-revit-api",
    "chunk_text": "<h4>How to Automatically Generate Display Unit Type Abbreviations Using the Revit API</h4><p>As said, the Revit API provides a lot of unit handling functionality, and some of it is still poorly known.</p><p>I first looked for ways extract the desired abbreviations from a value formatted to the desired unit by the FormatUtils.Format or UnitFormatUtils.Format methods.</p><p>They format a number with units into a string, either based on a list of input arguments or based on the units formatting settings for a given document.</p><p>If you set up a document to use millimetres and pass it in with the unit type UT_Length and the value 1.0, I would assume it will return the string \"1 mm\", from which you might be able to extract the desired abbreviation.</p><p>I'll leave that as an exercise to the thus inclined reader, though, because I preferred to stick with the display unit types – with the DUT_ prefix – and completely avoid the non-display unit types – with the UT_ prefix – required by these methods.</p><p>After some further digging on the Revit API help file RevitAPI.chm, I discovered the FormatOptions GetValidUnitSymbols method, which does indeed take a display unit type input argument and returns a list of valid unit symbols for it, represented by UnitSymbolType enumeration values.</p><p>Here are the first 22 UnitSymbolType enumeration values, out of a total of about 300:</p><pre class=\"code\">\n  UST_NONE = 0,\n  UST_M = 1,\n  UST_CM = 101,\n  UST_MM = 201,\n  UST_LF = 301,\n  UST_FOOT_SINGLE_QUOTE = 302,\n  UST_INCH_DOUBLE_QUOTE = 601,\n  UST_ACRES = 701,\n  UST_HECTARES = 801,\n  UST_CY = 1001,\n  UST_SF = 1101,\n  UST_FT_SUP_2 = 1102,\n  UST_FT_CARET_2 = 1103,\n  UST_M_SUP_2 = 1201,\n  UST_M_CARET_2 = 1202,\n  UST_CF = 1301,\n  UST_FT_SUP_3 = 1302,\n  UST_FT_CARET_3 = 1303,\n  UST_M_SUP_3 = 1401,\n  UST_M_CARET_3 = 1402,\n  UST_DEGREE_SYMBOL = 1501,\n  UST_PERCENT_SIGN = 1901,\n  ...\n</pre><p>Looking at these enumeration values, I notice that they correspond pretty closely with the hard coded abbreviation strings that I define above.\nActually, all I have to do is replace the substring \"_SUP_\" by \"^\" and convert them to lower case to obtain an identical list.</p><p>Accordingly, I implemented the following helper method to fulfil that task:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Convert a UnitSymbolType enumeration value</span>\n  <span class=\"gray\">///</span><span class=\"green\"> to a brief human readable abbreviation string.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span> UnitSymbolTypeString(\n    <span class=\"teal\">UnitSymbolType</span> u )\n  {\n    <span class=\"blue\">string</span> s = u.ToString();\n \n    <span class=\"teal\">Debug</span>.Assert( s.StartsWith( <span class=\"maroon\">\"UST_\"</span> ),\n      <span class=\"maroon\">\"expected UnitSymbolType enumeration value \"</span>\n      + <span class=\"maroon\">\"to begin with 'UST_'\"</span> );\n \n    s = s.Substring( 4 )\n      .Replace( <span class=\"maroon\">\"_SUP_\"</span>, <span class=\"maroon\">\"^\"</span> )\n      .ToLower();\n \n    <span class=\"blue\">return</span> s;\n  }\n \n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "CmdDutAbbreviation External Command to Test the Display Unit Type Abbreviations",
    "local_header_href": "#cmddutabbreviation-external-command-to-test-the-display-unit-type-abbreviations",
    "chunk_text": "<h4>CmdDutAbbreviation External Command to Test the Display Unit Type Abbreviations</h4><p>I added a new external command CmdDutAbbreviation to The Building Coder samples to test both versions of my new display unit type abbreviation functionality.</p><p>It obviously uses read-only transaction mode, since it does not interact with the Revit database in any way whatsoever.</p><p>Omitting the list of assertions described above to verify the expected order of DisplayUnitType enumeration values, the implementation of the CmdDutAbbreviation external command mainline Execute method looks like this:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">DisplayUnitType</span> n\n      = <span class=\"teal\">DisplayUnitType</span>.DUT_GALLONS_US;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Here is a list of the first {0} \"</span>\n      + <span class=\"maroon\">\"display unit types with The Building Coder \"</span>\n      + <span class=\"maroon\">\"abbreviation and the valid unit symbols:\\n\"</span>,\n      (<span class=\"blue\">int</span>) n - 1 );\n \n    <span class=\"blue\">string</span> valid_unit_symbols;\n \n    <span class=\"blue\">for</span>( <span class=\"teal\">DisplayUnitType</span> i = <span class=\"teal\">DisplayUnitType</span>\n      .DUT_METERS; i &lt; n; ++i )\n    {\n      valid_unit_symbols = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        <span class=\"teal\">FormatOptions</span>.GetValidUnitSymbols( i )\n          .Select&lt;<span class=\"teal\">UnitSymbolType</span>, <span class=\"blue\">string</span>&gt;(\n            u =&gt; <span class=\"teal\">Util</span>.UnitSymbolTypeString( u ) ) );\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0,6} - {1}: {2}\"</span>,\n        <span class=\"teal\">Util</span>.DisplayUnitTypeAbbreviation[(<span class=\"blue\">int</span>)i],\n        <span class=\"teal\">LabelUtils</span>.GetLabelFor( i ),\n        valid_unit_symbols,\n        i );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p>For the first 26 display unit types, it generates the following list of abbreviations from the hard coded string array and the UnitSymbolTypeString method applied to the valid unit symbols:</p><pre>\n     m - Meters: none, m\n    cm - Centimeters: none, cm\n    mm - Millimeters: none, mm\n    ft - Decimal feet: none, foot_single_quote, lf\n   N/A - Feet and fractional inches: none\n   N/A - Fractional inches: none\n    in - Decimal inches: none, inch_double_quote\n    ac - Acres: none, acres\n    ha - Hectares: none, hectares\n   N/A - Meters and centimeters: none\n   y^3 - Cubic yards: none, cy\n  ft^2 - Square feet: none, sf, ft^2\n   m^2 - Square meters: none, m^2\n  ft^3 - Cubic feet: none, cf, ft^3\n   m^3 - Cubic meters: none, m^3\n   deg - Decimal degrees: none, degree_symbol\n   N/A - Degrees minutes seconds: none\n   N/A - General: none\n   N/A - Fixed: none\n     % - Percentage: none, percent_sign\n  in^2 - Square inches: none, in^2\n  cm^2 - Square centimeters: none, cm^2\n  mm^2 - Square millimeters: none, mm^2\n  in^3 - Cubic inches: none, in^3\n  cm^3 - Cubic centimeters: none, cm^3\n  mm^3 - Cubic millimeters: none, mm^3\n     l - Liters: none, l\n</pre><p>Funnily enough, as you can see, my hand written hard coded abbreviations correspond <b>exactly</b> with the ones I generate automatically from the UnitSymbolType list returned by the FormatOptions GetValidUnitSymbols method.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>As you already know,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/the-building-coder-samples-on-github.html\">\nThe Building Coder samples are on GitHub</a>,\n\nso the most up-to-date code is available from the\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples GitHub repository</a>.\n\nThe version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.105.0\">\nrelease 2014.0.105.0</a>.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "Gift",
    "local_header_href": "#gift",
    "chunk_text": "<h4>Gift</h4><p>Let me close for today with the following uplifting poem by Czeslaw Milosz (1911–2004), 1980 Nobel Prize winner in literature:</p><blockquote>\n<h4>Gift</h4>\n<p>A day so happy.\n<br/>Fog lifted early. I worked in the garden.\n<br/>Hummingbirds were stopping over the honeysuckle flowers.\n<br/>There was no thing on earth I wanted to possess.\n<br/>I knew no one worth my envying him.\n<br/>Whatever evil I had suffered, I forgot.\n<br/>To think that once I was the same man did not embarrass me.\n<br/>In my body I felt no pain.\n<br/>When straightening up, I saw blue sea and sails.</p>\n</blockquote>"
  },
  {
    "original_filename": "1050_unit_abbreviation",
    "header_text": "Gift",
    "local_header_href": "#gift",
    "chunk_text": "<h4>Gift</h4><p>A day so happy.\n<br/>Fog lifted early. I worked in the garden.\n<br/>Hummingbirds were stopping over the honeysuckle flowers.\n<br/>There was no thing on earth I wanted to possess.\n<br/>I knew no one worth my envying him.\n<br/>Whatever evil I had suffered, I forgot.\n<br/>To think that once I was the same man did not embarrass me.\n<br/>In my body I felt no pain.\n<br/>When straightening up, I saw blue sea and sails.</p>"
  }
]