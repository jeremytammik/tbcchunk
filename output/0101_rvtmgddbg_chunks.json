[
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "RvtMgdDbg",
    "local_header_href": "#rvtmgddbg",
    "chunk_text": "<h3>RvtMgdDbg</h3><p>One of the most important, basic and powerful tools for analysing the Revit database is RvtMgdDbg.\nA \n\n<a href=\"http://download.autodesk.com/media/adn/RvtMgdDbg2009_0429_2008.zip\">\n2009 version</a>\n\nis publicly available, and a \n\n<a href=\"http://adn.autodesk.com/adn/servlet/item?siteID=4814862&amp;id=12264104&amp;linkID=4901650\">\n2010 alpha version</a>\n\nis on the ADN web site.\nYou can also find both of these just by searching for \"RvtMgdDbg\" on the ADN web site, if you have access to that.\nI would have described it in detail much earlier, but the public availability was unclear for a while.\nNow that it is clear that it is publicly accessible, I tell you it is a must for every Revit developer to know and use.</p><p>The full source code is included.\nTherefore, in case of need, you can always recompile it yourself for any version you please.\nIt can also be used for analysis and learning purposes, incorporated into your own application, and updated in case you discover a problem.</p>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "ArxDbg Family",
    "local_header_href": "#arxdbg-family",
    "chunk_text": "<h4>ArxDbg Family</h4><p>RvtMgdDbg is similar to the ArxDbg and MgdDbg utilities, well-known in the AutoCAD ObjectARX and .NET API developer communities.\nRvtMgdDbg is written by the same author and his team.\nAll of these tools analyse:</p><ul>\n<li>The database structure, contents and properties.</li>\n<li>Element properties, methods, data and relationships.</li>\n<li>In AutoCAD, reactors, hard and soft owners and pointers, the DXF data representation, etc.</li>\n<li>In Revit, the element parameters and geometry, etc.</li>\n</ul><p>The tools provided in this series include:</p><ul>\n<li>ArxDbg, an ObjectARX tool for analysing the AutoCAD database.</li>\n<li>MgdDbg, a managed version of ArxDbg.</li>\n<li>RvtMgdDbg, a Revit API .NET tool to analyse the Revit database.</li>\n</ul><p>The class\n\n<a href=\"http://au.autodesk.com/?nd=class&amp;session_id=2808\">\nDE111-3 – A Closer Look at the Revit Database with the Revit API</a>\n\nby Mikako Harada at Autodesk University in 2007 and 2008 uses RvtMgdDbg to explore and explain the internal structure of the Revit database.\nThe class materials include the version for Revit 2009, a sample model, and results of a detailed analysis of the model elements.\nHere is an excerpt from Mikako's class handout describing its various features. \nMany thanks to Mikako for providing the following valuable material!</p>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "RvtMgdDbg – 'Snoop' Tools",
    "local_header_href": "#rvtmgddbg-snoop-tools",
    "chunk_text": "<h4>RvtMgdDbg – 'Snoop' Tools</h4><p>RvtMgdDbg is an external application which defines its own menu and a toolbar, and solely written using Revit API. \nIt provides comprehensive tests of the Revit API, sample code and utility classes, scaffolding for quick tests. \nIt is the powerful exploration tool for learning Revit internals.</p><p>I have been playing around with RvtMgdDbg for some time. \nIt is truly a great tool and helps our daily life of supporting Revit API. \nIn the following sections, I will point out a few tips about using this tool, which you might find useful later on. \nThis figure shows the main menu of RvtMgdDbg:</p><img alt=\"RvtMgdDbg main menu\" src=\"img/de111_3_fig_5_RvtMgdDbg_main_menu.png\"/><p>Currently RvtMgdDbg provides the following five commands:</p><ul>\n<li>Snoop Db – this command allows you to view the Elements list under the current active document or ExternalCommandData.Application.ActiveDocument.Elements. It sorts elements by class name and display them in an alphabetical order. For each element selected, it displays its properties. Figure 6 shows the image from a sample usage of his command. Blue lines indicated the names of class as well as derived base classes. Bold letter in the item indicates the availability of the further 'drill down' information. By click it, you can view more information.</li>\n<li>Snoop Current Selection – this command allows you to view the elements you have selected prior to running this command. The information displayed for each element is same as above.</li>\n<li>Snoop Application – this command allows you to view the properties of application object.</li>\n<li>Test Framework – this command consolidates various test commands including ones found in the SDK samples. You can also find more samples here.</li>\n<li>Events – this command allows you to turn on/off event notifications currently available through Revit API.</li>\n</ul><p>Here is an example of snooping around in the Revit database, in this case displaying a list of all database elements with a wall element selected on the left hand side, and its methods and properties in the grid on the right:</p><img alt=\"RvtMgdDbg main dialogue\" src=\"img/de111_3_fig_6_RvtMgdDbg_dialogue.png\"/><p>All the bold entries in the properties and methods pane can be clicked to open up new windows taking you further and deeper into the data structure and object relationship graph.</p>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "Component Families and Types",
    "local_header_href": "#component-families-and-types",
    "chunk_text": "<h4>Component Families and Types</h4><p>Earlier I mentioned that the class called Family is like a container class. \nA set of family types is grouped under a family. \nIn Revit UI, you can view it under Families in the project browser. \nTake a 'M_Keynote Tag' (this is in a metric template), for example, there are three types defined in this family. \nIn the Snoop Db tool, you can locate this under Family tree node. \nIf you check the element named 'M_Keynote Tag', you can find the member types under Symbols property. \nOne thing to note is that the class Family has no category defined. \nIn Revit 2009, you can check 'FamilyCategory' property instead:</p><img alt=\"RvtMgdDbg component family\" src=\"img/de111_3_fig_14_RvtMgdDbg_component_family.png\"/>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "System Families and Types",
    "local_header_href": "#system-families-and-types",
    "chunk_text": "<h4>System Families and Types</h4><p>The above mentioned Family class is available only for component families (although from the UI, it looks as if they are under Family class). \nFor system families, there are normally designated, corresponding classes for each type. \nFor example, the class for wall symbols is WallType. \nTo find out the family name, you can check the property of a wall type and look up its built-in parameter 'ALL_MODEL_FAMILY_NAME':</p><img alt=\"Wall system families and types\" src=\"img/de111_3_fig_15_RvtMgdDbg_walls.png\"/><p>We will look more at Snoop Parameter anon.\nAdditionally, some but not all system family types are also accessible from the document object:</p><img alt=\"Accessing types from the document object\" src=\"img/de111_3_fig_16_RvtMgdDbg_doc_types.png\"/>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "Accessing View Specific Instances",
    "local_header_href": "#accessing-view-specific-instances",
    "chunk_text": "<h4>Accessing View Specific Instances</h4><p>One way to access instances is through View.Elements. \nThis gives only the instances specific to a given view. \nLook under the View class, and then click its Elements property:</p><img alt=\"Accessing view-specific instances\" src=\"img/de111_3_fig_17_RvtMgdDbg_view.png\"/><p>In Revit 2008, you could select a view from project browser, and still be able to snoop it as a current selection. \nThis functionality was disabled in Revit 2009. I miss it ...</p>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "Parameters",
    "local_header_href": "#parameters",
    "chunk_text": "<h4>Parameters</h4><p>One last tool I would like to mention is the snoop tool for parameters. \nEach element has a Parameters property, which closely corresponds to the property values you see in the Element Properties dialog in UI. \nThe parameters you can view here may be built-in or shared parameters, including both visible and invisible ones. \nTo access a specific parameter, you can use the Parameter method by passing in a built-in parameter enum value (note singular form here as opposed to Parameters in plural form). \nOne difficulty in using built-in parameters is that there are more than 2000 of them defined in the Revit API, while only a small portion of these apply to a specific element. \nUnfortunately, there is no documentation, either. \nThe documentation of built-in parameters is one of most frequent requests. \nThere is no official document for that to date.\nNevertheless, it has been our experience that occasionally you may find additional information; a family name for a specific wall family type which we mentioned earlier is an example of such a case. \nIn the SnoopObjects dialog, click on Parameters property fields. \nThe Snoop Parameters dialog includes a button labelled 'Built-In Enum Snoop'. \nFrom here, you can view the list of 'available' built-in parameters:</p><img alt=\"Built-in parameters snoop tool\" src=\"img/de111_3_fig_18_RvtMgdDbg_parameters.png\"/><p>Please note that 'available' simply means that its value is not Nothing or null. \nIf does not guarantee that it has meaningful value. \nBuilt-in parameters are not an officially supported portion of API. \nIn future we expect it will be replaced by data being properly exposed as a property. \n\n<h4>Installation</h4>\n<p>RvtMgdDbg is an external Revit application, so it needs to be installed like any other such add-in, for instance by adding the relevant lines to Revit.ini.\nIt makes use of some bitmaps which it expects in a specific location. \nYou can change the location in the source code as you like and recompile, or simply ignore them, in which case they will not be displayed.\nThis does not matter, they do not affect the functionality of the tool.</p>\n<p>It does occur that some specific properties on some specific objects throw exceptions. \nIf so, simply start RvtMgdDbg in the Visual Studio debugger, discover where the offending exception is thrown, encapsulate it in an own little try-catch error handler, ignore it and continue, so you can view and work with the rest of the data.\nIf you make any fixes, we will be happy to hear about them through ADN. \nThank you!</p>\n<h4>Summary</h4>\n<p>In Revit, all the elements are bundled together as a single list of elements under Document.Elements and are accessible through the document element iterator. \nThe element list contains thousands of elements in an unstructured list. \nFor Revit programmers, a task often becomes to find out a way to identify the object that you are looking for. \nIn this session, we have taken a closer look at the elements list in Revit drawing database. \nStarting with 'raw' data, we have analyzed it and learned how much is exposed currently. \nWe have attempted to group together among those exposed according to the grouping in UI. \nWe introduced the tool called RvtMgdDbg and showed you how to explore the internals using this tool. \nThrough these exercises, I hope you now have better view of Revit API than before.<p></p>\n<h4>Acknowledgement</h4>\n<p>Special thanks to Jim Awe and Arjun Ayyar of Advance Development Group of Autodesk. \nRvtMgdDbg was developed by Jim Awe and his team and originally intended for internal use only. \nThey have been continuously improving the tool, and making it available for the developer community.\nAnd many thanks again to Mikako for this overview!</p>\n</p></p>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "Installation",
    "local_header_href": "#installation",
    "chunk_text": "<h4>Installation</h4><p>RvtMgdDbg is an external Revit application, so it needs to be installed like any other such add-in, for instance by adding the relevant lines to Revit.ini.\nIt makes use of some bitmaps which it expects in a specific location. \nYou can change the location in the source code as you like and recompile, or simply ignore them, in which case they will not be displayed.\nThis does not matter, they do not affect the functionality of the tool.</p><p>It does occur that some specific properties on some specific objects throw exceptions. \nIf so, simply start RvtMgdDbg in the Visual Studio debugger, discover where the offending exception is thrown, encapsulate it in an own little try-catch error handler, ignore it and continue, so you can view and work with the rest of the data.\nIf you make any fixes, we will be happy to hear about them through ADN. \nThank you!</p>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "Summary",
    "local_header_href": "#summary",
    "chunk_text": "<h4>Summary</h4><p>In Revit, all the elements are bundled together as a single list of elements under Document.Elements and are accessible through the document element iterator. \nThe element list contains thousands of elements in an unstructured list. \nFor Revit programmers, a task often becomes to find out a way to identify the object that you are looking for. \nIn this session, we have taken a closer look at the elements list in Revit drawing database. \nStarting with 'raw' data, we have analyzed it and learned how much is exposed currently. \nWe have attempted to group together among those exposed according to the grouping in UI. \nWe introduced the tool called RvtMgdDbg and showed you how to explore the internals using this tool. \nThrough these exercises, I hope you now have better view of Revit API than before.<p></p>\n<h4>Acknowledgement</h4>\n<p>Special thanks to Jim Awe and Arjun Ayyar of Advance Development Group of Autodesk. \nRvtMgdDbg was developed by Jim Awe and his team and originally intended for internal use only. \nThey have been continuously improving the tool, and making it available for the developer community.\nAnd many thanks again to Mikako for this overview!</p>\n</p>"
  },
  {
    "original_filename": "0101_rvtmgddbg",
    "header_text": "Acknowledgement",
    "local_header_href": "#acknowledgement",
    "chunk_text": "<h4>Acknowledgement</h4><p>Special thanks to Jim Awe and Arjun Ayyar of Advance Development Group of Autodesk. \nRvtMgdDbg was developed by Jim Awe and his team and originally intended for internal use only. \nThey have been continuously improving the tool, and making it available for the developer community.\nAnd many thanks again to Mikako for this overview!</p>"
  }
]