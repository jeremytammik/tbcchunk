[
  {
    "original_filename": "1788_testrunner",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\n- Revit.TestRunner - Run UnitTests in Revit\n  https://forums.autodesk.com/t5/revit-api-forum/revit-testrunner-run-unittests-in-revit/m-p/9070621\n  https://github.com/geberit/Revit.TestRunner\n\n- Confusing assembly location when use one assembly for two Revit-Addin projects\n  https://forums.autodesk.com/t5/revit-api-forum/confusing-assembly-location-when-use-one-assembly-for-two-revit/m-p/9070282\n\n- importing PDFs made easy\n  https://archi-lab.net/importing-pdfs-made-easy\n\ntwitter:\n\nTestRunner for add-in unit testing, support assembly locations and importing PDF files in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/nunittestrunner\n\nA new Revit add-in unit testing framework, a short note on support assembly locations, and an article on importing PDF files\n&ndash; <code>Revit.TestRunner</code> runs unit tests in Revit\n&ndash; Getting started with <code>TestRunner</code>\n&ndash; Unconfusing support assemblies\n&ndash; Importing PDFs made easy...\n\nlinkedin:\n\nTestRunner for add-in unit testing, support assembly locations and importing PDF files in the #RevitAPI\n\nhttp://bit.ly/nunittestrunner\n\nA new Revit add-in unit testing framework, a short note on support assembly locations, and an article on importing PDF files:\n\n- Revit.TestRunner runs unit tests in Revit\n- Getting started with TestRunner\n- Unconfusing support assemblies\n- Importing PDFs made easy...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<p style=\"font-size: 80%; font-style:italic\"></p>\n\n-->"
  },
  {
    "original_filename": "1788_testrunner",
    "header_text": "TestRunner &ndash; Run Unit Tests in Revit",
    "local_header_href": "#testrunner-ndash-run-unit-tests-in-revit",
    "chunk_text": "### TestRunner &ndash; Run Unit Tests in Revit\n\nA new Revit add-in unit testing framework, a short note on support assembly locations, and an article on importing PDF files:\n\n- [`Revit.TestRunner` &ndash; run unit tests in Revit](#2)\n- [Getting started with `TestRunner`](#3)\n- [Unconfusing support assemblies](#4)\n- [Importing PDFs made easy](#5)"
  },
  {
    "original_filename": "1788_testrunner",
    "header_text": "Revit.TestRunner &ndash; Run Unit Tests in Revit",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Revit.TestRunner &ndash; Run Unit Tests in Revit\n\nWe mentioned several\ndifferent [Revit add-in unit testing frameworks](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.16) in\nthe past.\n\nTobias Fl√∂scher of [Geberit](https://www.geberit.com) now\nshares a new implementation based on [NUnit 3](https://nunit.org) that looks very promising indeed,\nin the [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [`Revit.TestRunner` &ndash; run unit tests in Revit](https://forums.autodesk.com/t5/revit-api-forum/revit-testrunner-run-unittests-in-revit/m-p/9070621),\nsaying:\n\nHello Developers,\n\nIn 2018, I started to program in the Revit API environment.\nIt was completely new to me, so I had to get familiar with the API and its peculiarities.\nI found The Building Coder blog, which helped me a lot.\n\nWe insourced an add-in that was originally developed by an external company.\nThe whole code lives in an assembly which references the Revit API.\nThen I realized, testing is hard.\nI refactored the code so that it was as much as possible independent from the Revit API.\nThis code was testable as I knew it, using tests run\non [continuous integration](https://en.wikipedia.org/wiki/Continuous_integration).\nBut a lot of code remained in the project referencing the Revit API.\n\nI asked Google what to do, but apparently there is not THE way to solve this problem.\n\nThere is some stuff around that seems cool, e.g.,  [RevitTestFramework](https://thebuildingcoder.typepad.com/blog/2018/08/revit-unit-test-framework-improvements.html),\nbut I was not happy with that.\nFurthermore, all I found uses NUnit 2.6, whereas all my Revit independent code is tested by the NUnit 3.x.\nThe build server doesn't like the mix.\n\nAs a result, I started to write my own TestRunner using NUnit 3.\nIt is far from perfect; nevertheless, I would like to share it with the community.\n\nPlease have a look at it in \nthe [Revit.TestRunner GitHub repository](https://github.com/geberit/Revit.TestRunner).\n\ntf_testrunner_start.png\n\nFeatures so far:\n\n- Using NUnit 3\n- No reference to Revit.TestRunner needed in test assembly\n- Support of NUnit attributes SetUp and TearDown\n- Injection of API objects in test method\n- Works as an add-in with GUI\n- Installation script for libraries\n- Post build event in VS project to place add-in manifest\n\nFeedback welcome!"
  },
  {
    "original_filename": "1788_testrunner",
    "header_text": "Getting Started with TestRunner",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Getting Started with TestRunner\n\nGet the code from GitHub and compile it.\nThe *Revit.TestRunner.addin* file will be automatically placed in the *ProgramData* add-in folder of the selected Revit version,\n\nIt is also possible to download the precompiled binaries.\nStart the *InstallAddin v20xx.cmd* of your favourite Revit version and run Revit. \n\nThe add-in hooks into the Revit 'Add-Ins' ribbon. \n\n<center>\n<img src=\"img/tf_testrunner_start.png\" alt=\"TestRunner ribbon tab\" width=\"347\">\n</center>\n\nBy pressing the button, a dialogue will appear.\nBy choosing your testing assembly, the view will show all your tests:\n\n<center>\n<img src=\"img/tf_testrunner_ui.png\" alt=\"TestRunner user interface\" width=\"802\">\n</center>\n\nSelect the node you want to test and press the 'Run'. All tests below the selected node will be executed.\n\n<center>\n<img src=\"img/tf_testrunner_ui_executed.png\" alt=\"TestRunner results\" width=\"802\">\n</center>\n\nVery many thanks to Tobias for implementing, documenting and sharing this very important new tool!"
  },
  {
    "original_filename": "1788_testrunner",
    "header_text": "Unconfusing Support Assemblies",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Unconfusing Support Assemblies\n\nA quick note on \na [confusing assembly location when using one assembly for two Revit add-in projects](https://forums.autodesk.com/t5/revit-api-forum/confusing-assembly-location-when-use-one-assembly-for-two-revit/m-p/9070282):\n\n**Question:** I created a support library project implement custom classes and functions and then used this library reference in two Revit add-in projects.\n\nI want to install each project separately, so each project should contain their own library assembly in their setup folder.\nIn this way, I can easily manage every single project without caring about others.\n\nI use the method `Assembly.GetExecutingAssembly` to check where the library.dll is referring to.\nWhen I first run the project 1, I get the correct assembly path &ndash; the project 1 folder.\nThen, I run project 2 and get the unexpected result: the path is in the project 1 folder again.\nThis should return project 2 folder as my expectation.\nA similar problem occurs if I run the project 2 first.\n\n**Answer:** If you load an assembly `A` into the .NET framework from directory `Da` and then load another version of assembly `A` from a different location `Db`, the .NET framework will determine that `A` has already been loaded and reuse the existing instance from `Da`, ignoring your request to load a second instance from `Db`. There are ways to work around this, presumably, but I will not even try to dive into that. I suggest that you design your two add-ins so that they do not rely on the location of the assembly `A` that you load in any way. You can easily move your assembly location determination code out of `A` into the main two add-ins instead."
  },
  {
    "original_filename": "1788_testrunner",
    "header_text": "Importing PDFs Made Easy",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Importing PDFs Made Easy\n\nKonrad Sobon of [@arch_laboratory](https://twitter.com/arch_laboratory) shared a new Dynamo solution\non [archi+lab](http://archi-lab.net)\nfor [importing PDFs made easy](https://archi-lab.net/importing-pdfs-made-easy),\nusing and expanding on the Revit 2020 ability to import PDF files and making it a little bit easier to place multi-page documents."
  }
]