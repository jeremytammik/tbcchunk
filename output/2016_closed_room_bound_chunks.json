[
  {
    "original_filename": "2016_closed_room_bound",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- Boost Your BIM by Harry Mattison\n  Journal File Magic & Exporting Groups to File (the grand finale)\n  https://boostyourbim.wordpress.com/2023/11/03/journal-file-magic-exporting-groups-to-file-the-grand-finale/\n  Journal File Magic & Exporting Groups to File (part 2)\n  https://boostyourbim.wordpress.com/2023/11/02/journal-file-magic-exporting-groups-to-file-part-2/\n  Journal File Magic & Exporting Groups to File (part 1)\n  https://boostyourbim.wordpress.com/2023/11/01/journal-file-magic-exporting-groups-to-file-part-1/\n\n- replacing [Revit 2024 'Other' Parameter Group] or BuiltInParameterGroup.INVALID\n  Revit 2024 'Other' Parameter Group\n  https://forums.autodesk.com/t5/revit-api-forum/revit-2024-other-parameter-group/td-p/12086226\n\ntwitter:\n\nJournal file magic, closed contiguous room boundary loop, challenges identifying adjacent rooms and ForgeTypeId for 'Other' parameter group with the @AutodeskAPS @AutodeskRevit #RevitAPI #BIM @DynamoBIM @AutodeskAPS https://autode.sk/roomboundary\n\nTaking a look at journal files, room boundaries, adjacent rooms, a ForgeTypeId question and where AI might lead\n&ndash; Harry's journal file magic\n&ndash; Closed contiguous room boundary loop\n&ndash; Challenges identifying adjacent rooms\n&ndash; ForgeTypeId for 'Other' parameter group\n&ndash; AI may obsolete all apps...\n\nlinkedin:\n\nJournal file magic, closed contiguous room boundary loop, challenges identifying adjacent rooms and ForgeTypeId for 'Other' parameter group with the #RevitAPI\n\nhttps://autode.sk/roomboundary\n\n- Harry's journal file magic\n- Closed contiguous room boundary loop\n- Challenges identifying adjacent rooms\n- ForgeTypeId for 'Other' parameter group\n- AI may obsolete all apps...\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2016_closed_room_bound",
    "header_text": "Journal Magic, Adjacent Rooms and Room Boundary",
    "local_header_href": "#journal-magic-adjacent-rooms-and-room-boundary",
    "chunk_text": "### Journal Magic, Adjacent Rooms and Room Boundary\n\nTaking a look at journal files, room boundaries, adjacent rooms, a ForgeTypeId question and one view of where AI might lead:\n\n- [Harry's journal file magic](#2)\n- [Closed contiguous room boundary loop](#3)\n- [Challenges identifying adjacent rooms](#4)\n- [ForgeTypeId for 'Other' parameter group](#5)\n- [AI may obsolete all apps](#6)"
  },
  {
    "original_filename": "2016_closed_room_bound",
    "header_text": "Harry's Journal File Magic",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Harry's Journal File Magic\n\nBoost Your BIM by Harry Mattison published a nice series\non [journal file magic and exporting groups to file](https://boostyourbim.wordpress.com/2023/11/03/journal-file-magic-exporting-groups-to-file-the-grand-finale/).\nTo be precise, it consists of three instalments:\n\n- [Journal File Magic &amp; Exporting Groups to File (part 1)](https://boostyourbim.wordpress.com/2023/11/01/journal-file-magic-exporting-groups-to-file-part-1/)\n- [Journal File Magic &amp; Exporting Groups to File (part 2)](https://boostyourbim.wordpress.com/2023/11/02/journal-file-magic-exporting-groups-to-file-part-2/)\n- [Journal File Magic &amp; Exporting Groups to File (grand finale)](https://boostyourbim.wordpress.com/2023/11/03/journal-file-magic-exporting-groups-to-file-the-grand-finale/)\n\nMany thanks to Harry for implementing and sharing this useful and educational solution."
  },
  {
    "original_filename": "2016_closed_room_bound",
    "header_text": "Closed Contiguous Room Boundary Loop",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Closed Contiguous Room Boundary Loop\n\nLoren Routh of [GSA](https://www.gsa.gov) presents a quick and easy method to reliably retrieve a closed contiguous boundary loop for a room using `GetRoomBoundaryAsCurveLoopArray` from the `ExporterIFC` module in his answer\nto [creating a generic model from area boundaries](https://forums.autodesk.com/t5/revit-api-forum/creating-a-generic-model-from-area-boundaries/m-p/12371317#M75201):\n\n> This just in:\nI tried the `GetRoomBoundaryAsCurveLoopArray` method, and it totally worked!\nYou need to import the `ExporterIFC` module, etc.\nThis method eliminated a chunk of code, no sorting or extracting the curves.\nIt let me create an extrusion (manually) with no errors at all!\nAs you can see by the pic below, this was not a rectangle.\nDefinitely has my vote to be included in the regular Revit API.\nNow to make it work with Generic Models...\n\n<pre class=\"prettyprint\">\n  import clr\n  clr.AddReferenceToFileAndPath(r'C:\\Program Files\\Autodesk\\Revit 2023\\AddIns\\IFCExporterUI\\Autodesk.IFC.Export.UI.dll')\n  clr.AddReference(\"RevitAPIIFC\")\n  from Autodesk.Revit.DB.IFC import ExporterIFC\n  from Autodesk.Revit.DB.IFC import ExporterIFCUtils\n\n  opt = DB.SpatialElementBoundaryOptions()\n\n  curve_loop = ExporterIFCUtils.GetRoomBoundaryAsCurveLoopArray(selected_area, opt, True)\n\n  with DB.Transaction(doc, \"Create Model Lines\") as tx:\n    tx.Start()\n\n    sketch_plane = DB.SketchPlane.Create(doc,selected_area.LevelId)\n\n    for loop in curve_loop:\n      for line in loop:\n        crv = doc_create.NewModelCurve(line, sketch_plane)\n\n    tx.Commit()\n</pre>\n\n<center>\n<img src=\"img/getroomboundaryascurvelooparray.png\" alt=\"GetRoomBoundaryAsCurveLoopArray\" title=\"GetRoomBoundaryAsCurveLoopArray\" width=\"500\"/> <!-- Pixel Height: 1,278 Pixel Width: 1,590 -->\n</center>\n\nMany thanks to Loren for sharing this valuable hint."
  },
  {
    "original_filename": "2016_closed_room_bound",
    "header_text": "Challenges Identifying Adjacent Rooms",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Challenges Identifying Adjacent Rooms\n\nIlia Krachkovskii [shared](https://www.linkedin.com/posts/ilia-krachkovskii_im-currently-working-on-a-so-called-spatial-activity-7125803558834167808-NXwt?utm_source=share&utm_medium=member_desktop) some\nthoughts and challenges identifying adjacent rooms\n\n> I'm currently working on a so-called \"Spatial Breakdown System\" that identifies location and generates corresponding location code for each element in Revit model. It will allow architects at Marco Casamonti & Partners / Archea Associati to create very flexible schedules and will help with data management inside the projects.\n\n> I have been working with Revit API for quite some time, and just recently started to understand all the complaints one can find on countless threads: so far I have 15 different methods for calculating the room (or the nearest room) for various types of elements. Here are some of them:\n\n> - non-bounding walls: place points on wall curve every X meters using Evaluate() method, check room on each point using GetRoomAtPoint() method.\n- bounding walls: same, but for each point I calculate the normal to the curve (using ComputeDerivatives() method) and check the points on a specified distance from wall curve.\n- roofs: usually they cover lots of rooms, so it's just excessive.\n- furniture: LocationPoint and LocationCurve don't always work, so the backup plan is just checking the centerpoint of a BoundingBox.\n- door and windows: fairly easy, since they have a built-in FromRoom and ToRoom property.\n- floors and ceilings: along with walls, one of the most tricky, but more precise method that features cross-referencing. Find all rooms that contain BoundingBox of a floor, get LocationPoint of each room, and shoot a checking ray from each point using ReferenceIntersector up or down, depending on the element class. If there is an intersection - boom, there's a room that contains your floor or ceiling. Pretty fascinating approach that deserves its own article.\n- stair runs and landings are harder to collect, since they act as a part of the Stair. Getting location can be done with GetRoomAtPoint() method using a BoundingBox centerpoint, however, it may be more reliable to calculate run curve midpoint using GetStairsPath().\n- model in place is the most atrocious piece to work with. They don't have built-in level parameters or anything else that easily identifies them in space. They have only geometry, so the easiest approach, again, would be simply checking the bounding box points - which has many accuracy issues.\n- curtain wall panels and mullions: one could get the location from the host wall, but they usually cover several rooms. My approach: take BoundingBox, enlarge X and Y dimensions by K meters and check for intersection with any rooms in the project.\n\n> Code sample below is used to calculate all the rooms that are formed by (or those that are very near to) a particular wall:\n\n<center>\n<img src=\"img/wall_get_all_adjacent_rooms.jpg\n\" alt=\"Retrieve adjacent rooms\" title=\"Retrieve adjacent rooms\" width=\"600\"/> <!-- Pixel Height: 1,530 Pixel Width: 1,656 -->\n</center>"
  },
  {
    "original_filename": "2016_closed_room_bound",
    "header_text": "ForgeTypeId for 'Other' Parameter Group",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> ForgeTypeId for 'Other' Parameter Group\n\nKevin Fielding shared a quick, easy and effective solution for replacing the `Other` parameter group or the `BuiltInParameterGroup` `INVALID` in his thread\non [Revit 2024 'Other' parameter group](https://forums.autodesk.com/t5/revit-api-forum/revit-2024-other-parameter-group/td-p/12086226):\n\nWith the changeover to `ForgeTypeId` and `GroupTypeId` in Revit 2024 instead of the `BuiltInParameterGroup` enumerations, I just wanted to share how to define the 'Other' group for parameters, as it doesn't appear to be documented.\n\nWhereas previously you would use\n\n<pre class=\"prettyprint\">\n  BuiltInParameterGroup.INVALID\n</pre>\n\nIn 2024 and beyond you need to use\n\n<pre class=\"prettyprint\">\n  new ForgeTypeId(string.Empty)\n</pre>\n\nOther groups can be found using the `GroupTypeId` class, like `GroupTypeId.Data`.\n\nHope this helps others searching for this.\n\nIn fact, the same question came up again in the question\non [Revit 2024 GroupTypeId missing ParameterGroup Other (Invalid)](https://forums.autodesk.com/t5/revit-api-forum/revit-2024-grouptypeid-missing-parametergroup-other-invalid/m-p/12288651/highlight/false#M74502).\n\nThanks, Kevin, for clarifying this!"
  },
  {
    "original_filename": "2016_closed_room_bound",
    "header_text": "AI May Obsolete All Apps",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> AI May Obsolete All Apps\n\nBill Gates presents an interesting vision of the future of personal computing\nin [The future of agents &ndash; AI is about to completely change how you use computers &ndash; and upend the software industry](https://www.gatesnotes.com/AI-agents)."
  }
]