[
  {
    "original_filename": "1118_balloon_tip",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1118_balloon_tip",
    "header_text": "Another Balloon Tip Implementation",
    "local_header_href": "#another-balloon-tip-implementation",
    "chunk_text": "<h3>Another Balloon Tip Implementation</h3><p>Alexander Ignatovich, or Игнатович Александр, responds to the recent discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/using-balloon-tips-in-revit.html\">\nusing balloon tips in Revit</a> and says:\n\n<blockquote>\n<p>I want to share another solution for balloon tips for custom messages, without using the unsupported AdWindows library.</p>\n<p>Just see the project attached in\n\n<a href=\"zip/YetAnotherBalloonTip.zip\">YetAnotherBalloonTip.zip</a>\n\n:-)</p>\n</blockquote>\n<p>Alexander's solution provides three different sample commands:</p>\n<ul>\n<li>Simple balloon</li>\n<li>Warning balloon</li>\n<li>Balloon from another thread</li>\n</ul>\n<p>The implementation is packaged in a separate self-contained class named NotifyBox, so instantiating a simple balloon tip is really very simple indeed, in one single constructor call:</p>\n<pre class=\"code\">\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> IVC.NotifyBox.Controls;\n<span class=\"blue\">using</span> IVC.NotifyBox.ViewModel.Enums;\n \n<span class=\"blue\">namespace</span> YetAnotherBaloons\n{\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">StartSimpleBaloonCommand</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">NotifyBox</span>.Show( <span class=\"maroon\">\"Hello\"</span>, <span class=\"maroon\">\"Hello from \"</span>\n        + <span class=\"maroon\">\"Investicionnaya Venchurnaya Companiya ;-)\"</span>,\n        <span class=\"teal\">NotificationDuration</span>.Short );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre>\n<p>An argument enables you to specify the duration.</p>\n<p>The resulting balloon tip looks like this, and fades away after a moment:</p>\n<center>\n<img alt=\"Simple balloon tip\" src=\"img/balloon_tip_simple.png\" width=\"407\"/>\n</center>\n<p>Another argument allows you to specify an icon, e.g. to implement a warning balloon tip:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">StartWarningBaloonCommand</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">NotifyBox</span>.Show( <span class=\"maroon\">\"Warning\"</span>,\n        <span class=\"maroon\">\"Warning! Something is not perfect :)\"</span>,\n        <span class=\"teal\">NotificationIcon</span>.Warning,\n        <span class=\"teal\">NotificationDuration</span>.Medium );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n</pre>\n<p>The resulting balloon tip includes an icon:</p>\n<center>\n<img alt=\"Balloon tip with a warning icon\" src=\"img/balloon_tip_warning.png\" width=\"403\"/>\n</center>\n<p>Since the balloon tip class is completely independent of Revit, it can obviously be called from a different thread as well:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">StartBaloonFromAnotherThreadCommand</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      System.Threading.Tasks.<span class=\"teal\">Task</span>.Factory.StartNew( () =&gt;\n      {\n        <span class=\"teal\">Thread</span>.Sleep( <span class=\"teal\">TimeSpan</span>.FromSeconds( 3 ) );\n \n        <span class=\"teal\">NotifyBox</span>.Show( <span class=\"maroon\">\"Warning\"</span>,\n          <span class=\"maroon\">\"This message is from another thread!\"</span>,\n          <span class=\"teal\">NotificationIcon</span>.Warning,\n          <span class=\"teal\">NotificationDuration</span>.Medium );\n      } );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n</pre>\n<p>Many thanks to Alexander for sharing this!</p>\n</p>"
  }
]