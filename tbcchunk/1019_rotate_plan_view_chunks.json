[
  {
    "original_filename": "1019_rotate_plan_view",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1019_rotate_plan_view",
    "header_text": "Rotating a Plan View",
    "local_header_href": "#rotating-a-plan-view",
    "chunk_text": "<h3>Rotating a Plan View</h3><p>Here is a query from the Autodesk Revit API discussion forum dealing with the\n\n<a href=\"http://forums.autodesk.com/t5/Autodesk-Revit-API/Rotate-a-viewplan-after-creation/td-p/3842914\">\nrotation of a plan view</a>:</p><p><strong>Question:</strong> I am trying to create rotated duplicates of existing views using the Revit 2013 API.</p><p>I managed to create the view, both as dependent and not.\nAfter this I activate the view crop box and make it visible.</p><p>I then create a rotation transformation.\nWhen I debug it, I can see that the transformation and rotation of the bounding box is ok.</p><p>I try to set the rotated bounding box as the crop box.\nHowever, this does not work, and all I get is the standard identity matrix.</p><p>I have a right handed rotation, and use basis Z as the rotation axis.\nI have a reference to a transaction inside the method, but have also tried to encapsulate the specific part into a sub transaction.</p><p>This way of doing things is according to the Revit 2013 API documentation.\nIt states that the bounding box can be rotated, then used as section box/crop box, and provides to following example code for this:</p><pre class=\"code\">\n<span class=\"blue\">private</span> <span class=\"blue\">void</span> RotateBoundingBox( <span class=\"teal\">View3D</span> view3d )\n{\n  <span class=\"teal\">BoundingBoxXYZ</span> box = view3d.SectionBox;\n \n  <span class=\"blue\">if</span>( !box.Enabled )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Revit\"</span>,\n      <span class=\"maroon\">\"The View3D section box is not enabled.\"</span> );\n    <span class=\"blue\">return</span>;\n  }\n \n  <span class=\"green\">// Create a rotation transform</span>\n \n  <span class=\"teal\">Transform</span> rotate = <span class=\"teal\">Transform</span>.get_Rotation(\n    <span class=\"teal\">XYZ</span>.Zero, <span class=\"teal\">XYZ</span>.BasisZ, 2 );\n \n  <span class=\"green\">// Transform the SectionBox </span>\n  <span class=\"green\">// with the rotation transfrom</span>\n \n  box.Transform = box.Transform.Multiply( rotate );\n  view3d.SectionBox = box;\n}\n</pre><p>I tried to use it like this:</p><pre class=\"code\">\n  <span class=\"teal\">ViewPlan</span> rotatedView = doc.GetElement(\n    viewToDuplicate.Duplicate(\n      <span class=\"teal\">ViewDuplicateOption</span>.AsDependent ) )\n        <span class=\"blue\">as</span> <span class=\"teal\">ViewPlan</span>;\n \n  rotatedView.CropBoxActive = <span class=\"blue\">true</span>;\n  rotatedView.CropBoxVisible = <span class=\"blue\">true</span>;\n \n  <span class=\"teal\">BoundingBoxXYZ</span> box = rotatedView.CropBox;\n \n  <span class=\"teal\">XYZ</span> originOfRotation = 0.5 * (box.Max - box.Min);\n  <span class=\"teal\">XYZ</span> axizOfRotation = <span class=\"teal\">XYZ</span>.BasisZ;\n \n  <span class=\"teal\">Transform</span> rotate = <span class=\"teal\">Transform</span>.get_Rotation(\n    originOfRotation, axizOfRotation, <span class=\"teal\">Math</span>.PI );\n \n  box.Transform = box.Transform.Multiply( rotate );\n \n  rotatedView.CropBox = box;\n</pre><p>I also tried using the ElementTransformUtils.RotateElement method.</p><p>Both approaches yield no result.</p><p>Manually I make sure the plan is situated to 'Project north', show the crop box, select it, rotate it and the view is rotated accordingly.</p><p>The desired result is a dependent view rotated at the point of creation.\nI need to create several views at once, e.g. 4-8 differently rotated ones of the same plan, to create evacuation plans.</p><p>Let me reiterate my requirement and manual solution:</p>"
  },
  {
    "original_filename": "1019_rotate_plan_view",
    "header_text": "Issue – Rotating view plans",
    "local_header_href": "#issue-rotating-view-plans",
    "chunk_text": "<h4>Issue – Rotating view plans</h4><p>For creating evacuation plans for a floor, I need to create rotated dependent views so that the person looking at the plan on the inside of a door sees the situation the same way as the corridor outside.</p><p>I can achieve it manually like this:</p><ul>\n<li>Create the floor, i.e. when modelling the building.</li>\n<li>Apply all the required fire symbols.</li>\n<li>Create three duplicates as dependent views.</li>\n<li>Apply the crop region to each.</li>\n<li>Rotate each plan individually by rotating the crop box.</li>\n<li>Create filled regions to show which room the current plan applies to.</li>\n<li>Hide the 'you are here' symbols in all other rooms.</li>\n<li>Optionally rotate the symbols as well.</li>\n<li>Place these views on corresponding sheets.</li>\n</ul><p>This is obviously a very time consuming operation.</p><p>I have already implemented methods to create the fire and evacuation plans.</p><p>The issue I am now dealing with is the rotation of the crop region.</p><p>I do get the transformation, but I am not able to apply it to the crop region.\nSomething fails and the transformation remains unchanged.</p><p>How can I fix this, please?</p><p><strong>Answer:</strong> Yes,\n\n<a href=\"http://cad-notes.com/2010/04/rotating-revit-views\">\nrotating a view</a> in\n\nthe user interface is perfectly straightforward, just as you say:</p><p>In the API, the issue is also clear: The element to rotate is not the view, but rather the crop box element associated to it.</p><p>If it is visible, it can be found using a filtered element collector taking document and view element id arguments.</p><p>Here is a macro that works based on your sample code:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> CreateDuplicatedRotatedCroppedView(\n    <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">View</span> activeView = doc.ActiveView;\n    <span class=\"teal\">View</span> duplicated = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      t.Start( <span class=\"maroon\">\"Duplicate View\"</span> );\n \n      duplicated = doc.GetElement(\n        activeView.Duplicate(\n          <span class=\"teal\">ViewDuplicateOption</span>.WithDetailing ) )\n            <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n \n      t.Commit();\n    }\n \n    <span class=\"teal\">Element</span> cropBoxElement = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">TransactionGroup</span> tGroup\n      = <span class=\"blue\">new</span> <span class=\"teal\">TransactionGroup</span>( doc ) )\n    {\n      tGroup.Start( <span class=\"maroon\">\"Temp to find crop box element\"</span> );\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t2 = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n        doc, <span class=\"maroon\">\"Temp to find crop box element\"</span> ) )\n      {\n        <span class=\"green\">// Deactivate crop box</span>\n \n        t2.Start();\n        duplicated.CropBoxVisible = <span class=\"blue\">false</span>;\n        t2.Commit();\n \n        <span class=\"green\">// Get all visible elements;</span>\n        <span class=\"green\">// this excludes hidden crop box</span>\n \n        <span class=\"teal\">FilteredElementCollector</span> collector\n          = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(\n            doc, duplicated.Id );\n \n        <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; shownElems\n          = collector.ToElementIds();\n \n        <span class=\"green\">// Activate crop box</span>\n \n        t2.Start();\n        duplicated.CropBoxVisible = <span class=\"blue\">true</span>;\n        t2.Commit();\n \n        <span class=\"green\">// Get all visible elements excluding</span>\n        <span class=\"green\">// everything except the crop box</span>\n \n        collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(\n          doc, duplicated.Id );\n        collector.Excluding( shownElems );\n        cropBoxElement = collector.FirstElement();\n      }\n      tGroup.RollBack();\n    }\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t3 = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      <span class=\"teal\">BoundingBoxXYZ</span> bbox = duplicated.CropBox;\n \n      <span class=\"teal\">XYZ</span> center = 0.5 * ( bbox.Max + bbox.Min );\n \n      <span class=\"teal\">Line</span> axis = <span class=\"teal\">Line</span>.CreateBound(\n        center, center + <span class=\"teal\">XYZ</span>.BasisZ );\n \n      t3.Start( <span class=\"maroon\">\"Rotate crop box element\"</span> );\n \n      <span class=\"teal\">ElementTransformUtils</span>.RotateElement( doc,\n        cropBoxElement.Id, axis, <span class=\"teal\">Math</span>.PI / 6.0 );\n \n      t3.Commit();\n    }\n  }\n</pre><p>There are several noteworthy points in here.</p><p>All the transactions could be assimilated into one group, if desired.</p><p>The crop box element is retrieved using a clever trick: first hide it, retrieve the set V of all visible elements, unhide it and again retrieve all visible elements, this time excluding the set V.\nClever, huh?</p>"
  }
]