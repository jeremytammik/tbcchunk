[
  {
    "original_filename": "1143_wav_db_python_gui",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1143_wav_db_python_gui",
    "header_text": "WAV Database, Python and GUI Tutorials",
    "local_header_href": "#wav-database-python-and-gui-tutorials",
    "chunk_text": "<h3>WAV Database, Python and GUI Tutorials</h3><p>My son Christopher is thinking of creating a music database for his personal use supporting some strict requirements that other databases do not fulfil.</p><p>That prompted me to jot down some advice and a couple of starting points.</p><p>The initial requirements are simple.</p><p><strong>Question:</strong> I am wondering if I should build my own sample management software since it seems to be quite difficult to find anything useful...</p><p>My wishes:</p><ul>\n<li>Build a database of sounds and tags, categories, comments etc. for WAV files</li>\n<li>Manage several collections (SoundEffects, Fieldrecordings, Music, Interviews)</li>\n<li>Search filenames, tags etc. in certain collection or across all collections</li>\n<li>Copy file from original location to other location</li>\n<li>Export database to file (text?)</li>\n</ul><p>One more (advanced) feature would be:</p><ul>\n<li>Read embedded Metadata, e.g. INFO and BEXT Chunks in the wave files head</li>\n</ul><p>Appendix B in the guidelines on\n\n<a href=\"http://www.digitizationguidelines.gov/audio-visual/documents/Embed_Intro_090915.pdf\">\nEmbedding Metadata in Digital Audio Files</a>\n\nmight be interesting.</p><p>But I still have to figure out how this actually looks in the file itself.</p><p>I tested writing some info into a wave file and it shows up somwhere at the beginning (looking at it in notepad++).</p><p><strong>Answer:</strong> This should not be too hard.</p><p>I love the NoSQL concept and have some small experience using CouchDB.</p><p>That would easily do everything you need, and on a web server, as well.</p><p>Mediainfo on my mac reads metadata from a WAV file, for instance the title in this case:</p><pre>\n/downloads/mh/sailor/ $ mediainfo *wav\nGeneral\nComplete name                            : 3-26 Sailor With the Navy Blue Eyes.wav\nFormat                                   : Wave\nFile size                                : 27.1 MiB\nDuration                                 : 2mn 40s\nOverall bit rate mode                    : Constant\nOverall bit rate                         : 1 411 Kbps\nTrack name                               : Sailor With the Navy Blue Eyes\n\nAudio\nFormat                                   : PCM\nFormat settings, Endianness              : Little\nFormat settings, Sign                    : Signed\nCodec ID                                 : 1\nDuration                                 : 2mn 40s\nBit rate mode                            : Constant\nBit rate                                 : 1 411.2 Kbps\nChannel(s)                               : 2 channels\nSampling rate                            : 44.1 KHz\nBit depth                                : 16 bits\nStream size                              : 27.1 MiB (100%)\n\n/downloads/mh/sailor/ $ mediainfo --Version\nMediaInfo Command line,\nMediaInfoLib - v0.7.62\n</pre><p>I use\n\n<a href=\"https://code.google.com/p/mutagen\">\nmutagen</a> for\n\nall my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/super-insane-mp3-and-songbird-playlist-exporter.html#6\">\nmusic file analysis needs</a>.</p><p><strong>Response:</strong> Mutagen only supports id3 tags, which are not supported in WAV.\nThe Python\n\n<a href=\"https://docs.python.org/2/library/chunk.html\">chunk library</a> might\n\nbe the answer.</p><p>I have to look into analysing wave chunks some more...</p><p>Here is what mediainfo tells me about my file:</p><pre>\nAllgemein\nComplete name                            : F:\\Library\\_TestFiles\\2014_03_20_Nora-Tammik\\ZOOM0001\\ZOOM0001_LR.WAV\nFormat                                   : Wave\nFile size                                : 20,6 MiB\nDuration                                 : 1min 15s\nOverall bit rate mode                    : konstant\nOverall bit rate                         : 2 309 Kbps\nProducer                                 : ZOOM Handy Recorder H6\nDescription                              : sPROJECT= / sSCENE=1 / sTAKE=1 / sNOTE=nora tammik, first visit, 3 weeks old, moan, press, fart,\nEncoded date                             : 2014-04-20 14:08:39\nEncoding settings                        : A=PCM,F=48000,W=24,M=stereo,T=ZOOM Handy Recorder H6 MS S: +1\n\nAudio\nID                                       : 0\nFormat                                   : PCM\nFormat settings, Endianness              : Little\nCodec ID                                 : 1\nDuration                                 : 1min 15s\nBit rate mode                            : konstant\nBit rate                                 : 2 304 Kbps\nChannel(s)                               : 2 Kan√§le\nSampling rate                            : 48,0 KHz\nBit depth                                : 24 bits\nStream size                              : 20,6 MiB (100%)\n</pre><p>The interesting aspects are:</p><ul>\n<li>I don't have to analyse anything.</li>\n<li>It tells me everything I want to know.</li>\n<li>The description contains data I entered in a program that edits the wave info chunks I want to read out.</li>\n<li>The file also tells me the length, size, sampling rate, bit depth, file size, path and filename.</li>\n</ul><p>How should I start going about this?</p><p>I guess I need to build a GUI, have a database and use some libraries handling the file readout and playback?</p><p>I'm not quite sure where to start.</p><p>The only things I have written so far are small command line tools and calculators.</p><p>But I would like to do some GUI.</p><p><strong>Answer:</strong> Yes, the chunk library looks perfect.</p><p>I would start by working through a quick Python tutorial, followed by one of the GUI packages tutorial.\nTkinter is the most global one, supported on all platforms, built into Python:</p><ul>\n<li><a href=\"http://learnpythonthehardway.org\">Learn Python the hard way</a></li>\n<li><a href=\"http://www.tutorialspoint.com/python/python_gui_programming.htm\">Python GUI programming</a></li>\n</ul>"
  }
]