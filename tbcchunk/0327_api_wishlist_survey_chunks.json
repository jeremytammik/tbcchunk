[
  {
    "original_filename": "0327_api_wishlist_survey",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0327_api_wishlist_survey",
    "header_text": "API Wish List Survey Results",
    "local_header_href": "#api-wish-list-survey-results",
    "chunk_text": "<h3>API Wish List Survey Results</h3><p>Picking up on Kean's announcement of the \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2010/03/autocad-2011-is-now-shipping.html\">\navailability of the 2011 family of Autodesk products</a> I thought I might mention how the list of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/revit-2011-is-coming.html\">\nRevit 2011 API features</a> that I published yesterday ties in with the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/api-wish-list-survey-reminder.html\">\nRevit API wish list survey</a>\n\nthat we held last summer.\n\n<p>Here are the results of the survey, with the areas that are addressed by the Revit 2011 API highlighted in bold:\n\n<ol>\n<li><strong>Better integration into Revit user interface</strong>.</li>\n<li><strong>Interactive user selection of element ends, intersections and faces</strong>.</li>\n<li><strong>Ability to post and handle custom errors</strong>.</li>\n<li>Access to the Revit project browser.\n<li>Creation of docked windows in the Revit user interface.\n<li>Open a Revit document in the user interface.\n<li>Access to views.\n<li>Encode more complex formulas into family parameters.\n<li>Change existing element behaviour, such as the join behaviour of a wall.\n<li><strong>Event handlers for elements when added, deleted, changed, moved or selected</strong>.</li>\n</li></li></li></li></li></li></ol>\n<p>Add-ins do not yet have full access to all aspects of the Revit user interface, but it been substantially improved by many of the new features, e.g. task dialogues, add-in manifest file functionality, the new element selection and point picking, the failure API, and many more.\n\n<p>I have always been surprised that the wish for element level event handlers ended up last on this list, since I personally would have placed it much higher, and also saw a huge number of requests for it from the developer community.\nTherefore it pleases me all the more that it ended up being addressed, and not just by one new feature, but by two, the dynamic model update and elements changed event.\nIt will be very exciting to see what use can be made of these and all the other new possibilities!</p></p></p></p>"
  }
]