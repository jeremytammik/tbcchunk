[
  {
    "original_filename": "0688_unit_display_str",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0688_unit_display_str",
    "header_text": "Unit Conversion and Display String Formatting",
    "local_header_href": "#unit-conversion-and-display-string-formatting",
    "chunk_text": "<h3>Unit Conversion and Display String Formatting</h3><p>AU went very well for me, and I think this was the one I liked most of all so far, to my own surprise.\nNow I am already at the next conference in Moscow, from where I continue to Tel Aviv tomorrow.\nDecember is always my monster travelling month, and I never get to prepare for Christmas or enjoy the dark and cosy celebration of\n\n<a href=\"http://en.wikipedia.org/wiki/Advent\">\nAdvent</a>.\n\nBut I really did have fun and enjoy AU in Las Vegas.\n\n<p>Sunday morning my colleague Marat Mirgaleev invited me to join him in his weekly volleyball game, which was a wonderful break from the conference presentation preparation.\nMarat is also a member of the ADN DevTech team and spelled Марат Миргалеев in Cyrillic.\nAnother Autodesk colleague who also joined was Rustam Ibragimov, Рустам Ибрагимов.\nHere are Rustam, Marat, I and our all-time star, the volleyball herself:</p>\n<center>\n<img alt=\"Rustam, Marat, Jeremy and the volleyball\" src=\"img/rustam_marat_jeremy_volleyball.jpg\" width=\"400\"/>\n</center>\n<p>Here we are now in the Autodesk Moscow office:</p>\n<center>\n<img alt=\"DevDay conference in Moscow\" src=\"img/devday_moscow_2011-12-05_8311.jpg\" width=\"400\"/>\n</center>\n<p>Fittingly enough, here is a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/unit-conversion.html?cid=6a00e553e1689788330154379044c3970c#comment-6a00e553e1689788330154379044c3970c\">\nquestion</a> from\n\nRussia, by Victor Chekalin, or Виктор Чекалин in Cyrillic, on formatting a floating point number as a display string using the current project units.\nThis issue has cropped up several times recently, and various  solutions based on the same principle have been suggested, among others by Joe Offord of\n\n<a href=\"http://www.enclos.com\">\nEnclos</a>,\n\nwho already shared insights on accessing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/curtain-wall-geometry.html\">\ncurtain wall geometry</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/speed-up-selection.html\">\nspeeding up the interactive selection process</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/mirroring-in-a-new-family-and-changing-active-view.html\">\nmirroring in a new family and changing the active view</a>, and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/planar-face-transform.html\">\nconstructing a planar face transform</a>.\n\n<p>All of the solutions to this problem I have seen revolve around stuffing in the value to format into an unused parameter picked up from some arbitrary database element and then calling the AsValueString method on it.\nThe Parameter class provides this functionality, but unfortunately the API does not include any stand-alone access to it.\n\n\nHere is Victor's initial query:\n\n<p><strong>Question:</strong> I need to convert a numeric value to a corresponding display string honouring the current Revit ProjectUnit setting. I cannot find how to do it in the Revit help and began search the answer in your amazing site. I found the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/unit-conversion.html\">\nUnit Conversion</a> tool\n\nand thought it would fulfil my need, but I was wrong :(\n\n<p>Looking at the Unit Converter code, I discovered that retrieving scale factor to internal units is not easy and you used some trick to get it: you change ProjectUnit, write \"1\" to family parameter, read value from this parameter, change ProjectUnit back. It works but is really hard and is not an official way.\n\n<p><strong>Answer:</strong> Try something like this on some otherwise unused length parameter 'p':\n\n<pre class=\"code\">\n  <span class=\"blue\">Dim</span> value <span class=\"blue\">As</span> <span class=\"blue\">String</span> = <span class=\"maroon\">\"=2' + 4'/3\"</span>\n  <span class=\"blue\">Dim</span> t <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc, <span class=\"maroon\">\"Format Length\"</span>)\n  t.Start()\n  p.SetValueString(value)\n  value = p.AsValueString\n  t.RollBack()\n  <span class=\"blue\">Return</span> value\n</pre>\n<p>In fact, Joe provided the following helper methods based on this idea implemented in VB:\n\n<ul>\n<li>StringValueString – Converts a string to AsValueString equivalent.\n<li>DblValueString – Converts a double to AsValueString equivalent.\n<li>ValueStringDbl – Converts a ValueString to a double.\n</li></li></li></ul>\n<p>All three of these methods create and then roll back a temporary transaction to perform their task.\n\n<p>Here is the full implementation of the first of these, StringValueString:\n\n<pre class=\"code\">\n  <span class=\"blue\">Public</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Function</span> StringValueString( _\n    <span class=\"blue\">ByVal</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>, _\n    <span class=\"blue\">ByVal</span> value <span class=\"blue\">As</span> <span class=\"blue\">String</span>) <span class=\"blue\">As</span> <span class=\"blue\">String</span>\n \n    <span class=\"green\">' Locate the arbitrary Length parameter</span>\n \n    <span class=\"blue\">Dim</span> p <span class=\"blue\">As</span> <span class=\"teal\">Parameter</span> _\n      = doc.ProjectInformation.Parameter( _\n      <span class=\"maroon\">\"Parameter Name\"</span>)\n \n    <span class=\"blue\">If</span> p <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n      <span class=\"teal\">TaskDialog</span>.Show( _\n        <span class=\"maroon\">\"Revit\"</span>, _\n        <span class=\"maroon\">\"Missing Project Parameter: Parameter Name\"</span>)\n      <span class=\"blue\">Return</span> value\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Dim</span> tr <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n    tr.Start(<span class=\"maroon\">\"Format Length\"</span>)\n \n    <span class=\"blue\">Try</span>\n      p.SetValueString(value)\n      value = p.AsValueString\n    <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> <span class=\"teal\">Exception</span>\n \n    <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n \n    tr.RollBack()\n \n    <span class=\"blue\">Return</span> value\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre>\n<p>For the second, DblValueString, simply replace the input argument by a floating-point value 'ByVal value As Double' and the two lines to perform the actual conversion by\n\n<pre class=\"code\">\n    p.Set(value)\n    sValueString = p.AsValueString\n</pre>\n<p>Finally, for the third, ValueStringDbl, the input argument 'value' is again a string and the conversion to the floating-point return value is performed by\n\n<pre class=\"code\">\n    p.SetValueString(value)\n    dValue = p.AsDouble\n</pre>\n<p><strong>Response:</strong> Thanks for the answer.\n\n<p>I wrote some simple extension methods for the Revit API Parameter class to get value in project units and in meters value.\nNow it works with Length, Volume and Area (now I don't need any more).\nIt would take much time to add support for all unit conversions.\n\n<p>Here is the entire implementation of my\n\n<a href=\"http://pastebin.com/ULHxU95E\">\nParameterUnitConverter class</a>.\n\nIt defines the following methods and data:\n\n<ul>\n<li>AsProjectUnitTypeDouble – Parameter extension method to retrieve double value parameter in ProjectUnits.\n<li>AsMetersValue – Parameter extension method to retrieve double value of parameter in meters unit, i.e. length in meters, area in square meters and volume in cubic meters.\n<li>ConvertParameterTypeToUnitType – static method to return the corresponding UnitType for a given ParameterType.\n<li>_map_parameter_type_to_unit_type – a dictionary mapping ParameterType enumeration values to the corresponding UnitType ones.\n</li></li></li></li></ul>\n<p>Here is the complete implementation of this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">ParameterUnitConverter</span>\n{\n  <span class=\"blue\">private</span> <span class=\"blue\">const</span> <span class=\"blue\">double</span> METERS_IN_FEET = 0.3048;\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">double</span> AsProjectUnitTypeDouble(\n    <span class=\"blue\">this</span> <span class=\"teal\">Parameter</span> param )\n  {\n    <span class=\"blue\">if</span>( param.StorageType != <span class=\"teal\">StorageType</span>.Double )\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotSupportedException</span>(\n        <span class=\"maroon\">\"Parameter does not have double value\"</span> );\n \n    <span class=\"blue\">double</span> imperialValue = param.AsDouble();\n \n    <span class=\"teal\">Document</span> document = param.Element.Document;\n \n    <span class=\"teal\">UnitType</span> ut = ConvertParameterTypeToUnitType(\n      param.Definition.ParameterType );\n \n    <span class=\"teal\">FormatOptions</span> fo = document.ProjectUnit\n      .get_FormatOptions( ut );\n \n    <span class=\"teal\">DisplayUnitType</span> dut = fo.Units;\n \n    <span class=\"green\">// Unit Converter</span>\n    <span class=\"green\">// http://www.asknumbers.com</span>\n \n    <span class=\"blue\">switch</span>( dut )\n    {\n<span class=\"blue\">      #region</span> Length\n \n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_METERS:\n        <span class=\"blue\">return</span> imperialValue * METERS_IN_FEET; <span class=\"green\">//feet</span>\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_CENTIMETERS:\n        <span class=\"blue\">return</span> imperialValue * METERS_IN_FEET * 100;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_DECIMAL_FEET:\n        <span class=\"blue\">return</span> imperialValue;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_DECIMAL_INCHES:\n        <span class=\"blue\">return</span> imperialValue * 12;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_FEET_FRACTIONAL_INCHES:\n        NotSupported( dut );\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_FRACTIONAL_INCHES:\n        NotSupported( dut );\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_METERS_CENTIMETERS:\n        <span class=\"blue\">return</span> imperialValue * METERS_IN_FEET; <span class=\"green\">//feet</span>\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_MILLIMETERS:\n        <span class=\"blue\">return</span> imperialValue * METERS_IN_FEET * 1000;\n \n<span class=\"blue\">      #endregion</span> <span class=\"green\">// Length</span>\n \n<span class=\"blue\">      #region</span> Area\n \n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_SQUARE_FEET:\n        <span class=\"blue\">return</span> imperialValue;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_ACRES:\n        <span class=\"blue\">return</span> imperialValue * 1 / 43560.039;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_HECTARES:\n        <span class=\"blue\">return</span> imperialValue * 1 / 107639.104;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_SQUARE_CENTIMETERS:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow( METERS_IN_FEET * 100, 2 );\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_SQUARE_INCHES:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow( 12, 2 );\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_SQUARE_METERS:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow( METERS_IN_FEET, 2 );\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_SQUARE_MILLIMETERS:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow( METERS_IN_FEET * 1000, 2 );\n \n<span class=\"blue\">      #endregion</span> <span class=\"green\">// Area</span>\n \n<span class=\"blue\">      #region</span> Volume\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_CUBIC_FEET:\n        <span class=\"blue\">return</span> imperialValue;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_CUBIC_CENTIMETERS:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow( METERS_IN_FEET * 100, 3 );\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_CUBIC_INCHES:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow( 12, 3 );\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_CUBIC_METERS:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow( METERS_IN_FEET, 3 );\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_CUBIC_MILLIMETERS:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow( METERS_IN_FEET * 1000, 3 );\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_CUBIC_YARDS:\n        <span class=\"blue\">return</span> imperialValue * 1 / <span class=\"teal\">Math</span>.Pow( 3, 3 );\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_GALLONS_US:\n        <span class=\"blue\">return</span> imperialValue * 7.5;\n      <span class=\"blue\">case</span> <span class=\"teal\">DisplayUnitType</span>.DUT_LITERS:\n        <span class=\"blue\">return</span> imperialValue * 28.31684;\n \n<span class=\"blue\">      #endregion</span> <span class=\"green\">// Volume</span>\n \n      <span class=\"blue\">default</span>:\n        NotSupported( dut );\n        <span class=\"blue\">break</span>;\n    }\n \n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotSupportedException</span>();\n  }\n\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">double</span> AsMetersValue(\n    <span class=\"blue\">this</span> <span class=\"teal\">Parameter</span> param )\n  {\n    <span class=\"blue\">if</span>( param.StorageType != <span class=\"teal\">StorageType</span>.Double )\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotSupportedException</span>(\n        <span class=\"maroon\">\"Parameter does not have double value\"</span> );\n \n    <span class=\"blue\">double</span> imperialValue = param.AsDouble();\n \n    <span class=\"teal\">UnitType</span> ut = ConvertParameterTypeToUnitType(\n      param.Definition.ParameterType );\n \n    <span class=\"blue\">switch</span>( ut )\n    {\n      <span class=\"blue\">case</span> <span class=\"teal\">UnitType</span>.UT_Length:\n        <span class=\"blue\">return</span> imperialValue * METERS_IN_FEET;\n \n      <span class=\"blue\">case</span> <span class=\"teal\">UnitType</span>.UT_Area:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow(\n          METERS_IN_FEET, 2 );\n \n      <span class=\"blue\">case</span> <span class=\"teal\">UnitType</span>.UT_Volume:\n        <span class=\"blue\">return</span> imperialValue * <span class=\"teal\">Math</span>.Pow(\n          METERS_IN_FEET, 3 );\n    }\n    <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">NotSupportedException</span>();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">UnitType</span>\n    ConvertParameterTypeToUnitType(\n      <span class=\"teal\">ParameterType</span> parameterType )\n  {\n    <span class=\"blue\">if</span>( _map_parameter_type_to_unit_type.ContainsKey(\n      parameterType ) )\n    {\n      <span class=\"blue\">return</span> _map_parameter_type_to_unit_type[\n        parameterType];\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"green\">// If we made it this far, there's </span>\n      <span class=\"green\">// no entry in the dictionary.</span>\n \n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">ArgumentException</span>(\n        <span class=\"maroon\">\"Cannot convert ParameterType '\"</span>\n          + parameterType.ToString()\n          + <span class=\"maroon\">\"' to a UnitType.\"</span> );\n    }\n  }\n \n  <span class=\"blue\">static</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">ParameterType</span>, <span class=\"teal\">UnitType</span>&gt;\n    _map_parameter_type_to_unit_type\n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">ParameterType</span>, <span class=\"teal\">UnitType</span>&gt;()\n  {\n    <span class=\"green\">// This data could come from a file, </span>\n    <span class=\"green\">// or (better yet) from Revit itself...</span>\n \n    {<span class=\"teal\">ParameterType</span>.Angle, <span class=\"teal\">UnitType</span>.UT_Angle},\n    {<span class=\"teal\">ParameterType</span>.Area, <span class=\"teal\">UnitType</span>.UT_Area},\n    {<span class=\"teal\">ParameterType</span>.AreaForce, <span class=\"teal\">UnitType</span>.UT_AreaForce},\n    {<span class=\"teal\">ParameterType</span>.AreaForcePerLength, <span class=\"teal\">UnitType</span>.UT_AreaForcePerLength},\n    <span class=\"green\">//map.Add(UnitType.UT_AreaForceScale, ParameterType.???);</span>\n    {<span class=\"teal\">ParameterType</span>.ColorTemperature, <span class=\"teal\">UnitType</span>.UT_Color_Temperature},\n    {<span class=\"teal\">ParameterType</span>.Currency, <span class=\"teal\">UnitType</span>.UT_Currency},\n    <span class=\"green\">//map.Add(UnitType.UT_DecSheetLength, ParameterType.???);</span>\n    {<span class=\"teal\">ParameterType</span>.ElectricalApparentPower, <span class=\"teal\">UnitType</span>.UT_Electrical_Apparent_Power},\n    {<span class=\"teal\">ParameterType</span>.ElectricalCurrent, <span class=\"teal\">UnitType</span>.UT_Electrical_Current},\n    {<span class=\"teal\">ParameterType</span>.ElectricalEfficacy, <span class=\"teal\">UnitType</span>.UT_Electrical_Efficacy},\n    {<span class=\"teal\">ParameterType</span>.ElectricalFrequency, <span class=\"teal\">UnitType</span>.UT_Electrical_Frequency},\n    {<span class=\"teal\">ParameterType</span>.ElectricalIlluminance, <span class=\"teal\">UnitType</span>.UT_Electrical_Illuminance},\n    {<span class=\"teal\">ParameterType</span>.ElectricalLuminance, <span class=\"teal\">UnitType</span>.UT_Electrical_Luminance},\n    {<span class=\"teal\">ParameterType</span>.ElectricalLuminousFlux, <span class=\"teal\">UnitType</span>.UT_Electrical_Luminous_Flux},\n    {<span class=\"teal\">ParameterType</span>.ElectricalLuminousIntensity, <span class=\"teal\">UnitType</span>.UT_Electrical_Luminous_Intensity},\n    {<span class=\"teal\">ParameterType</span>.ElectricalPotential, <span class=\"teal\">UnitType</span>.UT_Electrical_Potential},\n    {<span class=\"teal\">ParameterType</span>.ElectricalPower, <span class=\"teal\">UnitType</span>.UT_Electrical_Power},\n    {<span class=\"teal\">ParameterType</span>.ElectricalPowerDensity, <span class=\"teal\">UnitType</span>.UT_Electrical_Power_Density},\n    {<span class=\"teal\">ParameterType</span>.ElectricalWattage, <span class=\"teal\">UnitType</span>.UT_Electrical_Wattage},\n    {<span class=\"teal\">ParameterType</span>.Force, <span class=\"teal\">UnitType</span>.UT_Force},\n    {<span class=\"teal\">ParameterType</span>.ForceLengthPerAngle, <span class=\"teal\">UnitType</span>.UT_ForceLengthPerAngle},\n    {<span class=\"teal\">ParameterType</span>.ForcePerLength, <span class=\"teal\">UnitType</span>.UT_ForcePerLength},\n    <span class=\"green\">//map.Add(UnitType.UT_ForceScale, ParameterType.???);</span>\n    {<span class=\"teal\">ParameterType</span>.HVACAirflow, <span class=\"teal\">UnitType</span>.UT_HVAC_Airflow},\n    {<span class=\"teal\">ParameterType</span>.HVACAirflowDensity, <span class=\"teal\">UnitType</span>.UT_HVAC_Airflow_Density},\n    {<span class=\"teal\">ParameterType</span>.HVACAirflowDividedByCoolingLoad, <span class=\"teal\">UnitType</span>.UT_HVAC_Airflow_Divided_By_Cooling_Load},\n    {<span class=\"teal\">ParameterType</span>.HVACAirflowDividedByVolume, <span class=\"teal\">UnitType</span>.UT_HVAC_Airflow_Divided_By_Volume},\n    {<span class=\"teal\">ParameterType</span>.HVACAreaDividedByCoolingLoad, <span class=\"teal\">UnitType</span>.UT_HVAC_Area_Divided_By_Cooling_Load},\n    {<span class=\"teal\">ParameterType</span>.HVACAreaDividedByHeatingLoad, <span class=\"teal\">UnitType</span>.UT_HVAC_Area_Divided_By_Heating_Load},\n    {<span class=\"teal\">ParameterType</span>.HVACCoefficientOfHeatTransfer, <span class=\"teal\">UnitType</span>.UT_HVAC_CoefficientOfHeatTransfer},\n    {<span class=\"teal\">ParameterType</span>.HVACCoolingLoad, <span class=\"teal\">UnitType</span>.UT_HVAC_Cooling_Load},\n    {<span class=\"teal\">ParameterType</span>.HVACCoolingLoadDividedByArea, <span class=\"teal\">UnitType</span>.UT_HVAC_Cooling_Load_Divided_By_Area},\n    {<span class=\"teal\">ParameterType</span>.HVACCoolingLoadDividedByVolume, <span class=\"teal\">UnitType</span>.UT_HVAC_Cooling_Load_Divided_By_Volume},\n    {<span class=\"teal\">ParameterType</span>.HVACCrossSection, <span class=\"teal\">UnitType</span>.UT_HVAC_CrossSection},\n    {<span class=\"teal\">ParameterType</span>.HVACDensity, <span class=\"teal\">UnitType</span>.UT_HVAC_Density},\n    {<span class=\"teal\">ParameterType</span>.HVACDuctSize, <span class=\"teal\">UnitType</span>.UT_HVAC_DuctSize},\n    {<span class=\"teal\">ParameterType</span>.HVACEnergy, <span class=\"teal\">UnitType</span>.UT_HVAC_Energy},\n    {<span class=\"teal\">ParameterType</span>.HVACFactor, <span class=\"teal\">UnitType</span>.UT_HVAC_Factor},\n    {<span class=\"teal\">ParameterType</span>.HVACFriction, <span class=\"teal\">UnitType</span>.UT_HVAC_Friction},\n    {<span class=\"teal\">ParameterType</span>.HVACHeatGain, <span class=\"teal\">UnitType</span>.UT_HVAC_HeatGain},\n    {<span class=\"teal\">ParameterType</span>.HVACHeatingLoad, <span class=\"teal\">UnitType</span>.UT_HVAC_Heating_Load},\n    {<span class=\"teal\">ParameterType</span>.HVACHeatingLoadDividedByArea, <span class=\"teal\">UnitType</span>.UT_HVAC_Heating_Load_Divided_By_Area},\n    {<span class=\"teal\">ParameterType</span>.HVACHeatingLoadDividedByVolume, <span class=\"teal\">UnitType</span>.UT_HVAC_Heating_Load_Divided_By_Volume},\n    {<span class=\"teal\">ParameterType</span>.HVACPower, <span class=\"teal\">UnitType</span>.UT_HVAC_Power},\n    {<span class=\"teal\">ParameterType</span>.HVACPowerDensity, <span class=\"teal\">UnitType</span>.UT_HVAC_Power_Density},\n    {<span class=\"teal\">ParameterType</span>.HVACPressure, <span class=\"teal\">UnitType</span>.UT_HVAC_Pressure},\n    {<span class=\"teal\">ParameterType</span>.HVACRoughness, <span class=\"teal\">UnitType</span>.UT_HVAC_Roughness},\n    {<span class=\"teal\">ParameterType</span>.HVACSlope, <span class=\"teal\">UnitType</span>.UT_HVAC_Slope},\n    {<span class=\"teal\">ParameterType</span>.HVACTemperature, <span class=\"teal\">UnitType</span>.UT_HVAC_Temperature},\n    {<span class=\"teal\">ParameterType</span>.HVACVelocity, <span class=\"teal\">UnitType</span>.UT_HVAC_Velocity},\n    {<span class=\"teal\">ParameterType</span>.HVACViscosity, <span class=\"teal\">UnitType</span>.UT_HVAC_Viscosity},\n    {<span class=\"teal\">ParameterType</span>.Length, <span class=\"teal\">UnitType</span>.UT_Length},\n    {<span class=\"teal\">ParameterType</span>.LinearForce, <span class=\"teal\">UnitType</span>.UT_LinearForce},\n    {<span class=\"teal\">ParameterType</span>.LinearForceLengthPerAngle, <span class=\"teal\">UnitType</span>.UT_LinearForceLengthPerAngle},\n    {<span class=\"teal\">ParameterType</span>.LinearForcePerLength, <span class=\"teal\">UnitType</span>.UT_LinearForcePerLength},\n    <span class=\"green\">// map.Add(UnitType.UT_LinearForceScale, ParameterType.???);</span>\n    {<span class=\"teal\">ParameterType</span>.LinearMoment, <span class=\"teal\">UnitType</span>.UT_LinearMoment},\n    <span class=\"green\">// map.Add(UnitType.UT_LinearMomentScale, ParameterType.???);</span>\n    {<span class=\"teal\">ParameterType</span>.Moment, <span class=\"teal\">UnitType</span>.UT_Moment},\n    <span class=\"gray\">///</span><span class=\"green\">map.Add(UnitType.UT_MomentScale, ParameterType.???);</span>\n    {<span class=\"teal\">ParameterType</span>.Number, <span class=\"teal\">UnitType</span>.UT_Number},\n    {<span class=\"teal\">ParameterType</span>.PipeSize, <span class=\"teal\">UnitType</span>.UT_PipeSize},\n    {<span class=\"teal\">ParameterType</span>.PipingDensity, <span class=\"teal\">UnitType</span>.UT_Piping_Density},\n    {<span class=\"teal\">ParameterType</span>.PipingFlow, <span class=\"teal\">UnitType</span>.UT_Piping_Flow},\n    {<span class=\"teal\">ParameterType</span>.PipingFriction, <span class=\"teal\">UnitType</span>.UT_Piping_Friction},\n    {<span class=\"teal\">ParameterType</span>.PipingPressure, <span class=\"teal\">UnitType</span>.UT_Piping_Pressure},\n    {<span class=\"teal\">ParameterType</span>.PipingRoughness, <span class=\"teal\">UnitType</span>.UT_Piping_Roughness},\n    {<span class=\"teal\">ParameterType</span>.PipingSlope, <span class=\"teal\">UnitType</span>.UT_Piping_Slope},\n    {<span class=\"teal\">ParameterType</span>.PipingTemperature, <span class=\"teal\">UnitType</span>.UT_Piping_Temperature},\n    {<span class=\"teal\">ParameterType</span>.PipingVelocity, <span class=\"teal\">UnitType</span>.UT_Piping_Velocity},\n    {<span class=\"teal\">ParameterType</span>.PipingViscosity, <span class=\"teal\">UnitType</span>.UT_Piping_Viscosity},\n    {<span class=\"teal\">ParameterType</span>.PipingVolume, <span class=\"teal\">UnitType</span>.UT_Piping_Volume},\n    <span class=\"green\">//map.Add(UnitType.UT_SheetLength, ParameterType.???);</span>\n    <span class=\"green\">//map.Add(UnitType.UT_SiteAngle, ParameterType.???);</span>\n    {<span class=\"teal\">ParameterType</span>.Slope, <span class=\"teal\">UnitType</span>.UT_Slope},\n    {<span class=\"teal\">ParameterType</span>.Stress, <span class=\"teal\">UnitType</span>.UT_Stress},\n    {<span class=\"teal\">ParameterType</span>.TemperalExp, <span class=\"teal\">UnitType</span>.UT_TemperalExp},\n    {<span class=\"teal\">ParameterType</span>.UnitWeight, <span class=\"teal\">UnitType</span>.UT_UnitWeight},\n    {<span class=\"teal\">ParameterType</span>.Volume, <span class=\"teal\">UnitType</span>.UT_Volume},\n    {<span class=\"teal\">ParameterType</span>.WireSize, <span class=\"teal\">UnitType</span>.UT_WireSize},\n  };\n}\n</pre>\n<p>I used some functions from the Unit converter.\n\nHere is an external command\n\n<a href=\"http://pastebin.com/Pu26SPAN\">\nsample to test it</a> by\n\niterating over and applying it to all floating point valued parameters on a selected element.\n\n<p>Hope you'll find this useful.\n\n<p>Many thanks to Joe and Victor for putting together and sharing these nice solutions!\n\n<p>I added the ParameterUnitConverter class to The Building Coder samples and defined a new external command CmdParameterUnitConverter based on Victor's code to test it.\nHere is\n\n<a href=\"zip/bc_12_96.zip\">\nversion 2012.0.96.0</a> of\n\nThe Building Coder samples including the new utility class and command.\n\n<p>This is the output generated by the command in the Visual Studio debug output window on selecting a wall element in the rac_basic_sample_project.rvt sample model:\n\n<pre>\nParameter name: Top Extension Distance\n  Parameter value (imperial): 0\n  Parameter unit value: 0\n  Parameter AsValueString: 0.0\n\nParameter name: Length\n  Parameter value (imperial): 45.5\n  Parameter unit value: 13868.4\n  Parameter AsValueString: 13868.4\n\nParameter name: Base Extension Distance\n  Parameter value (imperial): 0\n  Parameter unit value: 0\n  Parameter AsValueString: 0.0\n\nParameter name: Top Offset\n  Parameter value (imperial): 0\n  Parameter unit value: 0\n  Parameter AsValueString: 0.0\n\nParameter name: Volume\n  Parameter value (imperial): 455.9586023831\n  Parameter unit value: 12.911309795985\n  Parameter AsValueString: 12.911 m³\n\nParameter name: Unconnected Height\n  Parameter value (imperial): 18.0446194225722\n  Parameter unit value: 5500\n  Parameter AsValueString: 5500.0\n\nParameter name: Base Offset\n  Parameter value (imperial): 0\n  Parameter unit value: 0\n  Parameter AsValueString: 0.0\n\nParameter name: Area\n  Parameter value (imperial): 694.880910031848\n  Parameter unit value: 64.5565489799251\n  Parameter AsValueString: 64.557 m²\n</pre>\n<p>Here, the parameter value labelled 'imperial' is the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/unit-conversion-and-new-blogs.html\">\ninternal Revit database unit</a>, e.g.\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/internal-imperial-units.html\">\nfeet for length</a>.\n\nPlease note that not all internal database units are imperial.\nIn fact, only length is measured in feet, and thus also area and volume.\nOther internal units are\n\n<a href=\"http://en.wikipedia.org/wiki/International_System_of_Units\">SI-based</a>.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]