[
  {
    "original_filename": "1950_forge_data_days",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- https://autodesk.slack.com/archives/C0SR6NAP8/p1651517777022079\n\n- Forge Data Days Global Event\n  https://forge.autodesk.com/blog/announcing-forge-data-days-global-event-series\n\n- https://forums.autodesk.com/t5/revit-api-forum/get-curves-of-slab-was-joined/td-p/11140489\n  get curves of slab was joined\n  to obtain separate corve loops for separate element parts generated by joining it with another element\n  \ntwitter:\n\nForge Data Days, the updated Revit 2023 developer's guide and a nice JoinGeometryUtils sample to obtain closed loops for joined element parts in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/joingeometryutils\n\nFinally a chance to meet and learn live about Forge, the updated developer's guide and a nice <code>JoinGeometryUtils</code> sample\n&ndash; Revit 2023 developer's guide\n&ndash; Forge Data Days\n&ndash; Obtaining closed loops for joined element parts\n&ndash; Create and style your QR code\n&ndash; La Serre greenhouse wheelbarrow ballet...\n\nlinkedin:\n\nForge Data Days, the updated Revit 2023 developer's guide and a nice JoinGeometryUtils sample to obtain closed loops for joined element parts in the #RevitAPI\n\nhttps://autode.sk/joingeometryutils\n\nFinally a chance to meet and learn live about Forge!\n\n- Revit 2023 developer's guide\n- Forge Data Days\n- Obtaining closed loops for joined element parts\n- Create and style your QR code\n- La Serre greenhouse wheelbarrow ballet...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1950_forge_data_days",
    "header_text": "Forge Data Days and JoinGeometryUtils",
    "local_header_href": "#forge-data-days-and-joingeometryutils",
    "chunk_text": "### Forge Data Days and JoinGeometryUtils\n\nFinally a chance to meet and learn live about Forge, the updated developer's guide and a nice `JoinGeometryUtils` sample:\n\n- [Revit 2023 developer's guide](#2)\n- [Forge Data Days](#3)\n- [Obtaining closed loops for joined element parts](#4)\n- [Create and style your QR code](#5)\n- [La Serre &ndash; greenhouse wheelbarrow ballet](#6)"
  },
  {
    "original_filename": "1950_forge_data_days",
    "header_text": "Revit 2023 Developer's Guide",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Revit 2023 Developer's Guide\n\nThe [English version of the Revit 2023 Developer's Guide](https://help.autodesk.com/view/RVT/2023/ENU/?guid=Revit_API_Revit_API_Developers_Guide_html) is\nnow online.\n\nThe development team is still actively working on an issue with the Japanese text."
  },
  {
    "original_filename": "1950_forge_data_days",
    "header_text": "Forge Data Days",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Forge Data Days\n\nFinally, after the world-wide pandemic break, which also affected our traditional yearly DevDays, we can meet again live, face to face:\n\nThe Forge Data Days are coming up soon, a one-day, in-person event happening in 20 cities worldwide, to learn how to fully unlock the value of your data with Forge.\nThere are a limited number of seats available for each event, so I encourage you to register as soon as possible once you have decided that this is of interest for you.\n \nAt Forge Data Days, youâ€™ll hear directly from experts on how Forge is powering enterprise digital transformation.\nSee how we are making data more granular, standardized, and transparent.\nThis can help you connect your teams, processes, and workflows.\nLearn how new Forge data capabilities and APIs can increase your productivity, automation, and profitability. \n \nWith the following exclusive Early Bird registration links for the first five locations, you can choose between different dates and European cities to join us at:\n \n- May 31st &ndash; [Munich, Germany](https://cvent.autodesk.com/event/c064e191-cced-4cf6-a0ff-56a92a3c2689/summary)\n- June 2nd &ndash; [Gothenburg, Sweden](https://cvent.autodesk.com/event/994e1f82-52fc-41a2-9a64-efadde9e4273/summary)\n- June 7th &ndash; [Birmingham, UK](https://cvent.autodesk.com/event/bedd310d-fa7d-4b02-99dd-2c4c5b40293d/summary)\n- June 9th &ndash; [Milan, Italy](https://cvent.autodesk.com/event/5733cfc3-51cf-41fb-bacf-457ba6b1ae97/summary)\n- June 14th &ndash; [Barcelona, Spain](https://cvent.autodesk.com/event/84021b3b-9286-4586-af2a-c6b1f2b5f301/summary)\n- [All event locations](https://forge.autodesk.com/forge-data-days)\n\nPersonally, I will probably be joining the event in Barcelona.\n\nRegistration opens to the public today, May 3rd, and spots will fill up fast, so don't wait too long making up your mind...\n\nTo learn more about the event, please check out\nthe [Forge Data Days global event series announcement](https://forge.autodesk.com/blog/announcing-forge-data-days-global-event-series) and \nthe [Forge Data Days event page](https://forge.autodesk.com/forge-data-days).\n\n<center>\n<img src=\"img/2022_forge_data_days.png\" alt=\"Forge Data Days\" title=\"Forge Data Days\" width=\"800\"/> <!-- 1200 -->\n</center>"
  },
  {
    "original_filename": "1950_forge_data_days",
    "header_text": "Obtaining Closed Loops for Joined Element Parts",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Obtaining Closed Loops for Joined Element Parts\n\nReturning to the Revit API,\nRichard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas shared another of his brilliant solutions and adds a new entry to the list of\nthe [often overlooked Revit API Util](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.52) in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non how to [get curves of a joined slab](https://forums.autodesk.com/t5/revit-api-forum/get-curves-of-slab-was-joined/td-p/11140489),\nto obtain separate curve loops for the separate parts of an element that are generated by joining it with another element:\n\n**Question:** I have a slab that is joined with a beam.\nHow can I get two contiguous curves as highlighted in this picture?\n\n<center>\n<img src=\"img/slab_joined_loops_1.png\" alt=\"Slab joined loops\" title=\"Slab joined loops\" width=\"600\"/> <!-- 1206 -->\n</center>\n\n**Answer:** The easiest way to obtain the loops for that is to reverse the join order within a transaction that is rolled back so that the beam cuts the slab.\nCurrently, with slab cutting beam, you will get a single edge loop for the slab top face with extra 'contextual' edges where the edge is hidden by the joins.\n\nThe below code uses the following `JoinGeometryUtils` API calls to achieve what you need:\n\n- GetJoinedElements\n- IsCuttingElementInJoin\n- SwitchJoinOrder\n\n<center>\n<img src=\"img/slab_joined_loops_2.png\" alt=\"Slab joined loops\" title=\"Slab joined loops\" width=\"600\"/> <!-- 1034 -->\n</center>\n\n<pre class=\"code\">\n&nbsp;&nbsp;Public</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;<span style=\"color:#74531f;\">Obj_220503a</span>(<span style=\"color:#1f377f;\">commandData</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;ExternalCommandData,&nbsp;<span style=\"color:blue;\">ByRef</span>&nbsp;<span style=\"color:#1f377f;\">message</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">String</span>,&nbsp;<span style=\"color:#1f377f;\">elements</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;ElementSet)&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Result\n&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">IntUIApp</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UIApplication&nbsp;=&nbsp;commandData.Application\n&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">IntUIDoc</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;UIDocument&nbsp;=&nbsp;commandData.Application.ActiveUIDocument\n&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">IntDoc</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Document&nbsp;=&nbsp;IntUIDoc.Document\n \n&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">FEC_Flr</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;FilteredElementCollector(IntDoc,&nbsp;IntDoc.ActiveView.Id)\n&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">ECF_Flr</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;ElementClassFilter(<span style=\"color:blue;\">GetType</span>(Floor))\n \n&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">Els</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;Element)&nbsp;=&nbsp;FEC_Flr.WherePasses(ECF_Flr).ToElements\n&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">Curves</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;Tuple(<span style=\"color:blue;\">Of</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;Curve),&nbsp;Plane))\n \n&nbsp;&nbsp;<span style=\"color:blue;\">Using</span>&nbsp;Tx&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;Transaction(IntDoc,&nbsp;<span style=\"color:#a31515;\">&quot;Gather&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">If</span>&nbsp;Tx.Start&nbsp;=&nbsp;TransactionStatus.Started&nbsp;<span style=\"color:#8f08c4;\">Then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;i&nbsp;=&nbsp;0&nbsp;<span style=\"color:#8f08c4;\">To</span>&nbsp;Els.Count&nbsp;-&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">El</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Element&nbsp;=&nbsp;Els(i)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">Ids</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;ElementId)&nbsp;=&nbsp;JoinGeometryUtils.GetJoinedElements(IntDoc,&nbsp;El)\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">FEC_Fra</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;FilteredElementCollector(IntDoc,&nbsp;Ids)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">ECF_Fra</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;ElementCategoryFilter(BuiltInCategory.OST_StructuralFraming)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">Els0</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;Element)&nbsp;=&nbsp;FEC_Fra.WherePasses(ECF_Fra).ToElements\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;i0&nbsp;=&nbsp;0&nbsp;<span style=\"color:#8f08c4;\">To</span>&nbsp;Els0.Count&nbsp;-&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">If</span>&nbsp;JoinGeometryUtils.IsCuttingElementInJoin(IntDoc,&nbsp;El,&nbsp;Els0(i0))&nbsp;<span style=\"color:#8f08c4;\">Then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JoinGeometryUtils.SwitchJoinOrder(IntDoc,&nbsp;El,&nbsp;Els0(i0))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">End</span>&nbsp;<span style=\"color:#8f08c4;\">If</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Next</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntDoc.Regenerate()\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">geomEl</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;GeometryElement&nbsp;=&nbsp;El.Geometry(<span style=\"color:blue;\">New</span>&nbsp;Options&nbsp;<span style=\"color:blue;\">With</span>&nbsp;{.DetailLevel&nbsp;=&nbsp;ViewDetailLevel.Fine})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;<span style=\"color:#8f08c4;\">Each</span>&nbsp;ob&nbsp;<span style=\"color:blue;\">As</span>&nbsp;GeometryObject&nbsp;<span style=\"color:#8f08c4;\">In</span>&nbsp;geomEl\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">If</span>&nbsp;<span style=\"color:blue;\">GetType</span>(Solid)&nbsp;<span style=\"color:blue;\">Is</span>&nbsp;ob.GetType&nbsp;<span style=\"color:#8f08c4;\">Then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">S</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Solid&nbsp;=&nbsp;ob\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;ix&nbsp;=&nbsp;0&nbsp;<span style=\"color:#8f08c4;\">To</span>&nbsp;S.Faces.Size&nbsp;-&nbsp;1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">PF</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;PlanarFace&nbsp;=&nbsp;<span style=\"color:blue;\">TryCast</span>(S.Faces.Item(ix),&nbsp;PlanarFace)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">If</span>&nbsp;PF&nbsp;<span style=\"color:blue;\">Is</span>&nbsp;<span style=\"color:blue;\">Nothing</span>&nbsp;<span style=\"color:#8f08c4;\">Then</span>&nbsp;<span style=\"color:#8f08c4;\">Continue</span>&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;<span style=\"color:blue;\">Else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">If</span>&nbsp;PF.FaceNormal.IsAlmostEqualTo(XYZ.BasisZ)&nbsp;<span style=\"color:#8f08c4;\">Then</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">CrvSet</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;Curve)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">CLL</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;CurveLoop)&nbsp;=&nbsp;PF.GetEdgesAsCurveLoops\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;<span style=\"color:#8f08c4;\">Each</span>&nbsp;CL&nbsp;<span style=\"color:blue;\">As</span>&nbsp;CurveLoop&nbsp;<span style=\"color:#8f08c4;\">In</span>&nbsp;CLL\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;<span style=\"color:#8f08c4;\">Each</span>&nbsp;C&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Curve&nbsp;<span style=\"color:#8f08c4;\">In</span>&nbsp;CL\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CrvSet.Add(C)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Next</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Next</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Curves.Add(<span style=\"color:blue;\">New</span>&nbsp;Tuple(<span style=\"color:blue;\">Of</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;Curve),&nbsp;Plane)(CrvSet,&nbsp;PF.GetSurface))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">End</span>&nbsp;<span style=\"color:#8f08c4;\">If</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Next</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">End</span>&nbsp;<span style=\"color:#8f08c4;\">If</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Next</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Next</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tx.RollBack()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">End</span>&nbsp;<span style=\"color:#8f08c4;\">If</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Using</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">Using</span>&nbsp;Tx&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;Transaction(IntDoc,&nbsp;<span style=\"color:#a31515;\">&quot;Draw&quot;</span>)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">If</span>&nbsp;Tx.Start&nbsp;=&nbsp;TransactionStatus.Started&nbsp;<span style=\"color:#8f08c4;\">Then</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;<span style=\"color:#8f08c4;\">Each</span>&nbsp;item&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Tuple(<span style=\"color:blue;\">Of</span>&nbsp;List(<span style=\"color:blue;\">Of</span>&nbsp;Curve),&nbsp;Plane)&nbsp;<span style=\"color:#8f08c4;\">In</span>&nbsp;Curves\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">PL</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Plane&nbsp;=&nbsp;item.Item2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;<span style=\"color:#1f377f;\">SKP</span>&nbsp;<span style=\"color:blue;\">As</span>&nbsp;SketchPlane&nbsp;=&nbsp;SketchPlane.Create(IntDoc,&nbsp;PL)\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">For</span>&nbsp;<span style=\"color:#8f08c4;\">Each</span>&nbsp;C&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Curve&nbsp;<span style=\"color:#8f08c4;\">In</span>&nbsp;item.Item1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IntDoc.Create.NewModelCurve(C,&nbsp;SKP)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Next</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Next</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tx.Commit()\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#8f08c4;\">End</span>&nbsp;<span style=\"color:#8f08c4;\">If</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Using</span>\n \n&nbsp;&nbsp;<span style=\"color:#8f08c4;\">Return</span>&nbsp;Result.Succeeded\n<span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n</pre>"
  },
  {
    "original_filename": "1950_forge_data_days",
    "header_text": "Create and Style Your QR Code",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Create and Style Your QR Code\n\nMoving away from programming topics, I was not aware how much freedom you can have in styling a QR code until I took a look at\nthe [qrcode-monkey](https://www.qrcode-monkey.com)."
  },
  {
    "original_filename": "1950_forge_data_days",
    "header_text": "La Serre &ndash; Greenhouse Wheelbarrow Ballet",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> La Serre &ndash; Greenhouse Wheelbarrow Ballet\n\nFinally, unrelated to Revit and other hi-tech, just for fun, if you feel like a five-minute humorous poetic break, take a look at\n[La Serre](https://youtu.be/G1XarNWgzCk) by Didier AndrÃ© and Jean-Paul Lefeuvre,\na banjo-accompanied circus artist greenhouse wheelbarrow ballet:\n\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/G1XarNWgzCk\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\n> FormÃ©s au Centre national des arts du cirque, Jean-Paul Lefeuvre et Didier AndrÃ© ... ces deux circassiens ont Ã©tayÃ© leur univers jusqu'Ã  crÃ©er en 2001 <i>La Serre</i>, spectacle poÃ©tico-agricole ... Dans un univers ingÃ©nieux, ces \"Buster Keaton\" de l'horticulture parsÃ¨ment d'humour absurde et de rÃªverie aÃ©rienne leur grande humanitÃ©.\n\n> <i>Trained at the national centre of circus art, Jean-Paul Lefeuvre and Didier AndrÃ© ... created La Serre in 2001, a poetic-agricultural show ... in an ingenious universe, these \"Buster Keatons\" of horticulture sprinkle their great humanity with absurd humour and aerial reverie.</i>"
  }
]