[
  {
    "original_filename": "1754_section_intersect_geo",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- get intersection lines from cut in section view\n  https://forums.autodesk.com/t5/revit-api-forum/how-to-receive-intersection-of-section-and-familyinstance/m-p/8802202\n\ntwitter:\n\nRetrieving section view intersection cut geometry in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/sectioncutgeo\n\nI played around creating a new SectionCutGeo add-in to retrieve the geometry resulting from cutting a family instance in a section view.\nThis was prompted the Revit API discussion forum thread on getting intersection lines from cut in section view\n&ndash; Intersection of section and family instance task\n&ndash; Solution options, geometry elements and view settings\n&ndash; Retrieving curves in the cut plane\n&ndash; Helper methods and external command mainline\n&ndash; Sample model and results\n&ndash; Caveat...\n\nlinkedin:\n\nRetrieving section view intersection cut geometry in the #RevitAPI \n\nhttp://bit.ly/sectioncutgeo\n\nI played around creating a new SectionCutGeo add-in to retrieve the geometry resulting from cutting a family instance in a section view.\n\nThis was prompted the Revit API discussion forum thread on getting intersection lines from cut in section view:\n\n- Intersection of section and family instance task\n- Solution options, geometry elements and view settings\n- Retrieving curves in the cut plane\n- Helper methods and external command mainline\n- Sample model and results\n- Caveat...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\n-->"
  },
  {
    "original_filename": "1754_section_intersect_geo",
    "header_text": "Retrieving Section View Intersection Cut Geometry",
    "local_header_href": "#retrieving-section-view-intersection-cut-geometry",
    "chunk_text": "### Retrieving Section View Intersection Cut Geometry\n\nI played around creating a\nnew [SectionCutGeo add-in](https://github.com/jeremytammik/SectionCutGeo) to\nretrieve the geometry resulting from cutting a family instance in a section view.\n\nThis was prompted\nby Martin von Kessel, [@Hacklberg](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/3883640), in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [getting intersection lines from cut in section view](https://forums.autodesk.com/t5/revit-api-forum/how-to-receive-intersection-of-section-and-familyinstance/m-p/8802202):\n\n- [Intersection of section and family instance task](#2) \n- [Solution options, geometry elements and view settings](#3) \n- [Retrieving curves in the cut plane](#4) \n- [Helper methods and external command mainline](#5) \n- [Sample model and results](#6) \n- [Caveat](#7)"
  },
  {
    "original_filename": "1754_section_intersect_geo",
    "header_text": "Intersection of Section and Family Instance Task",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Intersection of Section and Family Instance Task\n\n**Question:** I am trying to get the Intersection of Section and `FamilyInstance`.\n\nThe `GeometryElement` of the family returns all faces, even if they are outside of the section.\n\nHere is what I am after:\n\n<center>\n<img src=\"img/section_cut_geo_query.png\" alt=\"Section cut request\" width=\"549\">\n</center>\n\nIs there any predefined function to receive the Solid or BoundingBox inside the section?"
  },
  {
    "original_filename": "1754_section_intersect_geo",
    "header_text": "Solution Options, Geometry Elements and View Settings",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Solution Options, Geometry Elements and View Settings\n\nIt is definitely possible, as was explained by Saeed Karshenas in his demonstration\nof [visualising section view geometry in OpelGL](https://thebuildingcoder.typepad.com/blog/2011/08/section-view-geometry.html).\n\nTo achieve this, you need to specify the section view in the options passed in to get the geometry:\n\n<pre class=\"code\">\n  <span style=\"color:#2b91af;\">Options</span>&nbsp;option&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>();\n  option.View&nbsp;=&nbsp;viewSection;\n   \n  <span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;geometryElement&nbsp;=&nbsp;familyInstance\n  &nbsp;&nbsp;.get_Geometry(&nbsp;option&nbsp;);\n   \n  <span style=\"color:#2b91af;\">GeometryInstance</span>?&nbsp;gInst&nbsp;=&nbsp;geometryElement.First()&nbsp;\n  &nbsp;&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">GeometryInstance</span>;\n   \n  <span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;gSymbol&nbsp;=&nbsp;gInst.GetInstanceGeometry();\n</pre>\n\nThe crucial point, however, if you want to retrieve the intersection lines of the family instance and the section cut plane, is to set the `VIEWER_BOUND_FAR_CLIPPING` parameter appropriately.\n\nThe default setting is `2`, 'Clip without line'.\n\nI changed it to `1`, 'Clip with line', and then the intersection lines are returned:\n\n<pre class=\"code\">\n  viewSection.get_Parameter(&nbsp;\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.VIEWER_BOUND_FAR_CLIPPING&nbsp;)\n  &nbsp;&nbsp;&nbsp;&nbsp;.Set(&nbsp;1&nbsp;);\n   \n  viewSection.DetailLevel&nbsp;=&nbsp;<span style=\"color:#2b91af;\">ViewDetailLevel</span>.Fine;\n</pre>\n\n<center>\n<img src=\"img/section_view_far_clipping.png\" alt=\"Section view far clipping setting\" width=\"279\">\n</center>"
  },
  {
    "original_filename": "1754_section_intersect_geo",
    "header_text": "Retrieving Curves in the Cut Plane",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Retrieving Curves in the Cut Plane\n\nIn the SectionCutGeo add-in, I only want to retrieve the intersection curves of the family instance with the cut plane of the section view.\n\nThe geometry returned includes the entire truncated solid.\n\nHow to determine which of its curves lie in a specific plane?\n\nInitially, I simply called `NewModelCurve`, specifying the sketch plane in that cut plane, for each of the curves I retrieved from the geometry.\n\nIt works for the curves that lie in that plane and throws an exception for all the ones that do not:\n\n- An exception of type *Autodesk.Revit.Exceptions.ArgumentException* occurred in RevitAPI.dll;\nAdditional information: Curve must be in the plane\n\nThrowing all those exceptions is a very horrible thing to do and costs a huge amount of time.\n\nIt provides a brain-dead simple way to get rid of the off-plane curves, though.\n\nSo far, we simply tried to create a model curve in the given plane. This throws an exception if the curve does not lie in the plane. That is bad and costs a huge amount of performance. Better would be to programmatically check whether the curve lies in the plane beforehand, instead of throwing an exception. How can we determine whether a curve lies in a plane?\n\nI asked the development team whether they can suggest a method to check beforehand whether a curve lies in a given plane or not:\n\nJeremy: Is there a way to check whether a `Curve` lies in a given `Plane`? I can simply call `NewModelCurve` on it. That throws exception if the curve does not lie in the plane. However, it would be much cleaner and more efficient to check that programmatically instead. Does the Revit API offer anything that I could use for that check, or is this a case of DIY?\n\nDevteam: `Face` has `Intersect(Curve)`.\n`Plane` (or other `Surface`) does not.\nCould you project the curve end-points (and one intermediate point) with `Surface.Project` and check the distances?  \nAlternatively, canâ€™t you build a plane via 3 points on the curve, confirm matching normal vectors and then check on point on the target plane for intersection with the generated plane? Also, check that the initiating curve is planar (no idea how in Revit API but non-planar 3D splines are a thing that ruins all of the above).\n\nJeremy: Yes, I could project and test the distance. I think I only have arcs and lines, though, so it may be easier to implement my own is-curve-in-plane predicate, much faster, probably... I think the Revit API once boasted a method on the `Curve` class to return the plane it was lying in, but that seems to have vanished...\n\nI added a counter to track all the different kinds of geometry elements I am handling, and it reported:\n\n<pre>\n    3 Element\n    2 FamilyInstance\n    7 GeometryElement\n    2 GeometryInstance\n  261 Line\n    2 null\n    9 Solid\n    2 Wall\n</pre>\n\nApparently, all the curves I have to handle are `Line` objects, and that is easy using `Plane.Project`:\n\n<pre class=\"code\">\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Predicate&nbsp;returning&nbsp;true&nbsp;if&nbsp;the&nbsp;given&nbsp;line</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;lies&nbsp;in&nbsp;the&nbsp;given&nbsp;plane</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsLineInPlane(\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;line,\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">Plane</span>&nbsp;plane&nbsp;)\n  {\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p0&nbsp;=&nbsp;line.GetEndPoint(&nbsp;0&nbsp;);\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p1&nbsp;=&nbsp;line.GetEndPoint(&nbsp;1&nbsp;);\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">UV</span>&nbsp;uv0,&nbsp;uv1;\n  &nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;d0,&nbsp;d1;\n   \n  &nbsp;&nbsp;plane.Project(&nbsp;p0,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;uv0,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;d0&nbsp;);\n  &nbsp;&nbsp;plane.Project(&nbsp;p1,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;uv1,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;d1&nbsp;);\n   \n  &nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;_eps&nbsp;&gt;&nbsp;<span style=\"color:#2b91af;\">Math</span>.Abs(&nbsp;d0&nbsp;)\n  &nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;_eps&nbsp;&gt;&nbsp;<span style=\"color:#2b91af;\">Math</span>.Abs(&nbsp;d1&nbsp;);\n  }\n</pre>\n\nJeremy: I wonder if `d0` and `d1` are guaranteed to be positive in any case?\nOr can they be negative also?\nThe documentation should tell me, but it does not.\n\nDevteam: The distance output will always be non-negative (up to floating-point rounding error).\nYou are correct in saying that the API documentation should state that explicitly, though it probably uses \"distance\" to generally mean unsigned distance.\nYou're also correct in saying that it would be helpful for Revit's API to provide a function to determine if a curve lies in a plane (or more generally, on any given surface).\nThere is an internal function that does so, but it's not exposed via the API."
  },
  {
    "original_filename": "1754_section_intersect_geo",
    "header_text": "Helper Methods and External Command Mainline",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Helper Methods and External Command Mainline\n\nUsing my own curve-in-plane predicate to eliminate all curves not lying in the plane instead of throwing an exception for each one sped up execution tremendously.\n\nIt also enabled me to separate the curve collection and the model curve creation from each other.\n\nI implemented a read-only curve collection section followed by a separate, later, transaction for the model curve creation.\n\nThe code now looks like this:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">namespace</span>&nbsp;SectionCutGeo\n{\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;A&nbsp;class&nbsp;to&nbsp;count&nbsp;and&nbsp;report&nbsp;the&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;number&nbsp;of&nbsp;objects&nbsp;encountered.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">JtObjCounter</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">int</span>&gt;\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Count&nbsp;a&nbsp;new&nbsp;occurence&nbsp;of&nbsp;an&nbsp;object</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;Increment(&nbsp;<span style=\"color:blue;\">object</span>&nbsp;obj&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;key&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;obj\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;<span style=\"color:#a31515;\">&quot;null&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;obj.GetType().Name;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!ContainsKey(&nbsp;key&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add(&nbsp;key,&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++<span style=\"color:blue;\">this</span>[key];\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Report&nbsp;the&nbsp;number&nbsp;of&nbsp;objects&nbsp;encountered.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;Print()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;keys&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;(&nbsp;Keys&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.Sort();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">string</span>&nbsp;key&nbsp;<span style=\"color:blue;\">in</span>&nbsp;keys&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;<span style=\"color:#a31515;\">&quot;{0,5}&nbsp;{1}&quot;</span>,&nbsp;<span style=\"color:blue;\">this</span>[key],&nbsp;key&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;[<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;<span style=\"color:#2b91af;\">TransactionMode</span>.Manual&nbsp;)]\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">Command</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IExternalCommand</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Maximum&nbsp;distance&nbsp;for&nbsp;line&nbsp;to&nbsp;be&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;considered&nbsp;to&nbsp;lie&nbsp;in&nbsp;plane</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">double</span>&nbsp;_eps&nbsp;=&nbsp;1.0e-6;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;User&nbsp;instructions&nbsp;for&nbsp;running&nbsp;this&nbsp;external&nbsp;command</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_instructions&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Please&nbsp;launch&nbsp;this&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;command&nbsp;in&nbsp;a&nbsp;section&nbsp;view&nbsp;with&nbsp;fine&nbsp;level&nbsp;of&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;detail&nbsp;and&nbsp;far&nbsp;bound&nbsp;clipping&nbsp;set&nbsp;to&nbsp;&#39;Clip&nbsp;with&nbsp;line&#39;&quot;</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Predicate&nbsp;returning&nbsp;true&nbsp;if&nbsp;the&nbsp;given&nbsp;line&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;lies&nbsp;in&nbsp;the&nbsp;given&nbsp;plane</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsLineInPlane(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;line,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Plane</span>&nbsp;plane&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p0&nbsp;=&nbsp;line.GetEndPoint(&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p1&nbsp;=&nbsp;line.GetEndPoint(&nbsp;1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UV</span>&nbsp;uv0,&nbsp;uv1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;d0,&nbsp;d1;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plane.Project(&nbsp;p0,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;uv0,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;d0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plane.Project(&nbsp;p1,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;uv1,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;d1&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Assert(&nbsp;0&nbsp;&lt;=&nbsp;d0,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;expected&nbsp;non-negative&nbsp;distance&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Assert(&nbsp;0&nbsp;&lt;=&nbsp;d1,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;expected&nbsp;non-negative&nbsp;distance&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;(&nbsp;_eps&nbsp;&gt;&nbsp;d0&nbsp;)&nbsp;&amp;&amp;&nbsp;(&nbsp;_eps&nbsp;&gt;&nbsp;d1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Recursively&nbsp;handle&nbsp;geometry&nbsp;element</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;GetCurvesInPlane(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Curve</span>&gt;&nbsp;curves,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">JtObjCounter</span>&nbsp;geoCounter,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Plane</span>&nbsp;plane,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;geo&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoCounter.Increment(&nbsp;geo&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;geo&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">GeometryObject</span>&nbsp;obj&nbsp;<span style=\"color:blue;\">in</span>&nbsp;geo&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoCounter.Increment(&nbsp;obj&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Solid</span>&nbsp;sol&nbsp;=&nbsp;obj&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Solid</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;sol&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">EdgeArray</span>&nbsp;edges&nbsp;=&nbsp;sol.Edges;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Edge</span>&nbsp;edge&nbsp;<span style=\"color:blue;\">in</span>&nbsp;edges&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Curve</span>&nbsp;curve&nbsp;=&nbsp;edge.AsCurve();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Assert(&nbsp;curve&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;we&nbsp;currently&nbsp;only&nbsp;support&nbsp;lines&nbsp;here&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoCounter.Increment(&nbsp;curve&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;IsLineInPlane(&nbsp;curve&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>,&nbsp;plane&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curves.Add(&nbsp;curve&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryInstance</span>&nbsp;inst&nbsp;=&nbsp;obj&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">GeometryInstance</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;inst&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetCurvesInPlane(&nbsp;curves,&nbsp;geoCounter,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plane,&nbsp;inst.GetInstanceGeometry()&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Assert(&nbsp;<span style=\"color:blue;\">false</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;unsupported&nbsp;geometry&nbsp;object&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;obj.GetType().Name&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;Execute(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementSet</span>&nbsp;elements&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIApplication</span>&nbsp;uiapp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIDocument</span>&nbsp;uidoc&nbsp;=&nbsp;uiapp.ActiveUIDocument;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;=&nbsp;uiapp.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">View</span>&nbsp;section_view&nbsp;=&nbsp;commandData.View;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;p&nbsp;=&nbsp;section_view.get_Parameter(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.VIEWER_BOUND_FAR_CLIPPING&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:#2b91af;\">ViewType</span>.Section&nbsp;!=&nbsp;section_view.ViewType\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;<span style=\"color:#2b91af;\">ViewDetailLevel</span>.Fine&nbsp;!=&nbsp;section_view.DetailLevel\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;||&nbsp;1&nbsp;!=&nbsp;p.AsInteger()&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message&nbsp;=&nbsp;_instructions;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Failed;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;a\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;section_view.Id&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Options</span>&nbsp;opt&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ComputeReferences&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IncludeNonVisibleObjects&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;View&nbsp;=&nbsp;section_view\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">SketchPlane</span>&nbsp;plane1&nbsp;=&nbsp;section_view.SketchPlane;&nbsp;<span style=\"color:green;\">//&nbsp;this&nbsp;is&nbsp;null</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Plane</span>&nbsp;plane2&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Plane</span>.CreateByNormalAndOrigin(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;section_view.ViewDirection,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;section_view.Origin&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">JtObjCounter</span>&nbsp;geoCounter&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">JtObjCounter</span>();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Curve</span>&gt;&nbsp;curves&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Curve</span>&gt;();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;<span style=\"color:blue;\">in</span>&nbsp;a&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoCounter.Increment(&nbsp;e&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;geo&nbsp;=&nbsp;e.get_Geometry(&nbsp;opt&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetCurvesInPlane(&nbsp;curves,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoCounter,&nbsp;plane2,&nbsp;geo&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;<span style=\"color:#a31515;\">&quot;Objects&nbsp;analysed:&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoCounter.Print();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;{0}&nbsp;cut&nbsp;geometry&nbsp;lines&nbsp;found&nbsp;in&nbsp;section&nbsp;plane.&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;curves.Count&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Create&nbsp;Section&nbsp;Cut&nbsp;Model&nbsp;Curves&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">SketchPlane</span>&nbsp;plane3&nbsp;=&nbsp;<span style=\"color:#2b91af;\">SketchPlane</span>.Create(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;plane2&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Curve</span>&nbsp;c&nbsp;<span style=\"color:blue;\">in</span>&nbsp;curves&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc.Create.NewModelCurve(&nbsp;c,&nbsp;plane3&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n</pre>\n\nNote that the code listed above is a momentary snapshot at the time of writing.\n\nFor the full Visual Studio solution and updates to the code, please refer to\nthe [SectionCutGeo GitHub repository](https://github.com/jeremytammik/SectionCutGeo)."
  },
  {
    "original_filename": "1754_section_intersect_geo",
    "header_text": "Sample Model and Results",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Sample Model and Results\n\nSample model 3D view:\n\n![Sample model 3D view](img/section_cut_geo_3d.png)\n\nPlan view showing section location:\n\n![Plan view showing section location](img/section_cut_geo_plan.png)\n\nCut geometry in section view:\n\n![Cut geometry in section view](img/section_cut_geo_cut.png)\n\nModel lines representing the cut geometry of the window family instance produced by the add-in in section view:\n\n![Model lines representing cut geometry in section view](img/section_cut_geo_cut_geo_window.png)\n\nModel lines representing the cut geometry of walls, door and window isolated in 3D view:\n\n![Model lines representing cut geometry isolated in 3D view](img/section_cut_geo_cut_geo_3d.png)\n\nListing the number of processed elements, geometry objects and curves actually lying in the cut plane for this sample:\n\n<pre>\n  Objects analysed:\n      3 Element\n      2 FamilyInstance\n      7 GeometryElement\n      2 GeometryInstance\n    261 Line\n      2 null\n      9 Solid\n      2 Wall\n\n  77 cut geometry lines found in section plane.\n</pre>"
  },
  {
    "original_filename": "1754_section_intersect_geo",
    "header_text": "Caveat",
    "local_header_href": "#7",
    "chunk_text": "####<a name=\"7\"></a> Caveat\n\nThis sample currently only handles solid and instance geometry objects.\n\nThere may well be other object types that need to be handled as well to provide full coverage for all situations."
  }
]