[
  {
    "original_filename": "0493_xml_family_usage",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0493_xml_family_usage",
    "header_text": "XML Family Usage Report",
    "local_header_href": "#xml-family-usage-report",
    "chunk_text": "<h3>XML Family Usage Report</h3><p>I spent a pleasant weekend here in Tel Aviv, mostly preparing for the upcoming developer conferences.\nI did take time for a walk along the beach to Jaffa and an early dinner in a neat little restaurant in the port, \n\n<a href=\"http://www.container.org.il\">Container</a>.\n\nHere it is, behind the fishing boats, seen from the other side of the port, with old Jaffa in the background:</p><center>\n<img alt=\"Restaurant Container in Jaffa\" src=\"img/restaurant_container_in_jaffa.jpg\" width=\"400\"/>\n</center><p>I also found out that you can get really good coffee in Israel, and wonderful ice cream, for instance in 'tita', and \nin 'Anita, la Mamma del Gelato'.\nAnita apparently won prizes for the best ice cream here three years running, which is quite something in view of the competition.\nI really like the atmosphere of this city!\n\n<p>Today we move from one extreme to the next, from plus 25 degrees temperature here in Tel Aviv to a similar negative temperature in Moscow...\n\n\n<p>Meanwhile, here is another little item from Kevin Vandecar's \n\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/filtered-element-collectors.html\">\nfiltering and optimisation</a> class\n\nat the AEC DevCamp in June, which I also used in my  \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/autodesk-university-2010-class-materials.html\">\nAU class CP234-2</a> on\n\nthe same topic.\n\n\n<p>As an example of using Revit filtering to retrieve family symbols and instances in conjunction with effective use of LINQ and a .NET framework XML library, Kevin presents an external command which creates a pretty comprehensive family usage report in very few lines of code.\n\n<p>It uses the ElementClassFilter, FamilySymbolFilter, and FamilyInstanceFilter classes to gather information about the families in a project.\nFor each family, it iterates over each symbol within the family, and finally retrieves all instances of each symbol. \nThese filters have not previously been discussed here.\n\n<p>This produces an abundance of information in a typical project, so it processes the results using the LINQ to XML functional or \"DOM free\" approach to produce a family inventory of the model in a nice XML format.\n\n\n\n<p>The report also includes the location of each family instance, and makes use of this helper method to return a string representing it.\nThe string consists of the endpoints of the given family instance location curve, if it has one, otherwise its location point, if it has one, or \"&lt;none&gt;\" if all else fails:\n\n\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> LocationString( <span class=\"teal\">FamilyInstance</span> fi )\n{\n  <span class=\"teal\">LocationPoint</span> p = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n  <span class=\"teal\">LocationCurve</span> c = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n  <span class=\"blue\">return</span> ( <span class=\"blue\">null</span> == p\n    ? ( ( <span class=\"blue\">null</span> == c\n      ? <span class=\"maroon\">\"&lt;none&gt;\"</span>\n      : <span class=\"teal\">Util</span>.PointString( c.Curve.get_EndPoint( 0 ) )\n        + <span class=\"maroon\">\" to \"</span> \n        + <span class=\"teal\">Util</span>.PointString( c.Curve.get_EndPoint( 1 ) ) ) )\n    : <span class=\"teal\">Util</span>.PointString( p.Point ) );\n}\n</pre>\n<!--\n\n\n<p>I tried to figure out a way to make my first use of the first of the  \n\n\n\n\n\n\n\n\n\n\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/c-and-net-little-wonders.html\">\nC# and .NET little wonders</a> ,\n\nthe null coalescing operator '??', to rewrite this more concisely, but the best I can come up with is actually less concise and the use of the operator does not help at all:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> LocationString( <span class=\"teal\">FamilyInstance</span> fi )\n{\n&nbsp; <span class=\"blue\">string</span> s = <span class=\"blue\">null</span>;\n&nbsp;\n&nbsp; <span class=\"teal\">LocationPoint</span> p = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n&nbsp;\n&nbsp; <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n&nbsp; {\n&nbsp; &nbsp; s = <span class=\"teal\">Util</span>.PointString( p.Point );\n&nbsp; }\n&nbsp;\n&nbsp; <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == s )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"teal\">LocationCurve</span> lc = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">Curve</span> c = lc.Curve;\n&nbsp;\n&nbsp; &nbsp; s = <span class=\"teal\">Util</span>.PointString( c.get_EndPoint( 0 ) )\n&nbsp; &nbsp; &nbsp; &nbsp; + <span class=\"maroon\">&quot; to &quot;</span> \n&nbsp; &nbsp; &nbsp; &nbsp; + <span class=\"teal\">Util</span>.PointString( c.get_EndPoint( 1 );\n&nbsp; }\n&nbsp; <span class=\"blue\">return</span> s ?? <span class=\"maroon\">&quot;&lt;none&gt;&quot;</span>;\n}\n</pre>\n\n<p>Maybe the neatest thing to do would be to declare this method as an extension method to the Location class (another one of the little wonders), overloading the standard .NET ToString method:\n\n-->\n<p>Here is the external command implementation, performing the following steps:\n\n<ul>\n<li>Instantiate a stopwatch for benchmarking purposes.\n<li>Create a top level \"Family_Inventory\" XML node.\n<li>Retrieve all families in the document and iterate over them.\n<li>For each family, create a family element node.\n<li>Retrieve all symbols using a FamilySymbolFilter, and iterate over those.\n<li>For each symbol, create a symbol node.\n<li>Retrieve all symbol instances in the active view using a FamilyInstanceFilter.\n<li>Create subnodes for all the instances.\n<li>Create and display the XML document and the elapsed time.\n</li></li></li></li></li></li></li></li></li></ul>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">Document</span> doc = uiapp.ActiveUIDocument.Document;\n \n  <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n  <span class=\"teal\">XElement</span> xmlFamilyInstances = <span class=\"blue\">new</span> <span class=\"teal\">XElement</span>( \n    <span class=\"maroon\">\"Family_Inventory\"</span> );\n \n  <span class=\"green\">// retrieve all families. </span>\n  <span class=\"green\">// use the ElementClassFilter shortcut </span>\n  <span class=\"green\">// and filter all \"Family\" elements.</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> families \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  families.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) );\n \n  <span class=\"blue\">int</span> nFamily = 0;\n  <span class=\"blue\">int</span> nSymbol = 0;\n  <span class=\"blue\">int</span> nInstance= 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Family</span> family <span class=\"blue\">in</span> families )\n  {\n    ++nFamily;\n \n    <span class=\"green\">// XML: Start by adding the Family element</span>\n \n    <span class=\"teal\">XElement</span> temp = <span class=\"blue\">new</span> <span class=\"teal\">XElement</span>( \n      <span class=\"maroon\">\"FamilyName\"</span>, family.Name );\n \n    <span class=\"green\">// use the FamilySymbolFilter for each Family</span>\n \n    <span class=\"teal\">FamilySymbolFilter</span> filterFamSym \n      = <span class=\"blue\">new</span> <span class=\"teal\">FamilySymbolFilter</span>( family.Id );\n \n    <span class=\"teal\">FilteredElementCollector</span> famSymbols \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n    famSymbols.WherePasses( filterFamSym );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> famSymbol <span class=\"blue\">in</span> famSymbols )\n    {\n      ++nSymbol;\n \n      <span class=\"teal\">FamilyInstanceFilter</span> filterFamilyInst \n        = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( \n          doc, famSymbol.Id );\n \n      <span class=\"teal\">FilteredElementCollector</span> collectorFamInstances \n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( \n          doc, doc.ActiveView.Id );\n \n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">FamilyInstance</span>&gt; famInstances \n        = collectorFamInstances\n          .WherePasses( filterFamilyInst )\n          .OfType&lt;<span class=\"teal\">FamilyInstance</span>&gt;();\n \n      <span class=\"blue\">int</span> nInstanceCount \n        = famInstances.Count&lt;<span class=\"teal\">FamilyInstance</span>&gt;();\n \n      nInstance += nInstanceCount;\n \n      temp.Add( <span class=\"blue\">new</span> <span class=\"teal\">XElement</span>( \n        <span class=\"maroon\">\"SymbolName\"</span>, \n        famSymbol.Name,\n        <span class=\"blue\">from</span> fi <span class=\"blue\">in</span> famInstances\n          <span class=\"blue\">select</span> <span class=\"blue\">new</span> <span class=\"teal\">XElement</span>( \n            <span class=\"maroon\">\"Instance\"</span>, \n            fi.Id.ToString(),\n            <span class=\"blue\">new</span> <span class=\"teal\">XElement</span>( <span class=\"maroon\">\"Type\"</span>, \n              fi.GetType().ToString() ),\n            <span class=\"blue\">new</span> <span class=\"teal\">XElement</span>( <span class=\"maroon\">\"Position\"</span>, \n              LocationString( fi ) ) ) ) );\n    }\n    xmlFamilyInstances.Add( temp );\n  }\n \n  <span class=\"green\">// Create the XML report document</span>\n \n  <span class=\"teal\">XDocument</span> xmldoc =\n    <span class=\"blue\">new</span> <span class=\"teal\">XDocument</span>(\n        <span class=\"blue\">new</span> <span class=\"teal\">XDeclaration</span>( <span class=\"maroon\">\"1.0\"</span>, <span class=\"maroon\">\"utf-8\"</span>, <span class=\"maroon\">\"yes\"</span> ),\n        <span class=\"blue\">new</span> <span class=\"teal\">XComment</span>( \n          <span class=\"maroon\">\"Current Family Inventory of Revit project: \"</span>\n          + doc.PathName ),\n        xmlFamilyInstances );\n \n  <span class=\"blue\">string</span> fileName = <span class=\"maroon\">\"C:/FamilyInventory.xml\"</span>;\n  xmldoc.Save( fileName );\n \n  <span class=\"teal\">Util</span>.ShowElapsedTime( sw,\n    <span class=\"maroon\">\"Linq Example 3 XML Report\"</span>,\n    <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} families with {1} symbols and {2} instances\"</span>,\n      nFamily, nSymbol, nInstance ),\n    <span class=\"blue\">string</span>.Empty );\n \n  <span class=\"green\">// We can use Internet Explorer or whatever </span>\n  <span class=\"green\">// your favorite XML viewer is...</span>\n  <span class=\"teal\">Process</span>.Start(\n    <span class=\"maroon\">\"C:/Program Files/Internet Explorer/iexplore.exe\"</span>, \n    fileName);\n \n  <span class=\"green\">// Here is one that is free and is a little more </span>\n  <span class=\"green\">// robust than Internet Explorer. If interested, </span>\n  <span class=\"green\">// download from here: </span>\n  <span class=\"green\">// http://download.cnet.com/XML-Marker/3000-7241_4-10202365.html</span>\n  <span class=\"green\">//Process.Start( @\"C:/Program Files (x86)/XML Marker/xmlmarker.exe\", fileName );</span>\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Running this in the ArchSample.rvt model produces the following elapsed time report:\n\n<pre>\nLinq Example 3 XML Report: \n729 milliseconds 57 families \nwith 61 symbols and 327 instances\n</pre>\n<p>Looking at the XML file in the browser, here are the completely collapsed contents showing just the top level family inventory node:</p>\n<center>\n<img alt=\"Family inventory top level node\" src=\"img/family_inventory_0.png\"/>\n</center>\n<p>Here are some opened family nodes, a few with no symbols defined, and the system panel family containing two symbols, one of which has no instances in the model:</p>\n<center>\n<img alt=\"Family inventory family nodes\" src=\"img/family_inventory_1.png\"/>\n</center>\n<p>Finally, here are some expanded instance nodes for one of the rectangular mullion symbols:</p>\n<center>\n<img alt=\"Family inventory instance nodes\" src=\"img/family_inventory_2.png\"/>\n</center>\n</p></p></p></p></p></p></p></p></p>"
  }
]