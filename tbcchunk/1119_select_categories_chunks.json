[
  {
    "original_filename": "1119_select_categories",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1119_select_categories",
    "header_text": "Selecting Visible Categories from a Set of Views",
    "local_header_href": "#selecting-visible-categories-from-a-set-of-views",
    "chunk_text": "<h3>Selecting Visible Categories from a Set of Views</h3><p>Today I look at interactively picking specific categories to export to the simplified 2D BIM editor cloud database from a list of all categories retrieved from a collection of elements displayed in a given set of plan views.</p><p>This is the second instalment of implementing the new RoomEditorApp features required for my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/back-from-desert-and-two-happy-events.html#3\">\ngeneric 2D simplified BIM editor</a> Tech\n\nSummit presentation.</p><p>Specifically, I now address steps 4 and 5 in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/using-generic-collections-with-filters-and-forms.html\">\ntentative workflow</a>:\n\n<ol>\n<li>Launch the RoomEditorApp export plan views command.</li>\n<li>Display a list of plan views in a popup window.</li>\n<li>Select views to be exported and click OK.</li>\n<li>Display a list of categories in a popup window.</li>\n<li>Select categories to be exported and click OK.</li>\n<li>Store relevant graphical and non-graphical information in a cloud database.</li>\n<li>Navigate and display simplified model on mobile device.</li>\n<li>Edit graphical and non-graphical information.</li>\n<li>Update Revit BIM either interactively or real-time.</li>\n</ol>\n<p>The list of categories to choose from should obviously not include all categories present in the Revit project, only those relevant to the elements in the selected views.</p>\n<p>Therefore, it makes sense to implement a category collector helper class to determine the categories of interest based on the views selected in step 3.</p>\n<p>For each view, we determine the elements of potential interest displayed in it.\nFrom those, we collect all the distinct categories.\nIn this case, 'distinct categories' is defined as 'categories having different element ids'.</p>\n<p>This distinction is achieved by implementing a category equality comparer class that considers two categories the same if their element id is equal.\nThis comparer class is passed in to the generic dictionary class instance used to collect the categories.\nWithout the element id comparer, it would contain a large number of duplicate entries.</p>\n<p>The dictionary uses the category instances as keys.\nThis enables us to easily pass them in as selectable items to a checked list box in the .NET category selection form for the interactive user selection step 5.</p>\n<p>Consequently, I implement one helper and two new main classes to achieve these steps and update the external command to drive them:</p>\n<ul>\n<li><a href=\"#3\">CategoryEqualityComparer</a> – Implement an equality comparer to ensure that categories with the same category id compare equal.</li>\n<li><a href=\"#4\">CategoryCollector</a> – Collect categories from elements displayed in a given set of views.</li>\n<li><a href=\"#5\">FrmSelectCategories</a> – Interactive category selection form.</li>\n<li><a href=\"#6\">CmdUploadViews</a> – Drive the view and category selection.</li>\n</ul>\n<a name=\"3\"></a>\n<h4>CategoryEqualityComparer</h4>\n<p>An equality comparer implements the IEqualityComparer interface, requiring the two methods Equals and GetHashCode.</p>\n<p>They are straightforward to implement based on the category element id:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Categories with the same element id equate to</span>\n  <span class=\"gray\">///</span><span class=\"green\"> the same category. Without this, many, many,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> many duplicates.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">CategoryEqualityComparer</span>\n    : <span class=\"teal\">IEqualityComparer</span>&lt;<span class=\"teal\">Category</span>&gt;\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Equals( <span class=\"teal\">Category</span> x, <span class=\"teal\">Category</span> y )\n    {\n      <span class=\"blue\">return</span> x.Id.IntegerValue.Equals(\n        y.Id.IntegerValue );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetHashCode( <span class=\"teal\">Category</span> obj )\n    {\n      <span class=\"blue\">return</span> obj.Id.IntegerValue.GetHashCode();\n    }\n  }\n</pre>\n<a name=\"4\"></a>\n<h4>CategoryCollector</h4>\n<p>The CategoryCollector collects the distinct categories from all the elements of interest displayed in a given set of views.</p>\n<p>The elements of interest are those that we might potentially wish to represent in the simplifier BIM editor cloud database and viewer.</p>\n<p>There are an infinite number of ways to define what that might mean, so you will almost certainly have to adapt the detailed decision to your specific needs.</p>\n<p>This is related to the question of how to select all model elements or visible 3D elements from a project, to which we already discussed quite a wide range of answers:</p>\n<!--\n\nls *model*: 0140 0254 0453 0454\n\nls *visib*: 0255 1002\n\n-->\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/selecting-model-elements.html\">\nValid category and non-empty geometry</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/select-model-elements-2.html\">\nDitto, and eliminate certain categories</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/visible-elements.html\">\nValid category and neither category nor element is hidden</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/selecting-model-elements.html\">\nBased on the Category.HasMaterialQuantities property</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/model-elements-revisited.html\">\nBased on the elements visible in a default 3D view</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/determining-absolutely-all-visible-elements.html\">Using a custom exporter</a></li>\n</ul>\n<p>The last three of these are all very effective.</p>\n<p>In this case, I chose to combine two of them, using a filtered element collector based on the view plus checking the Category.HasMaterialQuantities property.</p>\n<p>The category collector implements a couple of additional bookkeeping variables to count the number of views, total elements and elements with Category.HasMaterialQuantities set for reporting purposes.</p>\n<p>The entire view iteration, element selection, category collection and reporting takes place in the constructor:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Collect all categories of all visible</span>\n  <span class=\"gray\">///</span><span class=\"green\"> elements in a given set of views.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">CategoryCollector</span> : <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">Category</span>, <span class=\"blue\">int</span>&gt;\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Number of view selected.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">int</span> _nViews;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Number of elements in all selected views </span>\n    <span class=\"gray\">///</span><span class=\"green\"> including repetitions.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">int</span> _nElements;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Number of elements whose category have </span>\n    <span class=\"gray\">///</span><span class=\"green\"> material quantities in all selected views</span>\n    <span class=\"gray\">///</span><span class=\"green\"> including repetitions.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">int</span> _nElementsWithCategorMaterialQuantities;\n \n    <span class=\"blue\">public</span> CategoryCollector( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ViewPlan</span>&gt; views )\n      : <span class=\"blue\">base</span>( <span class=\"blue\">new</span> <span class=\"teal\">CategoryEqualityComparer</span>() )\n    {\n      _nViews = views.Count;\n      _nElements = 0;\n      _nElementsWithCategorMaterialQuantities = 0;\n \n      <span class=\"blue\">if</span>( 0 &lt; _nViews )\n      {\n        <span class=\"teal\">Document</span> doc = views[0].Document;\n \n        <span class=\"teal\">FilteredElementCollector</span> a;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> v <span class=\"blue\">in</span> views )\n        {\n          a = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, v.Id )\n            .WhereElementIsViewIndependent();\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> a )\n          {\n            ++_nElements;\n \n            <span class=\"teal\">Category</span> cat = e.Category;\n \n            <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != cat\n              &amp;&amp; cat.HasMaterialQuantities )\n            {\n              ++_nElementsWithCategorMaterialQuantities;\n \n              <span class=\"blue\">if</span>( !ContainsKey( cat ) )\n              {\n                Add( cat, 0 );\n              }\n              ++<span class=\"blue\">this</span>[cat];\n            }\n          }\n        }\n      }\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Selected {0} categor{1} from \"</span>\n        + <span class=\"maroon\">\"{2} view{3} displaying {4} element{5}, \"</span>\n        + <span class=\"maroon\">\"{6} with HasMaterialQuantities=true\"</span>,\n        Count, <span class=\"teal\">Util</span>.PluralSuffixY( Count ),\n        _nViews, <span class=\"teal\">Util</span>.PluralSuffix( _nViews ),\n        _nElements, <span class=\"teal\">Util</span>.PluralSuffix( _nElements ),\n        _nElementsWithCategorMaterialQuantities );\n    }\n  }\n</pre>\n<p>I executed this selection process in a very simple model with just three views, Level 0, Level 1 and Site, and pared down the number of categories selected to just five in the end: Curtain Panels, Doors, Furniture, Structural Columns, Walls.</p>\n<p>Here are the results for some of the other alternatives I explored before choosing the final filtering approach:</p>\n<ul>\n<li>14 categories – all elements listed in the given set of views: Cameras, Curtain Panels, Curtain Wall Grids, Curtain Wall Mullions, Doors, Elevations, Furniture, Project Base Point, Room Tags, Rooms, Structural Columns, Survey Point, Views, Walls.</li>\n<li>13 categories – not view specific, eliminating Room Tags: Cameras, Curtain Panels, Curtain Wall Grids, Curtain Wall Mullions, Doors, Elevations, Furniture, Project Base Point, Rooms, Structural Columns, Survey Point, Views, Walls.</li>\n<li>12 categories – non-empty bounding box, eliminating Project Base Point and Survey Point: Cameras, Curtain Panels, Curtain Wall Grids, Curtain Wall Mullions, Doors, Elevations, Furniture, Room Tags, Rooms, Structural Columns, Views, Walls.</li>\n<li>5 categories – Category.HasMaterialQuantities, eliminating all of the above and more: Curtain Panels, Doors, Furniture, Structural Columns, Walls.</li>\n</ul>\n<a name=\"5\"></a>\n<h4>FrmSelectCategories</h4>\n<p>Once the categories to present to the user have been pared down to the ones of potential interest, we can display them in a checked list box in a .NET form for the user to make the final interactive selection.</p>\n<p>The category selection form FrmSelectCategories is similar to the view selection form\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/using-generic-collections-with-filters-and-forms.html#2\">\nFrmSelectViews</a> that\n\nwe discussed last week, except that we pass the pre-defined list of categories from the category collector discussed above straight into the constructor:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Interactive category selection form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">partial</span> <span class=\"blue\">class</span> <span class=\"teal\">FrmSelectCategories</span> : <span class=\"teal\">Form</span>\n  {\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Category</span>&gt; _categories;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Initialise the category selector</span>\n    <span class=\"gray\">///</span><span class=\"green\"> with the given list of categories.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"categories\"&gt;&lt;/param&gt;</span>\n    <span class=\"blue\">public</span> FrmSelectCategories(\n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Category</span>&gt; categories )\n    {\n      InitializeComponent();\n \n      _categories = categories;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Initialise the category selector with</span>\n    <span class=\"gray\">///</span><span class=\"green\"> the list of categories passed in to </span>\n    <span class=\"gray\">///</span><span class=\"green\"> the constructor and check them all.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> FrmSelectCategories_Load(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">EventArgs</span> e )\n    {\n      checkedListBox1.DataSource = _categories;\n      checkedListBox1.DisplayMember = <span class=\"maroon\">\"Name\"</span>;\n \n      <span class=\"green\">// Set all entries to be initially checked.</span>\n \n      <span class=\"blue\">int</span> n = checkedListBox1.Items.Count;\n \n      <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n      {\n        checkedListBox1.SetItemChecked( i, <span class=\"blue\">true</span> );\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Access the selected categories after the</span>\n    <span class=\"gray\">///</span><span class=\"green\"> form has been successfully completed.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Category</span>&gt; GetSelectedCategories()\n    {\n      <span class=\"blue\">return</span> checkedListBox1.CheckedItems\n        .Cast&lt;<span class=\"teal\">Category</span>&gt;().ToList&lt;<span class=\"teal\">Category</span>&gt;();\n    }\n  }\n</pre>\n<a name=\"6\"></a>\n<h4>CmdUploadViews</h4>\n<p>The categories retrieved by the category collector are sorted alphabetically before populating the interactive selection form checked list box.</p>\n<p>Just like the first form, the second one is properly parented by attaching it to the main Revit application window handle.</p>\n<p>Here is the entire updated command implementation:</p>\n<pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Linq;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> <span class=\"teal\">ComponentManager</span> = Autodesk.Windows.<span class=\"teal\">ComponentManager</span>;\n<span class=\"blue\">using</span> <span class=\"teal\">IWin32Window</span> = System.Windows.Forms.<span class=\"teal\">IWin32Window</span>;\n<span class=\"blue\">using</span> <span class=\"teal\">DialogResult</span> = System.Windows.Forms.<span class=\"teal\">DialogResult</span>;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> RoomEditorApp\n{\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdUploadViews</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">IWin32Window</span> revit_window\n        = <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>(\n          <span class=\"teal\">ComponentManager</span>.ApplicationWindow );\n \n      <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Application</span> app = uiapp.Application;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == doc )\n      {\n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Please run this command in a valid\"</span>\n          + <span class=\"maroon\">\" Revit project document.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"teal\">FrmSelectViews</span> form = <span class=\"blue\">new</span> <span class=\"teal\">FrmSelectViews</span>( doc );\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">DialogResult</span>.OK == form.ShowDialog(\n        revit_window ) )\n      {\n        <span class=\"teal\">List</span>&lt;<span class=\"teal\">ViewPlan</span>&gt; views = form.GetSelectedViews();\n \n        <span class=\"blue\">int</span> n = views.Count;\n \n        <span class=\"blue\">string</span> caption = <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"{0} Plan View{1} Selected\"</span>,\n          n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n        <span class=\"blue\">string</span> list = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n          views.Select&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">string</span>&gt;(\n            e =&gt; e.Name ) );\n \n        <span class=\"teal\">Util</span>.InfoMsg2( caption, list );\n \n        <span class=\"teal\">List</span>&lt;<span class=\"teal\">Category</span>&gt; categories\n          = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Category</span>&gt;(\n            <span class=\"blue\">new</span> <span class=\"teal\">CategoryCollector</span>( views ).Keys );\n \n        <span class=\"green\">// Sort categories alphabetically by name</span>\n        <span class=\"green\">// to display them in selection form.</span>\n \n        categories.Sort(\n          <span class=\"blue\">delegate</span>( <span class=\"teal\">Category</span> c1, <span class=\"teal\">Category</span> c2 )\n          {\n            <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Compare( c1.Name, c2.Name );\n          } );\n \n        <span class=\"teal\">FrmSelectCategories</span> form2\n          = <span class=\"blue\">new</span> <span class=\"teal\">FrmSelectCategories</span>( categories );\n \n        <span class=\"blue\">if</span>( <span class=\"teal\">DialogResult</span>.OK == form2.ShowDialog(\n          revit_window ) )\n        {\n          categories = form2.GetSelectedCategories();\n \n          n = categories.Count;\n \n          caption = <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"{0} Categor{1} Selected\"</span>,\n            n, <span class=\"teal\">Util</span>.PluralSuffixY( n ) );\n \n          list = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n            categories.Select&lt;<span class=\"teal\">Category</span>, <span class=\"blue\">string</span>&gt;(\n              e =&gt; e.Name ) );\n \n          <span class=\"teal\">Util</span>.InfoMsg2( caption, list );\n        }\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre>\n<p>Executing the external command in my simple test model displays the following forms and reports:</p>\n<p>Plan view selection form:</p>\n<center>\n<img alt=\"Plan view selection form\" src=\"img/category_select_1_views.png\" width=\"217\"/>\n</center>\n<p>Plan view selection report:</p>\n<center>\n<img alt=\"Plan view selection report\" src=\"img/category_select_2_view_report.png\" width=\"366\"/>\n</center>\n<p>Category selection form:</p>\n<center>\n<img alt=\"Category selection form\" src=\"img/category_select_3_categories.png\" width=\"217\"/>\n</center>\n<p>Category selection report:</p>\n<center>\n<img alt=\"Category selection report\" src=\"img/category_select_4_category_report.png\" width=\"366\"/>\n</center>\n<a name=\"7\"></a>\n<h4>Download</h4>\n<p>For the complete source code, Visual Studio solution and add-in manifest, please refer to the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">RoomEditorApp GitHub repository</a>.</p>\n<p>The version discussed above is stored as\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.2.2\">release 2014.0.2.2</a>.</p>\n</p>"
  },
  {
    "original_filename": "1119_select_categories",
    "header_text": "CategoryEqualityComparer",
    "local_header_href": "#categoryequalitycomparer",
    "chunk_text": "<h4>CategoryEqualityComparer</h4><p>An equality comparer implements the IEqualityComparer interface, requiring the two methods Equals and GetHashCode.</p><p>They are straightforward to implement based on the category element id:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Categories with the same element id equate to</span>\n  <span class=\"gray\">///</span><span class=\"green\"> the same category. Without this, many, many,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> many duplicates.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">CategoryEqualityComparer</span>\n    : <span class=\"teal\">IEqualityComparer</span>&lt;<span class=\"teal\">Category</span>&gt;\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Equals( <span class=\"teal\">Category</span> x, <span class=\"teal\">Category</span> y )\n    {\n      <span class=\"blue\">return</span> x.Id.IntegerValue.Equals(\n        y.Id.IntegerValue );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetHashCode( <span class=\"teal\">Category</span> obj )\n    {\n      <span class=\"blue\">return</span> obj.Id.IntegerValue.GetHashCode();\n    }\n  }\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "1119_select_categories",
    "header_text": "CategoryCollector",
    "local_header_href": "#categorycollector",
    "chunk_text": "<h4>CategoryCollector</h4><p>The CategoryCollector collects the distinct categories from all the elements of interest displayed in a given set of views.</p><p>The elements of interest are those that we might potentially wish to represent in the simplifier BIM editor cloud database and viewer.</p><p>There are an infinite number of ways to define what that might mean, so you will almost certainly have to adapt the detailed decision to your specific needs.</p><p>This is related to the question of how to select all model elements or visible 3D elements from a project, to which we already discussed quite a wide range of answers:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/selecting-model-elements.html\">\nValid category and non-empty geometry</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/select-model-elements-2.html\">\nDitto, and eliminate certain categories</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/visible-elements.html\">\nValid category and neither category nor element is hidden</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/selecting-model-elements.html\">\nBased on the Category.HasMaterialQuantities property</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/model-elements-revisited.html\">\nBased on the elements visible in a default 3D view</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/determining-absolutely-all-visible-elements.html\">Using a custom exporter</a></li>\n</ul><p>The last three of these are all very effective.</p><p>In this case, I chose to combine two of them, using a filtered element collector based on the view plus checking the Category.HasMaterialQuantities property.</p><p>The category collector implements a couple of additional bookkeeping variables to count the number of views, total elements and elements with Category.HasMaterialQuantities set for reporting purposes.</p><p>The entire view iteration, element selection, category collection and reporting takes place in the constructor:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Collect all categories of all visible</span>\n  <span class=\"gray\">///</span><span class=\"green\"> elements in a given set of views.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">CategoryCollector</span> : <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">Category</span>, <span class=\"blue\">int</span>&gt;\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Number of view selected.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">int</span> _nViews;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Number of elements in all selected views </span>\n    <span class=\"gray\">///</span><span class=\"green\"> including repetitions.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">int</span> _nElements;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Number of elements whose category have </span>\n    <span class=\"gray\">///</span><span class=\"green\"> material quantities in all selected views</span>\n    <span class=\"gray\">///</span><span class=\"green\"> including repetitions.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">int</span> _nElementsWithCategorMaterialQuantities;\n \n    <span class=\"blue\">public</span> CategoryCollector( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ViewPlan</span>&gt; views )\n      : <span class=\"blue\">base</span>( <span class=\"blue\">new</span> <span class=\"teal\">CategoryEqualityComparer</span>() )\n    {\n      _nViews = views.Count;\n      _nElements = 0;\n      _nElementsWithCategorMaterialQuantities = 0;\n \n      <span class=\"blue\">if</span>( 0 &lt; _nViews )\n      {\n        <span class=\"teal\">Document</span> doc = views[0].Document;\n \n        <span class=\"teal\">FilteredElementCollector</span> a;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> v <span class=\"blue\">in</span> views )\n        {\n          a = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, v.Id )\n            .WhereElementIsViewIndependent();\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> a )\n          {\n            ++_nElements;\n \n            <span class=\"teal\">Category</span> cat = e.Category;\n \n            <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != cat\n              &amp;&amp; cat.HasMaterialQuantities )\n            {\n              ++_nElementsWithCategorMaterialQuantities;\n \n              <span class=\"blue\">if</span>( !ContainsKey( cat ) )\n              {\n                Add( cat, 0 );\n              }\n              ++<span class=\"blue\">this</span>[cat];\n            }\n          }\n        }\n      }\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Selected {0} categor{1} from \"</span>\n        + <span class=\"maroon\">\"{2} view{3} displaying {4} element{5}, \"</span>\n        + <span class=\"maroon\">\"{6} with HasMaterialQuantities=true\"</span>,\n        Count, <span class=\"teal\">Util</span>.PluralSuffixY( Count ),\n        _nViews, <span class=\"teal\">Util</span>.PluralSuffix( _nViews ),\n        _nElements, <span class=\"teal\">Util</span>.PluralSuffix( _nElements ),\n        _nElementsWithCategorMaterialQuantities );\n    }\n  }\n</pre><p>I executed this selection process in a very simple model with just three views, Level 0, Level 1 and Site, and pared down the number of categories selected to just five in the end: Curtain Panels, Doors, Furniture, Structural Columns, Walls.</p><p>Here are the results for some of the other alternatives I explored before choosing the final filtering approach:</p><ul>\n<li>14 categories – all elements listed in the given set of views: Cameras, Curtain Panels, Curtain Wall Grids, Curtain Wall Mullions, Doors, Elevations, Furniture, Project Base Point, Room Tags, Rooms, Structural Columns, Survey Point, Views, Walls.</li>\n<li>13 categories – not view specific, eliminating Room Tags: Cameras, Curtain Panels, Curtain Wall Grids, Curtain Wall Mullions, Doors, Elevations, Furniture, Project Base Point, Rooms, Structural Columns, Survey Point, Views, Walls.</li>\n<li>12 categories – non-empty bounding box, eliminating Project Base Point and Survey Point: Cameras, Curtain Panels, Curtain Wall Grids, Curtain Wall Mullions, Doors, Elevations, Furniture, Room Tags, Rooms, Structural Columns, Views, Walls.</li>\n<li>5 categories – Category.HasMaterialQuantities, eliminating all of the above and more: Curtain Panels, Doors, Furniture, Structural Columns, Walls.</li>\n</ul><a name=\"5\"></a>"
  },
  {
    "original_filename": "1119_select_categories",
    "header_text": "FrmSelectCategories",
    "local_header_href": "#frmselectcategories",
    "chunk_text": "<h4>FrmSelectCategories</h4><p>Once the categories to present to the user have been pared down to the ones of potential interest, we can display them in a checked list box in a .NET form for the user to make the final interactive selection.</p><p>The category selection form FrmSelectCategories is similar to the view selection form\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/using-generic-collections-with-filters-and-forms.html#2\">\nFrmSelectViews</a> that\n\nwe discussed last week, except that we pass the pre-defined list of categories from the category collector discussed above straight into the constructor:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Interactive category selection form.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">partial</span> <span class=\"blue\">class</span> <span class=\"teal\">FrmSelectCategories</span> : <span class=\"teal\">Form</span>\n  {\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Category</span>&gt; _categories;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Initialise the category selector</span>\n    <span class=\"gray\">///</span><span class=\"green\"> with the given list of categories.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"categories\"&gt;&lt;/param&gt;</span>\n    <span class=\"blue\">public</span> FrmSelectCategories(\n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Category</span>&gt; categories )\n    {\n      InitializeComponent();\n \n      _categories = categories;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Initialise the category selector with</span>\n    <span class=\"gray\">///</span><span class=\"green\"> the list of categories passed in to </span>\n    <span class=\"gray\">///</span><span class=\"green\"> the constructor and check them all.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> FrmSelectCategories_Load(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">EventArgs</span> e )\n    {\n      checkedListBox1.DataSource = _categories;\n      checkedListBox1.DisplayMember = <span class=\"maroon\">\"Name\"</span>;\n \n      <span class=\"green\">// Set all entries to be initially checked.</span>\n \n      <span class=\"blue\">int</span> n = checkedListBox1.Items.Count;\n \n      <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n      {\n        checkedListBox1.SetItemChecked( i, <span class=\"blue\">true</span> );\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Access the selected categories after the</span>\n    <span class=\"gray\">///</span><span class=\"green\"> form has been successfully completed.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Category</span>&gt; GetSelectedCategories()\n    {\n      <span class=\"blue\">return</span> checkedListBox1.CheckedItems\n        .Cast&lt;<span class=\"teal\">Category</span>&gt;().ToList&lt;<span class=\"teal\">Category</span>&gt;();\n    }\n  }\n</pre><a name=\"6\"></a>"
  },
  {
    "original_filename": "1119_select_categories",
    "header_text": "CmdUploadViews",
    "local_header_href": "#cmduploadviews",
    "chunk_text": "<h4>CmdUploadViews</h4><p>The categories retrieved by the category collector are sorted alphabetically before populating the interactive selection form checked list box.</p><p>Just like the first form, the second one is properly parented by attaching it to the main Revit application window handle.</p><p>Here is the entire updated command implementation:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Linq;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> <span class=\"teal\">ComponentManager</span> = Autodesk.Windows.<span class=\"teal\">ComponentManager</span>;\n<span class=\"blue\">using</span> <span class=\"teal\">IWin32Window</span> = System.Windows.Forms.<span class=\"teal\">IWin32Window</span>;\n<span class=\"blue\">using</span> <span class=\"teal\">DialogResult</span> = System.Windows.Forms.<span class=\"teal\">DialogResult</span>;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> RoomEditorApp\n{\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CmdUploadViews</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">IWin32Window</span> revit_window\n        = <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>(\n          <span class=\"teal\">ComponentManager</span>.ApplicationWindow );\n \n      <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Application</span> app = uiapp.Application;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == doc )\n      {\n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Please run this command in a valid\"</span>\n          + <span class=\"maroon\">\" Revit project document.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"teal\">FrmSelectViews</span> form = <span class=\"blue\">new</span> <span class=\"teal\">FrmSelectViews</span>( doc );\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">DialogResult</span>.OK == form.ShowDialog(\n        revit_window ) )\n      {\n        <span class=\"teal\">List</span>&lt;<span class=\"teal\">ViewPlan</span>&gt; views = form.GetSelectedViews();\n \n        <span class=\"blue\">int</span> n = views.Count;\n \n        <span class=\"blue\">string</span> caption = <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"{0} Plan View{1} Selected\"</span>,\n          n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n        <span class=\"blue\">string</span> list = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n          views.Select&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">string</span>&gt;(\n            e =&gt; e.Name ) );\n \n        <span class=\"teal\">Util</span>.InfoMsg2( caption, list );\n \n        <span class=\"teal\">List</span>&lt;<span class=\"teal\">Category</span>&gt; categories\n          = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Category</span>&gt;(\n            <span class=\"blue\">new</span> <span class=\"teal\">CategoryCollector</span>( views ).Keys );\n \n        <span class=\"green\">// Sort categories alphabetically by name</span>\n        <span class=\"green\">// to display them in selection form.</span>\n \n        categories.Sort(\n          <span class=\"blue\">delegate</span>( <span class=\"teal\">Category</span> c1, <span class=\"teal\">Category</span> c2 )\n          {\n            <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Compare( c1.Name, c2.Name );\n          } );\n \n        <span class=\"teal\">FrmSelectCategories</span> form2\n          = <span class=\"blue\">new</span> <span class=\"teal\">FrmSelectCategories</span>( categories );\n \n        <span class=\"blue\">if</span>( <span class=\"teal\">DialogResult</span>.OK == form2.ShowDialog(\n          revit_window ) )\n        {\n          categories = form2.GetSelectedCategories();\n \n          n = categories.Count;\n \n          caption = <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"{0} Categor{1} Selected\"</span>,\n            n, <span class=\"teal\">Util</span>.PluralSuffixY( n ) );\n \n          list = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n            categories.Select&lt;<span class=\"teal\">Category</span>, <span class=\"blue\">string</span>&gt;(\n              e =&gt; e.Name ) );\n \n          <span class=\"teal\">Util</span>.InfoMsg2( caption, list );\n        }\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><p>Executing the external command in my simple test model displays the following forms and reports:</p><p>Plan view selection form:</p><center>\n<img alt=\"Plan view selection form\" src=\"img/category_select_1_views.png\" width=\"217\"/>\n</center><p>Plan view selection report:</p><center>\n<img alt=\"Plan view selection report\" src=\"img/category_select_2_view_report.png\" width=\"366\"/>\n</center><p>Category selection form:</p><center>\n<img alt=\"Category selection form\" src=\"img/category_select_3_categories.png\" width=\"217\"/>\n</center><p>Category selection report:</p><center>\n<img alt=\"Category selection report\" src=\"img/category_select_4_category_report.png\" width=\"366\"/>\n</center><a name=\"7\"></a>"
  },
  {
    "original_filename": "1119_select_categories",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>For the complete source code, Visual Studio solution and add-in manifest, please refer to the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">RoomEditorApp GitHub repository</a>.</p><p>The version discussed above is stored as\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.2.2\">release 2014.0.2.2</a>.</p>"
  }
]