[
  {
    "original_filename": "1131_revit_2015_api_news",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1131_revit_2015_api_news",
    "header_text": "Revit 2015 API News – DevDays Online Recording",
    "local_header_href": "#revit-2015-api-news-devdays-online-recording",
    "chunk_text": "<h3>Revit 2015 API News – DevDays Online Recording</h3><p>As\n\n<a href=\"http://www.jabberwocky.com/carroll/walrus.html\">\nthe Walrus said</a>,\n\nnow \"the time has come ... to talk of many things\", including the highlights of the new Revit API functionality, so here we go!</p><p>Welcome to my first post on the Revit 2015 API, disregarding the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/revitlookup-for-revit-2015.html\">\nRevitLookup migration to Revit 2015</a>,\n\nof course.</p><p>A couple of posts on upcoming Revit 2015 product functionality were already published in the past week or so, e.g.:</p><ul>\n<li><a href=\"http://synergiscadblog.com/2014/04/02/whats-new-in-autodesk-revit-2015\">Overview of new features by synergiscad</a></li>\n<li><a href=\"http://revitking.blogspot.ch/2014/03/new-feature-list-for-revit-2015.html\">Feature list by Revit.King</a></li>\n<li><a href=\"http://www.seandburke.com/blog/2014/03/27/whats-new-in-revit-2015/\">Highlighted features and enhancements by Paradigm shift</a></li>\n<li><a href=\"http://www.cadlinecommunity.co.uk/Blogs/Blog.aspx?ScoId=cf9f3cac-1748-4f84-a025-07968741c658&amp;returnTo=%2fBlogs%2finsider%2fDefault.aspx&amp;returnTitle=Insider%20Blog\">Screen snapshots by cadline</a></li>\n<li><a href=\"http://bimopedia.com/2014/03/27/videos-whats-new-in-revit-2015\">Videos by BIMopedia</a></li>\n</ul><p>I will therefore skip all product related stuff and dive straight into the API instead.</p><p>Here is the Revit 2015 DevDays Online recording material, based on the presentations shown at the confidential Autodesk DevDays conferences in and around December 2013.</p><ul>\n<li>Presentation\n<a href=\"http://thebuildingcoder.typepad.com/devday/2013/online/Revit_2015_API_News/Revit_2015_API_News_Slides.pdf\">slide deck</a> (23 MB)  \n<a href=\"file:////a/devdays/2013/online/Revit_2015_API_News_Slides.pdf\">^</a>\n</li>\n<li>Presentation\n<a href=\"http://thebuildingcoder.typepad.com/devday/2013/online/Revit_2015_API_News/index.html\">recording</a> with table of contents navigation (354 MB)  \n<a href=\"file:////a/devdays/2013/online/cam/Revit_2015_API_News/index.html\">^</a>\n</li>\n<li>Presentation\n<a href=\"http://thebuildingcoder.typepad.com/devday/2013/online/Revit_2015_API_News/Revit_2015_API_News_Notes.pdf\">notes</a> (198 KB)  \n<a href=\"file:////a/devdays/2013/online/Revit_2015_API_News_Notes.pdf\">^</a>\n</li>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/devday/2013/online/Revit_2015_API_News/Revit_2015_API_Samples.zip\">Sample code incl. RVT models</a> (45 MB)  \n<a href=\"file:////a/devdays/2013/online/Revit_2015_API_Samples.zip\">^</a>\n</li>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/devday/2013/online/Revit_2015_API_News/Revit_2015_API_Samples_No_RVT.zip\">Sample code excl. RVT models</a> (1.5 MB)  \n<a href=\"file:////a/devdays/2013/online/Revit_2015_API_Samples_No_RVT.zip\">^</a>\n</li>\n</ul><p>The next thing I want to do is to publish the \"What's New\" section from the updated Revit API help file RevitAPI.chm, to ensure it is available for and easily found by online searches, as for the past few releases:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2010-api.html\">What's New in the Revit 2010 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2011-api.html\">What's New in the Revit 2011 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\">What's New in the Revit 2012 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/whats-new-in-the-revit-2013-api.html\">What's New in the Revit 2013 API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">What's New in the Revit 2014 API</a></li>\n</ul>\n<p>That is always the first place to explore if you have any questions about or problems with your migration or the new functionality provided.</p>\n<p>I wish you lots of fun and excitement exploring the new possibilities provided by the Revit 2015 API!</p>\n<!--\n\nMarch 27, 2014.\n\nhttp://www.seandburke.com/blog/2014/03/27/whats-new-in-revit-2015/\n\nWhat’s new in Revit 2015\n\nDate: 27 March 2014\n\nhttp://www.cadlinecommunity.co.uk/Blogs/Blog.aspx?ScoId=cf9f3cac-1748-4f84-a025-07968741c658&returnTo=%2fBlogs%2finsider%2fDefault.aspx&returnTitle=Insider%20Blog\n\nWhat's New in Revit 2015\n\nMarch 27, 2014\n\nhttp://revitking.blogspot.ch/2014/03/new-feature-list-for-revit-2015.html\n\nNew Feature List for Revit 2015\nRevit.King's BIM coordinator/ Revit Blog\n\nMarch 27, 2014\nhttp://bimopedia.com/2014/03/27/videos-whats-new-in-revit-2015/\nVideos – What’s New in Revit 2015\n\nsynergiscad on April 2, 2014\nhttp://synergiscadblog.com/2014/04/02/whats-new-in-autodesk-revit-2015/\nWhat’s New in Autodesk Revit 2015?\n\n-->\n<!--\n\n09349837 [GUI design for Revit]\n\nRyan CameronSinclair Hille Architects\n\nhttp://forums.autodesk.com/t5/Revit-API/GUI-design-for-Revit/m-p/4884362\n\n-->\n<a name=\"2\"></a>\n<h4>Right Click Circle of Commands GUI Design for Revit</h4>\n<p>Sticking with what we already have for the moment, another interesting this that just came up on the Revit API forum is this discussion thread initiated by Ryan on\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/GUI-design-for-Revit/m-p/4944720\">\nGUI design for Revit</a>.\n\n<p>Ryan suggests developing a secondary user-infterface for Revit, like the right-click command in Fusion 360, or Inventor, a wheel (or circle) showing a pre-determined list of commands.</p>\n<p>The Revit user interface could look something like this:</p>\n<center>\n<img alt=\"Revit user interface\" src=\"img/rb_revit_user_interface.jpg\" width=\"400\"/>\n</center>\n<p>Commands placed on circle segments:</p>\n<center>\n<img alt=\"Commands placed on circle segments\" src=\"img/rb_project_circle_screenshot_in_use.jpg\" width=\"400\"/>\n</center>\n<p>Interactive command population:</p>\n<center>\n<img alt=\"Interactive command population\" src=\"img/rb_img_20131031_091527.jpg\" width=\"400\"/>\n</center>\n<p>Now Brett of <a href=\"http://brevitb.blogspot.com.au/\">BRevit</a> presented a\n\n<a href=\"https://www.youtube.com/watch?v=lYrpJe2484E&amp;feature=youtu.be\">20-second video of WheelConcept</a>,\n\na working implementation of a right-click circle of commands based on the PostCommand API.</p>\n<p>In his own words:</p>\n<p>I think a lot can be achieved with the postcommand function. Hope you don't mind but i took your idea and gave it a crack....</p>\n<p>Firstly i created a form with the wheel as the background. I created a public property on the form which is the id of the command to issue:</p>\n<pre class=\"code\">\n  <span class=\"blue\">Public</span> CommandToIssue <span class=\"blue\">As</span> <span class=\"teal\">RevitCommandId</span>\n</pre>\n<p>I then created transparent picture boxes over the various icons. Clicking on a picturebox asigns a command id and closes the form:</p>\n<pre class=\"code\">\n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> PictureBox2_Click( _\n    <span class=\"blue\">ByVal</span> sender <span class=\"blue\">As</span> <span class=\"blue\">Object</span>, _\n    <span class=\"blue\">ByVal</span> e <span class=\"blue\">As</span> EventArgs) _\n  <span class=\"blue\">Handles</span> PictureBox2.Click\n    CommandToIssue _\n      = <span class=\"teal\">RevitCommandId</span>.LookupPostableCommandId( _\n        <span class=\"teal\">PostableCommand</span>.StructuralColumn)\n    Close()\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n</pre>\n<p>Under the forms show event i added code to locate the form at the mouses current position:</p>\n<pre class=\"code\">\n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> WheelForm_Shown( _\n    <span class=\"blue\">ByVal</span> sender <span class=\"blue\">As</span> <span class=\"blue\">Object</span>, _\n    <span class=\"blue\">ByVal</span> e <span class=\"blue\">As</span> EventArgs) _\n  <span class=\"blue\">Handles</span> <span class=\"blue\">Me</span>.Shown\n    Location = <span class=\"blue\">New</span> System.Drawing.<span class=\"teal\">Point</span>( _\n      <span class=\"blue\">CInt</span>(MousePosition.X - (<span class=\"blue\">Me</span>.Width / 2)), _\n      <span class=\"blue\">CInt</span>(MousePosition.Y - (<span class=\"blue\">Me</span>.Width / 2)))\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n</pre>\n<p>Finally I setup a command to display the wheel, and post the command:</p>\n<pre class=\"code\">\n<span class=\"blue\">Option Strict On</span>\n<span class=\"blue\">Option Explicit On</span>\n \n<span class=\"blue\">Imports</span> Autodesk.Revit.Attributes\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI\n \n<span class=\"blue\">Imports</span> BrevitTools.UI.Wheel\n \n&lt;<span class=\"teal\">Transaction</span>(<span class=\"teal\">TransactionMode</span>.Manual)&gt; _\n<span class=\"blue\">Public</span> <span class=\"blue\">Class</span> <span class=\"teal\">Wheel</span>\n  <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute( _\n    <span class=\"blue\">ByVal</span> cmdData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>, _\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>, _\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> Autodesk.Revit.DB.<span class=\"teal\">ElementSet</span>) _\n  <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n \n    <span class=\"blue\">Dim</span> form <span class=\"blue\">As</span> <span class=\"blue\">New</span> WheelForm\n    form.ShowDialog()\n \n    <span class=\"blue\">If</span> form.CommandToIssue <span class=\"blue\">IsNot</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n      cmdData.Application.PostCommand(\n        form.CommandToIssue)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n<span class=\"blue\">End</span> <span class=\"blue\">Class</span>\n</pre>\n<p>To display the wheel inside Revit I assigned a shotcut key (ww).</p>\n<p>Here is link to a\n\n<a href=\"https://www.youtube.com/watch?v=lYrpJe2484E&amp;feature=youtu.be\">\nvideo of it in action</a>.</p>\n<p>I think there is loads of potential for this. You could easily add code to check what elements are preselected and then display a contextual wheel.</p>\n<p>Thank you very much, Brett, for sharing this!</p>\n</p></p>"
  },
  {
    "original_filename": "1131_revit_2015_api_news",
    "header_text": "Right Click Circle of Commands GUI Design for Revit",
    "local_header_href": "#right-click-circle-of-commands-gui-design-for-revit",
    "chunk_text": "<h4>Right Click Circle of Commands GUI Design for Revit</h4><p>Sticking with what we already have for the moment, another interesting this that just came up on the Revit API forum is this discussion thread initiated by Ryan on\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/GUI-design-for-Revit/m-p/4944720\">\nGUI design for Revit</a>.\n\n<p>Ryan suggests developing a secondary user-infterface for Revit, like the right-click command in Fusion 360, or Inventor, a wheel (or circle) showing a pre-determined list of commands.</p>\n<p>The Revit user interface could look something like this:</p>\n<center>\n<img alt=\"Revit user interface\" src=\"img/rb_revit_user_interface.jpg\" width=\"400\"/>\n</center>\n<p>Commands placed on circle segments:</p>\n<center>\n<img alt=\"Commands placed on circle segments\" src=\"img/rb_project_circle_screenshot_in_use.jpg\" width=\"400\"/>\n</center>\n<p>Interactive command population:</p>\n<center>\n<img alt=\"Interactive command population\" src=\"img/rb_img_20131031_091527.jpg\" width=\"400\"/>\n</center>\n<p>Now Brett of <a href=\"http://brevitb.blogspot.com.au/\">BRevit</a> presented a\n\n<a href=\"https://www.youtube.com/watch?v=lYrpJe2484E&amp;feature=youtu.be\">20-second video of WheelConcept</a>,\n\na working implementation of a right-click circle of commands based on the PostCommand API.</p>\n<p>In his own words:</p>\n<p>I think a lot can be achieved with the postcommand function. Hope you don't mind but i took your idea and gave it a crack....</p>\n<p>Firstly i created a form with the wheel as the background. I created a public property on the form which is the id of the command to issue:</p>\n<pre class=\"code\">\n  <span class=\"blue\">Public</span> CommandToIssue <span class=\"blue\">As</span> <span class=\"teal\">RevitCommandId</span>\n</pre>\n<p>I then created transparent picture boxes over the various icons. Clicking on a picturebox asigns a command id and closes the form:</p>\n<pre class=\"code\">\n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> PictureBox2_Click( _\n    <span class=\"blue\">ByVal</span> sender <span class=\"blue\">As</span> <span class=\"blue\">Object</span>, _\n    <span class=\"blue\">ByVal</span> e <span class=\"blue\">As</span> EventArgs) _\n  <span class=\"blue\">Handles</span> PictureBox2.Click\n    CommandToIssue _\n      = <span class=\"teal\">RevitCommandId</span>.LookupPostableCommandId( _\n        <span class=\"teal\">PostableCommand</span>.StructuralColumn)\n    Close()\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n</pre>\n<p>Under the forms show event i added code to locate the form at the mouses current position:</p>\n<pre class=\"code\">\n  <span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> WheelForm_Shown( _\n    <span class=\"blue\">ByVal</span> sender <span class=\"blue\">As</span> <span class=\"blue\">Object</span>, _\n    <span class=\"blue\">ByVal</span> e <span class=\"blue\">As</span> EventArgs) _\n  <span class=\"blue\">Handles</span> <span class=\"blue\">Me</span>.Shown\n    Location = <span class=\"blue\">New</span> System.Drawing.<span class=\"teal\">Point</span>( _\n      <span class=\"blue\">CInt</span>(MousePosition.X - (<span class=\"blue\">Me</span>.Width / 2)), _\n      <span class=\"blue\">CInt</span>(MousePosition.Y - (<span class=\"blue\">Me</span>.Width / 2)))\n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n</pre>\n<p>Finally I setup a command to display the wheel, and post the command:</p>\n<pre class=\"code\">\n<span class=\"blue\">Option Strict On</span>\n<span class=\"blue\">Option Explicit On</span>\n \n<span class=\"blue\">Imports</span> Autodesk.Revit.Attributes\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI\n \n<span class=\"blue\">Imports</span> BrevitTools.UI.Wheel\n \n&lt;<span class=\"teal\">Transaction</span>(<span class=\"teal\">TransactionMode</span>.Manual)&gt; _\n<span class=\"blue\">Public</span> <span class=\"blue\">Class</span> <span class=\"teal\">Wheel</span>\n  <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute( _\n    <span class=\"blue\">ByVal</span> cmdData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>, _\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>, _\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> Autodesk.Revit.DB.<span class=\"teal\">ElementSet</span>) _\n  <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n \n    <span class=\"blue\">Dim</span> form <span class=\"blue\">As</span> <span class=\"blue\">New</span> WheelForm\n    form.ShowDialog()\n \n    <span class=\"blue\">If</span> form.CommandToIssue <span class=\"blue\">IsNot</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n      cmdData.Application.PostCommand(\n        form.CommandToIssue)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n<span class=\"blue\">End</span> <span class=\"blue\">Class</span>\n</pre>\n<p>To display the wheel inside Revit I assigned a shotcut key (ww).</p>\n<p>Here is link to a\n\n<a href=\"https://www.youtube.com/watch?v=lYrpJe2484E&amp;feature=youtu.be\">\nvideo of it in action</a>.</p>\n<p>I think there is loads of potential for this. You could easily add code to check what elements are preselected and then display a contextual wheel.</p>\n<p>Thank you very much, Brett, for sharing this!</p>\n</p>"
  }
]