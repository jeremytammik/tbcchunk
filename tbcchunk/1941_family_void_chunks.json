[
  {
    "original_filename": "1941_family_void",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\ntwitter:\n\nRvtParamDrop exports BIM element properties, RvtLock3r validates them, and drilling holes in beams in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/drillholeinbeam\n\nI am working on a few side projects and proofs of concept for my own and other teams\n&ndash; <code>RvtParamDrop</code> exports visible element properties\n&ndash; <code>RvtLock3r</code> validates BIM element properties\n&ndash; Drilling holes in beams...\n\nlinkedin:\n\nRvtParamDrop exports BIM element properties, RvtLock3r validates them, and drilling holes in beams in the #RevitAPI\n\nhttps://autode.sk/drillholeinbeam\n\nI am working on a few side projects and proofs of concept for my own and other teams:\n\n-  RvtParamDrop exports visible element properties\n-  RvtLock3r validates BIM element properties\n-  Drilling holes in beams...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1941_family_void",
    "header_text": "Drilling Holes in Beams and Other Projects",
    "local_header_href": "#drilling-holes-in-beams-and-other-projects",
    "chunk_text": "### Drilling Holes in Beams and Other Projects\n\nI am working on a few side projects and proofs of concept for my own and other teams, so I find myself challenged finding enough time for blogging and monitoring the forum at the same time:\n\n- [RvtParamDrop exports visible element properties](#2)\n- [RvtLock3r validates BIM element properties](#3)\n    - [Motivation](#3.1)\n    - [Validation](#3.2)\n    - [Preparation](#3.3)\n    - [Storage](#3.4)\n- [Drilling holes in beams](#4)"
  },
  {
    "original_filename": "1941_family_void",
    "header_text": "RvtParamDrop Exports Visible Element Properties",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> RvtParamDrop Exports Visible Element Properties\n\nThe first recent side project was [RvtParamDrop](https://github.com/jeremytammik/RvtParamDrop).\n\nIt simply exports all properties of all elements visible in a selected view for comparison and verification of all expected parameter values, generating a count and a `csv` output file.\n\nOne interesting aspect is that all referenced elements and all their properties also need to be included, recursively.\n\nHere is the specification in slightly more detail:\n\n- Do not limit yourself to shared parameters\n- Do limit yourself to parameters with a value\n- Name of the parameter\n- Schema (`TypeId`)\n\nA small number of parameters can be ignored as redundant:\n\n- ELEM_CATEGORY_PARAM\n- ELEM_CATEGORY_PARAM_MT\n- ELEM_FAMILY_AND_TYPE_PARAM\n- ELEM_TYPE_PARAM\n- SYMBOL_ID_PARAM\n\nInclude parameters from both elements and their types, i.e., both instance and type parameters.\n\nActually, it's more complicated than that.\nAnything that is visible in the view will include its instance and type parameters.\nIf an instance or a type has a parameter that refers to another `Element`, its instance and type parameters are also exported, regardless of whether it is visible or not.\nThat is recursive, so if X references Y references Z references W, then W's parameters are exported if X, Y, or Z is visible.\nWe follow all references.\nWho are we to say that a referenced `Element` isn't useful?\n\nI hope you find this interesting and useful."
  },
  {
    "original_filename": "1941_family_void",
    "header_text": "RvtLock3r Validates BIM Element Properties",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> RvtLock3r Validates BIM Element Properties\n\nAnother on-going project is still WIP, and also an exercise getting started with the Revit API for\nmy new colleague [Caroline](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/11981988).\n\n[RvtLock3r](https://github.com/jeremytammik/RvtLock3r) validates\nthat certain specified BIM element properties have not been modified.\n\nHere are some notes from the current state of the project repository readme:\n\n####<a name=\"3.1\"></a> Motivation\n\nRevit does not provide any functionality to ensure that shared parameter values are not modified.\n\nRvtLock3r stores a checksum for the original intended values of selected shared parameters and implements a validation function to ensure that the current values compute the same checksum.\n\nThe validation function is initially implemented as an external command.\n\nIt may later be triggered automatically on opening or saving a document to notify the user that undesired tampering has taken place.\n\n####<a name=\"3.2\"></a> Validation\n\nRvtLock3r reads a set of [ground truth](https://en.wikipedia.org/wiki/Ground_truth) data from some [storage location](#storage). It contains a list of triples:\n\n- `ElementId`\n- Shared parameter `GUID`\n- Checksum\n\nThe add-in iterates over all elements and shared parameters specified by these triples, reads the corresponding shared parameter value, calculates its checksum and validates it by comparison with the ground truth value.\n\nDiscrepancies are logged and a report is presented to the user.\n\nThe add-in does not care what kind of elements or shared parameters are being examined.\nThat worry is left up to whoever creates the ground truth file.\n\nIn the initial proof of concept, the triples are simply space separated in individual lines in a text file.\n\n####<a name=\"3.3\"></a> Preparation\n\nThere are various possible approaches to prepare\nthe [ground truth](https://en.wikipedia.org/wiki/Ground_truth) input text file,\nand they can be completely automated, more or less programmatically assisted, or fully manual.\n\nIn all three cases, you will first need to determine up front what elements and which shared parameters on them are to be checked. Retrieve the corresponding parameter values, compute their checksums, and save the above-mentioned triples.\n\n####<a name=\"3.4\"></a> Storage\n\nThe ground truth data triples containing the data required for integrity validation needs to be stored somewhere. That could be hard-wired directly into the add-in code for a specific BIM, stored in an external text file, within the `RVT` document, or elsewhere; it may be `JSON` formatted; it may be encrypted; still to be decided.\n\nTwo options are available for storing custom data directly within the `RVT` project file: shared parameters and extensible storage.\nThe latter is more modern and explicitly tailored for use by applications and data that is not accessible to the end user or even Revit itself.\nThat seems most suitable for our purpose here.\nExtensible storage can be added to any database element.\nHowever, it interferes least with Revit operation when placed on a dedicated `DataStorage` element,\nespecially [in a worksharing environment](http://thebuildingcoder.typepad.com/blog/2015/02/extensible-storage-in-a-worksharing-environment.html).\nCreation and population of a `DataStorage` element is demonstrated by the [named GUID storage for project identification](https://thebuildingcoder.typepad.com/blog/2016/04/named-guid-storage-for-project-identification.html) sample."
  },
  {
    "original_filename": "1941_family_void",
    "header_text": "Drilling Holes in Beams",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Drilling Holes in Beams\n\nGetting back to real-life issues,\nRichard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas explains\nhow to drill a hole in a beam  in a family definition using an opening by face in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [how to create different unattached families to a `.rft` file without stacking it](https://forums.autodesk.com/t5/revit-api-forum/how-to-create-different-unattached-families-to-a-rft-file/td-p/10934607):\n\n**Question:** I'm coding a tool to drill holes to beams (structural framing).\nEach beam will host 2 drills, one at each end.\nTo create my void extrusion to cut the host, I create an `Arc` at the coordinate (0, 0, 0) and extrude it in my *Metric Generic Model.rtf* located in the *C:\\ProgramData\\Autodesk\\RVT 2020\\Family Templates\\English* directory.\nThen, I load the family into the document with the beams to be drilled and get the `FamilySymbol` like this:\n\n<pre class=\"code\">\n  Family&nbsp;family&nbsp;=&nbsp;familyTemplateDoc.LoadFamily(doc);\n \n  FamilySymbol&nbsp;familySymbol&nbsp;=&nbsp;family.GetFamilySymbolIds()\n  &nbsp;&nbsp;.Select(<span style=\"color:#1f377f;\">x</span>&nbsp;=&gt;&nbsp;doc.GetElement(x)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;FamilySymbol)\n  &nbsp;&nbsp;.FirstOrDefault();\n</pre>\n\nIn my document I insert the family instance using `NewFamilyInstance` at the desired coordinate and finally `AddInstanceVoidCut` the beams.\nI'm facing the following issue (I moved the voids up so we can see it easily):\n\n<center>\n<img src=\"img/stacked_voids.png\" alt=\"Stacked voids\" title=\"Stacked voids\" width=\"400\"/> <!-- 1427 -->\n</center>\n\nApparently, each time I extrude a new `Arc` I am stacking it (the thicker cylinder is above for visualisation, it would overwrite the thinner one).\nThe next beam to be drilled will keep stacking the void forms. So if I select 4 beams, the 8th hole will be done by the 8 void forms stacked.\nWhat could I be doing wrong?\nThe extrusion needs to be created at the origin so it can be easily found and modified.\n\n**Answer:** This sounds like a case of wrong type of family template and wrong `NewFamilyInstance` overload.\nThere are easier ways to create holes in beams:\n\n- Use \"Metric Generic Model face based.rft\" cut the host with the void in the family.\n- Load the family into the project\n- Host the family on the beam web:\n- NewFamilyInstance(Face, XYZ, XYZ, FamilySymbol) or\n- NewFamilyInstance(Reference, XYZ, XYZ, FamilySymbol)\n\nNote also there is no need to even create a family for this, you can create an opening by face:\n\n- Document.NewOpening\n\n**Response:** I wanted to use voids in order to learn it; I'm new at the API and I was overcomplicating the solution.\nIt's kinda overkill what I was trying to do...\n\nSwitched up to `NewOpening` and it works like a charm! Thank you.\n\nMany thanks once again to Richard for contributing all his reliable in-depth help and experience in the forum!"
  }
]