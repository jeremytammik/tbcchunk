[
  {
    "original_filename": "0945_prettyfier",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0945_prettyfier",
    "header_text": "Source Code Formatting and Google Prettifier",
    "local_header_href": "#source-code-formatting-and-google-prettifier",
    "chunk_text": "<h3>Source Code Formatting and Google Prettifier</h3><p>As you know, I format my source code to pretty short lines in order to avoid having them truncated by the narrow blog post view column.\n\n<p>I also like to present the code colour coded, as it appears in Visual Studio and many other programmer editors, to make it more readable.</p>\n<p>For .NET code, I use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/updated-sdk-2012-products-and-source-code-colourisation.html#4\">\nCopySourceAsHtml</a> inside of Visual Studio for that.</p>\n<p>I tried using other tools outside of Visual Studio instead in the past, including building my own, but they have one big disadvantage: unless they read and analyse all the referenced .NET assemblies to determine the classes they define, they cannot always tell whether a given word represents a variable or a class.\nClasses are highlighted in a different colour in Visual Studio, and I find that pretty helpful.</p>\n<p>For other languages, though, it would be really nice to be able to colourise the source code independently.</p>\n<p>My colleague Cyrille Fauvel now pointed to two online colourising tools that he has used: the\n\n<a href=\"http://alexgorbatchev.com/SyntaxHighlighter\">syntax highlighter</a> and\n\n<a href=\"https://code.google.com/p/google-code-prettify\">Google prettify</a>.\n\nBoth of them are not really useful for C#, for the reasons explained above, but do a really good job on other languages.</p>\n<p>I tested the Google prettifier on some JavaScript, HTML and JSON code in my recent post on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#5\">\nmy cloud-based editor home page implementation</a> and\n\nam very happy with the results.\n\n<p>For instance, here is a screen snapshot of the main JavaScript snippet before integrating the prettifier:</p>\n<center>\n<img alt=\"Before Google Prettify\" src=\"img/prettify_before.png\"/>\n</center>\n<p>Afterwards, it looks like this instead:</p>\n<center>\n<img alt=\"After Google Prettify\" src=\"img/prettify_after.png\"/>\n</center>\n<p>I only have to do two things to achieve that.</p>\n<p>1. Add a reference to the Google Prettify loader:</p>\n<pre class=\"prettyprint\">\n&lt;script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\"&gt;\n&lt;/script&gt;\n</pre>\n<p>2. Add the 'prettyprint' class to my HTML 'pre' tags:</p>\n<pre class=\"prettyprint\">\n&lt;pre class=\"prettyprint\"&gt;\n</pre>\n<p>That's not much  :-)</p>\n<p>It comes in really handy right now, since I will be publishing more JavaScript, HTML and JSON for the final stages of my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/my-cloud-based-2d-editor-implementation-status.html#2\">\ncloud-based 2D room editor</a> in\n\nthe next few days.</p>\n<p>Many thanks to Cyrille for pointing this out!</p>\n<a name=\"2\"></a>\n<h4>Think Global, Act Local, Control Freak</h4>\n<p>After mulling over the above during the night, I decide to take control myself rather than go off and ask Google for help to render every page I post (and pass them every snippet of code to mine for analysis purposes, by the way).</p>\n<p>So I downloaded the minimised version of the Google prettifier and now serve it up locally from The Building Coder typepad page itself.</p>\n<p>In other words, I include the following script load statement instead of the one listed above:</p>\n<pre class=\"prettyprint\">\n&lt;script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"&gt;\n&lt;/script&gt;\n</pre>\n<p>Beyond that, nothing changes.</p>\n<a name=\"3\"></a>\n<h4>More Magic</h4>\n<p>Oh yes, and another magical little thank you to Cyrille for pointing out the Apple Magic Mouse to me.</p>\n<p>I have been using it for a few days and am enthused.</p>\n<p>I first thought it was a bit too slim for my chunky hand, but that is not the case, and I really love the perfect smoothness and full control it gives, better than any other system I tried.</p>\n<p>Thank you again, Cyrille  :-)</p>\n</p></p>"
  },
  {
    "original_filename": "0945_prettyfier",
    "header_text": "Think Global, Act Local, Control Freak",
    "local_header_href": "#think-global-act-local-control-freak",
    "chunk_text": "<h4>Think Global, Act Local, Control Freak</h4><p>After mulling over the above during the night, I decide to take control myself rather than go off and ask Google for help to render every page I post (and pass them every snippet of code to mine for analysis purposes, by the way).</p><p>So I downloaded the minimised version of the Google prettifier and now serve it up locally from The Building Coder typepad page itself.</p><p>In other words, I include the following script load statement instead of the one listed above:</p><pre class=\"prettyprint\">\n&lt;script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"&gt;\n&lt;/script&gt;\n</pre><p>Beyond that, nothing changes.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0945_prettyfier",
    "header_text": "More Magic",
    "local_header_href": "#more-magic",
    "chunk_text": "<h4>More Magic</h4><p>Oh yes, and another magical little thank you to Cyrille for pointing out the Apple Magic Mouse to me.</p><p>I have been using it for a few days and am enthused.</p><p>I first thought it was a bit too slim for my chunky hand, but that is not the case, and I really love the perfect smoothness and full control it gives, better than any other system I tried.</p><p>Thank you again, Cyrille  :-)</p>"
  }
]