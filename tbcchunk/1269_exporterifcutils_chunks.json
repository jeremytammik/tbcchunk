[
  {
    "original_filename": "1269_exporterifcutils",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1269_exporterifcutils",
    "header_text": "ExporterIfcUtils Curve Loop Sort and Validate",
    "local_header_href": "#exporterifcutils-curve-loop-sort-and-validate",
    "chunk_text": "<h3>ExporterIfcUtils Curve Loop Sort and Validate</h3><p>Joel Spahn raised a pertinent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/01/autodesk-internship-in-california-and-sorting-edges.html?cid=6a00e553e16897883301b8d0be1356970c\">\nquestion</a> on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/01/autodesk-internship-in-california-and-sorting-edges.html#3\">\nsorting face loop edges</a> that\n\nwas kindly picked up and answered by Scott Conover and Angel Velez from the Revit development team:</p><p><strong>Question:</strong> It would be nice to know exactly what the following methods do:</p><ul>\n<li>ExporterIfcUtils.SortCurveLoops()</li>\n<li>ExporterIfcUtils.ValidateCurveLoops()</li>\n</ul><p><strong>Answer:</strong> Sorry that the Intellisense documentation is missing for these utilities.</p><p>Here is the brief documentation of each:</p><ul>\n<li><b>SortCurveLoops</b>: sorts a set of curve loops such that outer and inner loops are separated.</li>\n<ul>\n<li>Remarks: Outer loops are separated and inner loops are grouped according to their outer loop. Loops are assumed to be non-intersecting, and there will be no nesting of inner loops, i.e., an inner loop of an inner loop is another outer loop.</li>\n<li>Returns: The sorted collection of loops.</li>\n<li>Input:</li>\n<ul>\n<li>loops, the curve loops.</li>\n</ul>\n</ul>\n<li><b>ValidateCurveLoops</b>: performs validity checks on a list of curve loops to ensure that they are all co-planar, closed, and properly oriented.</li>\n<ul>\n<li>Returns the curve loops properly oriented, if possible.  If not, the return contains no loops.</li>\n<li>Input:</li>\n<ul>\n<li>curveLoops, the loops to check</li>\n<li>extrDirVec, the normal vector.</li>\n</ul>\n</ul>\n</ul><p>In ValidateCurveLoops, the 'extrDirVec' normal vector defines what the 'proper orientation' means, by ensuring that the loops are counter-clockwise relative to this direction vector.</p><p>Both methods are perfectly usable outside of any IFC context.</p><p>In the long term, there is no reason why they should not move into the regular Revit API.</p><p>Thank you, Joel, for raising this very valid question, and to Scott and Angel for their answers.</p><p>As I mentioned in the recent discussion\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/01/autodesk-internship-in-california-and-sorting-edges.html#3\">\nsorting face loop edges</a>,\n\nthe RoomEditorApp provides a sample code snippet exercising SortCurveLoops.</p>"
  }
]