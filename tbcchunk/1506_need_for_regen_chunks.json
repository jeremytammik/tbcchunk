[
  {
    "original_filename": "1506_need_for_regen",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\nNeed for Regen and Duplicate Parameter Access #RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge\n\nA Python Revit API question on renumbering viewports helps highlight two separate important programming aspects; I also add some other notes from the Munich Forge accelerator\n&ndash; Question\n&ndash; The need to regenerate\n&ndash; Use built-in parameters to access parameters\n&ndash; Forge accelerator and outage report\n&ndash; Added materials to 210 King model...\n\n-->"
  },
  {
    "original_filename": "1506_need_for_regen",
    "header_text": "Need for Regen and Duplicate Parameter Access",
    "local_header_href": "#need-for-regen-and-duplicate-parameter-access",
    "chunk_text": "### Need for Regen and Duplicate Parameter Access\n\nA Python Revit API question on renumbering viewports helps highlight two separate important programming aspects; I also add some other notes from the Munich Forge accelerator:\n\n- [Question](#2)\n- [The need to regenerate](#3)\n- [Use built-in parameters to access parameters](#4)\n- [Forge accelerator and outage report](#5)\n- [Added materials to 210 King model](#6)\n\n\n####<a name=\"2\"></a>Question\n\n\nThe original issue was raised both in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api/bd-p/160) thread\non [help with 2 sequential transactions](http://forums.autodesk.com/t5/revit-api-forum/revit-api-help-with-2-sequential-transactions/m-p/6701715) and\na StackOverflow question \non  [2 sequential transactions setting detail number (Revit API / Python)](http://stackoverflow.com/questions/40728351/2-sequential-transactions-setting-detail-number-revit-api-python/40735868).\n\nThe latter went on a bit longer than the former...\n\nRather a pain having the same discussion in multiple locations, but what can you do?\n\nAnyway, I find the results interesting, so I'll do my best to consolidate them here and now.\n\n> I implemented a tool to rename view numbers ('Detail Number') on a sheet based on their location on the sheet.\nWhere this is breaking is the transactions.\nI'm trying to execute two transactions sequentially in Revit Python Shell.\nI also did this originally in Dynamo, and that had a similar failure, so I know it's something to do with transactions.\n\n- Transaction #1: Add a suffix (\"-x\") to each detail number to ensure the new numbers wonâ€™t conflict (1 will be 1-x, 4 will be 4-x, etc.)\n\n- Transaction #2: Change detail numbers with calculated new number based on viewport location (1-x will be 3, 4-x will be 2, etc.)\n\nEssentially, this is what I am trying to achieve:\n\n<pre class=\"prettyprint\">\n  # <---- Make unique numbers    \n  t = Transaction(doc, 'Rename Detail Numbers')\n  t.Start()\n  for i, viewport in enumerate(viewports):\n    setParam(viewport, \"Detail Number\",getParam(viewport,\"Detail Number\")+\"x\")\n  t.Commit()\n\n  # <---- Do the thang        \n  t2 = Transaction(doc, 'Rename Detail Numbers')\n  t2.Start()\n  for i, viewport in enumerate(viewports):\n    setParam(viewport, \"Detail Number\",detailViewNumberData[i])\n  t2.Commit()\n</pre>\n\nHere is [rename_view_numbers.pdf showing a visual explanation](zip/rename_view_numbers.pdf)\n([^](https://www.docdroid.net/EP1K9Di/161115-viewport-diagram-.pdf.html)) and\nthe [complete Python file rename_view_numbers.py](zip/rename_view_numbers.py)\n([^](http://pastebin.com/7PyWA0gV)).\n\n<center>\n<img src=\"img/set_parameter_read_only_error.png\" alt=\"Set parameter throws read-only error\" width=\"476\"/>\n</center>\n\n\n####<a name=\"3\"></a>The Need to Regenerate\n\nThank you for your query.\n\nThis is a nice example of the [need for regeneration](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.33).\n\nThe behaviour you describe may well be caused by a need to regenerate between the transactions. The first modification does something, and the model needs to be regenerated before the modifications take full effect and are reflected in the parameter values that you query in the second transaction. You are accessing stale data. Explore [The Building Coder topic group on the need to regenerate](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.33) to learn all the nitty gritty details and view numerous examples of this.\n\nAlso, when making use of several transactions in one go, it might also be helpful to check out the `TransactionGroup` class and its `Assimilate` method, e.g., in the discussion on [using transaction groups](http://thebuildingcoder.typepad.com/blog/2015/02/using-transaction-groups.html).\n \n\n####<a name=\"4\"></a>Use Built-in Parameters to Access Parameters\n\nAccessing a parameter by its display name is extremely risky and inefficient to boot.\n\nIt is always better to use the built-in parameter enum values to access element parameters, when possible, or the parameter `Definition`, if you happen to have that at hand.\n\nHere is the developer response:\n\n> So, this issue actually had nothing to do with transactions or doc regeneration. I discovered (with some help :) ), that the problem lay in how I was setting/getting the parameter. The \"Detail Number\" on a viewport element, like a lot of Revit element parameters, has duplicate versions that share the same descriptive parameter display name.\n\n<center>\n<img src=\"img/duplicate_parameter_display_names.png\" alt=\"Duplicate parameter display names\" width=\"304\"/>\n</center>\n\nApparently, the reason for this might be a legacy issue, though I'm not sure.\nWhen I was trying to get/set the detail number, it was somehow grabbing the incorrect read-only parameter occasionally, one associated with the built-in parameter enum value `VIEWER_DETAIL_NUMBER`.\nThe correct one to use is `VIEWPORT_DETAIL_NUMBER`.\n\nThis happened because I was trying to retrieve the parameter by passing the descriptive parameter display name \"Detail Number\".\nRevising how I get/set parameters via the built-in parameter enum value resolved this issue,\ncf. [rename_view_number_duplicates.pdf](zip/rename_view_number_duplicates.pdf)\n([^](https://www.docdroid.net/WbAHBGj/161206-detail-number.pdf.html)).\n\n\n\n####<a name=\"5\"></a>Forge Accelerator and Outage Report\n\nAs you may know, I assisted at the Munich Forge Accelerator.\n\nUnfortunately, we experienced\nthe [first major outage](http://adndevblog.typepad.com/cloud_and_mobile/2016/12/data-management-outage.html) of\nthe Forge Data Management and Model Derivative web services right in the middle of it.\n\nPlease refer to Kean Walmsley's report \non [HoloLens and Forge at the Munich accelerator](http://through-the-interface.typepad.com/through_the_interface/2016/12/hololens-and-forge-at-the-munich-accelerator.html) for\nmore details on both of these topics.\n\nAll Forge services are now back online, including full API access to Fusion Team, A360 and BIM 360 Docs data.\nThe Forge team apologizes for the current outage and any problems it has caused.\nWe are now investigating all aspects of this outage to prevent it from happening in the future.\nThe first place to go to check is always the [Forge API status page](https://developer.autodesk.com/en/support/api-status).\n\n\n\n####<a name=\"6\"></a>Added Materials to 210 King Model\n\nAs part of my New Year celebration last January, I published\na [collection of public Revit models](http://thebuildingcoder.typepad.com/blog/2016/01/happy-new-top-cad-blog-public-models-and-forge.html#4)\non [Dropbox](https://www.dropbox.com/sh/51beylyeor41jnm/AAB7PaDA5t0H5Hg7DDgaslpla?dl=0).\n\nOne of them is the model of the [210 King Street Autodesk Toronto office](https://www.dropbox.com/sh/51beylyeor41jnm/AAATil-xM2Y8qC3N5WtmHQZca/210%20King%20-%20Autodesk%20Toronto.rvt?dl=0).\n\nPhilippe is using that in\nhis [responsive connected database viewer](https://forge-rcdb.autodesk.io) Forge\ndemonstration ([GitHub repo](https://github.com/Autodesk-Forge/forge-rcdb.nodejs)) and asked me to\nhelp [clean up its material settings](http://thebuildingcoder.typepad.com/blog/2016/12/material-shared-parameters-and-adn-xtra-labs.html#7).\n\nThat led me to implement\nthe [PopulateMaterialProperty add-in](https://github.com/jeremytammik/PopulateMaterialProperty).\n\nIn case you are interested in the result of running this on the Toronto office model in Revit 2017, The Building Coder has now made that available\nas [210_King_2017_6.rvt](http://thebuildingcoder.typepad.com/public_revit_model/210_King_2017_6.rvt)."
  }
]