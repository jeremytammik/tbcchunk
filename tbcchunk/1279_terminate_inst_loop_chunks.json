[
  {
    "original_filename": "1279_terminate_inst_loop",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1279_terminate_inst_loop",
    "header_text": "Sending Escape to Terminate a Family Instance Placement Loop",
    "local_header_href": "#sending-escape-to-terminate-a-family-instance-placement-loop",
    "chunk_text": "<h3>Sending Escape to Terminate a Family Instance Placement Loop</h3><p>I presented the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/place-family-instance.html\">\nPromptForFamilyInstancePlacement method</a> in\n\nJune 2010 when it was newly introduced in the Revit API, together with a nice little solution temporarily subscribing to the OnDocumentChanged to access the newly added elements after terminating the placement interaction.</p><p>Since then, the Revit 2015 API provided some\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html#4.02\">\nDocument API additions</a> such\n\nas the method UIDocument.PostRequestForElementTypePlacement enabling an add-in to launch and to some extents control the full standard placement interaction between user and the Revit product.</p><p>To retain control over the operation and subsequent actions, however, the PromptForFamilyInstancePlacement method is still interesting as well.</p><p>One recent request was to limit it to place one single instance.</p><p>Luckily, a separate call to OnDocumentChanged is triggered by each family instance placement, enabling an add-in to terminate the placement loop programmatically in the middle of the user interaction loop.</p><p>This solution was suggested by Joachim Schmitz of\n\n<a href=\"http://www.linear.de\">\nliNear Gesellschaft für konstruktives Design mbH</a> in\n\nthe following conversation:</p><p><strong>Question:</strong>\n\nIn a special application case, we'd like to restrict the placement of family instances to one per call to PromptForFamilyInstancePlacement().</p><p>To do so, I have subscribed to the OnDocumentChanged event and am now trying to abort the placement operation after the addition of the first family instance to the model.</p><p>I can currently think of no better solution than to raise an Esc-Keydown event on the Revit MainWindow, but wasn't able to get that window object from its handle. Seems to be a dirty hack anyway.</p><p>Could you help me out with any suggestions here?</p><p>Any help highly appreciated!</p><p><strong>Answer:</strong>\n\nI can certainly help you determine a valid window handle for the Revit main window.</p><p>I have been using the JtWindowHandle helper class for years to determine the Revit window handle and reliably attach dialogue boxes and forms to it:</p><p>The most recent use of it was in the\n\n<a href=\"https://github.com/jeremytammik/DirectObjLoader\">DirectObjLoader</a> add-in,\n\nin the module\n\n<a href=\"https://github.com/jeremytammik/DirectObjLoader/blob/master/DirectObjLoader/JtWindowHandle.cs\">JtWindowHandle.cs</a>.</p><p>The code to make use of it looks like this at the beginning of the external command Execute method:</p><pre class=\"code\">\n  IWin32Window revit_window\n    = new JtWindowHandle(\n      ComponentManager.ApplicationWindow );\n</pre><p>It requires a reference to AdWindows.dll from the Revit executable folder.</p><p>Yes, I agree that sending an Escape key hit sounds like a dirty hack.</p><p>Unfortunately, the Revit API currently provides no official method to achieve this.</p><p><strong>Response:</strong>\n\nAfter vainly trying to implement the escape key hack by raising a key down event on the Revit main window, I finally turned to a call to PostMessage.</p><p>It works like a charm now. I think that we can live with this solution until the next Revit API improvements to the PromptForFamilyInstancePlacement method are released.</p><p>Here is what I did:</p><pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> OnDocumentChanged(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">DocumentChangedEventArgs</span> e )\n  {\n    addedInstances.AddRange( e.GetAddedElementIds() );\n    <span class=\"blue\">if</span>( addedInstances.Count &gt;= 1 )\n    {\n      <span class=\"blue\">if</span>( <span class=\"teal\">ComponentManager</span>.ApplicationWindow != <span class=\"teal\">IntPtr</span>.Zero )\n      {\n        WindowsMessaging.PostWindowsMessage(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">ComponentManager</span>.ApplicationWindow,\n          WindowsMessaging.WM_KEYDOWN,\n          (<span class=\"blue\">int</span>) <span class=\"teal\">Keys</span>.Escape, 0 );\n \n        WindowsMessaging.PostWindowsMessage(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">ComponentManager</span>.ApplicationWindow,\n          WindowsMessaging.WM_KEYDOWN,\n          (<span class=\"blue\">int</span>) <span class=\"teal\">Keys</span>.Escape, 0 );\n      }\n    }\n  }\n\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">WindowsMessaging</span>\n  {\n    [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"User32.dll\"</span>, EntryPoint = <span class=\"maroon\">\"SendMessage\"</span> )]\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">int</span> SendMessage(\n      <span class=\"blue\">int</span> hWnd, <span class=\"blue\">int</span> Msg, <span class=\"blue\">int</span> wParam, <span class=\"blue\">int</span> lParam );\n \n    [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"User32.dll\"</span>, EntryPoint = <span class=\"maroon\">\"PostMessage\"</span> )]\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">int</span> PostMessage(\n      <span class=\"blue\">int</span> hWnd, <span class=\"blue\">int</span> Msg, <span class=\"blue\">int</span> wParam, <span class=\"blue\">int</span> lParam );\n \n    <span class=\"blue\">public</span> <span class=\"blue\">const</span> <span class=\"blue\">int</span> WM_KEYDOWN = 0x0100;\n \n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">int</span> SendWindowsMessage(\n      <span class=\"blue\">int</span> hWnd, <span class=\"blue\">int</span> Msg, <span class=\"blue\">int</span> wParam, <span class=\"blue\">int</span> lParam )\n    {\n      <span class=\"blue\">int</span> result = 0;\n      <span class=\"blue\">if</span>( hWnd &gt; 0 )\n        result = SendMessage( hWnd, Msg, wParam, lParam );\n \n      <span class=\"blue\">return</span> result;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">int</span> PostWindowsMessage(\n      <span class=\"blue\">int</span> hWnd, <span class=\"blue\">int</span> Msg, <span class=\"blue\">int</span> wParam, <span class=\"blue\">int</span> lParam )\n    {\n      <span class=\"blue\">int</span> result = 0;\n      <span class=\"blue\">if</span>( hWnd &gt; 0 )\n        result = PostMessage( hWnd, Msg, wParam, lParam );\n \n      <span class=\"blue\">return</span> result;\n    }\n  }\n</pre><p><strong>Answer:</strong>\n\nCongratulations on solving this!</p><p>Inspired by your solution, I implemented code to abort the PromptForFamilyInstancePlacement after placing the first instance in the existing external command implementation\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/place-family-instance.html\">\nCmdPlaceFamilyInstance</a> in The Building Coder samples and posted the code to the\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder sample GitHub repository</a> in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.117.1\">release 2015.0.117.1</a>.</p><p>Here is my full implementation making use of the <code>Press</code> class implemented to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/launching-a-revit-command.html\">launch a Revit command</a> using WM_KEYDOWN Windows messages similar to your sample code above:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.DB.Events;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> <span class=\"teal\">ComponentManager</span> = Autodesk.Windows.<span class=\"teal\">ComponentManager</span>;\n<span class=\"blue\">using</span> <span class=\"teal\">IWin32Window</span> = System.Windows.Forms.<span class=\"teal\">IWin32Window</span>;\n<span class=\"blue\">using</span> <span class=\"teal\">Keys</span> = System.Windows.Forms.<span class=\"teal\">Keys</span>;\n<span class=\"blue\">#endregion</span> <span class=\"green\">// Namespaces</span>\n\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdPlaceFamilyInstance</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set this flag to true to abort after </span>\n  <span class=\"gray\">///</span><span class=\"green\"> placing the first instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> _place_one_single_instance_then_abort\n    = <span class=\"blue\">true</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Send messages to main Revit application window.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">IWin32Window</span> _revit_window;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; _added_element_ids\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    _revit_window\n      = <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>(\n        <span class=\"teal\">ComponentManager</span>.ApplicationWindow );\n \n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">FilteredElementCollector</span> collector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n    collector.OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Doors );\n    collector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) );\n \n    <span class=\"teal\">FamilySymbol</span> symbol = collector.FirstElement()\n      <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n    _added_element_ids.Clear();\n \n    app.DocumentChanged\n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt;(\n        OnDocumentChanged );\n \n    uidoc.PromptForFamilyInstancePlacement( symbol );\n \n    app.DocumentChanged\n      -= <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt;(\n        OnDocumentChanged );\n \n    <span class=\"blue\">int</span> n = _added_element_ids.Count;\n \n    <span class=\"teal\">TaskDialog</span>.Show(\n      <span class=\"maroon\">\"Place Family Instance\"</span>,\n      <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"{0} element{1} added.\"</span>, n,\n        ( ( 1 == n ) ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ) ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">void</span> OnDocumentChanged(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">DocumentChangedEventArgs</span> e )\n  {\n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; idsAdded\n      = e.GetAddedElementIds();\n \n    <span class=\"blue\">int</span> n = idsAdded.Count;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} id{1} added.\"</span>,\n      n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n    <span class=\"green\">// this does not work, because the handler will</span>\n    <span class=\"green\">// be called each time a new instance is added,</span>\n    <span class=\"green\">// overwriting the previous ones recorded:</span>\n \n    <span class=\"green\">//_added_element_ids = e.GetAddedElementIds();</span>\n \n    _added_element_ids.AddRange( idsAdded );\n \n    <span class=\"blue\">if</span>( _place_one_single_instance_then_abort\n      &amp;&amp; 0 &lt; n )\n    {\n      <span class=\"green\">// Why do we send the WM_KEYDOWN message twice?</span>\n      <span class=\"green\">// I tried sending it once only, and that does</span>\n      <span class=\"green\">// not work. Maybe the proper thing to do would </span>\n      <span class=\"green\">// be something like the Press.OneKey method...</span>\n      <span class=\"green\">// nope, that did not work.</span>\n \n      <span class=\"green\">//Press.OneKey( _revit_window.Handle,</span>\n      <span class=\"green\">//  (char) Keys.Escape );</span>\n \n      <span class=\"teal\">Press</span>.PostMessage( _revit_window.Handle,\n        (<span class=\"blue\">uint</span>) <span class=\"teal\">Press</span>.<span class=\"teal\">KEYBOARD_MSG</span>.WM_KEYDOWN,\n        (<span class=\"blue\">uint</span>) <span class=\"teal\">Keys</span>.Escape, 0 );\n \n      <span class=\"teal\">Press</span>.PostMessage( _revit_window.Handle,\n        (<span class=\"blue\">uint</span>) <span class=\"teal\">Press</span>.<span class=\"teal\">KEYBOARD_MSG</span>.WM_KEYDOWN,\n        (<span class=\"blue\">uint</span>) <span class=\"teal\">Keys</span>.Escape, 0 );\n    }\n  }\n}\n</pre><p>I don't know why one has to send the WM_KEYDOWN message twice.</p><p>Whatever the reason, I can confirm that sending the WM_KEYDOWN message twice works fine for me as well, and sending it once only does not. I also tested using the existing key-press method in The Building Coder samples instead, and that did not do the job either.</p><p><strong>Response:</strong>\n\nWhen you place instances with PromptForFamilyInstancePlacement, the previous one remains selected just until you drop the next one. The first esc key hit removes that selection while still allowing you to continue adding instances to the model. Only a second esc hit aborts the command. I was already used to this behavior from manually aborting the placement operation, even though I doubt that it serves any special purpose, since the user can’t do anything to that selected instance before the command is terminated. But it is probably perfectly normal for a newly added instance to automatically get selected in the first place, and obviously that selection has a higher priority in the message queue than the placement command. Hence the two esc hits.</p><p>Many thanks to Joachim for solving this task and sharing this approach!</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1279_terminate_inst_loop",
    "header_text": "MilanoJS Meetup",
    "local_header_href": "#milanojs-meetup",
    "chunk_text": "<h4>MilanoJS Meetup</h4><p>Today is the day of the\n\n<a href=\"http://milanojs.com\">Milano JS</a> meetup and presentation of the\n\n<a href=\"https://developer-autodesk.github.io\">View and Data API</a> at\n\nJobrapido, Via Pietro Paleocapa 7, 20121 Milano.</p><p>I will be using our new interactive online\n\n<a href=\"http://developer-autodesk.github.io/LmvQuickStartSlides\">View and Data API slide deck</a>,\n\nimplemented by my colleague Shiya Luo, who now also published the absolutely minimal\n\n<a href=\"https://github.com/Developer-Autodesk/View-and-Data-Barebone\">View-and-Data-Barebone</a>\n\nbasic example of View and Data API client side scripting using the minimal JavaScript needed to get a viewer running, in only about 60 lines of code.</p><center>\n<img alt=\"Milano JS\" src=\"img/milanojs.png\" width=\"312\"/>\n</center><p>Looking forward to seeing you at the meetup tonight, if you happen to be in the area!</p>"
  }
]