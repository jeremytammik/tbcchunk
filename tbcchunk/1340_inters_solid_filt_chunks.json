[
  {
    "original_filename": "1340_inters_solid_filt",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equicenter=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<style type=\"text/css\">p.en { font-style: italic; }</style>\n<script src=\"google-code-prettify/run_prettify.js\"></script>\n<!-- <script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script> -->\n</head>"
  },
  {
    "original_filename": "1340_inters_solid_filt",
    "header_text": "Intersect Solid Filter, AVF vs DirectShape Debugging",
    "local_header_href": "#intersect-solid-filter-avf-vs-directshape-debugging",
    "chunk_text": "<h3>Intersect Solid Filter, AVF vs DirectShape Debugging</h3><p>We already discussed the important topics of the\n<a href=\"http://thebuildingcoder.typepad.com/blog/avf\">analysis visualisation framework AVF</a>,\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/directshape-versus-families-category-and-texture.html\">DirectShape</a>\n(<a href=\"http://thebuildingcoder.typepad.com/blog/2015/02/from-hack-to-app-obj-mesh-import-to-directshape.html\">mesh import</a>,\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/04/whats-new-in-the-revit-2016-api.html#4.16\">new functionality</a>),\nand the ElementIntersectsSolidFilter.</p><p>Today, let's look at a little-know restriction on the latter and how to work around it, raised and solved by Miroslav Schonauer, Solution Architect in Autodesk Consulting, and Scott Conover, Software Development Manager of the Revit API team:</p><ul>\n<li><a href=\"#2\">ElementIntersectsSolidFilter problem</a></li>\n<li><a href=\"#3\">Resolution</a></li>\n<li><a href=\"#4\">Rectangular prism solid construction</a></li>\n<li><a href=\"#5\">DirectShape is easier than AVF for prototyping and visualisation</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1340_inters_solid_filt",
    "header_text": "ElementIntersectsSolidFilter Problem",
    "local_header_href": "#elementintersectssolidfilter-problem",
    "chunk_text": "<h4>ElementIntersectsSolidFilter Problem</h4><p><strong>Question:</strong>\n\nI have a problem with the results of ElementIntersectsSolidFilter.</p><p>It is not behaving as I would assume.</p><p>I need to determine if a given point if within a tolerance, e.g., 100 mm, of any solid part of the wall and retrieve the list of such walls.</p><p>ElementIntersectsSolidFilter looked like an ideal solution:</p><ul>\n<li>I create an <code>ElementIntersectsSolidFilter filterSphere =</code> <code>newElementIntersectsSolidFilter(tolSphere)</code> with a Solid tolSphere of radius = tol.</li>\n<li>Then, I use <code>new FilteredElementCollector( doc )</code> <code>.OfClass( typeof( Wall ) )</code> <code>.WherePasses( filterSphere );</code></li>\n</ul><p>Unfortunately, testing this with a given point that lies spot-on the wall face, I get NO walls for a tolerance of 100 mm, and the expected wall only for a tolerance of 1000 mm.</p><p>I suspected I was doing something wrong with my transforms, due to the complex workflow.</p><p>However, adding code to <a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/sphere-creation-for-avf-and-filtering.html\">display the solid using AVF</a> and the sphere creation code provided there prove that in both cases everything really is spot-on:</p><center>\n<img alt=\"A sphere intersecting a wall\" src=\"img/1340_inters_solid_filt_01.png\" width=\"406\"/>\n</center><p>Finally, I worked out that I get the hit if I set the sphere tolerance greater than the wall thickness, e.g., 425 mm.</p><p>No hit is returned if it is less, e.g. 375 mm.</p><p>It looks as if the internal interpretation of this filter if really '3D intersection', i.e., the solid must fully 'go through' the element – in this case wall – geometry and not just 'penetrate' it, i.e. have a Boolean overlap.</p><p>Questions:</p><ul>\n<li>Is this a bug or by design?</li>\n<li>If by design, what would be the best solution – is anything better or faster than checking for Boolean overlaps between the solids?</li>\n</ul><a name=\"3\"></a>"
  },
  {
    "original_filename": "1340_inters_solid_filt",
    "header_text": "Resolution",
    "local_header_href": "#resolution",
    "chunk_text": "<h4>Resolution</h4><p><strong>Answer:</strong>\n\nThis is indeed a limitation of the Boolean operations that sometimes crops up in Revit.</p><p>If neither joining entity intersects along an edge, the intersection is not properly detected.   This is tracked as issue REVIT-32243.</p><p>In your case, it would probably make sense to change from a sphere shape to a cube.</p><p>The cube should intersect the face on some of its edges and be reported correctly.</p><p><strong>Response:</strong>\n\nThank you for confirming what I’m sure is the root cause here!</p><p>It all adds up: with the smaller sphere, all the edges on the 'wall-surface meridian' are 100% ON the surface and do not really intersect it.</p><p>With the bigger sphere, the ones on the other end start intersecting the opposite surface.</p><p>It works fine even if I offset the centre point of the sphere by dXYZ=(1,1,1)[mm], since then the sphere edges intersect the closer surface.</p><p>I will switch to a cube and possibly add some pre-filtering based on the walls’ delta-expanded Bounding Boxes.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1340_inters_solid_filt",
    "header_text": "Rectangular Prism Solid Construction",
    "local_header_href": "#rectangular-prism-solid-construction",
    "chunk_text": "<h4>Rectangular Prism Solid Construction</h4><p><strong>Answer:</strong>\n\nHere is a quick cube or rectangular prism construction example:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and return a cube of </span>\n  <span class=\"gray\">///</span><span class=\"green\"> side length d at the origin.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">Solid</span> CreateCube( <span class=\"blue\">double</span> d )\n  {\n    <span class=\"blue\">return</span> CreateRectangularPrism(\n      <span class=\"teal\">XYZ</span>.Zero, d, d, d );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and return a rectangular prism of the</span>\n  <span class=\"gray\">///</span><span class=\"green\"> given side lengths centered at the given point.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">Solid</span> CreateRectangularPrism(\n    <span class=\"teal\">XYZ</span> center,\n    <span class=\"blue\">double</span> d1,\n    <span class=\"blue\">double</span> d2,\n    <span class=\"blue\">double</span> d3 )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt; profile = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Curve</span>&gt;();\n    <span class=\"teal\">XYZ</span> profile00 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -d1 / 2, -d2 / 2, -d3 / 2 );\n    <span class=\"teal\">XYZ</span> profile01 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -d1 / 2, d2 / 2, -d3 / 2 );\n    <span class=\"teal\">XYZ</span> profile11 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( d1 / 2, d2 / 2, -d3 / 2 );\n    <span class=\"teal\">XYZ</span> profile10 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( d1 / 2, -d2 / 2, -d3 / 2 );\n \n    profile.Add( <span class=\"teal\">Line</span>.CreateBound( profile00, profile01 ) );\n    profile.Add( <span class=\"teal\">Line</span>.CreateBound( profile01, profile11 ) );\n    profile.Add( <span class=\"teal\">Line</span>.CreateBound( profile11, profile10 ) );\n    profile.Add( <span class=\"teal\">Line</span>.CreateBound( profile10, profile00 ) );\n \n    <span class=\"teal\">CurveLoop</span> curveLoop = <span class=\"teal\">CurveLoop</span>.Create( profile );\n \n    <span class=\"teal\">SolidOptions</span> options = <span class=\"blue\">new</span> <span class=\"teal\">SolidOptions</span>(\n      <span class=\"teal\">ElementId</span>.InvalidElementId,\n      <span class=\"teal\">ElementId</span>.InvalidElementId );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">GeometryCreationUtilities</span>\n      .CreateExtrusionGeometry(\n        <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>[] { curveLoop },\n        <span class=\"teal\">XYZ</span>.BasisZ, d3, options );\n  }\n</pre><p>You will obviously want to pass in your own target location in the <code>center</code> argument.</p><p><strong>Response:</strong>\n\nThank you.</p><p>I confirm that the cube works fine as well!</p><center>\n<img alt=\"A cube intersecting a wall\" src=\"img/1340_inters_solid_filt_03.png\" width=\"398\"/>\n</center><p>To test this yourself, create a standalone hard-coded RVT model defining the geometry and an external command base don the code below, with the following:</p><ul>\n<li>One wall in RVT.</li>\n<li>Code creates 3 solids: sphere with a radius &lt; wall width, sphere with radius &gt; wall width, cube with side &lt; wall width, each with their centre *exactly* on one of wall side surfaces.</li>\n<ul>\n<li>Spheres created using the <a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/sphere-creation-for-avf-and-filtering.html\">sphere creation for AVF and filtering</a> code.</li>\n<li>For each solid, create the Intersect filter with wall; the first one should result in NO hits, the latter two OK.</li>\n<li>For visualization, use AVF to show the solids.</li>\n</ul>\n</ul><p>Besides the code above to create a rectangular prism, here is an analogous method creating a sphere:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create and return a solid sphere </span>\n  <span class=\"gray\">///</span><span class=\"green\"> with a given radius and centre point.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"teal\">Solid</span> CreateSphereAt(\n    <span class=\"teal\">XYZ</span> centre,\n    <span class=\"blue\">double</span> radius )\n  {\n    <span class=\"green\">// Use the standard global coordinate system </span>\n    <span class=\"green\">// as a frame, translated to the sphere centre.</span>\n \n    <span class=\"teal\">Frame</span> frame = <span class=\"blue\">new</span> <span class=\"teal\">Frame</span>( centre, <span class=\"teal\">XYZ</span>.BasisX,\n      <span class=\"teal\">XYZ</span>.BasisY, <span class=\"teal\">XYZ</span>.BasisZ );\n \n    <span class=\"green\">// Create a vertical half-circle loop </span>\n    <span class=\"green\">// that must be in the frame location.</span>\n \n    <span class=\"teal\">Arc</span> arc = <span class=\"teal\">Arc</span>.Create(\n      centre - radius * <span class=\"teal\">XYZ</span>.BasisZ,\n      centre + radius * <span class=\"teal\">XYZ</span>.BasisZ,\n      centre + radius * <span class=\"teal\">XYZ</span>.BasisX );\n \n    <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound(\n      arc.GetEndPoint( 1 ),\n      arc.GetEndPoint( 0 ) );\n \n    <span class=\"teal\">CurveLoop</span> halfCircle = <span class=\"blue\">new</span> <span class=\"teal\">CurveLoop</span>();\n    halfCircle.Append( arc );\n    halfCircle.Append( line );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; loops = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveLoop</span>&gt;( 1 );\n    loops.Add( halfCircle );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">GeometryCreationUtilities</span>\n      .CreateRevolvedGeometry( frame, loops,\n        0, 2 * <span class=\"teal\">Math</span>.PI );\n  }\n</pre><p>I use the following to drive the AVF:</p><pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">int</span> schemaId = -1;\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> PaintSolid(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">Solid</span> s,\n    <span class=\"blue\">double</span> value )\n  {\n    <span class=\"teal\">Application</span> app = doc.Application;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"blue\">if</span>( view.AnalysisDisplayStyleId\n      == <span class=\"teal\">ElementId</span>.InvalidElementId )\n    {\n      CreateAVFDisplayStyle( doc, view );\n    }\n \n    <span class=\"teal\">SpatialFieldManager</span> sfm = <span class=\"teal\">SpatialFieldManager</span>\n      .GetSpatialFieldManager( view );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == sfm )\n    {\n      sfm = <span class=\"teal\">SpatialFieldManager</span>\n        .CreateSpatialFieldManager( view, 1 );\n    }\n \n    <span class=\"blue\">if</span>( -1 != schemaId )\n    {\n      <span class=\"teal\">IList</span>&lt;<span class=\"blue\">int</span>&gt; results = sfm.GetRegisteredResults();\n      <span class=\"blue\">if</span>( !results.Contains( schemaId ) )\n      {\n        schemaId = -1;\n      }\n    }\n \n    <span class=\"blue\">if</span>( -1 == schemaId )\n    {\n      <span class=\"teal\">AnalysisResultSchema</span> resultSchema1\n        = <span class=\"blue\">new</span> <span class=\"teal\">AnalysisResultSchema</span>( <span class=\"maroon\">\"PaintedSolid\"</span>,\n          <span class=\"maroon\">\"Description\"</span> );\n \n      schemaId = sfm.RegisterResult( resultSchema1 );\n    }\n \n    <span class=\"teal\">FaceArray</span> faces = s.Faces;\n    <span class=\"teal\">Transform</span> trf = <span class=\"teal\">Transform</span>.Identity;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> faces )\n    {\n      <span class=\"blue\">int</span> idx = sfm.AddSpatialFieldPrimitive( face, trf );\n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">UV</span>&gt; uvPts = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">UV</span>&gt;();\n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">double</span>&gt; doubleList = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">double</span>&gt;();\n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ValueAtPoint</span>&gt; valList = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ValueAtPoint</span>&gt;();\n      <span class=\"teal\">BoundingBoxUV</span> bb = face.GetBoundingBox();\n      uvPts.Add( bb.Min );\n      doubleList.Add( value );\n      valList.Add( <span class=\"blue\">new</span> <span class=\"teal\">ValueAtPoint</span>( doubleList ) );\n \n      <span class=\"teal\">FieldDomainPointsByUV</span> pnts\n        = <span class=\"blue\">new</span> <span class=\"teal\">FieldDomainPointsByUV</span>( uvPts );\n \n      <span class=\"teal\">FieldValues</span> vals = <span class=\"blue\">new</span> <span class=\"teal\">FieldValues</span>( valList );\n      sfm.UpdateSpatialFieldPrimitive( idx, pnts,\n        vals, schemaId );\n    }\n  }\n \n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> CreateAVFDisplayStyle(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">View</span> view )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      t.Start( <span class=\"maroon\">\"Create AVF Style\"</span> );\n \n      <span class=\"teal\">AnalysisDisplayColoredSurfaceSettings</span>\n        coloredSurfaceSettings = <span class=\"blue\">new</span>\n          <span class=\"teal\">AnalysisDisplayColoredSurfaceSettings</span>();\n \n      coloredSurfaceSettings.ShowGridLines = <span class=\"blue\">true</span>;\n \n      <span class=\"teal\">AnalysisDisplayColorSettings</span> colorSettings\n        = <span class=\"blue\">new</span> <span class=\"teal\">AnalysisDisplayColorSettings</span>();\n \n      <span class=\"teal\">AnalysisDisplayLegendSettings</span> legendSettings\n        = <span class=\"blue\">new</span> <span class=\"teal\">AnalysisDisplayLegendSettings</span>();\n \n      legendSettings.ShowLegend = <span class=\"blue\">false</span>;\n \n      <span class=\"teal\">AnalysisDisplayStyle</span> analysisDisplayStyle\n        = <span class=\"teal\">AnalysisDisplayStyle</span>.CreateAnalysisDisplayStyle(\n          doc, <span class=\"maroon\">\"Paint Solid\"</span>, coloredSurfaceSettings,\n          colorSettings, legendSettings );\n \n      view.AnalysisDisplayStyleId = analysisDisplayStyle.Id;\n \n      t.Commit();\n    }\n  }\n</pre><a name=\"5\"></a>"
  },
  {
    "original_filename": "1340_inters_solid_filt",
    "header_text": "DirectShape is Easier than AVF for Prototyping and Visualisation",
    "local_header_href": "#directshape-is-easier-than-avf-for-prototyping-and-visualisation",
    "chunk_text": "<h4>DirectShape is Easier than AVF for Prototyping and Visualisation</h4><p><strong>Answer:</strong>\n\nThank you for the confirmation and sample code.</p><p>One note regarding your use of AVF for visualisation and graphical debugging:</p><p>Nowadays, it is a lot easier to visualize 3D geometry by using DirectShape instead of AVF.</p><p>AVF still has its uses, but for prototyping and visualisation, DirectShape is a lot easier.</p><p><strong>Response:</strong>\n\nSo hard to keep up with all the great improvements for all products and APIs   ;-)</p><p>DirectShape is on my list to try asap!</p><p>Many thanks to Miro and Scott for bringing up and solving this important issue!</p><p>I added the solid sphere and cube creation utility methods to\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a> in\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2016.0.120.3\">\nrelease 2016.0.120.3</a>.</p>"
  }
]