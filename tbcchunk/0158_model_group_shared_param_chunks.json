[
  {
    "original_filename": "0158_model_group_shared_param",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0158_model_group_shared_param",
    "header_text": "Model Group Shared Parameter",
    "local_header_href": "#model-group-shared-parameter",
    "chunk_text": "<h3>Model Group Shared Parameter</h3><p>Several people have recently been struggling with adding shared parameters to model groups, including myself.\nSince I had such a hard time finally setting up a reliable working solution, I thought I would share some of the steps and pitfalls with you.\nThese are some of the issues that made it hard for me:\n\n<ul>\n<li>You cannot add <strong>visible</strong> shared parameters to a model group, only <strong>invisible</strong> ones.</li>\n<li>You cannot retrieve the model group category from the Document.Settings.Categories property.</li>\n<li>Various error messages are misleading.</li>\n</ul>\n<p>When you finally succeed in circumnavigating these obstacles, all works well.\nIn the code sample below, I show how to set up shared parameters for several different categories:\n\n<ul>\n<li>The standard category Doors.</li>\n<li>The system category Walls.</li>\n<li>The Model Groups category.</li>\n<li>The Model Lines category.</li>\n</ul>\n<p>Note that this is one of the few cases where something can be done through the API that is not possible in the user interface. \nIn the user interface, shared parameters cannot be defined for model groups or model lines.\nThis is reflected in the Category.AllowsBoundParameters property, which indicates if a category can \nhave visible shared or project parameters. \nIf it is false, the category may not be bound to visible shared parameters using the BindingMap. \nPlease note that non-user-visible parameters can still be bound to these categories.\n\n<p>We already made several forays into the realm of shared parameters in previous posts, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/defining-a-new-parameter.html\">\ncreation of a new shared parameter</a>\n\nand how to determine whether shared parameters can be added to certain elements, such as an\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/adding-a-shared-parameter-to-a-dwg-file.html\">\ninserted DWG file</a> \n\nand an\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/adding-a-shared-parameter-to-an-rfa-file.html\">\nRFA file</a>.\n\nPerformance issues were also addressed, both for the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/parameter-modification-performance.html\">\nmodification of a parameter value</a>\n\nand \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/parameter-binding-performance.html\">\nparameter binding</a>.\n\n<h3>Accessing the Model Groups Category</h3>\n<p>To test attaching a shared parameter to model groups, I created a sample model group through the Revit user interface by selecting Annotate &gt; Detail Group &gt; Create Group, ensuring that the 'Model' radio button is toggled on, and selecting some model elements to add to the group.\n\n<p>When I look at the resulting group with RvtMgdDbg using Add-Ins &gt; RvtMgdDbg &gt; Snoop Db... &gt; Group, selecting the model group I just created, I can verify that its category name is 'Model Groups' and the built-in category is OST_IOSModelGroups.\n\n<p>I tried to use this value in the \n\n<a href=\"zip/rac_labs_2009-06-24.zip\">\nRevit API introduction labs</a>\n\nLab4_3_1_CreateAndBindSharedParam by setting \n\n<pre class=\"code\">\n  static public BuiltInCategory Target \n    = BuiltInCategory.OST_IOSModelGroups;\n</pre>\n<p>Unfortunately, when I do so, the step which actually creates the parameter binding between the shared parameter definition and the category set containing the designated target category throws an exception:\n\n<pre class=\"code\">\n  doc.ParameterBindings.Insert( \n    fireRatingParamDef, binding );\n</pre>\n<p>The exception message states that \"Object reference not set to an instance of an object.\"\n\n<p>In later attempts, I discovered that we cannot obtain the model groups category from the Document.Settings.Categories collection at all.\nThe typical way to access it would be using \n\n<pre class=\"code\">\n  doc.Settings.Categories.get_Item( BuiltInCategory.OST_IOSModelGroups );\n</pre>\n<p>This returns null. \nAn alternative method which is not recommended is to use the language dependent category name \"Model Groups\" as a target string instead of the language independent built-in category enumeration value. \nDoing so throws an exception, SystemInvalidOperationException \"Operation is not valid due to the current state of the object.\"\n\n<p>Yet another way to obtain the model group category is to query it from an existing model group in the project.\nThis is implemented in the following helper method GetCategory, which returns a valid category for a given built-in enumeration value. \nNote that in the case of model groups, it requires the existence of at least one such group in the project to work. \nThis limitation could be removed by inserting a dummy group on the fly, querying it for its category, and then deleting it again.\nAlso note that for all other built-in categories except the model groups, we simply access the document categories collection in the normal way.\nThere may actually be other built-in categories which require some kind of special handling as well, but I am currently not aware of any:\n\n<pre class=\"code\">\n<span class=\"teal\">Category</span> GetCategory( <span class=\"teal\">Application</span> app, <span class=\"teal\">BuiltInCategory</span> target )\n{\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n  <span class=\"teal\">Category</span> cat = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( target.Equals( <span class=\"teal\">BuiltInCategory</span>.OST_IOSModelGroups ) )\n  {\n    <span class=\"green\">//</span>\n    <span class=\"green\">// determine model group category:</span>\n    <span class=\"green\">//</span>\n    Autodesk.Revit.Creation.<span class=\"teal\">Filter</span> cf\n      = app.Create.Filter;\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; modelGroups\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n    <span class=\"teal\">Filter</span> fType = cf.NewTypeFilter(\n      <span class=\"blue\">typeof</span>( <span class=\"teal\">Group</span> ) );\n \n    <span class=\"green\">//Filter fType = cf.NewTypeFilter( // this works as well</span>\n    <span class=\"green\">//  typeof( GroupType ) );</span>\n \n    <span class=\"teal\">Filter</span> fCategory = cf.NewCategoryFilter(\n      <span class=\"teal\">BuiltInCategory</span>.OST_IOSModelGroups );\n \n    <span class=\"teal\">Filter</span> f = cf.NewLogicAndFilter(\n      fType, fCategory );\n \n    <span class=\"blue\">if</span>( 0 == doc.get_Elements( f, modelGroups ) )\n    {\n      <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Please insert a model group.\"</span> );\n      <span class=\"blue\">return</span> cat;\n    }\n    <span class=\"blue\">else</span>\n    {\n      cat = modelGroups[0].Category;\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">try</span>\n    {\n      cat = doc.Settings.Categories.get_Item( target );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Error obtaining document {0} category: {1}\"</span>,\n        target.ToString(), ex.Message ) );\n      <span class=\"blue\">return</span> cat;\n    }\n  }\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == cat )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to obtain the document {0} category.\"</span>,\n      target.ToString() ) );\n  }\n  <span class=\"blue\">return</span> cat;\n}\n</pre>\n<h3>Creating the Shared Parameter</h3>\n<p>Once we have determined the categories we wish to bind the shared parameter to, the rest of the steps are pretty straightforward and remain unchanged from the existing labs sample code.\n\n<p>We need to ensure that the newly created shared parameter is set to invisible for model groups, otherwise the binding will fail. \nThis applies to all categories whose property AllowsBoundParameters return false.\n\n<p>The error message produced by attempting to bind a visible shared parameter to a category whose AllowsBoundParameters is set false is rather misleading, because it simply states that \"Binding the parameter to the category Model Groups is not allowed\".\n\n<p>This message may also be generated when a parameter by the same name already exists.\nBe careful to remove all potentially conflicting shared parameters before running any tests.\nI now check through the user interface using Manage &gt; Shared Parameters and select Parameters: &gt; [group name] &gt; Delete &gt; Yes &gt; OK to remove any previously created definitions from the shared parameter definition file before relaunching my test command to add a new one again.\n\n<p>Here is the CreateSharedParameter method that I implemented to create a new shared parameter for a given category:\n\n<pre class=\"code\">\n<span class=\"blue\">bool</span> CreateSharedParameter( \n  <span class=\"teal\">Application</span> app, \n  <span class=\"teal\">Category</span> cat, \n  <span class=\"blue\">int</span> nameSuffix )\n{\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or set the current shared params filename:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">string</span> filename \n    = app.Options.SharedParametersFilename;\n \n  <span class=\"blue\">if</span>( 0 == filename.Length )\n  {\n    <span class=\"blue\">string</span> path = _filename;\n    <span class=\"teal\">StreamWriter</span> stream;\n    stream = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path );\n    stream.Close();\n    app.Options.SharedParametersFilename = path;\n    filename = app.Options.SharedParametersFilename;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get the current shared params file object:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">DefinitionFile</span> file \n    = app.OpenSharedParameterFile();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == file )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error getting the shared params file.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or create the shared params group:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">DefinitionGroup</span> group \n    = file.Groups.get_Item( _groupname );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == group )\n  {\n    group = file.Groups.Create( _groupname );\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == group )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error getting the shared params group.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// set visibility of the new parameter:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">bool</span> visible = cat.AllowsBoundParameters;\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or create the shared params definition:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">string</span> defname = _defname + nameSuffix.ToString();\n \n  <span class=\"teal\">Definition</span> definition = group.Definitions.get_Item( \n    defname );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == definition )\n  {\n    definition = group.Definitions.Create( \n      defname, _deftype, visible );\n  }\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == definition )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error in creating shared parameter.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// create the category set containing our category for binding:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">CategorySet</span> catSet = app.Create.NewCategorySet();\n  catSet.Insert( cat );\n  <span class=\"green\">//</span>\n  <span class=\"green\">// bind the param:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Binding</span> binding = app.Create.NewInstanceBinding( \n      catSet );\n    <span class=\"green\">//</span>\n    <span class=\"green\">// we could check if it is already bound, </span>\n    <span class=\"green\">// but it looks like insert will just ignore </span>\n    <span class=\"green\">// it in that case:</span>\n    <span class=\"green\">//</span>\n    doc.ParameterBindings.Insert( definition, binding );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Error binding shared parameter to category {0}: {1}\"</span>,\n      cat.Name, ex.Message ) );\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n}\n</pre>\n<h3>Putting it Together</h3>\n<p>With the two methods listed above in place, the rest of the code for the new external command CmdCreateSharedParams is pretty minimal.\nFirst, we define a couple of pretty arbitrary constants for the shared parameters filename, group name, parameter name prefix and type:\n\n<pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _filename = <span class=\"maroon\">\"C:/tmp/SharedParams.txt\"</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _groupname = <span class=\"maroon\">\"The Building Coder Parameters\"</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _defname = <span class=\"maroon\">\"SP\"</span>;\n<span class=\"teal\">ParameterType</span> _deftype = <span class=\"teal\">ParameterType</span>.Number;\n</pre>\n<p>What element types are we interested in? \n\n<ul>\n<li>We start with the standard SDK FireRating example, whcih uses BuiltInCategory.OST_Doors.\n<li>We use BuiltInCategory.OST_Walls to demonstrate that the same technique works with system families just as well as with standard ones.\n<li>To attach shared parameters to \n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/adding-a-shared-parameter-to-a-dwg-file.html\">\ninserted DWG files</a>,\nwhich generate their own category on the fly, we can also identify the category by category name instead of built-in category enumeration.\nThis is commented out here, so we do not have to deal with the additional complexity of mixing strings and built-in enumeration values.\n<li>We can attach shared parameters to model groups.\nUnfortunately, this does not work in the same way as the others, because we cannot retrieve the category from the document Settings.Categories collection, neither using the built-in category enumeration value nor the category name.\nWe implemented the special switch for that case in the GetCategories method presented above, so that we can obtain the category from an existing instance of a group instead.\n<li>Model lines.\n</li></li></li></li></li></ul>\n<p>Here is the list of these built-in categories that we use to drive the shared parameter creation loop, followed by the implementation of the command mainline and creation loop in the external command Execute method:\n\n<pre class=\"code\">\n<span class=\"teal\">BuiltInCategory</span>[] targets = <span class=\"blue\">new</span> <span class=\"teal\">BuiltInCategory</span>[] {\n  <span class=\"teal\">BuiltInCategory</span>.OST_Doors,\n  <span class=\"teal\">BuiltInCategory</span>.OST_Walls,\n  <span class=\"green\">//\"Drawing1.dwg\", // inserted DWG file</span>\n  <span class=\"teal\">BuiltInCategory</span>.OST_IOSModelGroups, \n  <span class=\"teal\">BuiltInCategory</span>.OST_Lines <span class=\"green\">// model lines</span>\n};\n\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInCategory</span> target <span class=\"blue\">in</span> targets )\n  {\n    <span class=\"teal\">Category</span> cat = GetCategory( app, target );\n    CreateSharedParameter( app, cat, ++i );\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n</pre>\n<p>So you can actually add a shared parameter to a model group after all. Hooray!\n\n<p>Here is\n\n<a href=\"zip/bc11036.zip\">\nversion 1.1.0.36</a>\n\nof the complete Visual Studio solution with the new command.</p>\n<p>I am also providing the current version of the \n\n<a href=\"zip/rac_labs_2009-06-24.zip\">\nRevit API introduction labs</a>\n\nhere.\nIt includes an updated implementation of Lab 4-3-1, which now also includes this workaround to support adding a shared parameter to the model group category.\n\n<h3>First Response</h3>\n<p>Here is some enthusiastic response from Henrik Bengtsson of \n\n<a href=\"http://www.lindab.se\">\nLindab</a>\n\nafter trying this out:\n\n<span style=\"color:darkblue\">\n<p>Now it is much clearer. And it works like a rocket !!!!!!!!\n\n<p>I simply implemented your function for retrieving the Category via the doc.Elements(Filter, List), and included a small IF statement for ordinary cases and the Model Groups case. One good idea was to include the Visibility settings in my shared parameters class, so that it takes care of the visibility setting depending on the AllowsBoundParameters property no matter what the user wants to create when he uses the class... Thanks again for the smashing answer...\n\n<p>You have really done a great job here!!!!\n\n</p></p></p></span>\n<p><strong>Question:</strong>\nAre there any other families that you know can be handled via the GetCategory solution, like Model Groups?\n\n<p><strong>Answer:</strong>\nNo, I am currently not aware of any other categories that require the special handling I implemented for Model Groups, but possibly more would crop up with extensive testing. You could actually simply loop through all the built-in category enumeration values and try to retrieve a category from the document categories collection for each.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0158_model_group_shared_param",
    "header_text": "Accessing the Model Groups Category",
    "local_header_href": "#accessing-the-model-groups-category",
    "chunk_text": "<h3>Accessing the Model Groups Category</h3><p>To test attaching a shared parameter to model groups, I created a sample model group through the Revit user interface by selecting Annotate &gt; Detail Group &gt; Create Group, ensuring that the 'Model' radio button is toggled on, and selecting some model elements to add to the group.\n\n<p>When I look at the resulting group with RvtMgdDbg using Add-Ins &gt; RvtMgdDbg &gt; Snoop Db... &gt; Group, selecting the model group I just created, I can verify that its category name is 'Model Groups' and the built-in category is OST_IOSModelGroups.\n\n<p>I tried to use this value in the \n\n<a href=\"zip/rac_labs_2009-06-24.zip\">\nRevit API introduction labs</a>\n\nLab4_3_1_CreateAndBindSharedParam by setting \n\n<pre class=\"code\">\n  static public BuiltInCategory Target \n    = BuiltInCategory.OST_IOSModelGroups;\n</pre>\n<p>Unfortunately, when I do so, the step which actually creates the parameter binding between the shared parameter definition and the category set containing the designated target category throws an exception:\n\n<pre class=\"code\">\n  doc.ParameterBindings.Insert( \n    fireRatingParamDef, binding );\n</pre>\n<p>The exception message states that \"Object reference not set to an instance of an object.\"\n\n<p>In later attempts, I discovered that we cannot obtain the model groups category from the Document.Settings.Categories collection at all.\nThe typical way to access it would be using \n\n<pre class=\"code\">\n  doc.Settings.Categories.get_Item( BuiltInCategory.OST_IOSModelGroups );\n</pre>\n<p>This returns null. \nAn alternative method which is not recommended is to use the language dependent category name \"Model Groups\" as a target string instead of the language independent built-in category enumeration value. \nDoing so throws an exception, SystemInvalidOperationException \"Operation is not valid due to the current state of the object.\"\n\n<p>Yet another way to obtain the model group category is to query it from an existing model group in the project.\nThis is implemented in the following helper method GetCategory, which returns a valid category for a given built-in enumeration value. \nNote that in the case of model groups, it requires the existence of at least one such group in the project to work. \nThis limitation could be removed by inserting a dummy group on the fly, querying it for its category, and then deleting it again.\nAlso note that for all other built-in categories except the model groups, we simply access the document categories collection in the normal way.\nThere may actually be other built-in categories which require some kind of special handling as well, but I am currently not aware of any:\n\n<pre class=\"code\">\n<span class=\"teal\">Category</span> GetCategory( <span class=\"teal\">Application</span> app, <span class=\"teal\">BuiltInCategory</span> target )\n{\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n  <span class=\"teal\">Category</span> cat = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( target.Equals( <span class=\"teal\">BuiltInCategory</span>.OST_IOSModelGroups ) )\n  {\n    <span class=\"green\">//</span>\n    <span class=\"green\">// determine model group category:</span>\n    <span class=\"green\">//</span>\n    Autodesk.Revit.Creation.<span class=\"teal\">Filter</span> cf\n      = app.Create.Filter;\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; modelGroups\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n    <span class=\"teal\">Filter</span> fType = cf.NewTypeFilter(\n      <span class=\"blue\">typeof</span>( <span class=\"teal\">Group</span> ) );\n \n    <span class=\"green\">//Filter fType = cf.NewTypeFilter( // this works as well</span>\n    <span class=\"green\">//  typeof( GroupType ) );</span>\n \n    <span class=\"teal\">Filter</span> fCategory = cf.NewCategoryFilter(\n      <span class=\"teal\">BuiltInCategory</span>.OST_IOSModelGroups );\n \n    <span class=\"teal\">Filter</span> f = cf.NewLogicAndFilter(\n      fType, fCategory );\n \n    <span class=\"blue\">if</span>( 0 == doc.get_Elements( f, modelGroups ) )\n    {\n      <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Please insert a model group.\"</span> );\n      <span class=\"blue\">return</span> cat;\n    }\n    <span class=\"blue\">else</span>\n    {\n      cat = modelGroups[0].Category;\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">try</span>\n    {\n      cat = doc.Settings.Categories.get_Item( target );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Error obtaining document {0} category: {1}\"</span>,\n        target.ToString(), ex.Message ) );\n      <span class=\"blue\">return</span> cat;\n    }\n  }\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == cat )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to obtain the document {0} category.\"</span>,\n      target.ToString() ) );\n  }\n  <span class=\"blue\">return</span> cat;\n}\n</pre>\n<h3>Creating the Shared Parameter</h3>\n<p>Once we have determined the categories we wish to bind the shared parameter to, the rest of the steps are pretty straightforward and remain unchanged from the existing labs sample code.\n\n<p>We need to ensure that the newly created shared parameter is set to invisible for model groups, otherwise the binding will fail. \nThis applies to all categories whose property AllowsBoundParameters return false.\n\n<p>The error message produced by attempting to bind a visible shared parameter to a category whose AllowsBoundParameters is set false is rather misleading, because it simply states that \"Binding the parameter to the category Model Groups is not allowed\".\n\n<p>This message may also be generated when a parameter by the same name already exists.\nBe careful to remove all potentially conflicting shared parameters before running any tests.\nI now check through the user interface using Manage &gt; Shared Parameters and select Parameters: &gt; [group name] &gt; Delete &gt; Yes &gt; OK to remove any previously created definitions from the shared parameter definition file before relaunching my test command to add a new one again.\n\n<p>Here is the CreateSharedParameter method that I implemented to create a new shared parameter for a given category:\n\n<pre class=\"code\">\n<span class=\"blue\">bool</span> CreateSharedParameter( \n  <span class=\"teal\">Application</span> app, \n  <span class=\"teal\">Category</span> cat, \n  <span class=\"blue\">int</span> nameSuffix )\n{\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or set the current shared params filename:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">string</span> filename \n    = app.Options.SharedParametersFilename;\n \n  <span class=\"blue\">if</span>( 0 == filename.Length )\n  {\n    <span class=\"blue\">string</span> path = _filename;\n    <span class=\"teal\">StreamWriter</span> stream;\n    stream = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path );\n    stream.Close();\n    app.Options.SharedParametersFilename = path;\n    filename = app.Options.SharedParametersFilename;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get the current shared params file object:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">DefinitionFile</span> file \n    = app.OpenSharedParameterFile();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == file )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error getting the shared params file.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or create the shared params group:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">DefinitionGroup</span> group \n    = file.Groups.get_Item( _groupname );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == group )\n  {\n    group = file.Groups.Create( _groupname );\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == group )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error getting the shared params group.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// set visibility of the new parameter:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">bool</span> visible = cat.AllowsBoundParameters;\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or create the shared params definition:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">string</span> defname = _defname + nameSuffix.ToString();\n \n  <span class=\"teal\">Definition</span> definition = group.Definitions.get_Item( \n    defname );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == definition )\n  {\n    definition = group.Definitions.Create( \n      defname, _deftype, visible );\n  }\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == definition )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error in creating shared parameter.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// create the category set containing our category for binding:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">CategorySet</span> catSet = app.Create.NewCategorySet();\n  catSet.Insert( cat );\n  <span class=\"green\">//</span>\n  <span class=\"green\">// bind the param:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Binding</span> binding = app.Create.NewInstanceBinding( \n      catSet );\n    <span class=\"green\">//</span>\n    <span class=\"green\">// we could check if it is already bound, </span>\n    <span class=\"green\">// but it looks like insert will just ignore </span>\n    <span class=\"green\">// it in that case:</span>\n    <span class=\"green\">//</span>\n    doc.ParameterBindings.Insert( definition, binding );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Error binding shared parameter to category {0}: {1}\"</span>,\n      cat.Name, ex.Message ) );\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n}\n</pre>\n<h3>Putting it Together</h3>\n<p>With the two methods listed above in place, the rest of the code for the new external command CmdCreateSharedParams is pretty minimal.\nFirst, we define a couple of pretty arbitrary constants for the shared parameters filename, group name, parameter name prefix and type:\n\n<pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _filename = <span class=\"maroon\">\"C:/tmp/SharedParams.txt\"</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _groupname = <span class=\"maroon\">\"The Building Coder Parameters\"</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _defname = <span class=\"maroon\">\"SP\"</span>;\n<span class=\"teal\">ParameterType</span> _deftype = <span class=\"teal\">ParameterType</span>.Number;\n</pre>\n<p>What element types are we interested in? \n\n<ul>\n<li>We start with the standard SDK FireRating example, whcih uses BuiltInCategory.OST_Doors.\n<li>We use BuiltInCategory.OST_Walls to demonstrate that the same technique works with system families just as well as with standard ones.\n<li>To attach shared parameters to \n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/adding-a-shared-parameter-to-a-dwg-file.html\">\ninserted DWG files</a>,\nwhich generate their own category on the fly, we can also identify the category by category name instead of built-in category enumeration.\nThis is commented out here, so we do not have to deal with the additional complexity of mixing strings and built-in enumeration values.\n<li>We can attach shared parameters to model groups.\nUnfortunately, this does not work in the same way as the others, because we cannot retrieve the category from the document Settings.Categories collection, neither using the built-in category enumeration value nor the category name.\nWe implemented the special switch for that case in the GetCategories method presented above, so that we can obtain the category from an existing instance of a group instead.\n<li>Model lines.\n</li></li></li></li></li></ul>\n<p>Here is the list of these built-in categories that we use to drive the shared parameter creation loop, followed by the implementation of the command mainline and creation loop in the external command Execute method:\n\n<pre class=\"code\">\n<span class=\"teal\">BuiltInCategory</span>[] targets = <span class=\"blue\">new</span> <span class=\"teal\">BuiltInCategory</span>[] {\n  <span class=\"teal\">BuiltInCategory</span>.OST_Doors,\n  <span class=\"teal\">BuiltInCategory</span>.OST_Walls,\n  <span class=\"green\">//\"Drawing1.dwg\", // inserted DWG file</span>\n  <span class=\"teal\">BuiltInCategory</span>.OST_IOSModelGroups, \n  <span class=\"teal\">BuiltInCategory</span>.OST_Lines <span class=\"green\">// model lines</span>\n};\n\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInCategory</span> target <span class=\"blue\">in</span> targets )\n  {\n    <span class=\"teal\">Category</span> cat = GetCategory( app, target );\n    CreateSharedParameter( app, cat, ++i );\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n</pre>\n<p>So you can actually add a shared parameter to a model group after all. Hooray!\n\n<p>Here is\n\n<a href=\"zip/bc11036.zip\">\nversion 1.1.0.36</a>\n\nof the complete Visual Studio solution with the new command.</p>\n<p>I am also providing the current version of the \n\n<a href=\"zip/rac_labs_2009-06-24.zip\">\nRevit API introduction labs</a>\n\nhere.\nIt includes an updated implementation of Lab 4-3-1, which now also includes this workaround to support adding a shared parameter to the model group category.\n\n<h3>First Response</h3>\n<p>Here is some enthusiastic response from Henrik Bengtsson of \n\n<a href=\"http://www.lindab.se\">\nLindab</a>\n\nafter trying this out:\n\n<span style=\"color:darkblue\">\n<p>Now it is much clearer. And it works like a rocket !!!!!!!!\n\n<p>I simply implemented your function for retrieving the Category via the doc.Elements(Filter, List), and included a small IF statement for ordinary cases and the Model Groups case. One good idea was to include the Visibility settings in my shared parameters class, so that it takes care of the visibility setting depending on the AllowsBoundParameters property no matter what the user wants to create when he uses the class... Thanks again for the smashing answer...\n\n<p>You have really done a great job here!!!!\n\n</p></p></p></span>\n<p><strong>Question:</strong>\nAre there any other families that you know can be handled via the GetCategory solution, like Model Groups?\n\n<p><strong>Answer:</strong>\nNo, I am currently not aware of any other categories that require the special handling I implemented for Model Groups, but possibly more would crop up with extensive testing. You could actually simply loop through all the built-in category enumeration values and try to retrieve a category from the document categories collection for each.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0158_model_group_shared_param",
    "header_text": "Creating the Shared Parameter",
    "local_header_href": "#creating-the-shared-parameter",
    "chunk_text": "<h3>Creating the Shared Parameter</h3><p>Once we have determined the categories we wish to bind the shared parameter to, the rest of the steps are pretty straightforward and remain unchanged from the existing labs sample code.\n\n<p>We need to ensure that the newly created shared parameter is set to invisible for model groups, otherwise the binding will fail. \nThis applies to all categories whose property AllowsBoundParameters return false.\n\n<p>The error message produced by attempting to bind a visible shared parameter to a category whose AllowsBoundParameters is set false is rather misleading, because it simply states that \"Binding the parameter to the category Model Groups is not allowed\".\n\n<p>This message may also be generated when a parameter by the same name already exists.\nBe careful to remove all potentially conflicting shared parameters before running any tests.\nI now check through the user interface using Manage &gt; Shared Parameters and select Parameters: &gt; [group name] &gt; Delete &gt; Yes &gt; OK to remove any previously created definitions from the shared parameter definition file before relaunching my test command to add a new one again.\n\n<p>Here is the CreateSharedParameter method that I implemented to create a new shared parameter for a given category:\n\n<pre class=\"code\">\n<span class=\"blue\">bool</span> CreateSharedParameter( \n  <span class=\"teal\">Application</span> app, \n  <span class=\"teal\">Category</span> cat, \n  <span class=\"blue\">int</span> nameSuffix )\n{\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or set the current shared params filename:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">string</span> filename \n    = app.Options.SharedParametersFilename;\n \n  <span class=\"blue\">if</span>( 0 == filename.Length )\n  {\n    <span class=\"blue\">string</span> path = _filename;\n    <span class=\"teal\">StreamWriter</span> stream;\n    stream = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path );\n    stream.Close();\n    app.Options.SharedParametersFilename = path;\n    filename = app.Options.SharedParametersFilename;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get the current shared params file object:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">DefinitionFile</span> file \n    = app.OpenSharedParameterFile();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == file )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error getting the shared params file.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or create the shared params group:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">DefinitionGroup</span> group \n    = file.Groups.get_Item( _groupname );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == group )\n  {\n    group = file.Groups.Create( _groupname );\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == group )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error getting the shared params group.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// set visibility of the new parameter:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">bool</span> visible = cat.AllowsBoundParameters;\n  <span class=\"green\">//</span>\n  <span class=\"green\">// get or create the shared params definition:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">string</span> defname = _defname + nameSuffix.ToString();\n \n  <span class=\"teal\">Definition</span> definition = group.Definitions.get_Item( \n    defname );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == definition )\n  {\n    definition = group.Definitions.Create( \n      defname, _deftype, visible );\n  }\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == definition )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Error in creating shared parameter.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"green\">//</span>\n  <span class=\"green\">// create the category set containing our category for binding:</span>\n  <span class=\"green\">//</span>\n  <span class=\"teal\">CategorySet</span> catSet = app.Create.NewCategorySet();\n  catSet.Insert( cat );\n  <span class=\"green\">//</span>\n  <span class=\"green\">// bind the param:</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Binding</span> binding = app.Create.NewInstanceBinding( \n      catSet );\n    <span class=\"green\">//</span>\n    <span class=\"green\">// we could check if it is already bound, </span>\n    <span class=\"green\">// but it looks like insert will just ignore </span>\n    <span class=\"green\">// it in that case:</span>\n    <span class=\"green\">//</span>\n    doc.ParameterBindings.Insert( definition, binding );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Error binding shared parameter to category {0}: {1}\"</span>,\n      cat.Name, ex.Message ) );\n    <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n  }\n  <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n}\n</pre>\n<h3>Putting it Together</h3>\n<p>With the two methods listed above in place, the rest of the code for the new external command CmdCreateSharedParams is pretty minimal.\nFirst, we define a couple of pretty arbitrary constants for the shared parameters filename, group name, parameter name prefix and type:\n\n<pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _filename = <span class=\"maroon\">\"C:/tmp/SharedParams.txt\"</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _groupname = <span class=\"maroon\">\"The Building Coder Parameters\"</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _defname = <span class=\"maroon\">\"SP\"</span>;\n<span class=\"teal\">ParameterType</span> _deftype = <span class=\"teal\">ParameterType</span>.Number;\n</pre>\n<p>What element types are we interested in? \n\n<ul>\n<li>We start with the standard SDK FireRating example, whcih uses BuiltInCategory.OST_Doors.\n<li>We use BuiltInCategory.OST_Walls to demonstrate that the same technique works with system families just as well as with standard ones.\n<li>To attach shared parameters to \n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/adding-a-shared-parameter-to-a-dwg-file.html\">\ninserted DWG files</a>,\nwhich generate their own category on the fly, we can also identify the category by category name instead of built-in category enumeration.\nThis is commented out here, so we do not have to deal with the additional complexity of mixing strings and built-in enumeration values.\n<li>We can attach shared parameters to model groups.\nUnfortunately, this does not work in the same way as the others, because we cannot retrieve the category from the document Settings.Categories collection, neither using the built-in category enumeration value nor the category name.\nWe implemented the special switch for that case in the GetCategories method presented above, so that we can obtain the category from an existing instance of a group instead.\n<li>Model lines.\n</li></li></li></li></li></ul>\n<p>Here is the list of these built-in categories that we use to drive the shared parameter creation loop, followed by the implementation of the command mainline and creation loop in the external command Execute method:\n\n<pre class=\"code\">\n<span class=\"teal\">BuiltInCategory</span>[] targets = <span class=\"blue\">new</span> <span class=\"teal\">BuiltInCategory</span>[] {\n  <span class=\"teal\">BuiltInCategory</span>.OST_Doors,\n  <span class=\"teal\">BuiltInCategory</span>.OST_Walls,\n  <span class=\"green\">//\"Drawing1.dwg\", // inserted DWG file</span>\n  <span class=\"teal\">BuiltInCategory</span>.OST_IOSModelGroups, \n  <span class=\"teal\">BuiltInCategory</span>.OST_Lines <span class=\"green\">// model lines</span>\n};\n\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInCategory</span> target <span class=\"blue\">in</span> targets )\n  {\n    <span class=\"teal\">Category</span> cat = GetCategory( app, target );\n    CreateSharedParameter( app, cat, ++i );\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n</pre>\n<p>So you can actually add a shared parameter to a model group after all. Hooray!\n\n<p>Here is\n\n<a href=\"zip/bc11036.zip\">\nversion 1.1.0.36</a>\n\nof the complete Visual Studio solution with the new command.</p>\n<p>I am also providing the current version of the \n\n<a href=\"zip/rac_labs_2009-06-24.zip\">\nRevit API introduction labs</a>\n\nhere.\nIt includes an updated implementation of Lab 4-3-1, which now also includes this workaround to support adding a shared parameter to the model group category.\n\n<h3>First Response</h3>\n<p>Here is some enthusiastic response from Henrik Bengtsson of \n\n<a href=\"http://www.lindab.se\">\nLindab</a>\n\nafter trying this out:\n\n<span style=\"color:darkblue\">\n<p>Now it is much clearer. And it works like a rocket !!!!!!!!\n\n<p>I simply implemented your function for retrieving the Category via the doc.Elements(Filter, List), and included a small IF statement for ordinary cases and the Model Groups case. One good idea was to include the Visibility settings in my shared parameters class, so that it takes care of the visibility setting depending on the AllowsBoundParameters property no matter what the user wants to create when he uses the class... Thanks again for the smashing answer...\n\n<p>You have really done a great job here!!!!\n\n</p></p></p></span>\n<p><strong>Question:</strong>\nAre there any other families that you know can be handled via the GetCategory solution, like Model Groups?\n\n<p><strong>Answer:</strong>\nNo, I am currently not aware of any other categories that require the special handling I implemented for Model Groups, but possibly more would crop up with extensive testing. You could actually simply loop through all the built-in category enumeration values and try to retrieve a category from the document categories collection for each.\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0158_model_group_shared_param",
    "header_text": "Putting it Together",
    "local_header_href": "#putting-it-together",
    "chunk_text": "<h3>Putting it Together</h3><p>With the two methods listed above in place, the rest of the code for the new external command CmdCreateSharedParams is pretty minimal.\nFirst, we define a couple of pretty arbitrary constants for the shared parameters filename, group name, parameter name prefix and type:\n\n<pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _filename = <span class=\"maroon\">\"C:/tmp/SharedParams.txt\"</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _groupname = <span class=\"maroon\">\"The Building Coder Parameters\"</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _defname = <span class=\"maroon\">\"SP\"</span>;\n<span class=\"teal\">ParameterType</span> _deftype = <span class=\"teal\">ParameterType</span>.Number;\n</pre>\n<p>What element types are we interested in? \n\n<ul>\n<li>We start with the standard SDK FireRating example, whcih uses BuiltInCategory.OST_Doors.\n<li>We use BuiltInCategory.OST_Walls to demonstrate that the same technique works with system families just as well as with standard ones.\n<li>To attach shared parameters to \n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/adding-a-shared-parameter-to-a-dwg-file.html\">\ninserted DWG files</a>,\nwhich generate their own category on the fly, we can also identify the category by category name instead of built-in category enumeration.\nThis is commented out here, so we do not have to deal with the additional complexity of mixing strings and built-in enumeration values.\n<li>We can attach shared parameters to model groups.\nUnfortunately, this does not work in the same way as the others, because we cannot retrieve the category from the document Settings.Categories collection, neither using the built-in category enumeration value nor the category name.\nWe implemented the special switch for that case in the GetCategories method presented above, so that we can obtain the category from an existing instance of a group instead.\n<li>Model lines.\n</li></li></li></li></li></ul>\n<p>Here is the list of these built-in categories that we use to drive the shared parameter creation loop, followed by the implementation of the command mainline and creation loop in the external command Execute method:\n\n<pre class=\"code\">\n<span class=\"teal\">BuiltInCategory</span>[] targets = <span class=\"blue\">new</span> <span class=\"teal\">BuiltInCategory</span>[] {\n  <span class=\"teal\">BuiltInCategory</span>.OST_Doors,\n  <span class=\"teal\">BuiltInCategory</span>.OST_Walls,\n  <span class=\"green\">//\"Drawing1.dwg\", // inserted DWG file</span>\n  <span class=\"teal\">BuiltInCategory</span>.OST_IOSModelGroups, \n  <span class=\"teal\">BuiltInCategory</span>.OST_Lines <span class=\"green\">// model lines</span>\n};\n\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInCategory</span> target <span class=\"blue\">in</span> targets )\n  {\n    <span class=\"teal\">Category</span> cat = GetCategory( app, target );\n    CreateSharedParameter( app, cat, ++i );\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n</pre>\n<p>So you can actually add a shared parameter to a model group after all. Hooray!\n\n<p>Here is\n\n<a href=\"zip/bc11036.zip\">\nversion 1.1.0.36</a>\n\nof the complete Visual Studio solution with the new command.</p>\n<p>I am also providing the current version of the \n\n<a href=\"zip/rac_labs_2009-06-24.zip\">\nRevit API introduction labs</a>\n\nhere.\nIt includes an updated implementation of Lab 4-3-1, which now also includes this workaround to support adding a shared parameter to the model group category.\n\n<h3>First Response</h3>\n<p>Here is some enthusiastic response from Henrik Bengtsson of \n\n<a href=\"http://www.lindab.se\">\nLindab</a>\n\nafter trying this out:\n\n<span style=\"color:darkblue\">\n<p>Now it is much clearer. And it works like a rocket !!!!!!!!\n\n<p>I simply implemented your function for retrieving the Category via the doc.Elements(Filter, List), and included a small IF statement for ordinary cases and the Model Groups case. One good idea was to include the Visibility settings in my shared parameters class, so that it takes care of the visibility setting depending on the AllowsBoundParameters property no matter what the user wants to create when he uses the class... Thanks again for the smashing answer...\n\n<p>You have really done a great job here!!!!\n\n</p></p></p></span>\n<p><strong>Question:</strong>\nAre there any other families that you know can be handled via the GetCategory solution, like Model Groups?\n\n<p><strong>Answer:</strong>\nNo, I am currently not aware of any other categories that require the special handling I implemented for Model Groups, but possibly more would crop up with extensive testing. You could actually simply loop through all the built-in category enumeration values and try to retrieve a category from the document categories collection for each.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0158_model_group_shared_param",
    "header_text": "First Response",
    "local_header_href": "#first-response",
    "chunk_text": "<h3>First Response</h3><p>Here is some enthusiastic response from Henrik Bengtsson of \n\n<a href=\"http://www.lindab.se\">\nLindab</a>\n\nafter trying this out:\n\n<span style=\"color:darkblue\">\n<p>Now it is much clearer. And it works like a rocket !!!!!!!!\n\n<p>I simply implemented your function for retrieving the Category via the doc.Elements(Filter, List), and included a small IF statement for ordinary cases and the Model Groups case. One good idea was to include the Visibility settings in my shared parameters class, so that it takes care of the visibility setting depending on the AllowsBoundParameters property no matter what the user wants to create when he uses the class... Thanks again for the smashing answer...\n\n<p>You have really done a great job here!!!!\n\n</p></p></p></span>\n<p><strong>Question:</strong>\nAre there any other families that you know can be handled via the GetCategory solution, like Model Groups?\n\n<p><strong>Answer:</strong>\nNo, I am currently not aware of any other categories that require the special handling I implemented for Model Groups, but possibly more would crop up with extensive testing. You could actually simply loop through all the built-in category enumeration values and try to retrieve a category from the document categories collection for each.\n</p></p></p>"
  }
]