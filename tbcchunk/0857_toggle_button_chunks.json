[
  {
    "original_filename": "0857_toggle_button",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0857_toggle_button",
    "header_text": "Roll Your Own Toggle Button",
    "local_header_href": "#roll-your-own-toggle-button",
    "chunk_text": "<h3>Roll Your Own Toggle Button</h3><p>Today I took my first stab at creating, compiling and debugging a new Revit add-in on the Mac.\n\n<p>I cannot run Revit or Visual Studio natively on the Mac, of course, so those have to remain in Windows, hosted by the Parallels environment on the Mac.</p>\n<p>I had to fiddle around quite a bit with the Parallels synchronisation, which seems to be breaking more things than it fixes, for me at least.\nI managed in the end in spite of that, though.</p>\n<p>The opportunity to implement a new sample add-in was provided by the following question:\n\n\n<p><strong>Question:</strong> Is there a way to create a ribbon button that can be toggled, e.g. a sort of on/off switch like the Modify &gt; Properties button?\n\n\n<p><strong>Answer:</strong> Yes, sure.\n\n<p>You will have to roll your own, though.</p>\n<p>The Revit API just provides radio buttons.\n\n<p>Here is a description of radio buttons from Saikat Bhattacharya's upcoming Autodesk University class\n\n<a href=\"https://www.autodeskuniversity2012.com/connect/sessionDetail.ww?SESSION_ID=3272\">\nCP3272</a> Snapshot of the Autodesk Revit User Interface API:\n\n<a name=\"2\"></a>\n<h4>Radio Buttons</h4>\n<center>\n<img alt=\"Radio buttons\" src=\"img/radio_button.png\"/>\n</center>\n<p>A radio button group helps toggle between options by letting users select only one ribbon item at a time.\nAfter adding a RadioButtonGroup to a panel, use the AddItem and AddItems methods to add radio buttons, which are basically normal PushButtons, to the group.\nThe RadioButtonGroup.Current property can be used to access the currently selected button.\nJust like SplitButton, tooltips do not apply to radio button groups; instead the tooltip for each toggle button is displayed.\n\n<pre class=\"code\">\n  <span class=\"teal\">RadioButtonGroupData</span> radioData =\n    <span class=\"blue\">new</span> <span class=\"teal\">RadioButtonGroupData</span>( <span class=\"maroon\">\"radioGroup\"</span> );\n \n  <span class=\"teal\">RadioButtonGroup</span> radioButtonGroup =\n    panel.AddItem( radioData ) <span class=\"blue\">as</span> <span class=\"teal\">RadioButtonGroup</span>;\n \n  <span class=\"teal\">ToggleButtonData</span> tb1 = <span class=\"blue\">new</span> <span class=\"teal\">ToggleButtonData</span>(\n    <span class=\"maroon\">\"OverrideCommand1\"</span>,\n    <span class=\"maroon\">\"Override Cmd: Off\"</span>,\n    assemblyPath + <span class=\"maroon\">\"\\\\\"</span> + assemblyName,\n    <span class=\"maroon\">\"SnapshotRevitUI_CS.OverrideOff\"</span> );\n \n  <span class=\"teal\">ToggleButtonData</span> tb2 = <span class=\"blue\">new</span> <span class=\"teal\">ToggleButtonData</span>(\n    <span class=\"maroon\">\"OverrideCommand2\"</span>,\n    <span class=\"maroon\">\"Override Cmd: On\"</span>,\n    assemblyPath + <span class=\"maroon\">\"\\\\\"</span> + assemblyName,\n    <span class=\"maroon\">\"SnapshotRevitUI_CS.OverrideOn\"</span> );\n \n  tb2.ToolTip = <span class=\"maroon\">\"Override the Wall Creation command\"</span>;\n \n  tb2.LargeImage = <span class=\"blue\">new</span> BitmapImage(\n    <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( imageFolder + <span class=\"maroon\">\"globe_32.png\"</span> ) );\n \n  radioButtonGroup.AddItem( tb1 );\n  radioButtonGroup.AddItem( tb2 );\n</pre>\n<p>However, this is still not quite what you want, is it?\n\n<p>You would really like one single button that changes its state each time it is clicked.</p>\n<a name=\"3\"></a>\n<h4>A Real Toggle Button</h4>\n<p>Well, as said, this can easily be achieved by implementing your own custom button.</p>\n<p>Note that the RibbonButton Image, LargeImage and ItemText properties are all read-write.</p>\n<p>Therefore, there is nothing to stop you from changing the button appearance any way you like at any time you like.\nFor instance, if you change these properties appropriately each time the button is clicked, it will appear like a toggle button such as you describe.</p>\n<p>I implemented a minimal sample illustrating this using just the ItemText property:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"150\" src=\"http://www.youtube.com/embed/IGa2S1IZO-w\" width=\"200\"></iframe>\n</center>\n<p>It would look more impressive if I switched the image as well, of course.\nI leave that as a simple exercise to the reader.</p>\n<p>The basic framework to achieve this consists of a very small external application and a single-line external command.</p>\n<p>The external application sets up the ribbon panel and button, saves a reference to the latter, and provides a public method Toggle that uses the button reference to toggle its text:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> _path = <span class=\"blue\">typeof</span>( <span class=\"teal\">App</span> ).Assembly.Location;\n \n  <span class=\"teal\">RibbonItem</span> _button;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Singleton external application class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> _app = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Provide access to singleton class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> Instance\n  {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _app; }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( \n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _app = <span class=\"blue\">this</span>;\n \n    <span class=\"teal\">RibbonPanel</span> panel = a.CreateRibbonPanel( \n      <span class=\"maroon\">\"ToggleButton\"</span> );\n \n    <span class=\"teal\">PushButtonData</span> data = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>( \n      <span class=\"maroon\">\"Toggle\"</span>, <span class=\"maroon\">\"On\"</span>, _path, \n      <span class=\"maroon\">\"ToggleButton.Command\"</span> );\n \n    data.AvailabilityClassName\n      = <span class=\"maroon\">\"ToggleButton.Availability\"</span>;\n \n    _button = panel.AddItem( data );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Toggle()\n  {\n    <span class=\"blue\">string</span> s = _button.ItemText;\n \n    _button.ItemText = s.Equals( <span class=\"maroon\">\"On\"</span> ) ? <span class=\"maroon\">\"Off\"</span> : <span class=\"maroon\">\"On\"</span>;\n  }\n}\n</pre>\n<p>The button images could be toggled in a similar fashion.</p>\n<p>The Toggle method is public, and used by the command to toggle the button state each time it is launched:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.Toggle();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Probably one of the simplest command implementations you have ever seen, isn't it?</p>\n<p>This command was initially read-only, and that makes sense, but I had to change it to manual transaction mode for reasons explained below.</p>\n<a name=\"4\"></a>\n<h4>Zero Document State Support</h4>\n<p>I made the whole sample a little bit more complicated in order to enable its use in a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/enable-ribbon-items-in-zero-document-state.html\">\nzero document context</a> as\n\nwell as when a project is opened.\n\n<p>I implemented a trivial\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/revitaddinutility.html#availability\">\navailability</a> class\n\nthat I use to set the button availability.\nIn this case, I want it to be available always:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Availability</span>\n    : <span class=\"teal\">IExternalCommandAvailability</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsCommandAvailable(\n      <span class=\"teal\">UIApplication</span> a,\n      <span class=\"teal\">CategorySet</span> b )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n</pre>\n<p>Enabling the command in zero document context also requires changing its transaction mode from read-only to manual, because Revit only allows manual transaction mode commands in zero document state.\nViolation of this rule causes the following error:</p>\n<center>\n<img alt=\"Zero document context requires manual transaction mode\" src=\"img/zero_doc_requires_manual.png\"/>\n</center>\n<p>As you can see from the recording above, all is well now, and this is a viable solution.</p>\n<p>Here is\n\n<a href=\"zip/ToggleButton.zip\">ToggleButton.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for this samplpe add-in.</p>\n<p>While I've been having fun creating this sample, let's look at some examples of cool stuff other people are doing as well.</p>\n<a name=\"12\"></a>\n<h4>IDAT Revit Structure Slab Add-In</h4>\n\nThe German company <a href=\"http://www.idat.de/home-en-GB\">\nIDAT</a> presents\n\na neat example of using the Revit API implement an add-in for the design, fabrication and construction logistics of precast hollow core slabs.\nThis\n\n<a \"=\"\" href=\"http://www.youtube.com/1kslQ9P1160\">\nvideo</a> shows\n\ntheir precast module for hollowcore slabs inside Revit Structure:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/1kslQ9P1160\" width=\"480\"></iframe>\n<!-- http://bimandbeam.typepad.com/bim_beam/2012/11/precast-module-for-hollowcore-slabs.html -->\n<a name=\"13\"></a>\n<h4>Ab in den Hafen by Allerdings</h4>\n<p>Completely unrelated to Revit and its API, but closely related to me, my son Christopher aka\n\n<a href=\"http://soundcloud.com/allerdings\">\nAllerdings</a> has\n\nbeen composing and publishing music on SoundCloud for some time now.\n\n<p>Here is his most recent oevre,\n\n<a href=\"http://soundcloud.com/allerdings/ab-in-den-hafen\">\nAb in den Hafen</a>:</p>\n<iframe frameborder=\"no\" height=\"166\" scrolling=\"no\" src=\"http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F66345836&amp;show_artwork=true\" width=\"450\"></iframe>\n<p>Enjoy.</p>\n<a name=\"14\"></a>\n<h4>AUGI Wish List</h4>\n<p>Another cool and important thing, albeit more administrative, is the\n\n<a href=\"http://www.augi.com/wishlist\">\nAUGI wish list</a> providing\n\na unified independent voice back to Autodesk on how to improve its products.</p>\n<p>Please <a href=\"http://www.augi.com/wishlist/vote-wishes\">vote now</a> for your most important wish.\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0857_toggle_button",
    "header_text": "Radio Buttons",
    "local_header_href": "#radio-buttons",
    "chunk_text": "<h4>Radio Buttons</h4><center>\n<img alt=\"Radio buttons\" src=\"img/radio_button.png\"/>\n</center><p>A radio button group helps toggle between options by letting users select only one ribbon item at a time.\nAfter adding a RadioButtonGroup to a panel, use the AddItem and AddItems methods to add radio buttons, which are basically normal PushButtons, to the group.\nThe RadioButtonGroup.Current property can be used to access the currently selected button.\nJust like SplitButton, tooltips do not apply to radio button groups; instead the tooltip for each toggle button is displayed.\n\n<pre class=\"code\">\n  <span class=\"teal\">RadioButtonGroupData</span> radioData =\n    <span class=\"blue\">new</span> <span class=\"teal\">RadioButtonGroupData</span>( <span class=\"maroon\">\"radioGroup\"</span> );\n \n  <span class=\"teal\">RadioButtonGroup</span> radioButtonGroup =\n    panel.AddItem( radioData ) <span class=\"blue\">as</span> <span class=\"teal\">RadioButtonGroup</span>;\n \n  <span class=\"teal\">ToggleButtonData</span> tb1 = <span class=\"blue\">new</span> <span class=\"teal\">ToggleButtonData</span>(\n    <span class=\"maroon\">\"OverrideCommand1\"</span>,\n    <span class=\"maroon\">\"Override Cmd: Off\"</span>,\n    assemblyPath + <span class=\"maroon\">\"\\\\\"</span> + assemblyName,\n    <span class=\"maroon\">\"SnapshotRevitUI_CS.OverrideOff\"</span> );\n \n  <span class=\"teal\">ToggleButtonData</span> tb2 = <span class=\"blue\">new</span> <span class=\"teal\">ToggleButtonData</span>(\n    <span class=\"maroon\">\"OverrideCommand2\"</span>,\n    <span class=\"maroon\">\"Override Cmd: On\"</span>,\n    assemblyPath + <span class=\"maroon\">\"\\\\\"</span> + assemblyName,\n    <span class=\"maroon\">\"SnapshotRevitUI_CS.OverrideOn\"</span> );\n \n  tb2.ToolTip = <span class=\"maroon\">\"Override the Wall Creation command\"</span>;\n \n  tb2.LargeImage = <span class=\"blue\">new</span> BitmapImage(\n    <span class=\"blue\">new</span> <span class=\"teal\">Uri</span>( imageFolder + <span class=\"maroon\">\"globe_32.png\"</span> ) );\n \n  radioButtonGroup.AddItem( tb1 );\n  radioButtonGroup.AddItem( tb2 );\n</pre>\n<p>However, this is still not quite what you want, is it?\n\n<p>You would really like one single button that changes its state each time it is clicked.</p>\n<a name=\"3\"></a>\n<h4>A Real Toggle Button</h4>\n<p>Well, as said, this can easily be achieved by implementing your own custom button.</p>\n<p>Note that the RibbonButton Image, LargeImage and ItemText properties are all read-write.</p>\n<p>Therefore, there is nothing to stop you from changing the button appearance any way you like at any time you like.\nFor instance, if you change these properties appropriately each time the button is clicked, it will appear like a toggle button such as you describe.</p>\n<p>I implemented a minimal sample illustrating this using just the ItemText property:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"150\" src=\"http://www.youtube.com/embed/IGa2S1IZO-w\" width=\"200\"></iframe>\n</center>\n<p>It would look more impressive if I switched the image as well, of course.\nI leave that as a simple exercise to the reader.</p>\n<p>The basic framework to achieve this consists of a very small external application and a single-line external command.</p>\n<p>The external application sets up the ribbon panel and button, saves a reference to the latter, and provides a public method Toggle that uses the button reference to toggle its text:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> _path = <span class=\"blue\">typeof</span>( <span class=\"teal\">App</span> ).Assembly.Location;\n \n  <span class=\"teal\">RibbonItem</span> _button;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Singleton external application class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> _app = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Provide access to singleton class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> Instance\n  {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _app; }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( \n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _app = <span class=\"blue\">this</span>;\n \n    <span class=\"teal\">RibbonPanel</span> panel = a.CreateRibbonPanel( \n      <span class=\"maroon\">\"ToggleButton\"</span> );\n \n    <span class=\"teal\">PushButtonData</span> data = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>( \n      <span class=\"maroon\">\"Toggle\"</span>, <span class=\"maroon\">\"On\"</span>, _path, \n      <span class=\"maroon\">\"ToggleButton.Command\"</span> );\n \n    data.AvailabilityClassName\n      = <span class=\"maroon\">\"ToggleButton.Availability\"</span>;\n \n    _button = panel.AddItem( data );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Toggle()\n  {\n    <span class=\"blue\">string</span> s = _button.ItemText;\n \n    _button.ItemText = s.Equals( <span class=\"maroon\">\"On\"</span> ) ? <span class=\"maroon\">\"Off\"</span> : <span class=\"maroon\">\"On\"</span>;\n  }\n}\n</pre>\n<p>The button images could be toggled in a similar fashion.</p>\n<p>The Toggle method is public, and used by the command to toggle the button state each time it is launched:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.Toggle();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Probably one of the simplest command implementations you have ever seen, isn't it?</p>\n<p>This command was initially read-only, and that makes sense, but I had to change it to manual transaction mode for reasons explained below.</p>\n<a name=\"4\"></a>\n<h4>Zero Document State Support</h4>\n<p>I made the whole sample a little bit more complicated in order to enable its use in a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/enable-ribbon-items-in-zero-document-state.html\">\nzero document context</a> as\n\nwell as when a project is opened.\n\n<p>I implemented a trivial\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/revitaddinutility.html#availability\">\navailability</a> class\n\nthat I use to set the button availability.\nIn this case, I want it to be available always:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Availability</span>\n    : <span class=\"teal\">IExternalCommandAvailability</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsCommandAvailable(\n      <span class=\"teal\">UIApplication</span> a,\n      <span class=\"teal\">CategorySet</span> b )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n</pre>\n<p>Enabling the command in zero document context also requires changing its transaction mode from read-only to manual, because Revit only allows manual transaction mode commands in zero document state.\nViolation of this rule causes the following error:</p>\n<center>\n<img alt=\"Zero document context requires manual transaction mode\" src=\"img/zero_doc_requires_manual.png\"/>\n</center>\n<p>As you can see from the recording above, all is well now, and this is a viable solution.</p>\n<p>Here is\n\n<a href=\"zip/ToggleButton.zip\">ToggleButton.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for this samplpe add-in.</p>\n<p>While I've been having fun creating this sample, let's look at some examples of cool stuff other people are doing as well.</p>\n<a name=\"12\"></a>\n<h4>IDAT Revit Structure Slab Add-In</h4>\n\nThe German company <a href=\"http://www.idat.de/home-en-GB\">\nIDAT</a> presents\n\na neat example of using the Revit API implement an add-in for the design, fabrication and construction logistics of precast hollow core slabs.\nThis\n\n<a \"=\"\" href=\"http://www.youtube.com/1kslQ9P1160\">\nvideo</a> shows\n\ntheir precast module for hollowcore slabs inside Revit Structure:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/1kslQ9P1160\" width=\"480\"></iframe>\n<!-- http://bimandbeam.typepad.com/bim_beam/2012/11/precast-module-for-hollowcore-slabs.html -->\n<a name=\"13\"></a>\n<h4>Ab in den Hafen by Allerdings</h4>\n<p>Completely unrelated to Revit and its API, but closely related to me, my son Christopher aka\n\n<a href=\"http://soundcloud.com/allerdings\">\nAllerdings</a> has\n\nbeen composing and publishing music on SoundCloud for some time now.\n\n<p>Here is his most recent oevre,\n\n<a href=\"http://soundcloud.com/allerdings/ab-in-den-hafen\">\nAb in den Hafen</a>:</p>\n<iframe frameborder=\"no\" height=\"166\" scrolling=\"no\" src=\"http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F66345836&amp;show_artwork=true\" width=\"450\"></iframe>\n<p>Enjoy.</p>\n<a name=\"14\"></a>\n<h4>AUGI Wish List</h4>\n<p>Another cool and important thing, albeit more administrative, is the\n\n<a href=\"http://www.augi.com/wishlist\">\nAUGI wish list</a> providing\n\na unified independent voice back to Autodesk on how to improve its products.</p>\n<p>Please <a href=\"http://www.augi.com/wishlist/vote-wishes\">vote now</a> for your most important wish.\n</p></p></p></p>"
  },
  {
    "original_filename": "0857_toggle_button",
    "header_text": "A Real Toggle Button",
    "local_header_href": "#a-real-toggle-button",
    "chunk_text": "<h4>A Real Toggle Button</h4><p>Well, as said, this can easily be achieved by implementing your own custom button.</p><p>Note that the RibbonButton Image, LargeImage and ItemText properties are all read-write.</p><p>Therefore, there is nothing to stop you from changing the button appearance any way you like at any time you like.\nFor instance, if you change these properties appropriately each time the button is clicked, it will appear like a toggle button such as you describe.</p><p>I implemented a minimal sample illustrating this using just the ItemText property:</p><center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"150\" src=\"http://www.youtube.com/embed/IGa2S1IZO-w\" width=\"200\"></iframe>\n</center><p>It would look more impressive if I switched the image as well, of course.\nI leave that as a simple exercise to the reader.</p><p>The basic framework to achieve this consists of a very small external application and a single-line external command.</p><p>The external application sets up the ribbon panel and button, saves a reference to the latter, and provides a public method Toggle that uses the button reference to toggle its text:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> _path = <span class=\"blue\">typeof</span>( <span class=\"teal\">App</span> ).Assembly.Location;\n \n  <span class=\"teal\">RibbonItem</span> _button;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Singleton external application class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">internal</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> _app = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Provide access to singleton class instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">App</span> Instance\n  {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _app; }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( \n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _app = <span class=\"blue\">this</span>;\n \n    <span class=\"teal\">RibbonPanel</span> panel = a.CreateRibbonPanel( \n      <span class=\"maroon\">\"ToggleButton\"</span> );\n \n    <span class=\"teal\">PushButtonData</span> data = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>( \n      <span class=\"maroon\">\"Toggle\"</span>, <span class=\"maroon\">\"On\"</span>, _path, \n      <span class=\"maroon\">\"ToggleButton.Command\"</span> );\n \n    data.AvailabilityClassName\n      = <span class=\"maroon\">\"ToggleButton.Availability\"</span>;\n \n    _button = panel.AddItem( data );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Toggle()\n  {\n    <span class=\"blue\">string</span> s = _button.ItemText;\n \n    _button.ItemText = s.Equals( <span class=\"maroon\">\"On\"</span> ) ? <span class=\"maroon\">\"Off\"</span> : <span class=\"maroon\">\"On\"</span>;\n  }\n}\n</pre><p>The button images could be toggled in a similar fashion.</p><p>The Toggle method is public, and used by the command to toggle the button state each time it is launched:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">App</span>.Instance.Toggle();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p>Probably one of the simplest command implementations you have ever seen, isn't it?</p><p>This command was initially read-only, and that makes sense, but I had to change it to manual transaction mode for reasons explained below.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "0857_toggle_button",
    "header_text": "Zero Document State Support",
    "local_header_href": "#zero-document-state-support",
    "chunk_text": "<h4>Zero Document State Support</h4><p>I made the whole sample a little bit more complicated in order to enable its use in a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/enable-ribbon-items-in-zero-document-state.html\">\nzero document context</a> as\n\nwell as when a project is opened.\n\n<p>I implemented a trivial\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/revitaddinutility.html#availability\">\navailability</a> class\n\nthat I use to set the button availability.\nIn this case, I want it to be available always:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Availability</span>\n    : <span class=\"teal\">IExternalCommandAvailability</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsCommandAvailable(\n      <span class=\"teal\">UIApplication</span> a,\n      <span class=\"teal\">CategorySet</span> b )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n</pre>\n<p>Enabling the command in zero document context also requires changing its transaction mode from read-only to manual, because Revit only allows manual transaction mode commands in zero document state.\nViolation of this rule causes the following error:</p>\n<center>\n<img alt=\"Zero document context requires manual transaction mode\" src=\"img/zero_doc_requires_manual.png\"/>\n</center>\n<p>As you can see from the recording above, all is well now, and this is a viable solution.</p>\n<p>Here is\n\n<a href=\"zip/ToggleButton.zip\">ToggleButton.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for this samplpe add-in.</p>\n<p>While I've been having fun creating this sample, let's look at some examples of cool stuff other people are doing as well.</p>\n<a name=\"12\"></a>\n<h4>IDAT Revit Structure Slab Add-In</h4>\n\nThe German company <a href=\"http://www.idat.de/home-en-GB\">\nIDAT</a> presents\n\na neat example of using the Revit API implement an add-in for the design, fabrication and construction logistics of precast hollow core slabs.\nThis\n\n<a \"=\"\" href=\"http://www.youtube.com/1kslQ9P1160\">\nvideo</a> shows\n\ntheir precast module for hollowcore slabs inside Revit Structure:</p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"274\" src=\"http://www.youtube.com/embed/1kslQ9P1160\" width=\"480\"></iframe><a name=\"13\"></a>"
  },
  {
    "original_filename": "0857_toggle_button",
    "header_text": "IDAT Revit Structure Slab Add-In",
    "local_header_href": "#idat-revit-structure-slab-add-in",
    "chunk_text": "<h4>IDAT Revit Structure Slab Add-In</h4><a href=\"http://www.idat.de/home-en-GB\">\nIDAT</a><a \"=\"\" href=\"http://www.youtube.com/1kslQ9P1160\">\nvideo</a>"
  },
  {
    "original_filename": "0857_toggle_button",
    "header_text": "Ab in den Hafen by Allerdings",
    "local_header_href": "#ab-in-den-hafen-by-allerdings",
    "chunk_text": "<h4>Ab in den Hafen by Allerdings</h4><p>Completely unrelated to Revit and its API, but closely related to me, my son Christopher aka\n\n<a href=\"http://soundcloud.com/allerdings\">\nAllerdings</a> has\n\nbeen composing and publishing music on SoundCloud for some time now.\n\n<p>Here is his most recent oevre,\n\n<a href=\"http://soundcloud.com/allerdings/ab-in-den-hafen\">\nAb in den Hafen</a>:</p>\n<iframe frameborder=\"no\" height=\"166\" scrolling=\"no\" src=\"http://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F66345836&amp;show_artwork=true\" width=\"450\"></iframe>\n<p>Enjoy.</p>\n<a name=\"14\"></a>\n<h4>AUGI Wish List</h4>\n<p>Another cool and important thing, albeit more administrative, is the\n\n<a href=\"http://www.augi.com/wishlist\">\nAUGI wish list</a> providing\n\na unified independent voice back to Autodesk on how to improve its products.</p>\n<p>Please <a href=\"http://www.augi.com/wishlist/vote-wishes\">vote now</a> for your most important wish.\n</p></p>"
  },
  {
    "original_filename": "0857_toggle_button",
    "header_text": "AUGI Wish List",
    "local_header_href": "#augi-wish-list",
    "chunk_text": "<h4>AUGI Wish List</h4><p>Another cool and important thing, albeit more administrative, is the\n\n<a href=\"http://www.augi.com/wishlist\">\nAUGI wish list</a> providing\n\na unified independent voice back to Autodesk on how to improve its products.</p><p>Please <a href=\"http://www.augi.com/wishlist/vote-wishes\">vote now</a> for your most important wish.\n</p>"
  }
]