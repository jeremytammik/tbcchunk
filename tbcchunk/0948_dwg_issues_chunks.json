[
  {
    "original_filename": "0948_dwg_issues",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0948_dwg_issues",
    "header_text": "DWG Issues and Various Other Updates",
    "local_header_href": "#dwg-issues-and-various-other-updates",
    "chunk_text": "<h3>DWG Issues and Various Other Updates</h3><p>One of the highlights mentioned in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/revit-2014-api-and-room-plan-view-boundary-polygon-loops.html#2\">\noverview of the Revit 2014 API</a> is\n\nthe FreeForm element API that enables modification of solid geometry imported from DWG or SAT.\n\n<p>Several other new DWG and DXF related features include import of DXF markup, import and link of SAT and SketchUp, and access to the DWG, IFC and DGN layer, linetype, lineweight, font and pattern tables.\n\n<p>One result of these enhancements is the possibility to access 3D coordinates in DWG import for the first time.</p>\n<p>Besides looking at that, I'll also point out a few other issues further down:</p>\n<ul>\n<li><a href=\"#2\">Differentiate Label and Text in DWG export</a></li>\n<li><a href=\"#3\">Element Ids in extensible storage</a></li>\n<li><a href=\"#4\">All-zero language codes in the Revit product GUID</a></li>\n<li><a href=\"#5\">Another dockable panel sample</a></li>\n</ul>\n<a name=\"1\"></a>\n<h4>Access to 3D Coordinates in DWG Import</h4>\n<p>One DWG import aspect that has often been requested by developers in the past is the ability to explode 3D DWG files and obtain the resulting coordinates in the Revit project.</p>\n<p>Revit 2014 families now provide the ability to explode and retain such 3D geometry.\n\n<!--\n<p>The wiki mentions this under\n\n<a href=\"\">\n...</a>\n</p>\n-->\n<p>Daniel Gijsbers discusses making use of this functionality to\n\n<a href=\"http://danielgijsbers.blogspot.de/2013/04/revit-2014-3d-dwg-in-families.html\">\ncorrelate Civil 3D alignments with Revit Structure</a>.\n\n<p>In Revit 2013, one alternative way to achieve this was to implement an AutoCAD add-in that analyses the geometry and exports the 3D coordinate data.\nA separate Revit add-in could read the coordinate data and correlate it with the Revit geometry.\n\n<a name=\"2\"></a>\n<h4>Differentiate Label and Text in DWG Export</h4>\n<p>On a related topic, how can I differentiate between Revit text and label elements after they have been exported to DWG?</p>\n<p>Revit Export to DWG results in Labels becoming Text rather than Attributes, as most users might prefer.\n\n<p>It would be interesting to have some flag or embedded information in the exported text that could be used in an AutoCAD application to post-process the information received from Revit and restore the attribute information.\n\n<p>Happily, the exported Labels have Extended Entity Data like this attached:</p>\n<pre class=\"prettify\">\n  TypedValue 0 - type: 1001, value: REVIT\n  TypedValue 1 - type: 1002, value: {\n  TypedValue 2 - type: 1070, value: 1\n  TypedValue 3 - type: 1000, value: 245287\n  TypedValue 4 - type: 1002, value: }\n  TypedValue 5 - type: 1002, value: {\n  TypedValue 6 - type: 1070, value: 5\n  TypedValue 7 - type: 1000, value: 243658\n  TypedValue 8 - type: 1002, value: }\n  TypedValue 9 - type: 1002, value: {\n  TypedValue 10 - type: 1070, value: 2\n  TypedValue 11 - type: 1000, value: -2000280\n  TypedValue 12 - type: 1002, value: }\n</pre>\n<p>The xdata on Text elements, on the other hand, look like this instead:</p>\n<pre class=\"prettify\">\n  TypedValue 0 - type: 1001, value: REVIT\n  TypedValue 1 - type: 1002, value: {\n  TypedValue 2 - type: 1070, value: 1\n  TypedValue 3 - type: 1000, value: 261323\n  TypedValue 4 - type: 1002, value: }\n  TypedValue 5 - type: 1002, value: {\n  TypedValue 6 - type: 1070, value: 5\n  TypedValue 7 - type: 1000, value: 209618\n  TypedValue 8 - type: 1002, value: }\n  TypedValue 9 - type: 1002, value: {\n  TypedValue 10 - type: 1070, value: 2\n  TypedValue 11 - type: 1000, value: -2000300\n  TypedValue 12 - type: 1002, value: }\n</pre>\n<p>The differing TypedValue 11 is consistently -2000300 for a text and -2000280 for a label element.\n\n<p>What does this mean?</p>\n<p>Well, is actually quite easy.</p>\n<p>On seeing these large negative numbers in this specific range, an experienced Revit developer will quickly suspect built-in category or parameter enumeration values.</p>\n<p>You can check what they actually represent in the Visual Studio debugger, by jumping to the definition of these enumerations and searching for the specific values.\n\n<p>Looking back at an ancient blog post on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/dwg-and-dxf-export-xdata-specification.html\">DWG and DXF export Xdata specification</a>\n\nconfirms that these numbers do indeed represent the built-in category of the source element and thus can be used to distinguish the two.</p>\n<p>Many thanks to Dale Bartlett, CAD-BIM System Manager at\n\n<a href=\"http://www.atkins-me.com\">Atkins (Oman)</a>, for suggesting this topic.</p>\n<p>Dale adds:</p>\n<p>It will be interesting to see if this generates any comments.</p>\n<p>As far as the AutoCAD geometry export, the purpose was to build a 3D Space Frame from an engineer’s analysis drawing.\nI did in fact write an XML file from AutoCAD of the geometry and imported it into Revit to build the frame.</p>\n<p>It took an hour to build 20,000 elements, which was about a year less than doing it manually!</p>\n<p>I’ll revise it with 2014 to make it a one-step-inside-Revit process.</p>\n<!-- 08384534 [Storage of ElementId] -->\n<a name=\"3\"></a>\n<h4>Element Ids in Extensible Storage</h4>\n<p><strong>Question:</strong> I need to store ElementId data using schemas within my Revit add-in.</p>\n<p>However, the API documentation states that \"ids are subject to change during an Autodesk Revit session and as such should not be retained and used across repeated calls to external commands.\"</p>\n<p>My add-in will be used in a worksharing environment.\nMy testing shows that if I try to save the integer value of an element id, and it changes, my saved id value will be invalid.\nHowever, if I store the actual ElementId in a schema I do not have this problem.</p>\n<p>Is saving the ElementId using a Schema safe?\nIf not, do you have any suggestions or examples of how to safely store an identifier to elements in a schema?</p>\n<p><strong>Answer:</strong> Yes, it is completely safe to store ElementId data in extensible storage for the purposes you describe.\n\n<p>The statement you quote refers to the fact that the integer value of an element id will change between sessions.\nBasically, you can think of it as a pointer.\nWhen stored as an element id in extensible storage, the actual links between the associated elements are stored, and the resulting integer values are recalculated from scratch in every new session, maintaining the links intact.\nThe integer value of an element id may be changed by worksharing updates as well, and these changes are also automatically handled for element ids stored in extensible storage, so it is perfectly safe to save them there.</p>\n<a name=\"4\"></a>\n<h4>All-zero Language Codes in the Revit Product GUID</h4>\n<p>Watch out for all-zero language code identifiers in the Revit Product GUID due to the new Multiple Language Interface, or MUI, used in Revit 2014.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/perpetual-guid-algorithm-and-revit-2014-product-guids.html#5\">\nRevit Product 2014 GUID addendum</a>.\n\n<a name=\"5\"></a>\n<h4>Another Dockable Panel Sample</h4>\n<p>Guy Robinson published another dockable dialogue sample which does not require a command to be registered.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/a-simpler-dockable-panel-sample.html#2\">\nsimpler dockable panel addendum</a>.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0948_dwg_issues",
    "header_text": "Access to 3D Coordinates in DWG Import",
    "local_header_href": "#access-to-3d-coordinates-in-dwg-import",
    "chunk_text": "<h4>Access to 3D Coordinates in DWG Import</h4><p>One DWG import aspect that has often been requested by developers in the past is the ability to explode 3D DWG files and obtain the resulting coordinates in the Revit project.</p><p>Revit 2014 families now provide the ability to explode and retain such 3D geometry.\n\n<!--\n<p>The wiki mentions this under\n\n<a href=\"\">\n...</a>\n</p>\n-->\n<p>Daniel Gijsbers discusses making use of this functionality to\n\n<a href=\"http://danielgijsbers.blogspot.de/2013/04/revit-2014-3d-dwg-in-families.html\">\ncorrelate Civil 3D alignments with Revit Structure</a>.\n\n<p>In Revit 2013, one alternative way to achieve this was to implement an AutoCAD add-in that analyses the geometry and exports the 3D coordinate data.\nA separate Revit add-in could read the coordinate data and correlate it with the Revit geometry.\n\n<a name=\"2\"></a>\n<h4>Differentiate Label and Text in DWG Export</h4>\n<p>On a related topic, how can I differentiate between Revit text and label elements after they have been exported to DWG?</p>\n<p>Revit Export to DWG results in Labels becoming Text rather than Attributes, as most users might prefer.\n\n<p>It would be interesting to have some flag or embedded information in the exported text that could be used in an AutoCAD application to post-process the information received from Revit and restore the attribute information.\n\n<p>Happily, the exported Labels have Extended Entity Data like this attached:</p>\n<pre class=\"prettify\">\n  TypedValue 0 - type: 1001, value: REVIT\n  TypedValue 1 - type: 1002, value: {\n  TypedValue 2 - type: 1070, value: 1\n  TypedValue 3 - type: 1000, value: 245287\n  TypedValue 4 - type: 1002, value: }\n  TypedValue 5 - type: 1002, value: {\n  TypedValue 6 - type: 1070, value: 5\n  TypedValue 7 - type: 1000, value: 243658\n  TypedValue 8 - type: 1002, value: }\n  TypedValue 9 - type: 1002, value: {\n  TypedValue 10 - type: 1070, value: 2\n  TypedValue 11 - type: 1000, value: -2000280\n  TypedValue 12 - type: 1002, value: }\n</pre>\n<p>The xdata on Text elements, on the other hand, look like this instead:</p>\n<pre class=\"prettify\">\n  TypedValue 0 - type: 1001, value: REVIT\n  TypedValue 1 - type: 1002, value: {\n  TypedValue 2 - type: 1070, value: 1\n  TypedValue 3 - type: 1000, value: 261323\n  TypedValue 4 - type: 1002, value: }\n  TypedValue 5 - type: 1002, value: {\n  TypedValue 6 - type: 1070, value: 5\n  TypedValue 7 - type: 1000, value: 209618\n  TypedValue 8 - type: 1002, value: }\n  TypedValue 9 - type: 1002, value: {\n  TypedValue 10 - type: 1070, value: 2\n  TypedValue 11 - type: 1000, value: -2000300\n  TypedValue 12 - type: 1002, value: }\n</pre>\n<p>The differing TypedValue 11 is consistently -2000300 for a text and -2000280 for a label element.\n\n<p>What does this mean?</p>\n<p>Well, is actually quite easy.</p>\n<p>On seeing these large negative numbers in this specific range, an experienced Revit developer will quickly suspect built-in category or parameter enumeration values.</p>\n<p>You can check what they actually represent in the Visual Studio debugger, by jumping to the definition of these enumerations and searching for the specific values.\n\n<p>Looking back at an ancient blog post on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/dwg-and-dxf-export-xdata-specification.html\">DWG and DXF export Xdata specification</a>\n\nconfirms that these numbers do indeed represent the built-in category of the source element and thus can be used to distinguish the two.</p>\n<p>Many thanks to Dale Bartlett, CAD-BIM System Manager at\n\n<a href=\"http://www.atkins-me.com\">Atkins (Oman)</a>, for suggesting this topic.</p>\n<p>Dale adds:</p>\n<p>It will be interesting to see if this generates any comments.</p>\n<p>As far as the AutoCAD geometry export, the purpose was to build a 3D Space Frame from an engineer’s analysis drawing.\nI did in fact write an XML file from AutoCAD of the geometry and imported it into Revit to build the frame.</p>\n<p>It took an hour to build 20,000 elements, which was about a year less than doing it manually!</p>\n<p>I’ll revise it with 2014 to make it a one-step-inside-Revit process.</p>\n<!-- 08384534 [Storage of ElementId] -->\n<a name=\"3\"></a>\n<h4>Element Ids in Extensible Storage</h4>\n<p><strong>Question:</strong> I need to store ElementId data using schemas within my Revit add-in.</p>\n<p>However, the API documentation states that \"ids are subject to change during an Autodesk Revit session and as such should not be retained and used across repeated calls to external commands.\"</p>\n<p>My add-in will be used in a worksharing environment.\nMy testing shows that if I try to save the integer value of an element id, and it changes, my saved id value will be invalid.\nHowever, if I store the actual ElementId in a schema I do not have this problem.</p>\n<p>Is saving the ElementId using a Schema safe?\nIf not, do you have any suggestions or examples of how to safely store an identifier to elements in a schema?</p>\n<p><strong>Answer:</strong> Yes, it is completely safe to store ElementId data in extensible storage for the purposes you describe.\n\n<p>The statement you quote refers to the fact that the integer value of an element id will change between sessions.\nBasically, you can think of it as a pointer.\nWhen stored as an element id in extensible storage, the actual links between the associated elements are stored, and the resulting integer values are recalculated from scratch in every new session, maintaining the links intact.\nThe integer value of an element id may be changed by worksharing updates as well, and these changes are also automatically handled for element ids stored in extensible storage, so it is perfectly safe to save them there.</p>\n<a name=\"4\"></a>\n<h4>All-zero Language Codes in the Revit Product GUID</h4>\n<p>Watch out for all-zero language code identifiers in the Revit Product GUID due to the new Multiple Language Interface, or MUI, used in Revit 2014.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/perpetual-guid-algorithm-and-revit-2014-product-guids.html#5\">\nRevit Product 2014 GUID addendum</a>.\n\n<a name=\"5\"></a>\n<h4>Another Dockable Panel Sample</h4>\n<p>Guy Robinson published another dockable dialogue sample which does not require a command to be registered.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/a-simpler-dockable-panel-sample.html#2\">\nsimpler dockable panel addendum</a>.\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0948_dwg_issues",
    "header_text": "Differentiate Label and Text in DWG Export",
    "local_header_href": "#differentiate-label-and-text-in-dwg-export",
    "chunk_text": "<h4>Differentiate Label and Text in DWG Export</h4><p>On a related topic, how can I differentiate between Revit text and label elements after they have been exported to DWG?</p><p>Revit Export to DWG results in Labels becoming Text rather than Attributes, as most users might prefer.\n\n<p>It would be interesting to have some flag or embedded information in the exported text that could be used in an AutoCAD application to post-process the information received from Revit and restore the attribute information.\n\n<p>Happily, the exported Labels have Extended Entity Data like this attached:</p>\n<pre class=\"prettify\">\n  TypedValue 0 - type: 1001, value: REVIT\n  TypedValue 1 - type: 1002, value: {\n  TypedValue 2 - type: 1070, value: 1\n  TypedValue 3 - type: 1000, value: 245287\n  TypedValue 4 - type: 1002, value: }\n  TypedValue 5 - type: 1002, value: {\n  TypedValue 6 - type: 1070, value: 5\n  TypedValue 7 - type: 1000, value: 243658\n  TypedValue 8 - type: 1002, value: }\n  TypedValue 9 - type: 1002, value: {\n  TypedValue 10 - type: 1070, value: 2\n  TypedValue 11 - type: 1000, value: -2000280\n  TypedValue 12 - type: 1002, value: }\n</pre>\n<p>The xdata on Text elements, on the other hand, look like this instead:</p>\n<pre class=\"prettify\">\n  TypedValue 0 - type: 1001, value: REVIT\n  TypedValue 1 - type: 1002, value: {\n  TypedValue 2 - type: 1070, value: 1\n  TypedValue 3 - type: 1000, value: 261323\n  TypedValue 4 - type: 1002, value: }\n  TypedValue 5 - type: 1002, value: {\n  TypedValue 6 - type: 1070, value: 5\n  TypedValue 7 - type: 1000, value: 209618\n  TypedValue 8 - type: 1002, value: }\n  TypedValue 9 - type: 1002, value: {\n  TypedValue 10 - type: 1070, value: 2\n  TypedValue 11 - type: 1000, value: -2000300\n  TypedValue 12 - type: 1002, value: }\n</pre>\n<p>The differing TypedValue 11 is consistently -2000300 for a text and -2000280 for a label element.\n\n<p>What does this mean?</p>\n<p>Well, is actually quite easy.</p>\n<p>On seeing these large negative numbers in this specific range, an experienced Revit developer will quickly suspect built-in category or parameter enumeration values.</p>\n<p>You can check what they actually represent in the Visual Studio debugger, by jumping to the definition of these enumerations and searching for the specific values.\n\n<p>Looking back at an ancient blog post on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/dwg-and-dxf-export-xdata-specification.html\">DWG and DXF export Xdata specification</a>\n\nconfirms that these numbers do indeed represent the built-in category of the source element and thus can be used to distinguish the two.</p>\n<p>Many thanks to Dale Bartlett, CAD-BIM System Manager at\n\n<a href=\"http://www.atkins-me.com\">Atkins (Oman)</a>, for suggesting this topic.</p>\n<p>Dale adds:</p>\n<p>It will be interesting to see if this generates any comments.</p>\n<p>As far as the AutoCAD geometry export, the purpose was to build a 3D Space Frame from an engineer’s analysis drawing.\nI did in fact write an XML file from AutoCAD of the geometry and imported it into Revit to build the frame.</p>\n<p>It took an hour to build 20,000 elements, which was about a year less than doing it manually!</p>\n<p>I’ll revise it with 2014 to make it a one-step-inside-Revit process.</p>\n<!-- 08384534 [Storage of ElementId] -->\n<a name=\"3\"></a>\n<h4>Element Ids in Extensible Storage</h4>\n<p><strong>Question:</strong> I need to store ElementId data using schemas within my Revit add-in.</p>\n<p>However, the API documentation states that \"ids are subject to change during an Autodesk Revit session and as such should not be retained and used across repeated calls to external commands.\"</p>\n<p>My add-in will be used in a worksharing environment.\nMy testing shows that if I try to save the integer value of an element id, and it changes, my saved id value will be invalid.\nHowever, if I store the actual ElementId in a schema I do not have this problem.</p>\n<p>Is saving the ElementId using a Schema safe?\nIf not, do you have any suggestions or examples of how to safely store an identifier to elements in a schema?</p>\n<p><strong>Answer:</strong> Yes, it is completely safe to store ElementId data in extensible storage for the purposes you describe.\n\n<p>The statement you quote refers to the fact that the integer value of an element id will change between sessions.\nBasically, you can think of it as a pointer.\nWhen stored as an element id in extensible storage, the actual links between the associated elements are stored, and the resulting integer values are recalculated from scratch in every new session, maintaining the links intact.\nThe integer value of an element id may be changed by worksharing updates as well, and these changes are also automatically handled for element ids stored in extensible storage, so it is perfectly safe to save them there.</p>\n<a name=\"4\"></a>\n<h4>All-zero Language Codes in the Revit Product GUID</h4>\n<p>Watch out for all-zero language code identifiers in the Revit Product GUID due to the new Multiple Language Interface, or MUI, used in Revit 2014.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/perpetual-guid-algorithm-and-revit-2014-product-guids.html#5\">\nRevit Product 2014 GUID addendum</a>.\n\n<a name=\"5\"></a>\n<h4>Another Dockable Panel Sample</h4>\n<p>Guy Robinson published another dockable dialogue sample which does not require a command to be registered.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/a-simpler-dockable-panel-sample.html#2\">\nsimpler dockable panel addendum</a>.\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0948_dwg_issues",
    "header_text": "Element Ids in Extensible Storage",
    "local_header_href": "#element-ids-in-extensible-storage",
    "chunk_text": "<h4>Element Ids in Extensible Storage</h4><p><strong>Question:</strong> I need to store ElementId data using schemas within my Revit add-in.</p><p>However, the API documentation states that \"ids are subject to change during an Autodesk Revit session and as such should not be retained and used across repeated calls to external commands.\"</p><p>My add-in will be used in a worksharing environment.\nMy testing shows that if I try to save the integer value of an element id, and it changes, my saved id value will be invalid.\nHowever, if I store the actual ElementId in a schema I do not have this problem.</p><p>Is saving the ElementId using a Schema safe?\nIf not, do you have any suggestions or examples of how to safely store an identifier to elements in a schema?</p><p><strong>Answer:</strong> Yes, it is completely safe to store ElementId data in extensible storage for the purposes you describe.\n\n<p>The statement you quote refers to the fact that the integer value of an element id will change between sessions.\nBasically, you can think of it as a pointer.\nWhen stored as an element id in extensible storage, the actual links between the associated elements are stored, and the resulting integer values are recalculated from scratch in every new session, maintaining the links intact.\nThe integer value of an element id may be changed by worksharing updates as well, and these changes are also automatically handled for element ids stored in extensible storage, so it is perfectly safe to save them there.</p>\n<a name=\"4\"></a>\n<h4>All-zero Language Codes in the Revit Product GUID</h4>\n<p>Watch out for all-zero language code identifiers in the Revit Product GUID due to the new Multiple Language Interface, or MUI, used in Revit 2014.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/perpetual-guid-algorithm-and-revit-2014-product-guids.html#5\">\nRevit Product 2014 GUID addendum</a>.\n\n<a name=\"5\"></a>\n<h4>Another Dockable Panel Sample</h4>\n<p>Guy Robinson published another dockable dialogue sample which does not require a command to be registered.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/a-simpler-dockable-panel-sample.html#2\">\nsimpler dockable panel addendum</a>.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0948_dwg_issues",
    "header_text": "All-zero Language Codes in the Revit Product GUID",
    "local_header_href": "#all-zero-language-codes-in-the-revit-product-guid",
    "chunk_text": "<h4>All-zero Language Codes in the Revit Product GUID</h4><p>Watch out for all-zero language code identifiers in the Revit Product GUID due to the new Multiple Language Interface, or MUI, used in Revit 2014.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/perpetual-guid-algorithm-and-revit-2014-product-guids.html#5\">\nRevit Product 2014 GUID addendum</a>.\n\n<a name=\"5\"></a>\n<h4>Another Dockable Panel Sample</h4>\n<p>Guy Robinson published another dockable dialogue sample which does not require a command to be registered.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/a-simpler-dockable-panel-sample.html#2\">\nsimpler dockable panel addendum</a>.\n</p></p></p></p>"
  },
  {
    "original_filename": "0948_dwg_issues",
    "header_text": "Another Dockable Panel Sample",
    "local_header_href": "#another-dockable-panel-sample",
    "chunk_text": "<h4>Another Dockable Panel Sample</h4><p>Guy Robinson published another dockable dialogue sample which does not require a command to be registered.\n\n<p>For details, please refer to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/a-simpler-dockable-panel-sample.html#2\">\nsimpler dockable panel addendum</a>.\n</p></p>"
  }
]