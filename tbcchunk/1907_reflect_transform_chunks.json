[
  {
    "original_filename": "1907_reflect_transform",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- a careful analysis by rpthomnas to clarify the effects of rotation and reflection achieved by mirroring and flipping on BIM element transform\n  GetTransform() does not include reflection into the transformation\n  https://forums.autodesk.com/t5/revit-api-forum/gettransform-does-not-include-reflection-into-the-transformation/m-p/10334547\n  GetTransform_ignores_mirror_1.png 1401\n  GetTransform_ignores_mirror_2.png 216\n  GetTransform_ignores_mirror_3.png 1144\n  \n- Document.MakeTransientElements\n  https://forums.autodesk.com/t5/revit-api-forum/document-maketransientelements/m-p/10333812\n  hacky and unsupported but fun to hack\n  13903607 [Document.MakeTransientElements]\n  https://forums.autodesk.com/t5/revit-api-forum/document-maketransientelements/m-p/7774471\n\n- shared versus non-shared parameter creation\n  Create Project Parameter (not shared parameter)\n  https://forums.autodesk.com/t5/revit-api-forum/create-project-parameter-not-shared-parameter/m-p/10335503\n  12125641 [Create Project Parameter(not shared parameter)]\n  http://forums.autodesk.com/t5/revit-api/create-project-parameter-not-shared-parameter/m-p/5150182\n\n- Design Automation for Revit 2022 now support exporting to PDF directly\n  https://forge.autodesk.com/blog/design-automation-revit-2022-now-support-exporting-pdf-directly\n  by Zhong Wu\n\ntwitter:\n\nadd #thebuildingcoder\n\nFlip and mirror reflected in the element transform, transient elements, temporary incanvas graphics, shared versus non-shared parameter creation and direct PDF export in DA4R and the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://autode.sk/reflectiontransform\n\nHow are reflections like flip and mirror reflected in the BIM element transform?\n&ndash; Transient elements hack\n&ndash; Temporary incanvas graphics API video\n&ndash; Shared versus non-shared parameter creation\n&ndash; Direct PDF export and DA4R...\n\nlinkedin:\n\nFlip and mirror reflected in the element transform, transient elements, temporary incanvas graphics, shared versus non-shared parameter creation and direct PDF export in DA4R and the #RevitAPI \n\nhttp://autode.sk/reflectiontransform\n\n- How are reflections like flip and mirror reflected in the BIM element transform?\n- Transient elements hack\n- Temporary incanvas graphics API video\n- Shared versus non-shared parameter creation\n- Direct PDF export and DA4R...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1907_reflect_transform",
    "header_text": "Flip, Mirror, Transform and Transient Graphics",
    "local_header_href": "#flip-mirror-transform-and-transient-graphics",
    "chunk_text": "### Flip, Mirror, Transform and Transient Graphics\n\nRichard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas\ncontinues providing numerous invaluable solutions and explanations in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160):\n\n- [Flip, mirror and transform](#2)\n    - [Motivation and chilling example](#2.1)\n- [Transient elements hack](#3)\n- [Temporary incanvas graphics API video](#4)\n- [Shared versus non-shared parameter creation](#5)\n- [Direct PDF export and DA4R](#6)\n\nBefore diving into these topics, a nice quote of the week from Quincy Larson's [freecodecamp](https://www.freecodecamp.org) newsletter:\n\n<blockquote>\n<p><i>There are only two kinds of programming languages: the ones people complain about and the ones nobody uses.</i></p>\n<p style=\"text-align: right; font-style: italic\">&ndash; Bjarne Stroustrup, creator of C++</p>\n</blockquote>"
  },
  {
    "original_filename": "1907_reflect_transform",
    "header_text": "Flip, Mirror and Transform",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Flip, Mirror and Transform\n\nA careful analysis by Richard in the thread \non [`GetTransform` does not include reflection into the transformation](https://forums.autodesk.com/t5/revit-api-forum/gettransform-does-not-include-reflection-into-the-transformation/m-p/10334547) clarifies\nthe effects of rotation and reflection achieved by mirroring and flipping on the BIM element transform:\n\n**Question:** The \n[`Instance.GetTransform` method](https://www.revitapidocs.com/2015/50aa275d-031e-ce19-9cfd-18a7a341ed19.htm)\ndoes not include reflection, e.g.,\nthe [family mirrored property](https://www.revitapidocs.com/2015/20ab2f32-e3ca-8173-aac3-a03e998fd0ab.htm) into\nits transformation.\nBelow a family instance which is mirrored and outputs the equivalent `GetTansform` values:\n\n<center>\n<img src=\"img/GetTransform_ignores_mirror_1.png\" alt=\"GetTransform ignores reflection\" title=\"GetTransform ignores reflection\" width=\"800\"/> <!-- 1401 -->\n</center>\n\nHere is the python code:\n\n<pre class=\"prettyprint\">\nimport sys\nimport clr\nclr.AddReference('ProtoGeometry')\nfrom Autodesk.DesignScript.Geometry import *\ndata= UnwrapElement(IN[0])\n\noutput=[]\nfor i in data:\n\toutput.append(i.Location.Point)\n\toutput.append(i.GetTransform().BasisX)\n\toutput.append(i.GetTransform().BasisY)\n\toutput.append(i.GetTransform().BasisZ)\n\toutput.append(\"\")\nOUT = output\n</pre>\n\nThat is expected and intentional in Revit.\n\nHowever, from a mathematical perspective, it should not be expected.\nThe [Wikipedia article on Transformation matrix](https://en.wikipedia.org/wiki/Transformation_matrix) shows\nclearly that an element that is reflected around the `X` axis should have a different transformation matrix:\n\n<center>\n<img src=\"img/GetTransform_ignores_mirror_2.png\" alt=\"Transformation with reflection\" title=\"Transformation with reflection\" width=\"216\"/> <!-- 216 -->\n</center>\n\nCan you please share any explanation and why this intentional for Revit? \n\n**Answer:** I found results that indicate Revit uses a combination of reflection and rotation for the various mirror and flip operations:\n\n<center>\n<img src=\"img/GetTransform_ignores_mirror_3.png\" alt=\"Flip and mirror\" title=\"Flip and mirror\" width=\"800\"/> <!-- 1144 -->\n</center>\n\nOne thing that stands out is the difference between horizontal double flip control and mirror command about same axis (noted red).\nThese operations are almost identical apart from the horizontal one that results in opposite facing and handed state.\nGraphically, it appears the same, but not according to facing/handed orientation.\n\nIt has been noted previously that single flip control is more like rotating rather than mirroring (it doesn't result in reflected geometry).\nWe see by transform that it is reflected but facing/handed state is also set to true.\n\nGenerally, I think of the facing/handed state as being an internal to the family state, i.e., the internal geometry may be reflected but the family itself isn't (unless it is by transform).\n\nYou probably need to look at flip state/rotation and transform to get a definitive idea of the situation.\nThese controls long ago I believe were introduced for doors, which side they are hung and swing direction.\nAs they started being used for other things, the ambiguities crept in, i.e., double negative (same ultimate representation but two definitions for it).\n\n#####<a name=\"2.1\"></a> Motivation and Chilling Example\n\nI think everyone has probably fallen foul of these geometric aspects at some point.\nI recall we had a pile cap with four piles and we marked one of the corners so that we could identify the edges numerically in a clockwise order around this square cap (which had double symmetry).\nThe idea was that we would have a table of parameters which noted the edge distances (edge of cap to edge of pile).\nWhat we didn't count on was the fact sometimes people mirrored these caps, so although the corner marker flipped from one side to the other as expected the numbering of edges was no longer clockwise.\nSo, numbered edge distances in table didn't correspond with what was counted clockwise from corner marker.\n \nThe question is why would someone mirror a symmetrical object?\nThe answer was that this cap was one of many and there was a line of symmetry across the site.\nTherefore, they had filled half the site with pile caps and mirrored them for completion (perfectly acceptable).\nAn important lesson from this is that the flip state of the symmetrical object was a hidden feature with subtle implications (when identifying parametric relationships).\n\nMany thanks to Richard for this very helpful explanation!"
  },
  {
    "original_filename": "1907_reflect_transform",
    "header_text": "Transient Elements Hack",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Transient Elements Hack\n\nBack in 2018, the development team clearly stated that the\ninteresting-looking [`Document.MakeTransientElements` method](https://www.revitapidocs.com/2021.1/0decdddc-ae4a-d46d-d141-9d37e7973e05.htm)\nis 'half-finished' work that should not have been exposed to the public API and will probably be removed again.\n\nIt has not been removed yet, though, so Moustafa Khalil and Richard discussed a hacky approach to make it do something at all in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [`Document.MakeTransientElements`](https://forums.autodesk.com/t5/revit-api-forum/document-maketransientelements/m-p/7774471),\nin case you are interested in taking a further look yourself.\n\nJust for the sake of completeness, some other officially supported approaches to display non-BIM-geometry\ninclude [AVF](https://thebuildingcoder.typepad.com/blog/avf),\nDirectContext3D and, new in Revit 2022, \nthe [temporary incanvas graphics API](#4) (below).\n\nHere are some AVF samples:\n \n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/using-avf-to-display-intersections-and-highlight-rooms.html\">AVF Displays Intersections and Highlights Rooms</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/sphere-creation-for-avf-and-filtering.html\">Sphere Creation for AVF and Filtering</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/apollonian-packing-of-spheres-via-web-service-and-avf.html\">Apollonian Sphere Packing via Web Service and AVF</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2017/03/rvtfader-avf-ray-tracing-and-signal-attenuation.html\">RvtFader, AVF, Ray Tracing and Signal Attenuation</a></li>\n</ul>\n\nI have not explored the direct context 3D functionality myself yet, but here are some bits and pieces on that:\n \n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2017/03/revitlookup-enhancements-future-revit-and-other-api-news.html\">RevitLookup and DevDays Online API News</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2017/04/whats-new-in-the-revit-2018-api.html\">What's New in the Revit 2018 API</a>\n&rarr; <a href=\"https://thebuildingcoder.typepad.com/blog/2017/04/whats-new-in-the-revit-2018-api.html#3.26\">DirectContext3D for display of externally managed 3D graphics in Revit</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2017/05/revit-2017-and-2018-sdk-samples.html\">Revit 2017 and 2018 SDK Samples</a>\n&rarr; <a href=\"https://thebuildingcoder.typepad.com/blog/2017/05/revit-2017-and-2018-sdk-samples.html#4.2\">DuplicateGraphics</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2021/01/transient-graphics-humane-ai-basic-income-and-lockdown.html#2\">Transient Graphics</a></li>\n</ul>"
  },
  {
    "original_filename": "1907_reflect_transform",
    "header_text": "Temporary InCanvas Graphics API Video",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Temporary InCanvas Graphics API Video\n\nBobby the [3rd Dimension Developer](https://www.youtube.com/channel/UCPCZ59KhJ4XrdkHgzmhZXKA/about) shared a video tutorial on\nmaking use of\nthe new Revit 2022 [temporary in-canvas graphics](https://thebuildingcoder.typepad.com/blog/2021/04/whats-new-in-the-revit-2022-api.html#4.2.8.1) functionality in his thread\non [temporary incanvas graphics image colors](https://forums.autodesk.com/t5/revit-api-forum/temporary-incanvas-graphics-image-colors/m-p/10318210)\n\n> I created a [video on the awesome new Temporary InCanvas Graphics API](https://youtu.be/ekLz54hLcHc).\nThat raises a question on the image colours.\nAs you can see, they are... off...\nWhat are the rules the images, and colours, we can use in this feature?\n...\n\n<center>\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/ekLz54hLcHc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</center>\n\nMany thanks to Bobby for this nice introduction!\n\nUnfortunately, his question on the colour mapping currently still remains unresolved."
  },
  {
    "original_filename": "1907_reflect_transform",
    "header_text": "Shared versus Non-Shared Parameter Creation",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Shared versus Non-Shared Parameter Creation\n\nFinally, some further useful clarification by Richard on shared versus non-shared parameters, their use and creation in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [creating project parameter (not shared parameter)](https://forums.autodesk.com/t5/revit-api-forum/create-project-parameter-not-shared-parameter/m-p/10335503)."
  },
  {
    "original_filename": "1907_reflect_transform",
    "header_text": "Direct PDF Export and DA4R",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Direct PDF Export and DA4R\n\nThe Revit 2022 API provides [built-in direct export to PDF functionality](https://thebuildingcoder.typepad.com/blog/2021/04/whats-new-in-the-revit-2022-api.html#4.2.3).\n\nThis new functionality obviously enables\nthe [Forge Design Automation API for Revit 2022 now to support exporting to PDF directly](https://forge.autodesk.com/blog/design-automation-revit-2022-now-support-exporting-pdf-directly),\nas documented by my colleague Zhong Wu.\n\nThanks to Zhong for testing and pointing this out."
  }
]