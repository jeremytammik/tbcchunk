[
  {
    "original_filename": "0806_setout_points",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0806_setout_points",
    "header_text": "Structural Concrete Setout Point Add-in",
    "local_header_href": "#structural-concrete-setout-point-add-in",
    "chunk_text": "<h3>Structural Concrete Setout Point Add-in</h3><p>I am back from my vacation now, having spent a wonderful relaxing time doing all kinds of things not related to the Revit API or computers at all, such as talking, walking, singing, playing music, painting, swimming, meditating, climbing, caving, canoeing and sharing time with friends...\n\n<p>Meanwhile, a whole bunch of interesting issues to share with you have been piling up, new ones keep pouring in, and I still have some long-standing pending posts to get around to as well.\n\n<!-- <p>After wading through all the stuff piled up during my absence, it is now my pleasure to finally resume blogging as well. -->\n<p>One important utility that I have been wanting to publish for months now is for the automatic placement and management of structural concrete setout points which I implemented together with Paul Hellawell of\n\n<a href=\"http://www.ghd.com\">\nGHD</a> at\n\nthe\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-devlab.html\">\nMelbourne DevLab</a>\n\nback in March, thus also finally answering\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html?cid=6a00e553e168978833017742ce536f970d#comment-6a00e553e168978833017742ce536f970d\">\nIshfak's request</a> for\n\nthe full Revit 2013 source code to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve real world concrete coordinates</a>.\n\n\n<p>It is a full-blown end-user-capable little application for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-devlab.html/#3\">\nautomatic creation of setout points</a> for\n\non-site location and construction of structural elements.\n\n<p>One of the most fascinating aspects of the implementation for me was the amount of choices that we were forced to make between implementing something ourselves programmatically versus discovering the proper way to use built-in Revit functionality to do it automatically for us instead with no work at all on our part.\n\n<p>For instance, we originally defined one single setout point marker type, and started implementing API functionality to select the main points and change their colour.\n\n<p>Happily, we soon found a much simpler solution which requires no programming at all: simply define two separate family types for the minor and major setout point markers with different colours, and let the user select which one to use through the standard Revit user interface.\nSeveral other equally important design decisions cropped up, demonstrating the importance of knowing the product well, which Paul luckily does.\n\n<p>They really highlighted the fact how important it is to know the user interface and best standard practices in depth before embarking on a serious programming project, however simple it may seem.\n\n<p>Let's start at the beginning, and reiterate the motivation for this undertaking:\n\n<p>Almost every construction professional has experienced the following kind of situation at some time in their career:\n\n<p>A large complex structure is constructed off-site.\nWhen assembled on site, it does not fit exactly.\nThe workers continue nonetheless and force it into place.\nThe error is discovered later and corrected using brute force and post adaption.\nOverall cost of exercise: days or weeks of delay and painful cost overruns.\n\n<p>This leads to the following important prophylactic task:\n\n<p><b>The Challenge:</b> Provide a way to find the real world coordinates of the corners of potential elements to be set out in the field, automatically extracting relevant setout points from the model.\nIn this example, we are dealing with concrete structural elements.\nIdeally, we would like to display these points in a Revit schedule, so that they can be formatted and placed on a drawing sheet.\nWe would like to then define which of the points should be used as main setout points and list them in a schedule, preferably numbered sequentially for readability.\n\n<p><b>In Practice:</b> Retrieved all the concrete corner point data via the API is not hard, and I presented the solution to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve real world concrete coordinates</a>\n\nseparately in the following three steps:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#2\">\nFiltering for structural concrete elements</a>.\n\n<li>Retrieving their corners, i.e. geometry traversal to\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#3\">\nretrieve unique vertices</a>.\n\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#4\">Converting from Revit model to real-world coordinates</a>.\n</li></li></li></ul>\n<p>However, transferring this information  directly into a schedule proved to be impossible.\nInstead we created a family definition containing shared parameters to hold the data required for scheduling.\nWe then place instances of the family at the points extracted from the geometry.\nThrough the API it is now possible to populate the parameters with the X, Y, Z coordinates extracted from the geometry, and add these values to the extracted project location, to convert them to real world coordinates.\n\n<p>Initially, we defined a setout point family with one single type in it.\nThis did not enable the ability to select which points to schedule as main setout points.\nFor this, we created two different family types, SetoutPoint_Major and SetoutPoint_Minor.\nThis allows two separate schedules to be created, one capturing all the points, the other only points defined as major points for use on a drawing sheet for setout.\n\n<p>The schedule listing all points is useful, e.g. for export to a CSV file and subsequent import into a surveying device such as a\n\n<a href=\"http://www.trimble.com\">\nTrimble</a>,\n\nallowing site set-out directly from the model.\n\n\n<p>The setout point tool extracts the X, Y, Z coordinates of all concrete edges.\nThe generated points can then be interactively marked as Major points (setout point) and renumbered sequentially to provide a schedule of key setout points.\nThe remaining point are schedules as well, e.g. to be saved as a comma delimitated file CSV file to be sent to surveying equipment for site setout.\n\n\n<a name=\"1\"></a>\n<h4>Usage</h4>\n<p>Ensure your project contains some elements whose structural material is set to concrete or precast concrete.\n\n<p>You can then click the Get Concrete Corners tool:</p>\n<center>\n<img alt=\"Mark all concrete element geometry vertices\" src=\"img/setout_points_1.png\"/>\n</center>\n<p>The tool automatically analyses al the concrete structural elements' geometry and placed setout point family instances representing a 3D pointer on all the concrete element corner vertices:\n\n<center>\n<img alt=\"Minor setout point\" src=\"img/setout_points_2.png\"/>\n</center>\n<p>The family is defined using the Generic Model family template.\nThe green indicators represent general setout points.\nYou can select the ones you want to change to main setout points, also known as major or key, by simply selecting them and swapping their type to SetoutPoint_Major:</p>\n<center>\n<img alt=\"Major setout point family type\" src=\"img/setout_points_3.png\"/>\n</center>\n<p>Major setout points are displayed in red instead of green:</p>\n<center>\n<img alt=\"Major setout point instance\" src=\"img/setout_points_4.png\"/>\n</center>\n<p>The sample project provided defines two schedules.\nOne of them is populated with all setout points, marking every corner of every piece of concrete:</p>\n<center>\n<img alt=\"Major setout point schedule in project browser\" src=\"img/setout_points_5.png\"/>\n</center>\n<p>The second schedule lists only the selected main or major setout points and their coordinates:</p>\n<center>\n<img alt=\"Major setout point schedule\" src=\"img/setout_points_6.png\"/>\n</center>\n<p>Once you have all your key setout points defined, a separate 'Renumber setout Points' external command renumbers them sequentially and adds a SOP (Set Out Point) prefix to their number to differentiate them from the minor points.\n\n<p>The renumbered schedule can now be used on a drawing sheet.\n\n<p>Many thanks to Paul for our initiating this project, his deep Revit knowledge and experience, all the support he provided during the Melbourne Revit API training, and the great evening we had together in Melbourne after the training!\n\n\n<a name=\"2\"></a>\n<h4>Implementation Details</h4>\n<p>I already pointed to the discussion of the main technical underpinnings for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieval of the concrete corners</a> above, i.e.\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#2\">Filtering for structural concrete elements</a>.\n<li>Retrieving their corners, i.e. geometry traversal to <a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#3\">retrieve unique vertices</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#4\">Converting from Revit model to real-world coordinates</a>.\n</li></li></li></ul>\n<p>Now let's look at some of the aspects of putting this functionality to use and wrapping it into a full-blown end-user application:\n\n<ul>\n<li><a href=\"#3\">External application and CmdData class</a>\n<li><a href=\"#4\">Shared parameters</a>\n<li><a href=\"#5\">Importance of product usage experience, content and best practices</a>\n<li><a href=\"#6\">Marking all geometry vertices</a>\n<li><a href=\"#7\">Major setout point renumbering</a>\n</li></li></li></li></li></ul>\n<a name=\"3\"></a>\n<h4>External Application and CmdData Class</h4>\n<p>The application defines two commands:\n\n<ul>\n<li><a href=\"#6\">CmdGeomVertices</a>: filter for all relevant concrete structural elements, analyse their geometry, create the setout point markers, and populate their shared parameters to be reflected in the predefined schedules.\n<li><a href=\"#7\">CmdRenumber</a>: renumber the main or major setout points consecutively.\n</li></li></ul>\n<p>They are presented in a custom ribbon panel defined by an external application.\n\n<p>In order to encapsulate all the information required to populate the ribbon panel push buttons, I define the following CmdData class defining the external command implementation class name, description and tool tip text:\n\n<pre class=\"code\">\n  <span class=\"blue\">class</span> <span class=\"teal\">CmdData</span>\n  {\n    <span class=\"blue\">public</span> CmdData(\n      <span class=\"blue\">string</span> name,\n      <span class=\"blue\">string</span> text,\n      <span class=\"blue\">string</span> tip )\n    {\n      Name = name;\n      Text = text;\n      Tip = tip;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Text { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Tip { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n</pre>\n<p>The two instances can be populated like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">CmdData</span>[] data = <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>[] {\n \n    <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>(\n      <span class=\"maroon\">\"GeomVertices\"</span>,\n      <span class=\"maroon\">\"Mark Concrete Corners\"</span>,\n      <span class=\"maroon\">\"Place a setout point marker on every concrete corner.\"</span> ),\n \n    <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>(\n      <span class=\"maroon\">\"Renumber\"</span>,\n      <span class=\"maroon\">\"Renumber major\"</span>,\n      <span class=\"maroon\">\"Renumber major setout points\"</span> )\n  };\n</pre>\n<p>The external application OnStartup method making use of this ends up very simple:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup(\n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">string</span> path = System.Reflection.<span class=\"teal\">Assembly</span>\n      .GetExecutingAssembly().Location;\n \n    <span class=\"green\">// Create ribbon panel</span>\n \n    <span class=\"teal\">RibbonPanel</span> p = a.CreateRibbonPanel( Caption );\n \n    <span class=\"green\">// Create buttons</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">PushButtonData</span>&gt; buttonData\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">PushButtonData</span>&gt;(\n        data.Length );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">CmdData</span> cd <span class=\"blue\">in</span> data )\n    {\n      <span class=\"teal\">PushButtonData</span> pbd = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n        cd.Name, cd.Text, path,\n        _class_name_prefix + cd.Name );\n \n      pbd.ToolTip = cd.Tip;\n \n      buttonData.Add( pbd );\n    }\n \n    p.AddStackedItems( buttonData[0],\n      buttonData[1] );\n\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Lacking icons, my panel does not look quite as impressive as Paul's one shown above, but it does the job:\n\n<center>\n<img alt=\"Setout points ribbon panel\" src=\"img/setout_points_panel_stacked.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Shared Parameters</h4>\n<p>As mentioned above, the functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corners</a> geometry\n\ndata has already been described in previous posts.\n\n<p>The question is how to handle this information in order to make it available to the user, populate schedules, etc.\nWe ended up inserting family instances marking all concrete corners as minor setout points, and populating shared parameters on each to encapsulate the required data specifying the host element and its point coordinates.\nHere is the shared parameter file, slightly simplified for readability:\n\n<pre>\n# This is a Revit shared parameter file.\n# Do not edit manually.\n*META VERSION MINVERSION\nMETA 2 1\n*GROUP ID NAME\nGROUP  1 SetOut\n*PARAM GUID NAME             DATATYPE ... GROUP VISIBLE\nPARAM  .... Key_Setout_Point YESNO        1     1\nPARAM  .... Host_Type        TEXT         1     1\nPARAM  .... Host_Id          INTEGER      1     1\nPARAM  .... X                LENGTH       1     1\nPARAM  .... Y                LENGTH       1     1\nPARAM  .... Z                LENGTH       1     1\nPARAM  .... Point_Number     TEXT         1     1\n</pre>\n<p>Shared parameter access is implemented using their GUIDs throughout the code.\n\n\n<a name=\"5\"></a>\n<h4>Importance of Product Usage Experience, Content and Best Practices</h4>\n<p>We initially defined a parameter in the setout point family to distinguish between minor and major points, and started working on a separate user interface to toggle between the two and change the family instance colour depending on its current setting.\n\n<p>At a certain point, we discovered that it was vastly simpler to define two separate types within the family instead and use the standard Revit user interface to toggle between those.\n\n<p>It is so important for every add-in developer to know the standard Revit possibilities and best-practice workflows.\n\n<p>That can save huge amounts of unnecessary programming effort, sometimes wasted to fight against the product and its standard paradigms instead of making optimal use of it.\n\n\n<a name=\"6\"></a>\n<h4>Marking All Geometry Vertices</h4>\n<p>As said, most of the underlying functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corner</a> geometry\n\nwas already presented and discussed.\n\n<p>One additional helper method GetFamilySymbols loads the setout point family, if it is not already present, and retrieves the major and minor setout point symbols:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">FamilySymbol</span> [] GetFamilySymbols(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"blue\">bool</span> loadIt )\n{\n  <span class=\"teal\">FamilySymbol</span> [] symbols = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Family</span> family\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;(\n        e =&gt; e.Name.Equals( FamilyName ) )\n      <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n \n  <span class=\"green\">// If the family is not already loaded, do so:</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == family &amp;&amp; loadIt )\n  {\n    <span class=\"green\">// Load the setout point family</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Load Setout Point Family\"</span> );\n \n      <span class=\"blue\">if</span>( doc.LoadFamily( _family_path,\n        <span class=\"blue\">out</span> family ) )\n      {\n        tx.Commit();\n      }\n      <span class=\"blue\">else</span>\n      {\n        tx.RollBack();\n      }\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != family )\n  {\n    symbols = <span class=\"blue\">new</span> <span class=\"teal\">FamilySymbol</span>[2];\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> family.Symbols )\n    {\n      symbols[i++] = s;\n    }\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[0].Name.EndsWith( <span class=\"maroon\">\"Major\"</span> ),\n      <span class=\"maroon\">\"expected major (key) setout point first\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[1].Name.EndsWith( <span class=\"maroon\">\"Minor\"</span> ),\n      <span class=\"maroon\">\"expected minor setout point second\"</span> );\n  }\n  <span class=\"blue\">return</span> symbols;\n}\n</pre>\n<p>Then, finally, here is the external command mainline pulling it all together, i.e.\n\n<ul>\n<li>Determine project location transformation to real world coordinates.\n<li>Load or retrieve setout point family symbols.\n<li>Retrieve the relevant structural concrete elements.\n<li>Retrieve element geometry.\n<li>Place a setout point marker family instance on each geometry vertex.\n<li>Check to see whether the required shared parameters have been bound.\n</li></li></li></li></li></li></ul>\n<p>Setout points are numbered starting at one each time the command is run with no decoration or prefix.\n\n<p>Here is Execute method implementation performing these tasks:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Transform</span> projectLocationTransform\n    = GetProjectLocationTransform( doc );\n \n  <span class=\"green\">// Load or retrieve setout point family symbols:</span>\n \n  <span class=\"teal\">FamilySymbol</span> [] symbols\n    = GetFamilySymbols( doc, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    message = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to load setout point family from '{1}'.\"</span>,\n      _family_path );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = GetStructuralElements( doc );\n \n  <span class=\"green\">// Retrieve element geometry and place a</span>\n  <span class=\"green\">// setout point on each geometry corner.</span>\n \n  <span class=\"green\">// Setout points are numbered starting at </span>\n  <span class=\"green\">// one each time the command is run with</span>\n  <span class=\"green\">// no decoration or prefix whatsoever.</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Place Setout Points\"</span> );\n \n    <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n    <span class=\"green\">// On the very first attempt only, run an error </span>\n    <span class=\"green\">// check to see whether the required shared </span>\n    <span class=\"green\">// parameters have actually been bound:</span>\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n      <span class=\"blue\">string</span> desc = ElementDescription( e );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n      {\n        <span class=\"teal\">Debug</span>.Print(\n          <span class=\"maroon\">\"Unable to access element solid for element {0}.\"</span>,\n          desc );\n \n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners\n        = GetCorners( solid );\n \n      <span class=\"blue\">int</span> n = corners.Count;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} corners found:\"</span>, desc, n );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n      {\n        ++_point_number;\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>,\n          _point_number, PointString( p ) );\n \n        <span class=\"teal\">FamilyInstance</span> fi\n          = doc.Create.NewFamilyInstance( p,\n            symbols[1], <span class=\"teal\">StructuralType</span>.NonStructural );\n \n        <span class=\"green\">// Add shared parameter data immediately </span>\n        <span class=\"green\">// after creating the new family instance.</span>\n        <span class=\"green\">// The shared parameters are indeed added </span>\n        <span class=\"green\">// immediately by Revit, so we can access and</span>\n        <span class=\"green\">// populate them.</span>\n        <span class=\"green\">// No need to commit the transaction that </span>\n        <span class=\"green\">// added the family instance to give Revit </span>\n        <span class=\"green\">// a chance to add the shared parameters to </span>\n        <span class=\"green\">// it, nor to regenerate the document, we </span>\n        <span class=\"green\">// can write the shared parameter values </span>\n        <span class=\"green\">// right away.</span>\n \n        <span class=\"blue\">if</span>( first )\n        {\n          <span class=\"teal\">Parameter</span> q = fi.get_Parameter(\n            _parameter_x );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == q )\n          {\n            message =\n              <span class=\"maroon\">\"The required shared parameters \"</span>\n              + <span class=\"maroon\">\"X, Y, Z, Host_Id, Host_Type and \"</span>\n              + <span class=\"maroon\">\"Point_Number are missing.\"</span>;\n \n            tx.RollBack();\n \n            <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n          }\n          first = <span class=\"blue\">false</span>;\n        }\n \n        <span class=\"green\">// Transform insertion point by applying</span>\n        <span class=\"green\">// project location transformation.</span>\n \n        <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n \n        fi.get_Parameter( _parameter_host_type ).Set(\n          GetHostType( e ).ToString() );\n \n        fi.get_Parameter( _parameter_host_id ).Set(\n          e.Id.IntegerValue );\n \n        fi.get_Parameter( _parameter_point_nr ).Set(\n          _point_number.ToString() );\n \n        fi.get_Parameter( _parameter_x ).Set( r2.X );\n        fi.get_Parameter( _parameter_y ).Set( r2.Y );\n        fi.get_Parameter( _parameter_z ).Set( r2.Z );\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>That's about it... one more little thing:\n\n\n<a name=\"7\"></a>\n<h4>Major Setout Point Renumbering</h4>\n<p>Such irrational creatures, these human beings.\n\n<p>Users apparently insist on consecutive numbering of items they deal with.\n\n<p>We therefore implemented a second command named CmdRenumber to renumber the major points.\n\n<p>They are basically renumbered randomly, since all major points are selected using a filtered element collector.\nWe iterate over the result, assign a consecutive number to each instance, and store it in the Point_Number text-valued shared parameter with a \"SOP \" prefix string _sop_prefix.\n\n<p>The key setout points are family instances with the generic model category and the major setout point type.\n\n<p>The external command Execute implementation thus ends up looking like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilySymbol</span>[] symbols\n    = <span class=\"teal\">CmdGeomVertices</span>.GetFamilySymbols(\n      doc, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Setout Points\"</span>,\n      <span class=\"maroon\">\"Setout point family not loaded, \"</span>\n      + <span class=\"maroon\">\"so no setout points present.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"teal\">FamilyInstanceFilter</span> instanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( doc, symbols[0].Id );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( instanceFilter );\n \n  <span class=\"teal\">Guid</span> guid = <span class=\"teal\">CmdGeomVertices</span>._parameter_point_nr;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Renumber Setout Points\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">string</span> s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> p <span class=\"blue\">in</span> col )\n    {\n      s = _sop_prefix + ( ++i ).ToString();\n \n      p.get_Parameter( guid ).Set( s );\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For all further details, please refer to the one and only really trustworthy reference, the full source code.\n\n<p>Here is\n\n<a href=\"zip/SetoutPoints.zip\">SetoutPoints.zip</a>\n\nincluding the complete source code, Visual Studio solution, add-in manifest and setout point marker family.\n\n<p>For easier testing, here is also a\n\n<a href=\"src/SetoutPoints/test/rst_basic_sample_project_with_location.rvt\">sample project</a> based\n\non the standard rst_basic_sample_project.rvt with a non-standard project location and the setout point schedules added.\n\n<p><strong>Addendum:</strong> I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">\nmigrated this to Revit 2015</a> and\n\ncreated the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> for it.</p>\n<!--\n\n<hr>\n\n<a href=\"\">\n</a>\n\n<a name=\"\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n<p>Test shared parameter availability\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0806_setout_points",
    "header_text": "Usage",
    "local_header_href": "#usage",
    "chunk_text": "<h4>Usage</h4><p>Ensure your project contains some elements whose structural material is set to concrete or precast concrete.\n\n<p>You can then click the Get Concrete Corners tool:</p>\n<center>\n<img alt=\"Mark all concrete element geometry vertices\" src=\"img/setout_points_1.png\"/>\n</center>\n<p>The tool automatically analyses al the concrete structural elements' geometry and placed setout point family instances representing a 3D pointer on all the concrete element corner vertices:\n\n<center>\n<img alt=\"Minor setout point\" src=\"img/setout_points_2.png\"/>\n</center>\n<p>The family is defined using the Generic Model family template.\nThe green indicators represent general setout points.\nYou can select the ones you want to change to main setout points, also known as major or key, by simply selecting them and swapping their type to SetoutPoint_Major:</p>\n<center>\n<img alt=\"Major setout point family type\" src=\"img/setout_points_3.png\"/>\n</center>\n<p>Major setout points are displayed in red instead of green:</p>\n<center>\n<img alt=\"Major setout point instance\" src=\"img/setout_points_4.png\"/>\n</center>\n<p>The sample project provided defines two schedules.\nOne of them is populated with all setout points, marking every corner of every piece of concrete:</p>\n<center>\n<img alt=\"Major setout point schedule in project browser\" src=\"img/setout_points_5.png\"/>\n</center>\n<p>The second schedule lists only the selected main or major setout points and their coordinates:</p>\n<center>\n<img alt=\"Major setout point schedule\" src=\"img/setout_points_6.png\"/>\n</center>\n<p>Once you have all your key setout points defined, a separate 'Renumber setout Points' external command renumbers them sequentially and adds a SOP (Set Out Point) prefix to their number to differentiate them from the minor points.\n\n<p>The renumbered schedule can now be used on a drawing sheet.\n\n<p>Many thanks to Paul for our initiating this project, his deep Revit knowledge and experience, all the support he provided during the Melbourne Revit API training, and the great evening we had together in Melbourne after the training!\n\n\n<a name=\"2\"></a>\n<h4>Implementation Details</h4>\n<p>I already pointed to the discussion of the main technical underpinnings for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieval of the concrete corners</a> above, i.e.\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#2\">Filtering for structural concrete elements</a>.\n<li>Retrieving their corners, i.e. geometry traversal to <a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#3\">retrieve unique vertices</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#4\">Converting from Revit model to real-world coordinates</a>.\n</li></li></li></ul>\n<p>Now let's look at some of the aspects of putting this functionality to use and wrapping it into a full-blown end-user application:\n\n<ul>\n<li><a href=\"#3\">External application and CmdData class</a>\n<li><a href=\"#4\">Shared parameters</a>\n<li><a href=\"#5\">Importance of product usage experience, content and best practices</a>\n<li><a href=\"#6\">Marking all geometry vertices</a>\n<li><a href=\"#7\">Major setout point renumbering</a>\n</li></li></li></li></li></ul>\n<a name=\"3\"></a>\n<h4>External Application and CmdData Class</h4>\n<p>The application defines two commands:\n\n<ul>\n<li><a href=\"#6\">CmdGeomVertices</a>: filter for all relevant concrete structural elements, analyse their geometry, create the setout point markers, and populate their shared parameters to be reflected in the predefined schedules.\n<li><a href=\"#7\">CmdRenumber</a>: renumber the main or major setout points consecutively.\n</li></li></ul>\n<p>They are presented in a custom ribbon panel defined by an external application.\n\n<p>In order to encapsulate all the information required to populate the ribbon panel push buttons, I define the following CmdData class defining the external command implementation class name, description and tool tip text:\n\n<pre class=\"code\">\n  <span class=\"blue\">class</span> <span class=\"teal\">CmdData</span>\n  {\n    <span class=\"blue\">public</span> CmdData(\n      <span class=\"blue\">string</span> name,\n      <span class=\"blue\">string</span> text,\n      <span class=\"blue\">string</span> tip )\n    {\n      Name = name;\n      Text = text;\n      Tip = tip;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Text { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Tip { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n</pre>\n<p>The two instances can be populated like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">CmdData</span>[] data = <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>[] {\n \n    <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>(\n      <span class=\"maroon\">\"GeomVertices\"</span>,\n      <span class=\"maroon\">\"Mark Concrete Corners\"</span>,\n      <span class=\"maroon\">\"Place a setout point marker on every concrete corner.\"</span> ),\n \n    <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>(\n      <span class=\"maroon\">\"Renumber\"</span>,\n      <span class=\"maroon\">\"Renumber major\"</span>,\n      <span class=\"maroon\">\"Renumber major setout points\"</span> )\n  };\n</pre>\n<p>The external application OnStartup method making use of this ends up very simple:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup(\n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">string</span> path = System.Reflection.<span class=\"teal\">Assembly</span>\n      .GetExecutingAssembly().Location;\n \n    <span class=\"green\">// Create ribbon panel</span>\n \n    <span class=\"teal\">RibbonPanel</span> p = a.CreateRibbonPanel( Caption );\n \n    <span class=\"green\">// Create buttons</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">PushButtonData</span>&gt; buttonData\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">PushButtonData</span>&gt;(\n        data.Length );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">CmdData</span> cd <span class=\"blue\">in</span> data )\n    {\n      <span class=\"teal\">PushButtonData</span> pbd = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n        cd.Name, cd.Text, path,\n        _class_name_prefix + cd.Name );\n \n      pbd.ToolTip = cd.Tip;\n \n      buttonData.Add( pbd );\n    }\n \n    p.AddStackedItems( buttonData[0],\n      buttonData[1] );\n\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Lacking icons, my panel does not look quite as impressive as Paul's one shown above, but it does the job:\n\n<center>\n<img alt=\"Setout points ribbon panel\" src=\"img/setout_points_panel_stacked.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Shared Parameters</h4>\n<p>As mentioned above, the functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corners</a> geometry\n\ndata has already been described in previous posts.\n\n<p>The question is how to handle this information in order to make it available to the user, populate schedules, etc.\nWe ended up inserting family instances marking all concrete corners as minor setout points, and populating shared parameters on each to encapsulate the required data specifying the host element and its point coordinates.\nHere is the shared parameter file, slightly simplified for readability:\n\n<pre>\n# This is a Revit shared parameter file.\n# Do not edit manually.\n*META VERSION MINVERSION\nMETA 2 1\n*GROUP ID NAME\nGROUP  1 SetOut\n*PARAM GUID NAME             DATATYPE ... GROUP VISIBLE\nPARAM  .... Key_Setout_Point YESNO        1     1\nPARAM  .... Host_Type        TEXT         1     1\nPARAM  .... Host_Id          INTEGER      1     1\nPARAM  .... X                LENGTH       1     1\nPARAM  .... Y                LENGTH       1     1\nPARAM  .... Z                LENGTH       1     1\nPARAM  .... Point_Number     TEXT         1     1\n</pre>\n<p>Shared parameter access is implemented using their GUIDs throughout the code.\n\n\n<a name=\"5\"></a>\n<h4>Importance of Product Usage Experience, Content and Best Practices</h4>\n<p>We initially defined a parameter in the setout point family to distinguish between minor and major points, and started working on a separate user interface to toggle between the two and change the family instance colour depending on its current setting.\n\n<p>At a certain point, we discovered that it was vastly simpler to define two separate types within the family instead and use the standard Revit user interface to toggle between those.\n\n<p>It is so important for every add-in developer to know the standard Revit possibilities and best-practice workflows.\n\n<p>That can save huge amounts of unnecessary programming effort, sometimes wasted to fight against the product and its standard paradigms instead of making optimal use of it.\n\n\n<a name=\"6\"></a>\n<h4>Marking All Geometry Vertices</h4>\n<p>As said, most of the underlying functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corner</a> geometry\n\nwas already presented and discussed.\n\n<p>One additional helper method GetFamilySymbols loads the setout point family, if it is not already present, and retrieves the major and minor setout point symbols:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">FamilySymbol</span> [] GetFamilySymbols(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"blue\">bool</span> loadIt )\n{\n  <span class=\"teal\">FamilySymbol</span> [] symbols = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Family</span> family\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;(\n        e =&gt; e.Name.Equals( FamilyName ) )\n      <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n \n  <span class=\"green\">// If the family is not already loaded, do so:</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == family &amp;&amp; loadIt )\n  {\n    <span class=\"green\">// Load the setout point family</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Load Setout Point Family\"</span> );\n \n      <span class=\"blue\">if</span>( doc.LoadFamily( _family_path,\n        <span class=\"blue\">out</span> family ) )\n      {\n        tx.Commit();\n      }\n      <span class=\"blue\">else</span>\n      {\n        tx.RollBack();\n      }\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != family )\n  {\n    symbols = <span class=\"blue\">new</span> <span class=\"teal\">FamilySymbol</span>[2];\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> family.Symbols )\n    {\n      symbols[i++] = s;\n    }\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[0].Name.EndsWith( <span class=\"maroon\">\"Major\"</span> ),\n      <span class=\"maroon\">\"expected major (key) setout point first\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[1].Name.EndsWith( <span class=\"maroon\">\"Minor\"</span> ),\n      <span class=\"maroon\">\"expected minor setout point second\"</span> );\n  }\n  <span class=\"blue\">return</span> symbols;\n}\n</pre>\n<p>Then, finally, here is the external command mainline pulling it all together, i.e.\n\n<ul>\n<li>Determine project location transformation to real world coordinates.\n<li>Load or retrieve setout point family symbols.\n<li>Retrieve the relevant structural concrete elements.\n<li>Retrieve element geometry.\n<li>Place a setout point marker family instance on each geometry vertex.\n<li>Check to see whether the required shared parameters have been bound.\n</li></li></li></li></li></li></ul>\n<p>Setout points are numbered starting at one each time the command is run with no decoration or prefix.\n\n<p>Here is Execute method implementation performing these tasks:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Transform</span> projectLocationTransform\n    = GetProjectLocationTransform( doc );\n \n  <span class=\"green\">// Load or retrieve setout point family symbols:</span>\n \n  <span class=\"teal\">FamilySymbol</span> [] symbols\n    = GetFamilySymbols( doc, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    message = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to load setout point family from '{1}'.\"</span>,\n      _family_path );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = GetStructuralElements( doc );\n \n  <span class=\"green\">// Retrieve element geometry and place a</span>\n  <span class=\"green\">// setout point on each geometry corner.</span>\n \n  <span class=\"green\">// Setout points are numbered starting at </span>\n  <span class=\"green\">// one each time the command is run with</span>\n  <span class=\"green\">// no decoration or prefix whatsoever.</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Place Setout Points\"</span> );\n \n    <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n    <span class=\"green\">// On the very first attempt only, run an error </span>\n    <span class=\"green\">// check to see whether the required shared </span>\n    <span class=\"green\">// parameters have actually been bound:</span>\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n      <span class=\"blue\">string</span> desc = ElementDescription( e );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n      {\n        <span class=\"teal\">Debug</span>.Print(\n          <span class=\"maroon\">\"Unable to access element solid for element {0}.\"</span>,\n          desc );\n \n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners\n        = GetCorners( solid );\n \n      <span class=\"blue\">int</span> n = corners.Count;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} corners found:\"</span>, desc, n );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n      {\n        ++_point_number;\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>,\n          _point_number, PointString( p ) );\n \n        <span class=\"teal\">FamilyInstance</span> fi\n          = doc.Create.NewFamilyInstance( p,\n            symbols[1], <span class=\"teal\">StructuralType</span>.NonStructural );\n \n        <span class=\"green\">// Add shared parameter data immediately </span>\n        <span class=\"green\">// after creating the new family instance.</span>\n        <span class=\"green\">// The shared parameters are indeed added </span>\n        <span class=\"green\">// immediately by Revit, so we can access and</span>\n        <span class=\"green\">// populate them.</span>\n        <span class=\"green\">// No need to commit the transaction that </span>\n        <span class=\"green\">// added the family instance to give Revit </span>\n        <span class=\"green\">// a chance to add the shared parameters to </span>\n        <span class=\"green\">// it, nor to regenerate the document, we </span>\n        <span class=\"green\">// can write the shared parameter values </span>\n        <span class=\"green\">// right away.</span>\n \n        <span class=\"blue\">if</span>( first )\n        {\n          <span class=\"teal\">Parameter</span> q = fi.get_Parameter(\n            _parameter_x );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == q )\n          {\n            message =\n              <span class=\"maroon\">\"The required shared parameters \"</span>\n              + <span class=\"maroon\">\"X, Y, Z, Host_Id, Host_Type and \"</span>\n              + <span class=\"maroon\">\"Point_Number are missing.\"</span>;\n \n            tx.RollBack();\n \n            <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n          }\n          first = <span class=\"blue\">false</span>;\n        }\n \n        <span class=\"green\">// Transform insertion point by applying</span>\n        <span class=\"green\">// project location transformation.</span>\n \n        <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n \n        fi.get_Parameter( _parameter_host_type ).Set(\n          GetHostType( e ).ToString() );\n \n        fi.get_Parameter( _parameter_host_id ).Set(\n          e.Id.IntegerValue );\n \n        fi.get_Parameter( _parameter_point_nr ).Set(\n          _point_number.ToString() );\n \n        fi.get_Parameter( _parameter_x ).Set( r2.X );\n        fi.get_Parameter( _parameter_y ).Set( r2.Y );\n        fi.get_Parameter( _parameter_z ).Set( r2.Z );\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>That's about it... one more little thing:\n\n\n<a name=\"7\"></a>\n<h4>Major Setout Point Renumbering</h4>\n<p>Such irrational creatures, these human beings.\n\n<p>Users apparently insist on consecutive numbering of items they deal with.\n\n<p>We therefore implemented a second command named CmdRenumber to renumber the major points.\n\n<p>They are basically renumbered randomly, since all major points are selected using a filtered element collector.\nWe iterate over the result, assign a consecutive number to each instance, and store it in the Point_Number text-valued shared parameter with a \"SOP \" prefix string _sop_prefix.\n\n<p>The key setout points are family instances with the generic model category and the major setout point type.\n\n<p>The external command Execute implementation thus ends up looking like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilySymbol</span>[] symbols\n    = <span class=\"teal\">CmdGeomVertices</span>.GetFamilySymbols(\n      doc, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Setout Points\"</span>,\n      <span class=\"maroon\">\"Setout point family not loaded, \"</span>\n      + <span class=\"maroon\">\"so no setout points present.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"teal\">FamilyInstanceFilter</span> instanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( doc, symbols[0].Id );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( instanceFilter );\n \n  <span class=\"teal\">Guid</span> guid = <span class=\"teal\">CmdGeomVertices</span>._parameter_point_nr;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Renumber Setout Points\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">string</span> s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> p <span class=\"blue\">in</span> col )\n    {\n      s = _sop_prefix + ( ++i ).ToString();\n \n      p.get_Parameter( guid ).Set( s );\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For all further details, please refer to the one and only really trustworthy reference, the full source code.\n\n<p>Here is\n\n<a href=\"zip/SetoutPoints.zip\">SetoutPoints.zip</a>\n\nincluding the complete source code, Visual Studio solution, add-in manifest and setout point marker family.\n\n<p>For easier testing, here is also a\n\n<a href=\"src/SetoutPoints/test/rst_basic_sample_project_with_location.rvt\">sample project</a> based\n\non the standard rst_basic_sample_project.rvt with a non-standard project location and the setout point schedules added.\n\n<p><strong>Addendum:</strong> I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">\nmigrated this to Revit 2015</a> and\n\ncreated the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> for it.</p>\n<!--\n\n<hr>\n\n<a href=\"\">\n</a>\n\n<a name=\"\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n<p>Test shared parameter availability\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0806_setout_points",
    "header_text": "Implementation Details",
    "local_header_href": "#implementation-details",
    "chunk_text": "<h4>Implementation Details</h4><p>I already pointed to the discussion of the main technical underpinnings for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieval of the concrete corners</a> above, i.e.\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#2\">Filtering for structural concrete elements</a>.\n<li>Retrieving their corners, i.e. geometry traversal to <a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#3\">retrieve unique vertices</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html#4\">Converting from Revit model to real-world coordinates</a>.\n</li></li></li></ul>\n<p>Now let's look at some of the aspects of putting this functionality to use and wrapping it into a full-blown end-user application:\n\n<ul>\n<li><a href=\"#3\">External application and CmdData class</a>\n<li><a href=\"#4\">Shared parameters</a>\n<li><a href=\"#5\">Importance of product usage experience, content and best practices</a>\n<li><a href=\"#6\">Marking all geometry vertices</a>\n<li><a href=\"#7\">Major setout point renumbering</a>\n</li></li></li></li></li></ul>\n<a name=\"3\"></a>\n<h4>External Application and CmdData Class</h4>\n<p>The application defines two commands:\n\n<ul>\n<li><a href=\"#6\">CmdGeomVertices</a>: filter for all relevant concrete structural elements, analyse their geometry, create the setout point markers, and populate their shared parameters to be reflected in the predefined schedules.\n<li><a href=\"#7\">CmdRenumber</a>: renumber the main or major setout points consecutively.\n</li></li></ul>\n<p>They are presented in a custom ribbon panel defined by an external application.\n\n<p>In order to encapsulate all the information required to populate the ribbon panel push buttons, I define the following CmdData class defining the external command implementation class name, description and tool tip text:\n\n<pre class=\"code\">\n  <span class=\"blue\">class</span> <span class=\"teal\">CmdData</span>\n  {\n    <span class=\"blue\">public</span> CmdData(\n      <span class=\"blue\">string</span> name,\n      <span class=\"blue\">string</span> text,\n      <span class=\"blue\">string</span> tip )\n    {\n      Name = name;\n      Text = text;\n      Tip = tip;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Text { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Tip { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n</pre>\n<p>The two instances can be populated like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">CmdData</span>[] data = <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>[] {\n \n    <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>(\n      <span class=\"maroon\">\"GeomVertices\"</span>,\n      <span class=\"maroon\">\"Mark Concrete Corners\"</span>,\n      <span class=\"maroon\">\"Place a setout point marker on every concrete corner.\"</span> ),\n \n    <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>(\n      <span class=\"maroon\">\"Renumber\"</span>,\n      <span class=\"maroon\">\"Renumber major\"</span>,\n      <span class=\"maroon\">\"Renumber major setout points\"</span> )\n  };\n</pre>\n<p>The external application OnStartup method making use of this ends up very simple:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup(\n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">string</span> path = System.Reflection.<span class=\"teal\">Assembly</span>\n      .GetExecutingAssembly().Location;\n \n    <span class=\"green\">// Create ribbon panel</span>\n \n    <span class=\"teal\">RibbonPanel</span> p = a.CreateRibbonPanel( Caption );\n \n    <span class=\"green\">// Create buttons</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">PushButtonData</span>&gt; buttonData\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">PushButtonData</span>&gt;(\n        data.Length );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">CmdData</span> cd <span class=\"blue\">in</span> data )\n    {\n      <span class=\"teal\">PushButtonData</span> pbd = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n        cd.Name, cd.Text, path,\n        _class_name_prefix + cd.Name );\n \n      pbd.ToolTip = cd.Tip;\n \n      buttonData.Add( pbd );\n    }\n \n    p.AddStackedItems( buttonData[0],\n      buttonData[1] );\n\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Lacking icons, my panel does not look quite as impressive as Paul's one shown above, but it does the job:\n\n<center>\n<img alt=\"Setout points ribbon panel\" src=\"img/setout_points_panel_stacked.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Shared Parameters</h4>\n<p>As mentioned above, the functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corners</a> geometry\n\ndata has already been described in previous posts.\n\n<p>The question is how to handle this information in order to make it available to the user, populate schedules, etc.\nWe ended up inserting family instances marking all concrete corners as minor setout points, and populating shared parameters on each to encapsulate the required data specifying the host element and its point coordinates.\nHere is the shared parameter file, slightly simplified for readability:\n\n<pre>\n# This is a Revit shared parameter file.\n# Do not edit manually.\n*META VERSION MINVERSION\nMETA 2 1\n*GROUP ID NAME\nGROUP  1 SetOut\n*PARAM GUID NAME             DATATYPE ... GROUP VISIBLE\nPARAM  .... Key_Setout_Point YESNO        1     1\nPARAM  .... Host_Type        TEXT         1     1\nPARAM  .... Host_Id          INTEGER      1     1\nPARAM  .... X                LENGTH       1     1\nPARAM  .... Y                LENGTH       1     1\nPARAM  .... Z                LENGTH       1     1\nPARAM  .... Point_Number     TEXT         1     1\n</pre>\n<p>Shared parameter access is implemented using their GUIDs throughout the code.\n\n\n<a name=\"5\"></a>\n<h4>Importance of Product Usage Experience, Content and Best Practices</h4>\n<p>We initially defined a parameter in the setout point family to distinguish between minor and major points, and started working on a separate user interface to toggle between the two and change the family instance colour depending on its current setting.\n\n<p>At a certain point, we discovered that it was vastly simpler to define two separate types within the family instead and use the standard Revit user interface to toggle between those.\n\n<p>It is so important for every add-in developer to know the standard Revit possibilities and best-practice workflows.\n\n<p>That can save huge amounts of unnecessary programming effort, sometimes wasted to fight against the product and its standard paradigms instead of making optimal use of it.\n\n\n<a name=\"6\"></a>\n<h4>Marking All Geometry Vertices</h4>\n<p>As said, most of the underlying functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corner</a> geometry\n\nwas already presented and discussed.\n\n<p>One additional helper method GetFamilySymbols loads the setout point family, if it is not already present, and retrieves the major and minor setout point symbols:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">FamilySymbol</span> [] GetFamilySymbols(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"blue\">bool</span> loadIt )\n{\n  <span class=\"teal\">FamilySymbol</span> [] symbols = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Family</span> family\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;(\n        e =&gt; e.Name.Equals( FamilyName ) )\n      <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n \n  <span class=\"green\">// If the family is not already loaded, do so:</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == family &amp;&amp; loadIt )\n  {\n    <span class=\"green\">// Load the setout point family</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Load Setout Point Family\"</span> );\n \n      <span class=\"blue\">if</span>( doc.LoadFamily( _family_path,\n        <span class=\"blue\">out</span> family ) )\n      {\n        tx.Commit();\n      }\n      <span class=\"blue\">else</span>\n      {\n        tx.RollBack();\n      }\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != family )\n  {\n    symbols = <span class=\"blue\">new</span> <span class=\"teal\">FamilySymbol</span>[2];\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> family.Symbols )\n    {\n      symbols[i++] = s;\n    }\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[0].Name.EndsWith( <span class=\"maroon\">\"Major\"</span> ),\n      <span class=\"maroon\">\"expected major (key) setout point first\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[1].Name.EndsWith( <span class=\"maroon\">\"Minor\"</span> ),\n      <span class=\"maroon\">\"expected minor setout point second\"</span> );\n  }\n  <span class=\"blue\">return</span> symbols;\n}\n</pre>\n<p>Then, finally, here is the external command mainline pulling it all together, i.e.\n\n<ul>\n<li>Determine project location transformation to real world coordinates.\n<li>Load or retrieve setout point family symbols.\n<li>Retrieve the relevant structural concrete elements.\n<li>Retrieve element geometry.\n<li>Place a setout point marker family instance on each geometry vertex.\n<li>Check to see whether the required shared parameters have been bound.\n</li></li></li></li></li></li></ul>\n<p>Setout points are numbered starting at one each time the command is run with no decoration or prefix.\n\n<p>Here is Execute method implementation performing these tasks:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Transform</span> projectLocationTransform\n    = GetProjectLocationTransform( doc );\n \n  <span class=\"green\">// Load or retrieve setout point family symbols:</span>\n \n  <span class=\"teal\">FamilySymbol</span> [] symbols\n    = GetFamilySymbols( doc, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    message = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to load setout point family from '{1}'.\"</span>,\n      _family_path );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = GetStructuralElements( doc );\n \n  <span class=\"green\">// Retrieve element geometry and place a</span>\n  <span class=\"green\">// setout point on each geometry corner.</span>\n \n  <span class=\"green\">// Setout points are numbered starting at </span>\n  <span class=\"green\">// one each time the command is run with</span>\n  <span class=\"green\">// no decoration or prefix whatsoever.</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Place Setout Points\"</span> );\n \n    <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n    <span class=\"green\">// On the very first attempt only, run an error </span>\n    <span class=\"green\">// check to see whether the required shared </span>\n    <span class=\"green\">// parameters have actually been bound:</span>\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n      <span class=\"blue\">string</span> desc = ElementDescription( e );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n      {\n        <span class=\"teal\">Debug</span>.Print(\n          <span class=\"maroon\">\"Unable to access element solid for element {0}.\"</span>,\n          desc );\n \n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners\n        = GetCorners( solid );\n \n      <span class=\"blue\">int</span> n = corners.Count;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} corners found:\"</span>, desc, n );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n      {\n        ++_point_number;\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>,\n          _point_number, PointString( p ) );\n \n        <span class=\"teal\">FamilyInstance</span> fi\n          = doc.Create.NewFamilyInstance( p,\n            symbols[1], <span class=\"teal\">StructuralType</span>.NonStructural );\n \n        <span class=\"green\">// Add shared parameter data immediately </span>\n        <span class=\"green\">// after creating the new family instance.</span>\n        <span class=\"green\">// The shared parameters are indeed added </span>\n        <span class=\"green\">// immediately by Revit, so we can access and</span>\n        <span class=\"green\">// populate them.</span>\n        <span class=\"green\">// No need to commit the transaction that </span>\n        <span class=\"green\">// added the family instance to give Revit </span>\n        <span class=\"green\">// a chance to add the shared parameters to </span>\n        <span class=\"green\">// it, nor to regenerate the document, we </span>\n        <span class=\"green\">// can write the shared parameter values </span>\n        <span class=\"green\">// right away.</span>\n \n        <span class=\"blue\">if</span>( first )\n        {\n          <span class=\"teal\">Parameter</span> q = fi.get_Parameter(\n            _parameter_x );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == q )\n          {\n            message =\n              <span class=\"maroon\">\"The required shared parameters \"</span>\n              + <span class=\"maroon\">\"X, Y, Z, Host_Id, Host_Type and \"</span>\n              + <span class=\"maroon\">\"Point_Number are missing.\"</span>;\n \n            tx.RollBack();\n \n            <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n          }\n          first = <span class=\"blue\">false</span>;\n        }\n \n        <span class=\"green\">// Transform insertion point by applying</span>\n        <span class=\"green\">// project location transformation.</span>\n \n        <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n \n        fi.get_Parameter( _parameter_host_type ).Set(\n          GetHostType( e ).ToString() );\n \n        fi.get_Parameter( _parameter_host_id ).Set(\n          e.Id.IntegerValue );\n \n        fi.get_Parameter( _parameter_point_nr ).Set(\n          _point_number.ToString() );\n \n        fi.get_Parameter( _parameter_x ).Set( r2.X );\n        fi.get_Parameter( _parameter_y ).Set( r2.Y );\n        fi.get_Parameter( _parameter_z ).Set( r2.Z );\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>That's about it... one more little thing:\n\n\n<a name=\"7\"></a>\n<h4>Major Setout Point Renumbering</h4>\n<p>Such irrational creatures, these human beings.\n\n<p>Users apparently insist on consecutive numbering of items they deal with.\n\n<p>We therefore implemented a second command named CmdRenumber to renumber the major points.\n\n<p>They are basically renumbered randomly, since all major points are selected using a filtered element collector.\nWe iterate over the result, assign a consecutive number to each instance, and store it in the Point_Number text-valued shared parameter with a \"SOP \" prefix string _sop_prefix.\n\n<p>The key setout points are family instances with the generic model category and the major setout point type.\n\n<p>The external command Execute implementation thus ends up looking like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilySymbol</span>[] symbols\n    = <span class=\"teal\">CmdGeomVertices</span>.GetFamilySymbols(\n      doc, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Setout Points\"</span>,\n      <span class=\"maroon\">\"Setout point family not loaded, \"</span>\n      + <span class=\"maroon\">\"so no setout points present.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"teal\">FamilyInstanceFilter</span> instanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( doc, symbols[0].Id );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( instanceFilter );\n \n  <span class=\"teal\">Guid</span> guid = <span class=\"teal\">CmdGeomVertices</span>._parameter_point_nr;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Renumber Setout Points\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">string</span> s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> p <span class=\"blue\">in</span> col )\n    {\n      s = _sop_prefix + ( ++i ).ToString();\n \n      p.get_Parameter( guid ).Set( s );\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For all further details, please refer to the one and only really trustworthy reference, the full source code.\n\n<p>Here is\n\n<a href=\"zip/SetoutPoints.zip\">SetoutPoints.zip</a>\n\nincluding the complete source code, Visual Studio solution, add-in manifest and setout point marker family.\n\n<p>For easier testing, here is also a\n\n<a href=\"src/SetoutPoints/test/rst_basic_sample_project_with_location.rvt\">sample project</a> based\n\non the standard rst_basic_sample_project.rvt with a non-standard project location and the setout point schedules added.\n\n<p><strong>Addendum:</strong> I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">\nmigrated this to Revit 2015</a> and\n\ncreated the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> for it.</p>\n<!--\n\n<hr>\n\n<a href=\"\">\n</a>\n\n<a name=\"\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n<p>Test shared parameter availability\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0806_setout_points",
    "header_text": "External Application and CmdData Class",
    "local_header_href": "#external-application-and-cmddata-class",
    "chunk_text": "<h4>External Application and CmdData Class</h4><p>The application defines two commands:\n\n<ul>\n<li><a href=\"#6\">CmdGeomVertices</a>: filter for all relevant concrete structural elements, analyse their geometry, create the setout point markers, and populate their shared parameters to be reflected in the predefined schedules.\n<li><a href=\"#7\">CmdRenumber</a>: renumber the main or major setout points consecutively.\n</li></li></ul>\n<p>They are presented in a custom ribbon panel defined by an external application.\n\n<p>In order to encapsulate all the information required to populate the ribbon panel push buttons, I define the following CmdData class defining the external command implementation class name, description and tool tip text:\n\n<pre class=\"code\">\n  <span class=\"blue\">class</span> <span class=\"teal\">CmdData</span>\n  {\n    <span class=\"blue\">public</span> CmdData(\n      <span class=\"blue\">string</span> name,\n      <span class=\"blue\">string</span> text,\n      <span class=\"blue\">string</span> tip )\n    {\n      Name = name;\n      Text = text;\n      Tip = tip;\n    }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Text { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Tip { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  }\n</pre>\n<p>The two instances can be populated like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">CmdData</span>[] data = <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>[] {\n \n    <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>(\n      <span class=\"maroon\">\"GeomVertices\"</span>,\n      <span class=\"maroon\">\"Mark Concrete Corners\"</span>,\n      <span class=\"maroon\">\"Place a setout point marker on every concrete corner.\"</span> ),\n \n    <span class=\"blue\">new</span> <span class=\"teal\">CmdData</span>(\n      <span class=\"maroon\">\"Renumber\"</span>,\n      <span class=\"maroon\">\"Renumber major\"</span>,\n      <span class=\"maroon\">\"Renumber major setout points\"</span> )\n  };\n</pre>\n<p>The external application OnStartup method making use of this ends up very simple:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup(\n    <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">string</span> path = System.Reflection.<span class=\"teal\">Assembly</span>\n      .GetExecutingAssembly().Location;\n \n    <span class=\"green\">// Create ribbon panel</span>\n \n    <span class=\"teal\">RibbonPanel</span> p = a.CreateRibbonPanel( Caption );\n \n    <span class=\"green\">// Create buttons</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">PushButtonData</span>&gt; buttonData\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">PushButtonData</span>&gt;(\n        data.Length );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">CmdData</span> cd <span class=\"blue\">in</span> data )\n    {\n      <span class=\"teal\">PushButtonData</span> pbd = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n        cd.Name, cd.Text, path,\n        _class_name_prefix + cd.Name );\n \n      pbd.ToolTip = cd.Tip;\n \n      buttonData.Add( pbd );\n    }\n \n    p.AddStackedItems( buttonData[0],\n      buttonData[1] );\n\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Lacking icons, my panel does not look quite as impressive as Paul's one shown above, but it does the job:\n\n<center>\n<img alt=\"Setout points ribbon panel\" src=\"img/setout_points_panel_stacked.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Shared Parameters</h4>\n<p>As mentioned above, the functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corners</a> geometry\n\ndata has already been described in previous posts.\n\n<p>The question is how to handle this information in order to make it available to the user, populate schedules, etc.\nWe ended up inserting family instances marking all concrete corners as minor setout points, and populating shared parameters on each to encapsulate the required data specifying the host element and its point coordinates.\nHere is the shared parameter file, slightly simplified for readability:\n\n<pre>\n# This is a Revit shared parameter file.\n# Do not edit manually.\n*META VERSION MINVERSION\nMETA 2 1\n*GROUP ID NAME\nGROUP  1 SetOut\n*PARAM GUID NAME             DATATYPE ... GROUP VISIBLE\nPARAM  .... Key_Setout_Point YESNO        1     1\nPARAM  .... Host_Type        TEXT         1     1\nPARAM  .... Host_Id          INTEGER      1     1\nPARAM  .... X                LENGTH       1     1\nPARAM  .... Y                LENGTH       1     1\nPARAM  .... Z                LENGTH       1     1\nPARAM  .... Point_Number     TEXT         1     1\n</pre>\n<p>Shared parameter access is implemented using their GUIDs throughout the code.\n\n\n<a name=\"5\"></a>\n<h4>Importance of Product Usage Experience, Content and Best Practices</h4>\n<p>We initially defined a parameter in the setout point family to distinguish between minor and major points, and started working on a separate user interface to toggle between the two and change the family instance colour depending on its current setting.\n\n<p>At a certain point, we discovered that it was vastly simpler to define two separate types within the family instead and use the standard Revit user interface to toggle between those.\n\n<p>It is so important for every add-in developer to know the standard Revit possibilities and best-practice workflows.\n\n<p>That can save huge amounts of unnecessary programming effort, sometimes wasted to fight against the product and its standard paradigms instead of making optimal use of it.\n\n\n<a name=\"6\"></a>\n<h4>Marking All Geometry Vertices</h4>\n<p>As said, most of the underlying functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corner</a> geometry\n\nwas already presented and discussed.\n\n<p>One additional helper method GetFamilySymbols loads the setout point family, if it is not already present, and retrieves the major and minor setout point symbols:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">FamilySymbol</span> [] GetFamilySymbols(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"blue\">bool</span> loadIt )\n{\n  <span class=\"teal\">FamilySymbol</span> [] symbols = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Family</span> family\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;(\n        e =&gt; e.Name.Equals( FamilyName ) )\n      <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n \n  <span class=\"green\">// If the family is not already loaded, do so:</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == family &amp;&amp; loadIt )\n  {\n    <span class=\"green\">// Load the setout point family</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Load Setout Point Family\"</span> );\n \n      <span class=\"blue\">if</span>( doc.LoadFamily( _family_path,\n        <span class=\"blue\">out</span> family ) )\n      {\n        tx.Commit();\n      }\n      <span class=\"blue\">else</span>\n      {\n        tx.RollBack();\n      }\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != family )\n  {\n    symbols = <span class=\"blue\">new</span> <span class=\"teal\">FamilySymbol</span>[2];\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> family.Symbols )\n    {\n      symbols[i++] = s;\n    }\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[0].Name.EndsWith( <span class=\"maroon\">\"Major\"</span> ),\n      <span class=\"maroon\">\"expected major (key) setout point first\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[1].Name.EndsWith( <span class=\"maroon\">\"Minor\"</span> ),\n      <span class=\"maroon\">\"expected minor setout point second\"</span> );\n  }\n  <span class=\"blue\">return</span> symbols;\n}\n</pre>\n<p>Then, finally, here is the external command mainline pulling it all together, i.e.\n\n<ul>\n<li>Determine project location transformation to real world coordinates.\n<li>Load or retrieve setout point family symbols.\n<li>Retrieve the relevant structural concrete elements.\n<li>Retrieve element geometry.\n<li>Place a setout point marker family instance on each geometry vertex.\n<li>Check to see whether the required shared parameters have been bound.\n</li></li></li></li></li></li></ul>\n<p>Setout points are numbered starting at one each time the command is run with no decoration or prefix.\n\n<p>Here is Execute method implementation performing these tasks:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Transform</span> projectLocationTransform\n    = GetProjectLocationTransform( doc );\n \n  <span class=\"green\">// Load or retrieve setout point family symbols:</span>\n \n  <span class=\"teal\">FamilySymbol</span> [] symbols\n    = GetFamilySymbols( doc, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    message = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to load setout point family from '{1}'.\"</span>,\n      _family_path );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = GetStructuralElements( doc );\n \n  <span class=\"green\">// Retrieve element geometry and place a</span>\n  <span class=\"green\">// setout point on each geometry corner.</span>\n \n  <span class=\"green\">// Setout points are numbered starting at </span>\n  <span class=\"green\">// one each time the command is run with</span>\n  <span class=\"green\">// no decoration or prefix whatsoever.</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Place Setout Points\"</span> );\n \n    <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n    <span class=\"green\">// On the very first attempt only, run an error </span>\n    <span class=\"green\">// check to see whether the required shared </span>\n    <span class=\"green\">// parameters have actually been bound:</span>\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n      <span class=\"blue\">string</span> desc = ElementDescription( e );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n      {\n        <span class=\"teal\">Debug</span>.Print(\n          <span class=\"maroon\">\"Unable to access element solid for element {0}.\"</span>,\n          desc );\n \n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners\n        = GetCorners( solid );\n \n      <span class=\"blue\">int</span> n = corners.Count;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} corners found:\"</span>, desc, n );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n      {\n        ++_point_number;\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>,\n          _point_number, PointString( p ) );\n \n        <span class=\"teal\">FamilyInstance</span> fi\n          = doc.Create.NewFamilyInstance( p,\n            symbols[1], <span class=\"teal\">StructuralType</span>.NonStructural );\n \n        <span class=\"green\">// Add shared parameter data immediately </span>\n        <span class=\"green\">// after creating the new family instance.</span>\n        <span class=\"green\">// The shared parameters are indeed added </span>\n        <span class=\"green\">// immediately by Revit, so we can access and</span>\n        <span class=\"green\">// populate them.</span>\n        <span class=\"green\">// No need to commit the transaction that </span>\n        <span class=\"green\">// added the family instance to give Revit </span>\n        <span class=\"green\">// a chance to add the shared parameters to </span>\n        <span class=\"green\">// it, nor to regenerate the document, we </span>\n        <span class=\"green\">// can write the shared parameter values </span>\n        <span class=\"green\">// right away.</span>\n \n        <span class=\"blue\">if</span>( first )\n        {\n          <span class=\"teal\">Parameter</span> q = fi.get_Parameter(\n            _parameter_x );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == q )\n          {\n            message =\n              <span class=\"maroon\">\"The required shared parameters \"</span>\n              + <span class=\"maroon\">\"X, Y, Z, Host_Id, Host_Type and \"</span>\n              + <span class=\"maroon\">\"Point_Number are missing.\"</span>;\n \n            tx.RollBack();\n \n            <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n          }\n          first = <span class=\"blue\">false</span>;\n        }\n \n        <span class=\"green\">// Transform insertion point by applying</span>\n        <span class=\"green\">// project location transformation.</span>\n \n        <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n \n        fi.get_Parameter( _parameter_host_type ).Set(\n          GetHostType( e ).ToString() );\n \n        fi.get_Parameter( _parameter_host_id ).Set(\n          e.Id.IntegerValue );\n \n        fi.get_Parameter( _parameter_point_nr ).Set(\n          _point_number.ToString() );\n \n        fi.get_Parameter( _parameter_x ).Set( r2.X );\n        fi.get_Parameter( _parameter_y ).Set( r2.Y );\n        fi.get_Parameter( _parameter_z ).Set( r2.Z );\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>That's about it... one more little thing:\n\n\n<a name=\"7\"></a>\n<h4>Major Setout Point Renumbering</h4>\n<p>Such irrational creatures, these human beings.\n\n<p>Users apparently insist on consecutive numbering of items they deal with.\n\n<p>We therefore implemented a second command named CmdRenumber to renumber the major points.\n\n<p>They are basically renumbered randomly, since all major points are selected using a filtered element collector.\nWe iterate over the result, assign a consecutive number to each instance, and store it in the Point_Number text-valued shared parameter with a \"SOP \" prefix string _sop_prefix.\n\n<p>The key setout points are family instances with the generic model category and the major setout point type.\n\n<p>The external command Execute implementation thus ends up looking like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilySymbol</span>[] symbols\n    = <span class=\"teal\">CmdGeomVertices</span>.GetFamilySymbols(\n      doc, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Setout Points\"</span>,\n      <span class=\"maroon\">\"Setout point family not loaded, \"</span>\n      + <span class=\"maroon\">\"so no setout points present.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"teal\">FamilyInstanceFilter</span> instanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( doc, symbols[0].Id );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( instanceFilter );\n \n  <span class=\"teal\">Guid</span> guid = <span class=\"teal\">CmdGeomVertices</span>._parameter_point_nr;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Renumber Setout Points\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">string</span> s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> p <span class=\"blue\">in</span> col )\n    {\n      s = _sop_prefix + ( ++i ).ToString();\n \n      p.get_Parameter( guid ).Set( s );\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For all further details, please refer to the one and only really trustworthy reference, the full source code.\n\n<p>Here is\n\n<a href=\"zip/SetoutPoints.zip\">SetoutPoints.zip</a>\n\nincluding the complete source code, Visual Studio solution, add-in manifest and setout point marker family.\n\n<p>For easier testing, here is also a\n\n<a href=\"src/SetoutPoints/test/rst_basic_sample_project_with_location.rvt\">sample project</a> based\n\non the standard rst_basic_sample_project.rvt with a non-standard project location and the setout point schedules added.\n\n<p><strong>Addendum:</strong> I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">\nmigrated this to Revit 2015</a> and\n\ncreated the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> for it.</p>\n<!--\n\n<hr>\n\n<a href=\"\">\n</a>\n\n<a name=\"\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n<p>Test shared parameter availability\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0806_setout_points",
    "header_text": "Shared Parameters",
    "local_header_href": "#shared-parameters",
    "chunk_text": "<h4>Shared Parameters</h4><p>As mentioned above, the functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corners</a> geometry\n\ndata has already been described in previous posts.\n\n<p>The question is how to handle this information in order to make it available to the user, populate schedules, etc.\nWe ended up inserting family instances marking all concrete corners as minor setout points, and populating shared parameters on each to encapsulate the required data specifying the host element and its point coordinates.\nHere is the shared parameter file, slightly simplified for readability:\n\n<pre>\n# This is a Revit shared parameter file.\n# Do not edit manually.\n*META VERSION MINVERSION\nMETA 2 1\n*GROUP ID NAME\nGROUP  1 SetOut\n*PARAM GUID NAME             DATATYPE ... GROUP VISIBLE\nPARAM  .... Key_Setout_Point YESNO        1     1\nPARAM  .... Host_Type        TEXT         1     1\nPARAM  .... Host_Id          INTEGER      1     1\nPARAM  .... X                LENGTH       1     1\nPARAM  .... Y                LENGTH       1     1\nPARAM  .... Z                LENGTH       1     1\nPARAM  .... Point_Number     TEXT         1     1\n</pre>\n<p>Shared parameter access is implemented using their GUIDs throughout the code.\n\n\n<a name=\"5\"></a>\n<h4>Importance of Product Usage Experience, Content and Best Practices</h4>\n<p>We initially defined a parameter in the setout point family to distinguish between minor and major points, and started working on a separate user interface to toggle between the two and change the family instance colour depending on its current setting.\n\n<p>At a certain point, we discovered that it was vastly simpler to define two separate types within the family instead and use the standard Revit user interface to toggle between those.\n\n<p>It is so important for every add-in developer to know the standard Revit possibilities and best-practice workflows.\n\n<p>That can save huge amounts of unnecessary programming effort, sometimes wasted to fight against the product and its standard paradigms instead of making optimal use of it.\n\n\n<a name=\"6\"></a>\n<h4>Marking All Geometry Vertices</h4>\n<p>As said, most of the underlying functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corner</a> geometry\n\nwas already presented and discussed.\n\n<p>One additional helper method GetFamilySymbols loads the setout point family, if it is not already present, and retrieves the major and minor setout point symbols:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">FamilySymbol</span> [] GetFamilySymbols(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"blue\">bool</span> loadIt )\n{\n  <span class=\"teal\">FamilySymbol</span> [] symbols = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Family</span> family\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;(\n        e =&gt; e.Name.Equals( FamilyName ) )\n      <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n \n  <span class=\"green\">// If the family is not already loaded, do so:</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == family &amp;&amp; loadIt )\n  {\n    <span class=\"green\">// Load the setout point family</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Load Setout Point Family\"</span> );\n \n      <span class=\"blue\">if</span>( doc.LoadFamily( _family_path,\n        <span class=\"blue\">out</span> family ) )\n      {\n        tx.Commit();\n      }\n      <span class=\"blue\">else</span>\n      {\n        tx.RollBack();\n      }\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != family )\n  {\n    symbols = <span class=\"blue\">new</span> <span class=\"teal\">FamilySymbol</span>[2];\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> family.Symbols )\n    {\n      symbols[i++] = s;\n    }\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[0].Name.EndsWith( <span class=\"maroon\">\"Major\"</span> ),\n      <span class=\"maroon\">\"expected major (key) setout point first\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[1].Name.EndsWith( <span class=\"maroon\">\"Minor\"</span> ),\n      <span class=\"maroon\">\"expected minor setout point second\"</span> );\n  }\n  <span class=\"blue\">return</span> symbols;\n}\n</pre>\n<p>Then, finally, here is the external command mainline pulling it all together, i.e.\n\n<ul>\n<li>Determine project location transformation to real world coordinates.\n<li>Load or retrieve setout point family symbols.\n<li>Retrieve the relevant structural concrete elements.\n<li>Retrieve element geometry.\n<li>Place a setout point marker family instance on each geometry vertex.\n<li>Check to see whether the required shared parameters have been bound.\n</li></li></li></li></li></li></ul>\n<p>Setout points are numbered starting at one each time the command is run with no decoration or prefix.\n\n<p>Here is Execute method implementation performing these tasks:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Transform</span> projectLocationTransform\n    = GetProjectLocationTransform( doc );\n \n  <span class=\"green\">// Load or retrieve setout point family symbols:</span>\n \n  <span class=\"teal\">FamilySymbol</span> [] symbols\n    = GetFamilySymbols( doc, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    message = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to load setout point family from '{1}'.\"</span>,\n      _family_path );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = GetStructuralElements( doc );\n \n  <span class=\"green\">// Retrieve element geometry and place a</span>\n  <span class=\"green\">// setout point on each geometry corner.</span>\n \n  <span class=\"green\">// Setout points are numbered starting at </span>\n  <span class=\"green\">// one each time the command is run with</span>\n  <span class=\"green\">// no decoration or prefix whatsoever.</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Place Setout Points\"</span> );\n \n    <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n    <span class=\"green\">// On the very first attempt only, run an error </span>\n    <span class=\"green\">// check to see whether the required shared </span>\n    <span class=\"green\">// parameters have actually been bound:</span>\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n      <span class=\"blue\">string</span> desc = ElementDescription( e );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n      {\n        <span class=\"teal\">Debug</span>.Print(\n          <span class=\"maroon\">\"Unable to access element solid for element {0}.\"</span>,\n          desc );\n \n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners\n        = GetCorners( solid );\n \n      <span class=\"blue\">int</span> n = corners.Count;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} corners found:\"</span>, desc, n );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n      {\n        ++_point_number;\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>,\n          _point_number, PointString( p ) );\n \n        <span class=\"teal\">FamilyInstance</span> fi\n          = doc.Create.NewFamilyInstance( p,\n            symbols[1], <span class=\"teal\">StructuralType</span>.NonStructural );\n \n        <span class=\"green\">// Add shared parameter data immediately </span>\n        <span class=\"green\">// after creating the new family instance.</span>\n        <span class=\"green\">// The shared parameters are indeed added </span>\n        <span class=\"green\">// immediately by Revit, so we can access and</span>\n        <span class=\"green\">// populate them.</span>\n        <span class=\"green\">// No need to commit the transaction that </span>\n        <span class=\"green\">// added the family instance to give Revit </span>\n        <span class=\"green\">// a chance to add the shared parameters to </span>\n        <span class=\"green\">// it, nor to regenerate the document, we </span>\n        <span class=\"green\">// can write the shared parameter values </span>\n        <span class=\"green\">// right away.</span>\n \n        <span class=\"blue\">if</span>( first )\n        {\n          <span class=\"teal\">Parameter</span> q = fi.get_Parameter(\n            _parameter_x );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == q )\n          {\n            message =\n              <span class=\"maroon\">\"The required shared parameters \"</span>\n              + <span class=\"maroon\">\"X, Y, Z, Host_Id, Host_Type and \"</span>\n              + <span class=\"maroon\">\"Point_Number are missing.\"</span>;\n \n            tx.RollBack();\n \n            <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n          }\n          first = <span class=\"blue\">false</span>;\n        }\n \n        <span class=\"green\">// Transform insertion point by applying</span>\n        <span class=\"green\">// project location transformation.</span>\n \n        <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n \n        fi.get_Parameter( _parameter_host_type ).Set(\n          GetHostType( e ).ToString() );\n \n        fi.get_Parameter( _parameter_host_id ).Set(\n          e.Id.IntegerValue );\n \n        fi.get_Parameter( _parameter_point_nr ).Set(\n          _point_number.ToString() );\n \n        fi.get_Parameter( _parameter_x ).Set( r2.X );\n        fi.get_Parameter( _parameter_y ).Set( r2.Y );\n        fi.get_Parameter( _parameter_z ).Set( r2.Z );\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>That's about it... one more little thing:\n\n\n<a name=\"7\"></a>\n<h4>Major Setout Point Renumbering</h4>\n<p>Such irrational creatures, these human beings.\n\n<p>Users apparently insist on consecutive numbering of items they deal with.\n\n<p>We therefore implemented a second command named CmdRenumber to renumber the major points.\n\n<p>They are basically renumbered randomly, since all major points are selected using a filtered element collector.\nWe iterate over the result, assign a consecutive number to each instance, and store it in the Point_Number text-valued shared parameter with a \"SOP \" prefix string _sop_prefix.\n\n<p>The key setout points are family instances with the generic model category and the major setout point type.\n\n<p>The external command Execute implementation thus ends up looking like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilySymbol</span>[] symbols\n    = <span class=\"teal\">CmdGeomVertices</span>.GetFamilySymbols(\n      doc, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Setout Points\"</span>,\n      <span class=\"maroon\">\"Setout point family not loaded, \"</span>\n      + <span class=\"maroon\">\"so no setout points present.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"teal\">FamilyInstanceFilter</span> instanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( doc, symbols[0].Id );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( instanceFilter );\n \n  <span class=\"teal\">Guid</span> guid = <span class=\"teal\">CmdGeomVertices</span>._parameter_point_nr;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Renumber Setout Points\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">string</span> s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> p <span class=\"blue\">in</span> col )\n    {\n      s = _sop_prefix + ( ++i ).ToString();\n \n      p.get_Parameter( guid ).Set( s );\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For all further details, please refer to the one and only really trustworthy reference, the full source code.\n\n<p>Here is\n\n<a href=\"zip/SetoutPoints.zip\">SetoutPoints.zip</a>\n\nincluding the complete source code, Visual Studio solution, add-in manifest and setout point marker family.\n\n<p>For easier testing, here is also a\n\n<a href=\"src/SetoutPoints/test/rst_basic_sample_project_with_location.rvt\">sample project</a> based\n\non the standard rst_basic_sample_project.rvt with a non-standard project location and the setout point schedules added.\n\n<p><strong>Addendum:</strong> I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">\nmigrated this to Revit 2015</a> and\n\ncreated the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> for it.</p>\n<!--\n\n<hr>\n\n<a href=\"\">\n</a>\n\n<a name=\"\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n<p>Test shared parameter availability\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0806_setout_points",
    "header_text": "Importance of Product Usage Experience, Content and Best Practices",
    "local_header_href": "#importance-of-product-usage-experience-content-and-best-practices",
    "chunk_text": "<h4>Importance of Product Usage Experience, Content and Best Practices</h4><p>We initially defined a parameter in the setout point family to distinguish between minor and major points, and started working on a separate user interface to toggle between the two and change the family instance colour depending on its current setting.\n\n<p>At a certain point, we discovered that it was vastly simpler to define two separate types within the family instead and use the standard Revit user interface to toggle between those.\n\n<p>It is so important for every add-in developer to know the standard Revit possibilities and best-practice workflows.\n\n<p>That can save huge amounts of unnecessary programming effort, sometimes wasted to fight against the product and its standard paradigms instead of making optimal use of it.\n\n\n<a name=\"6\"></a>\n<h4>Marking All Geometry Vertices</h4>\n<p>As said, most of the underlying functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corner</a> geometry\n\nwas already presented and discussed.\n\n<p>One additional helper method GetFamilySymbols loads the setout point family, if it is not already present, and retrieves the major and minor setout point symbols:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">FamilySymbol</span> [] GetFamilySymbols(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"blue\">bool</span> loadIt )\n{\n  <span class=\"teal\">FamilySymbol</span> [] symbols = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Family</span> family\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;(\n        e =&gt; e.Name.Equals( FamilyName ) )\n      <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n \n  <span class=\"green\">// If the family is not already loaded, do so:</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == family &amp;&amp; loadIt )\n  {\n    <span class=\"green\">// Load the setout point family</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Load Setout Point Family\"</span> );\n \n      <span class=\"blue\">if</span>( doc.LoadFamily( _family_path,\n        <span class=\"blue\">out</span> family ) )\n      {\n        tx.Commit();\n      }\n      <span class=\"blue\">else</span>\n      {\n        tx.RollBack();\n      }\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != family )\n  {\n    symbols = <span class=\"blue\">new</span> <span class=\"teal\">FamilySymbol</span>[2];\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> family.Symbols )\n    {\n      symbols[i++] = s;\n    }\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[0].Name.EndsWith( <span class=\"maroon\">\"Major\"</span> ),\n      <span class=\"maroon\">\"expected major (key) setout point first\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[1].Name.EndsWith( <span class=\"maroon\">\"Minor\"</span> ),\n      <span class=\"maroon\">\"expected minor setout point second\"</span> );\n  }\n  <span class=\"blue\">return</span> symbols;\n}\n</pre>\n<p>Then, finally, here is the external command mainline pulling it all together, i.e.\n\n<ul>\n<li>Determine project location transformation to real world coordinates.\n<li>Load or retrieve setout point family symbols.\n<li>Retrieve the relevant structural concrete elements.\n<li>Retrieve element geometry.\n<li>Place a setout point marker family instance on each geometry vertex.\n<li>Check to see whether the required shared parameters have been bound.\n</li></li></li></li></li></li></ul>\n<p>Setout points are numbered starting at one each time the command is run with no decoration or prefix.\n\n<p>Here is Execute method implementation performing these tasks:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Transform</span> projectLocationTransform\n    = GetProjectLocationTransform( doc );\n \n  <span class=\"green\">// Load or retrieve setout point family symbols:</span>\n \n  <span class=\"teal\">FamilySymbol</span> [] symbols\n    = GetFamilySymbols( doc, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    message = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to load setout point family from '{1}'.\"</span>,\n      _family_path );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = GetStructuralElements( doc );\n \n  <span class=\"green\">// Retrieve element geometry and place a</span>\n  <span class=\"green\">// setout point on each geometry corner.</span>\n \n  <span class=\"green\">// Setout points are numbered starting at </span>\n  <span class=\"green\">// one each time the command is run with</span>\n  <span class=\"green\">// no decoration or prefix whatsoever.</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Place Setout Points\"</span> );\n \n    <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n    <span class=\"green\">// On the very first attempt only, run an error </span>\n    <span class=\"green\">// check to see whether the required shared </span>\n    <span class=\"green\">// parameters have actually been bound:</span>\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n      <span class=\"blue\">string</span> desc = ElementDescription( e );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n      {\n        <span class=\"teal\">Debug</span>.Print(\n          <span class=\"maroon\">\"Unable to access element solid for element {0}.\"</span>,\n          desc );\n \n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners\n        = GetCorners( solid );\n \n      <span class=\"blue\">int</span> n = corners.Count;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} corners found:\"</span>, desc, n );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n      {\n        ++_point_number;\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>,\n          _point_number, PointString( p ) );\n \n        <span class=\"teal\">FamilyInstance</span> fi\n          = doc.Create.NewFamilyInstance( p,\n            symbols[1], <span class=\"teal\">StructuralType</span>.NonStructural );\n \n        <span class=\"green\">// Add shared parameter data immediately </span>\n        <span class=\"green\">// after creating the new family instance.</span>\n        <span class=\"green\">// The shared parameters are indeed added </span>\n        <span class=\"green\">// immediately by Revit, so we can access and</span>\n        <span class=\"green\">// populate them.</span>\n        <span class=\"green\">// No need to commit the transaction that </span>\n        <span class=\"green\">// added the family instance to give Revit </span>\n        <span class=\"green\">// a chance to add the shared parameters to </span>\n        <span class=\"green\">// it, nor to regenerate the document, we </span>\n        <span class=\"green\">// can write the shared parameter values </span>\n        <span class=\"green\">// right away.</span>\n \n        <span class=\"blue\">if</span>( first )\n        {\n          <span class=\"teal\">Parameter</span> q = fi.get_Parameter(\n            _parameter_x );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == q )\n          {\n            message =\n              <span class=\"maroon\">\"The required shared parameters \"</span>\n              + <span class=\"maroon\">\"X, Y, Z, Host_Id, Host_Type and \"</span>\n              + <span class=\"maroon\">\"Point_Number are missing.\"</span>;\n \n            tx.RollBack();\n \n            <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n          }\n          first = <span class=\"blue\">false</span>;\n        }\n \n        <span class=\"green\">// Transform insertion point by applying</span>\n        <span class=\"green\">// project location transformation.</span>\n \n        <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n \n        fi.get_Parameter( _parameter_host_type ).Set(\n          GetHostType( e ).ToString() );\n \n        fi.get_Parameter( _parameter_host_id ).Set(\n          e.Id.IntegerValue );\n \n        fi.get_Parameter( _parameter_point_nr ).Set(\n          _point_number.ToString() );\n \n        fi.get_Parameter( _parameter_x ).Set( r2.X );\n        fi.get_Parameter( _parameter_y ).Set( r2.Y );\n        fi.get_Parameter( _parameter_z ).Set( r2.Z );\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>That's about it... one more little thing:\n\n\n<a name=\"7\"></a>\n<h4>Major Setout Point Renumbering</h4>\n<p>Such irrational creatures, these human beings.\n\n<p>Users apparently insist on consecutive numbering of items they deal with.\n\n<p>We therefore implemented a second command named CmdRenumber to renumber the major points.\n\n<p>They are basically renumbered randomly, since all major points are selected using a filtered element collector.\nWe iterate over the result, assign a consecutive number to each instance, and store it in the Point_Number text-valued shared parameter with a \"SOP \" prefix string _sop_prefix.\n\n<p>The key setout points are family instances with the generic model category and the major setout point type.\n\n<p>The external command Execute implementation thus ends up looking like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilySymbol</span>[] symbols\n    = <span class=\"teal\">CmdGeomVertices</span>.GetFamilySymbols(\n      doc, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Setout Points\"</span>,\n      <span class=\"maroon\">\"Setout point family not loaded, \"</span>\n      + <span class=\"maroon\">\"so no setout points present.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"teal\">FamilyInstanceFilter</span> instanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( doc, symbols[0].Id );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( instanceFilter );\n \n  <span class=\"teal\">Guid</span> guid = <span class=\"teal\">CmdGeomVertices</span>._parameter_point_nr;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Renumber Setout Points\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">string</span> s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> p <span class=\"blue\">in</span> col )\n    {\n      s = _sop_prefix + ( ++i ).ToString();\n \n      p.get_Parameter( guid ).Set( s );\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For all further details, please refer to the one and only really trustworthy reference, the full source code.\n\n<p>Here is\n\n<a href=\"zip/SetoutPoints.zip\">SetoutPoints.zip</a>\n\nincluding the complete source code, Visual Studio solution, add-in manifest and setout point marker family.\n\n<p>For easier testing, here is also a\n\n<a href=\"src/SetoutPoints/test/rst_basic_sample_project_with_location.rvt\">sample project</a> based\n\non the standard rst_basic_sample_project.rvt with a non-standard project location and the setout point schedules added.\n\n<p><strong>Addendum:</strong> I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">\nmigrated this to Revit 2015</a> and\n\ncreated the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> for it.</p>\n<!--\n\n<hr>\n\n<a href=\"\">\n</a>\n\n<a name=\"\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n<p>Test shared parameter availability\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0806_setout_points",
    "header_text": "Marking All Geometry Vertices",
    "local_header_href": "#marking-all-geometry-vertices",
    "chunk_text": "<h4>Marking All Geometry Vertices</h4><p>As said, most of the underlying functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/real-world-concrete-corner-coordinates.html\">\nretrieve the concrete corner</a> geometry\n\nwas already presented and discussed.\n\n<p>One additional helper method GetFamilySymbols loads the setout point family, if it is not already present, and retrieves the major and minor setout point symbols:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">FamilySymbol</span> [] GetFamilySymbols(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"blue\">bool</span> loadIt )\n{\n  <span class=\"teal\">FamilySymbol</span> [] symbols = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Family</span> family\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n      .FirstOrDefault&lt;<span class=\"teal\">Element</span>&gt;(\n        e =&gt; e.Name.Equals( FamilyName ) )\n      <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n \n  <span class=\"green\">// If the family is not already loaded, do so:</span>\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == family &amp;&amp; loadIt )\n  {\n    <span class=\"green\">// Load the setout point family</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n      doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Load Setout Point Family\"</span> );\n \n      <span class=\"blue\">if</span>( doc.LoadFamily( _family_path,\n        <span class=\"blue\">out</span> family ) )\n      {\n        tx.Commit();\n      }\n      <span class=\"blue\">else</span>\n      {\n        tx.RollBack();\n      }\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != family )\n  {\n    symbols = <span class=\"blue\">new</span> <span class=\"teal\">FamilySymbol</span>[2];\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> family.Symbols )\n    {\n      symbols[i++] = s;\n    }\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[0].Name.EndsWith( <span class=\"maroon\">\"Major\"</span> ),\n      <span class=\"maroon\">\"expected major (key) setout point first\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      symbols[1].Name.EndsWith( <span class=\"maroon\">\"Minor\"</span> ),\n      <span class=\"maroon\">\"expected minor setout point second\"</span> );\n  }\n  <span class=\"blue\">return</span> symbols;\n}\n</pre>\n<p>Then, finally, here is the external command mainline pulling it all together, i.e.\n\n<ul>\n<li>Determine project location transformation to real world coordinates.\n<li>Load or retrieve setout point family symbols.\n<li>Retrieve the relevant structural concrete elements.\n<li>Retrieve element geometry.\n<li>Place a setout point marker family instance on each geometry vertex.\n<li>Check to see whether the required shared parameters have been bound.\n</li></li></li></li></li></li></ul>\n<p>Setout points are numbered starting at one each time the command is run with no decoration or prefix.\n\n<p>Here is Execute method implementation performing these tasks:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Transform</span> projectLocationTransform\n    = GetProjectLocationTransform( doc );\n \n  <span class=\"green\">// Load or retrieve setout point family symbols:</span>\n \n  <span class=\"teal\">FamilySymbol</span> [] symbols\n    = GetFamilySymbols( doc, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    message = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Unable to load setout point family from '{1}'.\"</span>,\n      _family_path );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = GetStructuralElements( doc );\n \n  <span class=\"green\">// Retrieve element geometry and place a</span>\n  <span class=\"green\">// setout point on each geometry corner.</span>\n \n  <span class=\"green\">// Setout points are numbered starting at </span>\n  <span class=\"green\">// one each time the command is run with</span>\n  <span class=\"green\">// no decoration or prefix whatsoever.</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Place Setout Points\"</span> );\n \n    <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n    <span class=\"green\">// On the very first attempt only, run an error </span>\n    <span class=\"green\">// check to see whether the required shared </span>\n    <span class=\"green\">// parameters have actually been bound:</span>\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n      <span class=\"blue\">string</span> desc = ElementDescription( e );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n      {\n        <span class=\"teal\">Debug</span>.Print(\n          <span class=\"maroon\">\"Unable to access element solid for element {0}.\"</span>,\n          desc );\n \n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"teal\">XYZ</span>, <span class=\"blue\">int</span>&gt; corners\n        = GetCorners( solid );\n \n      <span class=\"blue\">int</span> n = corners.Count;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1} corners found:\"</span>, desc, n );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> corners.Keys )\n      {\n        ++_point_number;\n \n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1}\"</span>,\n          _point_number, PointString( p ) );\n \n        <span class=\"teal\">FamilyInstance</span> fi\n          = doc.Create.NewFamilyInstance( p,\n            symbols[1], <span class=\"teal\">StructuralType</span>.NonStructural );\n \n        <span class=\"green\">// Add shared parameter data immediately </span>\n        <span class=\"green\">// after creating the new family instance.</span>\n        <span class=\"green\">// The shared parameters are indeed added </span>\n        <span class=\"green\">// immediately by Revit, so we can access and</span>\n        <span class=\"green\">// populate them.</span>\n        <span class=\"green\">// No need to commit the transaction that </span>\n        <span class=\"green\">// added the family instance to give Revit </span>\n        <span class=\"green\">// a chance to add the shared parameters to </span>\n        <span class=\"green\">// it, nor to regenerate the document, we </span>\n        <span class=\"green\">// can write the shared parameter values </span>\n        <span class=\"green\">// right away.</span>\n \n        <span class=\"blue\">if</span>( first )\n        {\n          <span class=\"teal\">Parameter</span> q = fi.get_Parameter(\n            _parameter_x );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == q )\n          {\n            message =\n              <span class=\"maroon\">\"The required shared parameters \"</span>\n              + <span class=\"maroon\">\"X, Y, Z, Host_Id, Host_Type and \"</span>\n              + <span class=\"maroon\">\"Point_Number are missing.\"</span>;\n \n            tx.RollBack();\n \n            <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n          }\n          first = <span class=\"blue\">false</span>;\n        }\n \n        <span class=\"green\">// Transform insertion point by applying</span>\n        <span class=\"green\">// project location transformation.</span>\n \n        <span class=\"teal\">XYZ</span> r2 = projectLocationTransform.OfPoint( p );\n \n        fi.get_Parameter( _parameter_host_type ).Set(\n          GetHostType( e ).ToString() );\n \n        fi.get_Parameter( _parameter_host_id ).Set(\n          e.Id.IntegerValue );\n \n        fi.get_Parameter( _parameter_point_nr ).Set(\n          _point_number.ToString() );\n \n        fi.get_Parameter( _parameter_x ).Set( r2.X );\n        fi.get_Parameter( _parameter_y ).Set( r2.Y );\n        fi.get_Parameter( _parameter_z ).Set( r2.Z );\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>That's about it... one more little thing:\n\n\n<a name=\"7\"></a>\n<h4>Major Setout Point Renumbering</h4>\n<p>Such irrational creatures, these human beings.\n\n<p>Users apparently insist on consecutive numbering of items they deal with.\n\n<p>We therefore implemented a second command named CmdRenumber to renumber the major points.\n\n<p>They are basically renumbered randomly, since all major points are selected using a filtered element collector.\nWe iterate over the result, assign a consecutive number to each instance, and store it in the Point_Number text-valued shared parameter with a \"SOP \" prefix string _sop_prefix.\n\n<p>The key setout points are family instances with the generic model category and the major setout point type.\n\n<p>The external command Execute implementation thus ends up looking like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilySymbol</span>[] symbols\n    = <span class=\"teal\">CmdGeomVertices</span>.GetFamilySymbols(\n      doc, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Setout Points\"</span>,\n      <span class=\"maroon\">\"Setout point family not loaded, \"</span>\n      + <span class=\"maroon\">\"so no setout points present.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"teal\">FamilyInstanceFilter</span> instanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( doc, symbols[0].Id );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( instanceFilter );\n \n  <span class=\"teal\">Guid</span> guid = <span class=\"teal\">CmdGeomVertices</span>._parameter_point_nr;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Renumber Setout Points\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">string</span> s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> p <span class=\"blue\">in</span> col )\n    {\n      s = _sop_prefix + ( ++i ).ToString();\n \n      p.get_Parameter( guid ).Set( s );\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For all further details, please refer to the one and only really trustworthy reference, the full source code.\n\n<p>Here is\n\n<a href=\"zip/SetoutPoints.zip\">SetoutPoints.zip</a>\n\nincluding the complete source code, Visual Studio solution, add-in manifest and setout point marker family.\n\n<p>For easier testing, here is also a\n\n<a href=\"src/SetoutPoints/test/rst_basic_sample_project_with_location.rvt\">sample project</a> based\n\non the standard rst_basic_sample_project.rvt with a non-standard project location and the setout point schedules added.\n\n<p><strong>Addendum:</strong> I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">\nmigrated this to Revit 2015</a> and\n\ncreated the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> for it.</p>\n<!--\n\n<hr>\n\n<a href=\"\">\n</a>\n\n<a name=\"\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n<p>Test shared parameter availability\n\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0806_setout_points",
    "header_text": "Major Setout Point Renumbering",
    "local_header_href": "#major-setout-point-renumbering",
    "chunk_text": "<h4>Major Setout Point Renumbering</h4><p>Such irrational creatures, these human beings.\n\n<p>Users apparently insist on consecutive numbering of items they deal with.\n\n<p>We therefore implemented a second command named CmdRenumber to renumber the major points.\n\n<p>They are basically renumbered randomly, since all major points are selected using a filtered element collector.\nWe iterate over the result, assign a consecutive number to each instance, and store it in the Point_Number text-valued shared parameter with a \"SOP \" prefix string _sop_prefix.\n\n<p>The key setout points are family instances with the generic model category and the major setout point type.\n\n<p>The external command Execute implementation thus ends up looking like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilySymbol</span>[] symbols\n    = <span class=\"teal\">CmdGeomVertices</span>.GetFamilySymbols(\n      doc, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == symbols )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Setout Points\"</span>,\n      <span class=\"maroon\">\"Setout point family not loaded, \"</span>\n      + <span class=\"maroon\">\"so no setout points present.\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"teal\">FamilyInstanceFilter</span> instanceFilter\n    = <span class=\"blue\">new</span> <span class=\"teal\">FamilyInstanceFilter</span>( doc, symbols[0].Id );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( instanceFilter );\n \n  <span class=\"teal\">Guid</span> guid = <span class=\"teal\">CmdGeomVertices</span>._parameter_point_nr;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Renumber Setout Points\"</span> );\n \n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">string</span> s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> p <span class=\"blue\">in</span> col )\n    {\n      s = _sop_prefix + ( ++i ).ToString();\n \n      p.get_Parameter( guid ).Set( s );\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>For all further details, please refer to the one and only really trustworthy reference, the full source code.\n\n<p>Here is\n\n<a href=\"zip/SetoutPoints.zip\">SetoutPoints.zip</a>\n\nincluding the complete source code, Visual Studio solution, add-in manifest and setout point marker family.\n\n<p>For easier testing, here is also a\n\n<a href=\"src/SetoutPoints/test/rst_basic_sample_project_with_location.rvt\">sample project</a> based\n\non the standard rst_basic_sample_project.rvt with a non-standard project location and the setout point schedules added.\n\n<p><strong>Addendum:</strong> I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/concrete-setout-points-for-revit-structure-2015.html\">\nmigrated this to Revit 2015</a> and\n\ncreated the\n\n<a href=\"https://github.com/jeremytammik/SetoutPoints\">\nSetoutPoints GitHub repository</a> for it.</p>\n<!--\n\n<hr>\n\n<a href=\"\">\n</a>\n\n<a name=\"\"></a>\n\n<h4></h4>\n\n<pre class=\"code\">\n</pre>\n\n<p>Test shared parameter availability\n\n-->\n</p></p></p></p></p></p></p></p></p>"
  }
]