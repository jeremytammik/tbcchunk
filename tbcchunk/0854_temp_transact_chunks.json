[
  {
    "original_filename": "0854_temp_transact",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0854_temp_transact",
    "header_text": "Temporary Transaction Trick Touchup",
    "local_header_href": "#temporary-transaction-trick-touchup",
    "chunk_text": "<h3>Temporary Transaction Trick Touchup</h3><p>I mentioned a number of uses of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/the-temporary-transaction-trick-for-gross-slab-data.html\">\ntemporary transaction trick</a> a\n\nfew days back.\n\n<p>Autodesk's own Revit API transaction expert Arnošt Löbel has a very important point to add to that discussion:\n\n<p>The procedure as described is not always going to work. \n\n<p>First of all, you need to regenerate manually before retrieving any modified geometry; even that is not always guaranteed to give you the accurate and proper geometry. \n\n<p>Many times you will need to actually commit the 'temporary' transaction, since that is the only way to guarantee that all changes propagate though the model. \n\n<p>In order to undo the temporary transaction, you need to enclose it within a transaction group and roll back that group at the end. \nIt goes as follows:\n\n<ol>\n<li>Start a transaction group.\n<li>Start a transaction\n<li>Make changes.\n<li>Commit the transaction\n<li>Retrieve changed geometry\n<li>Roll back the transaction group\n</li></li></li></li></li></li></ol>\n<p>Unfortunately, all too many are unaware of the fact that it is safe to read a model only after regeneration, and sometimes only after committing the open transaction. \nThis is not only related to the 'temporary transaction' trick, it is simply a matter of fact: one should query model geometry only between transactions, or at least after regeneration (and auto-joining, if appropriate).\n\n<p>Many thanks to Arnošt for this important enhancement!\n\n\n<a name=\"2\"></a>\n<h4>Cloud Based Team Foundation Service</h4>\n<p>We have seen how \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/divideparts-in-f.html#4\">\nGit and Github</a> can\n\nsimplify global source code management and sharing, and Victor demonstrates one aspect of this by regularly providing his samples such as the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/drive-revit-through-a-wcf-service.html\">\nRevit external access demo</a> via \n\nthat platform.\n\n<p>As you obviously know, Autodesk is also driving hard and moving fast towards providing innovative and empowering cloud-based solutions, e.g.\n\n<a href=\"https://360.autodesk.com\">\nAutodesk 360</a>,\n\n<a href=\"http://www.autodeskplm360.com\">\nPLM 360</a> and\n\n<a href=\"https://bim360.autodesk.com\">\nBIM 360 Glue</a>.\n\n<p>Now Microsoft joined the club, announcing its own cloud-based software project management platform, e.g. for Visual Studio, the \n\n<a href=\"http://tfs.visualstudio.com\">\nTeam Foundation Service</a>.\n\n<p>You can sign up for a free preview account right away, if you are interested.\n\n\n<a name=\"3\"></a>\n<h4>Rotating Annotation Symbol</h4>\n<p>Saikat Bhattacharya discusses using the AnnotationSymbol.Location.Rotate and ElementTransformUtils.RotateElement methods to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/11/rotating-annotationsymbols-using-the-revit-api.html\">\nrotate an annotation symbol</a>, \n\nand presents a sample code snippet implementing it.\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0854_temp_transact",
    "header_text": "Cloud Based Team Foundation Service",
    "local_header_href": "#cloud-based-team-foundation-service",
    "chunk_text": "<h4>Cloud Based Team Foundation Service</h4><p>We have seen how \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/divideparts-in-f.html#4\">\nGit and Github</a> can\n\nsimplify global source code management and sharing, and Victor demonstrates one aspect of this by regularly providing his samples such as the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/drive-revit-through-a-wcf-service.html\">\nRevit external access demo</a> via \n\nthat platform.\n\n<p>As you obviously know, Autodesk is also driving hard and moving fast towards providing innovative and empowering cloud-based solutions, e.g.\n\n<a href=\"https://360.autodesk.com\">\nAutodesk 360</a>,\n\n<a href=\"http://www.autodeskplm360.com\">\nPLM 360</a> and\n\n<a href=\"https://bim360.autodesk.com\">\nBIM 360 Glue</a>.\n\n<p>Now Microsoft joined the club, announcing its own cloud-based software project management platform, e.g. for Visual Studio, the \n\n<a href=\"http://tfs.visualstudio.com\">\nTeam Foundation Service</a>.\n\n<p>You can sign up for a free preview account right away, if you are interested.\n\n\n<a name=\"3\"></a>\n<h4>Rotating Annotation Symbol</h4>\n<p>Saikat Bhattacharya discusses using the AnnotationSymbol.Location.Rotate and ElementTransformUtils.RotateElement methods to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/11/rotating-annotationsymbols-using-the-revit-api.html\">\nrotate an annotation symbol</a>, \n\nand presents a sample code snippet implementing it.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0854_temp_transact",
    "header_text": "Rotating Annotation Symbol",
    "local_header_href": "#rotating-annotation-symbol",
    "chunk_text": "<h4>Rotating Annotation Symbol</h4><p>Saikat Bhattacharya discusses using the AnnotationSymbol.Location.Rotate and ElementTransformUtils.RotateElement methods to \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/11/rotating-annotationsymbols-using-the-revit-api.html\">\nrotate an annotation symbol</a>, \n\nand presents a sample code snippet implementing it.\n</p>"
  }
]