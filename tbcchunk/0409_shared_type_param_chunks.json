[
  {
    "original_filename": "0409_shared_type_param",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0409_shared_type_param",
    "header_text": "Shared Type Parameter",
    "local_header_href": "#shared-type-parameter",
    "chunk_text": "<h3>Shared Type Parameter</h3><p>The last time we looked at defining new shared parameters for different element categories was a long time ago, in the exploration of doing so for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/model-group-shared-parameter.html\">\nmodel groups</a>.\n\nHere is another very basic question on defining shared parameters that we have not previously addressed:\n\n<p><strong>Question:</strong> I would like to add a new shared parameter to the wall type. \nUnfortunately the code I am currently using adds it to the instances instead.\nHow can I add this parameter to all wall types?\nIs it possible? \nCan you send me some example code how to do it?\nHere is a screen snapshot which shows what I would like to achieve:</p>\n<center>\n<img alt=\"Wall and wall type properties\" src=\"img/wall_and_wall_type_properties.jpg\"/>\n</center>\n<p><strong>Answer:</strong> The answer to your query is short and sweet: use NewTypeBinding instead of NewInstanceBinding.\n\n<p>If you look at the description of the Binding class in the Revit API help, you will see the following detailed description:\n\n<p style=\"color:darkblue\">Binding objects are used to take a parameter definition and bind it to one or more categories. This class is a base class for all types of parameter binding within Autodesk Revit. Once the binding objects are created and added to the document parameters will be added to elements in those categories specified in the binding. There are currently two types of binding available, Instance binding and Type binding. The key difference between the two is that the instance bound parameters appear on all instances of the elements in those categories. Changing the parameter on one does not affect the other instances of the parameter. The Type bound parameters appear only on the type object and is shared by all the instances that use that type. Changing the type bound parameter affects all instances of the elements that use that type. Note, a definition can only be bound to an instance or a type and not both.\n\n<p>To attach a shared parameter to some additional element type, you need to specify its category in the category set used to create the parameter binding.\nWe explored how to find the category to use in some \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/model-group-shared-parameter.html\">\nspecial cases</a> in \n\nthe past. \nIn all of the cases discussed so far, we always used the NewInstanceBinding method. \nYour question gives me a welcome opportunity to try out the NewTypeBinding method as well.\n\n<p>The creation application provides the two sibling methods NewInstanceBinding and NewTypeBinding. Both can be fed with the same set of categories. They define a link between a shared parameter definition and the instances and type types of a specific category, respectively.\n\n<p>I updated The Building Coder sample external command CmdCreateSharedParams to add a type binding to walls in addition to the previous instance bindings.\nThe only really relevant change is the addition of a Boolean argument typeParameter to the CreateSharedParameter method, and the line asking the creation application 'ca' to create the parameter binding, which now looks like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">Binding</span> binding = typeParameter\n    ? ca.NewTypeBinding( catSet ) <span class=\"blue\">as</span> <span class=\"teal\">Binding</span>\n    : ca.NewInstanceBinding( catSet ) <span class=\"blue\">as</span> <span class=\"teal\">Binding</span>;\n</pre>\n<p>Here is \n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_74_2.zip -->\n<a href=\"zip/bc_11_74_2.zip\">\nversion 2011.0.74.2</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution with the updated command.\n\n<p>When I run it in a project with no model groups in it, it prints the following to the Visual Studio debug output console:\n\n<pre>\nCreated a shared instance parameter 'SP1' for the Doors category.\nCreated a shared instance parameter 'SP2' for the Walls category.\nPlease insert a model group.\nCreated a shared instance parameter 'SP3' for the Lines category.\nCreated a shared type parameter 'SP4' for the Walls category.\n</pre>\n<p>Afterwards, the wall type has a shared parameter associated with it:</p>\n<center>\n<img alt=\"New wall type shared parameter\" src=\"img/new_wall_type_shared_param.png\"/>\n</center>\n</p></p></p></p></p></p></p></p></p>"
  }
]