[
  {
    "original_filename": "0374_curtain_wall_geometry",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0374_curtain_wall_geometry",
    "header_text": "Curtain Wall Geometry",
    "local_header_href": "#curtain-wall-geometry",
    "chunk_text": "<h3>Curtain Wall Geometry</h3><p>Last week, I did some work exploring the geometry available in a curtain wall instance.\nIt led to several interesting results:\n\n<ul>\n<li>An <a href=\"#1\">exploration of the relationship between a curtain wall and its panels</a>.\n<li><a href=\"#2\">Direct access to the curtain wall geometry</a> using the geometry options IncludeNonVisibleObjects property.\n<li>A new <a href=\"#3\">model curve creator method</a>.\n<li><a href=\"#4\">FootPrintRoof and CurtainSystem geometry</a>.\n</li></li></li></li></ul>\n<p>The starting point for all this was the following question:\n\n<p><strong>Question:</strong> I'm trying to retrieve the geometric curves, i.e. lines and arcs, that defining the perimeter of a wall element using the Curtain Wall system family.  \nUnfortunately, the Wall.Geometry.Objects' EdgeArray and FaceArray are empty.  \nThis is not true for other types of walls.\n\n<p>How can I retrieve the X, Y and Z coordinates of the curtain wall profile?\n\n<p>The profile is displayed in the user interface as dashed lines marking the perimeter of the curtain wall when the cursor hovers over it:</p>\n<center>\n<img alt=\"Curtain wall perimeter dashed lines\" src=\"img/curtain_wall_dashed_lines.png\"/>\n</center>\n<p><strong>Answer:</strong> The curtain wall does indeed not have any geometry of its own when queried using the default geometry option settings. \nWe will see below that there is a useful option setting which returns more detailed results.\nBefore looking into that, we will have a look at the associated panel elements which manage the visible standard geometry.\n\n\n<a name=\"1\"></a>\n<h4>Relationship between a curtain wall and its panels</h4>\n<p>To explore the relationship between a curtain wall and its panels, I created a sample model and added a new curtain wall, using the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pre-post-and-pick-select.html\">\nelement lister</a>\n\nimplemented in Lab2_1_Elements in the Revit API introduction labs to determine what new elements get added by that step.\n\n<p>Here is how I use it to determine the curtain wall and the panel:\n\n<ul>\n<li>Start up Revit and open a new project.\n<li>Run Lab2_1_Elements to create C:\\tmp\\RevitElements.txt.\n<li>Rename the resulting file to RevitElementsBeforeCurtainWall.txt.\n<li>Create a curtain wall and run Lab2_1_Elements again.\n<li>Rename the resulting file to RevitElementsAfterCurtainWall.txt.\n</li></li></li></li></li></ul>\n<p>The newly added elements in my model in Revit Architecture 2011 are:\n\n<pre>\nC:\\tmp\\ &gt;diff \n  RevitElementsBeforeCurtainWall.txt \n  RevitElementsAfterCurtainWall.txt\n2842a2843,2844\n&gt; Id=149169; Class=Wall; Category=Walls; Name=Curtain Wall\n&gt; Id=149170; Class=Panel; Category=Curtain Panels; Name=Glazed\n</pre>\n<p>I tried the same steps in Revit Architecture 2010 with an analogous result:\n\n<pre>\nC:\\tmp\\ &gt;diff \n  RevitElementsBeforeCurtainWall2010.txt \n  RevitElementsAfterCurtainWall2010.txt\n2255a2256,2257\n&gt; Id=130424; Class=Wall; Category=Walls; Name=Curtain Wall\n&gt; Id=130425; Class=Panel; Category=Curtain Panels; Name=Glazed\n</pre>\n<p>So the problem that needs to be solved is how to determine the relationship between the curtain wall and its associated panels.\n\n<p>By the way, I initially used this same technique to explore the relationship between a stacked wall and it basic wall components, with quite similar results.\n\n<p>If your application is creating the curtain wall itself, it can keep track of their ids when they are created. It could create and temporarily store a list of all element ids before creating the curtain wall, and then again afterwards. The newly added ids will be related to the curtain wall and its panel as shown above.\n\n<p>If you do not have the possibility to set such checkmarks before and after creating the curtain wall, you might still be able to use the fact that the associated ids are consecutive. \n\n<p>Happily, several more reliable ways to determine the relationships between elements also exist.\n\n<p>One is to delete the main element inside a sub-transaction that is later aborted, and see what elements are deleted with it, as demonstrated by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/object-relationships.html\">\nobject relationship viewer</a> (in \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/object-relationships-in-vb.html\">\nVB</a>).\n\n<p>Better still is to use geometrical analysis. The curtain wall itself does not have any accessible geometry objects, as you have seen, but you can still use its bounding box or location curve to determine its position in the model.\n\n<p>The panel does have valid geometry, as we can determine by examining it using RevitLookup, stepping through the following hierarchy:\n\nSnoop DB &gt; Panel &gt; Glazed 149170 &gt; Geometry &gt; Objects &gt; Symbol geometry &gt; Objects &gt; Edges and Faces.\n\n<p>The panel instance geometrical objects are originally defined in the symbol definition local coordinate system and you need to apply the instance transform to them to retrieve the world coordinate system data, i.e. apply \n\nSnoop DB &gt; Panel &gt; Glazed 149170 &gt; Geometry &gt; Objects &gt; Symbol geometry &gt; Transform\n\n<p>This is described in the analysis of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/transform-instance-coordinates.html\">\ninstance coordinate transformation</a>.\n\n<p>Using the position of the curtain wall determined from its location line or bounding box, and the geometry of the panel, you can determine their relationship to each other by checking for overlap or adjacency. One way to checking for adjacency is to use the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/findreferencesbydirection.html\">\nFindReferencesByDirection</a> method.\nThis should work, using the curtain wall location line to define the starting point of the ray and then shooing it in various directions to intersect the panel geometry. \n\n<p>You could also simply determine specific points on the location line and the panel geometry and check whether the volumes defined by each overlap.\n\n<p>So given the element id of the curtain wall or the panel, you can use this technique to search for the other associated element. In a large model, one would obviously want to add additional criteria to limit the search to as few candidate elements as possible. You could use the curtain wall and panel types, for instance, if these are known. You might be able to use the BoundingBoxIntersectsFilter class, although again, this might only work for the panel, which has accessible geometry, and maybe not for the curtain wall. One criterion which you can definitely use is the level property, which is defined on both the curtain wall and the panel.\n\n\n<a name=\"2\"></a>\n<h4>Direct Access to the Curtain Wall Geometry</h4>\n<p>However interesting this exploration of the relationship between the curtain wall and its panels may seem, it would be nice to have a more direct access to the curtain wall perimeter without having to perform a complex analysis of the associated panel geometry.\n\n<p>If the wall was created from a mass, then the perimeter lines can be retrieved from the mass face edge loops. \nIf not, one might try to retrieve the curtain wall LocationCurve and calculate the perimeter lines with the height.\n\n<p>However, there is a pretty perfect and much simpler method that took some exploration to discover: simply setting the geometry options IncludeNonVisibleObjects property.\nThis provides access to the geometry of an internal \"hidden\" wall that Revit uses to represent the curtain wall and the lines and arcs with Visibility=Highlight, which seems to be exactly what we are looking for.\nHere is a sample curtain wall:</p>\n<center>\n<img alt=\"Sample curtain wall\" src=\"img/curtain_wall_sample.jpg\"/>\n</center>\n<p>Here is some code to set the geometry options IncludeNonVisibleObjects property and retrieve and list the curves:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> list_wall_geom( <span class=\"teal\">Wall</span> w, <span class=\"teal\">Application</span> app )\n{\n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"\"</span>;\n \n  <span class=\"teal\">CurtainGrid</span> cgrid = w.CurtainGrid;\n \n  <span class=\"teal\">Options</span> options \n    = app.Create.NewGeometryOptions();\n \n  options.ComputeReferences = <span class=\"blue\">true</span>;\n  options.IncludeNonVisibleObjects = <span class=\"blue\">true</span>;\n \n  <span class=\"teal\">GeometryElement</span> geomElem \n    = w.get_Geometry( options );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj \n    <span class=\"blue\">in</span> geomElem.Objects )\n  {\n    <span class=\"teal\">Visibility</span> vis = obj.Visibility;\n \n    <span class=\"blue\">string</span> visString = vis.ToString();\n \n    <span class=\"teal\">Arc</span> arc = obj <span class=\"blue\">as</span> <span class=\"teal\">Arc</span>;\n    <span class=\"teal\">Line</span> line = obj <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( arc != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">double</span> length = arc.ApproximateLength;\n \n      s += <span class=\"maroon\">\"Length (arc) (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n        + length + <span class=\"maroon\">\"\\n\"</span>;\n    }\n    <span class=\"blue\">if</span>( line != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">double</span> length = line.ApproximateLength;\n \n      s += <span class=\"maroon\">\"Length (line) (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n        + length + <span class=\"maroon\">\"\\n\"</span>;\n    }\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">int</span> faceCount = solid.Faces.Size;\n \n      s += <span class=\"maroon\">\"Faces: \"</span> + faceCount + <span class=\"maroon\">\"\\n\"</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n      {\n        s += <span class=\"maroon\">\"Face area (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n          + face.Area + <span class=\"maroon\">\"\\n\"</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( line == <span class=\"blue\">null</span> &amp;&amp; solid == <span class=\"blue\">null</span> &amp;&amp; arc == <span class=\"blue\">null</span> )\n    {\n      s += <span class=\"maroon\">\"&lt;Other&gt;\\n\"</span>;\n    }\n  }\n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"revit\"</span>, s );\n}\n</pre>\n<p>The output returned for the wall above looks like this:</p>\n<center>\n<img alt=\"Sample curtain wall result\" src=\"img/curtain_wall_sample_result.png\"/>\n</center>\n<p>I applied this setting to the model with an arced curtain wall shown above.\nI asked the curtain wall for its geometry with IncludeNonVisibleObjects set to true, and then generated model lines offset by the length of the wall from the geometry returned by that call:</p>\n<center>\n<img alt=\"Model lines generated from curtain wall perimeter curves offset by wall length\" src=\"img/curtain_wall_offset_model_lines.png\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Model Curve Creator Method</h4>\n<p>To generate the model curves shown above, I made some enhancements to The Building Coder sample \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/model-line-creation.html\">\nCreator</a> class, \n\nwhich we will present in detail in a future post.\n\n\n<a name=\"4\"></a>\n<h4>FootPrintRoof and CurtainSystem Geometry</h4>\n<p>Joe Offord of\n\n<a href=\"http://www.enclos.com\">\nenclos corp.</a>,\n\nwho initially raised this question, provided some further information on using the same technique to retrieve geometry from other elements as well.\nSays Joe:\n\n<p>I ran across some other loops I had to jump through.\n\n<p>What my program does is export all the curtain wall mullion geometry from Revit into an analytical software package.\n\n<p>Based on our discussion, I was able to retrieve the X,Y,Z of each end of each mullion that was hosted by \na System Family - Curtain Wall.  \nBut because architects like to dream up exotic shapes for glass structures, there may also exist curtain wall systems on non-vertical surfaces in the model.  \nThus, I also had to export out CurtainSystems and RoofFootPrint elements that might contain CurtainGrids and Mullions.\n\n<p>Because CurtainGrids can be hosted by objects other than walls, I had to include these additional elements in my coding.  \nAs far as I could tell, the GeometryObjects of these elements had to be one of three types: Line, Arc, or HermiteSpline.  \nI could retrieve the end points I needed from all of these.  \nThe HermiteSpline elements usually occurred on sloped roofs with curved boundaries.\n\n<p>Using the same logic as the walls, I found X,Y,Z coordinates for the non-visible border of RoofFootPrints and CurtainSystems, as well as X,Y,Z coordinates of all the interior nodes using CurtainGridLines.ExistingSegments. \n<p>Many thanks to Joe for the fruitful discussions on this subject!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0374_curtain_wall_geometry",
    "header_text": "Relationship between a curtain wall and its panels",
    "local_header_href": "#relationship-between-a-curtain-wall-and-its-panels",
    "chunk_text": "<h4>Relationship between a curtain wall and its panels</h4><p>To explore the relationship between a curtain wall and its panels, I created a sample model and added a new curtain wall, using the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pre-post-and-pick-select.html\">\nelement lister</a>\n\nimplemented in Lab2_1_Elements in the Revit API introduction labs to determine what new elements get added by that step.\n\n<p>Here is how I use it to determine the curtain wall and the panel:\n\n<ul>\n<li>Start up Revit and open a new project.\n<li>Run Lab2_1_Elements to create C:\\tmp\\RevitElements.txt.\n<li>Rename the resulting file to RevitElementsBeforeCurtainWall.txt.\n<li>Create a curtain wall and run Lab2_1_Elements again.\n<li>Rename the resulting file to RevitElementsAfterCurtainWall.txt.\n</li></li></li></li></li></ul>\n<p>The newly added elements in my model in Revit Architecture 2011 are:\n\n<pre>\nC:\\tmp\\ &gt;diff \n  RevitElementsBeforeCurtainWall.txt \n  RevitElementsAfterCurtainWall.txt\n2842a2843,2844\n&gt; Id=149169; Class=Wall; Category=Walls; Name=Curtain Wall\n&gt; Id=149170; Class=Panel; Category=Curtain Panels; Name=Glazed\n</pre>\n<p>I tried the same steps in Revit Architecture 2010 with an analogous result:\n\n<pre>\nC:\\tmp\\ &gt;diff \n  RevitElementsBeforeCurtainWall2010.txt \n  RevitElementsAfterCurtainWall2010.txt\n2255a2256,2257\n&gt; Id=130424; Class=Wall; Category=Walls; Name=Curtain Wall\n&gt; Id=130425; Class=Panel; Category=Curtain Panels; Name=Glazed\n</pre>\n<p>So the problem that needs to be solved is how to determine the relationship between the curtain wall and its associated panels.\n\n<p>By the way, I initially used this same technique to explore the relationship between a stacked wall and it basic wall components, with quite similar results.\n\n<p>If your application is creating the curtain wall itself, it can keep track of their ids when they are created. It could create and temporarily store a list of all element ids before creating the curtain wall, and then again afterwards. The newly added ids will be related to the curtain wall and its panel as shown above.\n\n<p>If you do not have the possibility to set such checkmarks before and after creating the curtain wall, you might still be able to use the fact that the associated ids are consecutive. \n\n<p>Happily, several more reliable ways to determine the relationships between elements also exist.\n\n<p>One is to delete the main element inside a sub-transaction that is later aborted, and see what elements are deleted with it, as demonstrated by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/object-relationships.html\">\nobject relationship viewer</a> (in \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/object-relationships-in-vb.html\">\nVB</a>).\n\n<p>Better still is to use geometrical analysis. The curtain wall itself does not have any accessible geometry objects, as you have seen, but you can still use its bounding box or location curve to determine its position in the model.\n\n<p>The panel does have valid geometry, as we can determine by examining it using RevitLookup, stepping through the following hierarchy:\n\nSnoop DB &gt; Panel &gt; Glazed 149170 &gt; Geometry &gt; Objects &gt; Symbol geometry &gt; Objects &gt; Edges and Faces.\n\n<p>The panel instance geometrical objects are originally defined in the symbol definition local coordinate system and you need to apply the instance transform to them to retrieve the world coordinate system data, i.e. apply \n\nSnoop DB &gt; Panel &gt; Glazed 149170 &gt; Geometry &gt; Objects &gt; Symbol geometry &gt; Transform\n\n<p>This is described in the analysis of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/transform-instance-coordinates.html\">\ninstance coordinate transformation</a>.\n\n<p>Using the position of the curtain wall determined from its location line or bounding box, and the geometry of the panel, you can determine their relationship to each other by checking for overlap or adjacency. One way to checking for adjacency is to use the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/findreferencesbydirection.html\">\nFindReferencesByDirection</a> method.\nThis should work, using the curtain wall location line to define the starting point of the ray and then shooing it in various directions to intersect the panel geometry. \n\n<p>You could also simply determine specific points on the location line and the panel geometry and check whether the volumes defined by each overlap.\n\n<p>So given the element id of the curtain wall or the panel, you can use this technique to search for the other associated element. In a large model, one would obviously want to add additional criteria to limit the search to as few candidate elements as possible. You could use the curtain wall and panel types, for instance, if these are known. You might be able to use the BoundingBoxIntersectsFilter class, although again, this might only work for the panel, which has accessible geometry, and maybe not for the curtain wall. One criterion which you can definitely use is the level property, which is defined on both the curtain wall and the panel.\n\n\n<a name=\"2\"></a>\n<h4>Direct Access to the Curtain Wall Geometry</h4>\n<p>However interesting this exploration of the relationship between the curtain wall and its panels may seem, it would be nice to have a more direct access to the curtain wall perimeter without having to perform a complex analysis of the associated panel geometry.\n\n<p>If the wall was created from a mass, then the perimeter lines can be retrieved from the mass face edge loops. \nIf not, one might try to retrieve the curtain wall LocationCurve and calculate the perimeter lines with the height.\n\n<p>However, there is a pretty perfect and much simpler method that took some exploration to discover: simply setting the geometry options IncludeNonVisibleObjects property.\nThis provides access to the geometry of an internal \"hidden\" wall that Revit uses to represent the curtain wall and the lines and arcs with Visibility=Highlight, which seems to be exactly what we are looking for.\nHere is a sample curtain wall:</p>\n<center>\n<img alt=\"Sample curtain wall\" src=\"img/curtain_wall_sample.jpg\"/>\n</center>\n<p>Here is some code to set the geometry options IncludeNonVisibleObjects property and retrieve and list the curves:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> list_wall_geom( <span class=\"teal\">Wall</span> w, <span class=\"teal\">Application</span> app )\n{\n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"\"</span>;\n \n  <span class=\"teal\">CurtainGrid</span> cgrid = w.CurtainGrid;\n \n  <span class=\"teal\">Options</span> options \n    = app.Create.NewGeometryOptions();\n \n  options.ComputeReferences = <span class=\"blue\">true</span>;\n  options.IncludeNonVisibleObjects = <span class=\"blue\">true</span>;\n \n  <span class=\"teal\">GeometryElement</span> geomElem \n    = w.get_Geometry( options );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj \n    <span class=\"blue\">in</span> geomElem.Objects )\n  {\n    <span class=\"teal\">Visibility</span> vis = obj.Visibility;\n \n    <span class=\"blue\">string</span> visString = vis.ToString();\n \n    <span class=\"teal\">Arc</span> arc = obj <span class=\"blue\">as</span> <span class=\"teal\">Arc</span>;\n    <span class=\"teal\">Line</span> line = obj <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( arc != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">double</span> length = arc.ApproximateLength;\n \n      s += <span class=\"maroon\">\"Length (arc) (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n        + length + <span class=\"maroon\">\"\\n\"</span>;\n    }\n    <span class=\"blue\">if</span>( line != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">double</span> length = line.ApproximateLength;\n \n      s += <span class=\"maroon\">\"Length (line) (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n        + length + <span class=\"maroon\">\"\\n\"</span>;\n    }\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">int</span> faceCount = solid.Faces.Size;\n \n      s += <span class=\"maroon\">\"Faces: \"</span> + faceCount + <span class=\"maroon\">\"\\n\"</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n      {\n        s += <span class=\"maroon\">\"Face area (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n          + face.Area + <span class=\"maroon\">\"\\n\"</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( line == <span class=\"blue\">null</span> &amp;&amp; solid == <span class=\"blue\">null</span> &amp;&amp; arc == <span class=\"blue\">null</span> )\n    {\n      s += <span class=\"maroon\">\"&lt;Other&gt;\\n\"</span>;\n    }\n  }\n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"revit\"</span>, s );\n}\n</pre>\n<p>The output returned for the wall above looks like this:</p>\n<center>\n<img alt=\"Sample curtain wall result\" src=\"img/curtain_wall_sample_result.png\"/>\n</center>\n<p>I applied this setting to the model with an arced curtain wall shown above.\nI asked the curtain wall for its geometry with IncludeNonVisibleObjects set to true, and then generated model lines offset by the length of the wall from the geometry returned by that call:</p>\n<center>\n<img alt=\"Model lines generated from curtain wall perimeter curves offset by wall length\" src=\"img/curtain_wall_offset_model_lines.png\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Model Curve Creator Method</h4>\n<p>To generate the model curves shown above, I made some enhancements to The Building Coder sample \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/model-line-creation.html\">\nCreator</a> class, \n\nwhich we will present in detail in a future post.\n\n\n<a name=\"4\"></a>\n<h4>FootPrintRoof and CurtainSystem Geometry</h4>\n<p>Joe Offord of\n\n<a href=\"http://www.enclos.com\">\nenclos corp.</a>,\n\nwho initially raised this question, provided some further information on using the same technique to retrieve geometry from other elements as well.\nSays Joe:\n\n<p>I ran across some other loops I had to jump through.\n\n<p>What my program does is export all the curtain wall mullion geometry from Revit into an analytical software package.\n\n<p>Based on our discussion, I was able to retrieve the X,Y,Z of each end of each mullion that was hosted by \na System Family - Curtain Wall.  \nBut because architects like to dream up exotic shapes for glass structures, there may also exist curtain wall systems on non-vertical surfaces in the model.  \nThus, I also had to export out CurtainSystems and RoofFootPrint elements that might contain CurtainGrids and Mullions.\n\n<p>Because CurtainGrids can be hosted by objects other than walls, I had to include these additional elements in my coding.  \nAs far as I could tell, the GeometryObjects of these elements had to be one of three types: Line, Arc, or HermiteSpline.  \nI could retrieve the end points I needed from all of these.  \nThe HermiteSpline elements usually occurred on sloped roofs with curved boundaries.\n\n<p>Using the same logic as the walls, I found X,Y,Z coordinates for the non-visible border of RoofFootPrints and CurtainSystems, as well as X,Y,Z coordinates of all the interior nodes using CurtainGridLines.ExistingSegments. \n<p>Many thanks to Joe for the fruitful discussions on this subject!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0374_curtain_wall_geometry",
    "header_text": "Direct Access to the Curtain Wall Geometry",
    "local_header_href": "#direct-access-to-the-curtain-wall-geometry",
    "chunk_text": "<h4>Direct Access to the Curtain Wall Geometry</h4><p>However interesting this exploration of the relationship between the curtain wall and its panels may seem, it would be nice to have a more direct access to the curtain wall perimeter without having to perform a complex analysis of the associated panel geometry.\n\n<p>If the wall was created from a mass, then the perimeter lines can be retrieved from the mass face edge loops. \nIf not, one might try to retrieve the curtain wall LocationCurve and calculate the perimeter lines with the height.\n\n<p>However, there is a pretty perfect and much simpler method that took some exploration to discover: simply setting the geometry options IncludeNonVisibleObjects property.\nThis provides access to the geometry of an internal \"hidden\" wall that Revit uses to represent the curtain wall and the lines and arcs with Visibility=Highlight, which seems to be exactly what we are looking for.\nHere is a sample curtain wall:</p>\n<center>\n<img alt=\"Sample curtain wall\" src=\"img/curtain_wall_sample.jpg\"/>\n</center>\n<p>Here is some code to set the geometry options IncludeNonVisibleObjects property and retrieve and list the curves:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> list_wall_geom( <span class=\"teal\">Wall</span> w, <span class=\"teal\">Application</span> app )\n{\n  <span class=\"blue\">string</span> s = <span class=\"maroon\">\"\"</span>;\n \n  <span class=\"teal\">CurtainGrid</span> cgrid = w.CurtainGrid;\n \n  <span class=\"teal\">Options</span> options \n    = app.Create.NewGeometryOptions();\n \n  options.ComputeReferences = <span class=\"blue\">true</span>;\n  options.IncludeNonVisibleObjects = <span class=\"blue\">true</span>;\n \n  <span class=\"teal\">GeometryElement</span> geomElem \n    = w.get_Geometry( options );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj \n    <span class=\"blue\">in</span> geomElem.Objects )\n  {\n    <span class=\"teal\">Visibility</span> vis = obj.Visibility;\n \n    <span class=\"blue\">string</span> visString = vis.ToString();\n \n    <span class=\"teal\">Arc</span> arc = obj <span class=\"blue\">as</span> <span class=\"teal\">Arc</span>;\n    <span class=\"teal\">Line</span> line = obj <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n    <span class=\"blue\">if</span>( arc != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">double</span> length = arc.ApproximateLength;\n \n      s += <span class=\"maroon\">\"Length (arc) (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n        + length + <span class=\"maroon\">\"\\n\"</span>;\n    }\n    <span class=\"blue\">if</span>( line != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">double</span> length = line.ApproximateLength;\n \n      s += <span class=\"maroon\">\"Length (line) (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n        + length + <span class=\"maroon\">\"\\n\"</span>;\n    }\n    <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">int</span> faceCount = solid.Faces.Size;\n \n      s += <span class=\"maroon\">\"Faces: \"</span> + faceCount + <span class=\"maroon\">\"\\n\"</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n      {\n        s += <span class=\"maroon\">\"Face area (\"</span> + visString + <span class=\"maroon\">\"): \"</span> \n          + face.Area + <span class=\"maroon\">\"\\n\"</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( line == <span class=\"blue\">null</span> &amp;&amp; solid == <span class=\"blue\">null</span> &amp;&amp; arc == <span class=\"blue\">null</span> )\n    {\n      s += <span class=\"maroon\">\"&lt;Other&gt;\\n\"</span>;\n    }\n  }\n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"revit\"</span>, s );\n}\n</pre>\n<p>The output returned for the wall above looks like this:</p>\n<center>\n<img alt=\"Sample curtain wall result\" src=\"img/curtain_wall_sample_result.png\"/>\n</center>\n<p>I applied this setting to the model with an arced curtain wall shown above.\nI asked the curtain wall for its geometry with IncludeNonVisibleObjects set to true, and then generated model lines offset by the length of the wall from the geometry returned by that call:</p>\n<center>\n<img alt=\"Model lines generated from curtain wall perimeter curves offset by wall length\" src=\"img/curtain_wall_offset_model_lines.png\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Model Curve Creator Method</h4>\n<p>To generate the model curves shown above, I made some enhancements to The Building Coder sample \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/model-line-creation.html\">\nCreator</a> class, \n\nwhich we will present in detail in a future post.\n\n\n<a name=\"4\"></a>\n<h4>FootPrintRoof and CurtainSystem Geometry</h4>\n<p>Joe Offord of\n\n<a href=\"http://www.enclos.com\">\nenclos corp.</a>,\n\nwho initially raised this question, provided some further information on using the same technique to retrieve geometry from other elements as well.\nSays Joe:\n\n<p>I ran across some other loops I had to jump through.\n\n<p>What my program does is export all the curtain wall mullion geometry from Revit into an analytical software package.\n\n<p>Based on our discussion, I was able to retrieve the X,Y,Z of each end of each mullion that was hosted by \na System Family - Curtain Wall.  \nBut because architects like to dream up exotic shapes for glass structures, there may also exist curtain wall systems on non-vertical surfaces in the model.  \nThus, I also had to export out CurtainSystems and RoofFootPrint elements that might contain CurtainGrids and Mullions.\n\n<p>Because CurtainGrids can be hosted by objects other than walls, I had to include these additional elements in my coding.  \nAs far as I could tell, the GeometryObjects of these elements had to be one of three types: Line, Arc, or HermiteSpline.  \nI could retrieve the end points I needed from all of these.  \nThe HermiteSpline elements usually occurred on sloped roofs with curved boundaries.\n\n<p>Using the same logic as the walls, I found X,Y,Z coordinates for the non-visible border of RoofFootPrints and CurtainSystems, as well as X,Y,Z coordinates of all the interior nodes using CurtainGridLines.ExistingSegments. \n<p>Many thanks to Joe for the fruitful discussions on this subject!\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0374_curtain_wall_geometry",
    "header_text": "Model Curve Creator Method",
    "local_header_href": "#model-curve-creator-method",
    "chunk_text": "<h4>Model Curve Creator Method</h4><p>To generate the model curves shown above, I made some enhancements to The Building Coder sample \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/model-line-creation.html\">\nCreator</a> class, \n\nwhich we will present in detail in a future post.\n\n\n<a name=\"4\"></a>\n<h4>FootPrintRoof and CurtainSystem Geometry</h4>\n<p>Joe Offord of\n\n<a href=\"http://www.enclos.com\">\nenclos corp.</a>,\n\nwho initially raised this question, provided some further information on using the same technique to retrieve geometry from other elements as well.\nSays Joe:\n\n<p>I ran across some other loops I had to jump through.\n\n<p>What my program does is export all the curtain wall mullion geometry from Revit into an analytical software package.\n\n<p>Based on our discussion, I was able to retrieve the X,Y,Z of each end of each mullion that was hosted by \na System Family - Curtain Wall.  \nBut because architects like to dream up exotic shapes for glass structures, there may also exist curtain wall systems on non-vertical surfaces in the model.  \nThus, I also had to export out CurtainSystems and RoofFootPrint elements that might contain CurtainGrids and Mullions.\n\n<p>Because CurtainGrids can be hosted by objects other than walls, I had to include these additional elements in my coding.  \nAs far as I could tell, the GeometryObjects of these elements had to be one of three types: Line, Arc, or HermiteSpline.  \nI could retrieve the end points I needed from all of these.  \nThe HermiteSpline elements usually occurred on sloped roofs with curved boundaries.\n\n<p>Using the same logic as the walls, I found X,Y,Z coordinates for the non-visible border of RoofFootPrints and CurtainSystems, as well as X,Y,Z coordinates of all the interior nodes using CurtainGridLines.ExistingSegments. \n<p>Many thanks to Joe for the fruitful discussions on this subject!\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0374_curtain_wall_geometry",
    "header_text": "FootPrintRoof and CurtainSystem Geometry",
    "local_header_href": "#footprintroof-and-curtainsystem-geometry",
    "chunk_text": "<h4>FootPrintRoof and CurtainSystem Geometry</h4><p>Joe Offord of\n\n<a href=\"http://www.enclos.com\">\nenclos corp.</a>,\n\nwho initially raised this question, provided some further information on using the same technique to retrieve geometry from other elements as well.\nSays Joe:\n\n<p>I ran across some other loops I had to jump through.\n\n<p>What my program does is export all the curtain wall mullion geometry from Revit into an analytical software package.\n\n<p>Based on our discussion, I was able to retrieve the X,Y,Z of each end of each mullion that was hosted by \na System Family - Curtain Wall.  \nBut because architects like to dream up exotic shapes for glass structures, there may also exist curtain wall systems on non-vertical surfaces in the model.  \nThus, I also had to export out CurtainSystems and RoofFootPrint elements that might contain CurtainGrids and Mullions.\n\n<p>Because CurtainGrids can be hosted by objects other than walls, I had to include these additional elements in my coding.  \nAs far as I could tell, the GeometryObjects of these elements had to be one of three types: Line, Arc, or HermiteSpline.  \nI could retrieve the end points I needed from all of these.  \nThe HermiteSpline elements usually occurred on sloped roofs with curved boundaries.\n\n<p>Using the same logic as the walls, I found X,Y,Z coordinates for the non-visible border of RoofFootPrints and CurtainSystems, as well as X,Y,Z coordinates of all the interior nodes using CurtainGridLines.ExistingSegments. \n<p>Many thanks to Joe for the fruitful discussions on this subject!\n</p></p></p></p></p></p></p>"
  }
]