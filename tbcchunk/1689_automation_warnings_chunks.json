[
  {
    "original_filename": "1689_automation_warnings",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- forge design automation for revit\n  you need to know revit api\n  easy if you are familiar with forge\n  view on a360\n  connect piece by piece\n  c4r now works with bim360 team, in 2019 it works with forge docs instead\n  licensing issues\n\n- StairsAutomation Revit SDK sample pops up a warning\n  this causes problems and stops it when trying to run in forge design automation\n  try to suppress it\n  simple stairs works ok, keep on clicking to get the warning message\n  failure api -- http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.32\n  warning swallower -- http://thebuildingcoder.typepad.com/blog/2016/09/warning-swallower-and-roomedit3d-viewer-extension.html#2\n\n- warning swallower\n  C:\\a\\vs\\the_building_coder_samples\\BuildingCoder\\BuildingCoder\\CmdPreprocessFailure.cs\n\nSwallowing StairsAutomation warnings preparing for Forge Design Automation in the #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/warningswallower\n\nOne important step to take before trying to run your Revit API code fully automated and unattended is to ensure that it does not create or modify UI in any way.\nFor example, you must ensure that it does not cause Revit to display any warnings.\nThis can be achieved with a warning swallower.\nLet's implement one for the StairsAutomation SDK sample...\n\n&ndash; \n...\n\n-->"
  },
  {
    "original_filename": "1689_automation_warnings",
    "header_text": "Swallowing StairsAutomation Warnings",
    "local_header_href": "#swallowing-stairsautomation-warnings",
    "chunk_text": "### Swallowing StairsAutomation Warnings\n\nHere at the Forge Accelerator in Rome, I am starting to take some a first look at\nthe [Forge](https://autodesk-forge.github.io)\n[Design Automation API](https://forge.autodesk.com/en/docs/design-automation/v2/overview) for Revit.\n\nIt is not yet available or documented, except to a closely restricted private beta that I am not a member of, so I cannot go into any details.\nFor more information on its current status, please refer to\n[Mikako Harada's discussion of Design Automation for Revit](https://fieldofviewblog.wordpress.com/revit).\n\nHowever, you can prepare for the day when it comes by handling your add-in warnings properly.\n\nTo make use of it, you obviously need to know the Revit API, and it becomes very easy indeed if you also have some experience with Forge apps.\n\nRevit API code can be run in a Forge app by using the `IExternalDBApplication` interface, already listed in\nthe [Revit API documentation](https://apidocs.co/apps/revit/2019/97318be3-45c4-d93b-ee7b-174fa80ab951.htm).\n\nThis interface supports addition of DB-level external applications to Revit, to subscribe to DB-level events and updaters.\n\nDB-level applications cannot create or modify UI.\n\nTherefore, if your add-in pops up any warnings, it cannot be converted to a Forge Design Automation for Revit app &ndash; or, worse still, it will simply silently terminate as soon as it misbehaves.\n\nTherefore, today, let's take a look at suppressing warnings caused by a typical Revit add-in.\n\nAs an example, we'll choose the StairsAutomation Revit SDK sample.\n\nIt generates five different types of stairs:\n\n<center>\n<img src=\"img/StairsAutomation_result.png\" alt=\"StairsAutomation result\" width=\"500\">\n</center>\n\nTwo of them generate Revit warning messages:\n\n- Stair #3 generates [8 warnings about overlapping handrail model line elements](zip/StairsAutomation_warnings_stair_3_8.html).\n- Stair #4 generates [1 warning about a missing riser](zip/StairsAutomation_warnings_stair_4_1.html).\n\nHappily, Revit warnings can easily be handled automatically making use of\nthe [Failure API](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.32).\n\nSpecifically, we presented\na [generic warning swallower](http://thebuildingcoder.typepad.com/blog/2016/09/warning-swallower-and-roomedit3d-viewer-extension.html#2) that\ncan handle just about any warning message that crops up.\n\nFor the StairsAutomation sample, nothing much is required.\n\nThe code generating the stairs obviously runs inside a `Transaction`, and that, in turn, is enclosed in a `StairsEditScope`.\n\nThe call to `Commit` the stair editing scope is called with a custom failures preprocessor instance:\n\n<pre class=\"code\">\n&nbsp;&nbsp;editScope.Commit(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">StairsEditScopeFailuresPreprocessor</span>()&nbsp;);\n</pre>\n\nIn the original sample, the failures preprocessor does next to nothing:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">StairsEditScopeFailuresPreprocessor</span>&nbsp;\n&nbsp;&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IFailuresPreprocessor</span>\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">FailureProcessingResult</span>&nbsp;PreprocessFailures(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FailuresAccessor</span>&nbsp;a&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">FailureProcessingResult</span>.Continue;\n&nbsp;&nbsp;}\n}\n</pre>\n\nI simply added the following lines of code to it, to delete all warnings before returning:\n  \n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">FailureMessageAccessor</span>&gt;&nbsp;failures\n&nbsp;&nbsp;=&nbsp;a.GetFailureMessages();\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">FailureMessageAccessor</span>&nbsp;f&nbsp;<span style=\"color:blue;\">in</span>&nbsp;failures&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FailureSeverity</span>&nbsp;fseverity&nbsp;=&nbsp;a.GetSeverity();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;fseverity&nbsp;==&nbsp;<span style=\"color:#2b91af;\">FailureSeverity</span>.Warning&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.DeleteWarning(&nbsp;f&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nNow, all five stair variations are created without any warning messages being displayed.\n\nOf course, in your own more complex add-ins, you may need to handle other failures beside simple warnings that can be ignored.\n\nFor the most general case, you can make use of\nthe [generic warning swallower](http://thebuildingcoder.typepad.com/blog/2016/09/warning-swallower-and-roomedit3d-viewer-extension.html#2) mentioned\nabove.\n\nTo document the steps I took to achieve this and track all the changes I made, I extracted the sample to an\nown [StairsAutomation GitHub repository](https://github.com/jeremytammik/StairsAutomation).\n\nIt ended up being so simple that I need actually not have bothered, though...\n\nLooking forward to making further explorations and digging deeper into this area anon."
  }
]