[
  {
    "original_filename": "1102_joined_elements",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1102_joined_elements",
    "header_text": "Getting Two Different Kinds of Joined Elements",
    "local_header_href": "#getting-two-different-kinds-of-joined-elements",
    "chunk_text": "<h3>Getting Two Different Kinds of Joined Elements</h3><p>Revit loves creating and maintaining relationships, e.g. by joining elements and their geometry.</p><p>Here are a couple of element joining topics that we touched on in the past:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/autojoinelements.html\">AutoJoinElements</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/joined-beam-geometry-access.html\">Joined Beam Geometry Access</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/wall-joins-and-geometry.html\">Wall Joins and Geometry</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/move-duct-join-add-in-with-video-and-github-support.html\">Move Duct Join Add-In with Video and GitHub Support</a></li>\n</ul><p>The user interface also includes functionality related to this and explicitly labelled Join Geometry:</p><center>\n<img alt=\"Join Geometry in the Revit user interface\" src=\"img/JoinedElements.jpeg\"/> <!-- width=\"400\"/ -->\n</center><p>The same functionality uses slightly different nomenclature in the API, though, which might prove a bit confusing.</p><p>Here is a recent developer query to prove the point, with a nice clear answer by my colleague Akira Kudo:</p><p><strong>Question:</strong> I am trying to use the JoinGeometryUtils.GetJoinedElements method with little success.</p><p>When passed in an existing element that has another element joined to it, the method still returns an empty collection.</p><p>However, if I right click one of the elements in the user interface and then 'Select Joined Elements', both elements are selected.</p><p><strong>Answer:</strong> The GetJoinedElements method only returns elements that share a <code><b>GeomJoin</b></code>.</p><p>A GeomJoin is a pair-wise cut of geometry from one element to another.</p><p>To try this out, you can use the attached sample code and Revit model in\n\n<a href=\"zip/JoinedElements1.zip\">JoinedElements1.zip</a>,\nimplementing the following external command:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Reference</span> ref1 = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element, <span class=\"maroon\">\"pick an element\"</span> );\n \n    <span class=\"teal\">Element</span> elem = doc.GetElement( ref1 );\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; the_list_of_the_joined\n      = <span class=\"teal\">JoinGeometryUtils</span>.GetJoinedElements(\n        doc, elem );\n \n    System.Windows.Forms.<span class=\"teal\">MessageBox</span>.Show(\n      the_list_of_the_joined.Count.ToString() );\n \n    uidoc.Selection.Elements.Clear();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> the_list_of_the_joined )\n    {\n      uidoc.Selection.Elements.Add(\n        doc.GetElement( id ) );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p>As said, this is completely different from 'Select Joined Elements' in the user interface.</p><p>That UI functionality is available through the API via the LocationCurve.get_ElementsAtJoin method.\nIt determines elements joined to the current one at the end of its location curve and also enables changing their joining behaviour and order.</p><p>You can try this out as well using the attached sample code and Revit model in\n\n<a href=\"zip/JoinedElements2.zip\">JoinedElements2.zip</a>,\n\nimplementing this different external command:</p><p>Please also find the sample project in the JoinedElements2.zip.</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Reference</span> ref1 = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element, <span class=\"maroon\">\"pick an element\"</span> );\n \n    <span class=\"teal\">Element</span> elem = doc.GetElement( ref1 );\n    <span class=\"teal\">FamilyInstance</span> fi = elem <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n    <span class=\"teal\">LocationCurve</span> lc = fi.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n    uidoc.Selection.Elements.Clear();\n    <span class=\"teal\">ElementArray</span> startarray = lc\n      .get_ElementsAtJoin( 0 ); <span class=\"green\">// start</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> elem1 <span class=\"blue\">in</span> startarray )\n    {\n      uidoc.Selection.Elements.Add( elem1 );\n    }\n \n    <span class=\"teal\">ElementArray</span> endarray = lc\n      .get_ElementsAtJoin( 1 ); <span class=\"green\">// end</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> elem2 <span class=\"blue\">in</span> endarray )\n    {\n      uidoc.Selection.Elements.Add( elem2 );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p>You should also check out the code provided by the Revit SDK sample ProximityDetection_WallJoinControl in the GeometryAPI subfolder.</p>"
  }
]