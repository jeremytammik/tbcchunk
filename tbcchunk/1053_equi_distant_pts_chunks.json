[
  {
    "original_filename": "1053_equi_distant_pts",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1053_equi_distant_pts",
    "header_text": "Placing Equidistant Points Along a Curve",
    "local_header_href": "#placing-equidistant-points-along-a-curve",
    "chunk_text": "<h3>Placing Equidistant Points Along a Curve</h3><p>How can one generate equidistant points along a Revit curve element?</p><p>This is not completely trivial, since the Revit API only provides functionality to evaluate the curve based on its internal parameterisation, and not based on real world space coordinates.</p><p>I recently showed how to create a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/generating-a-midcurve-between-two-curve-elements.html\">\nmidcurve between two curve elements</a>,\n\nalso based on evaluating the two curves in their natural internal parameterisation space.</p><p>Now I looked at the task of placing equidistant points along a curve with the distance measured in real world coordinates instead of the curve parameterisation ones, prompted by the following developer query:</p><p><strong>Question:</strong> I am trying to evaluate equidistant points on a NurbSpline.\nThere is a method called Curve.Evaluate.\nIt takes a parameter as input.\nI tried to use the following code to find the parameters to calculate the points at the required distances:</p><pre class=\"code\">\n  <span class=\"blue\">double</span> param1 = curve.GetEndParameter(0);\n  <span class=\"blue\">double</span> param2 = curve.GetEndParameter(1);\n \n  <span class=\"blue\">double</span> paramCalc = param1 + ((param2 - param1)\n    * requiredDist / curveLength);\n \n  <span class=\"teal\">XYZ</span> evaluatedPoint = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span> (curve.IsInside(paramCalc))\n  {\n    <span class=\"blue\">double</span> normParam = curve\n      .ComputeNormalizedParameter(paramCalc);\n \n    evaluatedPoint = curve.Evaluate(\n      normParam, <span class=\"blue\">true</span>)));\n  }\n</pre><p>This code works fine for Arc and Line, but not for splines.</p><p>It seems we may need to use the spline knots and weights for the NurbSpline calculations.</p><p>Is there any other way to evaluate the points at the required distances for NurbSpline?</p><p>I implemented a sample command that places equally spaced circles on a selected curve at distances of 5 feet.\nHere is one result of running it:</p><center>\n<img alt=\"Non-equi-distant points along spline curve\" src=\"img/equi_distant_points_on_curve_1.jpg\" width=\"400\"/>\n</center><p>As you can see, the points on the arc are placed at the required distance, but not on the spline.</p><p>How can I solve this, please?</p><p><strong>Answer:</strong> You will be glad to hear that this can be solved, and it is easy.</p><p>As said, I recently discussed generating a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/generating-a-midcurve-between-two-curve-elements.html\">\nmidcurve between two curve elements</a>.</p><p>In that implementation, I move along the curve using a fixed step size in the curve parameter space.</p><p>Equal distances in the curve parameter space are transformed to non-equal distances in real world coordinates, especially when moving along a spline with sharp bends in it, as you discovered for yourself in your sample.</p><p>Determining points at equidistant positions along the curve, measured along the curve in real world coordinates instead of curve parameterisation coordinates, basically requires integration.\nYou need to evaluate the curve step by step in very small increments and measure the sum of distances between the evaluation points until you reach the desired distance, then add a new marker point at that position.</p><p>If the number of intermediate vertices returned by the standard Revit API curve Tessellate method is sufficient, you could use those to step along the curve. If you require a higher precision, you can generate the intermediate integration points yourself using the curve Evaluate or ComputeDerivatives method.</p><p>I implemented a new external command named EquiDistantPointEval to test a simple implementation of this algorithm.</p><p>First, here is the helper method that I adapted from your sample to create the marker circles:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create a horizontal detail curve circle of </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the given radius at the specified point.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">DetailArc</span> CreateCircle(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">XYZ</span> location,\n    <span class=\"blue\">double</span> radius )\n  {\n    <span class=\"teal\">XYZ</span> norm = <span class=\"teal\">XYZ</span>.BasisZ;\n \n    <span class=\"blue\">double</span> startAngle = 0;\n    <span class=\"blue\">double</span> endAngle = 2 * <span class=\"teal\">Math</span>.PI;\n \n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( norm, location );\n \n    <span class=\"teal\">Arc</span> arc = <span class=\"teal\">Arc</span>.Create( plane,\n      radius, startAngle, endAngle );\n \n    <span class=\"blue\">return</span> doc.Create.NewDetailCurve(\n      doc.ActiveView, arc ) <span class=\"blue\">as</span> <span class=\"teal\">DetailArc</span>;\n  }\n</pre><p>With that in place, the external command performs the following steps:\n\n<ul>\n<li>Prompt the user to select a curve element.</li>\n<li>Test its validity.</li>\n<li>Extract data from the selected curve.</li>\n<li>Create a list of equi-distant points along the curve.</li>\n<li>Place a marker circle at each point.</li>\n</ul>\n<p>Here is the entire implementation of the external command Execute mainline method achieving this:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Reference</span> r = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">try</span>\n  {\n    r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element,\n      <span class=\"blue\">new</span> <span class=\"teal\">CurveSelectionFilter</span>(),\n      <span class=\"maroon\">\"Please pick an arc or spline to select path\"</span> );\n  }\n  <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n    .<span class=\"teal\">OperationCanceledException</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == r )\n  {\n    message = <span class=\"maroon\">\"Null pick object reference.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e || !( e <span class=\"blue\">is</span> <span class=\"teal\">CurveElement</span> ) )\n  {\n    message = <span class=\"maroon\">\"Not a curve element.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"green\">// Extract data from the selected curve.</span>\n \n  <span class=\"teal\">Curve</span> curve = ( e <span class=\"blue\">as</span> <span class=\"teal\">CurveElement</span> ).GeometryCurve;\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; tessellation = curve.Tessellate();\n \n  <span class=\"green\">// Create a list of equi-distant points.</span>\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;( 1 );\n \n  <span class=\"blue\">double</span> stepsize = 5.0;\n  <span class=\"blue\">double</span> dist = 0.0;\n \n  <span class=\"teal\">XYZ</span> p = curve.GetEndPoint( 0 );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> q <span class=\"blue\">in</span> tessellation )\n  {\n    <span class=\"blue\">if</span>( 0 == pts.Count )\n    {\n      pts.Add( p );\n      dist = 0.0;\n    }\n    <span class=\"blue\">else</span>\n    {\n      dist += p.DistanceTo( q );\n \n      <span class=\"blue\">if</span>( dist &gt;= stepsize )\n      {\n        pts.Add( q );\n        dist = 0;\n      }\n      p = q;\n    }\n  }\n \n  <span class=\"green\">// Place a marker circle at each point.</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Draw Curves at Points\"</span> );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> pt <span class=\"blue\">in</span> pts )\n    {\n      CreateCircle( doc, pt, 1 );\n    }\n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>In its current state, it does not support straight lines properly.\nSince the tessellation of those returns just two points, it only places a marker at the start point, if it is shorter than the required distance, and at the start and end point, if it is longer.</p>\n<p>Here is the result of running it in your sample model:</p>\n<center>\n<img alt=\"Equi-distant points along spline curve\" src=\"img/equi_distant_points_on_curve_2.png\" width=\"400\"/>\n</center>\n<p>I hope this answers your question.</p>\n<p>Here is\n\n<a href=\"zip/EquiDistantPointEval.zip\">EquiDistantPointEval.zip</a> containing\n\nthe full source code, Visual Studio solution and add-in manifest for this external command.</p>\n<a name=\"2\"></a>\n<h4>How to Unjoin Lines</h4>\n<p>Before we close for today, here is a note to highlight a neat trick that was just mentioned on the Autodesk discussion forum on the topic of\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/Unjoin-Lines/td-p/4544099\">\nunjoining lines:</a></p>\n<p>\"For model lines, I believe if you change one of the lines to a different workset it will cause it to be unjoined.\nThen you could move it back to the original workset.\"</p>\n</p>"
  },
  {
    "original_filename": "1053_equi_distant_pts",
    "header_text": "How to Unjoin Lines",
    "local_header_href": "#how-to-unjoin-lines",
    "chunk_text": "<h4>How to Unjoin Lines</h4><p>Before we close for today, here is a note to highlight a neat trick that was just mentioned on the Autodesk discussion forum on the topic of\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/Unjoin-Lines/td-p/4544099\">\nunjoining lines:</a></p><p>\"For model lines, I believe if you change one of the lines to a different workset it will cause it to be unjoined.\nThen you could move it back to the original workset.\"</p>"
  }
]