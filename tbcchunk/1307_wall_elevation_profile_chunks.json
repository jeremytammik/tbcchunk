[
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "Curved Wall Elevation Profile and Creator Class Update",
    "local_header_href": "#curved-wall-elevation-profile-and-creator-class-update",
    "chunk_text": "<h3>Curved Wall Elevation Profile and Creator Class Update</h3><p>Alexander Ignatovich, Александр Игнатович, of\n\n<a href=\"http://www.iv-com.ru\">\nInvesticionnaya Venchurnaya Companiya</a>,\n\ntook another and deeper look at The Building Coder sample external command CmdWallProfile that I originally implemented in 2008 to retrieve the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/wall-elevation-profile.html\">\nwall elevation profile</a> and\n\nmy colleague Katsuaki Takamizawa modified to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/01/getting-the-wall-elevation-profile.html\">\nuse the ExporterIFCUtils.SortCurveLoops method</a> to\n\nsort the outer and inner loops a few months ago.</p><p>Alexander already made a number of other important contributions to The Building Coder in the past:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/setting-a-default-3d-view-orientation.html\">Exporting Image and Setting a Default 3D View Orientation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/intimate-revit-database-exploration-with-the-python-shell.html\">Intimate Revit Database Exploration with the Python Shell</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/multi-version-visual-studio-revit-add-in-wizard.html\">Multi-Version Visual Studio Revit Add-In Wizard</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/another-balloon-tip-implementation.html\">Another Balloon Tip Implementation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/category-analysis-with-and-without-python.html\">Category Analysis with and without Python</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/wpf-fill-pattern-viewer-control.html\">WPF Fill Pattern Viewer Control</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/getting-serious-adding-new-materials-from-list.html\">Getting Serious Adding New Materials from List</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/08/accessing-extensible-storage-on-ownerfamily-in-project.html\">Accessing Extensible Storage on OwnerFamily in Project</a></li>\n</ul><p>His improvement of the wall elevation profile command supports more complicated curves, such as the one generated by an arced window hosted by a cylindrical wall.</p><p>The results generated by\n\n<a href=\"http://www.mamikon.com/USArticles/RollingConesCylinders.pdf\">unwrapping curves from cylinders and cones</a> can\n\nbecome quite complicated and are not representable by the planar Revit API curve types.</p><p>Here is Alexander's analysis and description of his enhancements to support the case of an arced window in a cylindrical wall:</p><ul>\n<li><a href=\"#2\">Issues and task at hand</a></li>\n<li><a href=\"#3\">First attempt</a></li>\n<li><a href=\"#4\">Second attempt</a></li>\n<li><a href=\"#5\">Final solution</a></li>\n<li><a href=\"#6\">Python implementation</a></li>\n<li><a href=\"#7\">Complete external command</a></li>\n<li><a href=\"#8\">CreateModelLine clean-up</a></li>\n<li><a href=\"#9\">Download</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "Issues and Task at Hand",
    "local_header_href": "#issues-and-task-at-hand",
    "chunk_text": "<h4>Issues and Task at Hand</h4><p>You wrote about Wall elevation profiles in The Building Coder Samples in January and I was faced practically with the same task now.</p><p>Unfortunately, I could not get a wall profile for a wall whose Location curve is not a line, with neither the Execute1 nor Execute2 method from the sample, so it made me to go deeper and create my own implementation.\nI want to share this with the community.</p><p>The first thing I noticed: there is no need to use ExporterIFCUtils.SortCurveLoops.</p><p>For example, making use of it on my <a href=\"file:////a/rvt/ai_wall_profile.rvt\">test wall</a>:</p><center>\n<img alt=\"Test wall\" src=\"img/ai_wall_profile_1.png\" width=\"317\"/>\n</center><p>In the debugger I see three curve loops – the wall itself and 2 windows – but there are 0 'curve loops' loops after calling this method:</p><center>\n<img alt=\"Curve loops in debugger\" src=\"img/ai_wall_profile_2.png\" width=\"278\"/>\n</center><p>I don’t know whether it is a bug or expected behaviour, but the official Revit API reference does not recommend using the ExporterIFCUtils class\n(Jeremy adds: well, the Revit API development team did, actually, explaining its use to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/01/exporterifcutils-curve-loop-sort-and-validate.html\">\nsort and validate curve loops</a>).</p><p>So I tried to eliminate it – cf. <a href=\"zip/ai_CmdWallProfile_first_attempt.cs\">CmdWallProfile - first attempt.cs</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "First Attempt",
    "local_header_href": "#first-attempt",
    "chunk_text": "<h4>First Attempt</h4><p>The basic idea is that we have an array of CurveLoops, we got calling face.GetEdgesAsCurveLoops() method, and we can determine wall profile, using curveLoop.IsCounterclockwise(normal) – it is true if current curve loop is the wall edges.</p><p>One another (minor) changes that I used wall.Orientation instead of face.ComputeNormal( new UV( 0, 0 ) ); I think it is simpler to understand.</p><p>This implementation also does not work for my wall which Location curve is arc, it fails on creating plane with “The input curve loop does not lie in a  plane” message, but it works perfect on straight walls:</p><center>\n<img alt=\"Wall elevation profile with arced window on straight wall\" src=\"img/ai_wall_profile_3.png\" width=\"579\"/>\n</center><a name=\"4\"></a>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "Second Attempt",
    "local_header_href": "#second-attempt",
    "chunk_text": "<h4>Second Attempt</h4><p>So, let us rewrite the case, when the location curve is not Line – cf. <a href=\"zip/ai_CmdWallProfile_second_attempt.cs\">CmdWallProfile - second attempt.cs</a>.</p><p>I’ve also made a little change in Creator class: now the CreateModelCurve method returns the created curve:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">ModelCurve</span> CreateModelCurve( <span class=\"teal\">Curve</span> curve )\n  {\n    <span class=\"blue\">return</span> _credoc.NewModelCurve( curve,\n      NewSketchPlaneContainCurve( curve ) );\n  }\n</pre><p>In this implementation I test if the wall location curve is line:</p><pre class=\"code\">\n  <span class=\"blue\">if</span>( ( (<span class=\"teal\">LocationCurve</span>) wall.Location ).Curve\n    <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n  {\n    <span class=\"teal\">Plane</span> plane = creapp.NewPlane( curves );\n \n    <span class=\"teal\">SketchPlane</span> sketchPlane\n      = <span class=\"teal\">SketchPlane</span>.Create( doc, plane );\n \n    <span class=\"teal\">ModelCurveArray</span> curveElements\n      = credoc.NewModelCurveArray(\n        curves, sketchPlane );\n \n    <span class=\"blue\">if</span>( isCounterClockwise )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ModelCurve</span> c <span class=\"blue\">in</span> curveElements )\n      {\n        SetModelCurveColor( c, view, colorRed );\n      }\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> curve <span class=\"blue\">in</span> curves.Cast&lt;<span class=\"teal\">Curve</span>&gt;() )\n    {\n      <span class=\"blue\">var</span> mc = creator.CreateModelCurve( curve );\n \n      <span class=\"blue\">if</span>( isCounterClockwise )\n      {\n        SetModelCurveColor( mc, view, colorRed );\n      }\n    }\n  }\n</pre><p>This implementation still does not work for my test wall   :-)   But at least if I change non-rectangular window family type to a rectangular window it works:</p><center>\n<img alt=\"Wall elevation profile with rectangular window on cylindrical wall\" src=\"img/ai_wall_profile_4.png\" width=\"246\"/>\n</center><a name=\"5\"></a>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "Final Solution",
    "local_header_href": "#final-solution",
    "chunk_text": "<h4>Final Solution</h4><p>The problem is that my window has top edge is an elliptical curve, and it is located on cylindrical face, so its actual geometry is a bit crazy – Hermite spline interpolated – and this curve does not lie in a plane.</p><p>So, the problem is in the creator.CreateModelCurve method.</p><p>First of all, let us get to know what curve types are provided in the Revit API:</p><center>\n<img alt=\"Revit API curve types\" src=\"img/ai_wall_profile_5.png\" width=\"271\"/>\n</center><ul>\n<li>Line, Arc and Ellipse Curves all lie in a plane, whereas CylindricalHelix, HermitSpline, NurbSpline do not.</li>\n<li>Arc and Ellipse curves have a centre and normal, which define a plane; we can also define a plane that passes a line.</li>\n<li>Other curves should be tessellated, so we need a new method that returns an array of model curves to represent the tessellated curve – that requires numerous lines.</li>\n</ul><p>We can easily handle these cases as follows:</p><ul>\n<li>We first test if the curve is a Line; if it is, create a model line from its end points.</li>\n<li>Secondly, we test if the curve is an Arc, then if it is an Ellipse.</li>\n<li>In all other cases, we create multiple lines from the tessellated curve points.</li>\n</ul><p>Please refer to <a href=\"ai_CmdWallProfile_final.cs\">CmdWallProfile - final.cs</a> and the updated Creator class using the following code demonstrating the detailed implementation:</p><pre class=\"code\">\n  <span class=\"teal\">ModelCurve</span> CreateModelCurve(\n    <span class=\"teal\">Curve</span> curve,\n    <span class=\"teal\">XYZ</span> origin,\n    <span class=\"teal\">XYZ</span> normal )\n  {\n    <span class=\"teal\">Plane</span> plane = _creapp.NewPlane( normal, origin );\n \n    <span class=\"teal\">SketchPlane</span> sketchPlane = <span class=\"teal\">SketchPlane</span>.Create(\n      _doc, plane );\n \n    <span class=\"blue\">return</span> _credoc.NewModelCurve(\n      curve, sketchPlane );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">ModelCurveArray</span> CreateModelCurves(\n    <span class=\"teal\">Curve</span> curve )\n  {\n    <span class=\"blue\">var</span> array = <span class=\"blue\">new</span> <span class=\"teal\">ModelCurveArray</span>();\n \n    <span class=\"blue\">var</span> line = curve <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n    <span class=\"blue\">if</span>( line != <span class=\"blue\">null</span> )\n    {\n      array.Append( CreateModelLine( _doc,\n        curve.GetEndPoint( 0 ),\n        curve.GetEndPoint( 1 ) ) );\n \n      <span class=\"blue\">return</span> array;\n    }\n \n    <span class=\"blue\">var</span> arc = curve <span class=\"blue\">as</span> <span class=\"teal\">Arc</span>;\n    <span class=\"blue\">if</span>( arc != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">var</span> origin = arc.Center;\n      <span class=\"blue\">var</span> normal = arc.Normal;\n \n      array.Append( CreateModelCurve(\n        arc, origin, normal ) );\n \n      <span class=\"blue\">return</span> array;\n    }\n \n    <span class=\"blue\">var</span> ellipse = curve <span class=\"blue\">as</span> <span class=\"teal\">Ellipse</span>;\n    <span class=\"blue\">if</span>( ellipse != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">var</span> origin = ellipse.Center;\n      <span class=\"blue\">var</span> normal = ellipse.Normal;\n \n      array.Append( CreateModelCurve(\n        ellipse, origin, normal ) );\n \n      <span class=\"blue\">return</span> array;\n    }\n \n    <span class=\"blue\">var</span> points = curve.Tessellate();\n    <span class=\"blue\">var</span> p = points.First();\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> q <span class=\"blue\">in</span> points.Skip( 1 ) )\n    {\n      array.Append( CreateModelLine( _doc, p, q ) );\n      p = q;\n    }\n \n    <span class=\"blue\">return</span> array;\n  }\n</pre><p>It is done now:</p><center>\n<img alt=\"Wall elevation profile with arced window on cylindrical wall\" src=\"img/ai_wall_profile_6.png\" width=\"485\"/>\n</center><a name=\"6\"></a>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "Implemented in the Revit Python Shell",
    "local_header_href": "#implemented-in-the-revit-python-shell",
    "chunk_text": "<h4>Implemented in the Revit Python Shell</h4><p>Another interesting aspect of this development to note:</p><p>Actually all steps were originally implemented in the Revit Python shell.</p><p>The Python code looks pretty and, most important, it is very easy to change it with no need to restart Revit.</p><p>For example, the first attempt code looks like this – very short and clear:</p><pre class=\"prettyprint\">\n  t = Transaction(doc, 'wall elevation profile')\n  t.Start()\n\n  colorRed = Color( 255, 0, 0 )\n  view = doc.ActiveView\n  for wall in selection:\n    sideFaceReference = HostObjectUtils.GetSideFaces(\n      wall, ShellLayerType.Exterior ) [0]\n    face = wall.GetGeometryObjectFromReference(\n      sideFaceReference)\n    offset = Transform.CreateTranslation(\n      5 * wall.Orientation);\n    for curveLoop in face.GetEdgesAsCurveLoops():\n      curves = doc.Application.Create.NewCurveArray()\n      for curve in curveLoop:\n        curves.Append(curve.CreateTransformed(offset))\n\n      plane = doc.Application.Create.NewPlane( curves )\n      sketchPlane = SketchPlane.Create( doc, plane )\n\n      curveElements = doc.Create.NewModelCurveArray(\n        curves, sketchPlane )\n\n      if curveLoop.IsCounterclockwise(wall.Orientation):\n        for mcurve in curveElements:\n          overrides = view.GetElementOverrides(mcurve.Id)\n          overrides.SetProjectionLineColor(colorRed)\n          view.SetElementOverrides(mcurve.Id, overrides)\n\n  t.Commit()\n</pre><a name=\"7\"></a>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "Complete External Command",
    "local_header_href": "#complete-external-command",
    "chunk_text": "<h4>Complete External Command</h4><p>Here is the entire implementation of the new CmdWallProfile Execute3 method, as well as the external command Execute mainline that chooses between the three versions:</p><pre class=\"code\">\n  <span class=\"blue\">void</span> SetModelCurvesColor(\n    <span class=\"teal\">ModelCurveArray</span> modelCurves,\n    <span class=\"teal\">View</span> view,\n    <span class=\"teal\">Color</span> color )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> curve <span class=\"blue\">in</span> modelCurves\n      .Cast&lt;<span class=\"teal\">ModelCurve</span>&gt;() )\n    {\n      <span class=\"blue\">var</span> overrides = view.GetElementOverrides(\n        curve.Id );\n \n      overrides.SetProjectionLineColor( color );\n \n      view.SetElementOverrides( curve.Id, overrides );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Improved implementation by Alexander Ignatovich</span>\n  <span class=\"gray\">///</span><span class=\"green\"> supporting curved wall with curved window, </span>\n  <span class=\"gray\">///</span><span class=\"green\"> second attempt, published April 10, 2015:</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute3(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp\n      = app.Create;\n \n    Autodesk.Revit.Creation.<span class=\"teal\">Document</span> credoc\n      = doc.Create;\n \n    <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element, <span class=\"maroon\">\"Select a wall\"</span> );\n \n    <span class=\"teal\">Element</span> e = uidoc.Document.GetElement( r );\n \n    <span class=\"teal\">Creator</span> creator = <span class=\"blue\">new</span> <span class=\"teal\">Creator</span>( doc );\n \n    <span class=\"teal\">Wall</span> wall = e <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n \n    <span class=\"blue\">if</span>( wall == <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Wall Profile\"</span> );\n \n      <span class=\"green\">// Get the external wall face for the profile</span>\n      <span class=\"green\">// a little bit simpler than in the last realization</span>\n \n      <span class=\"teal\">Reference</span> sideFaceReference\n        = <span class=\"teal\">HostObjectUtils</span>.GetSideFaces(\n          wall, <span class=\"teal\">ShellLayerType</span>.Exterior )\n            .First();\n \n      <span class=\"teal\">Face</span> face = wall.GetGeometryObjectFromReference(\n        sideFaceReference ) <span class=\"blue\">as</span> <span class=\"teal\">Face</span>;\n \n      <span class=\"green\">// The normal of the wall external face.</span>\n \n      <span class=\"teal\">XYZ</span> normal = wall.Orientation;\n \n      <span class=\"green\">// Offset curve copies for visibility.</span>\n \n      <span class=\"teal\">Transform</span> offset = <span class=\"teal\">Transform</span>.CreateTranslation(\n        5 * normal );\n \n      <span class=\"green\">// If the curve loop direction is counter-</span>\n      <span class=\"green\">// clockwise, change its color to RED.</span>\n \n      <span class=\"teal\">Color</span> colorRed = <span class=\"blue\">new</span> <span class=\"teal\">Color</span>( 255, 0, 0 );\n \n      <span class=\"green\">// Get edge loops as curve loops.</span>\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">CurveLoop</span>&gt; curveLoops\n        = face.GetEdgesAsCurveLoops();\n \n      <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> curveLoop <span class=\"blue\">in</span> curveLoops )\n      {\n        <span class=\"teal\">CurveArray</span> curves = creapp.NewCurveArray();\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Curve</span> curve <span class=\"blue\">in</span> curveLoop )\n          curves.Append( curve.CreateTransformed(\n            offset ) );\n \n        <span class=\"blue\">var</span> isCounterClockwize = curveLoop\n          .IsCounterclockwise( normal );\n \n        <span class=\"green\">// Create model lines for an curve loop if it is made </span>\n \n        <span class=\"blue\">if</span>( ( (<span class=\"teal\">LocationCurve</span>) wall.Location ).Curve\n          <span class=\"blue\">is</span> <span class=\"teal\">Line</span> )\n        {\n          <span class=\"teal\">Plane</span> plane = creapp.NewPlane( curves );\n \n          <span class=\"teal\">SketchPlane</span> sketchPlane\n            = <span class=\"teal\">SketchPlane</span>.Create( doc, plane );\n \n          <span class=\"teal\">ModelCurveArray</span> curveElements = credoc\n            .NewModelCurveArray( curves, sketchPlane );\n \n          <span class=\"blue\">if</span>( isCounterClockwize )\n          {\n            SetModelCurvesColor( curveElements,\n              view, colorRed );\n          }\n        }\n        <span class=\"blue\">else</span>\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> curve <span class=\"blue\">in</span> curves.Cast&lt;<span class=\"teal\">Curve</span>&gt;() )\n          {\n            <span class=\"blue\">var</span> curveElements = creator.CreateModelCurves( curve );\n            <span class=\"blue\">if</span>( isCounterClockwize )\n            {\n              SetModelCurvesColor( curveElements, view, colorRed );\n            }\n          }\n        }\n      }\n      tx.Commit();\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> cd,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> msg,\n    <span class=\"teal\">ElementSet</span> els )\n  {\n    <span class=\"green\">// Choose which implementation to use.</span>\n \n    <span class=\"blue\">int</span> use_execute_nr = 3;\n \n    <span class=\"blue\">switch</span>( use_execute_nr )\n    {\n      <span class=\"blue\">case</span> 1: <span class=\"blue\">return</span> Execute1( cd, <span class=\"blue\">ref</span> msg, els );\n      <span class=\"blue\">case</span> 2: <span class=\"blue\">return</span> Execute2( cd, <span class=\"blue\">ref</span> msg, els );\n      <span class=\"blue\">case</span> 3: <span class=\"blue\">return</span> Execute3( cd, <span class=\"blue\">ref</span> msg, els );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n</pre><a name=\"8\"></a>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "CreateModelLine Clean-up",
    "local_header_href": "#createmodelline-clean-up",
    "chunk_text": "<h4>CreateModelLine Clean-up</h4><p>In addition to the CmdWallProfile enhancement, Alexander pointed out that it would help to remove the non-static CreateModelLine(XYZ p, XYZ q) method, since it cannot create even a simple line from (0, 0, 0) to  (1, 1, 1), because it tries to draw the line in one of the XOY, XOZ or YOZ planes, which do not contain this slanted line.</p><p>So I did   :-)</p><a name=\"9\"></a>"
  },
  {
    "original_filename": "1307_wall_elevation_profile",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>I added Alexander's three versions and the CreateModelLine clean-up to\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a> and\n\ntagged them as the following separate releases:</p><ul>\n<li><a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.3\">release 2015.0.120.3</a> – before Alexander's CmdWallProfile enhancement</li>\n<li><a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.4\">release 2015.0.120.4</a> – integrated CmdWallProfile - first attempt.cs</li>\n<li><a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.5\">release 2015.0.120.5</a> – integrated CmdWallProfile - second attempt.cs</li>\n<li><a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.6\">release 2015.0.120.6</a> – integrated CmdWallProfile - final.cs</li>\n<li><a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.7\">release 2015.0.120.7</a> – eliminated and replaced non-static Creator.CreateModelLine taking XYZ start and end point by static overload taking Document as well</li>\n</ul><p>For the sake of completeness, here is also <a href=\"zip/ai_CmdWallProfile.zip\">ai_CmdWallProfile.zip</a> containing Alexander's original complete sample code and test model.</p><p>Many thanks to Alexander for his in-depth research, implementation, support and sharing!</p>"
  }
]