[
  {
    "original_filename": "0421_get_element_type",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0421_get_element_type",
    "header_text": "Get Element Type",
    "local_header_href": "#get-element-type",
    "chunk_text": "<h3>Get Element Type</h3><p>In the Revit 2011 API, the Symbol class was been renamed to ElementType and some other changes were made to clarify the usage of element types in Revit, which were previously referred to as both types and symbols.\nSome remnants of the previous naming conventions still exists, such as the FamilySymbol class and the FamilyInstance.Symbol property, but the long-term intention is to move toward calling these things element types instead of symbols.\n\n<p>This renaming and restructuring has causes some confusion here and there in porting existing applications, giving rise to questions such as the following:\n\n<p><strong>Question:</strong> I have been updating my Revit 2010 API code to the 2011 version and realized that the Element.ObjectType property no longer exists.\n\n<p>I want to retrieve the AssemblyCode value from the element type properties in the Revit project.\nHere is the old code for the Revit 2010 API:\n\n<pre class=\"code\">\n  <span class=\"blue\">string</span> assembly_code\n    = e.ObjectType.get_Parameter(\n      <span class=\"teal\">BuiltInParameter</span>.UNIFORMAT_CODE )\n      .AsString();\n</pre>\n<p>How can I rewrite this code for Revit 2011?\n\n<p><strong>Answer:</strong> The first place to look in cases like this is the What's New section of the Revit API help file RevitAPI.chm, which includes the following section:\n\n<span style=\"color:darkblue\">\n<h4>Replacement for Symbol and properties that access types</h4>\n<p>The Symbol class has been renamed to ElementType.\n\n<p>The properties that access types from Elements have been replaced:\n\n<ul>\n<li>Old property: Element.ObjectType\n<ul>\n<li>New interfaces: Element.GetTypeId(), Element.ChangeTypeId()\n<li>Notes: ChangeTypeId() returns the id of a new element; in rare cases, changing the element type will result in deletion of the current element. Static versions which operate on sets of elements are also supplied.\n</li></li></ul>\n<li>Old property: Element.SimilarObjectTypes\n<ul>\n<li>New interfaces: Element.GetValidTypes()\n</li></ul>\n</li></li></ul>\n</p></p></span>\n<p>So you can simply use GetTypeId and then open the associated ElementType object to access the parameter.\n\n<p>Some samples of using these new methods are given in the discussions on\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">Getting the type id</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">Determining sheet size</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html\">RevitWebcam</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">Setting a tag type</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/populating-a-data-grid-view.html\">Populating a data grid view</a>\n</li></li></li></li></li></ul>\n<p>The code that you show above can thus be rewritten as follows for the Revit 2011 API:\n\n<pre class=\"code\">\n  <span class=\"teal\">ElementId</span> id = e.GetTypeId();\n \n  <span class=\"teal\">ElementType</span> type = m_doc.get_Element( id )\n    <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n \n  <span class=\"blue\">string</span> AssemblyCode = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.UNIFORMAT_CODE )\n      .AsString();\n</pre>\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0421_get_element_type",
    "header_text": "Replacement for Symbol and properties that access types",
    "local_header_href": "#replacement-for-symbol-and-properties-that-access-types",
    "chunk_text": "<h4>Replacement for Symbol and properties that access types</h4><p>The Symbol class has been renamed to ElementType.\n\n<p>The properties that access types from Elements have been replaced:\n\n<ul>\n<li>Old property: Element.ObjectType\n<ul>\n<li>New interfaces: Element.GetTypeId(), Element.ChangeTypeId()\n<li>Notes: ChangeTypeId() returns the id of a new element; in rare cases, changing the element type will result in deletion of the current element. Static versions which operate on sets of elements are also supplied.\n</li></li></ul>\n<li>Old property: Element.SimilarObjectTypes\n<ul>\n<li>New interfaces: Element.GetValidTypes()\n</li></ul>\n</li></li></ul>\n</p></p>"
  }
]