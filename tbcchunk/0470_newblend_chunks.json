[
  {
    "original_filename": "0470_newblend",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0470_newblend",
    "header_text": "NewBlend Sample",
    "local_header_href": "#newblend-sample",
    "chunk_text": "<h3>NewBlend Sample</h3><p>Until now, The Building Coder included no example at all of using the NewBlend method.\nA developer ran into an issue using it, and my colleague Joe Ye created an external command to resolve the issue, so I took and added it.\nHere is the issue that prompted this:\n\n<p><strong>Question:</strong> I am trying to create a blend with two circular profiles, but it is not working. \nCan you please provide some solution for us? \n\n<p><strong>Answer:</strong> After several tests, I found that the issue is due to the fact that the top and bottom profiles should contain at least two curves.\n\n<p>I split the circle that you were using for you profile into two semi-circle arcs.\nNow the command successfully creates the new blend.\n\n<p>I used Joe's sample code to create a new Building Coder sample external command CmdNewBlend.\nIt exercises the following helper method CreateBlend for the actual new blend creation:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"teal\">Blend</span> CreateBlend( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">Debug</span>.Assert( doc.IsFamilyDocument,\n    <span class=\"maroon\">\"this method will only work in a family document\"</span> );\n \n  <span class=\"teal\">Application</span> app = doc.Application;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creApp \n    = app.Create;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">FamilyItemFactory</span> factory \n    = doc.FamilyCreate;\n \n  <span class=\"blue\">double</span> startAngle = 0;\n  <span class=\"blue\">double</span> midAngle = <span class=\"teal\">Math</span>.PI;\n  <span class=\"blue\">double</span> endAngle = 2 * <span class=\"teal\">Math</span>.PI;\n \n  <span class=\"teal\">XYZ</span> xAxis = <span class=\"teal\">XYZ</span>.BasisX;\n  <span class=\"teal\">XYZ</span> yAxis = <span class=\"teal\">XYZ</span>.BasisY;\n \n  <span class=\"teal\">XYZ</span> center = <span class=\"teal\">XYZ</span>.Zero;\n  <span class=\"teal\">XYZ</span> normal = -<span class=\"teal\">XYZ</span>.BasisZ;\n  <span class=\"blue\">double</span> radius = 0.7579;\n \n  <span class=\"teal\">Arc</span> arc1 = creApp.NewArc( center, radius, \n    startAngle, midAngle, xAxis, yAxis );\n \n  <span class=\"teal\">Arc</span> arc2 = creApp.NewArc( center, radius, \n    midAngle, endAngle, xAxis, yAxis );\n \n  <span class=\"teal\">CurveArray</span> baseProfile = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n  baseProfile.Append( arc1 );\n  baseProfile.Append( arc2 );\n \n  <span class=\"teal\">XYZ</span> center2 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 1.27 );\n \n  <span class=\"teal\">Arc</span> arc3 = creApp.NewArc( center2, radius, \n    startAngle, midAngle, xAxis, yAxis );\n \n  <span class=\"teal\">Arc</span> arc4 = creApp.NewArc( center2, radius, \n    midAngle, endAngle, xAxis, yAxis );\n \n  <span class=\"teal\">CurveArray</span> topProfile = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n  topProfile.Append( arc3 );\n  topProfile.Append( arc4 );\n \n  <span class=\"teal\">Plane</span> basePlane = creApp.NewPlane( \n    normal, center );\n \n  <span class=\"teal\">SketchPlane</span> sketch = factory.NewSketchPlane( \n    basePlane );\n \n  <span class=\"teal\">Blend</span> blend = factory.NewBlend( <span class=\"blue\">true</span>, \n    topProfile, baseProfile, sketch );\n \n  <span class=\"blue\">return</span> blend;\n}\n</pre>\n<p>The command mainline simply checks that the current document is indeed a family document and then calls CreateBlend:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Automatic )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdNewBlend</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"blue\">if</span>( doc.IsFamilyDocument )\n    {\n      <span class=\"teal\">Blend</span> blend = CreateBlend( doc );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n    <span class=\"blue\">else</span>\n    {\n      message = <span class=\"maroon\">\"Please run this command \"</span>\n        + <span class=\"maroon\">\"in a family document.\"</span>;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n}\n</pre>\n<p>This is what the resulting blend looks like in the family editor:</p>\n<center>\n<img alt=\"New blend element\" src=\"img/newblend.png\"/>\n</center>\n<p>I modified the code to create a more interesting shape using a skewed rectangle for the top profile like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">CurveArray</span> topProfile = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n  <span class=\"blue\">bool</span> circular_top = <span class=\"blue\">false</span>;\n \n  <span class=\"blue\">if</span>( circular_top )\n  {\n    <span class=\"green\">// create a circular top profile:</span>\n \n    <span class=\"teal\">XYZ</span> center2 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 1.27 );\n \n    <span class=\"teal\">Arc</span> arc3 = creApp.NewArc( center2, radius,\n      startAngle, midAngle, xAxis, yAxis );\n \n    <span class=\"teal\">Arc</span> arc4 = creApp.NewArc( center2, radius,\n      midAngle, endAngle, xAxis, yAxis );\n \n    topProfile.Append( arc3 );\n    topProfile.Append( arc4 );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// create a skewed rectangle top profile:</span>\n \n    <span class=\"teal\">XYZ</span>[] pts = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[] {\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(0,0,3), \n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(2,0,3), \n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(3,2,3), \n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(0,4,3)\n    };\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 4; ++i )\n    {\n      topProfile.Append( creApp.NewLineBound(\n        pts[0 == i ? 3 : i - 1], pts[i] ) );\n    }\n  }\n</pre>\n<p>Running that in a new family document based on the Metric Column template creates a shape like this:</p>\n<center>\n<img alt=\"New blend element\" src=\"img/newblend2.png\"/>\n</center>\n<p>Here is what it looks like in plan view:</p>\n<center>\n<img alt=\"New blend element plan view\" src=\"img/newblend3.png\"/>\n</center>\n<p>Here is \n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_78.zip -->\n<a href=\"zip/bc_11_78.zip\">\nversion 2011.0.78.0</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution with the new command.\n</p></p></p></p></p></p></p></p>"
  }
]