[
  {
    "original_filename": "0736_melbourne_day_1",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0736_melbourne_day_1",
    "header_text": "Melbourne Day One",
    "local_header_href": "#melbourne-day-one",
    "chunk_text": "<h3>Melbourne Day One</h3><p>These days right now represent a unique time in our life history. \nVenus and Jupiter are in a \n\n<a href=\"http://earthsky.org/astronomy-essentials/visible-planets-tonight-mars-jupiter-venus-saturn-mercury\">\nstunning conjunction</a>,\n\ncloser together right now than they will ever be again for the next two hundred years. \nIf you have a chance, don't forget to look up at the sky in the evenings!</p><center>\n<img alt=\"Venus Jupiter conjunction\" src=\"img/venus_jupiter.jpg\"/>\n</center><p>In another unique and far-away event, at least from my normal habitat, we completed the first day of the Revit API Training here in Melbourne.\n\n<p>Talking about being far away from my everyday habitat, I went for a walk with my hosts Kim, Rob, Erika and Lewis and their friends Geoff, Vivienne and Alice up the Anakie Gorge in the\n\n<a href=\"http://en.wikipedia.org/wiki/Brisbane_Ranges_National_Park\">\nBrisbane Ranges National Park</a>\n\nlast Saturday, enjoying the wonderful Australian flora:</p>\n<center>\n<img alt=\"Anakie Gorge\" src=\"file:////j/photo/jeremy/2012/2012-03-17_anakie_gorge_melbourne/dsc03406.jpg\" width=\"400\"/>\n</center>\n<p>Back in the city and the Autodesk training room in \n\n<a href=\"http://en.wikipedia.org/wiki/Queen_Street,_Melbourne\">\nQueen's Road</a> we \n\nare a nice mix of participants, many with significant Revit product and some Revit API experience, others with zero of both, but decades of professional application development behind them and a wish to make use of it within the Revit API.\n\n<p>On the first day we went through the basics of the Revit API, all of which are also covered by the \n\nmaterials provided by the \n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Center</a> and \n\ndescribed in more detail in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/preparing-for-a-hands-on-revit-api-training.html\">\nhands-on training preparation</a> suggestions.\n\n<h4>Command Instantiation and Element Picking</h4>\n<p>One little sample command that we ended up developing together simply demonstrates interactive element selection and changing the name of an element type. \nIn the case of a wall, the attempt to change the name of the wall itself throws an exception, because the wall instance is actually just reflecting its type name. \nFor other instances it throws no exception but has no effect either.\nChanging the code to modify the name of the element type instead of the instance works in both these cases.\n\n<p>While playing around with this, one interesting and previously unanswered question that we stumbled across was on the instantiation of the external command implementation class. \n\n<p>In AutoCAD.NET, a separate instance of a command implementation class is created for each document, and then reused for future command invocations in that document.\nHow is this handled in Revit?\n\n<p>The code required to explore and answer this question is very simple: just implement a public constructor for the class which counts and prints out the number of invocations.\n\n<pre class=\"code\">\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n \n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">static</span> <span class=\"blue\">int</span> _instance_count = 0;\n \n    <span class=\"blue\">public</span> Command()\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} instances.\"</span>, \n        ++_instance_count );\n    }\n \n    <span class=\"green\">// . . .</span>\n  }\n</pre>\n<p>As it turns out, a new instance of the command class is created every time the command is launched.\n\n<p>Oops. \nLooking in a bit more depth, we discovered that this is in fact clearly stated in the developer guide, which says: \"When a command is selected, a command object is created and its Execute() method is called. Once this method returns back to Revit, the command object is destroyed.\"\n\n<p>This confirms what every careful programmer would do subconsciously anyway: keep your command class implementation as light as possible, since it will be re-instantiated for each call of your command.\n\n<p>If you need to store any large amounts of data, then do so either in static variables, or, more cleanly, in separate singleton classes elsewhere.\n\n<p>The code we ended up with to select an element and rename its type looks like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject( \n      <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick an element.\"</span> );\n \n    e = doc.get_Element( r.ElementId );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Rename Element\"</span> );\n \n    <span class=\"teal\">ElementId</span> id = e.GetTypeId();\n \n    <span class=\"teal\">Element</span> type = doc.get_Element( id );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != type )\n    {\n      type.Name = <span class=\"maroon\">\"Melbourne \"</span> + type.Name;\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>We used this to discuss a number of basic aspects of add-in creation:\n\n<ul>\n<li>Referencing the Revit API assemblies and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/set-copy-local-to-false.html\">\nsetting the copy local flag</a>.\n\n<li>Implementing the basic application skeleton code.\n\n<li>Using attributes to define the journaling, regeneration and transaction options. \nJournaling we might return to tomorrow, regeneration is trivial, since there is only one single option nowadays, and transaction is important to understand: automatic, manual or read-only, of which I generally recommend using only the latter two.\n\n<li>Creating the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html\">\nadd-in manifest and GUID</a> and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/network-access-to-add-in-manifest-and-icons.html\">\nother add-in manifest features</a>.\n\n<li>Using the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/product-and-add-in-wizard-updates.html\">\nRevit add-in wizard</a> to\n\nhandle all that automatically.\n\n<li>Selecting an element using PickObject and handling the exception thrown by user cancellation.\n<li>Transaction management and element modification.\n<li>Instances versus types.\n</li></li></li></li></li></li></li></li></ul>\n<h4>Filtered Element Collector and Using Parameter Filter for Non-Empty String</h4>\n<p>In a second step, we had a look at a filtered element collector to access the Revit database contents.\n\n<p>We decided that parameter filters are of special interest, and explored how to filter for an empty and a non-empty string value.\n\n<p>Here is the code that we ended up with:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">BuiltInParameter</span> bip \n    = <span class=\"teal\">BuiltInParameter</span>.ALL_MODEL_MARK;\n \n  <span class=\"teal\">ParameterValueProvider</span> provider\n    = <span class=\"blue\">new</span> <span class=\"teal\">ParameterValueProvider</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( bip ) );\n \n  <span class=\"green\">// Filter for an empty string:</span>\n \n  <span class=\"green\">//FilterStringRuleEvaluator evaluator </span>\n  <span class=\"green\">//  = new FilterStringEquals();</span>\n \n  <span class=\"green\">// Filter for an non-empty string:</span>\n \n  <span class=\"teal\">FilterStringRuleEvaluator</span> evaluator \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilterStringGreater</span>();\n \n  <span class=\"teal\">FilterStringRule</span> rule = <span class=\"blue\">new</span> <span class=\"teal\">FilterStringRule</span>( \n    provider, evaluator, <span class=\"maroon\">\"\"</span>, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">bool</span> inverted = <span class=\"blue\">false</span>;\n \n  <span class=\"teal\">ElementParameterFilter</span> filter\n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementParameterFilter</span>( rule, inverted );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .WherePasses( filter );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n  {\n    <span class=\"teal\">Parameter</span> p = e.get_Parameter( bip );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"'{0}': '{1}'\"</span>, \n      e.Name, \n      (<span class=\"blue\">null</span>==p? <span class=\"maroon\">\"null\"</span> : p.AsString() ) );\n  }\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>In its current, final state, it uses a parameter string filter to retrieve and list all elements with a non-empty Mark parameter value.\n\n<p>To do so, we search for any string values greater than the empty string \"\".\n\n<p>We also tried using a null value instead of the empty string, but that throws a rather inelegant exception in the FilterStringRule constructor saying\n\n<ul>\n<li>ArgumentNullException: \n\"The input argument \\\"ruleString\\\" of function \n`anonymous-namespace'::FilterStringRule_constructor \nor one item in the collection is null at line 1193 \nof file n:\\\\build\\\\2012_ship_inst_20110916_2132\n\\\\source\\\\api\\\\revitapi\\\\gensrc\\\\APIFilterRule.cpp.\n\\r\\nParameter name: ruleString\"\n</li></ul>\n<p>We also tested searching for all empty string values using a FilterStringEquals evaluator, and that worked fine as well.\n\n\n<h4>Evernote and a Revit Product and Family Tutorial</h4>\n<p>During our explorations, we underlined the importance of families and the family API.\nI mentioned the Autodesk \n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=13080413&amp;linkID=9243097\">\nRevit 2010 Families Guide</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html\">\nseveral</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/boolean-operations-and-instancevoidcututils.html\">\ntimes</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/families-guide.html\">\nin the</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/bim-versus-free-geometry-and-product-training.html\">\npast</a>.\n\nIt is free and covers the basics well together with Google, especially some important Revit MEP content best practices.\n\n<!--\nThe Seek Family Guidelines\nand am sorry to say that it is not highly regarded and advises several non-optimal practices in this complex area.\nI think one of the terms used was 'absolute rubbish'.\n\n199_family_api.htm:<li>Families Guide\n600_instance_void_cut.htm:Families Guide</a>  (still the\n664_families_guide.htm:<h3>Families Guide</h3>\n664_families_guide.htm:Revit Families Guide</a>.\n723_spark_learning.htm:Revit Families Guide</a> is\n-->\n<p>For more background, especially on Revit MEP, the \n\n<a href=\"http://cad-notes.com/2011/12/learning-autodesk-revit-mep-2012-training-video-is-available\">\nLearning Autodesk Revit MEP 2012</a> video \n\ntraining by Simon Whitbread, \n\n<!-- of <a href=\"http://www.karelcad.com.au/\">KarelCAD</a> --> \n\nDon Bokmiller and Joel Londenberg is recommended.\n\n<!-- 4 disks worth of stuff plus working files, family section, the Autodesk Revit Family guide is rubbish and includes bad practice -->\n<p>One neat little non-Revit-API topic that popped up was the handy and free little \n\n<a href=\"http://www.evernote.com\">\nEvernote</a> utility \n\nfor storing and sharing notes across the cloud and various mobile devices.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0736_melbourne_day_1",
    "header_text": "Command Instantiation and Element Picking",
    "local_header_href": "#command-instantiation-and-element-picking",
    "chunk_text": "<h4>Command Instantiation and Element Picking</h4><p>One little sample command that we ended up developing together simply demonstrates interactive element selection and changing the name of an element type. \nIn the case of a wall, the attempt to change the name of the wall itself throws an exception, because the wall instance is actually just reflecting its type name. \nFor other instances it throws no exception but has no effect either.\nChanging the code to modify the name of the element type instead of the instance works in both these cases.\n\n<p>While playing around with this, one interesting and previously unanswered question that we stumbled across was on the instantiation of the external command implementation class. \n\n<p>In AutoCAD.NET, a separate instance of a command implementation class is created for each document, and then reused for future command invocations in that document.\nHow is this handled in Revit?\n\n<p>The code required to explore and answer this question is very simple: just implement a public constructor for the class which counts and prints out the number of invocations.\n\n<pre class=\"code\">\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n \n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">static</span> <span class=\"blue\">int</span> _instance_count = 0;\n \n    <span class=\"blue\">public</span> Command()\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} instances.\"</span>, \n        ++_instance_count );\n    }\n \n    <span class=\"green\">// . . .</span>\n  }\n</pre>\n<p>As it turns out, a new instance of the command class is created every time the command is launched.\n\n<p>Oops. \nLooking in a bit more depth, we discovered that this is in fact clearly stated in the developer guide, which says: \"When a command is selected, a command object is created and its Execute() method is called. Once this method returns back to Revit, the command object is destroyed.\"\n\n<p>This confirms what every careful programmer would do subconsciously anyway: keep your command class implementation as light as possible, since it will be re-instantiated for each call of your command.\n\n<p>If you need to store any large amounts of data, then do so either in static variables, or, more cleanly, in separate singleton classes elsewhere.\n\n<p>The code we ended up with to select an element and rename its type looks like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject( \n      <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick an element.\"</span> );\n \n    e = doc.get_Element( r.ElementId );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">RvtOperationCanceledException</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Rename Element\"</span> );\n \n    <span class=\"teal\">ElementId</span> id = e.GetTypeId();\n \n    <span class=\"teal\">Element</span> type = doc.get_Element( id );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != type )\n    {\n      type.Name = <span class=\"maroon\">\"Melbourne \"</span> + type.Name;\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>We used this to discuss a number of basic aspects of add-in creation:\n\n<ul>\n<li>Referencing the Revit API assemblies and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/set-copy-local-to-false.html\">\nsetting the copy local flag</a>.\n\n<li>Implementing the basic application skeleton code.\n\n<li>Using attributes to define the journaling, regeneration and transaction options. \nJournaling we might return to tomorrow, regeneration is trivial, since there is only one single option nowadays, and transaction is important to understand: automatic, manual or read-only, of which I generally recommend using only the latter two.\n\n<li>Creating the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html\">\nadd-in manifest and GUID</a> and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/network-access-to-add-in-manifest-and-icons.html\">\nother add-in manifest features</a>.\n\n<li>Using the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/product-and-add-in-wizard-updates.html\">\nRevit add-in wizard</a> to\n\nhandle all that automatically.\n\n<li>Selecting an element using PickObject and handling the exception thrown by user cancellation.\n<li>Transaction management and element modification.\n<li>Instances versus types.\n</li></li></li></li></li></li></li></li></ul>\n<h4>Filtered Element Collector and Using Parameter Filter for Non-Empty String</h4>\n<p>In a second step, we had a look at a filtered element collector to access the Revit database contents.\n\n<p>We decided that parameter filters are of special interest, and explored how to filter for an empty and a non-empty string value.\n\n<p>Here is the code that we ended up with:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">BuiltInParameter</span> bip \n    = <span class=\"teal\">BuiltInParameter</span>.ALL_MODEL_MARK;\n \n  <span class=\"teal\">ParameterValueProvider</span> provider\n    = <span class=\"blue\">new</span> <span class=\"teal\">ParameterValueProvider</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( bip ) );\n \n  <span class=\"green\">// Filter for an empty string:</span>\n \n  <span class=\"green\">//FilterStringRuleEvaluator evaluator </span>\n  <span class=\"green\">//  = new FilterStringEquals();</span>\n \n  <span class=\"green\">// Filter for an non-empty string:</span>\n \n  <span class=\"teal\">FilterStringRuleEvaluator</span> evaluator \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilterStringGreater</span>();\n \n  <span class=\"teal\">FilterStringRule</span> rule = <span class=\"blue\">new</span> <span class=\"teal\">FilterStringRule</span>( \n    provider, evaluator, <span class=\"maroon\">\"\"</span>, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">bool</span> inverted = <span class=\"blue\">false</span>;\n \n  <span class=\"teal\">ElementParameterFilter</span> filter\n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementParameterFilter</span>( rule, inverted );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .WherePasses( filter );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n  {\n    <span class=\"teal\">Parameter</span> p = e.get_Parameter( bip );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"'{0}': '{1}'\"</span>, \n      e.Name, \n      (<span class=\"blue\">null</span>==p? <span class=\"maroon\">\"null\"</span> : p.AsString() ) );\n  }\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>In its current, final state, it uses a parameter string filter to retrieve and list all elements with a non-empty Mark parameter value.\n\n<p>To do so, we search for any string values greater than the empty string \"\".\n\n<p>We also tried using a null value instead of the empty string, but that throws a rather inelegant exception in the FilterStringRule constructor saying\n\n<ul>\n<li>ArgumentNullException: \n\"The input argument \\\"ruleString\\\" of function \n`anonymous-namespace'::FilterStringRule_constructor \nor one item in the collection is null at line 1193 \nof file n:\\\\build\\\\2012_ship_inst_20110916_2132\n\\\\source\\\\api\\\\revitapi\\\\gensrc\\\\APIFilterRule.cpp.\n\\r\\nParameter name: ruleString\"\n</li></ul>\n<p>We also tested searching for all empty string values using a FilterStringEquals evaluator, and that worked fine as well.\n\n\n<h4>Evernote and a Revit Product and Family Tutorial</h4>\n<p>During our explorations, we underlined the importance of families and the family API.\nI mentioned the Autodesk \n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=13080413&amp;linkID=9243097\">\nRevit 2010 Families Guide</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html\">\nseveral</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/boolean-operations-and-instancevoidcututils.html\">\ntimes</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/families-guide.html\">\nin the</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/bim-versus-free-geometry-and-product-training.html\">\npast</a>.\n\nIt is free and covers the basics well together with Google, especially some important Revit MEP content best practices.\n\n<!--\nThe Seek Family Guidelines\nand am sorry to say that it is not highly regarded and advises several non-optimal practices in this complex area.\nI think one of the terms used was 'absolute rubbish'.\n\n199_family_api.htm:<li>Families Guide\n600_instance_void_cut.htm:Families Guide</a>  (still the\n664_families_guide.htm:<h3>Families Guide</h3>\n664_families_guide.htm:Revit Families Guide</a>.\n723_spark_learning.htm:Revit Families Guide</a> is\n-->\n<p>For more background, especially on Revit MEP, the \n\n<a href=\"http://cad-notes.com/2011/12/learning-autodesk-revit-mep-2012-training-video-is-available\">\nLearning Autodesk Revit MEP 2012</a> video \n\ntraining by Simon Whitbread, \n\n<!-- of <a href=\"http://www.karelcad.com.au/\">KarelCAD</a> --> \n\nDon Bokmiller and Joel Londenberg is recommended.\n\n<!-- 4 disks worth of stuff plus working files, family section, the Autodesk Revit Family guide is rubbish and includes bad practice -->\n<p>One neat little non-Revit-API topic that popped up was the handy and free little \n\n<a href=\"http://www.evernote.com\">\nEvernote</a> utility \n\nfor storing and sharing notes across the cloud and various mobile devices.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0736_melbourne_day_1",
    "header_text": "Filtered Element Collector and Using Parameter Filter for Non-Empty String",
    "local_header_href": "#filtered-element-collector-and-using-parameter-filter-for-non-empty-string",
    "chunk_text": "<h4>Filtered Element Collector and Using Parameter Filter for Non-Empty String</h4><p>In a second step, we had a look at a filtered element collector to access the Revit database contents.\n\n<p>We decided that parameter filters are of special interest, and explored how to filter for an empty and a non-empty string value.\n\n<p>Here is the code that we ended up with:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">BuiltInParameter</span> bip \n    = <span class=\"teal\">BuiltInParameter</span>.ALL_MODEL_MARK;\n \n  <span class=\"teal\">ParameterValueProvider</span> provider\n    = <span class=\"blue\">new</span> <span class=\"teal\">ParameterValueProvider</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( bip ) );\n \n  <span class=\"green\">// Filter for an empty string:</span>\n \n  <span class=\"green\">//FilterStringRuleEvaluator evaluator </span>\n  <span class=\"green\">//  = new FilterStringEquals();</span>\n \n  <span class=\"green\">// Filter for an non-empty string:</span>\n \n  <span class=\"teal\">FilterStringRuleEvaluator</span> evaluator \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilterStringGreater</span>();\n \n  <span class=\"teal\">FilterStringRule</span> rule = <span class=\"blue\">new</span> <span class=\"teal\">FilterStringRule</span>( \n    provider, evaluator, <span class=\"maroon\">\"\"</span>, <span class=\"blue\">false</span> );\n \n  <span class=\"blue\">bool</span> inverted = <span class=\"blue\">false</span>;\n \n  <span class=\"teal\">ElementParameterFilter</span> filter\n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementParameterFilter</span>( rule, inverted );\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .WherePasses( filter );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n  {\n    <span class=\"teal\">Parameter</span> p = e.get_Parameter( bip );\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"'{0}': '{1}'\"</span>, \n      e.Name, \n      (<span class=\"blue\">null</span>==p? <span class=\"maroon\">\"null\"</span> : p.AsString() ) );\n  }\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>In its current, final state, it uses a parameter string filter to retrieve and list all elements with a non-empty Mark parameter value.\n\n<p>To do so, we search for any string values greater than the empty string \"\".\n\n<p>We also tried using a null value instead of the empty string, but that throws a rather inelegant exception in the FilterStringRule constructor saying\n\n<ul>\n<li>ArgumentNullException: \n\"The input argument \\\"ruleString\\\" of function \n`anonymous-namespace'::FilterStringRule_constructor \nor one item in the collection is null at line 1193 \nof file n:\\\\build\\\\2012_ship_inst_20110916_2132\n\\\\source\\\\api\\\\revitapi\\\\gensrc\\\\APIFilterRule.cpp.\n\\r\\nParameter name: ruleString\"\n</li></ul>\n<p>We also tested searching for all empty string values using a FilterStringEquals evaluator, and that worked fine as well.\n\n\n<h4>Evernote and a Revit Product and Family Tutorial</h4>\n<p>During our explorations, we underlined the importance of families and the family API.\nI mentioned the Autodesk \n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=13080413&amp;linkID=9243097\">\nRevit 2010 Families Guide</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html\">\nseveral</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/boolean-operations-and-instancevoidcututils.html\">\ntimes</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/families-guide.html\">\nin the</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/bim-versus-free-geometry-and-product-training.html\">\npast</a>.\n\nIt is free and covers the basics well together with Google, especially some important Revit MEP content best practices.\n\n<!--\nThe Seek Family Guidelines\nand am sorry to say that it is not highly regarded and advises several non-optimal practices in this complex area.\nI think one of the terms used was 'absolute rubbish'.\n\n199_family_api.htm:<li>Families Guide\n600_instance_void_cut.htm:Families Guide</a>  (still the\n664_families_guide.htm:<h3>Families Guide</h3>\n664_families_guide.htm:Revit Families Guide</a>.\n723_spark_learning.htm:Revit Families Guide</a> is\n-->\n<p>For more background, especially on Revit MEP, the \n\n<a href=\"http://cad-notes.com/2011/12/learning-autodesk-revit-mep-2012-training-video-is-available\">\nLearning Autodesk Revit MEP 2012</a> video \n\ntraining by Simon Whitbread, \n\n<!-- of <a href=\"http://www.karelcad.com.au/\">KarelCAD</a> --> \n\nDon Bokmiller and Joel Londenberg is recommended.\n\n<!-- 4 disks worth of stuff plus working files, family section, the Autodesk Revit Family guide is rubbish and includes bad practice -->\n<p>One neat little non-Revit-API topic that popped up was the handy and free little \n\n<a href=\"http://www.evernote.com\">\nEvernote</a> utility \n\nfor storing and sharing notes across the cloud and various mobile devices.\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0736_melbourne_day_1",
    "header_text": "Evernote and a Revit Product and Family Tutorial",
    "local_header_href": "#evernote-and-a-revit-product-and-family-tutorial",
    "chunk_text": "<h4>Evernote and a Revit Product and Family Tutorial</h4><p>During our explorations, we underlined the importance of families and the family API.\nI mentioned the Autodesk \n\n<a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=13080413&amp;linkID=9243097\">\nRevit 2010 Families Guide</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html\">\nseveral</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/boolean-operations-and-instancevoidcututils.html\">\ntimes</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/families-guide.html\">\nin the</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/bim-versus-free-geometry-and-product-training.html\">\npast</a>.\n\nIt is free and covers the basics well together with Google, especially some important Revit MEP content best practices.\n\n<!--\nThe Seek Family Guidelines\nand am sorry to say that it is not highly regarded and advises several non-optimal practices in this complex area.\nI think one of the terms used was 'absolute rubbish'.\n\n199_family_api.htm:<li>Families Guide\n600_instance_void_cut.htm:Families Guide</a>  (still the\n664_families_guide.htm:<h3>Families Guide</h3>\n664_families_guide.htm:Revit Families Guide</a>.\n723_spark_learning.htm:Revit Families Guide</a> is\n-->\n<p>For more background, especially on Revit MEP, the \n\n<a href=\"http://cad-notes.com/2011/12/learning-autodesk-revit-mep-2012-training-video-is-available\">\nLearning Autodesk Revit MEP 2012</a> video \n\ntraining by Simon Whitbread, \n\n<!-- of <a href=\"http://www.karelcad.com.au/\">KarelCAD</a> --> \n\nDon Bokmiller and Joel Londenberg is recommended.\n\n<!-- 4 disks worth of stuff plus working files, family section, the Autodesk Revit Family guide is rubbish and includes bad practice -->\n<p>One neat little non-Revit-API topic that popped up was the handy and free little \n\n<a href=\"http://www.evernote.com\">\nEvernote</a> utility \n\nfor storing and sharing notes across the cloud and various mobile devices.\n</p></p></p>"
  }
]