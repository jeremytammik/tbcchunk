[
  {
    "original_filename": "1500_devday_dict",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\nCaroline Ward  FW: Autodesk® Developer News - special DevDays edition \n\n1500 Posts DevDay and Storing a Dictionary #RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge #DevLab @TT_CORE\n\nWelcome to The Building Coder post number 1500! I returned safe and sound to Europe from Autodesk University 2016 in Las Vegas and recuperated from jetlag over the weekend. Today I discuss upcoming events, new simple samples to embed a Forge viewer in a web page or blog post, and strategies to embed a dictionary into the Revit database\n&ndash; DevDay Europe in Munich\n&ndash; AEC Symposium in New York\n&ndash; Embedding a Forge viewer\n&ndash; Storing a dictionary in the Revit database...\n\n-->"
  },
  {
    "original_filename": "1500_devday_dict",
    "header_text": "1500 Posts, DevDay and Storing a Dictionary",
    "local_header_href": "#1500-posts-devday-and-storing-a-dictionary",
    "chunk_text": "### 1500 Posts, DevDay and Storing a Dictionary\n\n<h2>\n<script language=\"JavaScript1.2\">\n/* Neon Lights Text By JavaScript Kit (http://javascriptkit.com) */\n\nvar message=\"Welcome to The Building Coder post number 1500!\"\nvar neonbasecolor=\"gray\"\nvar neontextcolor=\"orange\"\nvar flashspeed=100 // milliseconds\n\n///No need to edit below this line/////\n\nvar n=0\nif (document.all||document.getElementById){\ndocument.write('')\nfor (m=0;m<message.length;m++)\ndocument.write('<span id=\"neonlight'+m+'\">'+message.charAt(m)+'</span>')\ndocument.write('')\n}\nelse\ndocument.write(message)\nfunction crossref(number){\nvar crossobj=document.all? eval(\"document.all.neonlight\"+number) : document.getElementById(\"neonlight\"+number)\nreturn crossobj\n}\n\nfunction neon(){\n  //Change all letters to base color\n  if (n==0){\n  for (m=0;m<message.length;m++)\n  //eval(\"document.all.neonlight\"+m).style.color=neonbasecolor\n  crossref(m).style.color=neonbasecolor\n}\n\n//cycle through and change individual letters to neon color\ncrossref(n).style.color=neontextcolor\n\nif (n<message.length-1)\nn++\nelse{\nn=0\nclearInterval(flashing)\nsetTimeout(\"beginneon()\",1500)\nreturn\n}\n}\n\nfunction beginneon(){\n  if (document.all||document.getElementById)\n  flashing=setInterval(\"neon()\",flashspeed)\n}\n\nbeginneon()\n</script>\n</h2>\n\nI returned safe and sound to Europe from Autodesk University 2016 in Las Vegas and recuperated from jetlag over the weekend.\n\nToday I discuss upcoming events, new simple samples to embed a Forge viewer in a web page or blog post, and strategies to embed a dictionary into the Revit database:\n\n- [DevDay Europe in Munich](#2)\n- [AEC Symposium in New York](#3)\n- [Embedding a Forge viewer](#4)\n- [Storing a dictionary &ndash; use `DataStorage`, not `ProjectInfo`](#5)\n\n\n####<a name=\"2\"></a>DevDay Europe in Munich\n\nAutodesk University ended, and all went well,\nincluding [the classes I presented](http://thebuildingcoder.typepad.com/blog/2016/10/au-revit-20171-and-rex-freezedrawing.html#2) and\nthe [DevDay conference](http://thebuildingcoder.typepad.com/blog/2016/11/devday-conference-at-autodesk-university.html) held\nthe day before AU proper started:\n\n- [AEC breakout](http://thebuildingcoder.typepad.com/blog/2016/11/devday-conference-at-autodesk-university.html#3)\n    - [Revit API news, roadmap and idea station](http://thebuildingcoder.typepad.com/blog/2016/11/devday-conference-at-autodesk-university.html#4)\n    - [BIM 360](http://thebuildingcoder.typepad.com/blog/2016/11/devday-conference-at-autodesk-university.html#5)\n    - [InfraWorks 360 and Civil 3D](http://thebuildingcoder.typepad.com/blog/2016/11/devday-conference-at-autodesk-university.html#6)\n\nThe next DevDay conference is coming up fast, the one and only European one this year, followed by four days of joint hacking, research and learning, in Munich, Germany:\n\n- DevDay conference &ndash; December 5, 2016\n- DevLab and Forge Accelerator &ndash; December 6-9, 2016\n\nRead all about the annual, worldwide Developer Day Conferences and Accelerator workshops\nat [autodeskdevdays.com](http://autodeskdevdays.com).\n\nRegistration is easy and open for all.\n\nSimply visit the [event website](http://autodeskdevdays.com) and click on\nthe [Register button](http://autodeskdevdays.com/register).\n\nThat is the next thing for me to prepare for now.\n\n\n####<a name=\"3\"></a>AEC Symposium in New York\n\nIf you are unable to attend the European DevDay in Munich, you may be interested in visiting New York instead.\n\n[CORE Studio at Thornton Tomasetti](http://core.thorntontomasetti.com) is hosting\nthe [AEC Technology Symposium and Hackathon 2016](http://core.thorntontomasetti.com/event/aec-technology-symposium-and-hackathon-2016) there\non Thursday December 8.\n\nWorkshops Include:\n\n- **Dynamo: Mandrill** &ndash; Konrad Sobon and Leland Jobson of Grimshaw hosting a workshop to learn how to use Dynamo to tap into Revit and extract data (information about families, warnings etc.) from it and a data visualization plug-in called Mandrill to generate charts and graphs, advanced list management techniques, formatting data to create  visualizations, tell stories and combine them into a report page that can be printed and linked into your software (InDesign, Illustrator, Word etc.)\n- **An introduction to Computational Fluid Dynamics with Butterfly** &ndash; Mostapha Sadeghipour Roudsari presents a workshop introducing Butterfly, the newest addition to the insect community of Ladybug + Honeybee. Butterfly enables setting up and running advanced Computational Fluid Dynamics (CFD) simulations inside Grasshopper using the validated open source engine OpenFOAM. Grasshopper is used for hands-on exercises and similar examples and workflows are shown with DynamoBIM.\n- **Dynamo Dev Zero-touch to NodeModel** &ndash; Robert Cervellione presents a workshop focused on setting up the development environment to create nodes in Dynamo using C# in Visual Studio. Start simple with zero-touch nodes,  introduce the Dynamo API and how to access geometry under the hood, dive into package creation for local hosting and package manager publishing, and dive deeper into WPF and custom node UI creation to access the full power of .NET and create fully custom nodes.\n\nPlease refer to\nthe [AEC Technology Symposium and Hackathon 2016](http://core.thorntontomasetti.com/event/aec-technology-symposium-and-hackathon-2016) for\nall further details.\n\n<center>\n<img src=\"img/2016-12_core_tt_aec_symposium.jpg\" alt=\"AEC Symposium\" width=\"436\">\n</center>\n\n\n####<a name=\"4\"></a>Embedding a Forge Viewer\n\nI repeatedly mentioned\nthe recent [BIM and Forge workshop at TuDa](http://thebuildingcoder.typepad.com/blog/2016/11/bimtuda-devdays-forge-news-and-more-events.html).\n\nOur hosts at the uni there implemented a web page to share the agenda, [www.bim.tu-darmstadt.de](http://www.bim.tu-darmstadt.de).\n\nAfter the single day workshop on Friday, they continued exploring Forge over the weekend and updated the web site to display the university building in an embedded Forge viewer over the weekend.\n\nYou can check it out yourself and view source to see the single line of code to add the `iframe` tag hosting the embedded A360 viewer.\n\nAnother take on this is provided by the\nTrueVis [A360 embedder WordPress plugin](http://truevis.com/a360-embedder-wordpress-plugin) and \naccompanying [A360 embedder examples](http://truevis.com/a360-embedder-examples).\n\nUsing those, you can completely automate the viewer embedding in a WordPress blog post.\n\nAnd now, back to the Revit API.\n\n\n####<a name=\"5\"></a>Storing a Dictionary &ndash; Use `DataStorage`, not `ProjectInfo`\n\nI had an interesting discussion with my colleagues Simon Jones, Miroslav Schonauer and Scott Conover on storing a dictionary in the Revit database &ndash; note that the AutoCAD ObjectARX environment provides support for so-called named dictionaries:\n\n**Question:** Is there a way of defining named dictionary storage for data in a Revit project?\n \nThe only option I can find is to use Extensible Storage on an arbitrary element placed in the model &ndash; but is there a way that avoids the requirement for an inserted element (and the risk that someone deletes it)?\n\n**Answer 1:** Yes.\n \nOfficially, extensible storage is the only way... if you place it onto the `ProjectInformation` instance, that is equivalent of per-doc data as `ProjectInformation` is <b><i>GUARANTEED</i></b> to be a singleton in RVT.\n \nI personally use a mechanism that I devised a few releases before extensible storage had been introduced &ndash; serialising a class into binary stream, encoding it via `String64` and then storing into an invisible string parameter. I found it much quicker to design my custom data-class than fiddling with extensible storage definitions…\n \nBut in either case, the `ProjectInfo` element is the way to get per-doc data…\n\n**Answer 2:** <b><i>No!</i></b>\n\nSorry, but please stop using the `ProjectInfo` class in that manner immediately.\n \nI used to recommend that earlier as well, and have stopped since learning better last year.\n \nThis is extremely important due to issues with worksharing.\n \nScott Conover explains that very explicitly in his AU class on [add-ins that cooperate with worksharing](http://thebuildingcoder.typepad.com/blog/2014/10/worksharing-and-duplicating-element-geometry.html#2).\n \nAt the same time as the introduction of extensible storage, the `DataStorage` element was introduced.\n \nThat is a new Revit database element class whose sole purpose is to host extensible storage data.\n \nYou can create as many of these as you like, and tag them in any way you like in order to make your one and only or several of them with all the associated element-specific or projectwide data easily accessible.\n \nThe Building Coder defines a dedicated topic group on [extensible storage](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.23).\n\nOne of its entries actually points to a discussion quite similar to what you are asking for,\n[named GUID storage for project identification](http://thebuildingcoder.typepad.com/blog/2016/04/named-guid-storage-for-project-identification.html).\nAll you would need to do to adapt it to your requirements would be to replace the GUID that is stores by a suitable dictionary.\n\nHere is some more on\nthe [DataStorage element hosting extensible storage in a worksharing environment](http://thebuildingcoder.typepad.com/blog/2015/02/extensible-storage-in-a-worksharing-environment.html).\n\n**Answer 3:** If worksharing is involved, I agree &nbsp; :-) &nbsp; most of the tools we are involved with would have many serious issues with worksharing, i.e., they are by-design used only for a central-model style workflow.\n\nIn any case, if starting from scratch, I agree that `DataStorage` should be used!\n\n**Answer 4:** If you are certain that Worksharing will not be involved, there’s not much difference between using `ProjectInfo` and `DataStorage`, except that using `DataStorage` provides better encapsulation from another add-in accidentally deleting your data from `ProjectInfo` when it accesses its own.\n \nIf Worksharing is to be involved, you should definitely avoid using the `ProjectInfo` instance.\n\nPlease refer to [The Building Coder topic group on extensible storage](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.23) for more information on it in all its aspects."
  }
]