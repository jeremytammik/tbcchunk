[
  {
    "original_filename": "1733_demolished_solid",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n\ntwitter:\n\nDetermine exact wall opening dimensions by demolishing in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/demolishopening\n\nWe have looked at numerous different approaches to determine wall openings in the past, so it seems pretty hard to nail down, and pretty important to solve.\nNow Håvard Leding of Symetri contributed yet another exciting idea which highlights a number of surprising aspects,\ndemonstrates a further creative use case for <code>GetDependentElements</code> and expands on his \nrecent RevitLookup enhancement to retrieve and snoop dependent elements\n&ndash; Get demolished solid\n&ndash; Why?\n&ndash; Questions...\n\nlinkedin:\n\nDetermine exact wall opening dimensions by demolishing in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/demolishopening\n\nWe have looked at numerous different approaches to determine wall openings in the past, so it seems pretty hard to nail down, and pretty important to solve.\n\nNow Håvard Leding of Symetri contributed yet another exciting idea which highlights a number of surprising aspects,\ndemonstrates a further creative use case for <code>GetDependentElements</code> and expands on his \nrecent RevitLookup enhancement to retrieve and snoop dependent elements:\n\n- Get demolished solid\n- Why?\n- Questions...\n\n\nof [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2019.0.145.4).\n\n-->"
  },
  {
    "original_filename": "1733_demolished_solid",
    "header_text": "Determine Exact Opening by Demolishing",
    "local_header_href": "#determine-exact-opening-by-demolishing",
    "chunk_text": "### Determine Exact Opening by Demolishing\n\nHere comes the most surprising Revit API functionality I have ever seen, put to a very useful and common task, determining the exact wall opening required for a door or window.\n\nWe have looked at numerous different approaches to determine wall openings in the past, including:\n\n- [Opening geometry](http://thebuildingcoder.typepad.com/blog/2012/01/opening-geometry.html)\n- [The temporary transaction trick for gross slab data](http://thebuildingcoder.typepad.com/blog/2012/10/the-temporary-transaction-trick-for-gross-slab-data.html)\n- [Retrieving wall openings and sorting points](http://thebuildingcoder.typepad.com/blog/2015/12/retrieving-wall-openings-and-sorting-points.html)\n- [Wall opening profiles](http://thebuildingcoder.typepad.com/blog/2015/12/wall-opening-profiles-and-happy-holidays.html#3)\n- [Determining wall opening areas per room](http://thebuildingcoder.typepad.com/blog/2016/04/determining-wall-opening-areas-per-room.html#4)\n- [More on wall opening areas per room](http://thebuildingcoder.typepad.com/blog/2016/04/more-on-wall-opening-areas-per-room.html)\n- [Two energy model types](http://thebuildingcoder.typepad.com/blog/2017/01/family-category-and-two-energy-model-types.html#3)\n- [IFC helper returns outer `CurveLoop` of door or window](https://thebuildingcoder.typepad.com/blog/2017/06/copy-local-false-and-ifc-utils-for-wall-openings.html#2)\n\nSo, it seems pretty hard to nail down, and pretty important to solve.\n\nNow Håvard Leding of [Symetri](https://www.symetri.com) contributed\nyet another exciting idea which highlights a number of surprising aspects,\ndemonstrates a further creative use case for `GetDependentElements` and expands on his \nrecent [RevitLookup enhancement to retrieve and snoop dependent elements](https://thebuildingcoder.typepad.com/blog/2019/03/retrieving-and-snooping-dependent-elements.html):\n\n- [Get Demolished Solid](#2) \n- [Why?](#3) \n- [Questions?](#4) \n\nIn his own words:"
  },
  {
    "original_filename": "1733_demolished_solid",
    "header_text": "<a name=\"2\"></a> Get Demolished Solid",
    "local_header_href": "#a-name2a-get-demolished-solid",
    "chunk_text": "#### <a name=\"2\"></a> Get Demolished Solid\n\nHere is another use case for `GetDependentElements()`.\n \nDetermining the opening dimensions for Doors and Windows is surprisingly difficult, since you can't trust their parameters or reference planes to be consistent.\n\nI suggest this alternative method that uses the solid that Revit creates when you demolish an opening.\n\nIt also uses the good\nold [temporary transaction trick](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.53):\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;If&nbsp;you&nbsp;demolish&nbsp;a&nbsp;door,&nbsp;Revit&nbsp;will&nbsp;automatically&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;fill&nbsp;the&nbsp;opening&nbsp;with&nbsp;a&nbsp;wall.&nbsp;So,&nbsp;we&nbsp;will&nbsp;use&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;that&nbsp;wall&nbsp;to&nbsp;get&nbsp;opening&nbsp;dimensions.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">param</span><span style=\"color:gray;\">&nbsp;name</span><span style=\"color:gray;\">=</span><span style=\"color:gray;\">&quot;</span>fi<span style=\"color:gray;\">&quot;</span><span style=\"color:gray;\">&gt;</span><span style=\"color:green;\">Door&nbsp;or&nbsp;Window&nbsp;is&nbsp;expected</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">param</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Solid</span>&nbsp;GetDemolishedSolid(&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FamilyInstance</span>&nbsp;fi&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;fi.Document;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Solid</span>&nbsp;solidOpening&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;t&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;fi.HasPhases()&nbsp;&amp;&amp;&nbsp;fi.ArePhasesModifiable()&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.Start(&nbsp;<span style=\"color:#a31515;\">&quot;temp&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fi.DemolishedPhaseId&nbsp;=&nbsp;fi.CreatedPhaseId;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc.Regenerate();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IList&lt;<span style=\"color:#2b91af;\">ElementId</span>&gt;&nbsp;dependents&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;fi.GetDependentElements(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;id&nbsp;<span style=\"color:blue;\">in</span>&nbsp;dependents&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;=&nbsp;doc.GetElement(&nbsp;id&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;e&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">Wall</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;geomWall&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;e.get_Geometry(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>()&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Need&nbsp;to&nbsp;clone&nbsp;it,&nbsp;as&nbsp;Rollback&nbsp;will&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;destroy&nbsp;the&nbsp;original&nbsp;solid.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solidOpening&nbsp;=&nbsp;<span style=\"color:#2b91af;\">SolidUtils</span>.Clone(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<span style=\"color:#2b91af;\">Solid</span>)&nbsp;geomWall.First()&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.RollBack();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;In&nbsp;the&nbsp;family&nbsp;editor,&nbsp;the&nbsp;host&nbsp;wall&nbsp;is&nbsp;always&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;aligned&nbsp;ortho&nbsp;to&nbsp;the&nbsp;family&nbsp;coordinate&nbsp;system,</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;so&nbsp;we&nbsp;can&nbsp;get&nbsp;the&nbsp;opening&nbsp;dimensions&nbsp;directly&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;from&nbsp;the&nbsp;bounding&nbsp;box.</span>\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Solid</span>&nbsp;solidInFamilyCoordinates&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">SolidUtils</span>.CreateTransformed(&nbsp;solidOpening,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;fi.GetTotalTransform().Inverse&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">BoundingBoxXYZ</span>&nbsp;bb&nbsp;=&nbsp;solidInFamilyCoordinates.GetBoundingBox();\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;dimensions&nbsp;=&nbsp;bb.Max&nbsp;-&nbsp;bb.Min;\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">TaskDialog</span>.Show(&nbsp;<span style=\"color:#a31515;\">&quot;Opening&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Opening&nbsp;is&nbsp;&quot;</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;dimensions.X.ToString()&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;by&nbsp;&quot;</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;dimensions.Z.ToString()&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;solidOpening;\n}\n</pre>"
  },
  {
    "original_filename": "1733_demolished_solid",
    "header_text": "<a name=\"3\"></a> Why?",
    "local_header_href": "#a-name3a-why",
    "chunk_text": "#### <a name=\"3\"></a> Why?\n\nI agree some more explanation as to why parameters and refplanes are not to be trusted would be nice.\n \nYou can't rely on any built-in parameters being in use.\nOr used as you expect them to be used.\nSame goes for reference planes.\n \nSometimes, it's just static geometry. (No parameters in use)\nAnd sometimes, it's just an opening family. (No solids)\n \nStill, you need to analyse something, and preferably solids.\nBut sometimes, solids don't represent the true opening, like in this case, where you have a gap:\n \n<center>\n<img src=\"img/window_opening_with_gap.jpg\" alt=\"Window opening with gap\" width=\"302\">\n</center>\n \nIt's just safer and a lot easier to use the final 'opening solid' from a demolished state.\n \nIf you want to try it out yourself, the method is easy enough to use; \nit just requires a door or window to run &nbsp; :-)"
  },
  {
    "original_filename": "1733_demolished_solid",
    "header_text": "<a name=\"4\"></a> Questions?",
    "local_header_href": "#a-name4a-questions",
    "chunk_text": "#### <a name=\"4\"></a> Questions?\n\n**Question:** Reading the code in more detail, though, I don't really understand...\n \nThe family instance `fi` is a window, for example, yes?\n \nFrom the window, you call `GetDependentElements`, which returns \"all elements that, from a logical point of view, are the children of this Element\".\n \nFrom those, you extract the wall.\n \nHmm. So, the wall is dependent on the window? That seems weird.\n \nOK, let's accept that the wall is returned.\n \nNow, from the wall, you retrieve the first geometry element.\n \nThat is now saved as the solid opening.\n \nThat seems super weird. I would have thought that the wall geometry is the wall geometry, and that the hole is a hole.\n \nWhy is the first solid in the wall geometry a solid representing the opening?\n \nDoes that really work?\n \nCan you explain?\n \n**Answer:** Yes, it works; just try it :-)\n \nIt works, because when you demolish openings, Revit automatically fills the entire hole with a new Wall.\nYou can see it if you manually demolish a window.\nThere is no longer a hole in the wall.\n \nVery easy to get dimensions from the bounding box, once transformed into the family editor coordinate system.\nBecause there, the host wall direction is always aligned with the coordinate system cardinal axes.\nI guess opening dimensions could be extracted without the transform, but I wouldn't know how to do that.\n \nYou could also analyse the shape of the opening by looking at the vertical front face of the solid.\n\nYou would have to do so to handle cases where the window is not rectangular, e.g., circular or something else.\n\n**Response:** Wow. I am impressed. And surprised.\n\nMany thanks to Håvard for this innovative solution and interesting explanation!"
  }
]