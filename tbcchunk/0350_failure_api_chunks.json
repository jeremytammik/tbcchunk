[
  {
    "original_filename": "0350_failure_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0350_failure_api",
    "header_text": "Failure API",
    "local_header_href": "#failure-api",
    "chunk_text": "<h3>Failure API</h3><p>A very frequent question from developers in the past has been about suppressing various warning and error messages in Revit.\nOne of the many \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/revit-2011-is-coming.html\">\nnew Revit 2011 API features</a> specifically \n\ntargeted at allowing an add-in to integrate very tightly with Revit and its user interface is the new Failure API, providing the ability for an add-in to react to and suppress failures as well as define its own new ones and post them.\nThis is the description in the What's New section of the Revit API help file RevitAPI.chm:\n\n<span style=\"color:darkblue\">\n<h4>Failure API</h4>\n<p>There are two capabilities offered by the new failure API:\n\n<ol>\n<li>The ability to define and post failures from within API code when a user-visible problem has occurred. \n<li>The ability to respond to failures posted by Revit and by API code through code in your application. \n</li></li></ol>\n<p>This section offers a high level overview of both capabilities; more detail about the failures API is provided in the \"Failure API\" document in the Revit API help file.\n\n<p>As a part of exposing these new capabilities, all overloads accepting \"PostedErrors\" have been removed from the API.\n\n<h4>Failure posting</h4>\n<p>If you are using the failure posting mechanism to report your problem, all you need to do is:\n\n<ol>\n<li>If you are creating a new failure not already existing in Revit, define the new failure and register it in the FailureDefinitionRegistry during the OnStartup() call of your ExternalApplication (new failures must be registered at Revit startup).\n<li>Find the failure definition id, either from the BuiltInFailures classes or from your pre-registered custom failure using the class related to FailureDefinition.\n<li>Post a failure to a document that has a problem - using the classes related to FailureMessage to set options and details related to the failure.\n</li></li></li></ol>\n<h4>Failure handling</h4>\n<p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. The user is presented information and options in the UI to deal with the failures.\n\n<p>However, if your operation (or set of operations) on the document requires some special treatment for certain errors (or even all possible errors), you can customize failure resolution. Custom failure resolution can be supplied:\n\n<ul>\n<li>For a given transaction using the interface IFailuresPreprocessor. \n<li>For all possible errors using the FailuresProcessing event. \n</li></li></ul>\n<p>Finally, the API offers the ability to completely replace the standard failure processing user interface using the interface IFailuresProcessor.\n\n</p></p></p></p></p></p></p></span>\n<h4>ErrorHandling SDK Sample</h4>\n<p>The use of the new failure API is demonstrated very comprehensively by the ErrorHandling Revit SDK sample, which shows how to create a failure definition id, failure definition, failure message and how to resolve failures in failure processing steps.\nIt suppresses a warning message for overlapping walls.\nFor more detailed information on that sample implementation, please refer to its read-me document ReadMe_ErrorHandling.rtf.\n\n<p>This sample is quite extensive and demonstrates many aspects of the failure API.\nWhen looking at it, one of my colleagues came up with some questions requesting clarification of its expected behaviour:\n\n<ol>\n<li>The command creates two overlapping walls without showing a warning message, which is clearly intended.\n<li>After the command is executed, manually creating walls also get no warning. Is this also expected? If so, do we need an additional command in order to restore the original UI behaviour? Just wondering whether this is intentional or the sample only shows how to set.\n<li>The sample creates several different walls in various steps.  What does the second wall between (0, 10, 0) and (20, 10, 0) demonstrate?  Is it intended to show how to delete it after regeneration?  \n<li>Also, I kind of expected to see an error dialogue with some information. Am I missing something?  \n</li></li></li></li></ol>\n<p>Leo Lu, the author of the sample, responded to these questions:\n\n<ol>\n<li>Creating two overlapping walls without a warning message is only a small part of the sample. \nIt also demonstrates how to create failure definition id, failure definitions, and failure messages. \nThese parts are basic.\nIt demonstrates that there are different ways to handle the warnings and errors: in the FailuresPreprocessor, FailuresProcessing event or FailuresProcessor. \nPlease also refer to the detailed notes in the sample's readme file. \nThese parts are more advanced and tricky:\n<ul>\n<li>FailuresPreprocessor is being set for one transaction and used only during finishing of this one transaction.\n\n<li>Once the FailuresProcessing event is subscribed to in line 195 of the code, it will be raised whenever it is needed. \nYou can unsubscribe from it with a -= operation so that the event won't be raised any more.\n\n<li>FailuresProcessor can be set up via a method of the Revit add-in. \nIf a new FailuresProcessor is set, any previously set one is completely removed.\nOnce you set a FailuresProcessor, it will remain alive for the whole Revit session.\n</li></li></li></ul>\n<li>The behaviour is not expected if the sample only wants to solve the overlapping walls problem. \nThen a FailuresPreprocessor for a single transaction can solve this problem – when the external command is over, you'll get back to original UI behaviour immediately. \nThe sample also uses FailuresProcessing and FailuresProcessor which remains alive after the external command to handle other warnings or errors. \nWhen you draw some overlapping walls in the UI after the external command has returned, the warnings will be handled by the failures processor. \nThe solution is simple – just remove the codes which use FailuresProcessing and FailuresProcessor, then the sample won't affect the normal UI behaviour any longer.\n\n<li>The overlapping walls problem is just an example we chose to demonstrate how to handle a warning or error in the FailuresPreprocessor.  \nOf course one can do other things that may cause other expected warnings or errors that can also be handled in the FailuresPreprocessor similarly to the sample. \nUse FailuresPreprocessor rather than FailuresProcessing or FailuresProcessor in this condition so that the codes will not affect the Revit UI behaviour.\n\n<li>Yes, that's an option. \nOr you can choose to suppress some specified warnings you do not care in some projects. \nOr you may want to quietly roll back all transactions if any error arises. \nThat is all completely up to you.\n</li></li></li></li></ol>\n<p>Here is another example of using the failure API which is less extensive and therefore much smaller and simpler:\n\n<h4>Minimal Room Warning Swallower Failure Processing Sample</h4>\n<p>Harry Mattison of the Revit development team provided this small and sweet sample of using the failure API to suppress a specific warning message.\nIt includes the RoomWarningSwallower IFailuresPreprocessor implementation used as sample code for the IFailuresPreprocessor interface in the Revit API help file.\n\n<p>The command creates an unbounded room and suppresses the warning that would otherwise be given saying \"Room is not in a properly enclosed region\".\n   \n<p>The duration for this implementation is only for the transaction in the external command, so after the command is executed manually placed unbounded rooms do result in the warning again a usual.\n   \n<p>However, as mentioned above, it is also possible with the new failure API to suppress warnings for the entire Revit session.\n\n<p>Here is the implementation of the warning swallower class implementing the IFailuresPreprocessor interface:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RoomWarningSwallower</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">FailureProcessingResult</span> PreprocessFailures( \n    <span class=\"teal\">FailuresAccessor</span> a )\n  {\n    <span class=\"green\">// inside event handler, get all warnings</span>\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; failures \n      = a.GetFailureMessages();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> f <span class=\"blue\">in</span> failures )\n    { \n      <span class=\"green\">// check failure definition ids </span>\n      <span class=\"green\">// against ones to dismiss:</span>\n \n      <span class=\"teal\">FailureDefinitionId</span> id \n        = f.GetFailureDefinitionId();\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">BuiltInFailures</span>.<span class=\"teal\">RoomFailures</span>.RoomNotEnclosed\n        == id )\n      {\n        a.DeleteWarning( f );\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>This is the mainline of the external command Execute method, which performs the following steps:\n\n<ul>\n<li>Determine an arbitrary level to use to place the room on.\n<li>Start a transaction, since we are using manual transaction mode.\n<li>Set up the room warning swallower failures pre-processor.\n<li>Create the unbounded room.\n</li></li></li></li></ul>\n<pre class=\"code\">\n<span class=\"teal\">Document</span> doc = commandData.Application\n  .ActiveUIDocument.Document;\n \n<span class=\"teal\">FilteredElementCollector</span> collector \n  = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \ncollector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) );\n<span class=\"teal\">Level</span> level = collector.FirstElement() <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n \n<span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \nt.Start( <span class=\"maroon\">\"Create unbounded room\"</span> );\n \n<span class=\"teal\">FailureHandlingOptions</span> failOpt \n  = t.GetFailureHandlingOptions();\n \nfailOpt.SetFailuresPreprocessor( \n  <span class=\"blue\">new</span> <span class=\"teal\">RoomWarningSwallower</span>() );\n \nt.SetFailureHandlingOptions( failOpt );\n \ndoc.Create.NewRoom( level, <span class=\"blue\">new</span> <span class=\"teal\">UV</span>( 0, 0 ) );\n \nt.Commit();\n \n<span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>Many thanks to Harry for this nice little sample and to Leo for the extensive explanation of the ErrorHandling behaviour!\n\n<p>I have included the former as a new module and external command named CmdPreprocessFailure in The Building Coder samples.\nHere is \n\n<a href=\"zip/bc_11_64.zip\">\nversion 2011.0.0.64</a>\n\nof the complete Visual Studio solution including the new command.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0350_failure_api",
    "header_text": "Failure API",
    "local_header_href": "#failure-api",
    "chunk_text": "<h4>Failure API</h4><p>There are two capabilities offered by the new failure API:\n\n<ol>\n<li>The ability to define and post failures from within API code when a user-visible problem has occurred. \n<li>The ability to respond to failures posted by Revit and by API code through code in your application. \n</li></li></ol>\n<p>This section offers a high level overview of both capabilities; more detail about the failures API is provided in the \"Failure API\" document in the Revit API help file.\n\n<p>As a part of exposing these new capabilities, all overloads accepting \"PostedErrors\" have been removed from the API.\n\n<h4>Failure posting</h4>\n<p>If you are using the failure posting mechanism to report your problem, all you need to do is:\n\n<ol>\n<li>If you are creating a new failure not already existing in Revit, define the new failure and register it in the FailureDefinitionRegistry during the OnStartup() call of your ExternalApplication (new failures must be registered at Revit startup).\n<li>Find the failure definition id, either from the BuiltInFailures classes or from your pre-registered custom failure using the class related to FailureDefinition.\n<li>Post a failure to a document that has a problem - using the classes related to FailureMessage to set options and details related to the failure.\n</li></li></li></ol>\n<h4>Failure handling</h4>\n<p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. The user is presented information and options in the UI to deal with the failures.\n\n<p>However, if your operation (or set of operations) on the document requires some special treatment for certain errors (or even all possible errors), you can customize failure resolution. Custom failure resolution can be supplied:\n\n<ul>\n<li>For a given transaction using the interface IFailuresPreprocessor. \n<li>For all possible errors using the FailuresProcessing event. \n</li></li></ul>\n<p>Finally, the API offers the ability to completely replace the standard failure processing user interface using the interface IFailuresProcessor.\n\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0350_failure_api",
    "header_text": "Failure posting",
    "local_header_href": "#failure-posting",
    "chunk_text": "<h4>Failure posting</h4><p>If you are using the failure posting mechanism to report your problem, all you need to do is:\n\n<ol>\n<li>If you are creating a new failure not already existing in Revit, define the new failure and register it in the FailureDefinitionRegistry during the OnStartup() call of your ExternalApplication (new failures must be registered at Revit startup).\n<li>Find the failure definition id, either from the BuiltInFailures classes or from your pre-registered custom failure using the class related to FailureDefinition.\n<li>Post a failure to a document that has a problem - using the classes related to FailureMessage to set options and details related to the failure.\n</li></li></li></ol>\n<h4>Failure handling</h4>\n<p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. The user is presented information and options in the UI to deal with the failures.\n\n<p>However, if your operation (or set of operations) on the document requires some special treatment for certain errors (or even all possible errors), you can customize failure resolution. Custom failure resolution can be supplied:\n\n<ul>\n<li>For a given transaction using the interface IFailuresPreprocessor. \n<li>For all possible errors using the FailuresProcessing event. \n</li></li></ul>\n<p>Finally, the API offers the ability to completely replace the standard failure processing user interface using the interface IFailuresProcessor.\n\n</p></p></p></p>"
  },
  {
    "original_filename": "0350_failure_api",
    "header_text": "Failure handling",
    "local_header_href": "#failure-handling",
    "chunk_text": "<h4>Failure handling</h4><p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. The user is presented information and options in the UI to deal with the failures.\n\n<p>However, if your operation (or set of operations) on the document requires some special treatment for certain errors (or even all possible errors), you can customize failure resolution. Custom failure resolution can be supplied:\n\n<ul>\n<li>For a given transaction using the interface IFailuresPreprocessor. \n<li>For all possible errors using the FailuresProcessing event. \n</li></li></ul>\n<p>Finally, the API offers the ability to completely replace the standard failure processing user interface using the interface IFailuresProcessor.\n\n</p></p></p>"
  },
  {
    "original_filename": "0350_failure_api",
    "header_text": "ErrorHandling SDK Sample",
    "local_header_href": "#errorhandling-sdk-sample",
    "chunk_text": "<h4>ErrorHandling SDK Sample</h4><p>The use of the new failure API is demonstrated very comprehensively by the ErrorHandling Revit SDK sample, which shows how to create a failure definition id, failure definition, failure message and how to resolve failures in failure processing steps.\nIt suppresses a warning message for overlapping walls.\nFor more detailed information on that sample implementation, please refer to its read-me document ReadMe_ErrorHandling.rtf.\n\n<p>This sample is quite extensive and demonstrates many aspects of the failure API.\nWhen looking at it, one of my colleagues came up with some questions requesting clarification of its expected behaviour:\n\n<ol>\n<li>The command creates two overlapping walls without showing a warning message, which is clearly intended.\n<li>After the command is executed, manually creating walls also get no warning. Is this also expected? If so, do we need an additional command in order to restore the original UI behaviour? Just wondering whether this is intentional or the sample only shows how to set.\n<li>The sample creates several different walls in various steps.  What does the second wall between (0, 10, 0) and (20, 10, 0) demonstrate?  Is it intended to show how to delete it after regeneration?  \n<li>Also, I kind of expected to see an error dialogue with some information. Am I missing something?  \n</li></li></li></li></ol>\n<p>Leo Lu, the author of the sample, responded to these questions:\n\n<ol>\n<li>Creating two overlapping walls without a warning message is only a small part of the sample. \nIt also demonstrates how to create failure definition id, failure definitions, and failure messages. \nThese parts are basic.\nIt demonstrates that there are different ways to handle the warnings and errors: in the FailuresPreprocessor, FailuresProcessing event or FailuresProcessor. \nPlease also refer to the detailed notes in the sample's readme file. \nThese parts are more advanced and tricky:\n<ul>\n<li>FailuresPreprocessor is being set for one transaction and used only during finishing of this one transaction.\n\n<li>Once the FailuresProcessing event is subscribed to in line 195 of the code, it will be raised whenever it is needed. \nYou can unsubscribe from it with a -= operation so that the event won't be raised any more.\n\n<li>FailuresProcessor can be set up via a method of the Revit add-in. \nIf a new FailuresProcessor is set, any previously set one is completely removed.\nOnce you set a FailuresProcessor, it will remain alive for the whole Revit session.\n</li></li></li></ul>\n<li>The behaviour is not expected if the sample only wants to solve the overlapping walls problem. \nThen a FailuresPreprocessor for a single transaction can solve this problem – when the external command is over, you'll get back to original UI behaviour immediately. \nThe sample also uses FailuresProcessing and FailuresProcessor which remains alive after the external command to handle other warnings or errors. \nWhen you draw some overlapping walls in the UI after the external command has returned, the warnings will be handled by the failures processor. \nThe solution is simple – just remove the codes which use FailuresProcessing and FailuresProcessor, then the sample won't affect the normal UI behaviour any longer.\n\n<li>The overlapping walls problem is just an example we chose to demonstrate how to handle a warning or error in the FailuresPreprocessor.  \nOf course one can do other things that may cause other expected warnings or errors that can also be handled in the FailuresPreprocessor similarly to the sample. \nUse FailuresPreprocessor rather than FailuresProcessing or FailuresProcessor in this condition so that the codes will not affect the Revit UI behaviour.\n\n<li>Yes, that's an option. \nOr you can choose to suppress some specified warnings you do not care in some projects. \nOr you may want to quietly roll back all transactions if any error arises. \nThat is all completely up to you.\n</li></li></li></li></ol>\n<p>Here is another example of using the failure API which is less extensive and therefore much smaller and simpler:\n\n<h4>Minimal Room Warning Swallower Failure Processing Sample</h4>\n<p>Harry Mattison of the Revit development team provided this small and sweet sample of using the failure API to suppress a specific warning message.\nIt includes the RoomWarningSwallower IFailuresPreprocessor implementation used as sample code for the IFailuresPreprocessor interface in the Revit API help file.\n\n<p>The command creates an unbounded room and suppresses the warning that would otherwise be given saying \"Room is not in a properly enclosed region\".\n   \n<p>The duration for this implementation is only for the transaction in the external command, so after the command is executed manually placed unbounded rooms do result in the warning again a usual.\n   \n<p>However, as mentioned above, it is also possible with the new failure API to suppress warnings for the entire Revit session.\n\n<p>Here is the implementation of the warning swallower class implementing the IFailuresPreprocessor interface:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RoomWarningSwallower</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">FailureProcessingResult</span> PreprocessFailures( \n    <span class=\"teal\">FailuresAccessor</span> a )\n  {\n    <span class=\"green\">// inside event handler, get all warnings</span>\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; failures \n      = a.GetFailureMessages();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> f <span class=\"blue\">in</span> failures )\n    { \n      <span class=\"green\">// check failure definition ids </span>\n      <span class=\"green\">// against ones to dismiss:</span>\n \n      <span class=\"teal\">FailureDefinitionId</span> id \n        = f.GetFailureDefinitionId();\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">BuiltInFailures</span>.<span class=\"teal\">RoomFailures</span>.RoomNotEnclosed\n        == id )\n      {\n        a.DeleteWarning( f );\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>This is the mainline of the external command Execute method, which performs the following steps:\n\n<ul>\n<li>Determine an arbitrary level to use to place the room on.\n<li>Start a transaction, since we are using manual transaction mode.\n<li>Set up the room warning swallower failures pre-processor.\n<li>Create the unbounded room.\n</li></li></li></li></ul>\n<pre class=\"code\">\n<span class=\"teal\">Document</span> doc = commandData.Application\n  .ActiveUIDocument.Document;\n \n<span class=\"teal\">FilteredElementCollector</span> collector \n  = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \ncollector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) );\n<span class=\"teal\">Level</span> level = collector.FirstElement() <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n \n<span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \nt.Start( <span class=\"maroon\">\"Create unbounded room\"</span> );\n \n<span class=\"teal\">FailureHandlingOptions</span> failOpt \n  = t.GetFailureHandlingOptions();\n \nfailOpt.SetFailuresPreprocessor( \n  <span class=\"blue\">new</span> <span class=\"teal\">RoomWarningSwallower</span>() );\n \nt.SetFailureHandlingOptions( failOpt );\n \ndoc.Create.NewRoom( level, <span class=\"blue\">new</span> <span class=\"teal\">UV</span>( 0, 0 ) );\n \nt.Commit();\n \n<span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>Many thanks to Harry for this nice little sample and to Leo for the extensive explanation of the ErrorHandling behaviour!\n\n<p>I have included the former as a new module and external command named CmdPreprocessFailure in The Building Coder samples.\nHere is \n\n<a href=\"zip/bc_11_64.zip\">\nversion 2011.0.0.64</a>\n\nof the complete Visual Studio solution including the new command.</p>\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0350_failure_api",
    "header_text": "Minimal Room Warning Swallower Failure Processing Sample",
    "local_header_href": "#minimal-room-warning-swallower-failure-processing-sample",
    "chunk_text": "<h4>Minimal Room Warning Swallower Failure Processing Sample</h4><p>Harry Mattison of the Revit development team provided this small and sweet sample of using the failure API to suppress a specific warning message.\nIt includes the RoomWarningSwallower IFailuresPreprocessor implementation used as sample code for the IFailuresPreprocessor interface in the Revit API help file.\n\n<p>The command creates an unbounded room and suppresses the warning that would otherwise be given saying \"Room is not in a properly enclosed region\".\n   \n<p>The duration for this implementation is only for the transaction in the external command, so after the command is executed manually placed unbounded rooms do result in the warning again a usual.\n   \n<p>However, as mentioned above, it is also possible with the new failure API to suppress warnings for the entire Revit session.\n\n<p>Here is the implementation of the warning swallower class implementing the IFailuresPreprocessor interface:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RoomWarningSwallower</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">FailureProcessingResult</span> PreprocessFailures( \n    <span class=\"teal\">FailuresAccessor</span> a )\n  {\n    <span class=\"green\">// inside event handler, get all warnings</span>\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; failures \n      = a.GetFailureMessages();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> f <span class=\"blue\">in</span> failures )\n    { \n      <span class=\"green\">// check failure definition ids </span>\n      <span class=\"green\">// against ones to dismiss:</span>\n \n      <span class=\"teal\">FailureDefinitionId</span> id \n        = f.GetFailureDefinitionId();\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">BuiltInFailures</span>.<span class=\"teal\">RoomFailures</span>.RoomNotEnclosed\n        == id )\n      {\n        a.DeleteWarning( f );\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>This is the mainline of the external command Execute method, which performs the following steps:\n\n<ul>\n<li>Determine an arbitrary level to use to place the room on.\n<li>Start a transaction, since we are using manual transaction mode.\n<li>Set up the room warning swallower failures pre-processor.\n<li>Create the unbounded room.\n</li></li></li></li></ul>\n<pre class=\"code\">\n<span class=\"teal\">Document</span> doc = commandData.Application\n  .ActiveUIDocument.Document;\n \n<span class=\"teal\">FilteredElementCollector</span> collector \n  = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \ncollector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) );\n<span class=\"teal\">Level</span> level = collector.FirstElement() <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n \n<span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \nt.Start( <span class=\"maroon\">\"Create unbounded room\"</span> );\n \n<span class=\"teal\">FailureHandlingOptions</span> failOpt \n  = t.GetFailureHandlingOptions();\n \nfailOpt.SetFailuresPreprocessor( \n  <span class=\"blue\">new</span> <span class=\"teal\">RoomWarningSwallower</span>() );\n \nt.SetFailureHandlingOptions( failOpt );\n \ndoc.Create.NewRoom( level, <span class=\"blue\">new</span> <span class=\"teal\">UV</span>( 0, 0 ) );\n \nt.Commit();\n \n<span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>Many thanks to Harry for this nice little sample and to Leo for the extensive explanation of the ErrorHandling behaviour!\n\n<p>I have included the former as a new module and external command named CmdPreprocessFailure in The Building Coder samples.\nHere is \n\n<a href=\"zip/bc_11_64.zip\">\nversion 2011.0.0.64</a>\n\nof the complete Visual Studio solution including the new command.</p>\n</p></p></p></p></p></p></p>"
  }
]