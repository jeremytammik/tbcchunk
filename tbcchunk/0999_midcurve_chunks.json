[
  {
    "original_filename": "0999_midcurve",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0999_midcurve",
    "header_text": "Generating a MidCurve Between Two Curve Elements",
    "local_header_href": "#generating-a-midcurve-between-two-curve-elements",
    "chunk_text": "<h3>Generating a MidCurve Between Two Curve Elements</h3><p>Here is a fun little geometric issue raised by Bang in his or her\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/curves.html#comment-6a00e553e16897883301901ddf72df970b\">\ncomment</a> on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/curves.html\">\nRevit curves</a> and\n\ntheir parameterisation, and also discussed quite extensively in this discussion thread on how to\n\n<a href=\"http://www.coe.org/p/fo/et/thread=18887\">\ncreate middle/centre curve between two curves</a>:</p><p><strong>Question:</strong> How to determine the curve centre between two curves, e.g. between:</p><ul>\n<li>Arc – Arc</li>\n<li>Circle – Arc</li>\n<li>Elliptical arc – Ellipse</li>\n<li>Ellipse – Ellipse</li>\n<li>NURBS – NurbSpline</li>\n<li>Hermite – HermiteSpline </li>\n</ul><p><strong>Answer:</strong> That is a nice geometrical question you have.</p><p>The Revit Geometry API does not provide direct support for that functionality, so you would have to implement it yourself.</p><p>The Revit curve class does however provide some very nice completely generic features to access the underlying curve parameterisation.</p><p>That makes it very easy to implement this by generating approximating straight line segments between the two curves.</p><p>You can query the two original curves for their underlying parametric definition data, calculate matching pairs of intermediate points along the two curves, and then generate straight line segments between the midpoints of matching pairs.\n\n<p>It is much more difficult to calculate an exact non-approximating curve between the two given ones, though.</p>\n<p>This approximation approach is also suggested and used in the discussion thread on how to\n\n<a href=\"http://www.coe.org/p/fo/et/thread=18887\">\ncreate middle/centre curve between two curves</a>.</p>\n<p>Seeing as I love little geometrical issues like this, I decided to go ahead and tackle it myself, and add it as a new command CmdMidCurve to The Building Coder samples.</p>\n<p>This is the first new command added in the Revit 2014 time frame.</p>\n<p>The command basically consists of three parts:</p>\n<ul>\n<li><a href=\"#2\">User interface to select two curve elements</a>.</li>\n<li><a href=\"#3\">Determine curve parameterisation data</a>.</li>\n<li><a href=\"#4\">Generate approximating midcurve model line segments</a>.</li>\n</ul>\n<a name=\"2\"></a>\n<h4>User Interface to Select Two Curve Elements</h4>\n<p>As usual, the user interface takes up more code than the real processing functionality.</p>\n<p>In this case, we request the selection of the two curve elements to start out from.</p>\n<p>I always like to implement my user interface in a manner that simplifies testing as far as possible.</p>\n<p>For instance, it helps if no interactive selection is required in my testing model.</p>\n<p>This led me to implement the following selection algorithm:</p>\n<ul>\n<li>Retrieve all curve elements in the entire model.</li>\n<li>If there are exactly two, use those directly with no further questions asked.</li>\n<li>If there are less than two, there is nothing we can do, so bail out.</li>\n<li>If there are more than two, and two or more have been pre-selected before launching the command, use the first two encountered in the selection set.</li>\n<li>Otherwise, prompt for interactive post-selection of the two curve elements using an appropriate selection filter.</li>\n</ul>\n<p>Here is what this looks like in my implementation:</p>\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdMidCurve</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Number of approximation segments to generate.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _nSegments = 64;\n \n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _prompt\n    = <span class=\"maroon\">\"Please run this in a model containing \"</span>\n    + <span class=\"maroon\">\"exactly two curve elements, and they will be \"</span>\n    + <span class=\"maroon\">\"automatically selected. Alternatively, pre-\"</span>\n    + <span class=\"maroon\">\"select two curve elements before launching \"</span>\n    + <span class=\"maroon\">\"this command, or post-select them when \"</span>\n    + <span class=\"maroon\">\"prompted.\"</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Allow selection of curve elements only.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">CurveElementSelectionFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> e <span class=\"blue\">is</span> <span class=\"teal\">CurveElement</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Select all model curves in the entire model.</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveElement</span>&gt; curves = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveElement</span>&gt;(\n      <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">CurveElement</span> ) )\n        .ToElements()\n        .Cast&lt;<span class=\"teal\">CurveElement</span>&gt;() );\n \n    <span class=\"blue\">int</span> n = curves.Count;\n \n    <span class=\"green\">// If there are less than two, </span>\n    <span class=\"green\">// there is nothing we can do.</span>\n \n    <span class=\"blue\">if</span>( 2 &gt; n )\n    {\n      message = _prompt;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// If there are exactly two, pick those.</span>\n \n    <span class=\"blue\">if</span>( 2 &lt; n )\n    {\n      <span class=\"green\">// Else, check for a pre-selection.</span>\n \n      curves.Clear();\n \n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      n = sel.Elements.Size;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} pre-selected elements.\"</span>,\n        n );\n \n      <span class=\"green\">// If two or more model curves were pre-</span>\n      <span class=\"green\">// selected, use the first two encountered.</span>\n \n      <span class=\"blue\">if</span>( 1 &lt; n )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n        {\n          <span class=\"teal\">CurveElement</span> c = e <span class=\"blue\">as</span> <span class=\"teal\">CurveElement</span>;\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != c )\n          {\n            curves.Add( c );\n \n            <span class=\"blue\">if</span>( 2 == curves.Count )\n            {\n              <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Found two model curves, \"</span>\n                + <span class=\"maroon\">\"ignoring everything else.\"</span> );\n \n              <span class=\"blue\">break</span>;\n            }\n          }\n        }\n      }\n \n      <span class=\"green\">// Else, prompt for an </span>\n      <span class=\"green\">// interactive post-selection.</span>\n \n      <span class=\"blue\">if</span>( 2 != curves.Count )\n      {\n        curves.Clear();\n \n        <span class=\"blue\">try</span>\n        {\n          <span class=\"teal\">Reference</span> r = sel.PickObject(\n            <span class=\"teal\">ObjectType</span>.Element,\n            <span class=\"blue\">new</span> <span class=\"teal\">CurveElementSelectionFilter</span>(),\n            <span class=\"maroon\">\"Please pick first model curve.\"</span> );\n \n          curves.Add( doc.GetElement( r.ElementId )\n            <span class=\"blue\">as</span> <span class=\"teal\">CurveElement</span> );\n        }\n        <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n          .<span class=\"teal\">OperationCanceledException</span> )\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n        }\n \n        <span class=\"blue\">try</span>\n        {\n          <span class=\"teal\">Reference</span> r = sel.PickObject(\n            <span class=\"teal\">ObjectType</span>.Element,\n            <span class=\"blue\">new</span> <span class=\"teal\">CurveElementSelectionFilter</span>(),\n            <span class=\"maroon\">\"Please pick second model curve.\"</span> );\n \n          curves.Add( doc.GetElement( r.ElementId )\n            <span class=\"blue\">as</span> <span class=\"teal\">CurveElement</span> );\n        }\n        <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n          .<span class=\"teal\">OperationCanceledException</span> )\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n        }\n      }\n    }\n\n    <span class=\"green\">// . . .</span>\n\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"3\"></a>\n<h4>Determine Curve Parameterisation Data</h4>\n<p>The generic curve parameterisation data that we need is simple: just the start and end parameter defining the range interval and the step size to traverse it, depending on the number of segments to generate, for each of the two curves:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Extract data from the two selected curves.</span>\n\n  <span class=\"teal\">Curve</span> c0 = curves[0].GeometryCurve;\n  <span class=\"teal\">Curve</span> c1 = curves[1].GeometryCurve;\n\n  <span class=\"blue\">double</span> sp0 = c0.GetEndParameter( 0 );\n  <span class=\"blue\">double</span> ep0 = c0.GetEndParameter( 1 );\n  <span class=\"blue\">double</span> step0 = ( ep0 - sp0 ) / _nSegments;\n\n  <span class=\"blue\">double</span> sp1 = c1.GetEndParameter( 0 );\n  <span class=\"blue\">double</span> ep1 = c1.GetEndParameter( 1 );\n  <span class=\"blue\">double</span> step1 = ( ep1 - sp1 ) / _nSegments;\n\n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Two curves' step size [start, end]:\"</span>\n    + <span class=\"maroon\">\" {0} [{1},{2}] -- {3} [{4},{5}]\"</span>,\n    <span class=\"teal\">Util</span>.RealString( step0 ),\n    <span class=\"teal\">Util</span>.RealString( sp0 ),\n    <span class=\"teal\">Util</span>.RealString( ep0 ),\n    <span class=\"teal\">Util</span>.RealString( step1 ),\n    <span class=\"teal\">Util</span>.RealString( sp1 ),\n    <span class=\"teal\">Util</span>.RealString( ep1 ) );\n</pre>\n<a name=\"4\"></a>\n<h4>Generate Approximating Midcurve Model Line Segments</h4>\n<p>We use the curve Evaluate method to determine matching pairs of intermediate curve points on each of the two curves.</p>\n<p>We determine the midpoint between each pair, and connect those with line segments to approximate the midcurve.</p>\n<p>An assertion verifies that the result of Evaluate at the start parameter value equals the curve start point returned by GetEndPoint(0).</p>\n<pre class=\"code\">\n  <span class=\"green\">// Modify document within a transaction.</span>\n\n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    <span class=\"teal\">Creator</span> creator = <span class=\"blue\">new</span> <span class=\"teal\">Creator</span>( doc );\n\n    tx.Start( <span class=\"maroon\">\"MidCurve\"</span> );\n\n    <span class=\"green\">// Current segment start points.</span>\n\n    <span class=\"blue\">double</span> t0 = sp0;\n    <span class=\"blue\">double</span> t1 = sp1;\n\n    <span class=\"teal\">XYZ</span> p0 = c0.GetEndPoint( 0 );\n    <span class=\"teal\">XYZ</span> p1 = c1.GetEndPoint( 0 );\n    <span class=\"teal\">XYZ</span> p = <span class=\"teal\">Util</span>.Midpoint( p0, p1 );\n\n    <span class=\"teal\">Debug</span>.Assert(\n      p0.IsAlmostEqualTo( c0.Evaluate( t0, <span class=\"blue\">false</span> ) ),\n      <span class=\"maroon\">\"expected equal start points\"</span> );\n\n    <span class=\"teal\">Debug</span>.Assert(\n      p1.IsAlmostEqualTo( c1.Evaluate( t1, <span class=\"blue\">false</span> ) ),\n      <span class=\"maroon\">\"expected equal start points\"</span> );\n\n    <span class=\"green\">// Current segment end points.</span>\n\n    t0 += step0;\n    t1 += step1;\n\n    <span class=\"teal\">XYZ</span> q0, q1, q;\n    <span class=\"teal\">Line</span> line;\n\n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; _nSegments; ++i, t0 += step0, t1 += step1 )\n    {\n      q0 = c0.Evaluate( t0, <span class=\"blue\">false</span> );\n      q1 = c1.Evaluate( t1, <span class=\"blue\">false</span> );\n      q = <span class=\"teal\">Util</span>.Midpoint( q0, q1 );\n\n      <span class=\"teal\">Debug</span>.Print(\n        <span class=\"maroon\">\"{0} {1} {2} {3}-{4} {5}-{6} {7}-{8}\"</span>,\n        i,\n        <span class=\"teal\">Util</span>.RealString( t0 ),\n        <span class=\"teal\">Util</span>.RealString( t1 ),\n        <span class=\"teal\">Util</span>.PointString( p0 ),\n        <span class=\"teal\">Util</span>.PointString( q0 ),\n        <span class=\"teal\">Util</span>.PointString( p1 ),\n        <span class=\"teal\">Util</span>.PointString( q1 ),\n        <span class=\"teal\">Util</span>.PointString( p ),\n        <span class=\"teal\">Util</span>.PointString( q ) );\n\n      <span class=\"green\">// Create approximating curve segment.</span>\n\n      line = <span class=\"teal\">Line</span>.CreateBound( p, q );\n      creator.CreateModelCurve( line );\n\n      p0 = q0;\n      p1 = q1;\n      p = q;\n    }\n    tx.Commit();\n  }\n</pre>\n<a name=\"5\"></a>\n<h4>Test Model</h4>\n<p>Here is a sample model to test this in:</p>\n<center>\n<img alt=\"Test model with two model curves\" src=\"img/midcurve1.png\"/>\n</center>\n<p>The top curve is a spline, and the bottom one a simple arc.</p>\n<p>The two selected curve parameterisations are completely different in this case, generating the following start to end intervals and step sizes for 64 segments:</p>\n<table align=\"center\" border=\"0\"> <!-- style=\"border-width:1px; border-style: solid\" -->\n<tr><th style=\"text-align: right;\">Start</th><th style=\"text-align: right;\">      End</th><th style=\"text-align: right;\">    Step size</th></tr>\n<tr><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">444.1</td><td style=\"text-align: right;\">6.94</td></tr>\n<tr><td style=\"text-align: right;\">4.18</td><td style=\"text-align: right;\">5.94</td><td style=\"text-align: right;\">0.03</td></tr>\n</table>\n<p>Executing the command generates a warning message before it terminates, which can be ignored:</p>\n<center>\n<img alt=\"Warning message\" src=\"img/midcurve2.png\"/>\n</center>\n<p>The resulting midcurve approximation looks all right to me:</p>\n<center>\n<img alt=\"Resulting midcurve approximation\" src=\"img/midcurve3.png\"/>\n</center>\n<a name=\"6\"></a>\n<h4>Download</h4>\n<p>Here is\n\n<a href=\"zip/bc_14_101_0.zip\">\nversion 2014.0.101.0</a> of\n\nThe Building Coder samples source code, Visual Studio solution and RvtSamples include file including the new CmdMidCurve command.</p>\n<p>I hope you find this useful and thank Bang for raising this issue.</p>\n</p>"
  },
  {
    "original_filename": "0999_midcurve",
    "header_text": "User Interface to Select Two Curve Elements",
    "local_header_href": "#user-interface-to-select-two-curve-elements",
    "chunk_text": "<h4>User Interface to Select Two Curve Elements</h4><p>As usual, the user interface takes up more code than the real processing functionality.</p><p>In this case, we request the selection of the two curve elements to start out from.</p><p>I always like to implement my user interface in a manner that simplifies testing as far as possible.</p><p>For instance, it helps if no interactive selection is required in my testing model.</p><p>This led me to implement the following selection algorithm:</p><ul>\n<li>Retrieve all curve elements in the entire model.</li>\n<li>If there are exactly two, use those directly with no further questions asked.</li>\n<li>If there are less than two, there is nothing we can do, so bail out.</li>\n<li>If there are more than two, and two or more have been pre-selected before launching the command, use the first two encountered in the selection set.</li>\n<li>Otherwise, prompt for interactive post-selection of the two curve elements using an appropriate selection filter.</li>\n</ul><p>Here is what this looks like in my implementation:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdMidCurve</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Number of approximation segments to generate.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _nSegments = 64;\n \n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _prompt\n    = <span class=\"maroon\">\"Please run this in a model containing \"</span>\n    + <span class=\"maroon\">\"exactly two curve elements, and they will be \"</span>\n    + <span class=\"maroon\">\"automatically selected. Alternatively, pre-\"</span>\n    + <span class=\"maroon\">\"select two curve elements before launching \"</span>\n    + <span class=\"maroon\">\"this command, or post-select them when \"</span>\n    + <span class=\"maroon\">\"prompted.\"</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Allow selection of curve elements only.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">CurveElementSelectionFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> e <span class=\"blue\">is</span> <span class=\"teal\">CurveElement</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Select all model curves in the entire model.</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveElement</span>&gt; curves = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">CurveElement</span>&gt;(\n      <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">CurveElement</span> ) )\n        .ToElements()\n        .Cast&lt;<span class=\"teal\">CurveElement</span>&gt;() );\n \n    <span class=\"blue\">int</span> n = curves.Count;\n \n    <span class=\"green\">// If there are less than two, </span>\n    <span class=\"green\">// there is nothing we can do.</span>\n \n    <span class=\"blue\">if</span>( 2 &gt; n )\n    {\n      message = _prompt;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// If there are exactly two, pick those.</span>\n \n    <span class=\"blue\">if</span>( 2 &lt; n )\n    {\n      <span class=\"green\">// Else, check for a pre-selection.</span>\n \n      curves.Clear();\n \n      <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n      n = sel.Elements.Size;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} pre-selected elements.\"</span>,\n        n );\n \n      <span class=\"green\">// If two or more model curves were pre-</span>\n      <span class=\"green\">// selected, use the first two encountered.</span>\n \n      <span class=\"blue\">if</span>( 1 &lt; n )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n        {\n          <span class=\"teal\">CurveElement</span> c = e <span class=\"blue\">as</span> <span class=\"teal\">CurveElement</span>;\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != c )\n          {\n            curves.Add( c );\n \n            <span class=\"blue\">if</span>( 2 == curves.Count )\n            {\n              <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Found two model curves, \"</span>\n                + <span class=\"maroon\">\"ignoring everything else.\"</span> );\n \n              <span class=\"blue\">break</span>;\n            }\n          }\n        }\n      }\n \n      <span class=\"green\">// Else, prompt for an </span>\n      <span class=\"green\">// interactive post-selection.</span>\n \n      <span class=\"blue\">if</span>( 2 != curves.Count )\n      {\n        curves.Clear();\n \n        <span class=\"blue\">try</span>\n        {\n          <span class=\"teal\">Reference</span> r = sel.PickObject(\n            <span class=\"teal\">ObjectType</span>.Element,\n            <span class=\"blue\">new</span> <span class=\"teal\">CurveElementSelectionFilter</span>(),\n            <span class=\"maroon\">\"Please pick first model curve.\"</span> );\n \n          curves.Add( doc.GetElement( r.ElementId )\n            <span class=\"blue\">as</span> <span class=\"teal\">CurveElement</span> );\n        }\n        <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n          .<span class=\"teal\">OperationCanceledException</span> )\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n        }\n \n        <span class=\"blue\">try</span>\n        {\n          <span class=\"teal\">Reference</span> r = sel.PickObject(\n            <span class=\"teal\">ObjectType</span>.Element,\n            <span class=\"blue\">new</span> <span class=\"teal\">CurveElementSelectionFilter</span>(),\n            <span class=\"maroon\">\"Please pick second model curve.\"</span> );\n \n          curves.Add( doc.GetElement( r.ElementId )\n            <span class=\"blue\">as</span> <span class=\"teal\">CurveElement</span> );\n        }\n        <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n          .<span class=\"teal\">OperationCanceledException</span> )\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n        }\n      }\n    }\n\n    <span class=\"green\">// . . .</span>\n\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "0999_midcurve",
    "header_text": "Determine Curve Parameterisation Data",
    "local_header_href": "#determine-curve-parameterisation-data",
    "chunk_text": "<h4>Determine Curve Parameterisation Data</h4><p>The generic curve parameterisation data that we need is simple: just the start and end parameter defining the range interval and the step size to traverse it, depending on the number of segments to generate, for each of the two curves:</p><pre class=\"code\">\n  <span class=\"green\">// Extract data from the two selected curves.</span>\n\n  <span class=\"teal\">Curve</span> c0 = curves[0].GeometryCurve;\n  <span class=\"teal\">Curve</span> c1 = curves[1].GeometryCurve;\n\n  <span class=\"blue\">double</span> sp0 = c0.GetEndParameter( 0 );\n  <span class=\"blue\">double</span> ep0 = c0.GetEndParameter( 1 );\n  <span class=\"blue\">double</span> step0 = ( ep0 - sp0 ) / _nSegments;\n\n  <span class=\"blue\">double</span> sp1 = c1.GetEndParameter( 0 );\n  <span class=\"blue\">double</span> ep1 = c1.GetEndParameter( 1 );\n  <span class=\"blue\">double</span> step1 = ( ep1 - sp1 ) / _nSegments;\n\n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Two curves' step size [start, end]:\"</span>\n    + <span class=\"maroon\">\" {0} [{1},{2}] -- {3} [{4},{5}]\"</span>,\n    <span class=\"teal\">Util</span>.RealString( step0 ),\n    <span class=\"teal\">Util</span>.RealString( sp0 ),\n    <span class=\"teal\">Util</span>.RealString( ep0 ),\n    <span class=\"teal\">Util</span>.RealString( step1 ),\n    <span class=\"teal\">Util</span>.RealString( sp1 ),\n    <span class=\"teal\">Util</span>.RealString( ep1 ) );\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "0999_midcurve",
    "header_text": "Generate Approximating Midcurve Model Line Segments",
    "local_header_href": "#generate-approximating-midcurve-model-line-segments",
    "chunk_text": "<h4>Generate Approximating Midcurve Model Line Segments</h4><p>We use the curve Evaluate method to determine matching pairs of intermediate curve points on each of the two curves.</p><p>We determine the midpoint between each pair, and connect those with line segments to approximate the midcurve.</p><p>An assertion verifies that the result of Evaluate at the start parameter value equals the curve start point returned by GetEndPoint(0).</p><pre class=\"code\">\n  <span class=\"green\">// Modify document within a transaction.</span>\n\n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    <span class=\"teal\">Creator</span> creator = <span class=\"blue\">new</span> <span class=\"teal\">Creator</span>( doc );\n\n    tx.Start( <span class=\"maroon\">\"MidCurve\"</span> );\n\n    <span class=\"green\">// Current segment start points.</span>\n\n    <span class=\"blue\">double</span> t0 = sp0;\n    <span class=\"blue\">double</span> t1 = sp1;\n\n    <span class=\"teal\">XYZ</span> p0 = c0.GetEndPoint( 0 );\n    <span class=\"teal\">XYZ</span> p1 = c1.GetEndPoint( 0 );\n    <span class=\"teal\">XYZ</span> p = <span class=\"teal\">Util</span>.Midpoint( p0, p1 );\n\n    <span class=\"teal\">Debug</span>.Assert(\n      p0.IsAlmostEqualTo( c0.Evaluate( t0, <span class=\"blue\">false</span> ) ),\n      <span class=\"maroon\">\"expected equal start points\"</span> );\n\n    <span class=\"teal\">Debug</span>.Assert(\n      p1.IsAlmostEqualTo( c1.Evaluate( t1, <span class=\"blue\">false</span> ) ),\n      <span class=\"maroon\">\"expected equal start points\"</span> );\n\n    <span class=\"green\">// Current segment end points.</span>\n\n    t0 += step0;\n    t1 += step1;\n\n    <span class=\"teal\">XYZ</span> q0, q1, q;\n    <span class=\"teal\">Line</span> line;\n\n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; _nSegments; ++i, t0 += step0, t1 += step1 )\n    {\n      q0 = c0.Evaluate( t0, <span class=\"blue\">false</span> );\n      q1 = c1.Evaluate( t1, <span class=\"blue\">false</span> );\n      q = <span class=\"teal\">Util</span>.Midpoint( q0, q1 );\n\n      <span class=\"teal\">Debug</span>.Print(\n        <span class=\"maroon\">\"{0} {1} {2} {3}-{4} {5}-{6} {7}-{8}\"</span>,\n        i,\n        <span class=\"teal\">Util</span>.RealString( t0 ),\n        <span class=\"teal\">Util</span>.RealString( t1 ),\n        <span class=\"teal\">Util</span>.PointString( p0 ),\n        <span class=\"teal\">Util</span>.PointString( q0 ),\n        <span class=\"teal\">Util</span>.PointString( p1 ),\n        <span class=\"teal\">Util</span>.PointString( q1 ),\n        <span class=\"teal\">Util</span>.PointString( p ),\n        <span class=\"teal\">Util</span>.PointString( q ) );\n\n      <span class=\"green\">// Create approximating curve segment.</span>\n\n      line = <span class=\"teal\">Line</span>.CreateBound( p, q );\n      creator.CreateModelCurve( line );\n\n      p0 = q0;\n      p1 = q1;\n      p = q;\n    }\n    tx.Commit();\n  }\n</pre><a name=\"5\"></a>"
  },
  {
    "original_filename": "0999_midcurve",
    "header_text": "Test Model",
    "local_header_href": "#test-model",
    "chunk_text": "<h4>Test Model</h4><p>Here is a sample model to test this in:</p><center>\n<img alt=\"Test model with two model curves\" src=\"img/midcurve1.png\"/>\n</center><p>The top curve is a spline, and the bottom one a simple arc.</p><p>The two selected curve parameterisations are completely different in this case, generating the following start to end intervals and step sizes for 64 segments:</p><table align=\"center\" border=\"0\"> <!-- style=\"border-width:1px; border-style: solid\" -->\n<tr><th style=\"text-align: right;\">Start</th><th style=\"text-align: right;\">      End</th><th style=\"text-align: right;\">    Step size</th></tr>\n<tr><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">444.1</td><td style=\"text-align: right;\">6.94</td></tr>\n<tr><td style=\"text-align: right;\">4.18</td><td style=\"text-align: right;\">5.94</td><td style=\"text-align: right;\">0.03</td></tr>\n</table><p>Executing the command generates a warning message before it terminates, which can be ignored:</p><center>\n<img alt=\"Warning message\" src=\"img/midcurve2.png\"/>\n</center><p>The resulting midcurve approximation looks all right to me:</p><center>\n<img alt=\"Resulting midcurve approximation\" src=\"img/midcurve3.png\"/>\n</center><a name=\"6\"></a>"
  },
  {
    "original_filename": "0999_midcurve",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>Here is\n\n<a href=\"zip/bc_14_101_0.zip\">\nversion 2014.0.101.0</a> of\n\nThe Building Coder samples source code, Visual Studio solution and RvtSamples include file including the new CmdMidCurve command.</p><p>I hope you find this useful and thank Bang for raising this issue.</p>"
  }
]