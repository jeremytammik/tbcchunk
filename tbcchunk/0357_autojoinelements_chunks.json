[
  {
    "original_filename": "0357_autojoinelements",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0357_autojoinelements",
    "header_text": "AutoJoinElements",
    "local_header_href": "#autojoinelements",
    "chunk_text": "<h3>AutoJoinElements</h3><p>I just heard that there is an issue with the Document.AutoJoinElements method.\nThis gave rise to a discussion which raises some interesting points and is worth sharing.\n\n<p>For those of you not familiar with this method, here is the brief description from the Revit API help file:\n\n<p style=\"color:darkblue\">AutoJoinElements forces the elements in the Revit document to automatically join to their neighbours where appropriate.\nUse this method to force elements in the document to automatically join to their neighbours.\nNote that when a transaction is committed there is an automatic call to automatically join elements.</p>\n<p>That sounds pretty clear, doesn't it?\nUnfortunately, it doesn't quite work that way, at least not at the moment.\n\n\n<h4>Automatic AutoJoinElements Broken</h4>\n<p>As stated in the help file, all elements requiring joining are automatically joined every time a transaction is committed.\nThis obviously includes the transaction that is automatically managed by the Revit API framework for a command using the automatic transaction mode.\n\n<p>You may want to call auto-join manually at some point as well, though only in manual regeneration mode, for instance if you need to query the auto-joined geometry for something else. \nFor example, if you create two walls that will eventually be auto-joined, and want to examine the corner formed by them right away because you want to create something else there. \nIn order to get the updated and joined geometry and the final resulting corner point, you will need to regenerate and auto-join. \n\n<p>The Regeneration.Automatic mode applies to auto-joining as well. \nIn any mode though, you should not need to call auto-join (nor regenerate) manually if you do not need to read updated geometry. \nThe end of the transaction will always perform both no matter what the regeneration mode is. \n\n<p>Unfortunately, right now, you <strong>do</strong> need to make the explicit call to AutoJoinElements, because the automatic mechanism is not kicking in. \nFurthermore, calling AutoJoinElements in automatic regeneration mode will throw an exception, so you cannot do that. \nAn application that needs this functionality currently has to use manual regeneration. \n\n<p>If I run the Revit API introduction external command Lab2_0_CreateLittleHouse, which creates a little house consisting of four walls with a door and some windows, a floor, a roof, and a room, the end result after the command terminates looks like this:</p>\n<center>\n<img alt=\"Little house with unjoined walls\" src=\"img/little_house_unjoined.png\"/>\n</center>\n<p>The walls have not been joined at the corners, so somehow the automatic call to AutoJoinElements has not been performed.\n\n<p>This command is using automatic transaction mode and the manual regeneration option.\n\n<p>Adding a call to doc.AutoJoinElements immediately before returning Result.Succeeded fixes the problem:</p>\n<center>\n<img alt=\"Little house with joined walls\" src=\"img/little_house_joined.png\"/>\n</center>\n<h4>Questions and Answers on AutoJoinElements</h4>\n<p>As mentioned above, we had an interesting and fruitful internal discussion in the course of clarifying the intended behaviour of this mechanism:\n\n<p><strong>[Q]</strong> I would like some usage tips or comments that help me understand the behaviour of AutoJoinElemens.\nHere is what I am doing:\nI draw four rectangular walls.\nI notice that the wall corners are not automatically shrink wrapped.\nIf I add an explicit call to AutoJoinElements, they are.\nWhen is the right timing for this?\nRight before or after a new element is added?\nDoes AutoJoinElements only affect one element at a time?\n\n<p><strong>[A]</strong> It can be used to affect one single element at a time, and it is also effective for multiple elements.\nThat's what I would do here: draw all the new walls, call AutoJoinElements once at the end, and then you should be able to do things like creating rooms for the circuits formed by these walls.\n\n<p>You may also need to regenerate first by calling doc.Regenerate, and then auto-join.\nSometimes, you may even need to regenerate again afterwards as well.\n\n<p><strong>[Q]</strong> Thank you, it works now.\nSo it looks like auto-join is also updating the graphics in this case.\nI thought the regeneration would do that.\nYour comment about calling the regeneration twice makes more sense now.\n\n<p><strong>[A]</strong> Generally, you should not need to regenerate twice, but sometimes it is needed.\n\n<p>Yes, auto-join updates the model.\nIt updates it in a different way than regeneration.\nTechnically, auto-join could actually be part of regeneration, but there are performance reasons for them to be two separate methods.\n\n<p>Obviously, you need a transaction to be able to regenerate and auto-join.\nThe end of the transaction (commit) will do call these for you too, but you can do it yourself (in manual mode) if you need to.\n\n<p><strong>[Q]</strong> Another question: how can I partially auto-join, e.g. join certain specific walls but not others?\n\n<p><strong>[A]</strong> Auto joining is not for joining walls on demand – it is a step that will eventually be always performed and it will join everything that needs to be joined, according to certain rules.\nSo it does not matter if you only auto-join two walls in your loop.\nAt the end you will have to commit your transaction, and during the committing procedure all walls that should be joined will be joined automatically.\n\n<p><strong>[Q]</strong> Aha, thank you for the clarification.\nI thought this feature is to control join and disjoin behaviour, and that is not the case.\n\n<p>So this means that we only need to call auto-join once when the shrink wrap information is needed.\n\n<p>Regarding the automatically joining, I am using TransactionMode.Automatic and RegenerationOption.Automatic, and the walls are not joined after my command has terminated.\nI need to add the call to AutoJoinElements for them to be joined.\n\n<p><strong>[A]</strong> As explained above, that is a temporary situation.\nThe Regeneration.Automatic mode normally applies to auto-joining as well.\nYou should not need to call auto-join manually in any mode if you do not need to query the updated geometry.\nThe end of the transaction will always perform both no matter what the regeneration mode is.\n\n<p>Right now you do need to make the explicit call to AutoJoinElements, because the automatic mechanism is not kicking in.\nFurthermore, you cannot make that call in automatic regeneration mode due to it throwing an exception, so an application that needs this functionality currently has to use manual regeneration.\n\n<p>Very many thanks to Mikako Harada, Scott Conover and Arnošt Löbel for this useful information, and sorry for the temporary bad news for application developers relying on the automatic mechanism.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0357_autojoinelements",
    "header_text": "Automatic AutoJoinElements Broken",
    "local_header_href": "#automatic-autojoinelements-broken",
    "chunk_text": "<h4>Automatic AutoJoinElements Broken</h4><p>As stated in the help file, all elements requiring joining are automatically joined every time a transaction is committed.\nThis obviously includes the transaction that is automatically managed by the Revit API framework for a command using the automatic transaction mode.\n\n<p>You may want to call auto-join manually at some point as well, though only in manual regeneration mode, for instance if you need to query the auto-joined geometry for something else. \nFor example, if you create two walls that will eventually be auto-joined, and want to examine the corner formed by them right away because you want to create something else there. \nIn order to get the updated and joined geometry and the final resulting corner point, you will need to regenerate and auto-join. \n\n<p>The Regeneration.Automatic mode applies to auto-joining as well. \nIn any mode though, you should not need to call auto-join (nor regenerate) manually if you do not need to read updated geometry. \nThe end of the transaction will always perform both no matter what the regeneration mode is. \n\n<p>Unfortunately, right now, you <strong>do</strong> need to make the explicit call to AutoJoinElements, because the automatic mechanism is not kicking in. \nFurthermore, calling AutoJoinElements in automatic regeneration mode will throw an exception, so you cannot do that. \nAn application that needs this functionality currently has to use manual regeneration. \n\n<p>If I run the Revit API introduction external command Lab2_0_CreateLittleHouse, which creates a little house consisting of four walls with a door and some windows, a floor, a roof, and a room, the end result after the command terminates looks like this:</p>\n<center>\n<img alt=\"Little house with unjoined walls\" src=\"img/little_house_unjoined.png\"/>\n</center>\n<p>The walls have not been joined at the corners, so somehow the automatic call to AutoJoinElements has not been performed.\n\n<p>This command is using automatic transaction mode and the manual regeneration option.\n\n<p>Adding a call to doc.AutoJoinElements immediately before returning Result.Succeeded fixes the problem:</p>\n<center>\n<img alt=\"Little house with joined walls\" src=\"img/little_house_joined.png\"/>\n</center>\n<h4>Questions and Answers on AutoJoinElements</h4>\n<p>As mentioned above, we had an interesting and fruitful internal discussion in the course of clarifying the intended behaviour of this mechanism:\n\n<p><strong>[Q]</strong> I would like some usage tips or comments that help me understand the behaviour of AutoJoinElemens.\nHere is what I am doing:\nI draw four rectangular walls.\nI notice that the wall corners are not automatically shrink wrapped.\nIf I add an explicit call to AutoJoinElements, they are.\nWhen is the right timing for this?\nRight before or after a new element is added?\nDoes AutoJoinElements only affect one element at a time?\n\n<p><strong>[A]</strong> It can be used to affect one single element at a time, and it is also effective for multiple elements.\nThat's what I would do here: draw all the new walls, call AutoJoinElements once at the end, and then you should be able to do things like creating rooms for the circuits formed by these walls.\n\n<p>You may also need to regenerate first by calling doc.Regenerate, and then auto-join.\nSometimes, you may even need to regenerate again afterwards as well.\n\n<p><strong>[Q]</strong> Thank you, it works now.\nSo it looks like auto-join is also updating the graphics in this case.\nI thought the regeneration would do that.\nYour comment about calling the regeneration twice makes more sense now.\n\n<p><strong>[A]</strong> Generally, you should not need to regenerate twice, but sometimes it is needed.\n\n<p>Yes, auto-join updates the model.\nIt updates it in a different way than regeneration.\nTechnically, auto-join could actually be part of regeneration, but there are performance reasons for them to be two separate methods.\n\n<p>Obviously, you need a transaction to be able to regenerate and auto-join.\nThe end of the transaction (commit) will do call these for you too, but you can do it yourself (in manual mode) if you need to.\n\n<p><strong>[Q]</strong> Another question: how can I partially auto-join, e.g. join certain specific walls but not others?\n\n<p><strong>[A]</strong> Auto joining is not for joining walls on demand – it is a step that will eventually be always performed and it will join everything that needs to be joined, according to certain rules.\nSo it does not matter if you only auto-join two walls in your loop.\nAt the end you will have to commit your transaction, and during the committing procedure all walls that should be joined will be joined automatically.\n\n<p><strong>[Q]</strong> Aha, thank you for the clarification.\nI thought this feature is to control join and disjoin behaviour, and that is not the case.\n\n<p>So this means that we only need to call auto-join once when the shrink wrap information is needed.\n\n<p>Regarding the automatically joining, I am using TransactionMode.Automatic and RegenerationOption.Automatic, and the walls are not joined after my command has terminated.\nI need to add the call to AutoJoinElements for them to be joined.\n\n<p><strong>[A]</strong> As explained above, that is a temporary situation.\nThe Regeneration.Automatic mode normally applies to auto-joining as well.\nYou should not need to call auto-join manually in any mode if you do not need to query the updated geometry.\nThe end of the transaction will always perform both no matter what the regeneration mode is.\n\n<p>Right now you do need to make the explicit call to AutoJoinElements, because the automatic mechanism is not kicking in.\nFurthermore, you cannot make that call in automatic regeneration mode due to it throwing an exception, so an application that needs this functionality currently has to use manual regeneration.\n\n<p>Very many thanks to Mikako Harada, Scott Conover and Arnošt Löbel for this useful information, and sorry for the temporary bad news for application developers relying on the automatic mechanism.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0357_autojoinelements",
    "header_text": "Questions and Answers on AutoJoinElements",
    "local_header_href": "#questions-and-answers-on-autojoinelements",
    "chunk_text": "<h4>Questions and Answers on AutoJoinElements</h4><p>As mentioned above, we had an interesting and fruitful internal discussion in the course of clarifying the intended behaviour of this mechanism:\n\n<p><strong>[Q]</strong> I would like some usage tips or comments that help me understand the behaviour of AutoJoinElemens.\nHere is what I am doing:\nI draw four rectangular walls.\nI notice that the wall corners are not automatically shrink wrapped.\nIf I add an explicit call to AutoJoinElements, they are.\nWhen is the right timing for this?\nRight before or after a new element is added?\nDoes AutoJoinElements only affect one element at a time?\n\n<p><strong>[A]</strong> It can be used to affect one single element at a time, and it is also effective for multiple elements.\nThat's what I would do here: draw all the new walls, call AutoJoinElements once at the end, and then you should be able to do things like creating rooms for the circuits formed by these walls.\n\n<p>You may also need to regenerate first by calling doc.Regenerate, and then auto-join.\nSometimes, you may even need to regenerate again afterwards as well.\n\n<p><strong>[Q]</strong> Thank you, it works now.\nSo it looks like auto-join is also updating the graphics in this case.\nI thought the regeneration would do that.\nYour comment about calling the regeneration twice makes more sense now.\n\n<p><strong>[A]</strong> Generally, you should not need to regenerate twice, but sometimes it is needed.\n\n<p>Yes, auto-join updates the model.\nIt updates it in a different way than regeneration.\nTechnically, auto-join could actually be part of regeneration, but there are performance reasons for them to be two separate methods.\n\n<p>Obviously, you need a transaction to be able to regenerate and auto-join.\nThe end of the transaction (commit) will do call these for you too, but you can do it yourself (in manual mode) if you need to.\n\n<p><strong>[Q]</strong> Another question: how can I partially auto-join, e.g. join certain specific walls but not others?\n\n<p><strong>[A]</strong> Auto joining is not for joining walls on demand – it is a step that will eventually be always performed and it will join everything that needs to be joined, according to certain rules.\nSo it does not matter if you only auto-join two walls in your loop.\nAt the end you will have to commit your transaction, and during the committing procedure all walls that should be joined will be joined automatically.\n\n<p><strong>[Q]</strong> Aha, thank you for the clarification.\nI thought this feature is to control join and disjoin behaviour, and that is not the case.\n\n<p>So this means that we only need to call auto-join once when the shrink wrap information is needed.\n\n<p>Regarding the automatically joining, I am using TransactionMode.Automatic and RegenerationOption.Automatic, and the walls are not joined after my command has terminated.\nI need to add the call to AutoJoinElements for them to be joined.\n\n<p><strong>[A]</strong> As explained above, that is a temporary situation.\nThe Regeneration.Automatic mode normally applies to auto-joining as well.\nYou should not need to call auto-join manually in any mode if you do not need to query the updated geometry.\nThe end of the transaction will always perform both no matter what the regeneration mode is.\n\n<p>Right now you do need to make the explicit call to AutoJoinElements, because the automatic mechanism is not kicking in.\nFurthermore, you cannot make that call in automatic regeneration mode due to it throwing an exception, so an application that needs this functionality currently has to use manual regeneration.\n\n<p>Very many thanks to Mikako Harada, Scott Conover and Arnošt Löbel for this useful information, and sorry for the temporary bad news for application developers relying on the automatic mechanism.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]