[
  {
    "original_filename": "1607_automatic_walls",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- 13642689 [Mathematical Translations]\n  https://forums.autodesk.com/t5/revit-api-forum/mathematical-translations/m-p/7580510\n  automatically create walls in cubical family instances\n\nAutomatic wall creation via #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/autowallrvt\n\nAlexander Ignatovich shares an exceedingly elegant solution for automatic wall creation, illustrating a number of important concepts and implementing the following functionality very succinctly indeed\n&ndash; Retrieve all the <code>cube</code> family instances\n&ndash; Retrieve their <code>height</code> parameter value\n&ndash; Retrieve their solids making use of the .NET <code>yield</code> operator\n&ndash; Extract their horizontal outline contours using an <code>ExtrusionAnalyzer</code>\n&ndash; Create walls along each contour curve segment\n&ndash; Place a door family instance at the midpoint of each wall...\n\n--->"
  },
  {
    "original_filename": "1607_automatic_walls",
    "header_text": "Automatic Wall Creation",
    "local_header_href": "#automatic-wall-creation",
    "chunk_text": "### Automatic Wall Creation\n\nI highlight yet another thread from \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160),\non [mathematical translations for automatic wall creation](https://forums.autodesk.com/t5/revit-api-forum/mathematical-translations/m-p/7580510),\nwith an exceedingly elegant solution\nby Alexander [@aignatovich](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1257478) Ignatovich.\n\nAlexander's macro illustrates a number of important concepts and implements the following functionality very succinctly indeed:\n\n- Retrieve all the `cube` family instances\n- Retrieve their `height` parameter value\n- Retrieve their solids making use of the .NET `yield` operator\n- Extract their horizontal outline contours using an `ExtrusionAnalyzer`\n- Create walls along each contour curve segment\n- Place a door family instance at the midpoint of each wall\n\nHis code is well worth reading in detail!\n\nAn absolute must, actually!\n\n**Question:** I am building an add-in that creates walls and doors inside a custom family that acts somewhat as an empty area if you will.\n\nSince I cannot nest walls within the custom family, I have to create them via the API with (x,y,z) coordinates.\n\nWhen the user places the custom cube (area) family, the walls get built.\n\nThe issue is when the user selects a rotation that is not 0 deg, I do not know the translation of coordinates to assign to the wall start and end points.\n\nI have completed all the trig to determine the angles and it will account for any angle the user selects.\n\nHow do I do the Mathematical translations to determine a formula which will help me determine the new start and end points of the walls?\n\nThe attached document [efortune_trigrevitapi.pdf](zip/autowall_efortune_trigrevitapi.pdf) shows how I determined the angles using the Bounding Box Min and Max along with the insertion point.\n\n\n**Answer:** Your 5-page PDF listing dozens of formulas may be unnecessary complicated.\n \nAs far as I can tell from your verbal description, your problem is small and simple.\n \nI have a hunch that the solution is smaller and simpler still.\n \nI presume that an easy solution can be found that is valid for all quadrants, without distinction.\n \nA straight vertical wall depends on only two points, p and q, representing the start and end point of the wall.\n \nA cube is inserted into the model, defining a transform T consisting of a rotation by an angle `a` and a translation by a vector `v`.\n \nTo transform p and q by T, you could first rotate them both around the origin (or whatever axis point you prefer) by `a` and then translate then by `v` to wherever they are supposed to end up.\n\nAlternatively, use the real-world coordinates from the cube vertices as they are.\n \nLook at this code and the macro in the attached Revit file [autowalls.rvt](zip/autowall_autowalls.rvt); maybe it will be useful for you:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">using</span>&nbsp;System.Collections.Generic;\n<span style=\"color:blue;\">using</span>&nbsp;System.Linq;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.Attributes;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB.Structure;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.Exceptions;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.UI;\n \n<span style=\"color:blue;\">namespace</span>&nbsp;AutoWallsByCubes\n{\n&nbsp;&nbsp;[<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;<span style=\"color:#2b91af;\">TransactionMode</span>.Manual&nbsp;)]\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">CreateWallsAutomaticallyCommand</span>&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IExternalCommand</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;Execute(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementSet</span>&nbsp;elements&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;uiapp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;uidoc&nbsp;=&nbsp;uiapp.ActiveUIDocument;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;cubes&nbsp;=&nbsp;FindCubes(&nbsp;doc&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;transaction&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Start(&nbsp;<span style=\"color:#a31515;\">&quot;create&nbsp;walls&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;cube&nbsp;<span style=\"color:blue;\">in</span>&nbsp;cubes&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;countours&nbsp;=&nbsp;FindCountors(&nbsp;cube&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SelectMany(&nbsp;x&nbsp;=&gt;&nbsp;x&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;height&nbsp;=&nbsp;cube.LookupParameter(&nbsp;<span style=\"color:#a31515;\">&quot;height&quot;</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AsDouble();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;countour&nbsp;<span style=\"color:blue;\">in</span>&nbsp;countours&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;wall&nbsp;=&nbsp;CreateWall(&nbsp;cube,&nbsp;countour,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateDoor(&nbsp;wall&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Wall</span>&nbsp;CreateWall(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FamilyInstance</span>&nbsp;cube,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Curve</span>&nbsp;curve,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;height&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;doc&nbsp;=&nbsp;cube.Document;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;wallTypeId&nbsp;=&nbsp;doc.GetDefaultElementTypeId(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementTypeGroup</span>.WallType&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Wall</span>.Create(&nbsp;doc,&nbsp;curve.CreateReversed(),&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wallTypeId,&nbsp;cube.LevelId,&nbsp;height,&nbsp;0,&nbsp;<span style=\"color:blue;\">false</span>,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">false</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;CreateDoor(&nbsp;<span style=\"color:#2b91af;\">Wall</span>&nbsp;wall&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;locationCurve&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">LocationCurve</span>)&nbsp;wall.Location;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;position&nbsp;=&nbsp;locationCurve.Curve.Evaluate(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5,&nbsp;<span style=\"color:blue;\">true</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;document&nbsp;=&nbsp;wall.Document;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;level&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">Level</span>)&nbsp;document.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wall.LevelId&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;symbolId&nbsp;=&nbsp;document.GetDefaultFamilyTypeId(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Doors&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;symbol&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">FamilySymbol</span>)&nbsp;document.GetElement(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symbolId&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!symbol.IsActive&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symbol.Activate();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.Create.NewFamilyInstance(&nbsp;position,&nbsp;symbol,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wall,&nbsp;level,&nbsp;<span style=\"color:#2b91af;\">StructuralType</span>.NonStructural&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">FamilyInstance</span>&gt;&nbsp;FindCubes(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;collector&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;collector\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfCategory(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_GenericModel&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">FamilyInstance</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfType&lt;<span style=\"color:#2b91af;\">FamilyInstance</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;x&nbsp;=&gt;&nbsp;x.Symbol.FamilyName&nbsp;==&nbsp;<span style=\"color:#a31515;\">&quot;cube&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">CurveLoop</span>&gt;&nbsp;FindCountors(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FamilyInstance</span>&nbsp;familyInstance&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;GetSolids(&nbsp;familyInstance&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SelectMany(&nbsp;x&nbsp;=&gt;&nbsp;GetCountours(&nbsp;x,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;familyInstance&nbsp;)&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Solid</span>&gt;&nbsp;GetSolids(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;element&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;geometry&nbsp;=&nbsp;element\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.get_Geometry(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ComputeReferences&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IncludeNonVisibleObjects&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>&nbsp;}&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;geometry&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Enumerable</span>.Empty&lt;<span style=\"color:#2b91af;\">Solid</span>&gt;();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;GetSolids(&nbsp;geometry&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;x&nbsp;=&gt;&nbsp;x.Volume&nbsp;&gt;&nbsp;0&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Solid</span>&gt;&nbsp;GetSolids(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">GeometryObject</span>&gt;&nbsp;geometryElement&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;geometry&nbsp;<span style=\"color:blue;\">in</span>&nbsp;geometryElement&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;solid&nbsp;=&nbsp;geometry&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Solid</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;solid&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">yield</span>&nbsp;<span style=\"color:blue;\">return</span>&nbsp;solid;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;instance&nbsp;=&nbsp;geometry&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">GeometryInstance</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;instance&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;instanceSolid&nbsp;<span style=\"color:blue;\">in</span>&nbsp;GetSolids(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance.GetInstanceGeometry()&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">yield</span>&nbsp;<span style=\"color:blue;\">return</span>&nbsp;instanceSolid;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;element&nbsp;=&nbsp;geometry&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;element&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;elementSolid&nbsp;<span style=\"color:blue;\">in</span>&nbsp;GetSolids(&nbsp;element&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">yield</span>&nbsp;<span style=\"color:blue;\">return</span>&nbsp;elementSolid;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">CurveLoop</span>&gt;&nbsp;GetCountours(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Solid</span>&nbsp;solid,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;element&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">try</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;plane&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Plane</span>.CreateByNormalAndOrigin(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>.BasisZ,&nbsp;element.get_BoundingBox(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;).Min&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;analyzer&nbsp;=&nbsp;<span style=\"color:#2b91af;\">ExtrusionAnalyzer</span>.Create(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solid,&nbsp;plane,&nbsp;<span style=\"color:#2b91af;\">XYZ</span>.BasisZ&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;face&nbsp;=&nbsp;analyzer.GetExtrusionBase();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;face.GetEdgesAsCurveLoops();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">catch</span>(&nbsp;Autodesk.Revit.Exceptions\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<span style=\"color:#2b91af;\">InvalidOperationException</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Enumerable</span>.Empty&lt;<span style=\"color:#2b91af;\">CurveLoop</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n</pre>\n\nCube family instances before running command:\n\n<center>\n<img src=\"img/autowall_before.png\" alt=\"Cubes\" width=\"400\"/>\n</center>\n\nWalls and doors added along cube horizontal contours after running command:\n\n<center>\n<img src=\"img/autowall_after.png\" alt=\"Walls and doors added along cube faces\" width=\"400\"/>\n</center>\n\nIf you prefer the other approach, explore\nthe [Transform](http://thebuildingcoder.typepad.com/blog/2009/03/transform.html) class\nand related concepts.\n\nYou can get the transform of your family instance using the `familyInstance.GetTotalTransform` method.\n\nMany thanks to Alexander for this beautiful and efficient sample code!"
  }
]