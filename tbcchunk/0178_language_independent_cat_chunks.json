[
  {
    "original_filename": "0178_language_independent_cat",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0178_language_independent_cat",
    "header_text": "Language Independent Category Access",
    "local_header_href": "#language-independent-category-access",
    "chunk_text": "<h3>Language Independent Category Access</h3><p>I recently discussed \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/category-comparison-and-model-element-selection-revisited.html\">\ncategory comparison</a>,\n\nand I keep stressing the importance of keeping the application implementation language independent as far as possible.\n\nJiri Smerak of \n\n<a href=\"http://dlubal.de\">\nIng.-Software Dlubal GmbH</a>\n\nnow uncovered a situation in which due to a localisation issue the language independent category comparison is in fact the only way to access certain categories in the German version of Revit Structure.</p><p>The issue has to do with the following built-in categories:</p><ul>\n<li>OST_LoadCasesLive\n<li>OST_LoadCasesRoofLive\n<li>OST_LoadCasesSnow\n<li>OST_LoadCasesWind\n</li></li></li></li></ul><p>When trying to access these from the document settings Categories collection using the get_Item method, the German version of Revit returns null. \nIn the English version, they work fine and return the correct category objects.\nThe reason for this is that somewhere internally, a string comparison is taking place.\nIn the German version, all four of these categories are represented by the same string in the user interface.</p><p>Using the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/category-comparison-and-model-element-selection-revisited.html\">\nlanguage independent category comparison</a>,\n\nit is possible to compare the built-in enum value with an element category id directly, bypassing all string comparisons, e.g.:</p><pre class=\"code\">\n  <span class=\"blue\">if</span> ( (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_Dimensions\n    == dimension.Category.Id.Value )\n  {\n    message += <span class=\"maroon\">\"\\nDimension is a permanent dimension.\"</span>;\n  }\n</pre><p>The same comparison can be used to detect which category belongs to the desired load cases. \nIt works well and it doesn't depend on the language of the application.\n\n<pre class=\"code\">\n  <span class=\"teal\">LoadCase</span> lc = element <span class=\"blue\">as</span> <span class=\"teal\">LoadCase</span>;\n \n  <span class=\"teal\">Parameter</span> param = lc.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.LOAD_CASE_CATEGORY );\n \n  <span class=\"teal\">ElementId</span> categoryId = param.AsElementId();\n \n  <span class=\"blue\">if</span>( categoryId.Value.Equals( \n    (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_LoadCasesLive ) )\n  {\n    <span class=\"green\">// . . .</span>\n  }\n</pre>\n<p>Many thanks to Jiri for pointing this out!</p></p>"
  }
]