[
  {
    "original_filename": "0852_create_marker",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0852_create_marker",
    "header_text": "Display a Geometry Debugging Point in the Model",
    "local_header_href": "#display-a-geometry-debugging-point-in-the-model",
    "chunk_text": "<h3>Display a Geometry Debugging Point in the Model</h3><p>Here are some pointers from a conversation I had with Daren Thomas on how to display a reference point in the model for debugging purposes that may be on general interest.\n\n<p><strong>Question:</strong> I am playing around with the FindReferencesWithContextByDirection method and would like to display the references found as coloured blobs or something in the model.\n\n<p>How can I achieve this, please?\n\n<p>This question could also be simplified into: how to create an easily visible dot at a 3D point in the model?\n\n<p>Can such a \"dot\" exist on its own or must it be drawn onto a face? How?\n\n<p>I never really got into actually <b>creating</b> geometry in Revit.\n\n<!-- However, it seems to me that I could use NewCurveByPoints (specifying ReferencePoints) to achieve my goal in a family document. -->\n<p><strong>Answer</strong> by Daren: I figured it out on my own now:\n\n<p>I can create a SketchPlane and draw a ModelCurve on it.\n\n<p>Given two points a and b, this \n\n<a href=\"http://code.google.com/p/revitpythonshell\">\nRevitPythonShell</a>\n\ncode will create a green line between them in the 3D view:\n\n<pre class=\"code\">\n  transaction = Transaction(doc)\n  transaction.Start('draw a line')\n  c = XYZ(0, 0, 0)\n  v0 = XYZ(a.X - b.X, a.Y - b.Y, a.Z - b.Z)\n  v1 = XYZ(a.X - c.X, a.Y - c.Y, a.Z - c.Z)\n  plane = Plane(v0.CrossProduct(v1), a)\n  sketchPlane = doc.Create.NewSketchPlane(plane)\n  line = doc.Application.Create.NewLineBound(a, b)\n  doc.Create.NewModelCurve(line, sketchPlane)\n  transaction.Commit()\n</pre>\n<p><strong>Answer</strong> by Jeremy: Yes, model lines is probably the simplest way to go.\n\n<p>You need model curves in 3D, and can use detail curves in a 2D view.\n\n<p>The Creator class included in The Building Code samples includes several usage examples implemented in C#.\nIt was used to graphically highlight geometry in numerous previous posts, and last updated to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/slab-boundary-revisited.html\">\ndisplay the boundaries of a slab</a>.\n\n<p>All it does is package what you describe above nicely, though.\n\n<p>For more complex geometry and transient display, you can also use the analysis visualisation framework AVF.\nIt could be used to draw a full 3D sphere as a marker, if you prefer, as I showed when displaying\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/apollonian-packing-of-spheres-via-web-service-and-avf.html\">\nApollonian spheres using AVF</a>.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]