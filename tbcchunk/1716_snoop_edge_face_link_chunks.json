[
  {
    "original_filename": "1716_snoop_edge_face_link",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- revitlookup update\n  https://github.com/jeremytammik/RevitLookup/releases/tag/2019.0.0.6\n  [diff](https://github.com/jeremytammik/RevitLookup/compare/2019.0.0.5...2019.0.0.6)\n\nNew RevitLookup snoops edges, faces and links in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/lookupedgefacelink\n\nH책vard Leding of Symetri added three new commands to RevitLookup\n&ndash; Three new RevitLookup commands\n&ndash; About \"Snoop Pick Face\"\n&ndash; About \"Pick Linked Element\"\n&ndash; Running in a family document...\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) topic\n\nof [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2019.0.145.4).\n\n-->"
  },
  {
    "original_filename": "1716_snoop_edge_face_link",
    "header_text": "New RevitLookup Snoops Edge, Face, Link",
    "local_header_href": "#new-revitlookup-snoops-edge-face-link",
    "chunk_text": "### New RevitLookup Snoops Edge, Face, Link\n\nBefore leaving for the weekend, let me highlight some recent additions\nto [RevitLookup](https://github.com/jeremytammik/RevitLookup) by \nH책vard Leding of [Symetri](https://www.symetri.com):\n\n- [Three new RevitLookup commands](#3) \n- [About \"Snoop Pick Face...\"](#4) \n- [About \"Pick Linked Element...\"](#5) \n- [Running in a family document](#6) \n\nI added and tested the new commands\nin [RevitLookup release 2019.0.0.6](https://github.com/jeremytammik/RevitLookup/releases/tag/2019.0.0.6).\n\nBelow is the description and some additional background information in H책vard's own words.\n\nMany thanks to H책vard for implementing and sharing this!"
  },
  {
    "original_filename": "1716_snoop_edge_face_link",
    "header_text": "<a name=\"3\"></a> Three New RevitLookup Commands",
    "local_header_href": "#a-name3a-three-new-revitlookup-commands",
    "chunk_text": "#### <a name=\"3\"></a> Three New RevitLookup Commands\n\nThis is perhaps something of interest to someone.\n\nThree very simple additions:\n\n<center>\n<img src=\"img/hl_revitlookup_01.jpg\" alt=\"Three new commands\" width=\"268\">\n</center>\n\nThe first one really helped when debugging stable references on joined solid geometry in families.\nJust the picked `Reference` passed into the `Object` form.\nIf I pass the `GeometryObject` (the face), it will not retrieve a reference, presumably because `GeometryObjectFromReference` doesn't calculate references.\n\nIf of any use, the [commands are attached here](zip/hl_revitlookup_commands.txt).\n\nHere is the code to generate the additional ribbon entries:\n\n<pre class=\"code\">\n  optionsBtn.AddPushButton(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">PushButtonData</span>(&nbsp;<span style=\"color:#a31515;\">&quot;Snoop&nbsp;Pick&nbsp;Face...&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Snoop&nbsp;Pick&nbsp;Face...&quot;</span>,&nbsp;ExecutingAssemblyPath,&nbsp;<span style=\"color:#a31515;\">&quot;RevitLookup.CmdSnoopModScopePickSurface&quot;</span>&nbsp;)&nbsp;);\n\n  optionsBtn.AddPushButton(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">PushButtonData</span>(&nbsp;<span style=\"color:#a31515;\">&quot;Snoop&nbsp;Pick&nbsp;Edge...&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Snoop&nbsp;Pick&nbsp;Edge...&quot;</span>,&nbsp;ExecutingAssemblyPath,&nbsp;<span style=\"color:#a31515;\">&quot;RevitLookup.CmdSnoopModScopePickEdge&quot;</span>&nbsp;)&nbsp;);\n\n  optionsBtn.AddPushButton(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">PushButtonData</span>(&nbsp;<span style=\"color:#a31515;\">&quot;Snoop&nbsp;Pick&nbsp;Linked&nbsp;Element...&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;Snoop&nbsp;Linked&nbsp;Element...&quot;</span>,&nbsp;ExecutingAssemblyPath,&nbsp;<span style=\"color:#a31515;\">&quot;RevitLookup.CmdSnoopModScopeLinkedElement&quot;</span>&nbsp;)&nbsp;);\n</pre>"
  },
  {
    "original_filename": "1716_snoop_edge_face_link",
    "header_text": "<a name=\"4\"></a> About \"Snoop Pick Face...\"",
    "local_header_href": "#a-name4a-about-snoop-pick-face",
    "chunk_text": "#### <a name=\"4\"></a> About \"Snoop Pick Face...\"\n\nUsing `Autodesk.Revit.UI.Selection.ObjectType.Face...` gets you a reference to a face.\n\nBut if you use this instead...\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Face</span>&nbsp;face&nbsp;=&nbsp;cmdData.Application.ActiveUIDocument\n&nbsp;&nbsp;&nbsp;&nbsp;.Document.GetElement(&nbsp;refElem&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.GetGeometryObjectFromReference(&nbsp;refElem&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Face</span>;\n</pre>\n\n...then `Face.Reference` will be null.\n\nSuch a reference is needed when placing face-based families or dimensions, for example.\n\nBut it does get you a stable reference to the face:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;stableRef&nbsp;=&nbsp;refElem\n&nbsp;&nbsp;&nbsp;&nbsp;.ConvertToStableRepresentation(&nbsp;uidoc.Document&nbsp;);\n</pre>\n\nWhich you can use to find the same face using `Element.get_Geometry`.\nWhere `Options` calculate the references.\nAnd that face (really the same face) will have a usable reference.\n\nUsing Lookup, I found this `stableRef` inside a `GeomCombination`.\nAnd so, I knew I had to include `GeomCombination` in my `FilteredElementCollector`.\n\nPerhaps this could be an improvement on `GetGeometryObjectFromReference`?\nAn overload to calcuate references if possible.\n`GetGeometryObjectFromReference(` `Reference,` `bool` `CalculatedReference )`.\n\nThe new pick options helped guide me to my target face."
  },
  {
    "original_filename": "1716_snoop_edge_face_link",
    "header_text": "<a name=\"4\"></a> About \"Pick Linked Element...\"",
    "local_header_href": "#a-name4a-about-pick-linked-element",
    "chunk_text": "#### <a name=\"4\"></a> About \"Pick Linked Element...\"\n\n\"Snoop Pick Linked Element...\" I haven't had use for yet.\n\nI suspect I will use it quite a bit when debugging interaction with linked elements.\n\nSeems to me you could have used \"Pick Linked Element...\" yourself in your latest discussion\non [retrieving linked `IfcZone` elements using Python](https://thebuildingcoder.typepad.com/blog/2019/01/retrieving-linked-ifczone-elements-using-python.html).\n\n<center>\n<img src=\"img/hl_revitlookup_04.jpg\" alt=\"Snooping linked elements\" width=\"685\">\n</center>"
  },
  {
    "original_filename": "1716_snoop_edge_face_link",
    "header_text": "<a name=\"5\"></a> Running in a Family Document",
    "local_header_href": "#a-name5a-running-in-a-family-document",
    "chunk_text": "#### <a name=\"5\"></a> Running in a Family Document\n\nIn my case, the code is running in a family document, not a project.\n\nI get all the solids I need first, knowing that somewhere inside, there is the face I first picked.\n\n<pre class=\"code\">\n&nbsp;&nbsp;List&lt;<span style=\"color:#2b91af;\">Solid</span>&gt;&nbsp;solidsInFamily&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;<span style=\"color:#2b91af;\">Solid</span>&gt;();\n&nbsp;&nbsp;IList&lt;<span style=\"color:#2b91af;\">Type</span>&gt;&nbsp;geomTypes&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;List&lt;<span style=\"color:#2b91af;\">Type</span>&gt;()&nbsp;{&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">GenericForm</span>&nbsp;),&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">GeomCombination</span>&nbsp;)&nbsp;};\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementMulticlassFilter</span>&nbsp;emcf&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementMulticlassFilter</span>(&nbsp;geomTypes&nbsp;);\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;colForms&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;.WherePasses(&nbsp;emcf&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Options</span>&nbsp;opt&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>();\n&nbsp;&nbsp;opt.ComputeReferences&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">CombinableElement</span>&nbsp;combinable&nbsp;<span style=\"color:blue;\">in</span>&nbsp;colForms&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;combinable&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">GenericForm</span>&nbsp;&amp;&amp;&nbsp;!(&nbsp;combinable&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">GenericForm</span>&nbsp;).IsSolid&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">continue</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;geomElem&nbsp;=&nbsp;combinable.get_Geometry(&nbsp;opt&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;List&lt;<span style=\"color:#2b91af;\">Solid</span>&gt;&nbsp;solids&nbsp;=&nbsp;Utils.GetElementSolids(&nbsp;geomElem&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;solidsInFamily.AddRange(&nbsp;solids&nbsp;);\n&nbsp;&nbsp;}\n</pre>\n\nThen, using the stable reference from \"Pick Face\", iterate the solids until I find the face I'm looking for:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Solid</span>&nbsp;solid&nbsp;<span style=\"color:blue;\">in</span>&nbsp;solids&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Face</span>&nbsp;face&nbsp;<span style=\"color:blue;\">in</span>&nbsp;solid.Faces&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;stable&nbsp;=&nbsp;face.Reference.ConvertToStableRepresentation(&nbsp;doc&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;stable&nbsp;==&nbsp;stableRef&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;face&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">PlanarFace</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nPerhaps there is another, simpler, way of getting (picking) a face which has a reference?\n\nBut if I do this, passing the picked face, not the reference:\n\n<center>\n<img src=\"img/hl_revitlookup_02.jpg\" alt=\"Snooping Face object\" width=\"578\">\n</center>\n\nThen the `Face` has no reference:\n\n<center>\n<img src=\"img/hl_revitlookup_03.jpg\" alt=\"Snooping Face object\" width=\"572\">\n</center>\n\nWhich more or less prevents any interaction with it, such as placing dimensions, alignments or face-based families.\n\nEnjoy!"
  }
]