[
  {
    "original_filename": "1781_whats_new_2020_1",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\n\ntwitter:\n\nWhat's New, installation, compilation and RvtSamples setup in the Revit 2020.1 #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/rvt_2020_1_api\n\nRevit 2020.1 was released and an updated Revit SDK has now been published for it\n&ndash; Additions to the Revit 2020.1 API\n&ndash; Systems analysis API additions\n&ndash; Mechanical analytical systems\n&ndash; Zone equipment\n&ndash; System zones\n&ndash; Systems analysis and analysis reports\n&ndash; Export to gbXML\n&ndash; View API additions\n&ndash; Temporary view mode API\n&ndash; Schedule API additions\n&ndash; Striped rows\n&ndash; Path of travel API additions\n&ndash; Reveal obstacles mode for path of travel\n&ndash; Options API additions\n&ndash; Color options\n&ndash; Rebar API additions\n&ndash; Rebar constraints\n&ndash; Installation and compilation\n&ndash; RvtSamples Setup...\n\nlinkedin:\n\nWhat's New, installation, compilation and RvtSamples setup in the Revit 2020.1 #RevitAPI\n\nhttp://bit.ly/rvt_2020_1_api\n\nRevit 2020.1 was released and an updated Revit SDK has now been published for it:\n\n- Additions to the Revit 2020.1 API\n  - Systems analysis API additions\n    - Mechanical analytical systems\n    - Zone equipment\n    - System zones\n    - Systems analysis and analysis reports\n    - Export to gbXML\n  - View API additions\n    - Temporary view mode API\n  - Schedule API additions\n    - Striped rows\n  - Path of travel API additions\n    - Reveal obstacles mode for path of travel\n  - Options API additions\n    - Color options\n  - Rebar API additions\n    - Rebar constraints\n- Installation and compilation\n- RvtSamples Setup...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<p style=\"font-size: 80%; font-style:italic\"></p>\n\n-->"
  },
  {
    "original_filename": "1781_whats_new_2020_1",
    "header_text": "What's New in the Revit 2020.1 API",
    "local_header_href": "#whats-new-in-the-revit-20201-api",
    "chunk_text": "### What's New in the Revit 2020.1 API\n\nRevit 2020.1 was released a month ago.\n\nHarlan Brumm provides an overview of the new features in his article\non [Whatâ€™s New in Revit 2020.1](https://blogs.autodesk.com/revit/2019/08/21/whats-new-in-revit-2020-1).\n\nAn updated Revit SDK for it has now been published in\nthe [Revit Developer Center](https://www.autodesk.com/developer-network/platform-technologies/revit).\n\nI just recently created\nthe [RevitSdkSamples GitHub repository for the Revit SDK samples](https://github.com/jeremytammik/RevitSdkSamples),\nto support the sample code text search\nin [Gui Talarico's apidocs.co online .NET API documentation](https://apidocs.co).\n\nThanks to that, you can accompany me step by step as I install and adapt the SDK update for my system.\n\nBefore getting to that, however, let's look at what's new in the Revit 2020.1 API:\n\n- [Major Additions to the Revit 2020.1 API](#2)\n    - [Systems Analysis API additions](#2.1)\n        - [Mechanical Analytical Systems](#2.1.1)\n        - [Zone Equipment](#2.1.2)\n        - [System Zones](#2.1.3)\n        - [Systems Analysis and Analysis Reports](#2.1.4)\n        - [Export to gbXML](#2.1.5)\n    - [View API additions](#2.2)\n        - [Temporary View Mode API](#2.2.1)\n    - [Schedule API additions](#2.3)\n        - [Striped rows](#2.3.1)\n    - [Path of Travel API additions](#2.4)\n        - [Reveal Obstacles Mode for Path of Travel](#2.4.1)\n    - [Options API additions](#2.5)\n        - [Color options](#2.5.1)\n    - [Rebar API additions](#2.6)\n        - [Rebar constraints](#2.6.1)\n- [Installation and Compilation](#3)\n- [RvtSamples Setup](#4)"
  },
  {
    "original_filename": "1781_whats_new_2020_1",
    "header_text": "Major Additions to the Revit 2020.1 API",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Major Additions to the Revit 2020.1 API\n\n#####<a name=\"2.1\"></a> Systems Analysis API additions\n\n######<a name=\"2.1.1\"></a> Mechanical Analytical Systems\n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.MEPAnalyticalSystem\n\nrepresents an HVAC analytical system element where the air or water is circulated to satisfy building energy requirements.\nIts AnalyticalSystemDomain property indicates whether the element represents a water loop or air system.  \n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.WaterLoopData\n\ncontains the data for a water loop system. It can be obtained from the MEPAnalyticalSystem.GetWaterLoopData() method. It offers the following properties:\n\n- WaterLoopData.WaterLoopType\n- WaterLoopData.ChillerType\n- WaterLoopData.CondenserWaterLoopId\n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.AirSystemData\n\ncontains the data for an air system. It can be obtained from the MEPAnalyticalSystem.GetAirSystemData() method. It offers the following properties:\n\n- AirSystemData.HeatExchangerType\n- AirSystemData.PreheatCoilType\n- AirSystemData.HeatingCoilType\n- AirSystemData.AirSystemCoolingCoilType\n- AirSystemData.AirFanType\n\n######<a name=\"2.1.2\"></a> Zone Equipment\n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.ZoneEquipment\n\nrepresents a zone equipment element used for Mechanical Systems Analysis. Zone equipment is an early-stage equipment placeholder that provides heating or cooling to part of the air system or water loop. One zone equipment element may be mapped to multiple pieces of physical equipment depending on the zoning behavior type.\n\nAnalytical spaces may be associated to one or more zone equipment elements. The method:\n\n- ZoneEquipment.MoveSpaceToEquipment() \n\nmoves a set of spaces from the original zone equipment to the targeted zone equipment. Either zone equipment id may be InvalidElementId. If the original is InvalidElementId, the association is copied to the target zone equipment. If the target is InvalidElementId, the original association is removed.  The method:\n\n- ZoneEquipment.GetAssociatedZoneEquipment() \n\nreturns the set of zone equipment that is associated with the specified analytical space or spaces. \n\nThe new class:\n\n- Autodesk.Revit.DB.Mechanical.ZoneEquipmentData \n\nrepresents the data associated with a zone equipment. It can be obtained from the ZoneEquipment.GetZoneEquipmentData() method. It offers the following properties:\n\n- ZoneEquipmentData.EquipmentType\n- ZoneEquipmentData.EquipmentBehavior\n- ZoneEquipmentData.HotWaterLoopId\n- ZoneEquipmentData.ChilledWaterLoopId\n- ZoneEquipmentData.AirSystemId\n\n######<a name=\"2.1.3\"></a> System Zones\n\nA system zone in Revit is used to specify what parts of a building are served by specific equipment, air systems and water loops, without having to physically model them.  In the Revit API, a system-zone is represented as a GenericZone element with a domain data of type SystemZoneData.\n\nThe new class:\n\n- Autodesk.Revit.DB.GenericZone\n\nprovides for a method of selecting elements that somehow come in contact with the zone object. A zone is a non-hierarchical structure of geometric information, area or volume definitions for the purpose of analysis.   A generic zone will contain specific domain requirements provided at creation of the element.  In Revit 2020.1, all GenericZones will represent system-zone elements used for MEP design.  Some relevant new members of GenericZones include:\n\n- GenericZone.Create(Document doc, String name, GenericZoneDomainData domainData, ElementId levelId, IList&lt;CurveLoop&gt; curves) &ndash; supports creation of a zone using the specified domain data, level and curves to represent the intersection/outline of the related spaces.\n- GenericZone.GetBoundaries() &ndash; Gets the boundaries for the given GenericZone.\n- GenericZone.GetDomainData() &ndash; Returns the domain data for the given GenericZone.\n\nFor system-zone elements, the domain data will be an instance of the new class:\n\n- Autodesk.Revit.DB.SystemZoneData\n\nThis data includes a reference to the zone equipment for the spaces in this system-zone:\n\n- SystemZoneData.ZoneEquipmentId\n\n######<a name=\"2.1.4\"></a> Systems Analysis and Analysis Reports\n\nThe new class:\n\n- Autodesk.Revit.DB.Analysis.ViewSystemsAnalysisReport\n\nrepresents a view instance of the systems analysis report. In a typical API workflow, to run a systems analysis against a Revit project, create (via ViewSystemsAnalysisReport.Create()) a new view instance and request (via ViewSystemsAnalysisReport.RequestSystemsAnalysis()) the systems analysis from that view. The analysis will run in the background, and when the analysis is completed, the related views are automatically updated. The method RequestSystemsAnalysis.IsAnalysisCompleted indicates if the background systems analysis has completed or not.\n\nIt is possible for a project to contain multiple systems analysis reports. The method:\n\n- ViewSystemsAnalysisReport.GetLatestSystemsAnalysisReport()\n\nreturns the latest report of systems analysis. The peak heating/cooling loads of all EnergyAnalysisSpace elements should be consistent with this latest report.\n\nThe new class:\n\n- Autodesk.Revit.DB.Analysis.SystemsAnalysisOptions\n\ncontains some properties (e.g., WeatherFile, WorkflowFile, and OutputFolder) that affect the systems analysis. It is okay to leave some parameters empty. In those cases, the analysis will take the default value from the ViewSystemsAnalysisReport element. The weather file affects the results of energy simulation. The systems analysis will use the weather file at the current site location if SystemsAnalysisOptions.WeatherFile is empty. \n\nThree new Application methods allow access to name and path information for systems analysis workflows:\n\n- Application.getSystemsAnalysisWorkflowNames() &ndash; Returns names for systems analysis workflows. The array that is returned contains the names of the systems analysis workflows, in the order they are specified in Options.\n- Application.getSystemsAnalysisWorkflows() &ndash; Returns name and path information identifying systems analysis workflow files. The map that is returned contains a key that is the name of the systems analysis workflow, and the value is the path to the workflow file.\n- Application.setSystemsAnalysisWorkflows() &ndash; Sets name and path information identifying systems analysis workflow files. The input map should be specified as a key that is the name of the systems analysis workflow, and a value that is the path to the workflow file.\n\n######<a name=\"2.1.5\"></a> Export to gbXML\n\nThe new property:\n\n- GBXMLExportOptions.ExportAnalyticalSystems \n\nshould be set to true to export the analytical system related items when exporting to gbXML. \n\n######<a name=\"2.2\"></a> View API additions\n\n######<a name=\"2.2.1\"></a> Temporary View Mode API\n\nThe Revit API now allows customization to create \"custom temporary view modes\" applied to a view as a temporary view property.\n\nFor this release, the \"Reveal Obstacles for Path of Travel\" temporary mode is implemented this way. It uses the Analysis Visualization Framework (AVF) to display additional graphics on top of the view contents.\n\nThe new properties:\n\n- TemporaryViewModes.CustomTitle\n- TemporaryViewModes.CustomColor\n- TemporaryViewModes.ResetCustomization()\n- TemporaryViewModes.IsCustomized()\n\nprovide access to read and modify a custom temporary view mode.  CustomTitle should be set to cause the view to display the customized frame. The application is responsible to adjust the appearance of elements in the view related to the mode.\n\n######<a name=\"2.3\"></a> Schedule API additions\n\n######<a name=\"2.3.1\"></a> Striped rows\n\nThe new property:\n\n- ViewSchedule.HasStripedRows\n\nprovides access to read or set if a given schedule is using a striped row display.\n\n######<a name=\"2.4\"></a> Path of Travel API additions\n\n######<a name=\"2.4.1\"></a> Reveal Obstacles Mode for Path of Travel\n\nThe Reveal Obstacles view mode highlights elements in the plan view when those elements will act as obstacles for the current Path of Travel calculation settings. The new methods:\n\n- PathOfTravel.IsInRevealObstaclesMode()\n\n- PathOfTravel.SetRevealObstaclesMode()\n\nprovide access to read or set if a view is displaying this mode.\n\n######<a name=\"2.5\"></a> Options API additions\n\n######<a name=\"2.5.1\"></a> Color options\n\nThe new class:\n\n- Autodesk.Revit.DB.ColorOptions\n\nprovides access to color settings which affect the colors applied to specific views. \n\nThe ColorOptions for the current session of Revit can be accessed via:\n\n- static  ColorOptions.GetColorOptions()\n\nIt has the following properties: \n\n- BackgroundColor &ndash; The background color applied to views. \n- SelectionColor &ndash; The color used to highlight selected elements. \n- SelectionSemitransparent &ndash; Indicates whether or not selections will be shown in a semi-transparent manner. \n- PreselectionColor &ndash; The color used to highlight candidates for selection before they are selected. \n- AlertColor &ndash; The color used to highlight elements when a special alert is required. \n- CalculatingColor &ndash; The color used to render elements when some aspect of their properties is currently being recalculated. \n- EditingColor &ndash; The color used to render elements when editing. \n\n######<a name=\"2.6\"></a> Rebar API additions\n\n######<a name=\"2.6.1\"></a> Rebar constraints\n\nSeveral new RebarConstraint methods allow control over distances and spacing:\n\n- RebarConstraint.GetDistanceToTargetRebar()\n- RebarConstraint.SetDistanceToTargetRebar() \n- RebarConstraint.IsBindingHandleWithTarget() \n- RebarConstraint.SetToBindHandleWithTarget() \n- RebarConstraint.IsUsingClearBarSpacing()\n- RebarConstraint.SetToUseClearBarSpacing() \n- RebarConstraint.FlipHandleOverTarget() \n\nTwo new methods have been added to RebarConstraintsManager:\n\n- RebarConstraintsManager.GetConstraintCandidatesForHandle(RebarConstrainedHandle, ElementId)\n- RebarConstraintsManager.GetConstraintCandidatesForHandle(RebarConstrainedHandle, Reference) \n\nthese methods return all possible RebarConstraints that could be used for a RebarConstrainedHandle related to the additional input. For free form rebar these will return an empty list."
  },
  {
    "original_filename": "1781_whats_new_2020_1",
    "header_text": "Installation and Compilation",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Installation and Compilation\n\nThe initial state after installing the SDK is captured\nin [RevitSdkSamples release 2020.1.0.0](https://github.com/jeremytammik/RevitSdkSamples/releases/tag/2020.1.0.0).\n\nNext, I opened `SDKSamples.sln` in Visual Studio and rebuilt all.\n\nThat generated [5 errors and 38 warnings](zip/revit_2020_1_sdk_samples_errors_warnings_1.txt),\nbecause some projects were lacking documentation comments on certain methods, generating a warning, triggering an error.\n\nTurning off the XML documentation file toggle for the RebarFreeForm and SampleCommandsSteelElements projects improved things and reduced the count\nto [1 error and 39 warnings](zip/revit_2020_1_sdk_samples_errors_warnings_1.txt).\n\nI set up the missing reference to *Massing/PointCurveCreation/CS/Microsoft.Office.Interop.Excel.dll*, reducing the error count to zero.\n\nMost of the remaining 37 warnings are caused by the architecture mismatch and can be fixed by one single call\nto [run `DisableMismatchWarning.exe` recursively](https://github.com/jeremytammik/DisableMismatchWarning) in\nthe main `Samples` folder.\n\nZero errors and five warnings remained.\n\nI turned off XML documentation file toggle for AppearanceAssetEditing project, reducing them\nto [zero errors and four warnings](zip/revit_2020_1_sdk_samples_errors_warnings_1.txt).\n\nThis state is captured\nin in [RevitSdkSamples release 2020.1.0.1](https://github.com/jeremytammik/RevitSdkSamples/releases/tag/2020.1.0.1)."
  },
  {
    "original_filename": "1781_whats_new_2020_1",
    "header_text": "RvtSamples Setup",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> RvtSamples Setup\n\nA more daunting task is setting up RvtSamples to load all the external commands implemented by the SDK samples.\n\nThis mainly involves editing `RvtSamples.txt` and setting correct paths to the sample DLLs.\n\nSome of the VB.NET samples place their DLLs in the `bin` directory, not in `bin/Debug`.\n\nFurthermore, the DatumsModification sample does not implement an external command named `Command`, as specified in the original version of RvtSamples.txt.\n\nInstead, it implements three, named DatumStyleModification, DatumAlignment and DatumPropagation.\n\nAfter [fixing those issues](zip/revit_2020_1_sdk_samples_errors_warnings_1.txt),\nall samples listed in RvtSamples.txt load successfully.\n\nThis state is captured\nin in [RevitSdkSamples release 2020.1.0.2](https://github.com/jeremytammik/RevitSdkSamples/releases/tag/2020.1.0.2).\n\nI hope this saves you some time setting things up yourself.\n\nFor other examples of setting up RvtSamples, please refer to similar descriptions for previous releases.\n\n<center>\n<img src=\"img/rvt_2020_1_systems_analysis-01-1024x977.png\" alt=\"Revit 2020.1 systems analysis\" width=\"512\">\n</center>"
  }
]