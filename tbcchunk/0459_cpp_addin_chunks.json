[
  {
    "original_filename": "0459_cpp_addin",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0459_cpp_addin",
    "header_text": "C++ Revit Add-In",
    "local_header_href": "#c-revit-add-in",
    "chunk_text": "<h3>C++ Revit Add-In</h3><p>To my great surprise, I recently discovered that I have never yet published anything at all on implementing a Revit add-in in C++.\n\n<p>That is way overdue, so here goes, a step by step description of setting up a C++ project to implement a Revit 2011 external command add-in.\n\n<p>It is very similar to setting up a C# or VB Revit add-in project, similar to the steps described for a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/debugging-a-rev.html\">\nC# or VB Revit add-in</a> for \n\nRevit 2009 way back in September 2008, and more up-to-date in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html\">\nRevit DevTV</a> recordings,\n\nexcept we specify C++ instead of C# or VB.\n\n<p>Another detailed step by step description for C# is provided in the Revit SDK developer guide \"Revit 2011 API Developer Guide.pdf\", in the Chapter 2.2 Walkthrough: Hello World.\n\n<p>So here we go doing the same for C++:\n\n<p><strong>1.</strong> In Visual Studio 2008, select File &gt; New &gt; Project... &gt; Visual C++ &gt; Class Library.\nDefine the project location and name, e.g. 'HelloRevitCpp' and click OK:</p>\n<center>\n<img alt=\"New C++ Visual Studio project\" src=\"img/cpp01.png\"/>\n</center>\n<p>This generates a number of files:</p>\n<center>\n<img alt=\"New C++ project files\" src=\"img/cpp02.png\"/>\n</center>\n<p><strong>2.</strong> Rename the class that we will to use to implement the external command to 'Command', as done in many of the Revit SDK samples. Here is the header file defining the command class implementation:</p>\n<pre class=\"code\">\n<span class=\"green\">// HelloRevitCpp.h</span>\n \n<span class=\"blue\">#pragma</span> <span class=\"blue\">once</span>\n \n<span class=\"blue\">using</span> <span class=\"blue\">namespace</span> System;\n \n<span class=\"blue\">namespace</span> HelloRevitCpp {\n \n  <span class=\"blue\">public</span> <span class=\"blue\">ref</span> <span class=\"blue\">class</span> Command\n  {\n    <span class=\"green\">// TODO: Add your methods for this class here.</span>\n  };\n}\n</pre>\n<p><strong>3.</strong> Add references to the Revit API assemblies via Solution Explorer &gt; HelloRevitCpp &gt; Properties &gt; Common Properties &gt; Framework and References:</p>\n<center>\n<img alt=\"Adding Revit API assembly references\" src=\"img/cpp03.png\"/>\n</center>\n<p>Don't forget to set the Copy Local flag to False, just like for C# and VB!\n\n<p><strong>4.</strong> I prefer not placing any 'using' statements whatsoever in my header files, so I removed the automatically generated 'using namespace System' from HelloRevitCpp.h.\n\n<p>In the header file, I use full namespace prefixes for all referenced objects.\n\n<p>I need to:\n\n<ul>\n<li>Derive the external command implementation from the Revit IExternalCommand interface.\n<li>Add the transaction mode and regeneration option.\n<li>Define the external command Execute method.\n<li>Specify the full namespace prefix for all objects.\n</li></li></li></li></ul>\n<p>The resulting header file ends up looking like this:\n\n<pre class=\"code\">\n<span class=\"green\">// HelloRevitCpp.h</span>\n \n<span class=\"blue\">#pragma</span> <span class=\"blue\">once</span>\n \n<span class=\"blue\">namespace</span> HelloRevitCpp {\n \n  [Autodesk::Revit::Attributes::Transaction(\n    Autodesk::Revit::Attributes::TransactionMode::Automatic)]\n \n  [Autodesk::Revit::Attributes::Regeneration(\n    Autodesk::Revit::Attributes::RegenerationOption::Manual)]\n \n  <span class=\"blue\">public</span> <span class=\"blue\">ref</span> <span class=\"blue\">class</span> Command \n    : Autodesk::Revit::UI::IExternalCommand\n  {\n  <span class=\"blue\">public</span>:\n    <span class=\"blue\">virtual</span> Autodesk::Revit::UI::Result Execute(\n      Autodesk::Revit::UI::ExternalCommandData^ commandData, \n      System::String^% message, \n      Autodesk::Revit::DB::ElementSet^ elements);\n  };\n}\n</pre>\n<p><strong>5.</strong> Implement the external command class.\n\n<p>I do this in the HelloRevitCpp.cpp module.\nHere I include all the using statements to avoid specifying the full namespace prefixes.\n\n<p>The resulting code for a minimal implementation doing absolutely nothing at all looks like this:\n\n<pre class=\"code\">\n<span class=\"green\">// HelloRevitCpp.cpp - this is the main DLL file.</span>\n \n<span class=\"blue\">#include</span> <span class=\"maroon\">\"stdafx.h\"</span>\n<span class=\"blue\">#include</span> <span class=\"maroon\">\"HelloRevitCpp.h\"</span>\n \n<span class=\"blue\">using</span> <span class=\"blue\">namespace</span> System;\n<span class=\"blue\">using</span> <span class=\"blue\">namespace</span> Autodesk::Revit::ApplicationServices;\n<span class=\"blue\">using</span> <span class=\"blue\">namespace</span> Autodesk::Revit::Attributes;\n<span class=\"blue\">using</span> <span class=\"blue\">namespace</span> Autodesk::Revit::DB;\n<span class=\"blue\">using</span> <span class=\"blue\">namespace</span> Autodesk::Revit::UI;\n \n<span class=\"blue\">using</span> <span class=\"blue\">namespace</span> HelloRevitCpp;\n \nResult Command::Execute(\n  ExternalCommandData^ commandData, \n  String^% message, \n  ElementSet^ elements )\n{\n  <span class=\"blue\">return</span> Autodesk::Revit::UI::Result::Succeeded;\n}\n</pre>\n<p><strong>6.</strong> To load this into Revit and test it, I need to create an \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html\">\nadd-in manifest</a>. \n\nHere is an \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/network-access-to-add-in-manifest-and-icons.html\">\noverview of various add-in manifest topics</a>.\n\n<p>The add-in manifest for my C++ application (with the full path abbreviated) looks like this:\n\n<pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\"> </span><span class=\"red\">encoding</span><span class=\"blue\">=</span>\"<span class=\"blue\">utf-8</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">RevitAddIns</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">AddIn</span><span class=\"blue\"> </span><span class=\"red\">Type</span><span class=\"blue\">=</span>\"<span class=\"blue\">Command</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Text</span><span class=\"blue\">&gt;</span>Hello Revit C++<span class=\"blue\">&lt;/</span><span class=\"maroon\">Text</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Description</span><span class=\"blue\">&gt;</span>My first C++ Revit add-in<span class=\"blue\">&lt;/</span><span class=\"maroon\">Description</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Assembly</span><span class=\"blue\">&gt;</span>C:\\...\\HelloRevitCpp.dll<span class=\"blue\">&lt;/</span><span class=\"maroon\">Assembly</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">FullClassName</span><span class=\"blue\">&gt;</span>HelloRevitCpp.Command<span class=\"blue\">&lt;/</span><span class=\"maroon\">FullClassName</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">ClientId</span><span class=\"blue\">&gt;</span>be7f62ce-d5d0-4b3b-9298-327c2c6d22f4<span class=\"blue\">&lt;/</span><span class=\"maroon\">ClientId</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">AddIn</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">RevitAddIns</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>I need to copy it to the appropriate location for Revit to pick it up, in my case \n\n<p>C:\\Documents and Settings\\All Users\\Application Data\\Autodesk\\REVIT\\Addins\\2011\n\n<pre>\nC:\\a\\doc\\revit\\blog\\ &gt; copy \n  C:\\a\\j\\adn\\case\\bsd\\1263568\\src\\HelloRevitCpp\\HelloRevitCpp\\HelloRevitCpp.addin \n  \"C:\\Documents and Settings\\All Users\\Application Data\\Autodesk\\REVIT\\Addins\\2011\"\n    1 file(s) copied.\n</pre>\n<p><strong>7.</strong> I set up Revit.exe as the debugging application:</p>\n<center>\n<img alt=\"Set up debugging options\" src=\"img/cpp04.png\"/>\n</center>\n<p>Now I can simply hit F5 in Visual Studio to start debugging, which launches Revit.\n\n<p>In Revit, I can launch my external command from Add-Ins &gt; External Tools &gt; Hello Revit C++:</p>\n<center>\n<img alt=\"Launching the external command\" src=\"img/cpp05.png\"/>\n</center>\n<p>Before actually launching the command, I set up a breakpoint in the Visual Studio debugger on the return statement of the Execute command.\n\n<p>When the command is launched, the breakpoint is hit and I can examine the contents of the command data argument passed in to my command:</p>\n<center>\n<img alt=\"Examining the command data argument in the debugger\" src=\"img/cpp06.png\"/>\n</center>\n<p>That's it for now. Easy-peasy. Hope this helps.\n\n<p>Here is \n\n<a href=\"zip/HelloRevitCpp.zip\">\nHelloRevitCpp.zip</a> containing the complete source code, Visual Studio solution, and add-in manifest file.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]