[
  {
    "original_filename": "0600_instance_void_cut",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0600_instance_void_cut",
    "header_text": "Boolean Operations and InstanceVoidCutUtils",
    "local_header_href": "#boolean-operations-and-instancevoidcututils",
    "chunk_text": "<h3>Boolean Operations and InstanceVoidCutUtils</h3><p>I mentioned last week that I plan to take a look at Boolean operation in the family creation context.\nBefore we do so, however, here is an overview of some of the Boolean operation functionality provided by the Revit API and the use of one of the approaches in the project context.\n\n<p>In the past, the Revit API did not offer many possibilities to perform Boolean operations in the project itself.\n\n<p>The standard approach to perform a Boolean operation within a family is to use the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/beam-maker-using-a-void-extrusion-to-cut.html\">\nDocument.CombineElements</a> method. \n\nIts use is limited to certain element types.\n\n<p>Another possibility to perform Boolean operation within the family context was provided by the SolidSolidCutUtils class introduced in the Revit 2011 API.\nIt use is demonstrated by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/devcamp-session-on-whats-new.html\">\nSolidSolidCut SDK sample</a>, \n\nwhich is hardcoded to run in the SolidSolidCut.rfa family sample file.\nAs noted in its readme file, this solid-solid cut operation only works when editing a conceptual mass family.\n\n<p>If you needed a large number of similar but different elements in a project, the solution of choice in Revit  2011 seemed to be to create individual families for each such instance and insert each one into the project, but that places a heavy burden on the project.\n\n<p>The Revit 2012 API introduces two new possibilities for performing Boolean operations, provided by the BooleanOperationsUtils and the InstanceVoidCutUtils classes. \nIt also generalises the SolidSolidCutUtils class so that it can be used in the project context as well as in a family.\n\n<p>First of all, here and now, let's take a look at how to use the new InstanceVoidCutUtils functionality:\n\n<p><strong>Question:</strong> Is there any documentation for InstanceVoidCutUtils available? \nExamples?\n\n<p><strong>Answer:</strong> Just like all other classes, methods and properties provided by the Revit SDK, the Revit API help file RevitAPI.chm provides basic documentation on the InstanceVoidCutUtils class and its properties and methods. \nAs it says there, this class provides utility methods for cutting elements by unattached voids in family instances.\n\n<p>As mentioned above, the Revit API now provides several possibilities to perform Boolean operations in the project model:\n\n<ul>\n<li>BooleanOperationsUtils: this class creates non-element geometry. \nThe generated geometry can be displayed to the user using the AnalysisVisualizationFramework to paint colours on the surfaces created, but it cannot create elements or participate in the saved model in any way.\nThe SDK sample GeometryCreation_BooleanOperation in the GeometryAPI subdirectory of the Samples folder demonstrates its use and implements a handy wrapper class for it.\n\n<li>InstanceVoidCutUtils: added in the Revit 2012 API. This a powerful method to cut a database element using an unattached void in a family instance. \nIt should be used sparingly, as any void element introduced at the project level will be fully selectable by the user (and modifiable/deletable/etc.). \nSo it's not really appropriate to use this to cut the ends of beams with square blocks, because the blocks can be picked.  \nIt may be more useful for fine tuned work like drilling individual holes in members, if the holes cannot be included as a part of the family definition in the first place.\n\n<li>SolidSolidCutUtils: this class was not documented correctly. It does work in the project environment now in Revit 2012, both in the UI and API.  There are limitations about what elements are supported by this utility, and some exploration may be needed.\n</li></li></li></ul>\n<p>Now, to answer your question on making use of the InstanceVoidCutUtils class: as in most cases with the Revit API, the first step in to determine how it is done manually.\n\n<p>First of all, you need to create a family to encapsulate the unattached voids you want to use for cutting. \nA good place to start is to study the \n\n<a href=\"http://usa.autodesk.com/adsk/servlet/item?siteID=123112&amp;id=13376394\">\nFamilies Guide</a>  (still the Revit 2010 version):\n\n<p>In there, you can for instance look at the section Loadable Families Overview &gt; Creating Loadable Families &gt; Creating a Loadable Family &gt; Creating Family Geometry &gt; Creating Solid (3D) Geometry &gt; Cut Geometry.\n\n<p>Once the manual steps are known, one can explore how to reproduce them programmatically.\n\n<p>Here is a sample void cutter family \n\n<a href=\"zip/cutter.zip\">\ncutter.zip</a>. \n\nTo use it, you perform steps along the lines of the following pseudo-code:\n\n<pre class=\"code\">\n  <span class=\"teal\">Element</span> element;\n  <span class=\"teal\">FamilySymbol</span> fs;\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"teal\">PlanarFace</span> planarFace = facesToAttach[i] \n    <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"teal\">XYZ</span> xyzOrigin = planarFace.Origin;\n \n  <span class=\"teal\">FamilyInstance</span> cuttingInstance \n    = _doc.Create.NewFamilyInstance(\n      facesToAttach[i], xyzOrigin, vecY, fs );\n \n  <span class=\"teal\">Parameter</span> parAngle3 = cuttingInstance\n    .get_Parameter( <span class=\"maroon\">\"A3\"</span> );\n \n  Utils.ParameterSet( parAngle3, angles[i] );\n \n  <span class=\"teal\">InstanceVoidCutUtils</span>.AddInstanceVoidCut(\n    _doc, element, cuttingInstance );\n</pre>\n<p>As mentioned above, this approach should not be used for applying a modification systematically to a huge number of family instances, but used sparingly it works fine.\n\n<p>Here is a similar snippet of sample pseudo-code for used to create a recess in a wall:\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilySymbol</span> polyRecessFamily;\n  <span class=\"teal\">Wall</span> wall;\n \n  <span class=\"green\">// . . .</span>\n \n  <span class=\"teal\">FamilyInstance</span> recessElement \n    = _doc.Create.NewFamilyInstance( \n      face, pos, <span class=\"teal\">XYZ</span>.Zero, polyRecessFamily );\n \n  recessElement.SetParameter( <span class=\"maroon\">\"Countersinking\"</span>, \n    UnitConversion.ToFeet( recess.CounterSinking ) );\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">InstanceVoidCutUtils</span>.CanBeCutWithVoid( wall ) )\n  {\n    <span class=\"teal\">InstanceVoidCutUtils</span>.AddInstanceVoidCut( \n      _doc, wall, recessElement );\n  }\n</pre>\n<p>You need to ensure that the void cutter family has the 'Cut with Void When Loaded' parameter checked:</p>\n<center>\n<img alt=\"Cut with void property\" src=\"img/cut_with_void.jpg\"/>\n</center>\n<p>If this is not the case, the void is not an \"Unattached\" void, and it will throw an exception saying \n\n<p>\"The element is not a family instance with an unattached void that can cut.\nParameter name: cuttingInstance\".\n\n<p>I trust this will help understand the options available and help you get started using the InstanceVoidCutUtils.\n\n<p>Next one coming up: use of the Document.CombineElements method to create the window frame joinery using extruded profiles in a programmatically generated window family.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]