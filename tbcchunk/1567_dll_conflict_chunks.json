[
  {
    "original_filename": "1567_dll_conflict",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n12914853 [several versions of a control inside same APPDomain using XAML/BAML craches REVIT]\n12494378 [Addins have conflicts with DLL's from other developers]\n11655345 [Addin conflicts]\nhttp://forums.autodesk.com/t5/revit-api/proper-way-to-handle-app-config-bindingredirects-in-revit-add-in/m-p/5692149\nhttp://forums.autodesk.com/t5/revit-api/loading-different-versions-of-same-third-party-library/m-p/6023644\n\nhttp://adndevblog.typepad.com/aec/2012/06/loading-multiple-versions-of-the-same-dll-used-in-revit-plug-ins.html\n\nOther option but a lot of changes required\n\nManaged Extensibility Framework (MEF) -- https://blogs.msdn.microsoft.com/kcwalina/2008/04/25/managed-extensibility-framework/\nA Plug-In System Using Reflection, AppDomain and ISponsor -- http://www.brad-smith.info/blog/archives/500\n\nLoading multiple versions of the same DLL used in Revit plug-ins -- http://adndevblog.typepad.com/aec/2012/06/loading-multiple-versions-of-the-same-dll-used-in-revit-plug-ins.html#comment-6a0167607c2431970b0167676439d4970b\n\nMaxence DELANNOY said: You can also use ILMerge to merge all you dll in a single assembly.\n\nILMerge -- https://www.microsoft.com/en-us/download/details.aspx?id=17630\n\nILMerge is a utility for merging multiple .NET assemblies into a single .NET assembly.\n\nMerging .NET assemblies using ILMerge -- https://www.codeproject.com/articles/9364/merging-net-assemblies-using-ilmerge\n\n13034010 [General API Questions]\n\nHandling add-in third party library DLL hell #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/dllconflict \n\nA recurring question just came up again, on handling conflicts between DLLs loaded by Revit add-ins. For instance, this can be caused by a scenario in which add-ins A and B both make use of library DLL C, but specify different versions. A soon as the first add-in has loaded its version of C, the second add-in is prevented from loading the version it requires and cannot run...\n\n-->"
  },
  {
    "original_filename": "1567_dll_conflict",
    "header_text": "Handling Third Party Library DLL Conflicts",
    "local_header_href": "#handling-third-party-library-dll-conflicts",
    "chunk_text": "### Handling Third Party Library DLL Conflicts\n\nA recurring question just came up again, on handling conflicts between DLLs loaded by Revit add-ins.\n\nFor instance, this can be caused by a scenario in which add-ins A and B both make use of library DLL C, but specify different versions. A soon as the first add-in has loaded its version of C, the second add-in is prevented from loading the version it requires and cannot run.\n\nI have no official solution to suggest for this, just these discussion threads and articles suggesting various workarounds:\n\n- [Proper way to handle App.config bindingRedirects in Revit add-in](http://forums.autodesk.com/t5/revit-api/proper-way-to-handle-app-config-bindingredirects-in-revit-add-in/m-p/5692149)\n- [Loading different versions of same third party library](http://forums.autodesk.com/t5/revit-api/loading-different-versions-of-same-third-party-library/m-p/6023644)\n- [Loading multiple versions of the same DLL used in Revit plug-ins](http://adndevblog.typepad.com/aec/2012/06/loading-multiple-versions-of-the-same-dll-used-in-revit-plug-ins.html)\n- The [Managed Extensibility Framework MEF](https://blogs.msdn.microsoft.com/kcwalina/2008/04/25/managed-extensibility-framework) offers an option but requires a lot of changes.\n- [A Plug-In System Using Reflection, AppDomain and ISponsor](http://www.brad-smith.info/blog/archives/500)\n- You can also use [ILMerge](https://www.microsoft.com/en-us/download/details.aspx?id=17630) to merge all of your DLLs into one single .NET assembly, cf. the CodeProject article on [Merging .NET assemblies using ILMerge](https://www.codeproject.com/articles/9364/merging-net-assemblies-using-ilmerge)\n\n<center>\n<img src=\"img/darvasa_gas_crater_panorama.jpg\" alt=\"DLL hell?\" width=\"300\"> \n</center>"
  },
  {
    "original_filename": "1567_dll_conflict",
    "header_text": "Addendum &ndash; Updated ILMerge Link",
    "local_header_href": "#addendum-ndash-updated-ilmerge-link",
    "chunk_text": "#### Addendum &ndash; Updated ILMerge Link\n\nAs noted by Micah Gray in\nhis [comment below](https://thebuildingcoder.typepad.com/blog/2017/06/handling-third-party-library-dll-conflicts.html#comment-4983002843):\n\n> The ILMerge link above no longer works.\nIt appears to have moved over to\nthe [GitHub ILMerge repository](https://github.com/dotnet/ILMerge)."
  }
]