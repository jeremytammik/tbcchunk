[
  {
    "original_filename": "0828_export_param_excel",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0828_export_param_excel",
    "header_text": "Exporting Parameter Data to Excel",
    "local_header_href": "#exporting-parameter-data-to-excel",
    "chunk_text": "<h3>Exporting Parameter Data to Excel</h3><p>Did you observe the international \n\n<a href=\"http://en.wikipedia.org/wiki/International_Talk_Like_a_Pirate_Day\">\ntalk like a pirate</a> holiday \n\nyesterday?\n\n<p>I did not, I'm sorry to say. \nI only became aware of it this morning trying to find some reason why it was so quiet yesterday. \nAaarrr!\n\n<p>Anyway, here is an update of an age-old sample application, originally created by Miroslav Schonauer for the very first Revit API training classes after the first introduction of the Revit API back in the Revit 2008 timeframe.\n\n<p>Miro put together a whole collection of useful samples, which survived time and changes extraordinarily well and made it through to become the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/xtra-adn-revit-2013-api-training-labs.html\">\nXtra Revit API training labs</a>.\n\n<p>I received several queries lately on how to export data to Excel, with various follow-up options such as later including data from linked files as well, and enabling a re-import of modified data.\n\n\n<a name=\"2\"></a>\n<h4>The FireRating SDK Sample</h4>\n<p>Actually, talking about re-importing the exported data, a simple example of this has been around all along as well.\nThe FireRating SDK sample demonstrates:\n\n<ul>\n<li>Creating and populating a new shared parameter in the model.\n<li>Exporting all its values to Excel.\n<li>Importing modified data back in from Excel to update the Revit model.\n</li></li></li></ul>\n<p>I mentioned this important sample a number of times, ever since the early beginnings of the blog, often to demonstrate how to add a shared parameter to various element types in the model:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/adding-a-shared-parameter-to-a-dwg-file.html\">Adding a shared parameter to a DWG file</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/defining-a-new-parameter.html\">Defining a new parameter</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/adding-a-shared-parameter-to-an-rfa-file.html\">Adding a shared parameter to an RFA file</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/model-group-shared-parameter.html\">Model group shared parameter</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/parameter-access-and-scheduling.html\">Parameter access and scheduling</a>.\n</li></li></li></li></li></ul>\n<p>One very special use of this sample was in the special 100<sup>th</sup> anniversary description of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/utilizing-revit-api-resources.html\">\nutilizing Revit API resources</a> to\n\nget a beginner up to speed and running.\n\n<p>Because of its importance, this sample also made its way into the Revit API Xtra training labs in the shape of three commands corresponding to the steps listed above: \n\n<ul>\n<li>Lab4_3_1_CreateAndBindSharedParam\n<li>Lab4_3_2_ExportSharedParamToExcel\n<li>Lab4_3_3_ImportSharedParamFromExcel\n</li></li></li></ul>\n<!--\n036_dwg_shared_param.htm:<p>First of all, if you are interested i\n036_dwg_shared_param.htm:The FireRating sample attaches a shared\n043_new_param.htm:Those posts also mentions the Revit SDK FireRat\n100_utilizing_resources.htm:<p>Our real-time Revit project consis\n100_utilizing_resources.htm:Structural_ID Module 1: Apply Paramet\n100_utilizing_resources.htm:Structural_ID Module 2: Export Parame\n100_utilizing_resources.htm:<p><strong>8.</strong> Structural_ID\n147_shared_param_rfa.htm:This is demonstrated by the Revit FireRa\n147_shared_param_rfa_wrong.htm:This is demonstrated by the Revit\n158_model_group_shared_param.htm:    fireRatingParamDef, binding\n158_model_group_shared_param.htm:<li>We start with the standard S\n372_param_scheduling.htm:Examples are provided by several Revit S\n567_extensible_storage.htm:<p><strong>Answer:</strong> One possib\n-->\n<p>Of course, the importance of shared parameters for add-in was greatly diminished by the introduction of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a>.\n\n\n<a name=\"3\"></a>\n<h4>Parameter Export to Excel Considerations</h4>\n<p>Anyway, back to the subject at hand.\n\n<p>The external command Lab4_2_ExportParametersToExcel in the ADN Xtra labs implements exporting all parameter data of all Revit elements to Excel.\n'All' is relative, though...\n\n<p>It bases the selection of parameters on the standard Revit API Element.Parameters property.\nAn attempt is made to export the values of the parameters returned in this collection, and others are ignored.\nMany elements do have other parameters associated with them as well, as demonstrated by\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/unofficial-parameters-and-bipchecker.html\">\nBipChecker, the built-in parameter explorer</a>.\n\nThey could easily be added to the export as well, of course.\n\n<p>Furthermore, there are of course a multitude of other important data items not stored in parameters that might be interesting to export and potentially modify and re-import as well.\nIt might be worthwhile checking whether \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/adding-a-column-to-rdblink-export.html\">\nRDBLink</a> does \n\nanything like that...\nRDBLink was originally part of the Revit 2008, 2009 and 2010 SDKs, then matured into a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/subscription-packs.html\">\nsubscription pack product</a>.\n\n<p>The choice of Excel as an export target is not mine, nor would it normally be so.\nDue to popular demand, though, this command makes use of the Excel COM interface and .NET Interop to access that.\nIt launches or attaches to a running instance of Excel and makes it visible, so you can see the work sheets and parameters being added one by one.\nIt might be faster to make Excel invisible, and faster still to use some other library to generate the XLS file without direct access to Excel, and faster still choosing some completely different file format such as SLK, CSV, or, heaven forbid, TXT.\n\n<p>The command selects all elements in the entire model, both types (e.g. family symbols) and non-type elements.\nEach element is identified in the export by its element id, and a flag is added to tell whether it is a type or not.\n\n<p>The original implementation exported only model elements.\nSupport for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\">\nall elements</a> was \n\nimplemented by creating a union of two complementary filtered element collectors, which is easily possible and normally \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\">\nnot recommended</a>.\n\n<p>The elements are sorted by category, and elements with no valid category are ignored.\nThe elements are sorted into a dictionary of separate containers for each category.\n\n<p>The category names are used to create individual work sheets in a new Excel work book.\n\n<p>The category names need some massaging to confirm with the Excel work sheet naming conventions; the name must:\n\n<ul>\n<li>Not be blank.\n<li>Not exceed 31 characters.\n<li>Not contain any of the following characters:   :   \\   /   ?   *   [   or   ].\n</li></li></li></ul>\n<p>In the original implementation, the entire parameter access was encapsulated in a try-catch exception handler.\nMany elements returned null, though, triggering and exception and slowing down the process enormously.\nEvery exception handler is resource intensive and will significantly slow down execution and consume resources.\nAn exception handler should be designed to handle unexpected, exceptional cases only;\n<a href=\"http://www.jacopretorius.net/2009/10/exceptions-should-be-exceptional.html\">exceptions should be exceptional</a>.\nAdding a preceding check for a null parameter before actually trying to access it speeded things up significantly.\nMaybe the exception handler can be removed completely?\n\n<p>As said, the elements are identified in the resulting Excel data by their element id.\nThis is not a very safe method of identifying elements, because the element id may change, e.g. by work sharing operations.\nIt would be safer to use the UniqueId instead.\n\n<p>When the new work book is set up, Excel automatically adds a couple of work sheets to it. \nThe number of default work sheets added can be defined in the Excel application settings. \nI initially implemented code to remove the unneeded work sheets, but later commented it out to simply let them be.\nThey don't really hurt.\n\n<p>For each category, all the elements are examined to determine what parameters they contain.\nA column is added to the work sheet for each parameter, and a header is set up listing the parameter name.\nWe iterate over the elements in that category and add a row listing their element id, type flag, and parameter values for each.\n\n\n<a name=\"4\"></a>\n<h4>Parameter Export to Excel Implementation</h4>\n<p>Let's summarise the steps:\n\n<ul>\n<li>Collect all elements and sort them by category.\n<li>Attach to or launch Excel and create a new work book.\n<li>Loop through all the categories and set up a work sheet for each.\n<li>Determine all parameters for the given category and create the work sheet header listing them.\n<li>Iterate over each elements of the category and export its element id, type flag and parameter values.\n<li>Report the results.\n</li></li></li></li></li></li></ul>\n<p>Here is the code implementing this as a read-only external command:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Export all parameters for each model </span>\n<span class=\"gray\">///</span><span class=\"green\"> element to Excel, one sheet per category.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Lab4_2_ExportParametersToExcel</span> \n  : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"green\">// Extract and group the data from Revit in a </span>\n    <span class=\"green\">// dictionary, where the key is the category </span>\n    <span class=\"green\">// name and the value is a list of elements.</span>\n \n    <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt; sortedElements \n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt;();\n \n    <span class=\"green\">// Iterate over all elements, both symbols and </span>\n    <span class=\"green\">// model elements, and them in the dictionary.</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementIsElementTypeFilter</span>( <span class=\"blue\">false</span> ), \n      <span class=\"blue\">new</span> <span class=\"teal\">ElementIsElementTypeFilter</span>( <span class=\"blue\">true</span> ) );\n \n    <span class=\"teal\">FilteredElementCollector</span> collector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WherePasses( f );\n \n    <span class=\"blue\">string</span> name;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n    {\n      <span class=\"teal\">Category</span> category = e.Category;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != category )\n      {\n        name = category.Name;\n \n        <span class=\"green\">// If this category was not yet encountered,</span>\n        <span class=\"green\">// add it and create a new container for its</span>\n        <span class=\"green\">// elements.</span>\n \n        <span class=\"blue\">if</span>( !sortedElements.ContainsKey( name ) )\n        {\n          sortedElements.Add( name, \n            <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;() );\n        }\n        sortedElements[name].Add( e );\n      }\n    }\n \n    <span class=\"green\">// Launch or access Excel via COM Interop:</span>\n \n    X.<span class=\"teal\">Application</span> excel = <span class=\"blue\">new</span> X.<span class=\"teal\">Application</span>();\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == excel )\n    {\n      <span class=\"teal\">LabUtils</span>.ErrorMsg( \n        <span class=\"maroon\">\"Failed to get or start Excel.\"</span> );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    excel.Visible = <span class=\"blue\">true</span>;\n \n    X.<span class=\"teal\">Workbook</span> workbook = excel.Workbooks.Add( \n      <span class=\"teal\">Missing</span>.Value );\n \n    X.<span class=\"teal\">Worksheet</span> worksheet;\n \n    <span class=\"green\">// We cannot delete all work sheets, </span>\n    <span class=\"green\">// Excel requires at least one.</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">//while( 1 &lt; workbook.Sheets.Count ) </span>\n    <span class=\"green\">//{</span>\n    <span class=\"green\">//  worksheet = workbook.Sheets.get_Item(1) as X.Worksheet;</span>\n    <span class=\"green\">//  worksheet.Delete();</span>\n    <span class=\"green\">//}</span>\n \n    <span class=\"green\">// Loop through all collected categories and </span>\n    <span class=\"green\">// create a worksheet for each except the first.</span>\n    <span class=\"green\">// We sort the categories and work trough them </span>\n    <span class=\"green\">// from the end, since the worksheet added last </span>\n    <span class=\"green\">// shows up first in the Excel tab.</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;( \n      sortedElements.Keys );\n \n    keys.Sort();\n    keys.Reverse();\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">int</span> nElements = 0;\n    <span class=\"blue\">int</span> nCategories = keys.Count;\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> categoryName <span class=\"blue\">in</span> keys )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elementSet \n        = sortedElements[categoryName];\n \n      <span class=\"green\">// Create and name the worksheet</span>\n \n      <span class=\"blue\">if</span>( first )\n      {\n        worksheet = workbook.Sheets.get_Item( 1 ) \n          <span class=\"blue\">as</span> X.<span class=\"teal\">Worksheet</span>;\n \n        first = <span class=\"blue\">false</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        worksheet = excel.Worksheets.Add( \n          <span class=\"teal\">Missing</span>.Value, <span class=\"teal\">Missing</span>.Value, \n          <span class=\"teal\">Missing</span>.Value, <span class=\"teal\">Missing</span>.Value ) \n          <span class=\"blue\">as</span> X.<span class=\"teal\">Worksheet</span>;\n      }\n \n      name = ( 31 &lt; categoryName.Length )\n        ? categoryName.Substring( 0, 31 )\n        : categoryName;\n \n      name = name\n        .Replace( <span class=\"maroon\">':'</span>, <span class=\"maroon\">'_'</span> )\n        .Replace( <span class=\"maroon\">'/'</span>, <span class=\"maroon\">'_'</span> );\n \n      worksheet.Name = name;\n \n      <span class=\"green\">// Determine the names of all parameters </span>\n      <span class=\"green\">// defined for the elements in this set.</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; paramNames = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elementSet )\n      {\n        <span class=\"teal\">ParameterSet</span> parameters = e.Parameters;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> parameters )\n        {\n          name = parameter.Definition.Name;\n \n          <span class=\"blue\">if</span>( !paramNames.Contains( name ) )\n          {\n            paramNames.Add( name );\n          }\n        }\n      }\n      paramNames.Sort();\n \n      <span class=\"green\">// Add the header row in bold.</span>\n \n      worksheet.Cells[1, 1] = <span class=\"maroon\">\"ID\"</span>;\n      worksheet.Cells[1, 2] = <span class=\"maroon\">\"IsType\"</span>;\n \n      <span class=\"blue\">int</span> column = 3;\n \n      <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> paramName <span class=\"blue\">in</span> paramNames )\n      {\n        worksheet.Cells[1, column] = paramName;\n        ++column;\n      }\n      <span class=\"blue\">var</span> range = worksheet.get_Range( <span class=\"maroon\">\"A1\"</span>, <span class=\"maroon\">\"Z1\"</span> );\n \n      range.Font.Bold = <span class=\"blue\">true</span>;\n      range.EntireColumn.AutoFit();\n \n      <span class=\"blue\">int</span> row = 2;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elementSet )\n      {\n        <span class=\"green\">// First column is the element id,</span>\n        <span class=\"green\">// second a flag indicating type (symbol)</span>\n        <span class=\"green\">// or not, both displayed as an integer.</span>\n \n        worksheet.Cells[row, 1] = e.Id.IntegerValue;\n \n        worksheet.Cells[row, 2] = (e <span class=\"blue\">is</span> <span class=\"teal\">ElementType</span>) \n          ? 1 \n          : 0;\n \n        column = 3;\n \n        <span class=\"blue\">string</span> paramValue;\n \n        <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> paramName <span class=\"blue\">in</span> paramNames )\n        {\n          paramValue = <span class=\"maroon\">\"*NA*\"</span>;\n \n          <span class=\"teal\">Parameter</span> p = e.get_Parameter( paramName );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n          {\n            <span class=\"green\">//try</span>\n            <span class=\"green\">//{</span>\n              paramValue \n                = <span class=\"teal\">LabUtils</span>.GetParameterValue( p );\n            <span class=\"green\">//}</span>\n            <span class=\"green\">//catch( Exception ex )</span>\n            <span class=\"green\">//{</span>\n            <span class=\"green\">//  Debug.Print( ex.Message );</span>\n            <span class=\"green\">//}</span>\n          }\n \n          worksheet.Cells[row, column++] \n            = paramValue;\n        } <span class=\"green\">// column</span>\n \n        ++nElements;\n        ++row;\n \n      } <span class=\"green\">// row</span>\n \n    } <span class=\"green\">// category == worksheet</span>\n \n \n    sw.Stop();\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Parameter Export\"</span>,\n      <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"{0} categories and a total \"</span>\n        + <span class=\"maroon\">\"of {1} elements exported \"</span>\n        + <span class=\"maroon\">\"in {2:F2} seconds.\"</span>,\n        nCategories, nElements,\n        sw.Elapsed.TotalSeconds ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>I ran the command on the basic architectural sample model rac_basic_sample_project.rvt.\nIt takes about two minutes to complete, produces this\n\n<a href=\"zip/rac_basic_sample_project.xlsx\">XLS file output</a> containing \n\n124 work sheets, and displays the following message on terminating:</p>\n<center>\n<img alt=\"Export parameter values to Excel\" src=\"img/export_param_excel.png\"/>\n</center>\n<p>The timing is not very relevant, since I was doing other things at the same time on the machine.\n\n<p>Here is\n\n<a href=\"zip/adn_labs_2013_2012-09-19.zip\">adn_labs_2013_2012-09-19.zip</a> containing\n\nthe complete source code, Visual Studio solution and RvtSamples include file of the ADN training labs with the updated Lab4_2_ExportParametersToExcel external command.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0828_export_param_excel",
    "header_text": "The FireRating SDK Sample",
    "local_header_href": "#the-firerating-sdk-sample",
    "chunk_text": "<h4>The FireRating SDK Sample</h4><p>Actually, talking about re-importing the exported data, a simple example of this has been around all along as well.\nThe FireRating SDK sample demonstrates:\n\n<ul>\n<li>Creating and populating a new shared parameter in the model.\n<li>Exporting all its values to Excel.\n<li>Importing modified data back in from Excel to update the Revit model.\n</li></li></li></ul>\n<p>I mentioned this important sample a number of times, ever since the early beginnings of the blog, often to demonstrate how to add a shared parameter to various element types in the model:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/adding-a-shared-parameter-to-a-dwg-file.html\">Adding a shared parameter to a DWG file</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/defining-a-new-parameter.html\">Defining a new parameter</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/adding-a-shared-parameter-to-an-rfa-file.html\">Adding a shared parameter to an RFA file</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/model-group-shared-parameter.html\">Model group shared parameter</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/parameter-access-and-scheduling.html\">Parameter access and scheduling</a>.\n</li></li></li></li></li></ul>\n<p>One very special use of this sample was in the special 100<sup>th</sup> anniversary description of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/utilizing-revit-api-resources.html\">\nutilizing Revit API resources</a> to\n\nget a beginner up to speed and running.\n\n<p>Because of its importance, this sample also made its way into the Revit API Xtra training labs in the shape of three commands corresponding to the steps listed above: \n\n<ul>\n<li>Lab4_3_1_CreateAndBindSharedParam\n<li>Lab4_3_2_ExportSharedParamToExcel\n<li>Lab4_3_3_ImportSharedParamFromExcel\n</li></li></li></ul>\n<!--\n036_dwg_shared_param.htm:<p>First of all, if you are interested i\n036_dwg_shared_param.htm:The FireRating sample attaches a shared\n043_new_param.htm:Those posts also mentions the Revit SDK FireRat\n100_utilizing_resources.htm:<p>Our real-time Revit project consis\n100_utilizing_resources.htm:Structural_ID Module 1: Apply Paramet\n100_utilizing_resources.htm:Structural_ID Module 2: Export Parame\n100_utilizing_resources.htm:<p><strong>8.</strong> Structural_ID\n147_shared_param_rfa.htm:This is demonstrated by the Revit FireRa\n147_shared_param_rfa_wrong.htm:This is demonstrated by the Revit\n158_model_group_shared_param.htm:    fireRatingParamDef, binding\n158_model_group_shared_param.htm:<li>We start with the standard S\n372_param_scheduling.htm:Examples are provided by several Revit S\n567_extensible_storage.htm:<p><strong>Answer:</strong> One possib\n-->\n<p>Of course, the importance of shared parameters for add-in was greatly diminished by the introduction of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a>.\n\n\n<a name=\"3\"></a>\n<h4>Parameter Export to Excel Considerations</h4>\n<p>Anyway, back to the subject at hand.\n\n<p>The external command Lab4_2_ExportParametersToExcel in the ADN Xtra labs implements exporting all parameter data of all Revit elements to Excel.\n'All' is relative, though...\n\n<p>It bases the selection of parameters on the standard Revit API Element.Parameters property.\nAn attempt is made to export the values of the parameters returned in this collection, and others are ignored.\nMany elements do have other parameters associated with them as well, as demonstrated by\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/unofficial-parameters-and-bipchecker.html\">\nBipChecker, the built-in parameter explorer</a>.\n\nThey could easily be added to the export as well, of course.\n\n<p>Furthermore, there are of course a multitude of other important data items not stored in parameters that might be interesting to export and potentially modify and re-import as well.\nIt might be worthwhile checking whether \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/adding-a-column-to-rdblink-export.html\">\nRDBLink</a> does \n\nanything like that...\nRDBLink was originally part of the Revit 2008, 2009 and 2010 SDKs, then matured into a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/subscription-packs.html\">\nsubscription pack product</a>.\n\n<p>The choice of Excel as an export target is not mine, nor would it normally be so.\nDue to popular demand, though, this command makes use of the Excel COM interface and .NET Interop to access that.\nIt launches or attaches to a running instance of Excel and makes it visible, so you can see the work sheets and parameters being added one by one.\nIt might be faster to make Excel invisible, and faster still to use some other library to generate the XLS file without direct access to Excel, and faster still choosing some completely different file format such as SLK, CSV, or, heaven forbid, TXT.\n\n<p>The command selects all elements in the entire model, both types (e.g. family symbols) and non-type elements.\nEach element is identified in the export by its element id, and a flag is added to tell whether it is a type or not.\n\n<p>The original implementation exported only model elements.\nSupport for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\">\nall elements</a> was \n\nimplemented by creating a union of two complementary filtered element collectors, which is easily possible and normally \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\">\nnot recommended</a>.\n\n<p>The elements are sorted by category, and elements with no valid category are ignored.\nThe elements are sorted into a dictionary of separate containers for each category.\n\n<p>The category names are used to create individual work sheets in a new Excel work book.\n\n<p>The category names need some massaging to confirm with the Excel work sheet naming conventions; the name must:\n\n<ul>\n<li>Not be blank.\n<li>Not exceed 31 characters.\n<li>Not contain any of the following characters:   :   \\   /   ?   *   [   or   ].\n</li></li></li></ul>\n<p>In the original implementation, the entire parameter access was encapsulated in a try-catch exception handler.\nMany elements returned null, though, triggering and exception and slowing down the process enormously.\nEvery exception handler is resource intensive and will significantly slow down execution and consume resources.\nAn exception handler should be designed to handle unexpected, exceptional cases only;\n<a href=\"http://www.jacopretorius.net/2009/10/exceptions-should-be-exceptional.html\">exceptions should be exceptional</a>.\nAdding a preceding check for a null parameter before actually trying to access it speeded things up significantly.\nMaybe the exception handler can be removed completely?\n\n<p>As said, the elements are identified in the resulting Excel data by their element id.\nThis is not a very safe method of identifying elements, because the element id may change, e.g. by work sharing operations.\nIt would be safer to use the UniqueId instead.\n\n<p>When the new work book is set up, Excel automatically adds a couple of work sheets to it. \nThe number of default work sheets added can be defined in the Excel application settings. \nI initially implemented code to remove the unneeded work sheets, but later commented it out to simply let them be.\nThey don't really hurt.\n\n<p>For each category, all the elements are examined to determine what parameters they contain.\nA column is added to the work sheet for each parameter, and a header is set up listing the parameter name.\nWe iterate over the elements in that category and add a row listing their element id, type flag, and parameter values for each.\n\n\n<a name=\"4\"></a>\n<h4>Parameter Export to Excel Implementation</h4>\n<p>Let's summarise the steps:\n\n<ul>\n<li>Collect all elements and sort them by category.\n<li>Attach to or launch Excel and create a new work book.\n<li>Loop through all the categories and set up a work sheet for each.\n<li>Determine all parameters for the given category and create the work sheet header listing them.\n<li>Iterate over each elements of the category and export its element id, type flag and parameter values.\n<li>Report the results.\n</li></li></li></li></li></li></ul>\n<p>Here is the code implementing this as a read-only external command:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Export all parameters for each model </span>\n<span class=\"gray\">///</span><span class=\"green\"> element to Excel, one sheet per category.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Lab4_2_ExportParametersToExcel</span> \n  : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"green\">// Extract and group the data from Revit in a </span>\n    <span class=\"green\">// dictionary, where the key is the category </span>\n    <span class=\"green\">// name and the value is a list of elements.</span>\n \n    <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt; sortedElements \n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt;();\n \n    <span class=\"green\">// Iterate over all elements, both symbols and </span>\n    <span class=\"green\">// model elements, and them in the dictionary.</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementIsElementTypeFilter</span>( <span class=\"blue\">false</span> ), \n      <span class=\"blue\">new</span> <span class=\"teal\">ElementIsElementTypeFilter</span>( <span class=\"blue\">true</span> ) );\n \n    <span class=\"teal\">FilteredElementCollector</span> collector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WherePasses( f );\n \n    <span class=\"blue\">string</span> name;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n    {\n      <span class=\"teal\">Category</span> category = e.Category;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != category )\n      {\n        name = category.Name;\n \n        <span class=\"green\">// If this category was not yet encountered,</span>\n        <span class=\"green\">// add it and create a new container for its</span>\n        <span class=\"green\">// elements.</span>\n \n        <span class=\"blue\">if</span>( !sortedElements.ContainsKey( name ) )\n        {\n          sortedElements.Add( name, \n            <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;() );\n        }\n        sortedElements[name].Add( e );\n      }\n    }\n \n    <span class=\"green\">// Launch or access Excel via COM Interop:</span>\n \n    X.<span class=\"teal\">Application</span> excel = <span class=\"blue\">new</span> X.<span class=\"teal\">Application</span>();\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == excel )\n    {\n      <span class=\"teal\">LabUtils</span>.ErrorMsg( \n        <span class=\"maroon\">\"Failed to get or start Excel.\"</span> );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    excel.Visible = <span class=\"blue\">true</span>;\n \n    X.<span class=\"teal\">Workbook</span> workbook = excel.Workbooks.Add( \n      <span class=\"teal\">Missing</span>.Value );\n \n    X.<span class=\"teal\">Worksheet</span> worksheet;\n \n    <span class=\"green\">// We cannot delete all work sheets, </span>\n    <span class=\"green\">// Excel requires at least one.</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">//while( 1 &lt; workbook.Sheets.Count ) </span>\n    <span class=\"green\">//{</span>\n    <span class=\"green\">//  worksheet = workbook.Sheets.get_Item(1) as X.Worksheet;</span>\n    <span class=\"green\">//  worksheet.Delete();</span>\n    <span class=\"green\">//}</span>\n \n    <span class=\"green\">// Loop through all collected categories and </span>\n    <span class=\"green\">// create a worksheet for each except the first.</span>\n    <span class=\"green\">// We sort the categories and work trough them </span>\n    <span class=\"green\">// from the end, since the worksheet added last </span>\n    <span class=\"green\">// shows up first in the Excel tab.</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;( \n      sortedElements.Keys );\n \n    keys.Sort();\n    keys.Reverse();\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">int</span> nElements = 0;\n    <span class=\"blue\">int</span> nCategories = keys.Count;\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> categoryName <span class=\"blue\">in</span> keys )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elementSet \n        = sortedElements[categoryName];\n \n      <span class=\"green\">// Create and name the worksheet</span>\n \n      <span class=\"blue\">if</span>( first )\n      {\n        worksheet = workbook.Sheets.get_Item( 1 ) \n          <span class=\"blue\">as</span> X.<span class=\"teal\">Worksheet</span>;\n \n        first = <span class=\"blue\">false</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        worksheet = excel.Worksheets.Add( \n          <span class=\"teal\">Missing</span>.Value, <span class=\"teal\">Missing</span>.Value, \n          <span class=\"teal\">Missing</span>.Value, <span class=\"teal\">Missing</span>.Value ) \n          <span class=\"blue\">as</span> X.<span class=\"teal\">Worksheet</span>;\n      }\n \n      name = ( 31 &lt; categoryName.Length )\n        ? categoryName.Substring( 0, 31 )\n        : categoryName;\n \n      name = name\n        .Replace( <span class=\"maroon\">':'</span>, <span class=\"maroon\">'_'</span> )\n        .Replace( <span class=\"maroon\">'/'</span>, <span class=\"maroon\">'_'</span> );\n \n      worksheet.Name = name;\n \n      <span class=\"green\">// Determine the names of all parameters </span>\n      <span class=\"green\">// defined for the elements in this set.</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; paramNames = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elementSet )\n      {\n        <span class=\"teal\">ParameterSet</span> parameters = e.Parameters;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> parameters )\n        {\n          name = parameter.Definition.Name;\n \n          <span class=\"blue\">if</span>( !paramNames.Contains( name ) )\n          {\n            paramNames.Add( name );\n          }\n        }\n      }\n      paramNames.Sort();\n \n      <span class=\"green\">// Add the header row in bold.</span>\n \n      worksheet.Cells[1, 1] = <span class=\"maroon\">\"ID\"</span>;\n      worksheet.Cells[1, 2] = <span class=\"maroon\">\"IsType\"</span>;\n \n      <span class=\"blue\">int</span> column = 3;\n \n      <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> paramName <span class=\"blue\">in</span> paramNames )\n      {\n        worksheet.Cells[1, column] = paramName;\n        ++column;\n      }\n      <span class=\"blue\">var</span> range = worksheet.get_Range( <span class=\"maroon\">\"A1\"</span>, <span class=\"maroon\">\"Z1\"</span> );\n \n      range.Font.Bold = <span class=\"blue\">true</span>;\n      range.EntireColumn.AutoFit();\n \n      <span class=\"blue\">int</span> row = 2;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elementSet )\n      {\n        <span class=\"green\">// First column is the element id,</span>\n        <span class=\"green\">// second a flag indicating type (symbol)</span>\n        <span class=\"green\">// or not, both displayed as an integer.</span>\n \n        worksheet.Cells[row, 1] = e.Id.IntegerValue;\n \n        worksheet.Cells[row, 2] = (e <span class=\"blue\">is</span> <span class=\"teal\">ElementType</span>) \n          ? 1 \n          : 0;\n \n        column = 3;\n \n        <span class=\"blue\">string</span> paramValue;\n \n        <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> paramName <span class=\"blue\">in</span> paramNames )\n        {\n          paramValue = <span class=\"maroon\">\"*NA*\"</span>;\n \n          <span class=\"teal\">Parameter</span> p = e.get_Parameter( paramName );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n          {\n            <span class=\"green\">//try</span>\n            <span class=\"green\">//{</span>\n              paramValue \n                = <span class=\"teal\">LabUtils</span>.GetParameterValue( p );\n            <span class=\"green\">//}</span>\n            <span class=\"green\">//catch( Exception ex )</span>\n            <span class=\"green\">//{</span>\n            <span class=\"green\">//  Debug.Print( ex.Message );</span>\n            <span class=\"green\">//}</span>\n          }\n \n          worksheet.Cells[row, column++] \n            = paramValue;\n        } <span class=\"green\">// column</span>\n \n        ++nElements;\n        ++row;\n \n      } <span class=\"green\">// row</span>\n \n    } <span class=\"green\">// category == worksheet</span>\n \n \n    sw.Stop();\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Parameter Export\"</span>,\n      <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"{0} categories and a total \"</span>\n        + <span class=\"maroon\">\"of {1} elements exported \"</span>\n        + <span class=\"maroon\">\"in {2:F2} seconds.\"</span>,\n        nCategories, nElements,\n        sw.Elapsed.TotalSeconds ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>I ran the command on the basic architectural sample model rac_basic_sample_project.rvt.\nIt takes about two minutes to complete, produces this\n\n<a href=\"zip/rac_basic_sample_project.xlsx\">XLS file output</a> containing \n\n124 work sheets, and displays the following message on terminating:</p>\n<center>\n<img alt=\"Export parameter values to Excel\" src=\"img/export_param_excel.png\"/>\n</center>\n<p>The timing is not very relevant, since I was doing other things at the same time on the machine.\n\n<p>Here is\n\n<a href=\"zip/adn_labs_2013_2012-09-19.zip\">adn_labs_2013_2012-09-19.zip</a> containing\n\nthe complete source code, Visual Studio solution and RvtSamples include file of the ADN training labs with the updated Lab4_2_ExportParametersToExcel external command.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0828_export_param_excel",
    "header_text": "Parameter Export to Excel Considerations",
    "local_header_href": "#parameter-export-to-excel-considerations",
    "chunk_text": "<h4>Parameter Export to Excel Considerations</h4><p>Anyway, back to the subject at hand.\n\n<p>The external command Lab4_2_ExportParametersToExcel in the ADN Xtra labs implements exporting all parameter data of all Revit elements to Excel.\n'All' is relative, though...\n\n<p>It bases the selection of parameters on the standard Revit API Element.Parameters property.\nAn attempt is made to export the values of the parameters returned in this collection, and others are ignored.\nMany elements do have other parameters associated with them as well, as demonstrated by\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/unofficial-parameters-and-bipchecker.html\">\nBipChecker, the built-in parameter explorer</a>.\n\nThey could easily be added to the export as well, of course.\n\n<p>Furthermore, there are of course a multitude of other important data items not stored in parameters that might be interesting to export and potentially modify and re-import as well.\nIt might be worthwhile checking whether \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/adding-a-column-to-rdblink-export.html\">\nRDBLink</a> does \n\nanything like that...\nRDBLink was originally part of the Revit 2008, 2009 and 2010 SDKs, then matured into a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/subscription-packs.html\">\nsubscription pack product</a>.\n\n<p>The choice of Excel as an export target is not mine, nor would it normally be so.\nDue to popular demand, though, this command makes use of the Excel COM interface and .NET Interop to access that.\nIt launches or attaches to a running instance of Excel and makes it visible, so you can see the work sheets and parameters being added one by one.\nIt might be faster to make Excel invisible, and faster still to use some other library to generate the XLS file without direct access to Excel, and faster still choosing some completely different file format such as SLK, CSV, or, heaven forbid, TXT.\n\n<p>The command selects all elements in the entire model, both types (e.g. family symbols) and non-type elements.\nEach element is identified in the export by its element id, and a flag is added to tell whether it is a type or not.\n\n<p>The original implementation exported only model elements.\nSupport for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\">\nall elements</a> was \n\nimplemented by creating a union of two complementary filtered element collectors, which is easily possible and normally \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\">\nnot recommended</a>.\n\n<p>The elements are sorted by category, and elements with no valid category are ignored.\nThe elements are sorted into a dictionary of separate containers for each category.\n\n<p>The category names are used to create individual work sheets in a new Excel work book.\n\n<p>The category names need some massaging to confirm with the Excel work sheet naming conventions; the name must:\n\n<ul>\n<li>Not be blank.\n<li>Not exceed 31 characters.\n<li>Not contain any of the following characters:   :   \\   /   ?   *   [   or   ].\n</li></li></li></ul>\n<p>In the original implementation, the entire parameter access was encapsulated in a try-catch exception handler.\nMany elements returned null, though, triggering and exception and slowing down the process enormously.\nEvery exception handler is resource intensive and will significantly slow down execution and consume resources.\nAn exception handler should be designed to handle unexpected, exceptional cases only;\n<a href=\"http://www.jacopretorius.net/2009/10/exceptions-should-be-exceptional.html\">exceptions should be exceptional</a>.\nAdding a preceding check for a null parameter before actually trying to access it speeded things up significantly.\nMaybe the exception handler can be removed completely?\n\n<p>As said, the elements are identified in the resulting Excel data by their element id.\nThis is not a very safe method of identifying elements, because the element id may change, e.g. by work sharing operations.\nIt would be safer to use the UniqueId instead.\n\n<p>When the new work book is set up, Excel automatically adds a couple of work sheets to it. \nThe number of default work sheets added can be defined in the Excel application settings. \nI initially implemented code to remove the unneeded work sheets, but later commented it out to simply let them be.\nThey don't really hurt.\n\n<p>For each category, all the elements are examined to determine what parameters they contain.\nA column is added to the work sheet for each parameter, and a header is set up listing the parameter name.\nWe iterate over the elements in that category and add a row listing their element id, type flag, and parameter values for each.\n\n\n<a name=\"4\"></a>\n<h4>Parameter Export to Excel Implementation</h4>\n<p>Let's summarise the steps:\n\n<ul>\n<li>Collect all elements and sort them by category.\n<li>Attach to or launch Excel and create a new work book.\n<li>Loop through all the categories and set up a work sheet for each.\n<li>Determine all parameters for the given category and create the work sheet header listing them.\n<li>Iterate over each elements of the category and export its element id, type flag and parameter values.\n<li>Report the results.\n</li></li></li></li></li></li></ul>\n<p>Here is the code implementing this as a read-only external command:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Export all parameters for each model </span>\n<span class=\"gray\">///</span><span class=\"green\"> element to Excel, one sheet per category.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Lab4_2_ExportParametersToExcel</span> \n  : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"green\">// Extract and group the data from Revit in a </span>\n    <span class=\"green\">// dictionary, where the key is the category </span>\n    <span class=\"green\">// name and the value is a list of elements.</span>\n \n    <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt; sortedElements \n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt;();\n \n    <span class=\"green\">// Iterate over all elements, both symbols and </span>\n    <span class=\"green\">// model elements, and them in the dictionary.</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementIsElementTypeFilter</span>( <span class=\"blue\">false</span> ), \n      <span class=\"blue\">new</span> <span class=\"teal\">ElementIsElementTypeFilter</span>( <span class=\"blue\">true</span> ) );\n \n    <span class=\"teal\">FilteredElementCollector</span> collector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WherePasses( f );\n \n    <span class=\"blue\">string</span> name;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n    {\n      <span class=\"teal\">Category</span> category = e.Category;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != category )\n      {\n        name = category.Name;\n \n        <span class=\"green\">// If this category was not yet encountered,</span>\n        <span class=\"green\">// add it and create a new container for its</span>\n        <span class=\"green\">// elements.</span>\n \n        <span class=\"blue\">if</span>( !sortedElements.ContainsKey( name ) )\n        {\n          sortedElements.Add( name, \n            <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;() );\n        }\n        sortedElements[name].Add( e );\n      }\n    }\n \n    <span class=\"green\">// Launch or access Excel via COM Interop:</span>\n \n    X.<span class=\"teal\">Application</span> excel = <span class=\"blue\">new</span> X.<span class=\"teal\">Application</span>();\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == excel )\n    {\n      <span class=\"teal\">LabUtils</span>.ErrorMsg( \n        <span class=\"maroon\">\"Failed to get or start Excel.\"</span> );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    excel.Visible = <span class=\"blue\">true</span>;\n \n    X.<span class=\"teal\">Workbook</span> workbook = excel.Workbooks.Add( \n      <span class=\"teal\">Missing</span>.Value );\n \n    X.<span class=\"teal\">Worksheet</span> worksheet;\n \n    <span class=\"green\">// We cannot delete all work sheets, </span>\n    <span class=\"green\">// Excel requires at least one.</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">//while( 1 &lt; workbook.Sheets.Count ) </span>\n    <span class=\"green\">//{</span>\n    <span class=\"green\">//  worksheet = workbook.Sheets.get_Item(1) as X.Worksheet;</span>\n    <span class=\"green\">//  worksheet.Delete();</span>\n    <span class=\"green\">//}</span>\n \n    <span class=\"green\">// Loop through all collected categories and </span>\n    <span class=\"green\">// create a worksheet for each except the first.</span>\n    <span class=\"green\">// We sort the categories and work trough them </span>\n    <span class=\"green\">// from the end, since the worksheet added last </span>\n    <span class=\"green\">// shows up first in the Excel tab.</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;( \n      sortedElements.Keys );\n \n    keys.Sort();\n    keys.Reverse();\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">int</span> nElements = 0;\n    <span class=\"blue\">int</span> nCategories = keys.Count;\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> categoryName <span class=\"blue\">in</span> keys )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elementSet \n        = sortedElements[categoryName];\n \n      <span class=\"green\">// Create and name the worksheet</span>\n \n      <span class=\"blue\">if</span>( first )\n      {\n        worksheet = workbook.Sheets.get_Item( 1 ) \n          <span class=\"blue\">as</span> X.<span class=\"teal\">Worksheet</span>;\n \n        first = <span class=\"blue\">false</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        worksheet = excel.Worksheets.Add( \n          <span class=\"teal\">Missing</span>.Value, <span class=\"teal\">Missing</span>.Value, \n          <span class=\"teal\">Missing</span>.Value, <span class=\"teal\">Missing</span>.Value ) \n          <span class=\"blue\">as</span> X.<span class=\"teal\">Worksheet</span>;\n      }\n \n      name = ( 31 &lt; categoryName.Length )\n        ? categoryName.Substring( 0, 31 )\n        : categoryName;\n \n      name = name\n        .Replace( <span class=\"maroon\">':'</span>, <span class=\"maroon\">'_'</span> )\n        .Replace( <span class=\"maroon\">'/'</span>, <span class=\"maroon\">'_'</span> );\n \n      worksheet.Name = name;\n \n      <span class=\"green\">// Determine the names of all parameters </span>\n      <span class=\"green\">// defined for the elements in this set.</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; paramNames = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elementSet )\n      {\n        <span class=\"teal\">ParameterSet</span> parameters = e.Parameters;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> parameters )\n        {\n          name = parameter.Definition.Name;\n \n          <span class=\"blue\">if</span>( !paramNames.Contains( name ) )\n          {\n            paramNames.Add( name );\n          }\n        }\n      }\n      paramNames.Sort();\n \n      <span class=\"green\">// Add the header row in bold.</span>\n \n      worksheet.Cells[1, 1] = <span class=\"maroon\">\"ID\"</span>;\n      worksheet.Cells[1, 2] = <span class=\"maroon\">\"IsType\"</span>;\n \n      <span class=\"blue\">int</span> column = 3;\n \n      <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> paramName <span class=\"blue\">in</span> paramNames )\n      {\n        worksheet.Cells[1, column] = paramName;\n        ++column;\n      }\n      <span class=\"blue\">var</span> range = worksheet.get_Range( <span class=\"maroon\">\"A1\"</span>, <span class=\"maroon\">\"Z1\"</span> );\n \n      range.Font.Bold = <span class=\"blue\">true</span>;\n      range.EntireColumn.AutoFit();\n \n      <span class=\"blue\">int</span> row = 2;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elementSet )\n      {\n        <span class=\"green\">// First column is the element id,</span>\n        <span class=\"green\">// second a flag indicating type (symbol)</span>\n        <span class=\"green\">// or not, both displayed as an integer.</span>\n \n        worksheet.Cells[row, 1] = e.Id.IntegerValue;\n \n        worksheet.Cells[row, 2] = (e <span class=\"blue\">is</span> <span class=\"teal\">ElementType</span>) \n          ? 1 \n          : 0;\n \n        column = 3;\n \n        <span class=\"blue\">string</span> paramValue;\n \n        <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> paramName <span class=\"blue\">in</span> paramNames )\n        {\n          paramValue = <span class=\"maroon\">\"*NA*\"</span>;\n \n          <span class=\"teal\">Parameter</span> p = e.get_Parameter( paramName );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n          {\n            <span class=\"green\">//try</span>\n            <span class=\"green\">//{</span>\n              paramValue \n                = <span class=\"teal\">LabUtils</span>.GetParameterValue( p );\n            <span class=\"green\">//}</span>\n            <span class=\"green\">//catch( Exception ex )</span>\n            <span class=\"green\">//{</span>\n            <span class=\"green\">//  Debug.Print( ex.Message );</span>\n            <span class=\"green\">//}</span>\n          }\n \n          worksheet.Cells[row, column++] \n            = paramValue;\n        } <span class=\"green\">// column</span>\n \n        ++nElements;\n        ++row;\n \n      } <span class=\"green\">// row</span>\n \n    } <span class=\"green\">// category == worksheet</span>\n \n \n    sw.Stop();\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Parameter Export\"</span>,\n      <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"{0} categories and a total \"</span>\n        + <span class=\"maroon\">\"of {1} elements exported \"</span>\n        + <span class=\"maroon\">\"in {2:F2} seconds.\"</span>,\n        nCategories, nElements,\n        sw.Elapsed.TotalSeconds ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>I ran the command on the basic architectural sample model rac_basic_sample_project.rvt.\nIt takes about two minutes to complete, produces this\n\n<a href=\"zip/rac_basic_sample_project.xlsx\">XLS file output</a> containing \n\n124 work sheets, and displays the following message on terminating:</p>\n<center>\n<img alt=\"Export parameter values to Excel\" src=\"img/export_param_excel.png\"/>\n</center>\n<p>The timing is not very relevant, since I was doing other things at the same time on the machine.\n\n<p>Here is\n\n<a href=\"zip/adn_labs_2013_2012-09-19.zip\">adn_labs_2013_2012-09-19.zip</a> containing\n\nthe complete source code, Visual Studio solution and RvtSamples include file of the ADN training labs with the updated Lab4_2_ExportParametersToExcel external command.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0828_export_param_excel",
    "header_text": "Parameter Export to Excel Implementation",
    "local_header_href": "#parameter-export-to-excel-implementation",
    "chunk_text": "<h4>Parameter Export to Excel Implementation</h4><p>Let's summarise the steps:\n\n<ul>\n<li>Collect all elements and sort them by category.\n<li>Attach to or launch Excel and create a new work book.\n<li>Loop through all the categories and set up a work sheet for each.\n<li>Determine all parameters for the given category and create the work sheet header listing them.\n<li>Iterate over each elements of the category and export its element id, type flag and parameter values.\n<li>Report the results.\n</li></li></li></li></li></li></ul>\n<p>Here is the code implementing this as a read-only external command:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Export all parameters for each model </span>\n<span class=\"gray\">///</span><span class=\"green\"> element to Excel, one sheet per category.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Lab4_2_ExportParametersToExcel</span> \n  : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"green\">// Extract and group the data from Revit in a </span>\n    <span class=\"green\">// dictionary, where the key is the category </span>\n    <span class=\"green\">// name and the value is a list of elements.</span>\n \n    <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt; sortedElements \n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt;();\n \n    <span class=\"green\">// Iterate over all elements, both symbols and </span>\n    <span class=\"green\">// model elements, and them in the dictionary.</span>\n \n    <span class=\"teal\">ElementFilter</span> f = <span class=\"blue\">new</span> <span class=\"teal\">LogicalOrFilter</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementIsElementTypeFilter</span>( <span class=\"blue\">false</span> ), \n      <span class=\"blue\">new</span> <span class=\"teal\">ElementIsElementTypeFilter</span>( <span class=\"blue\">true</span> ) );\n \n    <span class=\"teal\">FilteredElementCollector</span> collector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WherePasses( f );\n \n    <span class=\"blue\">string</span> name;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n    {\n      <span class=\"teal\">Category</span> category = e.Category;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != category )\n      {\n        name = category.Name;\n \n        <span class=\"green\">// If this category was not yet encountered,</span>\n        <span class=\"green\">// add it and create a new container for its</span>\n        <span class=\"green\">// elements.</span>\n \n        <span class=\"blue\">if</span>( !sortedElements.ContainsKey( name ) )\n        {\n          sortedElements.Add( name, \n            <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;() );\n        }\n        sortedElements[name].Add( e );\n      }\n    }\n \n    <span class=\"green\">// Launch or access Excel via COM Interop:</span>\n \n    X.<span class=\"teal\">Application</span> excel = <span class=\"blue\">new</span> X.<span class=\"teal\">Application</span>();\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == excel )\n    {\n      <span class=\"teal\">LabUtils</span>.ErrorMsg( \n        <span class=\"maroon\">\"Failed to get or start Excel.\"</span> );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    excel.Visible = <span class=\"blue\">true</span>;\n \n    X.<span class=\"teal\">Workbook</span> workbook = excel.Workbooks.Add( \n      <span class=\"teal\">Missing</span>.Value );\n \n    X.<span class=\"teal\">Worksheet</span> worksheet;\n \n    <span class=\"green\">// We cannot delete all work sheets, </span>\n    <span class=\"green\">// Excel requires at least one.</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">//while( 1 &lt; workbook.Sheets.Count ) </span>\n    <span class=\"green\">//{</span>\n    <span class=\"green\">//  worksheet = workbook.Sheets.get_Item(1) as X.Worksheet;</span>\n    <span class=\"green\">//  worksheet.Delete();</span>\n    <span class=\"green\">//}</span>\n \n    <span class=\"green\">// Loop through all collected categories and </span>\n    <span class=\"green\">// create a worksheet for each except the first.</span>\n    <span class=\"green\">// We sort the categories and work trough them </span>\n    <span class=\"green\">// from the end, since the worksheet added last </span>\n    <span class=\"green\">// shows up first in the Excel tab.</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;( \n      sortedElements.Keys );\n \n    keys.Sort();\n    keys.Reverse();\n \n    <span class=\"blue\">bool</span> first = <span class=\"blue\">true</span>;\n \n    <span class=\"blue\">int</span> nElements = 0;\n    <span class=\"blue\">int</span> nCategories = keys.Count;\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> categoryName <span class=\"blue\">in</span> keys )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elementSet \n        = sortedElements[categoryName];\n \n      <span class=\"green\">// Create and name the worksheet</span>\n \n      <span class=\"blue\">if</span>( first )\n      {\n        worksheet = workbook.Sheets.get_Item( 1 ) \n          <span class=\"blue\">as</span> X.<span class=\"teal\">Worksheet</span>;\n \n        first = <span class=\"blue\">false</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        worksheet = excel.Worksheets.Add( \n          <span class=\"teal\">Missing</span>.Value, <span class=\"teal\">Missing</span>.Value, \n          <span class=\"teal\">Missing</span>.Value, <span class=\"teal\">Missing</span>.Value ) \n          <span class=\"blue\">as</span> X.<span class=\"teal\">Worksheet</span>;\n      }\n \n      name = ( 31 &lt; categoryName.Length )\n        ? categoryName.Substring( 0, 31 )\n        : categoryName;\n \n      name = name\n        .Replace( <span class=\"maroon\">':'</span>, <span class=\"maroon\">'_'</span> )\n        .Replace( <span class=\"maroon\">'/'</span>, <span class=\"maroon\">'_'</span> );\n \n      worksheet.Name = name;\n \n      <span class=\"green\">// Determine the names of all parameters </span>\n      <span class=\"green\">// defined for the elements in this set.</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; paramNames = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elementSet )\n      {\n        <span class=\"teal\">ParameterSet</span> parameters = e.Parameters;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> parameters )\n        {\n          name = parameter.Definition.Name;\n \n          <span class=\"blue\">if</span>( !paramNames.Contains( name ) )\n          {\n            paramNames.Add( name );\n          }\n        }\n      }\n      paramNames.Sort();\n \n      <span class=\"green\">// Add the header row in bold.</span>\n \n      worksheet.Cells[1, 1] = <span class=\"maroon\">\"ID\"</span>;\n      worksheet.Cells[1, 2] = <span class=\"maroon\">\"IsType\"</span>;\n \n      <span class=\"blue\">int</span> column = 3;\n \n      <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> paramName <span class=\"blue\">in</span> paramNames )\n      {\n        worksheet.Cells[1, column] = paramName;\n        ++column;\n      }\n      <span class=\"blue\">var</span> range = worksheet.get_Range( <span class=\"maroon\">\"A1\"</span>, <span class=\"maroon\">\"Z1\"</span> );\n \n      range.Font.Bold = <span class=\"blue\">true</span>;\n      range.EntireColumn.AutoFit();\n \n      <span class=\"blue\">int</span> row = 2;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elementSet )\n      {\n        <span class=\"green\">// First column is the element id,</span>\n        <span class=\"green\">// second a flag indicating type (symbol)</span>\n        <span class=\"green\">// or not, both displayed as an integer.</span>\n \n        worksheet.Cells[row, 1] = e.Id.IntegerValue;\n \n        worksheet.Cells[row, 2] = (e <span class=\"blue\">is</span> <span class=\"teal\">ElementType</span>) \n          ? 1 \n          : 0;\n \n        column = 3;\n \n        <span class=\"blue\">string</span> paramValue;\n \n        <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> paramName <span class=\"blue\">in</span> paramNames )\n        {\n          paramValue = <span class=\"maroon\">\"*NA*\"</span>;\n \n          <span class=\"teal\">Parameter</span> p = e.get_Parameter( paramName );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n          {\n            <span class=\"green\">//try</span>\n            <span class=\"green\">//{</span>\n              paramValue \n                = <span class=\"teal\">LabUtils</span>.GetParameterValue( p );\n            <span class=\"green\">//}</span>\n            <span class=\"green\">//catch( Exception ex )</span>\n            <span class=\"green\">//{</span>\n            <span class=\"green\">//  Debug.Print( ex.Message );</span>\n            <span class=\"green\">//}</span>\n          }\n \n          worksheet.Cells[row, column++] \n            = paramValue;\n        } <span class=\"green\">// column</span>\n \n        ++nElements;\n        ++row;\n \n      } <span class=\"green\">// row</span>\n \n    } <span class=\"green\">// category == worksheet</span>\n \n \n    sw.Stop();\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Parameter Export\"</span>,\n      <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"{0} categories and a total \"</span>\n        + <span class=\"maroon\">\"of {1} elements exported \"</span>\n        + <span class=\"maroon\">\"in {2:F2} seconds.\"</span>,\n        nCategories, nElements,\n        sw.Elapsed.TotalSeconds ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>I ran the command on the basic architectural sample model rac_basic_sample_project.rvt.\nIt takes about two minutes to complete, produces this\n\n<a href=\"zip/rac_basic_sample_project.xlsx\">XLS file output</a> containing \n\n124 work sheets, and displays the following message on terminating:</p>\n<center>\n<img alt=\"Export parameter values to Excel\" src=\"img/export_param_excel.png\"/>\n</center>\n<p>The timing is not very relevant, since I was doing other things at the same time on the machine.\n\n<p>Here is\n\n<a href=\"zip/adn_labs_2013_2012-09-19.zip\">adn_labs_2013_2012-09-19.zip</a> containing\n\nthe complete source code, Visual Studio solution and RvtSamples include file of the ADN training labs with the updated Lab4_2_ExportParametersToExcel external command.\n\n</p></p></p></p>"
  }
]