[
  {
    "original_filename": "0926_vieworientation3d",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0926_vieworientation3d",
    "header_text": "Setting up your ViewOrientation3D",
    "local_header_href": "#setting-up-your-vieworientation3d",
    "chunk_text": "<h3>Setting up your ViewOrientation3D</h3><p>Here is a contribution from Mario Guttman of\n\n<a href=\"http://case-inc.com\">\nCASE</a>,\n\nwho already made various contributions here in the past.\n\nHe says:\n\n<p>I have been purging my 2013 code of deprecated functions in preparation for my 2014 upgrade.\nOne group of statements I have needed to replace are the view creations.\nThey were previously using the Document.Create.NewView3D method and needed converting to the View3D.CreateIsometric with a separate ViewOrientation3D object defining the view direction.\n\n<p>Typically, in these kind of cases, I just search your blog for the answer.\nIn this case I found a few references, for example your March 04, 2013 item on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/whats-new-in-the-revit-2013-api.html\">\nWhat's New in the Revit 2013 API – View API – View Creation</a>.\n\nThis, together with the\n\n<a href=\"http://wikihelp.autodesk.com/Revit/enu/2013/Help/00006-API_Developer's_Guide/0039-Basic_In39/0067-Views67/0069-The_View69\">\nwikihelp entry on the View3D class</a>,\n\ndescribe the new syntax, but they don't really explain how you would create the values.\n\n<p>After searching the inner reaches of my brain for some ancient math skills I figured out the following:\n\n<p>Assuming that your user interface has produced two angular values (in degrees):\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The angle in the XY plane (azimuth),</span>\n  <span class=\"gray\">///</span><span class=\"green\"> typically 0 to 360.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">double</span> angleHorizD;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The vertical tilt (altitude),</span>\n  <span class=\"gray\">///</span><span class=\"green\"> typically -90 to 90.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">double</span> angleVertD;\n</pre>\n<p>Then this utility function returns a unit vector in the specified direction:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a unit vector in the specified direction.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"angleHorizD\"&gt;</span><span class=\"green\">Angle in XY plane </span>\n  <span class=\"gray\">///</span><span class=\"green\"> in degrees</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"angleVertD\"&gt;</span><span class=\"green\">Vertical tilt between </span>\n  <span class=\"gray\">///</span><span class=\"green\"> -90 and +90 degrees</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Unit vector in the specified </span>\n  <span class=\"gray\">///</span><span class=\"green\"> direction.</span><span class=\"gray\">&lt;/returns&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"teal\">XYZ</span> VectorFromHorizVertAngles(\n    <span class=\"blue\">double</span> angleHorizD,\n    <span class=\"blue\">double</span> angleVertD )\n  {\n    <span class=\"green\">// Convert degreess to radians.</span>\n \n    <span class=\"blue\">double</span> degToRadian = <span class=\"teal\">Math</span>.PI * 2 / 360;\n    <span class=\"blue\">double</span> angleHorizR = angleHorizD * degToRadian;\n    <span class=\"blue\">double</span> angleVertR = angleVertD * degToRadian;\n \n    <span class=\"green\">// Return unit vector in 3D</span>\n \n    <span class=\"blue\">double</span> a = <span class=\"teal\">Math</span>.Cos( angleVertR );\n    <span class=\"blue\">double</span> b = <span class=\"teal\">Math</span>.Cos( angleHorizR );\n    <span class=\"blue\">double</span> c = <span class=\"teal\">Math</span>.Sin( angleHorizR );\n    <span class=\"blue\">double</span> d = <span class=\"teal\">Math</span>.Sin( angleVertR );\n \n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( a * b, a * c, d );\n  }\n</pre>\n<p>From this it is easy to create the ViewOrientation3D object as follows:\n\n<pre class=\"code\">\n  <span class=\"teal\">XYZ</span> eye = <span class=\"teal\">XYZ</span>.Zero;\n \n  <span class=\"teal\">XYZ</span> forward = VectorFromHorizVertAngles(\n    angleHorizD, angleVertD );\n \n  <span class=\"teal\">XYZ</span> up = VectorFromHorizVertAngles(\n    angleHorizD, angleVertD + 90 );\n \n  <span class=\"teal\">ViewOrientation3D</span> viewOrientation3D\n    = <span class=\"blue\">new</span> <span class=\"teal\">ViewOrientation3D</span>( eye, up, forward );\n</pre>\n<p>Although it is already explained in one of your other posts, just for completeness, here is the final step is to apply the orientation to the view:\n\n<pre class=\"code\">\n  <span class=\"teal\">ViewFamilyType</span> viewFamilyType3D\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewFamilyType</span> ) )\n      .Cast&lt;<span class=\"teal\">ViewFamilyType</span>&gt;()\n      .FirstOrDefault&lt;<span class=\"teal\">ViewFamilyType</span>&gt;(\n        x =&gt; <span class=\"teal\">ViewFamily</span>.ThreeDimensional\n          == x.ViewFamily );\n \n  <span class=\"teal\">View3D</span> view3d = <span class=\"teal\">View3D</span>.CreateIsometric(\n    doc, viewFamilyType3D.Id );\n \n  view3d.SetOrientation( viewOrientation3D );\n</pre>\n<p>I hope you find this useful.</p>\n<p>Personally, I do indeed.</p>\n<p>Many thanks to Mario for sharing!</p>\n<a name=\"2\"></a><h4>Addendum</h4>\n<p>Colmag adds in\nhis <a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/setting-up-your-vieworientation3d.html#comment-2904374676\">comment</a> below:</p>\n<p>Thank you for sharing this info, it's made life a whole lot easier in setting 3D view orientation.</p>\n<p>It did take me a short while to work out the values to replicate top and bottom isometric views from each corner of the view cube, so I thought I'd share the values here for others. Looking at them listed out they are pretty obvious, but faced with a blank sheet things didn't seem so straight forward!</p>\n<ul>\n<li>Horizontal Angles:</li>\n<ul>\n<li>Left Front = 45</li>\n<li>Front Right = 135</li>\n<li>Right Back = 225</li>\n<li>Back Left = 310</li>\n</ul>\n<li>Vertical Angles:</li>\n<ul>\n<li>-30 = Top</li>\n<li>30 = Bottom</li>\n</ul>\n</ul>\n<p>Many thanks to Colmag for this useful addition!</p>\n<a name=\"3\"></a><h4>Addendum 2</h4>\n<p>K C Tang added a further simplification in\nhis <a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/setting-up-your-vieworientation3d.html#comment-3137491963\">comment</a> below:</p>\n<p>I found that the formula above using <code>( a * b, a * c, d )</code> to calculate the return value from <code>VectorFromHorizVertAngles</code> can be further simplified, because:</p>\n<pre>\n  ( a * b, a * c, d )\n    ≡ ( a * b / a , a * c / a, d / a )\n    = (b, c, d/a)\n    = (b, c, e),\n</pre>\n<p>where</p>\n<pre>\n  double e = Math.Tan( angleVertR ).\n</pre>\n<p>In words, the return value from <code>VectorFromHorizVertAngles</code> can be defined as:</p>\n<ul>\n<li>cos (horizontal angle) for X</li>\n<li>sin (horizontal angle) for Y</li>\n<li>tan (vertical angle) for Z</li>\n</ul>\n<p>Many thanks to K C Tang for this simplification and explanation highlighting the basic trigonometric relationships between the angles and the vectors involved so much better than the original version!</p>\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0926_vieworientation3d",
    "header_text": "Addendum",
    "local_header_href": "#addendum",
    "chunk_text": "<h4>Addendum</h4><p>Colmag adds in\nhis <a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/setting-up-your-vieworientation3d.html#comment-2904374676\">comment</a> below:</p><p>Thank you for sharing this info, it's made life a whole lot easier in setting 3D view orientation.</p><p>It did take me a short while to work out the values to replicate top and bottom isometric views from each corner of the view cube, so I thought I'd share the values here for others. Looking at them listed out they are pretty obvious, but faced with a blank sheet things didn't seem so straight forward!</p><ul>\n<li>Horizontal Angles:</li>\n<ul>\n<li>Left Front = 45</li>\n<li>Front Right = 135</li>\n<li>Right Back = 225</li>\n<li>Back Left = 310</li>\n</ul>\n<li>Vertical Angles:</li>\n<ul>\n<li>-30 = Top</li>\n<li>30 = Bottom</li>\n</ul>\n</ul><p>Many thanks to Colmag for this useful addition!</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0926_vieworientation3d",
    "header_text": "Addendum 2",
    "local_header_href": "#addendum-2",
    "chunk_text": "<h4>Addendum 2</h4><p>K C Tang added a further simplification in\nhis <a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/setting-up-your-vieworientation3d.html#comment-3137491963\">comment</a> below:</p><p>I found that the formula above using <code>( a * b, a * c, d )</code> to calculate the return value from <code>VectorFromHorizVertAngles</code> can be further simplified, because:</p><pre>\n  ( a * b, a * c, d )\n    ≡ ( a * b / a , a * c / a, d / a )\n    = (b, c, d/a)\n    = (b, c, e),\n</pre><p>where</p><pre>\n  double e = Math.Tan( angleVertR ).\n</pre><p>In words, the return value from <code>VectorFromHorizVertAngles</code> can be defined as:</p><ul>\n<li>cos (horizontal angle) for X</li>\n<li>sin (horizontal angle) for Y</li>\n<li>tan (vertical angle) for Z</li>\n</ul><p>Many thanks to K C Tang for this simplification and explanation highlighting the basic trigonometric relationships between the angles and the vectors involved so much better than the original version!</p>"
  }
]