[
  {
    "original_filename": "1786_pet_change",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\ntwitter:\n\nPet Change using Python and Dynamo to swap nested families in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/petchange_py_dyn\n\nPieter Schipper worked hard at solving the task of swapping nested families using Python and Dynamo and very kindly shares his solution here with us today, including\nhis four Python scripts\n&ndash; Task at hand\n&ndash; Problems faced\n&ndash; Solution and detailed implementation\n&ndash; Collect all family instances in document\n&ndash; Export families via <code>SaveAs</code>\n&ndash; Update Nested Family Definitions\n&ndash; Reload updated families...\n\nlinkedin:\n\nPet Change using Python and Dynamo to swap nested families in the #RevitAPI\n\nhttp://bit.ly/petchange_py_dyn\n\nPieter Schipper worked hard at solving the task of swapping nested families using Python and Dynamo and very kindly shares his solution here with us today, including\nhis four Python scripts:\n\n- Task at hand\n- Problems faced\n- Solution and detailed implementation\n- Collect all family instances in document\n- Export families via <code>SaveAs</code>\n- Update Nested Family Definitions\n- Reload updated families...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<p style=\"font-size: 80%; font-style:italic\"></p>\n\n-->"
  },
  {
    "original_filename": "1786_pet_change",
    "header_text": "Pet Change &ndash; Python + Dynamo Swap Nested Family",
    "local_header_href": "#pet-change-ndash-python-dynamo-swap-nested-family",
    "chunk_text": "### Pet Change &ndash; Python + Dynamo Swap Nested Family\n\nPieter Schipper of [RoosRos Architecten](https://www.roosros.nl) in The Netherlands\nworked hard at solving the task of swapping nested families using Python and Dynamo and very kindly shares his solution here with us today, including\nhis [four Python scripts](zip/ps_pet_change_python_scripts.txt).\n\nParts of the code can be used for several different purposes, so they might be helpful for others as well.\n\n- [Task at hand](#2)\n- [Problems faced](#3)\n- [Solution and detailed implementation](#4)\n- [Code 1 &ndash; Collect all family instances in document](#4.1)\n- [Code 2 &ndash; Export families via `SaveAs`](#4.2)\n- [Code 3 &ndash; Update Nested Family Definitions](#4.3)\n- [Code 4 &ndash; Reload updated families](#4.4)\n- [Initial conversation, questions and answers](#5)"
  },
  {
    "original_filename": "1786_pet_change",
    "header_text": "Task at Hand",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Task at Hand\n\nSwap out and overwrite a nested family instance to a different one with the same name, in one single background workflow.\n\nI have a family instance placed in my current project. It contains a nested family instance. The nested family instance needs to be replaced by a different one of the same name. I would like this modification to be performed in the background, with only my current project open.\n \nBelow, I discuss this simplified example for illustration purposes.\nWe use the same approach for more complex things in our professional workflow:\n\n<center>\n<img src=\"img/pet_change_3.jpg\" alt=\"Pet change task description\" width=\"800\">\n<p style=\"font-size: 80%; font-style:italic\">Pet change task description</p>\n</center>\n\n<center>\n<img src=\"img/pet_change_2.jpg\" alt=\"Pet change scenario rendering\" width=\"634\">\n<p style=\"font-size: 80%; font-style:italic\">Pet change scenario rendering</p>\n</center>"
  },
  {
    "original_filename": "1786_pet_change",
    "header_text": "Problems Faced",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Problems Faced\n\nThe main problem I encountered initially was that it didn’t work out correctly to copy one family into another family all in the background."
  },
  {
    "original_filename": "1786_pet_change",
    "header_text": "Solution and Detailed Implementation",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Solution and Detailed Implementation\n\nThe solution I found was to introduce an extra step (also all in the background):\n\n- First: Create two directories (folders), one containing the families to modify, the other the nested not shared family placed into the package project.\n- Second: Copy the families from the second folder into the first, overwriting the original families.\n- Third: Load the families from the first folder into the current project.\n \nI found some Python code on the Internet and adapted it for my needs.\nThis is the code I used in my Dynamo nodes:\n\n- [Code 1 &ndash; Collect all family instances in document](#4.1)\n- [Code 2 &ndash; Export families via `SaveAs`](#4.2)\n- [Code 3 &ndash; Update Nested Family Definitions](#4.3)\n- [Code 4 &ndash; Reload updated families](#4.4)\n \n####<a name=\"4.1\"></a> Code 1 &ndash; Collect all Family Instances in Document\n\n<pre class=\"prettyprint\">\nimport clr\nimport System\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\ndoc = IN[0]\n\nclr.AddReference(\"RevitAPI\")\nfrom Autodesk.Revit.DB import *\n\nclr.AddReference(\"RevitNodes\")\nimport Revit\nclr.ImportExtensions(Revit.Elements)\n\nfamilieCollector = FilteredElementCollector(doc).OfClass(FamilyInstance).ToElements()\n\nfamilies = list()\n\t\t\nfor d in familieCollector:\n\t#if d.IsTemplate != True:\n\t\tfamilies.append(d)\n\n#Assign your output to the OUT variable.\nOUT = families\n</pre>\n\n####<a name=\"4.2\"></a> Code 2 &ndash; Export Families via SaveAs\n\n<pre class=\"prettyprint\">\nimport clr\nclr.AddReference('ProtoGeometry')\nfrom Autodesk.DesignScript.Geometry import *\n\nclr.AddReference('RevitAPI')\nimport Autodesk\n\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\n\n#Close all transactions\n\ntrans = TransactionManager.Instance\ntrans.ForceCloseTransaction()\n\nfams = IN[0]\npaths = IN[1]\n\n#unwrap the Dynamo elements\n\nfams = map(UnwrapElement, fams)\nfor i in xrange(len(fams)):\n\n    famDoc = doc.EditFamily(fams[i])\n    famDoc.SaveAs(paths[i])\n    famDoc.Close(False)\n\nOUT = 0\n</pre>\n\n####<a name=\"4.3\"></a> Code 3 &ndash; Update Nested Family Definitions\n\n<pre class=\"prettyprint\">\nimport clr\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\nclr.AddReference('RevitServices')"
  },
  {
    "original_filename": "1786_pet_change",
    "header_text": "Revit and Dynamo modules",
    "local_header_href": "#revit-and-dynamo-modules",
    "chunk_text": "# Revit and Dynamo modules\n\nfrom Autodesk.Revit.DB import Document, FamilySource, IFamilyLoadOptions\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\n\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\n\n#input assigned to IN variable\npaths = IN[0]\ndocpaths = IN[1]\n\n#wrap input inside a list if not a list.\nif not isinstance(paths, list): \n\tpaths = [paths]\nif not isinstance(docpaths, list): \n\tdocpaths = [docpaths]\n\t\n#ensure loaded families can overwrite existing families.\nclass FamilyOption(IFamilyLoadOptions):\n\tdef OnFamilyFound(self, familyInUse, overwriteParameterValues):\n\t\toverwriteParameterValues = True\n\t\treturn True\n\t\t\n\tdef OnSharedFamilyFound(self, sharedFamily, familyInUse, source, overwriteParameterValues):\n\t\tsource = FamilySource.Family\n\t\toverwriteParameterValues = True\n\t\treturn True\t\t\n\t\t\n#core data processing\ndocuments = []\nfamilies = []\nfor docpath in docpaths:\n\tdoc=app.OpenDocumentFile(docpath)\n\tdocuments.append(doc)\nfor path in paths:\n\tfamily_doc = app.OpenDocumentFile(path)\n\tfamilies.append(family_doc)\n\t\nfor document in documents:\n\tmap(lambda family: family.LoadFamily(document, FamilyOption()),\n\tfamilies)\n\nmap(lambda x: x.Close(False), families)\nmap(lambda x: x.Close(True), documents)"
  },
  {
    "original_filename": "1786_pet_change",
    "header_text": "output assigned to the OUT variable",
    "local_header_href": "#output-assigned-to-the-out-variable",
    "chunk_text": "# output assigned to the OUT variable\n\nOUT = [paths, docpaths]\n\t\n#core data processing\nfor path in paths:\n\ttry:\n\t\tfamDoc = app.OpenDocumentFile(path)\n\t\tfamDoc.LoadFamily(doc, FamilyOption())\n\t\tfamDoc.Close(False)\n\texcept:\n\t\tpass\n\n#output assigned the OUT variable\nOUT = paths\n</pre>\n\n####<a name=\"4.4\"></a> Code 4 &ndash; Load Updated Families\n\n<pre class=\"prettyprint\">\nimport clr\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\n\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\ndoc = DocumentManager.Instance.CurrentDBDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\n\n#input assigned the IN variable\npaths = IN[0]\n\n#wrap input inside a list (if not a list)\nif not isinstance(paths, list): paths = [paths]\n\n#ensure loaded families can overwrite existing families.\nclass FamilyOption(IFamilyLoadOptions):\n\tdef OnFamilyFound(self, familyInUse, overwriteParameterValues):\n\t\toverwriteParameterValues = True\n\t\treturn True\n\n\tdef OnSharedFamilyFound(self, sharedFamily, familyInUse, source, overwriteParameterValues):\n\t\tsource = FamilySource.Family\n\t\toverwriteParameterValues = True\n\t\treturn True\n\n#core data processing\nfor path in paths:\n\ttry:\n\t\tfamDoc = app.OpenDocumentFile(path)\n\t\tfamDoc.LoadFamily(doc, FamilyOption())\n\t\tfamDoc.Close(False)\n\texcept:\n\t\tpass\n\n#output assigned the OUT variable\nOUT = paths\n</pre>"
  },
  {
    "original_filename": "1786_pet_change",
    "header_text": "Initial Conversation, Questions and Answers",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Initial Conversation, Questions and Answers\n\nThe text above describes the final working solution.\n\nHere is a summary of the preceding discussions clarifying the task before completing the solution.\n\n**Question:** I want to overwrite one family with another.\n\nI want to do this behind the screens with only one project open, as indicated in the overview image above describing the task.\n\nI can’t solve it with my very basic Python knowledge.\n\nI have solved 90% of the problem and hope you can help me out with the remaining most difficult 10%.\n \n**Answer:** Your question is not yet clear to me.\n \nYou say, 'keeping the green cage'.\n \nKeeping which green cage?\n \nThe green cage containing the mouse?\n \nOr the green cage containing the pig?\n \nBut there is no green cage containing the pig to start with.\n \nThe pig is in a red cage. You want a mouse in the red cage?\n\n**Response:** In project *Aunt Anna.rvt*, I have the same family green cage with mouse, as I have in the project *animal shelter.rvt*.\n \nIf I work in one project (Aunt Anna.rvt) I want to change the mouse into a pig or rabbit from the red or blue cage out of the animal shelter.rvt project. All animal.rfa families (mouse/rabbit/pig) are not shared and have the same name. So, I need to overwrite one animal.rfa with another animal.rfa. But the difficulty is that I want to do it all in the background.\n \nDynamo is a very nice program and I can go (in the background) to the (animal.rfa) families I need. But I am having trouble overwriting one with another.\n \nIn Dynamo, I can open a document in the background, and with a Python script, I get all family instances.\n \nThen, there is a node that gets the family document from the family type that allows me to use the python script again to get the families one step deeper.\n \nI think that this all will be possible in Python itself, but Dynamo works easy for non-programmers like me.\n \nBackground information:\n\nIn our company, we made our own window generator. The generators on the market are mostly not the ones we need at an architectural office.\nWe need the freedom to change windows in a late stage, without taking a lot of time.\nTherefore, we made our own window generator.\nThis is a flexible window family which can change into aluminium, wood and plastic, and also includes possibilities to store a lot of other information.\nI want to make it easy for our draftsman to change all windows of a project to another material.\nThat’s the reason behind the question.\n \n**Answer:** If it is possible in Python, it is possible in Dynamo.\n \nThey are the same, under the hood.\n \nIf it is possible in C#, it is possible in Python.\n \nThey both make use of the same, one and only underlying Revit .NET API.\n \nSo, it can certainly be done.\n \n**Response:** I think so too, only don’t know how to finish the last step (copy and overwrite).\n\nNot with Dynamo (copy nodes won’t work) and not with Python.\n\nI thought maybe you would have the solution in one minute, but I know that it takes often more time.\n\n**Answer:** Yes, that may be possible. Unfortunately, I have done hardly any work at all in Python, and none whatsoever in Dynamo, yet.\n\n**Response:** I just want to let you know that I found a solution.\n\nI was able to solve this issue with a few extra actions.\n \nI first let Dynamo create two temporary directories\n\nThen Save with the first Python script family “1” and “2” (see picture) to the directories.\n\nWith the second python script I saved family “1” in family “2”.\n\nWith the third python script I Load the family “2” into current document.\n \nSo, it worked with only Project *aunt Anna* opened. I could not solve this without saving first the families to an actual directory.\n\nWith my knowledge I just search the Internet and copy/paste parts of code till it works. It can probably be done more efficiently, but I’m happy.\n \nThe only thing is that when I want to use run the script twice, I have to restart Revit. But that is not a big problem.\n \nMany thanks to Pieter for documenting and sharing this!"
  }
]