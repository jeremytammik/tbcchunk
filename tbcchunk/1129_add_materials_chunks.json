[
  {
    "original_filename": "1129_add_materials",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1129_add_materials",
    "header_text": "Getting Serious Adding New Materials from List",
    "local_header_href": "#getting-serious-adding-new-materials-from-list",
    "chunk_text": "<h3>Getting Serious Adding New Materials from List</h3><p>Here is a post on some serious usability enhancements for the AddMaterials add-in, which reads a list of material properties from an Excel spreadsheet and generates Revit material elements accordingly.</p><p>It was originally presented for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/add-new-materials-from-list.html#2\">\nRevit 2011</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/adding-new-materials-from-list-updated.html\">\nreimplemented for Revit 2014</a>,\n\nand enhanced with\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/adding-new-materials-from-list-updated-again.html\">\nimproved error messages and reporting</a> soon\n\nafter.</p><p>Until now, it was more of a programming example than an actual usable tool, but that is starting to change, thanks to a number of enhancements by Alexander Ignatovich, last but least the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/wpf-fill-pattern-viewer-control.html\">\nWPF FillPattern viewer control</a> presented\n\nlast week.\nSays Alex:</p><blockquote>\n<p>I want to further enhance the tool for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/adding-new-materials-from-list-updated-again.html\">\nadding new materials from a list</a>.</p>\n<p>First of all, I split off the XLS data reading from the materials creation.\nI also noticed that we cannot create a new material if the copy source base material does not exist in project, i.e. there if is no material with the name provided in 11 column.\nAnother problem I noticed occurs if I try to run the add-in command several times: in this case, it tries to repeatedly generate materials with the same name, and the LINQ ToDictionary method fails.\nSo, we must avoid such situations.</p>\n<p>Summarizing: let's read data, mark the materials with no base class provided, or base class not found, and existing materials as \"non-loadable\", show the materials list to the user, where he (or she) can deselect some items and create the resulting materials list.</p>\n<p>And one other, I think, the most valuable thing: in the materials import dialogue I added\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/wpf-fill-pattern-viewer-control.html\">\nsurface and cut pattern preview controls</a> (see View\\Controls\\FillPatternViewerControlWpf.xaml).\n\nThis code is based on work performed by Victor Chekalin when he was working in our company.</p>\n<p>I hope this code sample will be helpful.\nSorry, maybe some things are not accurate.\nFor example, Visual Studio does not show the design view of the MaterialsView form, because my MaterialViewModel.SurfacePattern and MaterialViewModel.CutPattern classes are really Autodesk.Revit.DB.FillPattern, but it is just an example :-)</p>\n</blockquote><p>Thank you very much, and thanks to Victor as well for the nice fill pattern viewer.</p><p>That is a powerful tool and sample in its own right.</p><p>Here are screen snapshots of the AddMaterials add-in in action running.\nIn the first run, none of the CSI copy source base materials have been defined in the current project, so no new materials can be added:</p><center>\n<img alt=\"Material list with zero source materials defined\" src=\"img/add_materials_ai_zero.png\" width=\"400\"/>\n</center><p>In the second run, I manually added one CSI material to copy from, and now one material can be added:</p><center>\n<img alt=\"Material list with one source material defined\" src=\"img/add_materials_ai_one.png\" width=\"400\"/>\n</center><p>If this project is of further interest, another enhancement might be to remove the COM references to Microsoft office, to allow the command to work on computers without Microsoft Office installed.</p><p>Once again, many thanks to Victor and Alex for these valuable enhancements!</p><p>The complete source code, Visual Studio solution and add-in manifest is provided in the\n\n<a href=\"https://github.com/jeremytammik/AddMaterials\">AddMaterials GitHub repository</a>.</p><p>The version discussed above is\n\n<a href=\"https://github.com/jeremytammik/AddMaterials/releases/tag/2014.0.0.1\">\nrelease 2014.0.0.2</a>.</p><p>Please feel free to fork that and add your own enhancements as well.</p><p>Good luck!</p>"
  }
]