[
  {
    "original_filename": "1137_roomeditorapp_2015",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1137_roomeditorapp_2015",
    "header_text": "Migrating RoomEditorApp to Revit 2015",
    "local_header_href": "#migrating-roomeditorapp-to-revit-2015",
    "chunk_text": "<h3>Migrating RoomEditorApp to Revit 2015</h3><p>Yesterday I discussed the typical steps you would need to go through to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/compiling-the-revit-2015-sdk-and-migrating-bc-samples.html\">\nset up a Revit 2015 add-in development environment</a>.\n\n<p>My top priority right now is getting my Tech Summit talk prepared, which involves adding some functionality to the room editor application add-in.</p>\n<p>I decided to migrate it to Revit 2015 as well.</p>\n<p>Here are the steps I took:</p>\n<ul>\n<li><a href=\"#2\">Flat RoomEditorApp Migration</a></li>\n<li><a href=\"#3\">Selection.Elements is Obsolete</a></li>\n<li><a href=\"#4\">ViewSheet.Views is Obsolete</a></li>\n<li><a href=\"#5\">Enabling CopySourceAsHtml for Visual Studio 2012</a></li>\n<li><a href=\"#6\">Download</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>Flat RoomEditorApp Migration</h4>\n<p>Just like\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/compiling-the-revit-2015-sdk-and-migrating-bc-samples.html#5\">\nThe Building Coder sample migration</a> yesterday,\n\nthe flat migration proved very easy.</p>\n<p>I repeated the same steps:</p>\n<ul>\n<li>Update the Revit API assembly references.</li>\n<li>Change the .NET framework from 4.0 to 4.5.</li>\n<li>Updated the version number.</li>\n<li>Rebuild all.</li>\n</ul>\n<p>That was it.</p>\n<p>The flat migration compiles with zero errors.</p>\n<p>The resulting add-in works fine.</p>\n<p>This probably actually means that the Revit 2014 add-in would work fine in Revit 2015 as well.</p>\n<p>The compilation does produce\n\n<a href=\"zip/roomeditorapp_migr_2015_a.txt\">five warnings</a> about deprecated API usage; five occurrences, actually, but only two distinct warnings, to be exact:</p>\n<ul>\n<li><a href=\"#3\">Autodesk.Revit.UI.Selection.Selection.Elements is obsolete</a>: This property is deprecated in Revit 2015. Use GetElementIds and SetElementIds instead.</li>\n<li><a href=\"#4\">Autodesk.Revit.DB.ViewSheet.Views is obsolete</a>: This property is obsolete in Revit 2015. Use GetAllPlacedViews instead.</li>\n</ul>\n<p>Let's take a look at those and work towards a completely clean build.</p>\n<a name=\"3\"></a>\n<h4>Selection.Elements is Obsolete</h4>\n<p>The external command causing the first warning is CmdUploadRooms, where the following code is used to check for pre-selected rooms:</p>\n<pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">if</span>( 0 &lt; sel.Elements.Size )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( !( e <span class=\"blue\">is</span> <span class=\"teal\">Room</span> ) )\n      {\n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Please pre-select only room\"</span>\n          + <span class=\"maroon\">\" elements before running this command.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ids )\n      {\n        ids = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( 1 );\n      }\n \n      ids.Add( e.Id );\n    }\n  }\n</pre>\n<p>Removing that warning is simple, and I can even shorten the code, like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = sel.GetElementIds();\n \n  <span class=\"blue\">if</span>( 0 &lt; ids.Count )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n    {\n      <span class=\"blue\">if</span>( !( doc.GetElement( id ) <span class=\"blue\">is</span> <span class=\"teal\">Room</span> ) )\n      {\n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Please pre-select only room\"</span>\n          + <span class=\"maroon\">\" elements before running this command.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n    }\n  }\n</pre>\n<a name=\"4\"></a>\n<h4>ViewSheet.Views is Obsolete</h4>\n<p>The second warning is also trivial to fix.</p>\n<p>One of the occurrences is this simple loop:</p>\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> v <span class=\"blue\">in</span> sheet.Views )\n  {\n    GetViewTransform( v );\n  }\n</pre>\n<p>The obsolete Views property returns an obsolete ViewSet class instance.</p>\n<p>The replacement method GetAllPlacedViews returns a set of element ids instead, in the shape of a generic set <code><span class=\"teal\">ISet</span>&lt;<span class=\"teal\">ElementId</span>&gt;</code>.</p>\n<p>You can use the generic LINQ Select method to convert the element ids straight to View object instances like this, if you like:</p>\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> v <span class=\"blue\">in</span> sheet.GetAllPlacedViews()\n    .Select&lt;<span class=\"teal\">ElementId</span>, <span class=\"teal\">View</span>&gt;( id =&gt;\n      doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">View</span> ) )\n  {\n    GetViewTransform( v );\n  }\n</pre>\n<p>Similar conversions resolve the other two warnings concerning this property.</p>\n<a name=\"5\"></a>\n<h4>Enabling CopySourceAsHtml for Visual Studio 2012</h4>\n<p>As you see, I presented some syntax coloured C# source code above, copied and pasted from Visual Studio 2012.</p>\n<p>I am still using the J.T. Leigh\n\n<a href=\"http://copysourceashtml.codeplex.com\">\nCopySourceAsHtml</a> utility\n\nas described in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/updated-sdk-2012-products-and-source-code-colourisation.html#4\">\nThe Building Coder source code colour coder</a>\n\nand my\n\n<a href=\"zip/pycolorize2014.py\">pycolorize.py Python script</a> to\n\nstrip some extraneous baggage from the HTML code before inserting it into the blog text.</p>\n<p>Luckily, the description of how to\n\n<a href=\"http://blogs.microsoft.co.il/applisec/2010/02/25/copyashtml-in-visual-studio-2010\">\nuse CopySourceAsHtml for Visual Studio 2010</a> also\n\napplies to Visual Studio 2012, more or less, as I found out by trial and error.</p>\n<p>I now have three versions of the CopySourceAsHtml add-in file located in the following folders for Visual Studio 2008, 2010 and 2012:</p>\n<ul>\n<li>C:\\Users\\tammikj\\Documents\\Visual Studio 2008\\Addins\\CopySourceAsHtml.AddIn</li>\n<li>C:\\Users\\tammikj\\Documents\\Visual Studio 2010\\Addins\\CopySourceAsHtml.AddIn</li>\n<li>C:\\Users\\tammikj\\Documents\\Visual Studio 2012\\Addins\\CopySourceAsHtml.AddIn</li>\n</ul>\n<p>The add-in file that I am using for Visual Studio 2012 looks like this:</p>\n<pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\"> </span><span class=\"red\">encoding</span><span class=\"blue\">=</span>\"<span class=\"blue\">utf-8</span>\"<span class=\"blue\"> </span><span class=\"red\">standalone</span><span class=\"blue\">=</span>\"<span class=\"blue\">no</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">Extensibility</span><span class=\"blue\"> </span><span class=\"red\">xmlns</span><span class=\"blue\">=</span>\n<span class=\"blue\">  </span>\"<span class=\"blue\">http://schemas.microsoft.com/AutomationExtensibility</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">HostApplication</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>Microsoft Visual Studio Macros<span class=\"blue\">&lt;/</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Version</span><span class=\"blue\">&gt;</span>11.0<span class=\"blue\">&lt;/</span><span class=\"maroon\">Version</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">HostApplication</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">HostApplication</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>Microsoft Visual Studio<span class=\"blue\">&lt;/</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Version</span><span class=\"blue\">&gt;</span>11.0<span class=\"blue\">&lt;/</span><span class=\"maroon\">Version</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">HostApplication</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Addin</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">FriendlyName</span><span class=\"blue\">&gt;</span>CopySourceAsHtml<span class=\"blue\">&lt;/</span><span class=\"maroon\">FriendlyName</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Description</span><span class=\"blue\">&gt;</span>\n      Adds support to Microsoft Visual Studio 2012\n      for copying source code, syntax highlighting,\n      and line numbers as HTML.\n<span class=\"blue\">    &lt;/</span><span class=\"maroon\">Description</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Assembly</span><span class=\"blue\">&gt;</span>\n      JTLeigh.Tools.Development.CopySourceAsHtml,\n      Version=3.0.3215.1, Culture=neutral,\n      PublicKeyToken=bb2a58bdc03d2e14,\n      processorArchitecture=MSIL\n<span class=\"blue\">    &lt;/</span><span class=\"maroon\">Assembly</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">FullClassName</span><span class=\"blue\">&gt;</span>\n      JTLeigh.Tools.Development.CopySourceAsHtml.Connect\n<span class=\"blue\">    &lt;/</span><span class=\"maroon\">FullClassName</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LoadBehavior</span><span class=\"blue\">&gt;</span>1<span class=\"blue\">&lt;/</span><span class=\"maroon\">LoadBehavior</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">CommandPreload</span><span class=\"blue\">&gt;</span>0<span class=\"blue\">&lt;/</span><span class=\"maroon\">CommandPreload</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">CommandLineSafe</span><span class=\"blue\">&gt;</span>0<span class=\"blue\">&lt;/</span><span class=\"maroon\">CommandLineSafe</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Addin</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">Extensibility</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>For the sake of completeness, the current version of my Python clean-up script looks like this:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/python\n# -*- coding: iso-8859-15 -*-\n#\n# pycolorize.py - massage colorised HTML source code copied from Visual Studio\n#\n# jeremy tammik, autodesk inc, 2009-02-05\n#\n# History:\n#\n# 2009-02-05 initial version\n# 2009-05-22 updated to support Visual Studio 2008\n# 2011-04-19 updated to support Visual Studio 2010 and CopySourceAsHtml 3.0\n# 2013-05-21 migrated to mac os x unix, cf. http://coffeeghost.net/src/pyperclip.py\n#\n# read a block of text from a file or the windows clipboard\n# replace cb[12345] by the appropriate colour\n# remove the style and pre tags\n#\nimport os, re\n\ncolor_map = { '#2b91af' : 'teal', '#a31515' : 'maroon' }\n\ndef getTextMac():\n  outf = os.popen('pbpaste', 'r')\n  content = outf.read()\n  outf.close()\n  return content\n\ndef setTextMac(text):\n  outf = os.popen('pbcopy', 'w')\n  outf.write(text)\n  outf.close()\n\ndef getTextWin():\n  w.OpenClipboard()\n  d = w.GetClipboardData( win32con.CF_TEXT )\n  w.CloseClipboard()\n  return d\n\ndef setTextWin( aType, aString ):\n  w.OpenClipboard()\n  w.EmptyClipboard()\n  w.SetClipboardData( aType, aString )\n  w.CloseClipboard()\n\n_regexColor = re.compile( '\\.(cb[1-9]) \\{ color\\: ([#0-9a-z]+); \\}' )\n_regexStyle = re.compile( '(&lt;style type=\"text/css\"&gt;.*&lt;/style&gt;\\s*&lt;div class=\"cf\"&gt;\\s*)', re.DOTALL )\n_regexEnd = re.compile( '(&lt;/pre&gt;\\s*&lt;/div&gt;)', re.DOTALL )\n#_regexPreEnd = re.compile( '(&lt;/pre&gt;$)' )\n\ndef replace_cb_by_color( s ):\n  \"Search for '.cb1 { color: blue; }' and globally replace cb[1-9] by the appropriate colour.\"\n  m = _regexColor.search( s )\n  if m:\n    #print 'match found'\n    a = m.groups()\n    #print a\n    if 2 == len( a ):\n      color = a[1]\n      #print color\n      if color_map.has_key( color ): color = color_map[color]\n      #print color\n      return True, s.replace( a[0], color )\n  #else:\n  #  print 'no match found'\n\n  return False, s\n\ndef main():\n  'Convert Visual Studio CopySourceAsHtml colour styles to a more compact form.'\n\n  s = getTextMac()\n  #s = '''&lt;style type=\"text/css\"&gt; ... '''\n  #print s\n\n  go = True\n  while go: go, s = replace_cb_by_color( s )\n  #print s\n\n  m = _regexStyle.match( s )\n  #print m\n\n  if m:\n    s = s.replace( m.group( 1 ), '' )\n    #print s\n    s = s.replace( '&lt;pre class=\"cl\"&gt;', '' )\n    #print s\n    m = _regexEnd.search( s )\n    #print m\n\n  if m:\n    s = s.replace( m.group( 1 ), '' )\n    #print s\n    s = s.strip().replace( '&lt;/pre&gt;', '' )\n    #print s\n\n  setTextMac( s )\n  #print s\n\nif __name__ == '__main__':\n  main()\n</pre>\n<a name=\"6\"></a>\n<h4>Download</h4>\n<p>The RoomEditorApp source code, Visual Studio solution and add-in manifest live in the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">\nRoomEditorApp GitHub repository</a>.</p>\n<p>The versions discussed above are\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2015.0.2.6\">\nrelease 2015.0.2.6</a> for\n\nthe flat migration and\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2015.0.2.7\">\nrelease 2015.0.2.7</a> with\n\nthe deprecated API usage cleaned up.</p>\n<p>Next step: finally get going with the Tech Summit preparation!</p>\n</p>"
  },
  {
    "original_filename": "1137_roomeditorapp_2015",
    "header_text": "Flat RoomEditorApp Migration",
    "local_header_href": "#flat-roomeditorapp-migration",
    "chunk_text": "<h4>Flat RoomEditorApp Migration</h4><p>Just like\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/compiling-the-revit-2015-sdk-and-migrating-bc-samples.html#5\">\nThe Building Coder sample migration</a> yesterday,\n\nthe flat migration proved very easy.</p><p>I repeated the same steps:</p><ul>\n<li>Update the Revit API assembly references.</li>\n<li>Change the .NET framework from 4.0 to 4.5.</li>\n<li>Updated the version number.</li>\n<li>Rebuild all.</li>\n</ul><p>That was it.</p><p>The flat migration compiles with zero errors.</p><p>The resulting add-in works fine.</p><p>This probably actually means that the Revit 2014 add-in would work fine in Revit 2015 as well.</p><p>The compilation does produce\n\n<a href=\"zip/roomeditorapp_migr_2015_a.txt\">five warnings</a> about deprecated API usage; five occurrences, actually, but only two distinct warnings, to be exact:</p><ul>\n<li><a href=\"#3\">Autodesk.Revit.UI.Selection.Selection.Elements is obsolete</a>: This property is deprecated in Revit 2015. Use GetElementIds and SetElementIds instead.</li>\n<li><a href=\"#4\">Autodesk.Revit.DB.ViewSheet.Views is obsolete</a>: This property is obsolete in Revit 2015. Use GetAllPlacedViews instead.</li>\n</ul><p>Let's take a look at those and work towards a completely clean build.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1137_roomeditorapp_2015",
    "header_text": "Selection.Elements is Obsolete",
    "local_header_href": "#selectionelements-is-obsolete",
    "chunk_text": "<h4>Selection.Elements is Obsolete</h4><p>The external command causing the first warning is CmdUploadRooms, where the following code is used to check for pre-selected rooms:</p><pre class=\"code\">\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">if</span>( 0 &lt; sel.Elements.Size )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( !( e <span class=\"blue\">is</span> <span class=\"teal\">Room</span> ) )\n      {\n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Please pre-select only room\"</span>\n          + <span class=\"maroon\">\" elements before running this command.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ids )\n      {\n        ids = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( 1 );\n      }\n \n      ids.Add( e.Id );\n    }\n  }\n</pre><p>Removing that warning is simple, and I can even shorten the code, like this:</p><pre class=\"code\">\n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = sel.GetElementIds();\n \n  <span class=\"blue\">if</span>( 0 &lt; ids.Count )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n    {\n      <span class=\"blue\">if</span>( !( doc.GetElement( id ) <span class=\"blue\">is</span> <span class=\"teal\">Room</span> ) )\n      {\n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Please pre-select only room\"</span>\n          + <span class=\"maroon\">\" elements before running this command.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n    }\n  }\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "1137_roomeditorapp_2015",
    "header_text": "ViewSheet.Views is Obsolete",
    "local_header_href": "#viewsheetviews-is-obsolete",
    "chunk_text": "<h4>ViewSheet.Views is Obsolete</h4><p>The second warning is also trivial to fix.</p><p>One of the occurrences is this simple loop:</p><pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> v <span class=\"blue\">in</span> sheet.Views )\n  {\n    GetViewTransform( v );\n  }\n</pre><p>The obsolete Views property returns an obsolete ViewSet class instance.</p><p>The replacement method GetAllPlacedViews returns a set of element ids instead, in the shape of a generic set <code><span class=\"teal\">ISet</span>&lt;<span class=\"teal\">ElementId</span>&gt;</code>.</p><p>You can use the generic LINQ Select method to convert the element ids straight to View object instances like this, if you like:</p><pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> v <span class=\"blue\">in</span> sheet.GetAllPlacedViews()\n    .Select&lt;<span class=\"teal\">ElementId</span>, <span class=\"teal\">View</span>&gt;( id =&gt;\n      doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">View</span> ) )\n  {\n    GetViewTransform( v );\n  }\n</pre><p>Similar conversions resolve the other two warnings concerning this property.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1137_roomeditorapp_2015",
    "header_text": "Enabling CopySourceAsHtml for Visual Studio 2012",
    "local_header_href": "#enabling-copysourceashtml-for-visual-studio-2012",
    "chunk_text": "<h4>Enabling CopySourceAsHtml for Visual Studio 2012</h4><p>As you see, I presented some syntax coloured C# source code above, copied and pasted from Visual Studio 2012.</p><p>I am still using the J.T. Leigh\n\n<a href=\"http://copysourceashtml.codeplex.com\">\nCopySourceAsHtml</a> utility\n\nas described in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/updated-sdk-2012-products-and-source-code-colourisation.html#4\">\nThe Building Coder source code colour coder</a>\n\nand my\n\n<a href=\"zip/pycolorize2014.py\">pycolorize.py Python script</a> to\n\nstrip some extraneous baggage from the HTML code before inserting it into the blog text.</p><p>Luckily, the description of how to\n\n<a href=\"http://blogs.microsoft.co.il/applisec/2010/02/25/copyashtml-in-visual-studio-2010\">\nuse CopySourceAsHtml for Visual Studio 2010</a> also\n\napplies to Visual Studio 2012, more or less, as I found out by trial and error.</p><p>I now have three versions of the CopySourceAsHtml add-in file located in the following folders for Visual Studio 2008, 2010 and 2012:</p><ul>\n<li>C:\\Users\\tammikj\\Documents\\Visual Studio 2008\\Addins\\CopySourceAsHtml.AddIn</li>\n<li>C:\\Users\\tammikj\\Documents\\Visual Studio 2010\\Addins\\CopySourceAsHtml.AddIn</li>\n<li>C:\\Users\\tammikj\\Documents\\Visual Studio 2012\\Addins\\CopySourceAsHtml.AddIn</li>\n</ul><p>The add-in file that I am using for Visual Studio 2012 looks like this:</p><pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\"> </span><span class=\"red\">encoding</span><span class=\"blue\">=</span>\"<span class=\"blue\">utf-8</span>\"<span class=\"blue\"> </span><span class=\"red\">standalone</span><span class=\"blue\">=</span>\"<span class=\"blue\">no</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">Extensibility</span><span class=\"blue\"> </span><span class=\"red\">xmlns</span><span class=\"blue\">=</span>\n<span class=\"blue\">  </span>\"<span class=\"blue\">http://schemas.microsoft.com/AutomationExtensibility</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">HostApplication</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>Microsoft Visual Studio Macros<span class=\"blue\">&lt;/</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Version</span><span class=\"blue\">&gt;</span>11.0<span class=\"blue\">&lt;/</span><span class=\"maroon\">Version</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">HostApplication</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">HostApplication</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>Microsoft Visual Studio<span class=\"blue\">&lt;/</span><span class=\"maroon\">Name</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Version</span><span class=\"blue\">&gt;</span>11.0<span class=\"blue\">&lt;/</span><span class=\"maroon\">Version</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">HostApplication</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Addin</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">FriendlyName</span><span class=\"blue\">&gt;</span>CopySourceAsHtml<span class=\"blue\">&lt;/</span><span class=\"maroon\">FriendlyName</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Description</span><span class=\"blue\">&gt;</span>\n      Adds support to Microsoft Visual Studio 2012\n      for copying source code, syntax highlighting,\n      and line numbers as HTML.\n<span class=\"blue\">    &lt;/</span><span class=\"maroon\">Description</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Assembly</span><span class=\"blue\">&gt;</span>\n      JTLeigh.Tools.Development.CopySourceAsHtml,\n      Version=3.0.3215.1, Culture=neutral,\n      PublicKeyToken=bb2a58bdc03d2e14,\n      processorArchitecture=MSIL\n<span class=\"blue\">    &lt;/</span><span class=\"maroon\">Assembly</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">FullClassName</span><span class=\"blue\">&gt;</span>\n      JTLeigh.Tools.Development.CopySourceAsHtml.Connect\n<span class=\"blue\">    &lt;/</span><span class=\"maroon\">FullClassName</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LoadBehavior</span><span class=\"blue\">&gt;</span>1<span class=\"blue\">&lt;/</span><span class=\"maroon\">LoadBehavior</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">CommandPreload</span><span class=\"blue\">&gt;</span>0<span class=\"blue\">&lt;/</span><span class=\"maroon\">CommandPreload</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">CommandLineSafe</span><span class=\"blue\">&gt;</span>0<span class=\"blue\">&lt;/</span><span class=\"maroon\">CommandLineSafe</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Addin</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">Extensibility</span><span class=\"blue\">&gt;</span>\n</pre><p>For the sake of completeness, the current version of my Python clean-up script looks like this:</p><pre class=\"prettyprint\">\n#!/usr/bin/python\n# -*- coding: iso-8859-15 -*-\n#\n# pycolorize.py - massage colorised HTML source code copied from Visual Studio\n#\n# jeremy tammik, autodesk inc, 2009-02-05\n#\n# History:\n#\n# 2009-02-05 initial version\n# 2009-05-22 updated to support Visual Studio 2008\n# 2011-04-19 updated to support Visual Studio 2010 and CopySourceAsHtml 3.0\n# 2013-05-21 migrated to mac os x unix, cf. http://coffeeghost.net/src/pyperclip.py\n#\n# read a block of text from a file or the windows clipboard\n# replace cb[12345] by the appropriate colour\n# remove the style and pre tags\n#\nimport os, re\n\ncolor_map = { '#2b91af' : 'teal', '#a31515' : 'maroon' }\n\ndef getTextMac():\n  outf = os.popen('pbpaste', 'r')\n  content = outf.read()\n  outf.close()\n  return content\n\ndef setTextMac(text):\n  outf = os.popen('pbcopy', 'w')\n  outf.write(text)\n  outf.close()\n\ndef getTextWin():\n  w.OpenClipboard()\n  d = w.GetClipboardData( win32con.CF_TEXT )\n  w.CloseClipboard()\n  return d\n\ndef setTextWin( aType, aString ):\n  w.OpenClipboard()\n  w.EmptyClipboard()\n  w.SetClipboardData( aType, aString )\n  w.CloseClipboard()\n\n_regexColor = re.compile( '\\.(cb[1-9]) \\{ color\\: ([#0-9a-z]+); \\}' )\n_regexStyle = re.compile( '(&lt;style type=\"text/css\"&gt;.*&lt;/style&gt;\\s*&lt;div class=\"cf\"&gt;\\s*)', re.DOTALL )\n_regexEnd = re.compile( '(&lt;/pre&gt;\\s*&lt;/div&gt;)', re.DOTALL )\n#_regexPreEnd = re.compile( '(&lt;/pre&gt;$)' )\n\ndef replace_cb_by_color( s ):\n  \"Search for '.cb1 { color: blue; }' and globally replace cb[1-9] by the appropriate colour.\"\n  m = _regexColor.search( s )\n  if m:\n    #print 'match found'\n    a = m.groups()\n    #print a\n    if 2 == len( a ):\n      color = a[1]\n      #print color\n      if color_map.has_key( color ): color = color_map[color]\n      #print color\n      return True, s.replace( a[0], color )\n  #else:\n  #  print 'no match found'\n\n  return False, s\n\ndef main():\n  'Convert Visual Studio CopySourceAsHtml colour styles to a more compact form.'\n\n  s = getTextMac()\n  #s = '''&lt;style type=\"text/css\"&gt; ... '''\n  #print s\n\n  go = True\n  while go: go, s = replace_cb_by_color( s )\n  #print s\n\n  m = _regexStyle.match( s )\n  #print m\n\n  if m:\n    s = s.replace( m.group( 1 ), '' )\n    #print s\n    s = s.replace( '&lt;pre class=\"cl\"&gt;', '' )\n    #print s\n    m = _regexEnd.search( s )\n    #print m\n\n  if m:\n    s = s.replace( m.group( 1 ), '' )\n    #print s\n    s = s.strip().replace( '&lt;/pre&gt;', '' )\n    #print s\n\n  setTextMac( s )\n  #print s\n\nif __name__ == '__main__':\n  main()\n</pre><a name=\"6\"></a>"
  },
  {
    "original_filename": "1137_roomeditorapp_2015",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>The RoomEditorApp source code, Visual Studio solution and add-in manifest live in the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">\nRoomEditorApp GitHub repository</a>.</p><p>The versions discussed above are\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2015.0.2.6\">\nrelease 2015.0.2.6</a> for\n\nthe flat migration and\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2015.0.2.7\">\nrelease 2015.0.2.7</a> with\n\nthe deprecated API usage cleaned up.</p><p>Next step: finally get going with the Tech Summit preparation!</p>"
  }
]