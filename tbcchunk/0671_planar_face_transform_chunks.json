[
  {
    "original_filename": "0671_planar_face_transform",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0671_planar_face_transform",
    "header_text": "Planar Face Transform",
    "local_header_href": "#planar-face-transform",
    "chunk_text": "<h3>Planar Face Transform</h3><p>Here is another contribution by Joe Offord of \n\n<a href=\"http://www.enclos.com\">\nEnclos</a>,\n\nwho already shared valuable insights on accessing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/curtain-wall-geometry.html\">\ncurtain wall geometry</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/speed-up-selection.html\">\nspeeding up the interactive selection process</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/mirroring-in-a-new-family-and-changing-active-view.html\">\nmirroring in a new family and changing the active view</a>.\n\n<p>Above all, he implements all his stuff in VB, so this is also something for you VB aficionados.\n\n<p>This time, Joe looks at a command that redraws a planar face's edges in a drafting view.  \nThe issue is somewhat related to the discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html\">\npolygon transformations</a>.\n\n<p>However, instead of using rotations and translations, which can be difficult to determine in 3D, Joe wrote a utility function that re-maps the global coordinate system to the planar face's coordinate system using vectors and origins.\n\n<p>The command prompts the user to select a planar face on an elements, creates a new drafting view, retrieves the edges of the selected face, and transforms them from the 3D space to the drafting view.\n\n<p>To test this, I selected the following slightly lopsided wall in 3D:</p>\n<center>\n<img alt=\"Wall in 3D\" src=\"img/planar_face_transform_wall_in_3d.png\"/>\n</center>\n<p>The command generated a new drafting view showing the wall profile edges like this:</p>\n<center>\n<img alt=\"Transformed wall profile in drafting view\" src=\"img/planar_face_transform_wall_profile.png\"/>\n</center>\n<p>Here is the Execute method implementation for the mainline of the command:\n\n<pre class=\"code\">\n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute( _\n    <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>, _\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>, _\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> <span class=\"teal\">ElementSet</span>) <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n \n    <span class=\"blue\">Dim</span> uiapp <span class=\"blue\">As</span> <span class=\"teal\">UIApplication</span> = commandData.Application\n    <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> <span class=\"teal\">Application</span> = uiapp.Application\n    <span class=\"blue\">Dim</span> uidoc <span class=\"blue\">As</span> <span class=\"teal\">UIDocument</span> = uiapp.ActiveUIDocument\n    <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span> = uidoc.Document\n    <span class=\"blue\">Dim</span> sel <span class=\"blue\">As</span> <span class=\"teal\">Selection</span> = uidoc.Selection\n \n    <span class=\"blue\">Try</span>\n      <span class=\"blue\">Dim</span> ref <span class=\"blue\">As</span> <span class=\"teal\">Reference</span> = sel.PickObject( _\n        <span class=\"teal\">ObjectType</span>.Face, <span class=\"maroon\">\"Select a face\"</span>)\n \n      <span class=\"blue\">Dim</span> elem <span class=\"blue\">As</span> <span class=\"teal\">Element</span> = doc.GetElement(ref)\n \n      <span class=\"blue\">Dim</span> gObj <span class=\"blue\">As</span> <span class=\"teal\">GeometryObject</span> _\n        = elem.GetGeometryObjectFromReference(ref)\n \n      <span class=\"blue\">Dim</span> face <span class=\"blue\">As</span> <span class=\"teal\">PlanarFace</span> = <span class=\"blue\">TryCast</span>(gObj, <span class=\"teal\">PlanarFace</span>)\n \n      <span class=\"blue\">If</span> face <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n        MsgBox(<span class=\"maroon\">\"Not a planar face\"</span>)\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n      <span class=\"blue\">Dim</span> v <span class=\"blue\">As</span> <span class=\"teal\">ViewDrafting</span> = <span class=\"blue\">Nothing</span>\n \n      <span class=\"blue\">Dim</span> tr <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc, <span class=\"maroon\">\"Draw Face\"</span>)\n      tr.Start()\n \n      <span class=\"blue\">Try</span>\n        v = doc.Create.NewViewDrafting <span class=\"green\">'create a new view</span>\n        v.Scale = 48 <span class=\"green\">'1/4\" = 1'-0\"</span>\n \n        <span class=\"green\">'this transform re-orients the global </span>\n        <span class=\"green\">'coordinate system to the face's coordinate system</span>\n        <span class=\"blue\">Dim</span> trans <span class=\"blue\">As</span> <span class=\"teal\">Transform</span> _\n          = <span class=\"teal\">Util</span>.PlanarFaceTransform(face)\n \n        <span class=\"blue\">For</span> <span class=\"blue\">Each</span> eArr <span class=\"blue\">As</span> <span class=\"teal\">EdgeArray</span> <span class=\"blue\">In</span> face.EdgeLoops\n          <span class=\"blue\">For</span> <span class=\"blue\">Each</span> e <span class=\"blue\">As</span> <span class=\"teal\">Edge</span> <span class=\"blue\">In</span> eArr\n            <span class=\"blue\">Dim</span> c <span class=\"blue\">As</span> <span class=\"teal\">Curve</span> = e.AsCurveFollowingFace(face)\n            c = c.Transformed(trans) <span class=\"green\">'orient the curve on the XY plane</span>\n            doc.Create.NewDetailCurve(v, c) <span class=\"green\">'draw the curve</span>\n          <span class=\"blue\">Next</span>\n        <span class=\"blue\">Next</span>\n \n        tr.Commit()\n      <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> <span class=\"teal\">Exception</span>\n        tr.RollBack()\n        MsgBox(<span class=\"maroon\">\"Error: \"</span> + ex.Message)\n      <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n \n      <span class=\"blue\">If</span> tr.GetStatus = <span class=\"teal\">TransactionStatus</span>.Committed <span class=\"blue\">Then</span>\n        uidoc.ActiveView = v\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> <span class=\"teal\">Exception</span>\n      MsgBox(<span class=\"maroon\">\"Error: \"</span> + ex.Message)\n    <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n \n    <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre>\n<p>The transformation from the planar face coordinate system is created by the following two utility methods:\n\n<pre class=\"code\">\n  <span class=\"green\">''' </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"green\">''' Return a transform that changes a x,y,z </span>\n  <span class=\"green\">''' coordinate system to a new x',y',z' system</span>\n  <span class=\"green\">''' </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">Public</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Function</span> TransformByVectors( _\n    <span class=\"blue\">ByVal</span> oldX <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>, _\n    <span class=\"blue\">ByVal</span> oldY <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>, _\n    <span class=\"blue\">ByVal</span> oldZ <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>, _\n    <span class=\"blue\">ByVal</span> oldOrigin <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>, _\n    <span class=\"blue\">ByVal</span> newX <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>, _\n    <span class=\"blue\">ByVal</span> newY <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>, _\n    <span class=\"blue\">ByVal</span> newZ <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>, _\n    <span class=\"blue\">ByVal</span> newOrigin <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>) <span class=\"blue\">As</span> <span class=\"teal\">Transform</span>\n \n    <span class=\"green\">' [new vector] = [transform]*[old vector]</span>\n    <span class=\"green\">' [3x1] = [3x4] * [4x1]</span>\n    <span class=\"green\">'</span>\n    <span class=\"green\">' [v'x]   [ i*i'  j*i'  k*i'  translationX' ]   [vx]</span>\n    <span class=\"green\">' [v'y] = [ i*j'  j*j'  k*j'  translationY' ] * [vy]</span>\n    <span class=\"green\">' [v'z]   [ i*k'  j*k'  k*k'  translationZ' ]   [vz]</span>\n    <span class=\"green\">'                                               [1 ]</span>\n    <span class=\"blue\">Dim</span> t <span class=\"blue\">As</span> <span class=\"teal\">Transform</span> = <span class=\"teal\">Transform</span>.Identity\n \n    <span class=\"blue\">Dim</span> xx <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldX.DotProduct(newX)\n    <span class=\"blue\">Dim</span> xy <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldX.DotProduct(newY)\n    <span class=\"blue\">Dim</span> xz <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldX.DotProduct(newZ)\n \n    <span class=\"blue\">Dim</span> yx <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldY.DotProduct(newX)\n    <span class=\"blue\">Dim</span> yy <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldY.DotProduct(newY)\n    <span class=\"blue\">Dim</span> yz <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldY.DotProduct(newZ)\n \n    <span class=\"blue\">Dim</span> zx <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldZ.DotProduct(newX)\n    <span class=\"blue\">Dim</span> zy <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldZ.DotProduct(newY)\n    <span class=\"blue\">Dim</span> zz <span class=\"blue\">As</span> <span class=\"blue\">Double</span> = oldZ.DotProduct(newZ)\n \n    t.BasisX = <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>(xx, xy, xz)\n    t.BasisY = <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>(yx, yy, yz)\n    t.BasisZ = <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>(zx, zy, zz)\n \n    <span class=\"green\">' The movement of the origin point </span>\n    <span class=\"green\">' in the old coordinate system</span>\n \n    <span class=\"blue\">Dim</span> translation <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = newOrigin - oldOrigin\n \n    <span class=\"green\">' Convert the translation into coordinates </span>\n    <span class=\"green\">' in the new coordinate system</span>\n \n    <span class=\"blue\">Dim</span> translationNewX <span class=\"blue\">As</span> <span class=\"blue\">Double</span> _\n      = xx * translation.X _\n        + yx * translation.Y _\n        + zx * translation.Z\n \n    <span class=\"blue\">Dim</span> translationNewY <span class=\"blue\">As</span> <span class=\"blue\">Double</span> _\n      = xy * translation.X _\n        + yy * translation.Y _\n        + zy * translation.Z\n \n    <span class=\"blue\">Dim</span> translationNewZ <span class=\"blue\">As</span> <span class=\"blue\">Double</span> _\n      = xz * translation.X _\n        + yz * translation.Y _\n        + zz * translation.Z\n \n    t.Origin = <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>( _\n      -translationNewX, _\n      -translationNewY, _\n      -translationNewZ)\n \n    <span class=\"blue\">Return</span> t\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Shared</span> <span class=\"blue\">Function</span> PlanarFaceTransform( _\n    <span class=\"blue\">ByVal</span> face <span class=\"blue\">As</span> <span class=\"teal\">PlanarFace</span>) <span class=\"blue\">As</span> <span class=\"teal\">Transform</span>\n \n    <span class=\"blue\">Return</span> <span class=\"teal\">Util</span>.TransformByVectors( _\n      <span class=\"teal\">XYZ</span>.BasisX, _\n      <span class=\"teal\">XYZ</span>.BasisY, _\n      <span class=\"teal\">XYZ</span>.BasisZ, _\n      <span class=\"teal\">XYZ</span>.Zero, _\n      face.Vector(0), _\n      face.Vector(1), _\n      face.Normal, _\n      face.Origin)\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre>\n<p>Here is \n\n<a href=\"zip/PlanarFaceTransform.zip\">\nPlanarFaceTransform.zip</a> including \n\nthe complete source code and Visual Studio solution of this command.\n\n<p>Many thanks to Joe for sharing this!\n</p></p></p></p></p></p></p></p></p>"
  }
]