[
  {
    "original_filename": "1324_revitlookup_python",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1324_revitlookup_python",
    "header_text": "RevitLookup in Python Shell and Multiple Release Solution",
    "local_header_href": "#revitlookup-in-python-shell-and-multiple-release-solution",
    "chunk_text": "<h3>RevitLookup in Python Shell and Multiple Release Solution</h3><p>Here is some exciting news from Daren Thomas on\n<a href=\"https://github.com/jeremytammik/RevitLookup\">\nRevitLookup</a> and the\n<a href=\"https://github.com/architecture-building-systems/revitpythonshell\">\nRevit Python Shell</a>.</p><p>The Python and Ruby shells came up a couple of times recently, and I also mentioned Daren's initial thoughts on making the RevitLookup snoop functionality easily accessible from within the interactive Python IDE:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2015/04/curved-wall-elevation-profile-and-creator-class-update.html#6\">Curved wall elevation profile implementation in Python</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2015/05/live-development-and-a-share-bar.html#3\">Live development</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2015/05/copyelements-revit-2016-scalability-python-and-ruby-shells.html#4\">Revit 2016 Python shell and RevitLookup incorporation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2015/05/copyelements-revit-2016-scalability-python-and-ruby-shells.html#5\">Revit 2016 Ruby shell</a></li>\n</ul><p>This idea has now come to fruition, and more easily than one might expect.</p><p>In Daren's own words:</p><p>The current version of RPS now includes a function 'lookup' in the startup script. Passing in an Element or an ElementId object will open up the \"Snoop Objects\" window if RevitLookup is installed. Otherwise, a message will be displayed directing the user to the RevitLookup GitHub repository.</p><p>I describe it in more detail in this discussion on <a href=\"http://darenatwork.blogspot.ch/2015/05/revitlookup-and-revitpythonshell.html\">RevitLookup and RevitPythonShell</a>.</p><p>Also, here is a technique I found useful in the RPS project: I edit the .csproj file itself and change the way the Revit API assembly DLLs RevitAPI.dll and RevitAPIUI.dll are referenced:</p><pre class=\"prettyprint\">\n  &lt;ItemGroup Condition=\"'$(Configuration)' == 'Debug 2014'\"&gt;\n    &lt;Reference Include=\"RevitAPI\"&gt;\n      &lt;HintPath&gt;..\\RequiredLibraries\\Revit2014\\RevitAPI.dll&lt;/HintPath&gt;\n    &lt;/Reference&gt;\n    &lt;Reference Include=\"RevitAPIUI\"&gt;\n      &lt;HintPath&gt;..\\RequiredLibraries\\Revit2014\\RevitAPIUI.dll&lt;/HintPath&gt;\n    &lt;/Reference&gt;\n  &lt;/ItemGroup&gt;\n  &lt;ItemGroup Condition=\"'$(Configuration)' == 'Debug 2015'\"&gt;\n    &lt;Reference Include=\"RevitAPI\"&gt;\n      &lt;HintPath&gt;..\\RequiredLibraries\\Revit2015\\RevitAPI.dll&lt;/HintPath&gt;\n    &lt;/Reference&gt;\n    &lt;Reference Include=\"RevitAPIUI\"&gt;\n      &lt;HintPath&gt;..\\RequiredLibraries\\Revit2015\\RevitAPIUI.dll&lt;/HintPath&gt;\n    &lt;/Reference&gt;\n  &lt;/ItemGroup&gt;\n  &lt;ItemGroup Condition=\"'$(Configuration)' == 'Debug 2016'\"&gt;\n    &lt;Reference Include=\"RevitAPI\"&gt;\n      &lt;HintPath&gt;..\\RequiredLibraries\\Revit2016\\RevitAPI.dll&lt;/HintPath&gt;\n    &lt;/Reference&gt;\n    &lt;Reference Include=\"RevitAPIUI\"&gt;\n      &lt;HintPath&gt;..\\RequiredLibraries\\Revit2016\\RevitAPIUI.dll&lt;/HintPath&gt;\n    &lt;/Reference&gt;\n  &lt;/ItemGroup&gt;\n</pre><p>I then included the API files for each supported version in a RequiredLibraries folder.\nWhen you change the configuration in Visual Studio (e.g., from \"Debug 2014\" to \"Debug 2016\"), the referenced assemblies also change (I think â€“ you might need to reload Visual Studio) and compilation works just fine!</p><p>This technique can be extended to add conditional compilation (but I think that is already handled by the VS UI).</p><p>Anyway. I'd say this is a first stab at the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/05/copyelements-revit-2016-scalability-python-and-ruby-shells.html#4\">\nRPS/RevitLookup collaboration</a> we discussed a week or two ago and is quite useful already.</p><p>Many thanks to Daren for the good news!</p><p>Congratulations on getting it up and running with such minimal fuss!</p><p>The multi-version support you implemented looks very nice and useful too.</p>"
  }
]