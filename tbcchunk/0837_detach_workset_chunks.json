[
  {
    "original_filename": "0837_detach_workset",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0837_detach_workset",
    "header_text": "Detach Workset and Task Dialogue Command Link Order",
    "local_header_href": "#detach-workset-and-task-dialogue-command-link-order",
    "chunk_text": "<h3>Detach Workset and Task Dialogue Command Link Order</h3><p>Here is a neat and simple solution using the DialogBoxShowing event to detach and discard worksets by Erik Eriksson of \n\n<a href=\"http://www.white.se\">\nWhite Arkitketer AB</a>,\n\nwho already provided a useful workaround to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/synchronize-with-central.html\">\nsynchronize with central</a> using \n\nSendKeys in combination with the Idling and DocumentSynchronizedWithCentral events.\n\n<p>Here is the issue:\n\n<p><strong>Question:</strong> We have a need to detach project files without worksets.\n\n<p>For instance, it would be great to just have an option to detach and discard worksets.\n\n<p>Why do we need this?\n\n<p>This would be useful for our in-house tools to diagnose project files.\nFor this to work, we need to have the project files without worksets, because we delete different types of elements and check the file size before and afterwards.\nTo determine a correct file size, we need to compact the files after every operation.\nThis cannot be done programmatically, but, for non-workshared files, it is performed automatically each time the project file is saved.\n\n<p>Currently, we execute the detach and discard operation manually.\nHowever, with big projects containing many files, it would be nice to do less of these things manually.\n\n<p><strong>Answer:</strong> The API currently does not provide this functionality directly.\n\n<p>However, the Revit 2013 API added some new document handling and worksharing changes which may help.\nHere is the description from the What's New section in the Revit API help file RevitAPI.chm:\n\n<a name=\"2\"></a>\n<h5>Worksharing properties</h5>\n<p>The information required to identify a workshared file on the central or local locations has changed due to changes to RevitServer. \nAs a result, the members\n\n<ul>\n<li>Application.GetRevitServerNetworkHosts\n<li>Application.CurrentRevitServerAccelerator \n<li>Document.WorksharingCentralFilename \n</li></li></li></ul>\n<p>replace the properties\n\n<ul>\n<li>Application.CentralServerName \n<li>Application.LocalServerName \n<li>Document.GetWorksharingCentralModelPath\n</li></li></li></ul>\n<p>The new members:\n\n<ul>\n<li>Application.GetWorksharingCentralGUID(ServerPath serverModelPath) \n<li>Document.WorksharingCentralGUID \n</li></li></ul>\n<p>provide read access to the worksharing central GUID of the given server-based model. \nThis is applicable only to workshared models saved in Revit 2013 or later.\n\n<h5>New overloads for Application.OpenDocumentFile and UIApplication.OpenAndActivateDocument</h5>\n<p>The new overloads support parameters OpenOptions and OpenOptionsForUI, respectively, to specify how a Revit document should be opened. \nBoth options classes currently offer the ability to detach the opened document from central if applicable.\n\n<ul>\n<li>The OpenOptions.DetachFromCentralOption property can be set to the default DoNotDetach or to DetachAndPreserve.\n\n<li>The OpenOptionsForUI.DetachFromCentralOption property can be set to the default DoNotDetach, DetachAndPreserveWorksets or DetachAndPrompt.\n</li></li></ul>\n<p>In other words, the OpenOptions argument that you pass in to the OpenDocumentFile and OpenAndActivateDocument methods can now use the DetachFromCentral option to specify whether or not a workset-enabled document is detached from its central document. \n\n\n<p><strong>Response:</strong> The new API functionality still does not provide the option of discarding the worksets.\n\n<p>I want the file to be a normal project file again.\n\n<p>OpenOptions holds the same options as OpenOptionsForUI (besides DetachAndPrompt). \nHowever, maybe I can catch that dialogue programmatically using the DialogBoxShowing event and override the result...\n\n<p>Success!\n\n<!--\n<p>However, I had some problems with the Taskdialog and for future reference: is it always so that the \n\nCommandLinks are ordered numerically?\n\n<p>So that CommandLink2 is always below CommandLink1 and above CommandLink3? (If I have a case with 3 links).\n-->\n<p>This is the code I used to fix it:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnDialogBoxShowing(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">DialogBoxShowingEventArgs</span> e )\n  {\n    <span class=\"teal\">TaskDialogShowingEventArgs</span> e2 \n      = e <span class=\"blue\">as</span> <span class=\"teal\">TaskDialogShowingEventArgs</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e2 &amp;&amp; e2.DialogId.Equals( \n      <span class=\"maroon\">\"TaskDialog_Detach_Model_From_Central\"</span> ) )\n    {\n      e.OverrideResult( \n        (<span class=\"blue\">int</span>) <span class=\"teal\">TaskDialogResult</span>.CommandLink2 );\n    }\n  }\n</pre>\n<p>The full implementation of this method actually includes a few more statements taking care of other dialogue boxes, which I omitted here.\n\n<p>I checked the IsWorkshared property after opening the file, and it was set to false.\nThis indicates that it is no longer workshared, which means that the operation to discard the worksets succeeded. \nWhen you discard worksets, the workshared central file goes back to being a normal non-workshared project file, just like what you obtain when starting from a normal project template.\n\n<p>One thing I do wonder about is whether CommandLink2 is always below CommandLink1 and above CommandLink3?\n\n\n<p><strong>Answer:</strong> It would appear so, since the description of the TaskDialog.AddCommandLink method clearly states that \"CommandLinks will always be shown in the dialog in the order of their ids\".\n\n<p>Also, as always, keep in mind that there is no guarantee that this will continue working in future releases.\nThe order of these options can change at any time, and the required functionality might even be added to the official API one of these days.\n\n<p>Congratulations on solving this, Erik, and thank you for sharing it and providing this helpful explanation!\n\n\n<a name=\"3\"></a>\n<h4>Setting IndependentTag Label to Pick Up a Parameter Value</h4>\n<p>I'll wrap up with a quick pointer to another AEC DevBlog article by Saikat Bhattacharya on\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/annotating-with-family-instance-parameter-data-with-independenttag-in-revit.html\">\ndefining the label displayed by an IndependentTag</a>.\n\nUnfortunately this does not seem to be possible programmatically.\nIt can however easily be achieved using an appropriate template or tag family configuration.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0837_detach_workset",
    "header_text": "Worksharing properties",
    "local_header_href": "#worksharing-properties",
    "chunk_text": "<h5>Worksharing properties</h5><p>The information required to identify a workshared file on the central or local locations has changed due to changes to RevitServer. \nAs a result, the members\n\n<ul>\n<li>Application.GetRevitServerNetworkHosts\n<li>Application.CurrentRevitServerAccelerator \n<li>Document.WorksharingCentralFilename \n</li></li></li></ul>\n<p>replace the properties\n\n<ul>\n<li>Application.CentralServerName \n<li>Application.LocalServerName \n<li>Document.GetWorksharingCentralModelPath\n</li></li></li></ul>\n<p>The new members:\n\n<ul>\n<li>Application.GetWorksharingCentralGUID(ServerPath serverModelPath) \n<li>Document.WorksharingCentralGUID \n</li></li></ul>\n<p>provide read access to the worksharing central GUID of the given server-based model. \nThis is applicable only to workshared models saved in Revit 2013 or later.\n\n<h5>New overloads for Application.OpenDocumentFile and UIApplication.OpenAndActivateDocument</h5>\n<p>The new overloads support parameters OpenOptions and OpenOptionsForUI, respectively, to specify how a Revit document should be opened. \nBoth options classes currently offer the ability to detach the opened document from central if applicable.\n\n<ul>\n<li>The OpenOptions.DetachFromCentralOption property can be set to the default DoNotDetach or to DetachAndPreserve.\n\n<li>The OpenOptionsForUI.DetachFromCentralOption property can be set to the default DoNotDetach, DetachAndPreserveWorksets or DetachAndPrompt.\n</li></li></ul>\n<p>In other words, the OpenOptions argument that you pass in to the OpenDocumentFile and OpenAndActivateDocument methods can now use the DetachFromCentral option to specify whether or not a workset-enabled document is detached from its central document. \n\n\n<p><strong>Response:</strong> The new API functionality still does not provide the option of discarding the worksets.\n\n<p>I want the file to be a normal project file again.\n\n<p>OpenOptions holds the same options as OpenOptionsForUI (besides DetachAndPrompt). \nHowever, maybe I can catch that dialogue programmatically using the DialogBoxShowing event and override the result...\n\n<p>Success!\n\n<!--\n<p>However, I had some problems with the Taskdialog and for future reference: is it always so that the \n\nCommandLinks are ordered numerically?\n\n<p>So that CommandLink2 is always below CommandLink1 and above CommandLink3? (If I have a case with 3 links).\n-->\n<p>This is the code I used to fix it:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnDialogBoxShowing(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">DialogBoxShowingEventArgs</span> e )\n  {\n    <span class=\"teal\">TaskDialogShowingEventArgs</span> e2 \n      = e <span class=\"blue\">as</span> <span class=\"teal\">TaskDialogShowingEventArgs</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e2 &amp;&amp; e2.DialogId.Equals( \n      <span class=\"maroon\">\"TaskDialog_Detach_Model_From_Central\"</span> ) )\n    {\n      e.OverrideResult( \n        (<span class=\"blue\">int</span>) <span class=\"teal\">TaskDialogResult</span>.CommandLink2 );\n    }\n  }\n</pre>\n<p>The full implementation of this method actually includes a few more statements taking care of other dialogue boxes, which I omitted here.\n\n<p>I checked the IsWorkshared property after opening the file, and it was set to false.\nThis indicates that it is no longer workshared, which means that the operation to discard the worksets succeeded. \nWhen you discard worksets, the workshared central file goes back to being a normal non-workshared project file, just like what you obtain when starting from a normal project template.\n\n<p>One thing I do wonder about is whether CommandLink2 is always below CommandLink1 and above CommandLink3?\n\n\n<p><strong>Answer:</strong> It would appear so, since the description of the TaskDialog.AddCommandLink method clearly states that \"CommandLinks will always be shown in the dialog in the order of their ids\".\n\n<p>Also, as always, keep in mind that there is no guarantee that this will continue working in future releases.\nThe order of these options can change at any time, and the required functionality might even be added to the official API one of these days.\n\n<p>Congratulations on solving this, Erik, and thank you for sharing it and providing this helpful explanation!\n\n\n<a name=\"3\"></a>\n<h4>Setting IndependentTag Label to Pick Up a Parameter Value</h4>\n<p>I'll wrap up with a quick pointer to another AEC DevBlog article by Saikat Bhattacharya on\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/annotating-with-family-instance-parameter-data-with-independenttag-in-revit.html\">\ndefining the label displayed by an IndependentTag</a>.\n\nUnfortunately this does not seem to be possible programmatically.\nIt can however easily be achieved using an appropriate template or tag family configuration.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0837_detach_workset",
    "header_text": "New overloads for Application.OpenDocumentFile and UIApplication.OpenAndActivateDocument",
    "local_header_href": "#new-overloads-for-applicationopendocumentfile-and-uiapplicationopenandactivatedocument",
    "chunk_text": "<h5>New overloads for Application.OpenDocumentFile and UIApplication.OpenAndActivateDocument</h5><p>The new overloads support parameters OpenOptions and OpenOptionsForUI, respectively, to specify how a Revit document should be opened. \nBoth options classes currently offer the ability to detach the opened document from central if applicable.\n\n<ul>\n<li>The OpenOptions.DetachFromCentralOption property can be set to the default DoNotDetach or to DetachAndPreserve.\n\n<li>The OpenOptionsForUI.DetachFromCentralOption property can be set to the default DoNotDetach, DetachAndPreserveWorksets or DetachAndPrompt.\n</li></li></ul>\n<p>In other words, the OpenOptions argument that you pass in to the OpenDocumentFile and OpenAndActivateDocument methods can now use the DetachFromCentral option to specify whether or not a workset-enabled document is detached from its central document. \n\n\n<p><strong>Response:</strong> The new API functionality still does not provide the option of discarding the worksets.\n\n<p>I want the file to be a normal project file again.\n\n<p>OpenOptions holds the same options as OpenOptionsForUI (besides DetachAndPrompt). \nHowever, maybe I can catch that dialogue programmatically using the DialogBoxShowing event and override the result...\n\n<p>Success!\n\n<!--\n<p>However, I had some problems with the Taskdialog and for future reference: is it always so that the \n\nCommandLinks are ordered numerically?\n\n<p>So that CommandLink2 is always below CommandLink1 and above CommandLink3? (If I have a case with 3 links).\n-->\n<p>This is the code I used to fix it:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OnDialogBoxShowing(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">DialogBoxShowingEventArgs</span> e )\n  {\n    <span class=\"teal\">TaskDialogShowingEventArgs</span> e2 \n      = e <span class=\"blue\">as</span> <span class=\"teal\">TaskDialogShowingEventArgs</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e2 &amp;&amp; e2.DialogId.Equals( \n      <span class=\"maroon\">\"TaskDialog_Detach_Model_From_Central\"</span> ) )\n    {\n      e.OverrideResult( \n        (<span class=\"blue\">int</span>) <span class=\"teal\">TaskDialogResult</span>.CommandLink2 );\n    }\n  }\n</pre>\n<p>The full implementation of this method actually includes a few more statements taking care of other dialogue boxes, which I omitted here.\n\n<p>I checked the IsWorkshared property after opening the file, and it was set to false.\nThis indicates that it is no longer workshared, which means that the operation to discard the worksets succeeded. \nWhen you discard worksets, the workshared central file goes back to being a normal non-workshared project file, just like what you obtain when starting from a normal project template.\n\n<p>One thing I do wonder about is whether CommandLink2 is always below CommandLink1 and above CommandLink3?\n\n\n<p><strong>Answer:</strong> It would appear so, since the description of the TaskDialog.AddCommandLink method clearly states that \"CommandLinks will always be shown in the dialog in the order of their ids\".\n\n<p>Also, as always, keep in mind that there is no guarantee that this will continue working in future releases.\nThe order of these options can change at any time, and the required functionality might even be added to the official API one of these days.\n\n<p>Congratulations on solving this, Erik, and thank you for sharing it and providing this helpful explanation!\n\n\n<a name=\"3\"></a>\n<h4>Setting IndependentTag Label to Pick Up a Parameter Value</h4>\n<p>I'll wrap up with a quick pointer to another AEC DevBlog article by Saikat Bhattacharya on\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/annotating-with-family-instance-parameter-data-with-independenttag-in-revit.html\">\ndefining the label displayed by an IndependentTag</a>.\n\nUnfortunately this does not seem to be possible programmatically.\nIt can however easily be achieved using an appropriate template or tag family configuration.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0837_detach_workset",
    "header_text": "Setting IndependentTag Label to Pick Up a Parameter Value",
    "local_header_href": "#setting-independenttag-label-to-pick-up-a-parameter-value",
    "chunk_text": "<h4>Setting IndependentTag Label to Pick Up a Parameter Value</h4><p>I'll wrap up with a quick pointer to another AEC DevBlog article by Saikat Bhattacharya on\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/10/annotating-with-family-instance-parameter-data-with-independenttag-in-revit.html\">\ndefining the label displayed by an IndependentTag</a>.\n\nUnfortunately this does not seem to be possible programmatically.\nIt can however easily be achieved using an appropriate template or tag family configuration.\n</p>"
  }
]