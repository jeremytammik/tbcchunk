[
  {
    "original_filename": "1629_change_text_colour",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\nChanging text colour via the text note type in #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/2CR6M2k\n\nHere are some notes on changing text colour and a nice <code>node.js</code> web scraping tutorial\n&ndash; Changing text colour via the text note type\n&ndash; Web scraping using <code>node.js</code>...\n\n--->"
  },
  {
    "original_filename": "1629_change_text_colour",
    "header_text": "Changing Text Colour",
    "local_header_href": "#changing-text-colour",
    "chunk_text": "### Changing Text Colour\n\nLately, I have been spending more time participating in the interesting discussions in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) than writing blog posts.\n\nOccasionally, I grab some new code snippet worth preserving for posterity and add it\nto [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples).\n\nEven more occasionally, I actually test it &nbsp; :-) &nbsp;\n\nI did so now for the trivial task of changing text colour.\n\nHere are some notes on that and a nice `node.js` web scraping tutorial:\n\n- [Changing text colour via the text note type](#2) \n- [Web scraping using `node.js`](#3) \n\n\n####<a name=\"2\"></a>Changing Text Colour via the Text Note Type\n\nThis topic came up when Rudi [@Revitalizer](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1103138) Honke\nadded a comment on colours in the thread \non [changing colour of labels within tags family per tag instance](https://forums.autodesk.com/t5/revit-api-forum/changing-color-of-labels-within-tags-family-per-tag-instance/m-p/7794532), saying,\n\n> colour parameters are of type integer, but the raw value may be difficult to read for the user.\n\nHe explained how to read them in the earlier thread \non [how to change text colour](https://forums.autodesk.com/t5/revit-api-forum/how-to-change-text-color/td-p/2567672):\n\n**Question:** I am using the `ColorDialog` control from Visual Studio 2008 to select a colour, and then I retrieve the RGB components in three variables:\n\n- ColorComponentRed\n- ColorComponentGreen\n- ColorComponentBlue\n\nI want to assign this colour to some text, but the following code is not working:\n\n<pre class=\"code\">\n  <span style=\"color:blue;\">Dim</span>&nbsp;colorparam&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:#2b91af;\">Parameter</span>\n  colorparam&nbsp;=&nbsp;elem.ObjectType.Parameter(\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.TEXT_COLOR)\n   \n  <span style=\"color:blue;\">Dim</span>&nbsp;app&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;Autodesk.Revit.Creation.<span style=\"color:#2b91af;\">Application</span>()\n  <span style=\"color:blue;\">Dim</span>&nbsp;color&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Autodesk.Revit.Color&nbsp;=&nbsp;app.NewColor()\n   \n  color.Red&nbsp;=&nbsp;ColorComponentRed\n  color.Green&nbsp;=&nbsp;ColorComponentGreen\n  color.Blue&nbsp;=&nbsp;ColorComponentBlue\n   \n  colorparam.Set(color)\n</pre>\n\nCan anybody tell me what I am doing wrong and how to do it properly, please?\n\n**Answer:** Hi.\n\n<pre class=\"code\">\n  <span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;GetRevitTextColorFromSystemColor(\n  &nbsp;&nbsp;System.Drawing.<span style=\"color:#2b91af;\">Color</span>&nbsp;color&nbsp;)\n  {\n  &nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;color.R&nbsp;*&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;<span style=\"color:#2b91af;\">Math</span>.Pow(&nbsp;2,&nbsp;0&nbsp;)&nbsp;\n  &nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;color.G&nbsp;*&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;<span style=\"color:#2b91af;\">Math</span>.Pow(&nbsp;2,&nbsp;8&nbsp;)\n  &nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;color.B&nbsp;*&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;<span style=\"color:#2b91af;\">Math</span>.Pow(&nbsp;2,&nbsp;16&nbsp;);\n  }\n</pre>\n\nI know that 2^0 is just 1, so you can simplify that to:\n\n<pre class=\"code\">\n  <span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;GetRevitTextColorFromSystemColor(\n  &nbsp;&nbsp;System.Drawing.<span style=\"color:#2b91af;\">Color</span>&nbsp;color&nbsp;)\n  {\n  &nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;color.R\n  &nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;color.G&nbsp;*&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;<span style=\"color:#2b91af;\">Math</span>.Pow(&nbsp;2,&nbsp;8&nbsp;)\n  &nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;color.B&nbsp;*&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;<span style=\"color:#2b91af;\">Math</span>.Pow(&nbsp;2,&nbsp;16&nbsp;);\n  }\n</pre>\n\nThen, for example:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;color&nbsp;=&nbsp;GetRevitTextColorFromSystemColor(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;yourSystemColor&nbsp;);\n \n&nbsp;&nbsp;textNoteType.get_Parameter(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.LINE_COLOR&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Set(&nbsp;color&nbsp;);\n</pre>\n\nAlso note that starting with Revit 2017, the Revit API provides a `ColorSelectionDialog`.\n\nYou can use its `SelectedColor` property to get a Revit colour instead of a system colour.\n\nRichard [@RPTHOMAS108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas added some 'quite convenient extension methods' to that:\n\n<pre class=\"code\">\n  &lt;Extension()&gt;\n  <span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;AsRGB(<span style=\"color:blue;\">ByVal</span>&nbsp;Parameter&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:#2b91af;\">Parameter</span>)&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Byte</span>()\n  &nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;I&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>&nbsp;=&nbsp;Parameter.AsInteger\n  &nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;Red&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Byte</span>&nbsp;=&nbsp;I&nbsp;<span style=\"color:blue;\">Mod</span>&nbsp;256\n  &nbsp;&nbsp;I&nbsp;=&nbsp;I&nbsp;\\&nbsp;256\n  &nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;Green&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Byte</span>&nbsp;=&nbsp;I&nbsp;<span style=\"color:blue;\">Mod</span>&nbsp;256\n  &nbsp;&nbsp;I&nbsp;=&nbsp;I&nbsp;\\&nbsp;256\n  &nbsp;&nbsp;<span style=\"color:blue;\">Dim</span>&nbsp;Blue&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Byte</span>&nbsp;=&nbsp;I&nbsp;<span style=\"color:blue;\">Mod</span>&nbsp;256\n  &nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;<span style=\"color:blue;\">New</span>&nbsp;<span style=\"color:blue;\">Byte</span>(2)&nbsp;{Red,&nbsp;Green,&nbsp;Blue}\n  <span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n  &lt;Extension()&gt;\n  <span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;AsParameterValue(<span style=\"color:blue;\">ByVal</span>&nbsp;Color&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:#2b91af;\">Color</span>)&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>\n  &nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Color.Red&nbsp;+&nbsp;(256&nbsp;*&nbsp;Color.Green)&nbsp;+&nbsp;(65536&nbsp;*&nbsp;Color.Blue)\n  <span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n  &lt;Extension()&gt;\n  <span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;AsParameterValue(<span style=\"color:blue;\">ByVal</span>&nbsp;Color&nbsp;<span style=\"color:blue;\">As</span>&nbsp;Windows.Media.Color)&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>\n  &nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Color.R&nbsp;+&nbsp;(256&nbsp;*&nbsp;Color.G)&nbsp;+&nbsp;(65536&nbsp;*&nbsp;Color.B)\n  <span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n  &lt;Extension()&gt;\n  <span style=\"color:blue;\">Public</span>&nbsp;<span style=\"color:blue;\">Function</span>&nbsp;AsParameterValue(<span style=\"color:blue;\">ByVal</span>&nbsp;Color&nbsp;<span style=\"color:blue;\">As</span>&nbsp;System.Drawing.Color)&nbsp;<span style=\"color:blue;\">As</span>&nbsp;<span style=\"color:blue;\">Integer</span>\n  &nbsp;&nbsp;<span style=\"color:blue;\">Return</span>&nbsp;Color.R&nbsp;+&nbsp;(256&nbsp;*&nbsp;Color.G)&nbsp;+&nbsp;(65536&nbsp;*&nbsp;Color.B)\n  <span style=\"color:blue;\">End</span>&nbsp;<span style=\"color:blue;\">Function</span>\n</pre>\n\nMany thanks to Rudi and Richard for the helpful solutions!\n\nI added Rudi's utility function\nto [The Building Coder samples Util.cs module](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/Util.cs#L455-L488) like\nthis:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">#region</span>&nbsp;Colour&nbsp;Conversion\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Revit&nbsp;text&nbsp;colour&nbsp;parameter&nbsp;value&nbsp;stored&nbsp;as&nbsp;an&nbsp;integer&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;in&nbsp;text&nbsp;note&nbsp;type&nbsp;BuiltInParameter.LINE_COLOR.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;ToColorParameterValue(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;red,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;green,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;blue&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;red&nbsp;+&nbsp;(green&nbsp;&lt;&lt;&nbsp;8)&nbsp;+&nbsp;(blue&nbsp;&lt;&lt;&nbsp;16);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Revit&nbsp;text&nbsp;colour&nbsp;parameter&nbsp;value&nbsp;stored&nbsp;as&nbsp;an&nbsp;integer&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;in&nbsp;text&nbsp;note&nbsp;type&nbsp;BuiltInParameter.LINE_COLOR.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">int</span>&nbsp;GetRevitTextColorFromSystemColor(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;System.Drawing.<span style=\"color:#2b91af;\">Color</span>&nbsp;color&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;ToColorParameterValue(&nbsp;color.R,&nbsp;color.G,&nbsp;color.B&nbsp;);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">#endregion</span>&nbsp;<span style=\"color:green;\">//&nbsp;Colour&nbsp;Conversion</span></pre>\n</pre>\n\nTo test it, I added an additional transaction step\nto [CmdNewTextNote](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdNewTextNote.cs#L196-L216):\n\n<pre class=\"code\">\n<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;t&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n{\n&nbsp;&nbsp;t.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Change&nbsp;Text&nbsp;Colour&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;color&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.ToColorParameterValue(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;255,&nbsp;0,&nbsp;0&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;textNoteType&nbsp;=&nbsp;doc.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;txNote.GetTypeId()&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;param&nbsp;=&nbsp;textNoteType.get_Parameter(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.LINE_COLOR&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Note&nbsp;that&nbsp;this&nbsp;modifies&nbsp;the&nbsp;existing&nbsp;text&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;note&nbsp;type&nbsp;for&nbsp;all&nbsp;instances&nbsp;using&nbsp;it.&nbsp;If</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;not&nbsp;desired,&nbsp;use&nbsp;Duplicate()&nbsp;first.</span>\n \n&nbsp;&nbsp;param.Set(&nbsp;color&nbsp;);\n \n&nbsp;&nbsp;t.Commit();\n}\n</pre>\n\nAs the comment says, this modifies the text note type and consequently all text note instances referring to that type.\n\n<center>\n<img src=\"img/text_note_color.png\" alt=\"Text note colour\" width=\"443\"/>\n</center>\n\n\n####<a name=\"3\"></a>Web Scraping Using Node.js\n\nOn a different tack, if you are interested in `node.js` and web scraping, here is a very pleasant and super clear 27-minute step by step introduction to basic [web scraping with `node.js`](https://www.youtube.com/watch?v=eUYMiztBEdY):\n\n<center>\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/eUYMiztBEdY\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>\n</center>\n\nIt implements a minimal app live using the `request-promise` and `cheerio` libraries to gather and correlate data from two web sites."
  }
]