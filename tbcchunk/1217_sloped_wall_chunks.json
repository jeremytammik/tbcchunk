[
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "Creating a Sloped Wall",
    "local_header_href": "#creating-a-sloped-wall",
    "chunk_text": "<h3>Creating a Sloped Wall</h3><p>Several questions concerning programmatic creation of sloped walls came up recently, so let's take a look at that, point to some existing samples, and implement a fantastic new one that does it all, including mass family creation, instance insertion and face creation in one fell swoop:</p><ul>\n<li><a href=\"#2\">How to programmatically create a sloped wall</a></li>\n<li><a href=\"#3\">Sloped wall versus sloped slab</a></li>\n<li><a href=\"#4\">Creating a sloped wall from mass</a></li>\n<li><a href=\"#5\">The Creator CreateModelLine method</a></li>\n<li><a href=\"#6\">The Building Coder Samples download</a></li>\n<li><a href=\"#7\">Floor creation fails for foundation floor types</a></li>\n</ul><p>Before getting to that, I'll just mention my outing last weekend.</p><p>Last weekend saw splendid weather in all of Switzerland, for a change.</p><p>I grabbed the chance to go on a tour with my friend Nik.</p><p>We walked up from the Kandersteg train station to the Blümlisalphütte mountain lodge at 2834 m in the dark, arriving at midnight.</p><p>Next day, we climbed the Wildi Frau, 3274 m, via its south ridge, finding our own route, because we stupidly missed the normal ascent starting point at the north end of the west wall.\nIt is an easy climb, and was exciting and novel for Nik, being his first alpine one ever:</p><center>\n<img alt=\"Wildi Frau south ridge\" src=\"file:///j/photo/jeremy/2014/2014-09-27_wildi_frau/20140927_101419_wildi_frau_suedgrat_cropped.jpg\" width=\"612\"/>\n</center><a name=\"2\"></a>"
  },
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "How to Programmatically Create a Sloped Wall",
    "local_header_href": "#how-to-programmatically-create-a-sloped-wall",
    "chunk_text": "<h4>How to Programmatically Create a Sloped Wall</h4><p>In the user interface, a sloped wall must be hosted on face of a mass and assigned the wall category.</p><p>This functionality was made available programmatically by the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2011-api.html\">\nRevit 2011 API</a>:</p><blockquote style=\"color: darkblue\">\n<h4>Create sloped wall on mass face</h4>\n<p>The method</p>\n<ul>\n<li>FaceWall.Create()\n</li></ul>\n<p>creates a new instance of a face wall on the sloped face of a mass.</p>\n</blockquote><p>We discussed it twice already, looking at\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/the-facewall-class-and-slanted-walls.html\">\nthe FaceWall class, slanted walls</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/create-facewall-on-slanted-mass-face.html\">\ncreating a FaceWall on a slanted mass face</a>.</p><p>It was probably a mistake to use the word 'slanted' instead of 'sloped', I'm afraid.</p><p>So now we get to revisit the question again:</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "Create sloped wall on mass face",
    "local_header_href": "#create-sloped-wall-on-mass-face",
    "chunk_text": "<h4>Create sloped wall on mass face</h4><p>The method</p><ul>\n<li>FaceWall.Create()\n</li></ul><p>creates a new instance of a face wall on the sloped face of a mass.</p>"
  },
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "Sloped Wall versus Sloped Slab",
    "local_header_href": "#sloped-wall-versus-sloped-slab",
    "chunk_text": "<h4>Sloped Wall versus Sloped Slab</h4><p><strong>Question:</strong> The wall creation method in the Revit API does not take in a slope:</p><pre class=\"code\">\n  <span class=\"teal\">Wall</span>.Create( revitDoc, curves, wallType.Id,\n    level.Id, isStructural );\n</pre><p>However, you can create a sloped floor slab:</p><pre class=\"code\">\n  doc.Create.NewSlab( profile, level, slopedArrow,\n    slope, isStructural );\n</pre><p>We often model structures with walls that are not quite vertical, and when transferring these to Revit they become floors, which I would like to avoid.</p><p>Is there a way to create sloped walls through the Revit API?</p><p><strong>Answer:</strong> The usual Revit way for making non-vertical walls is to take the face of a mass and create the wall on its face.</p><p>In the API this involves creating a mass family that has the face at the target slope, placing the mass instance in the project, and then creating the wall with FaceWall.Create.</p><p>For more details, take a look at the sample below.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "Creating a Sloped Wall from Mass",
    "local_header_href": "#creating-a-sloped-wall-from-mass",
    "chunk_text": "<h4>Creating a Sloped Wall from Mass</h4><p>Here is an interesting discussion on creating a slanted wall from a mass element raising and expanding a number of important Revit API aspects, some of which we have touched on in the past, such as\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/the-facewall-class-and-slanted-walls.html\">The FaceWall class and slanted walls</a></li>\n<li>Creating and inserting a mass family to replace an in-place mass</li>\n<li>Need for intermediate regeneration</li>\n<li>Optimising filtering</li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/05/iteration-and-springtime-change-is-the-only-constant.html\">Iteration order</a></li>\n</ul>\n<p>The answer was originally written by Adam Nagy way back in the Revit 2012 timeframe, and the code in the query is also that old.</p>\n<p>I updated the code in the answer, though, and integrated it into The Building Coder samples, in a new command CmdFaceWall.</p>\n<p><strong>Question:</strong> I'd like to create sloped walls through the API.\nIn the user interface, this can be achieved by creating a mass object and then selecting its face for the wall.</p>\n<p>It seem impossible to create an in-place mass element through the API, so I'm creating a mass family programmatically and then inserting an instance of it in the project instead.\nFor some reason, however, its geometry always returns null.</p>\n<p>Here is the code (copy and paste to an editor to see the truncated lines in full):</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> SlopedWallTest(\n    <span class=\"teal\">ExternalCommandData</span> revit )\n  {\n    <span class=\"teal\">Document</span> massDoc = revit.Application.Application.NewFamilyDocument(\n        <span class=\"maroon\">@\"C:\\ProgramData\\Autodesk\\RAC 2012\\Family Templates\\English_I\\Conceptual Mass\\Mass.rft\"</span> );\n \n    <span class=\"teal\">Transaction</span> transaction = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( massDoc );\n    transaction.SetName( <span class=\"maroon\">\"TEST\"</span> );\n    transaction.Start();\n \n    <span class=\"teal\">ExternalCommandData</span> cdata = revit;\n    Autodesk.Revit.ApplicationServices.<span class=\"teal\">Application</span> app = revit.Application.Application;\n    app = revit.Application.Application;\n \n    <span class=\"green\">// Create one profile</span>\n    <span class=\"teal\">ReferenceArray</span> ref_ar = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceArray</span>();\n \n    Autodesk.Revit.DB.<span class=\"teal\">XYZ</span> ptA = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 0 );\n    <span class=\"teal\">XYZ</span> ptB = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 30, 0 );\n    <span class=\"teal\">ModelCurve</span> modelcurve = MakeLine( revit.Application, ptA, ptB, massDoc );\n    ref_ar.Append( modelcurve.GeometryCurve.Reference );\n \n    ptA = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 30, 0 );\n    ptB = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 2, 30, 0 );\n    modelcurve = MakeLine( revit.Application, ptA, ptB, massDoc );\n    ref_ar.Append( modelcurve.GeometryCurve.Reference );\n \n    ptA = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 2, 30, 0 );\n    ptB = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 2, 0, 0 );\n    modelcurve = MakeLine( revit.Application, ptA, ptB, massDoc );\n    ref_ar.Append( modelcurve.GeometryCurve.Reference );\n \n    ptA = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 2, 0, 0 );\n    ptB = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 0 );\n    modelcurve = MakeLine( revit.Application, ptA, ptB, massDoc );\n    ref_ar.Append( modelcurve.GeometryCurve.Reference );\n \n    <span class=\"green\">// The extrusion form direction</span>\n    <span class=\"teal\">XYZ</span> direction = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -6, 0, 50 );\n    <span class=\"teal\">Form</span> form = massDoc.FamilyCreate.NewExtrusionForm( <span class=\"blue\">true</span>, ref_ar, direction );\n    transaction.Commit();\n \n    <span class=\"blue\">if</span>( <span class=\"teal\">File</span>.Exists( <span class=\"maroon\">@\"C:\\TestFamily.rfa\"</span> ) )\n      <span class=\"teal\">File</span>.Delete( <span class=\"maroon\">@\"C:\\TestFamily.rfa\"</span> );\n \n    massDoc.SaveAs( <span class=\"maroon\">@\"C:\\TestFamily.rfa\"</span> );\n \n    <span class=\"blue\">if</span>( !revit.Application.ActiveUIDocument.Document.LoadFamily( <span class=\"maroon\">@\"C:\\TestFamily.rfa\"</span> ) )\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">Exception</span>( <span class=\"maroon\">\"DID NOT LOAD FAMILY\"</span> );\n \n    <span class=\"teal\">Family</span> family = <span class=\"blue\">null</span>;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> el <span class=\"blue\">in</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(\n        revit.Application.ActiveUIDocument.Document ).WhereElementIsNotElementType().ToElements() )\n    {\n      <span class=\"blue\">if</span>( el <span class=\"blue\">is</span> <span class=\"teal\">Family</span> )\n      {\n        <span class=\"blue\">if</span>( ( (<span class=\"teal\">Family</span>) el ).Name.ToUpper().Trim().StartsWith( <span class=\"maroon\">\"TEST\"</span> ) )\n          family = (<span class=\"teal\">Family</span>) el;\n      }\n    }\n \n    <span class=\"teal\">FamilySymbol</span> fs = <span class=\"blue\">null</span>;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> sym <span class=\"blue\">in</span> family.Symbols )\n      fs = sym;\n \n    <span class=\"green\">// Create a family instance.</span>\n    revit.Application.ActiveUIDocument.Document.Create.NewFamilyInstance(\n        <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 0 ), fs, revit.Application.ActiveUIDocument.Document.ActiveView.Level,\n        <span class=\"teal\">StructuralType</span>.NonStructural );\n \n    <span class=\"teal\">WallType</span> wallType = <span class=\"blue\">null</span>;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">WallType</span> wt <span class=\"blue\">in</span> revit.Application.ActiveUIDocument.Document.WallTypes )\n    {\n      <span class=\"blue\">if</span>( <span class=\"teal\">FaceWall</span>.IsWallTypeValidForFaceWall( revit.Application.ActiveUIDocument.Document, wt.Id ) )\n      {\n        wallType = wt;\n        <span class=\"blue\">break</span>;\n      }\n    }\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> el <span class=\"blue\">in</span> <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(\n        revit.Application.ActiveUIDocument.Document ).WhereElementIsNotElementType().ToElements() )\n    {\n      <span class=\"blue\">if</span>( el <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n      {\n        <span class=\"blue\">if</span>( ( (<span class=\"teal\">FamilyInstance</span>) el ).Symbol.Family.Name.ToUpper().StartsWith( <span class=\"maroon\">\"TEST\"</span> ) )\n        {\n          <span class=\"teal\">Options</span> options = revit.Application.Application.Create.NewGeometryOptions();\n          options.ComputeReferences = <span class=\"blue\">true</span>;\n          options.View = revit.Application.ActiveUIDocument.Document.ActiveView;\n          <span class=\"teal\">GeometryElement</span> geoel = el.get_Geometry( options );\n \n          <span class=\"green\">// Attempt to create a slopped wall from the geometry.</span>\n          <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; geoel.Objects.Size; i++ )\n          {\n            <span class=\"blue\">if</span>( geoel.Objects.get_Item( i ) <span class=\"blue\">is</span> <span class=\"teal\">Solid</span> )\n            {\n              <span class=\"teal\">Solid</span> solid = (<span class=\"teal\">Solid</span>) geoel.Objects.get_Item( i );\n              <span class=\"blue\">for</span>( <span class=\"blue\">int</span> j = 0; j &lt; solid.Faces.Size; j++ )\n              {\n                <span class=\"blue\">try</span>\n                {\n                  <span class=\"blue\">if</span>( solid.Faces.get_Item( i ).Reference != <span class=\"blue\">null</span> )\n                  {\n                    <span class=\"teal\">FaceWall</span>.Create( revit.Application.ActiveUIDocument.Document,\n                        wallType.Id, <span class=\"teal\">WallLocationLine</span>.CoreCenterline,\n                        solid.Faces.get_Item( i ).Reference );\n                  }\n                }\n                <span class=\"blue\">catch</span>( System.<span class=\"teal\">Exception</span> e )\n                {\n                  System.Windows.Forms.<span class=\"teal\">MessageBox</span>.Show( e.Message );\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ModelCurve</span> MakeLine( <span class=\"teal\">UIApplication</span> app, <span class=\"teal\">XYZ</span> ptA, <span class=\"teal\">XYZ</span> ptB, <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"green\">// Create plane by the points</span>\n    <span class=\"teal\">Line</span> line = app.Application.Create.NewLine( ptA, ptB, <span class=\"blue\">true</span> );\n    <span class=\"teal\">XYZ</span> norm = ptA.CrossProduct( ptB );\n    <span class=\"blue\">if</span>( norm.GetLength() == 0 ) norm = <span class=\"teal\">XYZ</span>.BasisZ;\n    <span class=\"teal\">Plane</span> plane = app.Application.Create.NewPlane( norm, ptB );\n    <span class=\"teal\">SketchPlane</span> skplane = doc.FamilyCreate.NewSketchPlane( plane );\n    <span class=\"green\">// Create line here</span>\n    <span class=\"teal\">ModelCurve</span> modelcurve = doc.FamilyCreate.NewModelCurve( line, skplane );\n    <span class=\"blue\">return</span> modelcurve;\n  }\n</pre>\n<p><strong>Answer:</strong> You always need to call the Document.Regenerate method if you wish to use information from the database that was created as a result of the changes you made inside the transaction.</p>\n<p>If not, you will be accessing so-called 'stale' information.</p>\n<p>The Building Coder defines a whole topic list on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.33\">\nneed to regenerate</a>.</p>\n<p>Once I added that call to the code after inserting the mass instance, the desired geometry was returned.</p>\n<p>I also modified the filtering part of your code to make it more effective.</p>\n<p>The more you narrow down the selection using the Revit API, the faster your code will be.</p>\n<p>Another problem with your code is in the iteration part.</p>\n<p>Many objects give back a new instance each time you call them.</p>\n<p>In the case of collections, the objects inside these instances might be in a different order each time.</p>\n<p>For instance, instead of making an iteration loop and keep calling solid.Faces.get_Item(i), which will return a new different collection of the solids faces on each call, you should make one single call to and save a reference to the result of the solid.Faces collection and then iterate through that.</p>\n<p>A nice way to achieve this is by simply using a foreach statement on it.</p>\n<p>Also, instead of passing in ActiveView.Level as the owner for the mass instance you should pass in ActiveView.GenLevel.</p>\n<p>If the mass has no owner, the API is not able to create a FaceWall on the mass face.</p>\n<p>In fact, if you try it using ActiveView.Level, the call to FaceWall.Create will throw an exception saying, \"Could not create a face wall.\"</p>\n<p>Here is the code updated accordingly and migrated to Revit 2015:</p>\n<pre class=\"code\">\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _conceptual_mass_template_path\n    = <span class=\"maroon\">\"C:/ProgramData/Autodesk/RVT 2015\"</span>\n    + <span class=\"maroon\">\"/Family Templates/English/Conceptual Mass\"</span>\n    + <span class=\"maroon\">\"/Metric Mass.rft\"</span>;\n \n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _family_name = <span class=\"maroon\">\"TestFamily\"</span>;\n \n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _family_path = <span class=\"maroon\">\"C:/\"</span> + _family_name + <span class=\"maroon\">\".rfa\"</span>;\n \n  <span class=\"blue\">static</span> <span class=\"teal\">ModelCurve</span> MakeLine(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">XYZ</span> p,\n    <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"green\">// Create plane by the points</span>\n \n    <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( p, q );\n    <span class=\"teal\">XYZ</span> norm = p.CrossProduct( q );\n    <span class=\"blue\">if</span>( norm.GetLength() == 0 ) { norm = <span class=\"teal\">XYZ</span>.BasisZ; }\n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( norm, q );\n \n    <span class=\"teal\">SketchPlane</span> skplane = <span class=\"teal\">SketchPlane</span>.Create(\n      doc, plane );\n \n    <span class=\"green\">// Create line</span>\n \n    <span class=\"blue\">return</span> doc.FamilyCreate.NewModelCurve(\n      line, skplane );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create an extrusion form in the given</span>\n  <span class=\"gray\">///</span><span class=\"green\"> conceptual mass family document.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> CreateMassExtrusion(\n    <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Mass\"</span> );\n \n      <span class=\"green\">// Create profile</span>\n \n      <span class=\"teal\">ReferenceArray</span> refar = <span class=\"blue\">new</span> <span class=\"teal\">ReferenceArray</span>();\n \n      <span class=\"teal\">XYZ</span>[] pts = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>[] {\n        <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -10, -10, 0 ),\n        <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( +10, -10, 0 ),\n        <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( +10, +10, 0 ),\n        <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -10, +10, 0 ) };\n \n      <span class=\"blue\">int</span> j, n = pts.Length;\n \n      <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n      {\n        j = i + 1;\n \n        <span class=\"blue\">if</span>( j &gt;= n ) { j = 0; }\n \n        <span class=\"green\">// The Creator.CreateModelLine method creates </span>\n        <span class=\"green\">// pretty arbitrary sketch planes, which causes</span>\n        <span class=\"green\">// the NewExtrusionForm method to fail, saying </span>\n        <span class=\"green\">// \"Cannot create extrude form.\"</span>\n \n        <span class=\"green\">//ModelCurve c = Creator.CreateModelLine( doc, pts[i], pts[j] );</span>\n \n        <span class=\"teal\">ModelCurve</span> c = MakeLine( doc, pts[i], pts[j] );\n \n        refar.Append( c.GeometryCurve.Reference );\n      }\n \n      <span class=\"green\">//doc.Regenerate();</span>\n \n      <span class=\"green\">// The extrusion form direction and length.</span>\n      <span class=\"green\">// The direction must be perpendicular to the </span>\n      <span class=\"green\">// plane determined by profile. The length </span>\n      <span class=\"green\">// must be non-zero.</span>\n \n      <span class=\"teal\">XYZ</span> direction = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( <span class=\"green\">/*-6*/</span> 0, 0, 20 );\n \n      <span class=\"teal\">Form</span> form = doc.FamilyCreate.NewExtrusionForm( <span class=\"green\">// Cannot create extrude form.</span>\n        <span class=\"blue\">true</span>, refar, direction );\n \n      tx.Commit();\n    }\n  }\n \n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> CreateFaceWalls(\n    <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">Application</span> app = doc.Application;\n \n    <span class=\"teal\">Document</span> massDoc = app.NewFamilyDocument(\n      _conceptual_mass_template_path );\n \n    CreateMassExtrusion( massDoc );\n \n    <span class=\"green\">//if( File.Exists( _family_path ) )</span>\n    <span class=\"green\">//  File.Delete( _family_path );</span>\n \n    <span class=\"teal\">SaveAsOptions</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">SaveAsOptions</span>();\n    opt.OverwriteExistingFile = <span class=\"blue\">true</span>;\n \n    massDoc.SaveAs( _family_path, opt );\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create FaceWall\"</span> );\n \n      <span class=\"blue\">if</span>( !doc.LoadFamily( _family_path ) )\n        <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">Exception</span>( <span class=\"maroon\">\"DID NOT LOAD FAMILY\"</span> );\n \n      <span class=\"teal\">Family</span> family = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n        .Where&lt;<span class=\"teal\">Element</span>&gt;( x =&gt; x.Name.Equals( _family_name ) )\n        .Cast&lt;<span class=\"teal\">Family</span>&gt;()\n        .FirstOrDefault();\n \n      <span class=\"teal\">FamilySymbol</span> fs = doc.GetElement(\n        family.GetFamilySymbolIds().First&lt;<span class=\"teal\">ElementId</span>&gt;() )\n          <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n      <span class=\"green\">// Create a family instance</span>\n \n      <span class=\"teal\">Level</span> level = doc.ActiveView.GenLevel;\n \n      <span class=\"teal\">FamilyInstance</span> fi = doc.Create.NewFamilyInstance(\n        <span class=\"teal\">XYZ</span>.Zero, fs, level, <span class=\"teal\">StructuralType</span>.NonStructural );\n \n      doc.Regenerate(); <span class=\"green\">// required to generate the geometry!</span>\n \n      <span class=\"green\">// Determine wall type.</span>\n \n      <span class=\"teal\">WallType</span> wallType = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">WallType</span> ) )\n        .Cast&lt;<span class=\"teal\">WallType</span>&gt;()\n        .Where&lt;<span class=\"teal\">WallType</span>&gt;( x =&gt; <span class=\"teal\">FaceWall</span>.IsWallTypeValidForFaceWall( doc, x.Id ) )\n        .FirstOrDefault();\n \n      <span class=\"green\">// Retrieve mass element geometry.</span>\n \n      <span class=\"teal\">Options</span> options = app.Create.NewGeometryOptions();\n      options.ComputeReferences = <span class=\"blue\">true</span>;\n \n      <span class=\"green\">//options.View = doc.ActiveView; // conceptual mass is not visible in default view</span>\n \n      <span class=\"teal\">GeometryElement</span> geo = fi.get_Geometry( options );\n \n      <span class=\"green\">// Create a sloped wall from the geometry.</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != f.Reference,\n              <span class=\"maroon\">\"we asked for references, didn't we?\"</span> );\n \n            <span class=\"teal\">PlanarFace</span> pf = f <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n \n            <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != pf )\n            {\n              <span class=\"teal\">XYZ</span> v = pf.Normal;\n \n              <span class=\"green\">// Errors:</span>\n              <span class=\"green\">//</span>\n              <span class=\"green\">// Could not create a face wall.</span>\n              <span class=\"green\">//</span>\n              <span class=\"green\">// Caused by using ActiveView.Level </span>\n              <span class=\"green\">// instead of ActiveView.GenLevel.</span>\n              <span class=\"green\">//</span>\n              <span class=\"green\">// This reference cannot be applied to a face wall.</span>\n              <span class=\"green\">//</span>\n              <span class=\"green\">// Caused by using this on a horizontal face.</span>\n \n              <span class=\"blue\">if</span>( !<span class=\"teal\">Util</span>.IsVertical( v ) )\n              {\n                <span class=\"teal\">FaceWall</span>.Create(\n                  doc, wallType.Id,\n                  <span class=\"teal\">WallLocationLine</span>.CoreCenterline,\n                  f.Reference );\n              }\n            }\n          }\n        }\n      }\n      tx.Commit();\n    }\n  }\n</pre>\n<p>Many thanks to Adam for this insightful solution!</p>\n<p>Note that I discovered another situation that can cause the FaceWall.Create method to fail saying, \"This reference cannot be applied to a face wall\", namely a horizontal face.</p>\n<p>After eliminating the two horizontal faces on the cube that I defined, the resulting four face walls finally look like this:</p>\n<center>\n<img alt=\"FaceWall\" src=\"img/FaceWall.png\" width=\"309\"/>\n</center>\n<a name=\"5\"></a>\n<h4>The Creator CreateModelLine Method</h4>\n<p>I struggled with several issues getting this to run in Revit 2015 and in The Building Coder sample add-in.</p>\n<p>One really hard problem that I created for myself was caused by switching away from the MakeLine method shown above.</p>\n<p>It was originally defined in one of the Revit SDK NewForm massing samples, in the module SDK/Samples/Massing/NewForm/CS/Command.cs.</p>\n<p>Since the Creator class in The Building Coder samples already defines a similar method, CreateModelLine, I decided to use that instead.</p>\n<p>This required a modification to work in a family document – it was previously only usable in the project environment.</p>\n<p>The new version looks like this:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create a model line between the two given points.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Internally, it creates an arbitrary sketch</span>\n  <span class=\"gray\">///</span><span class=\"green\"> plane given the model line end points.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ModelLine</span> CreateModelLine(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">XYZ</span> p,\n    <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">if</span>( p.DistanceTo( q ) &lt; <span class=\"teal\">Util</span>.MinLineLength ) <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Create sketch plane; for non-vertical lines,</span>\n    <span class=\"green\">// use Z-axis to span the plane, otherwise Y-axis:</span>\n \n    <span class=\"teal\">XYZ</span> v = q - p;\n \n    <span class=\"blue\">double</span> dxy = <span class=\"teal\">Math</span>.Abs( v.X ) + <span class=\"teal\">Math</span>.Abs( v.Y );\n \n    <span class=\"teal\">XYZ</span> w = ( dxy &gt; <span class=\"teal\">Util</span>.TolPointOnPlane )\n      ? <span class=\"teal\">XYZ</span>.BasisZ\n      : <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"teal\">XYZ</span> norm = v.CrossProduct( w ).Normalize();\n \n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( norm, p );\n \n    <span class=\"teal\">SketchPlane</span> sketchPlane = <span class=\"teal\">SketchPlane</span>.Create( doc, plane );\n \n    <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( p, q );\n \n    <span class=\"teal\">ModelCurve</span> curve = doc.IsFamilyDocument\n      ? doc.FamilyCreate.NewModelCurve( line, sketchPlane )\n      : doc.Create.NewModelCurve( line, sketchPlane );\n \n    <span class=\"blue\">return</span> curve <span class=\"blue\">as</span> <span class=\"teal\">ModelLine</span>;\n  }\n</pre>\n<p>It now checks whether the document is a family and uses either doc.Create or doc.FamilyCreate, as appropriate.</p>\n<p>So far, so good.</p>\n<p>However, try as I might, the extrusion creation call to NewExtrusionForm always failed saying, \"Cannot create extrude form.\"</p>\n<p>I debugged myself stupid, tested that code in the Massing NewForm SDK sample achieved its goal, and tediously eliminated all the differences between that implementation and mine until I finally found the reason.</p>\n<p>I finally figured out that the arbitrary sketch planes generated by the CreateModelLine method were causing this.</p>\n<p>Each of the model lines I used to define the extrusion profile was located on a different sketch plane with wildly different normal vectors.</p>\n<p>The MakeLine method is more reliable, and replacing the former by the latter finally solved the problem.</p>\n<a name=\"6\"></a>\n<h4>The Building Coder Samples Download</h4>\n<p>You can download the most up-to-date version from\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> GitHub\n\nrepository.</p>\n<p>The version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.113.1\">2015.0.113.1</a>.</p>\n<a name=\"7\"></a>\n<h4>Floor Creation Fails for Foundation Floor Types</h4>\n<p>After all this talk about walls and the requirement that they not be horizontal, let's mention another rather cryptic and misleading error message that can come up when creating a floor:</p>\n<p><strong>Question:</strong> I am using the Document.NewFloor method to create a floor.</p>\n<p>However, it is displaying an error message saying, \"Could not construct a proper face with the input curves to create a floor correctly\".</p>\n<p><strong>Answer:</strong> After further debugging, I found that the cause of the error is not the face or curves, but the floor type I am trying to use.</p>\n<p>The floor creation does not accept a FloorType with IsFoundationSlab == true.</p>\n<p>If I provide a FloorType with IsFoundationSlab == false, then the floor is created successfully.</p>\n<p>I would assume that the foundation slab types have to be used with the Document.NewFoundationSlab method, and that there are fundamental differences in behaviour between floor and foundation types.</p>\n<p>If possible, it would be nice to update the exception to explain that the FloorType is invalid, not the curves.</p>\n<p><strong>Addendum:</strong> Some obvious possible differences might be functionality such as support for a slanted slabs and multiple layers in the compound structure.</p>\n<p>When you run into a geometrical error message such as the one mentioned above, you can often obtain more detailed error messages and information on the causes by creating intermediate model lines and then trying to make use of those appropriately via the user interface, as described for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/debug-geometric-form-creation.html\">\ndebugging form creation</a>.</p>\n</p>"
  },
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "The Creator CreateModelLine Method",
    "local_header_href": "#the-creator-createmodelline-method",
    "chunk_text": "<h4>The Creator CreateModelLine Method</h4><p>I struggled with several issues getting this to run in Revit 2015 and in The Building Coder sample add-in.</p><p>One really hard problem that I created for myself was caused by switching away from the MakeLine method shown above.</p><p>It was originally defined in one of the Revit SDK NewForm massing samples, in the module SDK/Samples/Massing/NewForm/CS/Command.cs.</p><p>Since the Creator class in The Building Coder samples already defines a similar method, CreateModelLine, I decided to use that instead.</p><p>This required a modification to work in a family document – it was previously only usable in the project environment.</p><p>The new version looks like this:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Create a model line between the two given points.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Internally, it creates an arbitrary sketch</span>\n  <span class=\"gray\">///</span><span class=\"green\"> plane given the model line end points.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ModelLine</span> CreateModelLine(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">XYZ</span> p,\n    <span class=\"teal\">XYZ</span> q )\n  {\n    <span class=\"blue\">if</span>( p.DistanceTo( q ) &lt; <span class=\"teal\">Util</span>.MinLineLength ) <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Create sketch plane; for non-vertical lines,</span>\n    <span class=\"green\">// use Z-axis to span the plane, otherwise Y-axis:</span>\n \n    <span class=\"teal\">XYZ</span> v = q - p;\n \n    <span class=\"blue\">double</span> dxy = <span class=\"teal\">Math</span>.Abs( v.X ) + <span class=\"teal\">Math</span>.Abs( v.Y );\n \n    <span class=\"teal\">XYZ</span> w = ( dxy &gt; <span class=\"teal\">Util</span>.TolPointOnPlane )\n      ? <span class=\"teal\">XYZ</span>.BasisZ\n      : <span class=\"teal\">XYZ</span>.BasisY;\n \n    <span class=\"teal\">XYZ</span> norm = v.CrossProduct( w ).Normalize();\n \n    <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>( norm, p );\n \n    <span class=\"teal\">SketchPlane</span> sketchPlane = <span class=\"teal\">SketchPlane</span>.Create( doc, plane );\n \n    <span class=\"teal\">Line</span> line = <span class=\"teal\">Line</span>.CreateBound( p, q );\n \n    <span class=\"teal\">ModelCurve</span> curve = doc.IsFamilyDocument\n      ? doc.FamilyCreate.NewModelCurve( line, sketchPlane )\n      : doc.Create.NewModelCurve( line, sketchPlane );\n \n    <span class=\"blue\">return</span> curve <span class=\"blue\">as</span> <span class=\"teal\">ModelLine</span>;\n  }\n</pre><p>It now checks whether the document is a family and uses either doc.Create or doc.FamilyCreate, as appropriate.</p><p>So far, so good.</p><p>However, try as I might, the extrusion creation call to NewExtrusionForm always failed saying, \"Cannot create extrude form.\"</p><p>I debugged myself stupid, tested that code in the Massing NewForm SDK sample achieved its goal, and tediously eliminated all the differences between that implementation and mine until I finally found the reason.</p><p>I finally figured out that the arbitrary sketch planes generated by the CreateModelLine method were causing this.</p><p>Each of the model lines I used to define the extrusion profile was located on a different sketch plane with wildly different normal vectors.</p><p>The MakeLine method is more reliable, and replacing the former by the latter finally solved the problem.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "The Building Coder Samples Download",
    "local_header_href": "#the-building-coder-samples-download",
    "chunk_text": "<h4>The Building Coder Samples Download</h4><p>You can download the most up-to-date version from\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> GitHub\n\nrepository.</p><p>The version discussed above is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.113.1\">2015.0.113.1</a>.</p><a name=\"7\"></a>"
  },
  {
    "original_filename": "1217_sloped_wall",
    "header_text": "Floor Creation Fails for Foundation Floor Types",
    "local_header_href": "#floor-creation-fails-for-foundation-floor-types",
    "chunk_text": "<h4>Floor Creation Fails for Foundation Floor Types</h4><p>After all this talk about walls and the requirement that they not be horizontal, let's mention another rather cryptic and misleading error message that can come up when creating a floor:</p><p><strong>Question:</strong> I am using the Document.NewFloor method to create a floor.</p><p>However, it is displaying an error message saying, \"Could not construct a proper face with the input curves to create a floor correctly\".</p><p><strong>Answer:</strong> After further debugging, I found that the cause of the error is not the face or curves, but the floor type I am trying to use.</p><p>The floor creation does not accept a FloorType with IsFoundationSlab == true.</p><p>If I provide a FloorType with IsFoundationSlab == false, then the floor is created successfully.</p><p>I would assume that the foundation slab types have to be used with the Document.NewFoundationSlab method, and that there are fundamental differences in behaviour between floor and foundation types.</p><p>If possible, it would be nice to update the exception to explain that the FloorType is invalid, not the curves.</p><p><strong>Addendum:</strong> Some obvious possible differences might be functionality such as support for a slanted slabs and multiple layers in the compound structure.</p><p>When you run into a geometrical error message such as the one mentioned above, you can often obtain more detailed error messages and information on the causes by creating intermediate model lines and then trying to make use of those appropriately via the user interface, as described for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/debug-geometric-form-creation.html\">\ndebugging form creation</a>.</p>"
  }
]