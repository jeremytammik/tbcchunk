[
  {
    "original_filename": "1187_launch_exe",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1187_launch_exe",
    "header_text": "Launching a Stand-alone Executable",
    "local_header_href": "#launching-a-stand-alone-executable",
    "chunk_text": "<h3>Launching a Stand-alone Executable</h3><p>A colleague of mine asked for some help implementing a Revit add-in to launch an external stand-alone Windows executable from the Revit user interface.</p><p>Since this might be useful to others as well, here is a summary of our discussion and solution:</p><p><strong>Question:</strong> I am working on a windows application using GBS API to perform building parametric analysis (energy consumption in terms of comparison of window glazing materials, building orientation). Currently, I am exporting the gbxml file, saving it on my desktop and using the gbxml file in GBS simulations.</p><p>I would like to know if I can directly export the gbxml file to my windows application and run the simulation by creating a Revit add-in of my windows application.</p><p><strong>Answer:</strong> I do not understand the difference between the two:</p><ol>\n<li>Exporting the gbxml file, saving it on my desktop and using the gbxml file in GBS simulations.</li>\n<li>Export the gbxml file to my windows application</li>\n</ol><p>The only gbxml export option provided by the Revit API is the Export method:</p><pre class=\"code\">\n  public bool Export(\n    string folder,\n    string name,\n    GBXMLExportOptions options )\n</pre><p>It produces the same result as exporting to gbxml manually.</p><p><strong>Response:</strong> I have been working on other parts of my sample.</p><p>I now want to create an add-in feature in Revit that executes my windows desktop application. Can you help me to identify the code to perform this?</p><p>I would like to know what code I am supposed to follow to create a Revit add-in of my .exe file.</p><p><strong>Answer:</strong> Do you mean you want to launch a stand-alone Windows executable from your C# .NET add-in?</p><p>The answer is provided immediately by a standard Internet search, e.g. for\n\n<a href=\"http://lmgtfy.com/?q=c#+launch+exe\">c# launch exe</a>.</p><p>You cannot create a Revit add-in from an exe file.</p><p>You can however easily launch an external executable from a Revit add-in.</p><p><strong>Response:</strong> If it does not take too much of your time it would be great if you could write it for me.</p><p>I do have Visual Studio installed.</p><p>Thank you for your help.</p><p><strong>Answer:</strong> Here is\n\n<a href=\"zip/RvtLaunchExe.zip\">RvtLaunchExe.zip</a> containing\n\nthe complete source code, Visual Studio solution, and add-in manifest.</p><p>It also includes a sample executable:</p><center>\n<img alt=\"RvtLaunchExe solution\" src=\"img/launch_exe_sln.png\" width=\"219\"/>\n</center><p>The sample exe just displays a dialogue box:</p><center>\n<img alt=\"Sample executable message box\" src=\"img/launch_exe_msg.png\" width=\"149\"/>\n</center><p>Its entire implementation looks like this:</p><pre class=\"code\">\n  <span class=\"blue\">using</span> System;\n  <span class=\"blue\">using</span> System.Windows.Forms;\n \n  <span class=\"blue\">namespace</span> SampleExe\n  {\n    <span class=\"blue\">class</span> <span class=\"teal\">Program</span>\n    {\n      <span class=\"blue\">static</span> <span class=\"blue\">void</span> Main( <span class=\"blue\">string</span>[] args )\n      {\n        <span class=\"teal\">MessageBox</span>.Show( <span class=\"maroon\">\"Hello Shalini.\"</span>,\n          <span class=\"maroon\">\"Sample Executable\"</span> );\n      }\n    }\n  }\n</pre><p>If you open the Visual Studio solution and compile, the whole thing should install itself, i.e. copy the add-in manifest and assembly DLL to the proper location for Revit to find and load them.</p><p>Revit will then display the add-in ribbon panel:</p><center>\n<img alt=\"RvtLaunchExe ribbon panel\" src=\"img/launch_exe_app.png\" width=\"326\"/>\n</center><p>Simply click the button to do the dirty deed.</p><p>The external application defines the ribbon panel and command button like this:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> System.Reflection;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> RvtLaunchExe\n{\n  <span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Add our command button to the ribbon panel.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> PopulatePanel( <span class=\"teal\">RibbonPanel</span> p )\n    {\n      <span class=\"blue\">string</span> path = <span class=\"teal\">Assembly</span>.GetExecutingAssembly()\n        .Location;\n \n      <span class=\"teal\">RibbonItemData</span> rid = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n          <span class=\"maroon\">\"RvtLaunchExe_Command\"</span>,\n          <span class=\"maroon\">\"Launch External\\r\\nWindows Executable\"</span>,\n          path, <span class=\"maroon\">\"RvtLaunchExe.Command\"</span> );\n \n      rid.ToolTip = <span class=\"maroon\">\"Launch an external \"</span>\n        + <span class=\"maroon\">\" stand-alone Windows executable\"</span>;\n \n      p.AddItem( rid );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n    {\n      PopulatePanel(\n        a.CreateRibbonPanel(\n          <span class=\"maroon\">\"Launch Executable\"</span> ) );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><p>Clicking the button launches the external command.\nIt calls the LaunchExe method, which simply uses the .NET System.Diagnostics process functionality to launch the external executable:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> System.IO;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> RvtLaunchExe\n{\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">const</span> <span class=\"blue\">string</span> _standalone_exe_path\n      = <span class=\"maroon\">\"C:/a/vs/RvtLaunchExe/SampleExe/bin/Debug/SampleExe.exe\"</span>;\n \n    <span class=\"blue\">int</span> LaunchExe( <span class=\"blue\">string</span> path )\n    {\n      <span class=\"blue\">if</span>( !<span class=\"teal\">File</span>.Exists( path ) )\n      {\n        <span class=\"blue\">throw</span> ( <span class=\"blue\">new</span> <span class=\"teal\">ArgumentException</span>( <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"'{0}' not found.\"</span>, path ) ) );\n      }\n \n      <span class=\"blue\">int</span> rc = 0;\n \n      <span class=\"green\">// Prepare the process to run</span>\n \n      <span class=\"teal\">ProcessStartInfo</span> start = <span class=\"blue\">new</span> <span class=\"teal\">ProcessStartInfo</span>();\n \n      <span class=\"green\">// Enter the command line arguments, everything </span>\n      <span class=\"green\">// you would enter after the executable name.</span>\n \n      <span class=\"green\">//start.Arguments = arguments;</span>\n \n      <span class=\"green\">// Enter the complete executable path</span>\n \n      start.FileName = path;\n \n      <span class=\"green\">// Do you want to show a console window?</span>\n \n      start.WindowStyle = <span class=\"teal\">ProcessWindowStyle</span>.Hidden;\n      start.CreateNoWindow = <span class=\"blue\">true</span>;\n \n      <span class=\"green\">// Run the external process and </span>\n      <span class=\"green\">// wait for it to finish</span>\n \n      <span class=\"blue\">using</span>( <span class=\"teal\">Process</span> proc = <span class=\"teal\">Process</span>.Start( start ) )\n      {\n        proc.WaitForExit();\n \n        <span class=\"green\">// Retrieve the external application exit code</span>\n \n        rc = proc.ExitCode;\n      }\n      <span class=\"blue\">return</span> rc;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"blue\">int</span> rc = LaunchExe( _standalone_exe_path );\n \n      <span class=\"blue\">if</span>( 0 != rc )\n      {\n        message = <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"{0} returned error code {1}\"</span>,\n          _standalone_exe_path, rc );\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><p>I hope this covers all you need and is useful to others as well.</p><p>After all, it does provide a really minimal example of setting up one single ribbon button and one single trivial external command with an absolute minimum of fuss and effort.</p>"
  }
]