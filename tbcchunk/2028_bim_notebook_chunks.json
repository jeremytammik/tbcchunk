[
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!-- https://highlightjs.org/#usage -->\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n<script>hljs.highlightAll();</script>\n</head>\n\n<!---\n\n- BIM Interactive Notebooks\n  Chuong Ho\n  https://chuongmep.com/\n  https://www.linkedin.com/posts/chuongmep_opensource-ai-dataanalysis-activity-7164531381107183616-TYNP?utm_source=share&utm_medium=member_desktop\n  I'm thrilled to share an open-source project that I believe holds immense potential.\n  It enables you to integrate and analyze Revit model data in various ways using Jupyter Notebook use mutiple progaming language under Interactive .NET.\n  The project has been brought to fruition, and it's truly gratifying to see its development, as it opens up significant opportunities with AI and data analysis.\n  Check out the GitHub repository to explore more:\n  https://lnkd.in/gWSsWppG\n  /Users/jta/a/doc/revit/tbc/git/a/img/ch_jupyter.gif\n\n- NotebookLM\n  https://notebooklm.google/\n  > NotebookLM gives you a personalized AI, grounded in the information you trust.\n  NotebookLM is only available in the U.S. for users 18 and up\n\n- TemporaryGraphicsManager in Action\n  https://forums.autodesk.com/t5/revit-api-forum/temporarygraphicsmanager-in-action/td-p/12566892\n  W7k Revit API Experiments - TemporaryGraphicsManager\n  https://youtu.be/Q7aKEocvRtk\n  LinkedIn BIM Experts -- https://www.linkedin.com/feed/update/urn:li:activity:7164217836867895296?utm_source=share&utm_medium=member_desktop\n  Julian Wandzilak\n  Today, I would like to share a recent discovery I made while working with Revit API. As many of you know, creating new graphical elements within Revit can be quite challenging and limited. However, I stumbled upon a little-known class called TemporaryGraphicsManager.\n  The TemporaryGraphicsManager allows us to add temporary graphical elements directly to the model or drawing space. These graphics are not subject to undo actions and are not permanently saved anywhere. While they won’t clutter up your project, they provide a powerful way to enhance your user experience.\n  Surprisingly, I haven’t seen this class widely used in other plugins or extensions. So, when I first encountered it, I knew I had to put it to the test.\n  In the initial part of my video, I demonstrate how to align title lines to previously saved points. With a simple click, you can create temporary graphics that will guide your design process and allow you to snap your title lines to them!\n  In the second part of the video, I collect points and save them to an external file for future reference. The TemporaryGraphicsManager conveniently marks their locations, eliminating the need to remember which points I’ve already saved.\n  Is this the easiest method of controlling title lines? Perhaps not. In an upcoming update to my Drafter tool (to which I added recently 30 days of trial), I’ll introduce further automations in this area. But one thing is certain: I’ll continue to leverage the power of TemporaryGraphicsManage.\n\n- classify line styles built-in versus user defined\n  https://forums.autodesk.com/t5/revit-api-forum/finding-user-line-styles/m-p/12566994#M76897\n\n- The curious case of JavaScript\n  https://www.linkedin.com/pulse/curious-case-javascript-sandip-jadhav-ebobf\n\n- LLM tokenisation 2:13:35 video\n  Let's build the GPT Tokenizer\n  https://youtu.be/zduSFxRajkE\n  <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zduSFxRajkE?si=H0TaI7Ro1ZOpmv0i\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n- World Model on Million-Length Video and Language with RingAttention\n  https://largeworldmodel.github.io/\n  > The ability to correctly answer questions about an hour-long video is pretty impressive\n\n- Air Canada must honor refund policy invented by airline’s chatbot\n  https://arstechnica.com/tech-policy/2024/02/air-canada-must-honor-refund-policy-invented-by-airlines-chatbot/\n\n- https://diataxis.fr/\n  Diátaxis\n  A systematic approach to technical documentation authoring.\n\n- amara's law -- ubunbtu\n\n- John Burn-Murdoch of the Financial Times\n  Is the west talking itself into decline?\n\ntwitter:\n\nAmara's law, progress versus risk, AI-based utilities, BIM interactive notebooks, classifying line styles, and TemporaryGraphicsManager in action  with the #RevitAPI @AutodeskRevit #BIM @DynamoBIM https://autode.sk/bimnotebook\n\nInteractivity and AI keeps growing\n&ndash; BIM interactive notebooks\n&ndash; TemporaryGraphicsManager in action\n&ndash; Classify line styles built-in vs user\n&ndash; The curious case of JavaScript\n&ndash; Magika AI-based file type classification\n&ndash; NotebookLM\n&ndash; AI understands videos better\n&ndash; Airline chatbot invented a refund policy\n&ndash; LLM tokenisation\n&ndash; Diátaxis systematic technical documentation\n&ndash; Amara's law\n&ndash; Talking about progress versus risk...\n\nlinkedin:\n\nAmara's law, progress versus risk, AI-based utilities, BIM interactive notebooks, classifying line styles, and TemporaryGraphicsManager in action  with the #RevitAPI\n\nhttps://autode.sk/bimnotebook\n\n- BIM interactive notebooks\n- TemporaryGraphicsManager in action\n- Classify line styles built-in vs user\n- The curious case of JavaScript\n- Magika AI-based file type classification\n- NotebookLM\n- AI understands videos better\n- Airline chatbot invented a refund policy\n- LLM tokenisation\n- Diátaxis systematic technical documentation\n- Amara's law\n- Talking about progress versus risk...\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "Interactive BIM Notebook, Temporary Graphics and AI",
    "local_header_href": "#interactive-bim-notebook-temporary-graphics-and-ai",
    "chunk_text": "### Interactive BIM Notebook, Temporary Graphics and AI\n\nThe amount of news items related to interactivity and AI keeps growing:\n\n- [BIM interactive notebooks](#2)\n- [TemporaryGraphicsManager in action](#3)\n- [Classify line styles built-in vs user](#4)\n- [The curious case of JavaScript](#5)\n- [Magika AI-based file type classification](#6)\n- [NotebookLM](#7)\n- [AI understands videos better](#8)\n- [Airline chatbot invented a refund policy](#9)\n- [LLM tokenisation](#10)\n- [Diátaxis systematic technical documentation](#11)\n- [Amara's law](#12)\n- [Talking about progress versus risk](#13)"
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "BIM Interactive Notebooks",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> BIM Interactive Notebooks\n\nHot on the foot of\nJoel Waldheim Saury's [interactive .NET Revit BIM Polyglot Notebook](https://thebuildingcoder.typepad.com/blog/2024/02/net-core-c4r-views-and-interactive-hot-reload.html#4),\n[Chuong Ho](https://chuongmep.com/) shares\nhis [BIM Interactive Notebooks](https://www.linkedin.com/posts/chuongmep_opensource-ai-dataanalysis-activity-7164531381107183616-TYNP?utm_source=share&utm_medium=member_desktop):\n\n> I'm thrilled to share an open-source project that I believe holds immense potential.\nIt enables you to integrate and analyze Revit model data in various ways using Jupyter Notebook with multiple programming languages under Interactive .NET.\nThe project has been brought to fruition, and it's truly gratifying to see its development, as it opens up significant opportunities with AI and data analysis.\nExplore further in the\n\n> - [BIM Interactive Notebooks GitHub repository](https://github.com/jowsy/bim-net-interactive)\n\n<center>\n<img src=\"img/ch_jupyter.gif\" alt=\"BIM interactive notebooks\" title=\"BIM interactive notebooks\" width=\"748\"/> <!-- Pixel Height: 656 Pixel Width: 748 -->\n</center>\n\nMany thanks to Chuong Ho for this!"
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "TemporaryGraphicsManager in Action",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> TemporaryGraphicsManager in Action\n\n[Julian Wandzilak](https://www.linkedin.com/in/wandzilak/) of [W7k](https://w7k.pl/) presents\nthe [`TemporaryGraphicsManager` in action](https://forums.autodesk.com/t5/revit-api-forum/temporarygraphicsmanager-in-action/td-p/12566892),\nincluding a 45-second YouTube video [W7k Revit API Experiments - TemporaryGraphicsManager](https://youtu.be/Q7aKEocvRtk):\n\n<center>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Q7aKEocvRtk?si=ZYffG0lLTLgtXXRG\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</center>\n\n> Today, I would like to share a recent discovery I made while working with Revit API. As many of you know, creating new graphical elements within Revit can be quite challenging and limited. However, I stumbled upon a little-known class called `TemporaryGraphicsManager`.\nThe TemporaryGraphicsManager allows us to add temporary graphical elements directly to the model or drawing space. These graphics are not subject to undo actions and are not permanently saved anywhere. While they won’t clutter up your project, they provide a powerful way to enhance your user experience.\nSurprisingly, I haven’t seen this class widely used in other plugins or extensions. So, when I first encountered it, I knew I had to put it to the test.\nIn the initial part of my video, I demonstrate how to align title lines to previously saved points. With a simple click, you can create temporary graphics that will guide your design process and allow you to snap your title lines to them!\nIn the second part of the video, I collect points and save them to an external file for future reference. The TemporaryGraphicsManager conveniently marks their locations, eliminating the need to remember which points I’ve already saved.\nIs this the easiest method of controlling title lines? Perhaps not. In an upcoming update to my Drafter tool (to which I added recently 30 days of trial), I’ll introduce further automations in this area. But one thing is certain: I’ll continue to leverage the power of TemporaryGraphicsManager.\n\nThank you for the heads-up, Julian!"
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "Classify Line Styles Built-In vs User",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Classify Line Styles Built-In vs User\n\nAn interesting example of several completely different possible approaches to\nclassify line styles in built-in versus user defined was finally solved\nby Frank [@Fair59](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/2083518) Aarssen in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [finding user line styles](https://forums.autodesk.com/t5/revit-api-forum/finding-user-line-styles/m-p/12566994):\n\n**Question:**\nI’m writing an addon that changes all the line styles of Detail Lines, Model Lines and the borders of Filled Regions to a certain line style.\nBut I'm having issues with distinguishing user built line styles from system / inbuilt ones.\n\nTo get all the lines styles and including the user and system ones, I use a FilteredElementCollector to find class GraphicsStyle:\n\n<pre>\n  IList&lt;Element&gt; getgs = new FilteredElementCollector(doc)\n    .OfClass(typeof(GraphicsStyle))\n    .ToElements();\n</pre>\n\nThis works but returns a lot of styles some unrelated to lines, but I can use the `GraphicStyleCategory`, then Parent, then Name to find styles with the parent name “Lines”:\n\n<pre>\n  if (mystyle.GraphicsStyleCategory.Parent.Name == \"Lines\")\n</pre>\n\nSo, now I have all the line styles, but I want to remove the system ones, which I thought were lines styles within &lt; and &gt;, such as &lt;Thin Lines&gt; or &lt;Wide Lines&gt;.\n\nBut, looking at the names that are returned, some have &lt;&gt;, some have only a &gt; at the end and others don't have anything to distinguish them.\nThese are the names returned:\n\n<pre>\n  &lt;Room Separation&gt;\n  &lt;Insulation Batting Lines&gt;\n  &lt;Sketch&gt;\n  &lt;Lines&gt;\n  &lt;Thin Lines&gt;\n  &lt;Medium Lines&gt;\n  &lt;Wide Lines&gt;\n  &lt;Overhead&gt;\n  &lt;Hidden&gt;\n  &lt;Demolished&gt;\n  &lt;Beyond&gt;\n  Boundary&gt;\n  Riser&gt;\n  Run&gt;\n  Landing Center&gt;\n  &lt;Area Boundary&gt;\n  &lt;Hidden Lines&gt;\n  &lt;Space Separation&gt;\n  &lt;Lines&gt;\n  &lt;Lines&gt;\n  &lt;Lines&gt;\n  Stair Path&gt;\n  &lt;Fabric Envelope&gt;\n  &lt;Fabric Sheets&gt;\n  Railing Rail Path Lines\n  Railing Rail Path Extension Lines\n  &lt;Centerline&gt;\n  &lt;Axis of Rotation&gt;\n  &lt;Path of Travel Lines&gt;\n  &lt;Load Area Separation&gt;\n  MyStyle\n</pre>\n\nSeems a little inconsistent to me...\nIs there any good way to pick out the 'system' line styles so that I can only find ones the user has created?\n\n**Answer:**\nOne possible approach that might work is to look at their element ids. These objects are elements, stored in the BIM db, hence equipped with element ids, aren't they? The element ids are assigned one by one as things get added to the database. Hence, higher element ids are added later. They are also incremented consecutively as work progresses. While this behaviour is undocumented and not officially supported or guaranteed in any way whatsoever, it has been working like that forever, afaik. Therefore, if you determine the highest element id in your project right now, you know that everything with a higher id has been added later. Therefore, you know that all line styles with an id higher than the highest one when you started initial work on your BIM are user generated in one way or another, and all lower ones are built-in. Does this help?\n\n**Response:**\nThanks for your response.\n\nI think I've found another way which better does what I'm doing for. After reading more I found that I can collect all CurveElements from the project with this:\n\n<pre>\n  List&lt;CurveElement&gt; AllCurves\n    = new List&lt;CurveElement&gt;(\n      new FilteredElementCollector(doc)\n        .OfClass(typeof(CurveElement))\n        .ToElements()\n        .Cast&lt;CurveElement&gt;());\n</pre>\n\nIterate through them and use the `GetLineStyleIds` method to get their `GraphicsStyles`... luckily, these appear to be named correctly with &lt;&gt; denoting 'System' line styles.\n\n**Answer:**\nA category has the property `BuiltInCategory`.\nThe graphicalStyleCategory of a user-defined line has a built-in category value of `Invalid`:\n\n<pre>\n  StringBuilder sb = new StringBuilder();\n  Category LinesCat = Category.GetCategory(doc,\n    BuiltInCategory.OST_Lines);\n  IEnumerable&lt;GraphicsStyle&gt; getgs\n    = new FilteredElementCollector(doc)\n      .OfClass(typeof(GraphicsStyle))\n      .Cast&lt;GraphicsStyle>();\n  foreach(GraphicsStyle gs in getgs)\n  {\n    Category cat = gs.GraphicsStyleCategory;\n    if(cat==null || cat.Parent==null)\n      continue;\n    if(cat.Parent.Id.IntegerValue != LinesCat.Id.IntegerValue)\n      continue;\n    if(cat.BuiltInCategory == BuiltInCategory.INVALID)\n    {\n      sb.AppendLine(string.Format(\n        \"User defined Line: {0}\",cat.Name));\n    }\n    else\n    {\n      sb.AppendLine(string.Format(\n        \"System defined Line {0} / {1}\",\n        cat.BuiltInCategory, cat.Name));\n    }\n  }\n  TaskDialog.Show(\"debug\",sb.ToString());\n</pre>\n\nThank you for this discussion and solution, Kevin and Frank."
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "The Curious Case of JavaScript",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> The Curious Case of JavaScript\n\nMoving away from pure Revit API topics,\nfor an interesting overview of the evolution and power of JavaScript, Sandip Jadhav describes his personal exploration\nin [The curious case of JavaScript](https://www.linkedin.com/pulse/curious-case-javascript-sandip-jadhav-ebobf)."
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "Magika AI-Based File Type Classification",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Magika AI-Based File Type Classification\n\nUnrelated to BIM, determining the type of data contained in a computer file can be surprisingly tricky.\nOne important utility to address that need was provided in 1973 by\nthe [Unix `file` command](https://en.wikipedia.org/wiki/File_(command)).\n50 years later, Google just open-sourced [Magika](https://google.github.io/magika/),\nan AI-based approach to this task with higher performance:\n\n- [Magika blog post](https://opensource.googleblog.com/2024/02/magika-ai-powered-fast-and-efficient-file-type-identification.html)\n- [Magika GitHub repository](https://github.com/google/magika/)\n\n<center>\n<img src=\"img/magika_performance.png\" alt=\"Magika performance\" title=\"Magika performance\" width=\"600\"/> <!-- Pixel Height: 720 Pixel Width: 1,328 -->\n</center>"
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "NotebookLM",
    "local_header_href": "#7",
    "chunk_text": "####<a name=\"7\"></a> NotebookLM\n\nGoogle also introduced\nthe [NotebookLM experiment](https://notebooklm.google/) touting\nan interface that lets you easily shift between reading a text, asking questions about it and writing with built-in AI support that can\nalso transform your set of notes into an outline, blog post, business plan, and more:\n\n> NotebookLM gives you a personalized AI, grounded in the information you trust.\nNotebookLM is only available in the U.S. for users 18 and up."
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "AI understands videos better",
    "local_header_href": "#8",
    "chunk_text": "####<a name=\"8\"></a> AI understands videos better\n\nOn the topic of AI, the research\non a [world model on million-length video and language with RingAttention](https://largeworldmodel.github.io/) now\nenables the pretty impressive ability to correctly answer questions about an hour-long video."
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "Airline Chatbot Invented a Refund Policy",
    "local_header_href": "#9",
    "chunk_text": "####<a name=\"9\"></a> Airline Chatbot Invented a Refund Policy\n\nAIs still are prone to mistakes as well, though,\nand [Air Canada must honor refund policy invented by airline’s chatbot](https://arstechnica.com/tech-policy/2024/02/air-canada-must-honor-refund-policy-invented-by-airlines-chatbot/)."
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "LLM Tokenisation",
    "local_header_href": "#10",
    "chunk_text": "####<a name=\"10\"></a> LLM Tokenisation\n\nOne fundamental and tricky aspect of large language models is discussed in full depth in the two-and-a-quarter hour video\non [LLM tokenisation &ndash; let's build the GPT tokenizer](https://youtu.be/zduSFxRajkE):\n\n<center>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zduSFxRajkE?si=H0TaI7Ro1ZOpmv0i\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</center>\n\nThat might help better understand some of the occasional AI weirdness."
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "Diátaxis Systematic Technical Documentation",
    "local_header_href": "#11",
    "chunk_text": "####<a name=\"11\"></a> Diátaxis Systematic Technical Documentation\n\nUnrelated to both Revit and AI, a colleague pointed out [Diátaxis](https://diataxis.fr/):\n\n> A systematic approach to technical documentation authoring.\n\nIt is of interest to me and our entire team, since it applies to most of the work I do, including my writing right now."
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "Amara's Law",
    "local_header_href": "#12",
    "chunk_text": "####<a name=\"12\"></a> Amara's Law\n\nFinally, for a fundamental aspect of our human nature that applies to almost everything we do,\nRoy Amara formulated [Amara's law](https://en.wikipedia.org/wiki/Roy_Amara#Amara's_law) in the 1960s:\n\n<center>\n<p style=\"font-style:italic;padding-right:10%;padding-left:10%\">We tend to overestimate the effects of a technology in the short run and underestimate them in the long run.</p>\n</center>\n\nHis observation was not only about technology, but human behaviour in general: we are curious and impatient.\nWe get excited about new things and are quickly disappointed when they don't immediately perform as expected.\nEspecially from technologies, we expect too much too quickly and have little patience with the need for innovation to develop with time.\nAI is a good example: the initial mixture of euphoria and panic has rapidly faded.\nAnother example, our health behaviour: we often initially overestimate behavioural changes &ndash; a new training method, meditation, or diet &ndash; and enthusiastically view them as a panacea, underestimating long-term benefits.\nOften, people don't stick with a behaviour long enough to see its true benefits and returns.\nOr, other people ([Sartre's hell](https://duckduckgo.com/?q=sartre+hell)): we get to know a person, like her, fall in love.\nReality sets in, initially exciting aspects irritate.\nGet through that phase and realise that the other person is not perfect (but neither are we), and the tide turns.\nSo, again, we tend to overestimate people in the short term and underestimate them in the long term."
  },
  {
    "original_filename": "2028_bim_notebook",
    "header_text": "Talking About Progress versus Risk",
    "local_header_href": "#13",
    "chunk_text": "####<a name=\"13\"></a> Talking About Progress versus Risk\n\nContinuing to wax philosophical, with an eye to the interesting times we are living in and actively creating today, every day,\nJohn Burn-Murdoch of the Financial Times recently asked,\n[is the west talking itself into decline?](https://duckduckgo.com/?q=Is+the+west+talking+itself+into+decline%3F)\n\nA recent [scientific paper](https://docs.iza.org/dp16674.pdf) used textual analysis of 173,031 works printed in England between 1500 and 1900 and found significant correlation between vocabulary and culture.\n\n> Extending the same analysis to the present, a striking picture emerges:\nover the past 60 years, the west has begun to shift away from the culture of progress, and towards one of caution, worry and risk-aversion, with economic growth slowing over the same period.\nThe frequency of terms related to progress, improvement and the future has dropped by about 25 per cent since the 1960s, while those related to threats, risks and worries have become several times more common.\n\nSo: don't worry, be happy!\n\nTake a risk and innovate!"
  }
]