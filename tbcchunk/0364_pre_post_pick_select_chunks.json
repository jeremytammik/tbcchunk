[
  {
    "original_filename": "0364_pre_post_pick_select",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0364_pre_post_pick_select",
    "header_text": "Pre-, Post- and Pick Select",
    "local_header_href": "#pre-post-and-pick-select",
    "chunk_text": "<h3>Pre-, Post- and Pick Select</h3><p>Today is a holiday in Neuchâtel,\n\n<a href=\"http://en.wikipedia.org/wiki/Ascension_Day\">\nAscension Day</a>,\n\nand it is raining cats and dogs.\n\n<p>I recently explored an issue with accessing the revision data in a Revit model, and made strong use of my beloved element lister and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/deeper-parameter-exploration.html\">built-in parameter checker</a> tools.\n\nI already discussed their use for various analysis purposes such as\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/exploring-element-parameters.html\">\nexploring element parameters</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/title-block-of-sheet.html\">\naccessing the title block information of a sheet</a>.\n\n<p>In many cases, such an exploration involves looking at the parameters of an element that is not visible on the screen and therefore cannot be picked interactively.\nI used to use the standard Revit user interface to select such elements, picking Manage &gt; Inquiry &gt; Select by ID and typing in the element id I am interested in.\n\n<p>Doing this repeatedly, I thought I could save myself a couple of clicks by integrating this into the built-in param4ter checker, or rather into the utility method GetSingleSelectedElementOrPrompt which it uses.\nThe previous version already supported pre- and post-selection, i.e. an element could be selected either before or after launching the command.\nTo implement this, the method simply checks the contents of the current selection set.\nIf exactly one element is selected, that is used, otherwise the user is prompted to select an element on the screen.\n\n<p>I decided to enhance this to allow either on-screen selection or typing in the element id.\n\n<p>To do so, I first need a dialogue with a text entry field for typing it, so I implemented a new ElementIdForm class with the following graphical user interface:</p>\n<center>\n<img alt=\"ElementIdForm\" src=\"img/elementidform.png\"/>\n</center>\n<p>Its code it pretty trivial, it just maintains a string variable for the typed-in element id and reacts to the clicks on the three buttons. If the pick button is clicked, the element id is set to the empty string and a dialogue result OK is returned, which informs the GetSingleSelectedElementOrPrompt that an interactive pick selection is required.\n\n<p>Here is the code for GetSingleSelectedElementOrPrompt, checking for a single preselected element, displaying the element id form otherwise, and reacting to the result of that:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span>\n  GetSingleSelectedElementOrPrompt(\n    <span class=\"teal\">UIDocument</span> uidoc )\n{\n  <span class=\"teal\">Element</span> e = <span class=\"blue\">null</span>;\n  <span class=\"teal\">ElementSet</span> ss = uidoc.Selection.Elements;\n  <span class=\"blue\">if</span>( 1 == ss.Size )\n  {\n    <span class=\"teal\">ElementSetIterator</span> iter = ss.ForwardIterator();\n    iter.MoveNext();\n    e = iter.Current <span class=\"blue\">as</span> <span class=\"teal\">Element</span>;\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">string</span> sid;\n    <span class=\"teal\">DialogResult</span> result = <span class=\"teal\">DialogResult</span>.OK;\n    <span class=\"blue\">while</span>( <span class=\"blue\">null</span> == e &amp;&amp; <span class=\"teal\">DialogResult</span>.OK == result )\n    {\n      <span class=\"blue\">using</span>( <span class=\"teal\">ElementIdForm</span> form\n        = <span class=\"blue\">new</span> <span class=\"teal\">ElementIdForm</span>() )\n      {\n        result = form.ShowDialog();\n        sid = form.ElementId;\n      }\n      <span class=\"blue\">if</span>( <span class=\"teal\">DialogResult</span>.OK == result )\n      {\n        <span class=\"blue\">if</span>( 0 == sid.Length )\n        {\n          <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n            <span class=\"teal\">ObjectType</span>.Element,\n            <span class=\"maroon\">\"Please pick an element\"</span> );\n \n          e = r.Element;\n        }\n        <span class=\"blue\">else</span>\n        {\n          <span class=\"teal\">ElementId</span> id = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(\n            <span class=\"blue\">int</span>.Parse(( sid ) ) );\n \n          e = uidoc.Document.get_Element( id );\n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n          {\n            ErrorMsg( <span class=\"blue\">string</span>.Format(\n              <span class=\"maroon\">\"Invalid element id '{0}'.\"</span>,\n              sid ) );\n          }\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> e;\n}\n</pre>\n<p>I added one little enhancement to the parameter values displayed as well.\nIn previous versions, the value sting was displayed in addition to the raw database value.\nThis is especially useful for real-valued data, in which case the value string displays value converted to the current the user selected unit.\nFor element ids, a description of the element including its name and category is displayed in addition to the raw integer value.\nI now also added code to display the corresponding built-in category name for a negative element id.\nThis may not always be appropriate, but in many cases it is.\n\n<p>Here is the code for determining what the minimum and maximum built-in category enumeration values are:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">int</span> _min_bic = 0;\n<span class=\"blue\">static</span> <span class=\"blue\">int</span> _max_bic = 0;\n \n<span class=\"blue\">static</span> <span class=\"blue\">void</span> SetMinAndMaxBuiltInCategory()\n{\n  <span class=\"teal\">Array</span> a = <span class=\"teal\">Enum</span>.GetValues( <span class=\"blue\">typeof</span>( <span class=\"teal\">BuiltInCategory</span> ) );\n  _max_bic = a.Cast&lt;<span class=\"blue\">int</span>&gt;().Max();\n  _min_bic = a.Cast&lt;<span class=\"blue\">int</span>&gt;().Min();\n}\n</pre>\n<p>This helper method checks whether a given integer value lies within this range and returns a string displaying the corresponding BuiltInCategory enumeration value:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> BuiltInCategoryString( <span class=\"blue\">int</span> i )\n{\n  <span class=\"blue\">if</span>( 0 == _min_bic )\n  {\n    SetMinAndMaxBuiltInCategory();\n  }\n  <span class=\"blue\">return</span> (_min_bic &lt; i &amp;&amp; i &lt; _max_bic )\n    ? <span class=\"maroon\">\" \"</span> + ((<span class=\"teal\">BuiltInCategory</span>) i).ToString()\n    : <span class=\"blue\">string</span>.Empty;\n}\n</pre>\n<p>The code we use to display the additional information for an element id now looks like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">string</span> s;\n  <span class=\"blue\">if</span>( <span class=\"teal\">StorageType</span>.ElementId == param.StorageType\n    &amp;&amp; <span class=\"blue\">null</span> != doc )\n  {\n    <span class=\"teal\">ElementId</span> id = param.AsElementId();\n \n    <span class=\"blue\">int</span> i = id.IntegerValue;\n \n    <span class=\"blue\">if</span>( 0 &gt; i )\n    {\n      s = i.ToString()\n        + BuiltInCategoryString( i );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Element</span> e = doc.get_Element( id );\n      s = ElementDescription( e, <span class=\"blue\">true</span> );\n    }\n  }\n</pre>\n<p>For example, let's explore the parameters of a newly added revision element.\n\n<p>I opened a project with a few sheets in it and ran the command Lab2_1_Elements to save all its elements to a file, which I renamed to RevitElementsBeforeRevision.txt.\nI then added a new revision via View &gt; Revisions &gt; Add &gt; Per Sheet &gt; Apply &gt; OK and listed the elements to a second file RevitElementsAfterRevision.txt.\nThe difference between the two files shows that one single element was added:\n\n<pre>\nC:\\tmp\\ &gt;diff \n  RevitElementsBeforeRevision.txt\n  RevitElementsAfterRevision.txt\n2720a2721\n&gt; Id=129893; Class=Element; Category=Revision; Name=Revisions;</pre>\n<p>This element cannot be picked on the screen, but I can enter its id 129893 into my new element id entry form to select it for displaying its parameters, which show up like this:</p>\n<center>\n<img alt=\"Revision parameters\" src=\"img/revision_parameters.png\"/>\n</center>\n<p>Note that the built-in category enumeration value is now displayed in both raw integer and descriptive string form.\n\n<p>For completeness sake, here is the same data in text format:\n\n<pre>\nRevision 'Revisions' 129893 Instance Built-in Parameters\n\nDESIGN_OPTION_ID                      Design Option        ElementId       read-only  -1                          -1\nEDITED_BY                             Edited by            String/Text     read-only\nELEM_CATEGORY_PARAM                   Category             ElementId       read-only  -2006070 OST_Revisions      -2006070\nELEM_CATEGORY_PARAM_MT                Category             ElementId       read-only  -2006070 OST_Revisions      -2006070\nELEM_DELETABLE_IN_FAMILY              Deletable            Integer/YesNo   read-write                             1\nELEM_FAMILY_AND_TYPE_PARAM            Family and Type      ElementId       read-write -1                          -1\nELEM_FAMILY_PARAM                     Family               ElementId       read-write -1                          -1\nELEM_PARTITION_PARAM                  Workset              Integer         read-write                             0\nELEM_TYPE_PARAM                       Type                 ElementId       read-write -1                          -1\nELEMENT_LOCKED_PARAM                  Locked               Integer/YesNo   read-write                             0\nID_PARAM                              Id                   ElementId       read-only  Revision 'Revisions' 129893 129893\nPHASE_CREATED                         Phase Created        ElementId       read-write -1                          -1\nPHASE_DEMOLISHED                      Phase Demolished     ElementId       read-write -1                          -1\nPROJECT_REVISION_ENUMERATION          Numbering            Integer/Integer read-only                              0\nPROJECT_REVISION_REVISION_DATE        Revision Date        String/Text     read-only                              Date 2\nPROJECT_REVISION_REVISION_DESCRIPTION Revision Description String/Text     read-only                              Revision 2\nPROJECT_REVISION_REVISION_ISSUED      Issued               Integer/YesNo   read-only                              0\nPROJECT_REVISION_REVISION_ISSUED_BY   Issued by            String/Text     read-only\nPROJECT_REVISION_REVISION_ISSUED_TO   Issued to            String/Text     read-only\nPROJECT_REVISION_REVISION_NUM         Revision Number      String/Text     read-only\nPROJECT_REVISION_SEQUENCE_NUM         Revision Sequence    Integer/Integer read-only                              2\nSYMBOL_ID_PARAM                       Type Id              ElementId       read-only  -1                          -1\nUNIFORMAT_CODE                        Assembly Code        String/Text     read-write\nUNIFORMAT_DESCRIPTION                 Assembly Description String/Text     read-only\n</pre>\n<p>To see the truncated lines, copy and paste them to an editor.\n\n<p>I trust you will find these tools as useful as I do.\n\n<p>Here is today's snapshot of my current version of the\n\n<a href=\"zip/rac_labs_2010-05-13.zip\">\nRevit API introduction labs</a>,\n\nincluding the element lister Lab2_1_Elements and the built-in parameter checker commands described above.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]