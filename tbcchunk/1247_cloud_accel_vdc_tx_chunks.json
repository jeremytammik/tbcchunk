[
  {
    "original_filename": "1247_cloud_accel_vdc_tx",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1247_cloud_accel_vdc_tx",
    "header_text": "Cloud Accelerator, VDC and Transaction Groups",
    "local_header_href": "#cloud-accelerator-vdc-and-transaction-groups",
    "chunk_text": "<h3>Cloud Accelerator, VDC and Transaction Groups</h3><p>Wow, hark these cool topics for today:</p><ul>\n<li><a href=\"#2\">Autodesk Cloud Accelerator workshop invitation</a></li>\n<li><a href=\"#3\">BIM becomes VDC</a></li>\n<li><a href=\"#4\">Using Transaction Groups to Relinquish Elements Without Saving or Syncing</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1247_cloud_accel_vdc_tx",
    "header_text": "Autodesk Cloud Accelerator Workshop Invitation",
    "local_header_href": "#autodesk-cloud-accelerator-workshop-invitation",
    "chunk_text": "<h4>Autodesk Cloud Accelerator Workshop Invitation</h4><p>Autodesk just announced the\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2014/11/get-ready-for-the-autodesk-cloud-accelerator-program.html\">\n2015 Autodesk Cloud Accelerator</a>,\n\na two-week workshop in March 2015 in our San Francisco office for up to 14 creative software developers.</p><p>For two weeks, March 9 to March 20, 2015, participants will work intensively on their chosen project with the help, support, and training of the Autodesk Cloud engineering teams.  This includes daily classes by industry experts on important aspects of cloud development and 1 on 1 help from these experts in real time. At the end of the Accelerator, you will also have the opportunity to present your prototype to senior Autodesk Executives.</p><center>\n<img alt=\"Autodesk Cloud Accelerator\" src=\"img/cloud_accelerator.jpg\" width=\"250\"/>\n</center><p>If you are interested in joining the adventure, please look at Stephen Preston's more detailed invitation to\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2014/11/get-ready-for-the-autodesk-cloud-accelerator-program.html\">\nget ready for the Autodesk cloud accelerator program</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1247_cloud_accel_vdc_tx",
    "header_text": "BIM Becomes VDC",
    "local_header_href": "#bim-becomes-vdc",
    "chunk_text": "<h4>BIM Becomes VDC</h4><p>Some people are still struggling to contend that BIM is hype.</p><p>Whatever are they going to say about VDC, virtual design and construction?</p><p>That seems to be the direction the industry is heading right now.</p><p>To learn more, take a look at\n\n<a href=\"http://www.bdcnetwork.com/bim-becomes-vdc\">\nBIM becomes VDC</a>,\n\n<i>A case study in disruption</i>, by John Tobin, LEED AP.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1247_cloud_accel_vdc_tx",
    "header_text": "Using Transaction Groups to Relinquish Elements Without Saving or Syncing",
    "local_header_href": "#using-transaction-groups-to-relinquish-elements-without-saving-or-syncing",
    "chunk_text": "<h4>Using Transaction Groups to Relinquish Elements Without Saving or Syncing</h4><p><strong>Question:</strong> I have a valid local file open in Revit which has been modified by my add-in.\nCan I programmatically close this file without syncing, saving, or leaving any elements checked out by the current user?</p><p>It's possible to relinquish un-modified elements using the WorksharingUtils.RelinquishOwnership method.\nHowever, this will not relinquish the modified elements.</p><p>The documentation for Document.Close also doesn't mention anything about relinquishing checked out elements.</p><p>So, is the only way to do this to close without saving, re-open the same model, and then call RelinquishOwnership?</p><p><strong>Answer:</strong> Thank you for your interesting query.</p><p>One obvious approach would be to encapsulate all of the changes performed by your add-in in a transaction group and roll that back again before terminating your add-in command sequence.</p><p><strong>Response:</strong> Yeah, rolling back a transaction is the obvious things to do.\nUnfortunately with the tool I'm working on a number of transactions will have been committed before it decides that it needs to discard the changes.</p><p>What about a TransactionGroup?</p><p>If I commit transactions that check out elements inside a transaction group and then roll back the transaction group will this also relinquish the checked out elements?</p><p>At least at then those elements would not longer be modified, so Relinquish should work.</p><p><strong>Answer:</strong> Yes, exactly.\nI was not sure whether that was obvious to you, which is why I pointed it out.</p><p>Some Revit API interactions do in fact require a committed transaction, or a whole series of sequential committed transactions, in order to fulfil certain tasks.</p><p>All of these transactions can be fully committed, and will still be rolled back if the entire series is encapsulated in a transaction group.</p><p>Here is the description of the TransactionGroup class in the Revit API help file RevitAPI.chm:</p><div style=\"color:darkblue\">\n<p>Transaction groups aggregate a number of transactions.</p>\n<p>A transaction group controls whether transactions committed inside the group should stay committed or should be all discarded. If the group is committed, all the transactions remain committed, but if the transaction group is rolled back instead, all the inner, already committed transactions will be undone (and removed).</p>\n<p>There are two ways of committing a group â€“ Commit and Assimilate. By committing, all transactions committed inside a group stay as they are, while by assimilating, all inner transactions will be merged into a single transaction.</p>\n<p>A transaction group can only be started when no transaction is active, and must be closed only after the last transaction started inside the group is finished, i.e. after it was either committed or rolled back.</p>\n<p>Transaction groups may be nested inside each other with the restriction that every nested transaction group is entirely contained (opened and closed) in the parent transaction group.</p>\n</div><p>Just like transactions themselves, the simplest, most effective and fool proof way of handling transaction groups in .NET code is to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/using-using-automagically-disposes-and-rolls-back.html\">\nencapsulate them in a 'using' statement</a>.</p><p>I hope this helps.</p>"
  }
]