[
  {
    "original_filename": "0911_displayunittype",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0911_displayunittype",
    "header_text": "Parameter DisplayUnitType Enhancement, Bretagne and Decompilers",
    "local_header_href": "#parameter-displayunittype-enhancement-bretagne-and-decompilers",
    "chunk_text": "<h3>Parameter DisplayUnitType Enhancement, Bretagne and Decompilers</h3><p>After looking at several performance enhancement possibilities last week, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/sweep-family-performance-enhancement.html\">sweep family performance enhancement</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/loadfamily-and-collector-iteration-performance.html\">LoadFamily and collector iteration performance</a>,\n\nhere is another exciting and pretty sophisticated exploration of internal Revit API implementation details by\n\n<a href=\"http://www.facebook.com/profile.php?id=100003616852588\">\nVictor Chekalin</a> that\n\ncan be used to achieve a significant speed improvement when accessing large numbers of parameters and checking their DisplayUnitType property.</p><a name=\"1\"></a>"
  },
  {
    "original_filename": "0911_displayunittype",
    "header_text": "Brittany and Konk Leon",
    "local_header_href": "#brittany-and-konk-leon",
    "chunk_text": "<h4>Brittany and Konk Leon</h4><center>\n<img alt=\"Double rainbow in Le Conquet\" src=\"file:///j/photo/jeremy/2013/2013-03-18_brest/jeremy_brest_rainbow.jpg\" width=\"200\"/>\n\n–\n\n<img alt=\"View over the Atlantic from the converted chapel meeting room window\" src=\"file:///j/photo/jeremy/2013/2013-03-18_brest/brest_view_1_cropped.jpg\" width=\"200\"/>\n</center><p>Before getting to that, though, here is an update on my current whereabouts.\n\n<p>Yesterday I spent travelling to Brest and Le Conquet\n\n(<a href=\"http://br.wikipedia.org/wiki/Konk-Leon\">Konk Leon</a> in Breton)\n\nfor a meeting with my European DevTech colleagues.</p>\n<p>This is the western-most point of northern France, home of my boss Cyrille, and my first visit to the Bretagne.</p>\n<p>The weather is exciting and challenging, and the views spectacular.</p>\n<p>A quick rainfall in the east and simultaneous glorious evening sunlight from the west produced a beautiful double rainbow.</p>\n<p>We have a meeting room in a converted chapel with a view straight out onto the Atlantic.</p>\n<a name=\"2\"></a>\n<h4>Parameter DisplayUnitType Enhancement and Research</h4>\n<p>Back to the DisplayUnitType enhancement, here is the description of the research leading up to it in Victor's own words:\n\n<p>Now I'm working with the element parameters again and I need to get all parameters of a lot of elements in the project including their DisplayUnitType.\n\n<p>The problem is that not all parameters have a display unit type.\nIf I try to retrieve a display unit type for a parameter where it does not exist, an Autodesk.Revit.Exceptions.InvalidOperationException is thrown.\nUnfortunately, there is no direct way to determine beforehand whether a parameter has a DisplayUnitType defined or not, i.e. whether the call will succeed or fail.\n\n<p>The most obvious way would be to wrap the code where I retrieve the display unit type in a try... catch block.\nBut throwing and catching an exception is a very expensive operation and greatly reduces the performance –\n\n<a href=\"http://www.jacopretorius.net/2009/10/exceptions-should-be-exceptional.html\">exceptions should be exceptional</a>.\n\n<p>I decided to go deeper and looked at the RevitAPI.dll using\n\n<a href=\"http://www.jetbrains.com/decompiler\">\ndotPeek – free .NET decompiler</a>.\n\n<p>At first I went to the DisplayUnitType property of the Parameter class.\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">DisplayUnitType</span> DisplayUnitType\n{\n  <span class=\"blue\">get</span>\n  {\n    <span class=\"teal\">Definition</span> definition = <span class=\"blue\">this</span>.Definition;\n    ParamTypeSpec paramTypeSpec1;\n    <span class=\"blue\">if</span> ((ParamTypeEnum) *(<span class=\"blue\">int</span>*)\n      definition.getParamTypeSpec(&amp;paramTypeSpec1)\n      != (ParamTypeEnum) 15)\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> Autodesk.Revit.Exceptions\n        .<span class=\"teal\">InvalidOperationException</span>(<span class=\"blue\">new</span> FunctionId(\n          <span class=\"maroon\">\"n:\\\\build\\\\2013_ship_x64_inst_20120221_2030\\\\source\\\\api\\\\revitapi\\\\objects\\\\parameters\\\\APIParameter.cpp\"</span>,\n          581, <span class=\"maroon\">\"Autodesk::Revit::DB::Parameter::DisplayUnitType::get\"</span>),\n          <span class=\"blue\">string</span>.Empty);\n    }\n    <span class=\"blue\">else</span>\n    {\n      ParamTypeSpec paramTypeSpec2;\n      <span class=\"blue\">return</span> (<span class=\"teal\">DisplayUnitType</span>)\n        \\u003CModule\\u003E.FormatOptions\\u002EgetDisplayUnits(\n          \\u003CModule\\u003E.AUnits\\u002EgetFormatOptions(\n            \\u003CModule\\u003E.ADocument\\u002EgetAUnits(\n              (ADocument*) *(<span class=\"blue\">long</span>*) <span class=\"blue\">this</span>.m_pCDA),\n                (<span class=\"teal\">UnitType</span>.Enum) *(<span class=\"blue\">int</span>*) ((<span class=\"teal\">IntPtr</span>)\n                definition.getParamTypeSpec(&amp;paramTypeSpec2) + 8L)));\n    }\n  }\n}\n</pre>\n<p>The most interesting thing here is 'if ((ParamTypeEnum) *(int*) definition.getParamTypeSpec(&amp;paramTypeSpec1) != (ParamTypeEnum) 15)'.\nThe first idea is to call this method via reflection.\nBut getParamTypeSpec is an internal unsafe method.\nUnfortunately, I don't know how to use reflector with pointers and internal structures.\nSo, I decided to go another way.\n\n<p>The next step is to look at the ParameterType property of the Definition class.\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"teal\">ParameterType</span> ParameterType\n{\n  <span class=\"blue\">get</span>\n  {\n    REVIT_MAINTAIN_STATE revitMaintainState;\n    \\u003CModule\\u003E.REVIT_MAINTAIN_STATE\\u002E\\u007Bctor\\u007D(\n      &amp;revitMaintainState);\n \n    <span class=\"teal\">ParameterType</span> parameterType;\n    <span class=\"blue\">try</span>\n    {\n      ParamDef* paramDefPtr = <span class=\"blue\">this</span>.m_pParamDef;\n      ParamTypeSpec paramTypeSpec;\n      \\u003CModule\\u003E.paramDefToParamType(\n        &amp;paramTypeSpec, paramDefPtr);\n      <span class=\"blue\">switch</span> (^(<span class=\"blue\">int</span>&amp;) @paramTypeSpec)\n      {\n      <span class=\"blue\">case</span> 1:\n        parameterType = <span class=\"teal\">ParameterType</span>.Text;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 6:\n        parameterType = <span class=\"teal\">ParameterType</span>.URL;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 9:\n        parameterType = <span class=\"teal\">ParameterType</span>.YesNo;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 11:\n        parameterType = <span class=\"teal\">ParameterType</span>.Integer;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 13:\n        parameterType = <span class=\"teal\">ParameterType</span>.Material;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 14:\n        parameterType = <span class=\"teal\">ParameterType</span>.FamilyType;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 15:\n        <span class=\"blue\">switch</span> (^(<span class=\"blue\">int</span>&amp;) ((<span class=\"teal\">IntPtr</span>) &amp;paramTypeSpec + 8))\n        {\n        <span class=\"blue\">case</span> 0:\n          parameterType = <span class=\"teal\">ParameterType</span>.Length;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 1:\n          parameterType = <span class=\"teal\">ParameterType</span>.Area;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 2:\n          parameterType = <span class=\"teal\">ParameterType</span>.Volume;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 3:\n          parameterType = <span class=\"teal\">ParameterType</span>.Angle;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 4:\n          parameterType = <span class=\"teal\">ParameterType</span>.Number;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 26:\n          parameterType = <span class=\"teal\">ParameterType</span>.Force;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 27:\n          parameterType = <span class=\"teal\">ParameterType</span>.LinearForce;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 28:\n          parameterType = <span class=\"teal\">ParameterType</span>.AreaForce;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 29:\n          parameterType = <span class=\"teal\">ParameterType</span>.Moment;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">default</span>:\n          parameterType = (<span class=\"teal\">ParameterType</span>) (\n            ^(<span class=\"blue\">int</span>&amp;) ((<span class=\"teal\">IntPtr</span>) &amp;paramTypeSpec + 8) + 100);\n          <span class=\"blue\">break</span>;\n        }\n      <span class=\"blue\">case</span> 16:\n        parameterType = <span class=\"teal\">ParameterType</span>.NumberOfPoles;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 24:\n        parameterType = <span class=\"teal\">ParameterType</span>.FixtureUnit;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 30:\n        parameterType = <span class=\"teal\">ParameterType</span>.LoadClassification;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">default</span>:\n        parameterType = <span class=\"teal\">ParameterType</span>.Invalid;\n        <span class=\"blue\">break</span>;\n      }\n    }\n    __fault\n    {\n      \\u003CModule\\u003E.___CxxCallUnwindDtor(\n        (__FnPtr&lt;<span class=\"blue\">void</span> (<span class=\"blue\">void</span>*)&gt;) __methodptr(REVIT_MAINTAIN_STATE\\u002E\\u007Bdtor\\u007D),\n          (<span class=\"blue\">void</span>*) &amp;revitMaintainState);\n    }\n    \\u003CModule\\u003E.REVIT_MAINTAIN_STATE\\u002E\\u007Bdtor\\u007D(\n      &amp;revitMaintainState);\n    <span class=\"blue\">return</span> parameterType;\n    }\n  }\n}\n</pre>\n<p>Here we can see that a parameter will have a DisplayUnitType only if the ParameterType is Length, Area, etc..\nSo we can just check if the ParameterType is one of the  Length, Area, etc. ones.\nIf so, its parameter has a DisplayUnitType, otherwise not.\n\n<p>It is necessary to pay attention to the line\n\n<pre class=\"code\">\n  <span class=\"blue\">default</span>:\n    parameterType = (<span class=\"teal\">ParameterType</span>) (\n      ^(<span class=\"blue\">int</span>&amp;) ((<span class=\"teal\">IntPtr</span>) &amp;paramTypeSpec + 8) + 100);\n    <span class=\"blue\">break</span>;\n</pre>\n<p>Looking at the ParameterType enumeration suggests that every parameter type whose integer value is greater than 100 belongs to paramTypeSpec = 15.\n\n<p>As a result, I created the following extension method for the Parameter class:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">ParameterExtensions</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> HasDisplayUnitType(\n    <span class=\"blue\">this</span> <span class=\"teal\">Parameter</span> parameter )\n  {\n    <span class=\"blue\">var</span> parameterType =\n        parameter.Definition.ParameterType;\n \n    <span class=\"blue\">switch</span>( parameterType )\n    {\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Length:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Area:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Volume:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Angle:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Number:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Force:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.LinearForce:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.AreaForce:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Moment:\n        <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n \n    <span class=\"green\">/* At the reflector I can see the following code</span>\n<span class=\"green\">          default:</span>\n<span class=\"green\">            parameterType = (ParameterType) </span>\n<span class=\"green\">              (^(int&amp;) ((IntPtr) &amp;paramTypeSpec </span>\n<span class=\"green\">              + 8) + 100);</span>\n<span class=\"green\">            break;</span>\n<span class=\"green\">        looking at the ParameterType enumeration </span>\n<span class=\"green\">        suggests that every parameter type whose </span>\n<span class=\"green\">        integer value is greater than 100 belongs </span>\n<span class=\"green\">        to paramTypeSpec = 15</span>\n<span class=\"green\">    */</span>\n    <span class=\"blue\">return</span> 100 &lt; (<span class=\"blue\">int</span>) parameterType;\n  }\n}\n</pre>\n<a name=\"3\"></a>\n<h4>Comparison Benchmarking</h4>\n<p>To wrap this up, here is a little benchmark comparing the two methods.</p>\n<p>The first one exercises the try... catch block:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Reference</span> r;\n \n  <span class=\"blue\">try</span>\n  {\n    r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n  {\n    message = <span class=\"maroon\">\"Cancelled\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">var</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> e.Parameters )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">DisplayUnitType</span> dut =\n          parameter.DisplayUnitType;\n \n      <span class=\"teal\">Debug</span>.Print( dut.ToString() );\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n      .<span class=\"teal\">InvalidOperationException</span> )\n    {\n    }\n  }\n  sw.Stop();\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Benchmark result\"</span>,\n    sw.Elapsed.ToString() );\n</pre>\n<p>Pick an element.\nThe result is 0.41 seconds.</p>\n<p>Second measurement, with my new method:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Reference</span> r;\n \n  <span class=\"blue\">try</span>\n  {\n    r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n  {\n \n    message = <span class=\"maroon\">\"Canceled\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">var</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> e.Parameters )\n  {\n    <span class=\"blue\">if</span>( parameter.HasDisplayUnitType() )\n    {\n      <span class=\"teal\">DisplayUnitType</span> dut =\n          parameter.DisplayUnitType;\n \n      <span class=\"teal\">Debug</span>.Print( dut.ToString() );\n    }\n  }\n  sw.Stop();\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Benchmark result\"</span>,\n    sw.Elapsed.ToString() );\n</pre>\n<p>The result is 0.029 seconds for the same element!</p>\n<p>You may say that 0.41 seconds is not so much, and users will not notice the difference between 0.41 seconds and 0.028.\nOf course the difference is not huge if you work with only one element.\nBut note that the exception handling code works 15 times slower, repeatedly, ever single time it is called!</p>\n<p>If you retrieve parameters for 100 elements, it takes 41 seconds using try... catch instead of just 3 seconds with my new method.</p>\n<p>I hope this enhancement will be useful for other developers as well.</p>\n<p>Many thanks to Victor for his very professional analysis and valuable result!</p>\n<p>The best of luck to you in your new job, Victor, and congratulations on that achievement!</p>\n<a name=\"4\"></a>\n<h4>IL Decompilation</h4>\n<p>I talked about\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html\">\nReflector</a> way\n\nback in the early days of the blog.\nIt since became commercial.</p>\n<p>Victor mentions using\n\n<a href=\"http://www.jetbrains.com/decompiler\">\ndotPeek</a> for\n\nhis explorations above.</p>\n<p>When I brought this up with my colleagues, Adam added that he uses the\n\n<a href=\"http://ilspy.net\">\nILSpy .NET Decompiler</a> and\n\nis perfectly happy with that as well.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0911_displayunittype",
    "header_text": "Parameter DisplayUnitType Enhancement and Research",
    "local_header_href": "#parameter-displayunittype-enhancement-and-research",
    "chunk_text": "<h4>Parameter DisplayUnitType Enhancement and Research</h4><p>Back to the DisplayUnitType enhancement, here is the description of the research leading up to it in Victor's own words:\n\n<p>Now I'm working with the element parameters again and I need to get all parameters of a lot of elements in the project including their DisplayUnitType.\n\n<p>The problem is that not all parameters have a display unit type.\nIf I try to retrieve a display unit type for a parameter where it does not exist, an Autodesk.Revit.Exceptions.InvalidOperationException is thrown.\nUnfortunately, there is no direct way to determine beforehand whether a parameter has a DisplayUnitType defined or not, i.e. whether the call will succeed or fail.\n\n<p>The most obvious way would be to wrap the code where I retrieve the display unit type in a try... catch block.\nBut throwing and catching an exception is a very expensive operation and greatly reduces the performance –\n\n<a href=\"http://www.jacopretorius.net/2009/10/exceptions-should-be-exceptional.html\">exceptions should be exceptional</a>.\n\n<p>I decided to go deeper and looked at the RevitAPI.dll using\n\n<a href=\"http://www.jetbrains.com/decompiler\">\ndotPeek – free .NET decompiler</a>.\n\n<p>At first I went to the DisplayUnitType property of the Parameter class.\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">DisplayUnitType</span> DisplayUnitType\n{\n  <span class=\"blue\">get</span>\n  {\n    <span class=\"teal\">Definition</span> definition = <span class=\"blue\">this</span>.Definition;\n    ParamTypeSpec paramTypeSpec1;\n    <span class=\"blue\">if</span> ((ParamTypeEnum) *(<span class=\"blue\">int</span>*)\n      definition.getParamTypeSpec(&amp;paramTypeSpec1)\n      != (ParamTypeEnum) 15)\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> Autodesk.Revit.Exceptions\n        .<span class=\"teal\">InvalidOperationException</span>(<span class=\"blue\">new</span> FunctionId(\n          <span class=\"maroon\">\"n:\\\\build\\\\2013_ship_x64_inst_20120221_2030\\\\source\\\\api\\\\revitapi\\\\objects\\\\parameters\\\\APIParameter.cpp\"</span>,\n          581, <span class=\"maroon\">\"Autodesk::Revit::DB::Parameter::DisplayUnitType::get\"</span>),\n          <span class=\"blue\">string</span>.Empty);\n    }\n    <span class=\"blue\">else</span>\n    {\n      ParamTypeSpec paramTypeSpec2;\n      <span class=\"blue\">return</span> (<span class=\"teal\">DisplayUnitType</span>)\n        \\u003CModule\\u003E.FormatOptions\\u002EgetDisplayUnits(\n          \\u003CModule\\u003E.AUnits\\u002EgetFormatOptions(\n            \\u003CModule\\u003E.ADocument\\u002EgetAUnits(\n              (ADocument*) *(<span class=\"blue\">long</span>*) <span class=\"blue\">this</span>.m_pCDA),\n                (<span class=\"teal\">UnitType</span>.Enum) *(<span class=\"blue\">int</span>*) ((<span class=\"teal\">IntPtr</span>)\n                definition.getParamTypeSpec(&amp;paramTypeSpec2) + 8L)));\n    }\n  }\n}\n</pre>\n<p>The most interesting thing here is 'if ((ParamTypeEnum) *(int*) definition.getParamTypeSpec(&amp;paramTypeSpec1) != (ParamTypeEnum) 15)'.\nThe first idea is to call this method via reflection.\nBut getParamTypeSpec is an internal unsafe method.\nUnfortunately, I don't know how to use reflector with pointers and internal structures.\nSo, I decided to go another way.\n\n<p>The next step is to look at the ParameterType property of the Definition class.\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"teal\">ParameterType</span> ParameterType\n{\n  <span class=\"blue\">get</span>\n  {\n    REVIT_MAINTAIN_STATE revitMaintainState;\n    \\u003CModule\\u003E.REVIT_MAINTAIN_STATE\\u002E\\u007Bctor\\u007D(\n      &amp;revitMaintainState);\n \n    <span class=\"teal\">ParameterType</span> parameterType;\n    <span class=\"blue\">try</span>\n    {\n      ParamDef* paramDefPtr = <span class=\"blue\">this</span>.m_pParamDef;\n      ParamTypeSpec paramTypeSpec;\n      \\u003CModule\\u003E.paramDefToParamType(\n        &amp;paramTypeSpec, paramDefPtr);\n      <span class=\"blue\">switch</span> (^(<span class=\"blue\">int</span>&amp;) @paramTypeSpec)\n      {\n      <span class=\"blue\">case</span> 1:\n        parameterType = <span class=\"teal\">ParameterType</span>.Text;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 6:\n        parameterType = <span class=\"teal\">ParameterType</span>.URL;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 9:\n        parameterType = <span class=\"teal\">ParameterType</span>.YesNo;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 11:\n        parameterType = <span class=\"teal\">ParameterType</span>.Integer;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 13:\n        parameterType = <span class=\"teal\">ParameterType</span>.Material;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 14:\n        parameterType = <span class=\"teal\">ParameterType</span>.FamilyType;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 15:\n        <span class=\"blue\">switch</span> (^(<span class=\"blue\">int</span>&amp;) ((<span class=\"teal\">IntPtr</span>) &amp;paramTypeSpec + 8))\n        {\n        <span class=\"blue\">case</span> 0:\n          parameterType = <span class=\"teal\">ParameterType</span>.Length;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 1:\n          parameterType = <span class=\"teal\">ParameterType</span>.Area;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 2:\n          parameterType = <span class=\"teal\">ParameterType</span>.Volume;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 3:\n          parameterType = <span class=\"teal\">ParameterType</span>.Angle;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 4:\n          parameterType = <span class=\"teal\">ParameterType</span>.Number;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 26:\n          parameterType = <span class=\"teal\">ParameterType</span>.Force;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 27:\n          parameterType = <span class=\"teal\">ParameterType</span>.LinearForce;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 28:\n          parameterType = <span class=\"teal\">ParameterType</span>.AreaForce;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> 29:\n          parameterType = <span class=\"teal\">ParameterType</span>.Moment;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">default</span>:\n          parameterType = (<span class=\"teal\">ParameterType</span>) (\n            ^(<span class=\"blue\">int</span>&amp;) ((<span class=\"teal\">IntPtr</span>) &amp;paramTypeSpec + 8) + 100);\n          <span class=\"blue\">break</span>;\n        }\n      <span class=\"blue\">case</span> 16:\n        parameterType = <span class=\"teal\">ParameterType</span>.NumberOfPoles;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 24:\n        parameterType = <span class=\"teal\">ParameterType</span>.FixtureUnit;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">case</span> 30:\n        parameterType = <span class=\"teal\">ParameterType</span>.LoadClassification;\n        <span class=\"blue\">break</span>;\n      <span class=\"blue\">default</span>:\n        parameterType = <span class=\"teal\">ParameterType</span>.Invalid;\n        <span class=\"blue\">break</span>;\n      }\n    }\n    __fault\n    {\n      \\u003CModule\\u003E.___CxxCallUnwindDtor(\n        (__FnPtr&lt;<span class=\"blue\">void</span> (<span class=\"blue\">void</span>*)&gt;) __methodptr(REVIT_MAINTAIN_STATE\\u002E\\u007Bdtor\\u007D),\n          (<span class=\"blue\">void</span>*) &amp;revitMaintainState);\n    }\n    \\u003CModule\\u003E.REVIT_MAINTAIN_STATE\\u002E\\u007Bdtor\\u007D(\n      &amp;revitMaintainState);\n    <span class=\"blue\">return</span> parameterType;\n    }\n  }\n}\n</pre>\n<p>Here we can see that a parameter will have a DisplayUnitType only if the ParameterType is Length, Area, etc..\nSo we can just check if the ParameterType is one of the  Length, Area, etc. ones.\nIf so, its parameter has a DisplayUnitType, otherwise not.\n\n<p>It is necessary to pay attention to the line\n\n<pre class=\"code\">\n  <span class=\"blue\">default</span>:\n    parameterType = (<span class=\"teal\">ParameterType</span>) (\n      ^(<span class=\"blue\">int</span>&amp;) ((<span class=\"teal\">IntPtr</span>) &amp;paramTypeSpec + 8) + 100);\n    <span class=\"blue\">break</span>;\n</pre>\n<p>Looking at the ParameterType enumeration suggests that every parameter type whose integer value is greater than 100 belongs to paramTypeSpec = 15.\n\n<p>As a result, I created the following extension method for the Parameter class:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">ParameterExtensions</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> HasDisplayUnitType(\n    <span class=\"blue\">this</span> <span class=\"teal\">Parameter</span> parameter )\n  {\n    <span class=\"blue\">var</span> parameterType =\n        parameter.Definition.ParameterType;\n \n    <span class=\"blue\">switch</span>( parameterType )\n    {\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Length:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Area:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Volume:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Angle:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Number:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Force:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.LinearForce:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.AreaForce:\n      <span class=\"blue\">case</span> <span class=\"teal\">ParameterType</span>.Moment:\n        <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n \n    <span class=\"green\">/* At the reflector I can see the following code</span>\n<span class=\"green\">          default:</span>\n<span class=\"green\">            parameterType = (ParameterType) </span>\n<span class=\"green\">              (^(int&amp;) ((IntPtr) &amp;paramTypeSpec </span>\n<span class=\"green\">              + 8) + 100);</span>\n<span class=\"green\">            break;</span>\n<span class=\"green\">        looking at the ParameterType enumeration </span>\n<span class=\"green\">        suggests that every parameter type whose </span>\n<span class=\"green\">        integer value is greater than 100 belongs </span>\n<span class=\"green\">        to paramTypeSpec = 15</span>\n<span class=\"green\">    */</span>\n    <span class=\"blue\">return</span> 100 &lt; (<span class=\"blue\">int</span>) parameterType;\n  }\n}\n</pre>\n<a name=\"3\"></a>\n<h4>Comparison Benchmarking</h4>\n<p>To wrap this up, here is a little benchmark comparing the two methods.</p>\n<p>The first one exercises the try... catch block:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Reference</span> r;\n \n  <span class=\"blue\">try</span>\n  {\n    r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n  {\n    message = <span class=\"maroon\">\"Cancelled\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">var</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> e.Parameters )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">DisplayUnitType</span> dut =\n          parameter.DisplayUnitType;\n \n      <span class=\"teal\">Debug</span>.Print( dut.ToString() );\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n      .<span class=\"teal\">InvalidOperationException</span> )\n    {\n    }\n  }\n  sw.Stop();\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Benchmark result\"</span>,\n    sw.Elapsed.ToString() );\n</pre>\n<p>Pick an element.\nThe result is 0.41 seconds.</p>\n<p>Second measurement, with my new method:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Reference</span> r;\n \n  <span class=\"blue\">try</span>\n  {\n    r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n  {\n \n    message = <span class=\"maroon\">\"Canceled\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">var</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> e.Parameters )\n  {\n    <span class=\"blue\">if</span>( parameter.HasDisplayUnitType() )\n    {\n      <span class=\"teal\">DisplayUnitType</span> dut =\n          parameter.DisplayUnitType;\n \n      <span class=\"teal\">Debug</span>.Print( dut.ToString() );\n    }\n  }\n  sw.Stop();\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Benchmark result\"</span>,\n    sw.Elapsed.ToString() );\n</pre>\n<p>The result is 0.029 seconds for the same element!</p>\n<p>You may say that 0.41 seconds is not so much, and users will not notice the difference between 0.41 seconds and 0.028.\nOf course the difference is not huge if you work with only one element.\nBut note that the exception handling code works 15 times slower, repeatedly, ever single time it is called!</p>\n<p>If you retrieve parameters for 100 elements, it takes 41 seconds using try... catch instead of just 3 seconds with my new method.</p>\n<p>I hope this enhancement will be useful for other developers as well.</p>\n<p>Many thanks to Victor for his very professional analysis and valuable result!</p>\n<p>The best of luck to you in your new job, Victor, and congratulations on that achievement!</p>\n<a name=\"4\"></a>\n<h4>IL Decompilation</h4>\n<p>I talked about\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html\">\nReflector</a> way\n\nback in the early days of the blog.\nIt since became commercial.</p>\n<p>Victor mentions using\n\n<a href=\"http://www.jetbrains.com/decompiler\">\ndotPeek</a> for\n\nhis explorations above.</p>\n<p>When I brought this up with my colleagues, Adam added that he uses the\n\n<a href=\"http://ilspy.net\">\nILSpy .NET Decompiler</a> and\n\nis perfectly happy with that as well.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0911_displayunittype",
    "header_text": "Comparison Benchmarking",
    "local_header_href": "#comparison-benchmarking",
    "chunk_text": "<h4>Comparison Benchmarking</h4><p>To wrap this up, here is a little benchmark comparing the two methods.</p><p>The first one exercises the try... catch block:</p><pre class=\"code\">\n  <span class=\"teal\">Reference</span> r;\n \n  <span class=\"blue\">try</span>\n  {\n    r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n  {\n    message = <span class=\"maroon\">\"Cancelled\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">var</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> e.Parameters )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">DisplayUnitType</span> dut =\n          parameter.DisplayUnitType;\n \n      <span class=\"teal\">Debug</span>.Print( dut.ToString() );\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n      .<span class=\"teal\">InvalidOperationException</span> )\n    {\n    }\n  }\n  sw.Stop();\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Benchmark result\"</span>,\n    sw.Elapsed.ToString() );\n</pre><p>Pick an element.\nThe result is 0.41 seconds.</p><p>Second measurement, with my new method:</p><pre class=\"code\">\n  <span class=\"teal\">Reference</span> r;\n \n  <span class=\"blue\">try</span>\n  {\n    r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n  {\n \n    message = <span class=\"maroon\">\"Canceled\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  <span class=\"blue\">var</span> e = doc.GetElement( r.ElementId );\n \n  <span class=\"teal\">Stopwatch</span> sw = <span class=\"teal\">Stopwatch</span>.StartNew();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> parameter <span class=\"blue\">in</span> e.Parameters )\n  {\n    <span class=\"blue\">if</span>( parameter.HasDisplayUnitType() )\n    {\n      <span class=\"teal\">DisplayUnitType</span> dut =\n          parameter.DisplayUnitType;\n \n      <span class=\"teal\">Debug</span>.Print( dut.ToString() );\n    }\n  }\n  sw.Stop();\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Benchmark result\"</span>,\n    sw.Elapsed.ToString() );\n</pre><p>The result is 0.029 seconds for the same element!</p><p>You may say that 0.41 seconds is not so much, and users will not notice the difference between 0.41 seconds and 0.028.\nOf course the difference is not huge if you work with only one element.\nBut note that the exception handling code works 15 times slower, repeatedly, ever single time it is called!</p><p>If you retrieve parameters for 100 elements, it takes 41 seconds using try... catch instead of just 3 seconds with my new method.</p><p>I hope this enhancement will be useful for other developers as well.</p><p>Many thanks to Victor for his very professional analysis and valuable result!</p><p>The best of luck to you in your new job, Victor, and congratulations on that achievement!</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "0911_displayunittype",
    "header_text": "IL Decompilation",
    "local_header_href": "#il-decompilation",
    "chunk_text": "<h4>IL Decompilation</h4><p>I talked about\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html\">\nReflector</a> way\n\nback in the early days of the blog.\nIt since became commercial.</p><p>Victor mentions using\n\n<a href=\"http://www.jetbrains.com/decompiler\">\ndotPeek</a> for\n\nhis explorations above.</p><p>When I brought this up with my colleagues, Adam added that he uses the\n\n<a href=\"http://ilspy.net\">\nILSpy .NET Decompiler</a> and\n\nis perfectly happy with that as well.</p>"
  }
]