[
  {
    "original_filename": "0652_modeless_loose_connectors",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0652_modeless_loose_connectors",
    "header_text": "Yet Another Modeless Update",
    "local_header_href": "#yet-another-modeless-update",
    "chunk_text": "<h3>Yet Another Modeless Update</h3><p>Here is a rather exciting post for me that I spent quite some time on in the past few days.\n\n<p>I recently published an \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/modeless-loose-connector-navigator-update.html\">\nupdated version for Revit 2012</a>\n\nof my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/modeless-loose-connectors.html\">\nRevit 2011 modeless loose connector navigator</a> and\n\nfixed some flaws pointed out repeatedly by Arnošt Löbel at the same time.\n\n<p>Please refer to the original post for a full description of the application, since here I am focusing only on the modeless interaction with the Idling event.\n\n<p>The main fix I implemented was to instantiate an external application in addition to the original external command, and ensure that I subscribe only once to the Idling event, not every time the command is called.\n\n<p>I actually thought I had understood all the important aspect of modeless interaction with Revit, but was soon to discover how mistaken I was at the time.\nMaybe there are some important lessons to be learned from the following analysis for you as well?\n\n<p>When writing a later note about the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/modeless-forms-in-revit.html\">\nbasics of interacting with Revit from an external context</a>, \n\nI noticed a few other flaws remaining to be fixed as well.\n\n<p>Most pertinently, like any other call-back, Idling costs time and should be used sparingly.\n\n<p>I was of course already aware of this, but still, it prompted me to rethink and revisit my code once again, and subscribe to the Idling event only while the modeless form is actually being displayed.\n\n<p>The relevant changes that I ended up with in my first attempt were the following:\n\n<ol>\n<li>In the external application, do not subscribe to Idling on start-up, just keep a static pointer to the UIControlledApplication instance.\n<li>In the external command, subscribe to the form Load and FormClosing events.\n<li>In the form Load and FormClosing events, subscribe to and unsubscribe from the Idling event.\n</li></li></li></ol>\n<p>In my naivety, that seemed like a clean and pretty optimal solution to me, and also not overly complex.\n\n<p>Here are some lines of code illustrating this, first subscribing to the form events from the external command Execute method:\n\n<pre class=\"code\">\n  <span class=\"teal\">LooseConnectorNavigator</span> navigator\n    = <span class=\"blue\">new</span> <span class=\"teal\">LooseConnectorNavigator</span>(\n      data,\n      <span class=\"blue\">new</span> <span class=\"teal\">SetElementId</span>( SetPendingElementId ) );\n \n  navigator.Load += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>( \n    navigator_Load );\n \n  navigator.FormClosing \n    += <span class=\"blue\">new</span> <span class=\"teal\">FormClosingEventHandler</span>( \n      navigator_FormClosing );\n \n  navigator.Show( _hWndRevit );\n</pre>\n<p>Within the form events, I subscribe to and unsubscribe from the application events:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> The application subscribes to the Idling event</span>\n<span class=\"gray\">///</span><span class=\"green\"> when the modeless loose connector navigator is</span>\n<span class=\"gray\">///</span><span class=\"green\"> displayed.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">void</span> navigator_Load( <span class=\"blue\">object</span> sender, <span class=\"teal\">EventArgs</span> e )\n{\n  <span class=\"teal\">App</span>.UIControlledApplication.Idling\n    += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;( OnIdling );\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> The application unsubscribes from the Idling </span>\n<span class=\"gray\">///</span><span class=\"green\"> event as soon as the modeless loose connector </span>\n<span class=\"gray\">///</span><span class=\"green\"> navigator is closed.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">void</span> navigator_FormClosing(\n  <span class=\"blue\">object</span> sender,\n  <span class=\"teal\">FormClosingEventArgs</span> e )\n{\n  <span class=\"teal\">App</span>.UIControlledApplication.Idling\n    -= <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;( OnIdling );\n}\n</pre>\n<p><b>Don't do this!</b>\n<p>Here is the explanation why.\n\n<p>Luckily, I asked Arnošt for his opinion again, and he replied:\n\n<ol>\n<li>Static pointer to the UIControlledApplication instance: I do not think you need the pointer until your external command is called to be executed, if you need it at all (I do not think you do).\n<li>Subscribe to the form events: you need to subscribe to Idling from the external command Execution method. I do not care about the form events – those are all yours; do whatever you want in them <b>except calling Revit API</b>.\n<li>Subscribe to and unsubscribe from the Idling event in the form events:  you cannot subscribe to or unsubscribe from Revit events from your internal form events. They mean nothing to Revit. You can only make the subscription when Revit calls your app – that is from OnStartup, command.Execute, event handlers (<b>Revit</b> event handlers), etc.\n</li></li></li></ol>\n<p>If I am correctly guessing what your goal is, the following should be the workflow:\n\n<ul>\n<li>Do nothing in OnStartup\n<li>From your Command.Execute subscribe to Idling. The handler should be a method of your external application. Set up an internal Boolean to flag (in the app) that you have done this.\n<li>When the end user clicks a command (a control, I assume) in your dialog:\n<ul>\n<li>Set an internal variable (let's call it requestId) indicating that it happened.\n<li>Disable the controls in your dialog including the one the user just clicked (Cancel should still be available though).\n</li></li></ul>\n<li>In every OnIdling call, check:\n<ul>\n<li>If the dialog is no longer visible:\n<ul>\n<li>Unsubscribe from Idling.\n<li>Reset the Boolean flag you set in Command.Execute so you know you are not subscribed anymore (this could be done by other means, of course; I am just showing one possible way).\n</li></li></ul>\n</li></ul>\n<ul>\n<li>If the dialog is still visible:\n<ul>\n<li>If your requestId is not set, do nothing.\n<li>If your requestId has been set:\n<ul>\n<li>Make Revit to do what the user requested.\n<li>Clear the requestId variable.\n<li>Enable the controls in your dialog again.\n</li></li></li></ul>\n</li></li></ul>\n</li></ul>\n<li>From OnShutdown you should unsubscribe from Idling if you are still listening to it, and I think you should close your dialog if it has not been closed by the end user yet. I believe it is just a nice thing to do and I would implement it that way.\n<!--\n<ul>\n<li>If your dialog is closed by the end user before Revit closes: In the next OnIdling, check the Boolean flag you set in Command.Execute. If it is still set, it means you are still subscribing to Idling. If so, unsubscribe; otherwise you do not have to do anything (Idling related).\n<li>If your dialog is not closed by the end user before Revit closes: I think the dialog should not stay open after Revit has been closed already. \nThat is why I recommended you check your dialog and your Idling subscription at OnShutdown too. From there  \n</ul>\n-->\n</li></li></li></li></li></ul>\n<p>That feedback was quite a shock to me and took a while to digest.\n\n<p>It also led me to raise a couple of supplementary questions:\n\n<p><strong>Question:</strong> Why do you think that I do not need the pointer to the UIControlledApplication instance?\n\n<p>Because I can use the Application property passed in by the command data instead?\n\n<p>Yes, that would simplify things a bit.\n\n<p><strong>Answer:</strong> Yes, that is what I meant. \nYou do need to set it in OnStartup, because you get it later again in your Command.Execute and in the OnIdling as well (if you need it there).\n\n<p><strong>Question:</strong> Ah yes, I see the difference between subscribing to the Idling event from within the command and within the form Load event. \nThat is something I should improve. \nI made a mistake there.\nAnd you are saying that I cannot even unsubscribe from Idling from the form events?\n\n<p><strong>Answer:</strong> No, you cannot. \nYour form events are completely unattached from Revit. \nThey happen on a different thread. \nThey are like any other methods running on a different thread (not the main thread on which Revit calls out). \nI believe I've seen this mistake made several times. \nI also \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/modeless-door-lister-flaws.html\">\nmentioned some of these flaws</a> after\n\nlooking at the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/modeless-door-lister-and-deleter.html\">\nmodeless door lister</a>.\n\n<p><strong>Question:</strong> This all seems a bit strange and extreme to me. \nI mean, these are application events, and the application is there forever, as long as the session is active. \nI understand that officially I cannot touch the Revit API outside of the specified Revit call-back notifications, but still...\n\n<p><strong>Answer:</strong> Yes, but not our application (Revit). \nIt is your application – except for the time Revit explicitly calls it, it does not have anything to do in it (and that is mutual).\n\n<p><strong>Question:</strong> I was under the assumption that subscribing to an event does not make use of the Revit API. \nI thought it uses pure .NET functionality and that the application object is available for me to attach an event handler to it, with no use of the Revit API at all.\n\n<p><strong>Answer:</strong> That is not correct. \nAll public events have their corresponding framework internally in Revit. \nIn order to subscribe or unsubscribe, something needs to be modified somewhere in Revit, which means allocations/reallocations are likely to be made. \nThat is not going to be safe in a multithreaded environment (I mean, not that it couldn't be in theory, but it might be not in Revit, currently).\n\n<p><strong>Question:</strong> Initially I did not see the point of the additional complexity and strict separation between the form and Revit events that you require in your suggestion.\nAfter working through these answers of yours, I reread you suggested new algorithm, and it makes complete sense.\n\n<p><strong>Answer:</strong> Yes, it does sound a bit complex when you read it first, but like you learned, it is not as complex once you take time to think about it and especially once you start using it that way. \nI believe the complexity is just due to the multi-threading nature, which is what any modeless interaction is essentially based upon.\n\n<p><strong>Question:</strong> I still do not understand the importance of unsubscribing in OnShutdown, since Revit will shut down anyway at that point.\nIs that for future-proofing, for some future situation in which possibly the add-in may be shut down but the Revit session remains active?\n\n<p><strong>Answer:</strong> It is really not critical, but I consider it a nice thing to do and we do log unsubscribed events in journals. \nYou can look at it this way: while it is not essentially important to close all your open files (and other resources) in your application (Windows will close them when the process get killed), an application is considered well behaved if it does close everything, and I always do so.\n\n<p><strong>Question:</strong> Does it makes any difference subscribing to the Idling event from the UIApplication class that I obtain from the Execute command data, or using a static variable initialised from the OnStartup UIControlledApplication instead?\n\n<p><strong>Answer:</strong> It does matter from where you subscribe and it does not matter if you use UIApplication or UIControlledApplication. \nThose two application objects share the event repository internally, so subscribing through one is technically identical to subscribing through the other one. \nIn your particular case, I recommended subscribing from your command, because that is when you start needing it, actually; you did not need it in OnStartup yet.\n\n<p>You should not need to store a pointer (a tracking handle in .NET, to be exact) to the application object (to neither one), because it should always be available to you when you are actually permitted to use it – you get it, directly or indirectly, in OnStartup, in command.execute, in Events, in updaters, etc; there is no need to store it anywhere. \nIf you think it simplifies you code, you can keep the UIControlledApplication variable that you initialised in OnStartup, but my implementation would be different (of course, all programmers have different habits, it does not mean that one is better). \nI would pass the application as an argument to ShowForm, although it seems you do not need to call Subscribe from ShowForm. \nIt looks like you can call Subscribe from your Execute after ShowForm returned success. \nI would pass the application object to both Subscribe and Unsubscribe as an argument. (It is simply my preferred way of using arguments over having global variables.)\n\n<p><strong>Question:</strong> I will follow every single piece of your advice, except passing the arguments to the subscribe methods.\nI also almost fanatically try to avoid global variables wherever possible.\nI tried my very best to do that here as well, but it requires me to call two static methods on the App class instead of one from the command Execute method, and to create at least three different overloads of the Subscribe and Unsubscribe methods taking either UIApplication or UIControlledApplication arguments.\nIt also forces the application Subscribe method called from the command to be public instead of private.\nAll in all, that turns out to be just too much.\n\n<p><strong>Answer:</strong> Your code is good.\nI did not realize the need for overloading Unsubscribe – I think you have a point there.\n\n<p>In the end, I improved my implementation to follow Arnošt's advice as follows:\n\n<ul>\n<li>Moved the OnIdling handler from the external command to the external application.\n<li>Moved the pending element id handling to the external application too.\n<li>Implemented a static singleton LooseConnectorNavigator instance.\n<li>Implemented a static Show method to initialise it in the LooseConnectorNavigator class.\n<li>Subscribe to the FormClosing event to set it to null when the modeless form is closed.\n<li>Implemented a static IsShowing predicate in the LooseConnectorNavigator class to check whether the modeless form is displayed.\n<li>Subscribe to the Idling event from the external command Execute method.\n<li>Unsubscribe from the Idling event in the OnIdling event if the modeless dialog has been closed.\n<li>Ensure that I am unsubscribed from the Idling event and the modeless form is closed in the application OnShutdown handler.\n</li></li></li></li></li></li></li></li></li></ul>\n<p>Once this is done, there is actually no reason any longer for the command to communicate with the modeless form anymore.\nIt is better to limit the knowledge of and connection between the various classes as much as possible, so I removed all references of the modeless form from the command class to the application class.\nThis means that I also:\n\n<ul>\n<li>Moved the static Revit window handle variable and its initialisation to the external application and its OnStartup method.\n<li>Implemented three methods in the application class to show the modeless form, subscribe to and unsubscribe from the Idling event.\n</li></li></ul>\n<p>The OnStartup method also stores a pointer to the UIControlledApplication instance in a static variable, so that the UIApplication instance does not need to be passed in from the external command when needed:\n\n<pre class=\"code\">\n<span class=\"blue\">#region</span> Revit window handle\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Revit application window handle, used</span>\n<span class=\"gray\">///</span><span class=\"green\"> as parent for modeless dialogue.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"teal\">JtWindowHandle</span> _hWndRevit = <span class=\"blue\">null</span>;\n<span class=\"blue\">#endregion</span> <span class=\"green\">// Revit window handle</span>\n \n<span class=\"blue\">static</span> <span class=\"teal\">UIControlledApplication</span> _a;\n \n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  <span class=\"teal\">ProductType</span> pt = a.ControlledApplication.Product;\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">ProductType</span>.MEP == pt )\n  {\n<span class=\"blue\">    #region</span> Revit window handle\n    <span class=\"green\">// Set up IWin32Window instance encapsulating </span>\n    <span class=\"green\">// main Revit application window handle:</span>\n \n    <span class=\"teal\">Process</span> process = <span class=\"teal\">Process</span>.GetCurrentProcess();\n \n    <span class=\"teal\">IntPtr</span> h = process.MainWindowHandle;\n \n    _hWndRevit = <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>( h );\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Revit window handle</span>\n \n    _a = a;\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n}\n</pre>\n<p>The external command implementation is vastly simplified and disconnected from both the modeless form and the Idling event handling.\nIt no longer even worries about the Revit window handle needed to display the form properly associated with the Revit main window.\nAll it does now is call one single static method ShowForm on the application class before terminating to pass in the current data to display in the form:\n\n<pre class=\"code\">\n  <span class=\"green\">// Cleaned up all the complexity and encapsulated</span>\n  <span class=\"green\">// it in one single call to the external application:</span>\n \n  <span class=\"teal\">App</span>.ShowForm( data );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>The ShowForm method handles and hides all the complexities of managing the form and the subscription to the Idling event:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> ShowForm( \n  <span class=\"teal\">SortableBindingList</span>&lt;<span class=\"teal\">ConnectorData</span>&gt; data )\n{\n  <span class=\"teal\">LooseConnectorNavigator</span>.Show( data,\n    <span class=\"blue\">new</span> <span class=\"teal\">SetElementId</span>( SetPendingElementId ),\n    _hWndRevit );\n \n  Subscribe();\n}\n</pre>\n<p>The methods to subscribe and unsubscribe can even remain private to the application class and ensure that we only subscribe once:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Keep track of our subscription status.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">bool</span> _subscribing = <span class=\"blue\">false</span>;\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Subscribe to the Idling event if not yet already done.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> Subscribe()\n{\n  <span class=\"blue\">if</span>( !_subscribing )\n  {\n    _a.Idling \n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;(\n        OnIdling );\n \n    _subscribing = <span class=\"blue\">true</span>;\n  }\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Unsubscribe from the Idling event </span>\n<span class=\"gray\">///</span><span class=\"green\"> if we are currently subscribed.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> Unsubscribe()\n{\n  <span class=\"blue\">if</span>( _subscribing )\n  {\n    _a.Idling \n      -= <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;(\n        OnIdling );\n \n    _subscribing = <span class=\"blue\">false</span>;\n  }\n}\n</pre>\n<p>Except for the additional check to unsubscribe from the Idling event if the modeless form has been closed, the Idling event handler is unchanged from the previous implementation:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Revit Idling event handler.</span>\n<span class=\"gray\">///</span><span class=\"green\"> Whenever the user has selected an element to </span>\n<span class=\"gray\">///</span><span class=\"green\"> zoom to in the modeless dialogue, the pending</span>\n<span class=\"gray\">///</span><span class=\"green\"> element id is set. The event handler picks it</span>\n<span class=\"gray\">///</span><span class=\"green\"> up and zooms to it. We are not modifying the</span>\n<span class=\"gray\">///</span><span class=\"green\"> Revit document, so it seems we can get away </span>\n<span class=\"gray\">///</span><span class=\"green\"> with not starting a transaction.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> OnIdling(\n  <span class=\"blue\">object</span> sender,\n  <span class=\"teal\">IdlingEventArgs</span> ea )\n{\n  <span class=\"blue\">if</span>( !<span class=\"teal\">LooseConnectorNavigator</span>.IsShowing )\n  {\n    Unsubscribe();\n  }\n \n  <span class=\"blue\">int</span> id = _pending_element_id;\n \n  <span class=\"blue\">if</span>( 0 != id )\n  {\n    <span class=\"green\">// Support both 2011, where sender is an </span>\n    <span class=\"green\">// Application instance, and 2012, where </span>\n    <span class=\"green\">// it is a UIApplication instance:</span>\n \n    <span class=\"teal\">UIApplication</span> uiapp\n      = sender <span class=\"blue\">is</span> <span class=\"teal\">UIApplication</span>\n        ? sender <span class=\"blue\">as</span> <span class=\"teal\">UIApplication</span>\n        : <span class=\"blue\">new</span> <span class=\"teal\">UIApplication</span>(\n          sender <span class=\"blue\">as</span> <span class=\"teal\">Application</span> );\n \n    <span class=\"teal\">UIDocument</span> uidoc\n      = uiapp.ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc\n      = uidoc.Document;\n \n    <span class=\"teal\">ElementId</span> eid = <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( id );\n    <span class=\"teal\">Element</span> e = doc.get_Element( eid );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"Element id {0} requested --&gt; {1}\"</span>,\n      id, <span class=\"blue\">new</span> <span class=\"teal\">ElementData</span>( e, doc ) );\n \n    <span class=\"green\">// Look, mom, no transaction required!</span>\n \n    uidoc.Selection.Elements.Clear();\n    uidoc.Selection.Elements.Add( e );\n    uidoc.ShowElements( e );\n \n    _pending_element_id = 0;\n  }\n}\n</pre>\n<p>Finally, in the OnShutdown method, we make sure that we both close the modeless form, if it is open, and unsubscribe from the Idling event, if we are subscribed:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  <span class=\"teal\">LooseConnectorNavigator</span>.Shutdown();\n \n  Unsubscribe();\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The code itself did not change that much from my original implementation.\nMost of these changes just involved juggling existing snippets around to satisfy the recommendations listed above, and adding some trivial logic.\n\n<p>As far as I can tell, it all still works, and it feels better than ever before  :-)\n\n<p>I think this has been nagging at me subconsciously ever since I did not dive in deep into the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/modeless-door-lister-flaws.html\">\ndoor lister flaws</a> highlighted \n\nby Arnošt, so it is a real relief to have it finally sorted out now.\n\n<p>For comparison purposes, here are two separate downloads,\n\n<a href=\"loose_connectors_9.zip\">loose_connectors_9.zip</a> containing \n\nthe flawed version 2012.0.0.9 from my initial attempt before receiving and finally understanding the additional advice, and \n\n<a href=\"loose_connectors_11.zip\">loose_connectors_11.zip</a> containing \n\nthe fixed and hopefully final version 2012.0.0.11.\n\nDon't mix them up, please!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]