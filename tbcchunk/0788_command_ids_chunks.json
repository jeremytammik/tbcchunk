[
  {
    "original_filename": "0788_command_ids",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0788_command_ids",
    "header_text": "Replacing Built-In Revit Commands and Their Ids",
    "local_header_href": "#replacing-built-in-revit-commands-and-their-ids",
    "chunk_text": "<h3>Replacing Built-In Revit Commands and Their Ids</h3><p>One main focus of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html\">\nRevit 2013 API</a> features\n\nis better support for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nadd-in integration</a>.\n\nThis includes the possibility for an add-in to replace an existing Revit command with its own implementation. \nNote that you cannot call an existing command, just replace it entirely. \n\n<p>Such a command replacement is demonstrated in a very simple form by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/developer-center-and-sdk-update.html#21\">\nDisableCommand SDK sample</a>,\n\nwhich disables a command by replacing its implementation with a simple popup message.\n\n<p>A slightly more complex example is given by the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/new-revit-2013-sdk-samples.html#4\">\nUIAPI SDK sample</a>,\n\nwhich implements and installs an alternative command binding for the Design Model command to start up a new family freshly created from the conceptual mass template and display its 3D view.\n\n<p>These are the steps to replace a built-in Revit command:\n\n<ul>\n<li>Determine the RevitCommandId to replace by examining the journal file and searching for the name of the original command.\n<li>Create an AddInCommandBinding for this command id.\n<li>Provide an alternate implementation for the command binding.\n</li></li></li></ul>\n<a name=\"2\"></a>\n<h4>List of all Revit Command Ids</h4>\n<p>To simplify the first step, Victor Chekalin aka Виктор Чекалин now presents a list of all Revit command ids,\n\n<p>In Victor's own words:\n\n<p>I'm learning the ability to replace a Revit command with my own add-in implementation. \nTo replace a command, I must know CommandId of the command which I want to replace. \nThe help tells me I can find a CommandId in the journal file. \nSo the Revit SDK help doesn't contains full list of CommandIds.  \nI have decided to correct this mistake and create that list.\n\n<p>I thought this information will be useful for you and other developers and send you the list of all command ids in both \n\n<a href=\"zip/CommandIds.txt\">\ntext</a> and \n\n<a href=\"zip/CommandIds.xslx\">\nExcel</a>\n\nformat.\n\n<p><strong>Question:</strong> Wow!\nHow did you create this list?\n\n<p><strong>Answer:</strong> It is my little secret how I've got it. Joke  :-)\n\n<p>At first I thought the commands must be described somewhere.\nI searched for the text 'ID_EXPORT_IFC' (the command name from the Dev Days Online – Revit 2013 API) in all files at the Revit Program folder. \nSo I found the UIFramework.dll file. \nI opened this file in the text editor and saw XML data containing command descriptions.\n\n<p>Next steps were very easy. \nI saved this part of the UIFramework.dll file to the XML file and read the XML data:\n\n<pre class=\"code\">\n<span class=\"blue\">private</span> IEnumerable&lt;InternalCommandDef&gt; \n  ReadCommandsFromFile()\n{\n  <span class=\"blue\">using</span>( <span class=\"blue\">var</span> streamReader \n    = File.OpenText( <span class=\"maroon\">@\"C:\\Users\\ChekalinVV\"</span>\n      + <span class=\"maroon\">\"\\Documents\\Revit\\Revit2013SDK\"</span>\n      + <span class=\"maroon\">\"\\RevitUICommands.xml\"</span> ) )\n  {\n    <span class=\"blue\">using</span>( <span class=\"blue\">var</span> reader = XmlReader.Create( \n      streamReader ) )\n    {\n      <span class=\"blue\">while</span>( reader.Read() )\n      {\n        <span class=\"blue\">if</span>( reader.Name.Equals( <span class=\"maroon\">\"Command\"</span> ) )\n        {\n          InternalCommandDef commandDef \n            = <span class=\"blue\">new</span> InternalCommandDef();\n \n          <span class=\"blue\">if</span>( reader.MoveToAttribute( <span class=\"maroon\">\"Path\"</span> ) )\n            commandDef.Path = reader.Value;\n \n          <span class=\"blue\">if</span>( reader.MoveToAttribute( <span class=\"maroon\">\"CommandId\"</span> ) )\n            commandDef.CommandId = reader.Value;\n \n          <span class=\"blue\">yield</span> <span class=\"blue\">return</span> commandDef;\n        }\n      }\n    }\n  }\n}\n</pre>\n<p>Retrieve get CommandId info for each command and write it to the text file:\n\n<pre class=\"code\">\n  <span class=\"blue\">using</span>( <span class=\"blue\">var</span> textFile = File.CreateText( \n    <span class=\"maroon\">@\"C:\\Users\\ChekalinVV\\Documents\\Revit\"</span>\n    + <span class=\"maroon\">\"\\Revit2013SDK\\RevitUICommands.txt\"</span> ) )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> command <span class=\"blue\">in</span> commands )\n    {\n      <span class=\"teal\">RevitCommandId</span> commandId = <span class=\"teal\">RevitCommandId</span>\n        .LookupCommandId( command.CommandId );\n \n      <span class=\"blue\">if</span>( commandId == <span class=\"blue\">null</span> ) <span class=\"blue\">continue</span>;\n \n      command.CanHaveBinding \n        = commandId.CanHaveBinding;\n \n      command.Id = commandId.Id;\n \n      textFile.WriteLine( <span class=\"maroon\">\"{0}\\t{1}\\t{2}\\t{3}\"</span>,\n          command.CommandId,\n          command.Path,\n          command.Id,\n          command.CanHaveBinding );\n \n      <span class=\"green\">/* It is just a joke</span>\n \n<span class=\"green\">      if( !commandId.HasBinding </span>\n<span class=\"green\">        &amp;&amp; commandId.CanHaveBinding )</span>\n<span class=\"green\">      {</span>\n<span class=\"green\">        var commandBinding =</span>\n<span class=\"green\">          App.ControlledApplication</span>\n<span class=\"green\">            .CreateAddInCommandBinding(commandId);</span>\n \n<span class=\"green\">        commandBinding.Executed += OnCommandExecute;</span>\n<span class=\"green\">      }</span>\n<span class=\"green\">      */</span>\n    }\n  }\n}\n</pre>\n<p>It is not necessary to get full CommandId properties, but I wanted to retrieve the CanHaveBinding property for all commands. \nAs I can see only two commands cannot have binding: Undo and Redo commands. \nAlthough I try to bind ID_APP_EXIT command (just for test because it was the first command I found in the journal files). \nIt binds without any errors but doesn't work.\n\n<p>Very many thanks to Victor for this interesting research and the useful comprehensive list!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0788_command_ids",
    "header_text": "List of all Revit Command Ids",
    "local_header_href": "#list-of-all-revit-command-ids",
    "chunk_text": "<h4>List of all Revit Command Ids</h4><p>To simplify the first step, Victor Chekalin aka Виктор Чекалин now presents a list of all Revit command ids,\n\n<p>In Victor's own words:\n\n<p>I'm learning the ability to replace a Revit command with my own add-in implementation. \nTo replace a command, I must know CommandId of the command which I want to replace. \nThe help tells me I can find a CommandId in the journal file. \nSo the Revit SDK help doesn't contains full list of CommandIds.  \nI have decided to correct this mistake and create that list.\n\n<p>I thought this information will be useful for you and other developers and send you the list of all command ids in both \n\n<a href=\"zip/CommandIds.txt\">\ntext</a> and \n\n<a href=\"zip/CommandIds.xslx\">\nExcel</a>\n\nformat.\n\n<p><strong>Question:</strong> Wow!\nHow did you create this list?\n\n<p><strong>Answer:</strong> It is my little secret how I've got it. Joke  :-)\n\n<p>At first I thought the commands must be described somewhere.\nI searched for the text 'ID_EXPORT_IFC' (the command name from the Dev Days Online – Revit 2013 API) in all files at the Revit Program folder. \nSo I found the UIFramework.dll file. \nI opened this file in the text editor and saw XML data containing command descriptions.\n\n<p>Next steps were very easy. \nI saved this part of the UIFramework.dll file to the XML file and read the XML data:\n\n<pre class=\"code\">\n<span class=\"blue\">private</span> IEnumerable&lt;InternalCommandDef&gt; \n  ReadCommandsFromFile()\n{\n  <span class=\"blue\">using</span>( <span class=\"blue\">var</span> streamReader \n    = File.OpenText( <span class=\"maroon\">@\"C:\\Users\\ChekalinVV\"</span>\n      + <span class=\"maroon\">\"\\Documents\\Revit\\Revit2013SDK\"</span>\n      + <span class=\"maroon\">\"\\RevitUICommands.xml\"</span> ) )\n  {\n    <span class=\"blue\">using</span>( <span class=\"blue\">var</span> reader = XmlReader.Create( \n      streamReader ) )\n    {\n      <span class=\"blue\">while</span>( reader.Read() )\n      {\n        <span class=\"blue\">if</span>( reader.Name.Equals( <span class=\"maroon\">\"Command\"</span> ) )\n        {\n          InternalCommandDef commandDef \n            = <span class=\"blue\">new</span> InternalCommandDef();\n \n          <span class=\"blue\">if</span>( reader.MoveToAttribute( <span class=\"maroon\">\"Path\"</span> ) )\n            commandDef.Path = reader.Value;\n \n          <span class=\"blue\">if</span>( reader.MoveToAttribute( <span class=\"maroon\">\"CommandId\"</span> ) )\n            commandDef.CommandId = reader.Value;\n \n          <span class=\"blue\">yield</span> <span class=\"blue\">return</span> commandDef;\n        }\n      }\n    }\n  }\n}\n</pre>\n<p>Retrieve get CommandId info for each command and write it to the text file:\n\n<pre class=\"code\">\n  <span class=\"blue\">using</span>( <span class=\"blue\">var</span> textFile = File.CreateText( \n    <span class=\"maroon\">@\"C:\\Users\\ChekalinVV\\Documents\\Revit\"</span>\n    + <span class=\"maroon\">\"\\Revit2013SDK\\RevitUICommands.txt\"</span> ) )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> command <span class=\"blue\">in</span> commands )\n    {\n      <span class=\"teal\">RevitCommandId</span> commandId = <span class=\"teal\">RevitCommandId</span>\n        .LookupCommandId( command.CommandId );\n \n      <span class=\"blue\">if</span>( commandId == <span class=\"blue\">null</span> ) <span class=\"blue\">continue</span>;\n \n      command.CanHaveBinding \n        = commandId.CanHaveBinding;\n \n      command.Id = commandId.Id;\n \n      textFile.WriteLine( <span class=\"maroon\">\"{0}\\t{1}\\t{2}\\t{3}\"</span>,\n          command.CommandId,\n          command.Path,\n          command.Id,\n          command.CanHaveBinding );\n \n      <span class=\"green\">/* It is just a joke</span>\n \n<span class=\"green\">      if( !commandId.HasBinding </span>\n<span class=\"green\">        &amp;&amp; commandId.CanHaveBinding )</span>\n<span class=\"green\">      {</span>\n<span class=\"green\">        var commandBinding =</span>\n<span class=\"green\">          App.ControlledApplication</span>\n<span class=\"green\">            .CreateAddInCommandBinding(commandId);</span>\n \n<span class=\"green\">        commandBinding.Executed += OnCommandExecute;</span>\n<span class=\"green\">      }</span>\n<span class=\"green\">      */</span>\n    }\n  }\n}\n</pre>\n<p>It is not necessary to get full CommandId properties, but I wanted to retrieve the CanHaveBinding property for all commands. \nAs I can see only two commands cannot have binding: Undo and Redo commands. \nAlthough I try to bind ID_APP_EXIT command (just for test because it was the first command I found in the journal files). \nIt binds without any errors but doesn't work.\n\n<p>Very many thanks to Victor for this interesting research and the useful comprehensive list!\n</p></p></p></p></p></p></p></p></p></p></p>"
  }
]