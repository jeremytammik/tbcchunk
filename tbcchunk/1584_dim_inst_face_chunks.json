[
  {
    "original_filename": "1584_dim_inst_face",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- https://forums.autodesk.com/t5/revit-api-forum/how-to-create-line-based-on-angle/m-p/7372910\n\n- \"ExtentElem\" and duplicate legend components remastered for TBC blog post\n\n- references for dimensioning\nPlease  look at discussion\nhttps://forums.autodesk.com/t5/revit-api-forum/obtaining-references-from-edges-in-python/m-p/7356104\nand solution from\nhttps://github.com/CADBIMDeveloper/PutRevitDimensionsToSquareFaces/tree/master/PutRevitDimensionsToSquareFaces\nSincerely, Alexander\n- [a readme is a must](http://thebuildingcoder.typepad.com/blog/2016/10/how-to-create-a-new-line-style.html#4)!\n- [people cannot use the code unless you specify a license](http://thebuildingcoder.typepad.com/blog/2013/10/the-building-coder-samples-on-github.html#2)!\n- [more on licenses](http://thebuildingcoder.typepad.com/blog/2013/10/wall-compound-layer-and-other-geometry.html#2)\nI still use the This sample is licensed under the terms of the [MIT License](http://opensource.org/licenses/MIT), a lax, permissive non-copyleft free software license. For substantial programs it is better to use the Apache 2.0 license since it blocks patent treachery. Mine samples are not substantial.\n- I've fixed the code (there was much more tricks working with revit references) and pushed to the github.\n\nObtaining square face references for dimensioning #RevitAPI @AutodeskRevit #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/dimfaceref\nThe ExtentElem + duplicating legend components #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/dimfaceref\nCreating a line perpendicular to another using #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/dimfaceref\n\nAlexander Ignatovich answered several interesting questions in the Revit API discussion forum\n&ndash; <code>ExtentElem</code> and duplicate legend components remastered\n&ndash; Obtaining generic model square face references for dimensioning\n&ndash; Preparing family with reference planes for dimensioning\n&ndash; Creating a line perpendicular to another...\n\n--->"
  },
  {
    "original_filename": "1584_dim_inst_face",
    "header_text": "ExtentElem and Square Face Dimensioning References",
    "local_header_href": "#extentelem-and-square-face-dimensioning-references",
    "chunk_text": "### ExtentElem and Square Face Dimensioning References\n\nAlexander Ignatovich, [@CADBIMDeveloper](https://github.com/CADBIMDeveloper), aka Александр Игнатович,\nanswered several interesting questions in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) and elsewhere:\n\n- [`ExtentElem` and duplicating legend components](#2)\n- [Obtaining generic model square face references for dimensioning](#3)\n- [Preparing family with reference planes for dimensioning](#3.1)\n- [Creating a line perpendicular to another](#4)\n\n\n####<a name=\"2\"></a>ExtentElem and Duplicating Legend Components\n\nIn Alexander's own words:\n\nI recently developed a bunch of automation tools for legend views.\n\nI faced and solved a tricky thing I want to share. \n\nI had to copy legend components from view A to view B. I looked at `ElementTransformUtils.CopyElements` with partial success. However, instead of copying all legend components between the views, Revit created a new view for them.\n\nMy code at that moment looked like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;collector&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;legendView.Id&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;elementsIds&nbsp;=&nbsp;collector\n&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsNotElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;.ToElementIds();\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementTransformUtils</span>.CopyElements(&nbsp;legendView,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;elementsIds,&nbsp;destLegendView,&nbsp;<span style=\"color:#2b91af;\">Transform</span>.Identity,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">CopyPasteOptions</span>()&nbsp;);\n</pre>\n\nI searched for a solution and found the old blog post\non [duplicating a legend component](http://thebuildingcoder.typepad.com/blog/2010/05/duplicate-legend-component.html).\n\nThat solution puts elements into a group, places a group instance and then ungroups it. This method still remains working with little modification, such as:\n\n- Rename method `Ungroup` to `UngroupMembers`.\n- Pass a generic list of element ids instead of a list of elements to the `NewGroup` method.\n- Open and activate the destination view  before placing new group.\n\nOnce I had that working, I was pretty sure that it included unnecessary overhead, so I continued my research.\n\nLater I realized that the list of element ids included an `ExtentElem` element.\n\nThis needs to be removed from `elementsIds` to make this code work as expected.\n\nAs always, when using a filtered element collector, the question arises on how to identify it.\n\nIn this case, all other elements have a valid category, and this one does not, so we can use:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;elementsIds&nbsp;=&nbsp;collector\n&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsNotElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;x&nbsp;=&gt;&nbsp;x.Category&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)&nbsp;<span style=\"color:green;\">//&nbsp;I&nbsp;don't&nbsp;want&nbsp;to&nbsp;use&nbsp;name,&nbsp;but&nbsp;I've&nbsp;found&nbsp;that&nbsp;all&nbsp;other&nbsp;use&nbsp;elements&nbsp;in&nbsp;legend&nbsp;view&nbsp;has&nbsp;category</span>\n&nbsp;&nbsp;&nbsp;&nbsp;.Select(&nbsp;x&nbsp;=&gt;&nbsp;x.Id&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.ToList();\n</pre>\n \nSo, this code remains simple and clear. The `ExtentElem` is a common problem and its id should not be passed to the `CopyElements` method.\n\nSince I don't see this type of element mentioned by The Building Coder, I thought it worthwhile to point out.\n\nVery many thanks to Alexander for this deep research and valuable insight!\n\n####<a name=\"3\"></a>Obtaining Generic Model Square Face References for Dimensioning\n\nNext, Alexander implemented an add-in to help answer \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) forum thread\non [obtaining references from edges in Python](https://forums.autodesk.com/t5/revit-api-forum/how-to-create-line-based-on-angle/m-p/7372910) to \nput together a routine that will automatically create dimensions on a square face of a generic model. i.e. the user selects the face and dimensions appear:\n\n**Question:** I've got some of the code working, obtaining the edges from a user selected 3D face, this returns the 4 edges (which are Edge class objects), it should simply be a case of obtaining the edge's reference that can be used to create the dimensions.\n \nThe Edge class has a Property which should return a reference to the edge - but when I run the code, it returns Null - and I can't see why.\n \nThis is the code:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "1584_dim_inst_face",
    "header_text": "Dynamo",
    "local_header_href": "#dynamo",
    "chunk_text": "# Dynamo\n\nimport clr\nclr.AddReference('RevitAPI')\nclr.AddReference('RevitAPIUI')\nfrom Autodesk.Revit.DB import *\nfrom Autodesk.Revit.UI import *\n\nclr.AddReference(\"RevitServices\")\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\n\ndoc = DocumentManager.Instance.CurrentDBDocument\nuiapp = DocumentManager.Instance.CurrentUIApplication\napp = uiapp.Application\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\n\n#The inputs to this node will be stored as a list in the IN variables.\ndataEnteringNode = IN\nselobject  = UnwrapElement(IN[0]) # Object to select\n\n#Get user to pick a face\nselob = uidoc.Selection.PickObject(Selection.ObjectType.PointOnElement, \"Pick something now\")\n\n#Get Id of element thats picked\nselobid = selob.ElementId\n\n#Get element thats picked\ngetob = doc.GetElement(selobid)\n\n#Get face thats picked\ngetface = getob.GetGeometryObjectFromReference(selob)\n\n#Get edges of face (returns a list the first object is the list of edges)\nedgeloops = getface.EdgeLoops\n\n#Select the first edge\ndimedge1 = edgeloops[0][0]\n\n#Select the third edge (the one opposite the first)\ndimedge2 = edgeloops[0][2]\n\n#Obtain a reference of the first edge\nedgeref1 = dimedge1.Reference\n\n#Obtain a reference of the thord edge\nedgeref2 = dimedge2.Reference\n\n#Assign your output to the OUT variable.\nOUT = [selob, selobid, getob, getface, edgeloops, dimedge1, dimedge2, edgeref1, edgeref2]\n</pre>\n\nIf you execute it, you'll see that `edgeref1` and `edgeref2` variables both contain `Null`.\n \nAny idea why?\n\n**Answer:** I found the solution for your problem.\n\nThe main idea is to retrieve the element geometry with the option set to `ComputeReference = True` and then find the appropriate face by reference.\n\nSorry, I don't know Python too much, so I created an add-in in C# for you. You may get it from\nthe [PutRevitDimensionsToSquareFaces add-in GitHub repository](https://github.com/CADBIMDeveloper/PutRevitDimensionsToSquareFaces).\n\nIt includes a lot of tricks with Revit references to make this work as expected with families.\n\nInitially, I only tested it only with floors; now it works with family instances too.\n\nMany thanks to Alexander for this work!\n\nJeremy adds: I added a readme and license to the code for him, because:\n\n- [A readme is a must](http://thebuildingcoder.typepad.com/blog/2016/10/how-to-create-a-new-line-style.html#4)!\n- [People cannot use the code unless you specify a license](http://thebuildingcoder.typepad.com/blog/2013/10/the-building-coder-samples-on-github.html#2)!\n- [More on licenses](http://thebuildingcoder.typepad.com/blog/2013/10/wall-compound-layer-and-other-geometry.html#2)...\n\nI myself use the [MIT License](http://opensource.org/licenses/MIT) for my samples, \"a lax, permissive non-copyleft free software license. For substantial programs, it is better to use the Apache 2.0 license since it blocks patent treachery\".\n\nMy samples are not substantial.\n\n\n####<a name=\"3.1\"></a>Preparing Family with Reference Planes for Dimensioning\n\nAlexander later added another, simpler solution to the conversation:\n\nIf you use Revit 2018 or later, you can prepare your family for easier dimensioning by adding specific reference planes in the family definition, e.g., xLeft, xRight, yTop, yBottom, and then access them on the family instance in the project environment like this:\n\n<pre class=\"prettyprint\">\ndef CreateDimension(instance, refNames, direction):\n  references = ReferenceArray()\n  \n  for x in refNames:\n    references.Append(instance.GetReferenceByName(x))\n  \n  origin = instance.Location.Point\n  \n  transform = instance.GetTotalTransform()\n  transform.Origin = XYZ.Zero\n  \n  dimensionDirection = transform.OfPoint(direction)\n  \n  dimensionLine = Line.CreateUnbound(origin, dimensionDirection)\n  \n  doc.Create.NewDimension(doc.ActiveView, dimensionLine, references)\n\n\nfamInst = selection[0]\n\ntx = Transaction(doc, \"create dimensions\")\ntx.Start()\n\nCreateDimension(famInst, [\"xLeft\", \"xRight\"], XYZ.BasisX)\nCreateDimension(famInst, [\"yBottom\", \"yTop\"], XYZ.BasisY)\n\ntx.Commit()\n</pre>\n\n\n####<a name=\"4\"></a>Creating a Line Perpendicular to Another\n\nFinally, a trivial question to round this off, though very useful for the geometrically challenged, from\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) forum thread\non [how to create a line based on an angle](https://forums.autodesk.com/t5/revit-api-forum/how-to-create-line-based-on-angle/m-p/7372910):\n\n**Question:** I have a line element in Revit.\n\nI want to add a second line perpendicular to it.\n\nThe second line start point can be any point on the line which is 90 degrees from the first line axis.\n\nHow can I create the second line based on this angle?\n\nHere is an example of the line I need:\n\n<center>\n<img src=\"img/perpendicular_line.png\" alt=\"Perpendicular line\" width=\"616\"/>\n</center>\n\nI have been playing around with the methods `CreateTransformed`, `CreateRotationAtPoint` and `CrossProduct`, but I still don't get the result I want.\n\n**Answer:** It is simple. Just determine a) the line direction and b) the line sketch plane normal.\n\nThen, `normal.CrossProduct(direction)` defines your second line direction, or maybe you need `-1*normal.CrossProduct(direction)`.\n\nTake any point on first line, for example, `pt1 = fistLine.Evaluate(0.5, true)`, set `pt2 = pt1 + length * direction`, create the second line using `Line.CreateBound(pt1, pt2)`, then create a model curve on the first line's sketch plane, based on this second line.\n\nThanks again to Alexander for this succinct explanation!"
  }
]