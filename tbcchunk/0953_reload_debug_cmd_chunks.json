[
  {
    "original_filename": "0953_reload_debug_cmd",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0953_reload_debug_cmd",
    "header_text": "Reloading and Debugging External Commands on the Fly",
    "local_header_href": "#reloading-and-debugging-external-commands-on-the-fly",
    "chunk_text": "<h3>Reloading and Debugging External Commands on the Fly</h3><p>After publishing the little sample code snippet yesterday showing how to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/load-your-own-external-command-on-the-fly.html\">\nload and reload an external Revit command</a> from\n\na byte stream to avoid locking the .NET assembly DLL, I realised that this can be combined rather nicely with my own\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/external-command-lister-and-adding-ribbon-commands.html\">\nexternal command lister</a>.\n\n<p>The combination of these two enables loading, debugging, reloading and re-debugging any simple external command on the fly, which has been a subject of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/reload-add-in-for-debug-without-restart.html\">\nregular discussion in the past</a>.</p>\n<p>By 'simple', I mean commands that do not have external dependencies or special loading requirements that make it difficult to load them lacking additional information beyond the .NET assembly path name.</p>\n<p>The external command lister initially used the Assembly.LoadFrom method to load the .NET assembly, which locks the DLL.</p>\n<p>Replacing this by reading the byte stream from the DLL and passing the result into Assembly.Load instead avoids that lock.</p>\n<p>Adding a method to instantiate an external command implementation object and invoke its Execute method enables execution and debugging of an arbitrary external command.</p>\n<p>Here is a live five-minute demonstration to show exactly what I mean:</p>\n<!--\n\nhttp://youtu.be/hnDlCnvxksc\n\nRevit API: load, debug, reload and re-debug an external command\n\nFor more details, please refer to The Building Coder, May 29, 2013.\n\nhttp://thebuildingcoder.typepad.com\n\nReloading and Debugging External Commands on the Fly\n\nhttp://thebuildingcoder.typepad.com/blog/2013/05/reloading-and-debugging-external-commands-on-the-fly.html\n\nJeremy Tammik,Revit API,The Building Coder,Programming,.NET,C#\n\n-->\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/hnDlCnvxksc\" width=\"420\"></iframe>\n</center>\n<p>To achieve this, I basically just added two methods to the existing code:</p>\n<ul>\n<li><a href=\"#2\">ExternalCommandLister.Launch</a></li>\n<li><a href=\"#3\">Command.OnDoubleClick</a></li>\n</ul>\n<p>If you are impatient, uninterested or already know it all yourself, please go ahead and jump straight down to the\n\n<a href=\"#4\">summary and download</a> section.</p>\n<a name=\"2\"></a>\n<h4>ExternalCommandLister Enhancements</h4>\n<p>I extended the ExternalCommandLister class by adding a Launch method taking the fully specified class name of the external command implementation.</p>\n<p>I also modified the constructor to load the add-in assembly from a byte stream instead of directly from the .NET assembly file to avoid the DLL locking issue preventing subsequent reloading.</p>\n<p>The Launch method requires the current instance of the ExternalCommandData to pass in to the external command it invokes, and the assembly we create needs to be kept available as well, so I added two new member variables for these.</p>\n<p>It also checks the Result code returned by the invocation and reports that together with an optional error message in case of failure.</p>\n<p>Here is the complete updated class implementation:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ExternalCommandLister</span>\n{\n  <span class=\"blue\">string</span> _assembly_filename;\n  <span class=\"blue\">string</span>[] _external_commmand_class_names;\n  <span class=\"teal\">ExternalCommandData</span> _commandData;\n  <span class=\"teal\">Assembly</span> _asm;\n \n  <span class=\"blue\">public</span> ExternalCommandLister(\n    <span class=\"blue\">string</span> assembly_filename,\n    <span class=\"teal\">ExternalCommandData</span> commandData )\n  {\n    _assembly_filename = assembly_filename;\n    _external_commmand_class_names = <span class=\"blue\">null</span>;\n    _commandData = commandData;\n \n    <span class=\"blue\">if</span>( !<span class=\"teal\">File</span>.Exists( assembly_filename ) )\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">ArgumentOutOfRangeException</span>(\n        <span class=\"maroon\">\"assembly_filename\"</span>, <span class=\"maroon\">\"file not found\"</span> );\n    }\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// No need to load the Revit API assemblies, </span>\n      <span class=\"green\">// because we are ourselves a Revit API add-in </span>\n      <span class=\"green\">// inside of Revit, so they are guaranteed to</span>\n      <span class=\"green\">// be present.</span>\n \n      <span class=\"green\">//Assembly revit = Assembly.LoadFrom( \"C:/Program Files/Autodesk/Revit Architecture 2014/RevitAPI.dll\" );</span>\n      <span class=\"green\">//string root = \"C:/Program Files/Autodesk Revit Architecture 2014/\";</span>\n      <span class=\"green\">//Assembly adWindows = Assembly.LoadFrom( root + \"AdWindows.dll\" );</span>\n      <span class=\"green\">//Assembly uiFramework = Assembly.LoadFrom( root + \"UIFramework.dll\" );</span>\n      <span class=\"green\">//Assembly revit = Assembly.LoadFrom( root + \"RevitAPI.dll\" );</span>\n \n      <span class=\"green\">// Load the selected assembly into </span>\n      <span class=\"green\">// the current application domain:</span>\n \n      <span class=\"green\">//Assembly asm = Assembly.LoadFrom(</span>\n      <span class=\"green\">//  assembly_filename );</span>\n \n      <span class=\"green\">// Load the selected assembly into the current </span>\n      <span class=\"green\">// application domain via byte array to avoid</span>\n      <span class=\"green\">// locking the DLL:</span>\n \n      <span class=\"blue\">byte</span> [] assemblyBytes = <span class=\"teal\">File</span>.ReadAllBytes(\n        _assembly_filename );\n \n      _asm = <span class=\"teal\">Assembly</span>.Load( assemblyBytes );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _asm )\n      {\n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"Unable to load assembly '{0}'\"</span>,\n          assembly_filename ) );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Type</span>&gt; types = _asm.GetTypes()\n          .Where&lt;<span class=\"teal\">Type</span>&gt;( t =&gt;\n            <span class=\"blue\">null</span> != t.GetInterface(\n              <span class=\"maroon\">\"IExternalCommand\"</span> ) );\n \n        _external_commmand_class_names = types\n          .Select&lt;<span class=\"teal\">Type</span>, <span class=\"blue\">string</span>&gt;( t =&gt; t.FullName )\n          .ToArray();\n      }\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Exception '{0}' processing assembly '{1}'\"</span>,\n        ex.Message, assembly_filename ) );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> AssemblyFilename\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Path</span>.GetFileName( _assembly_filename );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span>[] CommandClassnames\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _external_commmand_class_names;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Launch( <span class=\"blue\">string</span> command_name )\n  {\n    <span class=\"teal\">Debug</span>.Assert(\n      _external_commmand_class_names.Contains(\n        command_name ),\n      <span class=\"maroon\">\"expected valid command name\"</span> );\n \n    <span class=\"teal\">Type</span> typ = _asm.GetType( command_name );\n \n    <span class=\"blue\">object</span> cmd = _asm.CreateInstance( typ.FullName );\n \n    <span class=\"blue\">string</span> message = <span class=\"blue\">null</span>;\n    Autodesk.Revit.DB.<span class=\"teal\">ElementSet</span> elements = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">object</span> [] args = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] {\n      _commandData, message, elements };\n \n    <span class=\"teal\">BindingFlags</span> flags = (<span class=\"teal\">BindingFlags</span>)\n      ( (<span class=\"blue\">int</span>) <span class=\"teal\">BindingFlags</span>.Default\n      | (<span class=\"blue\">int</span>) <span class=\"teal\">BindingFlags</span>.InvokeMethod );\n \n    <span class=\"teal\">Result</span> r = (<span class=\"teal\">Result</span>) typ.InvokeMember( <span class=\"maroon\">\"Execute\"</span>,\n      flags, <span class=\"blue\">null</span>, cmd, args );\n \n    message = args[1] <span class=\"blue\">as</span> <span class=\"blue\">string</span>;\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == message) ? 0 : message.Length;\n \n    <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"{0} returned {1}{2}{3}\"</span>,\n      command_name, r,\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\": \"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\"\"</span> : message ) ) );\n \n    <span class=\"blue\">return</span> r;\n  }\n}\n</pre>\n<a name=\"3\"></a>\n<h4>Command Class Enhancements</h4>\n<p>The external command implementation class obviously also needs to be extended in order to enable call the Launch method.</p>\n<p>The initial version prompts the user to select an assembly to parse and lists the external command implementation classes it detects in a multi-line text box.</p>\n<p>I initially thought of adding a context menu to the text box to enable launching a selected command.</p>\n<p>However, it turned out to be easier to implement handling of a double click event instead.</p>\n<p>The double click event handler detects the current line and extracts the full external command implementation class name from that to pass to the Launch method:</p>\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Define the initial .NET assembly folder.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _assembly_folder_name\n    = <span class=\"maroon\">\"C:\\\\ProgramData\\\\Autodesk\\\\Revit\\\\Addins\\\\2014\"</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Select a .NET assembly file in the given folder.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"folder\"&gt;</span><span class=\"green\">Initial folder.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"filename\"&gt;</span><span class=\"green\">Selected filename on success.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Return true if a file was successfully selected.</span><span class=\"gray\">&lt;/returns&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> FileSelect(\n    <span class=\"blue\">string</span> folder,\n    <span class=\"blue\">out</span> <span class=\"blue\">string</span> filename )\n  {\n    <span class=\"teal\">OpenFileDialog</span> dlg = <span class=\"blue\">new</span> <span class=\"teal\">OpenFileDialog</span>();\n    dlg.Title = <span class=\"maroon\">\"Select .NET Assembly or Cancel to Exit\"</span>;\n    dlg.CheckFileExists = <span class=\"blue\">true</span>;\n    dlg.CheckPathExists = <span class=\"blue\">true</span>;\n    dlg.InitialDirectory = folder;\n    dlg.Filter = <span class=\"maroon\">\".NET Assembly DLL Files (*.dll)|*.dll\"</span>;\n    <span class=\"blue\">bool</span> rc = ( <span class=\"teal\">DialogResult</span>.OK == dlg.ShowDialog() );\n    filename = dlg.FileName;\n    <span class=\"blue\">return</span> rc;\n  }\n \n  <span class=\"blue\">void</span> OnDoubleClick( <span class=\"blue\">object</span> sender, <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1}\"</span>, sender, e );\n \n    <span class=\"teal\">TextBox</span> tb = sender <span class=\"blue\">as</span> <span class=\"teal\">TextBox</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != tb )\n    {\n      <span class=\"blue\">string</span> text = tb.Text;\n      <span class=\"blue\">int</span> i = tb.GetFirstCharIndexOfCurrentLine();\n      text = text.Substring( i );\n      <span class=\"blue\">int</span> n = text.IndexOf( <span class=\"maroon\">'\\n'</span> );\n      <span class=\"blue\">if</span>( 0 &lt;= n )\n      {\n        text = text.Substring( 0, n );\n      }\n      text.Trim();\n      <span class=\"teal\">Debug</span>.Print( text );\n      <span class=\"blue\">if</span>( 0 &lt; text.Length )\n      {\n        <span class=\"teal\">ExternalCommandLister</span> lister = tb.Tag\n          <span class=\"blue\">as</span> <span class=\"teal\">ExternalCommandLister</span>;\n \n        lister.Launch( text );\n      }\n    }\n  }\n \n  <span class=\"blue\">void</span> DisplayExternalCommands(\n    <span class=\"blue\">string</span> filename,\n    <span class=\"teal\">IWin32Window</span> owner,\n    <span class=\"teal\">ExternalCommandData</span> commandData )\n  {\n    <span class=\"teal\">ExternalCommandLister</span> lister\n      = <span class=\"blue\">new</span> <span class=\"teal\">ExternalCommandLister</span>(\n        filename, commandData );\n \n    <span class=\"blue\">string</span>[] a = lister.CommandClassnames;\n    <span class=\"blue\">int</span> n = a.Length;\n \n    System.Windows.Forms.<span class=\"teal\">Form</span> form\n      = <span class=\"blue\">new</span> System.Windows.Forms.<span class=\"teal\">Form</span>();\n \n    form.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 400, 150 );\n \n    form.Text = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"{0} defines {1} external command{2} - double click to launch\"</span>,\n      lister.AssemblyFilename, n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ) );\n \n    form.FormBorderStyle\n      = <span class=\"teal\">FormBorderStyle</span>.SizableToolWindow;\n \n    System.Windows.Forms.<span class=\"teal\">TextBox</span> tb\n      = <span class=\"blue\">new</span> System.Windows.Forms.<span class=\"teal\">TextBox</span>();\n \n    tb.Dock = System.Windows.Forms.<span class=\"teal\">DockStyle</span>.Fill;\n    tb.Location = <span class=\"blue\">new</span> System.Drawing.<span class=\"teal\">Point</span>( 0, 0 );\n    tb.Multiline = <span class=\"blue\">true</span>;\n    tb.TabIndex = 0;\n    tb.WordWrap = <span class=\"blue\">false</span>;\n    tb.ReadOnly = <span class=\"blue\">true</span>;\n \n    tb.Text = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\"\\r\\n\"</span>,\n      lister.CommandClassnames );\n \n    tb.Tag = lister;\n \n    tb.DoubleClick += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>(\n      OnDoubleClick );\n \n    form.Controls.Add( tb );\n \n    form.ShowDialog( owner );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">IWin32Window</span> revit_window\n      = <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>(\n        <span class=\"teal\">ComponentManager</span>.ApplicationWindow );\n \n    <span class=\"blue\">string</span> filename;\n \n    <span class=\"blue\">while</span>( FileSelect(\n      _assembly_folder_name,\n      <span class=\"blue\">out</span> filename ) )\n    {\n      DisplayExternalCommands( filename,\n        revit_window, commandData );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<a name=\"4\"></a>\n<h4>Summary and Download</h4>\n<p>One very neat benefit of this approach is that it almost completely replaces the functionality provided by RvtSamples, in that any simple external command can be immediately launched and debugged.\nIt is obviously also much more flexible, 100% totally flexible, in fact.\nI cannot think of any way to make it more so.</p>\n<p>The only remaining advantage of RvtSamples is basically its very inflexibility, the fact that it provides a neat user interface with a static overview of all available samples, plus optional additional add-ins that you specify yourself using include files or by editing and adding new entries to RvtSamples.txt itself.\nYou thus see what you have at your disposal, whereas the flexible new loader requires to to know it in advance yourself.</p>\n<p>Come to think of it, this is probably exactly what the AddInManager does as well to enable reloading and re-debugging of already loaded add-ins without restarting Revit and regenerating the RVT project file.</p>\n<p>Here is <a href=\"zip/JtExternalCommandLister2.zip\">JtExternalCommandLister2.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the updated version 2014.0.0.2 of this external command.</p>\n<p>I hope you find this useful, instructive and inspiring.</p>\n</p>"
  },
  {
    "original_filename": "0953_reload_debug_cmd",
    "header_text": "ExternalCommandLister Enhancements",
    "local_header_href": "#externalcommandlister-enhancements",
    "chunk_text": "<h4>ExternalCommandLister Enhancements</h4><p>I extended the ExternalCommandLister class by adding a Launch method taking the fully specified class name of the external command implementation.</p><p>I also modified the constructor to load the add-in assembly from a byte stream instead of directly from the .NET assembly file to avoid the DLL locking issue preventing subsequent reloading.</p><p>The Launch method requires the current instance of the ExternalCommandData to pass in to the external command it invokes, and the assembly we create needs to be kept available as well, so I added two new member variables for these.</p><p>It also checks the Result code returned by the invocation and reports that together with an optional error message in case of failure.</p><p>Here is the complete updated class implementation:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ExternalCommandLister</span>\n{\n  <span class=\"blue\">string</span> _assembly_filename;\n  <span class=\"blue\">string</span>[] _external_commmand_class_names;\n  <span class=\"teal\">ExternalCommandData</span> _commandData;\n  <span class=\"teal\">Assembly</span> _asm;\n \n  <span class=\"blue\">public</span> ExternalCommandLister(\n    <span class=\"blue\">string</span> assembly_filename,\n    <span class=\"teal\">ExternalCommandData</span> commandData )\n  {\n    _assembly_filename = assembly_filename;\n    _external_commmand_class_names = <span class=\"blue\">null</span>;\n    _commandData = commandData;\n \n    <span class=\"blue\">if</span>( !<span class=\"teal\">File</span>.Exists( assembly_filename ) )\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">ArgumentOutOfRangeException</span>(\n        <span class=\"maroon\">\"assembly_filename\"</span>, <span class=\"maroon\">\"file not found\"</span> );\n    }\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// No need to load the Revit API assemblies, </span>\n      <span class=\"green\">// because we are ourselves a Revit API add-in </span>\n      <span class=\"green\">// inside of Revit, so they are guaranteed to</span>\n      <span class=\"green\">// be present.</span>\n \n      <span class=\"green\">//Assembly revit = Assembly.LoadFrom( \"C:/Program Files/Autodesk/Revit Architecture 2014/RevitAPI.dll\" );</span>\n      <span class=\"green\">//string root = \"C:/Program Files/Autodesk Revit Architecture 2014/\";</span>\n      <span class=\"green\">//Assembly adWindows = Assembly.LoadFrom( root + \"AdWindows.dll\" );</span>\n      <span class=\"green\">//Assembly uiFramework = Assembly.LoadFrom( root + \"UIFramework.dll\" );</span>\n      <span class=\"green\">//Assembly revit = Assembly.LoadFrom( root + \"RevitAPI.dll\" );</span>\n \n      <span class=\"green\">// Load the selected assembly into </span>\n      <span class=\"green\">// the current application domain:</span>\n \n      <span class=\"green\">//Assembly asm = Assembly.LoadFrom(</span>\n      <span class=\"green\">//  assembly_filename );</span>\n \n      <span class=\"green\">// Load the selected assembly into the current </span>\n      <span class=\"green\">// application domain via byte array to avoid</span>\n      <span class=\"green\">// locking the DLL:</span>\n \n      <span class=\"blue\">byte</span> [] assemblyBytes = <span class=\"teal\">File</span>.ReadAllBytes(\n        _assembly_filename );\n \n      _asm = <span class=\"teal\">Assembly</span>.Load( assemblyBytes );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _asm )\n      {\n        <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"Unable to load assembly '{0}'\"</span>,\n          assembly_filename ) );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Type</span>&gt; types = _asm.GetTypes()\n          .Where&lt;<span class=\"teal\">Type</span>&gt;( t =&gt;\n            <span class=\"blue\">null</span> != t.GetInterface(\n              <span class=\"maroon\">\"IExternalCommand\"</span> ) );\n \n        _external_commmand_class_names = types\n          .Select&lt;<span class=\"teal\">Type</span>, <span class=\"blue\">string</span>&gt;( t =&gt; t.FullName )\n          .ToArray();\n      }\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Exception '{0}' processing assembly '{1}'\"</span>,\n        ex.Message, assembly_filename ) );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> AssemblyFilename\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Path</span>.GetFileName( _assembly_filename );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span>[] CommandClassnames\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> _external_commmand_class_names;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Launch( <span class=\"blue\">string</span> command_name )\n  {\n    <span class=\"teal\">Debug</span>.Assert(\n      _external_commmand_class_names.Contains(\n        command_name ),\n      <span class=\"maroon\">\"expected valid command name\"</span> );\n \n    <span class=\"teal\">Type</span> typ = _asm.GetType( command_name );\n \n    <span class=\"blue\">object</span> cmd = _asm.CreateInstance( typ.FullName );\n \n    <span class=\"blue\">string</span> message = <span class=\"blue\">null</span>;\n    Autodesk.Revit.DB.<span class=\"teal\">ElementSet</span> elements = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">object</span> [] args = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] {\n      _commandData, message, elements };\n \n    <span class=\"teal\">BindingFlags</span> flags = (<span class=\"teal\">BindingFlags</span>)\n      ( (<span class=\"blue\">int</span>) <span class=\"teal\">BindingFlags</span>.Default\n      | (<span class=\"blue\">int</span>) <span class=\"teal\">BindingFlags</span>.InvokeMethod );\n \n    <span class=\"teal\">Result</span> r = (<span class=\"teal\">Result</span>) typ.InvokeMember( <span class=\"maroon\">\"Execute\"</span>,\n      flags, <span class=\"blue\">null</span>, cmd, args );\n \n    message = args[1] <span class=\"blue\">as</span> <span class=\"blue\">string</span>;\n \n    <span class=\"blue\">int</span> n = (<span class=\"blue\">null</span> == message) ? 0 : message.Length;\n \n    <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"{0} returned {1}{2}{3}\"</span>,\n      command_name, r,\n      ( 0 == n ? <span class=\"maroon\">\".\"</span> : <span class=\"maroon\">\": \"</span> ),\n      ( 0 == n ? <span class=\"maroon\">\"\"</span> : message ) ) );\n \n    <span class=\"blue\">return</span> r;\n  }\n}\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "0953_reload_debug_cmd",
    "header_text": "Command Class Enhancements",
    "local_header_href": "#command-class-enhancements",
    "chunk_text": "<h4>Command Class Enhancements</h4><p>The external command implementation class obviously also needs to be extended in order to enable call the Launch method.</p><p>The initial version prompts the user to select an assembly to parse and lists the external command implementation classes it detects in a multi-line text box.</p><p>I initially thought of adding a context menu to the text box to enable launching a selected command.</p><p>However, it turned out to be easier to implement handling of a double click event instead.</p><p>The double click event handler detects the current line and extracts the full external command implementation class name from that to pass to the Launch method:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Define the initial .NET assembly folder.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _assembly_folder_name\n    = <span class=\"maroon\">\"C:\\\\ProgramData\\\\Autodesk\\\\Revit\\\\Addins\\\\2014\"</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Select a .NET assembly file in the given folder.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"folder\"&gt;</span><span class=\"green\">Initial folder.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"filename\"&gt;</span><span class=\"green\">Selected filename on success.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Return true if a file was successfully selected.</span><span class=\"gray\">&lt;/returns&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> FileSelect(\n    <span class=\"blue\">string</span> folder,\n    <span class=\"blue\">out</span> <span class=\"blue\">string</span> filename )\n  {\n    <span class=\"teal\">OpenFileDialog</span> dlg = <span class=\"blue\">new</span> <span class=\"teal\">OpenFileDialog</span>();\n    dlg.Title = <span class=\"maroon\">\"Select .NET Assembly or Cancel to Exit\"</span>;\n    dlg.CheckFileExists = <span class=\"blue\">true</span>;\n    dlg.CheckPathExists = <span class=\"blue\">true</span>;\n    dlg.InitialDirectory = folder;\n    dlg.Filter = <span class=\"maroon\">\".NET Assembly DLL Files (*.dll)|*.dll\"</span>;\n    <span class=\"blue\">bool</span> rc = ( <span class=\"teal\">DialogResult</span>.OK == dlg.ShowDialog() );\n    filename = dlg.FileName;\n    <span class=\"blue\">return</span> rc;\n  }\n \n  <span class=\"blue\">void</span> OnDoubleClick( <span class=\"blue\">object</span> sender, <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}: {1}\"</span>, sender, e );\n \n    <span class=\"teal\">TextBox</span> tb = sender <span class=\"blue\">as</span> <span class=\"teal\">TextBox</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != tb )\n    {\n      <span class=\"blue\">string</span> text = tb.Text;\n      <span class=\"blue\">int</span> i = tb.GetFirstCharIndexOfCurrentLine();\n      text = text.Substring( i );\n      <span class=\"blue\">int</span> n = text.IndexOf( <span class=\"maroon\">'\\n'</span> );\n      <span class=\"blue\">if</span>( 0 &lt;= n )\n      {\n        text = text.Substring( 0, n );\n      }\n      text.Trim();\n      <span class=\"teal\">Debug</span>.Print( text );\n      <span class=\"blue\">if</span>( 0 &lt; text.Length )\n      {\n        <span class=\"teal\">ExternalCommandLister</span> lister = tb.Tag\n          <span class=\"blue\">as</span> <span class=\"teal\">ExternalCommandLister</span>;\n \n        lister.Launch( text );\n      }\n    }\n  }\n \n  <span class=\"blue\">void</span> DisplayExternalCommands(\n    <span class=\"blue\">string</span> filename,\n    <span class=\"teal\">IWin32Window</span> owner,\n    <span class=\"teal\">ExternalCommandData</span> commandData )\n  {\n    <span class=\"teal\">ExternalCommandLister</span> lister\n      = <span class=\"blue\">new</span> <span class=\"teal\">ExternalCommandLister</span>(\n        filename, commandData );\n \n    <span class=\"blue\">string</span>[] a = lister.CommandClassnames;\n    <span class=\"blue\">int</span> n = a.Length;\n \n    System.Windows.Forms.<span class=\"teal\">Form</span> form\n      = <span class=\"blue\">new</span> System.Windows.Forms.<span class=\"teal\">Form</span>();\n \n    form.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 400, 150 );\n \n    form.Text = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"{0} defines {1} external command{2} - double click to launch\"</span>,\n      lister.AssemblyFilename, n,\n      ( 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span> ) );\n \n    form.FormBorderStyle\n      = <span class=\"teal\">FormBorderStyle</span>.SizableToolWindow;\n \n    System.Windows.Forms.<span class=\"teal\">TextBox</span> tb\n      = <span class=\"blue\">new</span> System.Windows.Forms.<span class=\"teal\">TextBox</span>();\n \n    tb.Dock = System.Windows.Forms.<span class=\"teal\">DockStyle</span>.Fill;\n    tb.Location = <span class=\"blue\">new</span> System.Drawing.<span class=\"teal\">Point</span>( 0, 0 );\n    tb.Multiline = <span class=\"blue\">true</span>;\n    tb.TabIndex = 0;\n    tb.WordWrap = <span class=\"blue\">false</span>;\n    tb.ReadOnly = <span class=\"blue\">true</span>;\n \n    tb.Text = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\"\\r\\n\"</span>,\n      lister.CommandClassnames );\n \n    tb.Tag = lister;\n \n    tb.DoubleClick += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>(\n      OnDoubleClick );\n \n    form.Controls.Add( tb );\n \n    form.ShowDialog( owner );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">IWin32Window</span> revit_window\n      = <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>(\n        <span class=\"teal\">ComponentManager</span>.ApplicationWindow );\n \n    <span class=\"blue\">string</span> filename;\n \n    <span class=\"blue\">while</span>( FileSelect(\n      _assembly_folder_name,\n      <span class=\"blue\">out</span> filename ) )\n    {\n      DisplayExternalCommands( filename,\n        revit_window, commandData );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "0953_reload_debug_cmd",
    "header_text": "Summary and Download",
    "local_header_href": "#summary-and-download",
    "chunk_text": "<h4>Summary and Download</h4><p>One very neat benefit of this approach is that it almost completely replaces the functionality provided by RvtSamples, in that any simple external command can be immediately launched and debugged.\nIt is obviously also much more flexible, 100% totally flexible, in fact.\nI cannot think of any way to make it more so.</p><p>The only remaining advantage of RvtSamples is basically its very inflexibility, the fact that it provides a neat user interface with a static overview of all available samples, plus optional additional add-ins that you specify yourself using include files or by editing and adding new entries to RvtSamples.txt itself.\nYou thus see what you have at your disposal, whereas the flexible new loader requires to to know it in advance yourself.</p><p>Come to think of it, this is probably exactly what the AddInManager does as well to enable reloading and re-debugging of already loaded add-ins without restarting Revit and regenerating the RVT project file.</p><p>Here is <a href=\"zip/JtExternalCommandLister2.zip\">JtExternalCommandLister2.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest of the updated version 2014.0.0.2 of this external command.</p><p>I hope you find this useful, instructive and inspiring.</p>"
  }
]