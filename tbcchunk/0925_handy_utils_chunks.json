[
  {
    "original_filename": "0925_handy_utils",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0925_handy_utils",
    "header_text": "Handy Utility Classes",
    "local_header_href": "#handy-utility-classes",
    "chunk_text": "<h3>Handy Utility Classes</h3><p>Rudolf Honke of\n\n<a href=\"http://www.acadgraph.de\">\nMensch und Maschine acadGraph GmbH</a> has\n\nrepeatedly encouraged me to raise awareness of the numerous utility classes available in the Revit API and now provided the following starting point for a discussion of them.</p><p>One way to find a number of utility classes is to search the Revit API help file RevitAPI.chm for the string \"utils\":</p><center>\n<img alt=\"Revit API utility classes\" src=\"img/util_classes_1.png\"/>\n</center><p>In general, these classes provide static methods that can be called from any valid context with no need for an object instance.\n\n<p>One of the better-known examples is the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/built-in-parameter-name-and-labelutils.html\">\nLabelUtils class</a> that\n\nreturns localised display strings for built-in parameters and unit types:</p>\n<center>\n<img alt=\"LabelUtils methods\" src=\"img/util_classes_2.png\"/>\n</center>\n<p>By the way, Rudolf misses a method for built-in categories in this class...\n\n<p>If might be possible to implement some of these methods yourself, but using the utility methods obviously saves effort and duplication of code.</p>\n<p>Another utility class that has been mentioned here in the past is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/wall-joins-and-geometry.html\">WallUtils</a>.</p>\n<p>It is important to be aware of their existence, or at least know where to look for them.</p>\n<p>They are mostly quite well described in the help file, and yet many developers fail to notice them.\nAs said, sometimes you can get around using them, albeit with more effort on your own part.</p>\n<p>For example, you can retrieve the element id of a referenced document using an appropriate element filter, or, much more simply, via the ExternalFileUtils GetAllExternalFileReferences method.\n\n<p>On the other hand, some things cannot be achieved except by using these methods.</p>\n<p>For instance, after placing a couple of detail instances, their display order and visibility can be modified using the DetailElementOrderUtils class methods BringToFront, BringForward, SendBackward oder SendToBack.\n\n<p>Here is an occurrence count of the string \"utils\" in the different versions of the help file, showing the growth of this group of methods:\n\n<ul>\n<li>2011: 43</li>\n<li>2012: 265</li>\n<li>2013: 405</li>\n<li>2014: 455</li>\n</ul>\n<p>I hope this whets your appetite and look forward to hearing about more examples of unexpected and powerful uses of these methods.</p>\n</p></p></p></p></p>"
  }
]