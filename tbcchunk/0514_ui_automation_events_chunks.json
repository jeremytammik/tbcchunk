[
  {
    "original_filename": "0514_ui_automation_events",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0514_ui_automation_events",
    "header_text": "Subscribing to UI Automation Events",
    "local_header_href": "#subscribing-to-ui-automation-events",
    "chunk_text": "<h3>Subscribing to UI Automation Events</h3><p>Rudolf Honke of\n\n<a href=\"http://www.acadgraph.de\">\nacadGraph CADstudio GmbH</a> recently \n\npresented his results of exploring the Revit ribbon internals using UISpy and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/ribbon-spying-and-ui-automation.html\">\ndriving Revit using UI Automation</a>.\n\n<p>He sent an additional note to point out that this rapidly leads to many other very interesting possibilities, such as the following:\n \n<p><a href=\"http://msdn.microsoft.com/en-us/library/ms752286.aspx\">\nSubscribing to UI Automation events</a> could\n\neasily enable an application to be notified whenever a user...\n\n<ul>\n<li>Creates a new Wall, Room, etc.\n<li>Picks into the property list\n<li>Hits the ribbon bar\n<li>Is about to open or save a Revit file (okay, this could possibly be achieved better in another way...)\n<li>Resizes the Revit app window\n<li>And so on ...\n</li></li></li></li></li></li></ul>\n<p>The events could be handled using a stand-alone application or a Revit add-in, registering the listener in the Revit external application OnStartup method...\n\n<p>Thinking about using it with the OnStartup method, I remember the fact that some parts of the Revit UI may not be generated completely at this time.\nIn this method, you usually create your buttons, so the ribbon bar may be in rebuilding process.\nAlso, the ribbon bar could be invisible or disabled if there is no opened project file.\n \n<p>Some time ago, I developed some functions to check the ribbon bar state before pressing any tab header or button.\nOne of these functions maximizes the ribbon bar if it is minimized.\n \n<p>By the way, if you just want to be notified if the app window is resized or moved, you could also use a BackgroundWorker which checks the Window.Size ten times a second.\nUsing old (but fast) Windows API methods via P/Invoke, this \"polling\" can be done with up to 50 Hz or more â€“ ups, another theme for posting...\n \n<p>Hey, you could combine the notifyMeIfRoomIsToBeCreated listener with an OnDocumentOpened event, so the 'Create Room' button must be accessible (but you would have to check whether it is a family document)...\n\n<p>Anyway, just think of the possibilities this can offer!\n\n<p>A number of these features have actually been requested in the past, and nobody provided the UI Automation expertise to answer them ... until now.\n\n<p>Once again, many thanks to Rudolf for his many ideas and these valuable pointers!\n</p></p></p></p></p></p></p></p></p></p></p>"
  }
]