[
  {
    "original_filename": "1286_automation",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1286_automation",
    "header_text": "UI Automation, Ribbon Panel Item Access, the ItemExecuted Event and Vacation",
    "local_header_href": "#ui-automation-ribbon-panel-item-access-the-itemexecuted-event-and-vacation",
    "chunk_text": "<h3>UI Automation, Ribbon Panel Item Access, the ItemExecuted Event and Vacation</h3><p>Here is an interesting exploration of using UI Automation to traverse the Revit ribbon items and subscribe to an event enabling you to determine when certain commands are executed.</p><p>I'll leave you to ponder this while I take a vacation in the snow next week.</p><p>Happy Revit add-in programming!</p><center>\n<img alt=\"Wildhaus and the Schafberg\" src=\"file:////j/photo/jeremy/2013/2013-12-31_wildhaus/267_cropped.png\" width=\"300\"/>\n</center><p><strong>Question:</strong>\n\nI would like to keep track of all add-ins that are started on a given Revit  installation.\nWe currently keep track of all our own using specific routines in the add-ins.\nBut is there a way to keep track of the add-ins that we did not create ourselves?\nLike an event that fires after finishing or before starting?\nI guess we could look in the journals, but is there a simpler way?</p><p><strong>Answer:</strong>\n\nJust as you say and do yourself, keeping track of add-in activity requires special instrumentation, either in the add-in itself or somewhere within Revit.</p><p>My first impulse when I started reading your query was to suggest using the journal file, which does exactly what you wish. In the end, you mention it yourself.</p><p>I cannot really think of any better method and have heard now and then that various applications do indeed make use of the journal file for these kind of tracking activities.</p><p><strong>Response:</strong>\n\nI implemented a journal file scanner and it has been running for some time now, but the results are not reliable because they depend on the users keeping their journal files.</p><p>I would like something a little more robust.\nTherefore I turn to the add-in command binding.\nIs there a way to bind to external commands?\nAnd if so: how can I find the correct ID for the external command?</p><p>I figured that I can map all the registered commands when Revit has initialized and subscribe to the .BeforeExecute event of them to log when they are used.</p><p><strong>Answer:</strong>\n\nThat sounds like a brilliant idea!</p><p>Yes, of course you can determine the ID for external commands, and here is a dedicated blog post on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/programmatic-custom-add-in-external-command-launch.html\">launching a custom add-in command</a>.</p><p>Please let us know whether that provides what you need.</p><p>I think that your requirement and your idea for addressing it are definitely of general interest to the community and generic enough to warrant a blog post, so I would love to implement and publish this, if that is OK, assuming it works.</p><p><strong>Response:</strong>\n\nOK, well that's good.</p><p>I read through your blog post.</p><p>Very good, some follow-ups:</p><ol>\n<li>For this, I need to know the ribbon panel tab name for the external commands.\nI have not yet found a way to get that for ones I have not created myself.\nIs this possible through the API?</li>\n<li>The name string is generated by the sequence of controls that one has to navigate to the control, and your string represents tab &gt; panel &gt; button.\nWhat scenarios could we encounter?\nA pull-down button would give us one more step, right?\nAnything else you can think of?</li>\n</ol><p>Later...</p><p>I've been exploring the workflow suggested by Scott Wilson in one of your\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/ribbon\">\nblog posts on ribbons</a>.</p><p>I only have one question: where does one get the Autodesk.Window namespace?\nIt's not in any of the standard API-references or is it something I have not seen yet?</p><p>Later...</p><p>I found it: looked at your\n\n<a href=\"https://github.com/jeremytammik/ModifyTabButton\">ModifyTabButton</a> on GitHub.\n\nIt's in the AdWindows.dll assembly.</p><p>All right, back to the digging!</p><p><strong>Answer:</strong>\n\nCongratulations on making rapid progress.</p><p>To answer your questions:</p><p>1. Yes, you can get all the tab names by iterating through the panels and their tabs, I think.</p><p>Look at the UIApplication.GetRibbonPanels method, start from there, and research what other objects you can traverse from that staring point.</p><p>You may even be able to look through them using RevitLookup.</p><p>Or, if not, you may be able to add that missing functionality to it yourself  :-)</p><p>2. I really don't know off-hand. Please find out and let us know  :-)</p><p><strong>Response:</strong>\n\nI'm on fire today!</p><p>Seems like you've (or your blog) led me to the Holy Grail (or Pandora's Box):</p><p>The AdWindow.dll!</p><p>This contains a lot of extremely useful stuff for exploring the UI further; I can't believe I didn't look in a little deeper into this before.</p><p>I managed to find all the things I needed to get my AddinCommandBinding: Ids for all the user added external commands, what tab they are on and so on. However the dead-end was when I found that I could not create an AddinCommandBinding for them (maybe I need to do it during start-up? But then again why does the method exist in the UIApplication class?)</p><p>Anyway, so I went digging further inside the AdWindows.dll and found that the RibbonButton class has two useful events MouseEnter and MouseLeave.\nI could then store what button had the mouse over it and use that in combination with a mouse click event to capture what button was clicked.\nSo I just plainly googled for click, but then started looking for click events inside the AdWindow.\nCouldn't find any useful events so I tried to think of how the events are named in the API.</p><p>'Execute' is the word you guys use for a lot of events.\nSo I searched AdWindow for 'Execute' and found this event:</p><p>Autodesk.Windows.ComponentManager.ItemExecuted</p><p>Which is just spot on what I wanted – it fires every time a ribbon item is executed.</p><p>I just create a list of what buttons I want to monitor by iterating over the tabs using this:</p><pre>\n  foreach(Autodesk.Windows.RibbonTab tab\n    in Autodesk.Windows.ComponentManager.Ribbon.Tabs)\n  {\n    if (tab.KeyTip != null)\n      continue;\n\n    foreach(var panel in tab.Panels)\n    {\n      foreach(var item in panel.Source.Items)\n      {\n</pre><p>The KeyTip property is my way (didn't find any other) to figure out if the tab is user-created or not.</p><p>Problem solved!</p><p>I'm gonna test this for a while to see if performs well.</p><p>Have a nice day!</p><p><strong>Answer:</strong>\n\nThank you very much for your research and enthusiasm.</p><p>Rudolf Honke has published lots of interesting results making use of the not-officially-supported AdWindow.dll in conjunction with the officially supported Revit API functionality. They are grouped under\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/automation\">\nThe Building Coder category Automation</a>.</p><p>You might also simply want to take a look at the results of searching for 'Rudolf Honke' on the blog.</p><p>I implemented a new external command named CmdItemExecuted in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a>\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.118.0\">version 2015.0.118.0</a> to\n\ncapture the gist of this discussion:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Windows;\n<span class=\"blue\">#endregion</span> <span class=\"green\">// Namespaces</span>\n \n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdItemExecuted</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> _subscribed = <span class=\"blue\">false</span>;\n \n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> OnItemExecuted(\n    <span class=\"blue\">object</span> sender,\n    Autodesk.Internal.Windows\n      .<span class=\"teal\">RibbonItemExecutedEventArgs</span> e )\n  {\n    <span class=\"blue\">string</span> s = ( <span class=\"blue\">null</span> == sender )\n      ? <span class=\"maroon\">\"&lt;nul&gt;\"</span>\n      : sender.ToString();\n \n    Autodesk.Windows.<span class=\"teal\">RibbonItem</span> parent = e.Parent;\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"OnItemExecuted: {0} '{1}' in '{2}' cookie {3}\"</span>,\n      s, parent.AutomationName,\n      e.Item.AutomationName, e.Item.Cookie );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"blue\">if</span>( _subscribed )\n    {\n      Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.ItemExecuted\n        -= OnItemExecuted;\n \n      _subscribed = <span class=\"blue\">false</span>;\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">RibbonTabCollection</span> tabs\n        = <span class=\"teal\">ComponentManager</span>.Ribbon.Tabs;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">RibbonTab</span> tab <span class=\"blue\">in</span> tabs )\n      {\n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0} {1} '{2}'\"</span>, tab,\n          tab.GetType().Name, tab.AutomationName );\n \n        <span class=\"blue\">if</span>( tab.KeyTip == <span class=\"blue\">null</span> )\n        {\n          <span class=\"green\">// This tab is user defined.</span>\n \n          <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> panel <span class=\"blue\">in</span> tab.Panels )\n          {\n            <span class=\"green\">// Cannot convert type 'Autodesk.Windows.RibbonPanel' </span>\n            <span class=\"green\">// to 'Autodesk.Revit.UI.RibbonPanel' via a reference </span>\n            <span class=\"green\">// conversion, boxing conversion, unboxing conversion, </span>\n            <span class=\"green\">// wrapping conversion, or null type conversion.</span>\n            <span class=\"green\">//</span>\n            <span class=\"green\">//Autodesk.Revit.UI.RibbonPanel rp </span>\n            <span class=\"green\">//  = panel as Autodesk.Revit.UI.RibbonPanel;</span>\n \n            Autodesk.Windows.<span class=\"teal\">RibbonPanel</span> rp\n              = panel <span class=\"blue\">as</span> Autodesk.Windows.<span class=\"teal\">RibbonPanel</span>;\n \n            <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"    {0} {1}\"</span>,\n              panel.ToString(), panel.GetType().Name );\n \n            <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> item <span class=\"blue\">in</span> panel.Source.Items )\n            {\n              Autodesk.Windows.<span class=\"teal\">RibbonItem</span> ri = item\n                <span class=\"blue\">as</span> Autodesk.Windows.<span class=\"teal\">RibbonItem</span>;\n \n              <span class=\"blue\">string</span> automationName = ri.AutomationName;\n \n              <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"      {0} {1} '{2}' {3}\"</span>,\n                item.ToString(), item.GetType().Name,\n                automationName, ri.Cookie );\n            }\n          }\n        }\n      }\n \n      Autodesk.Windows.<span class=\"teal\">ComponentManager</span>.ItemExecuted\n        += OnItemExecuted;\n \n      _subscribed = <span class=\"blue\">true</span>;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><p>Here is a sample log from the Visual Studio debug output console after running this code – copy and paste to an editor to see the truncated lines in full:</p><pre>\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Architecture'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Structure'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Systems'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Insert'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Annotate'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Analyze'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Massing &amp; Site'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Collaborate'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'View'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Manage'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Create'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Insert'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Annotate'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'View'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Manage'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Add-Ins'\n  Autodesk.Windows.RibbonTab RibbonTab 'Ribbon Sampler'\n    Autodesk.Windows.RibbonPanel RibbonPanel\n      Autodesk.Windows.RibbonButton RibbonButton 'Hello World' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%PushButtonHello_Hello World_\n      Autodesk.Windows.RibbonSplitButton RibbonSplitButton 'Command Data' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%SplitButton_Split Button_\n      Autodesk.Windows.RibbonSplitButton RibbonSplitButton 'Pulldown' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%PulldownButton_Pulldown_\n      UIFramework.RvtRibbonCombo RvtRibbonCombo '' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%ComboBox__\n      Autodesk.Windows.RibbonRowPanel RibbonRowPanel '' Item=__\n      Autodesk.Windows.RibbonPanelBreak RibbonPanelBreak '' Item=__\n      Autodesk.Windows.RibbonRadioButtonGroup RibbonRadioButtonGroup 'Command\n Data' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%RadioButton__\n      Autodesk.Windows.RibbonTextBox RibbonTextBox '' Item=CustomCtrl_%CustomCtrl_%Ribbon Sampler%Ribbon Sampler%Text Box__\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Modify'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Modify'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'In-Place Model'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'In-Place Mass'\n  UIFramework.RvtRibbonTab RvtRibbonTab 'Family Editor'\nOnItemExecuted: 'ADN Bc A-I' in 'Item Executed and List Command Buttons' cookie Item=CustomCtrl_%CustomCtrl_%CustomCtrl_%Add-Ins%RvtSamples%ADN Bc A-I%Item Executed and List Command Buttons_Item Executed and List Command Buttons_\nOnItemExecuted: 'Basics' in 'About Revit' cookie Item=CustomCtrl_%CustomCtrl_%CustomCtrl_%Add-Ins%RvtSamples%Basics%About Revit_About Revit_\nOnItemExecuted: 'Basics' in 'Hello Revit (CS)' cookie Item=CustomCtrl_%CustomCtrl_%CustomCtrl_%Add-Ins%RvtSamples%Basics%Hello Revit (CS)_Hello Revit (CS)_\nOnItemExecuted: 'Basics' in 'Hello Revit (VB)' cookie Item=CustomCtrl_%CustomCtrl_%CustomCtrl_%Add-Ins%RvtSamples%Basics%Hello Revit (VB)_Hello Revit (VB)_\n</pre>"
  }
]