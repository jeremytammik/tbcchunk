[
  {
    "original_filename": "1319_compatibility",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<!-- <script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>-->\n<style type=\"text/css\">p.en { font-style: italic; }</style>\n</head>"
  },
  {
    "original_filename": "1319_compatibility",
    "header_text": "Compatibilizar entre versões – API Compatibility Helper",
    "local_header_href": "#compatibilizar-entre-versões-api-compatibility-helper",
    "chunk_text": "<h3>Compatibilizar entre versões – API Compatibility Helper</h3><p>Once again, the time has come to migrate add-ins to the new version of the Revit API.</p><p>Magson Leone in Brazil has been through this process every year now since Revit 2012 and got tired of maintaining separate versions of his code for each release of Revit.</p><p>He solved the problem by using Reflection to implement a whole host of Revit API compatibility helper methods that reroute the call to the proper underlying API method for any Revit API version.</p><p>In Magson's own words, interspersed with my spontaneous (and first ever!) translation from Portuguese:</p><p>Eu sou um programador brasileiro e tenho acompanhado com bastante frequência o material de excelente qualidade que você tem postado em seu blog.\nE por isto que quero te parabenizar pelo seu excelente trabalho.</p><p class=\"en\">I am a Brazilian programmer and frequently follow the high quality material you post on your blog.\nI would like to thank you for your excellent work.</p><p>Eu quero expor neste email uma sugestão de postagem sobre um assunto que eu não sei se você já postou, mas que é bastante interessante.\nÉ sobre compatibilizar o código fonte com as varias versões do Revit.</p><p class=\"en\">I would like to suggest a topic that I find very interesting and you may already have touched on, to support source code compatibility between different versions of Revit.</p><p>Eu trabalho com a API do revit desde a versão 2012 e todo ano eu faço uma copia do código fonte de cada plugin e o ajusto para a versão atual.\nMas com o passar dos anos a quantidade de copias vai aumentando e sempre que um ajuste se torna necessário em um plugin eu preciso replicar estas mudanças em todas as copias do código fonte.\nE isto além de ser um pouco trabalhoso as vezes tem o problema de eu esquecer uma coisa ou outra, o que acaba gerando alguns bugs em uma versão ou outra.\nEntão recentemente eu decidi trabalhar com Reflexão para uma unica versão do código fonte compatível com todas a versões do revit desde a versão 2012.\nEu vou citar como exemplo o método Document.GetElement(); este método anteriormente era Document.get_Element(); então eu pensei: porque ao invés de eu criar uma cópia do codigo fonte eu não faço um método via reflexão que me possibilita os dois casos no mesmo codígo fonte?</p><p class=\"en\">I have been working with Revit since the version 2012.\nEvery year, I am forced to copy every add-in's source code and adapt it for the new version.\nThe number of copies continues to increase as the year go by.\nIt is getting painful to maintain.\nTherefore I recently decided to use Reflection to implement one single source code version compatible with all versions of the Revit API since 2012.\nFor example, let's look at the Document.GetElement method; it was previously named get_Element; so I thought: why not use reflection to implement code supporting both names for both cases?</p><p>Segue abaixo o metodo que cria usando Reflexão:</p><p class=\"en\">Here is the method I created using Reflection:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span> PegarElemento(\n    <span class=\"blue\">this</span> <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">ElementId</span> id )\n  {\n    <span class=\"teal\">Element</span> ele = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Two different Revit versions:</span>\n    <span class=\"green\">//ele = doc.get_Element(id);</span>\n    <span class=\"green\">//ele = doc.GetElement(id);</span>\n \n    <span class=\"teal\">MethodInfo</span> met = doc.GetType().GetMethod(\n      <span class=\"maroon\">\"get_Element\"</span>,\n      <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">ElementId</span> ) } );\n \n    <span class=\"blue\">if</span>( met == <span class=\"blue\">null</span> )\n    {\n      met = doc.GetType().GetMethod( <span class=\"maroon\">\"GetElement\"</span>,\n        <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">ElementId</span> ) } );\n    }\n \n    ele = met.Invoke( doc, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { id } )\n      <span class=\"blue\">as</span> <span class=\"teal\">Element</span>;\n \n    <span class=\"blue\">return</span> ele;\n  }\n</pre><p>Em acesso anexo eu estou te enviando um arquivo .cs contendo vários métodos extensões que eu criei para usar nos meus plugins afim de torna-los compatíveis com todos as versões do revit desde a versão 2012.</p><p class=\"en\">Here is my module <a href=\"zip/ml_correção_revit.cs\">correção_revit.cs</a> containing various extension methods that I use in my add-ins to make them compatible with all versions of Revit since 2012.</p><p>I started integrating Magson's code into The Building Coder samples for easier access, sharing and to ensure that everything compiles correctly.</p><p>This turned up a couple of issues that Magson very kindly corrected:</p><p>First, the use of a global variable <code>g</code>, and excessive line lengths for publishing on the blog, which allows a maximum of about 55 characters.</p><p><strong>Magson responded:</strong> Vou fazer as correções que você sugeriu e além disso eu vou traduzir o nome de cada método para o idioma inglês, já que esta é a linguagem padrão da API. Assim que eu fizer estes ajustes eu te retorno.</p><p>Fiz os ajustes que você solicitou e traduzi a nomenclatura dos metodos para o idioma inglês.\nPara evitar que os métodos entrem em conflito com os métodos já existentes na API do Revit eu acrescentei o número do dois ao final do nome de cada método. Eu também agrupei os métodos de acordo com as classes que eles estão estendendo. Quanto a postagem eu acho que ficou muito boa, precisando apenas substituir a parte do código pelo novo código.</p><p class=\"en\">I'll add these changes and translate the method names to English, since it is the Revit API language anyway.\nI also appended a suffix <b>2</b> to each method name in order to avoid conflicts with existing Revit API ones, and grouped the extension methods by the Revit API classes they extend.</p><p><strong>Answer:</strong> Thank you very much for the update.\nHowever...</p><p>I have a critical note on new method implementations, in which you added exception handlers catching all exceptions.</p><p>You should never catch all exceptions, as explained by these discussions on\n<a href=\"http://stackoverflow.com/questions/315948/c-catching-all-exceptions\">C# catching all exceptions</a> and\n<a href=\"http://blogs.msdn.com/b/dotnet/archive/2009/02/19/why-catch-exception-empty-catch-is-bad.aspx\">\nwhy <code>catch(Exception)</code> and empty <code>catch</code> is bad</a>.</p><p>Therefore, something like this is not a good idea:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> curve\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">XYZ</span> GetPoint2(\n  <span class=\"blue\">this</span> <span class=\"teal\">Curve</span> curva,\n  <span class=\"blue\">int</span> i )\n{\n  <span class=\"teal\">XYZ</span> value = <span class=\"blue\">null</span>;\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">MethodInfo</span> met = curva.GetType().GetMethod(\n      <span class=\"maroon\">\"GetEndPoint\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"blue\">int</span> ) } );\n \n    <span class=\"blue\">if</span>( met == <span class=\"blue\">null</span> )\n    {\n      met = curva.GetType().GetMethod( <span class=\"maroon\">\"get_EndPoint\"</span>,\n        <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"blue\">int</span> ) } );\n    }\n    value = met.Invoke( curva, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { i } )\n      <span class=\"blue\">as</span> <span class=\"teal\">XYZ</span>;\n  }\n  <span class=\"blue\">catch</span> { }\n  <span class=\"blue\">return</span> value;\n}\n<span class=\"blue\">#endregion</span> <span class=\"green\">// curve</span>\n</pre><p>Would you like to remove the exception handlers again?</p><p>In general, you should not add exception handlers at all unless you really expect an exception to occur.</p><p>Are you expecting exceptions in all these methods?</p><p>I think the initial version without them was better.</p><p>If you see a need for them, then I would suggest catching the specific exception that you are expecting to occur.</p><p><strong>Response:</strong>\n\nMuito obrigado Jeremy pelas suas criticas e sugestões.\nÉ a primeira vez que estou compartilhando um código de autoria minha, e por isto preciso muito da sua orientação.\nSe houver qualquer uma outra sugestão ou crítica, por favor me fale para que eu possa melhorar o código.\nEstou te enviando novamente o arquivo. Eu fiz uma correção no nome das regiões.</p><p class=\"en\">Thank you for the suggestions.\nThis is the first time I share my code like this, so I am happy for some guidance.\nHere is the updated code with corrected region names.</p><p>The final resulting code defining all the compatibility methods needed by Magson now looks like this:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> These compatibility helper methods make use of </span>\n<span class=\"gray\">///</span><span class=\"green\"> Reflection to determine which Revit method is</span>\n<span class=\"gray\">///</span><span class=\"green\"> available and call that. You can use these </span>\n<span class=\"gray\">///</span><span class=\"green\"> methods to create an add-in that is compatible </span>\n<span class=\"gray\">///</span><span class=\"green\"> across all versions of Revit from 2012 to 2016.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">CompatibilityMethods</span>\n{\n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.Curve\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">XYZ</span> GetPoint2(\n    <span class=\"blue\">this</span> <span class=\"teal\">Curve</span> curva,\n    <span class=\"blue\">int</span> i )\n  {\n    <span class=\"teal\">XYZ</span> value = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">MethodInfo</span> met = curva.GetType().GetMethod(\n      <span class=\"maroon\">\"GetEndPoint\"</span>,\n      <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"blue\">int</span> ) } );\n \n    <span class=\"blue\">if</span>( met == <span class=\"blue\">null</span> )\n    {\n      met = curva.GetType().GetMethod(\n        <span class=\"maroon\">\"get_EndPoint\"</span>,\n        <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"blue\">int</span> ) } );\n    }\n \n    value = met.Invoke( curva, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { i } )\n      <span class=\"blue\">as</span> <span class=\"teal\">XYZ</span>;\n \n    <span class=\"blue\">return</span> value;\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.Curve</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.Definitions\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Definition</span> Create2(\n    <span class=\"blue\">this</span> <span class=\"teal\">Definitions</span> definitions,\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"blue\">string</span> nome,\n    <span class=\"teal\">ParameterType</span> tipo,\n    <span class=\"blue\">bool</span> visibilidade )\n  {\n    <span class=\"teal\">Definition</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; ls = doc.GetType().Assembly\n    .GetTypes().Where( a =&gt; a.IsClass &amp;&amp; a\n    .Name == <span class=\"maroon\">\"ExternalDefinitonCreationOptions\"</span> ).ToList();\n    <span class=\"blue\">if</span>( ls.Count &gt; 0 )\n    {\n      <span class=\"teal\">Type</span> t = ls[0];\n      <span class=\"teal\">ConstructorInfo</span> c = t\n      .GetConstructor( <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>(<span class=\"blue\">string</span>),\n                <span class=\"blue\">typeof</span>(<span class=\"teal\">ParameterType</span>) } );\n      <span class=\"blue\">object</span> ed = c\n      .Invoke( <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { nome, tipo } );\n      ed.GetType().GetProperty( <span class=\"maroon\">\"Visible\"</span> )\n      .SetValue( ed, visibilidade, <span class=\"blue\">null</span> );\n      value = definitions.GetType()\n      .GetMethod( <span class=\"maroon\">\"Create\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { t } ).Invoke( definitions,\n        <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { ed } ) <span class=\"blue\">as</span> <span class=\"teal\">Definition</span>;\n    }\n    <span class=\"blue\">else</span>\n    {\n      value = definitions.GetType()\n      .GetMethod( <span class=\"maroon\">\"Create\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>(<span class=\"blue\">string</span>),\n                <span class=\"blue\">typeof</span>(<span class=\"teal\">ParameterType</span>), <span class=\"blue\">typeof</span>(<span class=\"blue\">bool</span>) } ).Invoke( definitions,\n        <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { nome, tipo,\n                visibilidade } ) <span class=\"blue\">as</span> <span class=\"teal\">Definition</span>;\n    }\n    <span class=\"blue\">return</span> value;\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.Definitions</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.Document\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span> GetElement2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span>\n  doc, <span class=\"teal\">ElementId</span> id )\n  {\n    <span class=\"teal\">Element</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">MethodInfo</span> met = doc.GetType()\n    .GetMethod( <span class=\"maroon\">\"get_Element\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">ElementId</span> ) } );\n    <span class=\"blue\">if</span>( met == <span class=\"blue\">null</span> )\n      met = doc.GetType()\n      .GetMethod( <span class=\"maroon\">\"GetElement\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">ElementId</span> ) } );\n    value = met.Invoke( doc,\n      <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { id } ) <span class=\"blue\">as</span> <span class=\"teal\">Element</span>;\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span> GetElement2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span>\n  doc, <span class=\"teal\">Reference</span> refe )\n  {\n    <span class=\"teal\">Element</span> value = <span class=\"blue\">null</span>;\n    value = doc.GetElement( refe );\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Line</span> CreateLine2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">XYZ</span> p1, <span class=\"teal\">XYZ</span> p2, <span class=\"blue\">bool</span> bound = <span class=\"blue\">true</span> )\n  {\n    <span class=\"teal\">Line</span> value = <span class=\"blue\">null</span>;\n    <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { p1,\n            p2 };\n    <span class=\"teal\">Type</span>[] tipos = parametros.Select( a =&gt; a\n    .GetType() ).ToArray();\n    <span class=\"blue\">string</span> metodo = <span class=\"maroon\">\"CreateBound\"</span>;\n    <span class=\"blue\">if</span>( bound == <span class=\"blue\">false</span> ) metodo =\n      <span class=\"maroon\">\"CreateUnbound\"</span>;\n    <span class=\"teal\">MethodInfo</span> met = <span class=\"blue\">typeof</span>( <span class=\"teal\">Line</span> )\n    .GetMethod( metodo, tipos );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      value = met.Invoke( <span class=\"blue\">null</span>,\n        parametros ) <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n    }\n    <span class=\"blue\">else</span>\n    {\n      parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { p1, p2,\n                bound };\n      tipos = parametros.Select( a =&gt; a\n      .GetType() ).ToArray();\n      value = doc.Application.Create\n      .GetType().GetMethod( <span class=\"maroon\">\"NewLine\"</span>, tipos ).Invoke( doc\n      .Application.Create, parametros ) <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Wall</span> CreateWall2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">Curve</span> curve, <span class=\"teal\">ElementId</span> wallTypeId,\n    <span class=\"teal\">ElementId</span> levelId, <span class=\"blue\">double</span> height, <span class=\"blue\">double</span> offset, <span class=\"blue\">bool</span> flip,\n    <span class=\"blue\">bool</span> structural )\n  {\n    <span class=\"teal\">Wall</span> value = <span class=\"blue\">null</span>;\n    <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { doc,\n            curve, wallTypeId, levelId, height, offset, flip,\n            structural };\n    <span class=\"teal\">Type</span>[] tipos = parametros.Select( a =&gt; a\n    .GetType() ).ToArray();\n    <span class=\"teal\">MethodInfo</span> met = <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> )\n    .GetMethod( <span class=\"maroon\">\"Create\"</span>, tipos );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      value = met.Invoke( <span class=\"blue\">null</span>,\n        parametros ) <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n    }\n    <span class=\"blue\">else</span>\n    {\n      parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { curve,\n                (<span class=\"teal\">WallType</span>)doc.GetElement2(wallTypeId), (<span class=\"teal\">Level</span>)doc\n              .GetElement2(levelId), height, offset, flip,\n                structural };\n      tipos = parametros.Select( a =&gt; a\n      .GetType() ).ToArray();\n      value = doc.Create.GetType()\n      .GetMethod( <span class=\"maroon\">\"NewWall\"</span>, tipos ).Invoke( doc.Create,\n        parametros ) <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Arc</span> CreateArc2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">XYZ</span> p1, <span class=\"teal\">XYZ</span> p2, <span class=\"teal\">XYZ</span> p3 )\n  {\n    <span class=\"teal\">Arc</span> value = <span class=\"blue\">null</span>;\n    <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { p1,\n            p2, p3 };\n    <span class=\"teal\">Type</span>[] tipos = parametros.Select( a =&gt; a\n    .GetType() ).ToArray();\n    <span class=\"blue\">string</span> metodo = <span class=\"maroon\">\"Create\"</span>;\n    <span class=\"teal\">MethodInfo</span> met = <span class=\"blue\">typeof</span>( <span class=\"teal\">Arc</span> )\n    .GetMethod( metodo, tipos );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      value = met.Invoke( <span class=\"blue\">null</span>,\n        parametros ) <span class=\"blue\">as</span> <span class=\"teal\">Arc</span>;\n    }\n    <span class=\"blue\">else</span>\n    {\n      value = doc.Application.Create\n      .GetType().GetMethod( <span class=\"maroon\">\"NewArc\"</span>, tipos ).Invoke( doc\n      .Application.Create, parametros ) <span class=\"blue\">as</span> <span class=\"teal\">Arc</span>;\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">char</span> GetDecimalSymbol2( <span class=\"blue\">this</span>\n  <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"blue\">char</span> valor = <span class=\"maroon\">','</span>;\n    <span class=\"teal\">MethodInfo</span> met = doc.GetType()\n    .GetMethod( <span class=\"maroon\">\"GetUnits\"</span> );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">object</span> temp = met.Invoke( doc, <span class=\"blue\">null</span> );\n      <span class=\"teal\">PropertyInfo</span> prop = temp.GetType()\n      .GetProperty( <span class=\"maroon\">\"DecimalSymbol\"</span> );\n      <span class=\"blue\">object</span> o = prop.GetValue( temp, <span class=\"blue\">null</span> );\n      <span class=\"blue\">if</span>( o.ToString() == <span class=\"maroon\">\"Comma\"</span> )\n        valor = <span class=\"maroon\">','</span>;\n      <span class=\"blue\">else</span>\n        valor = <span class=\"maroon\">'.'</span>;\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">object</span> temp = doc.GetType()\n      .GetProperty( <span class=\"maroon\">\"ProjectUnit\"</span> ).GetValue( doc, <span class=\"blue\">null</span> );\n      <span class=\"teal\">PropertyInfo</span> prop = temp.GetType()\n      .GetProperty( <span class=\"maroon\">\"DecimalSymbolType\"</span> );\n      <span class=\"blue\">object</span> o = prop.GetValue( temp, <span class=\"blue\">null</span> );\n      <span class=\"blue\">if</span>( o.ToString() == <span class=\"maroon\">\"DST_COMMA\"</span> )\n        valor = <span class=\"maroon\">','</span>;\n      <span class=\"blue\">else</span>\n        valor = <span class=\"maroon\">'.'</span>;\n    }\n    <span class=\"blue\">return</span> valor;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> UnjoinGeometry2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span>\n  doc, <span class=\"teal\">Element</span> firstElement, <span class=\"teal\">Element</span> secondElement )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; ls = doc.GetType().Assembly\n    .GetTypes().Where( a =&gt; a.IsClass &amp;&amp; a\n    .Name == <span class=\"maroon\">\"JoinGeometryUtils\"</span> ).ToList();\n    <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { doc,\n            firstElement, secondElement };\n    <span class=\"teal\">Type</span>[] tipos = parametros.Select( a =&gt; a\n    .GetType() ).ToArray();\n    <span class=\"blue\">if</span>( ls.Count &gt; 0 )\n    {\n      <span class=\"teal\">Type</span> t = ls[0];\n      <span class=\"teal\">MethodInfo</span> met = t\n      .GetMethod( <span class=\"maroon\">\"UnjoinGeometry\"</span>, tipos );\n      met.Invoke( <span class=\"blue\">null</span>, parametros );\n    }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> JoinGeometry2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span>\n  doc, <span class=\"teal\">Element</span> firstElement, <span class=\"teal\">Element</span> secondElement )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; ls = doc.GetType().Assembly\n    .GetTypes().Where( a =&gt; a.IsClass &amp;&amp; a\n    .Name == <span class=\"maroon\">\"JoinGeometryUtils\"</span> ).ToList();\n    <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { doc,\n            firstElement, secondElement };\n    <span class=\"teal\">Type</span>[] tipos = parametros.Select( a =&gt; a\n    .GetType() ).ToArray();\n    <span class=\"blue\">if</span>( ls.Count &gt; 0 )\n    {\n      <span class=\"teal\">Type</span> t = ls[0];\n      <span class=\"teal\">MethodInfo</span> met = t\n      .GetMethod( <span class=\"maroon\">\"JoinGeometry\"</span>, tipos );\n      met.Invoke( <span class=\"blue\">null</span>, parametros );\n    }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> IsJoined2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">Element</span> firstElement, <span class=\"teal\">Element</span> secondElement )\n  {\n    <span class=\"blue\">bool</span> value = <span class=\"blue\">false</span>;\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; ls = doc.GetType().Assembly\n    .GetTypes().Where( a =&gt; a.IsClass &amp;&amp; a\n    .Name == <span class=\"maroon\">\"JoinGeometryUtils\"</span> ).ToList();\n    <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { doc,\n            firstElement, secondElement };\n    <span class=\"teal\">Type</span>[] tipos = parametros.Select( a =&gt; a\n    .GetType() ).ToArray();\n    <span class=\"blue\">if</span>( ls.Count &gt; 0 )\n    {\n      <span class=\"teal\">Type</span> t = ls[0];\n      <span class=\"teal\">MethodInfo</span> met = t\n      .GetMethod( <span class=\"maroon\">\"AreElementsJoined\"</span>, tipos );\n      value = (<span class=\"blue\">bool</span>) met.Invoke( <span class=\"blue\">null</span>,\n        parametros );\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> CalculateVolumeArea2( <span class=\"blue\">this</span>\n  <span class=\"teal\">Document</span> doc, <span class=\"blue\">bool</span> value )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; ls = doc.GetType().Assembly\n    .GetTypes().Where( a =&gt; a.IsClass &amp;&amp; a\n    .Name == <span class=\"maroon\">\"AreaVolumeSettings\"</span> ).ToList();\n    <span class=\"blue\">if</span>( ls.Count &gt; 0 )\n    {\n      <span class=\"teal\">Type</span> t = ls[0];\n      <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] {\n              doc };\n      <span class=\"teal\">Type</span>[] tipos = parametros\n      .Select( a =&gt; a.GetType() ).ToArray();\n      <span class=\"teal\">MethodInfo</span> met = t\n      .GetMethod( <span class=\"maroon\">\"GetAreaVolumeSettings\"</span>, tipos );\n      <span class=\"blue\">object</span> temp = met.Invoke( <span class=\"blue\">null</span>,\n        parametros );\n      temp.GetType()\n      .GetProperty( <span class=\"maroon\">\"ComputeVolumes\"</span> ).SetValue( temp, value, <span class=\"blue\">null</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">PropertyInfo</span> prop = doc.Settings\n      .GetType().GetProperty( <span class=\"maroon\">\"VolumeCalculationSetting\"</span> );\n      <span class=\"blue\">object</span> temp = prop.GetValue( doc\n      .Settings, <span class=\"blue\">null</span> );\n      prop = temp.GetType()\n      .GetProperty( <span class=\"maroon\">\"VolumeCalculationOptions\"</span> );\n      temp = prop.GetValue( temp, <span class=\"blue\">null</span> );\n      prop = temp.GetType()\n      .GetProperty( <span class=\"maroon\">\"VolumeComputationEnable\"</span> );\n      prop.SetValue( temp, value, <span class=\"blue\">null</span> );\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Group</span> CreateGroup2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span>\n  doc, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elementos )\n  {\n    <span class=\"teal\">Group</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">ElementSet</span> eleset = <span class=\"blue\">new</span> <span class=\"teal\">ElementSet</span>();\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> ele <span class=\"blue\">in</span> elementos )\n    {\n      eleset.Insert( ele );\n    }\n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; col = elementos\n    .Select( a =&gt; a.Id ).ToList();\n    <span class=\"blue\">object</span> obj = doc.Create;\n    <span class=\"teal\">MethodInfo</span> met = obj.GetType()\n    .GetMethod( <span class=\"maroon\">\"NewGroup\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { col.GetType() } );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      met.Invoke( obj, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { col } );\n    }\n    <span class=\"blue\">else</span>\n    {\n      met = obj.GetType()\n      .GetMethod( <span class=\"maroon\">\"NewGroup\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { eleset.GetType() } );\n      met.Invoke( obj,\n        <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { eleset } );\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> Delete2( <span class=\"blue\">this</span> <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">Element</span> ele )\n  {\n    <span class=\"blue\">object</span> obj = doc;\n    <span class=\"teal\">MethodInfo</span> met = obj.GetType()\n    .GetMethod( <span class=\"maroon\">\"Delete\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">Element</span> ) } );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      met.Invoke( obj, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { ele } );\n    }\n    <span class=\"blue\">else</span>\n    {\n      met = obj.GetType()\n      .GetMethod( <span class=\"maroon\">\"Delete\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">ElementId</span> ) } );\n      met.Invoke( obj, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { ele\n              .Id } );\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.Document</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.Element\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span> Level2( <span class=\"blue\">this</span> <span class=\"teal\">Element</span> ele )\n  {\n    <span class=\"teal\">Element</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">Document</span> doc = ele.Document;\n    <span class=\"teal\">Type</span> t = ele.GetType();\n    <span class=\"blue\">if</span>( t.GetProperty( <span class=\"maroon\">\"Level\"</span> ) != <span class=\"blue\">null</span> )\n      value = t.GetProperty( <span class=\"maroon\">\"Level\"</span> )\n      .GetValue( ele, <span class=\"blue\">null</span> ) <span class=\"blue\">as</span> <span class=\"teal\">Element</span>;\n    <span class=\"blue\">else</span>\n      value = doc.GetElement2( (<span class=\"teal\">ElementId</span>) t\n      .GetProperty( <span class=\"maroon\">\"LevelId\"</span> ).GetValue( ele, <span class=\"blue\">null</span> ) );\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Material</span>&gt; Materiais2( <span class=\"blue\">this</span>\n  <span class=\"teal\">Element</span> ele )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Material</span>&gt; value = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Material</span>&gt;();\n    <span class=\"teal\">Document</span> doc = ele.Document;\n    <span class=\"teal\">Type</span> t = ele.GetType();\n    <span class=\"blue\">if</span>( t.GetProperty( <span class=\"maroon\">\"Materials\"</span> ) != <span class=\"blue\">null</span> )\n      value = ( (<span class=\"teal\">IEnumerable</span>) t\n      .GetProperty( <span class=\"maroon\">\"Materials\"</span> ).GetValue( ele, <span class=\"blue\">null</span> ) ).Cast&lt;<span class=\"teal\">Material</span>&gt;()\n      .ToList();\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">MethodInfo</span> met = t\n      .GetMethod( <span class=\"maroon\">\"GetMaterialIds\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"blue\">bool</span> ) } );\n      value = ( (<span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt;) met\n      .Invoke( ele, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { <span class=\"blue\">false</span> } ) )\n      .Select( a =&gt; doc.GetElement2( a ) ).Cast&lt;<span class=\"teal\">Material</span>&gt;().ToList();\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Parameter</span> GetParameter2( <span class=\"blue\">this</span>\n  <span class=\"teal\">Element</span> ele, <span class=\"blue\">string</span> nome_paramentro )\n  {\n    <span class=\"teal\">Parameter</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">Type</span> t = ele.GetType();\n    <span class=\"teal\">MethodInfo</span> met = t\n    .GetMethod( <span class=\"maroon\">\"LookupParameter\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"blue\">string</span> ) } );\n    <span class=\"blue\">if</span>( met == <span class=\"blue\">null</span> )\n      met = t.GetMethod( <span class=\"maroon\">\"get_Parameter\"</span>,\n        <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"blue\">string</span> ) } );\n    value = met.Invoke( ele,\n      <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { nome_paramentro } ) <span class=\"blue\">as</span> <span class=\"teal\">Parameter</span>;\n    <span class=\"blue\">if</span>( value == <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">var</span> pas = ele.Parameters\n      .Cast&lt;<span class=\"teal\">Parameter</span>&gt;().ToList();\n      <span class=\"blue\">if</span>( pas.Exists( a =&gt; a.Definition\n      .Name.ToLower() == nome_paramentro.Trim().ToLower() ) )\n        value = pas.First( a =&gt; a\n        .Definition.Name.ToLower() == nome_paramentro.Trim()\n        .ToLower() );\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Parameter</span> GetParameter2( <span class=\"blue\">this</span>\n  <span class=\"teal\">Element</span> ele, <span class=\"teal\">BuiltInParameter</span> builtInParameter )\n  {\n    <span class=\"teal\">Parameter</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">Type</span> t = ele.GetType();\n    <span class=\"teal\">MethodInfo</span> met = t\n    .GetMethod( <span class=\"maroon\">\"LookupParameter\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">BuiltInParameter</span> ) } );\n    <span class=\"blue\">if</span>( met == <span class=\"blue\">null</span> )\n      met = t.GetMethod( <span class=\"maroon\">\"get_Parameter\"</span>,\n        <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">BuiltInParameter</span> ) } );\n    value = met.Invoke( ele,\n      <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { builtInParameter } ) <span class=\"blue\">as</span> <span class=\"teal\">Parameter</span>;\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">double</span> GetMaterialArea2( <span class=\"blue\">this</span>\n  <span class=\"teal\">Element</span> ele, <span class=\"teal\">Material</span> m )\n  {\n    <span class=\"blue\">double</span> value = 0;\n    <span class=\"teal\">Type</span> t = ele.GetType();\n    <span class=\"teal\">MethodInfo</span> met = t\n    .GetMethod( <span class=\"maroon\">\"GetMaterialArea\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>(<span class=\"teal\">ElementId</span>),\n            <span class=\"blue\">typeof</span>(<span class=\"blue\">bool</span>) } );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      value = (<span class=\"blue\">double</span>) met.Invoke( ele,\n        <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { m.Id, <span class=\"blue\">false</span> } );\n    }\n    <span class=\"blue\">else</span>\n    {\n      met = t.GetMethod( <span class=\"maroon\">\"GetMaterialArea\"</span>,\n        <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">Element</span> ) } );\n      value = (<span class=\"blue\">double</span>) met.Invoke( ele,\n        <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { m } );\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">double</span> GetMaterialVolume2( <span class=\"blue\">this</span>\n  <span class=\"teal\">Element</span> ele, <span class=\"teal\">Material</span> m )\n  {\n    <span class=\"blue\">double</span> value = 0;\n    <span class=\"teal\">Type</span> t = ele.GetType();\n    <span class=\"teal\">MethodInfo</span> met = t\n    .GetMethod( <span class=\"maroon\">\"GetMaterialVolume\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>(<span class=\"teal\">ElementId</span>),\n            <span class=\"blue\">typeof</span>(<span class=\"blue\">bool</span>) } );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      value = (<span class=\"blue\">double</span>) met.Invoke( ele,\n        <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { m.Id, <span class=\"blue\">false</span> } );\n    }\n    <span class=\"blue\">else</span>\n    {\n      met = t\n      .GetMethod( <span class=\"maroon\">\"GetMaterialVolume\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">ElementId</span> ) } );\n      value = (<span class=\"blue\">double</span>) met.Invoke( ele,\n        <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { m.Id } );\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">GeometryObject</span>&gt;\n  GetGeometricObjects2( <span class=\"blue\">this</span> <span class=\"teal\">Element</span> ele )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; value =\n    <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">GeometryObject</span>&gt;();\n    <span class=\"teal\">Options</span> op = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n    <span class=\"blue\">object</span> obj = ele.get_Geometry( op );\n    <span class=\"teal\">PropertyInfo</span> prop = obj.GetType()\n    .GetProperty( <span class=\"maroon\">\"Objects\"</span> );\n    <span class=\"blue\">if</span>( prop != <span class=\"blue\">null</span> )\n    {\n      obj = prop.GetValue( obj, <span class=\"blue\">null</span> );\n      <span class=\"teal\">IEnumerable</span> arr = obj <span class=\"blue\">as</span> <span class=\"teal\">IEnumerable</span>;\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geo <span class=\"blue\">in</span> arr )\n      {\n        value.Add( geo );\n      }\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt; geos =\n      obj <span class=\"blue\">as</span> <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">GeometryObject</span>&gt;;\n      <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> geo <span class=\"blue\">in</span> geos )\n      {\n        value.Add( geo );\n      }\n    }\n    <span class=\"blue\">return</span> value;\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.Element</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.FamilySymbol\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> EnableFamilySymbol2( <span class=\"blue\">this</span>\n  <span class=\"teal\">FamilySymbol</span> fsymbol )\n  {\n    <span class=\"teal\">MethodInfo</span> met = fsymbol.GetType()\n    .GetMethod( <span class=\"maroon\">\"Activate\"</span> );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      met.Invoke( fsymbol, <span class=\"blue\">null</span> );\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.FamilySymbol</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.InternalDefinition\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> VaryGroup2( <span class=\"blue\">this</span>\n  <span class=\"teal\">InternalDefinition</span> def, <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { doc,\n            <span class=\"blue\">true</span> };\n    <span class=\"teal\">Type</span>[] tipos = parametros.Select( a =&gt; a\n    .GetType() ).ToArray();\n    <span class=\"teal\">MethodInfo</span> met = def.GetType()\n    .GetMethod( <span class=\"maroon\">\"SetAllowVaryBetweenGroups\"</span>, tipos );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      met.Invoke( def, parametros );\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.InternalDefinition</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.Part\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ElementId</span> GetSource2( <span class=\"blue\">this</span> <span class=\"teal\">Part</span> part )\n  {\n    <span class=\"teal\">ElementId</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">PropertyInfo</span> prop = part.GetType()\n    .GetProperty( <span class=\"maroon\">\"OriginalDividedElementId\"</span> );\n    <span class=\"blue\">if</span>( prop != <span class=\"blue\">null</span> )\n      value = prop.GetValue( part,\n        <span class=\"blue\">null</span> ) <span class=\"blue\">as</span> <span class=\"teal\">ElementId</span>;\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">MethodInfo</span> met = part.GetType()\n      .GetMethod( <span class=\"maroon\">\"GetSourceElementIds\"</span> );\n      <span class=\"blue\">object</span> temp = met.Invoke( part, <span class=\"blue\">null</span> );\n      met = temp.GetType()\n      .GetMethod( <span class=\"maroon\">\"First\"</span> );\n      temp = met.Invoke( temp, <span class=\"blue\">null</span> );\n      prop = temp.GetType()\n      .GetProperty( <span class=\"maroon\">\"HostElementId\"</span> );\n      value = prop.GetValue( temp,\n        <span class=\"blue\">null</span> ) <span class=\"blue\">as</span> <span class=\"teal\">ElementId</span>;\n    }\n    <span class=\"blue\">return</span> value;\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.Part</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.UI.Selection.Selection\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; GetSelection2( <span class=\"blue\">this</span>\n  <span class=\"teal\">Selection</span> sel, <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; value = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n    sel.GetElementIds();\n    <span class=\"teal\">Type</span> t = sel.GetType();\n    <span class=\"blue\">if</span>( t.GetMethod( <span class=\"maroon\">\"GetElementIds\"</span> ) != <span class=\"blue\">null</span> )\n    {\n      <span class=\"teal\">MethodInfo</span> met = t\n      .GetMethod( <span class=\"maroon\">\"GetElementIds\"</span> );\n      value = ( (<span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt;) met\n      .Invoke( sel, <span class=\"blue\">null</span> ) ).Select( a =&gt; doc.GetElement2( a ) )\n      .ToList();\n    }\n    <span class=\"blue\">else</span>\n    {\n      value = ( (<span class=\"teal\">IEnumerable</span>) t\n      .GetProperty( <span class=\"maroon\">\"Elements\"</span> ).GetValue( sel, <span class=\"blue\">null</span> ) ).Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .ToList();\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> SetSelection2( <span class=\"blue\">this</span> <span class=\"teal\">Selection</span>\n  sel, <span class=\"teal\">Document</span> doc, <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; elementos )\n  {\n    sel.ClearSelection2();\n    <span class=\"blue\">object</span>[] parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] {\n          elementos };\n    <span class=\"teal\">Type</span>[] tipos = parametros.Select( a =&gt; a\n    .GetType() ).ToArray();\n    <span class=\"teal\">MethodInfo</span> met = sel.GetType()\n    .GetMethod( <span class=\"maroon\">\"SetElementIds\"</span>, tipos );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      met.Invoke( sel, parametros );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">PropertyInfo</span> prop = sel.GetType()\n      .GetProperty( <span class=\"maroon\">\"Elements\"</span> );\n      <span class=\"blue\">object</span> temp = prop.GetValue( sel, <span class=\"blue\">null</span> );\n      <span class=\"blue\">if</span>( elementos.Count == 0 )\n      {\n        met = temp.GetType()\n        .GetMethod( <span class=\"maroon\">\"Clear\"</span> );\n        met.Invoke( temp, <span class=\"blue\">null</span> );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> elementos )\n        {\n          <span class=\"teal\">Element</span> elemento = doc\n          .GetElement2( id );\n          parametros = <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] {\n                      elemento };\n          tipos = parametros\n          .Select( a =&gt; a.GetType() ).ToArray();\n          met = temp.GetType()\n          .GetMethod( <span class=\"maroon\">\"Add\"</span>, tipos );\n          met.Invoke( temp, parametros );\n        }\n      }\n    }\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> ClearSelection2(\n    <span class=\"blue\">this</span> <span class=\"teal\">Selection</span> sel )\n  {\n    <span class=\"teal\">PropertyInfo</span> prop = sel.GetType()\n      .GetProperty( <span class=\"maroon\">\"Elements\"</span> );\n    <span class=\"blue\">if</span>( prop != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">object</span> obj = prop.GetValue( sel, <span class=\"blue\">null</span> );\n      <span class=\"teal\">MethodInfo</span> met = obj.GetType()\n        .GetMethod( <span class=\"maroon\">\"Clear\"</span> );\n      met.Invoke( obj, <span class=\"blue\">null</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n        = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n      <span class=\"teal\">MethodInfo</span> met = sel.GetType().GetMethod(\n        <span class=\"maroon\">\"SetElementIds\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { ids.GetType() } );\n      met.Invoke( sel, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { ids } );\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.UI.Selection.Selection</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.UI.UIApplication\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> System.Drawing\n  .<span class=\"teal\">Rectangle</span> GetDrawingArea2( <span class=\"blue\">this</span> <span class=\"teal\">UIApplication</span> ui )\n  {\n    System.Drawing.<span class=\"teal\">Rectangle</span> value = System\n    .Windows.Forms.<span class=\"teal\">Screen</span>.PrimaryScreen.Bounds;\n    <span class=\"blue\">return</span> value;\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.UI.UIApplication</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.View\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ElementId</span> Duplicate2( <span class=\"blue\">this</span> <span class=\"teal\">View</span> view )\n  {\n    <span class=\"teal\">ElementId</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">Document</span> doc = view.Document;\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; ls = doc.GetType().Assembly.GetTypes()\n      .Where( a =&gt; a.IsEnum\n        &amp;&amp; a.Name == <span class=\"maroon\">\"ViewDuplicateOption\"</span> )\n      .ToList();\n    <span class=\"blue\">if</span>( ls.Count &gt; 0 )\n    {\n      <span class=\"teal\">Type</span> t = ls[0];\n      <span class=\"blue\">object</span> obj = view;\n      <span class=\"teal\">MethodInfo</span> met = view.GetType().GetMethod(\n        <span class=\"maroon\">\"Duplicate\"</span>, <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { t } );\n      <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n      {\n        value = met.Invoke( obj,\n          <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { 2 } ) <span class=\"blue\">as</span> <span class=\"teal\">ElementId</span>;\n      }\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> SetOverlayView2(\n    <span class=\"blue\">this</span> <span class=\"teal\">View</span> view,\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids,\n    <span class=\"teal\">Color</span> cor = <span class=\"blue\">null</span>,\n    <span class=\"blue\">int</span> espessura = -1 )\n  {\n    <span class=\"teal\">Document</span> doc = view.Document;\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Type</span>&gt; ls = doc.GetType().Assembly\n      .GetTypes().Where(\n        a =&gt; a.IsClass\n          &amp;&amp; a.Name == <span class=\"maroon\">\"OverrideGraphicSettings\"</span> )\n      .ToList();\n    <span class=\"blue\">if</span>( ls.Count &gt; 0 )\n    {\n      <span class=\"teal\">Type</span> t = ls[0];\n      <span class=\"teal\">ConstructorInfo</span> construtor = t\n        .GetConstructor( <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { } );\n      construtor.Invoke( <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { } );\n      <span class=\"blue\">object</span> obj = construtor.Invoke( <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { } );\n      <span class=\"teal\">MethodInfo</span> met = obj.GetType()\n        .GetMethod( <span class=\"maroon\">\"SetProjectionLineColor\"</span>,\n          <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { cor.GetType() } );\n      met.Invoke( obj, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { cor } );\n      met = obj.GetType()\n        .GetMethod( <span class=\"maroon\">\"SetProjectionLineWeight\"</span>,\n          <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { espessura.GetType() } );\n      met.Invoke( obj, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { espessura } );\n      met = view.GetType()\n        .GetMethod( <span class=\"maroon\">\"SetElementOverrides\"</span>,\n          <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>(<span class=\"teal\">ElementId</span>),\n            obj.GetType() } );\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n      {\n        met.Invoke( view, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { id, obj } );\n      }\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">MethodInfo</span> met = view.GetType()\n        .GetMethod( <span class=\"maroon\">\"set_ProjColorOverrideByElement\"</span>,\n          <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ),\n            <span class=\"blue\">typeof</span>( <span class=\"teal\">Color</span> ) } );\n      met.Invoke( view, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { ids, cor } );\n      met = view.GetType()\n        .GetMethod( <span class=\"maroon\">\"set_ProjLineWeightOverrideByElement\"</span>,\n          <span class=\"blue\">new</span> <span class=\"teal\">Type</span>[] { <span class=\"blue\">typeof</span>( <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ),\n            <span class=\"blue\">typeof</span>( <span class=\"blue\">int</span> ) } );\n      met.Invoke( view, <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { ids, espessura } );\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.View</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.Viewplan\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">ElementId</span> GetViewTemplateId2(\n    <span class=\"blue\">this</span> <span class=\"teal\">ViewPlan</span> view )\n  {\n    <span class=\"teal\">ElementId</span> value = <span class=\"blue\">null</span>;\n    <span class=\"teal\">PropertyInfo</span> prop = view.GetType()\n      .GetProperty( <span class=\"maroon\">\"ViewTemplateId\"</span> );\n    <span class=\"blue\">if</span>( prop != <span class=\"blue\">null</span> )\n    {\n      value = prop.GetValue( view,\n        <span class=\"blue\">null</span> ) <span class=\"blue\">as</span> <span class=\"teal\">ElementId</span>;\n    }\n    <span class=\"blue\">return</span> value;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> SetViewTemplateId2( <span class=\"blue\">this</span>\n  <span class=\"teal\">ViewPlan</span> view, <span class=\"teal\">ElementId</span> id )\n  {\n    <span class=\"teal\">PropertyInfo</span> prop = view.GetType()\n      .GetProperty( <span class=\"maroon\">\"ViewTemplateId\"</span> );\n    <span class=\"blue\">if</span>( prop != <span class=\"blue\">null</span> )\n    {\n      prop.SetValue( view, id, <span class=\"blue\">null</span> );\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.Viewplan</span>\n \n<span class=\"blue\">  #region</span> Autodesk.Revit.DB.Wall\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> FlipWall2( <span class=\"blue\">this</span> <span class=\"teal\">Wall</span> wall )\n  {\n    <span class=\"blue\">string</span> metodo = <span class=\"maroon\">\"Flip\"</span>;\n    <span class=\"teal\">MethodInfo</span> met = <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> )\n      .GetMethod( metodo );\n    <span class=\"blue\">if</span>( met != <span class=\"blue\">null</span> )\n    {\n      met.Invoke( wall, <span class=\"blue\">null</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      metodo = <span class=\"maroon\">\"flip\"</span>;\n      met = <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ).GetMethod( metodo );\n      met.Invoke( wall, <span class=\"blue\">null</span> );\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Autodesk.Revit.DB.Wall</span>\n}\n</pre><p>The updated version of The Building Code samples including these compatibility methods is\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.13\">\nrelease 2015.0.120.13</a>.</p><p>Many thanks to Magson for this useful idea, his work on implementing these methods and sharing it with us all!</p>"
  }
]