[
  {
    "original_filename": "1077_save_central_to_server",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1077_save_central_to_server",
    "header_text": "Saving a New Central File to Revit Server",
    "local_header_href": "#saving-a-new-central-file-to-revit-server",
    "chunk_text": "<h3>Saving a New Central File to Revit Server</h3><p>One topic brought up at Scott Conover's\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/au-day-2-worksharing-and-revit-2014-api-roundtables.html#5\">\nworksharing roundtable</a> was\n\nthe question of how to save a new Revit central file to a Revit Server.</p><p>Participants even questioned whether this is possible at all with the current API.</p><p>Well, it is, and we look at the exact steps to achieve that below as well as:</p><ul>\n<li><a href=\"#2\">DevDay in Farnborough, cabs and flights</a></li>\n<li><a href=\"#3\">Saving a new central file to Revit Server</a></li>\n<li><a href=\"#4\">Consistent naming of transactions and transaction groups</a></li>\n<li><a href=\"#5\">Changing the category of a family in project</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1077_save_central_to_server",
    "header_text": "DevDay in Farnborough, Cabs and Flights",
    "local_header_href": "#devday-in-farnborough-cabs-and-flights",
    "chunk_text": "<h4>DevDay in Farnborough, Cabs and Flights</h4><p>We started the day in a rather bumpy British cab. Here is the resulting blurred image of Philippe, Caroline and Jim all cosy on the back seat:</p><center>\n<img alt=\"Philippe, Caroline and Jim in a cab\" src=\"file:///j/photo/jeremy/2013/2013-12-11_farnborough/philippe_caroline_jim_london_cab_x_4.jpeg\"/>\n</center><p>The conference was lively and exciting.\nHere are Paavo and Adam happily on the way back to the airport afterwards in another British cab:</p><center>\n<img alt=\"Paavo and Adam in a cab\" src=\"file:///j/photo/jeremy/2013/2013-12-11_farnborough/paavo_adam_in_cab.jpg\" width=\"536\"/>\n</center><p>Philippe and Peter may be less happy.\nThey attempted to board their Easyjet flight from Gatwick to Munich and were rejected because they had not checked in in advance.</p><p>Now we are a significantly reduced team sitting in the hotel bar wondering how to reorganise and handle the presentations tomorrow:</p><center>\n<img alt=\"Planning the Munich DevDay presentations\" src=\"file:///j/photo/jeremy/2013/2013-12-11_farnborough/paavo_jeremy_paul_adam_jim_david_in_angelo.jpg\" width=\"536\"/>\n</center><a name=\"3\"></a>"
  },
  {
    "original_filename": "1077_save_central_to_server",
    "header_text": "Saving a New Central File to Revit Server",
    "local_header_href": "#saving-a-new-central-file-to-revit-server",
    "chunk_text": "<h4>Saving a New Central File to Revit Server</h4><p>Ensure the following conditions are met to successfully save a new central file to a Revit Server ServerPath using the Document.SaveAs method:</p><ul>\n<li>WorksharingSaveAsOptions.SaveAsCentral = true.</li>\n<li>The file is currently workshared – note that there is currently no API to make this happen.</li>\n<li>You have a server set for the Revit session, and you know or can obtain the correct relative path on the server for the new server document.</li>\n</ul><p>With that in place, the following code achieves this task:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> OpenDetachedAndSaveAsNewCentral(\n    <span class=\"teal\">UIApplication</span> uiapp )\n  {\n    <span class=\"green\">// Open non-interactive document with options</span>\n \n    <span class=\"teal\">Application</span> app = uiapp.Application;\n \n    <span class=\"teal\">ModelPath</span> toOpen = GetWSAPIModelPath(\n      <span class=\"maroon\">\"open_detached.rvt\"</span> );\n \n    <span class=\"teal\">Document</span> openedDoc = OpenDetached( app, toOpen );\n \n    ShowInfoOnOpenedWorksharedDocument( openedDoc );\n \n    <span class=\"teal\">String</span> serverPathRoot = uiapp.Application\n      .GetRevitServerNetworkHosts().First();\n \n    <span class=\"teal\">ModelPath</span> modelPath = <span class=\"blue\">new</span> <span class=\"teal\">ServerPath</span>(\n      serverPathRoot,\n      <span class=\"maroon\">\"all_new_saved_central_on_server_preserve.rvt\"</span> );\n \n    <span class=\"teal\">SaveAsOptions</span> options = <span class=\"blue\">new</span> <span class=\"teal\">SaveAsOptions</span>();\n \n    <span class=\"teal\">WorksharingSaveAsOptions</span> wsOptions\n      = <span class=\"blue\">new</span> <span class=\"teal\">WorksharingSaveAsOptions</span>();\n \n    wsOptions.SaveAsCentral = <span class=\"blue\">true</span>;\n    options.SetWorksharingOptions( wsOptions );\n    openedDoc.SaveAs( modelPath, options );\n \n    ShowInfoOnOpenedWorksharedDocument( openedDoc );\n \n    openedDoc.Close( <span class=\"blue\">false</span> );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Helper to return a local path </span>\n  <span class=\"gray\">///</span><span class=\"green\"> for a target model file.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">ModelPath</span> GetWSAPIModelPath(\n    <span class=\"blue\">string</span> fileName )\n  {\n    <span class=\"teal\">FileInfo</span> filePath = <span class=\"blue\">new</span> <span class=\"teal\">FileInfo</span>( <span class=\"teal\">Path</span>.Combine(\n      <span class=\"maroon\">@\"C:\\test\\WS API Models\"</span>,\n      fileName ) );\n \n    <span class=\"teal\">ModelPath</span> mp = <span class=\"teal\">ModelPathUtils</span>\n      .ConvertUserVisiblePathToModelPath(\n        filePath.FullName );\n \n    <span class=\"blue\">return</span> mp;\n  }\n \n  <span class=\"blue\">static</span> <span class=\"teal\">Document</span> OpenDetached(\n    <span class=\"teal\">Application</span> app,\n    <span class=\"teal\">ModelPath</span> modelPath )\n  {\n    <span class=\"teal\">OpenOptions</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">OpenOptions</span>();\n \n    opt.DetachFromCentralOption\n      = <span class=\"teal\">DetachFromCentralOption</span>\n        .DetachAndPreserveWorksets;\n \n    <span class=\"teal\">Document</span> openedDoc = app.OpenDocumentFile(\n      modelPath, opt );\n \n    <span class=\"blue\">return</span> openedDoc;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Show popup with info about worksets </span>\n  <span class=\"gray\">///</span><span class=\"green\"> and worksharing status</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> ShowInfoOnOpenedWorksharedDocument(\n    <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">String</span> documentName = doc.Title;\n    <span class=\"blue\">bool</span> isWorkshared = doc.IsWorkshared;\n \n    <span class=\"teal\">FilteredWorksetCollector</span> fwc\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredWorksetCollector</span>( doc );\n \n    fwc.OfKind( <span class=\"teal\">WorksetKind</span>.UserWorkset );\n \n    <span class=\"blue\">int</span> wsCount = fwc.Count&lt;<span class=\"teal\">Workset</span>&gt;();\n \n    <span class=\"teal\">TaskDialog</span> td = <span class=\"blue\">new</span> <span class=\"teal\">TaskDialog</span>(\n      <span class=\"maroon\">\"Opened document info\"</span> );\n \n    td.MainInstruction\n      = <span class=\"maroon\">\"Application has opened the document \"</span>\n        + documentName;\n \n    <span class=\"blue\">string</span> mainContent = <span class=\"maroon\">\"Workshared: \"</span>\n      + isWorkshared\n      + ( isWorkshared\n        ? <span class=\"maroon\">\"\\nassociated to: \"</span>\n          + <span class=\"teal\">ModelPathUtils</span>\n            .ConvertModelPathToUserVisiblePath(\n              doc.GetWorksharingCentralModelPath() )\n        : <span class=\"maroon\">\"\"</span> )\n      + <span class=\"maroon\">\"\\nWorkset count: \"</span> + wsCount + <span class=\"maroon\">\"\\n\"</span>\n      + <span class=\"teal\">String</span>.Join( <span class=\"maroon\">\"\\n\"</span>,\n        fwc.Select&lt;<span class=\"teal\">Workset</span>, <span class=\"teal\">String</span>&gt;(\n          ws =&gt; ws.Name + <span class=\"maroon\">\" - \"</span>\n            + ( ws.IsOpen ? <span class=\"maroon\">\"open\"</span> : <span class=\"maroon\">\"closed\"</span> ) ) );\n \n    td.MainContent = mainContent;\n \n    td.Show();\n  }\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "1077_save_central_to_server",
    "header_text": "Consistent Naming of Transactions and Transaction Groups",
    "local_header_href": "#consistent-naming-of-transactions-and-transaction-groups",
    "chunk_text": "<h4>Consistent Naming of Transactions and Transaction Groups</h4><p>Somebody pointed out an interesting little issue concerning the naming of transactions and transaction groups which might possibly cause some confusion for an add-in user and can easily be worked around:</p><p>Let's assume that your add-in has defined a transaction group named A. Within it, it committs one single transaction named B. In that case, the undo stack displayed to the user shows B instead of A.</p><p>The suggested workaround to handle this cleanly is simple: keep a count of commited transactions within the group. As long as the count is still zero, name the first transaction A as well, just like the top level group.</p><p>One aspect of this situation is described in the Revit API help file RevitAPI.chm: \"There are two ways of committing a group – Commit and Assimilate. By committing, all transactions committed inside a group stay as they are, while by assimilating, all inner transactions will be merged into a single transaction.\"</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1077_save_central_to_server",
    "header_text": "Changing the Category of a Family in Project",
    "local_header_href": "#changing-the-category-of-a-family-in-project",
    "chunk_text": "<h4>Changing the Category of a Family in Project</h4><p><strong>Question:</strong> How can I change a curtain panel family category from Curtain Panel to Window?</p><p>I know I can do it through the user interface, but how do I achieve the same thing programmatically?</p><p>I can imagine something along the following steps: iterate the FamilySymbols, get the Family, edit it as a Document – which I can do – change the category and add it back to the RVT file.</p><p>Can this be done without editing it as a Document?</p><p>What is the proper workflow for this task, please?</p><p><strong>Answer:</strong> You can only change the category for the family associated with a family document, i.e. the OwnerFamily of the family Document. This means that you have to be editing the family when this happens, i.e. open and access the family document via the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/edit-family-requires-no-transaction.html\">\nEditFamily</a> method.\n\nThere are probably some other restrictions as well, which match what the UI allows you to do.</p>"
  }
]