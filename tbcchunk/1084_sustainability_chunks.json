[
  {
    "original_filename": "1084_sustainability",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1084_sustainability",
    "header_text": "Sustainably Chugging Along",
    "local_header_href": "#sustainably-chugging-along",
    "chunk_text": "<h3>Sustainably Chugging Along</h3><p>I continue chugging along here, mainly just answering cases.</p><p>January and February tend to be peaceful for me after the extreme travelling and conferencing in December.</p><p>I will also be reducing my overdue vacation time in the next couple of months, so expect another break or two in the flow.</p><p>Here are today's topics I find interesting or have been looking into myself:</p><ul>\n<li><a href=\"#2\">Autodesk corporate sustainability</a></li>\n<li><a href=\"#3\">AU 2013 classes available on demand</a></li>\n<li><a href=\"#4\">AllViews Revit SDK sample enhancement</a></li>\n<li><a href=\"#5\">Revit API methods that regenerate</a></li>\n<li><a href=\"#6\">Programmatic Element cutting</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1084_sustainability",
    "header_text": "Autodesk Corporate Sustainability",
    "local_header_href": "#autodesk-corporate-sustainability",
    "chunk_text": "<h4>Autodesk Corporate Sustainability</h4><p>Matching the great work done by the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/starting-to-clean-up-for-the-break.html#3\">\nBuilding Performance Analysis</a> team,\n\nmaking strong use of Revit and BIM technologies, Autodesk as a company has committed to\n\n<a href=\"http://inthefold.autodesk.com/in_the_fold/2013/12/autodesk-ranked-1-of-100-public-companies-for-its-ghg-target-setting-methodology-c-fact.html\">\nreducing its carbon emissions</a> per\n\ndollar contribution to GDP by over 9% year over year through 2020, an incredibly long-range goal for a technology company.\nA review of corporate emissions performance recognized Autodesk and its Sustainability Solutions team as absolute leaders in this area, demonstrating\n\n'<a href=\"http://inthefold.autodesk.com/in_the_fold/2013/12/autodesk-ranked-1-of-100-public-companies-for-its-ghg-target-setting-methodology-c-fact.html\">tremendous leadership in shaping corporate sustainability metrics to be more grounded in science</a>.'</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1084_sustainability",
    "header_text": "AU 2013 Classes Available on Demand",
    "local_header_href": "#au-2013-classes-available-on-demand",
    "chunk_text": "<h4>AU 2013 Classes Available on Demand</h4><p>What skills could advance your career?\nRecordings of over 200 classes have been posted online, along with presentations and handouts for the rest of the more 600 classes presented at Autodesk University 2013 in Las Vegas.\nYou can easily get advanced training, explore a new topic, or peer into the future of design software by signing up for a free Autodesk account and starting to learn right away.\nHere is the\n\n<a href=\"http://au.autodesk.com/au-online/overview\">\nAU online overview</a> and a\n\n<a href=\"http://autode.sk/on-demand\">short URL</a> for it.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1084_sustainability",
    "header_text": "AllViews Revit SDK Sample Enhancement",
    "local_header_href": "#allviews-revit-sdk-sample-enhancement",
    "chunk_text": "<h4>AllViews Revit SDK Sample Enhancement</h4><p>Dale Bartlett very kindly provided an enhancement to the AllViews Revit SDK sample.\nSays he:</p><p>The RvtSamples &gt; Views &gt; All Views command retrieves all of the loaded Title Blocks for user selection in the creation of a series of sheets.\nThe code actually builds a collection of Type names using the GetTitleBlocks method, rather than Family:Type names.\nIf each Title Block has a default Type of 'Type 1' (recommended), the following is the result:</p><center>\n<img alt=\"List with several Type 1 entries\" src=\"img/db_all_views_1.png\"/>\n</center><p>Selecting one will result in the first found Type (ChooseTitleBlock) rather than the specific Family:Type.</p><p>The above test project contains the following Title Block Families:</p><center>\n<img alt=\"Title block families defining several Type 1 entries\" src=\"img/db_all_views_2.png\"/>\n</center><p>If a Family has no Types defined, then the default Type name is always listed the same as the Family name, so in most cases the code would work.  I guess that is why it hasn’t been picked up previously.</p><p>I fixed this by adding a concatenated FamilyName:FamilyTypeName to the list, and searching for the same to return the appropriate FamilySymbol.Id in the following two methods:</p><ul>\n<li>ChooseTitleBlock</li>\n<li>GetTitleBlocks</li>\n</ul><p>Here is the resulting modified and tested code:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Retrieve the title block to be generated by its name.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"name\"&gt;</span><span class=\"green\">The title block name</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ChooseTitleBlock( <span class=\"blue\">string</span> name )\n  {\n    <span class=\"blue\">if</span>( <span class=\"blue\">string</span>.IsNullOrEmpty( name ) )\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">ArgumentNullException</span>( <span class=\"maroon\">\"name\"</span> );\n    }\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> f <span class=\"blue\">in</span> m_allTitleBlocks )\n    {\n      <span class=\"green\">// Original SDK code returns first family </span>\n      <span class=\"green\">// symbol found, e.g. \"Type 1\" etc.</span>\n \n      <span class=\"green\">//if( name.Equals( f.Name ) )</span>\n \n      <span class=\"green\">// Replacement by DJB checks for concatenated </span>\n      <span class=\"green\">// family name and type name</span>\n \n      <span class=\"blue\">if</span>( name.Equals( f.Family.Name\n        + <span class=\"maroon\">\":\"</span> + f.Name ) )\n      {\n        m_titleBlock = f;\n        <span class=\"blue\">return</span>;\n      }\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Retrieve all available title blocks in </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the currently active document.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"doc\"&gt;</span><span class=\"green\">The currently active document</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> GetTitleBlocks( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">FilteredElementCollector</span> filteredElementCollector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n    filteredElementCollector.OfClass(\n      <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) );\n \n    filteredElementCollector.OfCategory(\n      <span class=\"teal\">BuiltInCategory</span>.OST_TitleBlocks );\n \n    m_allTitleBlocks = filteredElementCollector\n      .ToElements();\n \n    <span class=\"blue\">if</span>( 0 == m_allTitleBlocks.Count )\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">InvalidOperationException</span>(\n        <span class=\"maroon\">\"There is no title block to generate sheet.\"</span> );\n    }\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> element <span class=\"blue\">in</span> m_allTitleBlocks )\n    {\n      <span class=\"teal\">FamilySymbol</span> f = element <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n      <span class=\"green\">// Original SDK code saves only symbol name.</span>\n \n      <span class=\"green\">//AllTitleBlocksNames.Add( f.Name );</span>\n \n      <span class=\"green\">// Replacement by DJB saves concatenated </span>\n      <span class=\"green\">// family name and type name to ensure </span>\n      <span class=\"green\">// uniqueness in list.</span>\n \n      AllTitleBlocksNames.Add( f.Family.Name\n        + <span class=\"maroon\">\":\"</span> + f.Name );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == m_titleBlock )\n      {\n        m_titleBlock = f;\n      }\n    }\n  }\n</pre><p>Did I win a t-shirt?</p><p>Many thanks for all your help over the year via your Building Coder blog. A lot of people appreciate your efforts I know.</p><p>Many thanks to <b>you</b>, Dale, for discovering, fixing and sharing the solution for this issue!</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1084_sustainability",
    "header_text": "Revit API Methods that Regenerate",
    "local_header_href": "#revit-api-methods-that-regenerate",
    "chunk_text": "<h4>Revit API Methods that Regenerate</h4><p>A recent ADN case concerns a performance issue creating a large number of roofs, and why each one of them triggers a regeneration of the model:</p><p><strong>Question:</strong> I have a program that uses a temporary transaction inside a transaction group to make changes to the model. It creates a large number of footprint roofs to represent rooms in a 3D view and shows the user the result in a preview control. However, this is taking a long time in a large model. In the debugger, I can see that each call to Document.Create.NewFootPrintRoof is taking up to 10 seconds. The user interface displays the 'Regenerating' message in the status bar several times before my call returns, so it appears that the model is being regenerated at least once for each call.\n\n<p>How can that be?</p>\n<p>I am specifying manual regeneration mode. Revit is not supposed to regenerate the model until a transaction is closed, isn't it? How can I generate all the roofs without triggering a regeneration for each one?</p>\n<p><strong>Answer:</strong> Sorry, this is working as expected.\nUnfortunately, setting up the roof properly and ensuring consistency requires an internal regeneration.</p>\n<p>This is pointed out explicitly in the Revit API documentation in RevitAPI.chm, which says the following about this method: \"This method will regenerate the document even in manual regeneration mode.\"</p>\n<p>There are a number of other Revit API methods that regenerate the model internally as well.</p>\n<p>You can find them by searching the help file for the string above, which returns the following:</p>\n<center>\n<img alt=\"Revit API calls that regenerate the model\" src=\"img/api_call_regenerates_1.png\"/>\n</center>\n<p>To see yet a couple of entries more, just search for \"regenerate manual regeneration mode\":</p>\n<center>\n<img alt=\"Revit API calls that regenerate the model\" src=\"img/api_call_regenerates_2.png\"/>\n</center>\n<p><strong>Response:</strong> In the case above, switching to using floors instead of roofs speeded the process up by a factor of more than ten.</p>\n<p>Out of curiosity: is there a reason that roofs regen and floors don’t?</p>\n<p><strong>Answer:</strong> Sure: a floor is generally flat, whereas a roof with angles can generate an extremely complex shape.</p>\n<a name=\"6\"></a>\n<h4>Programmatic Element Cutting</h4>\n<p>A frequent question is how to cut Revit elements with each other, both in the family and project contexts.</p>\n<p>Here is a recent incarnation of the topic that reached me both as an ADN case and a Revit API forum discussion thread on\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/Cutting-Elements/td-p/4728179\">\ncutting elements</a>:</p>\n<p><strong>Question:</strong> I'm trying to write a tool that will cut a beam to a reference plane and I'm not sure if it's possible in the API with SolidSolidCutUtils because of the element type that is a beam or reference plane.\nHere's my code so far:</p>\n<pre class=\"code\">\n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Step 1\"</span>,\n    <span class=\"maroon\">\"Choose an element as a reference to cut to.\"</span> );\n \n  <span class=\"teal\">Reference</span> eRef = m_document.Selection.PickObject(\n    ObjectType.Element, <span class=\"maroon\">\"Please reference line.\"</span> );\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Step 2\"</span>, <span class=\"maroon\">\"Choose an element to cut.\"</span> );\n  <span class=\"teal\">Reference</span> eCut = m_document.Selection.PickObject(\n    ObjectType.Element, <span class=\"maroon\">\"Please pick an element.\"</span> );\n \n  <span class=\"blue\">if</span>( eRef != <span class=\"blue\">null</span>\n    &amp;&amp; eRef.ElementId != <span class=\"teal\">ElementId</span>.InvalidElementId\n    &amp;&amp; eCut != <span class=\"blue\">null</span>\n    &amp;&amp; eCut.ElementId != <span class=\"teal\">ElementId</span>.InvalidElementId )\n  {\n    CutElement( eRef, eCut, m_document, doc, activeDoc );\n  }\n \n  <span class=\"blue\">void</span> CutElement( <span class=\"teal\">Reference</span> eRef, <span class=\"teal\">Reference</span> eCut,\n    <span class=\"teal\">UIDocument</span> m_document, <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">Document</span> activeDoc)\n  {\n    <span class=\"green\">//TaskDialog.Show(\"Step 2\", \"Here\");</span>\n \n    <span class=\"blue\">int</span> CutElement = m_document.Document\n      .GetElement(eCut).Id.IntegerValue;\n    <span class=\"blue\">int</span> ReferenceLine = m_document.Document\n      .GetElement(eRef).Id.IntegerValue;\n \n    <span class=\"teal\">Element</span> solidToBeCut = activeDoc.GetElement(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(CutElement));\n \n    <span class=\"teal\">Element</span> cuttingSolid = activeDoc.GetElement(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(ReferenceLine));\n \n    <span class=\"teal\">Transaction</span> transaction = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(activeDoc);\n    transaction.Start(<span class=\"maroon\">\"AddCutBetweenSolids\"</span>);\n    <span class=\"teal\">SolidSolidCutUtils</span>.AddCutBetweenSolids(\n      activeDoc, solidToBeCut, cuttingSolid);\n    transaction.Commit();\n  }\n</pre>\n<p>The problem is I get an error at AddCutBetweenSolids that the parameter solidToBeCut isn't of the right type.\nIs there another method that would accomplish what I'm trying to do or is there a way to fix this method to do what I want?</p>\n<p><strong>Answer:</strong> There are several different possible ways to perform Boolean operations between Revit elements.</p>\n<p>I put together a collection of pointers to various discussions on The Building Coder concerning\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.30\">3D Booleans and Cutting Elements</a> to\n\nhelp answer your question.</p>\n<p>In many cases, within the family environment, the approach you are attempting using SolidSolidCutUtils is one of the best and most effective options.</p>\n<p>However, just as you have discovered, it places certain requirements on the input solids.</p>\n<p>Just as its name implies, the cutting solid must be a solid.</p>\n<p>A reference line definitely does not fulfil this requirement.</p>\n<p>You will have to create a solid somehow.</p>\n<p>Here is one suggestion of how to achieve this:</p>\n<p>Use the reference line you already have and another one perpendicular to it to define a plane, define a large extruded cube based on that plane, and subtract that from your main body.</p>\n</p>"
  },
  {
    "original_filename": "1084_sustainability",
    "header_text": "Programmatic Element Cutting",
    "local_header_href": "#programmatic-element-cutting",
    "chunk_text": "<h4>Programmatic Element Cutting</h4><p>A frequent question is how to cut Revit elements with each other, both in the family and project contexts.</p><p>Here is a recent incarnation of the topic that reached me both as an ADN case and a Revit API forum discussion thread on\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/Cutting-Elements/td-p/4728179\">\ncutting elements</a>:</p><p><strong>Question:</strong> I'm trying to write a tool that will cut a beam to a reference plane and I'm not sure if it's possible in the API with SolidSolidCutUtils because of the element type that is a beam or reference plane.\nHere's my code so far:</p><pre class=\"code\">\n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Step 1\"</span>,\n    <span class=\"maroon\">\"Choose an element as a reference to cut to.\"</span> );\n \n  <span class=\"teal\">Reference</span> eRef = m_document.Selection.PickObject(\n    ObjectType.Element, <span class=\"maroon\">\"Please reference line.\"</span> );\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Step 2\"</span>, <span class=\"maroon\">\"Choose an element to cut.\"</span> );\n  <span class=\"teal\">Reference</span> eCut = m_document.Selection.PickObject(\n    ObjectType.Element, <span class=\"maroon\">\"Please pick an element.\"</span> );\n \n  <span class=\"blue\">if</span>( eRef != <span class=\"blue\">null</span>\n    &amp;&amp; eRef.ElementId != <span class=\"teal\">ElementId</span>.InvalidElementId\n    &amp;&amp; eCut != <span class=\"blue\">null</span>\n    &amp;&amp; eCut.ElementId != <span class=\"teal\">ElementId</span>.InvalidElementId )\n  {\n    CutElement( eRef, eCut, m_document, doc, activeDoc );\n  }\n \n  <span class=\"blue\">void</span> CutElement( <span class=\"teal\">Reference</span> eRef, <span class=\"teal\">Reference</span> eCut,\n    <span class=\"teal\">UIDocument</span> m_document, <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">Document</span> activeDoc)\n  {\n    <span class=\"green\">//TaskDialog.Show(\"Step 2\", \"Here\");</span>\n \n    <span class=\"blue\">int</span> CutElement = m_document.Document\n      .GetElement(eCut).Id.IntegerValue;\n    <span class=\"blue\">int</span> ReferenceLine = m_document.Document\n      .GetElement(eRef).Id.IntegerValue;\n \n    <span class=\"teal\">Element</span> solidToBeCut = activeDoc.GetElement(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(CutElement));\n \n    <span class=\"teal\">Element</span> cuttingSolid = activeDoc.GetElement(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(ReferenceLine));\n \n    <span class=\"teal\">Transaction</span> transaction = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(activeDoc);\n    transaction.Start(<span class=\"maroon\">\"AddCutBetweenSolids\"</span>);\n    <span class=\"teal\">SolidSolidCutUtils</span>.AddCutBetweenSolids(\n      activeDoc, solidToBeCut, cuttingSolid);\n    transaction.Commit();\n  }\n</pre><p>The problem is I get an error at AddCutBetweenSolids that the parameter solidToBeCut isn't of the right type.\nIs there another method that would accomplish what I'm trying to do or is there a way to fix this method to do what I want?</p><p><strong>Answer:</strong> There are several different possible ways to perform Boolean operations between Revit elements.</p><p>I put together a collection of pointers to various discussions on The Building Coder concerning\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.30\">3D Booleans and Cutting Elements</a> to\n\nhelp answer your question.</p><p>In many cases, within the family environment, the approach you are attempting using SolidSolidCutUtils is one of the best and most effective options.</p><p>However, just as you have discovered, it places certain requirements on the input solids.</p><p>Just as its name implies, the cutting solid must be a solid.</p><p>A reference line definitely does not fulfil this requirement.</p><p>You will have to create a solid somehow.</p><p>Here is one suggestion of how to achieve this:</p><p>Use the reference line you already have and another one perpendicular to it to define a plane, define a large extruded cube based on that plane, and subtract that from your main body.</p>"
  }
]