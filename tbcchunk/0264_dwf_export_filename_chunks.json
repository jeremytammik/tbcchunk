[
  {
    "original_filename": "0264_dwf_export_filename",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0264_dwf_export_filename",
    "header_text": "Modify the DWF Export Filename",
    "local_header_href": "#modify-the-dwf-export-filename",
    "chunk_text": "<h3>Modify the DWF Export Filename</h3><p>Here is another case handled by Joe Ye regarding the DWF output filename generated by the ImportExport Revit SDK sample.\nWe already presented another related case of his regarding the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/dwg-export-filename.html\">\nDWG export filename</a>.\n\n<p><strong>Question:</strong> This problem is similar to the ViewPrinter problem where the program automatically names the output file. \nPlease tell me how I can trap the naming of DWF output file so I can either send it to a temp folder or rename it by moving to a new folder. \nThe problem seems to be when you create a DWF with multiple sheets in it – the program will append a dash suffix \"-\" at the end. \n\n<p><strong>Answer:</strong> Yes, if we export to DWF in merge mode, a suffix will be added to the end of the file name. \nThe problem is that the API does not provide full access to directly and completely control the output file name.\nThe solution is that we can export the DWF file to a temp folder, and then copy and rename the file to the desired destination folder.\nFor exporting a 2D DWF file, the code to change is in Export2DDWFData.cs. \nI changed it as follows:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">bool</span> Export()\n{\n  <span class=\"blue\">bool</span> exported = <span class=\"blue\">false</span>;\n  <span class=\"blue\">base</span>.Export();\n \n  <span class=\"green\">//parameter : ViewSet views</span>\n  <span class=\"teal\">ViewSet</span> views = <span class=\"blue\">new</span> <span class=\"teal\">ViewSet</span>();\n  <span class=\"blue\">if</span>( m_currentViewOnly )\n  {\n    views.Insert( m_activeDoc.ActiveView );\n  }\n  <span class=\"blue\">else</span>\n  {\n    views = m_selectViewsData.SelectedViews;\n  }\n \n  <span class=\"green\">// Export DWFx</span>\n  <span class=\"blue\">if</span>( m_exportFormat == <span class=\"teal\">ExportFormat</span>.DWFx2D )\n  {\n    <span class=\"teal\">DWFX2DExportOptions</span> options = <span class=\"blue\">new</span> <span class=\"teal\">DWFX2DExportOptions</span>();\n    options.ExportObjectData = m_exportObjectData;\n    options.ExportingAreas = m_exportAreas;\n    options.MergedViews = m_exportMergeFiles;\n    options.ImageFormat = m_dwfImageFormat;\n    options.ImageQuality = m_dwfImageQuality;\n \n    <span class=\"blue\">if</span>( m_exportMergeFiles == <span class=\"blue\">false</span> )\n    {\n      <span class=\"blue\">string</span> strTempFolder = <span class=\"maroon\">\"C:/tmp\"</span>;\n \n      exported = m_activeDoc.Export( strTempFolder, \n        m_exportFileName, views, options );\n \n      <span class=\"teal\">File</span>.Copy( \n        strTempFolder + <span class=\"maroon\">\"/\"</span> + m_exportFileName + <span class=\"maroon\">\"-.DWFx\"</span>, \n        m_exportFolder + <span class=\"maroon\">\"/\"</span> + m_exportFileName + <span class=\"maroon\">\".DWFx\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      exported = m_activeDoc.Export( m_exportFolder, \n        m_exportFileName, views, options );\n    }\n  }\n  <span class=\"green\">// Export DWF</span>\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"teal\">DWF2DExportOptions</span> options = <span class=\"blue\">new</span> <span class=\"teal\">DWF2DExportOptions</span>();\n    options.ExportObjectData = m_exportObjectData;\n    options.ExportingAreas = m_exportAreas;\n    options.MergedViews = m_exportMergeFiles;\n    options.ImageFormat = m_dwfImageFormat;\n    options.ImageQuality = m_dwfImageQuality;\n    <span class=\"blue\">if</span>( m_exportMergeFiles == <span class=\"blue\">false</span> )\n    {\n      <span class=\"blue\">string</span> strTempFolder = <span class=\"maroon\">\"C:/tmp\"</span>;\n \n      exported = m_activeDoc.Export( strTempFolder, \n        m_exportFileName, views, options );\n \n      <span class=\"teal\">File</span>.Copy( \n        strTempFolder + <span class=\"maroon\">\"/\"</span> + m_exportFileName + <span class=\"maroon\">\"-.DWF\"</span>, \n        m_exportFolder + <span class=\"maroon\">\"/\"</span> + m_exportFileName + <span class=\"maroon\">\".DWF\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      exported = m_activeDoc.Export( m_exportFolder, \n        m_exportFileName, views, options );\n    }\n  }\n  <span class=\"blue\">return</span> exported;\n}\n</pre>\n<p>You could also optionally delete the intermediate file after copying it, or use File.Move instead of File.Copy.\n\n<p>I tested this solution, and it works well for me. \nPlease make analogous changes for the other file formats, if you need them.\n\n<p>Many thanks to Joe for handling this case!\n\n<p>By the way, this is a pretty common issue that was also addressed by Rod Howarth in his \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/au-winds-down.html\">\nAU presentation</a>.\n\nHe uses a similar approach in his PLT utility, which batch plots to PDF, DWG, DWF and paper, to trap the output generated by the Revit API call and rename the files to suit his requirements.\nOne part of the solution that he suggests is to print out the sheets one at a time to retain more complete control over the renaming and sorting.\n</p></p></p></p></p></p></p>"
  }
]