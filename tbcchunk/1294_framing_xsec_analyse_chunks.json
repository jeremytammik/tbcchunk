[
  {
    "original_filename": "1294_framing_xsec_analyse",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1294_framing_xsec_analyse",
    "header_text": "Framing Cross Section Analyser and REX in Revit 2015",
    "local_header_href": "#framing-cross-section-analyser-and-rex-in-revit-2015",
    "chunk_text": "<h3>Framing Cross Section Analyser and REX in Revit 2015</h3><p>Back in December 2013, I discussed\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/security-framing-cross-section-analyser-and-rex.html\">\nstructural cross section analysis</a>,\n\ni.e. determination of the cross section profile of beam, columns, braces, etc., and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/security-framing-cross-section-analyser-and-rex.html#3\">\nseveral completely different approaches</a> one\n\ncan take to achieve that.</p><p>I also demonstrated how to make use of the powerful functionality provided by the REX toolkit without building the entire add-in on top of the REX framework.</p><p>By the way, here are some other earlier discussions of REX:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/the-rex-sdk.html\">The REX SDK</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/extensions-for-revit-2012.html\">Extensions for Revit 2012</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/rex-content-generator.html\">REX Content Generator</a></li>\n</ul><p>Before getting to this Revit Structure stuff, let me also mention that I made one of my rather infrequent contributions to the\n\n<a href=\"http://adndevblog.typepad.com/aec\">\nAEC DevBlog</a> today as well, to explain that about\n\n<a href=\"http://adndevblog.typepad.com/aec/2015/03/using-autocad-mep-objects-in-accoreconsole.html\">using AutoCAD MEP object enablers in AcCoreConsole</a>.</p><p>Anyway, back to the cross section analysis; that discussion led to the following question:</p><p><strong>Question:</strong>\n\nI would like to create a Revit 2015 REX add-in without using the REX add-in wizard.</p><p>I looked at your\n\n<a href=\"https://github.com/jeremytammik/FramingXsecAnalyzer\">\nFramingXsecAnalyzer add-in</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/security-framing-cross-section-analyser-and-rex.html\">\nthe post</a> describing\n\nit, but don't understand how to start and create a new such project for my own use.</p><p>Do you have any sample project I could start with?\n\n\n<p><strong>Answer:</strong>\n\nThe starting point is a completely normal Revit add-in project.</p>\n<p>You add the required additional references to that and ensure that the REX framework is found and loaded dynamically.</p>\n<p>To migrate the application to a new version, you can start by looking at the 2012 and 2014 versions in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/12/security-framing-cross-section-analyser-and-rex.html#10\">\ndownload section</a> of that post.</p>\n<p>You can use the GitHub comparison tools to determine what changed between them, e.g.\n\n<a href=\"https://github.com/jeremytammik/FramingXsecAnalyzer/compare/2012.0.0.0...2014.0.0.0\">\nFramingXsecAnalyzer/compare/2012.0.0.0...2014.0.0.0</a>.</p>\n<p>I migrated the project to Revit 2015 for you.</p>\n<p>One important step was obviously to increment the version number in the assembly resolver.</p>\n<p>At the beginning of the external command Execute method, we register it like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">AppDomain</span>.CurrentDomain.AssemblyResolve\n    += <span class=\"blue\">new</span> <span class=\"teal\">ResolveEventHandler</span>( OnAssemblyResolve );\n</pre>\n<p>The resolver specifies the assembly version to load:</p>\n<pre class=\"code\">\n  <span class=\"blue\">static</span> System.Reflection.<span class=\"teal\">Assembly</span> OnAssemblyResolve(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">ResolveEventArgs</span> args )\n  {\n    <span class=\"teal\">Assembly</span> a = <span class=\"teal\">Assembly</span>.GetExecutingAssembly();\n \n    <span class=\"blue\">return</span> Autodesk.REX.Framework.<span class=\"teal\">REXAssemblies</span>\n      .Resolve( sender, args, <span class=\"maroon\">\"2015\"</span>, a );\n  }\n</pre>\n<p>The code actually making use of the REX functionality remains completely unchanged:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Use REX to analyse element cross section.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> This requires a reference to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> REX.ContentGeneratorLT.dll and prior</span>\n  <span class=\"gray\">///</span><span class=\"green\"> initialisation of the REX framework.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> The converter initialisation must reside in</span>\n  <span class=\"gray\">///</span><span class=\"green\"> a different method than the subscription to</span>\n  <span class=\"gray\">///</span><span class=\"green\"> the assembly resolver OnAssemblyResolve.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> RexXsecAnalyis(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"teal\">Element</span> e )\n  {\n    <span class=\"green\">// Initialise converter</span>\n \n    <span class=\"teal\">RVTFamilyConverter</span> rvt = <span class=\"blue\">new</span> <span class=\"teal\">RVTFamilyConverter</span>(\n      commandData, <span class=\"blue\">true</span> );\n \n    <span class=\"green\">// Retrieve family type</span>\n \n    <span class=\"teal\">REXFamilyType</span> fam = rvt.GetFamily( e,\n      <span class=\"teal\">ECategoryType</span>.SECTION_PARAM );\n \n    <span class=\"green\">// Retrieve section data</span>\n \n    <span class=\"teal\">REXFamilyType_ParamSection</span> paramSection = fam\n      <span class=\"blue\">as</span> <span class=\"teal\">REXFamilyType_ParamSection</span>;\n \n    <span class=\"teal\">REXSectionParamDescription</span> parameters\n      = paramSection.Parameters;\n \n    <span class=\"green\">// Extract dimensions, section type, tapered</span>\n    <span class=\"green\">// predicate, etc.</span>\n    <span class=\"green\">// If different start and end sections are </span>\n    <span class=\"green\">// required, use DimensionsEnd as well.</span>\n \n    <span class=\"teal\">REXSectionParamDimensions</span> dimensions = parameters\n      .Dimensions;\n \n    <span class=\"teal\">ESectionType</span> sectionType = parameters\n      .SectionType;\n \n    <span class=\"blue\">bool</span> tapered = parameters.Tapered;\n \n    <span class=\"blue\">bool</span> start = <span class=\"blue\">true</span>;\n \n    <span class=\"teal\">Contour_Section</span> contour = parameters.GetContour(\n      start );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ContourCont</span>&gt; shape = contour.Shape;\n \n    <span class=\"teal\">Util</span>.InfoMessage( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"The selected structural framing element \"</span>\n      + <span class=\"maroon\">\"cross section REX section type is \"</span>\n      + <span class=\"maroon\">\"{0}.\"</span>, sectionType ) );\n  }\n</pre>\n<p>As always, the current version is available from the\n\n<a href=\"https://github.com/jeremytammik/FramingXsecAnalyzer\">FramingXsecAnalyzer GitHub repository</a>,\n\nand the version discussed here is\n\n<a href=\"https://github.com/jeremytammik/FramingXsecAnalyzer/releases/tag/2015.0.0.0\">release 2015.0.0.0</a>.</p>\n<p>This kind of interactive parameter selection and filtering may obviously be very useful for many other applications as well.</p>\n<p>I tested it on the following I column:</p>\n<center>\n<img alt=\"I cross section\" src=\"img/framing_xsec_i_2015.png\" width=\"136\"/>\n</center>\n<p>It reports:</p>\n<pre>\nThe selected structural framing element cross section\nsection view cut plane face has 1 loop and is thus 'open'.\n\nThe selected structural framing element cross section\nREX section type is I.\n</pre>\n<p>The REX modules are demand loaded between these two log messages.</p>\n<p>Looking in the Visual Studio debug output window, you can see the following activity going on in the background:</p>\n<pre>\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Autodesk.REX.Framework\\v4.0_2014.0.0.0__51e16e3b26b42eda\\Autodesk.REX.Framework.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\assembly\\GAC_MSIL\\Autodesk.Common.AResourcesControl\\1.0.0.0__ff3304d4f320ee59\\Autodesk.Common.AResourcesControl.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Components\\AREXContentGenerator\\REX.ContentGeneratorLT.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Autodesk.REX.Framework\\v4.0_2015.0.0.0__51e16e3b26b42eda\\Autodesk.REX.Framework.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Foundation.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Foundation.Forms.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Products\\Revit\\AREXRevitMngr.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Geometry.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.Engine.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.Preferences.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.System.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.UI.WPF.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.UI.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.UI.Forms.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\en-US\\REX.UI.resources.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\en-US\\REX.System.resources.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.Mathematics.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Geometry.Structure.dll'\n'Revit.exe' (Managed (v4.0.30319)): Loaded 'C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Geometry.Revit.dll'\n</pre>\n<p>Copy to a text editor or view the source to see the truncated lines in full.</p>\n<p>Here is a list of the modules that were loaded:</p>\n<ul>\n<li>C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Autodesk.REX.Framework\\v4.0_2014.0.0.0__51e16e3b26b42eda\\Autodesk.REX.Framework.dll</li>\n<li>C:\\Windows\\assembly\\GAC_MSIL\\Autodesk.Common.AResourcesControl\\1.0.0.0__ff3304d4f320ee59\\Autodesk.Common.AResourcesControl.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Components\\AREXContentGenerator\\REX.ContentGeneratorLT.dll</li>\n<li>C:\\Windows\\Microsoft.Net\\assembly\\GAC_MSIL\\Autodesk.REX.Framework\\v4.0_2015.0.0.0__51e16e3b26b42eda\\Autodesk.REX.Framework.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Foundation.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Foundation.Forms.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Products\\Revit\\AREXRevitMngr.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Geometry.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.Engine.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.Preferences.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.System.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.UI.WPF.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.UI.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.UI.Forms.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\en-US\\REX.UI.resources.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\en-US\\REX.System.resources.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Engine\\REX.Mathematics.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Geometry.Structure.dll</li>\n<li>C:\\Program Files\\Common Files\\Autodesk Shared\\Extensions 2015\\Framework\\Foundation\\REX.Geometry.Revit.dll</li>\n</ul>\n<p>In a second test, I presented it with a tubular column:</p>\n<center>\n<img alt=\"Tube cross section\" src=\"img/framing_xsec_tube_2015.png\" width=\"217\"/>\n</center>\n<p>In this case, it reports:</p>\n<pre>\nThe selected structural framing element cross section\nsection view cut plane face has 2 loops and is thus 'closed'.\n\nThe selected structural framing element cross section\nREX section type is TUBE.\n</pre>\n<p>I hope this helps.</p>\n<p>Have fun!</p>\n<hr/>\n<!--\n\n10516534 [Question regarding AcCoreConsol - use with AutoCAD MEP objects]\n\nhttp://adndevblog.typepad.com/aec/2015/03/using-autocad-mep-objects-in-accoreconsole.html\n\n-->\n<h3>Using AutoCAD MEP Objects in AcCoreConsole</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p><strong>Question:</strong>\n\nUsing AcCoreConsole I'd like to move an object via AcCoreConsole.</p>\n<p>The object type in question happens to be an AutoCAD MEP MVBlock.</p>\n<p>Is this possible?</p>\n<p>Would AcCoreConsole recognize the object as valid or would it be a zombie, i.e. a proxy object?</p>\n<p><strong>Answer:</strong>\n\nI checked with the development team and received several confirmations saying that this should work:</p>\n<p>AcCoreConsole does recognize MVBlock, and the object can be moved in the same way as in AutoCAD.</p>\n<p>The AutoCAD MEP object enablers get loaded on demand in AcCoreConsole.exe. </p>\n<p>Here is a test suite proving it:</p>\n<p>1. accoreconsole.exe: Just run accoreconsole.exe, following modules were loaded. Please note AEC modules are not loaded:</p>\n<center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_1.jpg\"/>\n</center>\n<p>2. accoreconsole.exe /i oneBox.dwg: Open a dwg with only one box. A few more AutoCAD modules get loaded, but no AEC modules:</p>\n<center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_2.jpg\"/>\n</center>\n<p>3. accoreconsole.exe /i oneWall.dwg: Open a dwg with only one wall. AEC modules are loaded. Also note that AECB modules are loaded, even though there are no MEP objects in the DWG:</p>\n<center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_3.jpg\"/>\n</center>\n<p>Following is the output of list command:</p>\n<center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_3b.jpg\"/>\n</center>\n<p>4. accoreconsole.exe /i oneDuct.dwg: Open a dwg with only one duct. AEC and AECB module are loaded:</p>\n<center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_4.jpg\"/>\n</center>\n<p>Following is the output of list command:</p>\n<center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_4b.jpg\"/>\n</center>\n<p>I hope this helps.</p>\n</p>"
  },
  {
    "original_filename": "1294_framing_xsec_analyse",
    "header_text": "Using AutoCAD MEP Objects in AcCoreConsole",
    "local_header_href": "#using-autocad-mep-objects-in-accoreconsole",
    "chunk_text": "<h3>Using AutoCAD MEP Objects in AcCoreConsole</h3><p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p><p><strong>Question:</strong>\n\nUsing AcCoreConsole I'd like to move an object via AcCoreConsole.</p><p>The object type in question happens to be an AutoCAD MEP MVBlock.</p><p>Is this possible?</p><p>Would AcCoreConsole recognize the object as valid or would it be a zombie, i.e. a proxy object?</p><p><strong>Answer:</strong>\n\nI checked with the development team and received several confirmations saying that this should work:</p><p>AcCoreConsole does recognize MVBlock, and the object can be moved in the same way as in AutoCAD.</p><p>The AutoCAD MEP object enablers get loaded on demand in AcCoreConsole.exe. </p><p>Here is a test suite proving it:</p><p>1. accoreconsole.exe: Just run accoreconsole.exe, following modules were loaded. Please note AEC modules are not loaded:</p><center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_1.jpg\"/>\n</center><p>2. accoreconsole.exe /i oneBox.dwg: Open a dwg with only one box. A few more AutoCAD modules get loaded, but no AEC modules:</p><center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_2.jpg\"/>\n</center><p>3. accoreconsole.exe /i oneWall.dwg: Open a dwg with only one wall. AEC modules are loaded. Also note that AECB modules are loaded, even though there are no MEP objects in the DWG:</p><center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_3.jpg\"/>\n</center><p>Following is the output of list command:</p><center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_3b.jpg\"/>\n</center><p>4. accoreconsole.exe /i oneDuct.dwg: Open a dwg with only one duct. AEC and AECB module are loaded:</p><center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_4.jpg\"/>\n</center><p>Following is the output of list command:</p><center>\n<img alt=\"AcCoreConsole Object Enablers\" src=\"img/accoreconsole_4b.jpg\"/>\n</center><p>I hope this helps.</p>"
  }
]