[
  {
    "original_filename": "0356_detail_curve_plane",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0356_detail_curve_plane",
    "header_text": "Detail Curve Must be in Plane",
    "local_header_href": "#detail-curve-must-be-in-plane",
    "chunk_text": "<h3>Detail Curve Must be in Plane</h3><p>Here is a recent case concerning some Revit API behaviour that changed in the new release.\n\n<p><strong>Question:</strong> Were any major changes applied to the NewDetailCurve method?\n\n<p>In the Revit2011 API, I am getting an error saying \"Curve must be in the plane\". \nDo I now have to project the curve object onto the plane myself, or is it still taken care of automatically like in Revit 2010?\nThe code I am calling looks like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">DetailCurve</span> detailCurve\n    = doc.Create.NewDetailCurve(\n      doc.ActiveView, curve );\n</pre>\n<p><strong>Answer:</strong> When I look at the Revit 2011 API documentation information in RevitAPI.chm on the ItemFactoryBase.NewDetailCurve method, I see that it is designed to throw an ArgumentException when the curve is not in plane of the view.\n\n<p>In the Revit 2010 API, this exception is not documented. \n\n<p>So there does indeed appear to be a change in behaviour between the two versions, and it does seem that you have to ensure that the geometry curve is projected onto the proper plane before calling this method.\n\n<p><strong>Response:</strong> So I will have to project the curve onto the plane before I draw a detail line. \nThis was previously done automatically.\nNo problem. \nDo you have any code showing how to project points to the plane?\n\n<p><strong>Answer:</strong> I demonstrate some simple projection of points in the discussions of\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/2d-polygon-areas-and-outer-loop.html\">2D polygons</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/3d-polygon-areas.html\">2D polygon areas</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html\">Polygon transformation</a>\n</li></li></li></ul>\n<p>Some basic info on the Transform class is provided in:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/transform.html\">Transform class</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/transformations.html\">Transformations</a>\n</li></li></ul>\n<p>Applying a transform to a curve is also discussed in:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/scale-a-curve.html\">Scaling a curve</a>\n</li></ul>\n<p>Here is another example of a curve input argument that must reside in a specific plane:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/newsweptblend.html\">NewSweptBlend</a>\n</li></ul>\n<p>I would suggest that you split the algorithm into two parts and implement separate independent methods for each of them:\n\n<ul>\n<li>Determine the plane that a curve lies in.\n<li>Rotate a curve from a given plane to the XY plane.\n</li></li></ul>\n<p>For the first step, you could ask the curve for its start and end points and some point in the middle that does not lie on the same line as the other two. \nThe latter can possibly be obtained by asking the curve for its parameter range and evaluating it in the middle, or by tessellation. In case of tessellation, you could iterate through the tessellation points and use each one together with the start and end points to try and determine a valid plane. \n\n<p>In the case of the line, the tessellation only returns two points. \nI once heard that that is the only element that does that, all non-linear curves return at least three. \nSo you could use this property to determine that the curve is a line (and add an assertion as well, if you like).\n\n<p>Once you have three points that are not in a line, you can use those to determine the normal vector of the plane in which the curve lies, assuming that it is planar.\n\n<p>If you are working with tessellation points, you can add debug assertions to ensure that the other tessellation points (if there are any more) are all in the same plane.\n\n<p>Actually, I went ahead and implemented what I describe above:\n\n<pre class=\"code\">\n<span class=\"teal\">XYZ</span> GetCurveNormal( <span class=\"teal\">Curve</span> curve )\n{\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = curve.Tessellate();\n  <span class=\"blue\">int</span> n = pts.Count;\n \n  <span class=\"teal\">Debug</span>.Assert( 1 &lt; n, \n    <span class=\"maroon\">\"expected at least two points \"</span>\n    + <span class=\"maroon\">\"from curve tessellation\"</span> );\n \n  <span class=\"teal\">XYZ</span> p = pts[0];\n  <span class=\"teal\">XYZ</span> q = pts[n - 1];\n  <span class=\"teal\">XYZ</span> v = q - p;\n  <span class=\"teal\">XYZ</span> w, normal = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( 2 == n )\n  {\n    <span class=\"teal\">Debug</span>.Assert( curve <span class=\"blue\">is</span> <span class=\"teal\">Line</span>, \n      <span class=\"maroon\">\"expected non-line element to have \"</span>\n      + <span class=\"maroon\">\"more than two tessellation points\"</span> );\n \n    <span class=\"green\">// for non-vertical lines, use Z axis to </span>\n    <span class=\"green\">// span the plane, otherwise Y axis:</span>\n \n    <span class=\"blue\">double</span> dxy = <span class=\"teal\">Math</span>.Abs( v.X ) + <span class=\"teal\">Math</span>.Abs( v.Y );\n \n    w = ( dxy &gt; <span class=\"teal\">Util</span>.TolPointOnPlane )\n      ? <span class=\"teal\">XYZ</span>.BasisZ\n      : <span class=\"teal\">XYZ</span>.BasisY;\n \n    normal = v.CrossProduct( w ).Normalize();\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">int</span> i = 0;\n    <span class=\"blue\">while</span>( ++i &lt; n - 1 )\n    {\n      w = pts[i] - p;\n      normal = v.CrossProduct( w );\n      <span class=\"blue\">if</span>( !normal.IsZeroLength() )\n      {\n        normal = normal.Normalize();\n        <span class=\"blue\">break</span>;\n      }\n    }\n \n<span class=\"blue\">#if</span> DEBUG\n    {\n      <span class=\"teal\">XYZ</span> normal2;\n      <span class=\"blue\">while</span>( ++i &lt; n - 1 )\n      {\n        w = pts[i] - p;\n        normal2 = v.CrossProduct( w );\n        <span class=\"teal\">Debug</span>.Assert( normal2.IsZeroLength() \n          || <span class=\"teal\">Util</span>.IsZero( normal2.AngleTo( normal ) ),\n          <span class=\"maroon\">\"expected all points of curve to \"</span>\n          + <span class=\"maroon\">\"lie in same plane\"</span> );\n      }\n    }\n<span class=\"blue\">#endif</span> <span class=\"green\">// DEBUG</span>\n \n  }\n  <span class=\"blue\">return</span> normal;\n}\n</pre>\n<p>The second step is demonstrated in the <a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html\">polygon transformation</a> post I mentioned above.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]