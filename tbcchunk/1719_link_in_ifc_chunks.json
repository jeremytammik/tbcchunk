[
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\ntwitter:\n\nLink in and Analyse IFC File Zones and Spaces using the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/linkinifc\n\nI am working on extracting room and zone information from IFC files, both geometry and relationships, specifically room and zone boundaries and containment.\nMy new IfcSpaceZoneBoundaries add-in project retrieves this information, exports it to CSV and demonstrates a host of other important aspects\n&ndash; What happens on linking in an IFC file?\n&ndash; Read user configuration input settings from a file\n&ndash; Log messages, warnings and errors to an output file\n&ndash; Read the IFC properties stored as shared parameters\n&ndash; Extract the horizontal boundary information from a <code>DirectShape</code> element\n&ndash; Export the relevant data to <code>CSV</code>\n&ndash; Programmatically link in an IFC file into a Revit RVT project\n&ndash; Retrieve all currently linked-in IFC files from the Revit application...\n\nlinkedin:\n\nLink in and Analyse IFC File Zones and Spaces using the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/linkinifc\n\nI am working on extracting room and zone information from IFC files, both geometry and relationships, specifically room and zone boundaries and containment. My new IfcSpaceZoneBoundaries add-in project retrieves this information, exports it to CSV and demonstrates a host of other important aspects:\n\n- What happens on linking in an IFC file?\n- Read user configuration input settings from a file\n- Log messages, warnings and errors to an output file\n- Read the IFC properties stored as shared parameters\n- Extract the horizontal boundary information from a <code>DirectShape</code> element\n- Export the relevant data to <code>CSV</code>\n- Programmatically link in an IFC file into a Revit RVT project\n- Retrieve all currently linked-in IFC files from the Revit application...\n\nhttp://bit.ly/linkinifc\n\nof [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2019.0.145.4).\n\n-->"
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "Link in and Analyse IFC File Zones and Spaces",
    "local_header_href": "#link-in-and-analyse-ifc-file-zones-and-spaces",
    "chunk_text": "### Link in and Analyse IFC File Zones and Spaces\n\nI've been fiddling around a bit lately extracting room and zone information from IFC files, as you may have noticed from my previous discussions\nof [exporting room boundaries to CSV](https://thebuildingcoder.typepad.com/blog/2019/01/room-boundaries-to-csv-and-wpf-template.html)\nand [retrieving linked `IfcZone` elements using Python](https://thebuildingcoder.typepad.com/blog/2019/01/retrieving-linked-ifczone-elements-using-python.html).\n\nI now implemented more functionality in this direction, to extract both geometry and relationships, namely the room and zone boundaries as well as the room to zone containment or allocation.\n\nIt is included in my new [IfcSpaceZoneBoundaries add-in project](https://github.com/jeremytammik/IfcSpaceZoneBoundaries).\n\nIt retrieves this information and exports it to CSV.\n\nBesides that, it demonstrates a host of other important aspects:\n\n- Read user configuration input settings from a file\n- Log messages, warnings and errors to an output file\n- Read the IFC properties stored as shared parameters\n- Extract the horizontal boundary information from a `DirectShape` element\n  - Analyse the element solid to determine the bottom horizontal planar face\n  - Retrieve the sorted face vertices\n  - Convert from imperial feet to millimetres\n  - Store the millimetres as integer values\n- Export the relevant data to `CSV`\n- Programmatically link in an IFC file into a Revit RVT project\n- Retrieve all currently linked-in IFC files from the Revit application\n\nIn the process of implementing all this, I encountered and resolved a number of interesting issues.\n\nHere are some of them:\n\n- [What happens on linking in an IFC file?](#2) \n- [Linking in an IFC file programmatically](#3) \n- [Retrieving all linked-in IFC files](#4) \n- [Processing linked-in IFC files](#5) \n- [Room and zone data](#6) \n- [Geometric solid, face and vertex processing](#7)"
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "<a name=\"2\"></a> What Happens on Linking in an IFC File?",
    "local_header_href": "#a-name2a-what-happens-on-linking-in-an-ifc-file",
    "chunk_text": "#### <a name=\"2\"></a> What Happens on Linking in an IFC File?\n\nLinking in an IFC file behaves differently and generates different elements than importing it.\n\nFor instance, let's assume we are given an IFC file X.ifc and a new empty blank host RVT to link it into, e.g.:\n\n- X.ifc &ndash; original IFC file\n- X_ifc_link_host.rvt &ndash; empty RVT to link IFC file into\n \nThese additional files are generated by the linking-in process launched by calling the manual built-in Link IFC command:\n \n- X.ifc.RVT &ndash; RVT containing IFC data\n- X.ifc.log.html &ndash; messages, warnings and errors\n- X.ifc.sharedparameters.txt &ndash; IFC property definitions\n\nThe IFC data that I am interested in for rooms and zones originates in the geometry and properties.\n\nThe geometry is converted to `DirectShape` elements, the properties to shared parameters, and the IfcSpaceZoneBoundaries add-in can retrieve all of these and export them to CSV for further processing, e.g., integrating with Forge data in a viewer extension.\n\nI assume that the `.ifc.RVT` file created by this process contains all the information I need, i.e., the room and zone geometry and relationships as `DirectShape` elements.\n\nIn that case, I can read it directly from the `.ifc.RVT` file and have no need for the hosting RVT at all, except as a place from which to launch the linking command."
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "<a name=\"3\"></a> Linking in an IFC File Programmatically",
    "local_header_href": "#a-name3a-linking-in-an-ifc-file-programmatically",
    "chunk_text": "#### <a name=\"3\"></a> Linking in an IFC File Programmatically\n\nCan I launch the linking-in process programmatically as well?\n\nI succeeded at implementing a method that automatically links in an IFC file into a blank RVT project.\n\nI first thought the process of programmatically linking in the IFC file would be pretty straightforward.\nHowever, looking more closely at\nthe [`CreateFromIFC` method documentation](https://apidocs.co/apps/revit/2019/5b944368-4ce5-d523-5fd5-29d0363861ae.htm),\nit is probably not completely trivial. It says:\n\n> This function is one of a series of steps necessary for linking an IFC file.\nTo understand how it is used in context, please download the [IFC open source code](https://github.com/Autodesk/revit-ifc),\nand look in the [Revit.IFC.Import project](https://github.com/Autodesk/revit-ifc/tree/master/Source/Revit.IFC.Import)\nat [Importer.ImportIFC(ImporterIFC importer)](https://github.com/Autodesk/revit-ifc/blob/master/Source/Revit.IFC.Import/Importer.cs),\nunder the IFCImportAction.Link branch.\n\nBased on this information and private communication with Angel Velez, I implemented the following method `CreateIfcLink` to successfully link in an IFC file into a blank RVT project:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Create&nbsp;a&nbsp;link&nbsp;to&nbsp;a&nbsp;given&nbsp;IFC&nbsp;file.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;true&nbsp;on&nbsp;success.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;CreateIfcLink(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;ifcpath&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;rc&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IDictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;&nbsp;options\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;(&nbsp;2&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;options[<span style=\"color:#a31515;\">&quot;Action&quot;</span>]&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Link&quot;</span>;&nbsp;<span style=\"color:green;\">//&nbsp;default&nbsp;is&nbsp;&quot;Open&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;options[<span style=\"color:#a31515;\">&quot;Intent&quot;</span>]&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Reference&quot;</span>;&nbsp;<span style=\"color:green;\">//&nbsp;this&nbsp;is&nbsp;the&nbsp;default</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Importer</span>&nbsp;importer&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Importer</span>.CreateImporter(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;ifcpath,&nbsp;options&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">try</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;importer.ReferenceIFC(&nbsp;doc,&nbsp;ifcpath,&nbsp;options&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rc&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">catch</span>(&nbsp;<span style=\"color:#2b91af;\">Exception</span>&nbsp;ex&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;<span style=\"color:#2b91af;\">Importer</span>.TheLog&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Importer</span>.TheLog.LogError(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1,&nbsp;ex.Message,&nbsp;<span style=\"color:blue;\">false</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">finally</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;<span style=\"color:#2b91af;\">Importer</span>.TheLog&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Importer</span>.TheLog.Close();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;<span style=\"color:#2b91af;\">IFCImportFile</span>.TheFile&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IFCImportFile</span>.TheFile.Close();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;rc;\n&nbsp;&nbsp;}\n</pre>\n\nPlease note that this method requires references to the `RevitAPIIFC` and `Revit.IFC.Import` .NET assembly libraries."
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "<a name=\"4\"></a> Retrieving All Linked-In IFC Files",
    "local_header_href": "#a-name4a-retrieving-all-linked-in-ifc-files",
    "chunk_text": "#### <a name=\"4\"></a> Retrieving All Linked-In IFC Files\n\nAs said, the information I am after is only present in Revit if the IFC file is linked in to a host project, not imported.\n\nFurthermore, the linked-in IFC files are converted to `.ifc.RVT` documents and can thus be recognised by this extension.\n\nBased on that information and the assumption that no other files are equipped with this extension, I implemented a method `GetLinkedInIfcDocs` to retrieve all the linked-in IFC files from the Revit application:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Retrieve&nbsp;and&nbsp;return&nbsp;all&nbsp;linked-in&nbsp;IFC&nbsp;documents.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Document</span>&gt;&nbsp;GetLinkedInIfcDocs(&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Document</span>&gt;&nbsp;ifcdocs&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DocumentSet</span>&nbsp;docs&nbsp;=&nbsp;app.Documents;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;n&nbsp;=&nbsp;docs.Size;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">App</span>.Log(&nbsp;<span style=\"color:blue;\">string</span>.Format(&nbsp;<span style=\"color:#a31515;\">&quot;{0}&nbsp;open&nbsp;document{1}&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n,&nbsp;<span style=\"color:#2b91af;\">Util</span>.PluralSuffix(&nbsp;n&nbsp;)&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;d&nbsp;<span style=\"color:blue;\">in</span>&nbsp;docs&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;s&nbsp;=&nbsp;d.PathName;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;s.EndsWith(&nbsp;<span style=\"color:#a31515;\">&quot;.ifc.RVT&quot;</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;ifcdocs)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ifcdocs&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Document</span>&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ifcdocs.Add(&nbsp;d&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;ifcdocs;\n&nbsp;&nbsp;}\n</pre>"
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "<a name=\"5\"></a> Processing Linked-In IFC Files",
    "local_header_href": "#a-name5a-processing-linked-in-ifc-files",
    "chunk_text": "#### <a name=\"5\"></a> Processing Linked-In IFC Files\n\nThe add-in mainline `Execute` method uses the two methods above to retrieve all currently linked-in IFC files.\n\nIf none are found, we assume that a specific IFC file needs to be processed.\n\nIt is specified in the user configuration settings input file, formatted in `JSON`.\n\nThe IFC file path is read from the settings file, and a link to it is generated in the current document, which thus becomes the host file.\n\nAfter the linking-in process, we can retrieve all linked-in IFC documents again; this time, we expect to find at least the one we created the link for:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;Execute(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementSet</span>&nbsp;elements&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIApplication</span>&nbsp;uiapp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIDocument</span>&nbsp;uidoc&nbsp;=&nbsp;uiapp.ActiveUIDocument;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;=&nbsp;uiapp.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Retrieve&nbsp;all&nbsp;linked-in&nbsp;IFC&nbsp;documents</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">Document</span>&gt;&nbsp;ifcdocs&nbsp;=&nbsp;GetLinkedInIfcDocs(&nbsp;app&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;ifcdocs&nbsp;||&nbsp;0&nbsp;==&nbsp;ifcdocs.Count&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;If&nbsp;no&nbsp;IFC&nbsp;links&nbsp;are&nbsp;present,&nbsp;create&nbsp;one</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;path&nbsp;=&nbsp;<span style=\"color:#2b91af;\">App</span>.Settings.IfcInputFilePath;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;CreateIfcLink(&nbsp;doc,&nbsp;path&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ifcdocs&nbsp;=&nbsp;GetLinkedInIfcDocs(&nbsp;app&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;n&nbsp;=&nbsp;ifcdocs.Count;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">App</span>.Log(&nbsp;<span style=\"color:blue;\">string</span>.Format(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;{0}&nbsp;linked-in&nbsp;IFC&nbsp;document{1}&nbsp;found.&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n,&nbsp;<span style=\"color:#2b91af;\">Util</span>.PluralSuffix(&nbsp;n&nbsp;)&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;ifcdoc&nbsp;<span style=\"color:blue;\">in</span>&nbsp;ifcdocs&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">App</span>.Log(&nbsp;<span style=\"color:#a31515;\">&quot;Linked-in&nbsp;IFC&nbsp;document:&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;ifcdoc.PathName&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">RoomZoneExporter</span>&nbsp;a&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">RoomZoneExporter</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ifcdoc&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;(&nbsp;0&nbsp;&lt;&nbsp;n&nbsp;)&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;?&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:&nbsp;<span style=\"color:#2b91af;\">Result</span>.Failed;\n&nbsp;&nbsp;}\n}\n</pre>"
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "<a name=\"6\"></a> Room and Zone Data",
    "local_header_href": "#a-name6a-room-and-zone-data",
    "chunk_text": "#### <a name=\"6\"></a> Room and Zone Data\n\nThe `RoomZoneData` class retrieves and stores the information exported to CSV output for each room and zone:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">RoomZoneData</span>\n{\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;These&nbsp;are&nbsp;the&nbsp;data&nbsp;fields&nbsp;exported&nbsp;for&nbsp;each&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;room&nbsp;and&nbsp;zone.&nbsp;The&nbsp;first&nbsp;is&nbsp;simply&nbsp;&#39;S&#39;&nbsp;or&nbsp;&#39;Z&#39;.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;The&nbsp;zone&nbsp;and&nbsp;layer&nbsp;properties&nbsp;are&nbsp;only&nbsp;set&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;on&nbsp;room&nbsp;object&nbsp;records.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Space_or_Zone;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;GUID;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Name;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Zone;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Layer;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Pset;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Z;\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Boundary;\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Predicate&nbsp;indicating&nbsp;a&nbsp;valid&nbsp;room&nbsp;or&nbsp;zone</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsRoomOrZone\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">get</span>&nbsp;{&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;Space_or_Zone;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Private&nbsp;constant&nbsp;strings&nbsp;for&nbsp;retrieving&nbsp;IFC</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;properties</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_pname_export_as&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;IfcExportAs&quot;</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_pname_guid&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;IfcGUID&quot;</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_pname_name&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;IfcName&quot;</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_pname_layer&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;IfcPresentationLayer&quot;</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_pname_pset&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;IfcPropertySetList&quot;</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_pname_zone&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;IfcZone&quot;</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_export_as_room&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;IfcSpace.INTERNAL&quot;</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_export_as_zone&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;IfcZone&quot;</span>;\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Export&nbsp;CSV&nbsp;format&nbsp;using&nbsp;comma&nbsp;separated&nbsp;fields&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;with&nbsp;no&nbsp;other&nbsp;delimiters</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">const</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_format_string&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;{0},{1},{2},{3},{4},{5},{6},{7}&quot;</span>;\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Instantiate&nbsp;a&nbsp;room&nbsp;or&nbsp;zone&nbsp;data&nbsp;object&nbsp;from</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;a&nbsp;given&nbsp;Revit&nbsp;element&nbsp;`e`</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;RoomZoneData(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;export_as&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.GetStringParamValue(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e,&nbsp;_pname_export_as&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;export_as.Equals(&nbsp;_export_as_room&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Space_or_Zone&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;S&quot;</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;export_as.Equals(&nbsp;_export_as_zone&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Space_or_Zone&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Z&quot;</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;IsRoomOrZone&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GUID&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.GetStringParamValue(&nbsp;e,&nbsp;_pname_guid&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.GetStringParamValue(&nbsp;e,&nbsp;_pname_name&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zone&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.GetStringParamValue(&nbsp;e,&nbsp;_pname_zone&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Layer&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.GetStringParamValue(&nbsp;e,&nbsp;_pname_layer&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pset&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.GetStringParamValue(&nbsp;e,&nbsp;_pname_pset&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boundary&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Util</span>.GetBottomFaceBoundaryStringAndZ(&nbsp;e,&nbsp;<span style=\"color:blue;\">out</span>&nbsp;Z&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;a&nbsp;string&nbsp;to&nbsp;export&nbsp;room&nbsp;or&nbsp;zone&nbsp;data&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;to&nbsp;CSV</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;AsString()\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">string</span>.Format(&nbsp;_format_string,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Space_or_Zone,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GUID,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zone,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Layer,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Pset,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Z,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Boundary&nbsp;);\n&nbsp;&nbsp;}\n}\n</pre>"
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "<a name=\"7\"></a> Geometric Solid, Face and Vertex Processing",
    "local_header_href": "#a-name7a-geometric-solid-face-and-vertex-processing",
    "chunk_text": "#### <a name=\"7\"></a> Geometric Solid, Face and Vertex Processing\n\nI have implemented and documented all kinds of algorithms to retrieve and process geometric solid, face and vertex information in the Revit API many times over in the past, so it has become pretty straightforward to adapt to new needs now.\n\nI won't dive into any explicit details here. You can look at the source code yourself. It is pretty self-explanatory.\n\nThe `Util` class handles the nitty-gritty details of retrieving the bottom face of a solid and its vertices.\n\nThe `IntPoint2d` and `IntPoint3d` classes convert the units from imperial feet to millimetres and store the latter as integers, eliminating some precision problems and simplifying the file formatting, since no more decimal places are needed.\n\n<center>\n<img src=\"img/no_parking_zone.png\" alt=\"Zone\" width=\"256\">\n</center>\n\n<!--\n\n- create repo and stand-alone add-in for RoomBoundaryExporter\n\n- demonstrate defining input parameters for RoomBoundaryExporter da4r via input parameter file\n  add a filter parameter, e.g., filter for specific level or floor"
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "<a name=\"8\"></a> Email Exchange with Petr",
    "local_header_href": "#a-name8a-email-exchange-with-petr",
    "chunk_text": "#### <a name=\"8\"></a> Email Exchange with Petr\n\nThe CSV file is read indirectly by the viewer, using a custom javascript viewer extension.\n\nThe extension adds geometry and data to the model in the viewer.\n\nAs far as I can tell, easiest and most direct immediate solution to maintain coexisting rooms and spaces would be to create a dictionary mapping all rooms to the spaces containing them, and store that dictionary in a separate container of some kind, preferably a simple text file.\n \nAs far as I can tell, using that dictionary and the Revit add-in already implemented, we could create an app for Forge Design Automation for Revit that handles all the requirements directly taking only an IFC file as input.\n\nDesign Automation for Revit does not work with IFC right now. (we have also just realized that this is not listed in our \"limitations\" section and have made a note to add it --  https://forge.autodesk.com/en/docs/design-automation/v3/developers_guide/quotas/)\n\nif all else fails, we will have to read the native IFC file instead and extract the boundaries from that.\n\ni assume that the .ifc.RVT file created by the linking process (on the desktop) contains all the relevant information, and that the combination link_host.rvt + .ifc.RVT can be opened and processed in DA4R.\n\ni now confirmed that the development team believe that this is possible:\n \nrevit desktop add-in can create linked-in IFC file. that generates an .ifc.RVT from it.\n\nda4r can process the .ifc.RVT file, and has no need for any IFC functionality to do so."
  },
  {
    "original_filename": "1719_link_in_ifc",
    "header_text": "<a name=\"6\"></a> Email Exchange with Angel",
    "local_header_href": "#a-name6a-email-exchange-with-angel",
    "chunk_text": "#### <a name=\"6\"></a> Email Exchange with Angel\n\nHere a code snippet\n\nIf you really want the shortest code possible, you can remove the try/catch and ignore options[\"Intent\"] = \"Reference\";.\n\nreadme\n\n-->"
  }
]