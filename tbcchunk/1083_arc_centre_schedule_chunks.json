[
  {
    "original_filename": "1083_arc_centre_schedule",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1083_arc_centre_schedule",
    "header_text": "Happy New Year!",
    "local_header_href": "#happy-new-year",
    "chunk_text": "<h3>Happy New Year!</h3><p>Welcome back after the break and</p><p style=\"text-align:center; font-size:xx-large; font-weight:bold; color:orange; text-decoration:blink;\">Happy New Year!</p><p>I have already been busily answering cases for the past few days.</p><p>Here are two of the topics that came up:</p><ul>\n<li><a href=\"#2\">Access to model arc centre point reference</a></li>\n<li><a href=\"#3\">API-generated schedules on sheets lack title</a></li>\n</ul><p>Before getting to those, let me present a photo and an interesting syntactic challenge from my non-technical activities in the past ten days.</p><p>I spent some time after Christmas in the hills in Toggenburg, and we had some very fine weather and views:</p><center>\n<img alt=\"Winter scene in Toggenburg\" src=\"file:////j/photo/jeremy/2013/2013-12-31_wildhaus/256.jpg\" width=\"400\"/>\n</center><p>The syntactic challenge is perfectly normal English, and simply consists in understanding the following valid sentence:\nBuffalo buffalo Buffalo buffalo buffalo buffalo Buffalo buffalo.</p><p>For a few hints, please refer to this interesting\n\n<a href=\"http://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_buffalo_buffalo_Buffalo_buffalo\">\nexplanation on Wikipedia</a>.</p><p>Back to the Revit API...</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1083_arc_centre_schedule",
    "header_text": "Access to Model Arc Centre Point Reference",
    "local_header_href": "#access-to-model-arc-centre-point-reference",
    "chunk_text": "<h4>Access to Model Arc Centre Point Reference</h4><p><strong>Question:</strong> How can I obtain a valid reference to a model arc centre point?</p><p>Given an extrusion element in a family file, you can access its sketch and individual geometric sketch curve elements like this in managed C++:</p><pre class=\"code\">\n  Extrusion ^ext = createExtrusion(...)\n\n  CurveArrArray ^sketchCvArrArr = ext-&gt;Sketch-&gt;Profile;\n\n  for each( CurveArray ^oneCvLoop in sketchCvArrArr )\n  {\n    for each( Curve ^oneSketchCv in oneCvLoop )\n    {\n\n      // ...\n\n    }\n  }\n</pre><p>The curve end point references are provided by the Curve::EndPointReference property and can be used to constrain profile curves to reference planes, for example.</p><p>However, we could not find a way to obtain a centre point reference for arc sketch curves.</p><p>The ModelArc class provides a CenterPointReference property.</p><p>However, attempting to cast a geometric curve to a model curve obviously returns a null result.</p><p>Our goal is to lock the arc centre to the intersection point of two reference planes.</p><p>Can you suggest any way to achieve this?</p><p><strong>Answer:</strong> Looking at the Model Curve and Curve class hierarchy shows that the direct conversion is not possible.</p><p>The CenterPointReference property is declared at CurveElement, so ModelCurve will also have it.\nYou can create a ModelArc with a geometric arc (Curve), but it will appear in the project (be added to the database).</p><p>The Curve itself is in-memory only.\nFrom a Curve, you can call Document.Create.NewModelCurve, which will add a new model curve and modify the document.\nHowever, that will still not provide the reference that you are after.</p><p>On the other hand, the geometric sketch curve itself also provides a Reference property, and that can be used to access the existing model curve in the sketch.\nFrom that, you can obtain the centre point reference, in case of an arc element.</p><p>Here is a snapshot of the debugger showing code that retrieves the sketch model curve in order to get the model arc centre point reference that can be used to create a radial dimension:</p><center>\n<img alt=\"Getting element by reference\" src=\"img/getting_element_by_ref.png\" width=\"400\"/>\n</center><p>This method is perfectly reliable, since Document::GetElement(Reference) always returns the actual model curve element itself.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1083_arc_centre_schedule",
    "header_text": "API-generated Schedules on Sheets Lack Title",
    "local_header_href": "#api-generated-schedules-on-sheets-lack-title",
    "chunk_text": "<h4>API-generated Schedules on Sheets Lack Title</h4><p><strong>Question:</strong> I am working on a project that involves building schedules and placing them on sheets programmatically.\nThe ones I create with the API don't include a title.</p><p>The issue can be illustrated with the Revit SDK ScheduleCreation sample project.</p><p>Here is a snapshot of a manually created schedule:</p><center>\n<img alt=\"Schedule created manually\" src=\"img/schedule_created_manually.jpg\" width=\"500\"/>\n</center><p></p><p>The programmatically generated one looks like this:</p><center>\n<img alt=\"Schedule created through API\" src=\"img/schedule_created_through_api.jpg\" width=\"500\"/>\n</center><p><strong>Answer:</strong> Let's start by reiterating the history of this feature:\nthe Schedule API was initially introduced in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#2\">\nRevit 2013</a>,\n\nenabling an add-in to create schedules and add or remove fields and filters, control sorting and grouping, add, read, place a schedule on a sheet or modify its placement, and access all the schedule data, e.g. to export to a text file.</p><p>In\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/revit-2014-api-and-room-plan-view-boundary-polygon-loops.html\">\nRevit 2014</a> (fourth\n\nbullet item), it was enhanced to provide formatting control and read-write access to individual data items.\nMore details on the feature are provided there by the Revit 2014 DevDays presentation, recording and sample code.</p><p>It is also discussed in the overview of the 'ViewSchedule changes' in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">\nWhat's New in the Revit 2014</a>.</p><p>The Schedule API functionality is illustrated by the Revit 2013 ScheduleCreation that you tested and the Revit 2014 ScheduleAutomaticFormatter and ScheduleToHTML SDK samples.</p><p>Now, to address your actual question:</p><p>The issue you encountered is known and was resolved in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/revit-2014-update-release-1.html#2\">\nRevit 2014 update release 1</a>:</p><ul>\n<li>Creates the default schedule header automatically when schedules are created by ViewSchedule.Create methods.</li>\n<li>Allows ViewSchedule.GroupHeaders to succeed even if the schedule is not active.</li>\n</ul><p>Have you installed the update release 1, or, better still, 2?</p><p>I would recommend installing each update release as soon as it becomes available, if you can.</p><p><strong>Response:</strong> Applying the Update Release 2 patch fixed the title problem.\n\n<p>Thank you, and I will add keeping up on these to my New Year's resolutions!</p>\n<center>\n<img alt=\"Raring to go on towards new challenges in the New Year\" src=\"file:////j/photo/jeremy/2013/2013-12-31_wildhaus/247_cropped.jpg\" width=\"300\"/>\n</center>\n</p>"
  }
]