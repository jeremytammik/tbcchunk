[
  {
    "original_filename": "0199_family_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<style>\nh3 {\n  font-size : x-large;\n}\n\nh4 {\n  font-size : larger;\n}\n\nh5 {\n  font-size : medium;\n  font-style : normal;\n  font-weight : normal;\n  text-decoration : underline;\n}\n</style>\n</head>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "The Revit Family API",
    "local_header_href": "#the-revit-family-api",
    "chunk_text": "<h3>The Revit Family API</h3><p>Here is a rather lengthy and rich post to start off the week, describing the new family API introduced in Revit 2010 and including both an overview and in-depth information.\n\n<p>These are the main topics covered:</p>\n<ul>\n<li><a href=\"#1\">Creating a Family through the User Interface</a>.\n<li><a href=\"#2\">Creating a Family Programmatically</a>.\n<li><a href=\"#3\">Family API Samples in the Revit SDK</a>.\n<li><a href=\"#4\">Family API Labs: Creating an Example Family</a>.\n<li><a href=\"#5\">Family API Webcast and Materials</a>.</li>\n</li></li></li></li></ul>\n<p>The text presented here is also a script for the Revit Family API slide deck which was used for the webcast mentioned at the end of this post.\nIf a picture says more than a thousand words to you, then you should download that slide deck, which will provide a couple of thousand words' worth of images to accompany this raw text.</p>\n<h5>Background</h5>\n<p>The concept of families is an enormous strength of Revit, but until Revit 2010, no programming access was available in the family context. Therefore, two large and completely disjunct developer communities have evolved around the Revit products, creating either:</p>\n<ul>\n<li>Revit applications using the API.</li>\n<li>Revit content with no API access.</li>\n</ul>\n<p>The Family API was the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/api-wish-list-survey-reminder.html\">\ntop wish list item</a>\n\nand was made available for the first time in Revit 2010. It provides huge potential for synergy uniting the two separate camps. It enables:</p>\n<ul>\n<li>Use of the Revit API in the family editor.</li>\n<li>Extract and modify existing or create new family content.</li>\n<li>Automatic library generation.</li>\n</ul>\n<a name=\"1\"></a>\n<h4>Creating a Family through the User Interface</h4>\n<p>A non-trivial family can have a complex internal structure and many decisions need to be taken. A large body of experience around building families and family libraries has been developed before the introduction of the API. It is useful to gather some experience creating families manually before implementing code to do so automatically. Just like the standard Revit API, almost all the features provided by the family API are available through the user interface as well.</p>\n<h5>What is a Revit Family?</h5>\n<p>Before discussing the family API, it is important to understand the basics of Revit families and their definition.</p>\n<p>A Revit family is a graphic representation of building objects and symbols. It can include geometry in 2D or 3D as well as data that supports the definition and creation of object instances. A family defines one or more types or symbols. A type or symbol can be inserted into the project to create a family instance.</p>\n<p>There are three different classes of families, system, standard and in-place:</p>\n<ul>\n<li>System families are stored in the project template and used for objects such as Walls, Roofs, Floors, Ceilings, Rebar, etc.</li>\n<li>Standard families are defined externally in freestanding \".rfa\" files and used for objects such as Windows, Doors, Furniture, Beams, Ductwork, etc.</li>\n<li>In-Place families are used for \"one of kind objects\".</li>\n</ul>\n<p>The new family API provided in Revit 2010 addresses the standard families.</p>\n<h5>Revit Families - Where to Begin</h5>\n<p>A new family is always based on a family template file, if created from scratch, or on an existing family, which is enhanced in some way. Regardless of whether you are using the UI or API, the first thing you will need to decide is which template or family file you want to begin with.</p>\n<ul>\n<li>Create a completely new family starting from a family template.</li>\n<li>Enhance an existing family.</li>\n</ul>\n<p>You need to choose which approach to take, as well as which template or family file to start with. There are plenty of templates to choose from. Other decisions that need to be taken and which influence this choice include</p>\n<ul>\n<li>Category?\n<li>Is the family 2D or 3D?\n<li>Model or detail component?\n<li>Hosted or non-hosted: Wall, Ceiling, etc.\n<li>Placement type: Free, two point...\n<li>Specialty: Lighting, RPC...\n</li></li></li></li></li></li></ul>\n<h5>Revit Family Flavours</h5>\n<p>Just like the Revit product, Revit families also come in three flavours for architecture, MEP (mechanical, engineering, and plumbing), and structure. Most of the functionality is common to all three. Here are some aspects of the flavours:</p>\n<p>Revit Architecture:</p>\n<ul>\n<li>Basic building components with simplistic interactions in the model.</li>\n<li>Free placement objects - casework, furniture, etc.\n<li>Two point placement objects - detail components, hosted objects.</li>\n<li>Hosted objects: windows, doors, columns (\"level to level\"), ceiling or \"wall based\" lighting fixtures.</li>\n</li></ul>\n<p>Revit Structure:</p>\n<ul>\n<li>Additional components with complex interactions with other objects.</li>\n<li>Framing - beams (\"beams to beam\", \"beam to column\"), columns.</li>\n<li>Trusses - layout for girder trusses; boundary conditions.</li>\n<li>Span direction symbols; reinforcement symbols - area reinforcement expands to find edges, path reinforcement.</li>\n</ul>\n<p>Revit MEP:</p>\n<ul>\n<li>Connectors allowing objects to resize based on connected neighbour elements.</li>\n</ul>\n<h5>Revit Family Editor</h5>\n<p>Revit offers six basic family editors:</p>\n<ul>\n<li>3D model, annotation, detail, rebar, truss and new conceptual mass.</li>\n</ul>\n<p>Of the six basic family editors, the conceptual mass creation one is new to 2010. Depending on the editor, you will see a different set of available tools and building blocks. For instance, you will see tools to create forms in the model editor, but not in the annotation one. If you are using the truss editor, you will have access to the top and bottom chord, which will be shown in the model editor.</p>\n<p>Each family editor is tied to the chosen family template and provides a specific feature set:</p>\n<ul>\n<li>Geometry - extrusions, blends, sweeps, revolves.</li>\n<li>Lines - model, symbolic, detail.</li>\n<li>Basic tools - copy, mirror, paint, join/unjoin, cut geometry/don't cut.</li>\n<li>References - reference planes, reference lines.</li>\n<li>Annotation tools - labels.</li>\n<li>Advanced tools - formulas, nesting, arrays, type catalogues.</li>\n<li>MEP tools - add connectors.</li>\n</ul>\n<h5>Revit Families Best Practice</h5>\n<p>Families are a powerful feature in Revit. Creating a family can be fun, and it can also be complex. When it becomes complex, it requires good planning. Here are some suggestions for a process for building families by the Autodesk Revit content manager Steve Campbell. It describes the manual definition of a family. The same applies to a programmatic approach as well. A key to understanding the family API is to understand the UI.</p>\n<p>It is highly recommended to follow this structured process when building families. It needs to be learned and practiced. Systematically following this process is one of the most important aspects of family creation.</p>\n<p>Process order:</p>\n<ol>\n<li>Plan (insertion point, parametric origin).</li>\n<li>Lay out reference planes (the bones).</li>\n<li>Add parameters.</li>\n<li>Add multiple host thickness types.</li>\n<li>Add two or more types.</li>\n<li>Flex types and host (testing procedure).</li>\n<li>Add a single level of geometry.</li>\n<li>Repeat steps 6 and 7 until you are satisfied with the results.</li>\n<li>Test in project environment (create testing project).</li>\n</ol>\n<h5>Revit Family Possibilities</h5>\n<p>You can create quite complex objects and behaviour using Revit families. Here are a few of the possibilities:</p>\n<ul>\n<li>Formulas to control behaviour, visibility, arrays.</li>\n<li>Arrays and nesting for repeatable, resizable elements across an array.</li>\n<li>Advanced nesting with subcomponents that can be swapped.</li>\n<li>Reference lines and angular movement.</li>\n</ul>\n<p>Formulas can be used to control behaviour, visibility, arrays, e.g. to define arrays of bolts depending on the size of a plate.</p>\n<p>Arraying nested components allows the user to create families with repeatable elements across an array that can resize based on user input or rules. For example, a bookshelf with arrayed shelves, mullion patterns based on rules, and open web joists that adjust based on length and height.</p>\n<p>Advanced nesting can make use of nested families with family type parameters that can provide flexible components with swappable sub-components such as nested door panels, frames, hardware, playground equipment, swappable panels and components.</p>\n<p>Reference lines allow geometry to move about in an angular fashion. They contain two endpoints and two built in work planes that can be parametrically controlled. Some simple examples include a door swing that can change the opening angle, or a light fixture head that moves and points. A more complex example is an excavator arm that can bend and rotate about three or more pivot points.</p>\n<a name=\"2\"></a>\n<h4>Creating a Family Programmatically</h4>\n<p>Now that the basics of Revit families are clear, we can look at the new access to this functionality provided by the new family API.</p>\n<h5>Family API Usage</h5>\n<p>Exposure of the family API is probably the most important enhancement to the Revit API in 2010. The concept of component family is a unique feature and strength of Revit. This was the most wanted feature in the Revit API community and we expect the effect and growth in possibilities with the availability of family API will be dramatic. </p>\n<p>An obvious opportunity provided by the new family API is the automatic generation of content from databases or other library sources.\nIt is also possible to extract a family definition out of a project and store it back into an external family file.\nThe document <i>Revit Platform API Changes and Additions.doc</i> in the Revit SDK folder provides an overview of the family API.\nFamily API specific samples are located in the Revit SDK samples <code>FamilyCreation</code> subfolder.</p>\n<p>Here are some of the new supported features:</p>\n<ul>\n<li>Enable use of the Revit API within the family editor context.</li>\n<li>Create and modify family content.</li>\n<li>Automatic library generation from database or other library specification.</li>\n<li>Extract family definitions from existing projects.</li>\n<li>Define references and constraints to drive model geometry parametrically, formulas to drive parameter values, and annotation and dimensioning.</li>\n<li>Control detailed visibility of family types and their elements.</li>\n<li>Control loading behaviour of a family.</li>\n</ul>\n<h5>Document and Family Manager Classes</h5>\n<p>The Revit API Document now has some added methods and properties for managing families:</p>\n<ul>\n<li>EditFamily - edit a family loaded in a project document.</li>\n<li>FamilyCreate - return a FamilyItemCreate object to create new instances of elements within a family document, analogous to the Create object in a project.</li>\n<li>FamilyManager - return a FamilyManager object providing access to family types and parameters.</li>\n<li>IsFamilyDocument - identify whether the current document is a family document.</li>\n<li>OwnerFamily - return the owning family of this family document.</li>\n</ul>\n<p>Within a family document, the family manager class provides the following new functionality:</p>\n<ul>\n<li>Add, remove and rename types.</li>\n<li>Add and remove parameters.</li>\n<li>Set values and formulas.</li>\n</ul>\n<h5>Creating Family Content</h5>\n<p>The FamilyCreate property on the family document returns a FamilyItemFactory instance. This family item factory object is a utility object used to create new instances of elements within the family document. Just like other Revit elements, these are instantiated using dedicated methods instead of the .NET new operator. This ensures that the elements created are correctly added to and hooked up within the family document. A wide range of elements types can be created, including alignments, dimensioning, annotation, curves, levels, and solid forms for conceptual design.</p>\n<p>The family item factory utility object</p>\n<ul>\n<li>Creates new instances of elements within the family document.</li>\n<li>Provides dedicated creation methods instead of the .NET new operator.</li>\n</ul>\n<p>Elements types that can be created include:</p>\n<ul>\n<li>Alignment.</li>\n<li>Connector (MEP only).</li>\n<li>Dimensioning.</li>\n<li>Annotation.</li>\n<li>Curves.</li>\n<li>Levels.</li>\n<li>Solids forms.</li>\n</ul>\n<h5>Visibility Settings </h5>\n<p>A critical topic when building family content are the visibility settings. They are now accessible for each element in a family through the new FamilyElementVisibility class.</p>\n<p>Each element in a family has its own visibility settings which define which levels of detail and which types of views it appears in. These options are critical to building good content. For example, intricate details of a family should only be visible in the fine detail views. 3D solid content could optionally be suppressed in plan views, where light weight 2D line work could be displayed instead. Such an approach can make a substantial performance difference, especially in large building models.</p>\n<p>Every element in the family has own visibility settings managed by the FamilyElementVisibility class defining:</p>\n<ul>\n<li>Which levels of detail it appears in.</li>\n<li>Which types of views it appears in.</li>\n</ul>\n<h5>Loading Control</h5>\n<p>The Document.LoadFamily method has been enhanced and new overloads have been added, which can help to handle situations such as when a family already exists in the project. The following overloads are now provided:</p>\n<ul>\n<li>LoadFamily(Document)  - loads the contents of this family document into another document.</li>\n<li>LoadFamily(String) - loads an entire family and all its types into the document.</li>\n<li>LoadFamily(String, Family) - loads an entire family and all its types into the document and provides a reference to the loaded family.</li>\n<li>LoadFamily(Document, IFamilyLoadOptions) - loads the contents of this family document into another document.</li>\n</ul>\n<p>The IFamilyLoadOptions argument to the last overload defines an interface which specifies two call-backs for handling family load situations: OnFamilyFound and OnSharedFamilyFound. These are called when a family or a shared family is already present in the target document.</p>\n<a name=\"3\"></a>\n<h4>Family API Samples in the Revit SDK</h4>\n<p>A number of new samples illustrating the family API have been added to the Revit SDK. They are located in the FamilyCreation subfolder in the SDK Samples directory.</p>\n<h5>AutoJoin</h5>\n<p>AutoJoin automatically joins geometry of multiple generic forms for use in family modelling and massing. It uses the method Document.CombineElements to join geometry between overlapping generic forms. It also includes a utility method to check geometry object overlap, based on the Face.Intersect(Curve) method.</p>\n<h5>AutoParameter</h5>\n<p>AutoParameter implements batch mode automatic addition of shared or non-shared parameters to one or more family documents. It optionally processes either the currently active family document or all families in a specified folder. It uses the FamilyManager class AddParameter methods and reads its input data from parameter text files in a format similar to the Revit shared parameter files.</p>\n<h5>CreateAirHandler - RME</h5>\n<p>CreateAirHandler is a Revit MEP sample to create an air handling unit including MEP pipe and duct connectors. It shows how to check the template family category to verify that a valid starting point is selected. It make use of the FamilyItemFactory class NewExtrusion, NewPipeConnector, and NewDuctConnector methods, sets up the proper connector parameters, and uses Document.CombineElements to join the extrusions to make up the air handler body.</p>\n<h5>CreateTruss - RST</h5>\n<p>CreateTruss is a Revit Structure sample that creates a mono truss in a truss family document. The truss curves are created using NewModelCurve, the truss type is set through the ModelCurve TrussCurveType property, and constraints are added to the truss curves with NewAlignment.</p>\n<h5>DWGFamilyCreation</h5>\n<p>DWGFamilyCreation shows how to import a DWG file into a family document add two type parameters to the imported instance: DWGFileName specifying the DWG file name, and ImportTime storing the data and time when it was imported.</p>\n<h5>GenericModelCreation</h5>\n<p>GenericModelCreation creates a generic model using extrusion, blend, revolution, sweep and swept blend elements. It checks that the open document is indeed a family one or otherwise creates a new family document. It exercises the CreateSketchPlane, NewLineBound, and FamilyItemFactory methods to create profiles and shapes.</p>\n<h5>TypeRegeneration</h5>\n<p>The TypeRegeneration sample uses the FamilyManager Types property to determine all types defined in the current family document, and CurrentType to iterate through them. It reports whether all types regenerated successfully, and logs any errors that occurred to a file.</p>\n<h5>ValidateParameters</h5>\n<p>ValidateParameters checks whether every type in the current family document has valid values for certain parameters and logs the results to a file. This sample can be run in two modes, either as an external application subscribing to DocumentSaving and DocumentSavingAs events to run the check automatically every time a document is opened, or as an external command to be launched manually when required.</p>\n<h5>WindowWizard</h5>\n<p>WindowWizard shows how to create a new window family via a wizard style user interface. It needs to be started in a window family template, e.g. Metric Window.rft. It prompts the user to define input dimensions for various window parameters and materials, and then creates the required geometry, constraints and types using elements including extrusions, alignments, dimensions, reference planes, and family types.</p>\n<a name=\"4\"></a>\n<h4>Family API Labs: Creating an Example Family</h4>\n<p>The Revit Family API Labs is a collection of exercises which introduce you step by step to the creation of a column family. The objective is to learn the basics of the family API. The labs start with the basics and then proceed to more advanced aspects. Full documentation of and instructions for each step are included in separate documents for C# and VB.</p>\n<h5>Family API Labs</h5>\n<ul>\n<li>Lab1 - define a column with rectangular profile.</li>\n<li>Lab2 - define a column with L-shape profile.</li>\n<li>Lab3 - add formula and materials.</li>\n<li>Lab4 - add visibility control.</li>\n</ul>\n<h5>Lab 1 - Create Rectangular Column</h5>\n<ul>\n<li>Check the family context.</li>\n<li>Create a simple solid using extrusion.</li>\n<li>Set alignments.</li>\n<li>Add types.</li>\n</ul>\n<p>Classes and methods:</p>\n<pre>\ndoc.IsFamilyDocument()\ndoc.OwnerFamily.FamilyCategory.Name\ndoc.FamilyCreate.NewExtrusion()\ndoc.FamilyCreate.NewAlignment()\nfamilyMgr = doc.FamilyManager\nfamilyMgr.NewType()\nfamilyMgr.Parameter(); familyMgr.Set()\n</pre>\n<h5>Lab 2 - Create L-Shaped Column</h5>\n<ul>\n<li>Add reference planes.</li>\n<li>Add parameters.</li>\n<li>Add dimensions.</li>\n</ul>\n<p>Classes and methods:</p>\n<pre>\ndoc.FamilyCreate.NewReferencePlane()\nfamilyMgr.AddParameter()\ndoc.FamilyCreate.NewDimension()\n</pre>\n<h5>Lab 3 - Add Formulas and Materials</h5>\n<ul>\n<li>Add formulae.</li>\n<li>Add materials.</li>\n</ul>\n<p>Classes and methods:</p>\n<pre>\nfamilyMgr.SetFormula()\npSolid.Parameter(\"Material\")\nfamilyMgr.AddParameter(\"MyColumnFinish\", BuiltInParameterGroup.PG_MATERIALS, ParameterType.Material, True)\nfamilyMgr.AssociateElementParameterToFamilyParameter()\n</pre>\n<h5>Lab 4 - Add Visibility Control</h5>\n<ul>\n<li>Add line representation.</li>\n<li>Add visibility control.</li>\n</ul>\n<p>Classes and methods:</p>\n<pre>\ndoc.FamilyCreate.NewSymbolicCurve()\ndoc.FamilyCreate.NewModelCurve()\nFamilyElementVisibility(FamilyElementVisibilityType.ViewSpecific/Model)\nFamilyElementVisibility.IsShownInFine, etc.\npLine.SetVisibility(pFamilyElementVisibility)\n</pre>\n<h5>Learning More</h5>\n<p>Here is an overview of some available resources for further learning:</p>\n<ul>\n<li>Online Help, Developer's Guide and SDK Samples\n\n<li>Families Guide\n<br/><a href=\"http://usa.autodesk.com/adsk/servlet/item?siteID=123112&amp;id=13376394\">\nhttp://usa.autodesk.com/adsk/servlet/item?siteID=123112&amp;id=13376394</a></li>\n<li>DevTV Introduction to Revit Programming\n<br/><a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=2484975\">\nhttp://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=2484975</a></li>\n<li>Recording of Revit 2010 Programming Introduction Webcast\n<br/><a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nhttp://www.adskconsulting.com/adn/cs/api_course_sched.php</a> &gt; Revit API</li>\n<li>Discussion Group\n<br/><a href=\"http://discussion.autodesk.com\">\nhttp://discussion.autodesk.com</a> &gt; Revit Architecture &gt; Revit API</li>\n<li>API Training Classes\n<br/><a href=\"http://www.autodesk.com/apitraining\">\nhttp://www.autodesk.com/apitraining</a></li>\n<li>The Building Coder, Jeremy Tammik's Revit API Blog\n<br/><a href=\"http://thebuildingcoder.typepad.com\">\nhttp://thebuildingcoder.typepad.com</a></li>\n<li>Autodesk Developer Network\n<br/><a href=\"http://www.autodesk.com/joinadn\">\nhttp://www.autodesk.com/joinadn</a></li>\n<li>DevHelp Online for ADN members\n<br/><a href=\"http://adn.autodesk.com\">\nhttp://adn.autodesk.com</a></li>\n</li></ul>\n<a name=\"5\"></a>\n<h4>Family API Webcast and Materials</h4>\n<p>We held a successful\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/revit-family-api-webcast.html\">\nwebcast</a>\n\non the Revit Family API on Thursday July 23<sup>rd</sup> 2009.\n\nThe supporting material and recording from this webcast is now available.\n\nTo access the material from any ADN webcast, you can go to the\n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nADN training schedule site</a>\n\nand click on the corresponding download link.\nYou can find this specific webcast by filtering for 'Revit Family API'.\nHere is a direct link to\n\n<a href=\"http://download.autodesk.com/media/adn/Revit_2010_Family_API_Webcast-July2009.zip\">\ndownload the webcast material</a>, which includes the following items:\n\n<ul>\n<li><strong>Presentation:</strong> Revit 2010 Family_API.pptx.\n<li><strong>Source Code for Labs:</strong> Revit Family Labs including Visual Studio solution file, Revit.ini information, C# and VB source code, instructions, and a Revit RFT template file.\n<li><strong>Recording:</strong> Revit Family API Webcast recording.\n<li><strong>Q &amp; A:</strong> Revit 2010 Family API Webcast - Questions and Answers Jul 23 2009.docx.\n</li></li></li></li></ul>\n</p></p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Background",
    "local_header_href": "#background",
    "chunk_text": "<h5>Background</h5><p>The concept of families is an enormous strength of Revit, but until Revit 2010, no programming access was available in the family context. Therefore, two large and completely disjunct developer communities have evolved around the Revit products, creating either:</p><ul>\n<li>Revit applications using the API.</li>\n<li>Revit content with no API access.</li>\n</ul><p>The Family API was the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/api-wish-list-survey-reminder.html\">\ntop wish list item</a>\n\nand was made available for the first time in Revit 2010. It provides huge potential for synergy uniting the two separate camps. It enables:</p><ul>\n<li>Use of the Revit API in the family editor.</li>\n<li>Extract and modify existing or create new family content.</li>\n<li>Automatic library generation.</li>\n</ul><a name=\"1\"></a>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Creating a Family through the User Interface",
    "local_header_href": "#creating-a-family-through-the-user-interface",
    "chunk_text": "<h4>Creating a Family through the User Interface</h4><p>A non-trivial family can have a complex internal structure and many decisions need to be taken. A large body of experience around building families and family libraries has been developed before the introduction of the API. It is useful to gather some experience creating families manually before implementing code to do so automatically. Just like the standard Revit API, almost all the features provided by the family API are available through the user interface as well.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "What is a Revit Family?",
    "local_header_href": "#what-is-a-revit-family",
    "chunk_text": "<h5>What is a Revit Family?</h5><p>Before discussing the family API, it is important to understand the basics of Revit families and their definition.</p><p>A Revit family is a graphic representation of building objects and symbols. It can include geometry in 2D or 3D as well as data that supports the definition and creation of object instances. A family defines one or more types or symbols. A type or symbol can be inserted into the project to create a family instance.</p><p>There are three different classes of families, system, standard and in-place:</p><ul>\n<li>System families are stored in the project template and used for objects such as Walls, Roofs, Floors, Ceilings, Rebar, etc.</li>\n<li>Standard families are defined externally in freestanding \".rfa\" files and used for objects such as Windows, Doors, Furniture, Beams, Ductwork, etc.</li>\n<li>In-Place families are used for \"one of kind objects\".</li>\n</ul><p>The new family API provided in Revit 2010 addresses the standard families.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Revit Families - Where to Begin",
    "local_header_href": "#revit-families-where-to-begin",
    "chunk_text": "<h5>Revit Families - Where to Begin</h5><p>A new family is always based on a family template file, if created from scratch, or on an existing family, which is enhanced in some way. Regardless of whether you are using the UI or API, the first thing you will need to decide is which template or family file you want to begin with.</p><ul>\n<li>Create a completely new family starting from a family template.</li>\n<li>Enhance an existing family.</li>\n</ul><p>You need to choose which approach to take, as well as which template or family file to start with. There are plenty of templates to choose from. Other decisions that need to be taken and which influence this choice include</p><ul>\n<li>Category?\n<li>Is the family 2D or 3D?\n<li>Model or detail component?\n<li>Hosted or non-hosted: Wall, Ceiling, etc.\n<li>Placement type: Free, two point...\n<li>Specialty: Lighting, RPC...\n</li></li></li></li></li></li></ul>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Revit Family Flavours",
    "local_header_href": "#revit-family-flavours",
    "chunk_text": "<h5>Revit Family Flavours</h5><p>Just like the Revit product, Revit families also come in three flavours for architecture, MEP (mechanical, engineering, and plumbing), and structure. Most of the functionality is common to all three. Here are some aspects of the flavours:</p><p>Revit Architecture:</p><ul>\n<li>Basic building components with simplistic interactions in the model.</li>\n<li>Free placement objects - casework, furniture, etc.\n<li>Two point placement objects - detail components, hosted objects.</li>\n<li>Hosted objects: windows, doors, columns (\"level to level\"), ceiling or \"wall based\" lighting fixtures.</li>\n</li></ul><p>Revit Structure:</p><ul>\n<li>Additional components with complex interactions with other objects.</li>\n<li>Framing - beams (\"beams to beam\", \"beam to column\"), columns.</li>\n<li>Trusses - layout for girder trusses; boundary conditions.</li>\n<li>Span direction symbols; reinforcement symbols - area reinforcement expands to find edges, path reinforcement.</li>\n</ul><p>Revit MEP:</p><ul>\n<li>Connectors allowing objects to resize based on connected neighbour elements.</li>\n</ul>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Revit Family Editor",
    "local_header_href": "#revit-family-editor",
    "chunk_text": "<h5>Revit Family Editor</h5><p>Revit offers six basic family editors:</p><ul>\n<li>3D model, annotation, detail, rebar, truss and new conceptual mass.</li>\n</ul><p>Of the six basic family editors, the conceptual mass creation one is new to 2010. Depending on the editor, you will see a different set of available tools and building blocks. For instance, you will see tools to create forms in the model editor, but not in the annotation one. If you are using the truss editor, you will have access to the top and bottom chord, which will be shown in the model editor.</p><p>Each family editor is tied to the chosen family template and provides a specific feature set:</p><ul>\n<li>Geometry - extrusions, blends, sweeps, revolves.</li>\n<li>Lines - model, symbolic, detail.</li>\n<li>Basic tools - copy, mirror, paint, join/unjoin, cut geometry/don't cut.</li>\n<li>References - reference planes, reference lines.</li>\n<li>Annotation tools - labels.</li>\n<li>Advanced tools - formulas, nesting, arrays, type catalogues.</li>\n<li>MEP tools - add connectors.</li>\n</ul>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Revit Families Best Practice",
    "local_header_href": "#revit-families-best-practice",
    "chunk_text": "<h5>Revit Families Best Practice</h5><p>Families are a powerful feature in Revit. Creating a family can be fun, and it can also be complex. When it becomes complex, it requires good planning. Here are some suggestions for a process for building families by the Autodesk Revit content manager Steve Campbell. It describes the manual definition of a family. The same applies to a programmatic approach as well. A key to understanding the family API is to understand the UI.</p><p>It is highly recommended to follow this structured process when building families. It needs to be learned and practiced. Systematically following this process is one of the most important aspects of family creation.</p><p>Process order:</p><ol>\n<li>Plan (insertion point, parametric origin).</li>\n<li>Lay out reference planes (the bones).</li>\n<li>Add parameters.</li>\n<li>Add multiple host thickness types.</li>\n<li>Add two or more types.</li>\n<li>Flex types and host (testing procedure).</li>\n<li>Add a single level of geometry.</li>\n<li>Repeat steps 6 and 7 until you are satisfied with the results.</li>\n<li>Test in project environment (create testing project).</li>\n</ol>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Revit Family Possibilities",
    "local_header_href": "#revit-family-possibilities",
    "chunk_text": "<h5>Revit Family Possibilities</h5><p>You can create quite complex objects and behaviour using Revit families. Here are a few of the possibilities:</p><ul>\n<li>Formulas to control behaviour, visibility, arrays.</li>\n<li>Arrays and nesting for repeatable, resizable elements across an array.</li>\n<li>Advanced nesting with subcomponents that can be swapped.</li>\n<li>Reference lines and angular movement.</li>\n</ul><p>Formulas can be used to control behaviour, visibility, arrays, e.g. to define arrays of bolts depending on the size of a plate.</p><p>Arraying nested components allows the user to create families with repeatable elements across an array that can resize based on user input or rules. For example, a bookshelf with arrayed shelves, mullion patterns based on rules, and open web joists that adjust based on length and height.</p><p>Advanced nesting can make use of nested families with family type parameters that can provide flexible components with swappable sub-components such as nested door panels, frames, hardware, playground equipment, swappable panels and components.</p><p>Reference lines allow geometry to move about in an angular fashion. They contain two endpoints and two built in work planes that can be parametrically controlled. Some simple examples include a door swing that can change the opening angle, or a light fixture head that moves and points. A more complex example is an excavator arm that can bend and rotate about three or more pivot points.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Creating a Family Programmatically",
    "local_header_href": "#creating-a-family-programmatically",
    "chunk_text": "<h4>Creating a Family Programmatically</h4><p>Now that the basics of Revit families are clear, we can look at the new access to this functionality provided by the new family API.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Family API Usage",
    "local_header_href": "#family-api-usage",
    "chunk_text": "<h5>Family API Usage</h5><p>Exposure of the family API is probably the most important enhancement to the Revit API in 2010. The concept of component family is a unique feature and strength of Revit. This was the most wanted feature in the Revit API community and we expect the effect and growth in possibilities with the availability of family API will be dramatic. </p><p>An obvious opportunity provided by the new family API is the automatic generation of content from databases or other library sources.\nIt is also possible to extract a family definition out of a project and store it back into an external family file.\nThe document <i>Revit Platform API Changes and Additions.doc</i> in the Revit SDK folder provides an overview of the family API.\nFamily API specific samples are located in the Revit SDK samples <code>FamilyCreation</code> subfolder.</p><p>Here are some of the new supported features:</p><ul>\n<li>Enable use of the Revit API within the family editor context.</li>\n<li>Create and modify family content.</li>\n<li>Automatic library generation from database or other library specification.</li>\n<li>Extract family definitions from existing projects.</li>\n<li>Define references and constraints to drive model geometry parametrically, formulas to drive parameter values, and annotation and dimensioning.</li>\n<li>Control detailed visibility of family types and their elements.</li>\n<li>Control loading behaviour of a family.</li>\n</ul>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Document and Family Manager Classes",
    "local_header_href": "#document-and-family-manager-classes",
    "chunk_text": "<h5>Document and Family Manager Classes</h5><p>The Revit API Document now has some added methods and properties for managing families:</p><ul>\n<li>EditFamily - edit a family loaded in a project document.</li>\n<li>FamilyCreate - return a FamilyItemCreate object to create new instances of elements within a family document, analogous to the Create object in a project.</li>\n<li>FamilyManager - return a FamilyManager object providing access to family types and parameters.</li>\n<li>IsFamilyDocument - identify whether the current document is a family document.</li>\n<li>OwnerFamily - return the owning family of this family document.</li>\n</ul><p>Within a family document, the family manager class provides the following new functionality:</p><ul>\n<li>Add, remove and rename types.</li>\n<li>Add and remove parameters.</li>\n<li>Set values and formulas.</li>\n</ul>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Creating Family Content",
    "local_header_href": "#creating-family-content",
    "chunk_text": "<h5>Creating Family Content</h5><p>The FamilyCreate property on the family document returns a FamilyItemFactory instance. This family item factory object is a utility object used to create new instances of elements within the family document. Just like other Revit elements, these are instantiated using dedicated methods instead of the .NET new operator. This ensures that the elements created are correctly added to and hooked up within the family document. A wide range of elements types can be created, including alignments, dimensioning, annotation, curves, levels, and solid forms for conceptual design.</p><p>The family item factory utility object</p><ul>\n<li>Creates new instances of elements within the family document.</li>\n<li>Provides dedicated creation methods instead of the .NET new operator.</li>\n</ul><p>Elements types that can be created include:</p><ul>\n<li>Alignment.</li>\n<li>Connector (MEP only).</li>\n<li>Dimensioning.</li>\n<li>Annotation.</li>\n<li>Curves.</li>\n<li>Levels.</li>\n<li>Solids forms.</li>\n</ul>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Visibility Settings",
    "local_header_href": "#visibility-settings",
    "chunk_text": "<h5>Visibility Settings </h5><p>A critical topic when building family content are the visibility settings. They are now accessible for each element in a family through the new FamilyElementVisibility class.</p><p>Each element in a family has its own visibility settings which define which levels of detail and which types of views it appears in. These options are critical to building good content. For example, intricate details of a family should only be visible in the fine detail views. 3D solid content could optionally be suppressed in plan views, where light weight 2D line work could be displayed instead. Such an approach can make a substantial performance difference, especially in large building models.</p><p>Every element in the family has own visibility settings managed by the FamilyElementVisibility class defining:</p><ul>\n<li>Which levels of detail it appears in.</li>\n<li>Which types of views it appears in.</li>\n</ul>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Loading Control",
    "local_header_href": "#loading-control",
    "chunk_text": "<h5>Loading Control</h5><p>The Document.LoadFamily method has been enhanced and new overloads have been added, which can help to handle situations such as when a family already exists in the project. The following overloads are now provided:</p><ul>\n<li>LoadFamily(Document)  - loads the contents of this family document into another document.</li>\n<li>LoadFamily(String) - loads an entire family and all its types into the document.</li>\n<li>LoadFamily(String, Family) - loads an entire family and all its types into the document and provides a reference to the loaded family.</li>\n<li>LoadFamily(Document, IFamilyLoadOptions) - loads the contents of this family document into another document.</li>\n</ul><p>The IFamilyLoadOptions argument to the last overload defines an interface which specifies two call-backs for handling family load situations: OnFamilyFound and OnSharedFamilyFound. These are called when a family or a shared family is already present in the target document.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Family API Samples in the Revit SDK",
    "local_header_href": "#family-api-samples-in-the-revit-sdk",
    "chunk_text": "<h4>Family API Samples in the Revit SDK</h4><p>A number of new samples illustrating the family API have been added to the Revit SDK. They are located in the FamilyCreation subfolder in the SDK Samples directory.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "AutoJoin",
    "local_header_href": "#autojoin",
    "chunk_text": "<h5>AutoJoin</h5><p>AutoJoin automatically joins geometry of multiple generic forms for use in family modelling and massing. It uses the method Document.CombineElements to join geometry between overlapping generic forms. It also includes a utility method to check geometry object overlap, based on the Face.Intersect(Curve) method.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "AutoParameter",
    "local_header_href": "#autoparameter",
    "chunk_text": "<h5>AutoParameter</h5><p>AutoParameter implements batch mode automatic addition of shared or non-shared parameters to one or more family documents. It optionally processes either the currently active family document or all families in a specified folder. It uses the FamilyManager class AddParameter methods and reads its input data from parameter text files in a format similar to the Revit shared parameter files.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "CreateAirHandler - RME",
    "local_header_href": "#createairhandler-rme",
    "chunk_text": "<h5>CreateAirHandler - RME</h5><p>CreateAirHandler is a Revit MEP sample to create an air handling unit including MEP pipe and duct connectors. It shows how to check the template family category to verify that a valid starting point is selected. It make use of the FamilyItemFactory class NewExtrusion, NewPipeConnector, and NewDuctConnector methods, sets up the proper connector parameters, and uses Document.CombineElements to join the extrusions to make up the air handler body.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "CreateTruss - RST",
    "local_header_href": "#createtruss-rst",
    "chunk_text": "<h5>CreateTruss - RST</h5><p>CreateTruss is a Revit Structure sample that creates a mono truss in a truss family document. The truss curves are created using NewModelCurve, the truss type is set through the ModelCurve TrussCurveType property, and constraints are added to the truss curves with NewAlignment.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "DWGFamilyCreation",
    "local_header_href": "#dwgfamilycreation",
    "chunk_text": "<h5>DWGFamilyCreation</h5><p>DWGFamilyCreation shows how to import a DWG file into a family document add two type parameters to the imported instance: DWGFileName specifying the DWG file name, and ImportTime storing the data and time when it was imported.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "GenericModelCreation",
    "local_header_href": "#genericmodelcreation",
    "chunk_text": "<h5>GenericModelCreation</h5><p>GenericModelCreation creates a generic model using extrusion, blend, revolution, sweep and swept blend elements. It checks that the open document is indeed a family one or otherwise creates a new family document. It exercises the CreateSketchPlane, NewLineBound, and FamilyItemFactory methods to create profiles and shapes.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "TypeRegeneration",
    "local_header_href": "#typeregeneration",
    "chunk_text": "<h5>TypeRegeneration</h5><p>The TypeRegeneration sample uses the FamilyManager Types property to determine all types defined in the current family document, and CurrentType to iterate through them. It reports whether all types regenerated successfully, and logs any errors that occurred to a file.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "ValidateParameters",
    "local_header_href": "#validateparameters",
    "chunk_text": "<h5>ValidateParameters</h5><p>ValidateParameters checks whether every type in the current family document has valid values for certain parameters and logs the results to a file. This sample can be run in two modes, either as an external application subscribing to DocumentSaving and DocumentSavingAs events to run the check automatically every time a document is opened, or as an external command to be launched manually when required.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "WindowWizard",
    "local_header_href": "#windowwizard",
    "chunk_text": "<h5>WindowWizard</h5><p>WindowWizard shows how to create a new window family via a wizard style user interface. It needs to be started in a window family template, e.g. Metric Window.rft. It prompts the user to define input dimensions for various window parameters and materials, and then creates the required geometry, constraints and types using elements including extrusions, alignments, dimensions, reference planes, and family types.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Family API Labs: Creating an Example Family",
    "local_header_href": "#family-api-labs-creating-an-example-family",
    "chunk_text": "<h4>Family API Labs: Creating an Example Family</h4><p>The Revit Family API Labs is a collection of exercises which introduce you step by step to the creation of a column family. The objective is to learn the basics of the family API. The labs start with the basics and then proceed to more advanced aspects. Full documentation of and instructions for each step are included in separate documents for C# and VB.</p>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Family API Labs",
    "local_header_href": "#family-api-labs",
    "chunk_text": "<h5>Family API Labs</h5><ul>\n<li>Lab1 - define a column with rectangular profile.</li>\n<li>Lab2 - define a column with L-shape profile.</li>\n<li>Lab3 - add formula and materials.</li>\n<li>Lab4 - add visibility control.</li>\n</ul>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Lab 1 - Create Rectangular Column",
    "local_header_href": "#lab-1-create-rectangular-column",
    "chunk_text": "<h5>Lab 1 - Create Rectangular Column</h5><ul>\n<li>Check the family context.</li>\n<li>Create a simple solid using extrusion.</li>\n<li>Set alignments.</li>\n<li>Add types.</li>\n</ul><p>Classes and methods:</p><pre>\ndoc.IsFamilyDocument()\ndoc.OwnerFamily.FamilyCategory.Name\ndoc.FamilyCreate.NewExtrusion()\ndoc.FamilyCreate.NewAlignment()\nfamilyMgr = doc.FamilyManager\nfamilyMgr.NewType()\nfamilyMgr.Parameter(); familyMgr.Set()\n</pre>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Lab 2 - Create L-Shaped Column",
    "local_header_href": "#lab-2-create-l-shaped-column",
    "chunk_text": "<h5>Lab 2 - Create L-Shaped Column</h5><ul>\n<li>Add reference planes.</li>\n<li>Add parameters.</li>\n<li>Add dimensions.</li>\n</ul><p>Classes and methods:</p><pre>\ndoc.FamilyCreate.NewReferencePlane()\nfamilyMgr.AddParameter()\ndoc.FamilyCreate.NewDimension()\n</pre>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Lab 3 - Add Formulas and Materials",
    "local_header_href": "#lab-3-add-formulas-and-materials",
    "chunk_text": "<h5>Lab 3 - Add Formulas and Materials</h5><ul>\n<li>Add formulae.</li>\n<li>Add materials.</li>\n</ul><p>Classes and methods:</p><pre>\nfamilyMgr.SetFormula()\npSolid.Parameter(\"Material\")\nfamilyMgr.AddParameter(\"MyColumnFinish\", BuiltInParameterGroup.PG_MATERIALS, ParameterType.Material, True)\nfamilyMgr.AssociateElementParameterToFamilyParameter()\n</pre>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Lab 4 - Add Visibility Control",
    "local_header_href": "#lab-4-add-visibility-control",
    "chunk_text": "<h5>Lab 4 - Add Visibility Control</h5><ul>\n<li>Add line representation.</li>\n<li>Add visibility control.</li>\n</ul><p>Classes and methods:</p><pre>\ndoc.FamilyCreate.NewSymbolicCurve()\ndoc.FamilyCreate.NewModelCurve()\nFamilyElementVisibility(FamilyElementVisibilityType.ViewSpecific/Model)\nFamilyElementVisibility.IsShownInFine, etc.\npLine.SetVisibility(pFamilyElementVisibility)\n</pre>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Learning More",
    "local_header_href": "#learning-more",
    "chunk_text": "<h5>Learning More</h5><p>Here is an overview of some available resources for further learning:</p><ul>\n<li>Online Help, Developer's Guide and SDK Samples\n\n<li>Families Guide\n<br/><a href=\"http://usa.autodesk.com/adsk/servlet/item?siteID=123112&amp;id=13376394\">\nhttp://usa.autodesk.com/adsk/servlet/item?siteID=123112&amp;id=13376394</a></li>\n<li>DevTV Introduction to Revit Programming\n<br/><a href=\"http://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=2484975\">\nhttp://usa.autodesk.com/adsk/servlet/index?siteID=123112&amp;id=2484975</a></li>\n<li>Recording of Revit 2010 Programming Introduction Webcast\n<br/><a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nhttp://www.adskconsulting.com/adn/cs/api_course_sched.php</a> &gt; Revit API</li>\n<li>Discussion Group\n<br/><a href=\"http://discussion.autodesk.com\">\nhttp://discussion.autodesk.com</a> &gt; Revit Architecture &gt; Revit API</li>\n<li>API Training Classes\n<br/><a href=\"http://www.autodesk.com/apitraining\">\nhttp://www.autodesk.com/apitraining</a></li>\n<li>The Building Coder, Jeremy Tammik's Revit API Blog\n<br/><a href=\"http://thebuildingcoder.typepad.com\">\nhttp://thebuildingcoder.typepad.com</a></li>\n<li>Autodesk Developer Network\n<br/><a href=\"http://www.autodesk.com/joinadn\">\nhttp://www.autodesk.com/joinadn</a></li>\n<li>DevHelp Online for ADN members\n<br/><a href=\"http://adn.autodesk.com\">\nhttp://adn.autodesk.com</a></li>\n</li></ul><a name=\"5\"></a>"
  },
  {
    "original_filename": "0199_family_api",
    "header_text": "Family API Webcast and Materials",
    "local_header_href": "#family-api-webcast-and-materials",
    "chunk_text": "<h4>Family API Webcast and Materials</h4><p>We held a successful\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/revit-family-api-webcast.html\">\nwebcast</a>\n\non the Revit Family API on Thursday July 23<sup>rd</sup> 2009.\n\nThe supporting material and recording from this webcast is now available.\n\nTo access the material from any ADN webcast, you can go to the\n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_sched.php\">\nADN training schedule site</a>\n\nand click on the corresponding download link.\nYou can find this specific webcast by filtering for 'Revit Family API'.\nHere is a direct link to\n\n<a href=\"http://download.autodesk.com/media/adn/Revit_2010_Family_API_Webcast-July2009.zip\">\ndownload the webcast material</a>, which includes the following items:\n\n<ul>\n<li><strong>Presentation:</strong> Revit 2010 Family_API.pptx.\n<li><strong>Source Code for Labs:</strong> Revit Family Labs including Visual Studio solution file, Revit.ini information, C# and VB source code, instructions, and a Revit RFT template file.\n<li><strong>Recording:</strong> Revit Family API Webcast recording.\n<li><strong>Q &amp; A:</strong> Revit 2010 Family API Webcast - Questions and Answers Jul 23 2009.docx.\n</li></li></li></li></ul>\n</p>"
  }
]