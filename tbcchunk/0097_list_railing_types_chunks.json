[
  {
    "original_filename": "0097_list_railing_types",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0097_list_railing_types",
    "header_text": "List Railing Types",
    "local_header_href": "#list-railing-types",
    "chunk_text": "<h3>List Railing Types</h3><p>This is in response to a query from Berria on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-column.html#comments\">\niterating over the railing types</a>\n\nin the model.\n\nIt is also once again about teaching how to fish, and not just feeding people, at least I hope so.\nIf I want to list all the railing types, the best way to go is probably to define an API filter which retrieves them from the model for me.\nHow do I design that filter?\nI start by opening a new model, inserting a railing, and examining it with \n\n<a href=\"http://download.autodesk.com/media/adn/RvtMgdDbg2009_0429_2008.zip\">\nRvtMgdDbg</a>.\n\nThere I can easily determine that its built-in category is OST_StairsRailing.\nTherefore, I first thought that an API filter selecting all family symbols of this category should suffice.\nThe project browser shows me the following stair and railing symbols in my current model:</p><img alt=\"Railing and stair types in project browser\" src=\"img/browser_railings_and_stairs.png\"/><p>I implemented a new external command CmdListRailingTypes to test this approach, with the following code:</p><pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n<span class=\"teal\">CreationFilter</span> cf = app.Create.Filter;\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; symbols = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n<span class=\"teal\">BuiltInCategory</span> bic \n  = <span class=\"teal\">BuiltInCategory</span>.OST_StairsRailing;\n \n<span class=\"teal\">Filter</span> f1 \n  = cf.NewCategoryFilter( bic );\n \n<span class=\"teal\">Filter</span> f2 \n  = cf.NewTypeFilter( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) );\n \ndoc.get_Elements( f, symbols );\n\n<span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> symbols )\n{\n  <span class=\"teal\">Debug</span>.Print(\n    <span class=\"maroon\">\"Family name={0}, symbol name={1}\"</span>,\n    s.Family.Name, s.Name );\n}\n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n</pre><p>It makes use of a new alias for CreationFilter:</p><pre class=\"code\">\n<span class=\"blue\">using</span> <span class=\"teal\">CreationFilter</span>\n  = Autodesk.Revit.Creation.<span class=\"teal\">Filter</span>;\n</pre><p>To my initial surprise, no symbols were found. I thereupon took a closer look at the symbols within the railings family in RvtMgdDbg and discovered that the category of the M_Baluster symbols is not OST_StairsRailing but OST_StairsRailingBaluster. Changing the value of the 'bic' variable to that built-in category returns some valid results:</p><pre>\nFamily name=M_Baluster - Square, symbol name=25mm\nFamily name=M_Baluster - Square, symbol name=20mm\nFamily name=M_Baluster - Round, symbol name=25mm\nFamily name=M_Baluster - Round, symbol name=20mm\n</pre><p>This does still not include all the railing symbols listed in the browser, so I went back into RvtMgdDbg and searched for those as well. They were not listed in the FamilySymbol collection, but under Symbols, this time indeed with the category OST_StairsRailing.</p><p>Making use of this info, I implemented a second filter and iteration to retrieve and list Symbol objects like this:</p><pre class=\"code\">\nbic = <span class=\"teal\">BuiltInCategory</span>.OST_StairsRailing;\nf1 = cf.NewCategoryFilter( bic );\nf2 = cf.NewTypeFilter( <span class=\"blue\">typeof</span>( <span class=\"teal\">Symbol</span> ) );\nf = cf.NewLogicAndFilter( f1, f2 );\n \ndoc.get_Elements( f, symbols );\n \nn = symbols.Count;\n \n<span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0}\"</span>\n  + <span class=\"maroon\">\" OST_StairsRailing symbol{1}:\"</span>,\n  n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">Symbol</span> s <span class=\"blue\">in</span> symbols )\n{\n  <span class=\"teal\">FamilySymbol</span> fs = s <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n  <span class=\"teal\">Debug</span>.Print(\n    <span class=\"maroon\">\"Family name={0}, symbol name={1}\"</span>,\n    <span class=\"blue\">null</span> == fs ? <span class=\"maroon\">\"&lt;none&gt;\"</span> : fs.Family.Name, \n    s.Name );\n}\n</pre><p>The result of this code is somewhat surprising too.\nThe non-family symbols that we are looking for are retrieved now, just like we hoped, and we also retrieve the family symbols that we already saw above:</p><pre>\n6 OST_StairsRailing symbols:\nFamily name=M_Baluster - Square, symbol name=25mm\nFamily name=M_Baluster - Square, symbol name=20mm\nFamily name=M_Baluster - Round, symbol name=25mm\nFamily name=M_Baluster - Round, symbol name=20mm\nFamily name=&lt;none&gt;, symbol name=900mm Pipe\nFamily name=&lt;none&gt;, symbol name=900mm Rectangular\n</pre><p>This goes to show several things:</p><ul>\n<li>You need to explore the model.</li>\n<li>You may get unexpected results.</li>\n</ul><p>I'll just leave it at that for now.</p><p>Here is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10025.zip\">\nversion 1.0.0.25</a>\n\nof the complete Visual Studio solution with the new CmdListRailingTypes command implementation.</p>"
  }
]