[
  {
    "original_filename": "1309_spatial_calculator",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1309_spatial_calculator",
    "header_text": "Gross and Net Wall Area Calculation Enhancement",
    "local_header_href": "#gross-and-net-wall-area-calculation-enhancement",
    "chunk_text": "<h3>Gross and Net Wall Area Calculation Enhancement</h3><p>We make further enhancements to the on-going project to determine gross and net areas and volumes, obviously a fundamental issue to BIM.</p><p>And I have more news to share as well:</p><ul>\n<li><a href=\"#1\">Playing with my WebGL viewer</a></li>\n<li><a href=\"#2\">WebGL Developers meetup in NYC April 21</a></li>\n<li><a href=\"#3\">AEC Hackathon in Dallas May 1-3</a></li>\n<li><a href=\"#4\">Angelhack in Dubai May 7-9</a></li>\n<li><a href=\"#5\">Angelhack in Athens June 5-7</a></li>\n<li><a href=\"#6\">Wall area calculation handling multiple openings in multiple walls in multiple rooms</a></li>\n</ul><a name=\"1\"></a>"
  },
  {
    "original_filename": "1309_spatial_calculator",
    "header_text": "Playing with my WebGL Viewer",
    "local_header_href": "#playing-with-my-webgl-viewer",
    "chunk_text": "<h4>Playing with my WebGL Viewer</h4><p>My last post was on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/04/exporting-3d-element-geometry-to-a-webgl-viewer.html\">\nexporting 3D element geometry to a WebGL viewer</a>.</p><p>If this is of interest to you, you absolutely must check out two subsequent\n\n<a href=\"http://the3dwebcoder.typepad.com\">The 3D Web Coder</a> posts on the\n\n<a href=\"http://the3dwebcoder.typepad.com/blog/2015/04/webgl-viewer-cloud-accelerator-verold-and-rtc.html#5\">desktop driven WebGL viewer</a> and\n\n<a href=\"http://the3dwebcoder.typepad.com/blog/2015/04/webgl-node-server-with-github-and-heroku-repo-sync.html\">converting it to a node.js server</a>.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1309_spatial_calculator",
    "header_text": "WebGL Developers Meetup in NYC April 21",
    "local_header_href": "#webgl-developers-meetup-in-nyc-april-21",
    "chunk_text": "<h4>WebGL Developers Meetup in NYC April 21</h4><p>Get ready for our <a href=\"http://www.meetup.com/NYC-WebGL-Developers/events/221871315\">WebGL Developers Meetup in NYC</a> on Tuesday April 21.</p><p>Come and join Jim Quanci <a href=\"https://twitter.com/jimquanci\">@jimquanci</a> from Autodesk to learn how to easily add 3D viewing functionality to your web and mobile apps using <a href=\"https://developer.autodesk.com\">View and Data API</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1309_spatial_calculator",
    "header_text": "AEC Hackathon in Dallas May 1-3",
    "local_header_href": "#aec-hackathon-in-dallas-may-1-3",
    "chunk_text": "<h4>AEC Hackathon in Dallas May 1-3</h4><p>As an AEC developer, you will certainly not want to miss the <a href=\"http://aechackathon.com/aec-hackathon-dallas\">AEC Hackathon 2.2 in Dallas</a>.</p><p>We will be on site to show the <a href=\"https://developer.autodesk.com/api/view-and-data-api\">View and Data API</a> and of course help all hackers on our AEC products.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1309_spatial_calculator",
    "header_text": "Angelhack in Dubai May 7-9",
    "local_header_href": "#angelhack-in-dubai-may-7-9",
    "chunk_text": "<h4>Angelhack in Dubai May 7-9</h4><p>Of special interest to me personally, of course:</p><p>I will be going to the <a href=\"http://angelhack.com/hackathon/dubai-2015\">Angelhack in Dubai</a> on May 7-9.</p><p>Since the weekend is on Friday and Saturday there, we have scheduled an\n\n<a href=\"http://www.meetup.com/I-love-3D-Dubai/events/221497781\">Angel workshop</a> meetup session on Thursday evening, where, once again, I will be presenting on the\n\n<a href=\"https://developer.autodesk.com/api/view-and-data-api\">View and Data API</a> and anything else you want to learn.</p><p>Then you will be fully primed and up to speed for the subsequent hackathon!</p><p>I am looking forward to meeting you there!</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1309_spatial_calculator",
    "header_text": "Angelhack in Athens June 5-7",
    "local_header_href": "#angelhack-in-athens-june-5-7",
    "chunk_text": "<h4>Angelhack in Athens June 5-7</h4><p>Same thing again... of special interest to me personally:</p><p>I will be going to the <a href=\"http://angelhack.com/hackathon/athens-2015\">Angelhack in Athens</a> on June 5-7.</p><p>Again, we have scheduled an\n\n<a href=\"http://www.meetup.com/I-love-3D-Athens/events/221674308\">Angel workshop</a> meetup\nsession on Friday evening to get us all well prepared and up to speed for the subsequent hackathon.</p><p>I am looking forward to meeting you there!</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1309_spatial_calculator",
    "header_text": "Wall Area Calculation Handling Multiple Openings in Multiple Walls in Multiple Rooms",
    "local_header_href": "#wall-area-calculation-handling-multiple-openings-in-multiple-walls-in-multiple-rooms",
    "chunk_text": "<h4>Wall Area Calculation Handling Multiple Openings in Multiple Walls in Multiple Rooms</h4><p>I recently presented a promising solution to address this in the discussion on\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/03/calculating-gross-and-net-wall-areas.html\">\ncalculating gross and net wall areas</a>,\npublishing the initial VB.NET solution by Phillip Miller of <a href=\"\">Kiwi Codes Solutions Ltd</a> and\nan enhanced C# implementation in the\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator\">SpatialElementGeometryCalculator GitHub repository</a> incorporating\nthe\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/03/calculating-gross-and-net-wall-areas.html#comment-6a00e553e16897883301b8d0eee480970c\">\nsuggestion</a> by Vilo to\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/03/findinserts-retrieves-all-openings-in-all-wall-types.html\">\nuse FindInserts to retrieve all openings in all wall types</a>.</p><p><a href=\"http://hclausen.net\">Håkon Clausen</a> responded to that in this\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/03/findinserts-retrieves-all-openings-in-all-wall-types.html?cid=6a00e553e16897883301b7c7789a82970b#comment-6a00e553e16897883301b7c7789a82970b\">\ncomment</a>:</p><ol>\n<li>In contrast to the \"Calculating Gross and Net Wall Areas\" solution, after getting the wall inserts with FindInserts it does not check that the inserts actually belongs to the room and thus removes inserts to other rooms if the wall is part of multiple rooms. This will of course lead to wrong result. Checking the instance room/toroom/fromroom parameter like the previous solution rectifies this.</li>\n<li>If a wall has multiple faces or subfaces, the opening area is subtracted multiple times. Take e.g. the hall from the 2013 basic sample (or any room with a wall with multiple doors to other rooms. This will make calwallAreaMinusOpenings report a negative wall area. Creating a gross sum for each wall, then looping through the walls found and calculate the opening area once seems to be an approach.</li>\n</ol><p>I added that to the SpatialElementGeometryCalculator GitHub repository as\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator/issues/1\">issue #1, improvements for multiple rooms and multiple subfaces</a>, and\nsuggested to Håkon to fork the repo, add his changes to that, and create a pull request for me to merge them back in.</p><p>He did so and created\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator/pull/2\">pull request #2, rework based on comment on blog</a>.</p><p>For your convenience, here is the updated implementation:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"blue\">var</span> app = commandData.Application;\n  <span class=\"blue\">var</span> doc = app.ActiveUIDocument.Document;\n  <span class=\"teal\">Result</span> rc;\n  <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Empty;\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"blue\">var</span> roomCol = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">SpatialElement</span> ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> e <span class=\"blue\">in</span> roomCol )\n    {\n      <span class=\"blue\">var</span> room = e <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n      <span class=\"blue\">if</span>( room == <span class=\"blue\">null</span> ) <span class=\"blue\">continue</span>;\n      <span class=\"blue\">if</span>( room.Location == <span class=\"blue\">null</span> ) <span class=\"blue\">continue</span>;\n \n      <span class=\"blue\">var</span> sebOptions = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>\n      { SpatialElementBoundaryLocation\n        = <span class=\"teal\">SpatialElementBoundaryLocation</span>.Finish\n      };\n      <span class=\"blue\">var</span> calc = <span class=\"blue\">new</span> Autodesk.Revit.DB\n        .<span class=\"teal\">SpatialElementGeometryCalculator</span>(\n          doc, sebOptions );\n \n      <span class=\"blue\">var</span> results = calc\n        .CalculateSpatialElementGeometry( room );\n \n      <span class=\"green\">// To keep track of each wall and </span>\n      <span class=\"green\">// its total area in the room</span>\n \n      <span class=\"blue\">var</span> walls = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">double</span>&gt;();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> results.GetGeometry().Faces )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> subface <span class=\"blue\">in</span> results\n          .GetBoundaryFaceInfo( face ) )\n        {\n          <span class=\"blue\">if</span>( subface.SubfaceType\n            != <span class=\"teal\">SubfaceType</span>.Side ) { <span class=\"blue\">continue</span>; }\n \n          <span class=\"blue\">var</span> wall = doc.GetElement( subface\n            .SpatialBoundaryElement.HostElementId )\n              <span class=\"blue\">as</span> <span class=\"teal\">HostObject</span>;\n \n          <span class=\"blue\">if</span>( wall == <span class=\"blue\">null</span> ) { <span class=\"blue\">continue</span>; }\n          <span class=\"blue\">var</span> grossArea = subface.GetSubface().Area;\n          <span class=\"blue\">if</span>( !walls.ContainsKey( wall.UniqueId ) )\n          {\n            walls.Add( wall.UniqueId, grossArea );\n          }\n          <span class=\"blue\">else</span>\n          {\n            walls[wall.UniqueId] += grossArea;\n          }\n        }\n      }\n \n      <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> id <span class=\"blue\">in</span> walls.Keys )\n      {\n        <span class=\"blue\">var</span> wall = (<span class=\"teal\">HostObject</span>) doc.GetElement( id );\n        <span class=\"blue\">var</span> openings = CalculateWallOpeningArea(\n          wall, room );\n \n        s += <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"Room: {2} Wall: {0} Area: {1} m2\\r\\n\"</span>,\n          wall.get_Parameter( <span class=\"teal\">BuiltInParameter</span>.ALL_MODEL_MARK ).AsString(),\n          SqFootToSquareM( walls[id] - openings ),\n          room.get_Parameter( <span class=\"teal\">BuiltInParameter</span>.ROOM_NUMBER ).AsString() );\n      }\n    }\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Room Boundaries\"</span>, s );\n    rc = <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Room Boundaries\"</span>,\n      ex.Message + <span class=\"maroon\">\"\\r\\n\"</span> + ex.StackTrace );\n    rc = <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"blue\">return</span> rc;\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Convert square feet to square meters</span>\n<span class=\"gray\">///</span><span class=\"green\"> with two decimal places precision.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">double</span> SqFootToSquareM(\n  <span class=\"blue\">double</span> sqFoot )\n{\n  <span class=\"blue\">return</span> <span class=\"teal\">Math</span>.Round( sqFoot * 0.092903, 2 );\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Calculate wall area minus openings. Temporarily</span>\n<span class=\"gray\">///</span><span class=\"green\"> delete all openings in a transaction that is</span>\n<span class=\"gray\">///</span><span class=\"green\"> rolled back.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">double</span> CalculateWallOpeningArea(\n  <span class=\"teal\">HostObject</span> wall,\n  <span class=\"teal\">Room</span> room )\n{\n  <span class=\"blue\">var</span> doc = wall.Document;\n  <span class=\"blue\">var</span> wallAreaNet = wall.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.HOST_AREA_COMPUTED ).AsDouble();\n \n  <span class=\"blue\">var</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n  t.Start( <span class=\"maroon\">\"Temp\"</span> );\n  <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> id <span class=\"blue\">in</span> wall.FindInserts(\n    <span class=\"blue\">true</span>, <span class=\"blue\">true</span>, <span class=\"blue\">true</span>, <span class=\"blue\">true</span> ) )\n  {\n    <span class=\"blue\">var</span> insert = doc.GetElement( id );\n    <span class=\"blue\">if</span>( insert <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span>\n      &amp;&amp; IsInRoom( room, (<span class=\"teal\">FamilyInstance</span>) insert ) )\n    {\n      doc.Delete( id );\n    }\n  }\n \n  doc.Regenerate();\n  <span class=\"blue\">var</span> wallAreaGross = wall.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.HOST_AREA_COMPUTED ).AsDouble();\n  t.RollBack();\n \n  <span class=\"blue\">return</span> wallAreaGross - wallAreaNet;\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Predicate to determine whether the given </span>\n<span class=\"gray\">///</span><span class=\"green\"> family instance belongs to the given room.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">bool</span> IsInRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">FamilyInstance</span> f )\n{\n  <span class=\"teal\">ElementId</span> rid = room.Id;\n  <span class=\"blue\">return</span> ( ( f.Room != <span class=\"blue\">null</span> &amp;&amp; f.Room.Id == rid )\n    || ( f.ToRoom != <span class=\"blue\">null</span> &amp;&amp; f.ToRoom.Id == rid )\n    || ( f.FromRoom != <span class=\"blue\">null</span> &amp;&amp; f.FromRoom.Id == rid ) );\n}\n</pre><p>Many thanks to Håkon for suggesting, implementing and sharing this with us all!</p><p>The complete source code, Visual Solution files and add-in manifests for both the original, now outdated, VB.NET and the enhanced C# implementations are hosted by the\n\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator\">SpatialElementGeometryCalculator GitHub repository</a>.</p><p>The improved version by Håkon presented here is\n\n<a href=\"https://github.com/jeremytammik/SpatialElementGeometryCalculator/releases/tag/2015.0.0.3\">\nrelease 2015.0.0.3</a>.</p><p>I look forward to hearing how you can make use of this.</p><p>Further enhancements are welcome!</p><p>Enjoy.</p>"
  }
]