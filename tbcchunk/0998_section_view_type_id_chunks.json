[
  {
    "original_filename": "0998_section_view_type_id",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0998_section_view_type_id",
    "header_text": "Language Independent Section View Type Id Retrieval",
    "local_header_href": "#language-independent-section-view-type-id-retrieval",
    "chunk_text": "<h3>Language Independent Section View Type Id Retrieval</h3><p>I already discussed\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/changing-viewport-type.html\">\nchanging the viewport type</a> and\n\nmentioned Steve Mycynek's all-encompassing AU class\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/au-classes-on-the-view-mep-and-link-apis.html#2\">\nCP3133 Using the Revit Schedule and View APIs</a> explaining\n\neverything else there is to know about the topic of generating new views.\n\n<p>Here is an important language independence enhancement for this provided by Håkan Wikemar of\n\n<a href=\"http://www.aec.se\">\nAEC AB</a>, who asked:</p>\n<p><strong>Question:</strong> I ran into a little problem trying to create some section views, in which a view type element id has to be specified:</p>\n<pre class=\"code\">\n  NyViewSectionB = <span class=\"teal\">ViewSection</span>.CreateSection(\n    doc.Document, SectionId, bbNewSectionF );\n</pre>\n<p>When I try to find a section view family type element id, the section I was looking for was not always available in all projects, so the search failed.</p>\n<p>I was making use of the GetElementByName method provided by Steven in his class.</p>\n<p>When the section view type is present, it is sometimes not named 'Building Section' as in the example we looked at in the View Class at AU. It could be named 'Section 1' if there is no inserted section and whatever name I specified myself if I already created a section in the  project.</p>\n<p>Is it at all possible to retrieve the section view type id consistently language independently instead of searching by name?</p>\n<p>How should one handle this in a file without any sections available?</p>\n<p>I would have preferred a Method just taking the an argument such as: 'ViewType.Section'.</p>\n<p>Here are some sample view types from an existing project displayed by RevitLookup snoop:</p>\n<center>\n<img alt=\"Old view types\" src=\"img/view_types_snoop_old.png\"/>\n</center>\n<p>This is the corresponding list in a new project:</p>\n<center>\n<img alt=\"New view types\" src=\"img/view_types_snoop_new.png\"/>\n</center>\n<p><strong>Answer:</strong> How about simply iterating over all view types and picking the first one of ViewType.Section?</p>\n<!--\n<p>In his AU Lab 'CP3133 - Using the Autodesk' Revit' Schedule and View APIs', Steven creates sections by using a dialog where you can specify a 'ViewTypeName'.</p>\n\n<p>The given name is the used to call his GetElementByName helper method, defined like this:\n\n<pre class=\"code\">\n&nbsp; <span class=\"blue\">public</span> RevitElement GetElementByName&lt;RevitElement&gt;(\n&nbsp; &nbsp; <span class=\"blue\">string</span> name ) <span class=\"blue\">where</span> RevitElement : <span class=\"teal\">Element</span>\n&nbsp; {\n&nbsp; &nbsp; <span class=\"blue\">if</span>( <span class=\"blue\">string</span>.IsNullOrEmpty( name ) )\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">FilteredElementCollector</span> fec\n&nbsp; &nbsp; &nbsp; = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( Doc() );\n&nbsp;\n&nbsp; &nbsp; fec.OfClass( <span class=\"blue\">typeof</span>( RevitElement ) );\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Element</span>&gt; elements = fec.ToElements();\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">Element</span> result = <span class=\"blue\">null</span>;\n&nbsp;\n&nbsp; &nbsp; result = GetElementByName( elements, name );\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">return</span> result <span class=\"blue\">as</span> RevitElement;\n&nbsp; }\n&nbsp;\n&nbsp; <span class=\"blue\">private</span> <span class=\"teal\">Element</span> GetElementByName(\n&nbsp; &nbsp; <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Element</span>&gt; elements,\n&nbsp; &nbsp; <span class=\"blue\">string</span> name )\n&nbsp; {\n&nbsp; &nbsp; <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elements )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; System.Diagnostics.<span class=\"teal\">Debug</span>.WriteLine( e.Name );\n&nbsp; &nbsp; }\n&nbsp;\n&nbsp; &nbsp; <span class=\"teal\">Element</span> result = <span class=\"blue\">null</span>;\n&nbsp;\n&nbsp; &nbsp; <span class=\"blue\">try</span>\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; result = elements.First(\n&nbsp; &nbsp; &nbsp; &nbsp; element =&gt; element.Name == name );\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n&nbsp; &nbsp; }\n&nbsp; &nbsp; <span class=\"blue\">return</span> result;\n&nbsp; }\n</pre>\n\n-->\n<p><strong>Response:</strong> Yes, absolutely.\nThe view name can vary depending on project.\nI needed a more consistent way of getting a section definition element id.\nI implemented the following and it seems to do the trick:</p>\n<pre class=\"code\">\n  <span class=\"teal\">ElementId</span> SectionId = GetViewTypeIdByViewType(\n    <span class=\"teal\">ViewFamily</span>.Section );\n \n  <span class=\"teal\">ViewSection</span> NyViewSectionR\n    = <span class=\"teal\">ViewSection</span>.CreateSection(\n      doc.Document, SectionId, bbNewSectionR );\n \n  <span class=\"teal\">ElementId</span> GetViewTypeIdByViewType(\n    <span class=\"teal\">ViewFamily</span> viewFamily )\n  {\n    <span class=\"teal\">FilteredElementCollector</span> fec\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(\n        m_app.ActiveUIDocument.Document );\n \n    fec.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewFamilyType</span> ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewFamilyType</span> e <span class=\"blue\">in</span> fec )\n    {\n      System.Diagnostics.<span class=\"teal\">Debug</span>.WriteLine( e.Name );\n \n      <span class=\"blue\">if</span>( e.ViewFamily == viewFamily )\n      {\n        <span class=\"blue\">return</span> e.Id;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>If needed, I could continue the iteration when several suitable types are found and let the user choose, but that has not yet proved necessary.</p>\n<p>Many thanks to Håkan for sharing this!</p>\n</p>"
  }
]