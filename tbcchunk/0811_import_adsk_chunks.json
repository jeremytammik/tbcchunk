[
  {
    "original_filename": "0811_import_adsk",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0811_import_adsk",
    "header_text": "ADSK File Import and Phase of Room",
    "local_header_href": "#adsk-file-import-and-phase-of-room",
    "chunk_text": "<h3>ADSK File Import and Phase of Room</h3><p>I already had one look at \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/loading-an-inventor-adsk-component.html\">\nloading an Inventor ADSK component</a> using \n\nthe OpenBuildingComponentDocument method.\n\n<p>Ishwar Nagwani of Autodesk Consulting now revisited this topic from a different perspective and explains:\n\n<p>I came across another tricky issue while developing Revit add-in to import an ADSK file.\nI looked at your previous post on this when I started looking for way to open ADSK file in Revit and it helped me lot.\n\n<p>The ADSK file is created in Inventor and then processed in Revit to create an RFA file. \nThis is part of a bigger project which does lots of other stuff like adding shared parameters etc. \n\n<p>The ADSK file after importing contains two ImportInstances.\nOne of these is the bounding box, the other is the main solid itself. \nThe outer bounding box hides the geometry in elevation views.\nHere the bounding box which would be deleted is displayed in red:</p>\n<center>\n<img alt=\"ADSK component with bounding box in red\" src=\"img/adsk_import_1.png\" width=\"400\"/>\n</center>\n<p>These are the selected bounding box details displayed using RevitLookup:</p>\n<center>\n<img alt=\"ADSK component bounding box properties\" src=\"img/adsk_import_2.png\"/>\n</center>\n<p>I open the ADSK file using the OpenBuildingComponentDocument method and then delete the bounding box in a separate transaction.\n\n<p>The following method retrieves the ImportInstances and deletes the one representing the bounding box, identified by the fact that it only has exactly six faces:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> This method deletes the outer bounding box </span>\n<span class=\"gray\">///</span><span class=\"green\"> of an imported ADSK file in Revit. If this </span>\n<span class=\"gray\">///</span><span class=\"green\"> bounding box is not deleted, the elevation </span>\n<span class=\"gray\">///</span><span class=\"green\"> views cannot be seen. After importing an </span>\n<span class=\"gray\">///</span><span class=\"green\"> ADSK file the two ImportInstance objects </span>\n<span class=\"gray\">///</span><span class=\"green\"> are created in Revit, one for outer </span>\n<span class=\"gray\">///</span><span class=\"green\"> bounding box and the other for main solid.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">void</span> DeleteOuterBox( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"green\">// Instantiate this once only:</span>\n \n  <span class=\"teal\">Options</span> opt = doc.Application.Create\n    .NewGeometryOptions();\n \n  <span class=\"green\">// This is probably not needed:</span>\n \n  <span class=\"green\">//opt.ComputeReferences = true;</span>\n \n  <span class=\"green\">// Search the elements of type ImportInstance;</span>\n  <span class=\"green\">// there will be two in case of ADSK import:</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ImportInstance</span> ) );\n \n  <span class=\"teal\">ElementId</span> idToDelete = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"teal\">ImportInstance</span> inst = e <span class=\"blue\">as</span> <span class=\"teal\">ImportInstance</span>;\n \n    <span class=\"blue\">if</span>( inst != <span class=\"blue\">null</span> )\n    {\n      <span class=\"green\">// Get the Solid from ImportInstance</span>\n \n      <span class=\"teal\">GeometryElement</span> geomElem \n        = inst.get_Geometry( opt );\n \n      <span class=\"green\">// GeometryElement.Objects is obsolete,</span>\n      <span class=\"green\">// so use LINQ extension methods instead.</span>\n \n      <span class=\"green\">//GeometryObjectArray geomObjArray </span>\n      <span class=\"green\">//  = geomElem.Objects;</span>\n \n      <span class=\"blue\">int</span> n = geomElem.Count&lt;<span class=\"teal\">GeometryObject</span>&gt;();\n \n      <span class=\"blue\">if</span>( 1 == n )\n      {\n        <span class=\"teal\">Solid</span> solid = geomElem\n          .First&lt;<span class=\"teal\">GeometryObject</span>&gt;() <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"green\">// The outer bounding box</span>\n          <span class=\"green\">// has just 6 faces.</span>\n \n          <span class=\"blue\">if</span>( solid.Faces.Size == 6 )\n          {\n            <span class=\"green\">// Do not delete during iteration;<out span=\"\">\n            <span class=\"green\">// remember the id instead.</span>\n \n            <span class=\"green\">//doc.Delete( e.Id );</span>\n \n            idToDelete = e.Id;\n \n            <span class=\"blue\">break</span>;\n          }\n        }\n      }\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != idToDelete )\n      {\n        doc.Delete( idToDelete );\n      }\n    }\n  }\n}\n</out></span></pre>\n<p>Many thanks to Ishwar for this nice example!\n\n\n<a name=\"2\"></a>\n<h4>Determining the Phase of a Room</h4>\n<p>Here is another issue brought up and solved by \n\n<a href=\"http://www.hclausen.net\">Håkon Clausen</a>, \n\nwhose \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/revitrubyshell-implementation-and-installer.html\">\nRevitRubyShell</a> I\n\nrecently waxed so enthusiastic about:\n\n<p><strong>Question:</strong> How do I find which phase a room is in?\n\n<p>From the UI, the phase is uneditable and is the same phase as the view you created it in. \nUnfortunately, the room CreatedPhaseId and DemolishedPhaseId properties are not valid (-1, InvalidElementId) and the Room class provides no explicit phase access.\n\nI looked through your posts regarding phases, on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/phase-dependent-room-properties.html\">\nphase dependent room properties</a> and \n\nthe\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/family-instance-room-phase.html\">\nfamily instance room phase</a>.\n\nThey do not help, as they only describe how to determine the phases on family instances, not on the room itself.\n\n<p><strong>Answer:</strong> I solved it by reading the built-in parameter value for ROOM_PHASE_ID on the room element.\n\n<p>On an interesting side note, I needed the same information for Mechanical.Space objects, and this also worked by accessing the same built-in parameter ROOM_PHASE_ID, which is a little obscure, I think...\n\n<p>Thank you, Håkon, for raising and clarifying this.\n\n<p>The same credit also goes to Martino, who posted a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html?cid=6a00e553e1689788330176168faca8970c#comment-6a00e553e1689788330176168faca8970c\">\ncomment</a> to \n\nthe same effect on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html?cid=6a00e553e1689788330176168faca8970c#comment-6a00e553e1689788330176168faca8970c\">\nview and phase filtering</a> discussion.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0811_import_adsk",
    "header_text": "Determining the Phase of a Room",
    "local_header_href": "#determining-the-phase-of-a-room",
    "chunk_text": "<h4>Determining the Phase of a Room</h4><p>Here is another issue brought up and solved by \n\n<a href=\"http://www.hclausen.net\">Håkon Clausen</a>, \n\nwhose \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/revitrubyshell-implementation-and-installer.html\">\nRevitRubyShell</a> I\n\nrecently waxed so enthusiastic about:\n\n<p><strong>Question:</strong> How do I find which phase a room is in?\n\n<p>From the UI, the phase is uneditable and is the same phase as the view you created it in. \nUnfortunately, the room CreatedPhaseId and DemolishedPhaseId properties are not valid (-1, InvalidElementId) and the Room class provides no explicit phase access.\n\nI looked through your posts regarding phases, on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/phase-dependent-room-properties.html\">\nphase dependent room properties</a> and \n\nthe\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/family-instance-room-phase.html\">\nfamily instance room phase</a>.\n\nThey do not help, as they only describe how to determine the phases on family instances, not on the room itself.\n\n<p><strong>Answer:</strong> I solved it by reading the built-in parameter value for ROOM_PHASE_ID on the room element.\n\n<p>On an interesting side note, I needed the same information for Mechanical.Space objects, and this also worked by accessing the same built-in parameter ROOM_PHASE_ID, which is a little obscure, I think...\n\n<p>Thank you, Håkon, for raising and clarifying this.\n\n<p>The same credit also goes to Martino, who posted a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html?cid=6a00e553e1689788330176168faca8970c#comment-6a00e553e1689788330176168faca8970c\">\ncomment</a> to \n\nthe same effect on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html?cid=6a00e553e1689788330176168faca8970c#comment-6a00e553e1689788330176168faca8970c\">\nview and phase filtering</a> discussion.\n</p></p></p></p></p></p></p>"
  }
]