[
  {
    "original_filename": "0808_display_area_boundary",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0808_display_area_boundary",
    "header_text": "Graphically Display Area Boundary Loops",
    "local_header_href": "#graphically-display-area-boundary-loops",
    "chunk_text": "<h3>Graphically Display Area Boundary Loops</h3><p>I recently worked on a case from a developer struggling with area boundary loops and attempting to determine whether they were closed or not by looking at the coordinate values in RevitLookup.\n\n<p>I hold that the average human brain is overtaxed by trying to analyse graphics manually, or rather, cerebrally.\n\n<p>I therefore implemented a sample command DisplayBoundary to display them graphically instead. \n\n<p>It iterates over the boundary segments of selected areas, or all areas in the model, and creates a model curve to represent each segment. \n\n<p>After running the command, the model curves can be isolated to display the result graphically.\n\n\n<a name=\"2\"></a>\n<h4>Area Boundary Segment Retrieval Options</h4>\n<p>The Area.GetBoundarySegments method takes a SpatialElementBoundaryOptions argument, which enables us to specify the two properties StoreFreeBoundaryFaces and SpatialElementBoundaryLocation.\n\n<p>The former indicates whether to include free boundary faces in the result, i.e. portions of spatial element faces that are not coincident with bounding element faces. \n\n<p>The latter can be set to either Finish, to retrieve the spatial element finish face, or Center, for its centerline.\n\n<p>Since the Revit wall location definition relies heavily on centerlines, the latter setting is preferable in order to obtain closed loops from the boundary segment results.\n\n\n<a name=\"3\"></a>\n<h4>Example</h4>\n<p>Here is a simple sample area to test this on:</p>\n<center>\n<img alt=\"Area element\" src=\"img/display_boundary_area.png\"/>\n</center>\n<p>Its serrated edges stem from various openings in the walls of the underlying rooms:\n\n<center>\n<img alt=\"Area boundary rooms, walls and openings\" src=\"img/display_boundary_rooms_walls_openings.png\"/>\n</center>\n<p>Selecting this area element and running the DisplayBoundary command generates a model curve for each boundary segment.\nIsolating model lines in the view shows the area outline:</p>\n<center>\n<img alt=\"Model curves displaying area boundary\" src=\"img/display_boundary_lines.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Code</h4>\n<p>The code to achieve this is astonishingly simple and succinct, although it has not been tested extensively yet:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> col = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">ElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids \n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( set\n        .OfType&lt;<span class=\"teal\">Area</span>&gt;()\n        .Select&lt;<span class=\"teal\">Area</span>,<span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id ) );\n \n \n    <span class=\"blue\">if</span>( 0 == ids.Count )\n    {\n      message = <span class=\"maroon\">\"Please select some area alements \"</span>\n        + <span class=\"maroon\">\" before running his command, or nothing \"</span>\n        + <span class=\"maroon\">\"at all to process all of them.\"</span>;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// When instantiating a filtered element </span>\n    <span class=\"green\">// collector using preselected elements, </span>\n    <span class=\"green\">// you still must apply a filter, even if </span>\n    <span class=\"green\">// it has no effect, or the collector will </span>\n    <span class=\"green\">// throw an exception when accessing its</span>\n    <span class=\"green\">// elements:</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids )\n      .WhereElementIsNotElementType();\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve all area elements from database</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Area</span> ) );\n  }\n \n  <span class=\"green\">// Specify boundary options</span>\n \n  <span class=\"teal\">SpatialElementBoundaryOptions</span> opt \n    = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n  opt.StoreFreeBoundaryFaces = <span class=\"blue\">true</span>;\n \n  opt.SpatialElementBoundaryLocation =\n    <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center; <span class=\"green\">// loops closed</span>\n    <span class=\"green\">//SpatialElementBoundaryLocation.Finish; // loops not closed</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Convert Area Loops To Model Curves\"</span> );\n \n    <span class=\"green\">// Filtered element collector is iterable</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Area</span> area <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Debug</span>.Print( area.Name );\n \n      <span class=\"blue\">double</span> z = area.Level.Elevation;\n \n      <span class=\"teal\">Plane</span> levelPlane = app.Create.NewPlane( \n        <span class=\"teal\">XYZ</span>.BasisZ, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, z ) );\n \n      <span class=\"teal\">SketchPlane</span> sketchPlane \n        = doc.Create.NewSketchPlane( levelPlane );\n \n      sketchPlane.Name = <span class=\"maroon\">\"Model Curves for Area \"</span>\n        + area.Id.ToString();\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops\n        = area.GetBoundarySegments( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt; loop <span class=\"blue\">in</span> loops )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">BoundarySegment</span> seg <span class=\"blue\">in</span> loop )\n        {\n          doc.Create.NewModelCurve( \n            seg.Curve, sketchPlane );\n        }\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Here is \n\n<a href=\"zip/DisplayBoundary.zip\">DisplayBoundary.zip</a> \n\nincluding the complete source code, Visual Studio solution, and add-in manifest for this command.\n\n\n<a name=\"11\"></a>\n<h4>Unicode Characters in IFC</h4>\n<p>On a completely different topic, here is a recent question that came up:\n\n<p><strong>Question:</strong> How are Chinese characters exported to an IFC file?\n\n<p>I see an entry like this in my output file:\n\n<pre>\n  #53 = IFCPROJECT(\n    '2ZorIEY491exwHFgtoAWmP',#52,\n    '\\X2\\987976EE7F1653F7\\X0\\',$,$,\n    '\\X2\\987976EE540D79F0\\X0\\',\n    '\\X2\\987976EE72B66001\\X0\\',\n    (#42,#47),#35);\n</pre>\n<p>I do not recognise this format.\n\n<p>Can you explain, please?\n\n\n<p><strong>Answer:</strong> All strings in IFC files are in Unicode.\nThey are encoded according to the rules described in the buildingSMART\n\n<a href=\"http://www.buildingsmart-tech.org/implementation/get-started/string-encoding/string-encoding-decoding-summary\">\nstring encoding and decoding summary</a>.\n\n\n<a name=\"12\"></a>\n<h4>Create Assemblies Sample</h4>\n<p>My colleague \n\n<a href=\"http://adndevblog.typepad.com/aec/katsuaki-takamizawa.html\">Katsuaki Takamizawa</a>\n\njust published a Revit 2013 port and demonstration of the\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/assemblyparts-samples.html\">\nassembly creation and comparison source code sample</a> provided \n\nby the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/the-revit-mep-2012-api.html#2\">\nRevit 2012 API webcast recording</a>.\n\n<p>It implements two external commands:\n\n<ul>\n<li>CreateAssemblies lets you pick elements and creates an assembly instance and a part list in a schedule view.\n<li>Compare Assemblies asks you to select two assembly instances and finds differences such as the number or types of elements. \n</li></li></ul>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0808_display_area_boundary",
    "header_text": "Area Boundary Segment Retrieval Options",
    "local_header_href": "#area-boundary-segment-retrieval-options",
    "chunk_text": "<h4>Area Boundary Segment Retrieval Options</h4><p>The Area.GetBoundarySegments method takes a SpatialElementBoundaryOptions argument, which enables us to specify the two properties StoreFreeBoundaryFaces and SpatialElementBoundaryLocation.\n\n<p>The former indicates whether to include free boundary faces in the result, i.e. portions of spatial element faces that are not coincident with bounding element faces. \n\n<p>The latter can be set to either Finish, to retrieve the spatial element finish face, or Center, for its centerline.\n\n<p>Since the Revit wall location definition relies heavily on centerlines, the latter setting is preferable in order to obtain closed loops from the boundary segment results.\n\n\n<a name=\"3\"></a>\n<h4>Example</h4>\n<p>Here is a simple sample area to test this on:</p>\n<center>\n<img alt=\"Area element\" src=\"img/display_boundary_area.png\"/>\n</center>\n<p>Its serrated edges stem from various openings in the walls of the underlying rooms:\n\n<center>\n<img alt=\"Area boundary rooms, walls and openings\" src=\"img/display_boundary_rooms_walls_openings.png\"/>\n</center>\n<p>Selecting this area element and running the DisplayBoundary command generates a model curve for each boundary segment.\nIsolating model lines in the view shows the area outline:</p>\n<center>\n<img alt=\"Model curves displaying area boundary\" src=\"img/display_boundary_lines.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Code</h4>\n<p>The code to achieve this is astonishingly simple and succinct, although it has not been tested extensively yet:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> col = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">ElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids \n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( set\n        .OfType&lt;<span class=\"teal\">Area</span>&gt;()\n        .Select&lt;<span class=\"teal\">Area</span>,<span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id ) );\n \n \n    <span class=\"blue\">if</span>( 0 == ids.Count )\n    {\n      message = <span class=\"maroon\">\"Please select some area alements \"</span>\n        + <span class=\"maroon\">\" before running his command, or nothing \"</span>\n        + <span class=\"maroon\">\"at all to process all of them.\"</span>;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// When instantiating a filtered element </span>\n    <span class=\"green\">// collector using preselected elements, </span>\n    <span class=\"green\">// you still must apply a filter, even if </span>\n    <span class=\"green\">// it has no effect, or the collector will </span>\n    <span class=\"green\">// throw an exception when accessing its</span>\n    <span class=\"green\">// elements:</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids )\n      .WhereElementIsNotElementType();\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve all area elements from database</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Area</span> ) );\n  }\n \n  <span class=\"green\">// Specify boundary options</span>\n \n  <span class=\"teal\">SpatialElementBoundaryOptions</span> opt \n    = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n  opt.StoreFreeBoundaryFaces = <span class=\"blue\">true</span>;\n \n  opt.SpatialElementBoundaryLocation =\n    <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center; <span class=\"green\">// loops closed</span>\n    <span class=\"green\">//SpatialElementBoundaryLocation.Finish; // loops not closed</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Convert Area Loops To Model Curves\"</span> );\n \n    <span class=\"green\">// Filtered element collector is iterable</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Area</span> area <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Debug</span>.Print( area.Name );\n \n      <span class=\"blue\">double</span> z = area.Level.Elevation;\n \n      <span class=\"teal\">Plane</span> levelPlane = app.Create.NewPlane( \n        <span class=\"teal\">XYZ</span>.BasisZ, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, z ) );\n \n      <span class=\"teal\">SketchPlane</span> sketchPlane \n        = doc.Create.NewSketchPlane( levelPlane );\n \n      sketchPlane.Name = <span class=\"maroon\">\"Model Curves for Area \"</span>\n        + area.Id.ToString();\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops\n        = area.GetBoundarySegments( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt; loop <span class=\"blue\">in</span> loops )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">BoundarySegment</span> seg <span class=\"blue\">in</span> loop )\n        {\n          doc.Create.NewModelCurve( \n            seg.Curve, sketchPlane );\n        }\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Here is \n\n<a href=\"zip/DisplayBoundary.zip\">DisplayBoundary.zip</a> \n\nincluding the complete source code, Visual Studio solution, and add-in manifest for this command.\n\n\n<a name=\"11\"></a>\n<h4>Unicode Characters in IFC</h4>\n<p>On a completely different topic, here is a recent question that came up:\n\n<p><strong>Question:</strong> How are Chinese characters exported to an IFC file?\n\n<p>I see an entry like this in my output file:\n\n<pre>\n  #53 = IFCPROJECT(\n    '2ZorIEY491exwHFgtoAWmP',#52,\n    '\\X2\\987976EE7F1653F7\\X0\\',$,$,\n    '\\X2\\987976EE540D79F0\\X0\\',\n    '\\X2\\987976EE72B66001\\X0\\',\n    (#42,#47),#35);\n</pre>\n<p>I do not recognise this format.\n\n<p>Can you explain, please?\n\n\n<p><strong>Answer:</strong> All strings in IFC files are in Unicode.\nThey are encoded according to the rules described in the buildingSMART\n\n<a href=\"http://www.buildingsmart-tech.org/implementation/get-started/string-encoding/string-encoding-decoding-summary\">\nstring encoding and decoding summary</a>.\n\n\n<a name=\"12\"></a>\n<h4>Create Assemblies Sample</h4>\n<p>My colleague \n\n<a href=\"http://adndevblog.typepad.com/aec/katsuaki-takamizawa.html\">Katsuaki Takamizawa</a>\n\njust published a Revit 2013 port and demonstration of the\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/assemblyparts-samples.html\">\nassembly creation and comparison source code sample</a> provided \n\nby the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/the-revit-mep-2012-api.html#2\">\nRevit 2012 API webcast recording</a>.\n\n<p>It implements two external commands:\n\n<ul>\n<li>CreateAssemblies lets you pick elements and creates an assembly instance and a part list in a schedule view.\n<li>Compare Assemblies asks you to select two assembly instances and finds differences such as the number or types of elements. \n</li></li></ul>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0808_display_area_boundary",
    "header_text": "Example",
    "local_header_href": "#example",
    "chunk_text": "<h4>Example</h4><p>Here is a simple sample area to test this on:</p><center>\n<img alt=\"Area element\" src=\"img/display_boundary_area.png\"/>\n</center><p>Its serrated edges stem from various openings in the walls of the underlying rooms:\n\n<center>\n<img alt=\"Area boundary rooms, walls and openings\" src=\"img/display_boundary_rooms_walls_openings.png\"/>\n</center>\n<p>Selecting this area element and running the DisplayBoundary command generates a model curve for each boundary segment.\nIsolating model lines in the view shows the area outline:</p>\n<center>\n<img alt=\"Model curves displaying area boundary\" src=\"img/display_boundary_lines.png\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Code</h4>\n<p>The code to achieve this is astonishingly simple and succinct, although it has not been tested extensively yet:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> col = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">ElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids \n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( set\n        .OfType&lt;<span class=\"teal\">Area</span>&gt;()\n        .Select&lt;<span class=\"teal\">Area</span>,<span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id ) );\n \n \n    <span class=\"blue\">if</span>( 0 == ids.Count )\n    {\n      message = <span class=\"maroon\">\"Please select some area alements \"</span>\n        + <span class=\"maroon\">\" before running his command, or nothing \"</span>\n        + <span class=\"maroon\">\"at all to process all of them.\"</span>;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// When instantiating a filtered element </span>\n    <span class=\"green\">// collector using preselected elements, </span>\n    <span class=\"green\">// you still must apply a filter, even if </span>\n    <span class=\"green\">// it has no effect, or the collector will </span>\n    <span class=\"green\">// throw an exception when accessing its</span>\n    <span class=\"green\">// elements:</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids )\n      .WhereElementIsNotElementType();\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve all area elements from database</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Area</span> ) );\n  }\n \n  <span class=\"green\">// Specify boundary options</span>\n \n  <span class=\"teal\">SpatialElementBoundaryOptions</span> opt \n    = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n  opt.StoreFreeBoundaryFaces = <span class=\"blue\">true</span>;\n \n  opt.SpatialElementBoundaryLocation =\n    <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center; <span class=\"green\">// loops closed</span>\n    <span class=\"green\">//SpatialElementBoundaryLocation.Finish; // loops not closed</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Convert Area Loops To Model Curves\"</span> );\n \n    <span class=\"green\">// Filtered element collector is iterable</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Area</span> area <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Debug</span>.Print( area.Name );\n \n      <span class=\"blue\">double</span> z = area.Level.Elevation;\n \n      <span class=\"teal\">Plane</span> levelPlane = app.Create.NewPlane( \n        <span class=\"teal\">XYZ</span>.BasisZ, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, z ) );\n \n      <span class=\"teal\">SketchPlane</span> sketchPlane \n        = doc.Create.NewSketchPlane( levelPlane );\n \n      sketchPlane.Name = <span class=\"maroon\">\"Model Curves for Area \"</span>\n        + area.Id.ToString();\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops\n        = area.GetBoundarySegments( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt; loop <span class=\"blue\">in</span> loops )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">BoundarySegment</span> seg <span class=\"blue\">in</span> loop )\n        {\n          doc.Create.NewModelCurve( \n            seg.Curve, sketchPlane );\n        }\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Here is \n\n<a href=\"zip/DisplayBoundary.zip\">DisplayBoundary.zip</a> \n\nincluding the complete source code, Visual Studio solution, and add-in manifest for this command.\n\n\n<a name=\"11\"></a>\n<h4>Unicode Characters in IFC</h4>\n<p>On a completely different topic, here is a recent question that came up:\n\n<p><strong>Question:</strong> How are Chinese characters exported to an IFC file?\n\n<p>I see an entry like this in my output file:\n\n<pre>\n  #53 = IFCPROJECT(\n    '2ZorIEY491exwHFgtoAWmP',#52,\n    '\\X2\\987976EE7F1653F7\\X0\\',$,$,\n    '\\X2\\987976EE540D79F0\\X0\\',\n    '\\X2\\987976EE72B66001\\X0\\',\n    (#42,#47),#35);\n</pre>\n<p>I do not recognise this format.\n\n<p>Can you explain, please?\n\n\n<p><strong>Answer:</strong> All strings in IFC files are in Unicode.\nThey are encoded according to the rules described in the buildingSMART\n\n<a href=\"http://www.buildingsmart-tech.org/implementation/get-started/string-encoding/string-encoding-decoding-summary\">\nstring encoding and decoding summary</a>.\n\n\n<a name=\"12\"></a>\n<h4>Create Assemblies Sample</h4>\n<p>My colleague \n\n<a href=\"http://adndevblog.typepad.com/aec/katsuaki-takamizawa.html\">Katsuaki Takamizawa</a>\n\njust published a Revit 2013 port and demonstration of the\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/assemblyparts-samples.html\">\nassembly creation and comparison source code sample</a> provided \n\nby the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/the-revit-mep-2012-api.html#2\">\nRevit 2012 API webcast recording</a>.\n\n<p>It implements two external commands:\n\n<ul>\n<li>CreateAssemblies lets you pick elements and creates an assembly instance and a part list in a schedule view.\n<li>Compare Assemblies asks you to select two assembly instances and finds differences such as the number or types of elements. \n</li></li></ul>\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0808_display_area_boundary",
    "header_text": "Code",
    "local_header_href": "#code",
    "chunk_text": "<h4>Code</h4><p>The code to achieve this is astonishingly simple and succinct, although it has not been tested extensively yet:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> col = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">ElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids \n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( set\n        .OfType&lt;<span class=\"teal\">Area</span>&gt;()\n        .Select&lt;<span class=\"teal\">Area</span>,<span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id ) );\n \n \n    <span class=\"blue\">if</span>( 0 == ids.Count )\n    {\n      message = <span class=\"maroon\">\"Please select some area alements \"</span>\n        + <span class=\"maroon\">\" before running his command, or nothing \"</span>\n        + <span class=\"maroon\">\"at all to process all of them.\"</span>;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// When instantiating a filtered element </span>\n    <span class=\"green\">// collector using preselected elements, </span>\n    <span class=\"green\">// you still must apply a filter, even if </span>\n    <span class=\"green\">// it has no effect, or the collector will </span>\n    <span class=\"green\">// throw an exception when accessing its</span>\n    <span class=\"green\">// elements:</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids )\n      .WhereElementIsNotElementType();\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve all area elements from database</span>\n \n    col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Area</span> ) );\n  }\n \n  <span class=\"green\">// Specify boundary options</span>\n \n  <span class=\"teal\">SpatialElementBoundaryOptions</span> opt \n    = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n  opt.StoreFreeBoundaryFaces = <span class=\"blue\">true</span>;\n \n  opt.SpatialElementBoundaryLocation =\n    <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center; <span class=\"green\">// loops closed</span>\n    <span class=\"green\">//SpatialElementBoundaryLocation.Finish; // loops not closed</span>\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    tx.Start( <span class=\"maroon\">\"Convert Area Loops To Model Curves\"</span> );\n \n    <span class=\"green\">// Filtered element collector is iterable</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Area</span> area <span class=\"blue\">in</span> col )\n    {\n      <span class=\"teal\">Debug</span>.Print( area.Name );\n \n      <span class=\"blue\">double</span> z = area.Level.Elevation;\n \n      <span class=\"teal\">Plane</span> levelPlane = app.Create.NewPlane( \n        <span class=\"teal\">XYZ</span>.BasisZ, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, z ) );\n \n      <span class=\"teal\">SketchPlane</span> sketchPlane \n        = doc.Create.NewSketchPlane( levelPlane );\n \n      sketchPlane.Name = <span class=\"maroon\">\"Model Curves for Area \"</span>\n        + area.Id.ToString();\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops\n        = area.GetBoundarySegments( opt );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt; loop <span class=\"blue\">in</span> loops )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">BoundarySegment</span> seg <span class=\"blue\">in</span> loop )\n        {\n          doc.Create.NewModelCurve( \n            seg.Curve, sketchPlane );\n        }\n      }\n    }\n \n    tx.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>Here is \n\n<a href=\"zip/DisplayBoundary.zip\">DisplayBoundary.zip</a> \n\nincluding the complete source code, Visual Studio solution, and add-in manifest for this command.\n\n\n<a name=\"11\"></a>\n<h4>Unicode Characters in IFC</h4>\n<p>On a completely different topic, here is a recent question that came up:\n\n<p><strong>Question:</strong> How are Chinese characters exported to an IFC file?\n\n<p>I see an entry like this in my output file:\n\n<pre>\n  #53 = IFCPROJECT(\n    '2ZorIEY491exwHFgtoAWmP',#52,\n    '\\X2\\987976EE7F1653F7\\X0\\',$,$,\n    '\\X2\\987976EE540D79F0\\X0\\',\n    '\\X2\\987976EE72B66001\\X0\\',\n    (#42,#47),#35);\n</pre>\n<p>I do not recognise this format.\n\n<p>Can you explain, please?\n\n\n<p><strong>Answer:</strong> All strings in IFC files are in Unicode.\nThey are encoded according to the rules described in the buildingSMART\n\n<a href=\"http://www.buildingsmart-tech.org/implementation/get-started/string-encoding/string-encoding-decoding-summary\">\nstring encoding and decoding summary</a>.\n\n\n<a name=\"12\"></a>\n<h4>Create Assemblies Sample</h4>\n<p>My colleague \n\n<a href=\"http://adndevblog.typepad.com/aec/katsuaki-takamizawa.html\">Katsuaki Takamizawa</a>\n\njust published a Revit 2013 port and demonstration of the\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/assemblyparts-samples.html\">\nassembly creation and comparison source code sample</a> provided \n\nby the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/the-revit-mep-2012-api.html#2\">\nRevit 2012 API webcast recording</a>.\n\n<p>It implements two external commands:\n\n<ul>\n<li>CreateAssemblies lets you pick elements and creates an assembly instance and a part list in a schedule view.\n<li>Compare Assemblies asks you to select two assembly instances and finds differences such as the number or types of elements. \n</li></li></ul>\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0808_display_area_boundary",
    "header_text": "Unicode Characters in IFC",
    "local_header_href": "#unicode-characters-in-ifc",
    "chunk_text": "<h4>Unicode Characters in IFC</h4><p>On a completely different topic, here is a recent question that came up:\n\n<p><strong>Question:</strong> How are Chinese characters exported to an IFC file?\n\n<p>I see an entry like this in my output file:\n\n<pre>\n  #53 = IFCPROJECT(\n    '2ZorIEY491exwHFgtoAWmP',#52,\n    '\\X2\\987976EE7F1653F7\\X0\\',$,$,\n    '\\X2\\987976EE540D79F0\\X0\\',\n    '\\X2\\987976EE72B66001\\X0\\',\n    (#42,#47),#35);\n</pre>\n<p>I do not recognise this format.\n\n<p>Can you explain, please?\n\n\n<p><strong>Answer:</strong> All strings in IFC files are in Unicode.\nThey are encoded according to the rules described in the buildingSMART\n\n<a href=\"http://www.buildingsmart-tech.org/implementation/get-started/string-encoding/string-encoding-decoding-summary\">\nstring encoding and decoding summary</a>.\n\n\n<a name=\"12\"></a>\n<h4>Create Assemblies Sample</h4>\n<p>My colleague \n\n<a href=\"http://adndevblog.typepad.com/aec/katsuaki-takamizawa.html\">Katsuaki Takamizawa</a>\n\njust published a Revit 2013 port and demonstration of the\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/assemblyparts-samples.html\">\nassembly creation and comparison source code sample</a> provided \n\nby the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/the-revit-mep-2012-api.html#2\">\nRevit 2012 API webcast recording</a>.\n\n<p>It implements two external commands:\n\n<ul>\n<li>CreateAssemblies lets you pick elements and creates an assembly instance and a part list in a schedule view.\n<li>Compare Assemblies asks you to select two assembly instances and finds differences such as the number or types of elements. \n</li></li></ul>\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0808_display_area_boundary",
    "header_text": "Create Assemblies Sample",
    "local_header_href": "#create-assemblies-sample",
    "chunk_text": "<h4>Create Assemblies Sample</h4><p>My colleague \n\n<a href=\"http://adndevblog.typepad.com/aec/katsuaki-takamizawa.html\">Katsuaki Takamizawa</a>\n\njust published a Revit 2013 port and demonstration of the\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/08/assemblyparts-samples.html\">\nassembly creation and comparison source code sample</a> provided \n\nby the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/the-revit-mep-2012-api.html#2\">\nRevit 2012 API webcast recording</a>.\n\n<p>It implements two external commands:\n\n<ul>\n<li>CreateAssemblies lets you pick elements and creates an assembly instance and a part list in a schedule view.\n<li>Compare Assemblies asks you to select two assembly instances and finds differences such as the number or types of elements. \n</li></li></ul>\n</p></p>"
  }
]