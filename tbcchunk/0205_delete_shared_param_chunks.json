[
  {
    "original_filename": "0205_delete_shared_param",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0205_delete_shared_param",
    "header_text": "Deleting a Shared Parameter",
    "local_header_href": "#deleting-a-shared-parameter",
    "chunk_text": "<h3>Deleting a Shared Parameter</h3><p>Here is another question handled by Joe Ye, on removal of shared parameters.</p><p><strong>Question:</strong>\nI'm creating a shared parameter and adding it to a parameter group. \nI then bind it as an instance parameter. \nI would like to be able to test and remove the binding if a parameter of the same name exists. \nFor instance, I am creating a parameter called XYZ_TEST_PARAMETER. \nIf I run the code twice, I end up with two parameters with the same name. \nI fully understand that they have different GUIDs, but need a mechanism to remove the existing. \n\n<p><strong>Answer:</strong>\nShared parameter can be removed using the method Document.ParameterBindings.Remove( Definition ). \nThe Definition object can be retrieved from the definition file, which can be obtained through the sequence\nApplication.OpenSharedParameterFile &gt; DefinitionFile &gt; DefinitionGroup &gt; Definition. \nYou can also get a parameter definition from the parameter itself using the Parameter.Defintion property. \n\n<p><strong>Question:</strong>\nI would prefer not to require the shared parameter file to be present. \nI need to be able to delete the bound parameter making no reference to the shared parameter file. \n\n<p><strong>Answer:</strong>\nI just tested removal of a shared parameter bound to walls.\nThe definition is retrieved from the Parameter.Definition, and Revit does not have a definition text file defined.\nThis works well in Revit Architecture 2010, so a shared parameter can indeed be removed without the definition text file. \nHere is the code I used, which assumes that walls have a shared parameter named \u001cAPIParameter\u001d bound to them:\n\n<pre class=\"code\"> \n<span class=\"blue\">public</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span> Execute( \n  <span class=\"teal\">ExternalCommandData</span> commandData, \n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  doc.Selection.StatusbarTip \n    = <span class=\"maroon\">\"Please select a wall to remove \"</span>\n      + <span class=\"maroon\">\"the shared parameter bound to it.\"</span>;\n \n  doc.Selection.PickOne();\n \n  <span class=\"teal\">Element</span> wall = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> doc.Selection.Elements )\n  {\n    wall = e;\n    <span class=\"blue\">break</span>;\n  }\n \n  <span class=\"blue\">if</span>( wall != <span class=\"blue\">null</span> )\n  {\n    <span class=\"teal\">Parameter</span> par = wall.get_Parameter( \n      <span class=\"maroon\">\"APIParameter\"</span> );\n \n    <span class=\"teal\">Definition</span> def = par.Definition;\n \n    doc.ParameterBindings.Remove( def );\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p><strong>Question:</strong>\nI think we're getting there. \nI want to do this with no user interaction. \nThe only thing I know is the parameter name.\nI do not know what element type it's been bound to. \n\n<p><strong>Answer:</strong>\nKnowing only the shared parameter name is obviously sufficient to remove the parameter binding if the name is unique.\nAll the binding information is stored in Document.ParameterBindings collection, and we can access all the binding by iterating over that.\n\n<p>We can get the key and the binding for each item. \nThe key of the binding is the parameter definition. \nWe can compare the definition name with your target parameter name. \nIf they are equal, you have found the parameter you are searching for. \nPlease note that several shared parameters with the same name can live together in a document. \nIf this is the case in your situation, you will have to check for more information such as the category of each binding.\n\n<p>Here is the code for the Execute method of an external command which iterates over all parameter bindings and finds and removes the target shared parameter:\n\n<pre class=\"code\"> \n<span class=\"blue\">public</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span> Execute( \n  <span class=\"teal\">ExternalCommandData</span> commandData, \n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"teal\">BindingMap</span> bm = doc.ParameterBindings;\n \n  <span class=\"teal\">DefinitionBindingMapIterator</span> it \n    = bm.ForwardIterator();\n \n  <span class=\"blue\">while</span>( it.MoveNext() )\n  {\n    <span class=\"teal\">Definition</span> def = it.Key;\n \n    <span class=\"blue\">if</span>( def.Name.Equals( <span class=\"maroon\">\"APIParameter\"</span> ) )\n    {\n      bm.Remove( def );\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>There is one important thing to note here:\nFor the sake of simplicity, the target parameter is being removed here whilst the iteration is still going on.\nThis will not necessarily cause problems in every case, but in general, it should be avoided.\nA better approach might be to perform the iteration first, collect all the entries you want to delete, and then \n\nperform the actual deletion after the iteration has terminated.\n\n<p>Thank you very much Joe for these answers!</p></p></p></p></p></p></p></p></p></p>"
  }
]