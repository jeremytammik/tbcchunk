[
  {
    "original_filename": "0699_opening_geometry",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0699_opening_geometry",
    "header_text": "Opening Geometry, Using LINQ, and Dances with Elephants",
    "local_header_href": "#opening-geometry-using-linq-and-dances-with-elephants",
    "chunk_text": "<h3>Opening Geometry, Using LINQ, and Dances with Elephants</h3><p>Here are two unrelated topics that came up related to openings and the <a href=\"#2\">use of LINQ with the Revit API</a>. \n\n<p>The issue on requesting non-visible objects to be included when retrieving geometry was discussed a few times in the past, e.g. in the theoretical explanation of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/geometry-options.html\">\ngeometry retrieval options</a> and\n\nin the practical case of accessing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/curtain-wall-geometry.html\">\ncurtain wall geometry</a>.\n\n<p>Here is another neat little issue that just came up and helps throw more light on some of the variations that occur when retrieving family symbol geometry.\n\n<p><strong>Question:</strong> Sometimes when I retrieve the geometry of an opening, for example from the family file M_Opening.rfa which is part of the standard Revit content, I get a solid with zero faces and edges. The Solid Edges and Faces arrays are both empty. Other times they are not. \n\n<p>The geometry I am trying to retrieve is the symbol geometry of the only member in the geometry element's Objects array, a geometry instance. I do not see this issue with other kinds of elements, only openings, both the ones I create myself and the default families provided with Revit.  \n\n<p>What do I need to do to reliably retrieve the geometry of these elements?\n\n<p><strong>Answer:</strong> I have seen cases in which certain elements have solid with no faces and no edges. I have always assumed that this has to do with the fact that under some circumstances, the original family symbol geometry can be used, in which case the individual family instance does not require its own individual copy. Under other circumstances, the family instance needs its own copy, because the original family symbol geometry has to be modified in some way.\n\n<p>For instance, consider a column that may be inserted stand-alone into a project and then can reuse the symbol geometry unmodified, or the same column connected with some beams, which may generate cut-outs or other modifications, forcing the instance to maintain its own copy of the geometry. \n\n<p>I described a similar situation accessing the geometry of a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/joined-beam-geometry-access.html\">\njoined beam</a>.\n\n<p>Does that apply in your case?\n\n<p><strong>Response:</strong> First I edited the opening instance by changing its width and height using 'Edit Type'.\nThe geometry returned after that had non-empty lists of edges and faces, so I guess you are onto something. \nI had to change the width and height by a large amount, though, because just a few millimetres did not help. \n\n<p>I thought I was retrieving the family symbol's geometry by querying the instance SymbolGeometry property. \n\n<p>Oddly, when I retrieve the geometry of the family symbol explicitly by getting the geometry of the  family instance symbol, the edges and faces are still empty.   \n\n<p>How do I retrieve what you call the \"original family symbol\"?  \nDo I need to open the family symbol in a family manager or something? \n\n<p>I found the solution. The IncludeNonVisibleObjects property in the Options used for retrieving the geometry must be set to True.\n\n\n<p><strong>Answer:</strong> This may be a result of the opening being a removal of geometry.  \nIn the family, the geometry consists only of four lines, defining the outline of the opening on its host, the wall.\n\n<p>In the project, there is no solid geometry of the element at all, as you can see by selecting the face of the opening – no volume highlights on the opening although dimensions related to the element are shown.  \nThe non-visible geometry may be used by Revit for combination and construction of the opening.  \nThis may not be fully reliable.\n\n<p>Another approach to finding the geometry of the opening would be to extract the geometry of the host wall, and use the Element.GetGeneratingElementIds available in Revit 2012 and later to see which faces are generated by the given opening element.\n\n\n<a name=\"2\"></a>\n<h4>Retrieving the First Element of an Enumerable Sequence using LINQ</h4>\n<p>Markus Hannweber pointed out an interesting little possibilty in a comment on the code presented to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/loading-an-inventor-adsk-component.html\">\nload an Inventor ADSK component</a>,\n\nwhere I retrieve the first symbol of a newly loaded family using the following lines of code:\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilySymbol</span> symbol = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> f.Symbols )\n  {\n    symbol = s;\n    <span class=\"blue\">break</span>;\n  }\n</pre>\n<p>Markus points out that the System.Linq namespace provides the extension member First which returns the first element of any IEnumerable sequence, which would allow me to replace those lines by a single call to that extension method.\n\n<p>This nicely complements the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/pick-corners-and-create-floor.html#comment-6a00e553e168978833015392f0c3e5970b\">\nsuggestion</a>\n\nby Jon Smith on using the LINQ FirstOrDefault method in the sample code on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/pick-corners-and-create-floor.html\">\npicking corners to create a floor</a>,\n\nwhich avoids having to handle the exception thrown by the First method if no element is found.\n\n<p>Using both of these suggestions results in the following single line of code:\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilySymbol</span> symbol = f.Symbols\n    .Cast&lt;<span class=\"teal\">FamilySymbol</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">FamilySymbol</span>&gt;();\n</pre>\n<p>This is in fact not all that much shorter than the original version, and rather harder to read.\nStill, it is definitely worthwhile keeping an open eye on all the useful functionality provided by LINQ.\n\n<p>It would be shorter if the FamilySymbolSet class was not just derived from IEnumerable, as it is now, but from IEnumerable&lt;FamilySymbol&gt;. If that were the case, then the line above could probably be vastly simplified to\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilySymbol</span> symbol = f.Symbols\n    .FirstOrDefault();\n</pre>\n<p>The basic IEnumerable was the standard in the .NET framework 1.1. \nThe generic IEnumerable&lt;T&gt; was added later, and the ungeneric IEnumerable retained for compatibility reasons.\nThe current implementation of FamilySymbolSet seems based on the .NET framework 1.1.\nOn the other hand, the Revit API has been in the process of phasing out all of its custom collectioon classes and replacing them with .NET standard generic collections instead for several releases now, so I  guess this issue will resolve itself by itself as time goes on.\n\n<p>The LINQ syntax certainly makes the intent much clearer than an aborted loop does, even if it is not necessarily less code.\n\n<p>Anyone with the desire can of course easily add extension methods to Revit collections to allow this to be done invisibly.\n\n<p>Many thanks to Scott Conover for his great input on both of the issues discussed above!\n\n<!--\n\n<a name=\"3\"></a>\n\n<h4>Dances With Elephants</h4>\n\n<p>I want to point out this useful new developer related blog with the most awesome name of the year:\n\n<a href=\"http://dances-with-elephants.typepad.com/blog\">Dances With Elephants</a> by\n\nJim Quanci, Director of the Autodesk Developer Network ADN, on how small companies can leverage big ones to build their business, e.g. by using the Autodesk Revit API to create and provide your add-in functionality to a large global audience.\n\n--></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0699_opening_geometry",
    "header_text": "Retrieving the First Element of an Enumerable Sequence using LINQ",
    "local_header_href": "#retrieving-the-first-element-of-an-enumerable-sequence-using-linq",
    "chunk_text": "<h4>Retrieving the First Element of an Enumerable Sequence using LINQ</h4><p>Markus Hannweber pointed out an interesting little possibilty in a comment on the code presented to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/loading-an-inventor-adsk-component.html\">\nload an Inventor ADSK component</a>,\n\nwhere I retrieve the first symbol of a newly loaded family using the following lines of code:\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilySymbol</span> symbol = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> s <span class=\"blue\">in</span> f.Symbols )\n  {\n    symbol = s;\n    <span class=\"blue\">break</span>;\n  }\n</pre>\n<p>Markus points out that the System.Linq namespace provides the extension member First which returns the first element of any IEnumerable sequence, which would allow me to replace those lines by a single call to that extension method.\n\n<p>This nicely complements the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/pick-corners-and-create-floor.html#comment-6a00e553e168978833015392f0c3e5970b\">\nsuggestion</a>\n\nby Jon Smith on using the LINQ FirstOrDefault method in the sample code on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/pick-corners-and-create-floor.html\">\npicking corners to create a floor</a>,\n\nwhich avoids having to handle the exception thrown by the First method if no element is found.\n\n<p>Using both of these suggestions results in the following single line of code:\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilySymbol</span> symbol = f.Symbols\n    .Cast&lt;<span class=\"teal\">FamilySymbol</span>&gt;()\n    .FirstOrDefault&lt;<span class=\"teal\">FamilySymbol</span>&gt;();\n</pre>\n<p>This is in fact not all that much shorter than the original version, and rather harder to read.\nStill, it is definitely worthwhile keeping an open eye on all the useful functionality provided by LINQ.\n\n<p>It would be shorter if the FamilySymbolSet class was not just derived from IEnumerable, as it is now, but from IEnumerable&lt;FamilySymbol&gt;. If that were the case, then the line above could probably be vastly simplified to\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilySymbol</span> symbol = f.Symbols\n    .FirstOrDefault();\n</pre>\n<p>The basic IEnumerable was the standard in the .NET framework 1.1. \nThe generic IEnumerable&lt;T&gt; was added later, and the ungeneric IEnumerable retained for compatibility reasons.\nThe current implementation of FamilySymbolSet seems based on the .NET framework 1.1.\nOn the other hand, the Revit API has been in the process of phasing out all of its custom collectioon classes and replacing them with .NET standard generic collections instead for several releases now, so I  guess this issue will resolve itself by itself as time goes on.\n\n<p>The LINQ syntax certainly makes the intent much clearer than an aborted loop does, even if it is not necessarily less code.\n\n<p>Anyone with the desire can of course easily add extension methods to Revit collections to allow this to be done invisibly.\n\n<p>Many thanks to Scott Conover for his great input on both of the issues discussed above!\n\n<!--\n\n<a name=\"3\"></a>\n\n<h4>Dances With Elephants</h4>\n\n<p>I want to point out this useful new developer related blog with the most awesome name of the year:\n\n<a href=\"http://dances-with-elephants.typepad.com/blog\">Dances With Elephants</a> by\n\nJim Quanci, Director of the Autodesk Developer Network ADN, on how small companies can leverage big ones to build their business, e.g. by using the Autodesk Revit API to create and provide your add-in functionality to a large global audience.\n\n--></p></p></p></p></p></p></p></p></p></p>"
  }
]