[
  {
    "original_filename": "0010_selecting_all_walls",
    "header_text": "Selecting all Walls",
    "local_header_href": "#selecting-all-walls",
    "chunk_text": "<h3>Selecting all Walls</h3><style type=\"text/css\">\n.cb1 { color: blue; }\n.cb2 { color: teal; }\n.cb3 { color: maroon; }\n.cb4 { color: green; }\n</style><p>Now that we have covered the basics, let us get into some small examples of day to day issues that arise. I recently gave a Revit API introductory workshop. The first little sample add-in we wrote together as a first step to exploring API access to the Revit BIM selects all wall elements in the database and lists the area and length of each. This provides an opportunity to discuss a number of interesting details, such as some of the debugging support included in the .NET framework, the handling of units in Revit, parameter access and location definition on Revit database elements, etc.</p><p>Let us discuss some elements of interest in the code before actually presenting it.</p><p>One .NET framework feature that I suggest exploring is the Debug namespace. We use it below to comfortably print out information to the Visual Studio debug output window using Debug.WriteLine(). Of course, this is only useful in a debugging context, but then it is much more comfortable than formatting stuff into a string for presentation in a message box, in which the user has the onerous task of clicking OK, and which is less handy to search for text in or copy and paste from.</p><p>I make use of 'using' statements to minimise code bloat and make the code as readable as possible. I also make use of aliases to define handy short cuts such as CmdResult instead of the rather hefty IExternalCommand.Result. In the code below, I avoid a statement using the entire Autodesk.Revit.Geometry namespace, since that would create an ambiguity between Autodesk.Revit.Element and Autodesk.Revit.Geometry.Element. Instead, I just create an alias for Autodesk.Revit.Geometry.XYZ and avoid pulling in all the rest of that namespace.</p><p>The code below demonstrates a simple use of the Revit 2009 filtered element access to access all wall elements in the building model, which is vastly faster than the element iteration in 2008.</p><p>We extract the wall area from the built-in parameter HOST_AREA_COMPUTED. Further down, you will note that this produced slightly unexpected results, so we also added code to check each wall length by retrieving the start and end point of its location curve.</p><p>Here is the complete code of this little external command:</p><pre class=\"code\"><span class=\"cb1\">using</span> System;\n<span class=\"cb1\">using</span> System.Collections.Generic;\n<span class=\"cb1\">using</span> System.Diagnostics;\n<span class=\"cb1\">using</span> Autodesk.Revit;\n<span class=\"cb1\">using</span> Autodesk.Revit.Elements;\n<span class=\"cb1\">using</span> Autodesk.Revit.Parameters;\n<span class=\"cb1\">using</span> <span class=\"cb2\">CmdResult</span> = Autodesk.Revit.<span class=\"cb2\">IExternalCommand</span>.<span class=\"cb2\">Result</span>;\n<span class=\"cb1\">using</span> <span class=\"cb2\">XYZ</span> = Autodesk.Revit.Geometry.<span class=\"cb2\">XYZ</span>;\n\n<span class=\"cb1\">namespace</span> SelectWalls\n{\n  <span class=\"cb1\">public</span> <span class=\"cb1\">class</span> <span class=\"cb2\">Util</span>\n  {\n    <span class=\"cb1\">static</span> <span class=\"cb1\">public</span> <span class=\"cb1\">string</span> RealString( <span class=\"cb1\">double</span> a )\n    {\n      <span class=\"cb1\">return</span> a.ToString( <span class=\"cb3\">\"0.##\"</span> );\n    }\n  }\n \n  <span class=\"cb1\">public</span> <span class=\"cb1\">class</span> <span class=\"cb2\">Command</span> : <span class=\"cb2\">IExternalCommand</span>\n  {\n    <span class=\"cb1\">public</span> <span class=\"cb2\">CmdResult</span> Execute(\n      <span class=\"cb2\">ExternalCommandData</span> commandData,\n      <span class=\"cb1\">ref</span> <span class=\"cb1\">string</span> message,\n      <span class=\"cb2\">ElementSet</span> elements )\n    {\n      <span class=\"cb2\">Application</span> app = commandData.Application;\n      <span class=\"cb2\">Document</span> doc = app.ActiveDocument;\n      <span class=\"cb2\">Type</span> t = <span class=\"cb1\">typeof</span>( <span class=\"cb2\">Wall</span> );\n      <span class=\"cb2\">Filter</span> f = app.Create.Filter.NewTypeFilter( t );\n      <span class=\"cb2\">List</span>&lt;<span class=\"cb2\">Element</span>&gt; walls = <span class=\"cb1\">new</span> <span class=\"cb2\">List</span>&lt;<span class=\"cb2\">Element</span>&gt;();\n      <span class=\"cb1\">int</span> n = doc.get_Elements( f, walls );\n      <span class=\"cb1\">foreach</span>( <span class=\"cb2\">Wall</span> wall <span class=\"cb1\">in</span> walls )\n      {\n        <span class=\"cb2\">Parameter</span> param = wall.get_Parameter(\n          <span class=\"cb2\">BuiltInParameter</span>.HOST_AREA_COMPUTED );\n        <span class=\"cb1\">double</span> a = ( ( <span class=\"cb1\">null</span> != param )\n          &amp;&amp; (<span class=\"cb2\">StorageType</span>.Double == param.StorageType) )\n          ? param.AsDouble()\n          : 0.0;\n        <span class=\"cb1\">string</span> s = ( <span class=\"cb1\">null</span> != param )\n          ? param.AsValueString()\n          : <span class=\"cb3\">\"null\"</span>;\n        <span class=\"cb2\">LocationCurve</span> lc = wall.Location <span class=\"cb1\">as</span> <span class=\"cb2\">LocationCurve</span>;\n        <span class=\"cb2\">XYZ</span> p = lc.Curve.get_EndPoint( 0 );\n        <span class=\"cb2\">XYZ</span> q = lc.Curve.get_EndPoint( 1 );\n        <span class=\"cb1\">double</span> l = q.Distance( p );\n        <span class=\"cb1\">string</span> format\n          = <span class=\"cb3\">\"Wall &lt;{0} {1}&gt; length {2} area {3} ({4})\"</span>;\n        <span class=\"cb2\">Debug</span>.WriteLine( <span class=\"cb1\">string</span>.Format( format,\n          wall.Id.Value.ToString(), wall.Name,\n          <span class=\"cb2\">Util</span>.RealString( l ), <span class=\"cb2\">Util</span>.RealString( a ),\n          s ) );\n      }\n      <span class=\"cb1\">return</span> <span class=\"cb2\">CmdResult</span>.Succeeded;\n    }\n  }\n}</pre><p>We need some walls to run this on. As a sample model, we can use the little house created by the Lab2_0_CreateLittleHouse command in the code accompanying the Revit API introduction, which looks like this in plan view:</p><img alt=\"Little House Plan View\" src=\"img/LittleHouse01.png\"/><p>Here is the 3D view of the sample model:</p><img alt=\"Little House 3D View\" src=\"img/LittleHouse02.png\"/><p>Running the command in this sample produces the following in the debug output window:</p><pre>\nWall &lt;127145 Generic - 200mm&gt; length 22.97 area 283.65 (26.352 m²)\nWall &lt;127146 Generic - 200mm&gt; length 13.12 area 172.22 (16.000 m²)\nWall &lt;127147 Generic - 200mm&gt; length 22.97 area 301.39 (28.000 m²)\nWall &lt;127148 Generic - 200mm&gt; length 13.12 area 163.61 (15.200 m²)\n</pre><p>There are various items of interest here. One of them stems from the fact when dealing with length and area, we need to consider the units being used. This will be the topic of a future posting.</p><p>Another question is this: Why do we see four different wall areas in the list? The little house is rectangular, so we would expect the walls and thus their areas to be pairwise identical. In fact, this is what prompted us to list the location line length as well, where we note that these are indeed pairwise identical. The reason has to do with the Revit product and the way it handles the wall joins at the corners. If we set up all the walls to connect to their neighbours using a mitered wall join, then the reported areas will be identical for walls of equal length.</p>"
  }
]