[
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!-- <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script> -->\n<!-- https://highlightjs.org/#usage -->\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n<script>hljs.highlightAll();</script>\n</head>\n\n<!---\n\n- https://github.com/jeremytammik/RevitLookup/releases/tag/2024.0.10\n  General\n  Introducing a brand new feature: Restore window size! Now, effortlessly you will open RevitLookup with your preferred window dimensions with a simple click\n  Improvements\n  Add MEPSystem.GetSectionByIndex support by @SergeyNefyodov in #189\n  Add MEPSystem.GetSectionByNumber support by @SergeyNefyodov in #189\n  Add MEPSection.GetElementIds support by @SergeyNefyodov in #192\n  Add MEPSection.GetCoefficient support by @SergeyNefyodov in #192\n  Add MEPSection.GetPressureDrop support by @SergeyNefyodov in #192\n  Add MEPSection.GetSegmentLength support by @SergeyNefyodov in #192\n  Add MEPSection.IsMain support\n  Add show System.Object option (named Root hierarchy) by @SergeyNefyodov in #193\n  Add generic types support for the help button\n  Minor tooltip changes\n  Bugs\n  Fixed search that worked in the main thread\n\n- Calling Revit command from chromium browser\n  https://forums.autodesk.com/t5/revit-api-forum/calling-revit-command-from-chromium-browser/td-p/12413281\n\n- determine element location\n  how can the coordinates for a revit fabricationpart be obtained with the revit api\n  https://stackoverflow.com/questions/77556660/how-can-the-coordinates-for-a-revit-fabricationpart-be-obtained-with-the-revit-a\n\n- Create a 3D view showing only #Revit wall structural layers\n  https://boostyourbim.wordpress.com/2023/12/04/create-a-3d-view-showing-only-revit-wall-structural-layers/\n  - Create new 3D isometric view\n  - Set parts visibility PartsVisibility.ShowPartsOnly\n  - Create parts from all walls\n  - For each part, retrieve its built-in parameter DPART_LAYER_INDEX\n  - Convert from string to wall compound structure layer index\n  - Hide part if its compound structure layer function differs from MaterialFunctionAssignment.Structure\n\n- Dynamo: Curved Sections By Line (Part 1)\n  https://youtu.be/Fic5BD-s3A8\n  Anna Baranova\n  More articles of mine\n  https://www.linkedin.com/in/baranovaanna/\n  private message\n  https://www.linkedin.com/feed/?msgControlName=view_message_button&msgConversationId=2-NDQ2ZDYwYmYtYzY2Yy00MjJlLTgyNTUtM2E4YzA0NTk5MzJhXzAxMg%3D%3D&msgOverlay=true&trk=false\n\n- Researchers quantify the carbon footprint of generating AI images\n  Creating a photograph using artificial intelligence is like charging your phone.\n  https://www.engadget.com/researchers-quantify-the-carbon-footprint-of-generating-ai-images-173538174.html\n  img/ai_image_carbon_footprint.png\n\n- send_data_by_pigeon.jpeg\n  https://autodesk.slack.com/archives/C02NW42JP/p1701262599629959\n  George Langham\n  send_data_by_pigeon.jpeg\n  Jean-Philippe Brault\n  There is a RFC for that https://datatracker.ietf.org/doc/html/rfc1149\n  IETF DatatrackerIETF Datatracker\n  RFC 1149: Standard for the transmission of IP datagrams on avian carriers\n  This memo describes an experimental method for the encapsulation of IP datagrams in avian carriers. This specification is primarily useful in Metropolitan Area Networks. This is an experimental, not recommended standard.\n  1 Apr 1990\n  Feisal Ahmad\n  Never underestimate the bandwidth of a station wagon full of tapes hurtling down the highway.\n  Wikipedia Sneakernet\n  Sneakernet, also called sneaker net, is an informal term for the transfer of electronic information by physically moving media such as magnetic tape, floppy disks, optical discs, USB flash drives or external hard drives between computers, rather than transmitting it over a computer network. The term, a tongue-in-cheek play on net(work) as in Internet or Ethernet, refers to walking in sneakers as the transport mechanism. Alternative terms may be floppy net, train net, or pigeon net.\n  https://en.wikipedia.org/wiki/Sneakernet\n  Ryan Robinson\n  I am reminded of this thread from 2012 - https://superuser.com/questions/419070/transatlantic-ping-faster-than-sending-a-pixel-to-the-screen\n  (John Carmack rolls in to explain himself as the top answer)\n  Super UserSuper User\n  Transatlantic ping faster than sending a pixel to the screen?\n  John Carmack tweeted,\n  I can send an IP packet to Europe faster than I can send a pixel to the screen. How f’d up is that?\n  And if this weren’t John Carmack, I’d file it under “the interwebs being\n\n- hope for the future\n  Drone Tour of Permaculture Farm\n  https://youtu.be/TPxJtKob7Js\n  five-minute\n  > In this video I narrate a drone tour of our entire 250 acre farm showcasing some of the swale,\n  dam, dugout, aquaculture, livestock food forest, cover cropping and other permaculture\n  systems we have on our regenerative farm.\n  https://www.coenfarm.ca\n  > We are literally eating ourselves & our planet to death. Our mission is to provide nutrient-dense food, feed, & permaculture education to regenerate the planet & its people.\n\ntwitter:\n\nRound-trip interaction between your own browser instance and @AutodeskRevit #RevitAPI external command, BIM element location, creating a structural 3D view, and a curved section view in @DynamoBIM @AutodeskAPS #BIM https://autode.sk/browserroundtrip\n\nRevitLookup update, roundtrip interaction between your own browser instance and external command, BIM element location, structural 3D view, curved section view\n&ndash; RevitLookup 2024.0.10\n&ndash; Calling Revit command from Chromium browser\n&ndash; Chromium browser Js round trip callback\n&ndash; Element location\n&ndash; Create a structural-only 3D view\n&ndash; Creating a curved section in Dynamo\n&ndash; Carbon footprint of AI\n&ndash; Sending data by pigeon\n&ndash; Permaculture farm\n&ndash; The Valley of Code...\n\nlinkedin:\n\nRound-trip interaction between your own browser instance and #RevitAPI external command, BIM element location, creating a structural 3D view, and a curved section view in #DynamoBIM\n\nhttps://autode.sk/browserroundtrip\n\n- RevitLookup 2024.0.10\n- Calling Revit command from Chromium browser\n- Chromium browser Js round trip callback\n- Element location\n- Create a structural-only 3D view\n- Creating a curved section in Dynamo\n- Carbon footprint of AI\n- Sending data by pigeon\n- Permaculture farm\n- The Valley of Code...\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "3D View, Curved Section and Browser Round-Trip",
    "local_header_href": "#3d-view-curved-section-and-browser-round-trip",
    "chunk_text": "### 3D View, Curved Section and Browser Round-Trip\n\nYet another RevitLookup update, full roundtrip interaction between your own instance of the built-in Revit CefSharp Chromium browser and your Revit API add-in external command, different ways to locate a BIM element, pure structural 3D view and curved section view creation, and more:\n\n- [RevitLookup 2024.0.10](#2)\n- [Calling Revit command from Chromium browser](#3)\n- [Chromium browser Js round trip callback](#4)\n- [Determine element location](#5)\n- [Create a structural-only 3D view](#6)\n- [Creating a curved section in Dynamo](#7)\n- [Carbon footprint of AI image generation](#8)\n- [Sending data by pigeon](#9)\n- [Permaculture farm regenerates natural habitat](#10)\n- [The Valley of Code](#11)"
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "RevitLookup 2024.0.10",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> RevitLookup 2024.0.10\n\n[RevitLookup 2024.0.10](https://github.com/jeremytammik/RevitLookup/releases/tag/2024.0.10) is now available with the following enhancements:\n\n- Introducing a brand new feature: Restore window size!\n  Now, effortlessly you will open RevitLookup with your preferred window dimensions with a simple click\n- Add `MEPSystem` and `MEPSection` support for GetSectionByIndex, GetSectionByNumber, GetElementIds,\n  GetCoefficient, GetPressureDrop,  GetSegmentLength and IsMain\n- Show System.Object option (named Root hierarchy)\n- Add generic type support for the help button\n- Minor tooltip changes\n- Fixed search that worked in the main thread"
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Calling Revit Command from Chromium Browser",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Calling Revit Command from Chromium Browser\n\nLast week, Andrej Licanin of [Bimexperts](https://bimexperts.com/sr/home) shared\na nice solution demonstrating [how to use the Revit built-in CefSharp browser in WPF](https://thebuildingcoder.typepad.com/blog/2023/11/camera-target-and-toposolid-subdivision-material.html#2).\n\nThis week he expanded on that in his contribution\non [calling Revit command from Chromium browser](https://forums.autodesk.com/t5/revit-api-forum/calling-revit-command-from-chromium-browser/td-p/12413281):\n\nThis is another guide on Chromium browser using CefSharp, a continuation\nof the [simple WPF with a Chromium browser guide](https://forums.autodesk.com/t5/revit-api-forum/simple-wpf-with-a-chromium-browser-guide/td-p/12396552).\nHope someone finds it useful.\n\nBasically, what I wanted was for a button in the browser (on a webpage) to trigger a command in Revit.\nThis works by \"binding\" a JavaScript method to a C# object and its method.\nIn the Javascript we `await` for the object and call its function.\n\nSo, let's make a dummy object for binding and a method in it.\nIn order to call a Revit method it will need a reference to an external event handler and its event:\n\n<pre><code>\n   public class BoundObject\n   {\n     public int Add(int a, int b)\n     {\n       ExtApp.handler.a = a;\n       ExtApp.handler.b = b;\n       ExtApp.testEvent.Raise();\n\n       return a+b;\n     }\n   }\n</code></pre>\n\nThe event and its handler are saved in the external app as `static` for ease of access:\n\n<pre><code>\n  internal class ExtApp : IExternalApplication\n  {\n    public static IExternalApplication MyApp;\n    public static ChromiumWebBrowser browser;\n    public static ExternalEvent testEvent;\n    public static MyEvent handler;\n    public Result OnShutdown(UIControlledApplication application)\n    {\n      // Cef.Shutdown();\n      return Result.Succeeded;\n    }\n\n    public Result OnStartup(UIControlledApplication application)\n    {\n      MyApp = this;\n      //code for making a button\n\n      handler = new MyEvent();\n      testEvent= ExternalEvent.Create(handler);\n\n      return Result.Succeeded;\n    }\n  }\n</code></pre>\n\nIn the WPF control, the browser is embedded like this:\n\n<pre><code>\n  &lt;Window x:Class=\"RevitTestProject.TestWindow\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:local=\"clr-namespace:RevitTestProject\"\n    xmlns:cef=\"clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf\"\n    mc:Ignorable=\"d\"\n    Width=\"1000\" Height=\"500\"&gt;\n    &lt;Grid Background=\"PapayaWhip\"&gt;\n      &lt;cef:ChromiumWebBrowser Name=\"ChromiumBrowser\" Address=\"http://www.google.com\" Width=\"900\" Height=\"450\"  /&gt;\n    &lt;/Grid&gt;\n  &lt;/Window&gt;\n</code></pre>\n\nHere is the code behind the window:\n\n<pre><code>\n    public TestWindow()\n    {\n      InitializeComponent();\n      ChromiumBrowser.Address = \"https://www.google.com\";\n      ChromiumBrowser.Address = \"C:\\\\Users\\\\XXX\\\\Desktop\\\\index.html\";\n      BoundObject bo = new BoundObject();\n      ChromiumBrowser.JavascriptObjectRepository.Register(\"boundAsync\", bo, true, BindingOptions.DefaultBinder);\n    }\n\n    public void Dispose()\n    {\n      this.Dispose();\n    }\n</code></pre>\n\nSo, to use it, make an `index.html` and submit the path to it in the browser address.\n\nThe Test webpage look like this:\n\n<pre><code>\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Bridge Test&lt;/title&gt;\n  &lt;!-- &lt;script src=\"script.js\"&gt;&lt;/script&gt; --&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    async function callCSharpAction() {\n      await CefSharp.BindObjectAsync(\"boundAsync\");\n      boundAsync.add(16, 2);\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;button id=\"action1\" onclick=\"callCSharpAction()\"&gt;Action 1&lt;/button&gt;\n  &lt;button id=\"action2\" onclick=\"alert('Button is working')\"&gt;Action 2&lt;/button&gt;\n  &lt;button id=\"action3\"&gt;Action 3&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\nThe handler code:\n\n<pre><code>\n  internal class MyEvent : IExternalEventHandler\n  {\n    public int a;\n    public int b;\n    public void Execute(UIApplication app)\n    {\n      TaskDialog.Show( \"yoyoy\",\n        \"data is \" + a.ToString()\n        + \" and \" + b.ToString() + \".\");\n    }\n\n    public string GetName()\n    {\n      return \"YOYOOY\";\n    }\n  }\n</code></pre>"
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Chromium Browser Js Round Trip Callback",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Chromium Browser Js Round Trip Callback\n\nNext step: round-trip callback:\nTo make a callback from C# function to the browser, you just need an instance of the browser, and a function in the javascript code that will be called.\nHere is an edited index.html with such a function to call:\n\n<pre><code>\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Bridge Test&lt;/title&gt;\n  &lt;!-- &lt;script src=\"script.js\"&gt;&lt;/script&gt; --&gt;\n  &lt;script type=\"text/javascript\"&gt;\n    async function callCSharpAction() {\n      await CefSharp.BindObjectAsync(\"boundAsync\");\n      boundAsync.add(16, 2);\n    }\n\n    function showAlert(arg1) {\n      // Your JavaScript logic here\n      alert(\"Function called with arguments: \" + arg1);\n      return;\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;button id=\"action1\" onclick=\"callCSharpAction()\"&gt;Action 1&lt;/button&gt;\n  &lt;button id=\"action2\" onclick=\"alert('Button is working')\"&gt;Action 2&lt;/button&gt;\n  &lt;button id=\"action3\"&gt;Action 3&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\nIn our bound class, we save a instance to the browser so we can use it on command:\n\n<pre><code>\n  public class BoundObject\n  {\n    public int aS;\n    public int bS;\n    internal ChromiumWebBrowser browser;\n\n    public void CallCSharpMethod()\n    {\n      MessageBox.Show(\"C# method called!\");\n      // Add more code here as needed\n    }\n    public int Add(int a, int b)\n    {\n      ExtApp.handler.a = a;\n      ExtApp.handler.b = b;\n      ExtApp.testEvent.Raise();\n\n      return a+b;\n    }\n\n    public int SendSomeDataFromLocal(int a)\n    {\n      browser.ExecuteScriptAsync(\"showAlert(\"+a.ToString()+\")\");\n      return a;\n    }\n  }\n</code></pre>\n\nPass it in when creating the browser in the window codebehind:\n\n<pre><code>\n  public TestWindow()\n  {\n    InitializeComponent();\n    ChromiumBrowser.Address = \"https://www.google.com\";\n    ChromiumBrowser.Address = \"C:\\\\Users\\\\XXX\\\\Desktop\\\\index.html\";\n    BoundObject bo = new BoundObject();\n    //ExtApp.boundObj = bo;\n    bo.browser = ChromiumBrowser;\n    ChromiumBrowser.JavascriptObjectRepository.Register(\n      \"boundAsync\", bo, true, BindingOptions.DefaultBinder);\n  }\n</code></pre>\n\nFinally, now, you can call it from Revit:\n\n<pre><code>\n  public Result Execute(\n    ExternalCommandData commandData,\n    ref string message,\n    ElementSet elements)\n  {\n    ExtApp.boundObj.SendSomeDataFromLocal(999);\n    return Result.Succeeded;\n  }\n</code></pre>\n\nThis concludes a round trip from the browser and back.\nI hope anyone reading this finds it useful."
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Determine Element Location",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Determine Element Location\n\nWe put together a nice little overview on various methods to determine the location of a BIM element discussing\n[how can the coordinates for a Revit fabrication part be obtained with the Revit API](https://stackoverflow.com/questions/77556660/how-can-the-coordinates-for-a-revit-fabricationpart-be-obtained-with-the-revit-a)?\n\n**Question:** I need to obtain the coordinates for Revit MEP FabricationParts.\nAll of the elements I get have a `Location` property, but not all of them have either a `LocationPoint` or a `LocationCurve`.\nMore specifically, I am only able to get `XYZ` values through the `LocationCurve` for `Pipe` elements.\nElements such as Threadolet, Elbow, Weld and Fishmouth don't have either a `LocationPoint` or a `LocationCurve`.\n\n**Answer:** Three options that can be used on almost all BIM elements are:\n\n- Use the `Location` property\n- Retrieve the element [`Geometry` property](https://www.revitapidocs.com/2024/d8a55a5b-2a69-d5ab-3e1f-6cf1ee43c8ec.htm), e.g., calculate the centroid of all the vertices\n- Use the element [`BoundingBox` property](https://www.revitapidocs.com/2024/def2f9f2-b23a-bcea-43a3-e6de41b014c8.htm), e.g., calculate its midpoint\n\nHowever, for these types of `FabricationParts` specifically,\n[egeer](https://stackoverflow.com/users/15534202/egeer)\nand [bootsch](https://stackoverflow.com/users/21999391/bootsch) suggest\nusing the element's connector locations instead:\n\nFor OLets and ThreadOLets, you can use the connector that connects to the main pipe as its insertion point, since that is technically where the element was inserted:\n\n<pre><code>\n    Connector insertionPointConnector = OLet.ConnectorManager\n        .Connectors\n        .OfType&lt;Connector&gt;()\n        .FirstOrDefault(x =&gt; x.ConnectorType == ConnectorType.Curve);\n\n    XYZ insertionPoint = insertionPointConnector?.Origin;\n</code></pre>\n\nSince their connectors are atypical in that they do not connect to another connector, but instead a curve, you need to get the one that is `ConnectorType.Curve`.\n\nFor welds, elbows and other inline elements, you can similarly use the connectors and get their origins.\nIf you want the center of the element, you can use vector math to calculate that using the connector's direction and location.\nThe direction that the connector points is the `BasisZ` property of the Connector's `CoordinateSystem`.\n\n<pre><code>\n    XYZ connectorDirection = insertionPointConnector?.CoordinateSystem.BasisZ;\n</code></pre>\n\nThe solution I end up with is a bit different from the answer given by egeer above:\nI ended up getting a Connector for each element (the ones without a `LocationCurve` or `LocationPoint`).\nHere's the code in VB:\n\n<pre><code>\n    Dim insertionPointConnector As Connector = CType(e, FabricationPart).ConnectorManager.Connectors.OfType(Of Connector).FirstOrDefault()\n    Dim elementOrigin as XYZ = Connector.insertionPointConnector.Origin\n</code></pre>\n\n`e` is of type Element.\n\nMany thanks to egeer and bootsch for jumping in with these good solutions!"
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Create a Structural-Only 3D View",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Create a Structural-Only 3D View\n\nHarry Mattison continues his AU solution spree presenting a nice code sample demonstrating how\nto [create a 3D view showing only Revit wall structural layers](https://boostyourbim.wordpress.com/2023/12/04/create-a-3d-view-showing-only-revit-wall-structural-layers/)\nwhich is discussed in further depth in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non how to [create new View3D that just displays wall layers of \"Structure\" function](https://forums.autodesk.com/t5/revit-api-forum/create-new-view3d-that-just-displays-wall-layers-of-quot/td-p/12344156).\nHarry's sample code performs the following steps:\n\n- Create new 3D isometric view\n- Set view parts visibility `PartsVisibility.ShowPartsOnly`\n- Create parts from all walls\n- For each part, retrieve its built-in parameter `DPART_LAYER_INDEX`\n- Convert from string to wall compound structure layer index\n- Hide part if its compound structure layer function differs from `MaterialFunctionAssignment.Structure`\n\nMany thanks to Harry for addressing this need!"
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Creating a Curved Section in Dynamo",
    "local_header_href": "#7",
    "chunk_text": "####<a name=\"7\"></a> Creating a Curved Section in Dynamo\n\nI have heard several requests for a curved section view, e.g., Alex Vila in 2019:\n[Create curved sections!](https://forums.autodesk.com/t5/revit-api-forum/create-curved-sections/m-p/8931972)\n\nFinally, the cavalry comes to the rescue in the shape\nof [Anna Baranova](https://www.linkedin.com/in/baranovaanna/), presenting a 22-minute video tutorial\non [Dynamo: Curved Sections By Line (Part 1)](https://youtu.be/Fic5BD-s3A8):\n\n<center>\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/Fic5BD-s3A8?si=bjREzyZh7uCyrZoZ\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</center>\n\nMany thanks to Anna for this nice piece of work!"
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Carbon Footprint of AI Image Generation",
    "local_header_href": "#8",
    "chunk_text": "####<a name=\"8\"></a> Carbon Footprint of AI Image Generation\n\nResearchers quantify the carbon footprint of generating AI images:\n[creating a photograph using artificial intelligence is like charging your phone](https://www.engadget.com/researchers-quantify-the-carbon-footprint-of-generating-ai-images-173538174.html):\n\n<center>\n<img src=\"img/ai_image_carbon_footprint.png\" alt=\"AI image generation carbon footprint\" title=\"AI image generation carbon footprint\" width=\"600\"/>\n</center>"
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Sending Data by Pigeon",
    "local_header_href": "#9",
    "chunk_text": "####<a name=\"9\"></a> Sending Data by Pigeon\n\nTalking about carbon footprint and the cost and efficiency of digital data transmission, there is obviously a point at which transmission of large data can be speeded up by putting it on a storage device and moving that around rather physically than squeezing it through the limited bandwidth of the Internet:\n\n<center>\n<img src=\"img/send_data_by_pigeon.jpg\" alt=\"Send data by pigeon\" title=\"Send data by pigeon\" width=\"600\"/> <!-- Pixel Height: 1,218 Pixel Width: 1,080 -->\n</center>\n\n- There is even an RFC 1149 for this concept,\nthe [Standard for the Transmission of IP Datagrams on Avian Carriers](https://datatracker.ietf.org/doc/html/rfc1149).\n> This memo describes an experimental method for the encapsulation of IP datagrams in avian carriers.\nThis specification is primarily useful in Metropolitan Area Networks.\nThis is an experimental, not recommended standard.\n- Never underestimate the bandwidth of a station wagon full of tapes hurtling down the highway,\ncf. [Wikipedia on Sneakernet](https://en.wikipedia.org/wiki/Sneakernet).\n- Reminds of this thread from 2012\nabout [transatlantic ping faster than sending a pixel to the screen](https://superuser.com/questions/419070/transatlantic-ping-faster-than-sending-a-pixel-to-the-screen)..."
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "Permaculture Farm Regenerates Natural Habitat",
    "local_header_href": "#10",
    "chunk_text": "####<a name=\"10\"></a> Permaculture Farm Regenerates Natural Habitat\n\nHope for the future from a five-minute video [drone tour of permaculture farm](https://youtu.be/TPxJtKob7Js):\n\n<center>\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/TPxJtKob7Js?si=QoImAfogIIMdU5Sp\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n</center>\n\n> In this video I narrate a drone tour of our entire 250-acre farm showcasing some of the swale,\ndam, dugout, aquaculture, livestock food forest, cover cropping and other permaculture\nsystems we have on our regenerative farm.\n\nPresented by the [Coen Farm](https://www.coenfarm.ca), who say:\n\n> We are literally eating ourselves and our planet to death.\nOur mission is to provide nutrient-dense food, feed, and permaculture education to regenerate the planet and its people.\n\nPersonally, I was very touched watching and listening to it."
  },
  {
    "original_filename": "2019_cefsharp_roundtrip",
    "header_text": "The Valley of Code",
    "local_header_href": "#11",
    "chunk_text": "####<a name=\"11\"></a> The Valley of Code\n\nQuick return to digital before I end for today.\nIf you have friends or others wanting to quickly learn to code for the web, here is a great site to get them started:\n\n- [The Valley of Code](https://thevalleyofcode.com/)\n\n> Welcome to The Valley of Code.\nYour journey in Web Development starts here.\nIn the fundamentals section you'll learn the basic building blocks of the Internet, the Web and how its fundamental protocol (HTTP) works.\n\nToc:\n\n- Fundamentals\n- HTML and CSS\n- Tools\n- Deployment\n- JavaScript\n- TypeScript\n- More CSS\n- More JavaScript\n- DOM and Events\n- Networking\n- Server Runtimes\n- HTTP Servers\n- Forms\n- Databases\n- UI libraries\n- Frameworks"
  }
]