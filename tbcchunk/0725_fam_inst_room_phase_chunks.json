[
  {
    "original_filename": "0725_fam_inst_room_phase",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0725_fam_inst_room_phase",
    "header_text": "Family Instance Room Phase",
    "local_header_href": "#family-instance-room-phase",
    "chunk_text": "<h3>Family Instance Room Phase</h3><p>We already looked at some examples of confusion due to the interaction of phases with the room property on family instances.\nHere is a new aspect of this encountered and solved by Patrick Rosendahl of\n\n<a href=\"http://www.solar-computer.de\">\nSOLAR-COMPUTER GmbH</a>,\n\nwho kindly explains the issue and its resolution like this:\n\n<p><strong>Problem:</strong> I am having a problem with the FamilyInstance Room property.\nI looked at the discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/unreliable-room-properties.html\">\nissues with the Room property</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/phase-dependent-room-properties.html\">\nits phase dependency</a> but\n\nhave not been able to solve it yet.\n\n<p>This is the situation:\n\n<ul>\n<li>Customer makes use of design options and phasing.\n<li>Most rooms are in the main model, some rooms are in design options.\n<li>There are three phases: phase_A, phase_B, phase_C.\n<li>Phase_C is not used, have not checked the impact if deleted.\n<li>Most architecture is created in phase_A and located in the main model.\n<li>Some architecture is created in phase_B and located in design options.\n<li>All family instances and all rooms are created in phase_B.\n<li>Room volume computation is turned on.\n<li>Revit's schedules work correctly, i.e. show the correct room-wise list of family instances.\n</li></li></li></li></li></li></li></li></li></ul>\n<p>These are the problems encountered:\n\n<ul>\n<li>Sometimes, the family instance Room property returns null, even though the family instance is clearly within a room.\n<li>Even worse: sometimes, the family instance method get_Room( familyinstance.CreationPhase ) returns null.\n</li></li></ul>\n<p>Questions:\n\n<ul>\n<li>Might there be a problem with the design options?\n\n<li>Is there any better workaround than the two approaches mentioned above?\n\n<li>What function is the Revit schedule using to successfully determine the room property of family instances?\n</li></li></li></ul>\n<p>As a workaround, I thought of calling the get_Room method on the family instance in a loop over all available phases in the project, and making use of the document PointInRoom method if that fails.\n\n\n<p><strong>Solution:</strong> Here is a promising start for a solution that I am currently exploring:\n\n<ul>\n<li>Obviously, first try using the family instance Room property directly.\n<li>If that fails, try\n<br/><pre>foreach(Phase p) { familyinstance.get_Room(p) }</pre>\n<li>Hard part: determine primary options;\n<br/><pre>foreach(Room r where r.DesignOption.IsPrimary) {\n  r.IsPointInRoom( fi.Location ) }</pre>\n<li>Emergency:\n<br/><pre>foreach( Room r ) { r.IsPointInRoom( fi.Location ) }</pre>\n</li></li></li></li></ul>\n<p>Here is the actual method implementating this that I am currently working with, including some todo items left as an exercise for the reader ;)\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Room</span> DetermineRoom( <span class=\"teal\">Element</span> el )\n{\n  <span class=\"teal\">FamilyInstance</span> fi = el <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"blue\">if</span>( fi == <span class=\"blue\">null</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n \n  <span class=\"green\">// As simple as that?</span>\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"blue\">if</span>( fi.Room != <span class=\"blue\">null</span> )\n    {\n      <span class=\"green\">//Debug.WriteLine(\"fi.Room != null\");</span>\n      <span class=\"blue\">return</span> fi.Room;\n    }\n  }\n  <span class=\"blue\">catch</span>\n  {\n  }\n \n  <span class=\"green\">// Try phasing</span>\n \n  <span class=\"teal\">Room</span> r = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Phase</span> p <span class=\"blue\">in</span> el.Document.Phases )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// TODO should check fi.GetPhaseStatus </span>\n      <span class=\"green\">// instead of provoking an exception</span>\n \n      r = fi.get_Room( p );\n \n      <span class=\"blue\">if</span>( r != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">//Debug.WriteLine(\"fi.get_Room( \" </span>\n        <span class=\"green\">//  + p.Name + \") != null\");</span>\n \n        <span class=\"blue\">return</span> r;\n      }\n    }\n    <span class=\"blue\">catch</span>\n    {\n    }\n  }\n \n  <span class=\"teal\">LocationPoint</span> lp = el.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n  <span class=\"blue\">if</span>( lp != <span class=\"blue\">null</span> )\n  {\n    <span class=\"green\">// Try design options</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; roomlst = get_Elements(\n      el.Document, <span class=\"blue\">typeof</span>( <span class=\"teal\">Room</span> ) );\n \n    <span class=\"green\">// Try rooms from primary design option</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> roomel <span class=\"blue\">in</span> roomlst )\n    {\n      <span class=\"teal\">Room</span> priroom = roomel <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n \n      <span class=\"blue\">if</span>( priroom == <span class=\"blue\">null</span> )\n        <span class=\"blue\">continue</span>;\n \n      <span class=\"blue\">if</span>( priroom.DesignOption == <span class=\"blue\">null</span> )\n        <span class=\"blue\">continue</span>;\n \n      <span class=\"blue\">if</span>( priroom.DesignOption.IsPrimary )\n      {\n        <span class=\"green\">// TODO should check whether priroom </span>\n        <span class=\"green\">// and el phasing overlaps</span>\n \n        <span class=\"blue\">if</span>( priroom.IsPointInRoom( lp.Point ) )\n        {\n          <span class=\"green\">//Debug.WriteLine(</span>\n          <span class=\"green\">//  \"priroom.IsPointInRoom != null\");</span>\n \n          <span class=\"blue\">return</span> priroom;\n        }\n      }\n    }\n \n    <span class=\"green\">// Emergency: try any room</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> roomel <span class=\"blue\">in</span> roomlst )\n    {\n      <span class=\"teal\">Room</span> room = roomel <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n \n      <span class=\"blue\">if</span>( room == <span class=\"blue\">null</span> )\n        <span class=\"blue\">continue</span>;\n \n      <span class=\"green\">// TODO should check whether room </span>\n      <span class=\"green\">// and el phasing overlaps</span>\n \n      <span class=\"blue\">if</span>( room.IsPointInRoom( lp.Point ) )\n      {\n        <span class=\"green\">//Debug.WriteLine(</span>\n        <span class=\"green\">//  \"room.IsPointInRoom != null\");</span>\n        <span class=\"blue\">return</span> room;\n      }\n    }\n  }\n \n  <span class=\"green\">// Nothing found</span>\n \n  <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n}\n</pre>\n<p>I think this approach provides is a good starting point.\nA more complete solution might possibly take the phase and design option as arguments.\nIn my context, the function above rarely returns a non-primary design option room.\n\n<p>Many thanks to Patrick for his research and sharing this solution!\n</p></p></p></p></p></p></p></p></p></p>"
  }
]