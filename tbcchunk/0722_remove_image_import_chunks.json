[
  {
    "original_filename": "0722_remove_image_import",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0722_remove_image_import",
    "header_text": "Remove Imported JPG and BMP Images",
    "local_header_href": "#remove-imported-jpg-and-bmp-images",
    "chunk_text": "<h3>Remove Imported JPG and BMP Images</h3><p>Here is a query which helps understand how imported files are handled by Revit and how they can be removed from the model.\n\n<p><strong>Question:</strong> I want to remove imported images like JPG and BMP files from my Revit model.\n\n<p>I tried to use a filtered element collector, apply its WhereElementIsNotElementType filter, select all elements whose name ends in \".jpg\", and then delete them in a separate loop, but that does not seem to do it. \nSome other similar attempts also failed.\n\n<p>How can I achieve this, please?\n\n<p><strong>Answer:</strong> I created a new external command CmdRemoveImportedJpgs in The Building Coder samples to test this.\n\n<p>The approach you describe really does not work. \nNext, I used my element listed and searched for all elements which name included the substring \".jpg\", and that led me in the right direction:\n\n<p>I added one important twist to the description you provide above: I first delete all non-ElementType elements whose element name ends with \".jpg\" before deleting the element types with that property.\nThis is the little helper predicate method I use to test the element name:\n\n<pre class=\"code\">\n<span class=\"blue\">bool</span> ElementNameEndsWithJpg( <span class=\"teal\">Element</span> e )\n{\n  <span class=\"blue\">string</span> s = e.Name;\n \n  <span class=\"blue\">return</span> 3 &lt; s.Length &amp;&amp; s.EndsWith( <span class=\"maroon\">\".jpg\"</span> );\n}\n</pre>\n<p>For full coverage, you obviously need to take into account all the other filename extension permutations pointed out by Rudolf in his comment below.\n\n<p>Here is the complete code of my external command implementation:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> col\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType();\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n  {\n    <span class=\"blue\">if</span>( ElementNameEndsWithJpg( e ) )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"teal\">Util</span>.ElementDescription( e ) );\n      ids.Add( e.Id );\n    }\n  }\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; idsDeleted = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Transaction</span> t;\n \n  <span class=\"blue\">int</span> n = ids.Count;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"blue\">using</span>( t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      t.Start( <span class=\"maroon\">\"Delete non-ElementType '.jpg' elements\"</span> );\n \n      idsDeleted = doc.Delete( ids );\n \n      t.Commit();\n    }\n  }\n \n  <span class=\"blue\">int</span> m = ( <span class=\"blue\">null</span> == idsDeleted )\n    ? 0\n    : idsDeleted.Count;\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"Selected {0} non-ElementType element{1}, \"</span>\n    + <span class=\"maroon\">\"{2} successfully deleted.\"</span>,\n    n, <span class=\"teal\">Util</span>.PluralSuffix( n ), m ) );\n \n  col = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n    .WhereElementIsElementType();\n \n  ids.Clear();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n  {\n    <span class=\"blue\">if</span>( ElementNameEndsWithJpg( e ) )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"teal\">Util</span>.ElementDescription( e ) );\n      ids.Add( e.Id );\n    }\n  }\n \n  n = ids.Count;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"blue\">using</span>( t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      t.Start( <span class=\"maroon\">\"Delete element type '.jpg' elements\"</span> );\n \n      idsDeleted = doc.Delete( ids );\n \n      t.Commit();\n    }\n  }\n \n  m = ( <span class=\"blue\">null</span> == idsDeleted ) ? 0 : idsDeleted.Count;\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"Selected {0} element type{1}, \"</span>\n    + <span class=\"maroon\">\"{2} successfully deleted.\"</span>,\n    n, <span class=\"teal\">Util</span>.PluralSuffix( n ), m ) );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n</pre>\n<p>This seems to do the trick for me all right.\n\n<p>To test it, I created a new Revit model and inserted one single image named \"jeremy_philippe_partha_jim.jpg\".\n\n<p>Running the CmdRemoveImportedJpgs external command on it produces the following messages in the Visual Studio debug output window:\n\n<pre class=\"code\">\nRaster Images &lt;161178 jeremy_philippe_partha_jim.jpg&gt;\nSelected 1 non-ElementType element, 1 successfully deleted.\n\nElementType &lt;161176 jeremy_philippe_partha_jim.jpg&gt;\nRaster Images &lt;161177 jeremy_philippe_partha_jim.jpg&gt;\nSelected 2 element types, 2 successfully deleted.\n</pre>\n<p>This shows that the image import generated two ElementType objects and one non-ElementType one, and all were successfully deleted.\n\n<p>Apparently, your initial approach does not work because it is not possible to delete the ElementType objects without first removing the non-ElementType one.\n\n<p>Note that they have three sequential element ids. \nThe raster image element with the id 161178 requires the existence of the other two.\n\n<p>Here is \n\n<a href=\"zip/bc_12_97.zip\">\nversion 2012.0.97.0</a> of\n\nThe Building Coder samples including the new command.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]