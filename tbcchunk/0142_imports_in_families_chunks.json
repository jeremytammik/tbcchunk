[
  {
    "original_filename": "0142_imports_in_families",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0142_imports_in_families",
    "header_text": "Imports in Families",
    "local_header_href": "#imports-in-families",
    "chunk_text": "<h3>Imports in Families</h3><p>I will have left on vacation once again by the time this is posted.\nIn case you  wonder why I am on vacation so much, the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/back-again.html\">\ntrip to Italy</a>\n\nin March and the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/more-questions.html\">\nwonderful experiences</a>\n\nI had there were actually to use up last year's contingent.\nNow I am getting started on this years', going off on a climbing and driving trip to southern France with my two sons Christopher and Cornelius, especially to the \n\n<a href=\"http://en.wikipedia.org/wiki/Provence\">\nProvence</a>\n\nand \n\n<a href=\"http://en.wikipedia.org/wiki/Avignon\">\nAvignon</a>\n\nto visit my mother, sister and nephew.\nSo I will be posting a bit less or not at all for the coming two weeks.</p><p>Before leaving, though, here is an interesting and practically oriented question by my colleague Martin Schmid of Autodesk.\nI wrote a new command for The Building Coder samples to answer it, which may even be useful for some in everyday life.\nMartin is an experienced AutoCAD MEP and Revit MEP expert and application engineer and helped me a lot with the preparation of the\n\n<a href=\"http://au.autodesk.com/?nd=class&amp;session_id=2658\">\nRevit MEP API class</a>\n\nat Autodesk University.\n\n<p><strong>Question:</strong>\nHow hard do you think it would be to put together a quick bit of code that would:\n\n<ol type=\"a\">\n<li>Iterate over all family definitions in a project.\n<li>For each family definition, identify if there are any import symbols, i.e., imported DWG, SAT, DXF and other non-native Revit geometry?\n</li></li></ol>\n<p>The reason I ask is that performance is degraded if very complex geometry is imported.\nSome complaints about performance were caused by such complex imported geometry.\n\n<p>I have an example demonstrating slow graphics generation in a mechanical view with an offending family.\nIt takes more than 30 seconds to zoom in on the area with the bad family.\nIn the family editor, one can see that there is an imported DXF symbol at that location.\nIf you return to the project and delete the offending family instances, the zoom is nearly instantaneous.\n\n<p>Unfortunately, it is difficult to isolate these family instances.\nI am hoping there is a simple way to check families using the API, instead of the rote manual inspection method I have relied on so far.\n\n<p>Do you think you could bang something together on this?\nIve got another large customer dataset to wade through, and was hoping for some help!</p>\n<p><strong>Answer:</strong>\nThis is not at all hard to do.\nHere is a description of an algorithm that achieves what you need:</p>\n<ul>\n<li>Select all family instances.\n<li>For each instance, open the corresponding family definition.\n<li>Within the family definition, list all imported symbols.\n</li></li></li></ul>\n<p>We could also select the families themselves directly, without going over the instances first.\nI chose not to do so in the code presented below, because then we have to deal with various built-in families that are not actually used and we are not interested in anyway.\n\n<p>Here is the approach I have taken in more detail.\nI added an additional step to ensure every family is processed only once, even if multiple family instances refer to it.\nTo achieve this, I create a dictionary mapping the family name to the family, and insert the families used by the family instances only if not already present.\nThis way, I can later also process the families in alphabetical order, to make it easier to analyse the report produced.\nIn-place families cannot be opened for editing, so we need to skip those.\nI am currently not aware of any way to examine their contents.\nHere are the detailed steps:</p>\n<ul>\n<li>Select all family instances.\n<li>For each instance, determine its family.\n<li>Add an entry to the family dictionary, if not already present.\n<li>Sort the family dictionary keys.\n<li>Open each non-in-place family and search for ImportInstance elements.\n<li>List the total count and symbol names of all import instances found.\n</li></li></li></li></li></li></ul>\n<p>I added a new command class CmdImportsInFamilies to implement this functionality.\nHere is the source code of its Execute method:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; instances = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n  doc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ),\n    instances );\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Family</span>&gt; families\n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Family</span>&gt;();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> i <span class=\"blue\">in</span> instances )\n  {\n    <span class=\"teal\">Family</span> family = i.Symbol.Family;\n    <span class=\"blue\">if</span>( !families.ContainsKey( family.Name ) )\n    {\n      families[family.Name] = family;\n    }\n  }\n \n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;(\n    families.Keys );\n \n  keys.Sort();\n \n  <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> key <span class=\"blue\">in</span> keys )\n  {\n    <span class=\"teal\">Family</span> family = families[key];\n    <span class=\"blue\">if</span>( family.IsInPlace )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Family '{0}' is in-place.\"</span>, key );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Document</span> fdoc = doc.EditFamily( family );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; imports = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n      fdoc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">ImportInstance</span> ),\n        imports );\n \n      <span class=\"blue\">int</span> n = imports.Count;\n \n      <span class=\"teal\">Debug</span>.Print(\n        <span class=\"maroon\">\"Family '{0}' contains {1} import instance{2}{3}\"</span>,\n        key, n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n        <span class=\"teal\">Util</span>.DotOrColon( n ) );\n \n      <span class=\"blue\">if</span> ( 0 &lt; n )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">ImportInstance</span> i <span class=\"blue\">in</span> imports )\n        {\n          <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  '{0}'\"</span>, i.ObjectType.Name );\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n}\n</pre>\n<p>As usual, we return Failed when not modifying the database in any way, so that Revit understands that no changes were made to the project and no dirty flags need to be set.</p>\n<p>I expect that this approach may need some tweaking to achieve the exact functionality you require, but I hope it provides a useful starting point at least.</p>\n<p>After some initial testing, Martin came up with two requests for improvement:</p>\n<ul>\n<li>One thing Im wondering about is that a family can have families nested in it. Have you considered that?</li>\n<li>In the attached project, the Duplex Receptacle family has a nested Annotation Symbol called Duplex Annotation.\nThat Duplex Annotation has a DWG nested in it.\nHow can one inspect the annotation symbol for imports?</li>\n</ul>\n<p>The initial solution above does indeed not take into account nested families.</p>\n<p>Regarding the annotation symbols, we can in fact access the families used by them by making use of the property sequence AnnotationSymbol &gt; AsFamilyInstance &gt; Symbol &gt; Family and then proceeding in the same way as for standard family symbols.\n\n<p>In order to adapt the code to support these two enhancements, I implemented two separate helper methods:</p>\n<ul>\n<li><strong>GetFamilies</strong> to retrieve all families used by the family instances and annotation symbols in the given document and return a dictionary mapping the family name to the corresponding family object.</li>\n<li><strong>ListImportsAndSearchForMore</strong> to list all import instances in all the given families, retrieve nested families within them, and recursively search in them as well.\n</li></ul>\n<p>Here is the source code for GetFamilies, taking an input document argument and returning a dictionary as described:</p>\n<pre class=\"code\">\n<span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Family</span>&gt; GetFamilies( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Family</span>&gt; families\n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Family</span>&gt;();\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; instances = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n  doc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ),\n    instances );\n \n  <span class=\"blue\">foreach</span> ( <span class=\"teal\">FamilyInstance</span> i <span class=\"blue\">in</span> instances )\n  {\n    <span class=\"teal\">Family</span> family = i.Symbol.Family;\n    <span class=\"blue\">if</span> ( !families.ContainsKey( family.Name ) )\n    {\n      families[family.Name] = family;\n    }\n  }\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; annotations = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n  doc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">AnnotationSymbol</span> ),\n    annotations );\n \n  <span class=\"blue\">foreach</span> ( <span class=\"teal\">AnnotationSymbol</span> a <span class=\"blue\">in</span> annotations )\n  {\n    <span class=\"teal\">Family</span> family = a.AsFamilyInstance.Symbol.Family;\n    <span class=\"blue\">if</span> ( !families.ContainsKey( family.Name ) )\n    {\n      families[family.Name] = family;\n    }\n  }\n  <span class=\"blue\">return</span> families;\n}\n</pre>\n<p>The two loops collect all family instances and annotation symbols and determine their families, respectively.</p>\n<p>Here is the source code for ListImportsAndSearchForMore. Besides the input document argument and the dictionary of all families to list and explore further recursively, it also takes an argument indicating the recursion level, which is used to indent the output report appropriately according to the nesting level of the nested families:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> ListImportsAndSearchForMore(\n  <span class=\"blue\">int</span> recursionLevel,\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Family</span>&gt; families )\n{\n  <span class=\"blue\">string</span> indent\n    = <span class=\"blue\">new</span> <span class=\"blue\">string</span>( <span class=\"maroon\">' '</span>, 2 * recursionLevel );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;(\n    families.Keys );\n \n  keys.Sort();\n \n  <span class=\"blue\">foreach</span> ( <span class=\"blue\">string</span> key <span class=\"blue\">in</span> keys )\n  {\n    <span class=\"teal\">Family</span> family = families[key];\n \n    <span class=\"blue\">if</span> ( family.IsInPlace )\n    {\n      <span class=\"teal\">Debug</span>.Print( indent\n        + <span class=\"maroon\">\"Family '{0}' is in-place.\"</span>,\n        key );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Document</span> fdoc = doc.EditFamily( family );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; imports = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n      fdoc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">ImportInstance</span> ),\n        imports );\n \n      <span class=\"blue\">int</span> n = imports.Count;\n \n      <span class=\"teal\">Debug</span>.Print( indent\n        + <span class=\"maroon\">\"Family '{0}' contains {1} import instance{2}{3}\"</span>,\n        key, n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n        <span class=\"teal\">Util</span>.DotOrColon( n ) );\n \n      <span class=\"blue\">if</span> ( 0 &lt; n )\n      {\n        <span class=\"blue\">foreach</span> ( <span class=\"teal\">ImportInstance</span> i <span class=\"blue\">in</span> imports )\n        {\n          <span class=\"teal\">Debug</span>.Print( indent\n            + <span class=\"maroon\">\"  '{0}'\"</span>, i.ObjectType.Name );\n        }\n      }\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Family</span>&gt; nestedFamilies\n        = GetFamilies( fdoc );\n \n      ListImportsAndSearchForMore(\n        recursionLevel + 1, fdoc, nestedFamilies );\n    }\n  }\n}\n</pre>\n<p>Using these two helper functions, the source code for the mainline of the Execute method is reduced to very little:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Family</span>&gt; families\n    = GetFamilies( doc );\n \n  ListImportsAndSearchForMore( 0, doc, families );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n}\n</pre>\n<p>Running this in a project containing one family with an import symbol and another family with nested families within it produces the following output in the debug output window displayed by Debug &gt; Windows &gt; Output:</p>\n<pre>\nFamily 'Family1' contains 1 import instance:\n  'xr.dwg'\nFamily 'myFamily3' contains 0 import instances.\n  Family 'M_Rectangular Column' contains 0 import instances.\n  Family 'myFamily1' contains 0 import instances.\n    Family 'M_Rectangular Column' contains 0 import instances.\n  Family 'myFamily2' contains 0 import instances.\n    Family 'M_Rectangular Column' contains 0 import instances.\n</pre>\n<p>In another project containing an annotation symbol with a nested family with an import symbol, it produces the following:</p>\n<pre>\nFamily 'Duplex Receptacle' contains 0 import instances.\n  Family 'Duplex Annotation' contains 1 import instance:\n    'star.dwg'\n</pre>\n<p>Here is\n\n<a href=\"zip/bc11033.zip\">\nversion 1.1.0.33</a>\n\nof the complete Visual Studio solution with the new command.</p>\n</p></p></p></p></p></p></p>"
  }
]