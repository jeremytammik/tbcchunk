[
  {
    "original_filename": "1005_get_line_styles",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1005_get_line_styles",
    "header_text": "Retrieving All Available Line Styles",
    "local_header_href": "#retrieving-all-available-line-styles",
    "chunk_text": "<h3>Retrieving All Available Line Styles</h3><p>I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/divideparts-in-f.html#5\">\nmentioned</a> an\n\n<a href=\"http://adndevblog.typepad.com/aec\">\nAEC DevBlog</a> post\n\nproviding sample code showing how to\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/09/retrieving-a-list-of-line-styles.html\">\nretrieve all line styles</a> through\n\nthe CurveElement GetLineStyleIds property and mentioned that you can create a temporary curve element to invoke the property on in a separate transaction which is rolled back afterwards.</p><p>Actually, there is no need at all for all this rigmarole, as the following answer to a developer query shows:</p><p><strong>Question:</strong> I need to retrieve all the available line styles in a project.</p><p>I did some research and found the abovementioned blog post requiring a dummy line to achieve that.</p><p>This seems to be inconsistent with obtaining other project data like Material and FillPattern instances.</p><p>You can easily make selections of all kinds, like these:</p><pre class=\"code\">\n  ElementCollectionHelper.GetAllProjectElements(doc)\n    .Where( c =&gt; c.GetType() == <span class=\"blue\">typeof</span>(<span class=\"teal\">Material</span>) )\n    .ToList());\n \n  ElementCollectionHelper.GetAllProjectElements(doc)\n    .Where( c =&gt; c.GetType() == <span class=\"blue\">typeof</span>(<span class=\"teal\">FillPatternElement</span>) )\n    .ToList());\n</pre><p>I find it rather strange that you need a dummy line to obtain line styles.</p><p>Is there a better way, please?</p><p><strong>Answer:</strong> While the Revit API does not provide a true 'Line style' element, the line styles are actually  subcategories of the Lines category.\nTherefore, the FilteredElementCollector cannot easily be used for this in a single statement, like in your examples above.</p><p>It should be possible to retrieve the line styles without a line instance, though.</p><p>Here’s a macro that lists all subcategories of the Lines category:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> GetListOfLinestyles( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">Category</span> c = doc.Settings.Categories.get_Item(\n      <span class=\"teal\">BuiltInCategory</span>.OST_Lines );\n \n    <span class=\"teal\">CategoryNameMap</span> subcats = c.SubCategories;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Category</span> lineStyle <span class=\"blue\">in</span> subcats )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Line style\"</span>, <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Linestyle {0} id {1}\"</span>, lineStyle.Name,\n        lineStyle.Id.ToString() ) );\n    }\n  }\n</pre><p>Note that some line styles like 'Room Boundary' cannot actually be assigned to arbitrary lines in the UI, but this should be good enough to find a usable one.</p><p>Once you have a collection of the line style subcategories of interest, you can create a filtered element collector retrieving all ElementType elements belonging to any one of them.</p>"
  }
]