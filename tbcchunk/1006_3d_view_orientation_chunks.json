[
  {
    "original_filename": "1006_3d_view_orientation",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1006_3d_view_orientation",
    "header_text": "Setting a Default 3D View Orientation",
    "local_header_href": "#setting-a-default-3d-view-orientation",
    "chunk_text": "<h3>Setting a Default 3D View Orientation</h3><p>Here is a nice little explanation by Alexander Ignatovich of\n\n<a href=\"http://www.iv-com.ru\">\nInvesticionnaya Venchurnaya Companiya</a> (that\n\nsounds like a venture investment company to me) on how to export an image file for a family or project.</p><p>One issue that cropped up was how to set the default view orientation for a newly created 3D view:</p><p><strong>Question:</strong> In versions prior to Revit 2014, I used this code to create a new 3D view with a default view direction:</p><pre class=\"code\">\n  <span class=\"blue\">var</span> direction = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -1, 1, -1 );\n  <span class=\"blue\">var</span> view3D = doc.IsFamilyDocument\n    ? doc.FamilyCreate.NewView3D( direction )\n    : doc.Create.NewView3D( direction );\n</pre><p>I am having difficulty obtaining the same result in Revit 2014, though, using the View3D CreateIsometric and SetOrientation methods.</p><p>I tried the following, but with no success:</p><pre class=\"code\">\n  <span class=\"blue\">var</span> direction = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(-1, 1, -1);\n  <span class=\"blue\">var</span> collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(doc);\n  <span class=\"blue\">var</span> viewFamilyType = collector\n    .OfClass&lt;<span class=\"teal\">ViewFamilyType</span>&gt;()\n    .Cast&lt;<span class=\"teal\">ViewFamilyType</span>&gt;()\n    .FirstOrDefault(x =&gt; x.ViewFamily\n      == <span class=\"teal\">ViewFamily</span>.ThreeDimensional);\n \n  <span class=\"green\">// . . . </span>\n \n  <span class=\"blue\">var</span> view3D = <span class=\"teal\">View3D</span>.CreateIsometric(\n    doc, viewFamilyType.Id);\n \n  <span class=\"green\">// . . .</span>\n \n  view3D.SetOrientation( <span class=\"blue\">new</span> <span class=\"teal\">ViewOrientation3D</span>(\n    direction, <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(0, 1, 1), <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(0, 1, -1)));\n</pre><p>The result differs from the old obsolete code.</p><p>What parameters should I use to get the same result?</p><p><strong>Answer:</strong> I solved my issue trying to generate pictures of families and project documents looking like the default 3D views in Revit.</p><p>I think I found the simplest way to do this, and maybe it will be useful not only for me.</p><p>When I initially  tried to convert my code to the new way, I called the method</p><pre class=\"code\">\n  view3D.SetOrientation(\n    <span class=\"blue\">new</span> <span class=\"teal\">ViewOrientation3D</span>(\n      direction,\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 1, 1 ),\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 1, -1 ) ) );\n</pre><p>I just removed the call to invoke the SetOrientation method and it now works perfectly.</p><p>It generates very nice pictures :-)\nHere are two of them:</p><center>\n<img alt=\"Sample image\" src=\"img/ai_3d_view_orient_1.png\" width=\"200\"/>\n<br/>\n<img alt=\"Sample image\" src=\"img/ai_3d_view_orient_2.jpg\" width=\"200\"/>\n</center><p>In my code, I make use of the following filtered element collector extension methods:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">FilteredElementCollectorExtensions</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">FilteredElementCollector</span> OfClass&lt;T&gt;(\n    <span class=\"blue\">this</span> <span class=\"teal\">FilteredElementCollector</span> collector )\n      <span class=\"blue\">where</span> T : <span class=\"teal\">Element</span>\n  {\n    <span class=\"blue\">return</span> collector.OfClass( <span class=\"blue\">typeof</span>( T ) );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">IEnumerable</span>&lt;T&gt; OfType&lt;T&gt;(\n    <span class=\"blue\">this</span> <span class=\"teal\">FilteredElementCollector</span> collector )\n      <span class=\"blue\">where</span> T : <span class=\"teal\">Element</span>\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Enumerable</span>.OfType&lt;T&gt;(\n      collector.OfClass&lt;T&gt;() );\n  }\n}\n</pre><p>Then I can generate the views using the following:</p><pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> ExportToImage( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"blue\">var</span> tempFileName = <span class=\"teal\">Path</span>.ChangeExtension(\n    <span class=\"teal\">Path</span>.GetRandomFileName(), <span class=\"maroon\">\"png\"</span> );\n \n  <span class=\"blue\">string</span> tempImageFile;\n \n  <span class=\"blue\">try</span>\n  {\n    tempImageFile = <span class=\"teal\">Path</span>.Combine(\n      <span class=\"teal\">Path</span>.GetTempPath(), tempFileName );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">IOException</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementId</span>&gt; views = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n  <span class=\"blue\">try</span>\n  {\n \n<span class=\"blue\">#if</span> !VERSION2014\n<span class=\"gray\">    var direction = new XYZ(-1, 1, -1);</span>\n<span class=\"gray\">    var view3D = doc.IsFamilyDocument</span>\n<span class=\"gray\">      ? doc.FamilyCreate.NewView3D(direction)</span>\n<span class=\"gray\">      : doc.Create.NewView3D(direction);</span>\n<span class=\"blue\">#else</span>\n    <span class=\"blue\">var</span> collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(\n      doc );\n \n    <span class=\"blue\">var</span> viewFamilyType = collector\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewFamilyType</span> ) )\n      .OfType&lt;<span class=\"teal\">ViewFamilyType</span>&gt;()\n      .FirstOrDefault( x =&gt;\n        x.ViewFamily == <span class=\"teal\">ViewFamily</span>.ThreeDimensional );\n \n    <span class=\"blue\">var</span> view3D = ( viewFamilyType != <span class=\"blue\">null</span> )\n      ? <span class=\"teal\">View3D</span>.CreateIsometric( doc, viewFamilyType.Id )\n      : <span class=\"blue\">null</span>;\n \n<span class=\"blue\">#endif</span> <span class=\"green\">// VERSION2014</span>\n \n    <span class=\"blue\">if</span>( view3D != <span class=\"blue\">null</span> )\n    {\n      views.Add( view3D.Id );\n \n      <span class=\"blue\">var</span> graphicDisplayOptions\n        = view3D.get_Parameter(\n          <span class=\"teal\">BuiltInParameter</span>.MODEL_GRAPHICS_STYLE );\n \n      <span class=\"green\">// Settings for best quality</span>\n \n      graphicDisplayOptions.Set( 6 );\n    }\n  }\n  <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n    .<span class=\"teal\">InvalidOperationException</span> )\n  {\n  }\n \n  <span class=\"blue\">var</span> ieo = <span class=\"blue\">new</span> <span class=\"teal\">ImageExportOptions</span>\n  {\n    FilePath = tempImageFile,\n    FitDirection = <span class=\"teal\">FitDirectionType</span>.Horizontal,\n    HLRandWFViewsFileType = <span class=\"teal\">ImageFileType</span>.PNG,\n    ImageResolution = <span class=\"teal\">ImageResolution</span>.DPI_150,\n    ShouldCreateWebSite = <span class=\"blue\">false</span>\n  };\n \n  <span class=\"blue\">if</span>( views.Count &gt; 0 )\n  {\n    ieo.SetViewsAndSheets( views );\n    ieo.ExportRange = <span class=\"teal\">ExportRange</span>.SetOfViews;\n  }\n  <span class=\"blue\">else</span>\n  {\n    ieo.ExportRange = <span class=\"teal\">ExportRange</span>\n      .VisibleRegionOfCurrentView;\n  }\n \n  ieo.ZoomType = <span class=\"teal\">ZoomFitType</span>.FitToPage;\n  ieo.ViewName = <span class=\"maroon\">\"tmp\"</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">ImageExportOptions</span>.IsValidFileName(\n    tempImageFile ) )\n  {\n    <span class=\"green\">// If ExportRange = ExportRange.SetOfViews </span>\n    <span class=\"green\">// and document is not active, then image </span>\n    <span class=\"green\">// exports successfully, but throws</span>\n    <span class=\"green\">// Autodesk.Revit.Exceptions.InternalException</span>\n \n    <span class=\"blue\">try</span>\n    {\n      doc.ExportImage( ieo );\n    }\n    <span class=\"blue\">catch</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Empty;\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Empty;\n  }\n \n  <span class=\"green\">// File name has format like </span>\n  <span class=\"green\">// \"tempFileName - view type - view name\", e.g.</span>\n  <span class=\"green\">// \"luccwjkz - 3D View - {3D}.png\".</span>\n  <span class=\"green\">// Get the first image (we only listed one view</span>\n  <span class=\"green\">// in views).</span>\n \n  <span class=\"blue\">var</span> files = <span class=\"teal\">Directory</span>.GetFiles(\n    <span class=\"teal\">Path</span>.GetTempPath(),\n    <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0}*.*\"</span>, <span class=\"teal\">Path</span>\n      .GetFileNameWithoutExtension(\n        tempFileName ) ) );\n \n  <span class=\"blue\">return</span> files.Length &gt; 0\n    ? files[0]\n    : <span class=\"blue\">string</span>.Empty;\n}\n</pre><p>Many thanks to Alexander for sharing this!</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1006_3d_view_orientation",
    "header_text": "Addendum – ImageExportOptions.GetFileName",
    "local_header_href": "#addendum-imageexportoptionsgetfilename",
    "chunk_text": "<h4>Addendum – ImageExportOptions.GetFileName</h4><p>Maxence points out in his <a href=\"#comment-4620342466\">comment</a> below:</p><blockquote>\n<p>Since Revit 2015 you can use the static method <code>ImageExportOptions.GetFileName()</code> to get the file name (without path and without extension) that will be produced when exporting a view to an image.</p>\n</blockquote>"
  }
]