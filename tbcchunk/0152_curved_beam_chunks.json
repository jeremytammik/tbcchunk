[
  {
    "original_filename": "0152_curved_beam",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0152_curved_beam",
    "header_text": "Creating a Curved Beam",
    "local_header_href": "#creating-a-curved-beam",
    "chunk_text": "<h3>Creating a Curved Beam</h3><p>Here is a solution from my colleague Joe Ye on how to create a curved beam.\nThis is also the first and so far only Building Coder sample that demonstrates the use of the Revit API DoubleArray and NurbSpline classes.</p><p><strong>Question:</strong>\nI am creating curved beams using \n\n<a href=\"http://en.wikipedia.org/wiki/NURBS\">\nNURBS</a>.\n\nWhen the spline in parallel to the XY plane, all works well:</p><img alt=\"Curved beam in XY plane\" src=\"img/curved_beam_xy.png\"/><p>When the curve is lying in the YZ or XZ plane, however, the resulting beam is straight:</p><img alt=\"Curved beam remains straight\" src=\"img/curved_beam_is_straight.png\"/><p>How can I create the correct curved beam in all orientations?</p><p><strong>Answer:</strong>\nThis was actually a known issue in Revit 2009, and has been fixed in Revit 2010. \nI tested creating a nurbs-defined curved beam in the XZ plane in 2010 and it works well.\nHere is the resulting shape in front view:</p><img alt=\"Curved beam is curved\" src=\"img/curved_beam_is_curved.png\"/><p>This is the code of the Execute method used to create this beam, using a set of points in the XZ plane:</p><pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n<span class=\"teal\">Level</span> level = doc.ActiveView.Level;\n \n<span class=\"teal\">FamilySymbol</span> symbol = <span class=\"blue\">null</span>;\n \n<span class=\"blue\">string</span> path = <span class=\"maroon\">\"C:/Documents and Settings\"</span>\n  + <span class=\"maroon\">\"/All Users/Application Data/Autodesk\"</span>\n  + <span class=\"maroon\">\"/RST 2009/Metric Library/Structural\"</span>\n  + <span class=\"maroon\">\"/Framing/Steel/\"</span>;\n \n<span class=\"blue\">string</span> family = <span class=\"maroon\">\"M_WWF-Welded Wide Flange\"</span>;\n \n<span class=\"blue\">string</span> ext = <span class=\"maroon\">\".rfa\"</span>;\n \n<span class=\"blue\">string</span> filename = path + family + ext;\n \n<span class=\"blue\">string</span> symbolName = <span class=\"maroon\">\"WWF600x460\"</span>;\n \n<span class=\"blue\">if</span> ( doc.LoadFamilySymbol( filename, symbolName, <span class=\"blue\">out</span> symbol ) )\n{\n  <span class=\"teal\">Curve</span> c = CreateNurbSpline( app );\n \n  <span class=\"teal\">FamilyInstance</span> inst \n    = doc.Create.NewFamilyInstance( \n      c, symbol, level, <span class=\"teal\">StructuralType</span>.Beam );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Succeeded;\n}\n<span class=\"blue\">else</span>\n{\n  message = <span class=\"maroon\">\"Couldn't load \"</span> + filename;\n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Failed;\n}\n</pre><p>The important step is the call to the CreateNurbSpline method, which generates the required input curve from a set of hard-coded points.\nHere is the definition of that method:</p><pre class=\"code\">\n<span class=\"teal\">NurbSpline</span> CreateNurbSpline( <span class=\"teal\">Application</span> app )\n{\n  <span class=\"teal\">XYZArray</span> ctrPoints = app.Create.NewXYZArray();\n \n  <span class=\"teal\">XYZ</span> xyz1 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -41.8 * 1, 0, -9.02 * 1 );\n  <span class=\"teal\">XYZ</span> xyz2 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -9.2 * 2, 0, 0.82 * 50 );\n  <span class=\"teal\">XYZ</span> xyz3 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 9.2 * 2, 0, -0.82 * 50 );\n  <span class=\"teal\">XYZ</span> xyz4 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 41.8 * 1, 0, 9.02 * 1 );\n \n  ctrPoints.Append( xyz1 ); \n  ctrPoints.Append( xyz2 ); \n  ctrPoints.Append( xyz3 );\n  ctrPoints.Append( xyz4 );\n \n  <span class=\"teal\">DoubleArray</span> weights = <span class=\"blue\">new</span> <span class=\"teal\">DoubleArray</span>();\n \n  <span class=\"blue\">double</span> w1 = 1, w2 = 1, w3 = 1, w4 = 1;\n \n  weights.Append( <span class=\"blue\">ref</span> w1 ); \n  weights.Append( <span class=\"blue\">ref</span> w2 ); \n  weights.Append( <span class=\"blue\">ref</span> w3 );\n  weights.Append( <span class=\"blue\">ref</span> w4 );\n \n  <span class=\"teal\">DoubleArray</span> knots = <span class=\"blue\">new</span> <span class=\"teal\">DoubleArray</span>();\n \n  <span class=\"blue\">double</span> k0 = 0, k1 = 0, k2 = 0, k3 = 0, \n    k4 = 34.425128, k5 = 34.425128, \n    k6 = 34.425128, k7 = 34.425128;\n \n  knots.Append( <span class=\"blue\">ref</span> k0 ); \n  knots.Append( <span class=\"blue\">ref</span> k1 ); \n  knots.Append( <span class=\"blue\">ref</span> k2 ); \n  knots.Append( <span class=\"blue\">ref</span> k3 );\n  knots.Append( <span class=\"blue\">ref</span> k4 ); \n  knots.Append( <span class=\"blue\">ref</span> k5 ); \n  knots.Append( <span class=\"blue\">ref</span> k6 );\n  knots.Append( <span class=\"blue\">ref</span> k7 );\n \n  <span class=\"teal\">NurbSpline</span> detailNurbSpline \n    = app.Create.NewNurbSpline( \n    ctrPoints, weights, knots, 3, <span class=\"blue\">false</span>, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">return</span> detailNurbSpline;\n}\n</pre><p>Many thanks to Joe for providing this solution!</p>"
  }
]