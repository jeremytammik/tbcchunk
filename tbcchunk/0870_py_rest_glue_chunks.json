[
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "BIM 360 Glue REST API Authentication Using Python",
    "local_header_href": "#bim-360-glue-rest-api-authentication-using-python",
    "chunk_text": "<h3>BIM 360 Glue REST API Authentication Using Python</h3><p>I provided an overview of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">\nBIM 360 Glue REST API and SDK</a> last\n\nFriday and hinted at upcoming further exploration.\nWell, here it is already.\n\n<p>Due to Autodesk University and the world-wide developer conferences, I had to skip my last education day, but this stuff was too exciting to wait any longer  :-)</p>\n<p>So, unwilling to go for any length of time without trying out something new, I played a bit with the Glue API anyway.</p>\n<p>For fun, I will describe here stepping through the exploration of the Glue authentication process completely manually, making use of the Python programming language and a handy library which probably provides an easier access to the REST API than you imagined possible.\nHere are the steps:\n\n<ol>\n<li><a href=\"#1\">Python and requests</a></li>\n<li><a href=\"#2\">Get the Google page</a></li>\n<li><a href=\"#3\">Access BIM 360 Glue</a></li>\n<li><a href=\"#4\">Adding authentication</a></li>\n<li><a href=\"#5\">Timestamp and MD5 digest</a></li>\n<li><a href=\"#6\">More login credentials</a></li>\n<li><a href=\"#7\">Successful authentication</a></li>\n</ol>\n<a name=\"1\"></a>\n<h4>Python and Requests</h4>\n<p>Looking for an easy way to manually interact with REST, I immediately turned to Python and found the\n\n<a href=\"http://pypi.python.org/pypi/requests/0.4.1\">\nrequests</a> library,\n\nwhich describes itself as an 'awesome Python HTTP library that's actually usable'.\nI would agree that is a fair assessment.\n\n\n\n<a name=\"2\"></a>\n<h4>Get the Google Page</h4>\n<p>Here is an example showing how simple it is to issue an HTTP request from scratch, including launching the Python interpreter from the command line; basically, it uses one single line of code, calling the method requests.get with the desired URL:</p>\n<pre>\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt; r = requests.get('http://google.com')\n&gt;&gt;&gt; print r\n<span class=\"blue\">&lt;<span class=\"maroon\">Response</span><span class=\"blue\"> [</span><span class=\"red\">200</span>=\"\"<span class=\"blue\">]&gt;</span>\n&gt;&gt;&gt; r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n&gt;&gt;&gt; r.content\n'<span class=\"blue\">&lt;!</span><span class=\"maroon\">doctype</span> <span class=\"red\">html</span>&gt;\n&lt;<span class=\"maroon\">html</span> <span class=\"red\">itemscope</span>=\"<span class=\"blue\">itemscope</span>\" <span class=\"red\">itemtype</span>=\"<span class=\"blue\">http://schema.org/WebPage</span>\"&gt;\n&lt;<span class=\"maroon\">head</span>&gt;\n&lt;<span class=\"maroon\">meta</span> <span class=\"red\">content</span>=\"<span class=\"blue\">Search the world\\'s information, including webpages, images, videos and more. Google has many special features...</span>\"\n</span></pre>\n<p>The REST response 200 is a typical\n\n<a href=\"http://restpatterns.org/HTTP_Status_Codes\">\nHTTP status code</a> and\n\nmeans OK.\n\n\n\n<a name=\"3\"></a>\n<h4>Accessing BIM 360 Glue</h4>\n<p>Ok, so requesting the Google home page is simple.\nLet's try accessing BIM 360 in a similar manner.\n\n<p>Trying to access something, e.g. query the model services, immediately reacts:</p>\n<pre>\n&gt;&gt;&gt; u1='https://bim360.autodesk.com/api/model/v1/info.json'\n&gt;&gt;&gt; r = requests.get(u1)\n&gt;&gt;&gt; print r\n&lt;<span class=\"maroon\">Response</span><span class=\"blue\"> [</span><span class=\"red\">400</span>=\"\"<span class=\"blue\">]&gt;</span>\n</pre>\n<p>Oops.\nResponse codes in the 400 range indicate client errors.\n400 itself stands for\n\n<a href=\"http://restpatterns.org/HTTP_Status_Codes/400_-_Bad_Request\">\nbad request</a>.\n\n<p>Yes, of course, we need some authentication!</p>\n<p>Time to start looking at the documentation.\nFirst, find out where it can be found at all.\nThe starting point\n\n<a href=\"https://bim360.autodesk.com/api\">\nbim360.autodesk.com/api</a> redirects\n\nus to\n\n<a href=\"https://bim360.autodesk.com/api/doc/index.shtml\">\nbim360.autodesk.com/api/doc/index.shtml</a>,\n\nproviding human readable documentation and a link to the\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a>.</p>\n<a name=\"4\"></a>\n<h4>Adding Authentication</h4>\n<p>So, let's authenticate ourselves:</p>\n<p>Looking at the Glue\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a> on\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml#createsigned\">\ncreating a signed request</a>,\n\nthis requires some interesting bits and pieces besides the basic information, which consists of\n\n<ul>\n<li>Company id\n<li>API key\n<li>API secret\n</li></li></li></ul>\n<p>The API key and secret need to be requested from Autodesk.\nCurrently, there is no official developer program running for Glue.\nYou can however buy a normal user account and ask for additional developer access based on that.</p>\n<p>As we can see from the documentation, in addition to the API key and secret, plus the normal user account login credentials, the authentication requires a timestamp, more precisely a Unix epoch timestamp using GMT time, the number of seconds since the Unix epoch, January 1 1970 00:00:00 GMT.\n\n<p>The API key and secret are concatenated with the timestamp and encoded using an MD5 cryptographic hash to create a signature, which also has to be sent with the request.</p>\n<a name=\"5\"></a>\n<h4>Timestamp and MD5 Digest</h4>\n<p>Luckily, Python can easily support us in providing the timestamp and signature components.</p>\n<p>The timestamp can be generated like this using the time module:</p>\n<pre>\n<span class=\"blue\">import</span> time\n<span class=\"blue\">def</span> expires():\n  <span class=\"maroon\">'''return a UNIX style timestamp representing 5 minutes from now'''</span>\n  <span class=\"blue\">return int</span>(time.time()+300)\n</pre>\n<p>The Python Standard Library Cryptographic Services includes the MD5 message digest algorithm 'md5', so that is also easily taken care of.\n\n<p>Following the example given in the Glue API documentation, I created the concatenation and digest of the following items:</p>\n<ul>\n<li>API Key: ddbf3f51b3824ecbb824ae4e65d31be4\n<li>API Secret: 12345678901234567890123456789012\n<li>UNIX Timestamp: 1305568169 - (5/16/2011 5:50:36 PM)\n</li></li></li></ul>\n<p>Here is the code doing that by hand, interacting with the interpreted environment:</p>\n<pre>\n&gt;&gt;&gt; key='ddbf3f51b3824ecbb824ae4e65d31be4'\n&gt;&gt;&gt; secret='12345678901234567890123456789012'\n&gt;&gt;&gt; timestamp='1305568169'\n&gt;&gt;&gt; s=key+secret+timestamp\n&gt;&gt;&gt; s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n&gt;&gt;&gt; import md5\n&gt;&gt;&gt; signature=md5.new(s)\n&gt;&gt;&gt; print signature\n&lt;<span class=\"maroon\">md5</span> HASH=\"\" object=\"\" @=\"\" 0x10c0b5d30=\"\"&gt;\n&gt;&gt;&gt; print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n</pre>\n<p>The hexadecimal digest exactly matches the signature string listed in the Glue documentation example, so we seem to be on the right track so far.</p>\n<a name=\"6\"></a>\n<h4>More Login Credentials</h4>\n<p>Studying the documentation further, we end up at the nitty-gritty internals of the\n\n<a href=\"https://bim360.autodesk.com/api/security/v1/login/doc\">\nSecurity Service: Login</a> request,\n\nspecifying the following full list of required parameters:\n\n<ul>\n<li>format\n<li>login_name\n<li>password\n<li>company_id\n<li>api_key\n<li>api_secret\n<li>timestamp\n<li>sig\n</li></li></li></li></li></li></li></li></ul>\n<p>Actually, I intuitively fixed an error or two when transferring this list; e.g. the secret was not mentioned at this point, and the timestamp has a wrong description associated with it.\nSo do what every programmer always has to do: ignore the documentation (but only some of it!), trust your own insight, take everything with a grain of salt, and use your brains, intuition and good taste.</p>\n<p>By the way, the user name and password required here are the Autodesk id single sign-on credentials, also known as SSO, formerly Autodesk unique login or AUL.</p>\n<p>I initially tried to use a GET request and was kindly informed by a suitable error message that I should be using POST instead.</p>\n<a name=\"7\"></a>\n<h4>Successful Authentication</h4>\n<p>I ran into a couple of other not unexpected issues as well, and finally ended up with this method to construct the authentication POST request:</p>\n<pre>\nurl = <span style=\"color:#0000e6; \">'https://bim360.autodesk.com:443/api/security/v1/login.json'</span>\n\n<span style=\"color:#800000; font-weight:bold; \">def</span> bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = <span style=\"color:#e34adc; \">str</span>(<span style=\"color:#e34adc; \">int</span>(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data=<span style=\"color:#800080; \">{</span>\n    <span style=\"color:#0000e6; \">'login_name'</span> : login_name,\n    <span style=\"color:#0000e6; \">'password'</span> : password,\n    <span style=\"color:#0000e6; \">'company_id'</span> : company_id,\n    <span style=\"color:#0000e6; \">'api_key'</span> : api_key,\n    <span style=\"color:#0000e6; \">'api_secret'</span> : api_secret,\n    <span style=\"color:#0000e6; \">'timestamp'</span> : timestamp,\n    <span style=\"color:#0000e6; \">'sig'</span> : sig\n  <span style=\"color:#800080; \">}</span>\n  r = requests.post(url, data=data)\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.status_code\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.headers[<span style=\"color:#0000e6; \">'content-type'</span>]\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.content\n</pre>\n<p>This call succeeds and prints:</p>\n<pre>\n&gt;&gt;&gt; bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n<span style=\"color:#800080; \">{<span style=\"color:#0000e6; \">\"auth_token\"</span>:<span style=\"color:#0000e6; \">\"b61d3ec10a7042cf884806e4e5a55601\"</span>,<span style=\"color:#0000e6; \">\"user_id\"</span>:<span style=\"color:#0000e6; \">\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"</span>}\n</span></pre>\n<p>Again, 200 means OK, i.e. success.\nHooray!</p>\n<p>Cool, huh?</p>\n<p>There may be easier ways to achieve this, but hardly more instructive  :-)</p>\n<p>And as you can see, the interactive Python environment and rich library support really help a lot!</p>\n<p>The resulting code is also pretty succinct, considering we are starting from absolute zero here.</p>\n<p>How long would you have needed to explore and implement this in a compiled environment?</p>\n<!--\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests\n>>> r = requests.get('http://google.com')\n>>> print r\n<Response [200]>\n>>> r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n>>> r.content\n'<!doctype html>\n<html itemscope=\"itemscope\" itemtype=\"http://schema.org/WebPage\">\n<head>\n<meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features...\n\n\n>>> u1='https://bim360.autodesk.com/api/model/v1/info.json'\n>>> r = requests.get(u1)\n>>> print r\n<Response [400]>\n\n\n\n>>> key='ddbf3f51b3824ecbb824ae4e65d31be4'\n>>> secret='12345678901234567890123456789012'\n>>> timestamp='1305568169'\n>>> s=key+secret+timestamp\n>>> s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n>>> import md5\n>>> signature=md5.new(s)\n>>> print signature\n<md5 HASH object @ 0x10c0b5d30>\n>>> print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n\n\nurl = 'https://bim360.autodesk.com:443/api/security/v1/login.json'\n\ndef bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = str(int(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data={\n    'login_name' : login_name,\n    'password' : password,\n    'company_id' : company_id,\n    'api_key' : api_key,\n    'api_secret' : api_secret,\n    'timestamp' : timestamp,\n    'sig' : sig\n  }\n  r = requests.post(url, data=data)\n  print r.status_code\n  print r.headers['content-type']\n  print r.content\n\n\n>>> bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n{\"auth_token\":\"b61d3ec10a7042cf884806e4e5a55601\",\"user_id\":\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"}\n\nhttps://bim360.autodesk.com/api/model/v1/info.json?\n&company_id=autodesk_partner\n&api_key=c7e5c5c49a85421c8444e91733f64774\n&auth_token=f79462fc5a5346ba9dbd4f395781f9b4\n&timestamp=1349801232\n&sig=de4c1771541d4789a1e63762c60b34f1\n&model_id=53c41451-49e7-4b0a-919c-1499604d10c6\n&sterm=\n&pretty=1\n\nparams={\n'company_id' : 'autodesk_partner'\n'api_key' : 'c7e5c5c49a85421c8444e91733f64774'\n'auth_token' : 'f79462fc5a5346ba9dbd4f395781f9b4'\n'timestamp' : '1349801232'\n'sig' : 'de4c1771541d4789a1e63762c60b34f1'\n'model_id' : '53c41451-49e7-4b0a-919c-1499604d10c6'\n'sterm' : ''\n'pretty' : '1'\n}\n\ncompany_id: autodesk_partner\nkey: 47ecb8e052824826836b2c84277d6834\nsecret: 4f0044b4a21d4bf38da1a07d26cb0861\n\nparams={\n  'company_id' : 'autodesk_partner'\n  'api_key' : '47ecb8e052824826836b2c84277d6834'\n  'api_secret' : '4f0044b4a21d4bf38da1a07d26cb0861'\n}\n\nbim_360_glue_authenticate( 'jeremytammik', 'B2n2n222', 'autodesk_partner', '47ecb8e052824826836b2c84277d6834', '4f0044b4a21d4bf38da1a07d26cb0861' )\n\n-->\n<h1>Cloud and Mobile</h1>\n<h3>BIM 360 Glue SDK, REST API, and Authentication</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>Hi.\nI just published two articles related to BIM 360 Glue:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">An overview of the SDK components and the REST API.</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">An example of manually authenticating in the REST API using Python.</a>\n</li></li></ul>\n<p>I hope these prove useful not only for BIM 360 Glue specifically, but also to understand how to use REST in general, and what a powerful tool Python and its huge range of libraries can provide, especially for manual experimentation in this area.\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "Python and Requests",
    "local_header_href": "#python-and-requests",
    "chunk_text": "<h4>Python and Requests</h4><p>Looking for an easy way to manually interact with REST, I immediately turned to Python and found the\n\n<a href=\"http://pypi.python.org/pypi/requests/0.4.1\">\nrequests</a> library,\n\nwhich describes itself as an 'awesome Python HTTP library that's actually usable'.\nI would agree that is a fair assessment.\n\n\n\n<a name=\"2\"></a>\n<h4>Get the Google Page</h4>\n<p>Here is an example showing how simple it is to issue an HTTP request from scratch, including launching the Python interpreter from the command line; basically, it uses one single line of code, calling the method requests.get with the desired URL:</p>\n<pre>\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt; r = requests.get('http://google.com')\n&gt;&gt;&gt; print r\n<span class=\"blue\">&lt;<span class=\"maroon\">Response</span><span class=\"blue\"> [</span><span class=\"red\">200</span>=\"\"<span class=\"blue\">]&gt;</span>\n&gt;&gt;&gt; r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n&gt;&gt;&gt; r.content\n'<span class=\"blue\">&lt;!</span><span class=\"maroon\">doctype</span> <span class=\"red\">html</span>&gt;\n&lt;<span class=\"maroon\">html</span> <span class=\"red\">itemscope</span>=\"<span class=\"blue\">itemscope</span>\" <span class=\"red\">itemtype</span>=\"<span class=\"blue\">http://schema.org/WebPage</span>\"&gt;\n&lt;<span class=\"maroon\">head</span>&gt;\n&lt;<span class=\"maroon\">meta</span> <span class=\"red\">content</span>=\"<span class=\"blue\">Search the world\\'s information, including webpages, images, videos and more. Google has many special features...</span>\"\n</span></pre>\n<p>The REST response 200 is a typical\n\n<a href=\"http://restpatterns.org/HTTP_Status_Codes\">\nHTTP status code</a> and\n\nmeans OK.\n\n\n\n<a name=\"3\"></a>\n<h4>Accessing BIM 360 Glue</h4>\n<p>Ok, so requesting the Google home page is simple.\nLet's try accessing BIM 360 in a similar manner.\n\n<p>Trying to access something, e.g. query the model services, immediately reacts:</p>\n<pre>\n&gt;&gt;&gt; u1='https://bim360.autodesk.com/api/model/v1/info.json'\n&gt;&gt;&gt; r = requests.get(u1)\n&gt;&gt;&gt; print r\n&lt;<span class=\"maroon\">Response</span><span class=\"blue\"> [</span><span class=\"red\">400</span>=\"\"<span class=\"blue\">]&gt;</span>\n</pre>\n<p>Oops.\nResponse codes in the 400 range indicate client errors.\n400 itself stands for\n\n<a href=\"http://restpatterns.org/HTTP_Status_Codes/400_-_Bad_Request\">\nbad request</a>.\n\n<p>Yes, of course, we need some authentication!</p>\n<p>Time to start looking at the documentation.\nFirst, find out where it can be found at all.\nThe starting point\n\n<a href=\"https://bim360.autodesk.com/api\">\nbim360.autodesk.com/api</a> redirects\n\nus to\n\n<a href=\"https://bim360.autodesk.com/api/doc/index.shtml\">\nbim360.autodesk.com/api/doc/index.shtml</a>,\n\nproviding human readable documentation and a link to the\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a>.</p>\n<a name=\"4\"></a>\n<h4>Adding Authentication</h4>\n<p>So, let's authenticate ourselves:</p>\n<p>Looking at the Glue\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a> on\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml#createsigned\">\ncreating a signed request</a>,\n\nthis requires some interesting bits and pieces besides the basic information, which consists of\n\n<ul>\n<li>Company id\n<li>API key\n<li>API secret\n</li></li></li></ul>\n<p>The API key and secret need to be requested from Autodesk.\nCurrently, there is no official developer program running for Glue.\nYou can however buy a normal user account and ask for additional developer access based on that.</p>\n<p>As we can see from the documentation, in addition to the API key and secret, plus the normal user account login credentials, the authentication requires a timestamp, more precisely a Unix epoch timestamp using GMT time, the number of seconds since the Unix epoch, January 1 1970 00:00:00 GMT.\n\n<p>The API key and secret are concatenated with the timestamp and encoded using an MD5 cryptographic hash to create a signature, which also has to be sent with the request.</p>\n<a name=\"5\"></a>\n<h4>Timestamp and MD5 Digest</h4>\n<p>Luckily, Python can easily support us in providing the timestamp and signature components.</p>\n<p>The timestamp can be generated like this using the time module:</p>\n<pre>\n<span class=\"blue\">import</span> time\n<span class=\"blue\">def</span> expires():\n  <span class=\"maroon\">'''return a UNIX style timestamp representing 5 minutes from now'''</span>\n  <span class=\"blue\">return int</span>(time.time()+300)\n</pre>\n<p>The Python Standard Library Cryptographic Services includes the MD5 message digest algorithm 'md5', so that is also easily taken care of.\n\n<p>Following the example given in the Glue API documentation, I created the concatenation and digest of the following items:</p>\n<ul>\n<li>API Key: ddbf3f51b3824ecbb824ae4e65d31be4\n<li>API Secret: 12345678901234567890123456789012\n<li>UNIX Timestamp: 1305568169 - (5/16/2011 5:50:36 PM)\n</li></li></li></ul>\n<p>Here is the code doing that by hand, interacting with the interpreted environment:</p>\n<pre>\n&gt;&gt;&gt; key='ddbf3f51b3824ecbb824ae4e65d31be4'\n&gt;&gt;&gt; secret='12345678901234567890123456789012'\n&gt;&gt;&gt; timestamp='1305568169'\n&gt;&gt;&gt; s=key+secret+timestamp\n&gt;&gt;&gt; s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n&gt;&gt;&gt; import md5\n&gt;&gt;&gt; signature=md5.new(s)\n&gt;&gt;&gt; print signature\n&lt;<span class=\"maroon\">md5</span> HASH=\"\" object=\"\" @=\"\" 0x10c0b5d30=\"\"&gt;\n&gt;&gt;&gt; print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n</pre>\n<p>The hexadecimal digest exactly matches the signature string listed in the Glue documentation example, so we seem to be on the right track so far.</p>\n<a name=\"6\"></a>\n<h4>More Login Credentials</h4>\n<p>Studying the documentation further, we end up at the nitty-gritty internals of the\n\n<a href=\"https://bim360.autodesk.com/api/security/v1/login/doc\">\nSecurity Service: Login</a> request,\n\nspecifying the following full list of required parameters:\n\n<ul>\n<li>format\n<li>login_name\n<li>password\n<li>company_id\n<li>api_key\n<li>api_secret\n<li>timestamp\n<li>sig\n</li></li></li></li></li></li></li></li></ul>\n<p>Actually, I intuitively fixed an error or two when transferring this list; e.g. the secret was not mentioned at this point, and the timestamp has a wrong description associated with it.\nSo do what every programmer always has to do: ignore the documentation (but only some of it!), trust your own insight, take everything with a grain of salt, and use your brains, intuition and good taste.</p>\n<p>By the way, the user name and password required here are the Autodesk id single sign-on credentials, also known as SSO, formerly Autodesk unique login or AUL.</p>\n<p>I initially tried to use a GET request and was kindly informed by a suitable error message that I should be using POST instead.</p>\n<a name=\"7\"></a>\n<h4>Successful Authentication</h4>\n<p>I ran into a couple of other not unexpected issues as well, and finally ended up with this method to construct the authentication POST request:</p>\n<pre>\nurl = <span style=\"color:#0000e6; \">'https://bim360.autodesk.com:443/api/security/v1/login.json'</span>\n\n<span style=\"color:#800000; font-weight:bold; \">def</span> bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = <span style=\"color:#e34adc; \">str</span>(<span style=\"color:#e34adc; \">int</span>(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data=<span style=\"color:#800080; \">{</span>\n    <span style=\"color:#0000e6; \">'login_name'</span> : login_name,\n    <span style=\"color:#0000e6; \">'password'</span> : password,\n    <span style=\"color:#0000e6; \">'company_id'</span> : company_id,\n    <span style=\"color:#0000e6; \">'api_key'</span> : api_key,\n    <span style=\"color:#0000e6; \">'api_secret'</span> : api_secret,\n    <span style=\"color:#0000e6; \">'timestamp'</span> : timestamp,\n    <span style=\"color:#0000e6; \">'sig'</span> : sig\n  <span style=\"color:#800080; \">}</span>\n  r = requests.post(url, data=data)\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.status_code\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.headers[<span style=\"color:#0000e6; \">'content-type'</span>]\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.content\n</pre>\n<p>This call succeeds and prints:</p>\n<pre>\n&gt;&gt;&gt; bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n<span style=\"color:#800080; \">{<span style=\"color:#0000e6; \">\"auth_token\"</span>:<span style=\"color:#0000e6; \">\"b61d3ec10a7042cf884806e4e5a55601\"</span>,<span style=\"color:#0000e6; \">\"user_id\"</span>:<span style=\"color:#0000e6; \">\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"</span>}\n</span></pre>\n<p>Again, 200 means OK, i.e. success.\nHooray!</p>\n<p>Cool, huh?</p>\n<p>There may be easier ways to achieve this, but hardly more instructive  :-)</p>\n<p>And as you can see, the interactive Python environment and rich library support really help a lot!</p>\n<p>The resulting code is also pretty succinct, considering we are starting from absolute zero here.</p>\n<p>How long would you have needed to explore and implement this in a compiled environment?</p>\n<!--\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests\n>>> r = requests.get('http://google.com')\n>>> print r\n<Response [200]>\n>>> r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n>>> r.content\n'<!doctype html>\n<html itemscope=\"itemscope\" itemtype=\"http://schema.org/WebPage\">\n<head>\n<meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features...\n\n\n>>> u1='https://bim360.autodesk.com/api/model/v1/info.json'\n>>> r = requests.get(u1)\n>>> print r\n<Response [400]>\n\n\n\n>>> key='ddbf3f51b3824ecbb824ae4e65d31be4'\n>>> secret='12345678901234567890123456789012'\n>>> timestamp='1305568169'\n>>> s=key+secret+timestamp\n>>> s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n>>> import md5\n>>> signature=md5.new(s)\n>>> print signature\n<md5 HASH object @ 0x10c0b5d30>\n>>> print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n\n\nurl = 'https://bim360.autodesk.com:443/api/security/v1/login.json'\n\ndef bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = str(int(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data={\n    'login_name' : login_name,\n    'password' : password,\n    'company_id' : company_id,\n    'api_key' : api_key,\n    'api_secret' : api_secret,\n    'timestamp' : timestamp,\n    'sig' : sig\n  }\n  r = requests.post(url, data=data)\n  print r.status_code\n  print r.headers['content-type']\n  print r.content\n\n\n>>> bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n{\"auth_token\":\"b61d3ec10a7042cf884806e4e5a55601\",\"user_id\":\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"}\n\nhttps://bim360.autodesk.com/api/model/v1/info.json?\n&company_id=autodesk_partner\n&api_key=c7e5c5c49a85421c8444e91733f64774\n&auth_token=f79462fc5a5346ba9dbd4f395781f9b4\n&timestamp=1349801232\n&sig=de4c1771541d4789a1e63762c60b34f1\n&model_id=53c41451-49e7-4b0a-919c-1499604d10c6\n&sterm=\n&pretty=1\n\nparams={\n'company_id' : 'autodesk_partner'\n'api_key' : 'c7e5c5c49a85421c8444e91733f64774'\n'auth_token' : 'f79462fc5a5346ba9dbd4f395781f9b4'\n'timestamp' : '1349801232'\n'sig' : 'de4c1771541d4789a1e63762c60b34f1'\n'model_id' : '53c41451-49e7-4b0a-919c-1499604d10c6'\n'sterm' : ''\n'pretty' : '1'\n}\n\ncompany_id: autodesk_partner\nkey: 47ecb8e052824826836b2c84277d6834\nsecret: 4f0044b4a21d4bf38da1a07d26cb0861\n\nparams={\n  'company_id' : 'autodesk_partner'\n  'api_key' : '47ecb8e052824826836b2c84277d6834'\n  'api_secret' : '4f0044b4a21d4bf38da1a07d26cb0861'\n}\n\nbim_360_glue_authenticate( 'jeremytammik', 'B2n2n222', 'autodesk_partner', '47ecb8e052824826836b2c84277d6834', '4f0044b4a21d4bf38da1a07d26cb0861' )\n\n-->\n<h1>Cloud and Mobile</h1>\n<h3>BIM 360 Glue SDK, REST API, and Authentication</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>Hi.\nI just published two articles related to BIM 360 Glue:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">An overview of the SDK components and the REST API.</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">An example of manually authenticating in the REST API using Python.</a>\n</li></li></ul>\n<p>I hope these prove useful not only for BIM 360 Glue specifically, but also to understand how to use REST in general, and what a powerful tool Python and its huge range of libraries can provide, especially for manual experimentation in this area.\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "Get the Google Page",
    "local_header_href": "#get-the-google-page",
    "chunk_text": "<h4>Get the Google Page</h4><p>Here is an example showing how simple it is to issue an HTTP request from scratch, including launching the Python interpreter from the command line; basically, it uses one single line of code, calling the method requests.get with the desired URL:</p><pre>\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import requests\n&gt;&gt;&gt; r = requests.get('http://google.com')\n&gt;&gt;&gt; print r\n<span class=\"blue\">&lt;<span class=\"maroon\">Response</span><span class=\"blue\"> [</span><span class=\"red\">200</span>=\"\"<span class=\"blue\">]&gt;</span>\n&gt;&gt;&gt; r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n&gt;&gt;&gt; r.content\n'<span class=\"blue\">&lt;!</span><span class=\"maroon\">doctype</span> <span class=\"red\">html</span>&gt;\n&lt;<span class=\"maroon\">html</span> <span class=\"red\">itemscope</span>=\"<span class=\"blue\">itemscope</span>\" <span class=\"red\">itemtype</span>=\"<span class=\"blue\">http://schema.org/WebPage</span>\"&gt;\n&lt;<span class=\"maroon\">head</span>&gt;\n&lt;<span class=\"maroon\">meta</span> <span class=\"red\">content</span>=\"<span class=\"blue\">Search the world\\'s information, including webpages, images, videos and more. Google has many special features...</span>\"\n</span></pre><p>The REST response 200 is a typical\n\n<a href=\"http://restpatterns.org/HTTP_Status_Codes\">\nHTTP status code</a> and\n\nmeans OK.\n\n\n\n<a name=\"3\"></a>\n<h4>Accessing BIM 360 Glue</h4>\n<p>Ok, so requesting the Google home page is simple.\nLet's try accessing BIM 360 in a similar manner.\n\n<p>Trying to access something, e.g. query the model services, immediately reacts:</p>\n<pre>\n&gt;&gt;&gt; u1='https://bim360.autodesk.com/api/model/v1/info.json'\n&gt;&gt;&gt; r = requests.get(u1)\n&gt;&gt;&gt; print r\n&lt;<span class=\"maroon\">Response</span><span class=\"blue\"> [</span><span class=\"red\">400</span>=\"\"<span class=\"blue\">]&gt;</span>\n</pre>\n<p>Oops.\nResponse codes in the 400 range indicate client errors.\n400 itself stands for\n\n<a href=\"http://restpatterns.org/HTTP_Status_Codes/400_-_Bad_Request\">\nbad request</a>.\n\n<p>Yes, of course, we need some authentication!</p>\n<p>Time to start looking at the documentation.\nFirst, find out where it can be found at all.\nThe starting point\n\n<a href=\"https://bim360.autodesk.com/api\">\nbim360.autodesk.com/api</a> redirects\n\nus to\n\n<a href=\"https://bim360.autodesk.com/api/doc/index.shtml\">\nbim360.autodesk.com/api/doc/index.shtml</a>,\n\nproviding human readable documentation and a link to the\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a>.</p>\n<a name=\"4\"></a>\n<h4>Adding Authentication</h4>\n<p>So, let's authenticate ourselves:</p>\n<p>Looking at the Glue\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a> on\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml#createsigned\">\ncreating a signed request</a>,\n\nthis requires some interesting bits and pieces besides the basic information, which consists of\n\n<ul>\n<li>Company id\n<li>API key\n<li>API secret\n</li></li></li></ul>\n<p>The API key and secret need to be requested from Autodesk.\nCurrently, there is no official developer program running for Glue.\nYou can however buy a normal user account and ask for additional developer access based on that.</p>\n<p>As we can see from the documentation, in addition to the API key and secret, plus the normal user account login credentials, the authentication requires a timestamp, more precisely a Unix epoch timestamp using GMT time, the number of seconds since the Unix epoch, January 1 1970 00:00:00 GMT.\n\n<p>The API key and secret are concatenated with the timestamp and encoded using an MD5 cryptographic hash to create a signature, which also has to be sent with the request.</p>\n<a name=\"5\"></a>\n<h4>Timestamp and MD5 Digest</h4>\n<p>Luckily, Python can easily support us in providing the timestamp and signature components.</p>\n<p>The timestamp can be generated like this using the time module:</p>\n<pre>\n<span class=\"blue\">import</span> time\n<span class=\"blue\">def</span> expires():\n  <span class=\"maroon\">'''return a UNIX style timestamp representing 5 minutes from now'''</span>\n  <span class=\"blue\">return int</span>(time.time()+300)\n</pre>\n<p>The Python Standard Library Cryptographic Services includes the MD5 message digest algorithm 'md5', so that is also easily taken care of.\n\n<p>Following the example given in the Glue API documentation, I created the concatenation and digest of the following items:</p>\n<ul>\n<li>API Key: ddbf3f51b3824ecbb824ae4e65d31be4\n<li>API Secret: 12345678901234567890123456789012\n<li>UNIX Timestamp: 1305568169 - (5/16/2011 5:50:36 PM)\n</li></li></li></ul>\n<p>Here is the code doing that by hand, interacting with the interpreted environment:</p>\n<pre>\n&gt;&gt;&gt; key='ddbf3f51b3824ecbb824ae4e65d31be4'\n&gt;&gt;&gt; secret='12345678901234567890123456789012'\n&gt;&gt;&gt; timestamp='1305568169'\n&gt;&gt;&gt; s=key+secret+timestamp\n&gt;&gt;&gt; s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n&gt;&gt;&gt; import md5\n&gt;&gt;&gt; signature=md5.new(s)\n&gt;&gt;&gt; print signature\n&lt;<span class=\"maroon\">md5</span> HASH=\"\" object=\"\" @=\"\" 0x10c0b5d30=\"\"&gt;\n&gt;&gt;&gt; print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n</pre>\n<p>The hexadecimal digest exactly matches the signature string listed in the Glue documentation example, so we seem to be on the right track so far.</p>\n<a name=\"6\"></a>\n<h4>More Login Credentials</h4>\n<p>Studying the documentation further, we end up at the nitty-gritty internals of the\n\n<a href=\"https://bim360.autodesk.com/api/security/v1/login/doc\">\nSecurity Service: Login</a> request,\n\nspecifying the following full list of required parameters:\n\n<ul>\n<li>format\n<li>login_name\n<li>password\n<li>company_id\n<li>api_key\n<li>api_secret\n<li>timestamp\n<li>sig\n</li></li></li></li></li></li></li></li></ul>\n<p>Actually, I intuitively fixed an error or two when transferring this list; e.g. the secret was not mentioned at this point, and the timestamp has a wrong description associated with it.\nSo do what every programmer always has to do: ignore the documentation (but only some of it!), trust your own insight, take everything with a grain of salt, and use your brains, intuition and good taste.</p>\n<p>By the way, the user name and password required here are the Autodesk id single sign-on credentials, also known as SSO, formerly Autodesk unique login or AUL.</p>\n<p>I initially tried to use a GET request and was kindly informed by a suitable error message that I should be using POST instead.</p>\n<a name=\"7\"></a>\n<h4>Successful Authentication</h4>\n<p>I ran into a couple of other not unexpected issues as well, and finally ended up with this method to construct the authentication POST request:</p>\n<pre>\nurl = <span style=\"color:#0000e6; \">'https://bim360.autodesk.com:443/api/security/v1/login.json'</span>\n\n<span style=\"color:#800000; font-weight:bold; \">def</span> bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = <span style=\"color:#e34adc; \">str</span>(<span style=\"color:#e34adc; \">int</span>(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data=<span style=\"color:#800080; \">{</span>\n    <span style=\"color:#0000e6; \">'login_name'</span> : login_name,\n    <span style=\"color:#0000e6; \">'password'</span> : password,\n    <span style=\"color:#0000e6; \">'company_id'</span> : company_id,\n    <span style=\"color:#0000e6; \">'api_key'</span> : api_key,\n    <span style=\"color:#0000e6; \">'api_secret'</span> : api_secret,\n    <span style=\"color:#0000e6; \">'timestamp'</span> : timestamp,\n    <span style=\"color:#0000e6; \">'sig'</span> : sig\n  <span style=\"color:#800080; \">}</span>\n  r = requests.post(url, data=data)\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.status_code\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.headers[<span style=\"color:#0000e6; \">'content-type'</span>]\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.content\n</pre>\n<p>This call succeeds and prints:</p>\n<pre>\n&gt;&gt;&gt; bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n<span style=\"color:#800080; \">{<span style=\"color:#0000e6; \">\"auth_token\"</span>:<span style=\"color:#0000e6; \">\"b61d3ec10a7042cf884806e4e5a55601\"</span>,<span style=\"color:#0000e6; \">\"user_id\"</span>:<span style=\"color:#0000e6; \">\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"</span>}\n</span></pre>\n<p>Again, 200 means OK, i.e. success.\nHooray!</p>\n<p>Cool, huh?</p>\n<p>There may be easier ways to achieve this, but hardly more instructive  :-)</p>\n<p>And as you can see, the interactive Python environment and rich library support really help a lot!</p>\n<p>The resulting code is also pretty succinct, considering we are starting from absolute zero here.</p>\n<p>How long would you have needed to explore and implement this in a compiled environment?</p>\n<!--\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests\n>>> r = requests.get('http://google.com')\n>>> print r\n<Response [200]>\n>>> r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n>>> r.content\n'<!doctype html>\n<html itemscope=\"itemscope\" itemtype=\"http://schema.org/WebPage\">\n<head>\n<meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features...\n\n\n>>> u1='https://bim360.autodesk.com/api/model/v1/info.json'\n>>> r = requests.get(u1)\n>>> print r\n<Response [400]>\n\n\n\n>>> key='ddbf3f51b3824ecbb824ae4e65d31be4'\n>>> secret='12345678901234567890123456789012'\n>>> timestamp='1305568169'\n>>> s=key+secret+timestamp\n>>> s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n>>> import md5\n>>> signature=md5.new(s)\n>>> print signature\n<md5 HASH object @ 0x10c0b5d30>\n>>> print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n\n\nurl = 'https://bim360.autodesk.com:443/api/security/v1/login.json'\n\ndef bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = str(int(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data={\n    'login_name' : login_name,\n    'password' : password,\n    'company_id' : company_id,\n    'api_key' : api_key,\n    'api_secret' : api_secret,\n    'timestamp' : timestamp,\n    'sig' : sig\n  }\n  r = requests.post(url, data=data)\n  print r.status_code\n  print r.headers['content-type']\n  print r.content\n\n\n>>> bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n{\"auth_token\":\"b61d3ec10a7042cf884806e4e5a55601\",\"user_id\":\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"}\n\nhttps://bim360.autodesk.com/api/model/v1/info.json?\n&company_id=autodesk_partner\n&api_key=c7e5c5c49a85421c8444e91733f64774\n&auth_token=f79462fc5a5346ba9dbd4f395781f9b4\n&timestamp=1349801232\n&sig=de4c1771541d4789a1e63762c60b34f1\n&model_id=53c41451-49e7-4b0a-919c-1499604d10c6\n&sterm=\n&pretty=1\n\nparams={\n'company_id' : 'autodesk_partner'\n'api_key' : 'c7e5c5c49a85421c8444e91733f64774'\n'auth_token' : 'f79462fc5a5346ba9dbd4f395781f9b4'\n'timestamp' : '1349801232'\n'sig' : 'de4c1771541d4789a1e63762c60b34f1'\n'model_id' : '53c41451-49e7-4b0a-919c-1499604d10c6'\n'sterm' : ''\n'pretty' : '1'\n}\n\ncompany_id: autodesk_partner\nkey: 47ecb8e052824826836b2c84277d6834\nsecret: 4f0044b4a21d4bf38da1a07d26cb0861\n\nparams={\n  'company_id' : 'autodesk_partner'\n  'api_key' : '47ecb8e052824826836b2c84277d6834'\n  'api_secret' : '4f0044b4a21d4bf38da1a07d26cb0861'\n}\n\nbim_360_glue_authenticate( 'jeremytammik', 'B2n2n222', 'autodesk_partner', '47ecb8e052824826836b2c84277d6834', '4f0044b4a21d4bf38da1a07d26cb0861' )\n\n-->\n<h1>Cloud and Mobile</h1>\n<h3>BIM 360 Glue SDK, REST API, and Authentication</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>Hi.\nI just published two articles related to BIM 360 Glue:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">An overview of the SDK components and the REST API.</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">An example of manually authenticating in the REST API using Python.</a>\n</li></li></ul>\n<p>I hope these prove useful not only for BIM 360 Glue specifically, but also to understand how to use REST in general, and what a powerful tool Python and its huge range of libraries can provide, especially for manual experimentation in this area.\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "Accessing BIM 360 Glue",
    "local_header_href": "#accessing-bim-360-glue",
    "chunk_text": "<h4>Accessing BIM 360 Glue</h4><p>Ok, so requesting the Google home page is simple.\nLet's try accessing BIM 360 in a similar manner.\n\n<p>Trying to access something, e.g. query the model services, immediately reacts:</p>\n<pre>\n&gt;&gt;&gt; u1='https://bim360.autodesk.com/api/model/v1/info.json'\n&gt;&gt;&gt; r = requests.get(u1)\n&gt;&gt;&gt; print r\n&lt;<span class=\"maroon\">Response</span><span class=\"blue\"> [</span><span class=\"red\">400</span>=\"\"<span class=\"blue\">]&gt;</span>\n</pre>\n<p>Oops.\nResponse codes in the 400 range indicate client errors.\n400 itself stands for\n\n<a href=\"http://restpatterns.org/HTTP_Status_Codes/400_-_Bad_Request\">\nbad request</a>.\n\n<p>Yes, of course, we need some authentication!</p>\n<p>Time to start looking at the documentation.\nFirst, find out where it can be found at all.\nThe starting point\n\n<a href=\"https://bim360.autodesk.com/api\">\nbim360.autodesk.com/api</a> redirects\n\nus to\n\n<a href=\"https://bim360.autodesk.com/api/doc/index.shtml\">\nbim360.autodesk.com/api/doc/index.shtml</a>,\n\nproviding human readable documentation and a link to the\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a>.</p>\n<a name=\"4\"></a>\n<h4>Adding Authentication</h4>\n<p>So, let's authenticate ourselves:</p>\n<p>Looking at the Glue\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a> on\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml#createsigned\">\ncreating a signed request</a>,\n\nthis requires some interesting bits and pieces besides the basic information, which consists of\n\n<ul>\n<li>Company id\n<li>API key\n<li>API secret\n</li></li></li></ul>\n<p>The API key and secret need to be requested from Autodesk.\nCurrently, there is no official developer program running for Glue.\nYou can however buy a normal user account and ask for additional developer access based on that.</p>\n<p>As we can see from the documentation, in addition to the API key and secret, plus the normal user account login credentials, the authentication requires a timestamp, more precisely a Unix epoch timestamp using GMT time, the number of seconds since the Unix epoch, January 1 1970 00:00:00 GMT.\n\n<p>The API key and secret are concatenated with the timestamp and encoded using an MD5 cryptographic hash to create a signature, which also has to be sent with the request.</p>\n<a name=\"5\"></a>\n<h4>Timestamp and MD5 Digest</h4>\n<p>Luckily, Python can easily support us in providing the timestamp and signature components.</p>\n<p>The timestamp can be generated like this using the time module:</p>\n<pre>\n<span class=\"blue\">import</span> time\n<span class=\"blue\">def</span> expires():\n  <span class=\"maroon\">'''return a UNIX style timestamp representing 5 minutes from now'''</span>\n  <span class=\"blue\">return int</span>(time.time()+300)\n</pre>\n<p>The Python Standard Library Cryptographic Services includes the MD5 message digest algorithm 'md5', so that is also easily taken care of.\n\n<p>Following the example given in the Glue API documentation, I created the concatenation and digest of the following items:</p>\n<ul>\n<li>API Key: ddbf3f51b3824ecbb824ae4e65d31be4\n<li>API Secret: 12345678901234567890123456789012\n<li>UNIX Timestamp: 1305568169 - (5/16/2011 5:50:36 PM)\n</li></li></li></ul>\n<p>Here is the code doing that by hand, interacting with the interpreted environment:</p>\n<pre>\n&gt;&gt;&gt; key='ddbf3f51b3824ecbb824ae4e65d31be4'\n&gt;&gt;&gt; secret='12345678901234567890123456789012'\n&gt;&gt;&gt; timestamp='1305568169'\n&gt;&gt;&gt; s=key+secret+timestamp\n&gt;&gt;&gt; s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n&gt;&gt;&gt; import md5\n&gt;&gt;&gt; signature=md5.new(s)\n&gt;&gt;&gt; print signature\n&lt;<span class=\"maroon\">md5</span> HASH=\"\" object=\"\" @=\"\" 0x10c0b5d30=\"\"&gt;\n&gt;&gt;&gt; print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n</pre>\n<p>The hexadecimal digest exactly matches the signature string listed in the Glue documentation example, so we seem to be on the right track so far.</p>\n<a name=\"6\"></a>\n<h4>More Login Credentials</h4>\n<p>Studying the documentation further, we end up at the nitty-gritty internals of the\n\n<a href=\"https://bim360.autodesk.com/api/security/v1/login/doc\">\nSecurity Service: Login</a> request,\n\nspecifying the following full list of required parameters:\n\n<ul>\n<li>format\n<li>login_name\n<li>password\n<li>company_id\n<li>api_key\n<li>api_secret\n<li>timestamp\n<li>sig\n</li></li></li></li></li></li></li></li></ul>\n<p>Actually, I intuitively fixed an error or two when transferring this list; e.g. the secret was not mentioned at this point, and the timestamp has a wrong description associated with it.\nSo do what every programmer always has to do: ignore the documentation (but only some of it!), trust your own insight, take everything with a grain of salt, and use your brains, intuition and good taste.</p>\n<p>By the way, the user name and password required here are the Autodesk id single sign-on credentials, also known as SSO, formerly Autodesk unique login or AUL.</p>\n<p>I initially tried to use a GET request and was kindly informed by a suitable error message that I should be using POST instead.</p>\n<a name=\"7\"></a>\n<h4>Successful Authentication</h4>\n<p>I ran into a couple of other not unexpected issues as well, and finally ended up with this method to construct the authentication POST request:</p>\n<pre>\nurl = <span style=\"color:#0000e6; \">'https://bim360.autodesk.com:443/api/security/v1/login.json'</span>\n\n<span style=\"color:#800000; font-weight:bold; \">def</span> bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = <span style=\"color:#e34adc; \">str</span>(<span style=\"color:#e34adc; \">int</span>(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data=<span style=\"color:#800080; \">{</span>\n    <span style=\"color:#0000e6; \">'login_name'</span> : login_name,\n    <span style=\"color:#0000e6; \">'password'</span> : password,\n    <span style=\"color:#0000e6; \">'company_id'</span> : company_id,\n    <span style=\"color:#0000e6; \">'api_key'</span> : api_key,\n    <span style=\"color:#0000e6; \">'api_secret'</span> : api_secret,\n    <span style=\"color:#0000e6; \">'timestamp'</span> : timestamp,\n    <span style=\"color:#0000e6; \">'sig'</span> : sig\n  <span style=\"color:#800080; \">}</span>\n  r = requests.post(url, data=data)\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.status_code\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.headers[<span style=\"color:#0000e6; \">'content-type'</span>]\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.content\n</pre>\n<p>This call succeeds and prints:</p>\n<pre>\n&gt;&gt;&gt; bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n<span style=\"color:#800080; \">{<span style=\"color:#0000e6; \">\"auth_token\"</span>:<span style=\"color:#0000e6; \">\"b61d3ec10a7042cf884806e4e5a55601\"</span>,<span style=\"color:#0000e6; \">\"user_id\"</span>:<span style=\"color:#0000e6; \">\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"</span>}\n</span></pre>\n<p>Again, 200 means OK, i.e. success.\nHooray!</p>\n<p>Cool, huh?</p>\n<p>There may be easier ways to achieve this, but hardly more instructive  :-)</p>\n<p>And as you can see, the interactive Python environment and rich library support really help a lot!</p>\n<p>The resulting code is also pretty succinct, considering we are starting from absolute zero here.</p>\n<p>How long would you have needed to explore and implement this in a compiled environment?</p>\n<!--\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests\n>>> r = requests.get('http://google.com')\n>>> print r\n<Response [200]>\n>>> r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n>>> r.content\n'<!doctype html>\n<html itemscope=\"itemscope\" itemtype=\"http://schema.org/WebPage\">\n<head>\n<meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features...\n\n\n>>> u1='https://bim360.autodesk.com/api/model/v1/info.json'\n>>> r = requests.get(u1)\n>>> print r\n<Response [400]>\n\n\n\n>>> key='ddbf3f51b3824ecbb824ae4e65d31be4'\n>>> secret='12345678901234567890123456789012'\n>>> timestamp='1305568169'\n>>> s=key+secret+timestamp\n>>> s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n>>> import md5\n>>> signature=md5.new(s)\n>>> print signature\n<md5 HASH object @ 0x10c0b5d30>\n>>> print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n\n\nurl = 'https://bim360.autodesk.com:443/api/security/v1/login.json'\n\ndef bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = str(int(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data={\n    'login_name' : login_name,\n    'password' : password,\n    'company_id' : company_id,\n    'api_key' : api_key,\n    'api_secret' : api_secret,\n    'timestamp' : timestamp,\n    'sig' : sig\n  }\n  r = requests.post(url, data=data)\n  print r.status_code\n  print r.headers['content-type']\n  print r.content\n\n\n>>> bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n{\"auth_token\":\"b61d3ec10a7042cf884806e4e5a55601\",\"user_id\":\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"}\n\nhttps://bim360.autodesk.com/api/model/v1/info.json?\n&company_id=autodesk_partner\n&api_key=c7e5c5c49a85421c8444e91733f64774\n&auth_token=f79462fc5a5346ba9dbd4f395781f9b4\n&timestamp=1349801232\n&sig=de4c1771541d4789a1e63762c60b34f1\n&model_id=53c41451-49e7-4b0a-919c-1499604d10c6\n&sterm=\n&pretty=1\n\nparams={\n'company_id' : 'autodesk_partner'\n'api_key' : 'c7e5c5c49a85421c8444e91733f64774'\n'auth_token' : 'f79462fc5a5346ba9dbd4f395781f9b4'\n'timestamp' : '1349801232'\n'sig' : 'de4c1771541d4789a1e63762c60b34f1'\n'model_id' : '53c41451-49e7-4b0a-919c-1499604d10c6'\n'sterm' : ''\n'pretty' : '1'\n}\n\ncompany_id: autodesk_partner\nkey: 47ecb8e052824826836b2c84277d6834\nsecret: 4f0044b4a21d4bf38da1a07d26cb0861\n\nparams={\n  'company_id' : 'autodesk_partner'\n  'api_key' : '47ecb8e052824826836b2c84277d6834'\n  'api_secret' : '4f0044b4a21d4bf38da1a07d26cb0861'\n}\n\nbim_360_glue_authenticate( 'jeremytammik', 'B2n2n222', 'autodesk_partner', '47ecb8e052824826836b2c84277d6834', '4f0044b4a21d4bf38da1a07d26cb0861' )\n\n-->\n<h1>Cloud and Mobile</h1>\n<h3>BIM 360 Glue SDK, REST API, and Authentication</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>Hi.\nI just published two articles related to BIM 360 Glue:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">An overview of the SDK components and the REST API.</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">An example of manually authenticating in the REST API using Python.</a>\n</li></li></ul>\n<p>I hope these prove useful not only for BIM 360 Glue specifically, but also to understand how to use REST in general, and what a powerful tool Python and its huge range of libraries can provide, especially for manual experimentation in this area.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "Adding Authentication",
    "local_header_href": "#adding-authentication",
    "chunk_text": "<h4>Adding Authentication</h4><p>So, let's authenticate ourselves:</p><p>Looking at the Glue\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml\">\nweb services API documentation</a> on\n\n<a href=\"https://bim360.autodesk.com/api/doc/doc_api.shtml#createsigned\">\ncreating a signed request</a>,\n\nthis requires some interesting bits and pieces besides the basic information, which consists of\n\n<ul>\n<li>Company id\n<li>API key\n<li>API secret\n</li></li></li></ul>\n<p>The API key and secret need to be requested from Autodesk.\nCurrently, there is no official developer program running for Glue.\nYou can however buy a normal user account and ask for additional developer access based on that.</p>\n<p>As we can see from the documentation, in addition to the API key and secret, plus the normal user account login credentials, the authentication requires a timestamp, more precisely a Unix epoch timestamp using GMT time, the number of seconds since the Unix epoch, January 1 1970 00:00:00 GMT.\n\n<p>The API key and secret are concatenated with the timestamp and encoded using an MD5 cryptographic hash to create a signature, which also has to be sent with the request.</p>\n<a name=\"5\"></a>\n<h4>Timestamp and MD5 Digest</h4>\n<p>Luckily, Python can easily support us in providing the timestamp and signature components.</p>\n<p>The timestamp can be generated like this using the time module:</p>\n<pre>\n<span class=\"blue\">import</span> time\n<span class=\"blue\">def</span> expires():\n  <span class=\"maroon\">'''return a UNIX style timestamp representing 5 minutes from now'''</span>\n  <span class=\"blue\">return int</span>(time.time()+300)\n</pre>\n<p>The Python Standard Library Cryptographic Services includes the MD5 message digest algorithm 'md5', so that is also easily taken care of.\n\n<p>Following the example given in the Glue API documentation, I created the concatenation and digest of the following items:</p>\n<ul>\n<li>API Key: ddbf3f51b3824ecbb824ae4e65d31be4\n<li>API Secret: 12345678901234567890123456789012\n<li>UNIX Timestamp: 1305568169 - (5/16/2011 5:50:36 PM)\n</li></li></li></ul>\n<p>Here is the code doing that by hand, interacting with the interpreted environment:</p>\n<pre>\n&gt;&gt;&gt; key='ddbf3f51b3824ecbb824ae4e65d31be4'\n&gt;&gt;&gt; secret='12345678901234567890123456789012'\n&gt;&gt;&gt; timestamp='1305568169'\n&gt;&gt;&gt; s=key+secret+timestamp\n&gt;&gt;&gt; s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n&gt;&gt;&gt; import md5\n&gt;&gt;&gt; signature=md5.new(s)\n&gt;&gt;&gt; print signature\n&lt;<span class=\"maroon\">md5</span> HASH=\"\" object=\"\" @=\"\" 0x10c0b5d30=\"\"&gt;\n&gt;&gt;&gt; print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n</pre>\n<p>The hexadecimal digest exactly matches the signature string listed in the Glue documentation example, so we seem to be on the right track so far.</p>\n<a name=\"6\"></a>\n<h4>More Login Credentials</h4>\n<p>Studying the documentation further, we end up at the nitty-gritty internals of the\n\n<a href=\"https://bim360.autodesk.com/api/security/v1/login/doc\">\nSecurity Service: Login</a> request,\n\nspecifying the following full list of required parameters:\n\n<ul>\n<li>format\n<li>login_name\n<li>password\n<li>company_id\n<li>api_key\n<li>api_secret\n<li>timestamp\n<li>sig\n</li></li></li></li></li></li></li></li></ul>\n<p>Actually, I intuitively fixed an error or two when transferring this list; e.g. the secret was not mentioned at this point, and the timestamp has a wrong description associated with it.\nSo do what every programmer always has to do: ignore the documentation (but only some of it!), trust your own insight, take everything with a grain of salt, and use your brains, intuition and good taste.</p>\n<p>By the way, the user name and password required here are the Autodesk id single sign-on credentials, also known as SSO, formerly Autodesk unique login or AUL.</p>\n<p>I initially tried to use a GET request and was kindly informed by a suitable error message that I should be using POST instead.</p>\n<a name=\"7\"></a>\n<h4>Successful Authentication</h4>\n<p>I ran into a couple of other not unexpected issues as well, and finally ended up with this method to construct the authentication POST request:</p>\n<pre>\nurl = <span style=\"color:#0000e6; \">'https://bim360.autodesk.com:443/api/security/v1/login.json'</span>\n\n<span style=\"color:#800000; font-weight:bold; \">def</span> bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = <span style=\"color:#e34adc; \">str</span>(<span style=\"color:#e34adc; \">int</span>(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data=<span style=\"color:#800080; \">{</span>\n    <span style=\"color:#0000e6; \">'login_name'</span> : login_name,\n    <span style=\"color:#0000e6; \">'password'</span> : password,\n    <span style=\"color:#0000e6; \">'company_id'</span> : company_id,\n    <span style=\"color:#0000e6; \">'api_key'</span> : api_key,\n    <span style=\"color:#0000e6; \">'api_secret'</span> : api_secret,\n    <span style=\"color:#0000e6; \">'timestamp'</span> : timestamp,\n    <span style=\"color:#0000e6; \">'sig'</span> : sig\n  <span style=\"color:#800080; \">}</span>\n  r = requests.post(url, data=data)\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.status_code\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.headers[<span style=\"color:#0000e6; \">'content-type'</span>]\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.content\n</pre>\n<p>This call succeeds and prints:</p>\n<pre>\n&gt;&gt;&gt; bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n<span style=\"color:#800080; \">{<span style=\"color:#0000e6; \">\"auth_token\"</span>:<span style=\"color:#0000e6; \">\"b61d3ec10a7042cf884806e4e5a55601\"</span>,<span style=\"color:#0000e6; \">\"user_id\"</span>:<span style=\"color:#0000e6; \">\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"</span>}\n</span></pre>\n<p>Again, 200 means OK, i.e. success.\nHooray!</p>\n<p>Cool, huh?</p>\n<p>There may be easier ways to achieve this, but hardly more instructive  :-)</p>\n<p>And as you can see, the interactive Python environment and rich library support really help a lot!</p>\n<p>The resulting code is also pretty succinct, considering we are starting from absolute zero here.</p>\n<p>How long would you have needed to explore and implement this in a compiled environment?</p>\n<!--\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests\n>>> r = requests.get('http://google.com')\n>>> print r\n<Response [200]>\n>>> r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n>>> r.content\n'<!doctype html>\n<html itemscope=\"itemscope\" itemtype=\"http://schema.org/WebPage\">\n<head>\n<meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features...\n\n\n>>> u1='https://bim360.autodesk.com/api/model/v1/info.json'\n>>> r = requests.get(u1)\n>>> print r\n<Response [400]>\n\n\n\n>>> key='ddbf3f51b3824ecbb824ae4e65d31be4'\n>>> secret='12345678901234567890123456789012'\n>>> timestamp='1305568169'\n>>> s=key+secret+timestamp\n>>> s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n>>> import md5\n>>> signature=md5.new(s)\n>>> print signature\n<md5 HASH object @ 0x10c0b5d30>\n>>> print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n\n\nurl = 'https://bim360.autodesk.com:443/api/security/v1/login.json'\n\ndef bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = str(int(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data={\n    'login_name' : login_name,\n    'password' : password,\n    'company_id' : company_id,\n    'api_key' : api_key,\n    'api_secret' : api_secret,\n    'timestamp' : timestamp,\n    'sig' : sig\n  }\n  r = requests.post(url, data=data)\n  print r.status_code\n  print r.headers['content-type']\n  print r.content\n\n\n>>> bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n{\"auth_token\":\"b61d3ec10a7042cf884806e4e5a55601\",\"user_id\":\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"}\n\nhttps://bim360.autodesk.com/api/model/v1/info.json?\n&company_id=autodesk_partner\n&api_key=c7e5c5c49a85421c8444e91733f64774\n&auth_token=f79462fc5a5346ba9dbd4f395781f9b4\n&timestamp=1349801232\n&sig=de4c1771541d4789a1e63762c60b34f1\n&model_id=53c41451-49e7-4b0a-919c-1499604d10c6\n&sterm=\n&pretty=1\n\nparams={\n'company_id' : 'autodesk_partner'\n'api_key' : 'c7e5c5c49a85421c8444e91733f64774'\n'auth_token' : 'f79462fc5a5346ba9dbd4f395781f9b4'\n'timestamp' : '1349801232'\n'sig' : 'de4c1771541d4789a1e63762c60b34f1'\n'model_id' : '53c41451-49e7-4b0a-919c-1499604d10c6'\n'sterm' : ''\n'pretty' : '1'\n}\n\ncompany_id: autodesk_partner\nkey: 47ecb8e052824826836b2c84277d6834\nsecret: 4f0044b4a21d4bf38da1a07d26cb0861\n\nparams={\n  'company_id' : 'autodesk_partner'\n  'api_key' : '47ecb8e052824826836b2c84277d6834'\n  'api_secret' : '4f0044b4a21d4bf38da1a07d26cb0861'\n}\n\nbim_360_glue_authenticate( 'jeremytammik', 'B2n2n222', 'autodesk_partner', '47ecb8e052824826836b2c84277d6834', '4f0044b4a21d4bf38da1a07d26cb0861' )\n\n-->\n<h1>Cloud and Mobile</h1>\n<h3>BIM 360 Glue SDK, REST API, and Authentication</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>Hi.\nI just published two articles related to BIM 360 Glue:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">An overview of the SDK components and the REST API.</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">An example of manually authenticating in the REST API using Python.</a>\n</li></li></ul>\n<p>I hope these prove useful not only for BIM 360 Glue specifically, but also to understand how to use REST in general, and what a powerful tool Python and its huge range of libraries can provide, especially for manual experimentation in this area.\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "Timestamp and MD5 Digest",
    "local_header_href": "#timestamp-and-md5-digest",
    "chunk_text": "<h4>Timestamp and MD5 Digest</h4><p>Luckily, Python can easily support us in providing the timestamp and signature components.</p><p>The timestamp can be generated like this using the time module:</p><pre>\n<span class=\"blue\">import</span> time\n<span class=\"blue\">def</span> expires():\n  <span class=\"maroon\">'''return a UNIX style timestamp representing 5 minutes from now'''</span>\n  <span class=\"blue\">return int</span>(time.time()+300)\n</pre><p>The Python Standard Library Cryptographic Services includes the MD5 message digest algorithm 'md5', so that is also easily taken care of.\n\n<p>Following the example given in the Glue API documentation, I created the concatenation and digest of the following items:</p>\n<ul>\n<li>API Key: ddbf3f51b3824ecbb824ae4e65d31be4\n<li>API Secret: 12345678901234567890123456789012\n<li>UNIX Timestamp: 1305568169 - (5/16/2011 5:50:36 PM)\n</li></li></li></ul>\n<p>Here is the code doing that by hand, interacting with the interpreted environment:</p>\n<pre>\n&gt;&gt;&gt; key='ddbf3f51b3824ecbb824ae4e65d31be4'\n&gt;&gt;&gt; secret='12345678901234567890123456789012'\n&gt;&gt;&gt; timestamp='1305568169'\n&gt;&gt;&gt; s=key+secret+timestamp\n&gt;&gt;&gt; s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n&gt;&gt;&gt; import md5\n&gt;&gt;&gt; signature=md5.new(s)\n&gt;&gt;&gt; print signature\n&lt;<span class=\"maroon\">md5</span> HASH=\"\" object=\"\" @=\"\" 0x10c0b5d30=\"\"&gt;\n&gt;&gt;&gt; print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n</pre>\n<p>The hexadecimal digest exactly matches the signature string listed in the Glue documentation example, so we seem to be on the right track so far.</p>\n<a name=\"6\"></a>\n<h4>More Login Credentials</h4>\n<p>Studying the documentation further, we end up at the nitty-gritty internals of the\n\n<a href=\"https://bim360.autodesk.com/api/security/v1/login/doc\">\nSecurity Service: Login</a> request,\n\nspecifying the following full list of required parameters:\n\n<ul>\n<li>format\n<li>login_name\n<li>password\n<li>company_id\n<li>api_key\n<li>api_secret\n<li>timestamp\n<li>sig\n</li></li></li></li></li></li></li></li></ul>\n<p>Actually, I intuitively fixed an error or two when transferring this list; e.g. the secret was not mentioned at this point, and the timestamp has a wrong description associated with it.\nSo do what every programmer always has to do: ignore the documentation (but only some of it!), trust your own insight, take everything with a grain of salt, and use your brains, intuition and good taste.</p>\n<p>By the way, the user name and password required here are the Autodesk id single sign-on credentials, also known as SSO, formerly Autodesk unique login or AUL.</p>\n<p>I initially tried to use a GET request and was kindly informed by a suitable error message that I should be using POST instead.</p>\n<a name=\"7\"></a>\n<h4>Successful Authentication</h4>\n<p>I ran into a couple of other not unexpected issues as well, and finally ended up with this method to construct the authentication POST request:</p>\n<pre>\nurl = <span style=\"color:#0000e6; \">'https://bim360.autodesk.com:443/api/security/v1/login.json'</span>\n\n<span style=\"color:#800000; font-weight:bold; \">def</span> bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = <span style=\"color:#e34adc; \">str</span>(<span style=\"color:#e34adc; \">int</span>(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data=<span style=\"color:#800080; \">{</span>\n    <span style=\"color:#0000e6; \">'login_name'</span> : login_name,\n    <span style=\"color:#0000e6; \">'password'</span> : password,\n    <span style=\"color:#0000e6; \">'company_id'</span> : company_id,\n    <span style=\"color:#0000e6; \">'api_key'</span> : api_key,\n    <span style=\"color:#0000e6; \">'api_secret'</span> : api_secret,\n    <span style=\"color:#0000e6; \">'timestamp'</span> : timestamp,\n    <span style=\"color:#0000e6; \">'sig'</span> : sig\n  <span style=\"color:#800080; \">}</span>\n  r = requests.post(url, data=data)\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.status_code\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.headers[<span style=\"color:#0000e6; \">'content-type'</span>]\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.content\n</pre>\n<p>This call succeeds and prints:</p>\n<pre>\n&gt;&gt;&gt; bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n<span style=\"color:#800080; \">{<span style=\"color:#0000e6; \">\"auth_token\"</span>:<span style=\"color:#0000e6; \">\"b61d3ec10a7042cf884806e4e5a55601\"</span>,<span style=\"color:#0000e6; \">\"user_id\"</span>:<span style=\"color:#0000e6; \">\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"</span>}\n</span></pre>\n<p>Again, 200 means OK, i.e. success.\nHooray!</p>\n<p>Cool, huh?</p>\n<p>There may be easier ways to achieve this, but hardly more instructive  :-)</p>\n<p>And as you can see, the interactive Python environment and rich library support really help a lot!</p>\n<p>The resulting code is also pretty succinct, considering we are starting from absolute zero here.</p>\n<p>How long would you have needed to explore and implement this in a compiled environment?</p>\n<!--\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests\n>>> r = requests.get('http://google.com')\n>>> print r\n<Response [200]>\n>>> r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n>>> r.content\n'<!doctype html>\n<html itemscope=\"itemscope\" itemtype=\"http://schema.org/WebPage\">\n<head>\n<meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features...\n\n\n>>> u1='https://bim360.autodesk.com/api/model/v1/info.json'\n>>> r = requests.get(u1)\n>>> print r\n<Response [400]>\n\n\n\n>>> key='ddbf3f51b3824ecbb824ae4e65d31be4'\n>>> secret='12345678901234567890123456789012'\n>>> timestamp='1305568169'\n>>> s=key+secret+timestamp\n>>> s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n>>> import md5\n>>> signature=md5.new(s)\n>>> print signature\n<md5 HASH object @ 0x10c0b5d30>\n>>> print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n\n\nurl = 'https://bim360.autodesk.com:443/api/security/v1/login.json'\n\ndef bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = str(int(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data={\n    'login_name' : login_name,\n    'password' : password,\n    'company_id' : company_id,\n    'api_key' : api_key,\n    'api_secret' : api_secret,\n    'timestamp' : timestamp,\n    'sig' : sig\n  }\n  r = requests.post(url, data=data)\n  print r.status_code\n  print r.headers['content-type']\n  print r.content\n\n\n>>> bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n{\"auth_token\":\"b61d3ec10a7042cf884806e4e5a55601\",\"user_id\":\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"}\n\nhttps://bim360.autodesk.com/api/model/v1/info.json?\n&company_id=autodesk_partner\n&api_key=c7e5c5c49a85421c8444e91733f64774\n&auth_token=f79462fc5a5346ba9dbd4f395781f9b4\n&timestamp=1349801232\n&sig=de4c1771541d4789a1e63762c60b34f1\n&model_id=53c41451-49e7-4b0a-919c-1499604d10c6\n&sterm=\n&pretty=1\n\nparams={\n'company_id' : 'autodesk_partner'\n'api_key' : 'c7e5c5c49a85421c8444e91733f64774'\n'auth_token' : 'f79462fc5a5346ba9dbd4f395781f9b4'\n'timestamp' : '1349801232'\n'sig' : 'de4c1771541d4789a1e63762c60b34f1'\n'model_id' : '53c41451-49e7-4b0a-919c-1499604d10c6'\n'sterm' : ''\n'pretty' : '1'\n}\n\ncompany_id: autodesk_partner\nkey: 47ecb8e052824826836b2c84277d6834\nsecret: 4f0044b4a21d4bf38da1a07d26cb0861\n\nparams={\n  'company_id' : 'autodesk_partner'\n  'api_key' : '47ecb8e052824826836b2c84277d6834'\n  'api_secret' : '4f0044b4a21d4bf38da1a07d26cb0861'\n}\n\nbim_360_glue_authenticate( 'jeremytammik', 'B2n2n222', 'autodesk_partner', '47ecb8e052824826836b2c84277d6834', '4f0044b4a21d4bf38da1a07d26cb0861' )\n\n-->\n<h1>Cloud and Mobile</h1>\n<h3>BIM 360 Glue SDK, REST API, and Authentication</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>Hi.\nI just published two articles related to BIM 360 Glue:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">An overview of the SDK components and the REST API.</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">An example of manually authenticating in the REST API using Python.</a>\n</li></li></ul>\n<p>I hope these prove useful not only for BIM 360 Glue specifically, but also to understand how to use REST in general, and what a powerful tool Python and its huge range of libraries can provide, especially for manual experimentation in this area.\n</p></p></p></p>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "More Login Credentials",
    "local_header_href": "#more-login-credentials",
    "chunk_text": "<h4>More Login Credentials</h4><p>Studying the documentation further, we end up at the nitty-gritty internals of the\n\n<a href=\"https://bim360.autodesk.com/api/security/v1/login/doc\">\nSecurity Service: Login</a> request,\n\nspecifying the following full list of required parameters:\n\n<ul>\n<li>format\n<li>login_name\n<li>password\n<li>company_id\n<li>api_key\n<li>api_secret\n<li>timestamp\n<li>sig\n</li></li></li></li></li></li></li></li></ul>\n<p>Actually, I intuitively fixed an error or two when transferring this list; e.g. the secret was not mentioned at this point, and the timestamp has a wrong description associated with it.\nSo do what every programmer always has to do: ignore the documentation (but only some of it!), trust your own insight, take everything with a grain of salt, and use your brains, intuition and good taste.</p>\n<p>By the way, the user name and password required here are the Autodesk id single sign-on credentials, also known as SSO, formerly Autodesk unique login or AUL.</p>\n<p>I initially tried to use a GET request and was kindly informed by a suitable error message that I should be using POST instead.</p>\n<a name=\"7\"></a>\n<h4>Successful Authentication</h4>\n<p>I ran into a couple of other not unexpected issues as well, and finally ended up with this method to construct the authentication POST request:</p>\n<pre>\nurl = <span style=\"color:#0000e6; \">'https://bim360.autodesk.com:443/api/security/v1/login.json'</span>\n\n<span style=\"color:#800000; font-weight:bold; \">def</span> bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = <span style=\"color:#e34adc; \">str</span>(<span style=\"color:#e34adc; \">int</span>(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data=<span style=\"color:#800080; \">{</span>\n    <span style=\"color:#0000e6; \">'login_name'</span> : login_name,\n    <span style=\"color:#0000e6; \">'password'</span> : password,\n    <span style=\"color:#0000e6; \">'company_id'</span> : company_id,\n    <span style=\"color:#0000e6; \">'api_key'</span> : api_key,\n    <span style=\"color:#0000e6; \">'api_secret'</span> : api_secret,\n    <span style=\"color:#0000e6; \">'timestamp'</span> : timestamp,\n    <span style=\"color:#0000e6; \">'sig'</span> : sig\n  <span style=\"color:#800080; \">}</span>\n  r = requests.post(url, data=data)\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.status_code\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.headers[<span style=\"color:#0000e6; \">'content-type'</span>]\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.content\n</pre>\n<p>This call succeeds and prints:</p>\n<pre>\n&gt;&gt;&gt; bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n<span style=\"color:#800080; \">{<span style=\"color:#0000e6; \">\"auth_token\"</span>:<span style=\"color:#0000e6; \">\"b61d3ec10a7042cf884806e4e5a55601\"</span>,<span style=\"color:#0000e6; \">\"user_id\"</span>:<span style=\"color:#0000e6; \">\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"</span>}\n</span></pre>\n<p>Again, 200 means OK, i.e. success.\nHooray!</p>\n<p>Cool, huh?</p>\n<p>There may be easier ways to achieve this, but hardly more instructive  :-)</p>\n<p>And as you can see, the interactive Python environment and rich library support really help a lot!</p>\n<p>The resulting code is also pretty succinct, considering we are starting from absolute zero here.</p>\n<p>How long would you have needed to explore and implement this in a compiled environment?</p>\n<!--\n$ python\nPython 2.7.2 (default, Jun 20 2012, 16:23:33)\n[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import requests\n>>> r = requests.get('http://google.com')\n>>> print r\n<Response [200]>\n>>> r.headers['content-type']\n'text/html; charset=ISO-8859-1'\n>>> r.content\n'<!doctype html>\n<html itemscope=\"itemscope\" itemtype=\"http://schema.org/WebPage\">\n<head>\n<meta content=\"Search the world\\'s information, including webpages, images, videos and more. Google has many special features...\n\n\n>>> u1='https://bim360.autodesk.com/api/model/v1/info.json'\n>>> r = requests.get(u1)\n>>> print r\n<Response [400]>\n\n\n\n>>> key='ddbf3f51b3824ecbb824ae4e65d31be4'\n>>> secret='12345678901234567890123456789012'\n>>> timestamp='1305568169'\n>>> s=key+secret+timestamp\n>>> s\n'ddbf3f51b3824ecbb824ae4e65d31be4123456789012345678901234567890121305568169'\n>>> import md5\n>>> signature=md5.new(s)\n>>> print signature\n<md5 HASH object @ 0x10c0b5d30>\n>>> print signature.hexdigest()\nb3298cf0b4dc88450d00773b4449ba51\n\n\nurl = 'https://bim360.autodesk.com:443/api/security/v1/login.json'\n\ndef bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = str(int(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data={\n    'login_name' : login_name,\n    'password' : password,\n    'company_id' : company_id,\n    'api_key' : api_key,\n    'api_secret' : api_secret,\n    'timestamp' : timestamp,\n    'sig' : sig\n  }\n  r = requests.post(url, data=data)\n  print r.status_code\n  print r.headers['content-type']\n  print r.content\n\n\n>>> bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n{\"auth_token\":\"b61d3ec10a7042cf884806e4e5a55601\",\"user_id\":\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"}\n\nhttps://bim360.autodesk.com/api/model/v1/info.json?\n&company_id=autodesk_partner\n&api_key=c7e5c5c49a85421c8444e91733f64774\n&auth_token=f79462fc5a5346ba9dbd4f395781f9b4\n&timestamp=1349801232\n&sig=de4c1771541d4789a1e63762c60b34f1\n&model_id=53c41451-49e7-4b0a-919c-1499604d10c6\n&sterm=\n&pretty=1\n\nparams={\n'company_id' : 'autodesk_partner'\n'api_key' : 'c7e5c5c49a85421c8444e91733f64774'\n'auth_token' : 'f79462fc5a5346ba9dbd4f395781f9b4'\n'timestamp' : '1349801232'\n'sig' : 'de4c1771541d4789a1e63762c60b34f1'\n'model_id' : '53c41451-49e7-4b0a-919c-1499604d10c6'\n'sterm' : ''\n'pretty' : '1'\n}\n\ncompany_id: autodesk_partner\nkey: 47ecb8e052824826836b2c84277d6834\nsecret: 4f0044b4a21d4bf38da1a07d26cb0861\n\nparams={\n  'company_id' : 'autodesk_partner'\n  'api_key' : '47ecb8e052824826836b2c84277d6834'\n  'api_secret' : '4f0044b4a21d4bf38da1a07d26cb0861'\n}\n\nbim_360_glue_authenticate( 'jeremytammik', 'B2n2n222', 'autodesk_partner', '47ecb8e052824826836b2c84277d6834', '4f0044b4a21d4bf38da1a07d26cb0861' )\n\n-->\n<h1>Cloud and Mobile</h1>\n<h3>BIM 360 Glue SDK, REST API, and Authentication</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>Hi.\nI just published two articles related to BIM 360 Glue:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">An overview of the SDK components and the REST API.</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">An example of manually authenticating in the REST API using Python.</a>\n</li></li></ul>\n<p>I hope these prove useful not only for BIM 360 Glue specifically, but also to understand how to use REST in general, and what a powerful tool Python and its huge range of libraries can provide, especially for manual experimentation in this area.\n</p></p></p>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "Successful Authentication",
    "local_header_href": "#successful-authentication",
    "chunk_text": "<h4>Successful Authentication</h4><p>I ran into a couple of other not unexpected issues as well, and finally ended up with this method to construct the authentication POST request:</p><pre>\nurl = <span style=\"color:#0000e6; \">'https://bim360.autodesk.com:443/api/security/v1/login.json'</span>\n\n<span style=\"color:#800000; font-weight:bold; \">def</span> bim_360_glue_authenticate( login_name, password, company_id, api_key, api_secret ):\n  timestamp = <span style=\"color:#e34adc; \">str</span>(<span style=\"color:#e34adc; \">int</span>(time.time()))\n  sig=md5.new(api_key + api_secret + timestamp).hexdigest()\n  data=<span style=\"color:#800080; \">{</span>\n    <span style=\"color:#0000e6; \">'login_name'</span> : login_name,\n    <span style=\"color:#0000e6; \">'password'</span> : password,\n    <span style=\"color:#0000e6; \">'company_id'</span> : company_id,\n    <span style=\"color:#0000e6; \">'api_key'</span> : api_key,\n    <span style=\"color:#0000e6; \">'api_secret'</span> : api_secret,\n    <span style=\"color:#0000e6; \">'timestamp'</span> : timestamp,\n    <span style=\"color:#0000e6; \">'sig'</span> : sig\n  <span style=\"color:#800080; \">}</span>\n  r = requests.post(url, data=data)\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.status_code\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.headers[<span style=\"color:#0000e6; \">'content-type'</span>]\n  <span style=\"color:#800000; font-weight:bold; \">print</span> r.content\n</pre><p>This call succeeds and prints:</p><pre>\n&gt;&gt;&gt; bim_360_glue_authenticate( ... )\n200\napplication/json; charset=UTF-8;\n<span style=\"color:#800080; \">{<span style=\"color:#0000e6; \">\"auth_token\"</span>:<span style=\"color:#0000e6; \">\"b61d3ec10a7042cf884806e4e5a55601\"</span>,<span style=\"color:#0000e6; \">\"user_id\"</span>:<span style=\"color:#0000e6; \">\"b2409a28-08b4-4bd4-a935-a6e33d5b030d\"</span>}\n</span></pre><p>Again, 200 means OK, i.e. success.\nHooray!</p><p>Cool, huh?</p><p>There may be easier ways to achieve this, but hardly more instructive  :-)</p><p>And as you can see, the interactive Python environment and rich library support really help a lot!</p><p>The resulting code is also pretty succinct, considering we are starting from absolute zero here.</p><p>How long would you have needed to explore and implement this in a compiled environment?</p>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "Cloud and Mobile",
    "local_header_href": "#cloud-and-mobile",
    "chunk_text": "<h1>Cloud and Mobile</h1>"
  },
  {
    "original_filename": "0870_py_rest_glue",
    "header_text": "BIM 360 Glue SDK, REST API, and Authentication",
    "local_header_href": "#bim-360-glue-sdk-rest-api-and-authentication",
    "chunk_text": "<h3>BIM 360 Glue SDK, REST API, and Authentication</h3><p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p><p>Hi.\nI just published two articles related to BIM 360 Glue:\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">An overview of the SDK components and the REST API.</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">An example of manually authenticating in the REST API using Python.</a>\n</li></li></ul>\n<p>I hope these prove useful not only for BIM 360 Glue specifically, but also to understand how to use REST in general, and what a powerful tool Python and its huge range of libraries can provide, especially for manual experimentation in this area.\n</p></p>"
  }
]