[
  {
    "original_filename": "1821_dupl_legend_comp",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\n- python conversion of latitude and longitude to real-world metres\n\n- https://thebuildingcoder.typepad.com/blog/2010/05/duplicate-legend-component.html#comment-4752201924\n\ntwitter:\n\nConverting latitude and longitude to metres, UIFrameworkService utility methods and duplicating legend components in Python in the #RevitAPI #DynamoBim @AutodeskForge @AutodeskRevit #bim #ForgeDevCon http://bit.ly/latlongtometres\n\nToday, we discuss duplicating legend components in Python, my own non-API Python work and some undocumented utility methods\n&ndash; Duplicate legend component in Python\n&ndash; Convert latitude and longitude to metres in Python\n&ndash; UIFrameworkService utility methods\n&ndash; Exceptions should be exceptional...\n\nlinkedin:\n\nConverting latitude and longitude to metres, UIFrameworkService utility methods and duplicating legend components in Python in the #RevitAPI\n\nhttp://bit.ly/latlongtometres\n\nToday, we discuss duplicating legend components in Python, my own non-API Python work and some undocumented utility methods:\n\n- Duplicate legend component in Python\n- Convert latitude and longitude to metres in Python\n- UIFrameworkService utility methods\n- Exceptions should be exceptional...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"100\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1821_dupl_legend_comp",
    "header_text": "Lat Long to Metres and Duplicate Legend Component",
    "local_header_href": "#lat-long-to-metres-and-duplicate-legend-component",
    "chunk_text": "### Lat Long to Metres and Duplicate Legend Component\n\nToday, we discuss duplicating legend components in Python, my own non-API Python work and some undocumented utility methods:\n\n- [Duplicate legend component in Python](#2)\n- [Convert latitude and longitude to metres in Python](#3)\n- [UIFrameworkService utility methods](#4)\n\nBefore diving into that, here is yet another interesting discussion related to the frequently repeated advice that exceptions should be exceptional:\n\n- [Result object vs throwing exceptions](https://softwareengineering.stackexchange.com/questions/405038/result-object-vs-throwing-exceptions)"
  },
  {
    "original_filename": "1821_dupl_legend_comp",
    "header_text": "<a name=\"2\"></a>Duplicate Legend Component in Python",
    "local_header_href": "#a-name2aduplicate-legend-component-in-python",
    "chunk_text": "#### <a name=\"2\"></a>Duplicate Legend Component in Python\n\nIn a [comment](https://thebuildingcoder.typepad.com/blog/2010/05/duplicate-legend-component.html#comment-4752201924) on\nthe workaround to [duplicate a legend component](https://thebuildingcoder.typepad.com/blog/2010/05/duplicate-legend-component.html),\nOliwer Kulpa demonstrates how to set the `LEGEND_COMPONENT` built-in parameter after copying a legend component:\n\n**Question:** Any news about this Legend Component API?\nIs there any way I can at least do a Symbol Swap inside the Legend View?\n\nI'm trying the following code:\n\n<pre class=\"code\">\n&nbsp;&nbsp;element1.get_Parameter(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.LEGEND_COMPONENT&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Set(&nbsp;element2.Id&nbsp;);\n</pre>\n\nHowever, that produces an error saying, *The component you have selected is not visible in the selected view.*\n\n**Solution:** I found out that you need to feed `FamilyType.Id` when setting up a copied legend component:\n\n<pre class=\"code\">\n&nbsp;&nbsp;CopiedLegendComponent.get_Parameter(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.LEGEND_COMPONENT&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Set(&nbsp;<span style=\"color:#2b91af;\">FamilyType</span>.Id&nbsp;)\n</pre>\n\nIt worked for me!\n\nSince it is a part of a larger Python Script in Dynamo, I've extracted the following code fragment which works on a legend view with one single legend component.\n\nI hope it is readable enough for everyone:\n\n<pre class=\"prettyprint\">\n  doc = DocumentManager.Instance.CurrentDBDocument\n  current_view = doc.ActiveView\n  \n  # Get legend component in current view\n  \n  existing_legend_component = FilteredElementCollector(\n    doc, doc.ActiveView.Id)\n      .OfCategory(BuiltInCategory.OST_LegendComponents)\n      .FirstElement()\n  \n  # Get door family type id\n  \n  door_family_type = FilteredElementCollector(doc)\n    .OfCategory(BuiltInCategory.OST_Doors)\n    .WhereElementIsElementType()\n    .FirstElement()\n  \n  # Start Transaction\n  \n  TransactionManager.Instance.EnsureInTransaction(doc)\n  \n  # Copy legend and set new Id to represent new element\n  \n  new_legend_component = ElementTransformUtils\n    .CopyElement(doc, existing_legend_component.Id,\n      XYZ(10, 0,0))\n  \n  # The result of CopyElement is a list of Ids,\n  # so fetch the first element from copied elements\n  \n  doc.GetElement(new_legend_component[0])\n    .get_Parameter(BuiltInParameter.LEGEND_COMPONENT)\n    .Set(door_family_type.Id)\n  \n  doc.Regenerate()\n  \n  # End Transaction\n  \n  TransactionManager.Instance.TransactionTaskDone()\n</pre>\n\nHere is a picture of the result of copying a window legend component and setting it to a door family type:\n\n<center>\n<img src=\"img/duplicate_legend_component.png\" alt=\"Duplicate legend component\" title=\"Duplicate legend component\" width=\"450\"/> <!-- 900 -->\n</center>\n\nMany thanks to Oliwer for sharing this useful discovery."
  },
  {
    "original_filename": "1821_dupl_legend_comp",
    "header_text": "<a name=\"3\"></a>Convert Latitude and Longitude to Metres in Python",
    "local_header_href": "#a-name3aconvert-latitude-and-longitude-to-metres-in-python",
    "chunk_text": "#### <a name=\"3\"></a>Convert Latitude and Longitude to Metres in Python\n\nI fiddled around a bit with Python myself last week to convert latitude and longitude values to real-world length in order to verify their validity.\n\nI tried three different conversion methods and compared their results to the expected property border edge lengths.\n\nThe results are preserved and presented in the [geolocation_waldrain GitHub repository](https://github.com/jeremytammik/geolocation_waldrain).\n\nTo begin with, I had six unconfirmed latitude and longitude coordinates for the six corner points of the plot.\n\nI also had pretty precise edge length and area measurements in metres:\n\n<center>\n<img src=\"img/edge_lengths.png\" alt=\"Edge lengths\" title=\"Edge lengths\" width=\"300\"/> <!-- 150 -->\n</center>\n\nThat leads to the following data:\n\n<pre>\n  pts = [\n    [47.61240287934088,7.668455564143808],\n    [47.61238603493116,7.66886803694362],\n    [47.61227235282722,7.668805013356426],\n    [47.612081232450755,7.668710772100395],\n    [47.61209766306042,7.668317607008359],\n    [47.612263038360155,7.668392271613928]]\n  \n  tags = ['NW','NO','OM','SO','SW','WM']\n  \n  edge_length = [ # in metres\n    31.10, # Nord\n    13.34, 22.51, # Ost\n    29.63, # Sued\n    19.26, 16.24 ] # West\n  \n  area = 1043 # square metres\n</pre>\n\nI found a couple of articles describing how to calculate the distance in metres between two points given their latitude and longitude.\n\nThe simplest suggestion is to apply the [Haversine formula](https://en.wikipedia.org/wiki/Haversine_formula), assuming that the Earth is a sphere with a circumference of 40075 km.\nIn that case, the length in meters of 1 degree of latitude is always 111.32 km, and the length in meters of 1 degree of longitude equals `40075 km * cos( latitude ) / 360`.\n\nMore precise calculations are suggested by the following three articles:\n\n1. [How to convert latitude or longitude to meters?](https://stackoverflow.com/questions/639695/how-to-convert-latitude-or-longitude-to-meters)\n<br/>&rarr; [Calculate distance, bearing and more between Latitude/Longitude points](http://www.movable-type.co.uk/scripts/latlong.html)\n2. [How to convert latitude or longitude to meters?](https://stackoverflow.com/questions/639695/how-to-convert-latitude-or-longitude-to-meters)\n<br/>&rarr; Solution suggested in Wikipedia on the [geographic coordinate system](https://en.wikipedia.org/wiki/Geographic_coordinate_system)\n3. [Understanding terms in Length of Degree formula](https://gis.stackexchange.com/questions/75528/understanding-terms-in-length-of-degree-formula/75535#75535)\n\nHere is the result of calculating the distances between along the edges between the six given points and comparing with the given edge lengths:\n\n<pre>\nEdge    | Given | 1.            | 2.            | 3.\nNW - NO | 31.10 | 31.01 (-0.09) | 30.96 (-0.14) | 31.07 (-0.03)\nNO - OM | 13.34 | 13.38 (+0.04) | 13.36 (+0.02) | 13.37 (+0.03)\nOM - SO | 22.51 | 22.55 (+0.04) | 22.52 (+0.01) | 22.53 (+0.02)\nSO - SW | 29.63 | 29.56 (-0.07) | 29.51 (-0.12) | 29.62 (-0.01)\nSW - WM | 19.26 | 19.24 (-0.02) | 19.22 (-0.04) | 19.23 (-0.03)\nWM - NW | 16.24 | 16.28 (+0.04) | 16.25 (+0.01) | 16.26 (+0.02)\n</pre>\n\nThe third algorithm seems to return the most precise results, assuming the given points and edge distances are correct to start with.\n\nNext, I used the metre-based X and Y coordinates produced by the third algorithm to also calculate the area and compare that with the expected result.\n\nI tweaked the original latitude and longitude coordinates a bit to reduce the errors, even though I am not sure whether they stem from the coordinates or my processing.\n\nThe full report after adding that looks like this:\n\n<pre>\n6 points:\n  NW [47.61240288, 7.66845556]\n  NO [47.6123859, 7.6688685]\n  OM [47.61227361, 7.66880501]\n  SO [47.6120811, 7.6687109]\n  SW [47.6120972, 7.66831761]\n  WM [47.612263, 7.66839227]\ncentre point:\n  [47.612250614999994, 7.668591641666667]\nedge lengths:\n  NW - NO: 31.10 31.05 (-0.05) 30.99 (-0.11) 31.10 (+0.00)\n  NO - OM: 13.34 13.38 (+0.04) 13.36 (+0.02) 13.37 (+0.03)\n  OM - SO: 22.51 22.56 (+0.05) 22.54 (+0.03) 22.54 (+0.03)\n  SO - SW: 29.63 29.57 (-0.06) 29.52 (-0.11) 29.62 (-0.01)\n  SW - WM: 19.26 19.29 (+0.03) 19.26 (+0.00) 19.27 (+0.01)\n  WM - NW: 16.24 16.28 (+0.04) 16.26 (+0.02) 16.26 (+0.02)\narea calculated:\n  1042.28 (error -0.72)\n</pre>\n\nFor the complete source code, please refer to the [geolocation_waldrain GitHub repository](https://github.com/jeremytammik/geolocation_waldrain)."
  },
  {
    "original_filename": "1821_dupl_legend_comp",
    "header_text": "<a name=\"4\"></a>UIFrameworkService Utility Methods",
    "local_header_href": "#a-name4auiframeworkservice-utility-methods",
    "chunk_text": "#### <a name=\"4\"></a>UIFrameworkService Utility Methods\n\nWhile writing the above, I also conversed with Kennan Chen of Shanghai\non [getting notified when a family type is about to be placed](https://forums.autodesk.com/t5/revit-api-forum/get-notified-when-a-family-type-is-about-to-place/m-p/9327282).\n\nHe pointed out some interesting functionality that I was previously unaware of in UIFrameworkServices.dll:\n\n**Question:** Is an event which can notify when Revit is about to place a family type?\n\nThere are events like `Application` `FamilyLoadedIntoDocument` and `FamilyLoadingIntoDocument`.\n\nIs it possible to have another event `FamilyTypePlacingIntoDocument` for this?\n\nOr is there a workaround?\n\n**Answer:** As recently discussed, you\ncan [use the DocumentChanged event to detect the launching of a command](https://thebuildingcoder.typepad.com/blog/2020/01/torsion-tools-command-event-and-info-in-da4r.html#3).\n\n**Response:** It works great to catch the placing FamilyType event triggered by placing type directly from Revit UI.\n\nThe code I use:\n\n<pre class=\"code\">\n  <span style=\"color:blue;\">void</span>&nbsp;Application_DocumentChanged(\n  &nbsp;&nbsp;<span style=\"color:blue;\">object</span>&nbsp;sender,\n  &nbsp;&nbsp;DocumentChangedEventArgs&nbsp;e&nbsp;)\n  {\n  &nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;transactionName&nbsp;=&nbsp;e.GetTransactionNames()\n  &nbsp;&nbsp;&nbsp;&nbsp;.FirstOrDefault();\n   \n  &nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;transactionName&nbsp;==&nbsp;<span style=\"color:#a31515;\">&quot;Modify&nbsp;element&nbsp;attributes&quot;</span>&nbsp;)\n  &nbsp;&nbsp;{\n  &nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//element&nbsp;placing</span>\n  &nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;id&nbsp;=&nbsp;UIFrameworkServices.<span style=\"color:#2b91af;\">TypeSelectorService</span>\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getCurrentTypeId();\n   \n  &nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;id&nbsp;&gt;&nbsp;0&nbsp;)\n  &nbsp;&nbsp;&nbsp;&nbsp;{\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;elementId&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(&nbsp;id&nbsp;);\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;document&nbsp;=&nbsp;e.GetDocument();\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;document.GetElement(&nbsp;elementId&nbsp;)&nbsp;\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">FamilySymbol</span>&nbsp;familySymbol&nbsp;)\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//Do&nbsp;something&nbsp;with&nbsp;the&nbsp;placing&nbsp;FamilySymbol</span>\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Console</span>.WriteLine(&nbsp;familySymbol.Name&nbsp;);\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n  &nbsp;&nbsp;&nbsp;&nbsp;}\n  &nbsp;&nbsp;}\n  }\n</pre>\n\nBut when the placing event is triggered by `UIDocument` `PostRequestForElementTypePlacement` or `PromptForFamilyInstancePlacement`, the call UIFrameworkService.TypeSelectorServce.getCurrentTypeId() fails to return the currently placed type.\n\nI also noticed that the Properties panel didn't refresh in this scenario. I guess that's the reason.\n\nIs there another way to get the currently placing type?\n\n`UIFrameworkService` is provided by a managed DLL in the Revit root folder, like RevitAPI.dll.\n\nI decompiled it and found that method.\n\nI guess this library is used by the Revit UI to interact with Revit native runtime.\n\nThe DLL name is UIFrameworkServices.dll\n\nSome other useful method examples:\n\n- I use `QuickAccessToolBarService` `performMultipleUndoRedoOperations` to support undo operation in my own plugin.\n- I use `UIFrameworkService` `KeyboardShortcutService` `applyShortcutChanges` to support assigning keyboard shortcuts to custom ribbon items."
  }
]