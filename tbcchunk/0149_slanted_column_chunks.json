[
  {
    "original_filename": "0149_slanted_column",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0149_slanted_column",
    "header_text": "Creating a Slanted Column",
    "local_header_href": "#creating-a-slanted-column",
    "chunk_text": "<h3>Creating a Slanted Column</h3><p>We already discussed the creation of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-beam.html\">\nbeam</a>\n\nand \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-column.html\">\ncolumn instances </a>\n\nin previous posts.\nIn that post on the beam insertion, we explore setting arbitrary start and end points, but the column is left in its default vertical alignment.\nHere is a question specifically targeted at the creation of slanted structural columns handled recently by our DevTech AEC workgroup leader Mikako Harada:</p><p><strong>Question:</strong>\nI cannot find any help to explain how to create a slanted column through the API. \nPlease explain the process required, i.e.</p><ul>\n<li>Which NewFamilyInstance method should I use? \n<li>Will the parameter be automatically set to Slanted, or will I need to force it after creating the object. \n<li>If I need to change an existing vertical column to slanted, how do I do that? \n<li>Can I change the location from a point to a line?\n</li></li></li></li></ul><p><strong>Answer:</strong>\nThe first place to look for information about the various overloads of NewFamilyInstance and related methods in the Revit API is the developer guide included with the Revit SDK:</p><ul>\n<li>Filename Revit 2010 API Developer Guide.pdf.\n<li>Section 10.3.5: Creating FamilyInstance Objects.\n<li>Table 28: Options for creating instance with NewFamilyInstance().\n<li>Table 29: Options for creating instances with other methods.\n</li></li></li></li></ul><p>The developer guide does not explain how to insert a slanted column, however.\nFor that, you have two options: the easiest way to go is to use the NewFamilyInstance overload taking the four arguments Curve, FamilySymbol, Level, and StructuralType. \nThis will allow you to directly create a slanted column. \nIt will place a column with a SlantedOrVerticalColumnType equal to CT_EndPoint.</p><p>The other approach is explicit, appears more complex, illustrates what is going on behind the scenes, and also demonstrates which parameters and properties need to be modified to create a slanted column:</p><p>You can use the same method to create both vertical and slanted columns.\nOnce the column has been created, you can change its 'Slanted Column Type' property using the built-in parameter SLANTED_COLUMN_TYPE_PARAM. \nYou can set it to SlantedOrVerticalColumnType CT_EndPoint, CT_Angle, or CT_Vertical. \nOnce you set the column to a slanted type, the location property becomes a curve, which you can use to set its start and end points.\nHere is a snippet of sample code to achieve these steps:</p><pre class=\"code\">\n<span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute( _\n    <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> ExternalCommandData, _\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>, _\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> ElementSet) _\n<span class=\"blue\">As</span> IExternalCommand.Result _\n<span class=\"blue\">Implements</span> IExternalCommand.Execute\n \n    <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> Application = commandData.Application\n    <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> Document = app.ActiveDocument\n \n    <span class=\"green\">'' you may want to use your own function </span>\n    <span class=\"green\">'' to find these values in your context. </span>\n    <span class=\"blue\">Dim</span> beamType <span class=\"blue\">As</span> FamilySymbol = findSymbol(app)\n    <span class=\"blue\">Dim</span> topLevel <span class=\"blue\">As</span> Level = findLevel(app)\n \n    <span class=\"blue\">Dim</span> startPoint <span class=\"blue\">As</span> <span class=\"blue\">New</span> XYZ(0.0, 0.0, 0.0)\n    <span class=\"blue\">Dim</span> endPoint <span class=\"blue\">As</span> <span class=\"blue\">New</span> XYZ(100.0, 100.0, 100.0)\n \n    <span class=\"blue\">Dim</span> structuralType <span class=\"blue\">As</span> StructuralType = StructuralType.Column\n \n    <span class=\"green\">'' create a coluemn as normal.</span>\n    <span class=\"green\">'' at this point, column is vertical. </span>\n    <span class=\"blue\">Dim</span> strElem <span class=\"blue\">As</span> FamilyInstance = doc.Create.NewFamilyInstance( _\n        startPoint, beamType, topLevel, structuralType)\n \n    <span class=\"green\">'' set the property to a slanted column </span>\n    <span class=\"blue\">Dim</span> param <span class=\"blue\">As</span> Parameter = strElem.Parameter( _\n        BuiltInParameter.SLANTED_COLUMN_TYPE_PARAM)\n \n    param.Set(SlantedOrVerticalColumnType.CT_EndPoint)\n \n    <span class=\"green\">'' after setting to a slanted column,</span>\n    <span class=\"green\">'' location should be a curve. </span>\n    <span class=\"blue\">Dim</span> strElemCurve <span class=\"blue\">As</span> LocationCurve = strElem.Location\n\n    <span class=\"green\">'' set the start and end point of a curve. </span>\n    <span class=\"blue\">If</span> <span class=\"blue\">Not</span> (strElemCurve <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span>) <span class=\"blue\">Then</span>\n        <span class=\"blue\">Dim</span> line <span class=\"blue\">As</span> Line = app.Create.NewLineBound( _\n            startPoint, endPoint)\n        strElemCurve.Curve = line\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"blue\">Return</span> IExternalCommand.Result.Succeeded\n \n<span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre><p>To modify an existing vertical column, you can modify the 'Slanted Column Type' property and then set the two end points in a similar fashion.</p><p>Many thanks to Mikako for providing this explanation!</p>"
  },
  {
    "original_filename": "0149_slanted_column",
    "header_text": "Addendum – Cast Built-In Parameter to Integer",
    "local_header_href": "#addendum-cast-built-in-parameter-to-integer",
    "chunk_text": "<h4><a name=\"2\"></a>Addendum – Cast Built-In Parameter to Integer</h4><p>In his\n<a href=\"https://thebuildingcoder.typepad.com/blog/2009/06/creating-a-slanted-column.html#comment-4729843697\">comments</a>\n<a href=\"https://thebuildingcoder.typepad.com/blog/2009/06/creating-a-slanted-column.html#comment-4732593349\">below</a>,\nMatthias Schneider points out that the built-in parameter needs to be converted to <code>int</code>:</p><p>In Revit 2017 and later versions, this doesn't work any more:\n\n<pre>\n  param.Set(SlantedOrVerticalColumnType.CT_EndPoint)\n</pre>\n<p>Instead, you have to use:</p>\n<pre>\n  param.Set((int)SlantedOrVerticalColumnType.CT_EndPoint)\n</pre>\n<p>Many thanks to Matthias this observation!</p>\n</p>"
  }
]