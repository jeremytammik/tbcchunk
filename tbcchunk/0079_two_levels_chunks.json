[
  {
    "original_filename": "0079_two_levels",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0079_two_levels",
    "header_text": "Walls and Doors on Two Levels",
    "local_header_href": "#walls-and-doors-on-two-levels",
    "chunk_text": "<h3>Walls and Doors on Two Levels</h3><p>Here is a little note to answer a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/relationship-in.html#comments\">\nquestion from Berria</a> on creating walls and doors on two separate levels.\nThis is a slightly edited version of the original query:</p><p><strong>Question:</strong>\nI need to create a house with two floors.\nI create a level and then a new wall and a door.\nIt draws the two objects on different levels.\nWhen I built the first level, all is OK.\nAn error occurs when I build the second, because the level to define the component position is always zero.</p><p><strong>Answer:</strong>\nI cannot tell you off-hand what the problem is in your situation, but I can provide you with a code example that achieves your goal.\nLook at the external command Lab2_0_CreateLittleHouse in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/rac_labs_20081117.zip\">\nRevit API introduction labs</a>.\n\nTo demonstrate that the code can be easily adapted to work on several levels, here is a modified version which creates only the walls and doors, omitting the other elements, and repeats the process on two levels.\nIn order to place the second door, I do indeed modify the Z coordinate of its insertion point by setting 'midpoint.Z = levelMiddle.Elevation'.\nBefore running this command, ensure that you have three levels in your model, and that the brain-dead code snippet which extracts them into the three variables really gets them in the right order:</p><pre class=\"code\">\n<span class=\"teal\">WaitCursor</span> waitCursor = <span class=\"blue\">new</span> <span class=\"teal\">WaitCursor</span>();\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n_createApp = app.Create;\n_createDoc = doc.Create;\n<span class=\"green\">//</span>\n<span class=\"green\">// determine the four corners of the rectangular house:</span>\n<span class=\"green\">//</span>\n<span class=\"blue\">double</span> width = 7 * <span class=\"teal\">LabConstants</span>.MeterToFeet;\n<span class=\"blue\">double</span> depth = 4 * <span class=\"teal\">LabConstants</span>.MeterToFeet;\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; corners = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;( 4 );\ncorners.Add( <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 0, 0 ) );\ncorners.Add( <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( width, 0, 0 ) );\ncorners.Add( <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( width, depth, 0 ) );\ncorners.Add( <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, depth, 0 ) );\n \n<span class=\"teal\">Level</span> levelBottom = <span class=\"blue\">null</span>;\n<span class=\"teal\">Level</span> levelMiddle = <span class=\"blue\">null</span>;\n<span class=\"teal\">Level</span> levelTop = <span class=\"blue\">null</span>;\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; levels = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n<span class=\"teal\">Filter</span> filterType\n  = _createApp.Filter.NewTypeFilter(\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ) );\n \ndoc.get_Elements( filterType, levels );\n<span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> levels )\n{\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == levelBottom )\n  {\n    levelBottom = e <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n  }\n  <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == levelMiddle )\n  {\n    levelMiddle = e <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n  }\n  <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == levelTop )\n  {\n    levelTop = e <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">break</span>;\n  }\n}\n \n<span class=\"teal\">BuiltInParameter</span> topLevelParam\n  = <span class=\"teal\">BuiltInParameter</span>.WALL_HEIGHT_TYPE;\n \n<span class=\"teal\">Line</span> line;\n<span class=\"teal\">Wall</span> wall;\n<span class=\"teal\">Parameter</span> param;\n \n<span class=\"teal\">ElementId</span> topId = levelMiddle.Id;\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Wall</span>&gt; walls = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Wall</span>&gt;( 8 );\n<span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 4; ++i )\n{\n  line = _createApp.NewLineBound(\n    corners[i], corners[3 == i ? 0 : i + 1] );\n \n  wall = _createDoc.NewWall(\n    line, levelBottom, <span class=\"blue\">false</span> );\n \n  param = wall.get_Parameter( topLevelParam );\n  param.Set( <span class=\"blue\">ref</span> topId );\n  walls.Add( wall );\n}\n \ntopId = levelTop.Id;\n<span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 4; ++i )\n{\n  line = _createApp.NewLineBound(\n    corners[i], corners[3 == i ? 0 : i + 1] );\n \n  wall = _createDoc.NewWall(\n    line, levelMiddle, <span class=\"blue\">false</span> );\n \n  param = wall.get_Parameter( topLevelParam );\n  param.Set( <span class=\"blue\">ref</span> topId );\n  walls.Add( wall );\n}\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; doorSymbols\n  = <span class=\"teal\">LabUtils</span>.GetAllFamilySymbols(\n    app, <span class=\"teal\">BuiltInCategory</span>.OST_Doors );\n \n<span class=\"teal\">Debug</span>.Assert(\n  0 &lt; doorSymbols.Count,\n  <span class=\"maroon\">\"expected at least one door symbol\"</span>\n  + <span class=\"maroon\">\" to be loaded into project\"</span> );\n \n<span class=\"teal\">FamilySymbol</span> door\n  = doorSymbols[0] <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n<span class=\"teal\">XYZ</span> midpoint = <span class=\"teal\">LabUtils</span>.Midpoint(\n  corners[0], corners[1] );\n \n<span class=\"teal\">FamilyInstance</span> inst0\n  = _createDoc.NewFamilyInstance(\n    midpoint, door, walls[0], levelBottom,\n    <span class=\"teal\">StructuralType</span>.NonStructural );\n \nmidpoint.Z = levelMiddle.Elevation;\n \n<span class=\"teal\">FamilyInstance</span> inst1\n  = _createDoc.NewFamilyInstance(\n    midpoint, door, walls[4], levelMiddle,\n    <span class=\"teal\">StructuralType</span>.NonStructural );\n\n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n</pre><p>Here is the result of running the command:</p><img alt=\"Two level house\" src=\"img/two_level_house.png\"/><p>I hope this helps resolve your problem.</p>"
  }
]