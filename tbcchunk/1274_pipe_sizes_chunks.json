[
  {
    "original_filename": "1274_pipe_sizes",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1274_pipe_sizes",
    "header_text": "List Pipe Sizes and More Obsolete API Usage Removal",
    "local_header_href": "#list-pipe-sizes-and-more-obsolete-api-usage-removal",
    "chunk_text": "<h3>List Pipe Sizes and More Obsolete API Usage Removal</h3><p>I was ill for a few days last week, with a fever and a virus.</p><p>I also made a quick trip to Moscow, where we held the final event in this year's sequence of DevDays conferences.</p><p>For the first time in my life, I gave my presentations in a woolly hat  :-)</p><p>I also rented my first <a href=\"https://www.airbnb.com\">airbnb</a> flat ever, on Arbat street in the center of town, and was pretty happy with that.</p><p>I returned back to Switzerland on Friday, and back to health during the weekend.</p><p>During last week, I also preformed quite a bit of cleanup on the Revit API code samples on GitHub, continuing the on-going task of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/determining-intersecting-elements-and-continued-futureproofing.html#2\">\neliminating all deprecated API usage</a> before\n\nthe methods and properties become obsolete and are completely removed.</p><p>Another enhancement was the addition of a new external command CmdListPipeSizes prompted by\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/new-revit-2013-sdk-samples.html?cid=6a00e553e16897883301b7c73f5a49970b#comment-6a00e553e16897883301b7c73f5a49970b\">\nDrew's suggestion</a> on\n\nhow to obtain a list of all pipe sizes being used in a project, based on a code snippet provided in the Revit API help file RevitAPI.chm description of the Segment class.</p><p>It retrieves all pipe segments in the project and lists their nominal, outer and inner diameter to a text file:</p><pre class=\"code\">\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _filename = <span class=\"maroon\">\"C:/pipesizes.txt\"</span>;\n \n  <span class=\"blue\">string</span> FootToMmString( <span class=\"blue\">double</span> a )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Util</span>.FootToMm( a )\n      .ToString( <span class=\"maroon\">\"0.##\"</span> )\n      .PadLeft( 8 );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List all the pipe segment sizes in the given document.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"doc\"&gt;&lt;/param&gt;</span>\n  <span class=\"blue\">void</span> GetPipeSegmentSizes(\n    <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">FilteredElementCollector</span> segments\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Segment</span> ) );\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">StreamWriter</span> file = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>(\n      _filename, <span class=\"blue\">true</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Segment</span> segment <span class=\"blue\">in</span> segments )\n      {\n        file.WriteLine( segment.Name );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">MEPSize</span> size <span class=\"blue\">in</span> segment.GetSizes() )\n        {\n          file.WriteLine( <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"  {0} {1} {2}\"</span>,\n            FootToMmString( size.NominalDiameter ),\n            FootToMmString( size.InnerDiameter ),\n            FootToMmString( size.OuterDiameter ) ) );\n        }\n      }\n    }\n  }\n</pre><p>Running it in the Autodesk Waltham office MEP sample model <i>Autodesk Waltham - MEP.rvt</i> generates this\n\n<a href=\"zip/pipesizes.txt\">pipesizes.txt output file</a>.</p><p>As always,\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples GitHub repository</a> hosts\n\nthe most up-to-date version, including:</p><ul>\n<li><a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.116.8\">release 2015.0.116.8</a> – updated copyright year to 2015</li>\n<li><a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.116.9\">release 2015.0.116.9</a> – eliminated obsolete API usage, <a href=\"zip/bc_migr_2015_g.txt\">15 warnings left</a></li>\n<li><a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.117.0\">release 2015.0.117.0</a> – implemented CmdListPipeSizes</li>\n</ul>"
  }
]