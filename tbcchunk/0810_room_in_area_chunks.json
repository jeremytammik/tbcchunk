[
  {
    "original_filename": "0810_room_in_area",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0810_room_in_area",
    "header_text": "Room in Area Predicate via Point in Polygon Test",
    "local_header_href": "#room-in-area-predicate-via-point-in-polygon-test",
    "chunk_text": "<h3>Room in Area Predicate via Point in Polygon Test</h3><p>I presented a sample last week showing how to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/graphically-display-area-boundary-loops.html\">\naccess area boundary loops</a> and \n\ndisplay the result graphically by creating corresponding model curves.\n\n<p>Jeroen van Vlierden of \n\n<a href=\"http://www.icn-solutions.nl\">\nICN Solutions BV</a> took\n\nthis idea one step further by combining the area boundary loop extraction with my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/point-in-polygon-containment-algorithm.html\">\npoint in polygon containment algorithm</a> to\n\nfind out whether a given room resides within an area.\n\n<!-- <p>We simply have to put together all the pieces. -->\n<p>He also pointed out that my area boundary sample attempts to use the Area class directly in a filtered element collector, which is not allowed, as I explained when\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/accessing-room-data.html\">\naccessing room data</a>.\n\n<p>Jeroen explains:\n\n<p>I can now implement the point in polygon test.\n\n<p>Thank you very much for solving my problem.\nThis will help me determine which rooms are part of which area and therefore also which windows belong to which area. \nIt is part of a program in which we want to determine how many square meters glass is being used in user specified areas.\n\n<p>I implemented your point in polygon test as an extension method of the area element type.\nC# is such an elegant language ;-)\n\n<p>I use extension methods a lot to extend the Revit API with my own methods, especially when it comes to dealing with various kinds of parameters etc.\n\n<p>After using them for a while, I will not even remember they are not part of the official API.\n\n<p>The only thing that will not work correctly (yet) is when there is an arc part of the polygon.\n\n<p>One easy way to deal approximately with the arc (and all other non-linear segments as well) would be to make use of the Revit API geometric tessellation functionality, reducing everything to (approximate) straight line segments.\nThis is extremely simple, since all curve elements implement the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/curves.html\">\nTessellate method</a> returning \n\na list of XYZ approximation points.\nIts use is demonstrated in numerous places in the SDK samples.\n\n<p>I reused your code based on UV points by writing an extension method to convert XYZ to UV and I have added a constructor to the PointInPoly class that allows a List of XYZ points to define the PointInPoly class.\n\n<p>Here is my version of the point in polygon implementation \n\n<a href=\"zip/room_in_area_PointInPoly.cs.txt\">PointInPoly.cs</a>.\n\n<p>Here is the entire code of the various extension methods defined in the module\n\n<a href=\"zip/room_in_area_PointInPolyExtensions.cs.txt\">PointInPolyExtensions.cs</a>:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">PointInPolyExtensions</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add new point to list, unless already present.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> AddToPunten(\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; XYZarray,\n    <span class=\"teal\">XYZ</span> p1 )\n  {\n    <span class=\"blue\">var</span> p = XYZarray.Where(\n      c =&gt; <span class=\"teal\">Math</span>.Abs( c.X - p1.X ) &lt; 0.001\n        &amp;&amp; <span class=\"teal\">Math</span>.Abs( c.Y - p1.Y ) &lt; 0.001 )\n      .FirstOrDefault();\n \n    <span class=\"blue\">if</span>( p == <span class=\"blue\">null</span> )\n    {\n      XYZarray.Add( p1 );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a list of boundary </span>\n  <span class=\"gray\">///</span><span class=\"green\"> points for the given room.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; MaakPuntArray(\n    <span class=\"teal\">Room</span> room )\n  {\n    <span class=\"teal\">SpatialElementBoundaryOptions</span> opt\n      = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n    opt.SpatialElementBoundaryLocation\n      = <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center;\n \n    <span class=\"blue\">var</span> boundaries = room.GetBoundarySegments(\n      opt );\n \n    <span class=\"blue\">return</span> MaakPuntArray( boundaries );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a list of boundary points </span>\n  <span class=\"gray\">///</span><span class=\"green\"> for the given boundary segments.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; MaakPuntArray(\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; boundaries )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; puntArray = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;();\n    <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> bl <span class=\"blue\">in</span> boundaries )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> s <span class=\"blue\">in</span> bl )\n      {\n        <span class=\"teal\">Curve</span> c = s.Curve;\n        AddToPunten( puntArray, c.get_EndPoint( 0 ) );\n        AddToPunten( puntArray, c.get_EndPoint( 1 ) );\n      }\n    }\n    puntArray.Add( puntArray.First() );\n    <span class=\"blue\">return</span> puntArray;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a list of boundary </span>\n  <span class=\"gray\">///</span><span class=\"green\"> points for the given area.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; MaakPuntArray(\n    <span class=\"teal\">Area</span> area )\n  {\n    <span class=\"teal\">SpatialElementBoundaryOptions</span> opt\n      = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n    opt.SpatialElementBoundaryLocation\n      = <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center;\n \n    <span class=\"blue\">var</span> boundaries = area.GetBoundarySegments(\n      opt );\n \n    <span class=\"blue\">return</span> MaakPuntArray( boundaries );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Check whether this area contains a given point.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> AreaContains( <span class=\"blue\">this</span> <span class=\"teal\">Area</span> a, <span class=\"teal\">XYZ</span> p1 )\n  {\n    <span class=\"blue\">bool</span> ret = <span class=\"blue\">false</span>;\n    <span class=\"blue\">var</span> p = MaakPuntArray( a );\n    <span class=\"teal\">PointInPoly</span> pp = <span class=\"blue\">new</span> <span class=\"teal\">PointInPoly</span>();\n    ret = pp.PolyGonContains( p, p1 );\n    <span class=\"blue\">return</span> ret;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Check whether this room contains a given point.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> RoomContains( <span class=\"blue\">this</span> <span class=\"teal\">Room</span> r, <span class=\"teal\">XYZ</span> p1 )\n  {\n    <span class=\"blue\">bool</span> ret = <span class=\"blue\">false</span>;\n    <span class=\"blue\">var</span> p = MaakPuntArray( r );\n    <span class=\"teal\">PointInPoly</span> pp = <span class=\"blue\">new</span> <span class=\"teal\">PointInPoly</span>();\n    ret = pp.PolyGonContains( p, p1 );\n    <span class=\"blue\">return</span> ret;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Project an XYZ point to a UV one in the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> XY plane by simply dropping the Z coordinate.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">UV</span> TOUV( <span class=\"blue\">this</span> <span class=\"teal\">XYZ</span> point )\n  {\n    <span class=\"teal\">UV</span> ret = <span class=\"blue\">new</span> <span class=\"teal\">UV</span>( point.X, point.Y );\n    <span class=\"blue\">return</span> ret;\n  }\n}\n</pre>\n<p>Many thanks to Jeroen for this discussion and nice example!\n\n<p>For completeness' sake and your convenience, here is an updated version of the \n\n<a href=\"zip/DisplayBoundary2.zip\">\nDisplayBoundary sample</a> including \n\n<ul>\n<li>The fix to filter for spatial elements instead of areas\n<li>The point in polygon algorithm\n<li>Jeroen's extension methods\n</li></li></li></ul>\n<p>Enjoy!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]