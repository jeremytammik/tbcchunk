[
  {
    "original_filename": "0907_sweep_performance",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<html>\n<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>\n<body>\n<!--\n\nSPR #235930 [stray regeneration in sweep generation]\n\nDavid Tan, 谭得浩\nHu Zhao, /cy虎虎虎/cy\n\nFrom: 谭得浩\nDate: Tuesday, March 12, 2013 06:16\nSubject: FW: Automatic Regeneration After Many Sweeps Created\n\nHi Jeremy,\n\nI have forwarded your email to Hu (in CC list).\n\nI only have 1 tip: I'm not Hu's professor. I'm a programmer who have been working on Revit since 3 years ago. I worked with Hu and his professor when he was studying in China :)\n\nHello Zhao Hu,\n\nI'm sure you're the right guy to say if it's OK or not :)\n\nBest Regards,\nDavid Tan\n\nFrom: /cy虎虎虎/cy\nDate: Tuesday, March 12, 2013 09:27\nSubject: Reply: Automatic Regeneration After Many Sweeps Created\n\nHi Jeremy and David,\n\nThank you for the inform!\n\nI think it's OK!\n\nBest,\n\nHu\n\n-->\n<h3>Sweep Family Performance Enhancement</h3>\n<p>Now I am back at work again, enjoying the queries coming in from developers, postponing other important things such as my own long-term class and presentation preparations etc.\nAddicted to helping, that's me.</p>\n<p>Anyway, here is a piece of doubly good news, in that the developers mentioned below did a good job of helping themselves, in addition to achieving a radical speed improvement from 40 hours down to 3 minutes, i.e. just 0.125% of the original time,  to programmatically generate some Revit families.</p>\n<p><strong>Question:</strong> The problem was initially reported by\n\n<a href=\"http://www.facebook.com/hu.zhao.3\">\nHu Zhao</a> in a recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html?cid=6a00e553e168978833017d410ee261970c#comment-6a00e553e168978833017d410ee261970c\">\ncomment</a>:</p>\n<blockquote>\n<p>I have 80,000 elements to generate, now I use sweep; do you know which is faster of sweep and extrusion?\nWhich can offer a better performance for the computer?\n\n<p>It took 40 hours for the sweep operations.\n\n<p>Is it possible to accelerate this?\n\n<p>In Rhino script, only 10 minutes is enough for this operation.\n</p></p></p></p></blockquote>\n<p>Hu's colleague and Revit API blogger\n\n<a href=\"http://blog.csdn.net/flower4wine\">\nDavid Tan</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/to-regenerate-or-not-to-regenerate.html?cid=6a00e553e168978833017c36e43308970b#comment-6a00e553e168978833017c36e43308970b\">\nclarifies</a>:\n\n</p>\n<blockquote>\n<p>Zhao's scenario is to create about 80,000 sweeps in Revit in one shot.\nPer his test, it will take about 20 hours, while his workmate can achieve it in Rhino within 10 minutes.\nZhao expects that Revit could do faster.\n\n<p>As Zhao's test was done in an open family document (with UIDocument), I tried to use in-memory document but it still take about 18 hours to draw all 80K sweeps.\n\n<p>Zhao noticed that although all the drawing work is done in a single transaction, it seems that Revit tries to regenerate the document after there are sweeps created already automatically.\nWe did set the RegenerationOption to be Manual.\nWe say it because we saw Revit progress bar in the bottom-left corner indicates it.\n\n<p>Our questions:\n\n<ol>\n<li>Can we prohibit Revit's automatic regeneration?</li>\n<li>More straightly, do we have any approach to get the job done faster?</li>\n</ol>\n<p>Thanks a lot! And Happy Chinese Snake Year!\n</p></p></p></p></p></blockquote>\n<p><strong>Answer:</strong> There may be a stray regeneration happening in sweep creation.\n\n<p>If you can demonstrate that (with a sample that creates something less than 80,000 sweeps, please :-), please provide a reproducible case for further analysis.\n\n<p>It is also worth asking what the use case is for 80,000 sweeps in one family.\nAre you possibly modelling things so detailed that that a building model with multiple instances of this will have performance problems?\n\n<p>Maybe you could add an image of what you are creating to motivate the development team by helping them understand.\n\n\n<p><strong>Response:</strong> Here is an image showing what we are trying to achieve:</p>\n<center>\n<img alt=\"Roof with sweeps\" src=\"img/sweep_performance_roof.jpeg\" width=\"600\"/>\n</center>\n<p>Each sweep corresponds to a single wooden roof in the image.\n\n<p>Here is also\n\n<a href=\"zip/sweep_performance_david.zip\">\nHu Zhao's source code</a>.\n\nWe used an in-memory document and added a StopWatch to measure the time consumed.\n\n<p>The source code implements an external command in Program.cs.\nIt will pop up a window and let you select a XML file, which contains creation data of all the sweeps.\nYou can find the XML file along with the .sln file.\nTo make things simple, I only put 2000+ sweeps creation data in the XML file.\n\n<p>Finally I want to share the good news from Hu Zhao.\nHe resolved the performance problem by splitting all sweeps into 24 families and then combining them together.\nIt only takes 3 minutes now.\nOf course, the cost is the reduced granularity; the model now no longer has individual roofs with embedded family instances.\nBut as he is OK with it, we can say we have found the solution.\n\n<p>Hu added the following\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html?cid=6a00e553e168978833017ee88d66c1970d#comment-6a00e553e168978833017ee88d66c1970d\">\nmore detailed project description</a>:</p>\n<p>I am now working in a project plan team for the design of Arch_Tec_Lab in ETH Zürich\n\n(<a href=\"http://www.youtube.com/watch?v=tzKfXra9o54\">youtube link</a>).\n\n<p>The parametric roof is generated in Rhino by my colleague, and the wooden beams will be assembled by robotic arms.\n\n<p>Before I joined this team, they imported the roof (including roof wooden structure) in DWG format, which did not display correctly in some plan and section views.\nIn 3D view, it led to Revit crash because of too many triangle meshes in this imported format.\n\n<p>So I wrote a plugin to import the wooden beams (around 80k) of the roof.\n\n<p>We choose XML to exchange the position information, and I choose sweep instead of extrusion to generate each beam.\n\n<p>For now, the roof structure is divided into 7 parts of XML, which generates 7 families.\nIt took me about 20 hours by using 3 dell precision computers.\n\n<p>Because the roof will be modified several times in the following days, I am now searching for a way to reduce the generation time.\n\n<p>I found that the speed of sweep is slower when the amount increased, and the regeneration that I cannot avoid is especially slow when the amount is above 1500.\n\n<p>Yesterday I found a way to accelerate the generation greatly.\n\n<p>I did like this: divided each 1 part  into 24 pieces sections with the mark in XML, then generate each section into single family, and then combine them into a major family.\nThese actions are all made by the plugin.\n\n<p>This is much more quicker.\n\n<p>Let me introduce our project once again.\n\n<p>The Arch_Tec_Lab is a role model project of department of Architecture, ETH Zürich.\nThe team includes most important professors in the Institute of Technology in Architecture.\nThe project aims to realize the BIM control in the life circle.\nNow we are using Revit to an extremely detail, and we enjoy the cloud rendering in Autodesk 360, except we wish it would also support animation rendering.\nNow we are working on the construction drawings in Revit.\n\n<p>In Switzerland, few architects use Autodesk products, because of the majority of the MAC users.\nBut we want build a model for the architects and the students in department.\n\n<p>Many thanks to David and Hu for their research and sharing this remarkable performance enhancement!\n\n<p><strong>Addendum:</strong> For completeness' sake, here is the\n\n<a href\"zip=\"\" sweep_performance_david_slow.txt\"=\"\">slow source code</a> and the\n\n<a href\"zip=\"\" sweep_performance_david_big_fast.rar\"=\"\">complete fast solution</a>.\n\n<p>Hu clarifies: the code we posted yesterday is the slow version.\nThe 'slow source code' shows how it works.\nThe 'complete fast solution' is the quicker version.\n\n<p>There are 8 parts to generate.\nI finished all the work above in 20 hours using 3 computers, and now I can generate the smallest part in 3 minutes.\nActually, the bigger part took about 6 hours by the slow method, and now takes about 50 minutes.\n\n<p>The time depends on how many parts I separate.\nI never test all the 80000 sweeps in one run, maybe it will cost one month ~:D – because the speed runs slower when time goes.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></body>\n</html>"
  },
  {
    "original_filename": "0907_sweep_performance",
    "header_text": "Sweep Family Performance Enhancement",
    "local_header_href": "#sweep-family-performance-enhancement",
    "chunk_text": "<h3>Sweep Family Performance Enhancement</h3><p>Now I am back at work again, enjoying the queries coming in from developers, postponing other important things such as my own long-term class and presentation preparations etc.\nAddicted to helping, that's me.</p><p>Anyway, here is a piece of doubly good news, in that the developers mentioned below did a good job of helping themselves, in addition to achieving a radical speed improvement from 40 hours down to 3 minutes, i.e. just 0.125% of the original time,  to programmatically generate some Revit families.</p><p><strong>Question:</strong> The problem was initially reported by\n\n<a href=\"http://www.facebook.com/hu.zhao.3\">\nHu Zhao</a> in a recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html?cid=6a00e553e168978833017d410ee261970c#comment-6a00e553e168978833017d410ee261970c\">\ncomment</a>:</p><blockquote>\n<p>I have 80,000 elements to generate, now I use sweep; do you know which is faster of sweep and extrusion?\nWhich can offer a better performance for the computer?\n\n<p>It took 40 hours for the sweep operations.\n\n<p>Is it possible to accelerate this?\n\n<p>In Rhino script, only 10 minutes is enough for this operation.\n</p></p></p></p></blockquote><p>Hu's colleague and Revit API blogger\n\n<a href=\"http://blog.csdn.net/flower4wine\">\nDavid Tan</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/to-regenerate-or-not-to-regenerate.html?cid=6a00e553e168978833017c36e43308970b#comment-6a00e553e168978833017c36e43308970b\">\nclarifies</a>:\n\n</p><blockquote>\n<p>Zhao's scenario is to create about 80,000 sweeps in Revit in one shot.\nPer his test, it will take about 20 hours, while his workmate can achieve it in Rhino within 10 minutes.\nZhao expects that Revit could do faster.\n\n<p>As Zhao's test was done in an open family document (with UIDocument), I tried to use in-memory document but it still take about 18 hours to draw all 80K sweeps.\n\n<p>Zhao noticed that although all the drawing work is done in a single transaction, it seems that Revit tries to regenerate the document after there are sweeps created already automatically.\nWe did set the RegenerationOption to be Manual.\nWe say it because we saw Revit progress bar in the bottom-left corner indicates it.\n\n<p>Our questions:\n\n<ol>\n<li>Can we prohibit Revit's automatic regeneration?</li>\n<li>More straightly, do we have any approach to get the job done faster?</li>\n</ol>\n<p>Thanks a lot! And Happy Chinese Snake Year!\n</p></p></p></p></p></blockquote><p><strong>Answer:</strong> There may be a stray regeneration happening in sweep creation.\n\n<p>If you can demonstrate that (with a sample that creates something less than 80,000 sweeps, please :-), please provide a reproducible case for further analysis.\n\n<p>It is also worth asking what the use case is for 80,000 sweeps in one family.\nAre you possibly modelling things so detailed that that a building model with multiple instances of this will have performance problems?\n\n<p>Maybe you could add an image of what you are creating to motivate the development team by helping them understand.\n\n\n<p><strong>Response:</strong> Here is an image showing what we are trying to achieve:</p>\n<center>\n<img alt=\"Roof with sweeps\" src=\"img/sweep_performance_roof.jpeg\" width=\"600\"/>\n</center>\n<p>Each sweep corresponds to a single wooden roof in the image.\n\n<p>Here is also\n\n<a href=\"zip/sweep_performance_david.zip\">\nHu Zhao's source code</a>.\n\nWe used an in-memory document and added a StopWatch to measure the time consumed.\n\n<p>The source code implements an external command in Program.cs.\nIt will pop up a window and let you select a XML file, which contains creation data of all the sweeps.\nYou can find the XML file along with the .sln file.\nTo make things simple, I only put 2000+ sweeps creation data in the XML file.\n\n<p>Finally I want to share the good news from Hu Zhao.\nHe resolved the performance problem by splitting all sweeps into 24 families and then combining them together.\nIt only takes 3 minutes now.\nOf course, the cost is the reduced granularity; the model now no longer has individual roofs with embedded family instances.\nBut as he is OK with it, we can say we have found the solution.\n\n<p>Hu added the following\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/mp3-manipulation-using-python-mutagen-and-ffmpeg.html?cid=6a00e553e168978833017ee88d66c1970d#comment-6a00e553e168978833017ee88d66c1970d\">\nmore detailed project description</a>:</p>\n<p>I am now working in a project plan team for the design of Arch_Tec_Lab in ETH Zürich\n\n(<a href=\"http://www.youtube.com/watch?v=tzKfXra9o54\">youtube link</a>).\n\n<p>The parametric roof is generated in Rhino by my colleague, and the wooden beams will be assembled by robotic arms.\n\n<p>Before I joined this team, they imported the roof (including roof wooden structure) in DWG format, which did not display correctly in some plan and section views.\nIn 3D view, it led to Revit crash because of too many triangle meshes in this imported format.\n\n<p>So I wrote a plugin to import the wooden beams (around 80k) of the roof.\n\n<p>We choose XML to exchange the position information, and I choose sweep instead of extrusion to generate each beam.\n\n<p>For now, the roof structure is divided into 7 parts of XML, which generates 7 families.\nIt took me about 20 hours by using 3 dell precision computers.\n\n<p>Because the roof will be modified several times in the following days, I am now searching for a way to reduce the generation time.\n\n<p>I found that the speed of sweep is slower when the amount increased, and the regeneration that I cannot avoid is especially slow when the amount is above 1500.\n\n<p>Yesterday I found a way to accelerate the generation greatly.\n\n<p>I did like this: divided each 1 part  into 24 pieces sections with the mark in XML, then generate each section into single family, and then combine them into a major family.\nThese actions are all made by the plugin.\n\n<p>This is much more quicker.\n\n<p>Let me introduce our project once again.\n\n<p>The Arch_Tec_Lab is a role model project of department of Architecture, ETH Zürich.\nThe team includes most important professors in the Institute of Technology in Architecture.\nThe project aims to realize the BIM control in the life circle.\nNow we are using Revit to an extremely detail, and we enjoy the cloud rendering in Autodesk 360, except we wish it would also support animation rendering.\nNow we are working on the construction drawings in Revit.\n\n<p>In Switzerland, few architects use Autodesk products, because of the majority of the MAC users.\nBut we want build a model for the architects and the students in department.\n\n<p>Many thanks to David and Hu for their research and sharing this remarkable performance enhancement!\n\n<p><strong>Addendum:</strong> For completeness' sake, here is the\n\n<a href\"zip=\"\" sweep_performance_david_slow.txt\"=\"\">slow source code</a> and the\n\n<a href\"zip=\"\" sweep_performance_david_big_fast.rar\"=\"\">complete fast solution</a>.\n\n<p>Hu clarifies: the code we posted yesterday is the slow version.\nThe 'slow source code' shows how it works.\nThe 'complete fast solution' is the quicker version.\n\n<p>There are 8 parts to generate.\nI finished all the work above in 20 hours using 3 computers, and now I can generate the smallest part in 3 minutes.\nActually, the bigger part took about 6 hours by the slow method, and now takes about 50 minutes.\n\n<p>The time depends on how many parts I separate.\nI never test all the 80000 sweeps in one run, maybe it will cost one month ~:D – because the speed runs slower when time goes.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]