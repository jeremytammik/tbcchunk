[
  {
    "original_filename": "0882_unit_conversion",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0882_unit_conversion",
    "header_text": "Unit Conversion Utility Update",
    "local_header_href": "#unit-conversion-utility-update",
    "chunk_text": "<h3>Unit Conversion Utility Update</h3><p>Here is a Revit 2013 update of the Revit 2011\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/unit-conversion-and-new-blogs.html\">\nunit conversion utility</a>,\n\noriginally posted and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/unit-conversion.html\">\ndescribed for Revit 2010</a>, by\n\n<a href=\"http://boostyourbim.wordpress.com\">\nHarry Mattison</a>.\n\n<p>In his own words:</p>\n<p>I was looking at the great\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/unit-conversion-and-new-blogs.html\">\nunit conversion utility</a> and\n\ncreated a\n\n<a href=\"zip/UnitConversions2013.zip\">\nnew version upgraded to use the Revit 2013 API</a>\n\nthat I thought you readers might enjoy.\n\n<p>I ran into one issue that required a code enhancement to catch an exception thrown by many parameters, such as HVAC_Temperature, HVAC_Slope, etc.\n\n<p>The rest of the code handles error conditions nicely, so I was surprised to see these uncaught exceptions.\n\n<p>I solved it by adding a try/catch statement around the existing call to AddParameter in frmUnitConversions.cs:</p>\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _Parameter )\n  {\n    <span class=\"green\">// Create a new parameter</span>\n \n    <span class=\"blue\">try</span>\n    {\n      _Parameter\n        = _DbDocument.FamilyManager.AddParameter(\n          parameterTypeToCreate.ToString(),\n          <span class=\"teal\">BuiltInParameterGroup</span>.INVALID,\n          parameterTypeToCreate,\n          <span class=\"blue\">false</span> );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Error\"</span>,\n        <span class=\"maroon\">\"Cannot create parameter '\"</span>\n        + parameterTypeToCreate.ToString()\n        + <span class=\"maroon\">\"' with parameter type '\"</span>\n        + parameterTypeToCreate\n        + <span class=\"maroon\">\"' because of exception\\n\"</span>\n        + ex.Message.ToString() );\n \n      <span class=\"blue\">return</span>;\n    }\n  }\n</pre>\n<p>I think I figured out what is causing this and thought it would be interesting to share with your blog readers:\n\n<p>I am creating family parameters from a shared parameter file.\nSome parameters have types that are not supported in the version of Revit that I am currently using, which is Revit Architecture.\n\n<p>I created this function to detect the situation:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> canGetFormatOptions(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">FamilyParameter</span> familyParameter )\n  {\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">UnitType</span> parameterUnitType\n        = ConvertParameterTypeToUnitType(\n          familyParameter.Definition.ParameterType );\n \n      doc.ProjectUnit.get_FormatOptions(\n        parameterUnitType );\n \n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n    <span class=\"blue\">catch</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n    }\n  }\n</pre>\n<p>I use it like this:</p>\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( !canGetFormatOptions(\n    famDoc, familyParameter ) )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Error\"</span>,\n      <span class=\"maroon\">\"Cannot set parameter value.\\nUnit Type \"</span>\n      + ConvertParameterTypeToUnitType(\n        familyParameter.Definition.ParameterType )\n      + <span class=\"maroon\">\" is not supported in Revit \"</span>\n      + famDoc.Application.Product.ToString() );\n  }\n</pre>\n<p>Take care.\n\n<p>The updated code is provided above.</p>\n<p>Many thanks to Harry for this update with his enhancement and analysis!</p>\n</p></p></p></p></p></p></p></p>"
  }
]