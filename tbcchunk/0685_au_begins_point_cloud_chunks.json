[
  {
    "original_filename": "0685_au_begins_point_cloud",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0685_au_begins_point_cloud",
    "header_text": "AU Begins and Point Cloud Overview",
    "local_header_href": "#au-begins-and-point-cloud-overview",
    "chunk_text": "<h3>AU Begins and Point Cloud Overview</h3><p>Once again I left the desert and the climbing in Red Rock and entered the air conditioned world of conference land.\nThis year I was pretty leisurely about climbing, although I did at least a few climbs every day.\nI slept well and long, hiked in to Red Rock from the highway, read a book in the desert sunshine, and finally met up with people in the late morning.\n\n<p>A memorable experience on my birthday on Saturday was meeting another Jeremy!\nWe did some climbs together on The Magic Bus: Electric Koolaid 5.9+, Neon Sunset, Zipperhead and Technicolor Sunrise, 5.8.\nI never previously had so much direct personal interaction with another Jeremy, so that was very special.\nOn Sunday I spent time with Christine, David and Matt, and we did one single climb on Circus Wall, High Wire 5.10-.\n\n<p>Then it was farewell to nature, hello hotel.\nI really enjoyed meeting my ADN DevTech colleagues for dinner last night.\nAnd now to get ready for the conference.\nIt is five o'clock Monday morning, and I am still waking up early.\nI think I am well prepared, actually, for a change.\n\n<p>As I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/revit-and-aec-api-classes-at-autodesk-university.html\">\nalready mentioned</a>, \n\nI am presenting a virtual class on the Revit MEP API and a lecture and a hands-on lab on the extensible storage API, besides all the meetings, other classes, and DevLab that I need to attend to.\nAnyway, time for me to get going now.\n\n<p>For you people not attending Autodesk University, here is some other interesting information to keep you busy in the meantime, an overview of the Point Cloud Engine API by my colleague Katsuaki Takamizawa:\n\n<h4>Autodesk Revit Point Cloud Engine API</h4>\n<p>One of the new features of Revit 2012 is the point cloud functionality and the API for making use of it programmatically.\n\n<p>You can now insert a point cloud file into a Revit project, display them in model views, and select/move/rotate/copy them. Laser scanners and point cloud technology has revolutionized the way we can sample model information, for example, when a project involves an existing building. The application area of this technology is expected to grow. \n\n<p>There are three types of API related to Point Cloud feature:\n\n<ul>\n<li>Client API – create and manipulate point cloud instance within Revit.\n<li>Custom Point Cloud Engine API – supply points in a point cloud to Revit.\n<li>Point Cloud Indexer API – convert data from custom format to indexed (.pcg) format used by Revit and other Autodesk products.\n</li></li></li></ul>\n<p>The first, Client API is to handle an instance of point cloud. It also offers tools to aid interacting with the users, such as selection filters and highlighting and isolating a portion of point cloud.\n\n<p>Revit software comes with .pcg Point Cloud Engine, which is the same as AutoCAD software. \nHowever, any other format can be supported in two ways, using either the second or the third API. \nThe second API, Point Cloud Engine API, provides a plug-in to offer a different engine instead of built-in pcg engine.  \n\n<p>The third, Point Cloud Indexer API, is for converting data with a different format into pcg format. \nRevit software offers other formats, such as .las, .xyb, .xyz, .pts, .fls and .fws, in this method. \nIndexer API by itself can be a topic for a separate article and we are not going to cover it here. \nYou can find a Point Cloud Indexer Sample code written by Adam Nagy on the ADN extranet. \nThis is C/C++ API and a completely separate executable that Revit software will call as an out of process. \n\n<p>In the following, we are going to focus on the second, the Point Cloud Engine API.\n\n<h4>Custom Engine Implementation</h4>\n<p>The Revit Point Cloud Engine API provides a set of interfaces which allow you to create custom point cloud engines to feed your point cloud data to Revit software for users to work on or to process further by plug-ins. \nThe SDK sample PointCloudEngine implements simple custom point cloud engines to demonstrate the API usage. We are going to look at this sample to give you a big picture of what point cloud engine API is about and how it can be defined.\n\n<p>In order to create a custom point cloud engine using Revit API, you must implement the following interfaces:\n\n<ul>\n<li>IPointCloudEngine – controls the link between Revit software and a custom Point Cloud engine.\n<li>IPointCloudAccess – provides access to an individual point cloud.\n<li>IPointSetIterator – called when iterating through a set of points on the engine.\n</li></li></li></ul>\n<p>A custom point cloud engine must implement IPointCloudEngine interface. An instance of this interface must be registered using PointCloudEnginesRegistry. This interface is like an entry point for Revit software.\n\n<p>Revit gets the instance of IPointCloudAccess interface from the IPointCloudEngine.CreatePointCloudAccess method. \nThe IPointCloudAccess.ReadPoints method gets a single set of points specified in a buffer. \nThe IPointCloudAccess.CreatePointSetIterator method returns an instance of IPointSetIterator interface. \nIPointSetIterator.ReadPoints iterates over blocks of the point cloud.  \nRevit reads points using these methods for display, selection, snapping and other operations with the point cloud.\n\n \n\n<h4>Registering an Engine</h4>\n<p>In the sample, three custom point cloud engines are registered using the PointCloudEngineRegistry class RegisterPointCloudEngine method in the application OnStartup method:\n\n<pre class=\"code\">\n  <span class=\"green\">// Predefined engine (non-randomized)</span>\n \n  <span class=\"teal\">IPointCloudEngine</span> engine \n    = <span class=\"blue\">new</span> BasicPointCloudEngine( \n      PointCloudEngineType.Predefined );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"apipc\"</span>, engine, <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// Predefined engine with randomized points at the cell borders</span>\n \n  engine = <span class=\"blue\">new</span> BasicPointCloudEngine( \n    PointCloudEngineType.RandomizedPoints );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"apipcr\"</span>, engine, <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// XML-based point cloud definition</span>\n \n  engine = <span class=\"blue\">new</span> BasicPointCloudEngine( \n    PointCloudEngineType.FileBased );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"xml\"</span>, engine, <span class=\"blue\">true</span> );\n</pre>\n<p>The first two engines are non-file based engines registered with arbitrary identifies (which you can decide). The third one is a file-based engine registered with a file extension it supports. Let's look at the engine types next.\n\n \n\n<!-- <h4>Engine Types</h4> -->\n<h4>File-Based Point Cloud Engine</h4>\n<p>A file-based point cloud engine processes the points defined in an external file. \nIn this sample, points are defined in a custom format in a XML file. \nOnce a file-based point cloud engine is created and registered with Revit with a file extension, the file can be inserted from the UI \u001cLink Point Cloud\u001d dialog, which you can access from:  [Insert] tab &gt; [Link] panel &gt; [Point Cloud] button. \nFile-based point cloud engines can extend types of point cloud files Revit software can insert:</p>\n<center>\n<img alt=\"Point cloud file formats with a custom engine registered\" src=\"img/kt_point_cloud_18.jpg\"/>\n</center>\n<!-- <p>Figure 1. Link Point Cloud dialog with a custom engine registered -->\n<p>In this specific sample, points are grouped and presented as \u001ccells\u001d in the \u001cTower.xml\u001d file provided. \nA cell represents a rectangular 3D box defined by two points at the lower left and upper right. \nPoints are created along with these edges of the box. \nA colour is assigned to a cell so that points for the cell have the same colour. \n\u001cTower.xml\u001d file defines three cells in a custom file format as shown below. \nThe first cell represents the largest rectangular box and two others represent the smaller boxes: \n\n<pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\"> </span><span class=\"red\">encoding</span><span class=\"blue\">=</span>\"<span class=\"blue\">utf-8</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Scale</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">2.5</span>\"<span class=\"blue\">/&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LowerLeft</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">0</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">UpperRight</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">200</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Color</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">#000000</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Randomize</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">True</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n  ...\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>Here is the point cloud created in a Revit model by inserting \u001cTower.xml\u001d. \nNote: for the purpose of demonstration, it is using the Randomize property in \u001cTower.xml\u001d so that the custom file-based point cloud engine adds some random offset to the points' location to mimic point cloud.</p>\n<center>\n<img alt=\"File-based point cloud imported\" src=\"img/kt_point_cloud_19.jpg\"/>\n</center>\n<!-- \n<p>Description: cid:image034.jpg@01CC7164.79A73010\n\n<p>Figure 2. A sample image after running the file-based point cloud command.\n-->\n<h4>Non-File Based Point Cloud Engine</h4>\n<p>The source of point information is flexible for non-file based point cloud engines. Non-file based point cloud engines allow the direct integration of point clouds to Revit software. In this sample, non-file based point cloud engines are designed to use points from hard-coded cells. However, it can be much more creative. \nFor example, non-file based point cloud engines could be designed to access a server to retrieve point information obtained by a laser scanning. \nIt can offer another powerful tool as you can imagine.\n\n<p>Non-file based point access is only provided through Revit API. There are three commands demonstrating this feature in the sample: \n\n<ul>\n<li>\u001cAdd predefined instance\u001d - creates points along with edges of hardcoded cells.\n<li>\u001cAdd randomized instance\u001d - adds random offset for points.\n<li>\u001cAdd randomized instance at transform\u001d - applies a rotation to the cells.\n</li></li></li></ul>\n<p>Here is a sample image from non-file based point cloud command:</p>\n<center>\n<img alt=\"Non-file-based point cloud imported\" src=\"img/kt_point_cloud_20.jpg\"/>\n</center>\n<!--\n<p>Description: cid:image035.jpg@01CC7164.79A73010\n\n<p>Figure 3. A sample image after running a non-file based point cloud command.\n-->\n<h4>Exporting a Point Cloud</h4>\n<p>The sample also demonstrates \u001cexport\u001d with non-file based point cloud engines. \nThe engine simply writes out points to an xml file. \nYou can run this feature from \u001cSerialize point cloud (utility)\u001d in Add-in tab. \nThe following is the excerpt from the main functionality: \n\n<pre class=\"code\">\n  PredefinedPointCloud cloud \n    = <span class=\"blue\">new</span> PredefinedPointCloud( <span class=\"maroon\">\"dummy\"</span> );\n \n  XDocument doc = <span class=\"blue\">new</span> XDocument();\n  XElement root = <span class=\"blue\">new</span> XElement( <span class=\"maroon\">\"PointCloud\"</span> );\n  cloud.SerializeObjectData( root );\n  doc.Add( root );\n \n  <span class=\"teal\">TextWriter</span> writer = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( \n    <span class=\"maroon\">@\"c:\\serializedPC.xml\"</span> );\n \n  doc.WriteTo( <span class=\"blue\">new</span> <span class=\"teal\">XmlTextWriter</span>( writer ) );\n \n  writer.Close();\n</pre>\n<p>Where XDocument represents an XML document and XElement an XML element. \nThey are a part of System.Xml.Linq.XDocument namespace.\n\n<p>I hope it gives you a good starting point for your exploration with the Point Cloud Engine API.\n\n<p>Many thanks to Katsu-san for this helpful introduction and overview!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0685_au_begins_point_cloud",
    "header_text": "Autodesk Revit Point Cloud Engine API",
    "local_header_href": "#autodesk-revit-point-cloud-engine-api",
    "chunk_text": "<h4>Autodesk Revit Point Cloud Engine API</h4><p>One of the new features of Revit 2012 is the point cloud functionality and the API for making use of it programmatically.\n\n<p>You can now insert a point cloud file into a Revit project, display them in model views, and select/move/rotate/copy them. Laser scanners and point cloud technology has revolutionized the way we can sample model information, for example, when a project involves an existing building. The application area of this technology is expected to grow. \n\n<p>There are three types of API related to Point Cloud feature:\n\n<ul>\n<li>Client API – create and manipulate point cloud instance within Revit.\n<li>Custom Point Cloud Engine API – supply points in a point cloud to Revit.\n<li>Point Cloud Indexer API – convert data from custom format to indexed (.pcg) format used by Revit and other Autodesk products.\n</li></li></li></ul>\n<p>The first, Client API is to handle an instance of point cloud. It also offers tools to aid interacting with the users, such as selection filters and highlighting and isolating a portion of point cloud.\n\n<p>Revit software comes with .pcg Point Cloud Engine, which is the same as AutoCAD software. \nHowever, any other format can be supported in two ways, using either the second or the third API. \nThe second API, Point Cloud Engine API, provides a plug-in to offer a different engine instead of built-in pcg engine.  \n\n<p>The third, Point Cloud Indexer API, is for converting data with a different format into pcg format. \nRevit software offers other formats, such as .las, .xyb, .xyz, .pts, .fls and .fws, in this method. \nIndexer API by itself can be a topic for a separate article and we are not going to cover it here. \nYou can find a Point Cloud Indexer Sample code written by Adam Nagy on the ADN extranet. \nThis is C/C++ API and a completely separate executable that Revit software will call as an out of process. \n\n<p>In the following, we are going to focus on the second, the Point Cloud Engine API.\n\n<h4>Custom Engine Implementation</h4>\n<p>The Revit Point Cloud Engine API provides a set of interfaces which allow you to create custom point cloud engines to feed your point cloud data to Revit software for users to work on or to process further by plug-ins. \nThe SDK sample PointCloudEngine implements simple custom point cloud engines to demonstrate the API usage. We are going to look at this sample to give you a big picture of what point cloud engine API is about and how it can be defined.\n\n<p>In order to create a custom point cloud engine using Revit API, you must implement the following interfaces:\n\n<ul>\n<li>IPointCloudEngine – controls the link between Revit software and a custom Point Cloud engine.\n<li>IPointCloudAccess – provides access to an individual point cloud.\n<li>IPointSetIterator – called when iterating through a set of points on the engine.\n</li></li></li></ul>\n<p>A custom point cloud engine must implement IPointCloudEngine interface. An instance of this interface must be registered using PointCloudEnginesRegistry. This interface is like an entry point for Revit software.\n\n<p>Revit gets the instance of IPointCloudAccess interface from the IPointCloudEngine.CreatePointCloudAccess method. \nThe IPointCloudAccess.ReadPoints method gets a single set of points specified in a buffer. \nThe IPointCloudAccess.CreatePointSetIterator method returns an instance of IPointSetIterator interface. \nIPointSetIterator.ReadPoints iterates over blocks of the point cloud.  \nRevit reads points using these methods for display, selection, snapping and other operations with the point cloud.\n\n \n\n<h4>Registering an Engine</h4>\n<p>In the sample, three custom point cloud engines are registered using the PointCloudEngineRegistry class RegisterPointCloudEngine method in the application OnStartup method:\n\n<pre class=\"code\">\n  <span class=\"green\">// Predefined engine (non-randomized)</span>\n \n  <span class=\"teal\">IPointCloudEngine</span> engine \n    = <span class=\"blue\">new</span> BasicPointCloudEngine( \n      PointCloudEngineType.Predefined );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"apipc\"</span>, engine, <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// Predefined engine with randomized points at the cell borders</span>\n \n  engine = <span class=\"blue\">new</span> BasicPointCloudEngine( \n    PointCloudEngineType.RandomizedPoints );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"apipcr\"</span>, engine, <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// XML-based point cloud definition</span>\n \n  engine = <span class=\"blue\">new</span> BasicPointCloudEngine( \n    PointCloudEngineType.FileBased );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"xml\"</span>, engine, <span class=\"blue\">true</span> );\n</pre>\n<p>The first two engines are non-file based engines registered with arbitrary identifies (which you can decide). The third one is a file-based engine registered with a file extension it supports. Let's look at the engine types next.\n\n \n\n<!-- <h4>Engine Types</h4> -->\n<h4>File-Based Point Cloud Engine</h4>\n<p>A file-based point cloud engine processes the points defined in an external file. \nIn this sample, points are defined in a custom format in a XML file. \nOnce a file-based point cloud engine is created and registered with Revit with a file extension, the file can be inserted from the UI \u001cLink Point Cloud\u001d dialog, which you can access from:  [Insert] tab &gt; [Link] panel &gt; [Point Cloud] button. \nFile-based point cloud engines can extend types of point cloud files Revit software can insert:</p>\n<center>\n<img alt=\"Point cloud file formats with a custom engine registered\" src=\"img/kt_point_cloud_18.jpg\"/>\n</center>\n<!-- <p>Figure 1. Link Point Cloud dialog with a custom engine registered -->\n<p>In this specific sample, points are grouped and presented as \u001ccells\u001d in the \u001cTower.xml\u001d file provided. \nA cell represents a rectangular 3D box defined by two points at the lower left and upper right. \nPoints are created along with these edges of the box. \nA colour is assigned to a cell so that points for the cell have the same colour. \n\u001cTower.xml\u001d file defines three cells in a custom file format as shown below. \nThe first cell represents the largest rectangular box and two others represent the smaller boxes: \n\n<pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\"> </span><span class=\"red\">encoding</span><span class=\"blue\">=</span>\"<span class=\"blue\">utf-8</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Scale</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">2.5</span>\"<span class=\"blue\">/&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LowerLeft</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">0</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">UpperRight</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">200</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Color</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">#000000</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Randomize</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">True</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n  ...\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>Here is the point cloud created in a Revit model by inserting \u001cTower.xml\u001d. \nNote: for the purpose of demonstration, it is using the Randomize property in \u001cTower.xml\u001d so that the custom file-based point cloud engine adds some random offset to the points' location to mimic point cloud.</p>\n<center>\n<img alt=\"File-based point cloud imported\" src=\"img/kt_point_cloud_19.jpg\"/>\n</center>\n<!-- \n<p>Description: cid:image034.jpg@01CC7164.79A73010\n\n<p>Figure 2. A sample image after running the file-based point cloud command.\n-->\n<h4>Non-File Based Point Cloud Engine</h4>\n<p>The source of point information is flexible for non-file based point cloud engines. Non-file based point cloud engines allow the direct integration of point clouds to Revit software. In this sample, non-file based point cloud engines are designed to use points from hard-coded cells. However, it can be much more creative. \nFor example, non-file based point cloud engines could be designed to access a server to retrieve point information obtained by a laser scanning. \nIt can offer another powerful tool as you can imagine.\n\n<p>Non-file based point access is only provided through Revit API. There are three commands demonstrating this feature in the sample: \n\n<ul>\n<li>\u001cAdd predefined instance\u001d - creates points along with edges of hardcoded cells.\n<li>\u001cAdd randomized instance\u001d - adds random offset for points.\n<li>\u001cAdd randomized instance at transform\u001d - applies a rotation to the cells.\n</li></li></li></ul>\n<p>Here is a sample image from non-file based point cloud command:</p>\n<center>\n<img alt=\"Non-file-based point cloud imported\" src=\"img/kt_point_cloud_20.jpg\"/>\n</center>\n<!--\n<p>Description: cid:image035.jpg@01CC7164.79A73010\n\n<p>Figure 3. A sample image after running a non-file based point cloud command.\n-->\n<h4>Exporting a Point Cloud</h4>\n<p>The sample also demonstrates \u001cexport\u001d with non-file based point cloud engines. \nThe engine simply writes out points to an xml file. \nYou can run this feature from \u001cSerialize point cloud (utility)\u001d in Add-in tab. \nThe following is the excerpt from the main functionality: \n\n<pre class=\"code\">\n  PredefinedPointCloud cloud \n    = <span class=\"blue\">new</span> PredefinedPointCloud( <span class=\"maroon\">\"dummy\"</span> );\n \n  XDocument doc = <span class=\"blue\">new</span> XDocument();\n  XElement root = <span class=\"blue\">new</span> XElement( <span class=\"maroon\">\"PointCloud\"</span> );\n  cloud.SerializeObjectData( root );\n  doc.Add( root );\n \n  <span class=\"teal\">TextWriter</span> writer = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( \n    <span class=\"maroon\">@\"c:\\serializedPC.xml\"</span> );\n \n  doc.WriteTo( <span class=\"blue\">new</span> <span class=\"teal\">XmlTextWriter</span>( writer ) );\n \n  writer.Close();\n</pre>\n<p>Where XDocument represents an XML document and XElement an XML element. \nThey are a part of System.Xml.Linq.XDocument namespace.\n\n<p>I hope it gives you a good starting point for your exploration with the Point Cloud Engine API.\n\n<p>Many thanks to Katsu-san for this helpful introduction and overview!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0685_au_begins_point_cloud",
    "header_text": "Custom Engine Implementation",
    "local_header_href": "#custom-engine-implementation",
    "chunk_text": "<h4>Custom Engine Implementation</h4><p>The Revit Point Cloud Engine API provides a set of interfaces which allow you to create custom point cloud engines to feed your point cloud data to Revit software for users to work on or to process further by plug-ins. \nThe SDK sample PointCloudEngine implements simple custom point cloud engines to demonstrate the API usage. We are going to look at this sample to give you a big picture of what point cloud engine API is about and how it can be defined.\n\n<p>In order to create a custom point cloud engine using Revit API, you must implement the following interfaces:\n\n<ul>\n<li>IPointCloudEngine – controls the link between Revit software and a custom Point Cloud engine.\n<li>IPointCloudAccess – provides access to an individual point cloud.\n<li>IPointSetIterator – called when iterating through a set of points on the engine.\n</li></li></li></ul>\n<p>A custom point cloud engine must implement IPointCloudEngine interface. An instance of this interface must be registered using PointCloudEnginesRegistry. This interface is like an entry point for Revit software.\n\n<p>Revit gets the instance of IPointCloudAccess interface from the IPointCloudEngine.CreatePointCloudAccess method. \nThe IPointCloudAccess.ReadPoints method gets a single set of points specified in a buffer. \nThe IPointCloudAccess.CreatePointSetIterator method returns an instance of IPointSetIterator interface. \nIPointSetIterator.ReadPoints iterates over blocks of the point cloud.  \nRevit reads points using these methods for display, selection, snapping and other operations with the point cloud.\n\n \n\n<h4>Registering an Engine</h4>\n<p>In the sample, three custom point cloud engines are registered using the PointCloudEngineRegistry class RegisterPointCloudEngine method in the application OnStartup method:\n\n<pre class=\"code\">\n  <span class=\"green\">// Predefined engine (non-randomized)</span>\n \n  <span class=\"teal\">IPointCloudEngine</span> engine \n    = <span class=\"blue\">new</span> BasicPointCloudEngine( \n      PointCloudEngineType.Predefined );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"apipc\"</span>, engine, <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// Predefined engine with randomized points at the cell borders</span>\n \n  engine = <span class=\"blue\">new</span> BasicPointCloudEngine( \n    PointCloudEngineType.RandomizedPoints );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"apipcr\"</span>, engine, <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// XML-based point cloud definition</span>\n \n  engine = <span class=\"blue\">new</span> BasicPointCloudEngine( \n    PointCloudEngineType.FileBased );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"xml\"</span>, engine, <span class=\"blue\">true</span> );\n</pre>\n<p>The first two engines are non-file based engines registered with arbitrary identifies (which you can decide). The third one is a file-based engine registered with a file extension it supports. Let's look at the engine types next.\n\n \n\n<!-- <h4>Engine Types</h4> -->\n<h4>File-Based Point Cloud Engine</h4>\n<p>A file-based point cloud engine processes the points defined in an external file. \nIn this sample, points are defined in a custom format in a XML file. \nOnce a file-based point cloud engine is created and registered with Revit with a file extension, the file can be inserted from the UI \u001cLink Point Cloud\u001d dialog, which you can access from:  [Insert] tab &gt; [Link] panel &gt; [Point Cloud] button. \nFile-based point cloud engines can extend types of point cloud files Revit software can insert:</p>\n<center>\n<img alt=\"Point cloud file formats with a custom engine registered\" src=\"img/kt_point_cloud_18.jpg\"/>\n</center>\n<!-- <p>Figure 1. Link Point Cloud dialog with a custom engine registered -->\n<p>In this specific sample, points are grouped and presented as \u001ccells\u001d in the \u001cTower.xml\u001d file provided. \nA cell represents a rectangular 3D box defined by two points at the lower left and upper right. \nPoints are created along with these edges of the box. \nA colour is assigned to a cell so that points for the cell have the same colour. \n\u001cTower.xml\u001d file defines three cells in a custom file format as shown below. \nThe first cell represents the largest rectangular box and two others represent the smaller boxes: \n\n<pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\"> </span><span class=\"red\">encoding</span><span class=\"blue\">=</span>\"<span class=\"blue\">utf-8</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Scale</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">2.5</span>\"<span class=\"blue\">/&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LowerLeft</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">0</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">UpperRight</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">200</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Color</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">#000000</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Randomize</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">True</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n  ...\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>Here is the point cloud created in a Revit model by inserting \u001cTower.xml\u001d. \nNote: for the purpose of demonstration, it is using the Randomize property in \u001cTower.xml\u001d so that the custom file-based point cloud engine adds some random offset to the points' location to mimic point cloud.</p>\n<center>\n<img alt=\"File-based point cloud imported\" src=\"img/kt_point_cloud_19.jpg\"/>\n</center>\n<!-- \n<p>Description: cid:image034.jpg@01CC7164.79A73010\n\n<p>Figure 2. A sample image after running the file-based point cloud command.\n-->\n<h4>Non-File Based Point Cloud Engine</h4>\n<p>The source of point information is flexible for non-file based point cloud engines. Non-file based point cloud engines allow the direct integration of point clouds to Revit software. In this sample, non-file based point cloud engines are designed to use points from hard-coded cells. However, it can be much more creative. \nFor example, non-file based point cloud engines could be designed to access a server to retrieve point information obtained by a laser scanning. \nIt can offer another powerful tool as you can imagine.\n\n<p>Non-file based point access is only provided through Revit API. There are three commands demonstrating this feature in the sample: \n\n<ul>\n<li>\u001cAdd predefined instance\u001d - creates points along with edges of hardcoded cells.\n<li>\u001cAdd randomized instance\u001d - adds random offset for points.\n<li>\u001cAdd randomized instance at transform\u001d - applies a rotation to the cells.\n</li></li></li></ul>\n<p>Here is a sample image from non-file based point cloud command:</p>\n<center>\n<img alt=\"Non-file-based point cloud imported\" src=\"img/kt_point_cloud_20.jpg\"/>\n</center>\n<!--\n<p>Description: cid:image035.jpg@01CC7164.79A73010\n\n<p>Figure 3. A sample image after running a non-file based point cloud command.\n-->\n<h4>Exporting a Point Cloud</h4>\n<p>The sample also demonstrates \u001cexport\u001d with non-file based point cloud engines. \nThe engine simply writes out points to an xml file. \nYou can run this feature from \u001cSerialize point cloud (utility)\u001d in Add-in tab. \nThe following is the excerpt from the main functionality: \n\n<pre class=\"code\">\n  PredefinedPointCloud cloud \n    = <span class=\"blue\">new</span> PredefinedPointCloud( <span class=\"maroon\">\"dummy\"</span> );\n \n  XDocument doc = <span class=\"blue\">new</span> XDocument();\n  XElement root = <span class=\"blue\">new</span> XElement( <span class=\"maroon\">\"PointCloud\"</span> );\n  cloud.SerializeObjectData( root );\n  doc.Add( root );\n \n  <span class=\"teal\">TextWriter</span> writer = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( \n    <span class=\"maroon\">@\"c:\\serializedPC.xml\"</span> );\n \n  doc.WriteTo( <span class=\"blue\">new</span> <span class=\"teal\">XmlTextWriter</span>( writer ) );\n \n  writer.Close();\n</pre>\n<p>Where XDocument represents an XML document and XElement an XML element. \nThey are a part of System.Xml.Linq.XDocument namespace.\n\n<p>I hope it gives you a good starting point for your exploration with the Point Cloud Engine API.\n\n<p>Many thanks to Katsu-san for this helpful introduction and overview!\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0685_au_begins_point_cloud",
    "header_text": "Registering an Engine",
    "local_header_href": "#registering-an-engine",
    "chunk_text": "<h4>Registering an Engine</h4><p>In the sample, three custom point cloud engines are registered using the PointCloudEngineRegistry class RegisterPointCloudEngine method in the application OnStartup method:\n\n<pre class=\"code\">\n  <span class=\"green\">// Predefined engine (non-randomized)</span>\n \n  <span class=\"teal\">IPointCloudEngine</span> engine \n    = <span class=\"blue\">new</span> BasicPointCloudEngine( \n      PointCloudEngineType.Predefined );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"apipc\"</span>, engine, <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// Predefined engine with randomized points at the cell borders</span>\n \n  engine = <span class=\"blue\">new</span> BasicPointCloudEngine( \n    PointCloudEngineType.RandomizedPoints );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"apipcr\"</span>, engine, <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// XML-based point cloud definition</span>\n \n  engine = <span class=\"blue\">new</span> BasicPointCloudEngine( \n    PointCloudEngineType.FileBased );\n \n  <span class=\"teal\">PointCloudEngineRegistry</span>.RegisterPointCloudEngine( \n    <span class=\"maroon\">\"xml\"</span>, engine, <span class=\"blue\">true</span> );\n</pre>\n<p>The first two engines are non-file based engines registered with arbitrary identifies (which you can decide). The third one is a file-based engine registered with a file extension it supports. Let's look at the engine types next.\n\n \n\n<!-- <h4>Engine Types</h4> -->\n<h4>File-Based Point Cloud Engine</h4>\n<p>A file-based point cloud engine processes the points defined in an external file. \nIn this sample, points are defined in a custom format in a XML file. \nOnce a file-based point cloud engine is created and registered with Revit with a file extension, the file can be inserted from the UI \u001cLink Point Cloud\u001d dialog, which you can access from:  [Insert] tab &gt; [Link] panel &gt; [Point Cloud] button. \nFile-based point cloud engines can extend types of point cloud files Revit software can insert:</p>\n<center>\n<img alt=\"Point cloud file formats with a custom engine registered\" src=\"img/kt_point_cloud_18.jpg\"/>\n</center>\n<!-- <p>Figure 1. Link Point Cloud dialog with a custom engine registered -->\n<p>In this specific sample, points are grouped and presented as \u001ccells\u001d in the \u001cTower.xml\u001d file provided. \nA cell represents a rectangular 3D box defined by two points at the lower left and upper right. \nPoints are created along with these edges of the box. \nA colour is assigned to a cell so that points for the cell have the same colour. \n\u001cTower.xml\u001d file defines three cells in a custom file format as shown below. \nThe first cell represents the largest rectangular box and two others represent the smaller boxes: \n\n<pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\"> </span><span class=\"red\">encoding</span><span class=\"blue\">=</span>\"<span class=\"blue\">utf-8</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Scale</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">2.5</span>\"<span class=\"blue\">/&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LowerLeft</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">0</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">UpperRight</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">200</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Color</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">#000000</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Randomize</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">True</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n  ...\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>Here is the point cloud created in a Revit model by inserting \u001cTower.xml\u001d. \nNote: for the purpose of demonstration, it is using the Randomize property in \u001cTower.xml\u001d so that the custom file-based point cloud engine adds some random offset to the points' location to mimic point cloud.</p>\n<center>\n<img alt=\"File-based point cloud imported\" src=\"img/kt_point_cloud_19.jpg\"/>\n</center>\n<!-- \n<p>Description: cid:image034.jpg@01CC7164.79A73010\n\n<p>Figure 2. A sample image after running the file-based point cloud command.\n-->\n<h4>Non-File Based Point Cloud Engine</h4>\n<p>The source of point information is flexible for non-file based point cloud engines. Non-file based point cloud engines allow the direct integration of point clouds to Revit software. In this sample, non-file based point cloud engines are designed to use points from hard-coded cells. However, it can be much more creative. \nFor example, non-file based point cloud engines could be designed to access a server to retrieve point information obtained by a laser scanning. \nIt can offer another powerful tool as you can imagine.\n\n<p>Non-file based point access is only provided through Revit API. There are three commands demonstrating this feature in the sample: \n\n<ul>\n<li>\u001cAdd predefined instance\u001d - creates points along with edges of hardcoded cells.\n<li>\u001cAdd randomized instance\u001d - adds random offset for points.\n<li>\u001cAdd randomized instance at transform\u001d - applies a rotation to the cells.\n</li></li></li></ul>\n<p>Here is a sample image from non-file based point cloud command:</p>\n<center>\n<img alt=\"Non-file-based point cloud imported\" src=\"img/kt_point_cloud_20.jpg\"/>\n</center>\n<!--\n<p>Description: cid:image035.jpg@01CC7164.79A73010\n\n<p>Figure 3. A sample image after running a non-file based point cloud command.\n-->\n<h4>Exporting a Point Cloud</h4>\n<p>The sample also demonstrates \u001cexport\u001d with non-file based point cloud engines. \nThe engine simply writes out points to an xml file. \nYou can run this feature from \u001cSerialize point cloud (utility)\u001d in Add-in tab. \nThe following is the excerpt from the main functionality: \n\n<pre class=\"code\">\n  PredefinedPointCloud cloud \n    = <span class=\"blue\">new</span> PredefinedPointCloud( <span class=\"maroon\">\"dummy\"</span> );\n \n  XDocument doc = <span class=\"blue\">new</span> XDocument();\n  XElement root = <span class=\"blue\">new</span> XElement( <span class=\"maroon\">\"PointCloud\"</span> );\n  cloud.SerializeObjectData( root );\n  doc.Add( root );\n \n  <span class=\"teal\">TextWriter</span> writer = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( \n    <span class=\"maroon\">@\"c:\\serializedPC.xml\"</span> );\n \n  doc.WriteTo( <span class=\"blue\">new</span> <span class=\"teal\">XmlTextWriter</span>( writer ) );\n \n  writer.Close();\n</pre>\n<p>Where XDocument represents an XML document and XElement an XML element. \nThey are a part of System.Xml.Linq.XDocument namespace.\n\n<p>I hope it gives you a good starting point for your exploration with the Point Cloud Engine API.\n\n<p>Many thanks to Katsu-san for this helpful introduction and overview!\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0685_au_begins_point_cloud",
    "header_text": "File-Based Point Cloud Engine",
    "local_header_href": "#file-based-point-cloud-engine",
    "chunk_text": "<h4>File-Based Point Cloud Engine</h4><p>A file-based point cloud engine processes the points defined in an external file. \nIn this sample, points are defined in a custom format in a XML file. \nOnce a file-based point cloud engine is created and registered with Revit with a file extension, the file can be inserted from the UI \u001cLink Point Cloud\u001d dialog, which you can access from:  [Insert] tab &gt; [Link] panel &gt; [Point Cloud] button. \nFile-based point cloud engines can extend types of point cloud files Revit software can insert:</p><center>\n<img alt=\"Point cloud file formats with a custom engine registered\" src=\"img/kt_point_cloud_18.jpg\"/>\n</center><p>In this specific sample, points are grouped and presented as \u001ccells\u001d in the \u001cTower.xml\u001d file provided. \nA cell represents a rectangular 3D box defined by two points at the lower left and upper right. \nPoints are created along with these edges of the box. \nA colour is assigned to a cell so that points for the cell have the same colour. \n\u001cTower.xml\u001d file defines three cells in a custom file format as shown below. \nThe first cell represents the largest rectangular box and two others represent the smaller boxes: \n\n<pre class=\"code\">\n<span class=\"blue\">&lt;?</span><span class=\"maroon\">xml</span><span class=\"blue\"> </span><span class=\"red\">version</span><span class=\"blue\">=</span>\"<span class=\"blue\">1.0</span>\"<span class=\"blue\"> </span><span class=\"red\">encoding</span><span class=\"blue\">=</span>\"<span class=\"blue\">utf-8</span>\"<span class=\"blue\">?&gt;</span>\n<span class=\"blue\">&lt;</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Scale</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">2.5</span>\"<span class=\"blue\">/&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LowerLeft</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">-30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">0</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">UpperRight</span><span class=\"blue\"> </span><span class=\"red\">X</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Y</span><span class=\"blue\">=</span>\"<span class=\"blue\">30</span>\"<span class=\"blue\"> </span><span class=\"red\">Z</span><span class=\"blue\">=</span>\"<span class=\"blue\">200</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Color</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">#000000</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Randomize</span><span class=\"blue\"> </span><span class=\"red\">value</span><span class=\"blue\">=</span>\"<span class=\"blue\">True</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Cell</span><span class=\"blue\">&gt;</span>\n  ...\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">PointCloud</span><span class=\"blue\">&gt;</span>\n</pre>\n<p>Here is the point cloud created in a Revit model by inserting \u001cTower.xml\u001d. \nNote: for the purpose of demonstration, it is using the Randomize property in \u001cTower.xml\u001d so that the custom file-based point cloud engine adds some random offset to the points' location to mimic point cloud.</p>\n<center>\n<img alt=\"File-based point cloud imported\" src=\"img/kt_point_cloud_19.jpg\"/>\n</center>\n<!-- \n<p>Description: cid:image034.jpg@01CC7164.79A73010\n\n<p>Figure 2. A sample image after running the file-based point cloud command.\n-->\n<h4>Non-File Based Point Cloud Engine</h4>\n<p>The source of point information is flexible for non-file based point cloud engines. Non-file based point cloud engines allow the direct integration of point clouds to Revit software. In this sample, non-file based point cloud engines are designed to use points from hard-coded cells. However, it can be much more creative. \nFor example, non-file based point cloud engines could be designed to access a server to retrieve point information obtained by a laser scanning. \nIt can offer another powerful tool as you can imagine.\n\n<p>Non-file based point access is only provided through Revit API. There are three commands demonstrating this feature in the sample: \n\n<ul>\n<li>\u001cAdd predefined instance\u001d - creates points along with edges of hardcoded cells.\n<li>\u001cAdd randomized instance\u001d - adds random offset for points.\n<li>\u001cAdd randomized instance at transform\u001d - applies a rotation to the cells.\n</li></li></li></ul>\n<p>Here is a sample image from non-file based point cloud command:</p>\n<center>\n<img alt=\"Non-file-based point cloud imported\" src=\"img/kt_point_cloud_20.jpg\"/>\n</center>\n<!--\n<p>Description: cid:image035.jpg@01CC7164.79A73010\n\n<p>Figure 3. A sample image after running a non-file based point cloud command.\n-->\n<h4>Exporting a Point Cloud</h4>\n<p>The sample also demonstrates \u001cexport\u001d with non-file based point cloud engines. \nThe engine simply writes out points to an xml file. \nYou can run this feature from \u001cSerialize point cloud (utility)\u001d in Add-in tab. \nThe following is the excerpt from the main functionality: \n\n<pre class=\"code\">\n  PredefinedPointCloud cloud \n    = <span class=\"blue\">new</span> PredefinedPointCloud( <span class=\"maroon\">\"dummy\"</span> );\n \n  XDocument doc = <span class=\"blue\">new</span> XDocument();\n  XElement root = <span class=\"blue\">new</span> XElement( <span class=\"maroon\">\"PointCloud\"</span> );\n  cloud.SerializeObjectData( root );\n  doc.Add( root );\n \n  <span class=\"teal\">TextWriter</span> writer = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( \n    <span class=\"maroon\">@\"c:\\serializedPC.xml\"</span> );\n \n  doc.WriteTo( <span class=\"blue\">new</span> <span class=\"teal\">XmlTextWriter</span>( writer ) );\n \n  writer.Close();\n</pre>\n<p>Where XDocument represents an XML document and XElement an XML element. \nThey are a part of System.Xml.Linq.XDocument namespace.\n\n<p>I hope it gives you a good starting point for your exploration with the Point Cloud Engine API.\n\n<p>Many thanks to Katsu-san for this helpful introduction and overview!\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0685_au_begins_point_cloud",
    "header_text": "Non-File Based Point Cloud Engine",
    "local_header_href": "#non-file-based-point-cloud-engine",
    "chunk_text": "<h4>Non-File Based Point Cloud Engine</h4><p>The source of point information is flexible for non-file based point cloud engines. Non-file based point cloud engines allow the direct integration of point clouds to Revit software. In this sample, non-file based point cloud engines are designed to use points from hard-coded cells. However, it can be much more creative. \nFor example, non-file based point cloud engines could be designed to access a server to retrieve point information obtained by a laser scanning. \nIt can offer another powerful tool as you can imagine.\n\n<p>Non-file based point access is only provided through Revit API. There are three commands demonstrating this feature in the sample: \n\n<ul>\n<li>\u001cAdd predefined instance\u001d - creates points along with edges of hardcoded cells.\n<li>\u001cAdd randomized instance\u001d - adds random offset for points.\n<li>\u001cAdd randomized instance at transform\u001d - applies a rotation to the cells.\n</li></li></li></ul>\n<p>Here is a sample image from non-file based point cloud command:</p>\n<center>\n<img alt=\"Non-file-based point cloud imported\" src=\"img/kt_point_cloud_20.jpg\"/>\n</center>\n<!--\n<p>Description: cid:image035.jpg@01CC7164.79A73010\n\n<p>Figure 3. A sample image after running a non-file based point cloud command.\n-->\n<h4>Exporting a Point Cloud</h4>\n<p>The sample also demonstrates \u001cexport\u001d with non-file based point cloud engines. \nThe engine simply writes out points to an xml file. \nYou can run this feature from \u001cSerialize point cloud (utility)\u001d in Add-in tab. \nThe following is the excerpt from the main functionality: \n\n<pre class=\"code\">\n  PredefinedPointCloud cloud \n    = <span class=\"blue\">new</span> PredefinedPointCloud( <span class=\"maroon\">\"dummy\"</span> );\n \n  XDocument doc = <span class=\"blue\">new</span> XDocument();\n  XElement root = <span class=\"blue\">new</span> XElement( <span class=\"maroon\">\"PointCloud\"</span> );\n  cloud.SerializeObjectData( root );\n  doc.Add( root );\n \n  <span class=\"teal\">TextWriter</span> writer = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( \n    <span class=\"maroon\">@\"c:\\serializedPC.xml\"</span> );\n \n  doc.WriteTo( <span class=\"blue\">new</span> <span class=\"teal\">XmlTextWriter</span>( writer ) );\n \n  writer.Close();\n</pre>\n<p>Where XDocument represents an XML document and XElement an XML element. \nThey are a part of System.Xml.Linq.XDocument namespace.\n\n<p>I hope it gives you a good starting point for your exploration with the Point Cloud Engine API.\n\n<p>Many thanks to Katsu-san for this helpful introduction and overview!\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0685_au_begins_point_cloud",
    "header_text": "Exporting a Point Cloud",
    "local_header_href": "#exporting-a-point-cloud",
    "chunk_text": "<h4>Exporting a Point Cloud</h4><p>The sample also demonstrates \u001cexport\u001d with non-file based point cloud engines. \nThe engine simply writes out points to an xml file. \nYou can run this feature from \u001cSerialize point cloud (utility)\u001d in Add-in tab. \nThe following is the excerpt from the main functionality: \n\n<pre class=\"code\">\n  PredefinedPointCloud cloud \n    = <span class=\"blue\">new</span> PredefinedPointCloud( <span class=\"maroon\">\"dummy\"</span> );\n \n  XDocument doc = <span class=\"blue\">new</span> XDocument();\n  XElement root = <span class=\"blue\">new</span> XElement( <span class=\"maroon\">\"PointCloud\"</span> );\n  cloud.SerializeObjectData( root );\n  doc.Add( root );\n \n  <span class=\"teal\">TextWriter</span> writer = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( \n    <span class=\"maroon\">@\"c:\\serializedPC.xml\"</span> );\n \n  doc.WriteTo( <span class=\"blue\">new</span> <span class=\"teal\">XmlTextWriter</span>( writer ) );\n \n  writer.Close();\n</pre>\n<p>Where XDocument represents an XML document and XElement an XML element. \nThey are a part of System.Xml.Linq.XDocument namespace.\n\n<p>I hope it gives you a good starting point for your exploration with the Point Cloud Engine API.\n\n<p>Many thanks to Katsu-san for this helpful introduction and overview!\n</p></p></p></p>"
  }
]