[
  {
    "original_filename": "0635_wall_join_geo",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0635_wall_join_geo",
    "header_text": "Wall Joins and Geometry",
    "local_header_href": "#wall-joins-and-geometry",
    "chunk_text": "<h3>Wall Joins and Geometry</h3><p>Once again, here is an issue that shows how Revit keeps strict control over the BIM, and that the possibilities to override the built-in behaviour are intentionally limited:\n\n<p><strong>Question:</strong> I have found the API method to AutoJoin elements, but I cannot seem to find any method that allows me to simply join two walls, as is possible in the Revit user interface. How can I achieve that?\n\n<p><strong>Answer:</strong> Basically, as far as I understand Revit, it wants to take and keep full control over wall joins itself in order to ensure consistency of the BIM.\n\nThe Document.AutoJoinElements method does nothing more than force the join to happen immediately. Note that the Revit API help file RevitAPI.chm adds the following remark to this method:\n\n<p style=\"color:darkblue\">Forces the elements in the Revit document to automatically join to their neighbours where appropriate.</p>\n<p style=\"color:darkblue\">Use this method to force elements in the document to automatically join to their neighbours. Note that when a transaction is committed there is an automatic call to automatically join elements.</p>\n<p>I \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/autojoinelements.html\">\ndiscussed the AutoJoinElements method</a> in \n\nsome depth and added a list of questions and answers on its usage when it was temporarily not automatically called on closing a transaction, but that issue resolved way back by \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/revit-2011-web-update-1.html\">\nRevit 2011 Web Update 1</a>.\n\n<p>So regardless of whether or not you call this method, the walls will be joined as Revit sees fit when the transaction is closed.\n\n<p>In the special case of walls, though, there is a limited amount of control left over to the user. \nMaybe that is exactly what you are referring to?\nThis control is also accessible programmatically through the following new methods introduced in the Revit 2012 API:\n\n<h4 style=\"color:darkblue\">Allow and disallow wall end joins</h4>\n<p style=\"color:darkblue\">The new methods</p>\n<ul>\n<li style=\"color:darkblue\">WallUtils.DisallowWallJoinAtEnd()</li>\n<li style=\"color:darkblue\">WallUtils.AllowWallJoinAtEnd()</li>\n<li style=\"color:darkblue\">WallUtils.IsWallJoinAllowedAtEnd()</li>\n</ul>\n<p style=\"color:darkblue\">provide access to the setting for whether or not joining is allowed at a particular end of the wall. If joins exist at the end of a wall and joins are disallowed, the walls will become disjoint. If joins are disallowed for the end of the wall, and then the setting is toggled to allow the joins, the wall will automatically join to its neighbours if there are any.</p>\n<p>I think that is probably what you want, and also all you can on this context.\n\n<p>In addition, you have the following members on the LocationCurve class:\n\n<ul>\n<li>ElementsAtJoin retrieves all elements joining to the end of this element's location curve or changes the order of elements participation in the end join with this location curve's end. \n<li>JoinType gets or changes the type of the join at the specified end. \n</li></li></ul>\n<p>In the user interface, you can also join multiple parallel walls to simulate a single layered wall. \nThis option is currently not available in the API, though.\n\n<p><strong>Question:</strong> I am interested in analysing the wall geometry and wish to retrieve the original unjoined geometry of the wall.\nHowever, everything that is accessible through the API is modified by the joins to the neighbouring walls.\nHow can I access the original geometry of the unjoined wall, as it is displayed in the user interface on selecting it?\n\n<p><strong>Answer:</strong> One possible approach is to determine the neighbouring joined walls at the ends using ElementsAtJoin, temporarily disallow wall joins in a separate transaction, retrieve the unjoined wall geometry, and abort the transaction to restore the original state.\nThis same technique was also used to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/material-quantity-extraction.html\">\ndetermine the gross material quantities of walls</a> by temporarily removing all openings from them.\n\nThat sample is now available in the MaterialQuantities SDK sample. \nIt shows that the transaction handling for the temporary operation can be simply and cleanly encapsulated.\n\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0635_wall_join_geo",
    "header_text": "Allow and disallow wall end joins",
    "local_header_href": "#allow-and-disallow-wall-end-joins",
    "chunk_text": "<h4 style=\"color:darkblue\">Allow and disallow wall end joins</h4><p style=\"color:darkblue\">The new methods</p><ul>\n<li style=\"color:darkblue\">WallUtils.DisallowWallJoinAtEnd()</li>\n<li style=\"color:darkblue\">WallUtils.AllowWallJoinAtEnd()</li>\n<li style=\"color:darkblue\">WallUtils.IsWallJoinAllowedAtEnd()</li>\n</ul><p style=\"color:darkblue\">provide access to the setting for whether or not joining is allowed at a particular end of the wall. If joins exist at the end of a wall and joins are disallowed, the walls will become disjoint. If joins are disallowed for the end of the wall, and then the setting is toggled to allow the joins, the wall will automatically join to its neighbours if there are any.</p><p>I think that is probably what you want, and also all you can on this context.\n\n<p>In addition, you have the following members on the LocationCurve class:\n\n<ul>\n<li>ElementsAtJoin retrieves all elements joining to the end of this element's location curve or changes the order of elements participation in the end join with this location curve's end. \n<li>JoinType gets or changes the type of the join at the specified end. \n</li></li></ul>\n<p>In the user interface, you can also join multiple parallel walls to simulate a single layered wall. \nThis option is currently not available in the API, though.\n\n<p><strong>Question:</strong> I am interested in analysing the wall geometry and wish to retrieve the original unjoined geometry of the wall.\nHowever, everything that is accessible through the API is modified by the joins to the neighbouring walls.\nHow can I access the original geometry of the unjoined wall, as it is displayed in the user interface on selecting it?\n\n<p><strong>Answer:</strong> One possible approach is to determine the neighbouring joined walls at the ends using ElementsAtJoin, temporarily disallow wall joins in a separate transaction, retrieve the unjoined wall geometry, and abort the transaction to restore the original state.\nThis same technique was also used to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/material-quantity-extraction.html\">\ndetermine the gross material quantities of walls</a> by temporarily removing all openings from them.\n\nThat sample is now available in the MaterialQuantities SDK sample. \nIt shows that the transaction handling for the temporary operation can be simply and cleanly encapsulated.\n\n</p></p></p></p></p>"
  }
]