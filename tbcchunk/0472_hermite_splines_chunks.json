[
  {
    "original_filename": "0472_hermite_splines",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0472_hermite_splines",
    "header_text": "Blends, Hermite Splines and Derivatives",
    "local_header_href": "#blends-hermite-splines-and-derivatives",
    "chunk_text": "<h3>Blends, Hermite Splines and Derivatives</h3><p>Here are some pretty exciting observations by Ritchie Jackson of the\n\n<a href=\"http://www.aac.bartlett.ucl.ac.uk\">\nAdaptive Architecture and Computation</a> programme\n\nat UCL, the\n\n<a href=\"http://en.wikipedia.org/wiki/University_College_London\">\nUniversity College London</a>,\n\non blends and Hermite splines:\n\n<h4>Blends, Hermite Splines &amp; Derivatives: Some Observations</h4>\n<p>Thanks for all the helpful code on your site – as I'm teaching myself to use the Revit API I've found the information invaluable.\nI'm doing an MSc. Adaptive Architecture and Computation at UCL, London and will be using Revit for my dissertation.\n\n<p>The discussion of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/newblend-sample.html\">\nNewBlend method</a> prompted\n\nme to attach a few screenshots.\nI've been using Blends driven by 2D Hermite splines created within a generic model family to test facade options. Interestingly, the API documentation states that \"<span style=\"color:darkblue\">In Revit you cannot create a Hermite curve but you can import it from other software such as AutoCAD</span>\" – which seems to be partially erroneous.\n\n<p>In conjunction with this I was interested in placing geometry on a 3D Hermite spline using the ComputeDerivatives function to extract the moving frame.\nThere seems to be an issue with the BasisY component which is meant to yield the normal vector via the second derivative.\nThis only appears to work with arcs and not with splines.\nIn the latter case the 'normal' points <i>roughly</i> in the direction of the second derivative (Van Verth, Bishop, 2008: \"Essential Mathematics for Games and Interactive Applications\") so it should be found by computing the cross-product of the tangent vector (BasisX) and the bi-normal (BasisZ). That is, the 'BasisY' component provided by ComputeDerivative appears to be incorrect:</p>\n<center>\n<img alt=\"Spline derivative anomaly\" src=\"img/ritchie-spline-derivative-anomaly.jpg\"/>\n</center>\n<p>Here is a piece of working code which illustrates the above issue,\n\n<a href=\"zip/ritchie-spline_test_01_mass.cs\">\nspline_test_01_mass.cs</a>.\n\nIt implements a class called by an Application Macro from within a metric conceptual mass family.\nIt would seem that 'CurveByPoints' and 'HermiteSpline' are one and the same thing as their moving frames are superimposed.</p>\n<p>Here is an image taken from a work-in-progress investigating the potential for creating geometry entirely via the API within a generic model family.\nAlthough the functions are more limited in comparison to the conceptual mass families, they are not too restrictive:</p>\n<center>\n<img alt=\"Facade extract\" src=\"img/ritchie-thesis-facade-extract-tower.jpg\"/>\n</center>\n<p>The following images demonstrate how the facade elements were constructed.\nWhilst the mullions are comprised of arcs for simplicity's sake, Hermite splines may be used to provide more variation:</p>\n<center>\n<img alt=\"Setout extract\" src=\"img/ritchie-thesis-facade-extract-setout.jpg\"/>\n</center>\n<p>Model line and curve elements have been generated for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/debug-geometric-form-creation.html\">\ngeometric form generation debugging</a> purposes,\n\nand additional intersection lines are used to generate the transom setouts.\n\n<p>Here are the blend elements created from CurveArray pairs, each consisting of an inner and outer Hermite spline joined by lines:</p>\n<center>\n<img alt=\"Blend extract\" src=\"img/ritchie-thesis-facade-extract-blend.jpg\"/>\n</center>\n\nHere is\n\n<a href=\"zip/ritchie-blend_spline_01.cs\">\nblend_spline.cs</a> containing\n\nthe code used to generate these models.\n\n<p>Very many thanks to Ritchie for providing these exciting insights and examples!\n\n<p>If you are interested in more examples like this, please post a comment to let us know.\n\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0472_hermite_splines",
    "header_text": "Blends, Hermite Splines & Derivatives: Some Observations",
    "local_header_href": "#blends-hermite-splines-derivatives-some-observations",
    "chunk_text": "<h4>Blends, Hermite Splines &amp; Derivatives: Some Observations</h4><p>Thanks for all the helpful code on your site – as I'm teaching myself to use the Revit API I've found the information invaluable.\nI'm doing an MSc. Adaptive Architecture and Computation at UCL, London and will be using Revit for my dissertation.\n\n<p>The discussion of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/newblend-sample.html\">\nNewBlend method</a> prompted\n\nme to attach a few screenshots.\nI've been using Blends driven by 2D Hermite splines created within a generic model family to test facade options. Interestingly, the API documentation states that \"<span style=\"color:darkblue\">In Revit you cannot create a Hermite curve but you can import it from other software such as AutoCAD</span>\" – which seems to be partially erroneous.\n\n<p>In conjunction with this I was interested in placing geometry on a 3D Hermite spline using the ComputeDerivatives function to extract the moving frame.\nThere seems to be an issue with the BasisY component which is meant to yield the normal vector via the second derivative.\nThis only appears to work with arcs and not with splines.\nIn the latter case the 'normal' points <i>roughly</i> in the direction of the second derivative (Van Verth, Bishop, 2008: \"Essential Mathematics for Games and Interactive Applications\") so it should be found by computing the cross-product of the tangent vector (BasisX) and the bi-normal (BasisZ). That is, the 'BasisY' component provided by ComputeDerivative appears to be incorrect:</p>\n<center>\n<img alt=\"Spline derivative anomaly\" src=\"img/ritchie-spline-derivative-anomaly.jpg\"/>\n</center>\n<p>Here is a piece of working code which illustrates the above issue,\n\n<a href=\"zip/ritchie-spline_test_01_mass.cs\">\nspline_test_01_mass.cs</a>.\n\nIt implements a class called by an Application Macro from within a metric conceptual mass family.\nIt would seem that 'CurveByPoints' and 'HermiteSpline' are one and the same thing as their moving frames are superimposed.</p>\n<p>Here is an image taken from a work-in-progress investigating the potential for creating geometry entirely via the API within a generic model family.\nAlthough the functions are more limited in comparison to the conceptual mass families, they are not too restrictive:</p>\n<center>\n<img alt=\"Facade extract\" src=\"img/ritchie-thesis-facade-extract-tower.jpg\"/>\n</center>\n<p>The following images demonstrate how the facade elements were constructed.\nWhilst the mullions are comprised of arcs for simplicity's sake, Hermite splines may be used to provide more variation:</p>\n<center>\n<img alt=\"Setout extract\" src=\"img/ritchie-thesis-facade-extract-setout.jpg\"/>\n</center>\n<p>Model line and curve elements have been generated for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/debug-geometric-form-creation.html\">\ngeometric form generation debugging</a> purposes,\n\nand additional intersection lines are used to generate the transom setouts.\n\n<p>Here are the blend elements created from CurveArray pairs, each consisting of an inner and outer Hermite spline joined by lines:</p>\n<center>\n<img alt=\"Blend extract\" src=\"img/ritchie-thesis-facade-extract-blend.jpg\"/>\n</center>\n\nHere is\n\n<a href=\"zip/ritchie-blend_spline_01.cs\">\nblend_spline.cs</a> containing\n\nthe code used to generate these models.\n\n<p>Very many thanks to Ritchie for providing these exciting insights and examples!\n\n<p>If you are interested in more examples like this, please post a comment to let us know.\n\n</p></p></p></p></p>"
  }
]