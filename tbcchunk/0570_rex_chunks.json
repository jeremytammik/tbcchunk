[
  {
    "original_filename": "0570_rex",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "The REX SDK",
    "local_header_href": "#the-rex-sdk",
    "chunk_text": "<h3>The REX SDK</h3><p>Last night I returned to the vegetarian restaurant that I remembered from my \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/verona-revit-api-training.html\">\nlast visit to Verona</a>. \n\nIf used to be called Suca Baruca, or crazy pumpkin.\nNow it changed its style a bit, and its name, to \n\n<a href=\"http://www.lafatazucchina.it\">\nLa Fata Zucchina</a>, ristorante biovegetariano; highly recommended!\n\n<p>I recently mentioned the main new features of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/revit-2012-api-features.html\">\nRevit 2012 API</a> and pointed out that many \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/many-issues-resolved.html\">\nwishes have been resolved</a> and\n\nnew features such as \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a> added.\n\nBesides the addition of some new features to the existing Revit API as we know and love it, there have also  been several completely new APIs and SDKs added, warranting entirely new subdirectories in the main Revit SDK folder:</p>\n<center>\n<img alt=\"Revit 2012 SDK contents\" src=\"img/revit_2012_sdk_contents_in_explorer.png\"/>\n</center>\n<p>The three new subdirectories are:\n\n<ul>\n<li>Point Cloud Indexing API\n<li>Revit Server SDK\n<li>REX SDK\n</li></li></li></ul>\n<p>Emmanuel Weyermann, Software Development Manager and gran capo of REX, has kindly provided the following introduction to the latter, the REX SDK.\nIt was already available in a kind of preview version for Revit 2011 and has now been promoted to official inclusion in the standard Revit SDK.\nFor more details, please see the ample documentation and sample collection in the REX SDK subfolder of the Revit 2012 SDK.\nThis overview is just provided to whet your appetite and make you aware of the new possibilities it offers:\n\n<h3>What is the REX SDK?</h3>\n<h4>What is REX?</h4>\n<p>The primary goal of REX is to help Revit API developers concentrate on essential development aspects when creating various add-ins for Revit, by providing support for typical, commonly used functionality.\n\n<p>The outcome of this approach is:\n\n<ul>\n<li>Acceleration of add-in development\n<li>Better consistency across add-ins\n<li>Seamless integration within Revit \n</li></li></li></ul>\n<p>REX is a technology or framework supporting development of add-ins for Revit and making them consistent and aligned with the way Revit interacts with users.\n\n<p>The primary goals for the REX framework can be defined as follows:\n\n<ul>\n<li>Provide a higher level of API interaction with Revit\n<li>Provide  components and tools for typical functionalities\n<li>Enable seamless add-in behaviour within the Revit environment\n<li>Enable easy add-in activation and registration\n</li></li></li></li></ul>\n<h4>What is the REX SDK?</h4>\n<p>The REX SDK is a development environment for Rapid Application Development purposes that helps to create, deploy and activate add-ins based on the REX technology.\n\n<p>The core part of the REX SDK is implemented in the form of a Microsoft Visual Studio C# template. Using the template provided, you can quickly build an add-in that has a similar look &amp; feel to Autodesk Revit Extensions.  \n\n<p>The REX SDK  is composed of:\n\n<ul>\n<li>Project Template (C#)\n<ul>\n<li>UI definition\n<li>Interactions\n<li>Localization support\n<li>Deployment\n<li>Microsoft Installation project\n</li></li></li></li></li></ul>\n<li>Documentation\n<ul>\n<li>Getting Started\n<li>User manual and design guidelines\n<li>API documentation\n<li>Samples\n</li></li></li></li></ul>\n</li></li></ul>\n<h4>To whom is it addressed?</h4>\n<p>The advantages of this technology can be useful to all Revit API developers making add-ins for Revit, but it's most efficient for those whom the following  aspects are applicable:\n\n<ul>\n<li>Developing multiple add-ins\n<li>Advanced UI creation for add-ins\n<li>Create commercial add-ins for further distribution\n<li>Developing links with other products\n</li></li></li></li></ul>\n<h4>What are the most interesting features for API developers?</h4>\n<ul>\n<li>C# project templates, ready to build, distribution and activation in Revit\n<li>Common UI controls such as EditBox, ComboBox, IndexLabel, etc.\n<li>Components for HTML report generation\n<li>Unit conversions and unit based parameters display and editing consistently with Revit\n<li>Automated class data serialization and storage within BIM models\n</li></li></li></li></li></ul>\n<h4>What are the benefits for Revit users?</h4>\n<p>The primary advantages for end-users are:\n\n<ul>\n<li>Consistent look &amp; feel across various add-ins.\n<li>Consistent behaviour aligned with Revit product (e.g. unit sensitive values edit and display).\n<li>Could be used on previous developed Revit add-ins to take advantage of dialogues, controls, units, and other utilities.\n</li></li></li></ul>\n<h4>What is the difference between the Revit and the REX API?</h4>\n<p>The REX SDK does not provide any additional access to internal Revit functionality.  The REX API extends the Revit API functionality with a set of new components. \n\n<h4>What products can this technology be applied to?</h4>\n<p>The REX based approach is applicable for the Revit Architecture, Revit Structure and Revit MEP products.\n\n<h4>When are alternative approaches recommended?</h4>\n<p>The REX SDK provides a set of tools to develop External Commands on top of the Revit API.  \nSome other common structures for Revit API applications are not supported by the REX SDK, including:\n\n<ul>\n<li>Dynamic model updaters\n<li>Events and event driven applications\n<li>Customized Ribbon panels and controls\n</li></li></li></ul>\n<p>In addition, it is not possible to define custom failure definitions from a REX SDK application, as they must be defined in the start-up of an external application.  For applications which need to use any of these API features, the REX SDK would not be appropriate.  \n\n<p>Another limitation of the REX SDK lies in the supported language: project templates and examples are provided only in C# and are not applicable for development in other .NET compatible languages.\n\n\n<h4>How do I get started?</h4>\n<p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "What is the REX SDK?",
    "local_header_href": "#what-is-the-rex-sdk",
    "chunk_text": "<h3>What is the REX SDK?</h3>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "What is REX?",
    "local_header_href": "#what-is-rex",
    "chunk_text": "<h4>What is REX?</h4><p>The primary goal of REX is to help Revit API developers concentrate on essential development aspects when creating various add-ins for Revit, by providing support for typical, commonly used functionality.\n\n<p>The outcome of this approach is:\n\n<ul>\n<li>Acceleration of add-in development\n<li>Better consistency across add-ins\n<li>Seamless integration within Revit \n</li></li></li></ul>\n<p>REX is a technology or framework supporting development of add-ins for Revit and making them consistent and aligned with the way Revit interacts with users.\n\n<p>The primary goals for the REX framework can be defined as follows:\n\n<ul>\n<li>Provide a higher level of API interaction with Revit\n<li>Provide  components and tools for typical functionalities\n<li>Enable seamless add-in behaviour within the Revit environment\n<li>Enable easy add-in activation and registration\n</li></li></li></li></ul>\n<h4>What is the REX SDK?</h4>\n<p>The REX SDK is a development environment for Rapid Application Development purposes that helps to create, deploy and activate add-ins based on the REX technology.\n\n<p>The core part of the REX SDK is implemented in the form of a Microsoft Visual Studio C# template. Using the template provided, you can quickly build an add-in that has a similar look &amp; feel to Autodesk Revit Extensions.  \n\n<p>The REX SDK  is composed of:\n\n<ul>\n<li>Project Template (C#)\n<ul>\n<li>UI definition\n<li>Interactions\n<li>Localization support\n<li>Deployment\n<li>Microsoft Installation project\n</li></li></li></li></li></ul>\n<li>Documentation\n<ul>\n<li>Getting Started\n<li>User manual and design guidelines\n<li>API documentation\n<li>Samples\n</li></li></li></li></ul>\n</li></li></ul>\n<h4>To whom is it addressed?</h4>\n<p>The advantages of this technology can be useful to all Revit API developers making add-ins for Revit, but it's most efficient for those whom the following  aspects are applicable:\n\n<ul>\n<li>Developing multiple add-ins\n<li>Advanced UI creation for add-ins\n<li>Create commercial add-ins for further distribution\n<li>Developing links with other products\n</li></li></li></li></ul>\n<h4>What are the most interesting features for API developers?</h4>\n<ul>\n<li>C# project templates, ready to build, distribution and activation in Revit\n<li>Common UI controls such as EditBox, ComboBox, IndexLabel, etc.\n<li>Components for HTML report generation\n<li>Unit conversions and unit based parameters display and editing consistently with Revit\n<li>Automated class data serialization and storage within BIM models\n</li></li></li></li></li></ul>\n<h4>What are the benefits for Revit users?</h4>\n<p>The primary advantages for end-users are:\n\n<ul>\n<li>Consistent look &amp; feel across various add-ins.\n<li>Consistent behaviour aligned with Revit product (e.g. unit sensitive values edit and display).\n<li>Could be used on previous developed Revit add-ins to take advantage of dialogues, controls, units, and other utilities.\n</li></li></li></ul>\n<h4>What is the difference between the Revit and the REX API?</h4>\n<p>The REX SDK does not provide any additional access to internal Revit functionality.  The REX API extends the Revit API functionality with a set of new components. \n\n<h4>What products can this technology be applied to?</h4>\n<p>The REX based approach is applicable for the Revit Architecture, Revit Structure and Revit MEP products.\n\n<h4>When are alternative approaches recommended?</h4>\n<p>The REX SDK provides a set of tools to develop External Commands on top of the Revit API.  \nSome other common structures for Revit API applications are not supported by the REX SDK, including:\n\n<ul>\n<li>Dynamic model updaters\n<li>Events and event driven applications\n<li>Customized Ribbon panels and controls\n</li></li></li></ul>\n<p>In addition, it is not possible to define custom failure definitions from a REX SDK application, as they must be defined in the start-up of an external application.  For applications which need to use any of these API features, the REX SDK would not be appropriate.  \n\n<p>Another limitation of the REX SDK lies in the supported language: project templates and examples are provided only in C# and are not applicable for development in other .NET compatible languages.\n\n\n<h4>How do I get started?</h4>\n<p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "What is the REX SDK?",
    "local_header_href": "#what-is-the-rex-sdk",
    "chunk_text": "<h4>What is the REX SDK?</h4><p>The REX SDK is a development environment for Rapid Application Development purposes that helps to create, deploy and activate add-ins based on the REX technology.\n\n<p>The core part of the REX SDK is implemented in the form of a Microsoft Visual Studio C# template. Using the template provided, you can quickly build an add-in that has a similar look &amp; feel to Autodesk Revit Extensions.  \n\n<p>The REX SDK  is composed of:\n\n<ul>\n<li>Project Template (C#)\n<ul>\n<li>UI definition\n<li>Interactions\n<li>Localization support\n<li>Deployment\n<li>Microsoft Installation project\n</li></li></li></li></li></ul>\n<li>Documentation\n<ul>\n<li>Getting Started\n<li>User manual and design guidelines\n<li>API documentation\n<li>Samples\n</li></li></li></li></ul>\n</li></li></ul>\n<h4>To whom is it addressed?</h4>\n<p>The advantages of this technology can be useful to all Revit API developers making add-ins for Revit, but it's most efficient for those whom the following  aspects are applicable:\n\n<ul>\n<li>Developing multiple add-ins\n<li>Advanced UI creation for add-ins\n<li>Create commercial add-ins for further distribution\n<li>Developing links with other products\n</li></li></li></li></ul>\n<h4>What are the most interesting features for API developers?</h4>\n<ul>\n<li>C# project templates, ready to build, distribution and activation in Revit\n<li>Common UI controls such as EditBox, ComboBox, IndexLabel, etc.\n<li>Components for HTML report generation\n<li>Unit conversions and unit based parameters display and editing consistently with Revit\n<li>Automated class data serialization and storage within BIM models\n</li></li></li></li></li></ul>\n<h4>What are the benefits for Revit users?</h4>\n<p>The primary advantages for end-users are:\n\n<ul>\n<li>Consistent look &amp; feel across various add-ins.\n<li>Consistent behaviour aligned with Revit product (e.g. unit sensitive values edit and display).\n<li>Could be used on previous developed Revit add-ins to take advantage of dialogues, controls, units, and other utilities.\n</li></li></li></ul>\n<h4>What is the difference between the Revit and the REX API?</h4>\n<p>The REX SDK does not provide any additional access to internal Revit functionality.  The REX API extends the Revit API functionality with a set of new components. \n\n<h4>What products can this technology be applied to?</h4>\n<p>The REX based approach is applicable for the Revit Architecture, Revit Structure and Revit MEP products.\n\n<h4>When are alternative approaches recommended?</h4>\n<p>The REX SDK provides a set of tools to develop External Commands on top of the Revit API.  \nSome other common structures for Revit API applications are not supported by the REX SDK, including:\n\n<ul>\n<li>Dynamic model updaters\n<li>Events and event driven applications\n<li>Customized Ribbon panels and controls\n</li></li></li></ul>\n<p>In addition, it is not possible to define custom failure definitions from a REX SDK application, as they must be defined in the start-up of an external application.  For applications which need to use any of these API features, the REX SDK would not be appropriate.  \n\n<p>Another limitation of the REX SDK lies in the supported language: project templates and examples are provided only in C# and are not applicable for development in other .NET compatible languages.\n\n\n<h4>How do I get started?</h4>\n<p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "To whom is it addressed?",
    "local_header_href": "#to-whom-is-it-addressed",
    "chunk_text": "<h4>To whom is it addressed?</h4><p>The advantages of this technology can be useful to all Revit API developers making add-ins for Revit, but it's most efficient for those whom the following  aspects are applicable:\n\n<ul>\n<li>Developing multiple add-ins\n<li>Advanced UI creation for add-ins\n<li>Create commercial add-ins for further distribution\n<li>Developing links with other products\n</li></li></li></li></ul>\n<h4>What are the most interesting features for API developers?</h4>\n<ul>\n<li>C# project templates, ready to build, distribution and activation in Revit\n<li>Common UI controls such as EditBox, ComboBox, IndexLabel, etc.\n<li>Components for HTML report generation\n<li>Unit conversions and unit based parameters display and editing consistently with Revit\n<li>Automated class data serialization and storage within BIM models\n</li></li></li></li></li></ul>\n<h4>What are the benefits for Revit users?</h4>\n<p>The primary advantages for end-users are:\n\n<ul>\n<li>Consistent look &amp; feel across various add-ins.\n<li>Consistent behaviour aligned with Revit product (e.g. unit sensitive values edit and display).\n<li>Could be used on previous developed Revit add-ins to take advantage of dialogues, controls, units, and other utilities.\n</li></li></li></ul>\n<h4>What is the difference between the Revit and the REX API?</h4>\n<p>The REX SDK does not provide any additional access to internal Revit functionality.  The REX API extends the Revit API functionality with a set of new components. \n\n<h4>What products can this technology be applied to?</h4>\n<p>The REX based approach is applicable for the Revit Architecture, Revit Structure and Revit MEP products.\n\n<h4>When are alternative approaches recommended?</h4>\n<p>The REX SDK provides a set of tools to develop External Commands on top of the Revit API.  \nSome other common structures for Revit API applications are not supported by the REX SDK, including:\n\n<ul>\n<li>Dynamic model updaters\n<li>Events and event driven applications\n<li>Customized Ribbon panels and controls\n</li></li></li></ul>\n<p>In addition, it is not possible to define custom failure definitions from a REX SDK application, as they must be defined in the start-up of an external application.  For applications which need to use any of these API features, the REX SDK would not be appropriate.  \n\n<p>Another limitation of the REX SDK lies in the supported language: project templates and examples are provided only in C# and are not applicable for development in other .NET compatible languages.\n\n\n<h4>How do I get started?</h4>\n<p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "What are the most interesting features for API developers?",
    "local_header_href": "#what-are-the-most-interesting-features-for-api-developers",
    "chunk_text": "<h4>What are the most interesting features for API developers?</h4><ul>\n<li>C# project templates, ready to build, distribution and activation in Revit\n<li>Common UI controls such as EditBox, ComboBox, IndexLabel, etc.\n<li>Components for HTML report generation\n<li>Unit conversions and unit based parameters display and editing consistently with Revit\n<li>Automated class data serialization and storage within BIM models\n</li></li></li></li></li></ul>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "What are the benefits for Revit users?",
    "local_header_href": "#what-are-the-benefits-for-revit-users",
    "chunk_text": "<h4>What are the benefits for Revit users?</h4><p>The primary advantages for end-users are:\n\n<ul>\n<li>Consistent look &amp; feel across various add-ins.\n<li>Consistent behaviour aligned with Revit product (e.g. unit sensitive values edit and display).\n<li>Could be used on previous developed Revit add-ins to take advantage of dialogues, controls, units, and other utilities.\n</li></li></li></ul>\n<h4>What is the difference between the Revit and the REX API?</h4>\n<p>The REX SDK does not provide any additional access to internal Revit functionality.  The REX API extends the Revit API functionality with a set of new components. \n\n<h4>What products can this technology be applied to?</h4>\n<p>The REX based approach is applicable for the Revit Architecture, Revit Structure and Revit MEP products.\n\n<h4>When are alternative approaches recommended?</h4>\n<p>The REX SDK provides a set of tools to develop External Commands on top of the Revit API.  \nSome other common structures for Revit API applications are not supported by the REX SDK, including:\n\n<ul>\n<li>Dynamic model updaters\n<li>Events and event driven applications\n<li>Customized Ribbon panels and controls\n</li></li></li></ul>\n<p>In addition, it is not possible to define custom failure definitions from a REX SDK application, as they must be defined in the start-up of an external application.  For applications which need to use any of these API features, the REX SDK would not be appropriate.  \n\n<p>Another limitation of the REX SDK lies in the supported language: project templates and examples are provided only in C# and are not applicable for development in other .NET compatible languages.\n\n\n<h4>How do I get started?</h4>\n<p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "What is the difference between the Revit and the REX API?",
    "local_header_href": "#what-is-the-difference-between-the-revit-and-the-rex-api",
    "chunk_text": "<h4>What is the difference between the Revit and the REX API?</h4><p>The REX SDK does not provide any additional access to internal Revit functionality.  The REX API extends the Revit API functionality with a set of new components. \n\n<h4>What products can this technology be applied to?</h4>\n<p>The REX based approach is applicable for the Revit Architecture, Revit Structure and Revit MEP products.\n\n<h4>When are alternative approaches recommended?</h4>\n<p>The REX SDK provides a set of tools to develop External Commands on top of the Revit API.  \nSome other common structures for Revit API applications are not supported by the REX SDK, including:\n\n<ul>\n<li>Dynamic model updaters\n<li>Events and event driven applications\n<li>Customized Ribbon panels and controls\n</li></li></li></ul>\n<p>In addition, it is not possible to define custom failure definitions from a REX SDK application, as they must be defined in the start-up of an external application.  For applications which need to use any of these API features, the REX SDK would not be appropriate.  \n\n<p>Another limitation of the REX SDK lies in the supported language: project templates and examples are provided only in C# and are not applicable for development in other .NET compatible languages.\n\n\n<h4>How do I get started?</h4>\n<p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "What products can this technology be applied to?",
    "local_header_href": "#what-products-can-this-technology-be-applied-to",
    "chunk_text": "<h4>What products can this technology be applied to?</h4><p>The REX based approach is applicable for the Revit Architecture, Revit Structure and Revit MEP products.\n\n<h4>When are alternative approaches recommended?</h4>\n<p>The REX SDK provides a set of tools to develop External Commands on top of the Revit API.  \nSome other common structures for Revit API applications are not supported by the REX SDK, including:\n\n<ul>\n<li>Dynamic model updaters\n<li>Events and event driven applications\n<li>Customized Ribbon panels and controls\n</li></li></li></ul>\n<p>In addition, it is not possible to define custom failure definitions from a REX SDK application, as they must be defined in the start-up of an external application.  For applications which need to use any of these API features, the REX SDK would not be appropriate.  \n\n<p>Another limitation of the REX SDK lies in the supported language: project templates and examples are provided only in C# and are not applicable for development in other .NET compatible languages.\n\n\n<h4>How do I get started?</h4>\n<p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "When are alternative approaches recommended?",
    "local_header_href": "#when-are-alternative-approaches-recommended",
    "chunk_text": "<h4>When are alternative approaches recommended?</h4><p>The REX SDK provides a set of tools to develop External Commands on top of the Revit API.  \nSome other common structures for Revit API applications are not supported by the REX SDK, including:\n\n<ul>\n<li>Dynamic model updaters\n<li>Events and event driven applications\n<li>Customized Ribbon panels and controls\n</li></li></li></ul>\n<p>In addition, it is not possible to define custom failure definitions from a REX SDK application, as they must be defined in the start-up of an external application.  For applications which need to use any of these API features, the REX SDK would not be appropriate.  \n\n<p>Another limitation of the REX SDK lies in the supported language: project templates and examples are provided only in C# and are not applicable for development in other .NET compatible languages.\n\n\n<h4>How do I get started?</h4>\n<p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0570_rex",
    "header_text": "How do I get started?",
    "local_header_href": "#how-do-i-get-started",
    "chunk_text": "<h4>How do I get started?</h4><p>The following steps will help to create a first REX based add-in for Revit:\n\n<ul>\n<li>Make sure that Microsoft Visual Studio 2010 is installed\n<li>Make sure that  Revit 2012 is installed\n<li>Open the Getting Started Manual and follow these steps:\n<ul>\n<li>Create a project template\n<li>Develop necessary code\n<li>Build the application\n<li>Open Revit and run the add-in\n</li></li></li></li></ul>\n</li></li></li></ul>\n<p>It would be great if you find this useful and helpful in raising productivity and enhancing the look and feel of your Revit API applications.\nGood luck!\n</p></p>"
  }
]