[
  {
    "original_filename": "0522_managed_windows_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0522_managed_windows_api",
    "header_text": "Managed Windows API",
    "local_header_href": "#managed-windows-api",
    "chunk_text": "<h3>Managed Windows API</h3><p>This useful library was pointed out by Augusto Gon√ßalves to Kean and by Kean on his \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2011/01/technology-advances-the-managed-windows-api.html\">\nblog</a>, \n\nand seems too good to be missed, so I'll reproduce the pointer here as well:\n\n<p>The \n\n<a href=\"http://mwinapi.sourceforge.net\">Managed Windows API</a> library:\n\n<p>Here are excerpts from this site regarding the problem:\n\n<p style=\"color:darkblue\">If you want use Windows functionality in a .NET application which is not covered by the .NET framework (there is no \"managed API\" available for it), you usually have to use PInvoke, an interface that allows to invoke raw API functions from C# and VB.NET.</p>\n<p>And the solution:\n\n<p style=\"color:darkblue\"><a href=\"http://mwinapi.sourceforge.net\">Managed Windows API</a> is a collection of C# components that wrap Windows API functionality. It contains those features the author needed for his C# development, but if you have components yourself you want to share, please submit them so that this project can grow.</p>\n<p>I hope you find this useful too. Thanks to Kean and Augusto for pointing it out!\n</p></p></p></p></p>"
  }
]