[
  {
    "original_filename": "1169_ts_1_remove_reference",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1169_ts_1_remove_reference",
    "header_text": "Technical Summit Day 1 and Removing References",
    "local_header_href": "#technical-summit-day-1-and-removing-references",
    "chunk_text": "<h3>Technical Summit Day 1 and Removing References</h3><p>Today was the first day of the Autodesk internal Technical Summit in Toronto, and pretty exciting.</p><p>Also, I just had a note from Norway on how to <a href=\"#3\">remove references</a> that looks worthwhile sharing.</p><p>So here is a list of today's multifaceted topics:</p><ul>\n<li><a href=\"#3\">Recent rendering research</a></li>\n<li><a href=\"#4\">JavaScript optimisation</a></li>\n<li><a href=\"#5\">Spherical harmonics</a></li>\n<li><a href=\"#6\">Web app packages</a></li>\n<li><a href=\"#7\">Removing RVT links</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1169_ts_1_remove_reference",
    "header_text": "Technical Summit Day 1",
    "local_header_href": "#technical-summit-day-1",
    "chunk_text": "<h4>Technical Summit Day 1</h4><p>This being an internal meeting, I cannot talk openly about all the topics covered.</p><p>A couple of titbits that I found especially exciting are based on openly available research, though, so I can't do much harm mentioning those.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1169_ts_1_remove_reference",
    "header_text": "R3 – Recent Rendering Research",
    "local_header_href": "#r3-recent-rendering-research",
    "chunk_text": "<h4>R<sup>3</sup> – Recent Rendering Research</h4><p>One talk discussed viewing and rendering and mentioned these exciting recent results that are all being incorporated:</p><ul>\n<li>Normalized Blinn Shading – Hoffman, Naty, 'Crafting Physically Motivated Shading Models for Game Development', SIGGRAPH 2010</li>\n<li>HDR image based diffuse and reflection, with pre-computed BRDF stored in mipmaps – Lagarde, S.,\n\n<a href=\"http://seblagarde.wordpress.com/2012/06/10/amd-cubemapgen-for-physically-based-rendering\">\nAMD Cubemapgen for physically based rendering</a></li>\n<li>Alchemy Ambient Obscurance – McGuire et al, “The Alchemy Screen-Space Ambient Obscurance Algorithm”, HPG 2011</li>\n</ul><a name=\"4\"></a>"
  },
  {
    "original_filename": "1169_ts_1_remove_reference",
    "header_text": "JavaScript Optimisation",
    "local_header_href": "#javascript-optimisation",
    "chunk_text": "<h4>JavaScript Optimisation</h4><p>The same presentation also mentioned some impressive tips and tricks for enhancing JavaScript performance, e.g. encoding metadata requiring quick lookup in SQL tables, then mapping those tables to JSON arrays.</p><p>Further fundamental JavaScript performance optimisation recommendations include:</p><ul>\n<li>Use worker threads for expensive operations</li>\n<li>Avoid allocating objects</li>\n<li>Avoid expensive data representation that requires heavy processing</li>\n<ul>\n<li>Use ArrayBuffer or Array instead of Object (hashmap) to hold collections</li>\n<li>Use\n<a href=\"http://divergentcoder.com/Coding/2011/02/22/aos-soa-explorations-part-1.html\">\nSoA instead of AoS representation</a> for\nlarge lists of things</li>\n</ul>\n<li>Dereference unused objects to get them garbage collected</li>\n<li>Cache the invariants (avoid repeated calls/references)</li>\n<li>The browsers have excellent profilers – use them!</li>\n</ul><a name=\"5\"></a>"
  },
  {
    "original_filename": "1169_ts_1_remove_reference",
    "header_text": "Rotation Invariant Spherical Harmonics for Shape Classification",
    "local_header_href": "#rotation-invariant-spherical-harmonics-for-shape-classification",
    "chunk_text": "<h4>Rotation Invariant Spherical Harmonics for Shape Classification</h4><p>Check out this fascinating paper on\n\n<a href=\"http://kops.ub.uni-konstanz.de/bitstream/handle/urn:nbn:de:bsz:352-231423/Vranic_231423.pdf?sequence=3\">\nTools for 3D-Object Retrieval: Karhunen-Loeve Transform and Spherical Harmonics</a> by\n\nD.V. Vranić, D. Saupe, and J. Richter.</p><p>For practical use, it obviously needs to implement some kind of grouping of buckets of similar shapes, which is a completely different additional story...</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1169_ts_1_remove_reference",
    "header_text": "Highly Recommended Web App Packages",
    "local_header_href": "#highly-recommended-web-app-packages",
    "chunk_text": "<h4>Highly Recommended Web App Packages</h4><p>Are you building any kind of web application at all?</p><p>You certainly should be, nowadays, if you are a professional application developer.</p><p>If not, you should be aware that most bits and pieces of functionality of those 2 GB footprint desktop applications can be rebuilt in a browser with much smaller footprint in very short time. So if you don't do it, somebody else is going to pretty soon.</p><p>Here is a pretty comprehensive list of useful packages that help a lot in supporting numerous best practices for a web app:</p><ul>\n<li>Angular JS – <a href=\"https://angularjs.org\">angularjs.org</a></li>\n<li>Require JS – <a href=\"http://requirejs.org\">requirejs.org</a></li>\n<li>Twitter Bootstrap – <a href=\"http://getbootstrap.com\">getbootstrap.com</a></li>\n<li>CSS Less – <a href=\"http://lesscss.org\">lesscss.org</a></li>\n<li>Yeoman – <a href=\"http://yeoman.io\">yeoman.io</a>, including:</li>\n<ul>\n<li>Bower – <a href=\"http://bower.io\">bower.io</a> – Package Manager for managing dependencies for the web (i.e. Maven/NuGet)</li>\n<li>Grunt – <a href=\"http://gruntjs.com\">gruntjs.com</a> – Building Web Apps and Task Runner, e.g. for:</li>\n<ul>\n<li>Minification (JavaScript, HTML, CSS)</li>\n<li>Concatenate JavaScript Files</li>\n<li>JSDoc</li>\n<li>ESLint</li>\n<li>Less to CSS Conversion</li>\n<li>Running Unit Tests</li>\n</ul>\n</ul>\n<li>Testing</li>\n<ul>\n<li>Jasmine – <a href=\"http://jasmine.github.io\">jasmine.github.io</a> – Testing framework</li>\n<li>Karma – <a href=\"http://karma-runner.github.io/0.12/index.html\">karma-runner.github.io</a> – Test Runner</li>\n<li>Protractor – <a href=\"https://github.com/angular/protractor\">github.com/angular/protractor</a> – End to end test framework for Angular JS</li>\n</ul>\n</ul><p>By the way, Angular also provides the best tutorial for anything I have ever seen,\n\n<a href=\"http://angular.codeschool.com\">Shaping up with Angular.js</a>.</p><p>You absolutely must check it out, if only to be impressed by the level of didactics that is achievable today.</p><p>There was a lot more, of course... I am really looking forward to day 2!</p><a name=\"7\"></a>"
  },
  {
    "original_filename": "1169_ts_1_remove_reference",
    "header_text": "Removing RVT Links",
    "local_header_href": "#removing-rvt-links",
    "chunk_text": "<h4>Removing RVT Links</h4><p>Back to the everyday Revit API, here is a question raised and immediately answered by Håvard Dagsvik of\n\n<a href=\"http://www.cad-q.com/no\">\nCad Quality as</a>:</p><p><strong>Question:</strong> I'm trying to remove RVT links from a project.</p><p>This code works fine:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> RemoveRvtLinks( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">FilteredElementCollector</span> elemColl\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">RevitLinkType</span> ) );\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementId</span>&gt; eIds = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">RevitLinkType</span> r <span class=\"blue\">in</span> elemColl )\n    {\n      <span class=\"blue\">if</span>( r <span class=\"blue\">is</span> <span class=\"teal\">RevitLinkType</span> )\n      {\n        <span class=\"teal\">RevitLinkType</span> rvtLink = r <span class=\"blue\">as</span> <span class=\"teal\">RevitLinkType</span>;\n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == rvtLink || rvtLink.IsNestedLink )\n        {\n          <span class=\"blue\">continue</span>;\n        }\n        eIds.Add( rvtLink.Id );\n      }\n    }\n    doc.Delete( eIds );\n  }\n</pre><p>I'm using RevitLinkType instead of RevitLinkedInstance to avoid the Revit UI message saying that 'the last instance has been removed; do you want to remove the reference'.</p><p>The catch is that if the link is Unloaded, Not Found or for some reason not present both will throw an exception.</p><p>The API doesn’t seem to provide a 'Remove' method for links, only Document.Delete.</p><p>But in such cases there is nothing to delete.</p><p>Is this possible to do at all?</p><p><strong>Answer:</strong> Apparently yes.</p><p>After further testing, I can confirm that the code above works both on unloaded and not found links.</p><p>Here is a cleaned-up and slightly more succinct version using LINQ avoiding the duplicate casts above:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> RemoveRvtLinks2( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">FilteredElementCollector</span> links =\n      <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">RevitLinkType</span> ) );\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n      = links.Cast&lt;<span class=\"teal\">RevitLinkType</span>&gt;()\n        .Where&lt;<span class=\"teal\">RevitLinkType</span>&gt;( r =&gt; !( r.IsNestedLink ) )\n        .Select&lt;<span class=\"teal\">RevitLinkType</span>, <span class=\"teal\">ElementId</span>&gt;( r =&gt; r.Id )\n        .ToList&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    doc.Delete( ids );\n  }\n</pre>"
  }
]