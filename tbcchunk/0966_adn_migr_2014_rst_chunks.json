[
  {
    "original_filename": "0966_adn_migr_2014_rst",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "0966_adn_migr_2014_rst",
    "header_text": "ADN Training Material for Revit Structure 2014",
    "local_header_href": "#adn-training-material-for-revit-structure-2014",
    "chunk_text": "<h3>ADN Training Material for Revit Structure 2014</h3><p>Here comes the final step of migrating the ADN training material and The Building Coder samples to Revit 2014.\n\n<p>The previous steps included:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/migrating-the-adn-training-labs-to-revit-2014.html\">\nADN Revit API training labs</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/the-adn-sample-adnrme-for-revit-mep-2014.html\">\nADN Revit MEP sample AdnRme</a></li>\n<li>The Building Coder samples\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/migrating-the-building-coder-samples-to-revit-2014.html\">\nmigration</a> and\n\ndeprecated API usage\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/removing-deprecated-api-compilation-warnings.html\">\ncleanup</a>\n</li>\n</ul>\n<p>Now we turn to the final component, the ADN training material for Revit Structure, consisting of:</p>\n<ul>\n<li><a href=\"#2\">Revit Structure training labs</a></li>\n<li><a href=\"#3\">Revit Structure link sample</a></li>\n<li><a href=\"#4\">NewRstLab</a></li>\n<li><a href=\"#5\">RstAvfDmu</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>The ADN Revit Structure Training Labs</h4>\n<p>The ADN Revit Structure training labs include both a C# and a VB version.\n\n<p>They compile with zero errors right out of the box after updating the Revit API assembly references.</p>\n<p>They generate ten warnings each, though, all caused by use of the obsolete Curve.EndPoint property.\n\n<p>In VB, it is represented as an indexed property, whereas the C# version converts it to the Curve.get_EndPoint method instead.\nThis discrepancy is eliminated by the Revit 2014 API method Curve.GetEndPoint, which looks the same in both languages.\nThe advantage of this change is that the C# and VB code becomes virtually identical, whereas previously in C# the properties were converted to methods adorned with a \"get_\" prefix.</p>\n<a name=\"3\"></a>\n<h4>The ADN Revit Structure Link Sample</h4>\n<p>The link sample did not present any unexpected difficulties either.</p>\n<p>Again, I cleaned up some calls to the obsolete Curve.EndPoint and Document.Element properties, which have both been replaced by GetEndPoint and GetElement methods.\n\n<p>Please note that the associated AutoCAD .NET add-in requires an additional AutoCAD .NET API reference, accoremgd.dll.\nThe ARX C++ component has not yet been compiled, and we are thinking of replacing it with something else that does not require a full ARX installation to compile.</p>\n<a name=\"4\"></a>\n<h4>NewRstLab</h4>\n<p>Unlike the previous RST samples, the NewRstLab code produced a compilation error.</p>\n<p>After updating the Revit API assembly references, it generates\n\n<a href=\"zip/NewRstLab_2014_a.txt\">\n25 warnings and one error</a> reporting\n\nthat the AnalyticalModel class does not contain a definition for the CanSetAnalyticalOffset method used in the RstLab3_3_EditAnalyticalModel command:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Some structural component's analytical model</span>\n  <span class=\"green\">// can be offset, for instance column.</span>\n  <span class=\"green\">// However some cannot be offset, for instance </span>\n  <span class=\"green\">// beam. So we need to check first if the </span>\n  <span class=\"green\">// analytical model can be offset.</span>\n \n  <span class=\"blue\">if</span>( model.CanSetAnalyticalOffset() )\n  {\n    <span class=\"green\">// Move the analytical model </span>\n    <span class=\"green\">// one foot along X axis.</span>\n \n    model.SetOffset(\n      <span class=\"teal\">AnalyticalElementSelector</span>.Whole,\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 1, 0, 0 ) );\n  }\n</pre>\n<p>This method has no direct equivalent in the enhanced offset handling, so I simply replaced it by a try-catch handler for now.</p>\n<p>Most of the warnings were generated by calls to get_EndPoint, which again can be trivially replaced by GetEndPoint.</p>\n<p>Only\n\n<a href=\"zip/NewRstLab_2014_b.txt\">\n5 compilation warnings</a> remain, caused by the following two obsolete method calls:</p>\n<ul>\n<li>Line.get_Bound is obsolete: use Line.CreateBound instead.</li>\n<li>RebarShapeDefinitionBySegments.AddBendDefaultRadius(int, int, Autodesk.Revit.DB.Structure.RebarShapeBendAngle) is obsolete: use the addBendDefaultRadius with parameter turn type RebarShapeVertexTurn::Enum instead.</li>\n</ul>\n<p>Since I could not figure out off-hand how to fix the latter, I left it in for the moment.</p>\n<a name=\"5\"></a>\n<h4>RstAvfDmu</h4>\n<p>Last but not least, we come to the RST AVF and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/structural-dynamic-model-update-sample.html\">\nDMU</a> samples,\n\nwhich happily also only generate warnings about usage of the obsolete Curve.EndPoint property, quickly and easily fixed.</p>\n<a name=\"6\"></a>\n<h4>Conclusion and Download</h4>\n<p>Here is\n\n<a href=\"zip/adn_rst_2014_0.zip\">\nadn_rst_2014_0.zip</a> containing\n\nversion 2014.0.0.0 of the ADN training material for Revit Structure 2014.</p>\n<p>There are still a few details to be resolved, and we need to decide internally how to update the pretty trivial column type editing inside of AutoCAD for the RST link demo.</p>\n<p>As said, I plan to host all the ADN sample material on GitHub soon, to make is easier to maintain and collaborate on, and also follow Matt's\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/the-adn-sample-adnrme-for-revit-mep-2014.html#comment-6a00e553e1689788330191034be6cc970c\">\nexcellent advice</a> to\n\ndo the same with RevitLookup.</p>\n</p></p></p></p>"
  },
  {
    "original_filename": "0966_adn_migr_2014_rst",
    "header_text": "The ADN Revit Structure Training Labs",
    "local_header_href": "#the-adn-revit-structure-training-labs",
    "chunk_text": "<h4>The ADN Revit Structure Training Labs</h4><p>The ADN Revit Structure training labs include both a C# and a VB version.\n\n<p>They compile with zero errors right out of the box after updating the Revit API assembly references.</p>\n<p>They generate ten warnings each, though, all caused by use of the obsolete Curve.EndPoint property.\n\n<p>In VB, it is represented as an indexed property, whereas the C# version converts it to the Curve.get_EndPoint method instead.\nThis discrepancy is eliminated by the Revit 2014 API method Curve.GetEndPoint, which looks the same in both languages.\nThe advantage of this change is that the C# and VB code becomes virtually identical, whereas previously in C# the properties were converted to methods adorned with a \"get_\" prefix.</p>\n<a name=\"3\"></a>\n<h4>The ADN Revit Structure Link Sample</h4>\n<p>The link sample did not present any unexpected difficulties either.</p>\n<p>Again, I cleaned up some calls to the obsolete Curve.EndPoint and Document.Element properties, which have both been replaced by GetEndPoint and GetElement methods.\n\n<p>Please note that the associated AutoCAD .NET add-in requires an additional AutoCAD .NET API reference, accoremgd.dll.\nThe ARX C++ component has not yet been compiled, and we are thinking of replacing it with something else that does not require a full ARX installation to compile.</p>\n<a name=\"4\"></a>\n<h4>NewRstLab</h4>\n<p>Unlike the previous RST samples, the NewRstLab code produced a compilation error.</p>\n<p>After updating the Revit API assembly references, it generates\n\n<a href=\"zip/NewRstLab_2014_a.txt\">\n25 warnings and one error</a> reporting\n\nthat the AnalyticalModel class does not contain a definition for the CanSetAnalyticalOffset method used in the RstLab3_3_EditAnalyticalModel command:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Some structural component's analytical model</span>\n  <span class=\"green\">// can be offset, for instance column.</span>\n  <span class=\"green\">// However some cannot be offset, for instance </span>\n  <span class=\"green\">// beam. So we need to check first if the </span>\n  <span class=\"green\">// analytical model can be offset.</span>\n \n  <span class=\"blue\">if</span>( model.CanSetAnalyticalOffset() )\n  {\n    <span class=\"green\">// Move the analytical model </span>\n    <span class=\"green\">// one foot along X axis.</span>\n \n    model.SetOffset(\n      <span class=\"teal\">AnalyticalElementSelector</span>.Whole,\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 1, 0, 0 ) );\n  }\n</pre>\n<p>This method has no direct equivalent in the enhanced offset handling, so I simply replaced it by a try-catch handler for now.</p>\n<p>Most of the warnings were generated by calls to get_EndPoint, which again can be trivially replaced by GetEndPoint.</p>\n<p>Only\n\n<a href=\"zip/NewRstLab_2014_b.txt\">\n5 compilation warnings</a> remain, caused by the following two obsolete method calls:</p>\n<ul>\n<li>Line.get_Bound is obsolete: use Line.CreateBound instead.</li>\n<li>RebarShapeDefinitionBySegments.AddBendDefaultRadius(int, int, Autodesk.Revit.DB.Structure.RebarShapeBendAngle) is obsolete: use the addBendDefaultRadius with parameter turn type RebarShapeVertexTurn::Enum instead.</li>\n</ul>\n<p>Since I could not figure out off-hand how to fix the latter, I left it in for the moment.</p>\n<a name=\"5\"></a>\n<h4>RstAvfDmu</h4>\n<p>Last but not least, we come to the RST AVF and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/structural-dynamic-model-update-sample.html\">\nDMU</a> samples,\n\nwhich happily also only generate warnings about usage of the obsolete Curve.EndPoint property, quickly and easily fixed.</p>\n<a name=\"6\"></a>\n<h4>Conclusion and Download</h4>\n<p>Here is\n\n<a href=\"zip/adn_rst_2014_0.zip\">\nadn_rst_2014_0.zip</a> containing\n\nversion 2014.0.0.0 of the ADN training material for Revit Structure 2014.</p>\n<p>There are still a few details to be resolved, and we need to decide internally how to update the pretty trivial column type editing inside of AutoCAD for the RST link demo.</p>\n<p>As said, I plan to host all the ADN sample material on GitHub soon, to make is easier to maintain and collaborate on, and also follow Matt's\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/the-adn-sample-adnrme-for-revit-mep-2014.html#comment-6a00e553e1689788330191034be6cc970c\">\nexcellent advice</a> to\n\ndo the same with RevitLookup.</p>\n</p></p></p>"
  },
  {
    "original_filename": "0966_adn_migr_2014_rst",
    "header_text": "The ADN Revit Structure Link Sample",
    "local_header_href": "#the-adn-revit-structure-link-sample",
    "chunk_text": "<h4>The ADN Revit Structure Link Sample</h4><p>The link sample did not present any unexpected difficulties either.</p><p>Again, I cleaned up some calls to the obsolete Curve.EndPoint and Document.Element properties, which have both been replaced by GetEndPoint and GetElement methods.\n\n<p>Please note that the associated AutoCAD .NET add-in requires an additional AutoCAD .NET API reference, accoremgd.dll.\nThe ARX C++ component has not yet been compiled, and we are thinking of replacing it with something else that does not require a full ARX installation to compile.</p>\n<a name=\"4\"></a>\n<h4>NewRstLab</h4>\n<p>Unlike the previous RST samples, the NewRstLab code produced a compilation error.</p>\n<p>After updating the Revit API assembly references, it generates\n\n<a href=\"zip/NewRstLab_2014_a.txt\">\n25 warnings and one error</a> reporting\n\nthat the AnalyticalModel class does not contain a definition for the CanSetAnalyticalOffset method used in the RstLab3_3_EditAnalyticalModel command:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Some structural component's analytical model</span>\n  <span class=\"green\">// can be offset, for instance column.</span>\n  <span class=\"green\">// However some cannot be offset, for instance </span>\n  <span class=\"green\">// beam. So we need to check first if the </span>\n  <span class=\"green\">// analytical model can be offset.</span>\n \n  <span class=\"blue\">if</span>( model.CanSetAnalyticalOffset() )\n  {\n    <span class=\"green\">// Move the analytical model </span>\n    <span class=\"green\">// one foot along X axis.</span>\n \n    model.SetOffset(\n      <span class=\"teal\">AnalyticalElementSelector</span>.Whole,\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 1, 0, 0 ) );\n  }\n</pre>\n<p>This method has no direct equivalent in the enhanced offset handling, so I simply replaced it by a try-catch handler for now.</p>\n<p>Most of the warnings were generated by calls to get_EndPoint, which again can be trivially replaced by GetEndPoint.</p>\n<p>Only\n\n<a href=\"zip/NewRstLab_2014_b.txt\">\n5 compilation warnings</a> remain, caused by the following two obsolete method calls:</p>\n<ul>\n<li>Line.get_Bound is obsolete: use Line.CreateBound instead.</li>\n<li>RebarShapeDefinitionBySegments.AddBendDefaultRadius(int, int, Autodesk.Revit.DB.Structure.RebarShapeBendAngle) is obsolete: use the addBendDefaultRadius with parameter turn type RebarShapeVertexTurn::Enum instead.</li>\n</ul>\n<p>Since I could not figure out off-hand how to fix the latter, I left it in for the moment.</p>\n<a name=\"5\"></a>\n<h4>RstAvfDmu</h4>\n<p>Last but not least, we come to the RST AVF and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/structural-dynamic-model-update-sample.html\">\nDMU</a> samples,\n\nwhich happily also only generate warnings about usage of the obsolete Curve.EndPoint property, quickly and easily fixed.</p>\n<a name=\"6\"></a>\n<h4>Conclusion and Download</h4>\n<p>Here is\n\n<a href=\"zip/adn_rst_2014_0.zip\">\nadn_rst_2014_0.zip</a> containing\n\nversion 2014.0.0.0 of the ADN training material for Revit Structure 2014.</p>\n<p>There are still a few details to be resolved, and we need to decide internally how to update the pretty trivial column type editing inside of AutoCAD for the RST link demo.</p>\n<p>As said, I plan to host all the ADN sample material on GitHub soon, to make is easier to maintain and collaborate on, and also follow Matt's\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/the-adn-sample-adnrme-for-revit-mep-2014.html#comment-6a00e553e1689788330191034be6cc970c\">\nexcellent advice</a> to\n\ndo the same with RevitLookup.</p>\n</p>"
  },
  {
    "original_filename": "0966_adn_migr_2014_rst",
    "header_text": "NewRstLab",
    "local_header_href": "#newrstlab",
    "chunk_text": "<h4>NewRstLab</h4><p>Unlike the previous RST samples, the NewRstLab code produced a compilation error.</p><p>After updating the Revit API assembly references, it generates\n\n<a href=\"zip/NewRstLab_2014_a.txt\">\n25 warnings and one error</a> reporting\n\nthat the AnalyticalModel class does not contain a definition for the CanSetAnalyticalOffset method used in the RstLab3_3_EditAnalyticalModel command:</p><pre class=\"code\">\n  <span class=\"green\">// Some structural component's analytical model</span>\n  <span class=\"green\">// can be offset, for instance column.</span>\n  <span class=\"green\">// However some cannot be offset, for instance </span>\n  <span class=\"green\">// beam. So we need to check first if the </span>\n  <span class=\"green\">// analytical model can be offset.</span>\n \n  <span class=\"blue\">if</span>( model.CanSetAnalyticalOffset() )\n  {\n    <span class=\"green\">// Move the analytical model </span>\n    <span class=\"green\">// one foot along X axis.</span>\n \n    model.SetOffset(\n      <span class=\"teal\">AnalyticalElementSelector</span>.Whole,\n      <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 1, 0, 0 ) );\n  }\n</pre><p>This method has no direct equivalent in the enhanced offset handling, so I simply replaced it by a try-catch handler for now.</p><p>Most of the warnings were generated by calls to get_EndPoint, which again can be trivially replaced by GetEndPoint.</p><p>Only\n\n<a href=\"zip/NewRstLab_2014_b.txt\">\n5 compilation warnings</a> remain, caused by the following two obsolete method calls:</p><ul>\n<li>Line.get_Bound is obsolete: use Line.CreateBound instead.</li>\n<li>RebarShapeDefinitionBySegments.AddBendDefaultRadius(int, int, Autodesk.Revit.DB.Structure.RebarShapeBendAngle) is obsolete: use the addBendDefaultRadius with parameter turn type RebarShapeVertexTurn::Enum instead.</li>\n</ul><p>Since I could not figure out off-hand how to fix the latter, I left it in for the moment.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "0966_adn_migr_2014_rst",
    "header_text": "RstAvfDmu",
    "local_header_href": "#rstavfdmu",
    "chunk_text": "<h4>RstAvfDmu</h4><p>Last but not least, we come to the RST AVF and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/structural-dynamic-model-update-sample.html\">\nDMU</a> samples,\n\nwhich happily also only generate warnings about usage of the obsolete Curve.EndPoint property, quickly and easily fixed.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "0966_adn_migr_2014_rst",
    "header_text": "Conclusion and Download",
    "local_header_href": "#conclusion-and-download",
    "chunk_text": "<h4>Conclusion and Download</h4><p>Here is\n\n<a href=\"zip/adn_rst_2014_0.zip\">\nadn_rst_2014_0.zip</a> containing\n\nversion 2014.0.0.0 of the ADN training material for Revit Structure 2014.</p><p>There are still a few details to be resolved, and we need to decide internally how to update the pretty trivial column type editing inside of AutoCAD for the RST link demo.</p><p>As said, I plan to host all the ADN sample material on GitHub soon, to make is easier to maintain and collaborate on, and also follow Matt's\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/the-adn-sample-adnrme-for-revit-mep-2014.html#comment-6a00e553e1689788330191034be6cc970c\">\nexcellent advice</a> to\n\ndo the same with RevitLookup.</p>"
  }
]