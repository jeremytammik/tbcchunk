[
  {
    "original_filename": "0386_mep_system_creation",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0386_mep_system_creation",
    "header_text": "MEP System Creation",
    "local_header_href": "#mep-system-creation",
    "chunk_text": "<h3>MEP System Creation</h3><p>Yesterday was a great day here at the AEC DevCamp, except that I was unable to attend a session held by Scott Conover presenting material by Arnošt Löbel, since it collided with my own.\nI enjoyed myself in the latter, anyway, and so did the audience, it seemed.\n\n<p>Meanwhile, life outside DevCamp is also continuing, and here is a very interesting case submitted by my old friend Thomas Wegener and handled by Joe Ye on Revit MEP system creation.\nOur MEP expert Martin Schmid and Jorgen Dahl have also chipped in to help answer this.\n\n<p><strong>Question:</strong> I am working at creating a new duct system using the Revit API method\n\n<pre>\nMechanicalSystem NewMechanicalSystem(\n  Connector baseEquipmentConnector,\n  ConnectorSet connectors,\n  DuctSystemType );\n</pre>\n<p>According to the API documentation, the base equipment is optional for the system, so this argument may be a null reference.\n\n<p>In spite of this, I am always getting an exception if I try to create the system without the base equipment. Why?\n\n<p>I have also the feeling that Revit is checking the connector directions for specific systems, e.g. an air supply system requires a base equipment with an \"out connector\", and an air return system requires an \"in connector\". \nIs that true? \nIf so, is there a rule list for all pipe and duct systems?\n\n<p>Or are there general requirements like:\n\n<ul>\n<li>A system is always structured as a tree, with a singleton root, the base equipment connector.\n<li>If the base equipment connector is an \"out connector\" all other equipment connectors must be \"in\" and vice versa.\n</li></li></ul>\n<p><strong>Answer:</strong> Yes, you are correct in that these kind of rules exist and they are not completely documented in the API reference material.\n\n<p>I implemented the following test code to create a new mechanical system without a base equipment.\nIt can be used on the RVT model file provided with the AutoRoute sample in the 2011 SDK.\nPlease select the two air terminals and launch the command. \nIt creates a mechanical system consisting of these two air terminals:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdNewDuctSystem</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc,\n      <span class=\"maroon\">\"New Duct System\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">ConnectorSet</span> connectorSet = <span class=\"blue\">new</span> <span class=\"teal\">ConnectorSet</span>();\n \n    <span class=\"teal\">Connector</span> baseConnector = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">ConnectorSetIterator</span> csi;\n \n    <span class=\"green\">// select a Parallel Fan Powered VAV </span>\n    <span class=\"green\">// and some Supply Diffusers prior to running </span>\n    <span class=\"green\">// this command</span>\n \n    <span class=\"teal\">ElementSet</span> selection = uidoc.Selection.Elements;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> selection )\n    {\n      <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n      {\n        <span class=\"teal\">FamilyInstance</span> fi = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"teal\">Family</span> family = fi.Symbol.Family;\n \n        <span class=\"green\">// assume the selected Mechanical Equipment </span>\n        <span class=\"green\">// is the base equipment for new system:</span>\n \n        <span class=\"blue\">if</span>( family.FamilyCategory.Name\n          == <span class=\"maroon\">\"Mechanical Equipment\"</span> )\n        {\n          <span class=\"green\">// find the \"Out\" and \"SupplyAir\" connectors</span>\n          <span class=\"green\">// on the base equipment</span>\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != fi.MEPModel )\n          {\n            csi = fi.MEPModel.ConnectorManager\n              .Connectors.ForwardIterator();\n \n            <span class=\"blue\">while</span>( csi.MoveNext() )\n            {\n              <span class=\"teal\">Connector</span> conn = csi.Current <span class=\"blue\">as</span> <span class=\"teal\">Connector</span>;\n \n              <span class=\"blue\">if</span>( conn.Direction == <span class=\"teal\">FlowDirectionType</span>.Out\n                &amp;&amp; conn.DuctSystemType == <span class=\"teal\">DuctSystemType</span>.SupplyAir )\n              {\n                baseConnector = conn;\n                <span class=\"blue\">break</span>;\n              }\n            }\n          }\n        }\n        <span class=\"blue\">else</span> <span class=\"blue\">if</span>( family.FamilyCategory.Name == <span class=\"maroon\">\"Air Terminals\"</span> )\n        {\n          <span class=\"green\">// add selected Air Terminals to </span>\n          <span class=\"green\">// connector set for new mechanical system</span>\n \n          csi = fi.MEPModel.ConnectorManager\n            .Connectors.ForwardIterator();\n \n          csi.MoveNext();\n \n          connectorSet.Insert( csi.Current <span class=\"blue\">as</span> <span class=\"teal\">Connector</span> );\n        }\n      }\n    }\n \n    <span class=\"green\">// create a new SupplyAir mechanical system</span>\n \n    <span class=\"teal\">MechanicalSystem</span> ductSystem = doc.Create.NewMechanicalSystem(\n      baseConnector, connectorSet, <span class=\"teal\">DuctSystemType</span>.SupplyAir );\n \n    trans.Commit();\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>Regarding the base connector direction, I didn't see any documentation that explicitly points out this rule.\nAccording to my test, in a supply air system, if I select a connector whose direction is FlowDirectionType.In, then it fails to create the system, so the following rule that you assumed probably does apply:\n\n<ul>\n<li>If the base equipment connector is an \"out connector\" all other equipment connectors must be \"in\" and vice versa.\n</li></ul>\n<p><strong>Response:</strong> Thank you, you are right, your code works for me as well without providing a base connector for the SupplyAir system.\n\n<p>If you change the DuctSystemType.SupplyAir in the call to NewMechanicalSystem to DuctSystemType.ReturnAir your code will fail too in the AutoRoute model.\nIt works again if you insert return air terminals instead (also without the base connector).\n\n<p>I am still unclear about the constraints between:\n\n<ul>\n<li>Base connector direction and system types, for both duct and pipe.\n<li>ConnectorSet and system types, for both duct and pipe.\n</li></li></ul>\n<p><strong>Answer:</strong> According to my testing so far, I found that this is necessary: an air supply system needs an 'out connector' as a base equipment connector.\n\n<p>The 'rules' you refer to are right on.\n\n<p>Here is the material from Martin Schmid's presentation ME204-3 'Getting into the Flow: Understanding Connectors in Revit MEP Content' at Autodesk University 2008, which deals with this topic.\nIt does not cover everything, as quite a bit was left for the in-class demo, but should help:\n\n<ul>\n<li><a href=\"zip/ME204-3_Connectors_in_Revit_MEP_Content.pdf\">PDF handout document</a>.\n<li><a href=\"zip/ME204-3_Connectors_in_Revit_MEP_Content.ppt\">PPT presentation</a>.\n</li></li></ul>\n<p>In summary, yes, the flow direction has to match and systems should be setup as a \"tree\".\nThe flow direction should be based on the system type.\n\n<p>Flow direction should be set to \"out\" on the base equipment and \"in\" on all other equipment for a supply system.\nThe reverse is true for return systems.\n\n<p>Here is the more detailed specification extracted from Martin's material:\n\n<h4>Creating Duct Systems</h4>\n<p>Systems can be created from equipment or air terminals:\n\n<ol>\n<li>Supply Air systems can be created containing families with a Supply Air IN Connector\n<li>Return Air systems can be created containing families with a Return Air OUT Connector\n<li>Exhaust Air systems can be created containing families with an Exhaust Air OUT Connector\n</li></li></li></ol>\n<p>Note: You cannot create an 'Other' air system.\n\n<p>Mechanical Equipment Families can be the 'equipment for the system' using the following logic.\nThe equipment must have a:\n\n<ol>\n<li>Supply Air OUT connector to be the equipment for a Supply Air system.\n<li>Return Air IN connector to be the equipment for a Return Air system.\n<li>Exhaust Air IN connector to be the equipment for an Exhaust Air system.\n</li></li></li></ol>\n<p>Thus, it is possible to create a system named 'Relief Air' by using components with Return or Exhaust system connectors.\nSimilarly, a system named 'Outside Air' can be created using components with Supply system connectors.\n\n<p>So you assumption of the relationship between connector's direction and system type is correct.\n\n<p>Furthermore, just as you say, a system is always structured as a tree, with a singleton root, the base equipment connector.\n\n<p><strong>Final question:</strong> You described rules for duct systems.\nFor pipe systems, Revit provides types like SupplyHydronic, ReturnHydronic, etc. \nAre there similar restrictions as above defined for duct systems?\n\n<p><strong>Answer:</strong> Yes, for pipe systems, the rules are similar.\nThe following rule of connector direction always applies in Revit MEP:\n\n<p>Flow direction has to match and systems should be setup as a tree. \nWhat the flow direction should be is based on the system type.\n\n<p>Flow direction should be set to out on the base equipment and in on all other equipment for a supply system. \nThe reverse is true for return systems.\n\n<p>I packaged the test code provided by Joe above as a new external command CmdNewDuctSystem in The Building Coder samples.\n\nHere is\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_71.zip -->\n<a href=\"zip/bc_11_71.zip\">\nversion 2011.0.71.0</a>\n\nof the complete source code and Visual Studio solution including the new command.\n\n<p>Many thanks to all involved for this interesting discussion.\n\n<p>Time for packing, checking out, breakfast and a new day at DevCamp now.\nOnce again I am admiring a wonderful view on the brilliant morning outside the window.\nAgain the cloudless blue sky which started out in all kinds of beautiful hues shifting from red and pink and orange through to clear blue and sunny now.\n\n<p>My session today is on the Revit MEP API, so this was a good warm-up to get into the subject...\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0386_mep_system_creation",
    "header_text": "Creating Duct Systems",
    "local_header_href": "#creating-duct-systems",
    "chunk_text": "<h4>Creating Duct Systems</h4><p>Systems can be created from equipment or air terminals:\n\n<ol>\n<li>Supply Air systems can be created containing families with a Supply Air IN Connector\n<li>Return Air systems can be created containing families with a Return Air OUT Connector\n<li>Exhaust Air systems can be created containing families with an Exhaust Air OUT Connector\n</li></li></li></ol>\n<p>Note: You cannot create an 'Other' air system.\n\n<p>Mechanical Equipment Families can be the 'equipment for the system' using the following logic.\nThe equipment must have a:\n\n<ol>\n<li>Supply Air OUT connector to be the equipment for a Supply Air system.\n<li>Return Air IN connector to be the equipment for a Return Air system.\n<li>Exhaust Air IN connector to be the equipment for an Exhaust Air system.\n</li></li></li></ol>\n<p>Thus, it is possible to create a system named 'Relief Air' by using components with Return or Exhaust system connectors.\nSimilarly, a system named 'Outside Air' can be created using components with Supply system connectors.\n\n<p>So you assumption of the relationship between connector's direction and system type is correct.\n\n<p>Furthermore, just as you say, a system is always structured as a tree, with a singleton root, the base equipment connector.\n\n<p><strong>Final question:</strong> You described rules for duct systems.\nFor pipe systems, Revit provides types like SupplyHydronic, ReturnHydronic, etc. \nAre there similar restrictions as above defined for duct systems?\n\n<p><strong>Answer:</strong> Yes, for pipe systems, the rules are similar.\nThe following rule of connector direction always applies in Revit MEP:\n\n<p>Flow direction has to match and systems should be setup as a tree. \nWhat the flow direction should be is based on the system type.\n\n<p>Flow direction should be set to out on the base equipment and in on all other equipment for a supply system. \nThe reverse is true for return systems.\n\n<p>I packaged the test code provided by Joe above as a new external command CmdNewDuctSystem in The Building Coder samples.\n\nHere is\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_71.zip -->\n<a href=\"zip/bc_11_71.zip\">\nversion 2011.0.71.0</a>\n\nof the complete source code and Visual Studio solution including the new command.\n\n<p>Many thanks to all involved for this interesting discussion.\n\n<p>Time for packing, checking out, breakfast and a new day at DevCamp now.\nOnce again I am admiring a wonderful view on the brilliant morning outside the window.\nAgain the cloudless blue sky which started out in all kinds of beautiful hues shifting from red and pink and orange through to clear blue and sunny now.\n\n<p>My session today is on the Revit MEP API, so this was a good warm-up to get into the subject...\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]