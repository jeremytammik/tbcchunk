[
  {
    "original_filename": "0323_duplicate_mark_values",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0323_duplicate_mark_values",
    "header_text": "Duplicate Mark Values",
    "local_header_href": "#duplicate-mark-values",
    "chunk_text": "<h3>Duplicate Mark Values</h3><p>We already discussed the issue of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/door-marks.html\">\ndoor marks</a> and\n\nimplemented the Building Coder sample command CmdListMarks to demonstrate listing and modifying them programmatically.\nHere are a couple of additional questions that came up recently in this context from Dave Echols of\n\n<a href=\"http://www.haengineers.com\">\nHankins and Anderson, Inc.</a> which \n\nled to some important hints on performance and exception handling:\n\n<p><strong>Question:</strong> We have some large Revit models that have thousands of errors due to duplicate mark values.\nOn several of these, we have cleaned out the errors manually in order to speed up the loading of Revit.\nI have written the following external command to automate this process:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"teal\">Element</span> e;\n  <span class=\"blue\">int</span> num = 1;\n  <span class=\"teal\">ElementIterator</span> it = doc.Elements;\n  <span class=\"blue\">while</span>( it.MoveNext() )\n  {\n    e = it.Current <span class=\"blue\">as</span> <span class=\"teal\">Element</span>;\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// get the BuiltInParameter.ALL_MODEL_MARK paremeter. </span>\n      <span class=\"green\">// If the element does not have this paremeter, </span>\n      <span class=\"green\">// get_Parameter method returns null:</span>\n \n      <span class=\"teal\">Parameter</span> p = e.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.ALL_MODEL_MARK );\n \n      <span class=\"blue\">if</span>( p != <span class=\"blue\">null</span> )\n      {\n        <span class=\"green\">// we found an element with the </span>\n        <span class=\"green\">// BuiltInParameter.ALL_MODEL_MARK</span>\n        <span class=\"green\">// parameter. Change the value and </span>\n        <span class=\"green\">// increment our value:</span>\n \n        p.Set( num.ToString() );\n        ++num;\n      }\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"Exception: \"</span> + ex.Message );\n    }\n  }\n  doc.EndTransaction();\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n</pre>\n<p>I have several questions concerning this code and any consequences that might arise from the way I am renumbering all elements with mark parameters:\n\n<ol>\n<li>In my code, I am iterating through all elements in the model in order to find elements that have the BuiltInParameter.ALL_MODEL_MARK parameter. I have tried using the Filter.NewParameterFilter method to find all of these occurrences, but have not been successful. Can you provide a sample that uses filters to find these elements more efficiently?\n\n<li>In my code, I am incrementing the value by one to provide a unique value for each element that has the BuiltInParameter.ALL_MODEL_MARK parameter. Are there any unintended consequences I need to be aware of if I implement this code in our production models?\n\n<li>Some other examples I have seen that fix the Duplicate Mark Values errors provide a unique indexed value for each element based on the category of the element.\nFor example, I have 5 doors and 15 windows.\nMy door index values would range from 1 to 5 and my window index values would range from 1 to 15.\nThis approach took over 4 hours on one of our models.\nPerformance is not a huge problem, because the solution is working, even though it is a little slow. \nWe do not use this command every day, so the importance to optimize it is not very high.\nStill, do I need to implement my command following this approach?\n\n<li>After digging into the Revit database using RvtMgdDbg and the Visual Studio debugger, I noticed the BuiltInParameter.ALL_MODEL_MARK parameter is tied to or is the BuiltInParameter.DOOR_NUMBER parameter (even for a DimensionType).\nYou can see that by following these steps in RvtMgdDbg:\n</li></li></li></li></ol>\n<ul>\n<li>Snoop DB from the add-in menu.\n<li>Select an element.\n<li>Double-click on the Parameters property to open the Snoop Parameters dialogue.\n<li>Select the Built-in Enum Snoop button.\n<li>Select the ALL_MODEL_MARK built-in parameter.\n<li>Double-click the Definition property to view the Internal Definition.\n<li>The Built-in Param property has the value DOOR_NUMBER:\n</li></li></li></li></li></li></li></ul>\n<center>\n<img alt=\"ALL_MODEL_MARK definition\" src=\"img/duplicate_mark_value.png\"/>\n</center>\n<p>Are these two parameters the same object in the database? \nIf I change these mark values, will values change in schedules I generate from elements that have been changed?\n\n<p>Thanks for shedding some light on this issue.\n\n<p><strong>Answer:</strong> Thank you for your interesting query.\nAs said, we already had a look at\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/door-marks.html\">\nlisting and modifying door marks</a>.\n\nNow to address your specific questions:\n\n<ol>\n<li>The following method should do what you need:\n</li></ol>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve all elements in the current active document </span>\n<span class=\"gray\">///</span><span class=\"green\"> having a non-empty value for the given parameter.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">static</span> <span class=\"blue\">int</span> GetElementsWithParameter(\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elements,\n  <span class=\"teal\">BuiltInParameter</span> bip,\n  <span class=\"teal\">Application</span> app )\n{\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> a\n    = app.Create;\n \n  <span class=\"teal\">Filter</span> f = a.Filter.NewParameterFilter(\n    bip, CriteriaFilterType.NotEqual, <span class=\"maroon\">\"\"</span> );\n \n  <span class=\"blue\">return</span> doc.get_Elements( f, elements );\n}\n</pre>\n<ol start=\"2\">\n<li>Not that I am aware of. As you can see in my door mark sample, I set the mark parameter to a completely arbitrary value and know of no ill consequences.\n\n<li>I am pretty sure that you do not need to implement this approach.\nIt is probably done for individual reasons, users preferring to have their different element types numbered individually. There is nothing stopping you from doing it this way, but nothing forcing you to either, as far as I know.\n\n<br/>I am also pretty sure that performance can be improved.\nLook at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/revit-2010-subscription-pack.html#4\">\nRevit 2010 subscription pack API enhancements</a>.\n\nIn previous versions, Revit regenerated the model after each and every modification, such as your update to the model mark parameter. From the subscription pack onwards, this regeneration can be avoided.\n\n<br/>I see another serious performance issue in your code as well, by the way.\nTo check whether the model mark has been set, you are starting up an exception handling block for each and every element in the Revit database, of which there are many!\nOn very many of the elements, the mark value will not be present and an exception will be thrown and handled.\nThis is a very costly operation.\nIn general, you should never use exceptions to handle expected situations, such as the absence of this parameter.\n\n<a href=\"http://en.wikipedia.org/wiki/Exception_handling\">\nExceptions</a> should always be\n\n<a href=\"http://www.jacopretorius.net/2009/10/exceptions-should-be-exceptional.html\">\nexceptional, for handling unexpected errors</a>.\n\nPerformance will probably be very significantly improved if you simply check whether e.get_Parameter returns null, in which case that element can be skipped, instead of causing an exception to be thrown.\nActually, since you are already checking whether p is null, you should be able to simply remove the try-catch statements completely, or alternatively move them into the if block so that they only protect the actual setting of the parameter value.\n\n<li>I suggest you try this out yourself and see. Trusting my word for it would be fine, but controlling it for yourself is always better.\n</li></li></li></ol>\n</p></p></p></p></p></p>"
  }
]