[
  {
    "original_filename": "0096_insert_beam",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0096_insert_beam",
    "header_text": "Inserting a Beam",
    "local_header_href": "#inserting-a-beam",
    "chunk_text": "<h3>Inserting a Beam</h3><p>This is the final Verona installment, discussing the last remaining topic raised in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/verona-revit-api-training.html\">\nRevit API training in Verona</a>\n\nthe week before last, on creating new beam types and inserting beam instances through the API.</p><p>Similar to the exploration concerning\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-column.html\">\ncolumns</a>,\n\nwe explored the following topics:</p><ul>\n<li>Retrieving all matching family elements in current document in order to check whether the family we are interested in is loaded.</li>\n<li>Exploring the results of using a FamilyFilter.</li>\n<li>Loading a new family, if not already present.</li>\n<li>Creating a new family symbol, i.e. duplicating a beam type and setting its name and dimensions.</li>\n<li>Inserting a new beam instance into the model.</li>\n</ul><p>The interesting new aspects addressed with beams compared to columns are:</p><ul>\n<li>The family type parameters and the naming convention used are completely different.</li>\n<li>Inserting a beam instance requires using a different version of NewFamilyInstance.</li>\n</ul><p>We implemented a new external command CmdNewBeamTypeInstance to demonstrate the steps listed above.\nIt is very similar to the command CmdNewColumnTypeInstance for the columns.\nFirst, we set up some constants to define the family we are interested in, its library path, the structural type and a unit conversion:</p><pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> family_name\n  = <span class=\"maroon\">\"M_Concrete-Rectangular Beam\"</span>;\n \n<span class=\"blue\">const</span> <span class=\"blue\">string</span> extension\n  = <span class=\"maroon\">\".rfa\"</span>;\n \n<span class=\"blue\">const</span> <span class=\"blue\">string</span> directory\n  = <span class=\"maroon\">\"C:/Documents and Settings/All Users\"</span>\n  + <span class=\"maroon\">\"/Application Data/Autodesk/RAC 2009\"</span>\n  + <span class=\"maroon\">\"/Metric Library/Structural/Framing\"</span>\n  + <span class=\"maroon\">\"/Concrete/\"</span>;\n \n<span class=\"blue\">const</span> <span class=\"blue\">string</span> path\n  = directory + family_name + extension;\n \n<span class=\"teal\">StructuralType</span> stBeam\n  = <span class=\"teal\">StructuralType</span>.Beam;\n</pre>"
  },
  {
    "original_filename": "0096_insert_beam",
    "header_text": "Creating a new Beam Type",
    "local_header_href": "#creating-a-new-beam-type",
    "chunk_text": "<h4>Creating a new Beam Type</h4><p>Most of the implementation of the Execute method is the same as for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-column.html\">\nCmdNewColumnTypeInstance</a>.\n\nWe check whether the family we are interested in is already loaded, making use of a family filter to get all family elements in the current document. We again note that the family filter returns both the symbols contained within the family and the family itself. The family element itself is stored in the variable 'f', and its symbols are simply listed. In real life, we would probably eliminate the symbols by creating a Boolean 'and' filter and filtering for the Family class as well as the family name.\nIf the family was not already loaded, then 'f' remains null, and we load it with the LoadFamily method. It would also be sufficient to load one single symbol from the family, since we just need one single symbol 's' in order to call its Duplicate method. Any one will do, so we simply select the first one.\nWhen duplicating it, we simultaneously define the new symbol name. We list all its parameters, set the new type's dimensions, and demonstrate that we can change its name at a later stage as well if desired:</p><pre class=\"code\">\ns.get_Parameter( <span class=\"maroon\">\"b\"</span> ).Set(\n  <span class=\"teal\">Util</span>.MmToFoot( 500 ) );\n \ns.get_Parameter( <span class=\"maroon\">\"h\"</span> ).Set(\n  <span class=\"teal\">Util</span>.MmToFoot( 1000 ) );\n\ns.Name = <span class=\"maroon\">\"Nuovo simbolo due\"</span>;\n</pre><p>The names of the dimension parameters we are interested in for the beam are named 'b' and 'h'.\nThe column class that we examined used a completely different naming convention, with full names and upper-case initial letters, e.g. 'Width' and 'Depth'.\nThis just goes to show that families are user defined and every family can use different conventions.</p><p>The new beam and column types appear like this in the Revit project browser:</p><img alt=\"New column and beam types\" src=\"img/new_beam_type.png\"/><p>To follow the standard Revit type naming conventions, we would normally include the new type dimensions in its name, like the existing types do.</p>"
  },
  {
    "original_filename": "0096_insert_beam",
    "header_text": "Creating FamilyInstance Objects",
    "local_header_href": "#creating-familyinstance-objects",
    "chunk_text": "<h4>Creating FamilyInstance Objects</h4><p>We did some experiments in order to place an instance of our new symbol in the model.\nFirst we verified that it is possible to insert a beam, which normally uses a location line, by specifying only a location point:</p><pre class=\"code\">\n<span class=\"teal\">XYZ</span> p = <span class=\"teal\">XYZ</span>.Zero;\ndoc.Create.NewFamilyInstance( p, s, nonStructural );\n</pre><p>We can also place it with just a point and a direction:</p><pre class=\"code\">\n<span class=\"teal\">XYZ</span> p = <span class=\"teal\">XYZ</span>.Zero;\n<span class=\"teal\">XYZ</span> q = app.Create.NewXYZ( 30, 20, 20 ); <span class=\"green\">// feet</span>\n\n<span class=\"teal\">FamilyInstance</span> fi = doc.Create.NewFamilyInstance(\n  p, s, q, <span class=\"blue\">null</span>, nonStructural );\n</pre><p>In both of these cases, the instance has no location line defined for it, causing it to behave rather strangely and basically be unusable, e.g. it cannot be selected.</p><p>It is also possible to place it on a level, but lacking a location line, this version is also not really useful:</p><pre class=\"code\">\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; levels = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\ndoc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">Level</span> ), levels );\n<span class=\"teal\">Debug</span>.Assert( 0 &lt; levels.Count,\n  <span class=\"maroon\">\"expected at least one level in model\"</span> );\n \n<span class=\"teal\">Level</span> level = levels[0] <span class=\"blue\">as</span> <span class=\"teal\">Level</span>;\n \nfi = doc.Create.NewFamilyInstance(\n  line, s, level, nonStructural );\n</pre><p>These various attempts led us to realise that we really do need to define a location line for the beam.\nWe also verified that we must specify a structural type. Specifying a non-structural type means that no beam is created, and results in a null family instance. So this is the final working version for inserting a valid instance of a beam with sloped location line:</p><pre class=\"code\">\n<span class=\"teal\">XYZ</span> p = <span class=\"teal\">XYZ</span>.Zero;\n<span class=\"teal\">XYZ</span> q = app.Create.NewXYZ( 30, 20, 20 ); <span class=\"green\">// feet</span>\n\n<span class=\"teal\">Line</span> line = app.Create.NewLineBound( p, q );\n\n<span class=\"teal\">FamilyInstance</span> fi = doc.Create.NewFamilyInstance(\n  line, s, <span class=\"blue\">null</span>, stBeam );\n</pre><p>Here is an image showing the result of running the two new commands CmdNewBeamTypeInstance and CmdNewColumnTypeInstance, which insert one instance each of the of the new beam and column types:</p><img alt=\"New column and beam instances\" src=\"img/new_beam.png\"/><p>By the way, if you have any questions regarding the use of NewFamilyInstance and especially the choice of the correct overload to use for specific situations,\nthe first place to look is in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/Revit_2009_API_Developer_Guide.zip\">\nRevit 2009 API Developer Guide</a>\n\nsection 11.3.4 on Creating FamilyInstance Objects.\nThat document contains the most complete and up-to-date description of the topic.\nThat section was also provided temporarily as a stand-alone SDK document named\n\n<a href=\"C:/a/lib/revit/2009/SDK/Guide to placing Family Instances with the API.doc\">\nGuide to placing Family Instances with the API.doc</a>.\n\nThis document provides a roadmap on how to create different categories of family instances using the API.\nTypically these instances are created using one of the eight overloads of the Autodesk.Revit.Creation.Document method NewFamilyInstance.\nThe choice of which overload to use depends not only on the category of the instance, but also other characteristics of the placement, such as whether it should be hosted, placed relative to a reference level, or placed directly on a particular face.\nThe details are included in a table.\nInstances of some family types are better created through methods other than NewFamilyInstance and are listed in a second table.</p><p>Here is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10024.zip\">\nversion 1.0.0.24</a>\n\nof the complete Visual Studio solution with the new CmdNewBeamTypeInstance command implementation.</p>"
  }
]