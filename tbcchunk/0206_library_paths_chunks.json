[
  {
    "original_filename": "0206_library_paths",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0206_library_paths",
    "header_text": "Library Paths",
    "local_header_href": "#library-paths",
    "chunk_text": "<h3>Library Paths</h3><p>Here is a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/addin-ribbon-panel-and-loading-one-single-type.html?cid=6a00e553e1689788330120a55cc27d970c#comment-6a00e553e1689788330120a55cc27d970c\">\nquestion</a>\n\nposted by Edgar on how to modify the application options library paths:</p><p><strong>Question:</strong>\nI'm having trouble updating the Revit options for library paths. \nI'm not sure what I'm missing to update back to the database.</p><p><strong>Answer:</strong>\nSince the library paths managed by the LibraryPaths property on the Autodesk.Revit.Options.Application class is a StringStringMap, this question is mostly on how to extract, add and modify data in such a collection.\n\n<p>A StringStringMap is simply a dictionary mapping a set of keys to a corresponding set of values.\nIn this case, both the key and the value data type is string.\n\n<p>To begin with, here is a little utility method to list the contents of a StringStringMap and print out an explanatory header beforehand:</p>\n<pre class=\"code\"> \n<span class=\"blue\">void</span> PrintMap( <span class=\"teal\">StringStringMap</span> map, <span class=\"blue\">string</span> description )\n{\n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"\\n{0}:\\n\"</span>, description );\n \n  <span class=\"teal\">StringStringMapIterator</span> it = map.ForwardIterator();\n \n  <span class=\"blue\">while</span>( it.MoveNext() )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} -&gt; {1}\"</span>, it.Key, it.Current );\n  }\n}\n</pre>\n<p>We use a forward iterator to iterate over the contents, consisting of key-value pairs.\nThe keys and values are printed out one by one. \nTheir data is read from the iterator Key and Current properties, respectively.\n\n<p>To add a new key and value pair to the string map, you can use the Insert method.\nModification of an existing value can be accomplished using set_Item.\n\n<p>I implemented a new Building Coder sample external command CmdLibraryPaths to test and demonstrate this.\nHere is the code of its Execute method:</p>\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n \n<span class=\"teal\">StringStringMap</span> map = app.Options.LibraryPaths;\n \nPrintMap( map, <span class=\"maroon\">\"Initial application options library paths\"</span> );\n \n<span class=\"blue\">string</span> key = <span class=\"maroon\">\"ImperialTestCreate\"</span>;\n<span class=\"blue\">string</span> value = <span class=\"maroon\">@\"C:\\Documents and Settings\\All Users\\Application Data\\Autodesk\\RAC 2010\\Imperial Library\\Detail Components\"</span>;\n \nmap.Insert( key, value );\n \nPrintMap( map, <span class=\"maroon\">\"After adding 'ImperialTestCreate' key\"</span> );\n \nmap.set_Item( key, <span class=\"maroon\">@\"C:\\Temp\"</span> );\n \nPrintMap( map, <span class=\"maroon\">\"After modifying 'ImperialTestCreate' key\"</span> );\n \n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n</pre>\n<p>Launching this command will produce the following output in the Visual Studio debug output window:</p>\n<pre>\nInitial application options library paths:\n\nMetric Library -&gt; C:\\Program Files\\Autodesk Revit Architecture 2010\\Program\\Metric Library\nMetric Detail Library -&gt; C:\\Program Files\\Autodesk Revit Architecture 2010\\Program\\Metric Library\\Detail Components\n\nAfter adding 'ImperialTestCreate' key:\n\nImperialTestCreate -&gt; C:\\Documents and Settings\\All Users\\Application Data\\Autodesk\\RAC 2010\\Imperial Library\\Detail Components\nMetric Library -&gt; C:\\Program Files\\Autodesk Revit Architecture 2010\\Program\\Metric Library\nMetric Detail Library -&gt; C:\\Program Files\\Autodesk Revit Architecture 2010\\Program\\Metric Library\\Detail Components\n\nAfter modifying 'ImperialTestCreate' key:\n\nImperialTestCreate -&gt; C:\\Temp\nMetric Library -&gt; C:\\Program Files\\Autodesk Revit Architecture 2010\\Program\\Metric Library\nMetric Detail Library -&gt; C:\\Program Files\\Autodesk Revit Architecture 2010\\Program\\Metric Library\\Detail Components\n</pre>\n<p>Truncated lines can be seen in full by copy and pasting into an editor.</p>\n<p>Once I got this far, I started trying to see the results of my changes in the Revit user interface.\nThe library paths are displayed by clicking on the big R button, the main menu button on the upper left of the Revit application window, and then selecting Options &gt; File Locations &gt; Places...\n\n<p>To my surprise, I saw no changes.\nI first thought that we added and modified a new key 'ImperialTestCreate' which is ignored by Revit.\nSo I added a modification to one of the pre-existing Revit keys, and set the value of 'Metric Detail Library' to 'C:\\Temp' as well.\nI still saw no changes.\n\n<p>It then dawned upon me that the statement 'map = app.Options.LibraryPaths' copies the current application options library paths into my own private StringStringMap instance stored in my local variable 'map'.\nAll the changes I made are in my own local copy.\nTo have any effect in Revit, I need to write back the changes into the Revit application object data, for instance using a statement such as 'app.Options.LibraryPaths = map'.\nAfter doing so, both the updated existing key as well as the new one added by me is displayed as expected in the user interface:</p>\n<center>\n<img alt=\"Updated places\" src=\"img/updated_places.jpg\"/>\n</center>\n<p>The updated code of the Execute method now looks like this:</p>\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n \n<span class=\"teal\">StringStringMap</span> map = app.Options.LibraryPaths;\n \nPrintMap( map, <span class=\"maroon\">\"Initial application options library paths\"</span> );\n \n<span class=\"blue\">string</span> key = <span class=\"maroon\">\"ImperialTestCreate\"</span>;\n<span class=\"blue\">string</span> value = <span class=\"maroon\">@\"C:\\Documents and Settings\\All Users\\Application Data\\Autodesk\\RAC 2010\\Imperial Library\\Detail Components\"</span>;\n \nmap.Insert( key, value );\n \nPrintMap( map, <span class=\"maroon\">\"After adding 'ImperialTestCreate' key\"</span> );\n \nmap.set_Item( key, <span class=\"maroon\">@\"C:\\Temp\"</span> );\n \nPrintMap( map, <span class=\"maroon\">\"After modifying 'ImperialTestCreate' key\"</span> );\n \nmap.set_Item( <span class=\"maroon\">\"Metric Detail Library\"</span>, <span class=\"maroon\">@\"C:\\Temp\"</span> );\n \nPrintMap( map, <span class=\"maroon\">\"After modifying 'Metric Detail Library' key\"</span> );\n \napp.Options.LibraryPaths = map;\n \n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n</pre>\n<p>Here is\n\n<a href=\"zip/bc11045.zip\">\nversion 1.1.0.45</a>\n\nof the complete Building Coder sample source code and Visual Studio solution including the new command.</p>\n<p><strong>Response:</strong>\nThis works perfectly, thank you for the thorough explanation.\nAlso, Thank you for the goodies!</p>\n</p></p></p></p></p></p>"
  }
]