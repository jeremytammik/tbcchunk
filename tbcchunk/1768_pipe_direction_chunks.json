[
  {
    "original_filename": "1768_pipe_direction",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- 11711167 [Connect/Add Pipe at Specified Angle]\n\n- mep ductwork creation tips from ollikat\n  https://forums.autodesk.com/t5/revit-api-forum/automatic-duct-between-fittings/m-p/8890265\n\ntwitter:\n\nMEP ductwork and changing pipe direction in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/pipedirection\n\nOne of today's Revit API discussion forum threads prompted a discussion of MEP duct- and pipework creation topics\n&ndash; Changing pipe direction\n&ndash; MEP ductwork creation tip...\n\nlinkedin:\n\nMEP ductwork and changing pipe direction in the #RevitAPI\n\nhttp://bit.ly/pipedirection\n\nOne of today's Revit API discussion forum threads prompted a discussion of MEP duct- and pipework creation topics:\n\n- Changing pipe direction\n- MEP ductwork creation tip...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<p style=\"font-size: 80%; font-style:italic\"></p>\n\n-->"
  },
  {
    "original_filename": "1768_pipe_direction",
    "header_text": "MEP Ductwork and Changing Pipe Direction",
    "local_header_href": "#mep-ductwork-and-changing-pipe-direction",
    "chunk_text": "### MEP Ductwork and Changing Pipe Direction\n\nOne of today's [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) threads\nprompted a discussion of MEP duct- and pipework creation topics:\n\n- [Changing pipe direction](#2)\n- [MEP ductwork creation tip](#3)\n\n<center>\n<img src=\"img/tee_connect.png\" alt=\"Tee branch fitting\" width=\"450\">\n</center>"
  },
  {
    "original_filename": "1768_pipe_direction",
    "header_text": "Changing Pipe Direction",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Changing Pipe Direction\n\nNeerav Mehta shared some research on determining precise directions for inserting pipe fittings in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [changing pipe direction](https://forums.autodesk.com/t5/revit-api-forum/changing-pipe-direction/m-p/8966993):\n\n**Question:** I am trying to place a pipe precisely between two points: intersectionPoint and intersectionPoint + perpendicularDirection. I am using the following statement to move the pipe:\n\n<pre class=\"code\">\n  Pipe dummyPipe = doc.GetElement(\n    ElementTransformUtils.CopyElement(\n      doc, branchPipe.Id, XYZ.Zero).First()) as Pipe;\n\n  (dummyPipe.Location as LocationCurve).Curve\n    = Line.CreateBound( intersectionPoint,\n      intersectionPoint + perpendicularDirection );\n</pre>\n\nWith the above placement, I would expect the pipe's curve's direction to be exactly equal to perpendicularDirection, but that's not the case.\n\nAs an example, if `perpendicularDirection` is set to {(-0.016831296, 0.968685013, -0.052781984)}, the direction of the pipe comes out to be {(-0.017347059, 0.998368562, -0.054399389)}.\n\nNote that there is a slight difference in the direction and, as a result, I am not able to connect this pipe to a Tee fitting, as described in the thread\non [how to create a tee fitting with a non-90 degree branch angle for pipe](https://forums.autodesk.com/t5/revit-api-forum/how-to-create-a-tee-fitting-of-not-90-degree-branch-angle-for/td-p/8433556).\n\nBTW, the same issue happens even if I create a new pipe between two points.\n\nAny idea how to fix this?\n\n**Suggestion:** In some cases, you do not need to specify an exact pipe direction to create a pipe between fittings, nor an exact fitting location to insert a fitting between existing pipes.\n\nRevit will automatically adjust the newly created element appropriately to connect with the existing elements.\n\nDifferent variations of this approach are explored and discussed in the research series\non [creating a rolling offset](http://thebuildingcoder.typepad.com/blog/2014/01/final-rolling-offset-using-pipecreate.html).\n\nHere are some previous articles on the `NewTakeoffFitting` method and taps:\n\n- [Use of `NewTakeOffFitting` on a duct](http://thebuildingcoder.typepad.com/blog/2011/02/use-of-newtakeofffitting-on-a-duct.html)\n- [Use of `NewTakeOffFitting` on a pipe](http://thebuildingcoder.typepad.com/blog/2011/04/use-of-newtakeofffitting-on-a-pipe.html)\n- [Adjustable versus perpendicular spud](http://thebuildingcoder.typepad.com/blog/2013/02/adjustable-versus-perpendicular-spud.html)\n- [Splitting a duct or pipe with taps](http://thebuildingcoder.typepad.com/blog/2014/02/daylighting-extension-and-splitting-with-taps.html#3)\n\n**Solution:** I looked at the rolling offset, but it deals only with elbows, not tee fittings.\n\nThe problem in this case, however, was due to inaccuracy in the cross product.\n\nI was deriving the pipe direction by doing two cross-products of unit-norm vectors. In other words:\n\n<pre>\n  pipeDirection = X.CrossProduct(Y).CrossProduct(X)\n</pre>\n\nSince X and Y are of unit-norm, I was expecting `pipeDirection` to be unit-norm as well.\n\nHowever, even if both X and Y are unit length, their cross product will still NOT be unit length unless they are exactly perpendicular, cf.\nthe [detailed explanation of the cross product](https://en.wikipedia.org/wiki/Cross_product).\n\nTherefore, the length of `pipeDirection` was about 0.971 instead of 1.0.\n\nOnce I normalise `pipeDirection`, it works fine.\n\nBTW, the rolling offset posts only deal with inserting elbows, which works pretty well.\n\nIn my case, I am inserting a T connection, and that API is a horrible mess. Here are the issues:\n\n- `CreateTeeFitting` works only when the connection is 90 degrees, so you have to use the workaround mentioned in [Tee Fitting with no right angle](https://forums.autodesk.com/t5/revit-api-forum/tee-fitting-with-no-right-angle/m-p/8954339).\n- The above workaround works only when the base pipe is placed in a way that's acceptable to Revit. As an example, adding a Tee connection works if the two pipes are placed along X axis and the branch pipe is along the Y-axis. But, if I rotate the three pipes slightly, for example by 0.1 degrees, the `CreateTeeFitting` function fails.\n- So now I have to use another workaround, creating dummy pipes in a position that Revit likes and a 90-degree T connection. Then delete all the dummy pipes and the fittings that were automatically created, except the T connection. Now rotate the T fitting to what I want, for e.g. by 0.1 degrees. Then change the angle of the branch connector to something other than 90 degrees.\n\nThis issue along\nwith [line based family location don't update origin after change](https://forums.autodesk.com/t5/revit-api-forum/tee-fitting-with-no-right-angle/m-p/8954339) has\ntaken me about a week to create a T connection at the right place and orientation instead of probably an hour if the API had worked more intuitively in the first place.\n\nCongratulations and many thanks to Neerav Mehta for this research and solution.\n\nSorry to hear that the API is so hard to use in this situation."
  },
  {
    "original_filename": "1768_pipe_direction",
    "header_text": "MEP Ductwork Creation Tip",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> MEP Ductwork Creation Tip\n\nA while ago, Ollikat shared a general MEP ductwork creation tip in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [automatic duct between fittings](https://forums.autodesk.com/t5/revit-api-forum/automatic-duct-between-fittings/m-p/8890265), summarising his extensive experience in this area:\n\n> In summary, I have been co-working several years with my colleague in a feature where different parts of network (duct, pipes, etc.) are being created and connected via API. If we would need to redo everything from scratch today, we definitely would use only low-level methods, like `CreateFamilyInstance` etc., and then explicitly move, rotate and connect each part of the network separately (also meaning that if there's a need for reducer, create it manually). This is the best approach, because using higher level methods like `NewElbowFitting` etc. causes all sort of problems, and it is a very tedious job to implement a reliable solution for every possible scenario. Using low level methods gives you total control over what's happening. It's not convenient, but, in the long run, will save your time. This, of course, depends what kind of add-in you are developing.\n\n> Unfortunately, the main point is that there's no easy way of generating networks in the Revit API."
  }
]