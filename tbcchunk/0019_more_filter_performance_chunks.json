[
  {
    "original_filename": "0019_more_filter_performance",
    "header_text": "More Filter Performance",
    "local_header_href": "#more-filter-performance",
    "chunk_text": "<h3>More Filter Performance</h3><p>This post is a response to Guy Robinson's contribution on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/filter-performa.html\">Filter Performance</a>, \n\nand is also by a reader, Ralf Huvendiek. Ralf only recently started working on the Revit API, but brings such a wealth of prior programming experience and enthusiasm that I am very grateful for his invaluable input. He says:</p><p>Guy raises an interesting question regarding the performance of the Revit filters. I think he comes to the right conclusion, but not the best solution or explanation.</p><ol type=\"a\">\n<li>Our drawing contains x elements.</li>\n<li>x is very high.</li>\n<li>Our drawing contains d doors and w windows.</li>\n<li>d+w is a lot smaller than x.</li>\n<li>The Revit TypeFilter has to use some kind of RTTI and is thus much slower than a plain CategoryFilter.</li>\n</ol><p>Now let us return to the original filter, which was</p><pre>\n  (TypeFilter &amp;&amp; (CategoryFilter || CategoryFilter))\n</pre><p>To evaluate that filter, Revit has to invoke the TypeFilter x times, because it is the first filter in our Boolean expression.</p><p>If we look at the points 'b' and 'e' above, we see that this is not very desirable. With a look at our Boolean expression, and the fact that '&amp;&amp;' is commutative, we can reorder the filter like this:</p><pre>\n   ((CategoryFilter || CategoryFilter) &amp;&amp; TypeFilter)\n</pre><p>Now our cheap CategoryFilter will be called ~x times and the expensive TypeFilter will only be called (w+d) times.</p><p>With this knowledge, we can reorder Jeremy's original code from:</p><pre>\n  Filter f5 = cf.NewLogicAndFilter( f1, f4 );\n</pre><p>To:</p><pre>\n  Filter f5 = cf.NewLogicAndFilter( f4, f1 );\n</pre><p>The CmdRelationshipInverter modified as described is just as fast as the Guy's solution. This is not surprising, because his code does the same thing in a different way: prefilter everything with f4, and then use the expensive RTTI to filter out the rest afterwards.\nBut I think Jeremy's solution from with a modified filter f5 is much cleaner than filtering using an anonymous method.</p><p>What can we conclude from this:</p><ol type=\"1\">\n<li>If we're writing a performance critical filter, we should be aware how to organize it best: put the expensive filters as far to the right as possible.</li>\n<li>We can't blame the Revit API for being slow here. It's just the filter that is not optimal.</li>\n</ol><p>Ralf measured the times running the various variants of the command that we discussed so far on one of the standard Revit sample files, using the following setup parameters:</p><ul>\n<li>Revit version: Revit Architecture Build 20080508_1900 (German)</li>\n<li>Project: m_Conference.rvt from Revit Samples</li>\n<li>Number of elements in model: 14153</li>\n<li>Number of windows and doors: 50</li>\n<li>Machine used for testing: Windows XP SP3 German /  CPU: Core 2 Duo E6850 / 2GB RAM</li>\n<li>Compiler: Visual Studio 2005 Team Edition (SP1)</li>\n</ul><p>Here are the resulting times:</p><table border=\"1\">\n<tr><th>Test run</th><th>Original filter</th><th>Guy's code</th><th>Optimised filter</th></tr>\n<tr><td align=\"right\">1</td><td align=\"right\">170</td><td align=\"right\">58</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">2</td><td align=\"right\">170</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">3</td><td align=\"right\">171</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">4</td><td align=\"right\">191</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">5</td><td align=\"right\">171</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">6</td><td align=\"right\">171</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">7</td><td align=\"right\">170</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">8</td><td align=\"right\">170</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">9</td><td align=\"right\">197</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n<tr><td align=\"right\">10</td><td align=\"right\">172</td><td align=\"right\">57</td><td align=\"right\">58</td></tr>\n</table>"
  }
]