[
  {
    "original_filename": "0564_newtakeofffitting_pipe",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0564_newtakeofffitting_pipe",
    "header_text": "Use of NewTakeOffFitting on a Pipe",
    "local_header_href": "#use-of-newtakeofffitting-on-a-pipe",
    "chunk_text": "<h3>Use of NewTakeOffFitting on a Pipe</h3><p>I presented an example of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/use-of-newtakeofffitting-on-a-duct.html\">\nusing the NewTakeOffFitting method on a duct</a> a \n\nwhile back.\nThe original question, however, was actually related to inserting a break into a pipe.\nThat turned out to be a bit more tricky.\nThis was also discovered by Kailash Kute, who posted \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/create-a-pipe-cap.html?cid=6a00e553e168978833014e86bffa63970d#comment-6a00e553e168978833014e86bffa63970d\">\na</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/create-a-pipe-cap.html?cid=6a00e553e168978833014e86c72a1a970d#comment-6a00e553e168978833014e86c72a1a970d\">\nwhole</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/create-a-pipe-cap.html?cid=6a00e553e1689788330147e36ef07c970b#comment-6a00e553e1689788330147e36ef07c970b\">\nseries</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/create-a-pipe-cap.html?cid=6a00e553e168978833014e86ef0cf3970d#comment-6a00e553e168978833014e86ef0cf3970d\">\nof</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/create-a-pipe-cap.html?cid=6a00e553e168978833014e870b1b1b970d#comment-6a00e553e168978833014e870b1b1b970d\">\ncomments</a> on\n\nthe topic.\n\nI will herewith reiterate my first answer to him and post the code that I had working to see whether that will help us move forward with this.\n\n<p><strong>Question:</strong> How can I create a new takeoff fitting at the midpoint of a pipe, thus breaking the pipe into two parts?\n\n<p><strong>Answer:</strong> The solution is similar to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/use-of-newtakeofffitting-on-a-duct.html\">\ncreating a takeoff fitting on a duct</a>.\n\n<p>If you wish the coupling to break the pipe, it has to be a tee of some kind, i.e. a pipe tap or spud. \nThis requires a working \"Pipe Spud\" family.\nThe discussion on\n\n<a href=\"http://forums.autodesk.com/t5/Autodesk-Revit-MEP/Pipe-Taps/m-p/2814072/highlight/true\">\npipe taps</a> in\n\nthe Autodesk Revit MEP discussion forum provides such a sample pipe spud family which you can save locally and test on a project. \nThis is the recommended family type and category to use for now for a pipe outlet part.\n\n<p>For an example on using it manually, you can look at this \n\n<a href=\"http://www.screencast.com/t/TApTeKqy\">\nvideo showing how to load the fitting into a project and use it when drawing a pipe</a>.\n\n<p>Basically, you do the following:\n\n<ul>\n<li>Load the family into a project\n<li>Select Pipe from the ribbon\n<li>Select Edit Type\n<li>Change the preferred type to Tap\n<li>Set the pipe spud as the default tap\n<li>Click Apply/OK\n</li></li></li></li></li></li></ul>\n<p>Now when you draw a branch pipe off of the main, the spud will be placed at the intersection.\n\n<p>I rewrote the code demonstrating how to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/use-of-newtakeofffitting-on-a-duct.html\">\nuse the NewTakeOffFitting method on a duct</a> to\n\noperate on a pipe instead:\n\n<!-- C:\\a\\j\\adn\\case\\bsd\\1266201\\src\\CreateTakeoff\\CreateTakeoff\\Command.cs -->\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Revit external command to demonstrate </span>\n<span class=\"gray\">///</span><span class=\"green\"> NewTakeOffFitting method for pipes.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span>\n<span class=\"gray\">///</span><span class=\"green\"> Create two pipes in a new document</span>\n<span class=\"gray\">///</span><span class=\"green\"> and call NewTakeOffFitting to add</span>\n<span class=\"gray\">///</span><span class=\"green\"> a takeoff to connect them.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">Result</span> result = <span class=\"teal\">Result</span>.Failed;\n \n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">Document</span> doc = uiapp.ActiveUIDocument.Document;\n \n    <span class=\"teal\">Transaction</span> t = <span class=\"blue\">null</span>;\n \n    Autodesk.Revit.Creation.<span class=\"teal\">Document</span> creDoc\n      = doc.Create;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"green\">// determine pipe type to use:</span>\n \n      <span class=\"teal\">FilteredElementCollector</span> collector\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n      collector.OfCategory(\n        <span class=\"teal\">BuiltInCategory</span>.OST_PipeCurves );\n \n      collector.OfClass( <span class=\"blue\">typeof</span>(\n        <span class=\"teal\">ElementType</span> ) );\n \n      <span class=\"teal\">PipeType</span> pipeType\n        = collector.FirstElement() <span class=\"blue\">as</span> <span class=\"teal\">PipeType</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == pipeType )\n      {\n        <span class=\"teal\">Message</span>.ShowError( <span class=\"maroon\">\"No pipe types found.\"</span> );\n      }\n      <span class=\"blue\">else</span>\n      {\n        t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc, <span class=\"teal\">Message</span>.Caption );\n \n        t.Start();\n \n        <span class=\"green\">// create pipe1 along X axis </span>\n        <span class=\"green\">// from (0,0,0) to (6,0,0):</span>\n \n        <span class=\"teal\">XYZ</span> start = <span class=\"teal\">XYZ</span>.Zero;\n        <span class=\"teal\">XYZ</span> end = start + 6 * <span class=\"teal\">XYZ</span>.BasisX;\n        <span class=\"teal\">XYZ</span> mid = 0.5 * ( start + end );\n \n        <span class=\"teal\">Pipe</span> pipe1 = creDoc.NewPipe(\n          start, end, pipeType );\n \n        <span class=\"green\">// create pipe2 parallel to Y </span>\n        <span class=\"green\">// axis from (1,2,0) to (1,4,0):</span>\n \n        start = mid + 2 * <span class=\"teal\">XYZ</span>.BasisY;\n        end = start + 2 * <span class=\"teal\">XYZ</span>.BasisY;\n \n        <span class=\"teal\">Pipe</span> pipe2 = creDoc.NewPipe(\n          start, end, pipeType );\n \n        <span class=\"green\">// pick closest connector on pipe2:</span>\n \n        <span class=\"teal\">Connector</span> pipe2_start = <span class=\"blue\">null</span>;\n \n        <span class=\"green\">// just picking the first one is unreliable!</span>\n        <span class=\"green\">// the order of connector returned by the </span>\n        <span class=\"green\">// connector manager may change!</span>\n        <span class=\"green\">// always use a location (or even more </span>\n        <span class=\"green\">// information if 2 connectors are at </span>\n        <span class=\"green\">// the same location) to get the right</span>\n        <span class=\"green\">// connector!</span>\n \n        <span class=\"blue\">double</span> dist = <span class=\"blue\">double</span>.MaxValue;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c <span class=\"blue\">in</span>\n          pipe2.ConnectorManager.Connectors )\n        {\n          <span class=\"teal\">XYZ</span> p = c.Origin;\n          <span class=\"blue\">double</span> d = p.DistanceTo( mid );\n \n          <span class=\"blue\">if</span>( d &lt; dist )\n          {\n            dist = d;\n            pipe2_start = c;\n          }\n          <span class=\"blue\">break</span>;\n        }\n \n        <span class=\"green\">// create takeoff from pipe1 to pipe2:</span>\n \n        <span class=\"teal\">FamilyInstance</span> takeoff\n          = creDoc.NewTakeoffFitting(\n            pipe2_start, pipe1 );\n \n        t.Commit();\n \n        result = <span class=\"teal\">Result</span>.Succeeded;\n      }\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != t )\n      {\n        t.RollBack();\n      }\n      message = ex.Message;\n    }\n    <span class=\"blue\">return</span> result;\n  }\n}\n</pre>\n<p>Everything said about the arguments to the NewTakeoffFitting method and the order of connectors returned by the connector manager in the case of ducts applies here as well, of course.\n\n<p>The command (which is simply named Command) in the attached project creates the following model when run in a project where the tap (not tee) and the pipe spud have been selected as the default pipe branch fittings:</p>\n<center>\n<img alt=\"Pipe spud takeoff on a pipe\" src=\"img/pipe_spud_takeoff.png\"/>\n</center>\n<p>Here is \n\n<a href=\"zip/CreateTakeoffPipe.zip\">\nCreateTakeoffPipe.zip</a> containing \n\nthe entire source code and Visual Studio solution implementing this command.\n</p></p></p></p></p></p></p></p></p></p>"
  }
]