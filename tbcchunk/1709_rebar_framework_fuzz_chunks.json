[
  {
    "original_filename": "1709_rebar_framework_fuzz",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- the importance of fuzz:\n  [Not all curtain walls behaving equally](https://forums.autodesk.com/t5/revit-api-forum/not-all-curtain-walls-behaving-equally/m-p/8457387)\n\n- how to install the .NET framework 4.7 for creating add-ins for Revit 2019.1\n  [AU2018 Class and .NET 4.7 for Revit 2019.1](https://forums.autodesk.com/t5/revit-api-forum/au2018-class-and-net-4-7-for-revit-2019-1/m-p/8451317)\n  14872193 [AU2018 Class and .NET 4.7 for Revit 2019.1]\n  https://forums.autodesk.com/t5/revit-api-forum/au2018-class-and-net-4-7-for-revit-2019-1/m-p/8451317\n\n- [Get all associated Rebars which attach to the Structural Element](https://forums.autodesk.com/t5/revit-api-forum/get-all-associated-rebars-which-attach-to-the-structural-element/m-p/8455579)\n  getrebarsinhost\n\nRebars in host, .NET framework and importance of fuzz in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/rebarnetfuzz\n\nHere are a couple more Revit API discussion forum threads well worth highlighting\n&ndash; Retrieve rebars attached to structural element\n&ndash; Installing the .NET framework 4.7 for Revit 2019.1 add-ins\n&ndash; Importance of fuzz for curtain wall dimensioning...\n\n-->"
  },
  {
    "original_filename": "1709_rebar_framework_fuzz",
    "header_text": "Rebars in Host, .NET Framework and Importance of Fuzz",
    "local_header_href": "#rebars-in-host-net-framework-and-importance-of-fuzz",
    "chunk_text": "### Rebars in Host, .NET Framework and Importance of Fuzz\n\nHere are a couple\nmore [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) threads\nwell worth highlighting:\n\n- [Retrieve rebars attached to structural element](#2) \n- [Installing the .NET framework 4.7 for Revit 2019.1 add-ins](#3) \n- [Importance of fuzz for curtain wall dimensioning](#4)"
  },
  {
    "original_filename": "1709_rebar_framework_fuzz",
    "header_text": "<a name=\"2\"></a> Retrieve Rebars Attached to Structural Element",
    "local_header_href": "#a-name2a-retrieve-rebars-attached-to-structural-element",
    "chunk_text": "#### <a name=\"2\"></a> Retrieve Rebars Attached to Structural Element\n\n**Question:** How can I get all associated rebars which attach to a structural element such as a column by picking that?\n\n**Answer:** Jeremy initially\nsuggested [workarounds making use of filtered element collectors](https://thebuildingcoder.typepad.com/blog/2018/12/using-an-intersection-filter-for-linked-elements.html#3).\nUnfortunately, that was not very helpful in this case.\n\nHappily, Einar Raknes came to the rescue pointing out the real solution for this:\n\nYou can use the `RebarHostData` class and the `GetRebarsInHost` method to retrieve all rebars associated with a rebar host.\n\nTo make sure you pick a valid Rebar Host; you can optionally create a selection filter for it like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">RebarHostSelectionFilter</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">ISelectionFilter</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;AllowElement(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;<span style=\"color:#2b91af;\">RebarHostData</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.GetRebarHostData(&nbsp;e&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;AllowReference(&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;r,&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;p&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nPick a rebar host, and retrieve the list of rebars from it like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;ref1&nbsp;=&nbsp;uidoc.Selection.PickObject(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ObjectType</span>.Element,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">RebarHostSelectionFilter</span>(),&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Pick&nbsp;a&nbsp;rebar&nbsp;host&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;rebarHost&nbsp;=&nbsp;doc.GetElement(&nbsp;ref1&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">Rebar</span>&gt;&nbsp;rebarsInHost&nbsp;=&nbsp;<span style=\"color:#2b91af;\">RebarHostData</span>\n&nbsp;&nbsp;&nbsp;&nbsp;.GetRebarHostData(&nbsp;rebarHost&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.GetRebarsInHost();\n</pre>\n\nMany thanks to Einar for pointing this out!"
  },
  {
    "original_filename": "1709_rebar_framework_fuzz",
    "header_text": "<a name=\"3\"></a> Installing the .NET Framework 4.7 for Revit 2019.1 Add-Ins",
    "local_header_href": "#a-name3a-installing-the-net-framework-47-for-revit-20191-add-ins",
    "chunk_text": "#### <a name=\"3\"></a> Installing the .NET Framework 4.7 for Revit 2019.1 Add-Ins\n\n**Question:** I am walking through the Autodesk University 2018 course on Revit add-ins:\n\n- [Pushing Revit to the Next Level &ndash; an Intro to Revit Plugins with C#](https://www.autodesk.com/autodesk-university/class/Pushing-Revit-Next-Level-Intro-Revit-Plugins-C-2018)\n\nRevit 2019.1 add-in programming apparently requires the .NET framework 4.7.\n\n<center>\n<img src=\"img/net47_figure_20_create_project.png\" alt=\"Figure 20 Create Project\" width=\"689\">\n<p style=\"font-size: 80%; font-style:italic\">Figure 20 Create Project</p>\n\n<img src=\"img/net47_class_library_net_framework.png\" alt=\"Class Library .NET Framework\" width=\"640\">\n<p style=\"font-size: 80%; font-style:italic\">Class Library .NET Framework</p>\n</center>\n\nHowever, I cannot seem to get access to .NET Framework 4.7.\n\nI have turned this on in Windows Features:\n\n<center>\n<img src=\"img/net47_in_windows_features.png\" alt=\".NET Framework 4.7 in Windows features\" width=\"670\">\n<p style=\"font-size: 80%; font-style:italic\">.NET Framework 4.7 in Windows features</p>\n</center>\n\nWhat am I missing?\n\n**Answer:** In Visual Studio, go to Tools &rarr; Get Tools and Features &rarr; Individual Components &rarr; tick the .NET version you want to install:\n\n<center>\n<img src=\"img/net47_vs_tools_01.png\" alt=\"VS tools\" width=\"638\">\n<p style=\"font-size: 80%; font-style:italic\">VS Tools</p>\n<img src=\"img/net47_vs_tools_02.png\" alt=\"VS tools\" width=\"632\">\n</center>\n\nMany thanks to Salvatore Dragotta for pointing this out!"
  },
  {
    "original_filename": "1709_rebar_framework_fuzz",
    "header_text": "<a name=\"4\"></a> Importance of Fuzz for Curtain Wall Dimensioning",
    "local_header_href": "#a-name4a-importance-of-fuzz-for-curtain-wall-dimensioning",
    "chunk_text": "#### <a name=\"4\"></a> Importance of Fuzz for Curtain Wall Dimensioning\n\nThe Building Coder keeps on harping about the importance of fuzz, cf. the recent discussion\nof [fuzzy comparison versus exact arithmetic for curve intersection](https://thebuildingcoder.typepad.com/blog/2017/12/project-identifier-and-fuzzy-comparison.html#3).\n\nHere is yet another example underlining the importance of fuzz, described by Bram Weinreder in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [not all curtain walls behaving equally](https://forums.autodesk.com/t5/revit-api-forum/not-all-curtain-walls-behaving-equally/m-p/8457387):\n\n**Question:** I've made an add-in to dimension curtain walls, and in my test projects it was working fairly well. That's to say, tagging worked 100% (easy win), but elevation tags and dimensioning didn't always work (let's say 70% or 80% worked for me, but for some users and some projects 100% produced the same failure).\n\nThe problem is that I'm not getting the total widths of these windows, in rare cases the total heights, or the bottom reference for spot elevations. I'm getting the references based on physical mullion faces with a certain normal, for mullions that work in a certain direction (this works very well, generally, if I need all unfiltered references). It's probably where I filter out the exterior faces that I make a mistake.\n\nExample of how I do my filtering:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Face</span>&nbsp;fa&nbsp;<span style=\"color:blue;\">in</span>&nbsp;faces&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Mullion</span>&nbsp;m&nbsp;=&nbsp;doc.GetElement(&nbsp;fa.Reference&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Mullion</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">LocationPoint</span>&nbsp;lp&nbsp;=&nbsp;m.Location&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">LocationPoint</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Reference</span>&nbsp;r&nbsp;=&nbsp;fa.Reference;\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;direction&nbsp;==&nbsp;Direction.horizontal&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;lp.Point.Z&nbsp;==&nbsp;bb.Min.Z&nbsp;&amp;&amp;&nbsp;!minAdded\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;fa.ComputeNormal(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">UV</span>(&nbsp;0,&nbsp;0&nbsp;)&nbsp;).X&nbsp;&gt;&nbsp;0&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totaalMaten.Append(&nbsp;r&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minAdded&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;lp.Point.Z&nbsp;==&nbsp;bb.Max.Z&nbsp;&amp;&amp;&nbsp;!maxAdded\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;fa.ComputeNormal(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">UV</span>(&nbsp;0,&nbsp;0&nbsp;)&nbsp;).X&nbsp;&gt;&nbsp;0&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totaalMaten.Append(&nbsp;r&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maxAdded&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;direction&nbsp;==&nbsp;Direction.vertical&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;lp.Point.X&nbsp;==&nbsp;bb.Min.X&nbsp;&amp;&amp;&nbsp;!leftAdded\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;fa.ComputeNormal(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">UV</span>(&nbsp;0,&nbsp;0&nbsp;)&nbsp;).X&nbsp;&gt;&nbsp;0&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totaalMaten.Append(&nbsp;r&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftAdded&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;lp.Point.X&nbsp;==&nbsp;bb.Max.X&nbsp;&amp;&amp;&nbsp;!rightAdded\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;fa.ComputeNormal(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">UV</span>(&nbsp;0,&nbsp;0&nbsp;)&nbsp;).X&nbsp;&gt;&nbsp;0&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totaalMaten.Append(&nbsp;r&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rightAdded&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nThe Normal is always relative to the mullion interior coordinates; in short this is filtering the faces that are looking out. But apparently, this is not an adequate method in all situations.\n\nDoes anyone know whether there can be a difference between curtain walls that makes them behave differently?\n\nSide note: is there a more reliable way to get the exterior references (say, by bounding box)?\n\nThanks in advance.\n\n**Answer:** And I found my own answer.\n\nWhat's vexing me is that these references don't have GlobalPoints, or I would've stumbled upon this quicker.\n\nThe error is in this part of the filtering:\n\n<pre class=\"code\">\n  <span style=\"color:blue;\">if</span>(&nbsp;lp.Point.Z&nbsp;==&nbsp;bb.Min.Z&nbsp;*/...<span style=\"color:green;\">/*)</span>\n</pre>\n\nI'm not sure whether it's due to the conversion between imperial and metric, but I forgot the fundamental rule that you can't always directly compare two `XYZ` values.\n\nI replaced the condition with this:\n\n<pre class=\"code\">\n  <span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:#2b91af;\">Math</span>.Abs(&nbsp;lp.Point.Z&nbsp;-&nbsp;bb.Min.Z&nbsp;)&nbsp;&lt;&nbsp;0.005&nbsp;*/...<span style=\"color:green;\">/*)</span>\n</pre>\n\nThis translates to a tolerance of about 1.5mm.\n\nCould've probably added three more zeroes there, but this is precise enough for our case.\n\nMany thanks to Bram for pointing this out!"
  }
]