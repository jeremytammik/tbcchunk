[
  {
    "original_filename": "0072_hello_f_sharp_via_c_sharp",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0072_hello_f_sharp_via_c_sharp",
    "header_text": "Hello F# via C#",
    "local_header_href": "#hello-f-via-c",
    "chunk_text": "<h3>Hello F# via C#</h3><p>Still in Barcelona, after a very interesting day spent with Alex Vila Ortega, who gave us on a tour of the\n\n<a href=\"http://en.wikipedia.org/wiki/Sagrada_Fam%C3%ADlia\">\nSagrada Familia</a>\n\ncathedral by the famous Catalan architect\n\n<a href=\"http://en.wikipedia.org/wiki/Antoni_Gaud%C3%AD\">\nAntoni Gaudi</a>\n\nto discuss the interesting mathematical and geometrical aspects of his architecture, and what we can do together to implement some effective support for them in Revit.\nI plan to write more on that as soon as possible, but I have something more urgent to discuss first.</p><p>Kean's F# programming contest has a deadline set for the end of February, so the sooner we have access to an F# implementation of a Revit external command, the better.\nI will discuss my first steps in that direction, even though the result I have to show for it is not yet perfect. At least it does provide access to the Revit API within an application written in F#.</p><p>Since I have not yet been able to execute an external command written in F# directly from Revit, I opted for an intermediate solution with an external command written in C# instead, which calls into the F# implementation.</p><p>This is what it looks like so far; the C# external command implementation is completely standard and simply passes its arguments on the F# method:</p><pre class=\"code\">\n<span class=\"blue\">namespace</span> CallFs\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">Module1</span>.<span class=\"teal\">BuildingCoder</span>.<span class=\"teal\">Command6</span>\n        c = <span class=\"blue\">new</span> <span class=\"teal\">Module1</span>.<span class=\"teal\">BuildingCoder</span>.<span class=\"teal\">Command6</span>();\n \n      <span class=\"blue\">return</span> c.Execute(\n        commandData, <span class=\"blue\">ref</span> message, elements );\n    }\n  }\n}\n</pre><p>The current F# class implementation looks like this:</p><pre class=\"code\">\n<span class=\"blue\">#light</span>\n\n<span class=\"blue\">open</span> System.Windows.Forms\n<span class=\"blue\">open</span> Autodesk.Revit\n\n<span class=\"blue\">module</span> BuildingCoder =\n\n  <span class=\"blue\">let</span> show_message( msg : string ) =\n    MessageBox.Show( msg, \"Building Coder F# Test\" ) |&gt; ignore\n\n  <span class=\"blue\">type</span> public Command6() =\n    <span class=\"blue\">interface</span> IExternalCommand <span class=\"blue\">with</span>\n      <span class=\"blue\">member</span> x.Execute( commandData, message, elements ) =\n        show_message \"Kilroy was here\"\n        IExternalCommand.Result.Succeeded\n    <span class=\"blue\">member public</span> x.Execute( commandData, message : string byref, elements ) =\n      (x :&gt; IExternalCommand).Execute( commandData, ref message, elements )\n</pre><p>The reason for the slightly convoluted syntax is that the direct method implementation causes F# to decorate the Execute method name with an explicit interface prefix, so the result is named 'Autodesk-Revit-IExternalCommand-Execute' and thus will not match the expected method name called by the Revit API. This is explained in more detail in a discussion on\n\n<a href=\"http://bugsquash.blogspot.com/2009/01/implementing-interfaces-in-f.html\">\nimplementing interfaces in F#</a>\n\nwhich Kean was kind enough to hunt down and point out to me.</p><p>Another confusing detail is that\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html\">\nReflector</a>\n\nis reporting the fully qualified method name as 'Module1+BuildingCoder+Command6', whereas the Visual Studio object browser displays it as 'Module1.BuildingCoder.Command6'.\nI can well imagine that the former might be confusing for the Revit API loader. \nUnfortunately, it does not report any errors if something is wrong, but just quits.</p>"
  },
  {
    "original_filename": "0072_hello_f_sharp_via_c_sharp",
    "header_text": "Facade and Art",
    "local_header_href": "#facade-and-art",
    "chunk_text": "<h4>Facade and Art</h4><p>Anyway, I seem to have adapted well to the Spanish eating habits, did not even set foot in the restaurant tonight until about half past nine. \nThe food is slightly too haute cuisine for my taste, I prefer it simple and natural and tasty with no frills, no facade.\nFunny thing, how so much of Gaudi's work deals with the facade, but is so true and deep it moves me.\nNormally, I am rather anti-facade, no haute cuisine, no make-up, no frills, just the real thing, but for me, Gaudi created art, real thing, not just facade.\nMaybe art is the point where facade becomes the real thing, somehow.\nI really liked Alex' very apt categorisation of the various aspects of Gaudi's architecture into bones, muscles and skin.\nThe bones are like the stick elements in the structural analytical model, the muscles are their profiles, providing strength, and the skin is the facade, which uses some impressively effective yet simple combination of geometry and mathematics to create natural and organic looking and yet relatively easily constructible surfaces, almost none of which are ever planar.</p><p>I am still working at getting the direct and full-fledged F# connection up and running and will post a complete solution as soon as that works.</p>"
  }
]