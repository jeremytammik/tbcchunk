[
  {
    "original_filename": "0783_doc_change_dmu",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0783_doc_change_dmu",
    "header_text": "DocumentChanged versus Dynamic Model Updater",
    "local_header_href": "#documentchanged-versus-dynamic-model-updater",
    "chunk_text": "<h3>DocumentChanged versus Dynamic Model Updater</h3><p>Here is an interesting little overview and comparison of possibilities to react efficiently to the addition of certain elements to the database.\nTwo easy ways to achieve this are by subscribing to the unspecific <a href='#1\"'>DocumentChanged event</a>, or by registering a more specific DMU <a href='#2\"'>dynamic model updater</a>.\nIf you subscribe to an event or register an updater, it is also important to keep in mind to <a href='#3\"'>unsubscribe or unregister</a> when you are done with it.\n\n<p>We discussed both of these repeatedly in the past, e.g. when looking at \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/lock-the-model-eg-prevent-deletion.html\">\npreventing element deletion</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/avoid-idling.html\">\navoiding Idling</a>.\n\n<p>In this case, the aim is to display a message box to the user when a new elevation view is added.\n\n\n<a name=\"1\"></a>\n<h4>Subscribe to DocumentChanged to React to Elevation View Creation</h4>\n<p>It is easy to detect when a specific element is added, such as a new elevation view, for instance by subscribing to the DocumentChanged event. This can be done either in  the OnStartup method of an external application or from an external command. In either case, you should pay attention to also unsubscribe from the event when it is no longer needed, for instance on application shutdown, at the end of the command, or from some other place.\n\n<p>In order to test the behaviour simply from within the standard framework of The Building Coder sample collection, I implemented a simple external command CmdElevationWatcher subscribing to the event. \nThe event handler receives a DocumentChangedEventArgs instance providing three separate collections of ids of added, deleted and modified elements.\nWe pass in the list of added ids to the FindElevationView method, which returns the first elevation view in the given element id collection if one exists, causing a message box listing it to be displayed.\n\n<p>Here is the entire code of this external command implementation:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> React to elevation view creation subscribing to DocumentChanged event</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdElevationWatcher</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the first elevation view found in the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> given element id collection or null.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">View</span> FindElevationView(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids )\n  {\n    <span class=\"teal\">View</span> view = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n    {\n      view = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != view\n        &amp;&amp; <span class=\"teal\">ViewType</span>.Elevation == view.ViewType )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      view = <span class=\"blue\">null</span>;\n    }\n    <span class=\"blue\">return</span> view;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> DocumentChanged event handler</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> OnDocumentChanged(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">DocumentChangedEventArgs</span> e )\n  {\n    <span class=\"teal\">Document</span> doc = e.GetDocument();\n \n    <span class=\"teal\">View</span> view = FindElevationView( \n      doc, e.GetAddedElementIds() );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != view )\n    {\n      <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format( \n        <span class=\"maroon\">\"You just created an \"</span>\n        + <span class=\"maroon\">\"elevation view '{0}'. Are you \"</span>\n        + <span class=\"maroon\">\"sure you want to do that? \"</span>\n        + <span class=\"maroon\">\"(Elevations don't show hidden line \"</span>\n        + <span class=\"maroon\">\"detail, which makes them unsuitable \"</span>\n        + <span class=\"maroon\">\"for core wall elevations etc.)\"</span>, \n        view.Name );\n \n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"ElevationChecker\"</span>, msg );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n \n    <span class=\"green\">// Subscribe to DocumentChanged event</span>\n \n    app.DocumentChanged\n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt;(\n        OnDocumentChanged );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>After this command has been executed, the event is subscribed to.\nAny subsequent elevation view insertion results in the message box being displayed, for instance when I duplicate the East elevation view:\n\n<center>\n<img alt=\"ElevationWatcher using DocumentChanged\" src=\"img/ElevationWatcher1.png\"/>\n</center>\n<p>This approach has two significant disadvantages: \n\n<ol>\n<li>It reacts erroneously when a family is loaded.\n<li>Its performance is suboptimal.\n</li></li></ol>\n<p><b>1.</b> When a family is loaded into a project, its views are also inserted with it.\nThis insertion currently triggers a DocumentChanged event on the elevation views as well.\nFor instance, if I load the standard rectangular column 'family M_Rectangular Column.rfa', a similar message appears:\n\n<center>\n<img alt=\"ElevationWatcher reacting to family load\" src=\"img/ElevationWatcher2.png\"/>\n</center>\n<p>This is unintentional and potentially confusing.\n\n<p><b>2.</b> The performance is not optimal, since DocumentChanged reacts to each and every modification of the document.\nFurthermore, every single added element needs to be examined to check whether it is an elevation view.\n\n<p>Both of these disadvantages can easily be avoided by using the dynamic model update mechanism DMU instead.\n\n\n<a name=\"2\"></a>\n<h4>Install Dynamic Model Updater to React to Elevation View Creation</h4>\n<p>As said, the dynamic model updater mechanism can easily be used to determine that specific elements have been added to the database, and it avoids the DocumentChanged event disadvantages mentioned above, since it reacts only to certain well-defined modifications on a certain well-defined set of elements used to set up the updater trigger.\n\n<p>First we need to implement our updater class to display a message if an elevation view is added:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Updater notifying user if an </span>\n<span class=\"gray\">///</span><span class=\"green\"> elevation view was added.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">ElevationWatcherUpdater</span> : <span class=\"teal\">IUpdater</span>\n{\n  <span class=\"blue\">static</span> <span class=\"teal\">AddInId</span> _appId;\n  <span class=\"blue\">static</span> <span class=\"teal\">UpdaterId</span> _updaterId;\n \n  <span class=\"blue\">public</span> ElevationWatcherUpdater( <span class=\"teal\">AddInId</span> id )\n  {\n    _appId = id;\n \n    _updaterId = <span class=\"blue\">new</span> <span class=\"teal\">UpdaterId</span>( _appId, <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>(\n      <span class=\"maroon\">\"fafbf6b2-4c06-42d4-97c1-d1b4eb593eff\"</span> ) );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( <span class=\"teal\">UpdaterData</span> data )\n  {\n    <span class=\"teal\">Document</span> doc = data.GetDocument();\n    <span class=\"teal\">Application</span> app = doc.Application;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> \n      data.GetAddedElementIds() )\n    {\n      <span class=\"teal\">View</span> view = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != view \n        &amp;&amp; <span class=\"teal\">ViewType</span>.Elevation == view.ViewType )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"ElevationWatcher Updater\"</span>,\n          <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"New elevation view '{0}'\"</span>,\n            view.Name ) );\n      }\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetAdditionalInformation() \n  { \n    <span class=\"blue\">return</span> <span class=\"maroon\">\"The Building Coder, \"</span>\n      + <span class=\"maroon\">\"http://thebuildingcoder.typepad.com\"</span>; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">ChangePriority</span> GetChangePriority() \n  { \n    <span class=\"blue\">return</span> <span class=\"teal\">ChangePriority</span>.FloorsRoofsStructuralWalls; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">UpdaterId</span> GetUpdaterId() \n  { \n    <span class=\"blue\">return</span> _updaterId; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetUpdaterName() \n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"ElevationWatcherUpdater\"</span>;\n  }\n}\n</pre>\n<p>With this in place, we can implement a second external test command CmdElevationWatcherUpdater to instantiate and register our updater and define a trigger for it.\nThe trigger reacts only to the creation of new view elements:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n \n  <span class=\"green\">// Register updater to react to view creation</span>\n \n  <span class=\"teal\">ElevationWatcherUpdater</span> updater \n    = <span class=\"blue\">new</span> <span class=\"teal\">ElevationWatcherUpdater</span>(\n      app.ActiveAddInId );\n \n  <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( updater );\n \n  <span class=\"teal\">ElementCategoryFilter</span> f\n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n      <span class=\"teal\">BuiltInCategory</span>.OST_Views );\n \n  <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n    updater.GetUpdaterId(), f,\n    <span class=\"teal\">Element</span>.GetChangeTypeElementAddition() );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>After this command has been executed once, the updater is registered and its trigger installed.\nLike before, any subsequent elevation view insertion results in its message box being displayed, for instance when I again duplicate the East elevation view:\n\n<center>\n<img alt=\"ElevationWatcher using DMU\" src=\"img/ElevationWatcher3.png\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Unsubscribe from Event and Unregister Updater</h4>\n<p>Before letting this loose on the general public, I thought I would be a good citizen for the nonce and clean up after myself.\n\n<p>To do so, I modified both command implementations so that each call to the command toggles the event subscription or updater registration on and off.\n\n<p>In both cases, this was very easily achieved. \nI simply implemented a static member variable to hold the event handler delegate or the updater and initialised it to null.\nIt looks like this for the DocumentChanged event handler:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep a reference to the handler, so we know </span>\n  <span class=\"gray\">///</span><span class=\"green\"> whether we have already registered and need </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to unregister or vice versa.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt; \n    _handler = <span class=\"blue\">null</span>;\n</pre>\n<p>It is even simpler for the updater:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep a reference to the updater, so we know </span>\n  <span class=\"gray\">///</span><span class=\"green\"> whether we have already registered and need </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to unregister or vice versa.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">ElevationWatcherUpdater</span> _updater = <span class=\"blue\">null</span>;\n</pre>\n<p>Each time the command is run, it either subscribes/registers and sets the reference if it was null previously, or unsubscribes/unregisters and nulls it in the other case.\nHere is the relevant updated code snippet for the DocumentChanged event:\n\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _handler )\n  {\n    _handler\n      = <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt;(\n        OnDocumentChanged );\n \n    <span class=\"green\">// Subscribe to DocumentChanged event</span>\n \n    app.DocumentChanged += _handler;\n  }\n  <span class=\"blue\">else</span>\n  {\n    app.DocumentChanged -= _handler;\n    _handler = <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>Here is the corresponding code for DMU:\n\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _updater )\n  {\n    _updater = <span class=\"blue\">new</span> <span class=\"teal\">ElevationWatcherUpdater</span>(\n      app.ActiveAddInId );\n \n    <span class=\"green\">// Register updater to react to view creation</span>\n \n    <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( _updater );\n \n    <span class=\"teal\">ElementCategoryFilter</span> f\n      = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n        <span class=\"teal\">BuiltInCategory</span>.OST_Views );\n \n    <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n      _updater.GetUpdaterId(), f,\n      <span class=\"teal\">Element</span>.GetChangeTypeElementAddition() );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"teal\">UpdaterRegistry</span>.UnregisterUpdater( \n      _updater.GetUpdaterId() );\n \n    _updater = <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>Here is \n\n<a href=\"zip/bc_13_99_0.zip\">\nversion 2013.0.99.0</a> of\n\nThe Building Coder samples including the two new commands.\n\n<p>I hope you find this comparison useful, appreciate how simple both of these mechanisms are to use, and understand the advantages offered by the DMU.\n\n<p><strong>Addendum:</strong> As Victor very correctly points out below, I omitted pointing out the main difference between the DocumentChanged event and the DMU mechanism, since we have discussed it several times in the past:\n<p>The DocumentChanged event is not raised until after the transaction causing it has been closed, so the changes made cannot be cancelled.\nIf elements were deleted, they are gone by the time you receive the notification; all you receive from the event handler argument is their element ids, and you cannot even find out what type they were.\nThe updater is called within the same transaction as the modification causing it, providing much more control.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0783_doc_change_dmu",
    "header_text": "Subscribe to DocumentChanged to React to Elevation View Creation",
    "local_header_href": "#subscribe-to-documentchanged-to-react-to-elevation-view-creation",
    "chunk_text": "<h4>Subscribe to DocumentChanged to React to Elevation View Creation</h4><p>It is easy to detect when a specific element is added, such as a new elevation view, for instance by subscribing to the DocumentChanged event. This can be done either in  the OnStartup method of an external application or from an external command. In either case, you should pay attention to also unsubscribe from the event when it is no longer needed, for instance on application shutdown, at the end of the command, or from some other place.\n\n<p>In order to test the behaviour simply from within the standard framework of The Building Coder sample collection, I implemented a simple external command CmdElevationWatcher subscribing to the event. \nThe event handler receives a DocumentChangedEventArgs instance providing three separate collections of ids of added, deleted and modified elements.\nWe pass in the list of added ids to the FindElevationView method, which returns the first elevation view in the given element id collection if one exists, causing a message box listing it to be displayed.\n\n<p>Here is the entire code of this external command implementation:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> React to elevation view creation subscribing to DocumentChanged event</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdElevationWatcher</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the first elevation view found in the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> given element id collection or null.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">View</span> FindElevationView(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids )\n  {\n    <span class=\"teal\">View</span> view = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n    {\n      view = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != view\n        &amp;&amp; <span class=\"teal\">ViewType</span>.Elevation == view.ViewType )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      view = <span class=\"blue\">null</span>;\n    }\n    <span class=\"blue\">return</span> view;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> DocumentChanged event handler</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> OnDocumentChanged(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">DocumentChangedEventArgs</span> e )\n  {\n    <span class=\"teal\">Document</span> doc = e.GetDocument();\n \n    <span class=\"teal\">View</span> view = FindElevationView( \n      doc, e.GetAddedElementIds() );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != view )\n    {\n      <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format( \n        <span class=\"maroon\">\"You just created an \"</span>\n        + <span class=\"maroon\">\"elevation view '{0}'. Are you \"</span>\n        + <span class=\"maroon\">\"sure you want to do that? \"</span>\n        + <span class=\"maroon\">\"(Elevations don't show hidden line \"</span>\n        + <span class=\"maroon\">\"detail, which makes them unsuitable \"</span>\n        + <span class=\"maroon\">\"for core wall elevations etc.)\"</span>, \n        view.Name );\n \n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"ElevationChecker\"</span>, msg );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n \n    <span class=\"green\">// Subscribe to DocumentChanged event</span>\n \n    app.DocumentChanged\n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt;(\n        OnDocumentChanged );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>After this command has been executed, the event is subscribed to.\nAny subsequent elevation view insertion results in the message box being displayed, for instance when I duplicate the East elevation view:\n\n<center>\n<img alt=\"ElevationWatcher using DocumentChanged\" src=\"img/ElevationWatcher1.png\"/>\n</center>\n<p>This approach has two significant disadvantages: \n\n<ol>\n<li>It reacts erroneously when a family is loaded.\n<li>Its performance is suboptimal.\n</li></li></ol>\n<p><b>1.</b> When a family is loaded into a project, its views are also inserted with it.\nThis insertion currently triggers a DocumentChanged event on the elevation views as well.\nFor instance, if I load the standard rectangular column 'family M_Rectangular Column.rfa', a similar message appears:\n\n<center>\n<img alt=\"ElevationWatcher reacting to family load\" src=\"img/ElevationWatcher2.png\"/>\n</center>\n<p>This is unintentional and potentially confusing.\n\n<p><b>2.</b> The performance is not optimal, since DocumentChanged reacts to each and every modification of the document.\nFurthermore, every single added element needs to be examined to check whether it is an elevation view.\n\n<p>Both of these disadvantages can easily be avoided by using the dynamic model update mechanism DMU instead.\n\n\n<a name=\"2\"></a>\n<h4>Install Dynamic Model Updater to React to Elevation View Creation</h4>\n<p>As said, the dynamic model updater mechanism can easily be used to determine that specific elements have been added to the database, and it avoids the DocumentChanged event disadvantages mentioned above, since it reacts only to certain well-defined modifications on a certain well-defined set of elements used to set up the updater trigger.\n\n<p>First we need to implement our updater class to display a message if an elevation view is added:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Updater notifying user if an </span>\n<span class=\"gray\">///</span><span class=\"green\"> elevation view was added.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">ElevationWatcherUpdater</span> : <span class=\"teal\">IUpdater</span>\n{\n  <span class=\"blue\">static</span> <span class=\"teal\">AddInId</span> _appId;\n  <span class=\"blue\">static</span> <span class=\"teal\">UpdaterId</span> _updaterId;\n \n  <span class=\"blue\">public</span> ElevationWatcherUpdater( <span class=\"teal\">AddInId</span> id )\n  {\n    _appId = id;\n \n    _updaterId = <span class=\"blue\">new</span> <span class=\"teal\">UpdaterId</span>( _appId, <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>(\n      <span class=\"maroon\">\"fafbf6b2-4c06-42d4-97c1-d1b4eb593eff\"</span> ) );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( <span class=\"teal\">UpdaterData</span> data )\n  {\n    <span class=\"teal\">Document</span> doc = data.GetDocument();\n    <span class=\"teal\">Application</span> app = doc.Application;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> \n      data.GetAddedElementIds() )\n    {\n      <span class=\"teal\">View</span> view = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != view \n        &amp;&amp; <span class=\"teal\">ViewType</span>.Elevation == view.ViewType )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"ElevationWatcher Updater\"</span>,\n          <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"New elevation view '{0}'\"</span>,\n            view.Name ) );\n      }\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetAdditionalInformation() \n  { \n    <span class=\"blue\">return</span> <span class=\"maroon\">\"The Building Coder, \"</span>\n      + <span class=\"maroon\">\"http://thebuildingcoder.typepad.com\"</span>; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">ChangePriority</span> GetChangePriority() \n  { \n    <span class=\"blue\">return</span> <span class=\"teal\">ChangePriority</span>.FloorsRoofsStructuralWalls; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">UpdaterId</span> GetUpdaterId() \n  { \n    <span class=\"blue\">return</span> _updaterId; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetUpdaterName() \n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"ElevationWatcherUpdater\"</span>;\n  }\n}\n</pre>\n<p>With this in place, we can implement a second external test command CmdElevationWatcherUpdater to instantiate and register our updater and define a trigger for it.\nThe trigger reacts only to the creation of new view elements:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n \n  <span class=\"green\">// Register updater to react to view creation</span>\n \n  <span class=\"teal\">ElevationWatcherUpdater</span> updater \n    = <span class=\"blue\">new</span> <span class=\"teal\">ElevationWatcherUpdater</span>(\n      app.ActiveAddInId );\n \n  <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( updater );\n \n  <span class=\"teal\">ElementCategoryFilter</span> f\n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n      <span class=\"teal\">BuiltInCategory</span>.OST_Views );\n \n  <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n    updater.GetUpdaterId(), f,\n    <span class=\"teal\">Element</span>.GetChangeTypeElementAddition() );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>After this command has been executed once, the updater is registered and its trigger installed.\nLike before, any subsequent elevation view insertion results in its message box being displayed, for instance when I again duplicate the East elevation view:\n\n<center>\n<img alt=\"ElevationWatcher using DMU\" src=\"img/ElevationWatcher3.png\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Unsubscribe from Event and Unregister Updater</h4>\n<p>Before letting this loose on the general public, I thought I would be a good citizen for the nonce and clean up after myself.\n\n<p>To do so, I modified both command implementations so that each call to the command toggles the event subscription or updater registration on and off.\n\n<p>In both cases, this was very easily achieved. \nI simply implemented a static member variable to hold the event handler delegate or the updater and initialised it to null.\nIt looks like this for the DocumentChanged event handler:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep a reference to the handler, so we know </span>\n  <span class=\"gray\">///</span><span class=\"green\"> whether we have already registered and need </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to unregister or vice versa.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt; \n    _handler = <span class=\"blue\">null</span>;\n</pre>\n<p>It is even simpler for the updater:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep a reference to the updater, so we know </span>\n  <span class=\"gray\">///</span><span class=\"green\"> whether we have already registered and need </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to unregister or vice versa.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">ElevationWatcherUpdater</span> _updater = <span class=\"blue\">null</span>;\n</pre>\n<p>Each time the command is run, it either subscribes/registers and sets the reference if it was null previously, or unsubscribes/unregisters and nulls it in the other case.\nHere is the relevant updated code snippet for the DocumentChanged event:\n\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _handler )\n  {\n    _handler\n      = <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt;(\n        OnDocumentChanged );\n \n    <span class=\"green\">// Subscribe to DocumentChanged event</span>\n \n    app.DocumentChanged += _handler;\n  }\n  <span class=\"blue\">else</span>\n  {\n    app.DocumentChanged -= _handler;\n    _handler = <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>Here is the corresponding code for DMU:\n\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _updater )\n  {\n    _updater = <span class=\"blue\">new</span> <span class=\"teal\">ElevationWatcherUpdater</span>(\n      app.ActiveAddInId );\n \n    <span class=\"green\">// Register updater to react to view creation</span>\n \n    <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( _updater );\n \n    <span class=\"teal\">ElementCategoryFilter</span> f\n      = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n        <span class=\"teal\">BuiltInCategory</span>.OST_Views );\n \n    <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n      _updater.GetUpdaterId(), f,\n      <span class=\"teal\">Element</span>.GetChangeTypeElementAddition() );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"teal\">UpdaterRegistry</span>.UnregisterUpdater( \n      _updater.GetUpdaterId() );\n \n    _updater = <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>Here is \n\n<a href=\"zip/bc_13_99_0.zip\">\nversion 2013.0.99.0</a> of\n\nThe Building Coder samples including the two new commands.\n\n<p>I hope you find this comparison useful, appreciate how simple both of these mechanisms are to use, and understand the advantages offered by the DMU.\n\n<p><strong>Addendum:</strong> As Victor very correctly points out below, I omitted pointing out the main difference between the DocumentChanged event and the DMU mechanism, since we have discussed it several times in the past:\n<p>The DocumentChanged event is not raised until after the transaction causing it has been closed, so the changes made cannot be cancelled.\nIf elements were deleted, they are gone by the time you receive the notification; all you receive from the event handler argument is their element ids, and you cannot even find out what type they were.\nThe updater is called within the same transaction as the modification causing it, providing much more control.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0783_doc_change_dmu",
    "header_text": "Install Dynamic Model Updater to React to Elevation View Creation",
    "local_header_href": "#install-dynamic-model-updater-to-react-to-elevation-view-creation",
    "chunk_text": "<h4>Install Dynamic Model Updater to React to Elevation View Creation</h4><p>As said, the dynamic model updater mechanism can easily be used to determine that specific elements have been added to the database, and it avoids the DocumentChanged event disadvantages mentioned above, since it reacts only to certain well-defined modifications on a certain well-defined set of elements used to set up the updater trigger.\n\n<p>First we need to implement our updater class to display a message if an elevation view is added:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Updater notifying user if an </span>\n<span class=\"gray\">///</span><span class=\"green\"> elevation view was added.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">ElevationWatcherUpdater</span> : <span class=\"teal\">IUpdater</span>\n{\n  <span class=\"blue\">static</span> <span class=\"teal\">AddInId</span> _appId;\n  <span class=\"blue\">static</span> <span class=\"teal\">UpdaterId</span> _updaterId;\n \n  <span class=\"blue\">public</span> ElevationWatcherUpdater( <span class=\"teal\">AddInId</span> id )\n  {\n    _appId = id;\n \n    _updaterId = <span class=\"blue\">new</span> <span class=\"teal\">UpdaterId</span>( _appId, <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>(\n      <span class=\"maroon\">\"fafbf6b2-4c06-42d4-97c1-d1b4eb593eff\"</span> ) );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Execute( <span class=\"teal\">UpdaterData</span> data )\n  {\n    <span class=\"teal\">Document</span> doc = data.GetDocument();\n    <span class=\"teal\">Application</span> app = doc.Application;\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> \n      data.GetAddedElementIds() )\n    {\n      <span class=\"teal\">View</span> view = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">View</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != view \n        &amp;&amp; <span class=\"teal\">ViewType</span>.Elevation == view.ViewType )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"ElevationWatcher Updater\"</span>,\n          <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"New elevation view '{0}'\"</span>,\n            view.Name ) );\n      }\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetAdditionalInformation() \n  { \n    <span class=\"blue\">return</span> <span class=\"maroon\">\"The Building Coder, \"</span>\n      + <span class=\"maroon\">\"http://thebuildingcoder.typepad.com\"</span>; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">ChangePriority</span> GetChangePriority() \n  { \n    <span class=\"blue\">return</span> <span class=\"teal\">ChangePriority</span>.FloorsRoofsStructuralWalls; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">UpdaterId</span> GetUpdaterId() \n  { \n    <span class=\"blue\">return</span> _updaterId; \n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetUpdaterName() \n  {\n    <span class=\"blue\">return</span> <span class=\"maroon\">\"ElevationWatcherUpdater\"</span>;\n  }\n}\n</pre>\n<p>With this in place, we can implement a second external test command CmdElevationWatcherUpdater to instantiate and register our updater and define a trigger for it.\nThe trigger reacts only to the creation of new view elements:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n \n  <span class=\"green\">// Register updater to react to view creation</span>\n \n  <span class=\"teal\">ElevationWatcherUpdater</span> updater \n    = <span class=\"blue\">new</span> <span class=\"teal\">ElevationWatcherUpdater</span>(\n      app.ActiveAddInId );\n \n  <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( updater );\n \n  <span class=\"teal\">ElementCategoryFilter</span> f\n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n      <span class=\"teal\">BuiltInCategory</span>.OST_Views );\n \n  <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n    updater.GetUpdaterId(), f,\n    <span class=\"teal\">Element</span>.GetChangeTypeElementAddition() );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>After this command has been executed once, the updater is registered and its trigger installed.\nLike before, any subsequent elevation view insertion results in its message box being displayed, for instance when I again duplicate the East elevation view:\n\n<center>\n<img alt=\"ElevationWatcher using DMU\" src=\"img/ElevationWatcher3.png\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Unsubscribe from Event and Unregister Updater</h4>\n<p>Before letting this loose on the general public, I thought I would be a good citizen for the nonce and clean up after myself.\n\n<p>To do so, I modified both command implementations so that each call to the command toggles the event subscription or updater registration on and off.\n\n<p>In both cases, this was very easily achieved. \nI simply implemented a static member variable to hold the event handler delegate or the updater and initialised it to null.\nIt looks like this for the DocumentChanged event handler:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep a reference to the handler, so we know </span>\n  <span class=\"gray\">///</span><span class=\"green\"> whether we have already registered and need </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to unregister or vice versa.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt; \n    _handler = <span class=\"blue\">null</span>;\n</pre>\n<p>It is even simpler for the updater:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep a reference to the updater, so we know </span>\n  <span class=\"gray\">///</span><span class=\"green\"> whether we have already registered and need </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to unregister or vice versa.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">ElevationWatcherUpdater</span> _updater = <span class=\"blue\">null</span>;\n</pre>\n<p>Each time the command is run, it either subscribes/registers and sets the reference if it was null previously, or unsubscribes/unregisters and nulls it in the other case.\nHere is the relevant updated code snippet for the DocumentChanged event:\n\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _handler )\n  {\n    _handler\n      = <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt;(\n        OnDocumentChanged );\n \n    <span class=\"green\">// Subscribe to DocumentChanged event</span>\n \n    app.DocumentChanged += _handler;\n  }\n  <span class=\"blue\">else</span>\n  {\n    app.DocumentChanged -= _handler;\n    _handler = <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>Here is the corresponding code for DMU:\n\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _updater )\n  {\n    _updater = <span class=\"blue\">new</span> <span class=\"teal\">ElevationWatcherUpdater</span>(\n      app.ActiveAddInId );\n \n    <span class=\"green\">// Register updater to react to view creation</span>\n \n    <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( _updater );\n \n    <span class=\"teal\">ElementCategoryFilter</span> f\n      = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n        <span class=\"teal\">BuiltInCategory</span>.OST_Views );\n \n    <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n      _updater.GetUpdaterId(), f,\n      <span class=\"teal\">Element</span>.GetChangeTypeElementAddition() );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"teal\">UpdaterRegistry</span>.UnregisterUpdater( \n      _updater.GetUpdaterId() );\n \n    _updater = <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>Here is \n\n<a href=\"zip/bc_13_99_0.zip\">\nversion 2013.0.99.0</a> of\n\nThe Building Coder samples including the two new commands.\n\n<p>I hope you find this comparison useful, appreciate how simple both of these mechanisms are to use, and understand the advantages offered by the DMU.\n\n<p><strong>Addendum:</strong> As Victor very correctly points out below, I omitted pointing out the main difference between the DocumentChanged event and the DMU mechanism, since we have discussed it several times in the past:\n<p>The DocumentChanged event is not raised until after the transaction causing it has been closed, so the changes made cannot be cancelled.\nIf elements were deleted, they are gone by the time you receive the notification; all you receive from the event handler argument is their element ids, and you cannot even find out what type they were.\nThe updater is called within the same transaction as the modification causing it, providing much more control.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0783_doc_change_dmu",
    "header_text": "Unsubscribe from Event and Unregister Updater",
    "local_header_href": "#unsubscribe-from-event-and-unregister-updater",
    "chunk_text": "<h4>Unsubscribe from Event and Unregister Updater</h4><p>Before letting this loose on the general public, I thought I would be a good citizen for the nonce and clean up after myself.\n\n<p>To do so, I modified both command implementations so that each call to the command toggles the event subscription or updater registration on and off.\n\n<p>In both cases, this was very easily achieved. \nI simply implemented a static member variable to hold the event handler delegate or the updater and initialised it to null.\nIt looks like this for the DocumentChanged event handler:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep a reference to the handler, so we know </span>\n  <span class=\"gray\">///</span><span class=\"green\"> whether we have already registered and need </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to unregister or vice versa.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt; \n    _handler = <span class=\"blue\">null</span>;\n</pre>\n<p>It is even simpler for the updater:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep a reference to the updater, so we know </span>\n  <span class=\"gray\">///</span><span class=\"green\"> whether we have already registered and need </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to unregister or vice versa.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">ElevationWatcherUpdater</span> _updater = <span class=\"blue\">null</span>;\n</pre>\n<p>Each time the command is run, it either subscribes/registers and sets the reference if it was null previously, or unsubscribes/unregisters and nulls it in the other case.\nHere is the relevant updated code snippet for the DocumentChanged event:\n\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _handler )\n  {\n    _handler\n      = <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">DocumentChangedEventArgs</span>&gt;(\n        OnDocumentChanged );\n \n    <span class=\"green\">// Subscribe to DocumentChanged event</span>\n \n    app.DocumentChanged += _handler;\n  }\n  <span class=\"blue\">else</span>\n  {\n    app.DocumentChanged -= _handler;\n    _handler = <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>Here is the corresponding code for DMU:\n\n<pre class=\"code\">\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _updater )\n  {\n    _updater = <span class=\"blue\">new</span> <span class=\"teal\">ElevationWatcherUpdater</span>(\n      app.ActiveAddInId );\n \n    <span class=\"green\">// Register updater to react to view creation</span>\n \n    <span class=\"teal\">UpdaterRegistry</span>.RegisterUpdater( _updater );\n \n    <span class=\"teal\">ElementCategoryFilter</span> f\n      = <span class=\"blue\">new</span> <span class=\"teal\">ElementCategoryFilter</span>(\n        <span class=\"teal\">BuiltInCategory</span>.OST_Views );\n \n    <span class=\"teal\">UpdaterRegistry</span>.AddTrigger(\n      _updater.GetUpdaterId(), f,\n      <span class=\"teal\">Element</span>.GetChangeTypeElementAddition() );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"teal\">UpdaterRegistry</span>.UnregisterUpdater( \n      _updater.GetUpdaterId() );\n \n    _updater = <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>Here is \n\n<a href=\"zip/bc_13_99_0.zip\">\nversion 2013.0.99.0</a> of\n\nThe Building Coder samples including the two new commands.\n\n<p>I hope you find this comparison useful, appreciate how simple both of these mechanisms are to use, and understand the advantages offered by the DMU.\n\n<p><strong>Addendum:</strong> As Victor very correctly points out below, I omitted pointing out the main difference between the DocumentChanged event and the DMU mechanism, since we have discussed it several times in the past:\n<p>The DocumentChanged event is not raised until after the transaction causing it has been closed, so the changes made cannot be cancelled.\nIf elements were deleted, they are gone by the time you receive the notification; all you receive from the event handler argument is their element ids, and you cannot even find out what type they were.\nThe updater is called within the same transaction as the modification causing it, providing much more control.\n</p></p></p></p></p></p></p></p></p></p>"
  }
]