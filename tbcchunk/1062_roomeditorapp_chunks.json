[
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "RoomEditorApp Idling and Benchmarking Timer",
    "local_header_href": "#roomeditorapp-idling-and-benchmarking-timer",
    "chunk_text": "<h3>RoomEditorApp Idling and Benchmarking Timer</h3><p>I solved my two RoomEditorApp\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/roomeditorapp-architecture-and-external-application.html#4\">\nIdling issues</a>!</p><p>They were especially worrying due to the fact that I am planning to present this application in my Autodesk university class DV1736 on <i>Cloud-Based, Real-Time, Round-Trip, 2D Revit Model Editing on Any Mobile Device</i>.</p><p>By the way, you should now enrol in the AU classes you are interested in – unless you already did :-)</p><p>Go to the\n\n<a href=\"https://events.au.autodesk.com/connect/publicDashboard.ww\">\nAU class catalogue</a>,\n\nsign in, click 'View All Classes', use the filters or keyword search to locate an event you want to schedule and add it to your personal schedule using the scheduling options and blue plus sign.</p><p>Here are my four classes, updated from the AU\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/open-mep-connector-warning.html#2\">\nclass catalogue preview</a> version:</p><ul>\n<li><b><a href=\"https://events.au.autodesk.com/connect/sessionDetail.ww?SESSION_ID=1736\">DV1736</a></b> –\nCloud-Based, Real-Time, Round-Trip, 2D Revit Model Editing on Any Mobile Device –\nThis presentation demonstrates real-time, round-trip editing of a simplified 2D rendering of an Autodesk Revit intelligent model on any mobile device with no need to install any additional software whatsoever beyond a web browser. How can this be achieved? A Revit software add-in exports polygon renderings of room boundaries and other elements such as furniture and equipment to a cloud-based repository that is implemented using an Apache CouchDB NoSQL database. On the mobile device, the repository is queried and the data rendered in a standard browser using server-side generated JavaScript and SVG. The rendering supports graphical editing, specifically translation and rotation of the furniture and equipment. Modified transformations are saved back to the cloud database. The Revit add-in picks up these changes and updates the Revit intelligent model in real-time. All of the components used are completely open source, except for Revit itself. This is an advanced class for experienced programmers\n(<a href=\"http://aucache.autodesk.com/au2013/sessionsFiles/1736/99/handout_1736_dv1736_2d_revit_model_editor_handout.pdf\">handout</a> and\n<a href=\"http://aucache.autodesk.com/au2013/sessionsFiles/1736/104/presentation_1736_dv1736_2d_revit_model_editor_slides.pdf\">slides</a>).</li>\n<li><b><a href=\"https://events.au.autodesk.com/connect/sessionDetail.ww?SESSION_ID=1914\">DV1914</a></b> –\nRevit API Expert Roundtable: Open House on the Factory Floor –\nInteract with a panel of Autodesk Revit API experts from Autodesk to get answers to your questions and discuss all relevant topics of your choice. If you are writing add-ins for Revit software, then this is the perfect forum to get to know better the people who shape the APIs you work with and to explain your views, ideas, and problems directly face-to-face. Note that prior .NET programming and Revit programming experience is required and that this class is not suitable for beginners\n(<a href=\"http://aucache.autodesk.com/au2013/sessionsFiles/1914/85/handout_1914_dv1914_revit_api_expert_roundtable_handout.pdf\">handout</a> and\n<a href=\"http://aucache.autodesk.com/au2013/sessionsFiles/1914/83/presentation_1914_dv1914_revit_api_expert_roundtable_slides.pdf\">slides</a>).</li>\n<li><b><a href=\"https://events.au.autodesk.com/connect/sessionDetail.ww?SESSION_ID=2010\">DV2010</a></b> –\nAdvanced Revit 2014 API Features and Samples –\nThis class focuses on some of the major new Autodesk Revit 2014 API features. We look at API access to the project browser, dockable panels, copy and paste, command launching, the graphics pipeline, schedule formatting, and additions to the view API including demonstration and discussion of sample code. We also provide an overview of all the new Revit 2014 SDK samples. Note that prior .NET and Revit programming experience is required and that this class is not suitable for beginners\n(<a href=\"http://aucache.autodesk.com/au2013/sessionsFiles/2010/101/handout_2010_dv2010_advanced_revit_2014_api_handout.pdf\">handout</a> and\n<a href=\"http://aucache.autodesk.com/au2013/sessionsFiles/2010/106/presentation_2010_dv2010_advanced_revit_2014_api_slides.pdf\">slides</a>).</li>\n<li><b><a href=\"https://events.au.autodesk.com/connect/sessionDetail.ww?SESSION_ID=3464\">DV3464-R</a></b> –\nMaking Revit Add-ins That Cooperate with Worksharing: A Roundtable Session –\nAre you an Autodesk Revit-based software developer who has run into issues supporting your add-ins in a workshared environment? Have you hit situations where elements can’t be edited or updated due to conflicts? As a followup discussion to “DV1888: Facing the Elephant in the Room: Making Revit Add-ins That Cooperate with Worksharing”, join this roundtable session to further discuss the techniques that are available to developers to operate on workshared models. Bring questions from your own development experience or more detailed questions inspired by the lecture and discuss the possibilities with a group of experienced Revit API developers. Knowledge of C# and Revit API is required, and prior experience with Revit worksharing will be helpful\n(<a href=\"http://aucache.autodesk.com/au2013/sessionsFiles/3464/374/presentation_3464_Worksharing%20API%20Roundtable.pdf\">slides</a>).</li>\n</ul><p>Back to my RoomEditorApp, though, and the nitty-gritty details of resolving my Idling issues.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "RoomEditorApp Idling Issues",
    "local_header_href": "#roomeditorapp-idling-issues",
    "chunk_text": "<h4>RoomEditorApp Idling Issues</h4><p>I recently wrote about my updated Revit 2014 version of the RoomEditorApp, the Revit add-in part of my cloud-based real-time round-trip 2D Revit model editing application, the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/roomeditorapp-for-revit-2014-on-github.html\">\nRoomEditorApp GitHub repository</a> and its\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/roomeditorapp-architecture-and-external-application.html\">\narchitecture and external application</a> implementation.</p><p>In closing, I mentioned two worrying\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/roomeditorapp-architecture-and-external-application.html#4\">\nIdling related problems</a>:</p><ul>\n<li>Unsubscribing from the Idling event had no effect.</li>\n<li>Decreased responsiveness of the Idling event.</li>\n</ul><p>Happily, and somewhat surprisingly, I yesterday resolved them both.</p><p>The issue with the unsubscription was easy, as I recently discovered and discussed the cause.</p><p>I was still worried that I might have to switch back to Revit 2013 for the demo due to the unresponsiveness, however.</p><p>Luckily, I thought of adding some benchmarking instrumentation code to find out where the issue was, and that helped find and fix the root cause.</p><p>It was my own fault  :-)</p><p>Here are the steps:</p><ul>\n<li><a href=\"#3\">Fixing the RoomEditorApp Idling unsubscription</a></li>\n<li><a href=\"#4\">Adding a benchmarking timer</a></li>\n<li><a href=\"#5\">Benchmarking instrumentation</a></li>\n<li><a href=\"#6\">Initial benchmarking results and conclusion</a></li>\n<li><a href=\"#7\">Improving the CouchDB sequence number query</a></li>\n<li><a href=\"#8\">Twiddling with Idling responsiveness</a></li>\n<li><a href=\"#9\">Download</a></li>\n</ul><a name=\"3\"></a>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "Fixing the RoomEditorApp Idling Unsubscription",
    "local_header_href": "#fixing-the-roomeditorapp-idling-unsubscription",
    "chunk_text": "<h4>Fixing the RoomEditorApp Idling Unsubscription</h4><p>My attempts to unsubscribe from the Idling event were failing due to the fact that each new external command invocation generates a new different class instance.\nThe unsubscribing instance was therefore providing a different member method to unsubscribe than the original one used to subscribe, so the original just kept going, as explained in the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/singleton-application-versus-multiple-command-instances.html\">\nsingleton application versus multiple command instances</a>.</p><p>That was really easy to fix, since I only had to modify the external application to keep track of the handler used to subscribe, and reuse that specific stored method delegate when unsubscribing again.</p><p>I published the fix in\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.0.16\">release 2014.0.0.16</a>.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "Adding a Benchmarking Timer",
    "local_header_href": "#adding-a-benchmarking-timer",
    "chunk_text": "<h4>Adding a Benchmarking Timer</h4><p>While I was at it, I decided to spend at least a little time trying to understand the cause for this unresponsiveness.</p><p>But where to start?</p><p>Well, first of all, I needed to understand where the time was actually being consumed.</p><p>To do so, I looked at my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/timer-code-for-benchmarking.html\">\ntimer code for benchmarking</a> and\n\nthe JtTimer class that I used to create some\n\n<a 04=\"\" 2010=\"\" blog=\"\" collector-benchmark.html\"=\"\" href=\"\" http:=\"\" thebuildingcoder.typepad.com=\"\">\nfiltered element collector benchmarks</a>.</p><p>Here is the spruced up version that I ended up using for the following tests:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Performance timer for profiling purposes.</span>\n<span class=\"gray\">///</span><span class=\"green\"> For a full description, please refer to</span>\n<span class=\"gray\">///</span><span class=\"green\"> http://thebuildingcoder.typepad.com/blog/2010/03/performance-profiling.html</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">JtTimer</span> : <span class=\"teal\">IDisposable</span>\n{\n<span class=\"blue\">  #region</span> Internal TimeRegistry class\n  <span class=\"blue\">class</span> <span class=\"teal\">TimeRegistry</span>\n  {\n<span class=\"blue\">    #region</span> Internal data and helper methods\n    <span class=\"blue\">class</span> <span class=\"teal\">Entry</span>\n    {\n      <span class=\"blue\">public</span> <span class=\"blue\">double</span> Time { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"blue\">int</span> Calls { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    }\n \n    <span class=\"blue\">static</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Entry</span>&gt; _collection\n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Entry</span>&gt;();\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return the percentage based on total time.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"value\"&gt;</span><span class=\"green\">value</span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"totalTime\"&gt;</span><span class=\"green\">total time</span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;&lt;/returns&gt;</span>\n    <span class=\"blue\">static</span> <span class=\"blue\">double</span> GetPercent(\n      <span class=\"blue\">double</span> value,\n      <span class=\"blue\">double</span> totalTime )\n    {\n      <span class=\"blue\">return</span> 0 == totalTime\n        ? 0\n        : <span class=\"teal\">Math</span>.Round( value * 100 / totalTime, 2 );\n    }\n<span class=\"blue\">    #endregion</span> <span class=\"green\">// Internal data and helper methods</span>\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Add new duration for specified key.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> AddTime(\n      <span class=\"blue\">string</span> key,\n      <span class=\"blue\">double</span> duration )\n    {\n      <span class=\"teal\">Entry</span> e;\n      <span class=\"blue\">if</span>( _collection.ContainsKey( key ) )\n      {\n        e = _collection[key];\n      }\n      <span class=\"blue\">else</span>\n      {\n        e = <span class=\"blue\">new</span> <span class=\"teal\">Entry</span>();\n        _collection.Add( key, e );\n      }\n      e.Time += duration;\n      ++e.Calls;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Write the report of the results to a text file.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> WriteResults(\n      <span class=\"blue\">string</span> description,\n      <span class=\"blue\">double</span> totalTime )\n    {\n      <span class=\"green\">// Set up text file path:</span>\n \n      <span class=\"blue\">string</span> strReportPath = <span class=\"teal\">Path</span>.Combine(\n        <span class=\"teal\">Path</span>.GetTempPath(), <span class=\"maroon\">\"PerformanceReport.txt\"</span> );\n \n      <span class=\"teal\">FileStream</span> fs = <span class=\"blue\">new</span> <span class=\"teal\">FileStream</span>( strReportPath,\n        <span class=\"teal\">FileMode</span>.OpenOrCreate, <span class=\"teal\">FileAccess</span>.Write );\n \n      <span class=\"teal\">StreamWriter</span> streamWriter = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( fs );\n      streamWriter.BaseStream.Seek( 0, <span class=\"teal\">SeekOrigin</span>.End );\n \n      <span class=\"green\">// Sort output by percentage of total time used:</span>\n \n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; lines = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;(\n        _collection.Count );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">KeyValuePair</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Entry</span>&gt; pair\n        <span class=\"blue\">in</span> _collection )\n      {\n        <span class=\"teal\">Entry</span> e = pair.Value;\n \n        lines.Add( <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"{0,10:0.00}%{1,10:0.00}{2,8}   {3}\"</span>,\n          GetPercent( e.Time, totalTime ),\n          <span class=\"teal\">Math</span>.Round( e.Time, 2 ),\n          e.Calls,\n          pair.Key ) );\n      }\n      lines.Sort();\n \n      <span class=\"blue\">string</span> header\n        = <span class=\"maroon\">\" Percentage   Seconds   Calls   Process\"</span>;\n \n      <span class=\"blue\">int</span> n = <span class=\"teal\">Math</span>.Max( header.Length,\n        lines.Max&lt;<span class=\"blue\">string</span>&gt;( x =&gt; x.Length ) );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != description\n        &amp;&amp; 0 &lt; description.Length )\n      {\n        n = <span class=\"teal\">Math</span>.Max( n, description.Length );\n        header = description + <span class=\"maroon\">\"\\r\\n\"</span> + header;\n      }\n      <span class=\"blue\">string</span> separator = <span class=\"maroon\">\"-\"</span>;\n      <span class=\"blue\">while</span>( 0 &lt; n-- )\n      {\n        separator += <span class=\"maroon\">\"-\"</span>;\n      }\n      streamWriter.WriteLine( separator );\n      streamWriter.WriteLine( header );\n      streamWriter.WriteLine( separator );\n \n      <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> line <span class=\"blue\">in</span> lines )\n      {\n        streamWriter.WriteLine( line );\n      }\n      streamWriter.WriteLine( separator + <span class=\"maroon\">\"\\r\\n\"</span> );\n      streamWriter.Close();\n      fs.Close();\n      <span class=\"teal\">Process</span>.Start( strReportPath );\n      _collection.Clear();\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// Internal TimeRegistry class</span>\n \n  <span class=\"blue\">string</span> _key;\n  <span class=\"teal\">Stopwatch</span> _timer;\n  <span class=\"blue\">double</span> _duration = 0;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Performance timer constructor.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"what_are_we_testing_here\"&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Key describing code to be timed</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"blue\">public</span> JtTimer( <span class=\"blue\">string</span> what_are_we_testing_here )\n  {\n    Restart( what_are_we_testing_here );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Automatic disposal when the the using statement</span>\n  <span class=\"gray\">///</span><span class=\"green\"> block finishes: the timer is stopped and the</span>\n  <span class=\"gray\">///</span><span class=\"green\"> time is registered.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> <span class=\"teal\">IDisposable</span>.Dispose()\n  {\n    Stop();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Write and display a report of the timing</span>\n  <span class=\"gray\">///</span><span class=\"green\"> results in a text file.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Report( <span class=\"blue\">string</span> description )\n  {\n    <span class=\"teal\">TimeRegistry</span>.WriteResults(\n      description, _duration );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Restart the measurement from scratch.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Restart( <span class=\"blue\">string</span> what_are_we_testing_here )\n  {\n    _key = what_are_we_testing_here;\n    _timer = <span class=\"teal\">Stopwatch</span>.StartNew();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Stop the timer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> Stop()\n  {\n    _timer.Stop();\n    _duration = _timer.Elapsed.TotalSeconds;\n    <span class=\"teal\">TimeRegistry</span>.AddTime( _key, _duration );\n  }\n}\n</pre><a name=\"5\"></a>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "Benchmarking Instrumentation",
    "local_header_href": "#benchmarking-instrumentation",
    "chunk_text": "<h4>Benchmarking Instrumentation</h4><p>To use the timer, I equipped various methods of interest with a using call to its constructor, e.g. like this:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the last sequence number.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> LastSequenceNumber\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">using</span>( <span class=\"teal\">JtTimer</span> pt = <span class=\"blue\">new</span> <span class=\"teal\">JtTimer</span>(\n        <span class=\"maroon\">\"LastSequenceNumber\"</span> ) )\n      {\n        <span class=\"teal\">ChangeOptions</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">ChangeOptions</span>();\n \n        <span class=\"teal\">CouchChanges</span>&lt;<span class=\"teal\">DbFurniture</span>&gt; changes\n          = _db.GetChanges&lt;<span class=\"teal\">DbFurniture</span>&gt;( opt );\n \n        <span class=\"teal\">CouchChangeResult</span>&lt;<span class=\"teal\">DbFurniture</span>&gt; r\n          = changes.Results.Last&lt;\n            <span class=\"teal\">CouchChangeResult</span>&lt;<span class=\"teal\">DbFurniture</span>&gt;&gt;();\n \n        <span class=\"blue\">return</span> r.Sequence;\n      }\n    }\n  }\n</pre><p>As you can see, I just add the using statement and a call to the JtTimer constructor to each method I would like to track performance for, nothing else.</p><p>All the rest is handled automatically by the JtTimer destructor and other internal methods.</p><p>I also added a call to instantiate a top-level timer keeping track of the total time and reporting results each time subscription is started and stopped, respectively, like this:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Subscription debugging timer.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">JtTimer</span> _timer = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Toggle on and off subscription to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> automatic cloud updates.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> ToggleSubscription(\n    <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt; handler )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unsubscribing...\"</span> );\n      _uiapp.Idling -= _handler;\n      _handler = <span class=\"blue\">null</span>;\n      _buttons[3].ItemText = _subscribe;\n      _timer.Stop();\n      _timer.Report( <span class=\"maroon\">\"Subscription timing\"</span> );\n      _timer = <span class=\"blue\">null</span>;\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unsubscribed.\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Subscribing...\"</span> );\n      _uiapp.Idling += handler;\n      _handler = handler;\n      _buttons[3].ItemText = _unsubscribe;\n      _timer = <span class=\"blue\">new</span> <span class=\"teal\">JtTimer</span>( <span class=\"maroon\">\"Subscription\"</span> );\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Subscribed.\"</span> );\n    }\n  }\n \n</pre><p>Here are all the occurrences of the string \"JtTimer\" in the entire project (copy and paste somewhere or view source to see truncated lines in full):</p><pre>\nFind all \"JtTimer\", Find Results 1, \"Entire Solution\", \"*.cs\"\n  App.cs(34):           static JtTimer _timer = null;\n  App.cs(234):          _timer = new JtTimer( \"Subscription\" );\n  CmdSubscribe.cs(43):  using( JtTimer pt = new JtTimer( \"OnIdling\" ) )\n  DbUpdater.cs(59):     using( JtTimer pt = new JtTimer( \"DbUpdater ctor\" ) )\n  DbUpdater.cs(166):    using( JtTimer pt = new JtTimer( \"UpdateBim\" ) )\n  JtTimer.cs(3):        // JtTimer.cs - performance profiling timer\n  JtTimer.cs(25):       public class JtTimer : IDisposable\n  JtTimer.cs(157):      public JtTimer( string what_are_we_testing_here )\n  Properties\\AssemblyInfo.cs(61):  // 2013-11-18 - 2014.0.0.17 - added JtTimer\n  RoomEditorDb.cs(24):  using( JtTimer pt = new JtTimer( \"RoomEditorDb ctor\" ) )\n  RoomEditorDb.cs(52):  using( JtTimer pt = new JtTimer( \"LastSequenceNumber\" ) )\n  RoomEditorDb.cs(81):  using( JtTimer pt = new JtTimer( \"LastSequenceNumberChanged\" ) )\n  Matching lines: 12\n  Matching files: 6\n  Total files searched: 21\n</pre><a name=\"6\"></a>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "Initial Benchmarking Results and Conclusion",
    "local_header_href": "#initial-benchmarking-results-and-conclusion",
    "chunk_text": "<h4>Initial Benchmarking Results and Conclusion</h4><p>In the beginning, I was not stopping the top-level timer properly, so I had no grand total, and therefore no percentages.</p><p>The very first result looked like this, with just two timers active, showing that I was headed in the right direction:</p><pre>\n------------------------------------------\nSubscription timing\n Percentage   Seconds   Calls   Process\n------------------------------------------\n      0.00%      0.04       1   UpdateBim\n      0.00%     41.73     420   OnIdling\n------------------------------------------\n</pre><p>This already tells me that the Idling event handler is consuming a lot of time, whereas the actual BIM update is quick.</p><p>Adding a few more timers here and there starts producing useful results:</p><pre>\n---------------------------------------------------\nSubscription timing\n Percentage   Seconds   Calls   Process\n---------------------------------------------------\n      0.00%      0.00       1   DbUpdater ctor\n      0.00%      0.05       1   UpdateBim\n      0.00%      3.27      51   RoomEditorDb ctor\n      0.00%     76.40     480   OnIdling\n      0.00%     80.35      49   LastSequenceNumber\n---------------------------------------------------\n</pre><p>The LastSequenceNumber property is eating up absolutely all the time!</p><p>It is called once before we start subscribing to the Idling event, and then from inside the event handler.</p><p>All of the Idling event handler time is consumed by calls to this property.</p><p>I already showed the method implementation as an example of the <a href=\"#5\">benchmarking instrumentation</a>.</p><p>Looking more closely at this method, I noted that it retrieves <b><i>all</i></b> the furniture documents from the database in order to determine the most recent sequence number.\nThe sequence number is used to afterwards retrieve all database changes that occurred after a certain point.</p><p>This call will obviously take longer and longer time the more entries we add to the database.</p><a name=\"7\"></a>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "Improving the CouchDB Sequence Number Query",
    "local_header_href": "#improving-the-couchdb-sequence-number-query",
    "chunk_text": "<h4>Improving the CouchDB Sequence Number Query</h4><p>In the calls made to the LastSequenceNumber property from the Idling event handler, it is used only to check whether any new changes occurred.</p><p>At that point, we already have an initial sequence number to start from, and can ask the database to return only changes that occurred after that point in time, using a 'since' argument, e.g. like this:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Determine whether the given sequence number</span>\n  <span class=\"gray\">///</span><span class=\"green\"> matches the most up-to-date status.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> LastSequenceNumberChanged( <span class=\"blue\">int</span> since )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">JtTimer</span> pt = <span class=\"blue\">new</span> <span class=\"teal\">JtTimer</span>(\n      <span class=\"maroon\">\"LastSequenceNumberChanged\"</span> ) )\n    {\n      <span class=\"teal\">ChangeOptions</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">ChangeOptions</span>();\n \n      opt.Since = since;\n      opt.IncludeDocs = <span class=\"blue\">false</span>;\n \n      <span class=\"teal\">CouchChanges</span>&lt;<span class=\"teal\">DbFurniture</span>&gt; changes\n        = _db.GetChanges&lt;<span class=\"teal\">DbFurniture</span>&gt;( opt );\n \n      <span class=\"teal\">CouchChangeResult</span>&lt;<span class=\"teal\">DbFurniture</span>&gt; r\n        = changes.Results.LastOrDefault&lt;\n          <span class=\"teal\">CouchChangeResult</span>&lt;<span class=\"teal\">DbFurniture</span>&gt;&gt;();\n \n      <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> == r || since &lt; r.Sequence,\n        <span class=\"maroon\">\"expected monotone growing sequence number\"</span> );\n \n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != r &amp;&amp; since &lt; r.Sequence;\n    }\n  }\n</pre><p>Replacing the call to the LastSequenceNumber property by a call to the new LastSequenceNumberChanged method in the Idling event handler shows a huge improvement:</p><pre>\n----------------------------------------------------------\nSubscription timing\n Percentage   Seconds   Calls   Process\n----------------------------------------------------------\n      0.00%      0.00       1   DbUpdater ctor\n      0.00%      0.11       1   UpdateBim\n      0.00%      3.25    1741   RoomEditorDb ctor\n      0.00%      5.35       1   LastSequenceNumber\n      0.00%     19.79    1738   LastSequenceNumberChanged\n      0.00%     23.55    1951   OnIdling\n----------------------------------------------------------\n</pre><p>Now a much larger number of calls to the RoomEditorDb constructor and the LastSequenceNumberChanged method can be completed in much less time.</p><p>The one and only initial call to LastSequenceNumber is still awfully expensive and could probably also be improved, but the LastSequenceNumberChanged method is quick, and the whole Idling handling is immediately much more responsive.</p><a name=\"8\"></a>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "Twiddling with Idling Responsiveness",
    "local_header_href": "#twiddling-with-idling-responsiveness",
    "chunk_text": "<h4>Twiddling with Idling Responsiveness</h4><p>I added the Stop method to the timer class and call when unsubscribing from Idling, as shown above in the <a href=\"#5\">benchmarking instrumentation</a> code.</p><p>That switches on the top-level timer providing the 100% measurement and enables the percentage calculations, like this:</p><pre>\n----------------------------------------------------------\nSubscription timing\n Percentage   Seconds   Calls   Process\n----------------------------------------------------------\n      0.00%      0.00       1   DbUpdater ctor\n      0.25%      0.05       1   UpdateBim\n      8.85%      1.67     486   LastSequenceNumberChanged\n     16.06%      3.03     489   RoomEditorDb ctor\n     17.05%      3.22   48667   OnIdling\n     27.89%      5.27       1   LastSequenceNumber\n    100.00%     18.89       1   Subscription\n----------------------------------------------------------\n</pre><p>With a more responsive behaviour, I am able to experiment a bit.\nFor instance, I removed the stopwatch in the Idling event handler again, call SetRaiseWithoutDelay immediately, and ignore 99 out of hundred calls to the Idling event handler.\nAs you can see, the Idling handler is called a hundred times for each check of the LastSequenceNumberChanged property:</p><pre>\n----------------------------------------------------------\nSubscription timing\n Percentage   Seconds   Calls   Process\n----------------------------------------------------------\n      0.00%      0.00       2   DbUpdater ctor\n      0.11%      0.08       2   UpdateBim\n      4.46%      3.23    1693   RoomEditorDb ctor\n      8.35%      6.05       1   LastSequenceNumber\n     21.72%     15.73    1689   LastSequenceNumberChanged\n     27.39%     19.84  168900   OnIdling\n    100.00%     72.44       1   Subscription\n----------------------------------------------------------\n</pre><p>The one single call to the LastSequenceNumber property costs more time than almost 500 calls to LastSequenceNumberChanged and almost 50000 calls to the Idling event handler.</p><p>Whew.</p><a name=\"9\"></a>"
  },
  {
    "original_filename": "1062_roomeditorapp",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>This application lives in the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">\nRoomEditorApp GitHub repository</a> and\n\nthe versions discussed above are:\n\n<ul>\n<li><a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.0.16\">\n2014.0.0.16</a> with\n\nthe unsubscription fixed as described in the discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/singleton-application-versus-multiple-command-instances.html\">\nsingleton application versus multiple command instances</a>.\n</li>\n<li>\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2014.0.0.17\">\n2014.0.0.17</a> with\n\nadded benchmarking timer and code, new JtTimer class, RoomEditorDb.LastSequenceNumber identified as the culprit, LastSequenceNumberChanged implemented, which only retrieves new changes and saves a huge amount of time, so the Idling event handling is now responsive and snappy.</li>\n</ul>\n<p>I hope that this is of interest to you for numerous reasons.</p>\n<p>The most important lesson should be: please benchmark your code!</p>\n</p>"
  }
]