[
  {
    "original_filename": "0885_viewport_type",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0885_viewport_type",
    "header_text": "Changing Viewport Type",
    "local_header_href": "#changing-viewport-type",
    "chunk_text": "<h3>Changing Viewport Type</h3><p>Here is a question on setting the type of an element by using the built-in ELEM_FAMILY_AND_TYPE_PARAM parameter value, explored by Bettina Zimmermann of\n\n<a href=\"http://www.nti.dk\">\nNTI Cadcenter A/S</a>:</p><p><strong>Question:</strong> I'm inserting viewports on sheets and I'd like to change the viewport type to my own defined type.\n\n<p>How can I this programmatically?</p>\n<p>By default, the API call creates a new viewport with type \"Title w Line\".\nI'd like to change that to e.g. my own type \"Test\".\n\n<p>Here is my own self-defined viewport type \"Test\":</p>\n<center>\n<img alt=\"Change viewport type\" src=\"img/change_vp_type_1.png\" width=\"400\"/>\n</center>\n<p>I created it manually by pressing Duplicate.\n\n<p>The API method to create viewports does not support any viewport type parameter:\n\n<pre>\n  Autodesk.Revit.DB.Viewport.Create(\n    Document, viewSheet.Id, View.Id, zero )\n</pre>\n<p>I hope the viewport type can be changed in some other way.</p>\n<p><strong>Answer:</strong> When dealing with views and viewports, one of the first places to take a look is Steve Mycynek's AU class\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/au-classes-on-the-view-mep-and-link-apis.html#2\">\nCP3133 Using the Revit Schedule and View APIs</a>,\n\nwhich demonstrates just about everything you can do with the Revit View API.\n\n<p>Further, I would suggest that you explore the elements of interest in depth using RevitLookup.\n\n<p>The Element.GetTypeId method may provide read access to the data you seek.\nUnfortunately, of course, it is read-only.\nMaybe you can find some parameter that also provides access to this data?\n\n\n<p><strong>Response:</strong> I did indeed find a parameter, well hidden in an unexpected location.\n\n<p>My first thought when searching for it is that the viewport is a system family, just like a wall, and walls allow you to change their type by setting\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/system-family-creation.html\">\nwall.WallType = newWallType</a>.\n\n<p>Walls also expect a type argument when a new wall is created:\n\n<pre>\n  DB.Wall.Create( Document, Line, WallType.Id,\n    Level.Id, 11, 0, False, IsStructural );\n</pre>\n<p>However, as said, the Viewport Create method does not take any type argument:</p>\n<pre>\n  Autodesk.Revit.DB.Viewport.Create(\n    Document, viewSheet.Id, View.Id, zero );\n</pre>\n<p>In spite of this, the parameter I found that I can use for this is BuiltInParameter.ELEM_FAMILY_AND_TYPE_PARAM.</p>\n<p>I created a VB.NET sample add-in\n\n<a href=\"zip/ChangeViewPortType.zip\">ChangeViewPortType</a> to\n\ndemonstrate its use.\nHere is how to use it:</p>\n<ul>\n<li>Set a sheet view active with two viewports on it – could be two floor plans on a sheet.\n<li>Change one of the viewports to another type – see below.\n<li>Select both viewports and run sample project – the last selected viewport will be changed to have the same type as the first.\n</li></li></li></ul>\n<p>Here is a sheet with a viewport.</p>\n<center>\n<img alt=\"Sheet with a viewport\" src=\"img/change_vp_type_2.png\" width=\"400\"/>\n</center>\n<p>The default type of a newly created viewport is 'Title w Line';\nI made a new type called 'Test' that has no 'Title' and 'Extension Line'.\n'Title' and 'Extension Line' is the circle with a line and some text:</p>\n<p>I made the type by clicking 'Edit Type' and duplicate.</p>\n<center>\n<img alt=\"Edit type and duplicate\" src=\"img/change_vp_type_3.png\" width=\"400\"/>\n</center>\n<p>Many thanks to Bettina for her exploration and thorough documentation!</p>\n<p><strong>Addendum:</strong> As pointed out below by Alexander Buschmann, the Revit API also provides the more user-friendly Element.ChangeTypeId method to directly change the type of any element having a type, with no need to go through the parameter to access it.\nThanks, Alexander, for adding that!</p>\n</p></p></p></p></p></p></p></p></p></p>"
  }
]