[
  {
    "original_filename": "1210_adn_lab_xtra_submodule",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1210_adn_lab_xtra_submodule",
    "header_text": "ADN Labs Xtra on GitHub and RvtVa3c in Three.js",
    "local_header_href": "#adn-labs-xtra-on-github-and-rvtva3c-in-threejs",
    "chunk_text": "<h3>ADN Labs Xtra on GitHub and RvtVa3c in Three.js</h3><p>I had several cases recently discussing advanced Revit API exploration issues with experienced application developers new to the Revit API.</p><p>Therefore, once again, the topic of available tools and their various uses came up.</p><p>One important tool for me is the simple element lister, which is currently still part of the ADN Xtra labs, the precursor to the official ADN Revit API training labs.</p><p>I had not yet migrated those to Revit 2015, so I now finally did so and posted them to GitHub.</p><p>Another interesting GitHub learning step today was integrating the Revit JSON model exporter RvtVa3c for the vA3C AEC viewer into the official list of three.js exporters.</p><p>So this is what I discuss today:</p><ul>\n<li><a href=\"#2\">Getting Started with the Revit API</a></li>\n<li><a href=\"#3\">Revit database exploration tools</a></li>\n<li><a href=\"#4\">ADN Revit API Xtra training labs for Revit 2015</a></li>\n<li><a href=\"#5\">Integrating RvtVa3c into three.js</a></li>\n<li><a href=\"#6\">Updated integration of RvtVa3c into three.js</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1210_adn_lab_xtra_submodule",
    "header_text": "Getting Started with the Revit API",
    "local_header_href": "#getting-started-with-the-revit-api",
    "chunk_text": "<h4>Getting Started with the Revit API</h4><p>One important step before starting to think about working on a Revit add-in is to understand the basic Revit concepts and workflows from a user point of view.</p><p>Revit is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.41\">\nsignificantly different from most traditional CAD systems</a>,\n\nand this is thoroughly reflected in the Revit API as well.</p><p>Once that is understood, the next and obvious step is to work through the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#2\">\nRevit API getting started material</a>.</p><p>It provides both a 'My First Revit Plug-in' and DevTV tutorials discussing all the basics of add-in development and leading you through the entire process step by step, including setting up the development environment, SDK, basic tools, understanding the add-in architecture, installation, coding, compilation and main API principles.</p><p>Often some research is required to determine how to programmatically address a specific task.</p><p>The main important documentation components that you absolutely must be aware of are:</p><ul>\n<li>The Revit SDK, including:</li>\n<ul>\n<li>The Revit API help file RevitAPI.chm\n<li>The extensive SDK sample collection and solution SDKSamples2015.sln</li>\n<li>The SDK external application add-in RvtSamples that loads all the external command samples</li>\n</li></ul>\n<li>The online Revit developer guide</li>\n<li>The database exploration tool RevitLookup</li>\n</ul><p>The help file documents all classes, their properties and methods. It does not say much about how they work together, though.</p><p>The developer guide explains concepts, workflows, more complex and higher-level relationships, and how the classes, properties and methods work together.</p><p>The SDK samples demonstrate real code executing most of the workflows in a simple manner.\nThe sample solution file enables compilation and debugging of all samples in one fell swoop, and RvtSamples provides a method to load all external command samples in one go, instead of manually installing a hundred or so separate add-ins.</p><p>In addition to this brief overview, please do not miss this\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/getting-started-with-the-revit-api.html\">\nmore detailed explanation</a> and the recommendations on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/preparing-for-a-hands-on-revit-api-training.html\">\npreparing for a hands-on Revit API training</a>.</p><p>Even with all the documentation in place and at your disposal, there are a number of undocumented areas and workflows.</p><p>You will often need to research properties, relationships and methods used to create and modify the model for your specific needs yourself.</p><p>One of the most powerful ways to approach this research is to create a simple sample model manually, store that starting point, perform the required changes by hand in the user interface, store the ending point, and compare the differences.</p><p>A detailed comparison of the models before and after requires database exploration tools.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1210_adn_lab_xtra_submodule",
    "header_text": "Revit Database Exploration Tools",
    "local_header_href": "#revit-database-exploration-tools",
    "chunk_text": "<h4>Revit Database Exploration Tools</h4><p>The first and foremost Revit database exploration tool is <b>RevitLookup</b>.</p><p>You absolutely must install and understand the usage of this tool.\nIt is actually also pretty useful for end users.</p><p>Here are a number of discussions of various <a href=\"http://thebuildingcoder.typepad.com/blog/revitlookup\">uses of RevitLookup</a>.</p><p>It is a simple interactive dialogue based tool that enables you to navigate the Revit database, its elements, their properties and relationships with each other.</p><p>It is a statically compiled add-in and provided in source code in the <a href=\"https://github.com/jeremytammik/RevitLookup\">RevitLookup GitHub repository</a>.</p><p>Once you have found the objects and properties you are interested in via the RevitLookup user interface, you can use the Visual Studio environment and debugger to explore how that property or relationship can be reached programmatically.</p><p>Once you have acquainted yourself with that static interactive exploration method and understand the database structure, you can move on to more powerful\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/intimate-revit-database-exploration-with-the-python-shell.html\">\ninteractive, dynamic, interpreted API interaction</a>, e.g. using the <b>Revit Python or Ruby shells</b>.</p><p>Both RevitLookup and the interactive shells will enable you to explore elements and list their parameters. The shells will also allow you to manually set up transactions and modify the database from the command line in real time.</p><p>Another statically compiled tool specifically developed for exploring the parameters attached to elements is <b>BipChecker</b>, the built-in parameter checker:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/built-in-parameter-enumeration-duplicates-and-bipchecker-update.html\">Duplicate Built-in parameter values and BipChecker update</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/09/10000000000th-post-and-element-type-parameters.html#2\">\nRetrieving ElementType parameters and BipChecker</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/05/bipchecker-for-revit-2015-on-github.html\">BipChecker for Revit 2015 on GitHub</a></li>\n</ul><p>Yet another very simple and often surprisingly useful tool for me is the <b>element lister</b>.</p><p>I recently described its use and pointed to other discussions of it while determining the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/09/debugging-and-maintaining-the-image-relationship.html\">\nrelationship between an image element and the associated ImageType</a>.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1210_adn_lab_xtra_submodule",
    "header_text": "ADN Revit API Xtra Training Labs for Revit 2015",
    "local_header_href": "#adn-revit-api-xtra-training-labs-for-revit-2015",
    "chunk_text": "<h4>ADN Revit API Xtra Training Labs for Revit 2015</h4><p>The element lister is part of my ADN Xtra labs:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/xtra-adn-revit-2013-api-training-labs.html\">Xtra ADN Revit 2013 API Training Labs</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/exporting-parameter-data-to-excel.html\">Exporting Parameter Data to Excel, and Re-importing</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/09/10000000000th-post-and-element-type-parameters.html#2\">\nADN Xtra Labs and BipChecker for Revit 2014</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/revit-2013-api-developer-guide-pdf.html#3\">ADN Revit API Training Material on GitHub</a></li>\n</ul><p>Answering one of these cases, I noted that I had not yet migrated them to Revit 2015, and finally got around to doing so.</p><p>The migration was pretty straightforward, and the ADN Revit API training material including the unofficial Xtra labs now resides in its own\n\n<a href=\"https://github.com/jeremytammik/AdnRevitApiLabsXtra\">AdnRevitApiLabsXtra GitHub repository</a>.</p><p>To avoid confusion and be absolutely clear, I will repeat the contents of the repository readme here:</p><blockquote>\n<p>This repository contains the source code and Visual Studio solution of the ADN Revit API Training Labs including the old historical Xtra samples.</p>\n<p>The official collection excluding the Xtra labs is available from the Autodesk Developer Network ADN\n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer page</a>.\nLook there under Samples and Documentation.\nIt lives in its own ADN DevTech\n\n<a href=\"https://github.com/ADN-DevTech/RevitTrainingMaterial\">RevitTrainingMaterial GitHub repository</a>.</p>\n<p>If you have no need for the Xtra labs or do not know what they are, please stick with the official version provided there.</p>\n</blockquote><a name=\"5\"></a>"
  },
  {
    "original_filename": "1210_adn_lab_xtra_submodule",
    "header_text": "Integrating RvtVa3c into Three.js",
    "local_header_href": "#integrating-rvtva3c-into-threejs",
    "chunk_text": "<h4>Integrating RvtVa3c into Three.js</h4><p>I recently mentioned the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/08/threejs-aec-viewer-progress-on-two-fronts.html#4\">\nsignificant progress on the vA3C project</a>\n\n(<a href=\"https://va3c.github.io\">home</a>, <a href=\"https://github.com/va3c\">git</a>),\n\nthe generic three.js based AEC viewer.</p><p>One important aspect is the discovery that the vA3C JSON models are fully compatible and can be merged and mingled with standard three.js ones, providing the models are stored as objects, not as scenes, as discussed in the issue\n\n<a href=\"https://github.com/va3c/va3c.github.io/issues/5\">#5 on exporters and JSON output</a>.</p><p>I modified\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/va3c\">RvtVa3c</a>,\n\nthe Revit vA3C JSON model exporter to produce such a JSON file and tried to add it to the official\n\n<a href=\"https://github.com/mrdoob/three.js/tree/master/utils/exporters\">\nthree.js exporter list</a>:</p><center>\n<img alt=\"Three.js exporters\" src=\"img/three_js_exporters_1.png\" width=\"526\"/>\n</center><p>The way to do this is to fork the repository, apply the required changes, and submit a pull request.</p><p>Here is what I ended up doing to hopefully achieve that:</p><ul>\n<li>Fork the three.js <code>dev</code> branch into my personal collection of repositories.</li>\n<li>Clone my forked version to my local system:</li>\n<pre>\n$ git clone https://github.com/jeremytammik/three.js\n</pre>\n<li>Add RvtVa3c as a new submodule in the utils/exporters folder:</li>\n<pre>\n$ git submodule add https://github.com/va3c/RvtVa3c utils/exporters/revit\n</pre>\n<li>Commit</li>\n<pre>\n</pre>\n<li>Push</li>\n<li>In the forked repository, click 'Pull request', describe the submission, and submit it.</li>\n</ul><p>The result in my local repository looks promising enough:</p><center>\n<img alt=\"Three.js exporters in my forked repository\" src=\"img/three_js_exporters_2.png\" width=\"601\"/>\n</center><p>I hope it works  :-)</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1210_adn_lab_xtra_submodule",
    "header_text": "Updated Integration of RvtVa3c into Three.js",
    "local_header_href": "#updated-integration-of-rvtva3c-into-threejs",
    "chunk_text": "<h4>Updated Integration of RvtVa3c into Three.js</h4><p>The linking of the RvtVa3c repository into the list of three.js exporters described above worked, but...</p><p>... as discussed in the\n\n<a href=\"https://github.com/mrdoob/three.js/pull/5297\">three.js issue #5297</a>,\n\nmrdoob thinks \"the folder approach was better.\nThis repo currently has no submodule.\nAnd submodules don't get included when downloading the zip of the repo...\nthe idea of just having a README.md file in a revit/ folder with a url to the other repo should do the trick.\"</p><p>I therefore deleted eveything I did above, reforked the three.js repository to start again from scratch and performed the following steps on it:</p><ul>\n<li>Fork the three.js <code>dev</code> branch into my personal collection of repositories.</li>\n<li>Clone my forked version to my local system:</li>\n<pre>\n$ git clone https://github.com/jeremytammik/three.js\n</pre>\n<li>Add a new subfolder 'revit' to the utils/exporters folder:</li>\n<pre>\n$ cd three.js/utils/exporters/\n$ mkdir revit\n</pre>\n<li>Edit and add the readme file</li>\n<pre>\n$ touch README.md\n$ edit README.md\n$ git add .\n</pre>\n<li>Commit</li>\n<pre>\n$ git commit -m \"added Revit three.js JSON exporter RvtVa3c\"\n</pre>\n<li>Push</li>\n<pre>\n$ git push\n</pre>\n<li>In the forked repository, click 'Pull request', describe the submission, and submit it.</li>\n</ul><p>The result is a new pull request\n\n<a href=\"https://github.com/mrdoob/three.js/pull/5305\">#5305</a>\n\n\"added the revit exporter RvtVa3c: simply a subfolder utils/exporter/revit with a readme file pointing to the RvtVa3c repository\".</p><p>I agree that this is simpler, of course, and more suitable, considering the facts stated above.</p><p>As an added advantage, I am getting the hang of this now...</p>"
  }
]