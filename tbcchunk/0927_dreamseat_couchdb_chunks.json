[
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Desktop to Cloud via DreamSeat CouchDB Client",
    "local_header_href": "#desktop-to-cloud-via-dreamseat-couchdb-client",
    "chunk_text": "<h3>Desktop to Cloud via DreamSeat CouchDB Client</h3><p>Continuing the research and development for my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/cloud-mobile-extensible-storage-data-use-in-schedules.html#3\">\ncloud-based round-trip 2D Revit model editing project</a>,\n\nI now started looking at storing the plan view room and furniture boundary loop data in the cloud.\n\n<p>I wound up the main Revit add-in functionality using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/extrusion-analyser-and-plan-view-boundaries.html\">\nExtrusionAnalyzer</a>\n\nto create a plan view boundary profile for the furniture and equipment family instances,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/sort-and-orient-curves-to-form-a-contiguous-loop.html\">\nsort and orient its output curves</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/curve-following-face-and-bounding-box-implementation.html\">\ndetermine their bounding box</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html\">\nvisualise the results</a> in\n\na dynamically generated GeoSnoop .NET form for verification.\nThe plan view boundary loop data is handily managed in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#2\">\ninteger-based 2D points</a> packaged\n\nby the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#4\">\nJtLoops</a> class.</p>\n<p>That wraps up the initial add-in implementation.\nWe will certainly return to it and add more functionality when the time comes to update the model with the edits applied on the mobile device.</p>\n<a name=\"2\"></a>\n<h4>Moving to the Cloud</h4>\n<p>The next step is to implement a cloud-based data repository to make this information ubiquitously available for consumption on mobile devices and elsewhere.</p>\n<p>I mentioned looking at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#4\">\nCouchDB</a> database\n\nand the free\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#5\">\nIrisCouch</a> hosting\n\nservice as a candidate repository implementation.</p>\n<p>My colleague\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html\">Philippe Leefsma</a>\n\ntook that same thought and very quickly and easily implemented a\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/experimenting-couchdb-a-simple-and-efficient-restful-database.html\">\nsimple and efficient restful database</a> using\n\nthose components to host and consume images of CAD model data.\n\n<p>Philippe used the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#6\">\nDreamSeat</a> .NET\n\nCouchDB wrapper library to easily access the functionality from within a .NET add-in.\n\n<p>He added his own asynchronous support, in addition to the asynchronous support already provided by DreamSeat itself, and attached the complete implementation of a .NET client and console allowing for upload and viewing of pictures.</p>\n</p>\n<p>I added DreamSeat support to feed a CouchDB database with my plan view room and equipment boundary loop data in just a very few simple steps:</p>\n<ul>\n<li><a href=\"#3\">Implement SVG path properties</a></li>\n<li><a href=\"#4\">Add references to the DreamSeat libraries</a></li>\n<li><a href=\"#5\">Implement couch document wrappers</a></li>\n<li><a href=\"#6\">Instantiate, populate and save to cloud</a></li>\n<li><a href=\"#7\">Looking at the cloud-based data repository</a></li>\n</ul>\n<a name=\"3\"></a>\n<h4>Implement SVG Path Properties</h4>\n<p>First of all, I need to decide how to store the boundary loops in my data repository.</p>\n<p>I initially thought I would save the integer values, and may still do so.</p>\n<p>For the moment, though, I implemented a much simpler placeholder by adding methods to the point and loop classes to serialise the data to a single complete\n\n<a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\">\nSVG path</a> string\n\nrepresentation.\n\n<p>A single string is easy to add to the database and can be reused directly for the SVG visualisation.\nI am not planning to modify the boundary loops in any way, so I might as well manage them in static strings.\nThe only disadvantage would be if I wanted to scale the coordinates differently.\nIf that need arises, I may switch to uploading the structured integer-based point and loop data instead.\nWe'll cross that bridge when we come to it.\n\n<p>An SVG path element contains a path data attribute that can include moveto, line, curve, arc and closepath instructions.\n\n<p>For an individual point, I simply output its two coordinate values.\nFor the first loop vertex, I prepend an 'M' for moveto.\nFor the second one, I prepend an 'L' for line-to.\nFor all following vertices, the 'L' can be omitted.\nAt the end, a 'Z' is appended to close the path.\n\n<p>For an individual point,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#2\">Point2dInt</a>,\n\nthe SvgPath property is therefore implemented like this:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a string suitable for use in an SVG </span>\n  <span class=\"gray\">///</span><span class=\"green\"> path. For index i == 0, prefix with 'M', for</span>\n  <span class=\"gray\">///</span><span class=\"green\"> i == 1 with 'L', and otherwise with nothing.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath( <span class=\"blue\">int</span> i )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0}{1} {2}\"</span>,\n      ( 0 == i ? <span class=\"maroon\">\"M\"</span> : ( 1 == i ? <span class=\"maroon\">\"L\"</span> : <span class=\"maroon\">\"\"</span> ) ),\n      X, Y );\n  }\n</pre>\n<p>For an individual boundary loop,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#3\">JtLoop</a>,\n\nthe member vertices are converted to their SVG string representation using LINQ and concatenated using the string Join method:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return an SVG path specification, c.f.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> http://www.w3.org/TR/SVG/paths.html</span>\n  <span class=\"gray\">///</span><span class=\"green\"> M [0] L [1] [2] ... [n-1] Z</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\" \"</span>,\n        <span class=\"blue\">this</span>.Select&lt;<span class=\"teal\">Point2dInt</span>,<span class=\"blue\">string</span>&gt;(\n          (p,i) =&gt; p.SvgPath( i ) ) )\n        + <span class=\"maroon\">\"Z\"</span>;\n    }\n  }\n</pre>\n<p>For a collection of loops,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#4\">JtLoops</a>,\n\nconcatenate the individual loop paths:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the concatenated SVG path </span>\n  <span class=\"gray\">///</span><span class=\"green\"> specifications for all the loops.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\" \"</span>,\n        <span class=\"blue\">this</span>.Select&lt;<span class=\"teal\">JtLoop</span>,<span class=\"blue\">string</span>&gt;(\n          a =&gt; a.SvgPath ) );\n    }\n  }\n</pre>\n<p>With these properties in place, I can finally set about uploading the data to the cloud.</p>\n<a name=\"4\"></a>\n<h4>Add References to the DreamSeat Libraries</h4>\n<p>Just like Philippe, I use the DreamSeat wrapper to access the CouchDB functionality from my .NET Revit add-in.</p>\n<p>I simply added this functionality to the existing GetLoops external command.</p>\n<p>First, I need to reference the DreamSeat .NET assemblies to access it classes and methods.</p>\n<p>I grabbed these from the\n\n<a href=\"https://github.com/vdaron/DreamSeat\">\nDreamSeat sample solution</a> on\n\n<a href=\"https://github.com\">github</a>.</p>\n<p>For my initial minimal upload usage, all I need are DreamSeat.dll and mindtouch.dream.dll:</p>\n<center>\n<img alt=\"DreamSeat library .NET assembly references\" src=\"img/dreamseat_references.png\" width=\"200\"/>\n</center>\n<a name=\"5\"></a>\n<h4>Implement Couch Document Wrappers for my Data</h4>\n<p>Data in CouchDB is stored in documents.</p>\n<p>DreamSeat provides a CouchDocument base class for deriving your own document wrappers.</p>\n<p>I implemented derived classes to store some minimal model, level, room and furniture data as follows:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">DbObj</span> : <span class=\"teal\">CouchDocument</span>\n{\n  <span class=\"blue\">protected</span> DbObj()\n  {\n    Type = <span class=\"maroon\">\"obj\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Type { <span class=\"blue\">get</span>; <span class=\"blue\">protected</span> <span class=\"blue\">set</span>; }\n  <span class=\"green\">//public string UniqueId { get; set; }</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Description { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbModel</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbModel()\n  {\n    Type = <span class=\"maroon\">\"model\"</span>;\n  }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbLevel</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbLevel()\n  {\n    Type = <span class=\"maroon\">\"level\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> ModelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbRoom</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbRoom()\n  {\n    Type = <span class=\"maroon\">\"room\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> LevelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loops { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbFurniture</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbFurniture()\n  {\n    Type = <span class=\"maroon\">\"furniture\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> RoomId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loop { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Transform { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n</pre>\n<p>I initially thought of identifying documents with the auto-generated CouchDB identifiers, but then chose to use the UniqueId already provided by Revit to identify the objects in CouchDB as well.</p>\n<p>Type, description and name are fields added to all my objects.</p>\n<p>Type identifies the object type and can be one of model, level, room or furniture.</p>\n<p>The only information of interest to me is:\n\n<ul>\n<li>Mutual relationships, i.e. which room belongs to what level, where does the furniture go, etc., handled by the ModelId, LevelId and RoomId properties.</li>\n<li>Boundary loop data for display purposes, currently stored as strings representing the SVG path information produced by the properties described above.</li>\n<li>The transform applied to the furniture, which can be moved and rotated in the mobile device room editor and then needs to be updated back to the model again.</li>\n</ul>\n<p>Pretty minimal and readable, isn't it?</p>\n<a name=\"6\"></a>\n<h4>Instantiate, Populate and Save to Cloud</h4>\n<p>Here is the entire code to connect to the cloud database host, open the 'rooms' database, and populate the room and furniture data for a given room, either creating new records or updating existing ones:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> UploadRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture,\n  <span class=\"teal\">JtLoops</span> roomLoops,\n  <span class=\"teal\">JtLoops</span> furnitureLoops )\n{\n  <span class=\"teal\">CouchClient</span> client = <span class=\"blue\">new</span> <span class=\"teal\">CouchClient</span>(\n    <span class=\"maroon\">\"jt.iriscouch.com\"</span>, 5984 );\n \n  <span class=\"teal\">CouchDatabase</span> db = client.GetDatabase(\n    <span class=\"maroon\">\"rooms\"</span>, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">string</span> uid = room.UniqueId;\n \n  <span class=\"teal\">DbRoom</span> dbRoom;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbRoom = db.GetDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbRoom.Id.Equals( room.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n \n    dbRoom = db.UpdateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbRoom = <span class=\"blue\">new</span> <span class=\"teal\">DbRoom</span>();\n \n    dbRoom.Id = uid;\n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom = db.CreateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n \n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> f <span class=\"blue\">in</span> furniture )\n  {\n    uid = f.UniqueId;\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = db.GetDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;(\n        uid );\n \n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.UpdateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = <span class=\"blue\">new</span> <span class=\"teal\">DbFurniture</span>();\n      dbf.Id = f.UniqueId;\n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.CreateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n  }\n}\n</pre>\n<p>As you can see, I am storing the data in my IrisCouch hosted database in the cloud.</p>\n<a name=\"7\"></a>\n<h4>Looking at the Cloud-based Data Repository</h4>\n<p>After running this command, I can retrieve the top-level database information in JSON format:\n\n<!--\nfrom the URL\n\n<a href=\"https://jt.iriscouch.com/rooms\">jt.iriscouch.com/rooms</a>: -->\n<pre>\n{\"db_name\":\"rooms\", \"doc_count\":10, \"doc_del_count\":11,\n\"update_seq\":54, \"purge_seq\":0, \"compact_running\":false,\n\"disk_size\":102511, \"data_size\":6921,\n\"instance_start_time\":\"1365674085202773\",\n\"disk_format_version\":6, \"committed_update_seq\":54}\n</pre>\n<p>This is what an individual room looks like in futon, the CouchDB management console:</p>\n<center>\n<img alt=\"View of a room in futon\" src=\"img/room_in_futon.png\"/>\n</center>\n<p>Here is the raw JSON representation of the same data:</p>\n<pre>\n{\n  \"_id\": \"4d2e6fd6-eb44-4e2a-98c5-271decaa9225-00033e9f\",\n  \"_rev\": \"2-a863fbc7b2294ef4d8630bc961221b24\",\n  \"levelId\": \"e3e052f9-0156-11d5-9301-0000863f27ad-00000137\",\n  \"loops\": \"M2753 3087 L-4446 3087 -4446 587 -746 587 -746 -1212 2753 -1212Z M298 -112 L298 587 1698 587 1698 -112Z\",\n  \"type\": \"room\",\n  \"description\": \"Room Rooms &lt;212639 Room 1&gt;\",\n  \"name\": \"Room 1\"\n}\n</pre>\n<p>So far, so good.</p>\n<p>Once I got to here, I wanted to start working on the visualisation in SVG and had a very nasty surprise: the strict\n\n<a href=\"http://www.w3.org/Security/wiki/Same_Origin_Policy\">\nsame origin policy</a> prevents\n\nmy simple JavaScript application from accessing my IrisCouch domain, so I cannot easily read the data.\n\n<p>The discovery robbed me of a full night's sleep, but I think I have found a good way out of that dilemma as well.</p>\n<p>Wish me luck!</p>\n<hr/>\n<h1>Cloud and Mobile</h1>\n<h3>Desktop to Cloud via DreamSeat CouchDB Client</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>I mentioned the idea of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html\">\nusing CouchDB and IrisCouch as a simple cloud-based data repository</a> option,\n\nand Philippe picked up that idea to demonstrate a\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/experimenting-couchdb-a-simple-and-efficient-restful-database.html\">\nsimple and efficient restful database</a> using\n\nthose components to host and consume images of CAD model data.\n\n<p>Now I presented my own example of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html\">\npushing desktop data to the cloud via a DreamSeat CouchDB client</a> to\n\nstore 2D plan view room and furniture boundaries in a cloud-hosted data repository.</p>\n<p>Check it out, and please let us know what you think of it!</p>\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Moving to the Cloud",
    "local_header_href": "#moving-to-the-cloud",
    "chunk_text": "<h4>Moving to the Cloud</h4><p>The next step is to implement a cloud-based data repository to make this information ubiquitously available for consumption on mobile devices and elsewhere.</p><p>I mentioned looking at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#4\">\nCouchDB</a> database\n\nand the free\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#5\">\nIrisCouch</a> hosting\n\nservice as a candidate repository implementation.</p><p>My colleague\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/philippe-leefsma.html\">Philippe Leefsma</a>\n\ntook that same thought and very quickly and easily implemented a\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/experimenting-couchdb-a-simple-and-efficient-restful-database.html\">\nsimple and efficient restful database</a> using\n\nthose components to host and consume images of CAD model data.\n\n<p>Philippe used the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#6\">\nDreamSeat</a> .NET\n\nCouchDB wrapper library to easily access the functionality from within a .NET add-in.\n\n<p>He added his own asynchronous support, in addition to the asynchronous support already provided by DreamSeat itself, and attached the complete implementation of a .NET client and console allowing for upload and viewing of pictures.</p>\n</p>\n<p>I added DreamSeat support to feed a CouchDB database with my plan view room and equipment boundary loop data in just a very few simple steps:</p>\n<ul>\n<li><a href=\"#3\">Implement SVG path properties</a></li>\n<li><a href=\"#4\">Add references to the DreamSeat libraries</a></li>\n<li><a href=\"#5\">Implement couch document wrappers</a></li>\n<li><a href=\"#6\">Instantiate, populate and save to cloud</a></li>\n<li><a href=\"#7\">Looking at the cloud-based data repository</a></li>\n</ul>\n<a name=\"3\"></a>\n<h4>Implement SVG Path Properties</h4>\n<p>First of all, I need to decide how to store the boundary loops in my data repository.</p>\n<p>I initially thought I would save the integer values, and may still do so.</p>\n<p>For the moment, though, I implemented a much simpler placeholder by adding methods to the point and loop classes to serialise the data to a single complete\n\n<a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\">\nSVG path</a> string\n\nrepresentation.\n\n<p>A single string is easy to add to the database and can be reused directly for the SVG visualisation.\nI am not planning to modify the boundary loops in any way, so I might as well manage them in static strings.\nThe only disadvantage would be if I wanted to scale the coordinates differently.\nIf that need arises, I may switch to uploading the structured integer-based point and loop data instead.\nWe'll cross that bridge when we come to it.\n\n<p>An SVG path element contains a path data attribute that can include moveto, line, curve, arc and closepath instructions.\n\n<p>For an individual point, I simply output its two coordinate values.\nFor the first loop vertex, I prepend an 'M' for moveto.\nFor the second one, I prepend an 'L' for line-to.\nFor all following vertices, the 'L' can be omitted.\nAt the end, a 'Z' is appended to close the path.\n\n<p>For an individual point,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#2\">Point2dInt</a>,\n\nthe SvgPath property is therefore implemented like this:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a string suitable for use in an SVG </span>\n  <span class=\"gray\">///</span><span class=\"green\"> path. For index i == 0, prefix with 'M', for</span>\n  <span class=\"gray\">///</span><span class=\"green\"> i == 1 with 'L', and otherwise with nothing.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath( <span class=\"blue\">int</span> i )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0}{1} {2}\"</span>,\n      ( 0 == i ? <span class=\"maroon\">\"M\"</span> : ( 1 == i ? <span class=\"maroon\">\"L\"</span> : <span class=\"maroon\">\"\"</span> ) ),\n      X, Y );\n  }\n</pre>\n<p>For an individual boundary loop,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#3\">JtLoop</a>,\n\nthe member vertices are converted to their SVG string representation using LINQ and concatenated using the string Join method:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return an SVG path specification, c.f.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> http://www.w3.org/TR/SVG/paths.html</span>\n  <span class=\"gray\">///</span><span class=\"green\"> M [0] L [1] [2] ... [n-1] Z</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\" \"</span>,\n        <span class=\"blue\">this</span>.Select&lt;<span class=\"teal\">Point2dInt</span>,<span class=\"blue\">string</span>&gt;(\n          (p,i) =&gt; p.SvgPath( i ) ) )\n        + <span class=\"maroon\">\"Z\"</span>;\n    }\n  }\n</pre>\n<p>For a collection of loops,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#4\">JtLoops</a>,\n\nconcatenate the individual loop paths:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the concatenated SVG path </span>\n  <span class=\"gray\">///</span><span class=\"green\"> specifications for all the loops.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\" \"</span>,\n        <span class=\"blue\">this</span>.Select&lt;<span class=\"teal\">JtLoop</span>,<span class=\"blue\">string</span>&gt;(\n          a =&gt; a.SvgPath ) );\n    }\n  }\n</pre>\n<p>With these properties in place, I can finally set about uploading the data to the cloud.</p>\n<a name=\"4\"></a>\n<h4>Add References to the DreamSeat Libraries</h4>\n<p>Just like Philippe, I use the DreamSeat wrapper to access the CouchDB functionality from my .NET Revit add-in.</p>\n<p>I simply added this functionality to the existing GetLoops external command.</p>\n<p>First, I need to reference the DreamSeat .NET assemblies to access it classes and methods.</p>\n<p>I grabbed these from the\n\n<a href=\"https://github.com/vdaron/DreamSeat\">\nDreamSeat sample solution</a> on\n\n<a href=\"https://github.com\">github</a>.</p>\n<p>For my initial minimal upload usage, all I need are DreamSeat.dll and mindtouch.dream.dll:</p>\n<center>\n<img alt=\"DreamSeat library .NET assembly references\" src=\"img/dreamseat_references.png\" width=\"200\"/>\n</center>\n<a name=\"5\"></a>\n<h4>Implement Couch Document Wrappers for my Data</h4>\n<p>Data in CouchDB is stored in documents.</p>\n<p>DreamSeat provides a CouchDocument base class for deriving your own document wrappers.</p>\n<p>I implemented derived classes to store some minimal model, level, room and furniture data as follows:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">DbObj</span> : <span class=\"teal\">CouchDocument</span>\n{\n  <span class=\"blue\">protected</span> DbObj()\n  {\n    Type = <span class=\"maroon\">\"obj\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Type { <span class=\"blue\">get</span>; <span class=\"blue\">protected</span> <span class=\"blue\">set</span>; }\n  <span class=\"green\">//public string UniqueId { get; set; }</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Description { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbModel</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbModel()\n  {\n    Type = <span class=\"maroon\">\"model\"</span>;\n  }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbLevel</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbLevel()\n  {\n    Type = <span class=\"maroon\">\"level\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> ModelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbRoom</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbRoom()\n  {\n    Type = <span class=\"maroon\">\"room\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> LevelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loops { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbFurniture</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbFurniture()\n  {\n    Type = <span class=\"maroon\">\"furniture\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> RoomId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loop { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Transform { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n</pre>\n<p>I initially thought of identifying documents with the auto-generated CouchDB identifiers, but then chose to use the UniqueId already provided by Revit to identify the objects in CouchDB as well.</p>\n<p>Type, description and name are fields added to all my objects.</p>\n<p>Type identifies the object type and can be one of model, level, room or furniture.</p>\n<p>The only information of interest to me is:\n\n<ul>\n<li>Mutual relationships, i.e. which room belongs to what level, where does the furniture go, etc., handled by the ModelId, LevelId and RoomId properties.</li>\n<li>Boundary loop data for display purposes, currently stored as strings representing the SVG path information produced by the properties described above.</li>\n<li>The transform applied to the furniture, which can be moved and rotated in the mobile device room editor and then needs to be updated back to the model again.</li>\n</ul>\n<p>Pretty minimal and readable, isn't it?</p>\n<a name=\"6\"></a>\n<h4>Instantiate, Populate and Save to Cloud</h4>\n<p>Here is the entire code to connect to the cloud database host, open the 'rooms' database, and populate the room and furniture data for a given room, either creating new records or updating existing ones:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> UploadRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture,\n  <span class=\"teal\">JtLoops</span> roomLoops,\n  <span class=\"teal\">JtLoops</span> furnitureLoops )\n{\n  <span class=\"teal\">CouchClient</span> client = <span class=\"blue\">new</span> <span class=\"teal\">CouchClient</span>(\n    <span class=\"maroon\">\"jt.iriscouch.com\"</span>, 5984 );\n \n  <span class=\"teal\">CouchDatabase</span> db = client.GetDatabase(\n    <span class=\"maroon\">\"rooms\"</span>, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">string</span> uid = room.UniqueId;\n \n  <span class=\"teal\">DbRoom</span> dbRoom;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbRoom = db.GetDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbRoom.Id.Equals( room.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n \n    dbRoom = db.UpdateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbRoom = <span class=\"blue\">new</span> <span class=\"teal\">DbRoom</span>();\n \n    dbRoom.Id = uid;\n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom = db.CreateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n \n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> f <span class=\"blue\">in</span> furniture )\n  {\n    uid = f.UniqueId;\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = db.GetDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;(\n        uid );\n \n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.UpdateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = <span class=\"blue\">new</span> <span class=\"teal\">DbFurniture</span>();\n      dbf.Id = f.UniqueId;\n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.CreateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n  }\n}\n</pre>\n<p>As you can see, I am storing the data in my IrisCouch hosted database in the cloud.</p>\n<a name=\"7\"></a>\n<h4>Looking at the Cloud-based Data Repository</h4>\n<p>After running this command, I can retrieve the top-level database information in JSON format:\n\n<!--\nfrom the URL\n\n<a href=\"https://jt.iriscouch.com/rooms\">jt.iriscouch.com/rooms</a>: -->\n<pre>\n{\"db_name\":\"rooms\", \"doc_count\":10, \"doc_del_count\":11,\n\"update_seq\":54, \"purge_seq\":0, \"compact_running\":false,\n\"disk_size\":102511, \"data_size\":6921,\n\"instance_start_time\":\"1365674085202773\",\n\"disk_format_version\":6, \"committed_update_seq\":54}\n</pre>\n<p>This is what an individual room looks like in futon, the CouchDB management console:</p>\n<center>\n<img alt=\"View of a room in futon\" src=\"img/room_in_futon.png\"/>\n</center>\n<p>Here is the raw JSON representation of the same data:</p>\n<pre>\n{\n  \"_id\": \"4d2e6fd6-eb44-4e2a-98c5-271decaa9225-00033e9f\",\n  \"_rev\": \"2-a863fbc7b2294ef4d8630bc961221b24\",\n  \"levelId\": \"e3e052f9-0156-11d5-9301-0000863f27ad-00000137\",\n  \"loops\": \"M2753 3087 L-4446 3087 -4446 587 -746 587 -746 -1212 2753 -1212Z M298 -112 L298 587 1698 587 1698 -112Z\",\n  \"type\": \"room\",\n  \"description\": \"Room Rooms &lt;212639 Room 1&gt;\",\n  \"name\": \"Room 1\"\n}\n</pre>\n<p>So far, so good.</p>\n<p>Once I got to here, I wanted to start working on the visualisation in SVG and had a very nasty surprise: the strict\n\n<a href=\"http://www.w3.org/Security/wiki/Same_Origin_Policy\">\nsame origin policy</a> prevents\n\nmy simple JavaScript application from accessing my IrisCouch domain, so I cannot easily read the data.\n\n<p>The discovery robbed me of a full night's sleep, but I think I have found a good way out of that dilemma as well.</p>\n<p>Wish me luck!</p>\n<hr/>\n<h1>Cloud and Mobile</h1>\n<h3>Desktop to Cloud via DreamSeat CouchDB Client</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>I mentioned the idea of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html\">\nusing CouchDB and IrisCouch as a simple cloud-based data repository</a> option,\n\nand Philippe picked up that idea to demonstrate a\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/experimenting-couchdb-a-simple-and-efficient-restful-database.html\">\nsimple and efficient restful database</a> using\n\nthose components to host and consume images of CAD model data.\n\n<p>Now I presented my own example of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html\">\npushing desktop data to the cloud via a DreamSeat CouchDB client</a> to\n\nstore 2D plan view room and furniture boundaries in a cloud-hosted data repository.</p>\n<p>Check it out, and please let us know what you think of it!</p>\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Implement SVG Path Properties",
    "local_header_href": "#implement-svg-path-properties",
    "chunk_text": "<h4>Implement SVG Path Properties</h4><p>First of all, I need to decide how to store the boundary loops in my data repository.</p><p>I initially thought I would save the integer values, and may still do so.</p><p>For the moment, though, I implemented a much simpler placeholder by adding methods to the point and loop classes to serialise the data to a single complete\n\n<a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\">\nSVG path</a> string\n\nrepresentation.\n\n<p>A single string is easy to add to the database and can be reused directly for the SVG visualisation.\nI am not planning to modify the boundary loops in any way, so I might as well manage them in static strings.\nThe only disadvantage would be if I wanted to scale the coordinates differently.\nIf that need arises, I may switch to uploading the structured integer-based point and loop data instead.\nWe'll cross that bridge when we come to it.\n\n<p>An SVG path element contains a path data attribute that can include moveto, line, curve, arc and closepath instructions.\n\n<p>For an individual point, I simply output its two coordinate values.\nFor the first loop vertex, I prepend an 'M' for moveto.\nFor the second one, I prepend an 'L' for line-to.\nFor all following vertices, the 'L' can be omitted.\nAt the end, a 'Z' is appended to close the path.\n\n<p>For an individual point,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#2\">Point2dInt</a>,\n\nthe SvgPath property is therefore implemented like this:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a string suitable for use in an SVG </span>\n  <span class=\"gray\">///</span><span class=\"green\"> path. For index i == 0, prefix with 'M', for</span>\n  <span class=\"gray\">///</span><span class=\"green\"> i == 1 with 'L', and otherwise with nothing.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath( <span class=\"blue\">int</span> i )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0}{1} {2}\"</span>,\n      ( 0 == i ? <span class=\"maroon\">\"M\"</span> : ( 1 == i ? <span class=\"maroon\">\"L\"</span> : <span class=\"maroon\">\"\"</span> ) ),\n      X, Y );\n  }\n</pre>\n<p>For an individual boundary loop,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#3\">JtLoop</a>,\n\nthe member vertices are converted to their SVG string representation using LINQ and concatenated using the string Join method:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return an SVG path specification, c.f.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> http://www.w3.org/TR/SVG/paths.html</span>\n  <span class=\"gray\">///</span><span class=\"green\"> M [0] L [1] [2] ... [n-1] Z</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\" \"</span>,\n        <span class=\"blue\">this</span>.Select&lt;<span class=\"teal\">Point2dInt</span>,<span class=\"blue\">string</span>&gt;(\n          (p,i) =&gt; p.SvgPath( i ) ) )\n        + <span class=\"maroon\">\"Z\"</span>;\n    }\n  }\n</pre>\n<p>For a collection of loops,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/geosnoop-net-boundary-curve-loop-visualisation.html#4\">JtLoops</a>,\n\nconcatenate the individual loop paths:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the concatenated SVG path </span>\n  <span class=\"gray\">///</span><span class=\"green\"> specifications for all the loops.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> SvgPath\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\" \"</span>,\n        <span class=\"blue\">this</span>.Select&lt;<span class=\"teal\">JtLoop</span>,<span class=\"blue\">string</span>&gt;(\n          a =&gt; a.SvgPath ) );\n    }\n  }\n</pre>\n<p>With these properties in place, I can finally set about uploading the data to the cloud.</p>\n<a name=\"4\"></a>\n<h4>Add References to the DreamSeat Libraries</h4>\n<p>Just like Philippe, I use the DreamSeat wrapper to access the CouchDB functionality from my .NET Revit add-in.</p>\n<p>I simply added this functionality to the existing GetLoops external command.</p>\n<p>First, I need to reference the DreamSeat .NET assemblies to access it classes and methods.</p>\n<p>I grabbed these from the\n\n<a href=\"https://github.com/vdaron/DreamSeat\">\nDreamSeat sample solution</a> on\n\n<a href=\"https://github.com\">github</a>.</p>\n<p>For my initial minimal upload usage, all I need are DreamSeat.dll and mindtouch.dream.dll:</p>\n<center>\n<img alt=\"DreamSeat library .NET assembly references\" src=\"img/dreamseat_references.png\" width=\"200\"/>\n</center>\n<a name=\"5\"></a>\n<h4>Implement Couch Document Wrappers for my Data</h4>\n<p>Data in CouchDB is stored in documents.</p>\n<p>DreamSeat provides a CouchDocument base class for deriving your own document wrappers.</p>\n<p>I implemented derived classes to store some minimal model, level, room and furniture data as follows:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">DbObj</span> : <span class=\"teal\">CouchDocument</span>\n{\n  <span class=\"blue\">protected</span> DbObj()\n  {\n    Type = <span class=\"maroon\">\"obj\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Type { <span class=\"blue\">get</span>; <span class=\"blue\">protected</span> <span class=\"blue\">set</span>; }\n  <span class=\"green\">//public string UniqueId { get; set; }</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Description { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbModel</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbModel()\n  {\n    Type = <span class=\"maroon\">\"model\"</span>;\n  }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbLevel</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbLevel()\n  {\n    Type = <span class=\"maroon\">\"level\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> ModelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbRoom</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbRoom()\n  {\n    Type = <span class=\"maroon\">\"room\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> LevelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loops { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbFurniture</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbFurniture()\n  {\n    Type = <span class=\"maroon\">\"furniture\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> RoomId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loop { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Transform { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n</pre>\n<p>I initially thought of identifying documents with the auto-generated CouchDB identifiers, but then chose to use the UniqueId already provided by Revit to identify the objects in CouchDB as well.</p>\n<p>Type, description and name are fields added to all my objects.</p>\n<p>Type identifies the object type and can be one of model, level, room or furniture.</p>\n<p>The only information of interest to me is:\n\n<ul>\n<li>Mutual relationships, i.e. which room belongs to what level, where does the furniture go, etc., handled by the ModelId, LevelId and RoomId properties.</li>\n<li>Boundary loop data for display purposes, currently stored as strings representing the SVG path information produced by the properties described above.</li>\n<li>The transform applied to the furniture, which can be moved and rotated in the mobile device room editor and then needs to be updated back to the model again.</li>\n</ul>\n<p>Pretty minimal and readable, isn't it?</p>\n<a name=\"6\"></a>\n<h4>Instantiate, Populate and Save to Cloud</h4>\n<p>Here is the entire code to connect to the cloud database host, open the 'rooms' database, and populate the room and furniture data for a given room, either creating new records or updating existing ones:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> UploadRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture,\n  <span class=\"teal\">JtLoops</span> roomLoops,\n  <span class=\"teal\">JtLoops</span> furnitureLoops )\n{\n  <span class=\"teal\">CouchClient</span> client = <span class=\"blue\">new</span> <span class=\"teal\">CouchClient</span>(\n    <span class=\"maroon\">\"jt.iriscouch.com\"</span>, 5984 );\n \n  <span class=\"teal\">CouchDatabase</span> db = client.GetDatabase(\n    <span class=\"maroon\">\"rooms\"</span>, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">string</span> uid = room.UniqueId;\n \n  <span class=\"teal\">DbRoom</span> dbRoom;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbRoom = db.GetDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbRoom.Id.Equals( room.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n \n    dbRoom = db.UpdateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbRoom = <span class=\"blue\">new</span> <span class=\"teal\">DbRoom</span>();\n \n    dbRoom.Id = uid;\n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom = db.CreateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n \n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> f <span class=\"blue\">in</span> furniture )\n  {\n    uid = f.UniqueId;\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = db.GetDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;(\n        uid );\n \n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.UpdateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = <span class=\"blue\">new</span> <span class=\"teal\">DbFurniture</span>();\n      dbf.Id = f.UniqueId;\n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.CreateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n  }\n}\n</pre>\n<p>As you can see, I am storing the data in my IrisCouch hosted database in the cloud.</p>\n<a name=\"7\"></a>\n<h4>Looking at the Cloud-based Data Repository</h4>\n<p>After running this command, I can retrieve the top-level database information in JSON format:\n\n<!--\nfrom the URL\n\n<a href=\"https://jt.iriscouch.com/rooms\">jt.iriscouch.com/rooms</a>: -->\n<pre>\n{\"db_name\":\"rooms\", \"doc_count\":10, \"doc_del_count\":11,\n\"update_seq\":54, \"purge_seq\":0, \"compact_running\":false,\n\"disk_size\":102511, \"data_size\":6921,\n\"instance_start_time\":\"1365674085202773\",\n\"disk_format_version\":6, \"committed_update_seq\":54}\n</pre>\n<p>This is what an individual room looks like in futon, the CouchDB management console:</p>\n<center>\n<img alt=\"View of a room in futon\" src=\"img/room_in_futon.png\"/>\n</center>\n<p>Here is the raw JSON representation of the same data:</p>\n<pre>\n{\n  \"_id\": \"4d2e6fd6-eb44-4e2a-98c5-271decaa9225-00033e9f\",\n  \"_rev\": \"2-a863fbc7b2294ef4d8630bc961221b24\",\n  \"levelId\": \"e3e052f9-0156-11d5-9301-0000863f27ad-00000137\",\n  \"loops\": \"M2753 3087 L-4446 3087 -4446 587 -746 587 -746 -1212 2753 -1212Z M298 -112 L298 587 1698 587 1698 -112Z\",\n  \"type\": \"room\",\n  \"description\": \"Room Rooms &lt;212639 Room 1&gt;\",\n  \"name\": \"Room 1\"\n}\n</pre>\n<p>So far, so good.</p>\n<p>Once I got to here, I wanted to start working on the visualisation in SVG and had a very nasty surprise: the strict\n\n<a href=\"http://www.w3.org/Security/wiki/Same_Origin_Policy\">\nsame origin policy</a> prevents\n\nmy simple JavaScript application from accessing my IrisCouch domain, so I cannot easily read the data.\n\n<p>The discovery robbed me of a full night's sleep, but I think I have found a good way out of that dilemma as well.</p>\n<p>Wish me luck!</p>\n<hr/>\n<h1>Cloud and Mobile</h1>\n<h3>Desktop to Cloud via DreamSeat CouchDB Client</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>I mentioned the idea of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html\">\nusing CouchDB and IrisCouch as a simple cloud-based data repository</a> option,\n\nand Philippe picked up that idea to demonstrate a\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/experimenting-couchdb-a-simple-and-efficient-restful-database.html\">\nsimple and efficient restful database</a> using\n\nthose components to host and consume images of CAD model data.\n\n<p>Now I presented my own example of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html\">\npushing desktop data to the cloud via a DreamSeat CouchDB client</a> to\n\nstore 2D plan view room and furniture boundaries in a cloud-hosted data repository.</p>\n<p>Check it out, and please let us know what you think of it!</p>\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Add References to the DreamSeat Libraries",
    "local_header_href": "#add-references-to-the-dreamseat-libraries",
    "chunk_text": "<h4>Add References to the DreamSeat Libraries</h4><p>Just like Philippe, I use the DreamSeat wrapper to access the CouchDB functionality from my .NET Revit add-in.</p><p>I simply added this functionality to the existing GetLoops external command.</p><p>First, I need to reference the DreamSeat .NET assemblies to access it classes and methods.</p><p>I grabbed these from the\n\n<a href=\"https://github.com/vdaron/DreamSeat\">\nDreamSeat sample solution</a> on\n\n<a href=\"https://github.com\">github</a>.</p><p>For my initial minimal upload usage, all I need are DreamSeat.dll and mindtouch.dream.dll:</p><center>\n<img alt=\"DreamSeat library .NET assembly references\" src=\"img/dreamseat_references.png\" width=\"200\"/>\n</center><a name=\"5\"></a>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Implement Couch Document Wrappers for my Data",
    "local_header_href": "#implement-couch-document-wrappers-for-my-data",
    "chunk_text": "<h4>Implement Couch Document Wrappers for my Data</h4><p>Data in CouchDB is stored in documents.</p><p>DreamSeat provides a CouchDocument base class for deriving your own document wrappers.</p><p>I implemented derived classes to store some minimal model, level, room and furniture data as follows:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">DbObj</span> : <span class=\"teal\">CouchDocument</span>\n{\n  <span class=\"blue\">protected</span> DbObj()\n  {\n    Type = <span class=\"maroon\">\"obj\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Type { <span class=\"blue\">get</span>; <span class=\"blue\">protected</span> <span class=\"blue\">set</span>; }\n  <span class=\"green\">//public string UniqueId { get; set; }</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Description { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbModel</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbModel()\n  {\n    Type = <span class=\"maroon\">\"model\"</span>;\n  }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbLevel</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbLevel()\n  {\n    Type = <span class=\"maroon\">\"level\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> ModelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbRoom</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbRoom()\n  {\n    Type = <span class=\"maroon\">\"room\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> LevelId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loops { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n \n<span class=\"blue\">class</span> <span class=\"teal\">DbFurniture</span> : <span class=\"teal\">DbObj</span>\n{\n  <span class=\"blue\">public</span> DbFurniture()\n  {\n    Type = <span class=\"maroon\">\"furniture\"</span>;\n  }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> RoomId { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Loop { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> Transform { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n}\n</pre><p>I initially thought of identifying documents with the auto-generated CouchDB identifiers, but then chose to use the UniqueId already provided by Revit to identify the objects in CouchDB as well.</p><p>Type, description and name are fields added to all my objects.</p><p>Type identifies the object type and can be one of model, level, room or furniture.</p><p>The only information of interest to me is:\n\n<ul>\n<li>Mutual relationships, i.e. which room belongs to what level, where does the furniture go, etc., handled by the ModelId, LevelId and RoomId properties.</li>\n<li>Boundary loop data for display purposes, currently stored as strings representing the SVG path information produced by the properties described above.</li>\n<li>The transform applied to the furniture, which can be moved and rotated in the mobile device room editor and then needs to be updated back to the model again.</li>\n</ul>\n<p>Pretty minimal and readable, isn't it?</p>\n<a name=\"6\"></a>\n<h4>Instantiate, Populate and Save to Cloud</h4>\n<p>Here is the entire code to connect to the cloud database host, open the 'rooms' database, and populate the room and furniture data for a given room, either creating new records or updating existing ones:</p>\n<pre class=\"code\">\n<span class=\"blue\">void</span> UploadRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture,\n  <span class=\"teal\">JtLoops</span> roomLoops,\n  <span class=\"teal\">JtLoops</span> furnitureLoops )\n{\n  <span class=\"teal\">CouchClient</span> client = <span class=\"blue\">new</span> <span class=\"teal\">CouchClient</span>(\n    <span class=\"maroon\">\"jt.iriscouch.com\"</span>, 5984 );\n \n  <span class=\"teal\">CouchDatabase</span> db = client.GetDatabase(\n    <span class=\"maroon\">\"rooms\"</span>, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">string</span> uid = room.UniqueId;\n \n  <span class=\"teal\">DbRoom</span> dbRoom;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbRoom = db.GetDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbRoom.Id.Equals( room.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n \n    dbRoom = db.UpdateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbRoom = <span class=\"blue\">new</span> <span class=\"teal\">DbRoom</span>();\n \n    dbRoom.Id = uid;\n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom = db.CreateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n \n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> f <span class=\"blue\">in</span> furniture )\n  {\n    uid = f.UniqueId;\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = db.GetDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;(\n        uid );\n \n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.UpdateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = <span class=\"blue\">new</span> <span class=\"teal\">DbFurniture</span>();\n      dbf.Id = f.UniqueId;\n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.CreateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n  }\n}\n</pre>\n<p>As you can see, I am storing the data in my IrisCouch hosted database in the cloud.</p>\n<a name=\"7\"></a>\n<h4>Looking at the Cloud-based Data Repository</h4>\n<p>After running this command, I can retrieve the top-level database information in JSON format:\n\n<!--\nfrom the URL\n\n<a href=\"https://jt.iriscouch.com/rooms\">jt.iriscouch.com/rooms</a>: -->\n<pre>\n{\"db_name\":\"rooms\", \"doc_count\":10, \"doc_del_count\":11,\n\"update_seq\":54, \"purge_seq\":0, \"compact_running\":false,\n\"disk_size\":102511, \"data_size\":6921,\n\"instance_start_time\":\"1365674085202773\",\n\"disk_format_version\":6, \"committed_update_seq\":54}\n</pre>\n<p>This is what an individual room looks like in futon, the CouchDB management console:</p>\n<center>\n<img alt=\"View of a room in futon\" src=\"img/room_in_futon.png\"/>\n</center>\n<p>Here is the raw JSON representation of the same data:</p>\n<pre>\n{\n  \"_id\": \"4d2e6fd6-eb44-4e2a-98c5-271decaa9225-00033e9f\",\n  \"_rev\": \"2-a863fbc7b2294ef4d8630bc961221b24\",\n  \"levelId\": \"e3e052f9-0156-11d5-9301-0000863f27ad-00000137\",\n  \"loops\": \"M2753 3087 L-4446 3087 -4446 587 -746 587 -746 -1212 2753 -1212Z M298 -112 L298 587 1698 587 1698 -112Z\",\n  \"type\": \"room\",\n  \"description\": \"Room Rooms &lt;212639 Room 1&gt;\",\n  \"name\": \"Room 1\"\n}\n</pre>\n<p>So far, so good.</p>\n<p>Once I got to here, I wanted to start working on the visualisation in SVG and had a very nasty surprise: the strict\n\n<a href=\"http://www.w3.org/Security/wiki/Same_Origin_Policy\">\nsame origin policy</a> prevents\n\nmy simple JavaScript application from accessing my IrisCouch domain, so I cannot easily read the data.\n\n<p>The discovery robbed me of a full night's sleep, but I think I have found a good way out of that dilemma as well.</p>\n<p>Wish me luck!</p>\n<hr/>\n<h1>Cloud and Mobile</h1>\n<h3>Desktop to Cloud via DreamSeat CouchDB Client</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>I mentioned the idea of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html\">\nusing CouchDB and IrisCouch as a simple cloud-based data repository</a> option,\n\nand Philippe picked up that idea to demonstrate a\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/experimenting-couchdb-a-simple-and-efficient-restful-database.html\">\nsimple and efficient restful database</a> using\n\nthose components to host and consume images of CAD model data.\n\n<p>Now I presented my own example of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html\">\npushing desktop data to the cloud via a DreamSeat CouchDB client</a> to\n\nstore 2D plan view room and furniture boundaries in a cloud-hosted data repository.</p>\n<p>Check it out, and please let us know what you think of it!</p>\n</p></p></p></p>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Instantiate, Populate and Save to Cloud",
    "local_header_href": "#instantiate-populate-and-save-to-cloud",
    "chunk_text": "<h4>Instantiate, Populate and Save to Cloud</h4><p>Here is the entire code to connect to the cloud database host, open the 'rooms' database, and populate the room and furniture data for a given room, either creating new records or updating existing ones:</p><pre class=\"code\">\n<span class=\"blue\">void</span> UploadRoom(\n  <span class=\"teal\">Room</span> room,\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; furniture,\n  <span class=\"teal\">JtLoops</span> roomLoops,\n  <span class=\"teal\">JtLoops</span> furnitureLoops )\n{\n  <span class=\"teal\">CouchClient</span> client = <span class=\"blue\">new</span> <span class=\"teal\">CouchClient</span>(\n    <span class=\"maroon\">\"jt.iriscouch.com\"</span>, 5984 );\n \n  <span class=\"teal\">CouchDatabase</span> db = client.GetDatabase(\n    <span class=\"maroon\">\"rooms\"</span>, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">string</span> uid = room.UniqueId;\n \n  <span class=\"teal\">DbRoom</span> dbRoom;\n \n  <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n  {\n    dbRoom = db.GetDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( uid );\n \n    <span class=\"teal\">Debug</span>.Assert(\n      dbRoom.Id.Equals( room.UniqueId ),\n      <span class=\"maroon\">\"expected equal ids\"</span> );\n \n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n \n    dbRoom = db.UpdateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n  <span class=\"blue\">else</span>\n  {\n    dbRoom = <span class=\"blue\">new</span> <span class=\"teal\">DbRoom</span>();\n \n    dbRoom.Id = uid;\n    dbRoom.Description = <span class=\"teal\">Util</span>.ElementDescription(\n      room );\n \n    dbRoom.Name = room.Name;\n    dbRoom.LevelId = room.Level.UniqueId;\n    dbRoom.Loops = roomLoops.SvgPath;\n    dbRoom = db.CreateDocument&lt;<span class=\"teal\">DbRoom</span>&gt;( dbRoom );\n  }\n \n  <span class=\"blue\">int</span> i = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> f <span class=\"blue\">in</span> furniture )\n  {\n    uid = f.UniqueId;\n    <span class=\"blue\">if</span>( db.DocumentExists( uid ) )\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = db.GetDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;(\n        uid );\n \n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.UpdateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">DbFurniture</span> dbf = <span class=\"blue\">new</span> <span class=\"teal\">DbFurniture</span>();\n      dbf.Id = f.UniqueId;\n      dbf.Description = <span class=\"teal\">Util</span>.ElementDescription( f );\n      dbf.Name = f.Name;\n      dbf.RoomId = room.UniqueId;\n      dbf.Loop = furnitureLoops[i++].SvgPath;\n      dbf = db.CreateDocument&lt;<span class=\"teal\">DbFurniture</span>&gt;( dbf );\n    }\n  }\n}\n</pre><p>As you can see, I am storing the data in my IrisCouch hosted database in the cloud.</p><a name=\"7\"></a>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Looking at the Cloud-based Data Repository",
    "local_header_href": "#looking-at-the-cloud-based-data-repository",
    "chunk_text": "<h4>Looking at the Cloud-based Data Repository</h4><p>After running this command, I can retrieve the top-level database information in JSON format:\n\n<!--\nfrom the URL\n\n<a href=\"https://jt.iriscouch.com/rooms\">jt.iriscouch.com/rooms</a>: -->\n<pre>\n{\"db_name\":\"rooms\", \"doc_count\":10, \"doc_del_count\":11,\n\"update_seq\":54, \"purge_seq\":0, \"compact_running\":false,\n\"disk_size\":102511, \"data_size\":6921,\n\"instance_start_time\":\"1365674085202773\",\n\"disk_format_version\":6, \"committed_update_seq\":54}\n</pre>\n<p>This is what an individual room looks like in futon, the CouchDB management console:</p>\n<center>\n<img alt=\"View of a room in futon\" src=\"img/room_in_futon.png\"/>\n</center>\n<p>Here is the raw JSON representation of the same data:</p>\n<pre>\n{\n  \"_id\": \"4d2e6fd6-eb44-4e2a-98c5-271decaa9225-00033e9f\",\n  \"_rev\": \"2-a863fbc7b2294ef4d8630bc961221b24\",\n  \"levelId\": \"e3e052f9-0156-11d5-9301-0000863f27ad-00000137\",\n  \"loops\": \"M2753 3087 L-4446 3087 -4446 587 -746 587 -746 -1212 2753 -1212Z M298 -112 L298 587 1698 587 1698 -112Z\",\n  \"type\": \"room\",\n  \"description\": \"Room Rooms &lt;212639 Room 1&gt;\",\n  \"name\": \"Room 1\"\n}\n</pre>\n<p>So far, so good.</p>\n<p>Once I got to here, I wanted to start working on the visualisation in SVG and had a very nasty surprise: the strict\n\n<a href=\"http://www.w3.org/Security/wiki/Same_Origin_Policy\">\nsame origin policy</a> prevents\n\nmy simple JavaScript application from accessing my IrisCouch domain, so I cannot easily read the data.\n\n<p>The discovery robbed me of a full night's sleep, but I think I have found a good way out of that dilemma as well.</p>\n<p>Wish me luck!</p>\n<hr/>\n<h1>Cloud and Mobile</h1>\n<h3>Desktop to Cloud via DreamSeat CouchDB Client</h3>\n<p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p>\n<p>I mentioned the idea of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html\">\nusing CouchDB and IrisCouch as a simple cloud-based data repository</a> option,\n\nand Philippe picked up that idea to demonstrate a\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/experimenting-couchdb-a-simple-and-efficient-restful-database.html\">\nsimple and efficient restful database</a> using\n\nthose components to host and consume images of CAD model data.\n\n<p>Now I presented my own example of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html\">\npushing desktop data to the cloud via a DreamSeat CouchDB client</a> to\n\nstore 2D plan view room and furniture boundaries in a cloud-hosted data repository.</p>\n<p>Check it out, and please let us know what you think of it!</p>\n</p></p></p>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Cloud and Mobile",
    "local_header_href": "#cloud-and-mobile",
    "chunk_text": "<h1>Cloud and Mobile</h1>"
  },
  {
    "original_filename": "0927_dreamseat_couchdb",
    "header_text": "Desktop to Cloud via DreamSeat CouchDB Client",
    "local_header_href": "#desktop-to-cloud-via-dreamseat-couchdb-client",
    "chunk_text": "<h3>Desktop to Cloud via DreamSeat CouchDB Client</h3><p>By\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/jeremy-tammik.html\">\nJeremy</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html\">\nTammik</a>.</p><p>I mentioned the idea of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html\">\nusing CouchDB and IrisCouch as a simple cloud-based data repository</a> option,\n\nand Philippe picked up that idea to demonstrate a\n\n<a href=\"http://adndevblog.typepad.com/cloud_and_mobile/2013/03/experimenting-couchdb-a-simple-and-efficient-restful-database.html\">\nsimple and efficient restful database</a> using\n\nthose components to host and consume images of CAD model data.\n\n<p>Now I presented my own example of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/desktop-to-cloud-via-dreamseat-couchdb-client.html\">\npushing desktop data to the cloud via a DreamSeat CouchDB client</a> to\n\nstore 2D plan view room and furniture boundaries in a cloud-hosted data repository.</p>\n<p>Check it out, and please let us know what you think of it!</p>\n</p>"
  }
]