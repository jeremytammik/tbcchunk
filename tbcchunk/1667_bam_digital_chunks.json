[
  {
    "original_filename": "1667_bam_digital",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n- https://twitter.com/jeremytammik/status/1009750141748875264\n  Forge for Digital Construction at #bamdigital with Az Jasat and @Manu_Venugopal, presenting on Insight and Connection #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon\n\n- 14337750 [Invoke the \"Draw Model Line\" Command]\n\nDigital construction slide deck and drawing a model line in the #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/bamslides\n\nI am attending the BAM <i>Digital Construction Live</i> event in the UK and presenting on Forge for that domain.\nToday, I'll share my slide deck from this event and welcome my colleague Xiaodong answering his first Revit API cases\n&ndash; Forge for Digital Construction\n&ndash; Welcome Xiaodong and invoking the <i>Draw Model Line</i> command...\n\n--->"
  },
  {
    "original_filename": "1667_bam_digital",
    "header_text": "Digital Construction and Drawing a Model Line",
    "local_header_href": "#digital-construction-and-drawing-a-model-line",
    "chunk_text": "### Digital Construction and Drawing a Model Line\n\nI am attending the BAM <i>Digital Construction Live</i> event in the UK and presenting on Forge for that domain.\nYou can see what's going on here looking for\nthe [#bamdigital](https://twitter.com/search?q=%23bamdigital) hashtag.\n\nOn the way here, I visited my brother and passed by the interesting climbing areas\nat [Cheddar Gorge](https://en.wikipedia.org/wiki/Cheddar_Gorge)\nand [Symonds Yat](https://en.wikipedia.org/wiki/Symonds_Yat):\n\n<center>\n<img src=\"img/119_jeremy_leading_600.jpg\" alt=\"Cheddar Gorge\" width=\"200\"/>\n</center>\n\nIn the latter, we climbed the Long Rock Pinnacle via Whitt:\n\n<center>\n<img src=\"img/143_jeremy_long_rock_pinnacle_800x600.jpg\" alt=\"Long Rock Pinnacle\" width=\"400\"/>\n</center>\n\nToday, I'll share my slide deck from this event and welcome my colleague Xiaodong answering his first Revit API cases:\n\n- [Forge for Digital Construction](#2) \n- [Welcome Xiaodong and invoking the *Draw Model Line* command](#3)"
  },
  {
    "original_filename": "1667_bam_digital",
    "header_text": "<a name=\"2\"></a> Forge for Digital Construction",
    "local_header_href": "#a-name2a-forge-for-digital-construction",
    "chunk_text": "#### <a name=\"2\"></a> Forge for Digital Construction\n\nAs said, I am attending this event with my Autodesk colleagues Az Jasat and Manu Venugopal, presenting on Insight and Connection.\n\nInsight is covered by Manu, discussing Project IQ and machine learning enhanced analytics for automated risk assessment.\n\nI am presenting on Forge for the digital construction process and connecting to the BIM360 products.\n\nI already explained the main concepts from my point of view in \nthe [overview of Forge for AEC and BIM360](http://thebuildingcoder.typepad.com/blog/2018/06/forge-for-aec-and-bim360-overview.html) and\nthe [BIM360 and Forge for AEC message and samples](http://thebuildingcoder.typepad.com/blog/2018/06/bim360-and-forge-for-aec-real-message-and-samples.html).\n\nHere is the final slide deck summarising those points in\nthe [BAM Forge for Digital Construction slides](zip/bam_bim360_forge_aec_slides.pdf).\n\n<center>\n<img src=\"img/187_manu_and_az_722x380.jpg\" alt=\"Manu and Az at BAM Digital Construction Live\" width=\"722\"/>\n</center>"
  },
  {
    "original_filename": "1667_bam_digital",
    "header_text": "<a name=\"3\"></a> Welcome Xiaodong and Invoking the *Draw Model Line* Command",
    "local_header_href": "#a-name3a-welcome-xiaodong-and-invoking-the-draw-model-line-command",
    "chunk_text": "#### <a name=\"3\"></a> Welcome Xiaodong and Invoking the *Draw Model Line* Command\n\nMany congratulations to my colleague Xiaodong Liang for diving into the Revit API and starting to answer cases!\n\nHere is one of his first:\n\n**Question:** How can I programmatically invoke the *Draw Model Line* command?\n\n**Answer:** If your workflow is to simply to invoke the built-in *Draw Model Line* command as is, you could find the command id and execute it using `PostCommand`:\n\n<pre class=\"code\">\n&nbsp;&nbsp;Autodesk.Revit.UI.<span style=\"color:#2b91af;\">RevitCommandId</span>&nbsp;cmd_id\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">RevitCommandId</span>.LookupPostableCommandId(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">PostableCommand</span>.ModelLine&nbsp;);\n \n&nbsp;&nbsp;uiapp.PostCommand(&nbsp;cmd_id&nbsp;);\n</pre>\n\nIf your workflow is to create a model line yourself with the parameters the user inputs, you can use the following:\n\n<pre class=\"code\">\n  <span style=\"color:#2b91af;\">UIApplication</span>&nbsp;uiApp&nbsp;=&nbsp;commandData.Application;\n  <span style=\"color:#2b91af;\">Application</span>&nbsp;rvtApp&nbsp;=&nbsp;uiApp.Application;\n  <span style=\"color:#2b91af;\">UIDocument</span>&nbsp;uiDoc&nbsp;=&nbsp;uiApp.ActiveUIDocument;\n  <span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;uiDoc.Document;\n   \n  <span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;transaction&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n  {\n  &nbsp;&nbsp;transaction.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Create&nbsp;Model&nbsp;Line&nbsp;By&nbsp;Me&quot;</span>&nbsp;);\n   \n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;startPoint&nbsp;=&nbsp;<span style=\"color:#2b91af;\">XYZ</span>.Zero;\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;endPoint&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">XYZ</span>(&nbsp;10,&nbsp;10,&nbsp;0&nbsp;);\n   \n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">Line</span>&nbsp;geomLine&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Line</span>.CreateBound(&nbsp;startPoint,&nbsp;endPoint&nbsp;);\n   \n  &nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;a&nbsp;geometry&nbsp;plane&nbsp;in&nbsp;Revit&nbsp;application&nbsp;memory</span>\n   \n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;origin&nbsp;=&nbsp;<span style=\"color:#2b91af;\">XYZ</span>.Zero;\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;normal&nbsp;=&nbsp;<span style=\"color:#2b91af;\">XYZ</span>.BasisZ;\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">Plane</span>&nbsp;geomPlane&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Plane</span>.CreateByNormalAndOrigin(\n  &nbsp;&nbsp;&nbsp;&nbsp;normal,&nbsp;origin&nbsp;);\n   \n  &nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;a&nbsp;sketch&nbsp;plane&nbsp;in&nbsp;current&nbsp;document</span>\n   \n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">SketchPlane</span>&nbsp;sketch&nbsp;=&nbsp;<span style=\"color:#2b91af;\">SketchPlane</span>.Create(\n  &nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;geomPlane&nbsp;);\n   \n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">ModelLine</span>&nbsp;modelLine&nbsp;=&nbsp;doc.Create.NewModelCurve(\n  &nbsp;&nbsp;&nbsp;&nbsp;geomLine,&nbsp;sketch&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">ModelLine</span>;\n   \n  &nbsp;&nbsp;transaction.Commit();\n  }\n</pre>\n\nXiaodong adds:\n\n> Though it is a simple question, it took me some time to test out the working codes, and I learned some valuable knowledge of Revit API.\n\n> Stumblingly at the starting point of the journey into the Revit API &nbsp; :-)\n\nMany thanks to Xiaodong for the nice and comprehensive answer!\n \nIt looks like a great start!\n \nI wish you much success and lots of fun going further."
  }
]