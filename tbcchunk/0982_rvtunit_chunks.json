[
  {
    "original_filename": "0982_rvtunit",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "0982_rvtunit",
    "header_text": "Revit Add-in Unit Testing",
    "local_header_href": "#revit-add-in-unit-testing",
    "chunk_text": "<h3>Revit Add-in Unit Testing</h3><p>Here is a topic I have been flirting with for years, and never really got into seriously yet, except point to the efforts for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/unit-testing-in-revit.html\">\nunit testing in Revit 2011</a> by\n\nRod Howarth and Daren Thomas back in 2010.\n\n<p>Finally, the cavalry is galloping in to our rescue in the shape of Steven Downing, Ali Talebi and Yamin Tengono of\n\n<a href=\"http://www.arup.com\">Arup</a>.\n\n<p>They implemented a very complete and advanced unit testing system for Revit add-ins enabling\n\n<a href=\"http://www.nunit.org\">NUnit</a> as\n\nwell as other test helpers like\n\n<a href=\"http://code.google.com/p/moq\">Moq</a> to\n\nbe used and including support for real-time addition of new tests, recompilation and reloading of add-ins, and re-running updated code and tests without restarting Revit.</p>\n<p>The entire\n\n<a href=\"https://github.com/ArupAus/RvtUnit\">RvtUnit</a> project\n\nincluding a sample project demonstrating its use is hosted on GitHub.</p>\n<p>It includes a\n\n<a href=\"https://github.com/ArupAus/RvtUnit/blob/master/Getting%20Started.docx\">\ngetting started document</a> and a\n\n<a href=\"https://github.com/ArupAus/RvtUnit/blob/master/rvtUnit_Demo.mp4\">\ndemonstration video</a> showing the steps I just described:</p>\n<ul>\n<li>Launching the TestRunner external command</li>\n<li>Selecting a directory containing .NET assemblies defining tests to run</li>\n<li>The assembly DLL is loaded via a byte-code stream, so the actual file is not locked</li>\n<li>The tests to run are dynamically detected using custom attributes and .NET reflection</li>\n<li>Running the tests and reporting the unit test run results</li>\n<li>Switching to Visual Studio, adding a new test, recompiling</li>\n<li>Dynamically reloading, reparsing and retesting without leaving or restarting Revit</li>\n<li>Switching to Visual Studio again and adding a detailed test failure message, recompiling</li>\n<li>Reloading and retesting once again with the new message displayed</li>\n</ul>\n<p>I would suggest looking at the 2.5 minute demonstration video right away, first thing, to see the system in action and understand exactly what can be achieved and how:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/Zur6969ayxg\" width=\"420\"></iframe>\n</center>\n<p>Here is the detailed content of 'Getting Started.docx':</p>\n<ul>\n<li><a href=\"#2\">Introduction</a></li>\n<li><a href=\"#3\">RvtUnit project</a></li>\n<li><a href=\"#4\">SampleTool project</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>Introduction</h4>\n<p>RvtUnit is an example of how to achieve Unit Testing within Revit.  By running the NUnit runner inside Revit, we can unit test code which relies on the Revit API, without having to wrap the entire Revit API.</p>\n<p>The solution contains three projects:</p>\n<ul>\n<li>The RvtUnit project is the main project that runs the unit tests.</li>\n<li>The SampleTool project shows an example of a Revit IExternalCommand that includes unit tests.</li>\n<li>The Helpers project contains some code used by both the other projects.\nNotably, the RvtUnit project will store a reference to the ActiveUIDocument here, so the unit tests can pick it up.</li>\n</ul>\n<center>\n<img alt=\"RvtUnit solution projects\" src=\"img/sd_rvtunit.png\" width=\"200\"/>\n</center>\n<a name=\"3\"></a>\n<h4>RvtUnit Project</h4>\n<ul>\n<li>Designed using the <a href=\"http://en.wikipedia.org/wiki/Model_View_ViewModel\">MVVM</a> pattern.</li>\n<li>References a custom build of NUnit which has been modified to load DLL's from a byte array, rather than from disk</li>\n<li>Allows user to select a directory of DLL's, and it will then load them and present a dialog which lets the user run some or all tests.</li>\n<li>Contains an 'AssemblyResolve' event handler, so that any dependencies of the DLL to be tested can also be loaded.  Since the assembly to be tested is loaded dynamically from a byte-array, the normal .NET Framework mechanism will not work.</li>\n<li>The Test runner will not execute the IExternalCommand of any DLL's.  It will simply load the DLL, look for any unit tests in the DLL and then run them.</li>\n</ul>\n<a name=\"4\"></a>\n<h4>SampleTool Project</h4>\n<ul>\n<li>Contains an example of an IExternalCommand that includes some classes which are unit tested.</li>\n<li>The 'production code' and the 'test code' are compiled into the same DLL when the project is compiled in 'Debug' mode.</li>\n<li>The test code is omitted when the project is compiled in 'Release' mode.\nThis is achieved by putting test code and references inside an ItemGroup that only compiles for Debug:</li>\n<pre class=\"code\">\n<span class=\"blue\">&lt;</span><span class=\"maroon\">ItemGroup</span><span class=\"blue\"> </span><span class=\"red\">Condition</span><span class=\"blue\">=</span>\"<span class=\"blue\">'$(Configuration)|$(Platform)' == 'Debug|AnyCPU'</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Reference</span><span class=\"blue\"> </span><span class=\"red\">Include</span><span class=\"blue\">=</span>\"<span class=\"blue\">Moq</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">HintPath</span><span class=\"blue\">&gt;</span>..\\rvtUnit\\Lib\\Moq.dll<span class=\"blue\">&lt;/</span><span class=\"maroon\">HintPath</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Reference</span><span class=\"blue\">&gt;</span>\n\n  . . .\n\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Compile</span><span class=\"blue\"> </span><span class=\"red\">Include</span><span class=\"blue\">=</span>\"<span class=\"blue\">Tests\\UnitTests\\HasParameter_Tests.cs</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">None</span><span class=\"blue\"> </span><span class=\"red\">Include</span><span class=\"blue\">=</span>\"<span class=\"blue\">Tests\\Features\\SetParameter.feature</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Generator</span><span class=\"blue\">&gt;</span>SpecFlowSingleFileGenerator<span class=\"blue\">&lt;/</span><span class=\"maroon\">Generator</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LastGenOutput</span><span class=\"blue\">&gt;</span>SetParameter.feature.cs<span class=\"blue\">&lt;/</span><span class=\"maroon\">LastGenOutput</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">None</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">ItemGroup</span><span class=\"blue\">&gt;</span>\n</pre>\n<li>Contains standard unit tests, and Specflow tests.</li>\n<li>The Specflow test also use Moq, although a custom build of both Moq and Castle.Core are required, as the objects must be properly disposed at the end of the test.</li>\n<li>If you run the SampleTool from the Addins menu, it will be loaded from disk and the file locked as per normal.  You will then be unable to change, rebuild and reload it.</li>\n</ul>\n<h4>Conclusion</h4>\n<p>Jeremy adds: Wow. I have nothing left to add. Almost.</p>\n<p>The RvtUnit sample demonstrates a number of other important and exciting other features as well, such as support for multiple versions of Revit, ranging all the way from 2010 through 2014, so a thorough exploration of the source code provided is highly recommended.</p>\n<p>To run and test this, you need to start up Revit properly, stand-alone, not in the debugger from within the Visual Studio IDE.</p>\n<p>A huge thank-you to Steven, Ali and Yamin for this truly impressive framework!</p>\n</p></p>"
  },
  {
    "original_filename": "0982_rvtunit",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<h4>Introduction</h4><p>RvtUnit is an example of how to achieve Unit Testing within Revit.  By running the NUnit runner inside Revit, we can unit test code which relies on the Revit API, without having to wrap the entire Revit API.</p><p>The solution contains three projects:</p><ul>\n<li>The RvtUnit project is the main project that runs the unit tests.</li>\n<li>The SampleTool project shows an example of a Revit IExternalCommand that includes unit tests.</li>\n<li>The Helpers project contains some code used by both the other projects.\nNotably, the RvtUnit project will store a reference to the ActiveUIDocument here, so the unit tests can pick it up.</li>\n</ul><center>\n<img alt=\"RvtUnit solution projects\" src=\"img/sd_rvtunit.png\" width=\"200\"/>\n</center><a name=\"3\"></a>"
  },
  {
    "original_filename": "0982_rvtunit",
    "header_text": "RvtUnit Project",
    "local_header_href": "#rvtunit-project",
    "chunk_text": "<h4>RvtUnit Project</h4><ul>\n<li>Designed using the <a href=\"http://en.wikipedia.org/wiki/Model_View_ViewModel\">MVVM</a> pattern.</li>\n<li>References a custom build of NUnit which has been modified to load DLL's from a byte array, rather than from disk</li>\n<li>Allows user to select a directory of DLL's, and it will then load them and present a dialog which lets the user run some or all tests.</li>\n<li>Contains an 'AssemblyResolve' event handler, so that any dependencies of the DLL to be tested can also be loaded.  Since the assembly to be tested is loaded dynamically from a byte-array, the normal .NET Framework mechanism will not work.</li>\n<li>The Test runner will not execute the IExternalCommand of any DLL's.  It will simply load the DLL, look for any unit tests in the DLL and then run them.</li>\n</ul><a name=\"4\"></a>"
  },
  {
    "original_filename": "0982_rvtunit",
    "header_text": "SampleTool Project",
    "local_header_href": "#sampletool-project",
    "chunk_text": "<h4>SampleTool Project</h4><ul>\n<li>Contains an example of an IExternalCommand that includes some classes which are unit tested.</li>\n<li>The 'production code' and the 'test code' are compiled into the same DLL when the project is compiled in 'Debug' mode.</li>\n<li>The test code is omitted when the project is compiled in 'Release' mode.\nThis is achieved by putting test code and references inside an ItemGroup that only compiles for Debug:</li>\n<pre class=\"code\">\n<span class=\"blue\">&lt;</span><span class=\"maroon\">ItemGroup</span><span class=\"blue\"> </span><span class=\"red\">Condition</span><span class=\"blue\">=</span>\"<span class=\"blue\">'$(Configuration)|$(Platform)' == 'Debug|AnyCPU'</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Reference</span><span class=\"blue\"> </span><span class=\"red\">Include</span><span class=\"blue\">=</span>\"<span class=\"blue\">Moq</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">HintPath</span><span class=\"blue\">&gt;</span>..\\rvtUnit\\Lib\\Moq.dll<span class=\"blue\">&lt;/</span><span class=\"maroon\">HintPath</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">Reference</span><span class=\"blue\">&gt;</span>\n\n  . . .\n\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">Compile</span><span class=\"blue\"> </span><span class=\"red\">Include</span><span class=\"blue\">=</span>\"<span class=\"blue\">Tests\\UnitTests\\HasParameter_Tests.cs</span>\"<span class=\"blue\"> /&gt;</span>\n<span class=\"blue\">  &lt;</span><span class=\"maroon\">None</span><span class=\"blue\"> </span><span class=\"red\">Include</span><span class=\"blue\">=</span>\"<span class=\"blue\">Tests\\Features\\SetParameter.feature</span>\"<span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">Generator</span><span class=\"blue\">&gt;</span>SpecFlowSingleFileGenerator<span class=\"blue\">&lt;/</span><span class=\"maroon\">Generator</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">    &lt;</span><span class=\"maroon\">LastGenOutput</span><span class=\"blue\">&gt;</span>SetParameter.feature.cs<span class=\"blue\">&lt;/</span><span class=\"maroon\">LastGenOutput</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">  &lt;/</span><span class=\"maroon\">None</span><span class=\"blue\">&gt;</span>\n<span class=\"blue\">&lt;/</span><span class=\"maroon\">ItemGroup</span><span class=\"blue\">&gt;</span>\n</pre>\n<li>Contains standard unit tests, and Specflow tests.</li>\n<li>The Specflow test also use Moq, although a custom build of both Moq and Castle.Core are required, as the objects must be properly disposed at the end of the test.</li>\n<li>If you run the SampleTool from the Addins menu, it will be loaded from disk and the file locked as per normal.  You will then be unable to change, rebuild and reload it.</li>\n</ul>"
  },
  {
    "original_filename": "0982_rvtunit",
    "header_text": "Conclusion",
    "local_header_href": "#conclusion",
    "chunk_text": "<h4>Conclusion</h4><p>Jeremy adds: Wow. I have nothing left to add. Almost.</p><p>The RvtUnit sample demonstrates a number of other important and exciting other features as well, such as support for multiple versions of Revit, ranging all the way from 2010 through 2014, so a thorough exploration of the source code provided is highly recommended.</p><p>To run and test this, you need to start up Revit properly, stand-alone, not in the debugger from within the Visual Studio IDE.</p><p>A huge thank-you to Steven, Ali and Yamin for this truly impressive framework!</p>"
  }
]