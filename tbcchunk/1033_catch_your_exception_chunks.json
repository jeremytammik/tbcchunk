[
  {
    "original_filename": "1033_catch_your_exception",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1033_catch_your_exception",
    "header_text": "Handle Your Own Exceptions",
    "local_header_href": "#handle-your-own-exceptions",
    "chunk_text": "<h3>Handle Your Own Exceptions</h3><p>I was under the impression that it should be hard for an add-in to crash Revit.</p><p>Therefore, it was a surprise yesterday to receive an add-in displaying a form and instructions to reliably cause Revit to terminate unexpectedly with just two or three clicks.</p><p>The reason is simple, however, as we shall see below, and underlines once again how hard it is to properly implement and handle any modeless activity within a Revit add-in.\n\n<p>Important aspects were discussed in the recommendation to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/avoid-idling.html\">\navoid Idling</a> and\n\nnumerous other places.</p>\n<p>Yesterday, an experienced Revit add-in developer provided this sample add-in causing an unrecoverable error using read-only transaction mode and making no database access at all.</p>\n<p>It does however display a modeless form like this:</p>\n<center>\n<img alt=\"Simple sample form\" src=\"img/crash_sample_tree.png\"/>\n</center>\n<p>An unrecoverable error in Revit can be triggered by simply:</p>\n<ul>\n<li>Launching the add-in external command.</li>\n<li>Clicking on 'First'.</li>\n<li>Clicking on 'b***'.</li>\n<li>Hitting the up arrow keyboard key.</li>\n</ul>\n<p>Running it outside the Visual Studio debugger causes an unrecoverable error:</p>\n<center>\n<img alt=\"Unrecoverable error\" src=\"img/crash_sample_unrecoverable_error.png\"/>\n</center>\n<p>If Revit is running within the Visual Studio debugger, the following detailed reason for the crash is listed (copy and paste somewhere or view source to see truncated lines in full:</p>\n<pre>\nSystem.InvalidOperationException was unhandled\n  HResult=-2146233079\n  Message='System.Windows.Documents.Hyperlink' is not a Visual or Visual3D.\n  Source=PresentationCore\n  StackTrace:\n    at MS.Internal.Media.VisualTreeUtils.AsVisual(DependencyObject element, Visual&amp; visual, Visual3D&amp; visual3D)\n    at System.Windows.Media.VisualTreeHelper.GetParent(DependencyObject reference)\n    at System.Windows.Controls.TreeViewItem.AllowHandleKeyEvent(FocusNavigationDirection direction)\n    at System.Windows.Controls.TreeViewItem.HandleUpDownKey(Boolean up, KeyEventArgs e)\n    at System.Windows.Controls.TreeViewItem.OnKeyDown(KeyEventArgs e)\n    at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\n\n    . . .\n\n    at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\n    at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\n  InnerException:\n</pre>\n<p>I initially assumed that the Revit API framework should have prevented this error from causing any issues with the main Revit process and reported the issue to the development team, who provided some very illuminating clarification:</p>\n<p>This add-in is running inside Revit's process space and did not handle an exception, so Revit's own built-in uncaught exception handler took over.\nThis seems to be working as best as it can â€“ the uncaught exception will eventually unwind to end the process anyway.</p>\n<p>Add-ins should manage their own exceptions to provide a more user-friendly response and avoid this situation.</p>\n<p>Of course, Revit does protect itself from badly behaved add-ins.</p>\n<p>It can only do so when it has any knowledge of them, though, for example when the add-in is called via events, commands, or interfaces.\nIn all those cases the exception is caught and swallowed, with the possibility of disabling some part of the add-in and/or notifying the user.</p>\n<p>However, if an add-in launches its own thread and does illegal things outside of Revit's knowledge, there's nothing we can do to stop it.</p>\n<p>Furthermore, Revit does indeed protect the user in that any modified document in this scenario causes a prompt to save it.\nWhen retesting the steps listed above inside a modified project document, not running within the debugger, Revit's built-in unrecoverable error handler politely prompts me to save my changes:</p>\n<center>\n<img alt=\"Prompt to save changes\" src=\"img/crash_sample_unrecoverable_error_save_file.png\"/>\n</center>\n<p>So, to summarise, please make sure you handle any exceptions that your add-in might cause.</p>\n<p>Revit does a very good job of encapsulating the add-in functionality.</p>\n<p>Within every valid Revit API context, any exceptions you cause are caught and reported by Revit without affecting the main thread.\nStill, you should probably handle them yourself to provide a more graceful report to the user.</p>\n<p>Outside of the Revit API context, your exceptions cannot be treated any different from any other completely unexpected situation and will cause the Revit error handler to be triggered as explained above, which will presumably seriously irritate your users.\n</p>\n<p>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/handle-your-own-exceptions-and-edit-slab-boundaries.html\">\nContinued...</a>\n</p>\n</p>"
  }
]