[
  {
    "original_filename": "0653_activate_3d_view",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0653_activate_3d_view",
    "header_text": "Activate a 3D View",
    "local_header_href": "#activate-a-3d-view",
    "chunk_text": "<h3>Activate a 3D View</h3><p>Here is a simple question on making use of the ActiveView setter, which is new in Revit 2012:\n\n<p><strong>Question:</strong> I heard that Revit 2012 exposes an API to change the active view.\n\n<p>I would like to change the active view to 3D with the Detail Level set to Fine and Visual Style set to Realistic. \n\n<p>Could you please show me the correct way to change the active view to the one I want?\n\n<p><strong>Answer:</strong> I already discussed \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/set-the-visual-style-of-a-view.html\">\nsetting the visual style for a view</a>,\n\nso we can make use of that here.\n\n<p>To answer the rest of your query, I created a little sample application for you which says (and does) it all.\n\n<p>It is short and sweet, so I can present it here in its entire glory; \nfirst, here is a helper method Get3dView to retrieve a suitable 3D view using a filtered element collector:\n\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Retrieve a suitable 3D view from document.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">View3D</span> Get3dView( <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">FilteredElementCollector</span> collector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">View3D</span> ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">View3D</span> v <span class=\"blue\">in</span> collector )\n    {\n      <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != v,\n        <span class=\"maroon\">\"never expected a null view to be returned\"</span>\n        + <span class=\"maroon\">\" from filtered element collector\"</span> );\n \n      <span class=\"green\">// Skip view template here because view </span>\n      <span class=\"green\">// templates are invisible in project </span>\n      <span class=\"green\">// browser</span>\n \n      <span class=\"blue\">if</span>( !v.IsTemplate )\n      {\n        <span class=\"blue\">return</span> v;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>The external command Execute mainline makes use of this method to determine and activate the 3D view to use and set up the Detail Level and Visual Style parameters:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Find a suitable 3D view:</span>\n \n    <span class=\"teal\">View3D</span> view = Get3dView( doc );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == view )\n    {\n      message = <span class=\"maroon\">\"Sorry, no suitable 3D view found\"</span>;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"green\">// Must set view before starting the transaction,</span>\n      <span class=\"green\">// otherwise an exception is thrown saying </span>\n      <span class=\"green\">// \"Cannot change the active view of a modifiable </span>\n      <span class=\"green\">// document (with a transaction currently open).\"</span>\n \n      uidoc.ActiveView = view;\n \n      <span class=\"green\">// Must start a transaction in order to set the </span>\n      <span class=\"green\">// parameters on the view:</span>\n \n      <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n      t.Start( <span class=\"maroon\">\"Change to 3D view\"</span> );\n \n      view.get_Parameter( <span class=\"teal\">BuiltInParameter</span>\n        .VIEW_DETAIL_LEVEL ).Set( 3 );\n \n      view.get_Parameter( <span class=\"teal\">BuiltInParameter</span>\n        .MODEL_GRAPHICS_STYLE ).Set( 6 );\n \n      t.Commit();\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre>\n<p>The one and only slightly tricky part is that writing to the ActiveView property to switch the view requires no transaction to be active, whereas setting the parameters does.\n\n<p>For completeness sake, here is \n\n<a href=\"zip/ChangeTo3dView.zip\">ChangeTo3dView.zip</a> containing \n\nthe entire project, source code and add-in manifest file for this command.\n</p></p></p></p></p></p></p></p></p></p>"
  }
]