[
  {
    "original_filename": "0084_room_wall_adjacent_area",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0084_room_wall_adjacent_area",
    "header_text": "Room and Wall Adjacent Area",
    "local_header_href": "#room-and-wall-adjacent-area",
    "chunk_text": "<h3>Room and Wall Adjacent Area</h3><p>I continued the discussion on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/room-and-wall-adjacency.html\">\nroom and wall adjacency</a>\n\nwith Massimiliano Revelli of \n\n<a href=\"http://www.infosys.it\">\nInformatica System srl</a>,\n\nbecause he is actually interested in determining the wall area adjacent to the room, and not just the overlapping curve segment length.</p><p>The overlapping area is obviously easy to determine if the wall has a constant height, as I pointed out in the earlier post, but this is often not the case.\nFor instance, let us look at the upper wall in this floor plan of a simple example demonstrating the difficulties, highlighted in red:</p><img alt=\"Room Wall Adjacency Floor Plan\" src=\"img/adjacency_floor_plan.png\"/><p>The 3D view of the highlighted wall looks like this:</p><img alt=\"Room Wall Adjacency 3D View\" src=\"img/adjacency_3d_view.png\"/><p>The wall geometry and the solid it provides is not subdivided at the point where it intersects the interior wall, as we can see from the triangles displayed by the element viewer SDK sample:</p><img alt=\"Wall displayed in ElementViewer\" src=\"img/adjacency_wall_in_ElementViewer.png\"/><p>To determine the exact adjacent area, we need to determine the inner face of the wall and determine which part of it overlaps the room boundary segments.\nWe can make use of the solutions on how to determine the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/wall-elevation-profile.html\">\ninner face of the wall</a>\n\nand its\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/3d-polygon-areas.html\">\narea</a> from previous discussions.\n\n<p>Here are three different suggestions on how to approach the problem:</p>\n<ul>\n<li>Implement an algorithm that calculates the area of the portion of a vertical triangle that overlaps a horizontal line segment.</li>\n<li>When determining the wall polygons, truncate them to return only those parts overlapping the horizontal room boundary segments.</li>\n<li>Use the room's ClosedShell property and calculate its intersection area with the wall faces.</li>\n</ul>\n<p>Here are slightly more detailed descriptions of each approach:</p>\n<p>One approach to solve our current problem would be to implement an algorithm that projects the room boundary curve segments onto the wall face triangles and determines the area of the overlap.</p>\n<p>Another approach might start a little bit earlier, modifying the utility methods in the module CmdWallProfile.cs, in the method GetWallProfilePolygons, for instance by modifying the GetProfile method to project its polygons onto the wall location curve, and then chop of the parts that lie outside the room boundary curve segment.\nThe advantage of this is that our polygon area calculation algorithm could be left unchanged, since it already handles all kinds of polygons, and is not limited to triangles.</p>\n<p>A third, completely different approach could make use of the Room object's ClosedShell property. ClosedShell returns a geometry element, which is a solid, which in this specific sample model is a quadrilateral with six faces and twelve edges. We can calculate the overlap of the closed shell faces with the wall faces, which will give us the adjacent surface.\n\n<p>The good thing about the latter approach is that part of the required analysis has already been implemented, in the SDK sample RoofsRooms.\nIt includes a module GeomUtil.cs which implements a method AreSolidsCut.\nThis method analyses whether any one room solid face is a subset of any roof solid face, in which case it returns true.\nIn the RoofsRooms sample, this method is used to determine which roof element is covering which room.\nIn our case, we would need to expand this method to not just return true if an overlap is found, but actually calculate the overlapping area.\nFor the moment, this is left as an exercise to the reader.\nSubmissions of working solutions are gladly accepted.</p>\n<p>To implement a generic solution for calculating the area of two overlapping polygons, we need a 2D Boolean operation to calculate the intersection of two polygons.\nUnfortunately, the Revit API does not provide such a Boolean operation out of the box.</p>\n<p>One might possibly be able to use the some of the functionality provided by various AutoCAD APIs such as AModeler or regions, by \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/running-autocad-inside-revit.html\">\nrunning AutoCAD in the background</a>\n\nand calling a helper application.\nOf course, this requires AutoCAD to be installed on the same machine as your Revit application, which is not always desirable.</p>\n<p>Another and possibly simpler option might be to make use of a free-standing Boolean operation library for polygons. There are a number of them out there, as you can see by googling for \"polygon boolean\" or by looking at the Wikipedia article on\n\n<a href=\"http://en.wikipedia.org/wiki/Boolean_operations_on_polygons\">\nBoolean operations on polygons</a>.\n\nI have downloaded the \n\n<a href=\"http://www.cs.man.ac.uk/~toby/alan/software\">\nGeneric Polygon Clipper (gpc)</a>\n\nas well as the C# wrapper GpcWrapper for it, and that looks promising.\nPlease let me know if you already have any experience making use of this or any other Boolean libraries within Revit.</p>\n</p></p>"
  }
]