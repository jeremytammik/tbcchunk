[
  {
    "original_filename": "1507_parameter_definition",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<!--\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\nParameter Definition Overview #RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge\n\nI am happy to present a pretty comprehensive overview and explanation of the process of defining a shared parameter by Scott Conover.\nQuestion: What do I need to do to programmatically create a shared parameter? I would like to set the <code>SetAllowVaryBetweenGroups</code> flag on it.\nAnswer: You create the details needed to define a shared parameter from <code>ExternalDefinition</code>.\nExisting shared parameter file entries can be read to become an <code>ExternalDefinition</code> in your code, or you can create a new entry in the current shared parameter file using the <code>DefinitionGroup.Create</code> method...\n\n-->"
  },
  {
    "original_filename": "1507_parameter_definition",
    "header_text": "Parameter Definition Overview",
    "local_header_href": "#parameter-definition-overview",
    "chunk_text": "### Parameter Definition Overview\n\nWe have repeatedly discussed all kinds of different aspects\nof [Revit element parameters](http://thebuildingcoder.typepad.com/blog/parameters),\nbut not put together\na [topic group](http://thebuildingcoder.typepad.com/blog/about-the-author.html#5) for them yet.\n\nToday I am happy to present a pretty comprehensive overview and explanation of the process of defining a shared parameter by none less than Scott Conover himself, Senior Revit Engineering Manager:\n\n\n**Question:** What do I need to do to programmatically create a shared parameter?\nI would like to set the `SetAllowVaryBetweenGroups` flag on it. \n\n<center>\n<img src=\"img/new_shared_parameter.jpg\" alt=\"New shared parameter\" width=\"332\"/>\n</center>\n\n**Answer:** You create the details needed to define a shared parameter from `ExternalDefinition`.\nExisting shared parameter file entries can be read to become an `ExternalDefinition` in your code, or you can create a new entry in the current shared parameter file using the `DefinitionGroup.Create` method.\n\nThe sample code listed in the Revit API help file `RevitAPI.chm` or the online Revit API docs\nunder [InstanceBinding class](http://www.revitapidocs.com/2017/7978cb57-0a48-489e-2c8f-116fa2561437.htm) shows\nthis process best.\n\nHere is part of that sample snippet:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;SetNewParameterToInstanceWall(\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIApplication</span>&nbsp;app,\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">DefinitionFile</span>&nbsp;myDefinitionFile&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;a&nbsp;new&nbsp;group&nbsp;in&nbsp;the&nbsp;shared&nbsp;parameters&nbsp;file</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">DefinitionGroups</span>&nbsp;myGroups&nbsp;=&nbsp;myDefinitionFile.Groups;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">DefinitionGroup</span>&nbsp;myGroup&nbsp;=&nbsp;myGroups.Create(&nbsp;<span style=\"color:#a31515;\">&quot;MyParameters&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Create&nbsp;an&nbsp;instance&nbsp;definition&nbsp;in&nbsp;definition&nbsp;group&nbsp;MyParameters</span>\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalDefinitionCreationOptions</span>&nbsp;option\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ExternalDefinitionCreationOptions</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Instance_ProductDate&quot;</span>,&nbsp;<span style=\"color:#2b91af;\">ParameterType</span>.Text&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Don&#39;t&nbsp;let&nbsp;the&nbsp;user&nbsp;modify&nbsp;the&nbsp;value,&nbsp;only&nbsp;the&nbsp;API</span>\n&nbsp;&nbsp;option.UserModifiable&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Set&nbsp;tooltip</span>\n&nbsp;&nbsp;option.Description&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Wall&nbsp;product&nbsp;date&quot;</span>;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Definition</span>&nbsp;myDefinition_ProductDate\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;myGroup.Definitions.Create(&nbsp;option&nbsp;);\n\n  . . .\n</pre>\n\nThe return from `DefinitionGroup.Create` is an `ExternalDefinition`, even though the type declared is the parent class.\n\nOnce you have an `ExternalDefinition`, you add it to the document.\n\nThere are several ways:\n\n1. Use `InstanceBinding` as shown in that sample.\n2. Use `FamilyManager.AddParameter` to add the parameter to a family.\n3. Use `FamilyManager.ReplaceParameter` to replace a family parameter with the shared one.\n4. Use `SharedParameterElement.Create` to create the element that represents the parameter without binding it to any categories.\n\nThere are also some `RebarShape` related utilities which I would not recommend for general usage but might be OK for rebar-specific code.\n\nOnce the parameter is in the document, it has an `InternalDefinition`.\n\nThe best ways to get it:\n\n1. If you have the `ParameterElement` from #4 you can use `ParameterElement.GetDefinition`.\n2. If you have the GUID (which you should, since it is provided by the `ExternalDefinition`), you can use `SharedParameterElement.Lookup` followed by `ParameterElement.GetDefinition`.\n3. If you have an instance of an element whose category has this parameter bound, get the `Parameter` and use `Parameter.Definition`.\n\nOnce you have the `InternalDefinition`, you can access the vary across groups option as well as other things.\nYou can also use an `InternalDefintion` for adding and removing `InstanceBindings` to categories.\n\nMany thanks to Scott for this nice comprehensive summary and overview!\n\n\n####<a name=\"2\"></a>Addemdum\n\nJoshua Lumley pointed out some possible enhancements\nin [his two](http://thebuildingcoder.typepad.com/blog/2016/12/parameter-definition-overview.html#comment-3079825547)\n[comments](http://thebuildingcoder.typepad.com/blog/2016/12/parameter-definition-overview.html#comment-3079829813) below:\n\nTo run the code more than twice I added:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;dgMatchFound&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">DefinitionGroup</span>&nbsp;dg&nbsp;<span style=\"color:blue;\">in</span>&nbsp;myGroups&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;dg.Name&nbsp;==&nbsp;myGroupName&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dgMatchFound&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myGroup&nbsp;=&nbsp;dg;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;dgMatchFound&nbsp;==&nbsp;<span style=\"color:blue;\">false</span>&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;myGroup&nbsp;=&nbsp;myGroups.Create(&nbsp;myGroupName&nbsp;);\n&nbsp;&nbsp;}\n</pre>\n\nand\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;dMatchFound&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Definition</span>&nbsp;d&nbsp;<span style=\"color:blue;\">in</span>&nbsp;myGroup.Definitions&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;d.Name&nbsp;==&nbsp;newParameterName&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dMatchFound&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myDefinition_ProductDate&nbsp;=&nbsp;d;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!dMatchFound&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;myDefinition_ProductDate\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;myGroup.Definitions.Create(&nbsp;option&nbsp;);\n&nbsp;&nbsp;}\n</pre>\n\nI called it like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">DefinitionFile</span>&nbsp;defFile&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;GetOrCreateSharedParamsFile(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActiveUIDocument.Application.Application&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;AddParameterResult&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;SetNewParameterToInstanceWall(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ActiveUIDocument.Application,&nbsp;defFile&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">TaskDialog</span>.Show(&nbsp;<span style=\"color:#a31515;\">&quot;Did&nbsp;it&nbsp;work&quot;</span>,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;AddParameterResult.ToString()&nbsp;);\n</pre>\n\nMany thanks to Josh for the helpful usage hints!"
  }
]