[
  {
    "original_filename": "0529_newtakeofffitting_duct",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0529_newtakeofffitting_duct",
    "header_text": "Use of NewTakeOffFitting on a Duct",
    "local_header_href": "#use-of-newtakeofffitting-on-a-duct",
    "chunk_text": "<h3>Use of NewTakeOffFitting on a Duct</h3><p>Here is a simple question on how to create a new MEP takeoff on a duct using the NewTakeOffFitting method:\n\n<p><strong>Question:</strong> I have a duct in my Revit MEP model and I want to create a takeoff fitting at its midpoint.\nI see that the method NewTakeOffFitting takes two arguments, a connector and an MEP curve, and returns a new family instance.\nMy question is:\n\n<p>How can I create the connector and curve?\nCan you show me some code on how to do so and use this method?\nThanks!\n\n<p><strong>Answer:</strong> To begin with, the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/the-revit-mep-api.html#6\">\nAutoRoute</a> and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/the-revit-mep-api.html#6\">\nAvoidObstruction</a> Revit \n\nSDK samples show you how to handle the programmatic creation of pipes, ducts and fittings.\n\n<p>I also analysed the creation and positioning of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/cable-tray-orientation-and-fittings.html\">\ncable tray fittings</a> in \n\nsome depth.\n\n<p>None of these samples explicitly demonstrate the use of the NewTakeOffFitting method, however.\n\n<p>The Document.NewTakeoffFitting method adds a new family instance representing a takeoff fitting into the model, using one connector and one MEP curve:\n\n<center>\n<img alt=\"NewTakeOffFitting method arguments\" src=\"img/takeoff_curve_connector.png\"/>\n</center>\n<p>The MEP curve is the base pipe or duct, and the connector belongs to the element that is to be attached to it.\n\n<p>I created a little sample application \n\n<a href=\"zip/CreateTakeoff.zip\">\nCreateTakeoff</a> to \n\ndemonstrate its use in real life.\n\nIt was interesting to do so, because I did have to struggle with one or two issues, such as what duct elements to use and how to position them.\n\n<p>Here is the mainline of the external command Execute method implementing this:</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Result</span> result = <span class=\"teal\">Result</span>.Failed;\n \n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">Document</span> doc = uiapp.ActiveUIDocument.Document;\n \n  <span class=\"teal\">Transaction</span> t = <span class=\"blue\">null</span>;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Document</span> creDoc\n    = doc.Create;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"green\">// determine duct type to use:</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> collector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n    collector.OfCategory(\n      <span class=\"teal\">BuiltInCategory</span>.OST_DuctCurves );\n \n    collector.OfClass( <span class=\"blue\">typeof</span>(\n      <span class=\"teal\">ElementType</span> ) );\n \n    <span class=\"teal\">DuctType</span> ductType\n      = collector.FirstElement() <span class=\"blue\">as</span> <span class=\"teal\">DuctType</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == ductType )\n    {\n      ErrorMsg( <span class=\"maroon\">\"No duct types found.\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc, _caption );\n \n      t.Start();\n \n      <span class=\"green\">// create duct1 along X axis </span>\n      <span class=\"green\">// from (0,0,0) to (6,0,0):</span>\n \n      <span class=\"teal\">XYZ</span> start = <span class=\"teal\">XYZ</span>.Zero;\n      <span class=\"teal\">XYZ</span> end = start + 6 * <span class=\"teal\">XYZ</span>.BasisX;\n      <span class=\"teal\">XYZ</span> mid = 0.5 * ( start + end );\n \n      <span class=\"teal\">Duct</span> duct1 = creDoc.NewDuct(\n        start, end, ductType );\n \n      <span class=\"green\">// create duct2 parallel to Y </span>\n      <span class=\"green\">// axis from (1,2,0) to (1,4,0):</span>\n \n      start = mid + 2 * <span class=\"teal\">XYZ</span>.BasisY;\n      end = start + 2 * <span class=\"teal\">XYZ</span>.BasisY;\n \n      <span class=\"teal\">Duct</span> duct2 = creDoc.NewDuct(\n        start, end, ductType );\n \n      <span class=\"green\">// pick closest connector on duct2:</span>\n \n      <span class=\"teal\">Connector</span> duct2_start = <span class=\"blue\">null</span>;\n \n      <span class=\"green\">// just picking the first one is unreliable!</span>\n      <span class=\"green\">// the order of connector returned by the </span>\n      <span class=\"green\">// connector manager may change!</span>\n      <span class=\"green\">// always use a location (or even more </span>\n      <span class=\"green\">// information if 2 connectors are at </span>\n      <span class=\"green\">// the same location) to get the right</span>\n      <span class=\"green\">// connector!</span>\n \n      <span class=\"blue\">double</span> dist = <span class=\"blue\">double</span>.MaxValue;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c <span class=\"blue\">in</span>\n        duct2.ConnectorManager.Connectors )\n      {\n        <span class=\"teal\">XYZ</span> p = c.Origin;\n        <span class=\"blue\">double</span> d = p.DistanceTo( mid );\n \n        <span class=\"blue\">if</span>( d &lt; dist )\n        {\n          dist = d;\n          duct2_start = c;\n        }\n        <span class=\"blue\">break</span>;\n      }\n \n      <span class=\"green\">// create takeoff from duct1 to duct2:</span>\n \n      <span class=\"teal\">FamilyInstance</span> takeoff\n        = creDoc.NewTakeoffFitting(\n          duct2_start, duct1 );\n \n      t.Commit();\n \n      result = <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != t )\n    {\n      t.RollBack();\n    }\n    message = ex.Message;\n  }\n  <span class=\"blue\">return</span> result;\n}\n</pre>\n<p>One important thing to note here is that you cannot rely on the order of the connectors returned by the connector manager, since it may change. Therefore, you cannot simply pick the first connector, for instance, but have to rely on some other criteria such as the location. In the code above, I checked the distance of the second duct's connectors to the midpoint of the first duct and selected the closest one.\n\n<p>Instead, I loop through all the connectors of duct2 and select the one with a minimum distance to the midpoint of the first duct.\nSince I am searching for the minimum distance, I initialise the variable 'dist' to the maximal possible value and then loop through all connectors, always picking the new one if its distance to the midpoint is smaller than the previous value.\n\n<p>Alternatively, I could probably position the second duct so that its connector is very close to the midpoint and then use XYZ.IsAlmostEqualTo.\n\n<p>Here is the result of running this command in a new Revit MEP project:</p>\n<center>\n<img alt=\"New takeoff fitting on a rectangular duct\" src=\"img/takeoff_rect_duct.png\"/>\n</center>\n<p>Out of interest, I tried running it in Revit Architecture as well, but the very first call to create a new duct element fails and reports that this functionality is only available in Revit MEP.\n\n<p>Here is \n\n<a href=\"zip/CreateTakeoff.zip\">\nCreateTakeoff.zip</a> containing \n\nthe entire source code and Visual Studio solution implementing this add-in.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]