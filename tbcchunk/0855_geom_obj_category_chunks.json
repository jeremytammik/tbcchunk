[
  {
    "original_filename": "0855_geom_obj_category",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0855_geom_obj_category",
    "header_text": "Geometry Object Subcategory",
    "local_header_href": "#geometry-object-subcategory",
    "chunk_text": "<h3>Geometry Object Subcategory</h3><p>I received and have started installing and learning to use my new laptop, which is a Mac, I'm finishing up my preparations for Autodesk University, and I'm working on preparations for upcoming developer conferences, so you can imagine there is rather a lot to do and 24 hours per day seem very limiting.\nI love the Unix shell!\nGoodbye, DOS box.\n\n<p>Thank goodness my colleague Joe Ye answered a case that I found interesting and would like to share with you, since Joe is busy preparing his own Chinese developer meetings and conferences:\n\n<p><strong>Question:</strong> I am trying to determine the subcategory of each solid element in a family.\n\n<p>Can this be done using the API?\n\n<p>My family that has two different solids and they have different subcategories.\n\n<p>I want to know which solid I am looking at and figured that subcategories would be a good way to go, since they can be applied to solids in a family.\n\n<p>Please note that the family with the subcategories must be nested as a non-shared family and I have to find out what element geometry is what in the supercomponent family.\n\n<p>I know that I can find out what subcategory each solid element belongs to when I open the family, but can I do so when its loaded as well?\n\n<p>Is there any other way of identifying different geometry objects once a family instance has been placed in the project?\nBesides looking at the geometrical aspects such as volume, areas etc.\n\n\n<p><strong>Answer:</strong> Yes, you can retrieve the solid category from the family instance in the model.\n\n<p>The category information is stored in the Solid object's GraphicStyle property.\n\n<p>The following code retrieves all the solid category names from a selected family instance:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n    <span class=\"teal\">Reference</span> r = sel.PickObject( <span class=\"teal\">ObjectType</span>.Element,\n      <span class=\"maroon\">\"Please pick a family instance\"</span> );\n \n    <span class=\"teal\">Element</span> e = doc.GetElement( r );\n \n    <span class=\"teal\">GeometryElement</span> geoElem = e.get_Geometry(\n      <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n    <span class=\"blue\">int</span> n = 0;\n    <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Empty;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geoElem )\n    {\n      <span class=\"blue\">if</span>( obj <span class=\"blue\">is</span> <span class=\"teal\">GeometryInstance</span> )\n      {\n        <span class=\"teal\">GeometryInstance</span> geoInst\n          = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n \n        <span class=\"teal\">GeometryElement</span> geoElem2\n          = geoInst.GetSymbolGeometry();\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geoObj2 <span class=\"blue\">in</span> geoElem2 )\n        {\n          <span class=\"blue\">if</span>( geoObj2 <span class=\"blue\">is</span> <span class=\"teal\">Solid</span> )\n          {\n            <span class=\"teal\">Solid</span> solid = geoObj2 <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n            <span class=\"teal\">ElementId</span> id = solid.GraphicsStyleId;\n \n            <span class=\"teal\">GraphicsStyle</span> gStyle = doc.GetElement(\n              id ) <span class=\"blue\">as</span> <span class=\"teal\">GraphicsStyle</span>;\n \n            <span class=\"blue\">if</span>( gStyle != <span class=\"blue\">null</span> )\n            {\n              ++n;\n              s += gStyle.GraphicsStyleCategory.Name\n                + <span class=\"maroon\">\"\\r\\n\"</span>;\n            }\n          }\n        }\n      }\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( n.ToString() + <span class=\"maroon\">\" Graphics Styles\"</span>,\n      s );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>Here is an example of running this and selecting one of the doors in the basic sample project:</p>\n<center>\n<img alt=\"Sample project door instance\" src=\"img/geom_obj_categories_1.png\"/>\n</center>\n<p>The following materials are listed for this instance:</p>\n<center>\n<img alt=\"Solid graphics style categories\" src=\"img/geom_obj_categories_2.png\"/>\n</center>\n<p>Many thanks to Joe for this answer!\n\n\n<a name=\"2\"></a>\n<h4>Listing all Schedules Placed on a Sheet</h4>\n<p>Meanwhile, Saikat discusses yet another use of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\ntemporary transaction and deletion trick</a> to\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/11/listing-schedules-placed-on-sheets-in-revit.html\">\ndetermine all schedules placed on a given sheet</a>.\n\n<p>In this case, the trick is to temporarily delete the sheet and watch which schedules are wiped out by that operation.\n\n<p>Note that in a comment on that post, Phillip Miller points out a way to achieve the same result using a filtered element collector taking a view id argument.\n\n<p>Who is going to create a benchmark comparing the relative speed of these two approaches?\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0855_geom_obj_category",
    "header_text": "Listing all Schedules Placed on a Sheet",
    "local_header_href": "#listing-all-schedules-placed-on-a-sheet",
    "chunk_text": "<h4>Listing all Schedules Placed on a Sheet</h4><p>Meanwhile, Saikat discusses yet another use of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\ntemporary transaction and deletion trick</a> to\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/11/listing-schedules-placed-on-sheets-in-revit.html\">\ndetermine all schedules placed on a given sheet</a>.\n\n<p>In this case, the trick is to temporarily delete the sheet and watch which schedules are wiped out by that operation.\n\n<p>Note that in a comment on that post, Phillip Miller points out a way to achieve the same result using a filtered element collector taking a view id argument.\n\n<p>Who is going to create a benchmark comparing the relative speed of these two approaches?\n</p></p></p></p>"
  }
]