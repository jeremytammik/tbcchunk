[
  {
    "original_filename": "1243_future_proof",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1243_future_proof",
    "header_text": "Determining Intersecting Elements and Continued Futureproofing",
    "local_header_href": "#determining-intersecting-elements-and-continued-futureproofing",
    "chunk_text": "<h3>Determining Intersecting Elements and Continued Futureproofing</h3><p>I continued cleaning up the obsolete API usage in The Building Coder samples, and took a look at a new blog post by Joe Ye:</p><ul>\n<li><a href=\"#2\">Eliminating more obsolete API usage</a></li>\n<li><a href=\"#3\">Determining all family instances intersecting an element</a></li>\n<li><a href=\"#4\">Updated element selection utility methods</a></li>\n<li><a href=\"#5\">Intersection results and download</a></li>\n<li><a href=\"#6\">Explanation: joined geometry removes intersection</a></li>\n<!--\n<li><a href=\"#4\">Even read-only Revit API calls are not thread safe</a></li>\n<li><a href=\"#5\">AU, DevDays and Darth Vader</a></li>\n-->\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1243_future_proof",
    "header_text": "Eliminating More Obsolete API Usage",
    "local_header_href": "#eliminating-more-obsolete-api-usage",
    "chunk_text": "<h4>Eliminating More Obsolete API Usage</h4><p>I continue in my battle against the obsolete API usage warnings after the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/compiling-the-revit-2015-sdk-and-migrating-bc-samples.html#5\">\ninitial migration to Revit 2015</a> and\n\nsubsequently finally\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/migrating-deprecated-api-and-2d-boolean-operations.html#3\">\ngetting started migrating deprecated API</a>.</p><p>I now removed the following ten warnings, all of them with the number CS0618, leaving\n\n<a href=\"zip/bc_migr_2015_e.txt\">35 remaining</a> to\n\nbe fixed:</p><ul>\n<li>CmdCollectorPerformance.cs: Autodesk.Revit.DB.Element.get_Parameter(string) is obsolete, as more than one parameter can have the same name on a given element.</li>\n<li>CmdCoordsOfViewOnSheet.cs: Autodesk.Revit.DB.ViewSheet.Views is obsolete.  Use GetAllPlacedViews instead.</li>\n<li>CmdRollingOffset.cs: Autodesk.Revit.Creation.Document.NewPipe is obsolete. Please use Pipe.Create instead.</li>\n<li>CmdNewDuctSystem.cs: Autodesk.Revit.UI.Selection.Selection.Elements is obsolete. Use GetElementIds instead.</li>\n<li>CmdTransformedCoords.cs: Autodesk.Revit.UI.Selection.Selection.Elements is obsolete. Use GetElementIds instead.</li>\n<li>CmdUnrotateNorth.cs: Autodesk.Revit.UI.Selection.Selection.Elements is obsolete. Use GetElementIds instead.</li>\n<li>CmdWindowHandle.cs: Autodesk.Revit.UI.Selection.SelElementSet is obsolete. Use GetElementIds instead.</li>\n<li>CmdWindowHandle.cs: Autodesk.Revit.UI.Selection.Selection.Elements is obsolete. Use GetElementIds instead.</li>\n<li>CmdWindowHandle.cs: Autodesk.Revit.UI.Selection.SelElementSet is obsolete. Use GetElementIds instead.</li>\n<li>CmdWindowHandle.cs: Autodesk.Revit.UI.Selection.Selection.Elements is obsolete. Use GetElementIds instead.</li>\n</ul><p>As always, the most up to date version of The Building Coder samples is provided in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">its GitHub repository</a>,\n\nand the version described here is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.116.4\">\nrelease 2015.0.116.4</a>.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1243_future_proof",
    "header_text": "Determining all Family Instances Intersecting an Element",
    "local_header_href": "#determining-all-family-instances-intersecting-an-element",
    "chunk_text": "<h4>Determining all Family Instances Intersecting an Element</h4><p>My colleague\n\n<a href=\"http://adndevblog.typepad.com/aec/joe-ye.html\">\nJoe Ye</a> left\n\nAutodesk and is now independently active with <a href=\"http://www.glsbim.com\">gisbim.com</a> or <i>Mount of Olives</i>.</p><p>He is still actively supporting and blogging about Revit programming, though, partially as a consultant for Autodesk, e.g. in this explanation on how to\n\n<a href=\"http://blog.csdn.net/joexiongjin/article/details/41090861\">how to retrieve all columns intersecting a wall</a>.</p><p>Of course, this can be solved addressing the more general issue of retrieving all family instances of a specific type intersecting a given BIM element.</p><p><strong>Question:</strong> How can I find all columns intersecting a given wall?</p><p><strong>Answer:</strong> The Revit API does not provide direct access to query the relationship between the pillars and wall.</p><p>However, you can easily obtain it indirectly through the API using an intersecting element filter, e.g. one of the two classes ElementIntersectsElementFilter or ElementIntersectsSolidFilter.\nThe latter requires a solid, the former takes a BIM element and uses its existing solid geometry.\nFor more information on these, please refer to the Revit API help file RevitAPI.chm.</p><p>Here is Joe's sample code demonstrating this:</p><pre class=\"code\">\n  <span class=\"green\">// Find intersections between family instances and a selected element  </span>\n \n  <span class=\"teal\">Reference</span> Reference = uidoc.Selection.PickObject(\n    <span class=\"teal\">ObjectType</span>.Element, <span class=\"maroon\">\"Select element that will \"</span>\n    + <span class=\"maroon\">\"be checked for intersection with all family \"</span>\n    + <span class=\"maroon\">\"instances\"</span> );\n \n  <span class=\"teal\">Element</span> e = doc.GetElement( reference );\n \n  <span class=\"teal\">GeometryElement</span> geomElement = e.get_Geometry(\n    <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geomObj <span class=\"blue\">in</span> geomElement )\n  {\n    solid = geomObj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( solid = !<span class=\"blue\">null</span> ) <span class=\"blue\">break</span>;\n  }\n \n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>(\n        solid ) );\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Revit\"</span>, collector.Count() +\n    <span class=\"maroon\">\"Family instances intersect with selected element (\"</span>\n    + element.Category.Name + <span class=\"maroon\">\"ID:\"</span> + element.Id + <span class=\"maroon\">\")\"</span> );\n</pre><p>I could not resist cleaning this up a bit and adding some LINQ and other generic and functional twiddles to achieve the following enhancements:</p><ul>\n<li>Foolproof the solid selection by skipping null and empty solids.</li>\n<li>Improve the result message and add element information.</li>\n<li>List the element ids of all the intersecting instances.</li>\n</ul><p>Here is the resulting implementation:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve all family instances intersecting a</span>\n<span class=\"gray\">///</span><span class=\"green\"> given BIM element, e.g. all columns </span>\n<span class=\"gray\">///</span><span class=\"green\"> intersecting a wall.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">void</span> GetInstancesIntersectingElement( <span class=\"teal\">Element</span> e )\n{\n  <span class=\"teal\">Document</span> doc = e.Document;\n \n  <span class=\"teal\">Solid</span> solid = e.get_Geometry( <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() )\n    .OfType&lt;<span class=\"teal\">Solid</span>&gt;()\n    .Where&lt;<span class=\"teal\">Solid</span>&gt;( s =&gt; <span class=\"blue\">null</span> != s &amp;&amp; !s.Edges.IsEmpty )\n    .FirstOrDefault();\n \n  <span class=\"teal\">FilteredElementCollector</span> intersectingInstances\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>( solid ) );\n \n  <span class=\"blue\">int</span> n = intersectingInstances.Count&lt;<span class=\"teal\">Element</span>&gt;();\n \n  <span class=\"blue\">string</span> result = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} family instance{1} intersect{2} the \"</span>\n    + <span class=\"maroon\">\"selected element {3}{4}\"</span>,\n    n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n    ( 1 == n ? <span class=\"maroon\">\"s\"</span> : <span class=\"maroon\">\"\"</span> ),\n    <span class=\"teal\">Util</span>.ElementDescription( e ),\n    <span class=\"teal\">Util</span>.DotOrColon( n ) );\n \n  <span class=\"blue\">string</span> id_list = 0 == n\n    ? <span class=\"blue\">string</span>.Empty\n    : <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\", \"</span>,\n        intersectingInstances\n          .Select&lt;<span class=\"teal\">Element</span>, <span class=\"blue\">string</span>&gt;(\n            x =&gt; x.Id.IntegerValue.ToString() ) )\n      + <span class=\"maroon\">\".\"</span>;\n \n  <span class=\"teal\">Util</span>.InfoMsg2( result, id_list );\n}\n</pre><p>After some hesitation, I even took the plunge and decided to actually test this before pushing to GitHub.</p><p>I modified the CmdCollectorPerformance external command temporarily to test this method, changing its transaction mode from automatic to read-only and adding these lines of code:</p><pre class=\"code\">\n  <span class=\"teal\">Element</span> wall = <span class=\"teal\">Util</span>.SelectSingleElementOfType(\n    uidoc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ), <span class=\"maroon\">\"a wall\"</span>, <span class=\"blue\">true</span> );\n \n  GetInstancesIntersectingElement( wall );\n</pre><p>That led to some fixes in the utility class selection methods, a few more obsolete API usage removals, plus the discovery that the HasRequestedType method probably never previously worked as intended.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1243_future_proof",
    "header_text": "Updated Element Selection Utility Methods",
    "local_header_href": "#updated-element-selection-utility-methods",
    "chunk_text": "<h4>Updated Element Selection Utility Methods</h4><p>Here is a long overdue update to The Building Coder samples element selection utility methods:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span> SelectSingleElement(\n    <span class=\"teal\">UIDocument</span> uidoc,\n    <span class=\"blue\">string</span> description )\n  {\n    <span class=\"blue\">if</span>( <span class=\"teal\">ViewType</span>.Internal == uidoc.ActiveView.ViewType )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Error\"</span>,\n        <span class=\"maroon\">\"Cannot pick element in this view: \"</span>\n        + uidoc.ActiveView.Name );\n \n      <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n    }\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"maroon\">\"Please select \"</span> + description );\n \n      <span class=\"blue\">return</span> uidoc.Document.GetElement( r ); <span class=\"green\">// 2012</span>\n    }\n    <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions.<span class=\"teal\">OperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span> GetSingleSelectedElement(\n    <span class=\"teal\">UIDocument</span> uidoc )\n  {\n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n      = uidoc.Selection.GetElementIds();\n \n    <span class=\"teal\">Element</span> e = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( 1 == ids.Count )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n      {\n        e = uidoc.Document.GetElement( id );\n      }\n    }\n    <span class=\"blue\">return</span> e;\n  }\n \n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> HasRequestedType(\n    <span class=\"teal\">Element</span> e,\n    <span class=\"teal\">Type</span> t,\n    <span class=\"blue\">bool</span> acceptDerivedClass )\n  {\n    <span class=\"blue\">bool</span> rc = <span class=\"blue\">null</span> != e;\n \n    <span class=\"blue\">if</span>( rc )\n    {\n      <span class=\"teal\">Type</span> t2 = e.GetType();\n \n      rc = t2.Equals( t );\n \n      <span class=\"blue\">if</span>( !rc &amp;&amp; acceptDerivedClass )\n      {\n        rc = t2.IsSubclassOf( t );\n      }\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span> SelectSingleElementOfType(\n    <span class=\"teal\">UIDocument</span> uidoc,\n    <span class=\"teal\">Type</span> t,\n    <span class=\"blue\">string</span> description,\n    <span class=\"blue\">bool</span> acceptDerivedClass )\n  {\n    <span class=\"teal\">Element</span> e = GetSingleSelectedElement( uidoc );\n \n    <span class=\"blue\">if</span>( !HasRequestedType( e, t, acceptDerivedClass ) )\n    {\n      e = <span class=\"teal\">Util</span>.SelectSingleElement(\n        uidoc, description );\n    }\n    <span class=\"blue\">return</span> HasRequestedType( e, t, acceptDerivedClass )\n      ? e\n      : <span class=\"blue\">null</span>;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Retrieve all pre-selected elements of the specified type,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> if any elements at all have been pre-selected. If not,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> retrieve all elements of specified type in the database.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"a\"&gt;</span><span class=\"green\">Return value container</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"uidoc\"&gt;</span><span class=\"green\">Active document</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"t\"&gt;</span><span class=\"green\">Specific type</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">True if some elements were retrieved</span><span class=\"gray\">&lt;/returns&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> GetSelectedElementsOrAll(\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; a,\n    <span class=\"teal\">UIDocument</span> uidoc,\n    <span class=\"teal\">Type</span> t )\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n      = uidoc.Selection.GetElementIds();\n \n    <span class=\"blue\">if</span>( 0 &lt; ids.Count )\n    {\n      a.AddRange( ids\n        .Select&lt;<span class=\"teal\">ElementId</span>,<span class=\"teal\">Element</span>&gt;(\n          id =&gt; doc.GetElement( id ) )\n        .Where&lt;<span class=\"teal\">Element</span>&gt;(\n          e =&gt; t.IsInstanceOfType( e ) ) );\n    }\n    <span class=\"blue\">else</span>\n    {\n      a.AddRange( <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( t ) );\n    }\n    <span class=\"blue\">return</span> 0 &lt; a.Count;\n  }\n</pre><p>With the new selection code in place, the project now produces\n\n<a href=\"zip/bc_migr_2015_e.txt\">32 obsolete API warning messages</a>.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1243_future_proof",
    "header_text": "Intersection Results and Download",
    "local_header_href": "#intersection-results-and-download",
    "chunk_text": "<h4>Intersection Results and Download</h4><p>Back to the intersection test.</p><p>The Revit SDK sample FindReferencesByDirection/FindColumns includes a suitable model for the intersection test, FindColumns-Basic.rvt:</p><center>\n<img alt=\"FindColumns-Basic.rvt sample model\" src=\"img/columns_intersecting_wall_sample.png\" width=\"400\"/>\n</center><p>In the original implementation of this sample, described in\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/using-avf-to-display-intersections-and-highlight-rooms.html\">AVF displays intersections</a> and\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/using-avf-to-display-intersections-and-highlight-rooms.html#2\">FindColumns Using Geometry Creation and Booleans</a>,\nthe resulting intersections are graphically highlighted using the Analysis Visualisation Framework for easy interactive comparison.</p><center>\n<img alt=\"Wall-column intersections highlighted using AVF\" src=\"img/wall_column_intersections_avf.png\" width=\"340\"/>\n</center><p>When picking the straight wall, the following result is reported, more or less as expected:</p><center>\n<img alt=\"Columns intersecting straight wall\" src=\"img/columns_intersecting_wall_1.png\" width=\"366\"/>\n</center><p>Actually, looking at it more closely, we would probably expect more than just two intersections.</p><p>The curved wall is even worse and reports zero intersecting instances.</p><p>I added code to compare the result of the solid intersection filter with the element one:</p><pre class=\"code\">\n  <span class=\"teal\">Solid</span> solid = e.get_Geometry( <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() )\n    .OfType&lt;<span class=\"teal\">Solid</span>&gt;()\n    .Where&lt;<span class=\"teal\">Solid</span>&gt;( s =&gt; <span class=\"blue\">null</span> != s &amp;&amp; !s.Edges.IsEmpty )\n    .FirstOrDefault();\n \n  <span class=\"teal\">FilteredElementCollector</span> intersectingInstances\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsSolidFilter</span>(\n        solid ) );\n \n  <span class=\"blue\">int</span> n1 = intersectingInstances.Count&lt;<span class=\"teal\">Element</span>&gt;();\n \n  intersectingInstances\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( <span class=\"blue\">new</span> <span class=\"teal\">ElementIntersectsElementFilter</span>(\n        e ) );\n \n  <span class=\"blue\">int</span> n = intersectingInstances.Count&lt;<span class=\"teal\">Element</span>&gt;();\n \n  <span class=\"teal\">Debug</span>.Assert( n.Equals( n1 ),\n    <span class=\"maroon\">\"expected solid intersection to equal element intersection\"</span> );\n</pre><p>The results are identical for both filters.</p><p>I'll keep you posted when I find a solution for this problem.</p><p>As always, the updated version of The Building Coder samples is available from\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">its GitHub repository</a>,\n\nand the version including the GetInstancesIntersectingElement method and updated element selection is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.116.5\">\nrelease 2015.0.116.5</a>.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1243_future_proof",
    "header_text": "Explanation: Joined Geometry Removes Intersection",
    "local_header_href": "#explanation-joined-geometry-removes-intersection",
    "chunk_text": "<h4>Explanation: Joined Geometry Removes Intersection</h4><p>I received an immediate and satisfying answer to my question above from Scott Conover, who explains:</p><p>These filters are working as designed.</p><p>The concrete columns intersecting the wall are joined to the wall. Thus their geometry gets automatically adjusted to not trigger an item in the interference checking tool that is the basis for the ElementIntersectsElementFilter implementation, and the solids are not considered overlapping.</p><p>If you place or move a steel column instance to be interfering with the wall instead of the concrete ones, it will work as you expect.</p><p>I covered this in my geometry class at Autodesk University 2012, cf. the following quote from the\n\n<a href=\"http://thebuildingcoder.typepad.com/files/cp4011_conover.pdf\">\nhandout document</a>:</p><blockquote>\n<p>The element filters:</p>\n<ul>\n<li>ElementIntersectsElementFilter </li>\n<li>ElementIntersectsSolidFilter </li>\n</ul>\n<p>pass elements whose actual 3D geometry intersects the 3D geometry of the target object.</p>\n<p>With ElementIntersectsElementFilter, the target object is another element. The intersection is determined with the same logic used by Revit to determine if an interference exists during generation of an Interference Report. (This means that some combinations of elements will never pass this filter, such as concrete members which are automatically joined at their intersections). Also, elements which have no solid geometry, such as Rebar, will not pass this filter.</p>\n<p>With ElementIntersectsSolidFilter, the target object is any solid. This solid could have been obtained from an existing element, created from scratch using the routines in GeometryCreationUtilities, or the result of a secondary operation such as a Boolean operation. Similar to the ElementIntersectsElementFilter, this filter will not pass elements which lack solid geometry.</p>\n<p>Both filters can be inverted to match elements outside the target object volume.</p>\n</blockquote><p>Thank you, Scott, for the clarification!</p><a name=\"7\"></a><p><strong>Addendum:</strong> Joe Ye adds:</p><p>Yes, Mount of Olives is the right translation, and the meaning of Gan Lan Shan (橄榄山) is indeed the mount of olives.</p><p>I use the term GLS Soft as the unique common company name for both Chinese and English.</p><p>I am hiring employees. It is hard to find full time Revit developers. It seems I have to educate some green hands to become full time employees.</p><p>Regarding finding the walls around a column, here is an alternative approach:</p><p>As you say, the ElementIntersectsElementFilter does not find the joined column when both the wall and the column are concrete and they have therefore been automatically combined.</p><p>In this case, it is recommended to use the ElementIntersectsSolidFilter instead, passing in the column's original geometry solid.</p><p>See you soon in Las Vegas!</p>"
  }
]