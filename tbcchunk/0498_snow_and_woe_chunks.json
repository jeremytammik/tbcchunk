[
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "Snow and Woe with Manifest Files",
    "local_header_href": "#snow-and-woe-with-manifest-files",
    "chunk_text": "<h3>Snow and Woe with Manifest Files</h3><p>I am still on the road toward Paris.\nThe departure of our flight in Moscow was delayed, so we missed the connection to Paris in Vienna.\nIn addition, I heard that the Paris airport was closed all day until five in the afternoon due to snow.\nWe are still booked to fly and arrive Thursday night, though, so the Paris conference scheduled for Friday is not yet endangered.\nRight now, the ETA is quarter to twelve, so it will be a short night before the conference begins...\n\n<p>Actually, by the time I get to post this, it is early Friday morning.\nWe arrived safely in the hotel at two in the morning, slept for a couple of hours, and reached the office, still completely empty at this time of the day.\n\n<p>Before I continue, here are a couple of pictures from the developer conference in Moscow, taken by my colleague Partha Sarkar.\nHere is the view from the Autodesk office over snowy Moscow:</p>\n<center>\n<img alt=\"View from the Autodesk office in Moscow\" src=\"file:////j/photo/jeremy/2010/2010-12-08_devdays_moscow/img_0016.jpg\" width=\"400\"/>\n</center>\n<p>A view of the conference opening session by Jim Quanci with one of our translators at work:</p>\n<center>\n<img alt=\"Jim Quanci presenting with translator\" src=\"file:////j/photo/jeremy/2010/2010-12-08_devdays_moscow/img_0013.jpg\" width=\"400\"/>\n</center>\n<p>And here the DevTech group having dinner after a hard day's work and lots of interesting discussions;\nfrom left to right, Marat Mirgaleev, Philippe Leefsma, Adam Nagy, Karl Osti, Jim Quanci, Partha Sarkar, and me:</p>\n<center>\n<img alt=\"DevTech dinner\" src=\"file:////j/photo/jeremy/2010/2010-12-08_devdays_moscow/img_0028.jpg\" width=\"400\"/>\n</center>\n<h3>Updated Revit API Track at Autodesk University 2010</h3>\n<p>I updated the list of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/the-revit-api-track-at-au-2010.html\">\nRevit API related classes at Autodesk University 2010</a>,\n\nadding new classes and uploading more materials for direct download.\nYou really must check out this material, there are several real gems in there!\nYesterday I looked through Iffat Mai's Diary of a Wimpy BIM Manager CP430-1, and I love it!\nLooking through all this material is absolutely worthwhile and should keep you occupied for a while...\n\n<a name=\"woe\"></a>\n<h3>Add-in Manifest Woes</h3>\n<p>In the last couple of days I have talked with several people who had problems installing Revit add-ins, mainly because they ran into issues with the add-in manifest file.\nOne Russian developer says he has been struggling with these problems for months now.\n\n<p>Please do read and follow the instructions in the developer guide 'Revit 2011 API Developer Guide.pdf' carefully and precisely!\nSection 2.2.5 'Create a .addin manifest file' describes the simple case for the Hello World walkthrough, and 3.4 'Add-in Registration' provides the full detailed description.\nWe already discussed these issues when looking at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html#1\">\nmanifest file in general</a> and specifically for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html#3\">\npipe to conduit converter</a>.\n\nAn overview of other manifest related topics is given in the discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/network-access-to-add-in-manifest-and-icons.html\">\nnetwork access and ribbon icons</a>.\n\n<p>Some of the problems people seem to be running into and that are not highlighted in the documentation:\n\n<ul>\n<li>The ProgramData folder is hidden by default on Windows 7.\n<li>The ProgramData folder is <strong>not</strong> \"Program Data\"; there is <strong>no space</strong> in the folder name.\n<li>The encoding of the XML format add-in manifest file must correspond to what you specify in the XML header tag.\n<li>The assembly path that you specify for your add-in DLL must be correct.\n<li>The full class name consists of the namespace prefix with a point separator and the class name appended to it.\n</li></li></li></li></li></ul>\n<h4>ProgramData Folder Issues</h4>\n<p>Some Windows 7 systems seem to have another folder \"Program Data\" with a space in it in addition to the ProgramData folder without a space.\nPlacing the manifest file in a subdirectory under the one with a space will not work!\nYou can either use the command line cmd.exe to change directories to the correct location, or configure the Windows Explorer not to hide system folders by selecting Organize &gt; Folder and search options &gt; View &gt; Hidden files and folders &gt; Show hidden files, folders, and drives.\n\n<p><strong>Addendum:</strong> A safer way to ensure you get to the right place is to use the DOS environment variables in the Windows explorer address bar, e.g. type %programdata% for C:\\ProgramData Or %Appdata% for C:\\Users\\&lt;user&gt;\\AppData\\Roaming.</p>\n<h4>Add-in Manifest File Encoding</h4>\n<p>Several of the developer guide add-in manifest examples use UTF-8 encoding.\nTo reuse them as shown, you need to ensure that your editor really does save them in that format.\nAlternatively, you can use ANSI encoding, if you have no need for non-ASCII characters, or any other encoding acceptable for XML files.\nWhatever you do, please ensure that the encoding used matches the one you specify in the XML encoding attribute.\nSeveral people ran into this issue right in the beginning, when add-in manifest files were first introduced, and I discussed it in detail in the post on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html#3\">\nmanifest files and Guidize</a>.\n\n<h4>Assembly Path</h4>\n<p>Please do not try to type in your assembly path manually.\nUse copy and paste instead!\nThe assembly path is listed in the Visual Studio output window when compilation completes, so you can copy it from there.\n\n<h4>Full Class Name</h4>\n<p>In one example, I saw someone entering a file path here...\nGo to the source code of your external command class implementation, determine what the namespace and class name is, and concatenate the two using a '.' separator to define the full class name.\nHere again, please use copy and paste, do not try to type things in manually.\n\n<h4>DevTV Add-in Template</h4>\n<p>Actually, the simplest way to avoid all these problems is to use the Visual Studio\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#template_update\">\nDevTV add-in template</a>,\n\nwhich creates a valid add-in manifest file for you and automatically adds a post-build event to the generated Visual Studio solution which copies it to the right destination folder and also ensures that it remains up to date.\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "Updated Revit API Track at Autodesk University 2010",
    "local_header_href": "#updated-revit-api-track-at-autodesk-university-2010",
    "chunk_text": "<h3>Updated Revit API Track at Autodesk University 2010</h3><p>I updated the list of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/the-revit-api-track-at-au-2010.html\">\nRevit API related classes at Autodesk University 2010</a>,\n\nadding new classes and uploading more materials for direct download.\nYou really must check out this material, there are several real gems in there!\nYesterday I looked through Iffat Mai's Diary of a Wimpy BIM Manager CP430-1, and I love it!\nLooking through all this material is absolutely worthwhile and should keep you occupied for a while...\n\n<a name=\"woe\"></a>\n<h3>Add-in Manifest Woes</h3>\n<p>In the last couple of days I have talked with several people who had problems installing Revit add-ins, mainly because they ran into issues with the add-in manifest file.\nOne Russian developer says he has been struggling with these problems for months now.\n\n<p>Please do read and follow the instructions in the developer guide 'Revit 2011 API Developer Guide.pdf' carefully and precisely!\nSection 2.2.5 'Create a .addin manifest file' describes the simple case for the Hello World walkthrough, and 3.4 'Add-in Registration' provides the full detailed description.\nWe already discussed these issues when looking at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html#1\">\nmanifest file in general</a> and specifically for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html#3\">\npipe to conduit converter</a>.\n\nAn overview of other manifest related topics is given in the discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/network-access-to-add-in-manifest-and-icons.html\">\nnetwork access and ribbon icons</a>.\n\n<p>Some of the problems people seem to be running into and that are not highlighted in the documentation:\n\n<ul>\n<li>The ProgramData folder is hidden by default on Windows 7.\n<li>The ProgramData folder is <strong>not</strong> \"Program Data\"; there is <strong>no space</strong> in the folder name.\n<li>The encoding of the XML format add-in manifest file must correspond to what you specify in the XML header tag.\n<li>The assembly path that you specify for your add-in DLL must be correct.\n<li>The full class name consists of the namespace prefix with a point separator and the class name appended to it.\n</li></li></li></li></li></ul>\n<h4>ProgramData Folder Issues</h4>\n<p>Some Windows 7 systems seem to have another folder \"Program Data\" with a space in it in addition to the ProgramData folder without a space.\nPlacing the manifest file in a subdirectory under the one with a space will not work!\nYou can either use the command line cmd.exe to change directories to the correct location, or configure the Windows Explorer not to hide system folders by selecting Organize &gt; Folder and search options &gt; View &gt; Hidden files and folders &gt; Show hidden files, folders, and drives.\n\n<p><strong>Addendum:</strong> A safer way to ensure you get to the right place is to use the DOS environment variables in the Windows explorer address bar, e.g. type %programdata% for C:\\ProgramData Or %Appdata% for C:\\Users\\&lt;user&gt;\\AppData\\Roaming.</p>\n<h4>Add-in Manifest File Encoding</h4>\n<p>Several of the developer guide add-in manifest examples use UTF-8 encoding.\nTo reuse them as shown, you need to ensure that your editor really does save them in that format.\nAlternatively, you can use ANSI encoding, if you have no need for non-ASCII characters, or any other encoding acceptable for XML files.\nWhatever you do, please ensure that the encoding used matches the one you specify in the XML encoding attribute.\nSeveral people ran into this issue right in the beginning, when add-in manifest files were first introduced, and I discussed it in detail in the post on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html#3\">\nmanifest files and Guidize</a>.\n\n<h4>Assembly Path</h4>\n<p>Please do not try to type in your assembly path manually.\nUse copy and paste instead!\nThe assembly path is listed in the Visual Studio output window when compilation completes, so you can copy it from there.\n\n<h4>Full Class Name</h4>\n<p>In one example, I saw someone entering a file path here...\nGo to the source code of your external command class implementation, determine what the namespace and class name is, and concatenate the two using a '.' separator to define the full class name.\nHere again, please use copy and paste, do not try to type things in manually.\n\n<h4>DevTV Add-in Template</h4>\n<p>Actually, the simplest way to avoid all these problems is to use the Visual Studio\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#template_update\">\nDevTV add-in template</a>,\n\nwhich creates a valid add-in manifest file for you and automatically adds a post-build event to the generated Visual Studio solution which copies it to the right destination folder and also ensures that it remains up to date.\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "Add-in Manifest Woes",
    "local_header_href": "#add-in-manifest-woes",
    "chunk_text": "<h3>Add-in Manifest Woes</h3><p>In the last couple of days I have talked with several people who had problems installing Revit add-ins, mainly because they ran into issues with the add-in manifest file.\nOne Russian developer says he has been struggling with these problems for months now.\n\n<p>Please do read and follow the instructions in the developer guide 'Revit 2011 API Developer Guide.pdf' carefully and precisely!\nSection 2.2.5 'Create a .addin manifest file' describes the simple case for the Hello World walkthrough, and 3.4 'Add-in Registration' provides the full detailed description.\nWe already discussed these issues when looking at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html#1\">\nmanifest file in general</a> and specifically for the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html#3\">\npipe to conduit converter</a>.\n\nAn overview of other manifest related topics is given in the discussion of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/network-access-to-add-in-manifest-and-icons.html\">\nnetwork access and ribbon icons</a>.\n\n<p>Some of the problems people seem to be running into and that are not highlighted in the documentation:\n\n<ul>\n<li>The ProgramData folder is hidden by default on Windows 7.\n<li>The ProgramData folder is <strong>not</strong> \"Program Data\"; there is <strong>no space</strong> in the folder name.\n<li>The encoding of the XML format add-in manifest file must correspond to what you specify in the XML header tag.\n<li>The assembly path that you specify for your add-in DLL must be correct.\n<li>The full class name consists of the namespace prefix with a point separator and the class name appended to it.\n</li></li></li></li></li></ul>\n<h4>ProgramData Folder Issues</h4>\n<p>Some Windows 7 systems seem to have another folder \"Program Data\" with a space in it in addition to the ProgramData folder without a space.\nPlacing the manifest file in a subdirectory under the one with a space will not work!\nYou can either use the command line cmd.exe to change directories to the correct location, or configure the Windows Explorer not to hide system folders by selecting Organize &gt; Folder and search options &gt; View &gt; Hidden files and folders &gt; Show hidden files, folders, and drives.\n\n<p><strong>Addendum:</strong> A safer way to ensure you get to the right place is to use the DOS environment variables in the Windows explorer address bar, e.g. type %programdata% for C:\\ProgramData Or %Appdata% for C:\\Users\\&lt;user&gt;\\AppData\\Roaming.</p>\n<h4>Add-in Manifest File Encoding</h4>\n<p>Several of the developer guide add-in manifest examples use UTF-8 encoding.\nTo reuse them as shown, you need to ensure that your editor really does save them in that format.\nAlternatively, you can use ANSI encoding, if you have no need for non-ASCII characters, or any other encoding acceptable for XML files.\nWhatever you do, please ensure that the encoding used matches the one you specify in the XML encoding attribute.\nSeveral people ran into this issue right in the beginning, when add-in manifest files were first introduced, and I discussed it in detail in the post on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html#3\">\nmanifest files and Guidize</a>.\n\n<h4>Assembly Path</h4>\n<p>Please do not try to type in your assembly path manually.\nUse copy and paste instead!\nThe assembly path is listed in the Visual Studio output window when compilation completes, so you can copy it from there.\n\n<h4>Full Class Name</h4>\n<p>In one example, I saw someone entering a file path here...\nGo to the source code of your external command class implementation, determine what the namespace and class name is, and concatenate the two using a '.' separator to define the full class name.\nHere again, please use copy and paste, do not try to type things in manually.\n\n<h4>DevTV Add-in Template</h4>\n<p>Actually, the simplest way to avoid all these problems is to use the Visual Studio\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#template_update\">\nDevTV add-in template</a>,\n\nwhich creates a valid add-in manifest file for you and automatically adds a post-build event to the generated Visual Studio solution which copies it to the right destination folder and also ensures that it remains up to date.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "ProgramData Folder Issues",
    "local_header_href": "#programdata-folder-issues",
    "chunk_text": "<h4>ProgramData Folder Issues</h4><p>Some Windows 7 systems seem to have another folder \"Program Data\" with a space in it in addition to the ProgramData folder without a space.\nPlacing the manifest file in a subdirectory under the one with a space will not work!\nYou can either use the command line cmd.exe to change directories to the correct location, or configure the Windows Explorer not to hide system folders by selecting Organize &gt; Folder and search options &gt; View &gt; Hidden files and folders &gt; Show hidden files, folders, and drives.\n\n<p><strong>Addendum:</strong> A safer way to ensure you get to the right place is to use the DOS environment variables in the Windows explorer address bar, e.g. type %programdata% for C:\\ProgramData Or %Appdata% for C:\\Users\\&lt;user&gt;\\AppData\\Roaming.</p>\n<h4>Add-in Manifest File Encoding</h4>\n<p>Several of the developer guide add-in manifest examples use UTF-8 encoding.\nTo reuse them as shown, you need to ensure that your editor really does save them in that format.\nAlternatively, you can use ANSI encoding, if you have no need for non-ASCII characters, or any other encoding acceptable for XML files.\nWhatever you do, please ensure that the encoding used matches the one you specify in the XML encoding attribute.\nSeveral people ran into this issue right in the beginning, when add-in manifest files were first introduced, and I discussed it in detail in the post on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html#3\">\nmanifest files and Guidize</a>.\n\n<h4>Assembly Path</h4>\n<p>Please do not try to type in your assembly path manually.\nUse copy and paste instead!\nThe assembly path is listed in the Visual Studio output window when compilation completes, so you can copy it from there.\n\n<h4>Full Class Name</h4>\n<p>In one example, I saw someone entering a file path here...\nGo to the source code of your external command class implementation, determine what the namespace and class name is, and concatenate the two using a '.' separator to define the full class name.\nHere again, please use copy and paste, do not try to type things in manually.\n\n<h4>DevTV Add-in Template</h4>\n<p>Actually, the simplest way to avoid all these problems is to use the Visual Studio\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#template_update\">\nDevTV add-in template</a>,\n\nwhich creates a valid add-in manifest file for you and automatically adds a post-build event to the generated Visual Studio solution which copies it to the right destination folder and also ensures that it remains up to date.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "Add-in Manifest File Encoding",
    "local_header_href": "#add-in-manifest-file-encoding",
    "chunk_text": "<h4>Add-in Manifest File Encoding</h4><p>Several of the developer guide add-in manifest examples use UTF-8 encoding.\nTo reuse them as shown, you need to ensure that your editor really does save them in that format.\nAlternatively, you can use ANSI encoding, if you have no need for non-ASCII characters, or any other encoding acceptable for XML files.\nWhatever you do, please ensure that the encoding used matches the one you specify in the XML encoding attribute.\nSeveral people ran into this issue right in the beginning, when add-in manifest files were first introduced, and I discussed it in detail in the post on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/addin-manifest-and-guidize.html#3\">\nmanifest files and Guidize</a>.\n\n<h4>Assembly Path</h4>\n<p>Please do not try to type in your assembly path manually.\nUse copy and paste instead!\nThe assembly path is listed in the Visual Studio output window when compilation completes, so you can copy it from there.\n\n<h4>Full Class Name</h4>\n<p>In one example, I saw someone entering a file path here...\nGo to the source code of your external command class implementation, determine what the namespace and class name is, and concatenate the two using a '.' separator to define the full class name.\nHere again, please use copy and paste, do not try to type things in manually.\n\n<h4>DevTV Add-in Template</h4>\n<p>Actually, the simplest way to avoid all these problems is to use the Visual Studio\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#template_update\">\nDevTV add-in template</a>,\n\nwhich creates a valid add-in manifest file for you and automatically adds a post-build event to the generated Visual Studio solution which copies it to the right destination folder and also ensures that it remains up to date.\n</p></p></p></p>"
  },
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "Assembly Path",
    "local_header_href": "#assembly-path",
    "chunk_text": "<h4>Assembly Path</h4><p>Please do not try to type in your assembly path manually.\nUse copy and paste instead!\nThe assembly path is listed in the Visual Studio output window when compilation completes, so you can copy it from there.\n\n<h4>Full Class Name</h4>\n<p>In one example, I saw someone entering a file path here...\nGo to the source code of your external command class implementation, determine what the namespace and class name is, and concatenate the two using a '.' separator to define the full class name.\nHere again, please use copy and paste, do not try to type things in manually.\n\n<h4>DevTV Add-in Template</h4>\n<p>Actually, the simplest way to avoid all these problems is to use the Visual Studio\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#template_update\">\nDevTV add-in template</a>,\n\nwhich creates a valid add-in manifest file for you and automatically adds a post-build event to the generated Visual Studio solution which copies it to the right destination folder and also ensures that it remains up to date.\n</p></p></p>"
  },
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "Full Class Name",
    "local_header_href": "#full-class-name",
    "chunk_text": "<h4>Full Class Name</h4><p>In one example, I saw someone entering a file path here...\nGo to the source code of your external command class implementation, determine what the namespace and class name is, and concatenate the two using a '.' separator to define the full class name.\nHere again, please use copy and paste, do not try to type things in manually.\n\n<h4>DevTV Add-in Template</h4>\n<p>Actually, the simplest way to avoid all these problems is to use the Visual Studio\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#template_update\">\nDevTV add-in template</a>,\n\nwhich creates a valid add-in manifest file for you and automatically adds a post-build event to the generated Visual Studio solution which copies it to the right destination folder and also ensures that it remains up to date.\n</p></p>"
  },
  {
    "original_filename": "0498_snow_and_woe",
    "header_text": "DevTV Add-in Template",
    "local_header_href": "#devtv-add-in-template",
    "chunk_text": "<h4>DevTV Add-in Template</h4><p>Actually, the simplest way to avoid all these problems is to use the Visual Studio\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/revit-2011-devtv.html#template_update\">\nDevTV add-in template</a>,\n\nwhich creates a valid add-in manifest file for you and automatically adds a post-build event to the generated Visual Studio solution which copies it to the right destination folder and also ensures that it remains up to date.\n</p>"
  }
]