[
  {
    "original_filename": "0658_exception_copied_geom",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0658_exception_copied_geom",
    "header_text": "Exception on Copied Geometry",
    "local_header_href": "#exception-on-copied-geometry",
    "chunk_text": "<h3>Exception on Copied Geometry</h3><p>I have heard about some issues with different types of geometry access throwing an exception.\nAs far as we know, there is a simple solution for most of them.\nHere is an example:\n\n<a name=\"1272126\"></a>\n<p><strong>Question:</strong> I have a piece of code iterating over Revit elements and extracting their geometry.\nWhen run in release mode, it is causing an exception to be thrown.\n\n<p>I tested this in the sample model rac_basic_sample_project.rvt, but it also throws a similar exception in all other files I tried.\n\n<p>Here is the code that is causing the problem:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">protected</span> <span class=\"blue\">bool</span> ParseElements( \n    <span class=\"teal\">FilteredElementCollector</span> elements )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elements )\n    {\n      <span class=\"teal\">GeometryElement</span> geoElement \n        = e.get_Geometry( <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n      <span class=\"blue\">if</span>( geoElement == <span class=\"blue\">null</span> )\n      {\n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geoElement.Objects )\n      {\n        <span class=\"blue\">if</span>( obj <span class=\"blue\">is</span> <span class=\"teal\">GeometryInstance</span> )\n        {\n          <span class=\"teal\">GeometryInstance</span> inst = obj \n            <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n \n          <span class=\"teal\">GeometryElement</span> g2 = inst.SymbolGeometry;\n \n          <span class=\"blue\">if</span>( g2 != <span class=\"blue\">null</span> )\n          {\n            <span class=\"teal\">Transform</span> transformation = inst.Transform;\n \n            g2 = g2.GetTransformed( transformation );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj2 <span class=\"blue\">in</span> g2.Objects )\n            {\n              <span class=\"blue\">if</span>( obj2 <span class=\"blue\">is</span> <span class=\"teal\">Solid</span> )\n              {\n                <span class=\"teal\">Solid</span> solid = obj2 <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n                <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n                {\n                  <span class=\"blue\">if</span>( face == <span class=\"blue\">null</span> ) <span class=\"blue\">continue</span>;\n \n                  <span class=\"teal\">Material</span> material = e.Document\n                    .Settings.Materials.get_Item( \n                      face.MaterialElementId );\n                }\n              }\n            }\n          }\n          <span class=\"blue\">continue</span>;\n        }\n \n        <span class=\"green\">// obj is not GeometryInstance, check for solid</span>\n \n        <span class=\"teal\">Solid</span> solid2 = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( solid2 == <span class=\"blue\">null</span> ) <span class=\"blue\">continue</span>;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid2.Faces )\n        {\n          <span class=\"blue\">if</span>( face == <span class=\"blue\">null</span> ) <span class=\"blue\">continue</span>;\n \n          <span class=\"green\">// This line which looks as if it should be read-only throws</span>\n          <span class=\"green\">// \"Attempt to modify the model outside of transaction.\":</span>\n \n          <span class=\"teal\">Material</span> material \n            = e.Document.Settings.Materials.get_Item( \n              face.MaterialElementId );\n        }\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIDocument</span> uidoc = commandData.Application.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">View3D</span> activeView = doc.ActiveView <span class=\"blue\">as</span> <span class=\"teal\">View3D</span>;\n \n    <span class=\"blue\">if</span>( activeView == <span class=\"blue\">null</span> )\n    {\n      message = <span class=\"maroon\">\"Please run this in a 3D view\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">FilteredElementCollector</span> collector \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( \n        doc, activeView.Id );\n \n    <span class=\"blue\">string</span> s = <span class=\"maroon\">\"ParseElements Exception\"</span>;\n \n<span class=\"blue\">#if</span> DEBUG\n<span class=\"gray\">    string debug_or_release = \"Debug\";</span>\n<span class=\"blue\">#else</span>\n    <span class=\"blue\">string</span> debug_or_release = <span class=\"maroon\">\"Release\"</span>;\n<span class=\"blue\">#endif</span>\n \n    <span class=\"green\">// Transaction is required by Materials.get_Item!?</span>\n \n    <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n    t.Start( s );\n \n    <span class=\"teal\">TaskDialog</span>.Show( s, <span class=\"maroon\">\"Start ParseElements \"</span> \n      + debug_or_release );\n \n    ParseElements( collector );\n \n    <span class=\"teal\">TaskDialog</span>.Show( s, <span class=\"maroon\">\"End ParseElements \"</span> \n      + debug_or_release );\n \n    t.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>This code throws an exception saying \"System.Runtime.InteropServices.SEHException (0x80004005): External component has thrown an exception\".\n\n<p>If I comment out the statement 'g2 = g2.GetTransformed(transformation)', the exception is not thrown.\n\n<p>The exception is not also thrown in debug mode, only in release.\n\n<p><strong>Answer:</strong> I tested your code in Revit Architecture 2012, Build 20110622_0930, Update Release 1 and was unable to reproduce the issue, either in debug or release mode, either inside or outside the debugger.\n\n<p>After discussing the issue further with the development team, I received two pieces of good news for you:\n\n<p>Firstly, this issue can indeed happen with copied geometry. \nBy reassigning g2 to g2.Transformed(), you have released the handle for the original g2. \nThis may affect other handles you had previous obtained from g2, because all of the handles are tied together in native code.\n\n<p>The workaround is to make sure to keep the original g2 or some other GeometryElement handle in scope.\nOne way to achieve this is to assign it with a C# 'using' statement and not overwrite it.\n\n<p>Secondly, some issues related to the geometry handles have been fixed in Revit 2012 update release 1. \nInternally, the Revit geometry handles have been revamped.\nThat explains why I was unable to reproduce the problem on my build.\n\n<p>That is a clear and succinct explanation, I think, which should enable you to avoid the problem completely.\nIt also assures you that you may revert to being a bit more carefree in future versions of Revit, and do not have to take such care retaining the handles you receive.\n\n<p>By the way, similar issues did come up from time to time in the past as well, and the resolution was always the same:\n\n\n<a name=\"1264280\"></a>\n<h4>Exception Using Tessellate</h4>\n<p><strong>Question:</strong> Calling the Tessellate method on edges sometimes causes the following error:\n\n<pre>\nException: System.Runtime.InteropServices.SEHException\nMessage: External component has thrown an exception.\n...\n</pre>\n<p>The error happens when retrieving a list of points from beam and joist elements.\n<p>It does not happen all the time.\nI can run the add-in ten times on a specific project, and the exception may pop up just once or twice.\n\n<p><strong>Answer:</strong> This is due to a similar issue with the lifetime of the GeometryInstance object as described above.\n\nThe scope workaround fixes it.\n\n\n\n\n<a name=\"1261003\"></a>\n<h4>Exception Iterating through SolidArray</h4>\n<p><strong>Question:</strong> I am creating an exporter which takes solid geometry from Revit and exports it to another application. \nFor each element selected, the tool finds its solid geometry and then parses the solid geometry's faces. \nFirst I create an empty SolidArray and pass it by reference into a helper method taken from one of the Revit API samples. \nOnce the SolidArray is filled, I attempt to iterate over those solids, then over each solid's faces. \nI get a SEHException at random iterations on the SolidArray. \nIs there another way to recursively extract solid geometries from Family Instances without this error?\n\n<p><strong>Answer:</strong> Looking at this in depth, we found that the crash is caused by the memory garbage collection.\nThe solid handle you retrieved was garbage collected before you actually made use of it. \nThis is a problem for solids which you copy from the original ones obtained from Revit. \nThe workaround is to ensure that the solids stay in scope by putting them in a suitable stable container.\n\n\n\n<a name=\"1267023\"></a>\n<h4>Exception Iterating Over Elements</h4>\n<p><strong>Question:</strong> I am developing an add-in for Revit that exports a file to another application. \nIn essence, it processes all geometry objects and places them into data structures that the other application can use. \n\n<p>The initial versions worked perfectly, but upon trying to make the add-in more efficient by adding a background worker thread to perform the bulk of the work and more user friendly by adding a progress bar I began encountering exceptions being generated from within Revit API methods. \nI am assuming these exceptions were caused by the addition of the background worker thread and the progress bar.\nThe exceptions are only thrown when processing more complex geometry like families.\nSimple elements like floors, walls, roofs, topological surfaces and site components all work fine. \n\n<p>In addition, if Revit is launched from the Visual Studio debugger, the add-in works fine.\nIf Revit is launched directly and loads the debug version of the add-in assembly, it also works.\nThe exceptions are thrown only when using the release version of the DLL and outside the debugger.\n\n<p><strong>Answer:</strong> Probably the solid handles you retrieve are being garbage collected before you use them in your subroutine accessing the solid object.\nAs stated above, you simply need to ensure that the solid handles stay in scope.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0658_exception_copied_geom",
    "header_text": "Exception Using Tessellate",
    "local_header_href": "#exception-using-tessellate",
    "chunk_text": "<h4>Exception Using Tessellate</h4><p><strong>Question:</strong> Calling the Tessellate method on edges sometimes causes the following error:\n\n<pre>\nException: System.Runtime.InteropServices.SEHException\nMessage: External component has thrown an exception.\n...\n</pre>\n<p>The error happens when retrieving a list of points from beam and joist elements.\n<p>It does not happen all the time.\nI can run the add-in ten times on a specific project, and the exception may pop up just once or twice.\n\n<p><strong>Answer:</strong> This is due to a similar issue with the lifetime of the GeometryInstance object as described above.\n\nThe scope workaround fixes it.\n\n\n\n\n<a name=\"1261003\"></a>\n<h4>Exception Iterating through SolidArray</h4>\n<p><strong>Question:</strong> I am creating an exporter which takes solid geometry from Revit and exports it to another application. \nFor each element selected, the tool finds its solid geometry and then parses the solid geometry's faces. \nFirst I create an empty SolidArray and pass it by reference into a helper method taken from one of the Revit API samples. \nOnce the SolidArray is filled, I attempt to iterate over those solids, then over each solid's faces. \nI get a SEHException at random iterations on the SolidArray. \nIs there another way to recursively extract solid geometries from Family Instances without this error?\n\n<p><strong>Answer:</strong> Looking at this in depth, we found that the crash is caused by the memory garbage collection.\nThe solid handle you retrieved was garbage collected before you actually made use of it. \nThis is a problem for solids which you copy from the original ones obtained from Revit. \nThe workaround is to ensure that the solids stay in scope by putting them in a suitable stable container.\n\n\n\n<a name=\"1267023\"></a>\n<h4>Exception Iterating Over Elements</h4>\n<p><strong>Question:</strong> I am developing an add-in for Revit that exports a file to another application. \nIn essence, it processes all geometry objects and places them into data structures that the other application can use. \n\n<p>The initial versions worked perfectly, but upon trying to make the add-in more efficient by adding a background worker thread to perform the bulk of the work and more user friendly by adding a progress bar I began encountering exceptions being generated from within Revit API methods. \nI am assuming these exceptions were caused by the addition of the background worker thread and the progress bar.\nThe exceptions are only thrown when processing more complex geometry like families.\nSimple elements like floors, walls, roofs, topological surfaces and site components all work fine. \n\n<p>In addition, if Revit is launched from the Visual Studio debugger, the add-in works fine.\nIf Revit is launched directly and loads the debug version of the add-in assembly, it also works.\nThe exceptions are thrown only when using the release version of the DLL and outside the debugger.\n\n<p><strong>Answer:</strong> Probably the solid handles you retrieve are being garbage collected before you use them in your subroutine accessing the solid object.\nAs stated above, you simply need to ensure that the solid handles stay in scope.\n\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0658_exception_copied_geom",
    "header_text": "Exception Iterating through SolidArray",
    "local_header_href": "#exception-iterating-through-solidarray",
    "chunk_text": "<h4>Exception Iterating through SolidArray</h4><p><strong>Question:</strong> I am creating an exporter which takes solid geometry from Revit and exports it to another application. \nFor each element selected, the tool finds its solid geometry and then parses the solid geometry's faces. \nFirst I create an empty SolidArray and pass it by reference into a helper method taken from one of the Revit API samples. \nOnce the SolidArray is filled, I attempt to iterate over those solids, then over each solid's faces. \nI get a SEHException at random iterations on the SolidArray. \nIs there another way to recursively extract solid geometries from Family Instances without this error?\n\n<p><strong>Answer:</strong> Looking at this in depth, we found that the crash is caused by the memory garbage collection.\nThe solid handle you retrieved was garbage collected before you actually made use of it. \nThis is a problem for solids which you copy from the original ones obtained from Revit. \nThe workaround is to ensure that the solids stay in scope by putting them in a suitable stable container.\n\n\n\n<a name=\"1267023\"></a>\n<h4>Exception Iterating Over Elements</h4>\n<p><strong>Question:</strong> I am developing an add-in for Revit that exports a file to another application. \nIn essence, it processes all geometry objects and places them into data structures that the other application can use. \n\n<p>The initial versions worked perfectly, but upon trying to make the add-in more efficient by adding a background worker thread to perform the bulk of the work and more user friendly by adding a progress bar I began encountering exceptions being generated from within Revit API methods. \nI am assuming these exceptions were caused by the addition of the background worker thread and the progress bar.\nThe exceptions are only thrown when processing more complex geometry like families.\nSimple elements like floors, walls, roofs, topological surfaces and site components all work fine. \n\n<p>In addition, if Revit is launched from the Visual Studio debugger, the add-in works fine.\nIf Revit is launched directly and loads the debug version of the add-in assembly, it also works.\nThe exceptions are thrown only when using the release version of the DLL and outside the debugger.\n\n<p><strong>Answer:</strong> Probably the solid handles you retrieve are being garbage collected before you use them in your subroutine accessing the solid object.\nAs stated above, you simply need to ensure that the solid handles stay in scope.\n\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0658_exception_copied_geom",
    "header_text": "Exception Iterating Over Elements",
    "local_header_href": "#exception-iterating-over-elements",
    "chunk_text": "<h4>Exception Iterating Over Elements</h4><p><strong>Question:</strong> I am developing an add-in for Revit that exports a file to another application. \nIn essence, it processes all geometry objects and places them into data structures that the other application can use. \n\n<p>The initial versions worked perfectly, but upon trying to make the add-in more efficient by adding a background worker thread to perform the bulk of the work and more user friendly by adding a progress bar I began encountering exceptions being generated from within Revit API methods. \nI am assuming these exceptions were caused by the addition of the background worker thread and the progress bar.\nThe exceptions are only thrown when processing more complex geometry like families.\nSimple elements like floors, walls, roofs, topological surfaces and site components all work fine. \n\n<p>In addition, if Revit is launched from the Visual Studio debugger, the add-in works fine.\nIf Revit is launched directly and loads the debug version of the add-in assembly, it also works.\nThe exceptions are thrown only when using the release version of the DLL and outside the debugger.\n\n<p><strong>Answer:</strong> Probably the solid handles you retrieve are being garbage collected before you use them in your subroutine accessing the solid object.\nAs stated above, you simply need to ensure that the solid handles stay in scope.\n\n</p></p></p></p>"
  }
]