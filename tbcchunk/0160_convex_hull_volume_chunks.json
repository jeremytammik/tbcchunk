[
  {
    "original_filename": "0160_convex_hull_volume",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0160_convex_hull_volume",
    "header_text": "Convex Hull and Volume Computation",
    "local_header_href": "#convex-hull-and-volume-computation",
    "chunk_text": "<h3>Convex Hull and Volume Computation</h3><p>Max raised an interesting question in a comment on the discussion on the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/2d-polygon-areas-and-outer-loop.html\">\ncalculation of 2D polygon areas</a>:</p><p><strong>Question:</strong>\nIf I have an array of 3d points, how can I do to get volume information?</p><p><strong>Answer:</strong>\nThe answer is maybe not quite as easy as you expected.\nTo calculate that volume, you have to solve two tasks:</p><ul>\n<li>Determine the\n\n<a href=\"http://en.wikipedia.org/wiki/Convex_hull\">\nconvex hull</a>\n\nof the given point cloud.</li>\n<li>Calculate the volume of the resulting 3D\n\n<a href=\"http://en.wikipedia.org/wiki/Polyhedron\">\npolyhedron</a>.</li>\n</ul><p>Both of these steps are non-trivial.\nA number of different\n\n<a href=\"http://en.wikipedia.org/wiki/Convex_hull_algorithms\">\nconvex hull algorithms</a>\n\nexist both for the two-dimensional and for higher dimensional cases.\n\nSeveral open source libraries for solid modelling or computational geometry implement these.\nOne of the best known and most reliable tools which is specifically targeted at these two issues is\n\n<a href=\"http://www.qhull.org\">\nQhull</a>.\n\nHere is the blurb from its home page:</p><p style=\"color:darkblue\">Qhull computes the convex hull, Delaunay triangulation, Voronoi diagram, halfspace intersection about a point, furthest-site Delaunay triangulation, and furthest-site Voronoi diagram.\nThe source code runs in 2-d, 3-d, 4-d, and higher dimensions.\nQhull implements the Quickhull algorithm for computing the convex hull.\nIt handles roundoff errors from floating point arithmetic.\nIt computes volumes, surface areas, and approximations to the convex hull.</p><p>I downloaded the current version of Qhull to explore exactly what you might be able to use for your purposes.\nThe Qhull distribution includes a list of sample programs.\nOne of these is qconvex, and one of its output options is FA to compute total area and volume of the input points, which is pretty exactly what you want.</p><p>Now how can you make use of this inside the Revit API?</p><p>Qhull is implemented in standard C, the Revit API is a .NET environment.\nThe easiest way to make use of C source code from .NET is to compile a DLL and call it from .NET.\nIn this case you would need to analyse the source code for the qconvex program, which is contained in the file qconvex.c, and package the required functionality in a DLL that you make accessible from .NET.</p><p>The relevant lines of code from qconvex.c are:</p><pre class=\"code\">\n  qh_checkflags (qh qhull_command, hidden_options);\n  qh_initflags (qh qhull_command);\n  points= qh_readpoints (&amp;numpoints, &amp;dim, &amp;ismalloc);\n  qh_init_B (points, numpoints, dim, ismalloc);\n  qh_qhull();\n  qh_check_output();\n  qh_produce_output();\n</pre><p>This program reads its input from a file or the console standard input stream, performs its calculations, and produces its output into a file or the standard output stream.\nYou would need to adapt this to pass the information from and to the .NET calling application.</p><p>Another alternative, possible much simpler, but obviously less efficient, would be to set up the .NET application to write and read files in the expected Qhull input and output formats and then execute the unchanged qconvex executable provided by the Qhull package.</p><p><strong>Reply</strong> from Max:\nVery good this library, but we need a wrapper for .NET, and how can I encapsulate this library in a C# project?</p><p>What do you think about this alternative solution for\n\n<a href=\"http://www.codeproject.com/KB/scripting/PolyhedraVolumeCalc.aspx?display=Print\">\npolyhedra volume calculation</a>?\n\n<p><strong>Answer:</strong>\nThe polyhedra volume calculation article looks interesting, it seems like a simple approach for solving the second part of the problem, the volume calculation.\nIt still needs to be ported from Java to .NET, though.\nIt also does nothing to help you with the first part of the problem, the determination of the convex hull.</p>\n<p>Revit will not automatically provide a convex hull for a room or any element's faces and edges.\nImagine an L-shaped room: its convex hull does not include some of the vertices of the walls in the inner corner.\nImagine any shape at all that is not already convex. You need to eliminate all 'inner' vertices to obtain the convex hull.</p>\n<p>Regarding access to Qhull from .NET, I explained two methods for making use of the library from a .NET client above:</p>\n<ul>\n<li>Create a DLL from the C code, and implement a C function that can be called from .NET, read the input from .NET, and return the output to .NET.\n<li>Create a .NET application that writes and reads files in the expected Qhull input and output formats, and then execute the unchanged qconvex executable provided by the Qhull package as an external process using the files to communicate.\nMaybe you can use pipes instead of physical files on the disk.\n</li></li></ul>\n</p>"
  }
]