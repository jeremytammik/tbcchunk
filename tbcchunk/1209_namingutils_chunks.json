[
  {
    "original_filename": "1209_namingutils",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1209_namingutils",
    "header_text": "Unique Names and the NamingUtils Class",
    "local_header_href": "#unique-names-and-the-namingutils-class",
    "chunk_text": "<h3>Unique Names and the NamingUtils Class</h3><p>The Revit API is still full of surprises.</p><p>Here is another one that leads us to look at a utility class that you may not have noticed:</p><p><strong>Question:</strong> I am encountering a strange problem with the name checking functionality when creating ParameterFilterElements.</p><p>The following code snippet creates two ParameterFilterElements with all identical settings except for a slight naming difference:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ParameterFilterElementError(\n    <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ceilingCategory\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    ceilingCategory.Add(\n      doc.Settings.Categories.get_Item(\n        <span class=\"teal\">BuiltInCategory</span>.OST_Ceilings ).Id );\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tr = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tr.Start( <span class=\"maroon\">\"Test\"</span> );\n \n      <span class=\"teal\">ParameterFilterElement</span>.Create( doc,\n        <span class=\"maroon\">\"HygienKlass 2\"</span>, ceilingCategory );\n \n      <span class=\"teal\">ParameterFilterElement</span>.Create( doc,\n        <span class=\"maroon\">\"Hygienklass 2\"</span>, ceilingCategory );\n \n      tr.Commit();\n    }\n  }\n</pre><p>One is called \"Hygienklass 2\" and the other \"HygienKlass 2\". This throws an exception saying that the names are equal.</p><p>This happens both in Revit 2014 and Revit 2015.</p><p>Is there any fix for this?</p><p><strong>Answer:</strong> The API is consistent with the Revit UI in this case.</p><p>The user interface displays the following message when you use two names that differ only by case:</p><center>\n<img alt=\"\" src=\"img/duplicate_filter_name.png\" width=\"541\"/>\n</center><p>This restriction around Revit unique naming is currently not highlighted anywhere in the Revit API help file, even though it applies to more than just filters.</p><p>We may enhance the error message to clarify this in future.</p><p>The Revit rules around what constitutes a unique name and how names are sorted in lists and trees can definitely cause surprises for some folk.</p><p>For this reason, the Revit API actually exposes the NamingUtils.CompareNames method, and also because some non-standard comparisons are used, especially around breaking up sections of numeric and non-numeric sequences.</p><p>Please take a look at the NamingUtils class, which provides a collection of utilities related to element naming.</p><p>Currently, it implements the following two static member methods:</p><ul>\n<li>CompareNames – compares two object name strings using Revit's comparison rules.</li>\n<li>IsValidName – identifies if the input string is valid for use as an object name in Revit.</li>\n</ul>"
  }
]