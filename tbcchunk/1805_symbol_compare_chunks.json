[
  {
    "original_filename": "1805_symbol_compare",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\ntwitter:\n\nComparing Symbols and Comparison Operators in the #RevitAPI #DynamoBim @AutodeskForge @AutodeskRevit #bim #ForgeDevCon http://bit.ly/comparesymbol\n\nFamily symbols, aka family types, should normally be relied on to be constant.\nHowever, since families and types can actually be edited at will, they are sometimes not.\nHence, the need to check and compare may arise...\n\n&ndash; \n...\n\nlinkedin:\n\nComparison operators and comparing symbols in the #RevitAPI\n\nhttp://bit.ly/comparesymbol\n\nFamily symbols, aka family types, should normally be relied on to be constant.\nHowever, since families and types can actually be edited at will, they are sometimes not.\nHence, the need to check and compare may arise...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<p style=\"font-size: 80%; font-style:italic\"></p>\n\n-->"
  },
  {
    "original_filename": "1805_symbol_compare",
    "header_text": "Comparing Symbols and Comparison Operators",
    "local_header_href": "#comparing-symbols-and-comparison-operators",
    "chunk_text": "### Comparing Symbols and Comparison Operators\n\nI am writing this in the train station, waiting for a train to Paris, to join the Forge accelerator there this week.\n\nUnfortunately, my originally booked train was cancelled due to the strikes currently taking place in France, and I am stranded here.\n\nLuckily, I was able to get a ticket for the single remaining train today, two hours later.\n\nNow I hope I will make it over there today.\n\nOnce I arrive, if I arrive, I will probably start worrying about whether I will be able to get back at all...\n\nAnyway, returning to the Revit API:"
  },
  {
    "original_filename": "1805_symbol_compare",
    "header_text": "Comparing Family Types",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Comparing Family Types\n\nFamily symbols, aka family types, should normally be relied on to be constant.\n\nHowever, since families and types can actually be edited at will, they are sometimes not.\n\nHence, the need to check and compare may arise.\n\n**Question:** I have two different models for two different projects.\n\nHow can I detect that a specific `FamilySymbol` is the same in both of them?\n\nCurrently, I just compare the three `Name` properties of the `FamilySymbol`, `Family` and `FamilyCategory`.\n\nIs there a better way?\n\nAs one would expect, the `FamilySymbol` has different values for `UniqueId` and `Id` in the two projects.\n\n**Answer:** In a perfect world, it would indeed be sufficient to compare the three properties you mention and nothing else.\n\nI would say category first, then family, then family symbol name.\n\nIf they match, the symbols should be identical.\n\nHowever, in each project, it is theoretically possible for the user to edit and modify the underlying symbol.\n\nIn that case, even if the names match, the underlying symbols may still differ.\n\nI assume this is what you would like to detect and rectify.\n\nTo test that, you need to drill further down into other, more specific properties: everything that is of interest to you."
  },
  {
    "original_filename": "1805_symbol_compare",
    "header_text": "Comparison Operators",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Comparison Operators\n\nIf you are doing this programmatically, the cleanest, easiest and most effective method is to implement a comparison operator or a .NET comparison class.\n\nIn the comparison operator, you can compare absolutely anything you like.\n\nOne important aspect of comparing objects is that you need to define a canonical form for them.\n\nFor instance, if you have two objects with properties, a canonical form should normally be independent of the order of the properties.\n\nFor instance, given two objects with the same properties in different order:\n\n<pre>\n  A = { “property_1” : “X”,  “property_2” : “Y” }\n  B = { “property_2” : “Y”,  “property_1” : “X” }\n</pre>\n\nThey should be considered equal.\n\nOne easy way to achieve an invariant form for a list of properties is to sort them consistently, for instance, alphabetically by property name.\n\nNext, you may want to consider the symbol geometry.\n\nIf you are only interested in solid geometry, you might compare simple incomplete aspects or the full-blown thing:\n\n- The number of disjunct solids\n- Their volumes\n- Their areas\n- Their numbers of faces and edges\n- Their vertices\n- Use a full-blown Boolean operation to determine exact equality\n\nLong ago, I\nsuggested [defining your own key for comparison purposes](https://thebuildingcoder.typepad.com/blog/2012/03/great-ocean-road-and-creating-your-own-key.html#2).\n\nFurthermore, when comparing objects, .NET differentiates between equality operators and sorting comparison operators.\n\nHere is a simple `XyzEqualityComparer` that shows a pretty trivial equality comparison class for 3D points and vectors:\n\n<pre class=\"code\">\nclass XyzEqualityComparer : IEqualityComparer<XYZ>\n{\n  public bool Equals( XYZ p, XYZ q )\n  {\n    return p.AlmostEqual( q );\n  }\n \n  public int GetHashCode( XYZ p )\n  {\n    return Util.PointString( p ).GetHashCode();\n  }\n}\n</pre>\n\nThat just answers the question ‘are they equal or not’.\n\nA more useful and powerful comparison method answers the question ‘is one of them smaller than, equal, or larger than the other’.\n\nSuch methods are needed for sorting objects, for instance, in order to use them as keys in a dictionary.\n\nI defined a comparison operator for `XYZ` points like this \nfor [tracking element modification](https://thebuildingcoder.typepad.com/blog/2016/01/tracking-element-modification.html#5.1):\n\n<pre class=\"code\">\n  public static bool IsZero(\n    double a,\n    double tolerance )\n  {\n    return tolerance > Math.Abs( a );\n  }\n \n  public static bool IsZero( double a )\n  {\n    return IsZero( a, _eps );\n  }\n \n  public static bool IsEqual( double a, double b )\n  {\n    return IsZero( b - a );\n  }\n \n  public static int Compare( double a, double b )\n  {\n    return IsEqual( a, b ) ? 0 : ( a < b ? -1 : 1 );\n  }\n \n  public static int Compare( XYZ p, XYZ q )\n  {\n    int d = Compare( p.X, q.X );\n \n    if( 0 == d )\n    {\n      d = Compare( p.Y, q.Y );\n \n      if( 0 == d )\n      {\n        d = Compare( p.Z, q.Z );\n      }\n    }\n    return d;\n  }\n</pre>\n\nAs you see, you start from the most basic property data types, e.g., int, double, string, and then build up further and further to achieve all you need.\n\nWe recently discussed a more complex `IComparer` implementation to compare column marks, `ColumnMarkComparer`, \nfor [replicating schedule sort order](https://thebuildingcoder.typepad.com/blog/2019/11/dll-conflicts-and-replicating-schedule-sort-order.html#4).\n\nThat shows how you can concatenate any number of different comparisons for all the different properties of interest to get a finer and finer distinguishing capability.\n\nYou need to decide exactly what differences may occur between the potentially different family instances.\n\nWith that in hand, you can implement a nice clean comparison operator for them and run that over all occurrences in all projects to ensure that all the symbols really are identical if their category name, family name and type name match.\n\n<center>\n<img src=\"img/cartographic_symbols.jpg\" alt=\"Cartographic symbols\" width=\"300\"> <!--598-->\n<p style=\"font-size: 80%; font-style:italic\">Cartographic symbols</p>\n</center>"
  }
]