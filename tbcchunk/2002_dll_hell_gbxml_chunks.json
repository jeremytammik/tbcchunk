[
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- [Ripcord Engineering](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/3926242) shares\n  a possible solution to DLL Hell in certain circumstances, using the Python `subprocess` module for disentanglement without need for any IPC:\n  CPython and PyRevit\n  https://forums.autodesk.com/t5/revit-api-forum/cpython-and-pyrevit/m-p/12011805\n  pyRevit - Dynamo Incompatibility: Two versions of Same DLL #1731\n  https://github.com/eirannejad/pyRevit/issues/1731\n  Python Module subprocess — Subprocess management\n  https://docs.python.org/3/library/subprocess.html\n\n- Export of multiple GBXML models\n  https://forums.autodesk.com/t5/revit-api-forum/export-of-multiple-gbxml-models/m-p/12011838#M71878\n\n- gbXml export using energy settings\n  https://forums.autodesk.com/t5/revit-api-forum/gbxml-export-using-energy-settings/m-p/12011894#M71881\n\ntwitter:\n\nAttaining DLL paradise in Python, Multiple gbXML export, gbXML energy settings, automate FBX export with SendKeys and RFA export to MongoDB with the @AutodeskRevit #RevitAPI #BIM @DynamoBIM @AutodeskAPS https://thebuildingcoder.typepad.com/blog/2023/07/export-gbxml-and-python-tips.html\n\nDiscussions on Python, handling DLLs, and various aspects of exporting to gbXML, FBX and MongoDB\n&ndash; DLL paradise in Python\n&ndash; Multiple gbXML export\n&ndash; GbXML energy settings\n&ndash; Automate FBX export with SendKeys\n&ndash; RFA export to MongoDB...\n\nlinkedin:\n\nDiscussions on Python, handling DLLs, and various aspects of exporting to gbXML, FBX and MongoDB with th #RevitAPI\n\nhttps://thebuildingcoder.typepad.com/blog/2023/07/export-gbxml-and-python-tips.html\n\n- DLL paradise in Python\n- Multiple gbXML export\n- GbXML energy settings\n- Automate FBX export with SendKeys\n- RFA export to MongoDB...\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "Export, gbXML and Python Tips",
    "local_header_href": "#export-gbxml-and-python-tips",
    "chunk_text": "### Export, gbXML and Python Tips\n\nLooking at several useful discussions on Python, handling DLLs, and various aspects of exporting to gbXML, FBX and MongoDB today:\n\n- [DLL paradise in Python](#2)\n- [Multiple gbXML export](#3)\n- [GbXML energy settings](#4)\n- [Automate FBX export with `SendKeys`](#5)\n- [RFA export to MongoDB](#6)"
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "DLL Paradise in Python",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> DLL Paradise in Python\n\nJake of [Ripcord Engineering](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/3926242) shared several\nuseful [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) solutions recently.\nMany thanks to Jake for his support!\n\nOne is a possible approach to\nhandle [DLL Hell](https://en.wikipedia.org/wiki/DLL_Hell) using\nthe Python `subprocess` module for disentanglement without need for any IPC, e.g.,\nfor [CPython and pyRevit](https://forums.autodesk.com/t5/revit-api-forum/cpython-and-pyrevit/m-p/12011805):\n\n**Question:** I need to use CPython via pyRevit to have access to libraries such as `numpy` and `pandas`.\nAt the same time, I want to take advantage of pyRevit’s capabilities such as forms etc.\nAs far as I understood, I can’t have both of these in a single script file.\nIf I got this correctly, is there any way to do this?\n\nThe numpy part is quite decoupled since it is meant to help me with the data exchange process from other data sources; after that point, everything would be focused on Revit APIs.\n\n**Answer:** I dealt with the same challenge a little while back.\nPlease look at\nthe [pyRevit issue 1731 on Dynamo incompatibility: two versions of Same DLL](https://github.com/eirannejad/pyRevit/issues/1731)\nfor a short discussion on using [Python `subprocess` module for subprocess management](https://docs.python.org/3/library/subprocess.html) in\nthe Revit/pyRevit context.\n\nWhile I am not a Revit API / Python / pyRevit expert I can report that `subprocess` worked well enough.\nLearning `subprocess` should be a productive use of time assuming the underlying characteristics are a good match for your application.\n\n**Response:** Thanks, Jake. I tried the same approach, and it also worked perfectly for my case. Appreciate it.\n\n**Answer:** Thanks for giving it a go. And thanks for the feedback."
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "Multiple GbXML Export",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Multiple GbXML Export\n\nJake also helped answer the question\non [export of multiple gbXML models](https://forums.autodesk.com/t5/revit-api-forum/export-of-multiple-gbxml-models/m-p/12011838):\n\n**Question:** For my university thesis work I have to create a lot of different GBXML models (around 18000).\nNo way I can do that without code.\nThis is what I came up with (I attached only a part of it; FloorR, WallsR, RoofR are lists to set R value of corresponding elements):\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "Setting Energy Analysis parameters ###",
    "local_header_href": "#setting-energy-analysis-parameters",
    "chunk_text": "### Setting Energy Analysis parameters ###\n\nopt=Analysis.EnergyAnalysisDetailModelOptions()\nopt.EnergyModelType=Analysis.EnergyModelType.BuildingElement\nopt.ExportMullions=False\nopt.IncludeShadingSurfaces=False\nopt.SimplifyCurtainSystems=True\nopt.Tier=Analysis.EnergyAnalysisDetailModelTier.SecondLevelBoundaries"
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "loop over all R-value combinations and create models ###",
    "local_header_href": "#loop-over-all-r-value-combinations-and-create-models",
    "chunk_text": "### loop over all R-value combinations and create models ###\n\nt=Transaction(doc,\"R change\")\nc=Transaction(doc,\"model creation\")\n\nfor i in range(len(FloorR)):\n  for j in range(len(WallsR)):\n    for k in range(len(RoofR)):\n    t.Start()\n    Floor.Set(FloorR[i]/0.3048)  #R-value change for floor\n    Wall.Set(WallsR[j]/0.3048)#R-value change for Walls\n    Roof.Set(RoofR[k]/0.3048)#R-value change for roof\n    t.Commit()\n    t.Dispose()\n\n    c.Start()\n    model=Analysis.EnergyAnalysisDetailModel.Create(doc, opt)\n    model.TransformModel()\n    GBopt=GBXMLExportOptions()\n    GBopt.ExportEnergyModelType=ExportEnergyModelType.BuildingElement\n    doc.Export(\"C:\\Users\\Миша\\Desktop\\ASD\",\"0\"+\",\"+str(0.2/FloorR[i])+\",\"+str(0.3/WallsR[j])+\",\"+str(0.3/RoofR[k]), GBopt)\n    c.Commit()\n</pre>\n\nThis creates models, but I ran into a problem I don't fully understand: as the process continues, it slows down and stops at about 170-175 created models.\nApparently, something is taking up the memory.\nI tried calling `doc.Delete(model)` at the end of each `for` loop, but that didn't help either.\n\nWhat could be a solution?\n\n**Answer:** The behaviour you describe is completely expected and as designed.\n\nRevit is an end user product designed to be driven by a human being.\nHuman beings are not expected to sit down and create 18000 models in one sitting.\nI suggest you implement an external executable that drives Revit using the code you shared above and monitors progress as you export results from the models you create.\n\nWhenever Revit starts slowing down, take note of how far you got in processing, kill the process, restart Revit and continue from where you left off.\nThis is a common approach to programmatically drive processes in batch mode that were not designed for it.\nYou can also search The Building Coder for further hints\non [batch processing Revit documents](https://www.google.com/search?q=batch+processing&as_sitesearch=thebuildingcoder.typepad.com).\nAlternatively, you could generate your 18000 models online\nusing [APS and DA4R](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.55).\n\nFurthermore, based on the code snippet provided, it appears that only R-values are manipulated and not the underlying model geometry.\nIf that's the case, it might be best to use Revit to export a single gbXML seed file.\nThen, iterate over the desired seed file parameters (like R-value) in an environment like Python which is excellent for large scale text operations.\n\nTwo utilities that would help with the route described above:\n\n- [XmlNotepad](https://microsoft.github.io/XmlNotepad/) &ndash; to build familiarity with gbXML structure and mechanization\n- [xgbxml](https://xgbxml.readthedocs.io/en/latest/what_is_xgbxml.html) &ndash; Python library for gbXML parsing and manipulation\n\n<center>\n<img src=\"img/export_gbxml_settings.png\" alt=\"gbXML export\" title=\"gbXML export\" width=\"600\"/>\n</center>"
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "GbXML Energy Settings",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> GbXML Energy Settings\n\nJake points to the same solution to answer another question as well,\non [gbXml export using energy settings](https://forums.autodesk.com/t5/revit-api-forum/gbxml-export-using-energy-settings/m-p/12011894):\n\n**Question:** Sorry to revive a thread which has been solved more than one year ago, however the solution provided is not working for me as I am programming in Python.\n\nI am using pyRevit to program functions in Python.\nWhen I use the code presented above, I get the following error:\n\n<pre class=\"prettyprint\">\n  EnergyAnalysisDetailModelOptions.ExportMullions = False\n\n  Traceback (most recent call last):\n    File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  AttributeError: static property 'ExportMullions' of 'EnergyAnalysisDetailModelOptions' can only be assigned to through a type, not an instance\n</pre>\n\nIf I understand this correctly, I am having a problem due to the type of variable in my code.\nHowever, Python does not allow the declaration of variables.\nHow can I make the statement to become a type and not an instance?\n\nAny idea how I can get past this issue without moving on to another language?\n\n**Answer:** A nice example of Python `EnergyAnalysisDetailModelOptions` administration is discussed in\nthe [export of multiple gbXML models](https://forums.autodesk.com/t5/revit-api-forum/export-of-multiple-gbxml-models/m-p/9392003).\n\nThe relevant code snippet is this:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "Setting Energy Analysis parameters ###",
    "local_header_href": "#setting-energy-analysis-parameters",
    "chunk_text": "### Setting Energy Analysis parameters ###\n\nopt=Analysis.EnergyAnalysisDetailModelOptions()\nopt.EnergyModelType=Analysis.EnergyModelType.BuildingElement\nopt.ExportMullions=False\nopt.IncludeShadingSurfaces=False\nopt.SimplifyCurtainSystems=True\nopt.Tier=Analysis.EnergyAnalysisDetailModelTier.SecondLevelBoundaries\n</pre>"
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "Automate FBX Export with SendKeys",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Automate FBX Export with SendKeys\n\nWe already shared a C# solution\nto [handle a Revit dialogue using `Idling`, `DialogBoxShowing` and `SendKeys`](https://thebuildingcoder.typepad.com/blog/2021/02/birthday-devdays-postcommand-sendkeys.html#4) to\nimplement\nthe [TwinMotion dynamic link export FBX automatically](https://forums.autodesk.com/t5/revit-api-forum/twinmotion-dynamic-link-export-fbx-automatically/m-p/12123438).\n\nNow [Onur Er](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/14209191) cleaned it up further in his updated answer:\n\n**Question:** I want to export FBX using TwinMotion Dynamic Link.\nI would like to export FBX files from many Revit files.\nHow I can use `PostCommand` and then handle the Windows forms on the export panel?\n\n**Answer:** Thank you for sharing your solution.\nIt saved me unbelievable amount of time, maybe days or weeks.\nThank you VERY VERY MUCH!!!\nI cleaned the code and made it more readable in case someone needs it.\nMy own Revit plugin calls this Twinmotion macro automatically after Revit starts up like this:\n\n<pre class=\"prettyprint\">\nusing System.Threading.Tasks;\nusing Autodesk.Revit.UI;\nusing System.Windows.Forms;\nusing Autodesk.Revit.UI.Events;\n\nnamespace YourNamespaceHere\n{\n  public class Class2 : IExternalApplication\n  {\n    UIControlledApplication UIControlledApplication;\n\n    public Result OnStartup(UIControlledApplication Application)\n    {\n      UIControlledApplication = Application;\n      UIControlledApplication.Idling += Application_Idling;\n\n      return Result.Succeeded;\n    }\n\n    public Result OnShutdown(UIControlledApplication Application) => Result.Succeeded;\n\n    void Application_Idling(object Sender, IdlingEventArgs E)\n    {\n      UIControlledApplication.Idling -= Application_Idling;\n\n      var UIApplication = (UIApplication)Sender;\n\n      MyMacro(UIApplication);\n\n      //TaskDialog.Show(\"Application_Idling\", Sender.GetType().FullName);\n    }\n\n    void OnDialogBoxShowing(object Sender, DialogBoxShowingEventArgs Args) => ((TaskDialogShowingEventArgs)Args).OverrideResult((int)TaskDialogResult.Ok);\n\n    static async void RunCommands(UIApplication UIapp, RevitCommandId Id_Addin)\n    {\n      UIapp.PostCommand(Id_Addin);\n      await Task.Delay(400);\n      SendKeys.Send(\"{ENTER}\");\n      await Task.Delay(400);\n      SendKeys.Send(\"{ENTER}\");\n      await Task.Delay(400);\n      SendKeys.Send(\"{ENTER}\");\n      await Task.Delay(400);\n      SendKeys.Send(\"{ESCAPE}\");\n      await Task.Delay(400);\n      SendKeys.Send(\"{ESCAPE}\");\n    }\n\n    void MyMacro(UIApplication UIapp)\n    {\n      try\n      {\n        var Name = \"CustomCtrl_%CustomCtrl_%Twinmotion 2020%Twinmotion Direct Link%ExportButton\";\n        var Id_Addin = RevitCommandId.LookupCommandId(Name);\n\n        if (Id_Addin != null)\n        {\n          UIapp.DialogBoxShowing += OnDialogBoxShowing;\n\n          RunCommands(UIapp, Id_Addin);\n        }\n      }\n      catch\n      {\n        TaskDialog.Show(\"Test\", \"error\");\n      }\n      finally\n      {\n        UIapp.DialogBoxShowing -= OnDialogBoxShowing;\n      }\n    }\n  }\n}\n</pre>\n\nThank you, Onur Er!"
  },
  {
    "original_filename": "2002_dll_hell_gbxml",
    "header_text": "RFA Export to MongoDB",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> RFA Export to MongoDB\n\nTo wrap up, Eduardo [Lalo Ibarra](https://www.linkedin.com/in/eduardo-ibarra91/) of Mexico City shares one\nof [his favourite classes built with #VSC and #MongoDB to facilitate the export of data from Revit families](https://www.linkedin.com/posts/activity-7089535064467795968-A5lj?utm_source=share&utm_medium=member_desktop):\n\nThe class implementation is encoded in the attached image files on LinkedIn:\n\n<center>\n<img src=\"img/li_mongodb_export_1.jpg\" alt=\"MongoDB export\" title=\"MongoDB export\" width=\"400\"/>\n<img src=\"img/li_mongodb_export_2.jpg\" alt=\"MongoDB export\" title=\"MongoDB export\" width=\"400\"/>\n<img src=\"img/li_mongodb_export_3.jpg\" alt=\"MongoDB export\" title=\"MongoDB export\" width=\"400\"/>\n<img src=\"img/li_mongodb_export_4.jpg\" alt=\"MongoDB export\" title=\"MongoDB export\" width=\"400\"/>\n<img src=\"img/li_mongodb_export_5.jpg\" alt=\"MongoDB export\" title=\"MongoDB export\" width=\"400\"/>\n</center>\n\nEduardo also provides it as a PDF, from which I extracted a text file:\n\n> I share the construction of the class.\nI will give myself some time to share the whole process.\n\n- [mongodb_export.pdf](li_mongodb_export.pdf)\n- [mongodb_export.txt](li_mongodb_export.txt)\n\nHere is his useful list of assets:\n\n- [MongoDB Documents](https://www.mongodb.com/docs/)\n- [Visual Studio Community 2022](https://visualstudio.microsoft.com/es/vs/community/)\n- [Revit API docs](https://www.revitapidocs.com/)\n- [Revit SDK](https://aps.autodesk.com/developer/overview/revit)\n- [My First Revit Plug-in Overview](https://www.autodesk.com/support/technical/article/caas/tsarticles/ts/7I2bC1zUr4VjJ3U31uM66K.html)\n- [Create account in GitHub](https://github.com/)\n- [The Builder Coder](https://thebuildingcoder.typepad.com/)\n  [Visual Studio Revit Add-in Templates](https://github.com/jeremytammik/VisualStudioRevitAddinWizard)\n  &ndash; recommendation: clone the repository\n\nMany thanks, Eduardo!"
  }
]