[
  {
    "original_filename": "1804_combine_edges",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\n- Combine connected edge segments into one continuous line\n  https://forums.autodesk.com/t5/revit-api-forum/combine-connected-edge-segments-into-one-continuous-line/m-p/9126098\n  https://stackoverflow.com/questions/26889624/sorting-of-edges-of-polygon\n  https://stackoverflow.com/search?q=sorting+edges+polygon\n  https://stackoverflow.com/questions/13114378/sorting-vertices-of-a-polygon-in-ccw-or-cw-direction\n  Sort and Orient Curves to Form a Contiguous Loop\n  https://thebuildingcoder.typepad.com/blog/2013/03/sort-and-orient-curves-to-form-a-contiguous-loop.html\n  sorting and orienting curves to form a contiguous loop\n  One method that does part of the work that you should definitely be aware of is the Edge.AsCurveFollowingFace method that returns a curve corresponding to the edge oriented in its topological direction on the specified face. That is the simplest option and a good place to start.\n\n- Russian letters doesn't export in lookup tables\n  https://forums.autodesk.com/t5/revit-api-forum/russian-letters-doesn-t-export-in-lookup-tables/m-p/9116678\n  I myself haven't done that yet but my colleague did - it works. Now when he switches to the Russian keyboard he can insert a csv to a family with Cyrillic text with no loss.\n\n- [Moving a grid](https://forums.autodesk.com/t5/revit-api-forum/moving-a-grid/m-p/9115841)\n\ntwitter:\n\nCyrillic lookup tables, moving grids and combining face loop edges in the #RevitAPI #DynamoBim @AutodeskForge @AutodeskRevit #bim #ForgeDevCon http://bit.ly/combiningedges\n\nTopics to start this week\n&ndash; Why SVG?\n&ndash; Internet privacy\n&ndash; Pointless meetings research\n&ndash; Cyrillic characters in lookup tables\n&ndash; Moving a grid\n&ndash; Combining edges...\n\nlinkedin:\n\nCyrillic lookup tables, moving grids and combining face loop edges in the #RevitAPI \n\nhttp://bit.ly/combiningedges\n\nTopics to start this week:\n\n- Why SVG?\n- Internet privacy\n- Pointless meetings research\n- Cyrillic characters in lookup tables\n- Moving a grid\n- Combining edges...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<p style=\"font-size: 80%; font-style:italic\"></p>\n\n-->"
  },
  {
    "original_filename": "1804_combine_edges",
    "header_text": "Cyrillic Lookup, Moving Grids and Combining Edges",
    "local_header_href": "#cyrillic-lookup-moving-grids-and-combining-edges",
    "chunk_text": "### Cyrillic Lookup, Moving Grids and Combining Edges\n\nLet's start this week with the following topics\nfrom [freecodecamp](https://www.freecodecamp.org) and \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160):\n\n- [Why SVG, internet privacy and pointless meetings research](#2)\n- [Cyrillic characters in lookup tables](#3)\n- [Moving a grid](#4)\n- [Combining edges](#5)"
  },
  {
    "original_filename": "1804_combine_edges",
    "header_text": "SVG, Internet Privacy and Research on Pointless Meetings",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> SVG, Internet Privacy and Research on Pointless Meetings\n\nHere are a couple of recent articles I found interesting, pointed out in\nthe [freecodecamp](https://www.freecodecamp.org) newsletter:\n\n- [Why you should use SVG images: how to animate your SVGs and make them lightning fast](https://www.freecodecamp.org/news/a-fresh-perspective-at-why-when-and-how-to-use-svg/)\n- [The best personal privacy and security tools for 2019](https://www.freecodecamp.org/news/privacy-tools)\n- [Pointless work meetings are really a form of therapy](https://www.bbc.com/news/education-50418317)\n\n> \"To err is human. But to really foul things up, you need a computer.\" &ndash; Paul Ehrlich\n\nBack to the Revit API and some useful solutions discussed in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160):"
  },
  {
    "original_filename": "1804_combine_edges",
    "header_text": "Cyrillic Characters in Lookup Tables",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Cyrillic Characters in Lookup Tables\n\nThere seem to be some issues handling Cyrillic characters in lookup tables, as pointed out in the thread \non [Russian letters doesn't export in lookup tables](https://forums.autodesk.com/t5/revit-api-forum/russian-letters-doesn-t-export-in-lookup-tables/m-p/9116678).\nHappily, however, at least a partial solution can be found:\n\n> ... it works. Now, when he switches to the Russian keyboard, he can insert a CSV to a family with Cyrillic text with no loss."
  },
  {
    "original_filename": "1804_combine_edges",
    "header_text": "Moving a Grid",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Moving a Grid\n\nMatt Taylor very kindly pointed out the solution to another old thread\non [moving a grid](https://forums.autodesk.com/t5/revit-api-forum/moving-a-grid/m-p/9115841):\n\n> I would guess that the grid cannot be moved because it doesn't have a leader.\nUse the `AddLeader` method to add a leader first.\nYou'll also probably need to do a `document.Regenerate` afterwards, before you set the leader points.\n\n> I found the old [blog post that contains the code](https://adndevblog.typepad.com/aec/2016/04/forge-devcon-early-bird-revit-api-moving-a-grid-with-datumplane-method.html).\nSeeing the code, I can confirm that my guess was correct."
  },
  {
    "original_filename": "1804_combine_edges",
    "header_text": "Combining Edges",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Combining Edges\n\nTo wrap it up, Lucas Moreira shared a more complex solution\nto [combine connected edge segments into one continuous line](https://forums.autodesk.com/t5/revit-api-forum/combine-connected-edge-segments-into-one-continuous-line/m-p/9126098):\n\n**Question:** I am fetching the edge loops of a face.\n\nWhen I do so, depending on the original geometry that created the solids, these loop segments can be composed of 2 or more subsegments to form an edge, cf., the orange and red semi-segments below:\n\n<center>\n<img src=\"img/edgesegment.png\" alt=\"Two semi segments forming an edge\" width=\"500\"> <!--680-->\n<p style=\"font-size: 80%; font-style:italic\">Two semi segments forming an edge</p>\n</center>\n\nHow can I identify and retrieve a continuous line for each edge?\n\nIs there a way I can do that recursively regardless of the number of segments forming the edge?\n\nI am coding for Revit 2019 and retrieving the segments using the `Face.EdgeLoops` property.\n\n**Answer:** Two steps:\n\n- Sort the edges so they in the right order\n- Combine all groups of consecutive collinear edges into single ones\n\nHere are hints from StackOverflow for the first:\n\n- [Search results for 'sorting edges polygon'](https://stackoverflow.com/search?q=sorting+edges+polygon)\n- [Sorting vertices of a polygon in CCW or CW direction](https://stackoverflow.com/questions/13114378/sorting-vertices-of-a-polygon-in-ccw-or-cw-direction)\n\nThe Building Coder provides some older thoughts on sorting and orienting curves to form a contiguous loop:\n\n- [Sort and orient curves to form a contiguous loop](https://thebuildingcoder.typepad.com/blog/2013/03/sort-and-orient-curves-to-form-a-contiguous-loop.html)\n- [Sorting face loop edges](https://thebuildingcoder.typepad.com/blog/2015/01/autodesk-internship-in-california-and-sorting-edges.html#3)\n\nOne method that does part of the work that you should definitely be aware of is the `Edge.AsCurveFollowingFace` method that returns a curve corresponding to the edge oriented in its topological direction on the specified face.\nThat is the simplest option and a good place to start.\n\n**Response:** That helped me a lot and I am really close to a solution.\n\nMy scenario is slightly different as I am only using horizontally aligned edges of the exterior face of the geometry.\nI think it actually makes it easier, because I don't have to sort the edges, but sort only the segments that would compose one straight edge.\n\nI used the Python node on Dynamo to prototype what I need &ndash; the visual 3d space there helps me with debugging.\n\nWhat I am doing is getting a list with all the `Edges.AsCurveLoops`, separating the horizontally aligned ones.\nThe algorithm evaluates that list and groups the curves to be joined into sublists, because I was already making sure that all the curves are oriented in the same direction.\nI just need to pair the curve start points with their matching endpoints and use the unmatched points to form my 'new' undivided edge curve.\nI will use the logic\nin [sorting vertices of a polygon in CCW or CW direction](https://stackoverflow.com/questions/13114378/sorting-vertices-of-a-polygon-in-ccw-or-cw-direction) for\nthat.\n\nI know that this code can be optimized, but I will post it here for the sake of completion.\nIt might help someone:\n\n<pre class=\"prettyprint\">\nimport clr\nclr.AddReference('RevitAPI')\nfrom Autodesk.Revit.DB import *\nimport Autodesk\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\nclr.AddReference(\"RevitNodes\")\nimport Revit\nclr.ImportExtensions(Revit.GeometryConversion)\n#from Revit import GeometryConversion as gp\n\nimport math\n\ncurves = IN[0]\n#The next 2 methods will assume that the directions is known.\n#The start point of a curve\ndef startPoint(curve):\n    return curve.GetEndPoint(0)\n\n#The end point of a curve\ndef endPoint(curve):\n    return curve.GetEndPoint(1)\n#Groups lines to be joined in sublists with the curves that have to be joined    \ndef joinCurves(list):\n  comp=[]\n  re=[]\n  unjoined = []\n  for c in curves:\n    c = c.ToRevitType()\n    match = False\n    for co in comp:\n      if startPoint(c).IsAlmostEqualTo(startPoint(co)) and endPoint(c).IsAlmostEqualTo(endPoint(co)):\n        match = True\n    if match:\n      continue\n    else:\n      comp.append(c)      \n      joined = []\n      for c2 in curves:\n        \n        match = False\n        c2 = c2.ToRevitType()\n        for co in comp:\n          if startPoint(c2).IsAlmostEqualTo(startPoint(co)) and endPoint(c2).IsAlmostEqualTo(endPoint(co)):\n            match = True\n        if match:\n          continue\n        else:\n          if c2.Intersect(c) == SetComparisonResult.Disjoint:\n            continue\n          elif c2.Intersect(c) ==  SetComparisonResult.Equal:\n            continue\n          elif c2.Intersect(c) == SetComparisonResult.Subset:\n            comp.append(c2)\n            joined.append(c2.ToProtoType())\n    joined.append(c.ToProtoType())\n    re.append(joined)\n\n  return re\n\nresult = joinCurves(curves)\nOUT = result\n</pre>\n\nMany thanks to Lucas for raising and solving this interesting task."
  }
]