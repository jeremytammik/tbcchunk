[
  {
    "original_filename": "0796_obj_export_transparent",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0796_obj_export_transparent",
    "header_text": "OBJ Model Exporter with Transparency Support",
    "local_header_href": "#obj-model-exporter-with-transparency-support",
    "chunk_text": "<h3>OBJ Model Exporter with Transparency Support</h3><p>Tuesday evening the moon was full, the rain finally eased up a bit, the sky became completely clear, and I spent a couple of hours outside on a hill with a beautiful view, a group of friends, and a nice hot fire.</p><center>\n<img alt=\"Full moon\" src=\"file:////j/photo/jeremy/2012/2012-07-03_tuellinger_full_moon/img_1614_full_moon.jpg\" width=\"400\"/>\n</center><p>On Wednesday I finally got to play hockey again with my Autodesk colleagues after a long period of missing out on that.\nI hope all US Americans enjoyed a nice \n\n<a href=\"http://en.wikipedia.org/wiki/Independence_Day_%28United_States%29\">\nIndependence Day</a>.\n\n<p>The next days are filled with team meetings here in Neuchâtel, followed by our yearly Autodesk football tournament, taking place in Switzerland this year for the first time.\nUnfortunately, the date for that was fixed very late, and I had already made a prior appointment for a mountain tour this coming weekend, so I will not be able to participate unless the weather turns really bad and prohibits mountaineering.\nIt's nice to have alternatives  :-)\n\n<p>The OBJ model exporter I am working on went through an unexpected number of iterations from the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html\">\nbase functionality</a> through the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-exporter-take-one.html\">\nfirst version</a>, \n\nthen adding support for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-colours.html\">\ncolour</a> and processing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-multiple-solid-support.html\">\nmultiple solids per BIM element</a>.\n\n<p>The last update forced me to realise that I really do need to support transparency as well, just as Rudolf Honke initially\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html?cid=6a00e553e168978833017742c3ff3f970d#comment-6a00e553e168978833017742c3ff3f970d\">\nsuggested</a>.\n\n\n<a name=\"2\"></a>\n<h4>Transparency in OBJ and Revit</h4>\n<p>Happily, the OBJ format and its associated \n\n<a href=\"http://people.sc.fsu.edu/~jburkardt/data/mtl/mtl.html\">\nMTL material libraries</a> \n\n(<a href=\"http://local.wasp.uwa.edu.au/~pbourke/dataformats/mtl\">details</a>)\n\ndo support this.\n\n<p>In MTL, the transparency is written using either a 'd' or a 'Tr' statement with values ranging from 0.0 to 1.0, where 1.0 is opaque.\nThis is the record generated for the glass in the basic sample model:\n\n<pre>\nnewmtl 4B475A69\nKa 0.27734375 0.3515625 0.41015625\nKd 0.27734375 0.3515625 0.41015625\nd 0.25\n</pre>\n<p>Revit material transparency values lie between 0 and 100, where 100 is completely transparent and 0 opaque. \nHere is the code that I am currently using to define a material library entry including transparency:\n\n<pre class=\"code\">\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _mtl_newmtl_d \n    = <span class=\"maroon\">\"newmtl {0}\\r\\n\"</span>\n    + <span class=\"maroon\">\"Ka {1} {2} {3}\\r\\n\"</span>\n    + <span class=\"maroon\">\"Kd {1} {2} {3}\\r\\n\"</span>\n    + <span class=\"maroon\">\"d {4}\"</span>;\n \n  s.WriteLine( _mtl_newmtl_d, \n    name, \n    color.Red / 256.0, \n    color.Green / 256.0,\n    color.Blue / 256.0, \n    (100 - transparency) / 100.0 );\n</pre>\n<p>Here is an impression of the resulting view in the \n\n<a href=\"http://bonzaiengine.com\">\nBonzai Engine</a> driven\n\n<a href=\"http://bonzaiengine.com/applet/modelviewer/modelviewer.php\">\nonline model viewer</a>,\n\nwhich was the only viewer I was able to find so far supporting transparency:</p>\n<center>\n<img alt=\"Sample model with transparency\" src=\"img/obj_export_basic_model_transparent.png\" width=\"400\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Mingling Triangles, Colours and Transparency</h4>\n<p>The\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-exporter-take-one.html\">\nfirst take</a> of \n\nthe exporter used a simple list of integers representing triples of vertex indices to store the triangular facets to export.\n\n<p>When I decided to add \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-colours.html\">\ncolour support</a> to\n\nthe exporter and realised that the mutual ordering of triangles and colour definitions for subsequent faces needs preserving, I decided to store the colours in the same list.\n\n<p>Since the Revit colour red, green and blue values are encoded in byte data, i.e. only range from 0 to 255, I can squeeze all three of them into a single integer like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> ColorToInt( <span class=\"teal\">Color</span> color )\n  {\n    <span class=\"blue\">return</span> ( (<span class=\"blue\">int</span>) color.Red ) &lt;&lt; 16\n      | ( (<span class=\"blue\">int</span>) color.Green ) &lt;&lt; 8\n      | (<span class=\"blue\">int</span>) color.Blue;\n  }\n</pre>\n<p>For each colour switch, I create a triple of integers using a -1 marker, followed by one integer holding the colour value and a final zero-valued integer to keep up the multiples of three.\n\n<p>When adding support for transparency, I made use of the fact that the maximum transparency value returned by Revit is 100. \nLeft shifting that value by 24 bits results in 100 * 2^24 = 1677721600, which is still small enough to fit into a signed integer, whose maximum value is 2^32 - 1 = 4294967295.\nTo put this shorter, you might also say that I make use of the fact that 100 is smaller than 127 = 2^7 - 1  :-)\n\n<p>I can thus encode transparency as well as colour in a single signed integer like this, including some assertions to ensure my thinking is not completely off track and Revit is sticking to its agreements:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">int</span> ColorTransparencyToInt( \n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">int</span> transparency )\n  {\n    <span class=\"teal\">Debug</span>.Assert( 0 &lt;= transparency,\n      <span class=\"maroon\">\"expected non-negative transparency\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( 100 &gt;= transparency,\n      <span class=\"maroon\">\"expected transparency between 0 and 100\"</span> );\n \n    <span class=\"blue\">uint</span> trgb = ( (<span class=\"blue\">uint</span>) transparency &lt;&lt; 24 )\n      | (<span class=\"blue\">uint</span>) ColorToInt( color );\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">int</span>.MaxValue &gt; trgb,\n      <span class=\"maroon\">\"expected trgb smaller than max int\"</span> );\n \n    <span class=\"blue\">return</span> (<span class=\"blue\">int</span>) trgb;\n  }\n</pre>\n<p>These operations are reversed to extract the colour and transparency from the encoded integer like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">Color</span> IntToColor( <span class=\"blue\">int</span> rgb )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">Color</span>(\n      (<span class=\"blue\">byte</span>) ( ( rgb &amp; 0xFF0000 ) &gt;&gt; 16 ),\n      (<span class=\"blue\">byte</span>) ( ( rgb &amp; 0xFF00 ) &gt;&gt; 8 ),\n      (<span class=\"blue\">byte</span>) ( rgb &amp; 0xFF ) );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Color</span> IntToColorTransparency( \n    <span class=\"blue\">int</span> trgb, \n    <span class=\"blue\">out</span> <span class=\"blue\">int</span> transparency )\n  {\n    transparency = (<span class=\"blue\">int</span>) ( ( ( (<span class=\"blue\">uint</span>) trgb ) \n      &amp; 0xFF000000 ) &gt;&gt; 24 );\n \n    <span class=\"blue\">return</span> IntToColor( trgb );\n  }\n</pre>\n<p>Since the materials referenced by the OBJ file need a name, I use a similar technique to generate that as well:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> ColorString( <span class=\"teal\">Color</span> color )\n  {\n    <span class=\"blue\">return</span> color.Red.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + color.Green.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + color.Blue.ToString( <span class=\"maroon\">\"X2\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span> ColorTransparencyString(\n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">int</span> transparency )\n  {\n    <span class=\"blue\">return</span> transparency.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + ColorString( color );\n  }\n</pre>\n<p>To find out what other exciting things happen to the data on its way out of the Revit model into the OBJ file, please have a look at the source code yourself.\n\n<p>Here is \n\n<a href=\"zip/ObjExport3.zip\">\nObjExport3.zip</a> including\n\nthe entire source code, Visual Studio solution and add-in manifest for the updated OBJ exporter version 3 including transparency support.\n\n<p>As far as I can tell, that concludes the OBJ export effort for now.\nNext steps may include looking into viewing this on a mobile device and getting it uploaded to the cloud to make it available there.\nI did define an abstract interface for the exporter, albeit very simple, in order to be able to replace the implementation to address other targets.\nThe future will tell where this will lead us.\n\n\n<a name=\"4\"></a>\n<h4>Getting Started with the Revit 2013 API</h4>\n<p>Most of the suggestions provided for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/getting-started-with-the-revit-2012-api.html\">\ngetting started with the Revit 2012 API</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/preparing-for-a-hands-on-revit-api-training.html\">\npreparing for a hands on Revit API training</a> are\n\nstill valid for Revit 2013 as well.\n\n<p>Still, for the sake of convenience and completeness, Mikako Harada updated the various pointers to the available materials and published an overview for \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/07/getting-started-with-revit-2013-api.html\">\ngetting started with the Revit 2013 API</a> that \n\nis well worth taking a gander at.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0796_obj_export_transparent",
    "header_text": "Transparency in OBJ and Revit",
    "local_header_href": "#transparency-in-obj-and-revit",
    "chunk_text": "<h4>Transparency in OBJ and Revit</h4><p>Happily, the OBJ format and its associated \n\n<a href=\"http://people.sc.fsu.edu/~jburkardt/data/mtl/mtl.html\">\nMTL material libraries</a> \n\n(<a href=\"http://local.wasp.uwa.edu.au/~pbourke/dataformats/mtl\">details</a>)\n\ndo support this.\n\n<p>In MTL, the transparency is written using either a 'd' or a 'Tr' statement with values ranging from 0.0 to 1.0, where 1.0 is opaque.\nThis is the record generated for the glass in the basic sample model:\n\n<pre>\nnewmtl 4B475A69\nKa 0.27734375 0.3515625 0.41015625\nKd 0.27734375 0.3515625 0.41015625\nd 0.25\n</pre>\n<p>Revit material transparency values lie between 0 and 100, where 100 is completely transparent and 0 opaque. \nHere is the code that I am currently using to define a material library entry including transparency:\n\n<pre class=\"code\">\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _mtl_newmtl_d \n    = <span class=\"maroon\">\"newmtl {0}\\r\\n\"</span>\n    + <span class=\"maroon\">\"Ka {1} {2} {3}\\r\\n\"</span>\n    + <span class=\"maroon\">\"Kd {1} {2} {3}\\r\\n\"</span>\n    + <span class=\"maroon\">\"d {4}\"</span>;\n \n  s.WriteLine( _mtl_newmtl_d, \n    name, \n    color.Red / 256.0, \n    color.Green / 256.0,\n    color.Blue / 256.0, \n    (100 - transparency) / 100.0 );\n</pre>\n<p>Here is an impression of the resulting view in the \n\n<a href=\"http://bonzaiengine.com\">\nBonzai Engine</a> driven\n\n<a href=\"http://bonzaiengine.com/applet/modelviewer/modelviewer.php\">\nonline model viewer</a>,\n\nwhich was the only viewer I was able to find so far supporting transparency:</p>\n<center>\n<img alt=\"Sample model with transparency\" src=\"img/obj_export_basic_model_transparent.png\" width=\"400\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Mingling Triangles, Colours and Transparency</h4>\n<p>The\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-exporter-take-one.html\">\nfirst take</a> of \n\nthe exporter used a simple list of integers representing triples of vertex indices to store the triangular facets to export.\n\n<p>When I decided to add \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-colours.html\">\ncolour support</a> to\n\nthe exporter and realised that the mutual ordering of triangles and colour definitions for subsequent faces needs preserving, I decided to store the colours in the same list.\n\n<p>Since the Revit colour red, green and blue values are encoded in byte data, i.e. only range from 0 to 255, I can squeeze all three of them into a single integer like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> ColorToInt( <span class=\"teal\">Color</span> color )\n  {\n    <span class=\"blue\">return</span> ( (<span class=\"blue\">int</span>) color.Red ) &lt;&lt; 16\n      | ( (<span class=\"blue\">int</span>) color.Green ) &lt;&lt; 8\n      | (<span class=\"blue\">int</span>) color.Blue;\n  }\n</pre>\n<p>For each colour switch, I create a triple of integers using a -1 marker, followed by one integer holding the colour value and a final zero-valued integer to keep up the multiples of three.\n\n<p>When adding support for transparency, I made use of the fact that the maximum transparency value returned by Revit is 100. \nLeft shifting that value by 24 bits results in 100 * 2^24 = 1677721600, which is still small enough to fit into a signed integer, whose maximum value is 2^32 - 1 = 4294967295.\nTo put this shorter, you might also say that I make use of the fact that 100 is smaller than 127 = 2^7 - 1  :-)\n\n<p>I can thus encode transparency as well as colour in a single signed integer like this, including some assertions to ensure my thinking is not completely off track and Revit is sticking to its agreements:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">int</span> ColorTransparencyToInt( \n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">int</span> transparency )\n  {\n    <span class=\"teal\">Debug</span>.Assert( 0 &lt;= transparency,\n      <span class=\"maroon\">\"expected non-negative transparency\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( 100 &gt;= transparency,\n      <span class=\"maroon\">\"expected transparency between 0 and 100\"</span> );\n \n    <span class=\"blue\">uint</span> trgb = ( (<span class=\"blue\">uint</span>) transparency &lt;&lt; 24 )\n      | (<span class=\"blue\">uint</span>) ColorToInt( color );\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">int</span>.MaxValue &gt; trgb,\n      <span class=\"maroon\">\"expected trgb smaller than max int\"</span> );\n \n    <span class=\"blue\">return</span> (<span class=\"blue\">int</span>) trgb;\n  }\n</pre>\n<p>These operations are reversed to extract the colour and transparency from the encoded integer like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">Color</span> IntToColor( <span class=\"blue\">int</span> rgb )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">Color</span>(\n      (<span class=\"blue\">byte</span>) ( ( rgb &amp; 0xFF0000 ) &gt;&gt; 16 ),\n      (<span class=\"blue\">byte</span>) ( ( rgb &amp; 0xFF00 ) &gt;&gt; 8 ),\n      (<span class=\"blue\">byte</span>) ( rgb &amp; 0xFF ) );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Color</span> IntToColorTransparency( \n    <span class=\"blue\">int</span> trgb, \n    <span class=\"blue\">out</span> <span class=\"blue\">int</span> transparency )\n  {\n    transparency = (<span class=\"blue\">int</span>) ( ( ( (<span class=\"blue\">uint</span>) trgb ) \n      &amp; 0xFF000000 ) &gt;&gt; 24 );\n \n    <span class=\"blue\">return</span> IntToColor( trgb );\n  }\n</pre>\n<p>Since the materials referenced by the OBJ file need a name, I use a similar technique to generate that as well:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> ColorString( <span class=\"teal\">Color</span> color )\n  {\n    <span class=\"blue\">return</span> color.Red.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + color.Green.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + color.Blue.ToString( <span class=\"maroon\">\"X2\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span> ColorTransparencyString(\n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">int</span> transparency )\n  {\n    <span class=\"blue\">return</span> transparency.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + ColorString( color );\n  }\n</pre>\n<p>To find out what other exciting things happen to the data on its way out of the Revit model into the OBJ file, please have a look at the source code yourself.\n\n<p>Here is \n\n<a href=\"zip/ObjExport3.zip\">\nObjExport3.zip</a> including\n\nthe entire source code, Visual Studio solution and add-in manifest for the updated OBJ exporter version 3 including transparency support.\n\n<p>As far as I can tell, that concludes the OBJ export effort for now.\nNext steps may include looking into viewing this on a mobile device and getting it uploaded to the cloud to make it available there.\nI did define an abstract interface for the exporter, albeit very simple, in order to be able to replace the implementation to address other targets.\nThe future will tell where this will lead us.\n\n\n<a name=\"4\"></a>\n<h4>Getting Started with the Revit 2013 API</h4>\n<p>Most of the suggestions provided for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/getting-started-with-the-revit-2012-api.html\">\ngetting started with the Revit 2012 API</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/preparing-for-a-hands-on-revit-api-training.html\">\npreparing for a hands on Revit API training</a> are\n\nstill valid for Revit 2013 as well.\n\n<p>Still, for the sake of convenience and completeness, Mikako Harada updated the various pointers to the available materials and published an overview for \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/07/getting-started-with-revit-2013-api.html\">\ngetting started with the Revit 2013 API</a> that \n\nis well worth taking a gander at.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0796_obj_export_transparent",
    "header_text": "Mingling Triangles, Colours and Transparency",
    "local_header_href": "#mingling-triangles-colours-and-transparency",
    "chunk_text": "<h4>Mingling Triangles, Colours and Transparency</h4><p>The\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-exporter-take-one.html\">\nfirst take</a> of \n\nthe exporter used a simple list of integers representing triples of vertex indices to store the triangular facets to export.\n\n<p>When I decided to add \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/obj-model-exporter-with-colours.html\">\ncolour support</a> to\n\nthe exporter and realised that the mutual ordering of triangles and colour definitions for subsequent faces needs preserving, I decided to store the colours in the same list.\n\n<p>Since the Revit colour red, green and blue values are encoded in byte data, i.e. only range from 0 to 255, I can squeeze all three of them into a single integer like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> ColorToInt( <span class=\"teal\">Color</span> color )\n  {\n    <span class=\"blue\">return</span> ( (<span class=\"blue\">int</span>) color.Red ) &lt;&lt; 16\n      | ( (<span class=\"blue\">int</span>) color.Green ) &lt;&lt; 8\n      | (<span class=\"blue\">int</span>) color.Blue;\n  }\n</pre>\n<p>For each colour switch, I create a triple of integers using a -1 marker, followed by one integer holding the colour value and a final zero-valued integer to keep up the multiples of three.\n\n<p>When adding support for transparency, I made use of the fact that the maximum transparency value returned by Revit is 100. \nLeft shifting that value by 24 bits results in 100 * 2^24 = 1677721600, which is still small enough to fit into a signed integer, whose maximum value is 2^32 - 1 = 4294967295.\nTo put this shorter, you might also say that I make use of the fact that 100 is smaller than 127 = 2^7 - 1  :-)\n\n<p>I can thus encode transparency as well as colour in a single signed integer like this, including some assertions to ensure my thinking is not completely off track and Revit is sticking to its agreements:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">int</span> ColorTransparencyToInt( \n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">int</span> transparency )\n  {\n    <span class=\"teal\">Debug</span>.Assert( 0 &lt;= transparency,\n      <span class=\"maroon\">\"expected non-negative transparency\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( 100 &gt;= transparency,\n      <span class=\"maroon\">\"expected transparency between 0 and 100\"</span> );\n \n    <span class=\"blue\">uint</span> trgb = ( (<span class=\"blue\">uint</span>) transparency &lt;&lt; 24 )\n      | (<span class=\"blue\">uint</span>) ColorToInt( color );\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">int</span>.MaxValue &gt; trgb,\n      <span class=\"maroon\">\"expected trgb smaller than max int\"</span> );\n \n    <span class=\"blue\">return</span> (<span class=\"blue\">int</span>) trgb;\n  }\n</pre>\n<p>These operations are reversed to extract the colour and transparency from the encoded integer like this:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"teal\">Color</span> IntToColor( <span class=\"blue\">int</span> rgb )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">Color</span>(\n      (<span class=\"blue\">byte</span>) ( ( rgb &amp; 0xFF0000 ) &gt;&gt; 16 ),\n      (<span class=\"blue\">byte</span>) ( ( rgb &amp; 0xFF00 ) &gt;&gt; 8 ),\n      (<span class=\"blue\">byte</span>) ( rgb &amp; 0xFF ) );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Color</span> IntToColorTransparency( \n    <span class=\"blue\">int</span> trgb, \n    <span class=\"blue\">out</span> <span class=\"blue\">int</span> transparency )\n  {\n    transparency = (<span class=\"blue\">int</span>) ( ( ( (<span class=\"blue\">uint</span>) trgb ) \n      &amp; 0xFF000000 ) &gt;&gt; 24 );\n \n    <span class=\"blue\">return</span> IntToColor( trgb );\n  }\n</pre>\n<p>Since the materials referenced by the OBJ file need a name, I use a similar technique to generate that as well:\n\n<pre class=\"code\">\n  <span class=\"blue\">static</span> <span class=\"blue\">string</span> ColorString( <span class=\"teal\">Color</span> color )\n  {\n    <span class=\"blue\">return</span> color.Red.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + color.Green.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + color.Blue.ToString( <span class=\"maroon\">\"X2\"</span> );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span> ColorTransparencyString(\n    <span class=\"teal\">Color</span> color,\n    <span class=\"blue\">int</span> transparency )\n  {\n    <span class=\"blue\">return</span> transparency.ToString( <span class=\"maroon\">\"X2\"</span> )\n      + ColorString( color );\n  }\n</pre>\n<p>To find out what other exciting things happen to the data on its way out of the Revit model into the OBJ file, please have a look at the source code yourself.\n\n<p>Here is \n\n<a href=\"zip/ObjExport3.zip\">\nObjExport3.zip</a> including\n\nthe entire source code, Visual Studio solution and add-in manifest for the updated OBJ exporter version 3 including transparency support.\n\n<p>As far as I can tell, that concludes the OBJ export effort for now.\nNext steps may include looking into viewing this on a mobile device and getting it uploaded to the cloud to make it available there.\nI did define an abstract interface for the exporter, albeit very simple, in order to be able to replace the implementation to address other targets.\nThe future will tell where this will lead us.\n\n\n<a name=\"4\"></a>\n<h4>Getting Started with the Revit 2013 API</h4>\n<p>Most of the suggestions provided for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/getting-started-with-the-revit-2012-api.html\">\ngetting started with the Revit 2012 API</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/preparing-for-a-hands-on-revit-api-training.html\">\npreparing for a hands on Revit API training</a> are\n\nstill valid for Revit 2013 as well.\n\n<p>Still, for the sake of convenience and completeness, Mikako Harada updated the various pointers to the available materials and published an overview for \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/07/getting-started-with-revit-2013-api.html\">\ngetting started with the Revit 2013 API</a> that \n\nis well worth taking a gander at.\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0796_obj_export_transparent",
    "header_text": "Getting Started with the Revit 2013 API",
    "local_header_href": "#getting-started-with-the-revit-2013-api",
    "chunk_text": "<h4>Getting Started with the Revit 2013 API</h4><p>Most of the suggestions provided for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/getting-started-with-the-revit-2012-api.html\">\ngetting started with the Revit 2012 API</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/preparing-for-a-hands-on-revit-api-training.html\">\npreparing for a hands on Revit API training</a> are\n\nstill valid for Revit 2013 as well.\n\n<p>Still, for the sake of convenience and completeness, Mikako Harada updated the various pointers to the available materials and published an overview for \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/07/getting-started-with-revit-2013-api.html\">\ngetting started with the Revit 2013 API</a> that \n\nis well worth taking a gander at.\n</p></p>"
  }
]