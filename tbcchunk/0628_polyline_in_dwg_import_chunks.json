[
  {
    "original_filename": "0628_polyline_in_dwg_import",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0628_polyline_in_dwg_import",
    "header_text": "Polylines in Imported DWG Files",
    "local_header_href": "#polylines-in-imported-dwg-files",
    "chunk_text": "<h3>Polylines in Imported DWG Files</h3><p>I still keep discovering functionality in Revit 2012 API that I have not yet discussed here, such as the following important enhancement:\n\n<p>Previous versions of the Revit API failed to retrieve polyline data from imported DWG files.\nThe polylines were represented by an internal Revit class which was not exposed through the API, so the geometry retrieval simply ignored these objects.\n\n<p>Happily, that changed in the Revit 2012 API with the introduction of the PolyLine class.\nAs stated by the Revit API help file RevitAPI.chm, it represents a polyline in space defined by a set of coordinate points.\n\n<!-- this is all about product features:\n<a href=\"http://wikihelp.autodesk.com/Revit/enu/2012/Help/What%27s_New_in_Revit_2012%3f\">\n<a href=\"http://wikihelp.autodesk.com/Revit/enu/2012/Help/Revit_User%27s_Guide/0001-What%27s_N1/0002-New_in_R2\">\n-->\n<p>The 'What's New' section explains:\n\n<h4 style=\"color:darkblue\">PolyLine returned from Element.Geometry</h4>\n<p style=\"color:darkblue\">A new geometry object called a PolyLine is exposed through the API. \nThe PolyLine represents a set of coordinate points forming contiguous line segments. \nTypically this type of geometry would be seen in geometry imported from other formats (such as DWG). \nPrevious Element.Geometry[] would skip extraction of these geometry object completely.</p>\n<p>Here is some sample code making use of this class, simply counting the number of curves and polylines returned by a DWG import instance.\nIt makes use of two helper functions.\n\n<p>The first helper method is trivial.\nIt simply returns an English plural suffix for the given number of items, i.e. 's' for zero or more than one items and nothing for exactly one, for prettier printing of the results:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> PluralSuffix( <span class=\"blue\">int</span> n )\n{\n  <span class=\"blue\">return</span> 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span>;\n}\n</pre>\n<p>The second one, GetSingleSelectedElement, is a bit more substantial.\nIt retrieves a single pre-selected element, if one exists, and otherwise prompts the user to select an element, including the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/pickobject-requires-valid-view.html\">\ncheck for a valid selection view</a> that we recently discussed:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"teal\">Result</span> GetSingleSelectedElement(\n  <span class=\"teal\">UIDocument</span> uidoc,\n  <span class=\"blue\">out</span> <span class=\"teal\">Element</span> e )\n{\n  e = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"green\">// Check for a single pre-selected element</span>\n \n  <span class=\"teal\">SelElementSet</span> set = sel.Elements;\n \n  <span class=\"blue\">if</span>( 1 == set.Size )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e2 <span class=\"blue\">in</span> set )\n    {\n      e = e2;\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n  {\n    <span class=\"green\">// Prompt user to select an element</span>\n \n    <span class=\"blue\">if</span>( <span class=\"teal\">ViewType</span>.Internal == uidoc.ActiveView.ViewType )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Error\"</span>,\n        <span class=\"maroon\">\"Cannot pick an element in this view: \"</span>\n        + uidoc.ActiveView.Name );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"maroon\">\"Please pick an element\"</span> );\n \n      e = uidoc.Document.get_Element( \n        r.ElementId );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>With these two in place, we can proceed to the actual code to retrieve the element geometry and extract polylines from it, provided it is in fact an import instance containing any such polylines:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e;\n \n  <span class=\"teal\">Result</span> r = GetSingleSelectedElement( uidoc, <span class=\"blue\">out</span> e );\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">Result</span>.Succeeded == r )\n  {\n    <span class=\"blue\">int</span> curveCounter = 0;\n    <span class=\"blue\">int</span> polylineCounter = 0;\n \n    <span class=\"teal\">GeometryElement</span> geoElement \n      = e.get_Geometry( <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geoObject \n      <span class=\"blue\">in</span> geoElement.Objects )\n    {\n      <span class=\"teal\">GeometryInstance</span> instance \n        = geoObject <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != instance )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> instObj \n          <span class=\"blue\">in</span> instance.SymbolGeometry.Objects )\n        {\n          <span class=\"blue\">if</span>( instObj <span class=\"blue\">is</span> <span class=\"teal\">Curve</span> )\n          {\n            ++curveCounter;\n          }\n          <span class=\"blue\">else</span> <span class=\"blue\">if</span>( instObj <span class=\"blue\">is</span> <span class=\"teal\">PolyLine</span> )\n          {\n            ++polylineCounter;\n          }\n        }\n      }\n    }\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"GeometryInstance Symbol Geometry\"</span>,\n      <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} curve{1} and {2} polyline{3}\"</span>,\n        curveCounter, PluralSuffix( curveCounter ),\n        polylineCounter, PluralSuffix( polylineCounter ) ) );\n  }\n  <span class=\"blue\">return</span> r;\n}\n</pre>\n<p>I tested it on the following simple model containing one imported DWG file representing a rectangular column:\n\n<center>\n<img alt=\"Pinned column import instance\" src=\"img/import_instance_pinned_column.png\"/>\n</center>\n<p>It reports one single polyline representing the geometry:\n\n<center>\n<img alt=\"Import instance geometry containing polyline\" src=\"img/import_instance_geometry_result.png\"/>\n</center>\n<p>Unfortunately, as said, this geometry could not be retrieved in previous versions of the Revit API.\n\n<p>Here is \n\n<a href=\"zip/ImpInstGeo.zip\">ImpInstGeo.zip</a> containing \n\nthe complete Visual Studio solution, C# source code, and add-in manifest file of this command.\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0628_polyline_in_dwg_import",
    "header_text": "PolyLine returned from Element.Geometry",
    "local_header_href": "#polyline-returned-from-elementgeometry",
    "chunk_text": "<h4 style=\"color:darkblue\">PolyLine returned from Element.Geometry</h4><p style=\"color:darkblue\">A new geometry object called a PolyLine is exposed through the API. \nThe PolyLine represents a set of coordinate points forming contiguous line segments. \nTypically this type of geometry would be seen in geometry imported from other formats (such as DWG). \nPrevious Element.Geometry[] would skip extraction of these geometry object completely.</p><p>Here is some sample code making use of this class, simply counting the number of curves and polylines returned by a DWG import instance.\nIt makes use of two helper functions.\n\n<p>The first helper method is trivial.\nIt simply returns an English plural suffix for the given number of items, i.e. 's' for zero or more than one items and nothing for exactly one, for prettier printing of the results:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">string</span> PluralSuffix( <span class=\"blue\">int</span> n )\n{\n  <span class=\"blue\">return</span> 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span>;\n}\n</pre>\n<p>The second one, GetSingleSelectedElement, is a bit more substantial.\nIt retrieves a single pre-selected element, if one exists, and otherwise prompts the user to select an element, including the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/pickobject-requires-valid-view.html\">\ncheck for a valid selection view</a> that we recently discussed:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"teal\">Result</span> GetSingleSelectedElement(\n  <span class=\"teal\">UIDocument</span> uidoc,\n  <span class=\"blue\">out</span> <span class=\"teal\">Element</span> e )\n{\n  e = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"green\">// Check for a single pre-selected element</span>\n \n  <span class=\"teal\">SelElementSet</span> set = sel.Elements;\n \n  <span class=\"blue\">if</span>( 1 == set.Size )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e2 <span class=\"blue\">in</span> set )\n    {\n      e = e2;\n    }\n  }\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e )\n  {\n    <span class=\"green\">// Prompt user to select an element</span>\n \n    <span class=\"blue\">if</span>( <span class=\"teal\">ViewType</span>.Internal == uidoc.ActiveView.ViewType )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Error\"</span>,\n        <span class=\"maroon\">\"Cannot pick an element in this view: \"</span>\n        + uidoc.ActiveView.Name );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Reference</span> r = sel.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element,\n        <span class=\"maroon\">\"Please pick an element\"</span> );\n \n      e = uidoc.Document.get_Element( \n        r.ElementId );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>With these two in place, we can proceed to the actual code to retrieve the element geometry and extract polylines from it, provided it is in fact an import instance containing any such polylines:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Element</span> e;\n \n  <span class=\"teal\">Result</span> r = GetSingleSelectedElement( uidoc, <span class=\"blue\">out</span> e );\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">Result</span>.Succeeded == r )\n  {\n    <span class=\"blue\">int</span> curveCounter = 0;\n    <span class=\"blue\">int</span> polylineCounter = 0;\n \n    <span class=\"teal\">GeometryElement</span> geoElement \n      = e.get_Geometry( <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geoObject \n      <span class=\"blue\">in</span> geoElement.Objects )\n    {\n      <span class=\"teal\">GeometryInstance</span> instance \n        = geoObject <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != instance )\n      {\n        <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> instObj \n          <span class=\"blue\">in</span> instance.SymbolGeometry.Objects )\n        {\n          <span class=\"blue\">if</span>( instObj <span class=\"blue\">is</span> <span class=\"teal\">Curve</span> )\n          {\n            ++curveCounter;\n          }\n          <span class=\"blue\">else</span> <span class=\"blue\">if</span>( instObj <span class=\"blue\">is</span> <span class=\"teal\">PolyLine</span> )\n          {\n            ++polylineCounter;\n          }\n        }\n      }\n    }\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"GeometryInstance Symbol Geometry\"</span>,\n      <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} curve{1} and {2} polyline{3}\"</span>,\n        curveCounter, PluralSuffix( curveCounter ),\n        polylineCounter, PluralSuffix( polylineCounter ) ) );\n  }\n  <span class=\"blue\">return</span> r;\n}\n</pre>\n<p>I tested it on the following simple model containing one imported DWG file representing a rectangular column:\n\n<center>\n<img alt=\"Pinned column import instance\" src=\"img/import_instance_pinned_column.png\"/>\n</center>\n<p>It reports one single polyline representing the geometry:\n\n<center>\n<img alt=\"Import instance geometry containing polyline\" src=\"img/import_instance_geometry_result.png\"/>\n</center>\n<p>Unfortunately, as said, this geometry could not be retrieved in previous versions of the Revit API.\n\n<p>Here is \n\n<a href=\"zip/ImpInstGeo.zip\">ImpInstGeo.zip</a> containing \n\nthe complete Visual Studio solution, C# source code, and add-in manifest file of this command.\n</p></p></p></p></p></p></p></p>"
  }
]