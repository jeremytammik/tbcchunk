[
  {
    "original_filename": "0006_sdk_samples_solution",
    "header_text": "The SDK Samples Solution SDKSamples2009.sln",
    "local_header_href": "#the-sdk-samples-solution-sdksamples2009sln",
    "chunk_text": "<h3>The SDK Samples Solution SDKSamples2009.sln</h3><p>As mentioned in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/08/managing-sdk-sa.html\">previous post</a>,\n\nthe Revit SDK samples includes a powerful tool to help manage the \nover hundred individual samples provided. \nOn one hand, we wish to <strong>compile</strong> all the samples easily in order \nto load and execute them inside of Revit for testing and debugging purposes. \nWe also want a comfortable method to <strong>search</strong> for solutions \nto specific tasks. \nThe unified solution file SDKSamples2009.sln addresses both these needs.</p><p>In order to compile the samples, every project included in the solution \nneeds to reference the appropriate version of RevitAPI.dll. On a default\ninstallation of Revit Architecture, MEP, or Structure, the location of\nRevitAPI.dll is \n\n<pre>\nC:\\Program Files\\Revit Architecture 2009\\Program\\RevitAPI.dll\nC:\\Program Files\\Revit MEP 2009\\Program\\RevitAPI.dll\nC:\\Program Files\\Revit Structure 2009\\Program\\RevitAPI.dll\n</pre>\n<p>They are all identical, more or less, although some of the API \nfunctionality is only available when running within the appropriate\nflavour of Revit.</p>\n<p>If you installed Revit to the default location, the reference path\nto RevitAPI.dll stored in SDKSamples2009.sln will already be correct\nand no change is required. Otherwise, read on.</p>\n<p>By the way, whenever you modify the reference to RevitAPI.dll \nin order to compile any Revit add-in, you need to make sure that the\n'Copy Local' flag maintained by Visual Studio for that reference is \nset to False. You can see the current setting by right clicking \non the reference and selecting its properties in the context menu.\nIf this flag is set to True, Visual Studio will create a local copy \nof RevitAPI.dll when compiling the plug-in and use this copy when \nloading it. This confuses the debugger and Revit when running the \nadd-in, as well as unnecessarily polluting your hard disk.</p>\n<p>To avoid having to reset this property when modifying an \nexisting reference, simply do not delete the existing reference ... \ninstead, add the new reference to the current assembly, and the \nold, existing data will be updated, so the new path will be stored,\nand at the same time the existing 'Copy Local' setting will be \npreserved.</p>\n<p>Now, if you need to change the path to the references to RevitAPI.dll \nin all your hundred Revit SDK sample projects and want to do so by editing\nthem manually one by one, you are in for a daunting task. Luckily, this \ncan be automated.</p>\n</p><pre>\nHintPath Batch Processor 1.0.0.1\nCopyright (C) 2007 by Jeremy Tammik, Autodesk Inc.\n\nusage: jhint [-?bhqrv] [-n new_hintpath] [-o old_hintpath_regex] filespecs\n\nOptions:\n  -b  --backup          create backup files (no)\n  -h  --help            display help message (no)\n  -n  --newhintpath     specify new HintPath replacement (null)\n  -o  --oldhintpath     specify old HintPath regular expression pattern (null)\n  -q  --quiet           quiet mode (no)\n  -r  --recursive       recursively traverse subdirectories (no)\n  -v  --verbose         print verbose messages (no)\n\nfilespec may include both root directory and filename pattern, for example:\n  C:\\a\\j\\pro\\jhint\\test\\*.csproj\n  .\\test\\Project1.vbproj\n  Project2.csproj\n\nold HintPath regular expression search pattern examples:\n  mgd.dll           matches all files containing the substring \"mgd.dll\"\n  \\\\AutoCAD 2007\\\\  matches all files in some \"AutoCAD 2007\" subdirectory\n</pre><p>If anyone is interested in hearing \nmore about this tool, please let me know and I will happily present it in more \ndetail.</p><p>Anyway, once the reference to RevitAPI.dll is set correctly for all the \nRevit SDK samples, you should be able to compile them all in one go by simply \ncompiling the entire SDKSamples2009.sln solution.</p><p>This solution can also be used as a base for running and debugging into any \none of the samples. In order to do so, we need to load the desired sample into \nRevit. This can be achieved by manually editing Revit.ini to add the sample\nto the Revit Tools &gt; External Tools menu, but that would also be tedious if\ndone manually one by one for each sample. \nIn the next post, I plan to discuss a more efficient alternative.</p><p>To search for any solution to a specific problem, I find the functionality \nprovided by \nVisual Studio &gt; Edit &gt; Find and Replace &gt; Find in Files &gt; Look in : Entire Solution\nvery useful. \nFor instance, if I am interested to create a wall, I might search globally for\n'createwall'. This will turn up a number of hits. To be more precise, in my \ninstallation, 880 files are searched and 74 matching lines found in 18 files.\nLooking at these in more detail, I notice that some of them contain the string \n'CreateWall'. So next, I narrow down the search to this exact string and match \ncase. This reduces the number of hits to 10 in 5 files, and some of them are for \nthe method CreateWall() in the Journaling sample. Looking at this method, \nI discover that the actual API method called to create a new wall is NewWall().\nLooking for this exact string, I immediately determine which seven of the \nhundred SDK samples can be used to explore wall creation.</p>"
  }
]