[
  {
    "original_filename": "0754_shared_param_add_categ",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0754_shared_param_add_categ",
    "header_text": "Adding a Category to a Shared Parameter",
    "local_header_href": "#adding-a-category-to-a-shared-parameter",
    "chunk_text": "<h3>Adding a Category to a Shared Parameter</h3><p>Today is the first day of the Munich Revit API training.\nWhile I am getting ready for that, and as a break from the new-fangled 2013 related stuff, here is an important question and and answer with a useful utility method by Miroslav Schonauer for handling shared parameters:\n\n\n<p><strong>Question:</strong> I am using VB.NET to iterate through a set of families within a project, add shared parameters to types, and defining the category to apply the parameter to the family using the following code:\n\n<pre class=\"code\">\n  'create a category set with the Element category in it\n\n  Dim categories As Autodesk.Revit.DB.CategorySet\n\n  categories = app.Create.NewCategorySet\n\n  Dim LCategory As Autodesk.Revit.DB.Category\n\n  LCategory = doc.Settings.Categories.Item( _\n    iCategory.Name.ToString)\n\n  categories.Insert(LCategory)\n\n  'create a new Type binding for the Symbol categories\n\n  Dim TypeBinding As Autodesk.Revit.DB.TypeBinding\n\n  TypeBinding = app.Create.NewTypeBinding(categories)\n\n  'Bind the parameter\n\n  doc.ParameterBindings.Insert( _\n    sharedParameterDefinition, TypeBinding)\n</pre>\n<p>This works fine for the first family with a specific category, such as say Furniture; all furniture families then have the parameter applied and updated.\n\n<p>When I try and apply the same parameter to another family from another category, e.g. Special Equipment, I get no error, but the code fails to apply to the parameter.\n\n<p>How do I add more categories of the families to the parameter?\n\n\n<p><strong>Answer:</strong> Just make a collection of all the categories that you wish to bind your shared parameter to, put them all into the same CategorySet, and make one single call to NewTypeBinding with the entire set containing all the categories in one go.\n\n\n<p><strong>Response:</strong> The problem is that I do not know the categories when I first create the shared parameter, and these may change at any point in the future. \nThe add-in is reading data from an external source and then creating and updating all parameters and values on the fly.\n\n<p>Can I retrieve the existing categories that apply to a parameter, add my new category to the CategorySet, and then create a NewTypeBinding, or can you only add the categories at initial creation?\n\n\n<p><strong>Answer:</strong> You can add additional categories later on as well.\nHere is some code which does what you need, and much more besides:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> BindSharedParamResult BindSharedParam(\n  <span class=\"teal\">Document</span> doc, \n  <span class=\"teal\">Category</span> cat, \n  <span class=\"blue\">string</span> paramName, \n  <span class=\"blue\">string</span> grpName,\n  <span class=\"teal\">ParameterType</span> paramType, \n  <span class=\"blue\">bool</span> visible, \n  <span class=\"blue\">bool</span> instanceBinding )\n{\n  <span class=\"blue\">try</span> <span class=\"green\">// generic</span>\n  {\n    <span class=\"teal\">Application</span> app = doc.Application;\n \n    <span class=\"green\">// This is needed already here to </span>\n    <span class=\"green\">// store old ones for re-inserting</span>\n \n    <span class=\"teal\">CategorySet</span> catSet = app.Create.NewCategorySet();\n \n    <span class=\"green\">// Loop all Binding Definitions</span>\n    <span class=\"green\">// IMPORTANT NOTE: Categories.Size is ALWAYS 1 !?</span>\n    <span class=\"green\">// For multiple categories, there is really one </span>\n    <span class=\"green\">// pair per each category, even though the </span>\n    <span class=\"green\">// Definitions are the same...</span>\n \n    <span class=\"teal\">DefinitionBindingMapIterator</span> iter \n      = doc.ParameterBindings.ForwardIterator();\n \n    <span class=\"blue\">while</span>( iter.MoveNext() )\n    {\n      <span class=\"teal\">Definition</span> def = iter.Key;\n      <span class=\"teal\">ElementBinding</span> elemBind \n        = (<span class=\"teal\">ElementBinding</span>) iter.Current;\n \n      <span class=\"green\">// Got param name match</span>\n \n      <span class=\"blue\">if</span>( paramName.Equals( def.Name, \n        <span class=\"teal\">StringComparison</span>.CurrentCultureIgnoreCase ) )\n      {\n        <span class=\"green\">// Check for category match - Size is always 1!</span>\n \n        <span class=\"blue\">if</span>( elemBind.Categories.Contains( cat ) )\n        {\n          <span class=\"green\">// Check Param Type</span>\n \n          <span class=\"blue\">if</span>( paramType != def.ParameterType ) \n            <span class=\"blue\">return</span> BindSharedParamResult.eWrongParamType;\n \n          <span class=\"green\">// Check Binding Type</span>\n \n          <span class=\"blue\">if</span>( instanceBinding )\n          {\n            <span class=\"blue\">if</span>( elemBind.GetType() != <span class=\"blue\">typeof</span>( <span class=\"teal\">InstanceBinding</span> ) ) \n              <span class=\"blue\">return</span> BindSharedParamResult.eWrongBindingType;\n          }\n          <span class=\"blue\">else</span>\n          {\n            <span class=\"blue\">if</span>( elemBind.GetType() != <span class=\"blue\">typeof</span>( <span class=\"teal\">TypeBinding</span> ) ) \n              <span class=\"blue\">return</span> BindSharedParamResult.eWrongBindingType;\n          }\n \n          <span class=\"green\">// Check Visibility - cannot (not exposed)</span>\n          <span class=\"green\">// If here, everything is fine, </span>\n          <span class=\"green\">// ie already defined correctly</span>\n \n          <span class=\"blue\">return</span> BindSharedParamResult.eAlreadyBound;\n        }\n \n        <span class=\"green\">// If here, no category match, hence must </span>\n        <span class=\"green\">// store \"other\" cats for re-inserting</span>\n \n        <span class=\"blue\">else</span>\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Category</span> catOld \n            <span class=\"blue\">in</span> elemBind.Categories ) \n              catSet.Insert( catOld ); <span class=\"green\">// 1 only, but no index...</span>\n        }\n      }\n    }\n \n    <span class=\"green\">// If here, there is no Binding Definition for </span>\n    <span class=\"green\">// it, so make sure Param defined and then bind it!</span>\n \n    <span class=\"teal\">DefinitionFile</span> defFile \n      = GetOrCreateSharedParamsFile( app );\n \n    <span class=\"teal\">DefinitionGroup</span> defGrp \n      = GetOrCreateSharedParamsGroup( \n        defFile, grpName );\n \n    <span class=\"teal\">Definition</span> definition \n      = GetOrCreateSharedParamDefinition( \n        defGrp, paramType, paramName, visible );\n \n    catSet.Insert( cat );\n \n    <span class=\"teal\">InstanceBinding</span> bind = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( instanceBinding )\n    {\n      bind = app.Create.NewInstanceBinding( \n        catSet );\n    }\n    <span class=\"blue\">else</span>\n    {\n      bind = app.Create.NewTypeBinding( catSet );\n    }\n \n    <span class=\"green\">// There is another strange API \"feature\". </span>\n    <span class=\"green\">// If param has EVER been bound in a project </span>\n    <span class=\"green\">// (in above iter pairs or even if not there </span>\n    <span class=\"green\">// but once deleted), Insert always fails!? </span>\n    <span class=\"green\">// Must use .ReInsert in that case.</span>\n    <span class=\"green\">// See also similar findings on this topic in: </span>\n    <span class=\"green\">// http://thebuildingcoder.typepad.com/blog/2009/09/adding-a-category-to-a-parameter-binding.html </span>\n    <span class=\"green\">// - the code-idiom below may be more generic:</span>\n \n    <span class=\"blue\">if</span>( doc.ParameterBindings.Insert( \n      definition, bind ) )\n    {\n      <span class=\"blue\">return</span> BindSharedParamResult.eSuccessfullyBound;\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">if</span>( doc.ParameterBindings.ReInsert( \n        definition, bind ) )\n      {\n        <span class=\"blue\">return</span> BindSharedParamResult.eSuccessfullyBound;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">return</span> BindSharedParamResult.eFailed;\n      }\n    }\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    MessageBox.Show( <span class=\"blue\">string</span>.Format( \n      <span class=\"maroon\">\"Error in Binding Shared Param: {0}\"</span>, \n      ex.Message ) );\n \n    <span class=\"blue\">return</span> BindSharedParamResult.eFailed;\n  }\n}\n</pre>\n<p>It is pretty old and includes a few interesting notes in the comments.\nIt has continued working fine over many releases now.\n\n<p>For completeness' sake, here is the \n\n<a href=\"zip/HelperParams.cs\">\nentire HelperParams.cs C# module</a>.\n\n<p><strong>Response:</strong> That resolved my problem and everything is working great.\n\n<p>The problem was that I was using the doc.ParameterBindings.Insert method.\nSince the binding already exists, I have to use the ReInsert method instead.\n\n<p>Ok, now I am off to give this API training.\nWish me luck!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]