[
  {
    "original_filename": "0111_transform_instance_coords",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0111_transform_instance_coords",
    "header_text": "Transform Instance Coordinates",
    "local_header_href": "#transform-instance-coordinates",
    "chunk_text": "<h3>Transform Instance Coordinates</h3><p>We briefly introduced transformations and the Revit Transform class in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/geometry-librar.html\">\noverview of the geometry library</a>,\n\nand discussed some\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/transform.html\">\nbasic Transform concepts and usage</a>.\n\nNow we are well prepared to address a more interesting topic.</p><p><strong>Question:</strong>\nI need to be able to find the coordinates of all the vertices of a shape.\nIf I take a simple shape such as a mullion, I am able to select all its faces and vertices, but I am getting confused with the coordinates.\nThe mullion is making use of multiple nested locations: a location point for the wall, a location point for the mullion itself, and finally a location point for each face.\nThese location points are related to each other.\nAlso each face is oriented in a specific way with its own normal vector.\nMy questions are:</p><ul>\n<li>How can I determine the coordinates of a vertex in my world environment?\nI need to retrieve their X, Y and Z coordinates relative to the origin of my project at 0,0,0.</li>\n<li>How do I know the order of the vertices on the face?\nAre they always counter-clockwise oriented?</li>\n<li>How can I calculate the result of the nested locations when all of them have their own base point?</li>\n</ul><p><strong>Answer:</strong>\nFirst of all, to explore the geometry defined for Revit elements, it is useful to have a look at the Revit SDK ElementViewer and ObjectViewer samples.\nThey show you how to traverse the element geometry and extract the coordinates you are looking for.</p><p>Regarding your question on vertex ordering: if you query a solid for its mesh, the mesh triangle vertices are guaranteed to be counter-clockwise oriented when looking towards the solid from outside.</p><p>To examine the access to an element's geometry and vertex data, I created a sample model with a mass element, a curtain grid system, and some mullion elements.\nHere is an image of the curtain grid system and mullion model with one mullion selected:</p><img alt=\"Mullion model\" src=\"img/mullion_model.png\"/><p>Looking at this in the ObjectViewer displays the following dialogue with a wireframe image of the mullion:</p><img alt=\"Mullion in ObjectViewer\" src=\"img/mullion_model_ObjectViewer.png\"/><p>The geometry of each mullion element contains a symbol, symbol geometry, and a transform.\nYou can observe these elements being iterated by debugging the code and stepping through it in the Visual Studio debugger.\nI added some own new code to the object viewer to list the coordinates of the geometry traversed.\nI implemented the following utility functions for formatting real numbers and points, culminating in the definition of ListCurve to print the contents of an array of points:</p><pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">string</span> PluralSuffix( <span class=\"blue\">int</span> n )\n{\n  <span class=\"blue\">return</span> 1 == n ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span>;\n}\n \n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">string</span> DotOrColon( <span class=\"blue\">int</span> n )\n{\n  <span class=\"blue\">return</span> 1 &lt; n ? <span class=\"maroon\">\":\"</span> : <span class=\"maroon\">\".\"</span>;\n}\n \n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">string</span> RealString( <span class=\"blue\">double</span> a )\n{\n  <span class=\"blue\">return</span> a.ToString( <span class=\"maroon\">\"0.##\"</span> );\n}\n \n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">string</span> PointString( <span class=\"teal\">XYZ</span> p )\n{\n  <span class=\"blue\">return</span> <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"({0},{1},{2})\"</span>,\n    RealString( p.X ), RealString( p.Y ),\n    RealString( p.Z ) );\n}\n \n<span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">void</span> ListCurve(\n  <span class=\"teal\">XYZArray</span> pts )\n{\n  <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Empty;\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n  {\n    <span class=\"blue\">if</span>( 0 &lt; s.Length )\n    {\n      s += <span class=\"maroon\">\", \"</span>;\n    }\n    s += PointString( p );\n  }\n  <span class=\"blue\">int</span> n = pts.Size;\n  System.Diagnostics.<span class=\"teal\">Debug</span>.Print(\n    <span class=\"maroon\">\"{0} point{1}{2} {3}\"</span>,\n    n, PluralSuffix( n ),\n    DotOrColon( n ), s );\n}\n</pre><p>I then added a new method ListCurves to the class GeometryData to list the contents of its private List&lt;XYZArray&gt; m_curve3Ds member:</p><pre class=\"code\">\n<span class=\"blue\">private</span> <span class=\"blue\">void</span> ListCurves()\n{\n  <span class=\"blue\">int</span> n = m_curve3Ds.Count;\n \n  System.Diagnostics.<span class=\"teal\">Debug</span>.Print(\n    <span class=\"maroon\">\"\\n{0} curve{1}{2}\"</span>,\n    n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n    <span class=\"teal\">Util</span>.DotOrColon( n ) ) );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZArray</span> curve <span class=\"blue\">in</span> m_curve3Ds )\n  {\n    <span class=\"teal\">Util</span>.ListCurve( curve );\n  }\n}\n</pre><p>You can use the SDK global solution SDKSamples2009.sln to compile and debug this code.\nIt displays the following coordinates on the Visual Studio &gt; Debug &gt; Windows &gt; Output console when I select the mullion:</p><pre>\n10 curves:\n4 points: (-23.42,6.85,5), (-23.42,7.34,5), (-23.42,7.34,4.84), (-23.42,6.85,5)\n4 points: (-23.42,7.34,4.84), (-23.42,6.85,4.84), (-23.42,6.85,5), (-23.42,7.34,4.84)\n4 points: (-13.58,6.85,5), (-13.58,7.34,5), (-23.42,6.85,5), (-13.58,6.85,5)\n4 points: (-23.42,7.34,5), (-23.42,6.85,5), (-13.58,7.34,5), (-23.42,7.34,5)\n4 points: (-13.58,7.34,5), (-13.58,7.34,4.84), (-23.42,7.34,5), (-13.58,7.34,5)\n4 points: (-23.42,7.34,4.84), (-23.42,7.34,5), (-13.58,7.34,4.84), (-23.42,7.34,4.84)\n4 points: (-13.58,7.34,4.84), (-13.58,6.85,4.84), (-23.42,7.34,4.84), (-13.58,7.34,4.84)\n4 points: (-23.42,6.85,4.84), (-23.42,7.34,4.84), (-13.58,6.85,4.84), (-23.42,6.85,4.84)\n4 points: (-13.58,6.85,4.84), (-13.58,6.85,5), (-23.42,6.85,4.84), (-13.58,6.85,4.84)\n4 points: (-23.42,6.85,5), (-23.42,6.85,4.84), (-13.58,6.85,5), (-23.42,6.85,5)\n</pre><p>Please copy and paste this text to an editor of your choice if the lines are too long to display properly in the narrow column in the browser.</p><p>To demonstrate concept of applying the nested transformations for the various location points, I implemented a new command CmdTransformedCoords.\nIt is currently tailored to analyse and transform the vertex data of a mullion family instance, but it can obviously easily be adapted to handle other objects as well, or family instances in general.</p><p>Here is the code of the Execute method of the new CmdTransformedCoords external command:</p><pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n<span class=\"teal\">Selection</span> sel = doc.Selection;\n \n<span class=\"teal\">Options</span> options = app.Create.NewGeometryOptions();\n<span class=\"blue\">string</span> s, msg = <span class=\"blue\">string</span>.Empty;\n<span class=\"blue\">int</span> n;\n<span class=\"blue\">foreach</span>( <span class=\"teal\">RvtElement</span> e <span class=\"blue\">in</span> sel.Elements )\n{\n  <span class=\"teal\">Mullion</span> mullion = e <span class=\"blue\">as</span> <span class=\"teal\">Mullion</span>;\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != mullion )\n  {\n    <span class=\"teal\">Location</span> location\n      = mullion.Location; <span class=\"green\">// seems to be uninitialised</span>\n \n    <span class=\"teal\">LocationPoint</span> lp\n      = mullion.AsFamilyInstance.Location\n        <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n    <span class=\"teal\">GeoElement</span> geoElem\n      = mullion.get_Geometry( options );\n \n    <span class=\"teal\">GeometryObjectArray</span> objects = geoElem.Objects;\n    n = objects.Size;\n    s = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Mullion &lt;{0} {1}&gt; at {2} rotation\"</span>\n      + <span class=\"maroon\">\" {3} has {4} geo object{5}:\"</span>,\n      mullion.Name, mullion.Id.Value,\n      <span class=\"teal\">Util</span>.PointString( lp.Point ),\n      <span class=\"teal\">Util</span>.RealString( lp.Rotation ),\n      n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n    <span class=\"blue\">if</span>( 0 &lt; msg.Length ) { msg += <span class=\"maroon\">\"\\n\\n\"</span>; }\n    msg += s;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> objects )\n    {\n      <span class=\"teal\">GeoInstance</span> inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeoInstance</span>;\n      <span class=\"teal\">Transform</span> t = inst.Transform;\n \n      s = <span class=\"maroon\">\"  Transform \"</span> + <span class=\"teal\">Util</span>.TransformString( t );\n      msg += <span class=\"maroon\">\"\\n\"</span> + s;\n \n      <span class=\"teal\">GeoElement</span> elem2 = inst.SymbolGeometry;\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj2 <span class=\"blue\">in</span> elem2.Objects )\n      {\n        <span class=\"teal\">Solid</span> solid = obj2 <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n        {\n          <span class=\"teal\">FaceArray</span> faces = solid.Faces;\n          n = faces.Size;\n \n          s = <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"  {0} face{1}, face point &gt; WCS point:\"</span>,\n            n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n          msg += <span class=\"maroon\">\"\\n\"</span> + s;\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n          {\n            s = <span class=\"blue\">string</span>.Empty;\n            <span class=\"teal\">Mesh</span> mesh = face.Triangulate();\n            <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> mesh.Vertices )\n            {\n              s += ( 0 == s.Length ) ? <span class=\"maroon\">\"    \"</span> : <span class=\"maroon\">\", \"</span>;\n              s += <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} &gt; {1}\"</span>,\n                <span class=\"teal\">Util</span>.PointString( p ),\n                <span class=\"teal\">Util</span>.PointString( t.OfPoint( p ) ) );\n            }\n            msg += <span class=\"maroon\">\"\\n\"</span> + s;\n          }\n        }\n      }\n    }\n  }\n}\n<span class=\"blue\">if</span>( 0 == msg.Length )\n{\n  msg = <span class=\"maroon\">\"Please select some mullions.\"</span>;\n}\n<span class=\"teal\">Util</span>.InfoMsg( msg );\n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n</pre><p>It iterates over all selected elements and analyses mullion elements only.\nIt extracts the mullion Location property, which is apparently not initialised.\nIt uses its AsFamilyInstance property to retrieve a family instance for the mullion.\nThat also has a Location property, and this is correctly initialised to a LocationPoint.Details like this are not documented and need to be explored on a case by case basis in the debugger or using RvtMgdDbg.\nAn interesting thing about the LocationPoint object is that it has a rotation as well as point data.\nThe mullion name, element id, location point and number of its geometry objects are listed.</p><p>We iterate over the latter and expect to find a Geometry Instance object.\nThis object is used to represent a transformed copy of some symbol geometry.\nThe symbol geometry is defined once only and can then be reused in various locations.\nThe important properties of the Geometry Instance object are thus its transformation, which we store in the variable t, and the reference to its symbol geometry.</p><p>The symbol geometry again contains geometry elements, and one of them is the solid.\nWe extract its faces, query each one for its mesh to obtain a triangulation, and iterate over the mesh vertices.</p><p>The thing to pay attention to here is the series of transformations that need to be applied to each geometrical object in the nested hierarchy. In this case, the hierarchy is quite flat, and there is only one transformation involved, which is the location of the mullion in model space. The very innermost loop iterates over the vertices of the mesh of the faces of the solid. There, I print out both the location point defining the position of the mullion as a family instance, as well as the mullion geometry instance transformation data, which amount to the same, followed by the original and transformed face vertices.</p><p>The vertex coordinates are listed once in the mullion instance's local coordinate space, and then again in the world coordinate system or WCS.\nThe latter coordinates are obtained by applying the transform t, which is the instance transform, to the vertex p, by the call t.OfPoint( p ).\nApplying this transformation to the points retrieved from the faces produces the WCS points you are looking for. Here is the result for two of the mullions in the test model I created:</p><pre>\nMullion &lt;50mm x 150mm 127323&gt; at (-13.58,7.1,4.92) rotation 3.14 has 1 geo object:\n  Transform ((-13.58,7.1,4.92),(0,0,1),(0,-1,0),(1,0,0))\n  5 faces, face point &gt; WCS point:\n    (0.08,0.25,-9.84) &gt; (-23.42,6.85,5), (0.08,-0.25,-9.84) &gt; (-23.42,7.34,5), (-0.08,-0.25,-9.84) &gt; (-23.42,7.34,4.84), (-0.08,0.25,-9.84) &gt; (-23.42,6.85,4.84)\n    (0.08,0.25,0) &gt; (-13.58,6.85,5), (0.08,-0.25,0) &gt; (-13.58,7.34,5), (0.08,-0.25,-9.84) &gt; (-23.42,7.34,5), (0.08,0.25,-9.84) &gt; (-23.42,6.85,5)\n    (0.08,-0.25,0) &gt; (-13.58,7.34,5), (-0.08,-0.25,0) &gt; (-13.58,7.34,4.84), (-0.08,-0.25,-9.84) &gt; (-23.42,7.34,4.84), (0.08,-0.25,-9.84) &gt; (-23.42,7.34,5)\n    (-0.08,-0.25,0) &gt; (-13.58,7.34,4.84), (-0.08,0.25,0) &gt; (-13.58,6.85,4.84), (-0.08,0.25,-9.84) &gt; (-23.42,6.85,4.84), (-0.08,-0.25,-9.84) &gt; (-23.42,7.34,4.84)\n    (-0.08,0.25,0) &gt; (-13.58,6.85,4.84), (0.08,0.25,0) &gt; (-13.58,6.85,5), (0.08,0.25,-9.84) &gt; (-23.42,6.85,5), (-0.08,0.25,-9.84) &gt; (-23.42,6.85,4.84)\n\nMullion &lt;50mm x 150mm 127325&gt; at (6.11,7.1,4.92) rotation 3.14 has 1 geo object:\n  Transform ((6.11,7.1,4.92),(0,0,1),(0,-1,0),(1,0,0))\n  5 faces, face point &gt; WCS point:\n    (0.08,-0.25,0) &gt; (6.11,7.34,5), (-0.08,-0.25,0) &gt; (6.11,7.34,4.84), (-0.08,0.25,0) &gt; (6.11,6.85,4.84), (0.08,0.25,0) &gt; (6.11,6.85,5)\n    (-0.08,0.25,0) &gt; (6.11,6.85,4.84), (0.08,0.25,0) &gt; (6.11,6.85,5), (0.08,0.25,-9.84) &gt; (-3.74,6.85,5), (-0.08,0.25,-9.84) &gt; (-3.74,6.85,4.84)\n    (-0.08,-0.25,0) &gt; (6.11,7.34,4.84), (-0.08,0.25,0) &gt; (6.11,6.85,4.84), (-0.08,0.25,-9.84) &gt; (-3.74,6.85,4.84), (-0.08,-0.25,-9.84) &gt; (-3.74,7.34,4.84)\n    (0.08,-0.25,0) &gt; (6.11,7.34,5), (-0.08,-0.25,0) &gt; (6.11,7.34,4.84), (-0.08,-0.25,-9.84) &gt; (-3.74,7.34,4.84), (0.08,-0.25,-9.84) &gt; (-3.74,7.34,5)\n    (0.08,0.25,0) &gt; (6.11,6.85,5), (0.08,-0.25,0) &gt; (6.11,7.34,5), (0.08,-0.25,-9.84) &gt; (-3.74,7.34,5), (0.08,0.25,-9.84) &gt; (-3.74,6.85,5)\n</pre><p>Again, you may need to copy and paste this text to an editor to see the full line length.</p><p>As expected, the symbol geometry is identical for both mullions, and the only difference lies in their transformations, which lead to the differing WCS positions of their vertices.</p><p>We had to explore how to extract all this data by implementing the traversals one by one and step by step, examining the results in the debugger, and then implementing the next step to analyse where that would lead us, recompiling and retesting iteratively to dig deeper and deeper into this structure.\nThis is standard procedure, so you may as well get used to it.</p><p>Here is\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10028.zip\">\nversion 1.0.0.28</a>\n\nof the complete Visual Studio solution with the new CmdTransformedCoords command.</p>"
  }
]