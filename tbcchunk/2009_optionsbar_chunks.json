[
  {
    "original_filename": "2009_optionsbar",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- OptionsBar\n  From: Роман\n  Hi Jeremy) I'm back from holiday, and I've written a new article. I think it can be published on the blog, many people will be interested in it.\n  Link to the post on LinkedIn: https://www.linkedin.com/feed/update/urn:li:activity:7109513543590289409\n  GitHub article: https://github.com/atomatiq/OptionsBar/blob/master/Readme.md\n  Raman Karpovich\n  Lead Developer\n  http://www.atomatiq.io\n  +48 517 989 812\n  ATOMATIQ SP ZOO. ul. Zygmunta Vogla, 28, lok. 02.63, 02-963 Warsaw, Poland. NIP: 9512571785\n\n- Lijuan Zhu: engines below will be REMOVED on 10/30/2023\n  https://autodesk.slack.com/archives/C011QHANM8R/p1695262865665989\n\ntwitter:\n\nA reminder of the deprecated @AutodeskAPS DA4R 2018 engine and a great new open-source #RevitAPI productivity enhancement tool using the @AutodeskRevit OptionsBar for frequently used info, utilities, element selection options etc. #BIM @DynamoBIM https://autode.sk/optionsbar\n\nA great new open-source productivity enhancement tool making use of the built-in @AutodeskRevit OptionsBar provides handy access to frequently used information, utilities, element selection options and more, and a reminder of the deprecated @AutodeskAPS DA4R Revit 2018 engine with the #RevitAPI #BIM @DynamoBIM https://autode.sk/optionsbar\n\nA great new open-source productivity enhancement tool making use of the built-in OptionsBar provides handy access to frequently used information, utilities, element selection options and more, and a reminder of the deprecated DA4R Revit 2018 engine...\n\nlinkedin:\n\nA reminder of the deprecated #AutodeskAPS DA4R 2018 engine and a great new open-source #Revit #API productivity enhancement tool using the #Autodesk OptionsBar for frequently used info, utilities, element selection options etc.\n\nhttps://autode.sk/optionsbar\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2009_optionsbar",
    "header_text": "OptionsBar and Bye Bye to DA4R 2018",
    "local_header_href": "#optionsbar-and-bye-bye-to-da4r-2018",
    "chunk_text": "### OptionsBar and Bye Bye to DA4R 2018\n\nA great new open-source productivity enhancement tool and a reminder of the deprecated DA4R Revit engine:\n\n- [Open-source OptionsBar](#2)\n    - [Introduction](#2.1)\n    - [Configuring OptionsBar step by step](#2.2.0)\n    - [Use case 1: utilities](#2.3.1)\n    - [Use case 2: element selection options](#2.3.2)\n    - [Use case 3: marquee](#2.3.3)\n    - [Conclusion](#2.4)\n- [Bye bye DA4R 2018](#3)\n- [Method Draw online SVG editor](#4)"
  },
  {
    "original_filename": "2009_optionsbar",
    "header_text": "Open-Source OptionsBar",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Open-Source OptionsBar\n\nRaman Karpovich, aka Роман Карпович, is sharing a great new open-source Revit user interface enhancement enabling programmatic use of the options bar:\n\n- [Post on LinkedIn](https://www.linkedin.com/feed/update/urn:li:activity:7109513543590289409)\n- [GitHub article](https://github.com/atomatiq/OptionsBar/blob/master/Readme.md)\n- [GitHub repository](https://github.com/atomatiq/OptionsBar/)\n- Installers with examples in [Releases](https://github.com/atomatiq/OptionsBar/releases)\n\nEnhance the user experience and boost Revit efficiency with `OptionsBar`, a powerful tool to enhance your workflow;\n`OptionsBar` implements a convenient toolbar simplifying the addition of custom tools, options, extra functionality and information to the Revit UI:\n\n- Add custom tools to the ribbon.\n- Fine-tune model element parameters in real-time.\n- Streamline the process of selecting elements in your model.\n- Create unique user interfaces for Revit.\n\n####<a name=\"2.1\"></a> Introduction to OptionsBar\n\n[Revit](https://www.autodesk.com/products/revit/overview) is a powerful tool for building design and modelling, and undoubtedly, high efficiency in working with this software is a key aspect for successful projects.\nOne of the tools that contributes to this efficiency is\nthe [OptionsBar](https://help.autodesk.com/view/RVT/2024/ENU/?guid=GUID-28BDE98C-E8A9-4C74-8ABC-9DABD13163D9).\nThis convenient toolbar within Revit has tremendous potential, but not many people are aware of its capabilities and how to configure it.\n\nIt offers capabilities that span from adding your own tools on the toolbar to displaying information about the operation of your own add-ins.\nHowever, the Revit API documentation doesn't offer sufficient information on fully harnessing the potential of OptionsBar.\n\nBefore we begin customizing the OptionsBar, we'll need to add the necessary dependencies and create a controller to manage this panel.\n\nTechnologies Used:\n\n- Language: C#\n- UI framework: WPF\n\n####<a name=\"2.2.0\"></a> Configuring OptionsBar Step by Step\n\nLet's delve into the process of configuring OptionsBar and how to do it most efficiently.\n\n####<a name=\"2.2.1\"></a> Step 1: Adding Dependencies\n\nUnderstanding that the user interface in Revit is implemented using WPF (Windows Presentation Foundation) technology helps us access all the interface elements.\nFor this, we'll need the `AdWindows.dll` library, which comes with Revit.\n\nTo compile the project on any device, let's add a NuGet package to the `.csproj` project file as follows:\n\n<pre class=\"prettyprint lang-xml\">\n&lt;ItemGroup&gt;\n  &lt;PackageReference Include=\"Nice3point.Revit.Api.AdWindows\" Version=\"$(RevitVersion).*\"/&gt;\n&lt;/ItemGroup&gt;\n</pre>\n\n####<a name=\"2.2.2\"></a> Step 2: Creating a Controller\n\nTo control OptionsBar, we'll need a controller that handles its display and hiding.\nTo access the Revit ribbon and OptionsBar, we'll use the static property `ComponentManager.Ribbon` from the `AdWindows.dll` library that we included in the previous step.\n\nThe process of configuring OptionsBar can be divided into the following stages:\n\n1. Finding the built-in panel.\n2. Creating a custom panel.\n3. Hiding/showing the built-in and custom panels.\n\nIt's important to note that we don't remove or replace the built-in OptionsBar panel to avoid disrupting Revit's functionality.\nInstead, we simply hide it and display our custom panel when necessary.\n\nLet's take a look at a code example that allows displaying and hiding the custom panel:\n\n<pre class=\"prettyprint lang-cs\">\npublic static class RibbonController\n{\n  private static readonly Grid RootGrid;\n  private static ContentPresenter _panelPresenter;\n  private static readonly FrameworkElement InternalToolPanel;\n\n  static RibbonController()\n  {\n    RootGrid = VisualUtils.FindVisualParent&lt;Grid&gt;(ComponentManager.Ribbon, \"rootGrid\");\n    if (RootGrid is null) throw new InvalidOperationException(\"Cannot find root grid in Revit UI\");\n\n    InternalToolPanel = VisualUtils.FindVisualChild&lt;DialogBarControl&gt;(RootGrid, string.Empty);\n    if (InternalToolPanel is null) throw new InvalidOperationException(\"Cannot find internal tool panel in Revit UI\");\n  }\n\n  public static void ShowOptionsBar(FrameworkElement content)\n  {\n    if (_panelPresenter is not null)\n    {\n      _panelPresenter.Content = content;\n      _panelPresenter.Visibility = Visibility.Visible;\n      InternalToolPanel.Height = 0;\n      return;\n    }\n\n    _panelPresenter = CreateOptionsBar();\n    _panelPresenter.Content = content;\n\n    InternalToolPanel.Height = 0;\n  }\n\n  public static void HideOptionsBar()\n  {\n    if (_panelPresenter is null) return;\n\n    _panelPresenter.Content = null;\n    _panelPresenter.Visibility = Visibility.Collapsed;\n\n    InternalToolPanel.Height = 26;\n  }\n\n  private static ContentPresenter CreateOptionsBar()\n  {\n    const int panelRow = 2;\n\n    RootGrid.RowDefinitions.Insert(2, new RowDefinition\n    {\n      Height = new GridLength(1, GridUnitType.Auto)\n    });\n\n    foreach (UIElement child in RootGrid.Children)\n    {\n      var row = Grid.GetRow(child);\n      if (row &gt; 1) Grid.SetRow(child, row + 1);\n    }\n\n    var panelPresenter = new ContentPresenter();\n    Grid.SetRow(panelPresenter, panelRow);\n    RootGrid.Children.Add(panelPresenter);\n\n    return panelPresenter;\n  }\n}\n</pre>\n\nIn the example, only public properties of the Revit API and system methods of WPF are used.\nInteraction with the ribbon is implemented with the `ShowOptionsBar()` and `HideOptionsBar()` methods.\nThe `ShowOptionsBar()` method takes any FrameworkElement, which will be displayed to the user.\n\n####<a name=\"2.2.3\"></a> Step 3: Creating a User Interface\n\nTo create a user interface for OptionsBar, we'll use the MVVM (Model-View-ViewModel) pattern and the WPF (Windows Presentation Foundation) framework.\n\nFor example, let's consider a simple panel layout with a text field and a dropdown list:\n\n<center>\n<!-- https://github.com/Nice3point/OptionsBar/assets/20504884/3932ef5f-82e0-4b59-bc61-b95aef6199c8 -->\n<img src=\"img/rk_optionsbar_2.jpg\" alt=\"OptionsBar\" title=\"OptionsBar\" width=\"600\"/>\n</center>\n\n<pre class=\"prettyprint lang-xml\">\n&lt;StackPanel\n    x:Class=\"OptionsBar.Views.OptionsView\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:viewModels=\"clr-namespace:OptionsBar.ViewModels\"\n    d:DataContext=\"{d:DesignInstance Type=viewModels:OptionsViewModel}\"\n    mc:Ignorable=\"d\"\n    Background=\"#FFE5F0D7\"\n    Orientation=\"Horizontal\"\n    Height=\"26\"\n    d:DesignWidth=\"430\"&gt;\n  &lt;TextBlock\n    Margin=\"10 0 0 0\"\n    Text=\"Wall options\"\n    VerticalAlignment=\"Center\" /&gt;\n  &lt;Border\n    Width=\"3\"\n    BorderThickness=\"1 0\"\n    BorderBrush=\"Azure\"\n    Background=\"Gray\"\n    Margin=\"10 0\" /&gt;\n  &lt;TextBlock\n    Text=\"Offset: \"\n    VerticalAlignment=\"Center\" /&gt;\n  &lt;TextBox\n    Width=\"100\"\n    Margin=\"10 1 0 1\"\n    VerticalContentAlignment=\"Center\"\n    Text=\"{Binding Offset, UpdateSourceTrigger=PropertyChanged}\" /&gt;\n  &lt;TextBlock\n    Text=\"Constraint: \"\n    Margin=\"10 0 0 0\"\n    VerticalAlignment=\"Center\" /&gt;\n  &lt;ComboBox\n    Width=\"100\"\n    Margin=\"10 1 0 1\"\n    VerticalContentAlignment=\"Center\"\n    SelectedIndex=\"0\"\n    ItemsSource=\"{Binding Constraints}\" /&gt;\n&lt;/StackPanel&gt;\n</pre>\n\nSample code for the ViewModel:\n\n<pre class=\"prettyprint lang-cs\">\npublic partial class OptionsViewModel : ObservableObject\n{\n  [ObservableProperty] private double _offset;\n  [ObservableProperty] private string[] _constraints;\n}\n</pre>\n\nThe layout is no different from regular WPF applications, but the root element will be a container like StackPanel, Grid, and so on, since OptionBar is embedded in the Revit UI.\n\n####<a name=\"2.3\"></a> Use Cases\n\nOptionsBar provides endless possibilities for streamlining the workflow in Revit.\nLet's explore some of the most popular use cases:\n\n####<a name=\"2.3.1\"></a> Use Case 1: Utilities\n\nOptionsBar can be used to add custom tools that can be conveniently placed on the toolbar.\nThis is especially useful when creating a separate window is unnecessary.\n\n<center>\n<!-- https://github.com/Nice3point/OptionsBar/assets/20504884/3932ef5f-82e0-4b59-bc61-b95aef6199c8 -->\n<img src=\"img/rk_optionsbar_3.jpg\" alt=\"OptionsBar\" title=\"OptionsBar\" width=\"600\"/>\n</center>\n\n####<a name=\"2.3.2\"></a> Use Case 2: Element Selection Options\n\nThis scenario covers situations where a user is working with a model in Revit and needs to select a specific element for further editing.\nFor more convenient and intuitive parameter customization, you can use OptionsBar instead of creating additional windows.\n\nExample: Suppose you have a plugin that allows users to adjust the top offset of a wall. Let's see how to arrange all the tools on the OptionsBar panel.\n\n<center>\n<!-- https://github.com/Nice3point/OptionsBar/assets/20504884/65a508ce-2f9c-414d-80b3-f996b5e679d6 -->\n<img src=\"img/rk_optionsbar_4.jpg\" alt=\"OptionsBar\" title=\"OptionsBar\" width=\"600\"/>\n</center>\n\n- Step 1: Adding OptionsBar to the Revit Ribbon\n\n  The first step in this scenario is to set up OptionsBar for display on the Revit ribbon.\n  You can create your own view for OptionsBar with parameters that the user can customize.\n\n  Example code using the MVVM pattern:\n\n<pre class=\"prettyprint lang-cs\">\n  private OptionsViewModel SetupOptionsBar()\n  {\n    var options = new OptionsViewModel\n    {\n      Offset = 0,\n      Constraints = Document.EnumerateInstances&lt;Level&gt;(BuiltInCategory.OST_Levels).Select(level => level.Name).ToArray()\n    };\n\n    var view = new OptionsView(options);\n    RibbonController.ShowOptionsBar(view);\n    return options;\n  }\n</pre>\n\n- Step 2: Selecting an Element\n\n  After configuring OptionsBar, the user selects an element in the model with which they want to work.\n  This could be, for example, selecting a wall to adjust the offset.\n\n  Example code for element selection:\n\n<pre class=\"prettyprint lang-cs\">\n  private Wall PickWall()\n  {\n    var selectionConfiguration = new SelectionConfiguration().Allow.Element(selection => selection is Wall);\n    var reference = UiDocument.Selection.PickObject(ObjectType.Element, selectionConfiguration.Filter, \"Select wall\");\n    return reference.ElementId.ToElement&lt;Wall&gt;(Document);\n  }\n</pre>\n\n- Step 3: Adjusting Element Parameters\n\n  Now that the user has selected an element and OptionsBar is configured, you can start adjusting the element's parameters.\n  We'll take the offset value from the ViewModel entered by the user and set it to the wall parameter.\n\n  Example code for adjusting element parameters:\n\n<pre class=\"prettyprint lang-cs\">\n  private void ModifyWall(Wall wall, OptionsViewModel options)\n  {\n    using var transaction = new Transaction(Document);\n    transaction.Start(\"Set offset\");\n    wall.GetParameter(BuiltInParameter.WALL_TOP_OFFSET)!.Set(options.Offset);\n    transaction.Commit();\n  }\n</pre>\n\n- Step 4: Restoring the Revit Ribbon\n\n  After completing the element parameter configuration, it's important to hide OptionsBar and restore the normal state of the Revit ribbon.\n  To do this, add a `finally` block after calling all the methods.\n\n<pre class=\"prettyprint lang-cs\">\n  public override void Execute()\n  {\n    try\n    {\n      var options = SetupOptionsBar();\n      var wall = PickWall();\n      ModifyWall(wall, options);\n    }\n    catch (OperationCanceledException)\n    {\n      // ignored\n    }\n    finally\n    {\n      RibbonController.HideOptionsBar();\n    }\n  }\n</pre>\n\n  This scenario allows users to quickly and conveniently customize the parameters of model elements without the need to open additional windows or perform extra actions.\n  OptionsBar makes the process of editing elements more intuitive and efficient.\n\n####<a name=\"2.3.3\"></a> Use Case 3: Marquee\n\nWant something unusual? A marquee can add excitement to your mundane modeling routine.\n\n<center>\n<!-- https://github.com/Nice3point/OptionsBar/assets/20504884/9427569b-1cce-41c8-a1f5-e88bea4c8683 -->\n<img src=\"img/rk_optionsbar_5.gif\" alt=\"OptionsBar\" title=\"OptionsBar\" width=\"600\"/>\n</center>\n\n####<a name=\"2.4\"></a> Conclusion\n\nOptionsBar is a powerful tool in Revit that allows you to optimize your workflow and make it more efficient.\nDon't limit yourself to the described use cases — experiment, create your unique solutions, and make working in Revit even more productive."
  },
  {
    "original_filename": "2009_optionsbar",
    "header_text": "Bye Bye DA4R 2018",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Bye Bye DA4R 2018\n\nThe Autodesk Platform Services APS consists of several distinct components working together.\n\nOne of them is the viewer, which works with a streamlined generic optimised viewing data format, stripped of much of the original information such as constraints and detailed domain-specific information present in the seed CAD files generated by model authoring tools such as AutoCAD, Inventor and Revit.\n\nAnother important component is the Design Automation API DA that enables processing, generation and manipulation of the seed CAD files using so-called engines running on virtual machines in the cloud.\n\nHere is a quick reminder that the following engines will be REMOVED on October 30, 2023:\n\n- Autodesk.AutoCAD.20_1\n- Autodesk.AutoCAD.21\n- Autodesk.AutoCAD.22\n- Autodesk.Inventor.2018\n- Autodesk.Inventor.22\n- Autodesk.Revit.2018\n\nFor more information on this, please refer to\nthe [APS Engine Lifecycle Policy](https://aps.autodesk.com/en/docs/design-automation/v3/developers_guide/engine-lifecycle/).\n\nIn general, the following rules apply:\n\n- Engine versions are supported for 4 calendar years after the initial release of the corresponding desktop product.\n- After 4 years, the engine version becomes deprecated, but remains available for an additional 2 years and then removed.\n- A deprecated engine version can no longer be referenced in new appbundles and activities, but all existing references continue to work.\n- All attempts to reference a removed engine version will fail.\n\nSo, in the case of Revit, please take heed if you are still using the Revit 2018 engine in DA4R and update to a more recent version before the end of next month."
  },
  {
    "original_filename": "2009_optionsbar",
    "header_text": "Method Draw Online SVG Editor",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Method Draw Online SVG Editor\n\nI keep looking for a handy online vector editor that enables precise measurement, e.g., for creating a simple 2D work sketch with exact millimetre dimensions for a carpentry project.\n\nI found a new likely candidate now, [Method Draw](https://editor.method.ac):\n\n> [Method Draw](https://editor.method.ac) is a simple <a href=\"https://github.com/methodofaction/Method-Draw\">open source</a> vector drawing application. Method Draw was forked from <a href=\"https://github.com/SVG-Edit/svgedit\">SVG-Edit</a> several years ago with the goal of improving and modernizing the interface.\n\n> At this time (2021), the author (<a href=\"http://method.ac/writing\">Mark MacKay</a>) is working on improving stability and improving the codebase, which contains a lot of legacy practices. The goal is to create a vector editor suitable for simple graphic design tasks.\n\nI'll let you know how I get on with that.\nIf you have a recommendation, please let me know.\nThx!"
  }
]