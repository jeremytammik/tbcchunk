[
  {
    "original_filename": "0565_nested_instances",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0565_nested_instances",
    "header_text": "Nested Lighting Fixture Instances",
    "local_header_href": "#nested-lighting-fixture-instances",
    "chunk_text": "<h3>Nested Lighting Fixture Instances</h3><p>We already looked at a couple of aspects of nested family instances, such as access to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nnested instance geometry</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/nested-family.html\">\ncreating nested families</a>\n\nand \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/nested-family-instance.html\">\ndetermining whether a family instance is nested</a>.\n\n\n<p>Now Joel Spahn of <a href=\"http://www.agi32.com\">Lighting Analysts, Inc.</a> submitted a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/nested-family-utility-methods.html?cid=6a00e553e168978833014e86ea5f26970d#comment-6a00e553e168978833014e86ea5f26970d\">\ncomment</a> on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/nested-family-utility-methods.html\">\nnested family utility methods</a> raising \n\na new question related to nested lighting fixtures, efficiently resolved by Harry Mattison of the Revit development team:\n\n<p><strong>Question:</strong> I have adapted this code to extract nested family instances and it works beautifully. \nHowever, I have a new problem.\n\n<p>I need to extract  the location and position of all the light source elements in a lighting fixture family which contains nested lighting fixture family instances.\n\n<p>Based on my testing, the filtered element collector does not return nested family instances.  \nIf this is true, how can I query the nested family instances?\n\n<p>My initial solution to this problem was to open the family document to collect and iterate the nested family instances. \nThere are two problems to this approach:\n\n<ol>\n<li>It is performance intensive and dramatically slows the operation.\n<li>It cannot handle \"dynamic\" families (most important).\n</li></li></ol>\n<p>That is, how can I extract the nested family instances if the quantity and position of the nested family instances is different for each instance of the parent family in the project?\n\n<p>Example: I have a lighting fixture family (track light) that contains nested lighting fixture family instances (each can-light on the track). The nested instances are part of an array which is defined by the parent instance in the project. \nEach parent instance can have a different number of nested instances, as described in the documentation on\n\n<a href=\"http://docs.autodesk.com/REVIT/2010/ENU/Revit%20Architecture%202010%20Users%20Guide/RAC/index.html?url=WS73099cc142f487553b93539f117a2602bd5-62b4.htm,topicNumber=d0e97197\">\ncreating lighting fixtures with multiple light sources</a>.\n\n<p>Initially I thought that the FamilyInstance.SubComponents property would work for this, however it is always null! When does the SubComponents property return anything?  The API documentation is very sparse.\n\n<p>Any ideas on how to access nested family instances given the parent instance?  \n\n\n<p><strong>Answer:</strong> I need more information about the SubComponents property that is not working for you.\nI tried the following code with the \"Table-Dining Round w Chairs.rfa\" from the Revit Furniture library:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">FamilyInstance</span> fi = doc.get_Element( \n    uidoc.Selection.PickObject( \n      ObjectType.Element ).ElementId ) \n    <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"teal\">ElementSet</span> subElemSet = fi.SubComponents;\n \n  <span class=\"blue\">if</span>( subElemSet != <span class=\"blue\">null</span> )\n  {\n    <span class=\"blue\">string</span> subElems = <span class=\"maroon\">\"\"</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> ee <span class=\"blue\">in</span> subElemSet )\n    {\n      <span class=\"teal\">FamilyInstance</span> f = ee <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n      subElems = subElems + f.Name + <span class=\"maroon\">\"\\n\"</span>;\n    }\n \n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Revit\"</span>, \n      <span class=\"maroon\">\"Subcomponent count = \"</span> + subElemSet.Size \n      + <span class=\"maroon\">\"\\n\"</span> + subElems );\n  }\n \n  <span class=\"teal\">FamilyInstance</span> super = fi.SuperComponent \n    <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"blue\">if</span>( super != <span class=\"blue\">null</span> )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Revit\"</span>, \n      <span class=\"maroon\">\"SUPER component: \"</span> + super.Name );\n  }\n</pre>\n<p>It provides the expected output:</p>\n<center>\n<img alt=\"Nested furniture instances\" src=\"img/nested_instances_1.png\"/>\n</center>\n<p><strong>Response:</strong> The sample code works for me as well when I select an instance of Table-Dining Round w Chairs.\n\n<p>However, it does not work when I select an instance Nested Table Lamp, which is a very simple Lighting Fixture family with four nested Lighting Fixture Families.  \nBoth family instances are visible from the 3D view.\n\n<p><strong>Answer:</strong> The mesh geometry of the light sources can be found as follows:\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilyInstance</span> fi;\n  <span class=\"teal\">GeometryElement</span> geomElem = fi.get_Geometry( \n    app.Create.NewGeometryOptions() );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geomObj \n    <span class=\"blue\">in</span> geomElem.Objects )\n  {\n    <span class=\"teal\">GeometryInstance</span> geomInst \n      = geomObj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n \n    <span class=\"blue\">if</span>( geomInst != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> geomObject \n        <span class=\"blue\">in</span> geomInst.SymbolGeometry.Objects )\n      {\n        <span class=\"teal\">GraphicsStyle</span> gStyle = doc.get_Element( \n          geomObject.GraphicsStyleId ) \n          <span class=\"blue\">as</span> <span class=\"teal\">GraphicsStyle</span>;\n \n        <span class=\"blue\">if</span>( gStyle != <span class=\"blue\">null</span> )\n        {\n          <span class=\"blue\">if</span>( gStyle.GraphicsStyleCategory.Name \n            == <span class=\"maroon\">\"Light Source\"</span> )\n          {\n            <span class=\"teal\">Mesh</span> mesh = geomObject <span class=\"blue\">as</span> <span class=\"teal\">Mesh</span>;\n          }\n        }\n      }\n    }\n  }\n</pre>\n<p>Is that sufficient for you to get the location &amp; position information that you mentioned?\n\n<p>The lamps are not found by the SubComponents property because the \"Shared\" property is false:</p>\n<center>\n<img alt=\"Shared property is false\" src=\"img/nested_instances_2.png\"/>\n</center>\n<p>We will update the API documentation to explain this requirement.\n\n<p><strong>Response:</strong> I thought of using the mesh geometry, but this approach doesn't allow access to important parameter data such as the photometric data that the mesh is built from.\n\n<p>However, I forgot about the behaviour of \"shared\" light fixtures.  \nThis seems to solve the issue and after sharing all the nested light fixtures, the subcomponents property works as expected.\n\n<p>Many thanks to Joel and Harry for this fruitful exploration, and for kindly sharing the results with us!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]