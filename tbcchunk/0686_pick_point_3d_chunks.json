[
  {
    "original_filename": "0686_pick_point_3d",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0686_pick_point_3d",
    "header_text": "Pick a Point in 3D",
    "local_header_href": "#pick-a-point-in-3d",
    "chunk_text": "<h3>Pick a Point in 3D</h3><p>Today is the second day of AU for me, the first 'real' day of the conference.\nI woke up at two in the morning, got back to sleep again eventually, but gave up at five and thus had plenty of time for a final private dress rehearsal for my lecture on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible</a>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/05/extensible-storage-of-a-map.html\">\nstorage</a> API\n\nlater today.\nI needed that, since it is a couple of weeks since I submitted the material and all but forgot what it is about at all.\nNow I will be busy all the rest of the day running back and forth between the DevLab and my lecture.\n\n<p>On a completely different topic, here is a question on picking points in space that has already come up a few times:\n\n<p><strong>Question:</strong> The Selection.PickPoint method is limited to selecting points on the active work plane. \nIs there any way to pick an arbitrary 3D point, regardless of work plane? \n\n<p><strong>Answer:</strong> Just as you say, the PickPoint method only allows point selection in the current work plane. \nAs stated by the Revit API help file RevitAPI.chm, the various overloads of PickPoint prompt the user to pick a point on the active sketch plane using optionally specified \nsnap settings. \nThe Revit API does not offer any other method to pick a point arbitrarily in 3D space.\n\n<p>So what if you need to pick a point somewhere in space that is not on the active work plane?\n\n<p>Well, if you know a plane on which the point needs to be selected, you can temporarily set the active work plane to that plane.\nThis approach was actually already mentioned briefly in the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/point-cloud-snap-and-freeze.html\">\nsnapping to individual points in a point cloud</a>.\nYou need a sketch plane in your document in order to set the active work plane, so you may want to encapsulate the entire operation in a dummy transaction in which to create a temporary sketch plane for that purpose.\n\n<p>I implemented a new external command CmdPickPoint3d in The Building Coder samples to demonstrate this by prompting the user to first select a face on an element and then pick a point on that face. \nThe element face picked first is used to temporarily redefine the active work plane, on which the second point can be picked.\n\n<p>This is implemented by the method PickFaceSetWorkPlaneAndPickPoint:\n\n<pre class=\"code\">\n<span class=\"blue\">bool</span> PickFaceSetWorkPlaneAndPickPoint( \n  <span class=\"teal\">UIDocument</span> uidoc,\n  <span class=\"blue\">out</span> <span class=\"teal\">XYZ</span> point_in_3d )\n{\n  point_in_3d = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject( \n    <span class=\"teal\">ObjectType</span>.Face,\n    <span class=\"maroon\">\"Please select a planar face to define work plane\"</span> );\n \n  <span class=\"teal\">Element</span> e = doc.get_Element( r.ElementId );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e )\n  {\n    <span class=\"teal\">PlanarFace</span> face \n      = e.GetGeometryObjectFromReference( r )\n        <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n \n    <span class=\"blue\">if</span>( face != <span class=\"blue\">null</span> )\n    {\n      <span class=\"teal\">Plane</span> plane = <span class=\"blue\">new</span> <span class=\"teal\">Plane</span>(\n        face.Normal, face.Origin );\n \n      <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n \n      t.Start( <span class=\"maroon\">\"Temporarily set work plane\"</span>\n        + <span class=\"maroon\">\" to pick point in 3D\"</span> );\n \n      <span class=\"teal\">SketchPlane</span> sp = doc.Create.NewSketchPlane(\n        plane );\n \n      uidoc.ActiveView.SketchPlane = sp;\n      uidoc.ActiveView.ShowActiveWorkPlane();\n \n      <span class=\"blue\">try</span>\n      {\n        point_in_3d = uidoc.Selection.PickPoint(\n          <span class=\"maroon\">\"Please pick a point on the plane\"</span>\n          + <span class=\"maroon\">\" defined by the selected face\"</span> );\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n      {\n      }\n \n      t.RollBack();\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"blue\">null</span> != point_in_3d;\n}\n</pre>\n<p>Note that as always, we need to encapsulate the call to PickPoint in an exception handler in order to gracefully take care of the use cancelling the selection operation.\n\n<p>PickFaceSetWorkPlaneAndPickPoint is driven by the following trivial Execute mainline:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n  <span class=\"teal\">XYZ</span> point_in_3d;\n \n  <span class=\"blue\">if</span>( PickFaceSetWorkPlaneAndPickPoint( \n    uidoc, <span class=\"blue\">out</span> point_in_3d ) )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"3D Point Selected\"</span>,\n      <span class=\"maroon\">\"3D point picked on the plane\"</span>\n      + <span class=\"maroon\">\" defined by the selected face: \"</span>\n      + <span class=\"teal\">Util</span>.PointString( point_in_3d ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">else</span>\n  {\n    message = <span class=\"maroon\">\"3D point selection failed\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n}\n</pre>\n<p>Here are a couple of screen snapshots showing this command in action:\n\n<ul>\n<li>Prompt the user to select a face on an element:\n\n<p></p><img alt=\"\" src=\"img/pick_point_3d_select_face.png\"/>\n<li>Set the active work plane and prompt the user to pick a point on it:\n\n<p></p><img alt=\"\" src=\"img/pick_point_3d_select.png\"/>\n<li>Report the result:\n</li></li></li></ul>\n<img alt=\"\" src=\"img/pick_point_3d_result.png\"/>\n<p>Here is\n\n<a href=\"zip/bc_12_95.zip\">\nversion 2012.0.95.0</a> of\n\nThe Building Coder samples including the new CmdPickPoint3d command.\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]