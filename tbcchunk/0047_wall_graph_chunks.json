[
  {
    "original_filename": "0047_wall_graph",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style type=\"text/css\">\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n</style>"
  },
  {
    "original_filename": "0047_wall_graph",
    "header_text": "Wall Graph",
    "local_header_href": "#wall-graph",
    "chunk_text": "<h3>Wall Graph</h3><p>How can I retrieve the wall graph from the Revit API?</p><p>I am trying to retrieve the wall connections or wall graph from a Revit drawing using the API.\nIn AutoCAD Architecture, this is exposed through the wall graph class.\nIs there any corresponding object that I can use in Revit to give me this information?</p><p>The LocationCurve ElementsAtJoin property returns all the connected walls that join a wall at its two end points. \nYou can retrieve the wall's location curve though its Location property. \nHere is some sample code implementing a new external command class CmdWallNeighbours that demonstrates this:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; walls = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n  <span class=\"blue\">if</span>( !<span class=\"teal\">Util</span>.GetSelectedElementsOrAll(\n    walls, doc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ) ) )\n  {\n    <span class=\"teal\">Selection</span> sel = doc.Selection;\n    message = ( 0 &lt; sel.Elements.Size )\n      ? <span class=\"maroon\">\"Please select some wall elements.\"</span>\n      : <span class=\"maroon\">\"No wall elements found.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n  }\n \n  <span class=\"blue\">int</span> i, n;\n  <span class=\"blue\">string</span> desc, s = <span class=\"blue\">null</span>;\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; neighbours;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Wall</span> wall <span class=\"blue\">in</span> walls )\n  {\n    desc = <span class=\"teal\">Util</span>.ElementDescription( wall );\n \n    <span class=\"teal\">LocationCurve</span> c\n      = wall.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == c )\n    {\n      s = desc + <span class=\"maroon\">\": No wall curve found.\"</span>;\n    }\n    <span class=\"blue\">else</span>\n    {\n      s = <span class=\"blue\">string</span>.Empty;\n \n      <span class=\"blue\">for</span>( i = 0; i &lt; 2; ++i )\n      {\n        neighbours = c.get_ElementsAtJoin( i );\n        n = neighbours.Count;\n \n        s += <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"\\n\\n{0} {1} point has {2} neighbour{3}{4}\"</span>,\n          desc,\n          (0 == i ? <span class=\"maroon\">\"start\"</span> : <span class=\"maroon\">\"end\"</span>),\n          n,\n          <span class=\"teal\">Util</span>.PluralSuffix( n ),\n          <span class=\"teal\">Util</span>.DotOrColon( n ) );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Wall</span> nb <span class=\"blue\">in</span> neighbours )\n        {\n          s += <span class=\"maroon\">\"\\n  \"</span> +\n            <span class=\"teal\">Util</span>.ElementDescription( nb );\n        }\n      }\n    }\n    <span class=\"teal\">Util</span>.InfoMsg( s );\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n}\n</pre><p>Unfortunately, if two walls intersect in the middle of one of them, there is no API call to retrieve the connected wall.</p><p>Thanks to Chris Arps of \n\n<a href=\"http://www.americad.com\">\nAmeri-CAD Inc.</a>\n\nfor raising this issue, and Joe Ye of Autodesk for providing the answer.</p><p>Note that if a wall has at least one neighbour at one end, then the list of joined elements will include the wall itself as well, so that you get either zero neighbours or two or more, and one of them is the wall itself, which obviously can be filtered away from the list.</p><p>Here is the result of running this command on a small rectangular house with four walls:</p><pre>\nWalls &lt;127248 Jt&gt; start point has 2 neighbours:\n  Walls &lt;127248 Jt&gt;\n  Walls &lt;127251 Jt&gt;\n\nWalls &lt;127248 Jt&gt; end point has 2 neighbours:\n  Walls &lt;127248 Jt&gt;\n  Walls &lt;127249 Jt&gt;\n\n\nWalls &lt;127249 Jt&gt; start point has 2 neighbours:\n  Walls &lt;127248 Jt&gt;\n  Walls &lt;127249 Jt&gt;\n\nWalls &lt;127249 Jt&gt; end point has 2 neighbours:\n  Walls &lt;127249 Jt&gt;\n  Walls &lt;127250 Jt&gt;\n\n\nWalls &lt;127250 Jt&gt; start point has 2 neighbours:\n  Walls &lt;127249 Jt&gt;\n  Walls &lt;127250 Jt&gt;\n\nWalls &lt;127250 Jt&gt; end point has 2 neighbours:\n  Walls &lt;127250 Jt&gt;\n  Walls &lt;127251 Jt&gt;\n\n\nWalls &lt;127251 Jt&gt; start point has 2 neighbours:\n  Walls &lt;127250 Jt&gt;\n  Walls &lt;127251 Jt&gt;\n\nWalls &lt;127251 Jt&gt; end point has 2 neighbours:\n  Walls &lt;127248 Jt&gt;\n  Walls &lt;127251 Jt&gt;\n</pre><p>Here is the result of running it on a set of only two walls joined at their common end point:</p><pre>\nWalls &lt;127876 Jt&gt; start point has 0 neighbours.\n\nWalls &lt;127876 Jt&gt; end point has 2 neighbours:\n  Walls &lt;127876 Jt&gt;\n  Walls &lt;127933 Jt&gt;\n\nWalls &lt;127933 Jt&gt; start point has 2 neighbours:\n  Walls &lt;127876 Jt&gt;\n  Walls &lt;127933 Jt&gt;\n\nWalls &lt;127933 Jt&gt; end point has 0 neighbours.\n</pre><p>Here is an updated\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/bc10014.zip\">\nversion 1.0.0.14</a>\n\nof the complete Visual Studio solution,\nincluding the new CmdWallNeighbours and all other commands discussed so far.</p><p>Note that this algorithm only reports the wall endpoint connections. If midpoint connections are required as well, some other algorithm will have to be used. The first idea that comes to mind is to retrieve all the wall center lines and treat is as a segment intersection problem in the plane: given a set S of n closed segments in the plane, report all intersection points among the segments in S. This doesn't seem like a challenging problem: one can take each pair of segments, compute whether they intersect, and, if so, report their intersection point. This brute force algorithm requires O(n^2) time. This is not a practical algorithm in real life. Wei Qian describes a more efficient \n\n<a href=\"http://www.lems.brown.edu/~wq/projects/cs252.html\">\nsweep line algorithm for segment intersection</a>\n\nwhich is O((n + i) log n), where i is the number of intersection points of segments in S. Obviously, one would have to sort the various wall center lines into different buckets for separate buildings and levels and possibly other relevant groupings before feeding them into such a algorithm.</p>"
  }
]