[
  {
    "original_filename": "1301_newfamilyinstance_face",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1301_newfamilyinstance_face",
    "header_text": "Re-Researching Lighting Family Instance Placement",
    "local_header_href": "#re-researching-lighting-family-instance-placement",
    "chunk_text": "<h3>Re-Researching Lighting Family Instance Placement</h3><p>The placement of family instances can sometimes be a tricky topic in the Revit API.</p><p>Programmatically, this is always achieved using the NewFamilyInstance method.</p><p>However, this method provides 13 different overloads to choose from, which can be a non-trivial task:</p><ul>\n<li>NewFamilyInstance(Face, Line, FamilySymbol) –  Inserts a new instance of a family onto a face of an existing element, using a line on that face for its position, and a type/symbol.</li>\n<li>NewFamilyInstance(Line, FamilySymbol, View) –  Add a line based detail family instance into the Autodesk Revit document, using an line and a view where the instance should be placed.</li>\n<li>NewFamilyInstance(Reference, Line, FamilySymbol) –  Inserts a new instance of a family onto a face referenced by the input Reference instance, using a line on that face for its position, and a type/symbol.</li>\n<li>NewFamilyInstance(XYZ, FamilySymbol, StructuralType) –  Inserts a new instance of a family into the document, using a location and a type/symbol.</li>\n<li>NewFamilyInstance(XYZ, FamilySymbol, View) –  Add a new family instance into the Autodesk Revit document, using an origin and a view where the instance should be placed.</li>\n<li>NewFamilyInstance(Curve, FamilySymbol, Level, StructuralType) –  Inserts a new instance of a family into the document, using a curve, type/symbol and reference level. </li>\n<li>NewFamilyInstance(Face, XYZ, XYZ, FamilySymbol) –  Inserts a new instance of a family onto a face of an existing element, using a location, reference direction, and a type/symbol.</li>\n<li>NewFamilyInstance(Reference, XYZ, XYZ, FamilySymbol) –  Inserts a new instance of a family onto a face referenced by the input Reference instance, using a location, reference direction, and a type/symbol.</li>\n<li>NewFamilyInstance(XYZ, FamilySymbol, Level, StructuralType) –  Inserts a new instance of a family into the document, using a location, type/symbol and a base level. </li>\n<li>NewFamilyInstance(XYZ, FamilySymbol, Element, StructuralType) –  Inserts a new instance of a family into the document, using a location, type/symbol, and the host element.</li>\n<li>NewFamilyInstance(XYZ, FamilySymbol, Element, Level, StructuralType) –  Inserts a new instance of a family into the document, using a location, type/symbol, the host element and a base level. </li>\n<li>NewFamilyInstance(XYZ, FamilySymbol, XYZ, Element, StructuralType) –  Inserts a new instance of a family into the document, using a location, type/symbol, the host element and a reference direction.</li>\n</ul><p>The Building Coder topic group\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.25\">\n5.25</a> deals with the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.25\">\nFamily API and placing family instances</a> in\n\ngeneral and explored the more specialised issue of selecting the correct\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/newfamilyinstance-overloads.html\">\nNewFamilyInstance method overload</a> to\n\nuse for specific given families way back in 2011.</p><p>The addition of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/09/family-instance-placement.html\">\nfamily instance placement type</a> functionality\n\nwith the FamilyPlacementType enumeration and a corresponding property on the Family class simplified this task significantly.</p><p>It can still be non-trivial figuring out which overload to use though, especially if you are lazy or forgetful and don't remember all of the possibilities, as in my case.</p><p>Here is an interesting example of a completely useless and much too exhaustive search to determine how to create copies of a ceiling hosted light fixture, only to end up with the same result we already published in 2012 on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/hosting-a-light-fitting-on-a-reference-plane.html\">\nhosting a light fitting on a reference plane</a>.</p><p>Well, hopefully not completely useless, after all, since this exploration does show you several steps and techniques to approach and narrow down the problem to finally rediscover a solution that could also have been found faster and more easily:</p><p><strong>Question:</strong>\n<p>In my add-in I am trying to:</p>\n<ol>\n<li>Get user to select light already placed in model.</li>\n<li>Allow user to pick new point to place previously selected light</li>\n<li>Attach light to new point hosted on the same reference plane as the original light.</li>\n</ol>\n<p>I have no problems with the first two steps, but the last step that gives me the following error:</p>\n<p>\"Reference direction is parallel to face normal at insertion point.\"</p>\n<p>I read the discussions on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/hosting-a-light-fitting-on-a-reference-plane.html\">\nhosting a light fitting on a reference plane</a> and\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/family-instance-on-reference-plane-with-api/td-p/4962340\">\nfamily instance on reference plane with API</a>,\n\nbut they did not help.</p>\n<p>All I can find on-line are more people with the exact same issue and no solutions.</p>\n<p>Please can you help?</p>\n<p>I provided a minimal sample with a single lighting fixture hosted by a ceiling and an external command that should allow you to select one of the lights, then prompt you to pick a new spot for a copy of it.</p>\n<p>The new light should be placed on the same work plane as the original.</p>\n<p><strong>Answer:</strong>\n\nI implemented a complete add-in to test your external command and tried it out in your model:</p>\n<center>\n<img alt=\"Minimal sample model\" src=\"img/place_light_1_model.png\" width=\"465\"/>\n</center>\n<p>If you look at the lighting fixture in RevitLookup, you will note that it is hosted by the ceiling element and has a valid Level property value:</p>\n<center>\n<img alt=\"Snoop light fixture family instance\" src=\"img/place_light_2_snoop_instance.png\" width=\"650\"/>\n</center>\n<p>When run the add-in command, it executes fine for me, with no errors produced at all.</p>\n<p>However, I do not see anything added to the graphics screen.</p>\n<p>There are several things you can and should do at this point to find out more:</p>\n<ul>\n<li>Check the return value of the NewFamilyInstance method.</li>\n<li>Use the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/09/debugging-and-maintaining-the-image-relationship.html#2\">\nelement lister</a> to see what elements were added to the database, if any.</li>\n</ul>\n<p>In this case, I can also simply snoop the database for all family instances:</p>\n<center>\n<img alt=\"Snoop light fixture family instance copy\" src=\"img/place_light_3_snoop_copy.png\" width=\"694\"/>\n</center>\n<p>There are two of them now.</p>\n<p>One of them is the new copy that we successfully created.</p>\n<p>The copy, however, is hosted by an abstract reference plane, not by the ceiling element, like the original instance.</p>\n<p>Exploring its Level property will show that it has a value of -1, i.e. an invalid element id.</p>\n<p>That probably explains why it is not displayed in the Level 1 ceiling plan view like the original instance.</p>\n<p>Ah, no, it does not; I see that the original's level property is also -1, so that's apparently not a problem.</p>\n<p>Anyway, that is the original implementation.</p>\n<p>I created a new\n\n<a href=\"https://github.com/jeremytammik/PlaceLight\">PlaceLight GitHub repository</a> for\n\nthis project and saved the initial version is saved as\n\n<a href=\"https://github.com/jeremytammik/PlaceLight/releases/tag/2015.0.0.0\">release 2015.0.0.0</a>.</p>\n<p>Next step: specify the host element when calling NewFamilyInstance:</p>\n<pre class=\"code\">\n  static FamilyInstance PlaceALight(\n    XYZ lightPlacePoint,\n    Element host,\n    FamilySymbol lightSymbol )\n  {\n    Document doc = lightSymbol.Document;\n\n    return doc.Create.NewFamilyInstance(\n      lightPlacePoint, lightSymbol, host,\n      Autodesk.Revit.DB.Structure.StructuralType\n        .NonStructural );\n  }\n</pre>\n<p>As you can see, it is much simpler to just specify the host rather than create a new reference plane for it.</p>\n<p>It is called like this now to pass in the original host:</p>\n<pre class=\"code\">\n  PlaceALight( placeXyzPoint, lightFamilyInstance.Host, lightFamilySymbol );\n</pre>\n<p>I stored this attempt as\n\n<a href=\"https://github.com/jeremytammik/PlaceLight/releases/tag/2015.0.0.1\">release 2015.0.0.1</a>.</p>\n<p>However, it still does not work perfectly.</p>\n<p>Initially, I saw no new element added at all.</p>\n<p>Peeping under the ceiling in 3D view showed the new element offset downwards:</p>\n<center>\n<img alt=\"Light fixture copy offset downwards\" src=\"img/place_light_4_copy_offset.png\" width=\"403\"/>\n</center>\n<p>Why is it offset downwards?</p>\n<p>I compared the parameter values of the original and copy using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/05/bipchecker-for-revit-2015-on-github.html\">\nBipChecker</a>.</p>\n<p>One difference that I noticed was in the built-in parameter SKETCH_PLANE_PARAM.</p>\n<p>I tried to set that as demonstrated in\n\n<a href=\"https://github.com/jeremytammik/PlaceLight/releases/tag/2015.0.0.2\">\nrelease 2015.0.0.2</a>.</p>\n<p>That throws an exception, because the parameter is read-only.</p>\n<p>Next, I tried a much simpler solution:</p>\n<p>Still comparing the original with the copy, I notice that the original location point Z value in non-zero, whereas the copy's is zero.</p>\n<p>So I simply set the copy's Z value equal to the original before creating the new instance, et voila, it appears to work fine:</p>\n<center>\n<img alt=\"Light fixture copy with Z elevation\" src=\"img/place_light_5_copy_with_z.png\" width=\"463\"/>\n</center>\n<p>I stored that version as\n\n<a href=\"https://github.com/jeremytammik/PlaceLight/releases/tag/2015.0.0.3\">\nrelease 2015.0.0.3</a>, then cleaned it up a bit to illustrate the various failed and successful attempts more clearly, resulting in\n\n<a href=\"https://github.com/jeremytammik/PlaceLight/releases/tag/2015.0.0.4\">release 2015.0.0.4</a>:</p>\n<pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Revit.UI.Selection;\n<span class=\"blue\">using</span> <span class=\"teal\">OperationCanceledException</span> = Autodesk.Revit.Exceptions.<span class=\"teal\">OperationCanceledException</span>;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> PlaceLight\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">LightPickFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n    {\n      <span class=\"blue\">return</span> e.Category.Id.IntegerValue.Equals(\n        (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_LightingFixtures );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">false</span>;\n    }\n  }\n \n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">static</span> <span class=\"teal\">FamilyInstance</span> PlaceALight(\n      <span class=\"teal\">XYZ</span> lightPlacePoint,\n      <span class=\"teal\">Element</span> host,\n      <span class=\"teal\">FamilySymbol</span> lightSymbol )\n    {\n      <span class=\"teal\">Document</span> doc = lightSymbol.Document;\n \n      <span class=\"green\">// This does not work, because we need to</span>\n      <span class=\"green\">// specify a valid BIM element host.</span>\n \n      <span class=\"green\">//XYZ bubbleEnd = new XYZ( 5, 0, 0 );</span>\n      <span class=\"green\">//XYZ freeEnd = new XYZ( -5, 0, 0 );</span>\n      <span class=\"green\">//XYZ thirdPt = new XYZ( 0, 0, 1 );</span>\n      <span class=\"green\">//ReferencePlane referencePlane </span>\n      <span class=\"green\">//  = doc.Create.NewReferencePlane2( bubbleEnd, </span>\n      <span class=\"green\">//    freeEnd, thirdPt, doc.ActiveView );</span>\n      <span class=\"green\">//XYZ xAxisOfPlane = new XYZ( 0, 0, -1 );</span>\n      <span class=\"green\">//doc.Create.NewFamilyInstance( </span>\n      <span class=\"green\">//  referencePlane.Reference, lightPlacePoint, </span>\n      <span class=\"green\">//  xAxisOfPlane, lightSymbol );</span>\n \n      <span class=\"teal\">FamilyInstance</span> inst = doc.Create.NewFamilyInstance(\n        lightPlacePoint, lightSymbol, host,\n        Autodesk.Revit.DB.Structure.<span class=\"teal\">StructuralType</span>\n          .NonStructural );\n \n      <span class=\"green\">// This does not work, because the parameter</span>\n      <span class=\"green\">// is read-only, so an exception is thrown.</span>\n \n      <span class=\"green\">//inst.get_Parameter( </span>\n      <span class=\"green\">//  BuiltInParameter.SKETCH_PLANE_PARAM )</span>\n      <span class=\"green\">//    .Set( sketchPlaneName );</span>\n \n      <span class=\"blue\">return</span> inst;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"blue\">var</span> uiApp = commandData.Application;\n      <span class=\"blue\">var</span> doc = uiApp.ActiveUIDocument.Document;\n \n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">Selection</span> selection = uiApp.ActiveUIDocument.Selection;\n \n        <span class=\"green\">// Pick a light fixture.</span>\n \n        <span class=\"blue\">var</span> pickedLightReference = selection.PickObject(\n          <span class=\"teal\">ObjectType</span>.Element, <span class=\"blue\">new</span> <span class=\"teal\">LightPickFilter</span>(),\n          <span class=\"maroon\">\"Please select lighting fixture to place\"</span> );\n \n        <span class=\"blue\">if</span>( pickedLightReference == <span class=\"blue\">null</span> )\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n        }\n \n        <span class=\"green\">// Get Family Instance of the selected light reference.</span>\n \n        <span class=\"teal\">FamilyInstance</span> lightFamilyInstance\n          = doc.GetElement( pickedLightReference )\n            <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n        <span class=\"green\">// Get FamilySymbol of the family instance.</span>\n \n        <span class=\"blue\">if</span>( lightFamilyInstance == <span class=\"blue\">null</span> )\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n        }\n \n        <span class=\"teal\">FamilySymbol</span> lightFamilySymbol\n          = lightFamilyInstance.Symbol;\n \n        <span class=\"green\">// Forget this, it is read-only anyway.</span>\n        <span class=\"green\">//Parameter sketchPlaneParam = lightFamilyInstance</span>\n        <span class=\"green\">//  .get_Parameter( BuiltInParameter.SKETCH_PLANE_PARAM );</span>\n        <span class=\"green\">//string sketchPlaneName = sketchPlaneParam.AsString();</span>\n \n        <span class=\"green\">// Get new light location.</span>\n \n        <span class=\"teal\">XYZ</span> placeXyzPoint = selection.PickPoint(\n          <span class=\"maroon\">\"Select Point to place light:\"</span> );\n \n        <span class=\"green\">// Assuming the ceiling is horizontal, set</span>\n        <span class=\"green\">// the location point Z value for the copy</span>\n        <span class=\"green\">// equal to the original.</span>\n \n        placeXyzPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( placeXyzPoint.X,\n          placeXyzPoint.Y, ( lightFamilyInstance\n            .Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span> ).Point.Z );\n \n        <span class=\"blue\">using</span>( <span class=\"blue\">var</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          trans.Start( <span class=\"maroon\">\"LightArray\"</span> );\n \n          <span class=\"green\">// Start placing lights.</span>\n \n          <span class=\"teal\">FamilyInstance</span> lightFamilyInstance2\n            = PlaceALight( placeXyzPoint,\n              lightFamilyInstance.Host,\n              lightFamilySymbol );\n \n          trans.Commit();\n        }\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n      {\n        message = ex.Message;\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre>\n<p>As a result of all this, we can remove the PlaceALight method definition, since it has been reduced to a one-liner, and simplify the entire external command implementation to the one and only single Execute method implementation.</p>\n<p>I also removed all the unneeded code and comments illustrating the various failed and successful attempts and stored the final minimal working version as\n\n<a href=\"https://github.com/jeremytammik/PlaceLight/releases/tag/2015.0.0.5\">\nrelease 2015.0.0.5</a>:</p>\n<p>Here is the Execute method implementation, with no other helper methods required:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"blue\">var</span> uiApp = commandData.Application;\n    <span class=\"blue\">var</span> doc = uiApp.ActiveUIDocument.Document;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> selection = uiApp.ActiveUIDocument\n        .Selection;\n \n      <span class=\"green\">// Pick a light fixture.</span>\n \n      <span class=\"blue\">var</span> pickedLightReference = selection.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element, <span class=\"blue\">new</span> <span class=\"teal\">LightPickFilter</span>(),\n        <span class=\"maroon\">\"Please select lighting fixture to place\"</span> );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == pickedLightReference )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"green\">// Get Family Instance of the selected light reference.</span>\n \n      <span class=\"teal\">FamilyInstance</span> lightFamilyInstance\n        = doc.GetElement( pickedLightReference )\n          <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n      <span class=\"green\">// Get FamilySymbol of the family instance.</span>\n \n      <span class=\"blue\">if</span>( lightFamilyInstance == <span class=\"blue\">null</span> )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"teal\">FamilySymbol</span> lightFamilySymbol\n        = lightFamilyInstance.Symbol;\n \n      <span class=\"green\">// Determine the host BIM element.</span>\n \n      <span class=\"teal\">Element</span> host = lightFamilyInstance.Host;\n \n      <span class=\"green\">// Get new light location.</span>\n \n      <span class=\"teal\">XYZ</span> placeXyzPoint = selection.PickPoint(\n        <span class=\"maroon\">\"Select Point to place light:\"</span> );\n \n      <span class=\"green\">// Assuming the ceiling is horizontal, set</span>\n      <span class=\"green\">// the location point Z value for the copy</span>\n      <span class=\"green\">// equal to the original.</span>\n \n      placeXyzPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( placeXyzPoint.X,\n        placeXyzPoint.Y, ( lightFamilyInstance\n          .Location <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span> ).Point.Z );\n \n      <span class=\"green\">// All lighting fixtures are non-strucutral.</span>\n \n      Autodesk.Revit.DB.Structure.<span class=\"teal\">StructuralType</span>\n        non_structural = Autodesk.Revit.DB.Structure\n          .<span class=\"teal\">StructuralType</span>.NonStructural;\n \n      <span class=\"blue\">using</span>( <span class=\"blue\">var</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n      {\n        trans.Start( <span class=\"maroon\">\"LightArray\"</span> );\n \n        <span class=\"green\">// Start placing lights.</span>\n \n        <span class=\"teal\">FamilyInstance</span> lightFamilyInstance2\n          = doc.Create.NewFamilyInstance(\n            placeXyzPoint, lightFamilySymbol,\n            host, non_structural );\n \n        trans.Commit();\n      }\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      message = ex.Message;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>To summarise, I never saw the error you reported, but encountered and solved two other fundamental problems:</p>\n<ul>\n<li>No BIM element host specified</li>\n<li>No Z elevation value specified</li>\n</ul>\n<p>Fixing those two was all it took.</p>\n<p><strong>Response:</strong>\n<p>Looking good, however there are a few issues.</p>\n<p>I ran the routine and the light was placed as expected.</p>\n<p>If you select the newly placed light and bring up its properties the Offset is no longer ‘0’ it is ‘2600’</p>\n<p>Also the Work Plane says ‘???’ not Compound Ceiling: Plain (as the original)</p>\n<p>Here are the properties displayed for a newly placed light (using the routine):</p>\n<center>\n<img alt=\"Light fixture copy properties\" src=\"img/place_light_6_copy_properties.png\" width=\"399\"/>\n</center>\n<p>I would expect the light to be placed with the same offset and work plane as the original.</p>\n<p><strong>Answer:</strong>\n\nI continued research to find the correct solution to your issue, exploring various characteristics obtainable for the lighting instance properties and methods such as GetFamilyPointPlacementReferences, LevelId, HostFace, Location and trying to feed that data into different other overloads of the NewFamilyInstance method.</p>\n<p>An important question is the family placement type that can be determined like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FamilyPlacementType</span> placementType\n    = lightFamilySymbol.Family\n      .FamilyPlacementType;\n</pre>\n<p>In this case, it returns placementType = WorkPlaneBased.</p>\n<p>Using that, we can return to the ItemFactoryBase class list of NewFamilyInstance overloads and choose a suitable one for that placement type.</p>\n<p>That still leaves several different overloads to choose from.</p>\n<p>I finally discovered that I can simply take the reference returned by the HostFace property and feed it into the NewFamilyInstance overload taking a reference, insertion point, direction and the family symbol to use.</p>\n<p><a href=\"https://github.com/jeremytammik/PlaceLight/releases/tag/2015.0.0.6\">\nRelease 2015.0.0.6</a> shows\n\nthe final correctly working solution with parts of the code from previous attempts commented out.</p>\n<p>After discovering this, I returned to the old blog post on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/hosting-a-light-fitting-on-a-reference-plane.html\">\nhosting a light fitting on a reference plane</a> that\n\nyou originally mentioned, only to see that it already clearly discusses the importance of choosing the right NewFamilyInstance method overload for the task, and points out that this exact one taking a reference plane, placement point, direction and family symbol is the right one to do the job in this case – the same result I ended up with after all this exhaustive renewed exploration for your case.</p>\n<p>On one hand, I am sorry that I did not take a closer look at it to start with.</p>\n<p>I am even more sorry that the post apparently did not get the message across in the first place.</p>\n<p>Still, I hope that this renewed research clarifies and adds one or two bits of new interesting information.</p>\n<p>It maybe also illustrates that perseverance can pay off, even if you are as stupid as I am and refuse to learn from experience, or refer back to it...  :-)</p>\n<p>Here is the final external command implementation after removing all the experimental code snippets:</p>\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Selection</span> selection = uidoc.Selection;\n \n      <span class=\"green\">// Pick a light fixture.</span>\n \n      <span class=\"blue\">var</span> pickedLightReference = selection.PickObject(\n        <span class=\"teal\">ObjectType</span>.Element, <span class=\"blue\">new</span> <span class=\"teal\">LightPickFilter</span>(),\n        <span class=\"maroon\">\"Please select lighting fixture to place\"</span> );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == pickedLightReference )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"green\">// Get Family Instance of the selected light reference.</span>\n \n      <span class=\"teal\">FamilyInstance</span> lightFamilyInstance\n        = doc.GetElement( pickedLightReference )\n          <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n      <span class=\"green\">// Get FamilySymbol of the family instance.</span>\n \n      <span class=\"blue\">if</span>( lightFamilyInstance == <span class=\"blue\">null</span> )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"teal\">FamilySymbol</span> lightFamilySymbol\n        = lightFamilyInstance.Symbol;\n \n      <span class=\"green\">// Determine this family's placement type.</span>\n      <span class=\"green\">// This is an important step towards determining</span>\n      <span class=\"green\">// which NewFamilyInstance overload to use to</span>\n      <span class=\"green\">// place new instances of it.</span>\n \n      <span class=\"teal\">FamilyPlacementType</span> placementType\n        = lightFamilySymbol.Family\n          .FamilyPlacementType;\n \n      <span class=\"green\">// Placement type is WorkPlaneBased, so determine</span>\n      <span class=\"green\">// the host face that defines the work plane.</span>\n \n      <span class=\"teal\">Reference</span> hostFace = lightFamilyInstance.HostFace;\n \n      <span class=\"green\">// Prompt for placement point of copy.</span>\n \n      <span class=\"teal\">XYZ</span> placeXyzPoint = selection.PickPoint(\n        <span class=\"maroon\">\"Select point to place new light:\"</span> );\n \n      <span class=\"green\">// The location point gives Z elevation value.</span>\n \n      <span class=\"teal\">LocationPoint</span> lp = lightFamilyInstance.Location\n        <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n      <span class=\"green\">// Assuming the ceiling is horizontal, set</span>\n      <span class=\"green\">// the location point Z value for the copy</span>\n      <span class=\"green\">// equal to the original.</span>\n \n      placeXyzPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( placeXyzPoint.X,\n        placeXyzPoint.Y, lp.Point.Z );\n \n      <span class=\"blue\">using</span>( <span class=\"blue\">var</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n      {\n        trans.Start( <span class=\"maroon\">\"LightArray\"</span> );\n \n        <span class=\"teal\">FamilyInstance</span> lightFamilyInstance2\n          = doc.Create.NewFamilyInstance(\n            hostFace, placeXyzPoint, <span class=\"teal\">XYZ</span>.BasisX,\n            lightFamilySymbol );\n \n        trans.Commit();\n      }\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      message = ex.Message;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>As said, the most up-to-date version is provided by the\n\n<a href=\"https://github.com/jeremytammik/PlaceLight\">PlaceLight GitHub repository</a>.\n\nHere is an overview of the releases so far:</p>\n<ul>\n<li>2015.0.0.7 removed obsolete testing and commented code</li>\n<li>2015.0.0.6 finally found right NewFamilyInstance overload to use</li>\n<li>2015.0.0.5 removed unneeded code and comments for final working version</li>\n<li>2015.0.0.4 cleaned up for publication</li>\n<li>2015.0.0.3 just passing in the host and setting the correct Z value seems to work fine</li>\n<li>2015.0.0.2 set SKETCH_PLANE_PARAM, which throws an exception being read-only</li>\n<li>2015.0.0.1 use NewFamilyInstance with a given host BIM element</li>\n<li>2015.0.0.0 initial implementation copies fixture with wrong host</li>\n</ul>\n</p></p>"
  }
]