[
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Sydney Revit API Training and Vacation",
    "local_header_href": "#sydney-revit-api-training-and-vacation",
    "chunk_text": "<h3>Sydney Revit API Training and Vacation</h3><p>My days down under were pretty intense.</p><p>I left Switzerland Sunday night and arrived safe and sound in Sydney early Tuesday morning.\nI took the train from the airport into the town centre and back out again to the Autodesk offices at Macquarie Park in North Sydney.</p><p>Three hours later, I was teaching the two-day Revit API training.\nAt the time of writing this, it is Thursday afternoon and I am sitting on the plane back home again.\nI am on vacation next week.</p><p>Here is a rather monstrous blog post presenting some of the issues we discussed during the training, plus a number of other interesting fresh news items that I would like to mention before the break:</p><ul>\n<li><a href=\"#2\">Standard ADN Training Material</a></li>\n<li><a href=\"#3\">Japanese Revit API question list</a></li>\n<li><a href=\"#4\">Sydney Revit API training topics</a></li>\n<li><a href=\"#5\">Purge zero-area rooms and spaces</a></li>\n<li><a href=\"#6\">Minimal external application defining a ribbon panel</a></li>\n<li><a href=\"#7\">Pick and extract complex beam edge curve</a></li>\n<li><a href=\"#8\">Custom tagging and extensible storage</a></li>\n<li><a href=\"#9\">Cloud-based room editor application</a></li>\n<li><a href=\"#10\">Autodesk at TED and TED talks on UAV abilities</a></li>\n<li><a href=\"#11\">Beyond design revamped</a></li>\n<li><a href=\"#12\">Vacation</a></li>\n</ul><p>I want to get this out the door quickly right now, because I am hopping on the plane back to Europe this afternoon and leaving on vacation next week, so please read this really slowly to make it last as long as possible.</p><p>I also want to present you this happy little frog that I met in Ticino, the southern, Italian part of Switzerland, before leaving:</p><center>\n<img alt=\"Smiling frog\" src=\"file:////j/photo/jeremy/2013/2013-07-19_piazzogna/frog_smile.jpeg\"/>\n</center><a href=\"2\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Standard ADN Training Material",
    "local_header_href": "#standard-adn-training-material",
    "chunk_text": "<h4>Standard ADN Training Material</h4><p>As you are hopefully aware, all the standard ADN Revit training material is available and well documented online from the\n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Centre</a>, recently updated for Revit 2014.</p><p>It provides the 'My first Revit plugin' and DevTV tutorial videos as well as explicitly documented step-by-step training labs on the three basic topics of Revit element and database fundamentals, UI and the Family API.</p><p>Before they were placed on the official site, I discussed my migration of the expanded versions of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/migrating-the-adn-training-labs-to-revit-2014.html\">\nstep-by-step labs</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/the-adn-sample-adnrme-for-revit-mep-2014.html\">\nMEP sample AdnRme</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/adn-training-material-for-revit-structure-2014.html\">\nstructural labs and link sample</a> plus\n\nthe update and command-line utility for removing the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/processor-architecture-mismatch-warning.html\">\nprocessor architecture mismatch warning</a>.</p><p>Since all participants in my training here already had either good programming knowledge or extensive Revit product usage experience, we were able to cover all the important basics of the Revit API using the participants' specific needs and wishes as a basis for discussion, without sticking to the standard ADN training material.</p><p>That made it much more fun, interesting and challenging for me, and also enabled us to remain totally focused on the participants' goals throughout.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Japanese Revit API Question List",
    "local_header_href": "#japanese-revit-api-question-list",
    "chunk_text": "<h4>Japanese Revit API Question List</h4><p>By a funny coincidence, the Japanese Developer Support team prepared a two-day Revit API training course this very same week as well.</p><p>They came up with the following list of questions and answers to help clarify some central topics up front:</p><ul>\n<li>Extensible Storage</li>\n<ul>\n<li>Is there a limitation on the size of the extensible storage that can be associated with a single element? No.</li>\n<li>Does this feature depend on the Revit version? Yes.</li>\n<li>When did it become available? In\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/whats-new-in-the-revit-2012-api.html\"> Revit 2012</a>.</li>\n</ul>\n<li>Element Id</li>\n<ul>\n<li>Is the element id a persistent identifier like AutoCAD’s handle? Yes and no, see below.</li>\n<li>Is the element id a transient identifier per session? No, it remains valid beyond the session, but may be modified by worksharing and central file sharing regeneration.</li>\n<li>Can developers use it as a key name in an external relational database? The UniqueId is safer, and the only way to go in a worksharing environment.</li>\n</ul>\n<li>Parameters</li>\n<ul>\n<li>Is there any developer use case for shared parameters? How can shared parameters be useful to an add-in?\nI would avoid shared parameters for pure add-in data storage.\nExtensible storage is more flexible and better isolated than shared parameters, which are more geared towards end users than add-in applications.\nA shared parameter may be useful for two reasons: (i) if you make it visible, the Revit property palette provides an automatic user interface for it. (ii) it can be scheduled.\nIf these two reasons are not interesting in your case, extensible storage is probably preferable.</li>\n<li>Is it possible to access a per document parameter outside of Revit without using any API? No.</li>\n</ul>\n<li>Dynamic Model Update</li>\n<ul>\n<li>As far as I understand, dynamic model update is just like a modification operation within DBObject.Modified on AutoCAD .NET API. Is that right? I believe so. The modification added by the dynamic updater is encapsulated into the same transaction as the modification that triggered it.</li>\n<li>Is this persistent between sessions, similar to AutoCAD’s persistent reactor? If the add-in which implements Dynamic Model Update has been loaded into Revit, this begins to work by opening a project file into Revit without any operation. Is that correct understanding or not? Yes.</li>\n<li>Is there a possibility to make an infinite loop? No, this is prevented by Revit.</li>\n</ul>\n<li>Family</li>\n<ul>\n<li>Does the API ability support create/modify of System Families and In-Place Families? Sorry, no to both.</li>\n</ul>\n</ul><a name=\"4\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Sydney Revit API Training Topics",
    "local_header_href": "#sydney-revit-api-training-topics",
    "chunk_text": "<h4>Sydney Revit API Training Topics</h4><p>Here is a quick overview of some of the topics we ended up discussing in the course of the two-day Revit API training in Sydney:</p><ul>\n<li>Filtered element collector and LINQ</li>\n<ul>\n<li>We implemented sample commands to purge redundant spaces: <a href=\"#5\">PurgeRooms, PurgeSpaces</a>.</li>\n<li>We discussed how to determine and list a comparison of all room areas with the areas covered by the furniture and equipment they contain: the\n<a href=\"#9\">cloud-based room editor</a> application provides most of the required functionality for this.</li>\n</ul>\n<li>Simple ribbon with an icon</li>\n<ul>\n<li>We implemented a <a href=\"#6\">minimal external application</a> defining a ribbon panel and button to launch our new commend.</li>\n</ul>\n<li>Database Link</li>\n<ul>\n<li>How can Excel update the Revit database?\nBi-directional linking of external data to family instances or other Revit elements: look at the FireRating SDK sample in VB, or the C# version provided by the Lab4_3_1_CreateAndBindSharedParam, Lab4_3_2_ExportSharedParamToExcel and Lab4_3_3_ImportSharedParamFromExcel commands in the XtraCs project in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/recursively-disable-architecture-mismatch-warning.html#12\">\nRevit API training labs</a>.</li>\n</ul>\n<li>Prepare model for issue, strip out everything except model:\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/graphics-pipeline-custom-exporter.html\">\ncustom exporter</a>.</li>\n<li>Generate floor plans, e.g. large PNG: <a href=\"#9\">cloud-based room editor</a>.</li>\n<li>Batching through files</li>\n<ul>\n<li>Import IFC</li>\n<li>Batching, e.g. make changes to font in family libraries: completed by Brett.</li>\n</ul>\n<li>Revit model checking: <a href=\"http://lmgtfy.com/?q=revit+model+review\">Revit Model Review</a>.</li>\n<li>Family API: define and use a family:\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/key-concepts-of-the-family-editor.html\">Key concepts</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/family-api-add-in-load-family-and-place-instances.html\">Load family and place instances</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/family-api-create-type-select-and-modify-instances.html\">Create type, select and modify instances</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/family-api-nested-type-instance-and-symbol-retrieval.html\">Nested types, instance and symbol retrieval</a>.</li>\n</ul>\n</li>\n<li>Filter for all tags: iterate built-in categories, search for *tag*, feed into LogicalOrFilter: completed by Brett</li>\n<li>Electrical loading and circuit design, non-US rules:\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/uk-electrical-schedule-sample.html\">\nUK panel schedule</a> (2009),\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/the-schedule-api-and-access-to-schedule-data.html\">\nSchedule API</a>.</li>\n<li><a href=\"#8\">Custom tagging and extensible storage</a></li>\n<li>DWFx: ExportImage</li>\n</ul><p>In fact, we were able to cover so many important topics in such depth and address the participants needs in such detail that I was able to cancel the meeting scheduled with an important large company for the day after the training because all their programming questions had already been answered.</p><p>In fact, that cancellation is providing at least part of the time to write this report here now.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Purge all Zero-Area Rooms and Spaces",
    "local_header_href": "#purge-all-zero-area-rooms-and-spaces",
    "chunk_text": "<h4>Purge all Zero-Area Rooms and Spaces</h4><p>One of the wishes that a participant brought along from his Revit team back home was a utility to purge unused rooms and spaces.</p><p>This proved to be a perfect learning example to practice using RevitLookup and the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pre-post-and-pick-select.html\">\nelement lister</a> to\n\nexplore the Revit database and basic filtered element functionality.</p><p>We discussed the requirements for a basic implementation of an external Revit command:</p><ul>\n<li>Visual Studio class project</li>\n<li>References to the Revit API assemblies</li>\n<li>Implement the external command interface, i.e. the Execute method</li>\n<li>Implement the add-in manifest</li>\n<li>Install the add-in</li>\n</ul><p>This also provided an opportunity to demonstrate the many helpful features provided by the Visual Studio IDE, such as Intellisense, Ctrl-'.' to add a 'using' statement, 'Implement Interface', and numerous other important time-savers.</p><p>All of the steps listed above are completely automated by my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/sun-direction-shadow-calculation-and-wizard-update.html\">\nVisual Studio Revit add-in wizards</a>.</p><p>We ended up with the following command, which selects all rooms in the model with an area that is almost empty and deletes them, reporting whether they have been partially deleted or simply not yet placed:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Retrieve all room elements with zero area.</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">// If you look carefully at the parameters </span>\n    <span class=\"green\">// defined on room elements, there may be a way </span>\n    <span class=\"green\">// to avoid all the post-processing steps.</span>\n    <span class=\"green\">// The area test could probably be replaced by </span>\n    <span class=\"green\">// a more effective slow element parameter </span>\n    <span class=\"green\">// filter, and maybe the cast and List </span>\n    <span class=\"green\">// instantiation can be avoided as well.</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;(\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">SpatialElement</span> ) )\n          .Where( e =&gt; e <span class=\"blue\">is</span> <span class=\"teal\">Room</span> )\n          .Cast&lt;<span class=\"teal\">Room</span>&gt;()\n          .Where&lt;<span class=\"teal\">Room</span>&gt;( r =&gt; 1e-9 &gt; r.Area )\n          .Select&lt;<span class=\"teal\">Element</span>,<span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id ) );\n \n    <span class=\"blue\">if</span>( 0 &lt; ids.Count() )\n    {\n      <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n      {\n        t.Start( <span class=\"maroon\">\"Purge Rooms\"</span> );\n \n        <span class=\"blue\">int</span> nUnplacedRooms = 0;\n        <span class=\"blue\">int</span> nRedundantRooms = 0;\n        <span class=\"blue\">int</span> nElements = 0;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n        {\n          <span class=\"teal\">Debug</span>.Print( doc.GetElement( id ).Name );\n          nElements += doc.Delete( id ).Count;\n \n          <span class=\"blue\">if</span>( 1 == nElements )\n          {\n            ++nRedundantRooms;\n          }\n          <span class=\"blue\">else</span>\n          {\n            ++nUnplacedRooms;\n          }\n        }\n \n        t.Commit();\n \n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Purge Rooms\"</span>, <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"{0} rooms ({1} redundant, {2} unplaced, \"</span>\n          + <span class=\"maroon\">\"{3} total elements) deleted.\"</span>,\n          nRedundantRooms + nUnplacedRooms,\n          nRedundantRooms, nUnplacedRooms,\n          nElements ) );\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><p>Note that this non-trivial selection is implemented in one single statement to instantiate the filtered element collector and post-process its results using LINQ.</p><p>Most of the effort is actually reporting the results in a differentiated manner.</p><p>This provided a good starting point for understanding filtered element collectors, and a useful little utility to take home as well.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Minimal External Application",
    "local_header_href": "#minimal-external-application",
    "chunk_text": "<h4>Minimal External Application</h4><p>We decided to add a custom ribbon tab, panel and button to launch our new command.</p><p>This requires an external application and the implementation of its two interface methods, OnStartup and OnShutdown.\nA skeleton application is set up by the add-in wizards.</p><p>Once that is set up, the ribbon widget creation is pretty straightforward:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">string</span> path = <span class=\"teal\">Assembly</span>.GetExecutingAssembly()\n      .Location;\n \n    <span class=\"blue\">string</span> classNamePrefix = <span class=\"maroon\">\"PurgeSpaces.\"</span>;\n \n    <span class=\"blue\">string</span> tabName = <span class=\"maroon\">\"Sydney API Training\"</span>;\n \n    a.CreateRibbonTab( tabName );\n \n    <span class=\"teal\">RibbonPanel</span> panel = a.CreateRibbonPanel(\n      tabName, tabName );\n \n    <span class=\"teal\">RibbonItem</span> button = panel.AddItem(\n      <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(<span class=\"maroon\">\"Purge Rooms\"</span>,\n      <span class=\"maroon\">\"Purge Rooms\"</span>, path,\n      classNamePrefix + <span class=\"maroon\">\"Command\"</span> ) );\n \n    button.ToolTip\n      = <span class=\"maroon\">\"Filter for unplaced and deleted rooms\"</span>;\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><a name=\"7\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Pick and Extract Complex Beam Edge Curve",
    "local_header_href": "#pick-and-extract-complex-beam-edge-curve",
    "chunk_text": "<h4>Pick and Extract Complex Beam Edge Curve</h4><p>Brett Burling of\n\n<a href=\"http://www.bgeeng.com\">\nBG&amp;E</a> came\n\nto the training with some prior API experience, and used his multitasking capabilities to simultaneously effectively code several useful add-ins and actively participate in the group discussions.</p><p>One of his samples enables picking and extracting a complex beam edge curve and converting it to a model curve.</p><p>It also demonstrates a command implemented in VB.NET, use of the PickObject method to select an edge instead of an entire element, and the transformations required to handle the extraction correctly depending on thether the edge comes from a family instance or some other object:</p><center>\n<img alt=\"Beam edge curve converted to model curve\" src=\"img/bb_extract_beam_edge.jpeg\" width=\"260\"/>\n</center><p>Here is the complete VB source code of the external command implementation achieving this:</p><pre class=\"code\">\n<span class=\"blue\">#Region</span> <span class=\"maroon\">\"Imported Namespaces\"</span>\n<span class=\"blue\">Imports</span> System\n<span class=\"blue\">Imports</span> System.Collections.Generic\n<span class=\"blue\">Imports</span> Autodesk.Revit.ApplicationServices\n<span class=\"blue\">Imports</span> Autodesk.Revit.Attributes\n<span class=\"blue\">Imports</span> Autodesk.Revit.DB\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI\n<span class=\"blue\">Imports</span> Autodesk.Revit.UI.Selection\n<span class=\"blue\">#End</span> <span class=\"blue\">Region</span>\n \n&lt;<span class=\"teal\">Transaction</span>(<span class=\"teal\">TransactionMode</span>.Manual)&gt;\n<span class=\"blue\">Public</span> <span class=\"blue\">Class</span> <span class=\"teal\">AdskCommand</span>\n  <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>\n \n  <span class=\"blue\">Const</span> DisplayName <span class=\"blue\">As</span> <span class=\"blue\">String</span> = <span class=\"maroon\">\"Extract Edge\"</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute(\n    <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> <span class=\"teal\">ExternalCommandData</span>,\n    <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>,\n    <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> <span class=\"teal\">ElementSet</span>) _\n  <span class=\"blue\">As</span> <span class=\"teal\">Result</span> <span class=\"blue\">Implements</span> <span class=\"teal\">IExternalCommand</span>.Execute\n \n    <span class=\"blue\">Dim</span> uiapp <span class=\"blue\">As</span> <span class=\"teal\">UIApplication</span> = commandData.Application\n    <span class=\"blue\">Dim</span> uidoc <span class=\"blue\">As</span> <span class=\"teal\">UIDocument</span> = uiapp.ActiveUIDocument\n    <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span> = uidoc.Document\n    <span class=\"blue\">Dim</span> sel <span class=\"blue\">As</span> <span class=\"teal\">Selection</span> = uidoc.Selection\n \n    <span class=\"blue\">Dim</span> selectedReference <span class=\"blue\">As</span> <span class=\"teal\">Reference</span> = sel.PickObject(\n      <span class=\"teal\">ObjectType</span>.Edge, <span class=\"maroon\">\"Select Edge\"</span>)\n \n    <span class=\"blue\">Dim</span> selectedElement <span class=\"blue\">As</span> <span class=\"teal\">Element</span> = doc.GetElement(\n      selectedReference.ElementId)\n \n    <span class=\"blue\">Dim</span> selectedEdge <span class=\"blue\">As</span> <span class=\"teal\">Edge</span> = <span class=\"blue\">TryCast</span>(\n      selectedElement.GetGeometryObjectFromReference(\n        selectedReference), <span class=\"teal\">Edge</span>)\n \n    <span class=\"blue\">Dim</span> curve <span class=\"blue\">As</span> <span class=\"teal\">Curve</span> = selectedEdge.AsCurve\n \n    <span class=\"blue\">Dim</span> fi <span class=\"blue\">As</span> <span class=\"teal\">FamilyInstance</span> = <span class=\"blue\">TryCast</span>(\n      selectedElement, <span class=\"teal\">FamilyInstance</span>)\n \n    <span class=\"blue\">If</span> fi <span class=\"blue\">IsNot</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n      curve = curve.CreateTransformed(fi.GetTransform)\n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n    <span class=\"green\">' Assuming the edge is horizontal</span>\n \n    <span class=\"blue\">Dim</span> normal <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = <span class=\"teal\">XYZ</span>.BasisZ\n \n    <span class=\"blue\">Using</span> rvtTransaction <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n      rvtTransaction.Start(DisplayName)\n \n      <span class=\"blue\">Dim</span> plane <span class=\"blue\">As</span> <span class=\"teal\">Plane</span> = doc.Application.Create.NewPlane(normal, curve.GetEndPoint(0))\n      <span class=\"blue\">Dim</span> sketchPlane <span class=\"blue\">As</span> <span class=\"teal\">SketchPlane</span> = sketchPlane.Create(doc, plane)\n      doc.Create.NewModelCurve(curve, sketchPlane)\n \n      rvtTransaction.Commit()\n    <span class=\"blue\">End</span> <span class=\"blue\">Using</span>\n \n    <span class=\"blue\">Return</span> <span class=\"teal\">Result</span>.Succeeded\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n<span class=\"blue\">End</span> <span class=\"blue\">Class</span>\n</pre><p><strong>Update from Brett:</strong>\nI thought it might be interesting to also include the code for determining the normal of the curve.\nReplace Dim normal As XYZ = XYZ.BasisZ by the GetNormal method defined below.\nThis enables the generation of a model line on any edge, not just horizontal ones:</p><pre class=\"code\">\n  <span class=\"blue\">Function</span> GetNormal(<span class=\"blue\">ByVal</span> curve <span class=\"blue\">As</span> <span class=\"teal\">Curve</span>) <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>\n \n    <span class=\"blue\">Dim</span> startpoint <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = curve.GetEndPoint(0)\n    <span class=\"blue\">Dim</span> endpoint <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = curve.GetEndPoint(1)\n \n    <span class=\"blue\">If</span> curve.GetType() = <span class=\"blue\">GetType</span>(<span class=\"teal\">Arc</span>) <span class=\"blue\">Then</span>\n      <span class=\"blue\">Return</span> <span class=\"blue\">TryCast</span>(curve, <span class=\"teal\">Arc</span>).Normal\n \n    <span class=\"blue\">ElseIf</span> curve.GetType() = <span class=\"blue\">GetType</span>(<span class=\"teal\">Ellipse</span>) <span class=\"blue\">Then</span>\n      <span class=\"blue\">Return</span> <span class=\"blue\">TryCast</span>(curve, <span class=\"teal\">Ellipse</span>).Normal\n \n    <span class=\"blue\">ElseIf</span> curve.GetType() = <span class=\"blue\">GetType</span>(<span class=\"teal\">Line</span>) <span class=\"blue\">Then</span>\n      <span class=\"blue\">Return</span> startpoint.CrossProduct(endpoint) _\n        .Normalize()\n \n    <span class=\"blue\">Else</span>\n \n      <span class=\"blue\">Dim</span> pointList <span class=\"blue\">As</span> <span class=\"teal\">IList</span>(<span class=\"blue\">Of</span> <span class=\"teal\">XYZ</span>) _\n        = curve.Tessellate()\n \n      <span class=\"blue\">Dim</span> vectorToEndpoint <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> _\n        = pointList(pointList.Count - 1) _\n          - pointList(0)\n \n      <span class=\"blue\">Dim</span> lastVector <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = <span class=\"blue\">Nothing</span>\n      <span class=\"blue\">Dim</span> firstNormal <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = <span class=\"blue\">Nothing</span>\n      <span class=\"blue\">Dim</span> nextNormal <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = <span class=\"blue\">Nothing</span>\n \n      <span class=\"blue\">For</span> i <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> = 1 <span class=\"blue\">To</span> pointList.Count - 2\n \n        <span class=\"blue\">Dim</span> nextPoint <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = pointList(i)\n \n        <span class=\"blue\">Dim</span> nextVector <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span> = nextPoint.Subtract(\n          startpoint)\n \n        <span class=\"blue\">If</span> firstNormal <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n          firstNormal = AbsoluteVector(\n            vectorToEndpoint.CrossProduct(\n              nextVector).Normalize)\n        <span class=\"blue\">Else</span>\n          nextNormal = AbsoluteVector(\n            vectorToEndpoint.CrossProduct(\n              nextVector).Normalize)\n          <span class=\"blue\">If</span> <span class=\"blue\">Not</span> IsZero(firstNormal.DistanceTo(\n                        nextNormal)) <span class=\"blue\">Then</span>\n            <span class=\"blue\">Return</span> <span class=\"blue\">Nothing</span>\n          <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n        <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n        lastVector = nextVector\n      <span class=\"blue\">Next</span> i\n \n      <span class=\"blue\">Return</span> vectorToEndpoint.CrossProduct(lastVector) _\n        .Normalize()\n \n    <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Function</span> AbsoluteVector(<span class=\"blue\">ByVal</span> vector <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>) <span class=\"blue\">As</span> <span class=\"teal\">XYZ</span>\n    <span class=\"blue\">Return</span> <span class=\"blue\">New</span> <span class=\"teal\">XYZ</span>(System.<span class=\"teal\">Math</span>.Abs(vector.X),\n                   System.<span class=\"teal\">Math</span>.Abs(vector.Y),\n                   System.<span class=\"teal\">Math</span>.Abs(vector.Z))\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n \n  <span class=\"blue\">Public</span> <span class=\"blue\">Function</span> IsZero(<span class=\"blue\">ByVal</span> number <span class=\"blue\">As</span> <span class=\"blue\">Double</span>) _\n    <span class=\"blue\">As</span> <span class=\"blue\">Boolean</span>\n    <span class=\"blue\">Return</span> 0.000000001 &gt; System.<span class=\"teal\">Math</span>.Abs(number)\n  <span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre><p><strong>Answer:</strong> Yes, thank you, very good!</p><p>Better still might be to use the Curve.ComputeDerivatives method, so you do not have to differentiate between the different curve types and bail if it is not a simple arc, line or ellipse.</p><p>Also please note that the XYZ.Normalize method may possibly remove the need for your personal AbsoluteVector function.</p><p>For your convenience, here is\n\n<a href=\"zip/PickBeamEdgeCurve.zip\">PickBeamEdgeCurve.zip</a> including\n\nthe entire code above, its Visual Studio solution and the add-in manifest.</p><a name=\"8\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Custom Tagging and Extensible Storage",
    "local_header_href": "#custom-tagging-and-extensible-storage",
    "chunk_text": "<h4>Custom Tagging and Extensible Storage</h4><p>One participant was interested in customising the text displayed by a tag.\nThe original thought was to extract some data from the element parameters and reflect them in the text.\nChanging a tag text does not seem to be straightforward, so we ended up implementing an alternative approach using a TextNote element instead.</p><p>Also, we decided it would be more interesting to display some information stored in extensible storage instead of parameter value data.</p><p>After the first version was completed, we also wanted to demonstrate storing more complex data in extensible storage, e.g. a list of element ids.</p><p>The final result of nailing down this moving target is the following two commands:</p><ul>\n<li>CommandSingle: Select a source element E to display info from, attach a simple integer to it in extensible storage, read back that data from it, create a new TextNote, set its text and attach it to the upper right corner of E's bounding box.</li>\n<li>CommandMulti: Select multiple source elements to display info from, attach a simple integer to each one of them in extensible storage, read back that data from them, create a new TextNote, set its text, attach it to the upper right corner of the first element's bounding box, and store a list of all the source elements' element ids in its extensible storage.</li>\n</ul><p>Here is the CommandSingle implementation:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CommandSingle</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">const</span> <span class=\"blue\">string</span> SchemaGuid\n    = <span class=\"maroon\">\"5e10a0d2-12bb-428a-a382-b71bcf3e0362\"</span>;\n \n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Schema</span> CreateSchema()\n  {\n    <span class=\"teal\">SchemaBuilder</span> schemaBuilder =\n      <span class=\"blue\">new</span> <span class=\"teal\">SchemaBuilder</span>( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( SchemaGuid ) );\n \n    schemaBuilder.SetSchemaName( <span class=\"maroon\">\"SimpleIntSchema\"</span> );\n \n    <span class=\"green\">// Have to define the field name as string and </span>\n    <span class=\"green\">// set the type using typeof method</span>\n \n    schemaBuilder.AddSimpleField( <span class=\"maroon\">\"SomeValue\"</span>,\n      <span class=\"blue\">typeof</span>( <span class=\"blue\">int</span> ) );\n \n    <span class=\"blue\">return</span> schemaBuilder.Finish();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc )\n    {\n      message = <span class=\"maroon\">\"Please run this command in a valid project document.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == view\n      || <span class=\"teal\">ViewType</span>.FloorPlan != view.ViewType )\n    {\n      message = <span class=\"maroon\">\"Please run this command on a floor plan view.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// Access current selection</span>\n \n    <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n    <span class=\"blue\">int</span> n = sel.Elements.Size;\n \n    <span class=\"teal\">Element</span> source = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( 1 &lt; n )\n    {\n      message = <span class=\"maroon\">\"Please select at most one element.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n    <span class=\"blue\">else</span> <span class=\"blue\">if</span>( 1==n )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n      {\n        source = e;\n      }\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">Reference</span> r = sel.PickObject(\n          <span class=\"teal\">ObjectType</span>.Element,\n          <span class=\"maroon\">\"Please select source element.\"</span> );\n \n        source = doc.GetElement( r.ElementId );\n      }\n      <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n        .<span class=\"teal\">OperationCanceledException</span> )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n      }\n    }\n \n    <span class=\"green\">// 1. Looking for the schema in the memory</span>\n \n    <span class=\"teal\">Schema</span> schema = <span class=\"teal\">Schema</span>.Lookup( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>(\n      SchemaGuid ) );\n \n    <span class=\"green\">// 2. Check if schema exists in the memory or not</span>\n \n    <span class=\"blue\">if</span>( schema == <span class=\"blue\">null</span> )\n    {\n      <span class=\"green\">// 3. Create it, if not</span>\n \n      schema = CreateSchema();\n    }\n \n    <span class=\"green\">// 4. Create entity of the specific schema</span>\n \n    <span class=\"blue\">var</span> entity = <span class=\"blue\">new</span> <span class=\"teal\">Entity</span>( schema );\n \n    <span class=\"green\">// 5. Set the value for the Field.</span>\n \n    entity.Set( <span class=\"maroon\">\"SomeValue\"</span>, 888 );\n \n    <span class=\"green\">// 6. Attach entity to the element</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Attach Extensible Storage Data to Source Element\"</span> );\n      source.SetEntity( entity );\n      tx.Commit();\n    }\n \n    <span class=\"green\">// Read the extensible storage information </span>\n    <span class=\"green\">// from the source element to display</span>\n \n    <span class=\"teal\">Entity</span> ent = source.GetEntity( schema );\n \n    <span class=\"blue\">string</span> s = ent.Get&lt;<span class=\"blue\">int</span>&gt;( <span class=\"maroon\">\"SomeValue\"</span> ).ToString();\n \n    <span class=\"green\">// Modify document within a transaction</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Text Note to Display Extensible Storage Data\"</span> );\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = source.get_BoundingBox( view );\n \n      doc.Create.NewTextNote( view, bb.Max,\n        <span class=\"teal\">XYZ</span>.BasisX, <span class=\"teal\">XYZ</span>.BasisY, 0.0,\n        <span class=\"teal\">TextAlignFlags</span>.TEF_ALIGN_BOTTOM, s );\n \n      tx.Commit();\n    }\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><p>Here is the CommandMulti implementation.</p><p>The biggest irritation here is that we have assembled our list of element ids to store in the extensible storage a generic List&lt;ElementId&gt;, and yet the Revit API forces us to convert them from List to IList to fulfill the restrictive expectations of the Entity.Set method:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CommandMulti</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _schema2_guid = <span class=\"maroon\">\"a6b4fec9-a778-4def-9c5e-1faef5b2a65e\"</span>;\n \n  <span class=\"blue\">private</span> <span class=\"teal\">Schema</span> CreateSchema2()\n  {\n    <span class=\"teal\">SchemaBuilder</span> schemaBuilder =\n      <span class=\"blue\">new</span> <span class=\"teal\">SchemaBuilder</span>( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( _schema2_guid ) );\n \n    schemaBuilder.SetSchemaName( <span class=\"maroon\">\"ListOfElementIdsSchema\"</span> );\n \n    <span class=\"green\">// Have to define the field name as string and </span>\n    <span class=\"green\">// set the type using typeof method</span>\n \n    schemaBuilder.AddArrayField( <span class=\"maroon\">\"ListOfElementIds\"</span>,\n      <span class=\"blue\">typeof</span>( <span class=\"teal\">ElementId</span> ) );\n \n    <span class=\"blue\">return</span> schemaBuilder.Finish();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc )\n    {\n      message = <span class=\"maroon\">\"Please run this command in a valid project document.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">View</span> view = doc.ActiveView;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == view || <span class=\"teal\">ViewType</span>.FloorPlan != view.ViewType )\n    {\n      message = <span class=\"maroon\">\"Please run this command on a floor plan view.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// Access current selection</span>\n \n    <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n    <span class=\"blue\">int</span> n = sel.Elements.Size;\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( 1 &lt;= n )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n      {\n        ids.Add( e.Id );\n      }\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Reference</span>&gt; refs = sel.PickObjects(\n          <span class=\"teal\">ObjectType</span>.Element,\n          <span class=\"maroon\">\"Please select source elements.\"</span> );\n \n        ids = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;( refs.Count );\n \n        ids.AddRange(\n          refs.Select&lt;<span class=\"teal\">Reference</span>,<span class=\"teal\">ElementId</span>&gt;(\n            r =&gt; r.ElementId ) );\n      }\n      <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions.<span class=\"teal\">OperationCanceledException</span> )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n      }\n    }\n \n    <span class=\"green\">// 1. Looking for the schema in the memory</span>\n \n    <span class=\"teal\">Schema</span> schema = <span class=\"teal\">Schema</span>.Lookup( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( <span class=\"teal\">CommandSingle</span>.SchemaGuid ) );\n \n    <span class=\"green\">// 2. Check if schema exists in the memory or not</span>\n \n    <span class=\"blue\">if</span>( schema == <span class=\"blue\">null</span> )\n    {\n      <span class=\"green\">// 3. Create it, if not</span>\n \n      schema = <span class=\"teal\">CommandSingle</span>.CreateSchema();\n    }\n \n    <span class=\"green\">// 4. Create entity of the specific schema</span>\n \n    <span class=\"blue\">var</span> entity = <span class=\"blue\">new</span> <span class=\"teal\">Entity</span>( schema );\n \n    <span class=\"green\">// 5. Set the value for the Field.</span>\n \n    entity.Set( <span class=\"maroon\">\"SomeValue\"</span>, 888 );\n \n    <span class=\"green\">// Create schema to save list of element ids</span>\n \n    <span class=\"teal\">Schema</span> schema2 = <span class=\"teal\">Schema</span>.Lookup( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( _schema2_guid ) );\n \n    <span class=\"green\">// 2. Check if schema exists in the memory or not</span>\n \n    <span class=\"blue\">if</span>( schema2 == <span class=\"blue\">null</span> )\n    {\n      <span class=\"green\">// 3. Create it, if not</span>\n \n      schema2 = CreateSchema2();\n    }\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Attach Extensible Storage Data to Source Elements\"</span> );\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n      {\n        doc.GetElement( id ).SetEntity( entity );\n      }\n      tx.Commit();\n    }\n \n    <span class=\"green\">// Modify document within a transaction</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Text Note to Display Extensible Storage Data\"</span> );\n \n      <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; data = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;( ids.Count );\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n      {\n        <span class=\"teal\">Element</span> e = doc.GetElement( id );\n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == bb )\n        {\n          bb = e.get_BoundingBox( view );\n        }\n \n        <span class=\"green\">// Read the extensible storage information </span>\n        <span class=\"green\">// from the source element to display</span>\n \n        <span class=\"teal\">Entity</span> ent = e.GetEntity( schema );\n \n        data.Add( ent.Get&lt;<span class=\"blue\">int</span>&gt;( <span class=\"maroon\">\"SomeValue\"</span> ).ToString() );\n      }\n \n      <span class=\"blue\">string</span> s = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\",\"</span>, data.ToArray() );\n \n      <span class=\"teal\">TextNote</span> tn = doc.Create.NewTextNote( view, bb.Max,\n        <span class=\"teal\">XYZ</span>.BasisX, <span class=\"teal\">XYZ</span>.BasisY, 0.0,\n        <span class=\"teal\">TextAlignFlags</span>.TEF_ALIGN_BOTTOM, s );\n \n      <span class=\"green\">// 4. Create entity of the specific schema</span>\n \n      <span class=\"blue\">var</span> entity2 = <span class=\"blue\">new</span> <span class=\"teal\">Entity</span>( schema2 );\n \n      <span class=\"green\">// 5. Set the value for the Field.</span>\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids2 = ids;\n \n      entity2.Set( <span class=\"maroon\">\"ListOfElementIds\"</span>, ids2 );\n \n      tn.SetEntity( entity2 );\n \n      tx.Commit();\n    }\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><a name=\"9\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Cloud-based Room Editor Application",
    "local_header_href": "#cloud-based-room-editor-application",
    "chunk_text": "<h4>Cloud-based Room Editor Application</h4><p>My round-trip cloud-based 2D room editor provides a lot of useful functionality for all kinds of tasks, including some of the participants immediate wishes, so we took a deeper look at that, especially how the room and furniture plan view geometry is extracted from the BIM, stored in the cloud data repository, and displayed on mobile device using server-side JavaScript and SVG.</p><p>I have not yet published the complete full Revit add-in for this, because I was planning to migrate it from Revit 2013 to 2014 and place it on GitHub first.</p><p>However, due to time constraints and popular demand, here is an immediate snapshot of\n\n<a href=\"zip/RoomEditorApp_13_08.zip\">version 2013.0.0.8</a> of\n\nthe RoomEditorApp for Revit 2013 in its current state.\nI already discussed a number of its features.\nOthers have been added since, and I'll go into those in detail when I find time to port this to Revit 2014.</p><a name=\"10\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Autodesk at TED and TED Talks on UAV Abilities",
    "local_header_href": "#autodesk-at-ted-and-ted-talks-on-uav-abilities",
    "chunk_text": "<h4>Autodesk at TED and TED Talks on UAV Abilities</h4><p>TED is a non-profit organisation devoted to Ideas Worth Spreading that started out as a conference bringing together people from three worlds: Technology, Entertainment, Design.</p><p>Obviously, this is a perfect fit with the mission of Autodesk, and we are\n\n<a href=\"http://labs.blogs.com/its_alive_in_the_lab/2013/07/autodesk-participation-at-tedglobal.html\">\nparticipating enthusiastically at TEDGlobal</a>.</p><center>\n<img alt=\"Autodesk participation at TEDGlobal\" src=\"img/adsk_ted.png\" width=\"400\"/>\n</center><p>Talking about TED, Philip Smith, CAD Systems Manager at\n\n<a href=\"http://www.beca.com\">\nBeca</a> and\n\nSydney Revit API training participant, pointed out some amazing TED presentations on the capabilities of UAVs,\n\n<a href=\"\">\nunmanned aerial vehicles</a>,\n\nand explained some of his ideas on how they could be used for automatically scanning buildings and other surveying purposes:</p><ul>\n<li><a href=\"http://www.ted.com/talks/vijay_kumar_robots_that_fly_and_cooperate.html\">Robots that fly and cooperate</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=w2itwFJCgFQ\">Astounding athletic power of quadcopters</a></li>\n</ul><p>Definitely worth watching, and an important area for further exploration.</p><a name=\"11\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Beyond Design Revamped",
    "local_header_href": "#beyond-design-revamped",
    "chunk_text": "<h4>Beyond Design Revamped</h4><a href=\"http://beyonddesign.typepad.com\">Beyond Design construction blog</a><a name=\"12\"></a>"
  },
  {
    "original_filename": "0988_news_sydney_train",
    "header_text": "Vacation Time Next Week",
    "local_header_href": "#vacation-time-next-week",
    "chunk_text": "<h4>Vacation Time Next Week</h4><p>This may be my last post for a while.</p><p>I am happy we had such a successful and interesting training and were able to create so many useful and instructive little utilities in just two days.</p><p>I am sitting in Dubai airport now, travelling back to Switzerland, and going on vacation next week.</p><p>I wish you a good time, and we will continue our Revit API adventures in August!</p>"
  }
]