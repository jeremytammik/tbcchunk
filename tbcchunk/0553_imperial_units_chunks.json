[
  {
    "original_filename": "0553_imperial_units",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0553_imperial_units",
    "header_text": "Internal Imperial Units",
    "local_header_href": "#internal-imperial-units",
    "chunk_text": "<h3>Internal Imperial Units</h3><p>To start off this week, here is a pretty useless question that still seems to be of great interest to many people:\n\n<p><strong>Question:</strong> Odd question perhaps, but why does Revit internally work in imperial units? \n\n<p><strong>Answer:</strong> I do not find your question odd at all; many others wonder that as well, I am sure.\n\n<p>Briefly, I would hazard that the answer is simply that this is a religious question, or a question of taste, or historically evolved.\n\n<p>Does that satisfy your curiosity?\n\n<p>Here is a bit more background information in a little more depth:\n\n<!--\n<p>Revit was originally made in the USA. \nIt simply uses decimal feet internally. \nThis is the same as NASA by the way (and we know how well that turned out).\n\n<p>On a slightly more technical (serious) note:\nRevit was initially written with the US market as its primary customer base, hence the choice of units made logical sense as this was what most US based architects were thinking in. \nIt made it easier to write the code at the time and with any startup, time to market is everything. \nWhen acquired by Autodesk the first push was to increase the number of early adopters by going global, i.e. if 1% of the US market were early adopters then it stands to reason that there are 1% in every other country too, so it was a quick way to get return on investment. \nAt that point, Revit obviously had to provide support for metric systems and localisation.\n\n<p>Again, for speed of development, the API, when created, exposed the internal imperial values directly.\nInitially Revit had no API, because we thought we could do it all ourselves.\nWhen it was realised that we cannot do it ll ourselves, an API was created for a few selected partners, mainly for analysis purposes.\nFinally, when acquired by Autodesk, Revit became a fully open platform, or started evolving into that, at least.\n\n<p>So, as you can see, things are the way things are by necessity, not necessarily by choice.\n\n<p>It might be possible to make the API units more sensible for developers, but there is no real traction on a scalable solution as of now.\n\n-->\n<ol>\n<li>Revit was first made in the US, and originally only for the US market. US architects work with imperial units.\n<li>At the time it was simplest to write Revit to use imperial units internally (feet for length) to match customer needs.\n<li>When Revit's market expanded, support was extended for metric units.  But the existing database structures were preserved for backwards compatibility.  \n<li>In addition, Revit started expanding in capability and had to cover additional new areas requiring other units such as force, mass, etc.  For those new capabilities, metric units were chosen as being more universally understood and useful.\n<li>When Revit's API was introduced, the simplest method of introduction was to expose the database values directly.  Thus feet for length, metric for everything else.\n</li></li></li></li></li></ol>\n<p>I hope this helps, useless as the information may be!\n\n<p>Many thanks to Giles and Scott for contributing to this!\n</p></p></p></p></p></p></p></p>"
  }
]