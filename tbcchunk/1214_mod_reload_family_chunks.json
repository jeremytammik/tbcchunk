[
  {
    "original_filename": "1214_mod_reload_family",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1214_mod_reload_family",
    "header_text": "Modifying, Saving and Reloading Families",
    "local_header_href": "#modifying-saving-and-reloading-families",
    "chunk_text": "<h3>Modifying, Saving and Reloading Families</h3><p>I recently grabbed one of those rare opportunities to do a little bit of coding myself, to answer a question on modifying and reloading a family.</p><p>More precisely, the task at hand is to modify the text note type font in all of the loaded families.</p><p>I'll take a look at that <a href=\"#3\">below.</a></p><p>First, lets look at a simpler question, on how to\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/saving-family-after-editing-with-familymanager/td-p/5291581\">\nsave a family after editing it</a>,\n\nraised by Raunoveb on the\n\n<a href=\"http://forums.autodesk.com/t5/revit-api/bd-p/160\">\nRevit API discussion forum</a>:</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1214_mod_reload_family",
    "header_text": "Saving Family after Editing with FamilyManager",
    "local_header_href": "#saving-family-after-editing-with-familymanager",
    "chunk_text": "<h4>Saving Family after Editing with FamilyManager</h4><p><strong>Question:</strong> We are developing a solution that uploads Revit Family files to DMS server.</p><p>First we added a few shared parameters that have the information of DMS record to our families using the FamilyManager AddParameter method.</p><p>Everything works fine until we call our UploadOriginal method that attempts to save the modified family file:</p><pre class=\"code\">\n  <span class=\"blue\">string</span> path = Path.GetTempPath();\n  <span class=\"blue\">string</span> name = family.Name;\n  <span class=\"blue\">string</span> fName = name + <span class=\"maroon\">\".rfa\"</span>;\n  <span class=\"blue\">string</span> fPath = path + fName;\n \n  <span class=\"green\">// Revit throws an error on this line </span>\n  <span class=\"green\">// saying that Family is not editable</span>\n  <span class=\"green\">// What could cause this mayhem?</span>\n  <span class=\"green\">// To upload .rfa Family file I need to </span>\n  <span class=\"green\">// save it as a file first and that's what </span>\n  <span class=\"green\">// I try to do until mighty ERROR occurs</span>\n \n  <span class=\"teal\">Document</span> famDoc = doc.EditFamily( family );\n  famDoc.SaveAs( fPath );\n  famDoc.Close( <span class=\"blue\">false</span> );\n \n  <span class=\"green\">// application related code following...</span>\n</pre><p>What could be the reason of this error? How could I fix it?\nMust it be overwritten like a baus (<a href=\"https://www.youtube.com/watch?v=NisCkxU544c\">BOSS</a>)?</p><p><strong>Answer:</strong> I recently implemented an add-in that I discuss further down to update fonts in loaded families.</p><p>For some of the loaded families, EditFamily threw that same exception saying, \"Family is not editable\".</p><p>I added an exception handler to skip them:</p><pre class=\"code\">\n  <span class=\"blue\">try</span>\n  {\n    r1.FamilyDocument\n      = famdoc\n      = doc.EditFamily( f );\n  }\n  <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions.<span class=\"teal\">ArgumentException</span> ex )\n  {\n    r1.Skipped = <span class=\"blue\">true</span>;\n    results.Add( r1 );\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Family '{0}': {1}\"</span>, f.Name, ex.Message );\n    <span class=\"blue\">continue</span>;\n  }\n</pre><p>Here is an excerpt of the add-in log; the families marked 'skipped' are the ones I mean:</p><center>\n<img alt=\"Reload family report\" src=\"img/reload_family_result_msg.png\"/>\n</center><p>I simply assumed that is normal.</p><p>P.S. cool video  :-)</p><p><strong>Question:</strong> I managed to skip those families by simply adding an <code>if(family.IsEditable)</code> block around the code.\nUnfortunately for us these families we try to process must be processed so we can't just skip them.</p><p>I've had 2 ideas that could explain those errors:</p><p>FamilyManager (fm) somehow locks the family currently open in Family Document and only allows us to edit the family after it's released the family.\nHowever even after fm.Dispose() the EditFamily method threw that exception.</p><p>(This idea could be related to first idea).\nOne cannot just simply write a family to file just after the shared parameters have been changed/added.\nA \"save\" command must be somehow executed in order to \"unlock\" this family.\nHowever once again I found no methods in either FamilyManager or Family class that would allows us to do that.</p><p>I have danced around this problem for 3 days and have ran out of ideas.\nAny help \"unlocking\" these families would be greatly appreciated.</p><p><strong>Answer:</strong> Thank you very much for pointing out the IsEditable predicate.\nI successfully replaced my exception handler by simply checking that instead.</p><p>Regarding your locked families, have you tried ensuring that absolutely no other documents are open, only the one and only family that you are trying to modify?</p><p><strong>Question:</strong> Thanks for your comment about any other open documents.\nI suddenly realized that in my main program I already had FamilyDocument open.\nWhen I used UploadOriginal() method I gave doc as an input and then tried:</p><pre class=\"code\">\n  <span class=\"blue\">var</span> famDoc = doc.EditFamily( family );\n  famDoc.SaveAs( path );\n  famDoc.Close( <span class=\"blue\">false</span> );\n</pre><p>That created another Family Document instance of the same family and that's why it threw this \"Family not editable\" exception. I changed it to:</p><pre class=\"code\">\n  doc.SaveAs( path );\n \n  <span class=\"green\">// Can't close it since I have this family view </span>\n  <span class=\"green\">// open in Revit and API doesn't have permission </span>\n  <span class=\"green\">// to close visibly open documents in Revit.</span>\n \n  <span class=\"green\">//doc.Close(false);</span>\n</pre><p>However now I've got problems with getting the Family.Name value from doc.OwnerFamily.Name.\nIt always returns \"\" and all the files saved look like this \"/folder/.rfa\", when they should look something like this \"/folder/NightLamp.rfa\".</p><p><strong>Answer:</strong> Cool.</p><p>Progress.</p><p>How about using the document title instead of the family name?</p><p><strong>Question:</strong> Using doc.Title did the trick. However it's weird that OwnerFamily.Name returned blank response.</p><p>Thanks for everything. And since your second answer provided most help regarding to the main question I'll mark that one as a solution.</p><p><strong>Answer:</strong> Cooler still.</p><p>That was a quick solution.</p><p>Thank you for marking the solution and for the interesting discussion.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1214_mod_reload_family",
    "header_text": "Replacing all Text Note Type Fonts in all Loaded Families",
    "local_header_href": "#replacing-all-text-note-type-fonts-in-all-loaded-families",
    "chunk_text": "<h4>Replacing all Text Note Type Fonts in all Loaded Families</h4><p>With that little intermezzo out of the way, we get to the real thing:</p><p><strong>Question:</strong> Update text font style property.\n\n<p>I am trying to update the text font property for the active project and also update all the families loaded in that project, i.e. the active document.</p>\n<p>The first part works fine, updating the text property for the active project.</p>\n<p>I am having trouble figuring out how to update the text property for all the families loaded into the active project, though.</p>\n<p>This is my current coding attempt:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Document</span> doc = commandData.Application\n    .ActiveUIDocument.Document;\n \n  <span class=\"teal\">FilteredElementCollector</span> collectorUsed\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  collectorUsed.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Family</span> f <span class=\"blue\">in</span> collectorUsed )\n  {\n    <span class=\"blue\">string</span> name = f.Name;\n    <span class=\"teal\">Document</span> famdoc = doc.EditFamily( f );\n \n    <span class=\"teal\">FilteredElementCollector</span> famcollectorUsed\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( famdoc );\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; textNoteTypes\n      = famcollectorUsed.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">TextNoteType</span> ) )\n        .ToElementIds();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> textNoteTypeId <span class=\"blue\">in</span> textNoteTypes )\n    {\n      <span class=\"teal\">Element</span> ele = doc.GetElement( textNoteTypeId );\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> p <span class=\"blue\">in</span> ele.Parameters )\n      {\n        <span class=\"blue\">if</span>( p.Definition.Name == <span class=\"maroon\">\"Text Font\"</span> )\n        {\n          <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tranew\n            = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n          {\n            tranew.Start( <span class=\"maroon\">\"Update\"</span> );\n            p.Set( <span class=\"maroon\">\"Arial Black\"</span> );\n            tranew.Commit();\n          }\n        }\n      }\n    }\n  }\n</pre>\n<p><strong>Answer:</strong></p>\n<p>I discussed the topic of reloading families on The Building Coder in 2011:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/reloading-a-family.html\">Reloading a family</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/reloading-a-family-again.html\">Reloading a family again</a></li>\n</ul>\n<p>Some things have changed a little bit since then.</p>\n<p>The main principles remain the same, however.</p>\n<p>I looked at the help file on the\n\n<a href=\"http://knowledge.autodesk.com/support/revit-products/downloads/caas/CloudHelp/cloudhelp/2014/ENU/Revit/files/GUID-B3E40C07-175D-48CA-BF73-3003AF760F7B-htm.html\">\nText Note Type Properties</a> and\n\nsee the Text Font property that you wish to change, and that looks fine.</p>\n<p>There is no need to loop through all the element parameters and match individual strings to find the parameter you are after, however.</p>\n<p>You can use the GetParameters or LookupParameter method instead. You should obviously no longer use the obsolete get_Parameter method, if you can avoid it.</p>\n<p>By the way, you should also not use the parameter name to identify it if it is possible to use a built-in parameter enumeration value instead, since the latter is both language independent, more efficient, and guaranteed to return a unique result.</p>\n<p>For the sake of efficiency, you might want to check whether the current font property setting already as the desired value before you open an extra new transaction and modify it.</p>\n<p>Just as you say, though, even after you have modified the text note types in the family document and committed the transactions, the changes are still not reflected in the container project document.</p>\n<p>This is actually clearly documented in the Revit API help file RevitAPI.chm, in the remarks on the Document.EditFamily method:</p>\n<blockquote>\n<h4>Remarks</h4>\n<p>This creates an independent copy of the family for editing. To apply the changes back to the family stored in the document, use the LoadFamily overload accepting IFamilyLoadOptions.</p>\n<p>This method may not be called if the document is currently modifiable (has an open transaction) or is in a read-only state. The method may not be called during dynamic updates. To test the document's current status, check the values of IsModifiable and IsReadOnly properties.</p>\n</blockquote>\n<p>I also pointed this out when discussing some\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/edit-family-requires-no-transaction.html\">\nchanges in calling the EditDocument method</a> back\n\nin the Revit 2013 timeframe.</p>\n<p>There are some further important considerations when\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/reloading-a-family.html\">\nreloading a family</a>.</p>\n<p>Actually, here is a complete list of discussions related to reloading families or mentioning the IFamilyLoadOptions interface that might also be useful:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/the-revit-family-api.html\">The Revit Family API</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/ifamilyloadoptions-and-gemini.html\">IFamilyLoadOptions</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/reloading-a-family.html\">Reloading a Family</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/10/reloading-a-family-again.html\">Reloading a Family Again</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/05/edit-family-requires-no-transaction.html\">Edit Family Requires No Transaction</a></li>\n</ul>\n<p>Based on the information provided there, we have to explicitly reload all the modified families after updating their text note type font properties by calling the LoadFamily method on each, and specify an appropriate IFamilyLoadOptions interface implementation when doing so. Here is a suitable one, updated from the discussions listed above:</p>\n<pre class=\"code\">\n  <span class=\"blue\">class</span> <span class=\"teal\">JtFamilyLoadOptions</span> : <span class=\"teal\">IFamilyLoadOptions</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> OnFamilyFound(\n      <span class=\"blue\">bool</span> familyInUse,\n      <span class=\"blue\">out</span> <span class=\"blue\">bool</span> overwriteParameterValues )\n    {\n      overwriteParameterValues = <span class=\"blue\">true</span>;\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> OnSharedFamilyFound(\n      <span class=\"teal\">Family</span> sharedFamily,\n      <span class=\"blue\">bool</span> familyInUse,\n      <span class=\"blue\">out</span> <span class=\"teal\">FamilySource</span> source,\n      <span class=\"blue\">out</span> <span class=\"blue\">bool</span> overwriteParameterValues )\n    {\n      source = <span class=\"teal\">FamilySource</span>.Family;\n      overwriteParameterValues = <span class=\"blue\">true</span>;\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n  }\n</pre>\n<p>Another issue to be aware of is that you are not allowed to perform any element deletions while iterating over the results of a filtered element collector, or Revit will throw an InvalidOperationException saying 'The iterator cannot proceed due to changes made to the Element table in Revit's database (typically, This can be the result of an Element deletion).'</p>\n<p>That forced me to postpone the family reloading operation and move it out of the collector iteration loop, where it was originally situated.</p>\n<p>I implemented a new add-in named SetTextFontInFamilies to demonstrate all this.</p>\n<p>As usual, in order to understand and understand what it really does, the logging and reporting code exceeds the actual task implementation.</p>\n<p>It keeps track of all the families processed.</p>\n<p>Some families are skipped, because the EditFamily method throws an ArgumentException saying 'This family is not editable.'</p>\n<p>If not skipped, it also records all the text note types processed, and how many of them actually require a modification of the font.</p>\n<p>Here is the main result logging implementation class:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Logging helper class to keep track of the result</span>\n  <span class=\"gray\">///</span><span class=\"green\"> of updating the font of all text note types in a</span>\n  <span class=\"gray\">///</span><span class=\"green\"> family. The family may be skipped or not. If not,</span>\n  <span class=\"gray\">///</span><span class=\"green\"> keep track of all its text note types and a flag </span>\n  <span class=\"gray\">///</span><span class=\"green\"> for each indicating whether it was updated.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">SetTextFontInFamilyResult</span>\n  {\n    <span class=\"blue\">class</span> <span class=\"teal\">TextNoteTypeResult</span>\n    {\n      <span class=\"blue\">public</span> <span class=\"blue\">string</span> Name { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Updated { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The Family element name in the project database.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> FamilyName { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The family document used to reload the family.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"teal\">Document</span> FamilyDocument { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Was this family skipped, e.g. this family is not editable.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Skipped { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> List of text note type names and updated flags.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">TextNoteTypeResult</span>&gt; TextNoteTypeResults;\n \n    <span class=\"blue\">public</span> SetTextFontInFamilyResult( <span class=\"teal\">Family</span> f )\n    {\n      FamilyName = f.Name;\n      TextNoteTypeResults = <span class=\"blue\">null</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> AddTextNoteType(\n      <span class=\"teal\">TextNoteType</span> tnt,\n      <span class=\"blue\">bool</span> updated )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == TextNoteTypeResults )\n      {\n        TextNoteTypeResults\n          = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">TextNoteTypeResult</span>&gt;();\n      }\n      <span class=\"teal\">TextNoteTypeResult</span> r = <span class=\"blue\">new</span> <span class=\"teal\">TextNoteTypeResult</span>();\n      r.Name = tnt.Name;\n      r.Updated = updated;\n      TextNoteTypeResults.Add( r );\n    }\n \n    <span class=\"blue\">int</span> NumberOfUpdatedTextNoteTypes\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">null</span> == TextNoteTypeResults\n          ? 0\n          : TextNoteTypeResults\n            .Count&lt;<span class=\"teal\">TextNoteTypeResult</span>&gt;(\n              r =&gt; r.Updated );\n      }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> NeedsReload\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> 0 &lt; NumberOfUpdatedTextNoteTypes;\n      }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">override</span> <span class=\"blue\">string</span> ToString()\n    {\n      <span class=\"green\">// FamilyDocument.Title</span>\n \n      <span class=\"blue\">string</span> s = FamilyName + <span class=\"maroon\">\": \"</span>;\n \n      <span class=\"blue\">if</span>( Skipped )\n      {\n        s += <span class=\"maroon\">\"skipped\"</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">int</span> nTotal = TextNoteTypeResults.Count;\n        <span class=\"blue\">int</span> nUpdated = NumberOfUpdatedTextNoteTypes;\n \n        s += <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"{0} text note types processed, \"</span>\n          + <span class=\"maroon\">\"{1} updated\"</span>, nTotal, nUpdated );\n      }\n      <span class=\"blue\">return</span> s;\n    }\n  }\n</pre>\n<p>I actually ended up using it for more than just logging the results, once I discovered that we need to terminate the first iteration over the filtered element collector before we can apply the modifications.\nTherefore, by tracking the font modifications made, this class also keeps track of which families need reloading at all.</p>\n<p>The main Execute method making use of this, determining and iterating over all the loaded families, modifying all their text note type fonts and reloading them afterwards, ends up looking like this:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">FilteredElementCollector</span> families\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">SetTextFontInFamilyResult</span>&gt; results\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">SetTextFontInFamilyResult</span>&gt;();\n \n    <span class=\"teal\">Document</span> famdoc;\n    <span class=\"teal\">SetTextFontInFamilyResult</span> r1;\n    <span class=\"blue\">bool</span> updatedTextNoteStyle;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Family</span> f <span class=\"blue\">in</span> families )\n    {\n      r1 = <span class=\"blue\">new</span> <span class=\"teal\">SetTextFontInFamilyResult</span>( f );\n \n      <span class=\"blue\">bool</span> updatedFamily = <span class=\"blue\">false</span>;\n \n      <span class=\"green\">// Using exception handler.</span>\n \n      <span class=\"green\">//try</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//  r1.FamilyDocument</span>\n      <span class=\"green\">//    = famdoc</span>\n      <span class=\"green\">//    = doc.EditFamily( f );</span>\n      <span class=\"green\">//}</span>\n      <span class=\"green\">//catch( Autodesk.Revit.Exceptions.ArgumentException ex )</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//  r1.Skipped = true;</span>\n      <span class=\"green\">//  results.Add( r1 );</span>\n      <span class=\"green\">//  Debug.Print( \"Family '{0}': {1}\", f.Name, ex.Message );</span>\n      <span class=\"green\">//  continue;</span>\n      <span class=\"green\">//}</span>\n \n      <span class=\"green\">// Better: test IsEditable predicate.</span>\n \n      <span class=\"blue\">if</span>( f.IsEditable )\n      {\n        r1.FamilyDocument\n          = famdoc\n          = doc.EditFamily( f );\n      }\n      <span class=\"blue\">else</span>\n      {\n        r1.Skipped = <span class=\"blue\">true</span>;\n        results.Add( r1 );\n        <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Family '{0}' is not editable\"</span>, f.Name );\n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"teal\">FilteredElementCollector</span> textNoteTypes\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( famdoc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">TextNoteType</span> ) );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">TextNoteType</span> tnt <span class=\"blue\">in</span> textNoteTypes )\n      {\n        updatedTextNoteStyle = <span class=\"blue\">false</span>;\n \n        <span class=\"green\">// It is normally better to use the built-in</span>\n        <span class=\"green\">// parameter enumeration value rather than</span>\n        <span class=\"green\">// the parameter definition display name.</span>\n        <span class=\"green\">// The latter is language dependent, possibly</span>\n        <span class=\"green\">// returns multiple hits, and uses a less </span>\n        <span class=\"green\">// efficient string comparison.</span>\n \n        <span class=\"green\">//Parameter p2 = tnt.get_Parameter( </span>\n        <span class=\"green\">//  _parameter_bip );</span>\n \n        <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Parameter</span>&gt; ps = tnt.GetParameters(\n          _parameter_name );\n \n        <span class=\"teal\">Debug</span>.Assert( 1 == ps.Count,\n          <span class=\"maroon\">\"expected only one 'Text Font' parameter\"</span> );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> p <span class=\"blue\">in</span> ps )\n        {\n          <span class=\"blue\">if</span>( _font_name != p.AsString() )\n          {\n            <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx\n              = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n            {\n              tx.Start( <span class=\"maroon\">\"Update Text Font\"</span> );\n              p.Set( _font_name );\n              tx.Commit();\n \n              updatedFamily\n                = updatedTextNoteStyle\n                = <span class=\"blue\">true</span>;\n            }\n          }\n        }\n        r1.AddTextNoteType( tnt, updatedTextNoteStyle );\n      }\n      results.Add( r1 );\n \n      <span class=\"green\">// This causes the iteration over the filtered </span>\n      <span class=\"green\">// element collector to throw an </span>\n      <span class=\"green\">// InvalidOperationException: The iterator cannot </span>\n      <span class=\"green\">// proceed due to changes made to the Element table </span>\n      <span class=\"green\">// in Revit's database (typically, This can be the </span>\n      <span class=\"green\">// result of an Element deletion).</span>\n \n      <span class=\"green\">//if( updatedFamily )</span>\n      <span class=\"green\">//{</span>\n      <span class=\"green\">//  f2 = famdoc.LoadFamily(</span>\n      <span class=\"green\">//    doc, new JtFamilyLoadOptions() );</span>\n      <span class=\"green\">//}</span>\n    }\n \n    <span class=\"green\">// Reload modified families after terminating </span>\n    <span class=\"green\">// the filtered element collector iteration.</span>\n \n    <span class=\"teal\">IFamilyLoadOptions</span> opt\n      = <span class=\"blue\">new</span> <span class=\"teal\">JtFamilyLoadOptions</span>();\n \n    <span class=\"teal\">Family</span> f2;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">SetTextFontInFamilyResult</span> r <span class=\"blue\">in</span> results )\n    {\n      <span class=\"blue\">if</span>( r.NeedsReload )\n      {\n        f2 = r.FamilyDocument.LoadFamily( doc, opt );\n      }\n    }\n \n    <span class=\"teal\">TaskDialog</span> d = <span class=\"blue\">new</span> <span class=\"teal\">TaskDialog</span>(\n      <span class=\"maroon\">\"Set Text Note Font\"</span> );\n \n    d.MainInstruction = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"{0} families processed.\"</span>, results.Count );\n \n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; family_results\n      = results.ConvertAll&lt;<span class=\"blue\">string</span>&gt;(\n        r =&gt; r.ToString() );\n \n    family_results.Sort();\n \n    d.MainContent = <span class=\"blue\">string</span>.Join( <span class=\"maroon\">\"\\r\\n\"</span>,\n      family_results );\n \n    d.Show();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre>\n<p>Here is a report of the result, displayed by this command in a Revit task dialogue:</p>\n<center>\n<img alt=\"Reload family report\" src=\"img/reload_family_result_msg.png\"/>\n</center>\n<p>This report omits the list of text note types processed within each family, although we actually do keep track of them internally as well in the TextNoteTypeResult and SetTextFontInFamilyResult classes.</p>\n<p>Note that I go to the very slight extra effort of sorting the results alphabetically for the convenience of the human reader.</p>\n<p>Also note that the task dialogue very kindly adds a scroll bar automatically.</p>\n<p>Finally, note that running this command even in a minimal new empty Revit project takes rather a long time to complete.</p>\n<p>The complete implementation and Visual Studio solution including the add-in manifest is provided in the\n\n<a href=\"https://github.com/jeremytammik/SetTextFontInFamilies\">SetTextFontInFamilies GitHub repository</a>.\n</p></p>"
  },
  {
    "original_filename": "1214_mod_reload_family",
    "header_text": "Remarks",
    "local_header_href": "#remarks",
    "chunk_text": "<h4>Remarks</h4><p>This creates an independent copy of the family for editing. To apply the changes back to the family stored in the document, use the LoadFamily overload accepting IFamilyLoadOptions.</p><p>This method may not be called if the document is currently modifiable (has an open transaction) or is in a read-only state. The method may not be called during dynamic updates. To test the document's current status, check the values of IsModifiable and IsReadOnly properties.</p>"
  }
]