[
  {
    "original_filename": "0119_cases_1",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0119_cases_1",
    "header_text": "Revit API Cases 1",
    "local_header_href": "#revit-api-cases-1",
    "chunk_text": "<h3>Revit API Cases 1</h3><p>Here are the summaries of some of the Revit API ADN cases handled by me and my colleagues Joe Ye and Saikat Bhattacharya in the past few days:</p><ol>\n<li><a href=\"#1\">Set the display colour of a line.</a></li>\n<li><a href=\"#2\">Split walls and lines, or ducts and pipes.</a></li>\n<li><a href=\"#3\">Change colour of a family instance.</a></li>\n<li><a href=\"#4\">Export family symbols from a project and save in an external RFA file.</a></li>\n</ol><a name=\"1\"></a>"
  },
  {
    "original_filename": "0119_cases_1",
    "header_text": "1. Set the display colour of a line",
    "local_header_href": "#1-set-the-display-colour-of-a-line",
    "chunk_text": "<h4>1. Set the display colour of a line</h4><p><strong>Question:</strong>\nHow can I set the display colour of a line?</p><p><strong>Answer:</strong>\nIn Revit 2009, I do not see any way to access the color settings in the line styles which in turn affects the color of lines.\nThe line style Color property is not exposed to enable us to change the color.</p><p>Revit 2010 offers a new possibility to modify the line colour via the new LineColor property on the Category class.\nThus, for any given line, one can access its category and its line color property, which is read and write enabled.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "0119_cases_1",
    "header_text": "2. Split walls and lines, or ducts and pipes",
    "local_header_href": "#2-split-walls-and-lines-or-ducts-and-pipes",
    "chunk_text": "<h4>2. Split walls and lines, or ducts and pipes</h4><p><strong>Question:</strong>\nI would like to split ducts and pipes in Revit MEP.\nCan I call the 'Split Walls and Lines' functionality somehow from the Revit 2009 API and\napply it to Ducts and Pipes?\nIf not, is this feature going to be available in the 2010 API?\nI have heard that duct and pipe creation will be included.</p><p><strong>Answer:</strong>\nThe Revit 2010 API does not provide any API method to cut or split any of the duct, pipe or wall elements.\nMethods to create ducts and pipes are indeed provided in 2010.\nThus you could use the NewDuct, NewPipe and NewWall methods to create a new element, shorten the original one accordingly, and\nset the properties and parameters obtained from the original to the newly created one.\nThis might provide a possibility to mimic the splitting effect.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "0119_cases_1",
    "header_text": "3. Change colour of a family instance",
    "local_header_href": "#3-change-colour-of-a-family-instance",
    "chunk_text": "<h4>3. Change colour of a family instance</h4><p>This is a continuation of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/more-questions.html#change_colour_of_one_instance\">\nprevious post</a>\n\non this topic:</p><p><strong>Question:</strong>\nCould you provide the code to illustrate the approach you described to change the colour of a family instance?</p><p><strong>Answer:</strong>\nSince the colour of an instance is defined by the material assigned to the type or symbol referenced by the instance, this involves duplicating the family symbol it references, assigning a different material colour to the newly created type, and then assigning the new type to the object that you want to colour differently. Here is the code to illustrate this approach.</p><p>For simplicity, it works with only one family instance, say a column, in the Revit model.\nA material has been applied through the user interface, and then the following piece of code is executed to create a duplicate symbol and access the material from the symbol. In this case, for now, it directly changes the colour of the material instead of selecting another material with a different colour or duplicating the colour. Finally, it applies the duplicated symbol to the family instance:</p><pre class=\"code\">\n<span class=\"teal\">ElementSet</span> elemset = doc.Selection.Elements;\n \n<span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> elemset )\n{\n  <span class=\"teal\">FamilyInstance</span> inst = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"green\">// get the symbol and duplicate it:</span>\n  <span class=\"teal\">FamilySymbol</span> dupSym = inst.Symbol.Duplicate(\n    <span class=\"maroon\">\"D1\"</span> ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n  <span class=\"green\">// access the material:</span>\n  <span class=\"teal\">ElementId</span> matId = dupSym.get_Parameter(\n    <span class=\"maroon\">\"Material\"</span> ).AsElementId();\n \n  <span class=\"teal\">Material</span> mat = doc.get_Element( <span class=\"blue\">ref</span> matId )\n    <span class=\"blue\">as</span> Autodesk.Revit.Elements.<span class=\"teal\">Material</span>;\n \n  <span class=\"green\">// change the color of this material:</span>\n  mat.Color = <span class=\"blue\">new</span> <span class=\"teal\">Color</span>( 255, 0, 0 );\n \n  <span class=\"green\">// assign the new symbol to the instance:</span>\n  inst.Symbol = dupSym;\n}\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "0119_cases_1",
    "header_text": "4. Export family symbols from a project and save as RFA files",
    "local_header_href": "#4-export-family-symbols-from-a-project-and-save-as-rfa-files",
    "chunk_text": "<h4>4. Export family symbols from a project and save as RFA files</h4><p><strong>Question:</strong>\nI would like to use the beta version of Revit 2010 and the new family API to save out all family symbols in an existing project to external RFA files.\nI am trying to use Document.EditFamily to open the family document, and then use the SaveAs method on that to export the family definition. Unfortunately, EditFamily throws an exception, System.InvalidOperationException, with the message 'Loaded Family Editing failed.'</p><p><strong>Answer:</strong>\nSome families can be edited and saved to an external file, and others cannot.\nIf the family can be edited in the Revit user interface, it should also be possible to open it through the API.\nHere is the result of logging the calls to EditFamily on all the families contained in a simple project named one_door.rvt containing one door symbol and an instance of it and very little else:</p><pre>\nError processing 'System Panel': Loaded Family Editing failed.\nError processing 'Rectangular Mullion': Loaded Family Editing failed.\nError processing 'Circular Mullion': Loaded Family Editing failed.\nError processing 'L Corner Mullion': Loaded Family Editing failed.\nError processing 'V Corner Mullion': Loaded Family Editing failed.\nError processing 'Trapezoid Corner Mullion': Loaded Family Editing failed.\nError processing 'Quad Corner Mullion': Loaded Family Editing failed.\nSuccess processing 'M_Single-Flush'\n</pre><p>As you can see, a number of built-in system families are impossible to edit, and calling EditFamily on those throws an exception of type System.InvalidOperationException.</p><p>The door symbol is defined through a standard family and can be edited and saved.\nAfter running the command, the family file for the door symbol is stored on disk:</p><pre>\n2009-04-06  13:37   192,512 M_Single-Flush.rfa\n2009-02-24  10:41   294,912 one_door.rvt\n</pre><p>Here is the code for the external command which iterates through all the families in the project and tries to save each to a separate RFA file on disk:</p><pre class=\"code\">\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _path = <span class=\"maroon\">\"C:/tmp/extract/\"</span>;\n \n<span class=\"blue\">public</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"teal\">Filter</span> filter = app.Create.Filter.NewTypeFilter(\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; fams = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n  doc.get_Elements( filter, fams );\n \n  <span class=\"blue\">foreach</span> ( <span class=\"teal\">Family</span> f <span class=\"blue\">in</span> fams )\n  {\n    <span class=\"blue\">string</span> name = f.Name;\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">Document</span> famDoc = doc.EditFamily( f );\n      famDoc.SaveAs( _path + name + <span class=\"maroon\">\".rfa\"</span> );\n      famDoc.Close( <span class=\"blue\">false</span> );\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Success processing '{0}'\"</span>,\n        name );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Error processing '{0}': {1}\"</span>,\n        name, ex.Message );\n    }\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Failed;\n}\n</pre>"
  }
]