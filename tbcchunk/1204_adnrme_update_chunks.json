[
  {
    "original_filename": "1204_adnrme_update",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1204_adnrme_update",
    "header_text": "AdnRme Update to Eliminate Obsolete API Usage",
    "local_header_href": "#adnrme-update-to-eliminate-obsolete-api-usage",
    "chunk_text": "<h3>AdnRme Update to Eliminate Obsolete API Usage</h3><p>The ADN Revit MEP HVAC and electrical sample\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.40\">\nAdnRme</a> version\n\n<a href=\"https://github.com/jeremytammik/AdnRme/releases/tag/2015.0.0.2\">\n2015.0.0.2</a> produces\n\n<a href=\"zip/AdnRme_2015_2_warnings.txt\">three compilation warnings</a>,\n\nall three saying:</p><ul><li>'Autodesk.Revit.DB.Family.Symbols' is obsolete:\n'This property is obsolete in Revit 2015.\nUse Family.GetFamilySymbolIds() instead.'</li></ul><p>So let's do what the man says.</p><p>The code producing the first two instances of the warning in the module CmdChangeSize.cs looks like this:</p><pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Family</span> family <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"green\">// Family category is not implemented, </span>\n    <span class=\"green\">// so check the symbols instead:</span>\n \n    <span class=\"blue\">bool</span> categoryMatches = <span class=\"blue\">false</span>;\n\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> symbol <span class=\"blue\">in</span> family.Symbols )\n    {\n      categoryMatches = ( <span class=\"blue\">null</span> != symbol.Category\n        &amp;&amp; symbol.Category.Id.IntegerValue.Equals(\n          ( <span class=\"blue\">int</span> ) <span class=\"teal\">BuiltInCategory</span>.OST_DuctTerminal ) );\n \n      <span class=\"blue\">break</span>; <span class=\"green\">// we only need to check the first one</span>\n    }\n    <span class=\"blue\">if</span>( categoryMatches )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">SymbMinMax</span>&gt; familySymbols\n        = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">SymbMinMax</span>&gt;();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> symbol <span class=\"blue\">in</span> family.Symbols )\n      {\n        <span class=\"teal\">SymbMinMax</span> a = <span class=\"blue\">new</span> <span class=\"teal\">SymbMinMax</span>();\n        a.Symbol = symbol;\n \n        a.Min = <span class=\"teal\">Util</span>.GetParameterValueFromName(\n          symbol, <span class=\"teal\">ParameterName</span>.MinFlow );\n \n        a.Max = <span class=\"teal\">Util</span>.GetParameterValueFromName(\n          symbol, <span class=\"teal\">ParameterName</span>.MaxFlow );\n \n        familySymbols.Add( a );\n      }\n      dictFamilyToSymbols.Add(\n        family.Name, familySymbols );\n    }\n  }\n</pre><p>This is the replacement code:</p><pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Family</span> family <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"teal\">ISet</span>&lt;<span class=\"teal\">ElementId</span>&gt; symbolIds\n      = family.GetFamilySymbolIds();\n \n    <span class=\"green\">// Family category is not implemented, </span>\n    <span class=\"green\">// so check the symbols instead:</span>\n \n    <span class=\"blue\">bool</span> categoryMatches = <span class=\"blue\">false</span>;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> symbolIds )\n    {\n      <span class=\"teal\">Element</span> symbol = doc.GetElement( id );\n \n      categoryMatches = ( <span class=\"blue\">null</span> != symbol.Category\n        &amp;&amp; symbol.Category.Id.IntegerValue.Equals(\n          (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_DuctTerminal ) );\n \n      <span class=\"blue\">break</span>; <span class=\"green\">// we only need to check the first one</span>\n    }\n    <span class=\"blue\">if</span>( categoryMatches )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">SymbMinMax</span>&gt; familySymbols\n        = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">SymbMinMax</span>&gt;();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> symbolIds )\n      {\n        <span class=\"teal\">FamilySymbol</span> symbol = doc.GetElement( id )\n          <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n        <span class=\"teal\">SymbMinMax</span> a = <span class=\"blue\">new</span> <span class=\"teal\">SymbMinMax</span>();\n        a.Symbol = symbol;\n \n        a.Min = <span class=\"teal\">Util</span>.GetParameterValueFromName(\n          symbol, <span class=\"teal\">ParameterName</span>.MinFlow );\n \n        a.Max = <span class=\"teal\">Util</span>.GetParameterValueFromName(\n          symbol, <span class=\"teal\">ParameterName</span>.MaxFlow );\n \n        familySymbols.Add( a );\n      }\n      dictFamilyToSymbols.Add(\n        family.Name, familySymbols );\n    }\n  }\n</pre><p>Note that in the first replacement above, we skip casting the element returned by the GetElement method to a FamilySymbol instance, because all we need to do with it is query its Category property.\nThis can be done just as well on the Element base class.</p><p>The second replacement requires the cast, however.</p><p>You can view the GitHub\n\n<a href=\"https://github.com/jeremytammik/AdnRme/compare/2015.0.0.2...2015.0.0.3\">\ndiff between version 2015.0.0.2 and 2015.0.0.3</a> to\n\nsee the exact changes I made to eliminate all three warnings.</p><p>I added some other trivial changes after the fix described above, in fact, so the current version at the moment of writing this is\n\n<a href=\"https://github.com/jeremytammik/AdnRme/releases/tag/2015.0.0.4\">2015.0.0.4</a>.</p><p>You can always download the complete source code, Visual Studio solution and add-in manifest of the most up-to-date version from the\n\n<a href=\"https://github.com/jeremytammik/AdnRme\">\nAdnRme GitHub repository</a>.</p>"
  }
]