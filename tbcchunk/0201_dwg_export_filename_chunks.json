[
  {
    "original_filename": "0201_dwg_export_filename",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0201_dwg_export_filename",
    "header_text": "DWG Export Filename",
    "local_header_href": "#dwg-export-filename",
    "chunk_text": "<h3>DWG Export Filename</h3><p>Here is a question handled by Joe Ye that I thought might be of general interest.</p><p>It makes use of the Revit SDK sample ImportExport converted to VB.NET.\nWe mentioned the issue of converting Revit SDK samples from C# to VB in \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/vb-samples-and-other-questions.html#2\">\none post</a>,\n\nand Adam Nagy later presented a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/porting-from-c-to-vbnet.html\">\nmore complete port</a>. \n\n<p><strong>Question:</strong>\nI am making an application to export Revit views to DWG files.\nI used the ImportExport sample converted to VB.NET as a basis.\nI am having trouble defining filenames other than the built-in solution. \nThe syntax for defining the DWG filename for a given view seems to be:</p>\n<pre>\n[FileName] &amp; \" - \" &amp; [ViewType] &amp; \" - \" &amp; [ViewName] \n</pre>\n<p>The filename can be changed, but the other substrings seem to be hardcoded, or at least I can't find where they are defined. \nI would like the FileName and ViewType substrings to be optional and maybe replaced by some other project defined prefix. \nIs this possible through the API?</p>\n<p>If not, a workaround could be to rename the DWG files afterwards, but I hope to avoid that.</p>\n<p><strong>Answer:</strong>\nIn this case, you are using one of the overloads of the Export method taking four arguments, the fourth of which specifies the type of export required. \nThe first three are folder, name, and views:</p>\n<ul>\n<li>folder: the output folder into which the files will be exported.\n<li>name: either the name of a single file or a prefix for a set of files. If null or empty, automatic naming will be used.\n<li>views: a selection of views to be exported. If null or empty, only the active view will be exported.\n</li></li></li></ul>\n<p>As the documentation says, the exported DWG file name is in fact generated using a hardcoded algorithm inside Revit if the view set contains more than one single element.\n\n<p>If only one view is specified, then the filename string constructed from three substrings provided by specific variables is used. \nIt is defined in the module ExportData.vb, in the Initialize function:</p>\n<pre class=\"code\">\n<span class=\"blue\">Private</span> <span class=\"blue\">Sub</span> Initialize()\n  <span class=\"green\">' The directory into which the file will be exported </span>\n  <span class=\"blue\">Dim</span> dllFilePath <span class=\"blue\">As</span> <span class=\"blue\">String</span> _\n    = Assembly.GetExecutingAssembly().Location\n \n  m_exportFolder = Path.GetDirectoryName(dllFilePath)\n \n  <span class=\"green\">' The file name to be used by export </span>\n  <span class=\"blue\">Dim</span> docTitle <span class=\"blue\">As</span> <span class=\"blue\">String</span> = m_activeDoc.Title\n \n  <span class=\"blue\">Dim</span> v <span class=\"blue\">As</span> View = m_activeDoc.ActiveView\n \n  <span class=\"blue\">Dim</span> viewName <span class=\"blue\">As</span> <span class=\"blue\">String</span> = v.Name\n  <span class=\"blue\">Dim</span> viewType <span class=\"blue\">As</span> <span class=\"blue\">String</span> = v.ViewType.ToString()\n \n  m_exportFileName = docTitle _\n    + <span class=\"maroon\">\"-\"</span> + viewType _\n    + <span class=\"maroon\">\"-\"</span> + viewName _\n    + <span class=\"maroon\">\".\"</span> + getExtension().ToString()\n \n  <span class=\"green\">' Whether current active view is 3D view </span>\n \n  <span class=\"blue\">If</span> v.ViewType = Enums.ViewType.ThreeD <span class=\"blue\">Then</span>\n    m_is3DView = <span class=\"blue\">True</span>\n  <span class=\"blue\">Else</span>\n    m_is3DView = <span class=\"blue\">False</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n<span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n</pre>\n<p>Therefore, you can easily make FileName and ViewType optional or replace them by some other prefix. \nSimply change the string values in the definition of m_exportFileName as you please, for instance like this:</p>\n<pre class=\"code\">\nm_exportFileName = docTitle + \"-\" + aaaa + . + getExtension().ToString\n</pre>\n<p>Note that changes to the specified filename have no effect if more than one view is given in the third argument to the Export method.\n\n<!-- <p>If nore than on view is passed in, changes to the string values have no effect, and docTitle + ViewType + ViewName are always used. -->\n\nIf the third argument includes more than one view, Revit will automatically name each exported DWG file using a hard-coded rule including the second argument to the Export method as a prefix. \nIf the third argument includes just one single view, then the file name passed in is used. \nSo the workaround to use your own naming rule is to export only one view at a time.\nIn case of multiple views, you can export them one by one in a loop. \n\n<!-- \n\n<p>I just discovered that it works if you select current view only. \nNot if you select multiple views/sheets. \nIn our application I have removed the the current view option. \n\n<p>If only the current view is exported, there is one view in the third argument of Export() method. \nSo it can use the name we specified through the second argument. \n\n-->\n<p>This information obviously also applies to the other overloads of the Export method taking a ViewSet argument, including export to:\n\n<ul>\n<li>DGN\n<li>DWF2D\n<li>DWF3D\n<li>DWFX2D\n<li>DWFX3D\n<li>DWG\n<li>FBX\n</li></li></li></li></li></li></li></ul>\n<p>Thank you very much Joe for this answer!\n</p></p></p></p></p>"
  }
]