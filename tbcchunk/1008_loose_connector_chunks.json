[
  {
    "original_filename": "1008_loose_connector",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1008_loose_connector",
    "header_text": "Open MEP Connector Warning",
    "local_header_href": "#open-mep-connector-warning",
    "chunk_text": "<h3>Open MEP Connector Warning</h3><p>I presented a little utility add-in yesterday that\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/determining-maximal-flow-in-hvac-duct-connectors.html\">\ndetermines the maximal flow</a> in\n\nHVAC duct connectors and populates a shared parameter with the result.</p><p>It received positive feedback, and triggered an additional request for new functionality:</p><p><strong>Response:</strong> Looks great!\nThis is a huge step forward.\nThe routine runs as expected, and actually uncovered a disconnect in my sample model.\nI was also then able to run it successfully on other, bigger models with no issues.</p><p>One situation where we may improve the functionality might be where duct has an open end. Here are two examples of this:</p><center>\n<img alt=\"Open connector\" src=\"img/duct_max_flow_open_end_1.png\" width=\"400\"/>\n<br/>\n<img alt=\"Open connector\" src=\"img/duct_max_flow_open_end_2.png\" width=\"400\"/>\n</center><p>In these scenarios, flow calculations are incorrect because the duct is open.\nIn the other instances you will see an endcap in this position.\nIt is best practice in Revit (and life) to close these systems.</p><p><strong>Answer:</strong> Thank you for testing and confirming that it does the job.</p><p>Regarding the loose connectors, I actually implemented a quite serious application for checking those a while back, mainly as one of the early samples demonstrating use of the Idling event in Revit 2011 and 2012:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/modeless-loose-connectors.html\">Modeless loose connectors</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/modeless-loose-connector-navigator-update.html\">Modeless loose connector navigator update</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/yet-another-modeless-update.html\">Yet another modeless update</a></li>\n</ul><p>The modeless loose connector navigator is a complete tool in its own right, though, enabling you to navigate through a modeless list of all unconnected connecters and manipulate the model at the same time, jumping back and forth as you like.</p><p>I have not updated it for 2014, though, and actually not even for 2013  :-)</p><p>So putting some minimal functionality into the new sample to check for open connectors instead makes good sense.</p><p>Each Connector instance provides a property IsConnected that can be used to check whether it is open or not.</p><p>It is therefore very easy to use LINQ to determine the number of open connectors, i.e. whose IsConnected property returns false, e.g. like this:</p><pre class=\"code\">\n  <span class=\"teal\">ConnectorSet</span> connectors\n    = GetConnectorManager( e ).Connectors;\n \n  <span class=\"blue\">int</span> nUnconnected = connectors\n    .Cast&lt;<span class=\"teal\">Connector</span>&gt;()\n    .Count&lt;<span class=\"teal\">Connector</span>&gt;( c =&gt; !c.IsConnected );\n \n  <span class=\"blue\">bool</span> hasOpenConnectors = 0 &lt; nUnconnected;\n \n  <span class=\"blue\">string</span> s = 0 == nUnconnected\n    ? <span class=\"blue\">string</span>.Empty\n    : <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\" with {0} open connector{1}\"</span>,\n      nUnconnected, <span class=\"teal\">Util</span>.PluralSuffix( nUnconnected ) );\n</pre><p>I added that code to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/determining-maximal-flow-in-hvac-duct-connectors.html#4\">\nSetMaxFlowOnElement</a> method\n\nthat I presented yesterday, and added some support for reporting back if any open connectors at all are found in the model.</p><p>This leads to an additional clause in the result message displayed at the end stating how many elements have open connectors:</p><center>\n<img alt=\"Duct iteration result message\" src=\"img/duct_max_flow_result_msg.png\" width=\"400\"/>\n</center><p>The additional clause is omitted if the number is zero, as it normally should be.</p><p>The detailed information on the offending elements is provided by the log in the Visual Studio debug output console window (copy and paste to an editor or view source to see the truncated lines in full):</p><pre>\nDuct &lt;630420 Mitered Elbows&gt; has 2 connectors and max flow 22.08.\n. . .\nDuct &lt;630695 Short Radius&gt; has 2 connectors and max flow 4.58.\nDuct &lt;630991 Mitered Elbows&gt; has 2 connectors and max flow 0.\nDuct &lt;630992 Mitered Elbows&gt; has 2 connectors and max flow 0 with 1 open connector.\nDuct &lt;630995 Mitered Elbows&gt; has 2 connectors and max flow 4.58.\n. . .\nDuct &lt;631007 Short Radius&gt; has 2 connectors and max flow 4.58.\nDuct &lt;631074 Mitered Elbows&gt; has 2 connectors and max flow 0.\nDuct &lt;631075 Mitered Elbows&gt; has 6 connectors and max flow 8.33 with 1 open connector.\nDuct &lt;631077 Mitered Elbows&gt; has 2 connectors and max flow 4.58.\n. . .\nDuct &lt;632298 Mitered Elbows&gt; has 2 connectors and max flow 8.33.\n\nSet MEP Duct Flow Parameter:\n  Set max flow parameter on 43 ducts,\n  2 of which have open connectors.\n</pre><p>Here is\n\n<a href=\"zip/FlowParam03.zip\">FlowParam03.zip</a> containing\n\nthe complete source code with the updated method implementations using LINQ as described above, the Visual Studio solution and the add-in manifest for this add-in.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1008_loose_connector",
    "header_text": "Autodesk University Class Catalog Preview",
    "local_header_href": "#autodesk-university-class-catalog-preview",
    "chunk_text": "<h4>Autodesk University Class Catalog Preview</h4><p>The\n\n<a href=\"http://au.typepad.com/files/au-2013-class-catalog-preview-082613.xls\">\nAU 2013 class catalog preview</a> (2.5 Mb xls)\n\nlisting the classes available at Autodesk University in Las Vegas in December is now available for download.</p><p>I verified that mine are all present and intact:</p><ul>\n<li><b>DV1736</b> – Cloud-Based, Real-Time, Round-Trip, 2D Revit Model Editing on Any Mobile Device – This presentation demonstrates real-time, round-trip editing of a simplified 2D rendering of an Autodesk Revit intelligent model on any mobile device with no need to install any additional software whatsoever beyond a web browser. How can this be achieved? A Revit software add-in exports polygon renderings of room boundaries and other elements such as furniture and equipment to a cloud-based repository that is implemented using an Apache CouchDB NoSQL database. On the mobile device, the repository is queried and the data rendered in a standard browser using server-side generated JavaScript and SVG. The rendering supports graphical editing, specifically translation and rotation of the furniture and equipment. Modified transformations are saved back to the cloud database. The Revit add-in picks up these changes and updates the Revit intelligent model in real-time. All of the components used are completely open source, except for Revit itself. This is an advanced class for experienced programmers.</li>\n<li><b>DV1914</b> – Revit API Expert Roundtable: Open House on the Factory Floor – Interact with a panel of Autodesk Revit API experts from Autodesk to get answers to your questions and discuss all relevant topics of your choice. If you are writing add-ins for Revit software, then this is the perfect forum to get to know better the people who shape the APIs you work with and to explain your views, ideas, and problems directly face-to-face. Note that prior .NET programming and Revit programming experience is required and that this class is not suitable for beginners.</li>\n<li><b>DV2010</b> – Advanced Revit 2014 API Features and Samples – This class focuses on some of the major new Autodesk Revit 2014 API features. We look at API access to the project browser, dockable panels, copy and paste, command launching, the graphics pipeline, schedule formatting, and additions to the view API including demonstration and discussion of sample code. We also provide an overview of all the new Revit 2014 SDK samples. Note that prior .NET and Revit programming experience is required and that this class is not suitable for beginners.</li>\n</ul><p>Since popular classes often fill up quite quickly, you can use this spreadsheet to get started on your selections and help ensure that you can register for the classes you want when registration opens on September 12.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1008_loose_connector",
    "header_text": "Songbird Dies, Long Live Nightingale",
    "local_header_href": "#songbird-dies-long-live-nightingale",
    "chunk_text": "<h4>Songbird Dies, Long Live Nightingale</h4><p>Completely unrelated to the Revit API, you may have noticed that I dabble with music now and then and was using Songbird a my main playing and tagging tool on Mac.</p><p>Well,\n\n<a href=\"http://techcrunch.com/2013/06/14/songbird-sings-its-last-tune-as-music-service-runs-out-of-money-and-plans-to-shut-down-june-28\">\nSongbird shut down</a> as\n\na company in June, and I now moved on to\n\n<a href=\"http://getnightingale.com\">Nightingale</a>\n\nthat is touted as its\n\n<a href=\"http://www.makeuseof.com/tag/nightingale-a-faster-cleaner-cross-platform-fork-of-songbird-music-player\">worthy</a>\n<a href=\"http://www.linuxjournal.com/node/1096940\">successor</a>\n\nand looking good to me so far.</p><p>I am also using\n\n<a href=\"http://www.virtualdj.com/\">VirtualDJ</a> when I want to cross-fade nicely from one song to the next in a playlist.</p>"
  }
]