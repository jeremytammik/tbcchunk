[
  {
    "original_filename": "0587_extensible_storage_map",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0587_extensible_storage_map",
    "header_text": "Extensible Storage of a Map",
    "local_header_href": "#extensible-storage-of-a-map",
    "chunk_text": "<h3>Extensible Storage of a Map</h3><p>I already discussed the important new and powerful\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a> mechanism, \n\nand we also explained and demonstrated it in both the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/devdays-2010-online-with-revit-2012-api-news.html\">\nDevHelp Online</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/05/revit-2012-api-webcast.html\">\nRevit 2012 API webcast</a> presentations, \n\nboth of which were recorded.\n\n<p>I updated the sample code for the latter webcast. \nHere is the mainline of the Execute method:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"green\">// pick an element and define the XYZ </span>\n    <span class=\"green\">// data to store at the same time</span>\n \n    <span class=\"teal\">Reference</span> r = uidoc.Selection.PickObject( \n      <span class=\"teal\">ObjectType</span>.Face, \n      <span class=\"blue\">new</span> <span class=\"teal\">WallFilter</span>(), \n      <span class=\"maroon\">\"Please pick a wall at a point on one of its faces\"</span> );\n \n    <span class=\"teal\">Wall</span> wall = doc.get_Element( r.ElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n    <span class=\"teal\">XYZ</span> dataToStore = r.GlobalPoint;\n \n    <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc,\n      <span class=\"maroon\">\"Create Extensible Storage Schemata and Store Data\"</span> ); \n \n    t.Start();\n \n    <span class=\"green\">// store the data, and also </span>\n    <span class=\"green\">// demonstrate reading it back</span>\n \n    StoreDataInWall( wall, dataToStore );\n \n    t.Commit();\n \n    <span class=\"green\">// list all schemas in memory across all documents</span>\n \n    ListSchemas();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    message = ex.Message;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n}\n</pre>\n<p>It prompts you to select a wall at a specific point. \nThe PickObject method can return both the selected wall and the picked point from one single user click.\nIt also takes a WallFilter instance, an implementation of the ISelectionFilter interface, to restrict the user selection to walls only:\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">WallFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n  {\n    <span class=\"blue\">return</span> e <span class=\"blue\">is</span> <span class=\"teal\">Wall</span>;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n  }\n}\n</pre>\n<p>The selected point is stored on the wall in a newly created extensible storage schema by the following helper method:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Create an extensible storage schema, </span>\n<span class=\"gray\">///</span><span class=\"green\"> attach it to a wall, populate it with data, </span>\n<span class=\"gray\">///</span><span class=\"green\"> and retrieve the data back from the wall.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">void</span> StoreDataInWall(\n  <span class=\"teal\">Wall</span> wall,\n  <span class=\"teal\">XYZ</span> dataToStore )\n{\n  <span class=\"teal\">SchemaBuilder</span> schemaBuilder = <span class=\"blue\">new</span> <span class=\"teal\">SchemaBuilder</span>(\n    <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( <span class=\"maroon\">\"720080CB-DA99-40DC-9415-E53F280AA1F0\"</span> ) );\n \n  <span class=\"green\">// allow anyone to read the object</span>\n \n  schemaBuilder.SetReadAccessLevel(\n    <span class=\"teal\">AccessLevel</span>.Public );\n \n  <span class=\"green\">// restrict writing to this vendor only</span>\n \n  schemaBuilder.SetWriteAccessLevel(\n    <span class=\"teal\">AccessLevel</span>.Vendor );\n \n  <span class=\"green\">// required because of restricted write-access</span>\n \n  schemaBuilder.SetVendorId( <span class=\"maroon\">\"ADNP\"</span> );\n \n  <span class=\"green\">// create a field to store an XYZ</span>\n \n  <span class=\"teal\">FieldBuilder</span> fieldBuilder = schemaBuilder\n    .AddSimpleField( <span class=\"maroon\">\"WireSpliceLocation\"</span>,\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">XYZ</span> ) );\n \n  fieldBuilder.SetUnitType( <span class=\"teal\">UnitType</span>.UT_Length );\n \n  fieldBuilder.SetDocumentation( <span class=\"maroon\">\"A stored \"</span>\n    + <span class=\"maroon\">\"location value representing a wiring \"</span>\n    + <span class=\"maroon\">\"splice in a wall.\"</span> );\n \n  schemaBuilder.SetSchemaName( <span class=\"maroon\">\"WireSpliceLocation\"</span> );\n \n  <span class=\"green\">// register the schema</span>\n \n  <span class=\"teal\">Schema</span> schema = schemaBuilder.Finish(); \n \n  <span class=\"green\">// create an entity (object) for this schema (class)</span>\n \n  <span class=\"teal\">Entity</span> entity = <span class=\"blue\">new</span> <span class=\"teal\">Entity</span>( schema );\n \n  <span class=\"green\">// get the field from the schema</span>\n \n  <span class=\"teal\">Field</span> fieldSpliceLocation = schema.GetField(\n    <span class=\"maroon\">\"WireSpliceLocation\"</span> );\n \n  <span class=\"green\">// set the value for this entity</span>\n \n  entity.Set&lt;<span class=\"teal\">XYZ</span>&gt;( fieldSpliceLocation, dataToStore,\n    <span class=\"teal\">DisplayUnitType</span>.DUT_METERS );\n \n  <span class=\"green\">// store the entity on the element</span>\n \n  wall.SetEntity( entity );\n \n  <span class=\"green\">// read back the data from the wall</span>\n \n  <span class=\"teal\">Entity</span> retrievedEntity = wall.GetEntity( schema );\n \n  <span class=\"teal\">XYZ</span> retrievedData = retrievedEntity.Get&lt;<span class=\"teal\">XYZ</span>&gt;(\n    schema.GetField( <span class=\"maroon\">\"WireSpliceLocation\"</span> ),\n    <span class=\"teal\">DisplayUnitType</span>.DUT_METERS );\n}\n</pre>\n<p>The mainline also calls another little method ListSchemas which shows how all schemas currently loaded into Revit memory can be accessed and listed:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> List all schemas in Revit memory across all documents.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">void</span> ListSchemas()\n{\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Schema</span>&gt; schemas = <span class=\"teal\">Schema</span>.ListSchemas();\n \n  <span class=\"blue\">int</span> n = schemas.Count;\n \n  <span class=\"teal\">Debug</span>.Print( \n    <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} schema{1} defined:\"</span>, \n      n, PluralSuffix( n ) ) );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Schema</span> s <span class=\"blue\">in</span> schemas )\n  {\n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Field</span>&gt; fields = s.ListFields();\n \n    n = fields.Count;\n \n    <span class=\"teal\">Debug</span>.Print( \n      <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"Schema '{0}' has {1} field{2}:\"</span>, \n        s.SchemaName, n, PluralSuffix( n ) ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Field</span> f <span class=\"blue\">in</span> fields )\n    {\n      <span class=\"teal\">Debug</span>.Print(\n        <span class=\"blue\">string</span>.Format( \n          <span class=\"maroon\">\"Field '{0}' has value type {1}\"</span>\n          + <span class=\"maroon\">\" and unit type {2}\"</span>, f.FieldName, \n          f.ValueType, f.UnitType ) );\n    }\n  }\n}\n</pre>\n<h4>Storing a Dictionary Mapping in Extensible Storage</h4>\n<p>In the sample so far, only a simple XYZ data field is added and stored.\n\n<p>Here is a new question on making use of extensible storage to store a more complex data type, a dictionary mapping keys to values, in this case both represented by strings.\n\n<p><strong>Question:</strong> I have added simple data to Revit elements using Extensible Storage. \nNow I need a schema containing a field which is a map of strings. \nI added a field by using \n\n<pre class=\"code\">\n  FieldBuilder.AddMapField( \u001eMyMappedField\u001c, \n    typeof( string ), typeof( string ) );\n</pre>\n<p>Now comes my problem: how can I set a mapped value to such a field by using Entity.Set&lt;???&gt;(???)?\n\n<p>Similarly, how can I retrieve a mapped value from such a field? \n\n<p>How can I remove a mapped value? \n\n<p>Please can you implement such a sample?\n\n<p><strong>Answer:</strong> The key, no pun intended, is to use IDictionary&lt;&gt; as the type you pass to the Set&lt;&gt; method, even though your actual implementation concrete type is Dictionary&lt;&gt;.\n\n<p>This is document in the Revit API help file entry on the Entity.Set method, but I admit that it is tricky.  \n\n<p>By the way, this is also demonstrated by the ExtensibleStorageManager SDK sample. \nFor instance, it includes the following code snippet:\n\n<pre class=\"code\">\n  <span class=\"green\">// Note that we use IDictionary&lt;&gt; for </span>\n  <span class=\"green\">// map types and IList&lt;&gt; for array types</span>\n \n  mySchemaWrapper\n    .AddField&lt;<span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;&gt;(\n      map0Name, <span class=\"teal\">UnitType</span>.UT_Undefined, <span class=\"blue\">null</span> );\n \n  mySchemaWrapper\n    .AddField&lt;<span class=\"teal\">IList</span>&lt;<span class=\"blue\">bool</span>&gt;&gt;(\n      array0Name, <span class=\"teal\">UnitType</span>.UT_Undefined, <span class=\"blue\">null</span> );\n</pre>\n<p>Here is a new method StoreStringMapInElement that I added to the sample above to demonstrate this:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Create an extensible storage schema specifying </span>\n<span class=\"gray\">///</span><span class=\"green\"> a dictionary mapping keys to values, both using </span>\n<span class=\"gray\">///</span><span class=\"green\"> strings,  populate it with data, attach it to the </span>\n<span class=\"gray\">///</span><span class=\"green\"> given element, and retrieve the data back again.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">void</span> StoreStringMapInElement( <span class=\"teal\">Element</span> e )\n{\n  <span class=\"teal\">SchemaBuilder</span> schemaBuilder = <span class=\"blue\">new</span> <span class=\"teal\">SchemaBuilder</span>(\n    <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( <span class=\"maroon\">\"F1697E22-9338-4A5C-8317-5B6EE088ECB4\"</span> ) );\n \n  <span class=\"green\">// allow anyone to read or write the object</span>\n \n  schemaBuilder.SetReadAccessLevel(\n    <span class=\"teal\">AccessLevel</span>.Public );\n \n  schemaBuilder.SetWriteAccessLevel(\n    <span class=\"teal\">AccessLevel</span>.Public );\n \n  <span class=\"green\">// create a field to store a string map</span>\n \n  <span class=\"teal\">FieldBuilder</span> fieldBuilder\n    = schemaBuilder.AddMapField( <span class=\"maroon\">\"StringMap\"</span>,\n      <span class=\"blue\">typeof</span>( <span class=\"blue\">string</span> ), <span class=\"blue\">typeof</span>( <span class=\"blue\">string</span> ) );\n \n  fieldBuilder.SetDocumentation(\n    <span class=\"maroon\">\"A string map for Tobias.\"</span> );\n \n  schemaBuilder.SetSchemaName(\n    <span class=\"maroon\">\"TobiasStringMap\"</span> );\n \n  <span class=\"green\">// register the schema</span>\n \n  <span class=\"teal\">Schema</span> schema = schemaBuilder.Finish();\n \n  <span class=\"green\">// create an entity (object) for this schema (class)</span>\n \n  <span class=\"teal\">Entity</span> entity = <span class=\"blue\">new</span> <span class=\"teal\">Entity</span>( schema );\n \n  <span class=\"green\">// get the field from the schema</span>\n \n  <span class=\"teal\">Field</span> field = schema.GetField(\n    <span class=\"maroon\">\"StringMap\"</span> );\n \n  <span class=\"green\">// set the value for this entity</span>\n \n  <span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt; stringMap\n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;();\n \n  stringMap.Add( <span class=\"maroon\">\"key1\"</span>, <span class=\"maroon\">\"value1\"</span> );\n  stringMap.Add( <span class=\"maroon\">\"key2\"</span>, <span class=\"maroon\">\"value2\"</span> );\n \n  entity.Set&lt;<span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;&gt;(\n    field, stringMap );\n \n  <span class=\"green\">// store the entity on the element</span>\n \n  e.SetEntity( entity );\n \n  <span class=\"green\">// read back the data from the wall</span>\n \n  <span class=\"teal\">Entity</span> retrievedEntity = e.GetEntity( schema );\n \n  <span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt; stringMap2\n    = retrievedEntity\n    .Get&lt;<span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;&gt;(\n      schema.GetField( <span class=\"maroon\">\"StringMap\"</span> ) );\n}\n</pre>\n<p>Here is the full updated sample application <a href=\"zip/ExtensibleStorage.zip\">ExtensibleStorage.zip</a> including the Visual Studio solution and full source.\n\n<p>Many thanks to our local Revit extensible storage expert Steven Mycynek for help resolving this issue!</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0587_extensible_storage_map",
    "header_text": "Storing a Dictionary Mapping in Extensible Storage",
    "local_header_href": "#storing-a-dictionary-mapping-in-extensible-storage",
    "chunk_text": "<h4>Storing a Dictionary Mapping in Extensible Storage</h4><p>In the sample so far, only a simple XYZ data field is added and stored.\n\n<p>Here is a new question on making use of extensible storage to store a more complex data type, a dictionary mapping keys to values, in this case both represented by strings.\n\n<p><strong>Question:</strong> I have added simple data to Revit elements using Extensible Storage. \nNow I need a schema containing a field which is a map of strings. \nI added a field by using \n\n<pre class=\"code\">\n  FieldBuilder.AddMapField( \u001eMyMappedField\u001c, \n    typeof( string ), typeof( string ) );\n</pre>\n<p>Now comes my problem: how can I set a mapped value to such a field by using Entity.Set&lt;???&gt;(???)?\n\n<p>Similarly, how can I retrieve a mapped value from such a field? \n\n<p>How can I remove a mapped value? \n\n<p>Please can you implement such a sample?\n\n<p><strong>Answer:</strong> The key, no pun intended, is to use IDictionary&lt;&gt; as the type you pass to the Set&lt;&gt; method, even though your actual implementation concrete type is Dictionary&lt;&gt;.\n\n<p>This is document in the Revit API help file entry on the Entity.Set method, but I admit that it is tricky.  \n\n<p>By the way, this is also demonstrated by the ExtensibleStorageManager SDK sample. \nFor instance, it includes the following code snippet:\n\n<pre class=\"code\">\n  <span class=\"green\">// Note that we use IDictionary&lt;&gt; for </span>\n  <span class=\"green\">// map types and IList&lt;&gt; for array types</span>\n \n  mySchemaWrapper\n    .AddField&lt;<span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;&gt;(\n      map0Name, <span class=\"teal\">UnitType</span>.UT_Undefined, <span class=\"blue\">null</span> );\n \n  mySchemaWrapper\n    .AddField&lt;<span class=\"teal\">IList</span>&lt;<span class=\"blue\">bool</span>&gt;&gt;(\n      array0Name, <span class=\"teal\">UnitType</span>.UT_Undefined, <span class=\"blue\">null</span> );\n</pre>\n<p>Here is a new method StoreStringMapInElement that I added to the sample above to demonstrate this:\n\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Create an extensible storage schema specifying </span>\n<span class=\"gray\">///</span><span class=\"green\"> a dictionary mapping keys to values, both using </span>\n<span class=\"gray\">///</span><span class=\"green\"> strings,  populate it with data, attach it to the </span>\n<span class=\"gray\">///</span><span class=\"green\"> given element, and retrieve the data back again.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">void</span> StoreStringMapInElement( <span class=\"teal\">Element</span> e )\n{\n  <span class=\"teal\">SchemaBuilder</span> schemaBuilder = <span class=\"blue\">new</span> <span class=\"teal\">SchemaBuilder</span>(\n    <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( <span class=\"maroon\">\"F1697E22-9338-4A5C-8317-5B6EE088ECB4\"</span> ) );\n \n  <span class=\"green\">// allow anyone to read or write the object</span>\n \n  schemaBuilder.SetReadAccessLevel(\n    <span class=\"teal\">AccessLevel</span>.Public );\n \n  schemaBuilder.SetWriteAccessLevel(\n    <span class=\"teal\">AccessLevel</span>.Public );\n \n  <span class=\"green\">// create a field to store a string map</span>\n \n  <span class=\"teal\">FieldBuilder</span> fieldBuilder\n    = schemaBuilder.AddMapField( <span class=\"maroon\">\"StringMap\"</span>,\n      <span class=\"blue\">typeof</span>( <span class=\"blue\">string</span> ), <span class=\"blue\">typeof</span>( <span class=\"blue\">string</span> ) );\n \n  fieldBuilder.SetDocumentation(\n    <span class=\"maroon\">\"A string map for Tobias.\"</span> );\n \n  schemaBuilder.SetSchemaName(\n    <span class=\"maroon\">\"TobiasStringMap\"</span> );\n \n  <span class=\"green\">// register the schema</span>\n \n  <span class=\"teal\">Schema</span> schema = schemaBuilder.Finish();\n \n  <span class=\"green\">// create an entity (object) for this schema (class)</span>\n \n  <span class=\"teal\">Entity</span> entity = <span class=\"blue\">new</span> <span class=\"teal\">Entity</span>( schema );\n \n  <span class=\"green\">// get the field from the schema</span>\n \n  <span class=\"teal\">Field</span> field = schema.GetField(\n    <span class=\"maroon\">\"StringMap\"</span> );\n \n  <span class=\"green\">// set the value for this entity</span>\n \n  <span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt; stringMap\n    = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;();\n \n  stringMap.Add( <span class=\"maroon\">\"key1\"</span>, <span class=\"maroon\">\"value1\"</span> );\n  stringMap.Add( <span class=\"maroon\">\"key2\"</span>, <span class=\"maroon\">\"value2\"</span> );\n \n  entity.Set&lt;<span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;&gt;(\n    field, stringMap );\n \n  <span class=\"green\">// store the entity on the element</span>\n \n  e.SetEntity( entity );\n \n  <span class=\"green\">// read back the data from the wall</span>\n \n  <span class=\"teal\">Entity</span> retrievedEntity = e.GetEntity( schema );\n \n  <span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt; stringMap2\n    = retrievedEntity\n    .Get&lt;<span class=\"teal\">IDictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"blue\">string</span>&gt;&gt;(\n      schema.GetField( <span class=\"maroon\">\"StringMap\"</span> ) );\n}\n</pre>\n<p>Here is the full updated sample application <a href=\"zip/ExtensibleStorage.zip\">ExtensibleStorage.zip</a> including the Visual Studio solution and full source.\n\n<p>Many thanks to our local Revit extensible storage expert Steven Mycynek for help resolving this issue!</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]