[
  {
    "original_filename": "0705_drag_drop",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0705_drag_drop",
    "header_text": "Drag and Drop to Revit",
    "local_header_href": "#drag-and-drop-to-revit",
    "chunk_text": "<h3>Drag and Drop to Revit</h3><p>Tim Hoffeller of \n\n<a href=\"http://www.cad-development.de\">\nCAD-Development Tim Hoffeller</a>\n\npresents DragDropRevitExample, a nice little stand-alone sample application which prompted us to document how to populate the suitable drag and drop data to cause Revit to load a family and prompt the user to place instances of it.\n\n<p>It has one limitation, unfortunately, or rather the Revit behaviour is currently limited in one respect: it only loads and prompts for instance placement if the family has not previously been loaded. \nNot reloading an already loaded family obviously makes sense, but not repeating the prompt for instance placement when the same family is dragged and dropped repeatedly is a problem for actual production use.\n\n<p>In that case, of course, a Revit add-in could simply call the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/place-family-instance.html\">\nPromptForFamilyInstancePlacement</a> instead, \n\nbut this stand-alone drag and drop sample is an external Windows application which makes no use of the Revit API at all; it just populates the drag and drop data appropriately and initiates the drag and drop sequence.\n\n<p>Let's start with the good news, though, the initial question and solution:\n\n<p><strong>Question:</strong> I'm trying to mimic the drag &amp; drop from Explorer to load families inside of my custom control.\n\n<p>My application is a stand-alone Windows app, running outside of Revit. \nNow I want to drag an item from a list view into Revit and load the family represented by this list view item.\n\n<p>In general the drag &amp; drop seems to work fine, but Revit doesn't load the file. \nWhat kind of data needs to be passed by the DoDragDrop method of my list view to force Revit to load the RFA file?\n\n\n<p><strong>Answer:</strong> Revit expects a standard Explorer shell file drop, specifically CF_HDROP, and processes it through CWnd::OnDropFiles() and DragQueryFile().  \nTherefore, you just need to construct a CF_HDROP data object with a DROPFILES structure.\n\n<p>Here are some useful pointers for this:\n\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/bb776902(v=vs.85).aspx#CF_HDROP\">Shell Clipboard Formats</a>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/bb773269(v=vs.85).aspx\">DROPFILES</a>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/62zys01d(v=vs.80).aspx\">CWnd::OnDropFiles</a>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/bb776408(v=vs.85).aspx\">DragQueryFile</a>\n</li></li></li></li></ul>\n<p>In addition, here is an untested CodeProject article and sample on\n\n<a href=\"http://www.codeproject.com/KB/shell/explorerdragdrop.aspx\">how to implement Drag and Drop between your program and Explorer</a>\n\nwhich might also be of interest.\n\n<p><strong>Question:</strong> Thank you for the feedback.\nNow I have a working version.\nI have used the DataObject and passed it to my Listview DoDragDrop method.\nHere is \n\n<a href=\"DragDropRevitExample.zip\"> DragDropRevitExample.zip</a> containing\n\nthe entire source code and Visual Studio solution, but without the families.\nYou can place your own families into the Families subfolder provided in the project files.\n\n<p>This is its minimalistic user interface:</p>\n<center>\n<img alt=\"DragDropRevitExample user interface\" src=\"img/DragDropRevitExample_ui.png\"/>\n</center>\n<p>The application automatically populates the list view with all families found in a specific subdirectory.\nThey are listed in the ListView user interface and can be dragged and dropped into Revit to intiate the family load and family instance placement.\n\n<p>As said above, only the first drag and drop operation has any effect.\nAll following repetitions simply do nothing, since Revit determines that the family has already been loaded and decides that it has nothing further to do.\n\n<p>You possibly work around this limitation by implementing an additional Revit add-in that does catches this situation somehow and does something with the PromptForFamilyInstancePlacement method to achieve the same effect, if you like.\n\n<p>Here is the code of the MouseMove event handler which initiates the drag and drop operation and populates the DataObject appropriately: \n\n<pre class=\"code\">\n<span class=\"blue\">void</span> _listViewTestFamilies_MouseMove( \n  <span class=\"blue\">object</span> sender, \n  <span class=\"teal\">MouseEventArgs</span> e )\n{\n  <span class=\"blue\">if</span>( ( e.Button &amp; <span class=\"teal\">MouseButtons</span>.Left ) == <span class=\"teal\">MouseButtons</span>.Left )\n  {\n    <span class=\"green\">// Proceed with the drag-and-drop, </span>\n    <span class=\"green\">// passing in the list item.</span>\n \n    <span class=\"teal\">FileInfo</span> finf \n      = (<span class=\"teal\">FileInfo</span>) _listViewTestFamilies.Items[\n        indexOfItemUnderMouseToDrag].Tag;\n \n    <span class=\"blue\">if</span>( finf.Exists )\n    {\n      <span class=\"teal\">DataObject</span> myDataObject = <span class=\"blue\">new</span> <span class=\"teal\">DataObject</span>();\n \n      <span class=\"green\">// You have to set up the FileDropList, </span>\n      <span class=\"green\">// otherwise nothing will happen ;-)</span>\n \n      <span class=\"teal\">StringCollection</span> coll \n        = <span class=\"blue\">new</span> <span class=\"teal\">StringCollection</span>();\n \n      coll.Add( finf.FullName );\n \n      myDataObject.SetFileDropList( coll );\n \n      <span class=\"teal\">DragDropEffects</span> dropEffect \n        = _listViewTestFamilies.DoDragDrop( \n          myDataObject, <span class=\"teal\">DragDropEffects</span>.Copy );\n    }\n  }\n}\n</pre>\n<p>Many thanks to Tim for exploring this issue and providing this nice little sample!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]