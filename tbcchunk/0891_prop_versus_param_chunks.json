[
  {
    "original_filename": "0891_prop_versus_param",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0891_prop_versus_param",
    "header_text": "Parameters versus Properties",
    "local_header_href": "#parameters-versus-properties",
    "chunk_text": "<h3>Parameters versus Properties</h3><p>In his\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/read-material-asset-parameter.html?cid=6a00e553e168978833017ee80eb1cc970d#comment-6a00e553e168978833017ee80eb1cc970d\">\ncomment</a> on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/read-material-asset-parameter.html\">\nreading material asset data</a>,\n\n<a href=\"http://www.idat.de\">Alexander Buschmann</a> points\n\nout that this same information can be accessed without retrieving, reading and converting the data directly from the undocumented built-in parameters.\n\n<p>Instead and more comfortably, you can use the following official properties on the appropriate classes:\n\n<pre class=\"code\">\n  <span class=\"teal\">Material</span> material = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Material</span> mat <span class=\"blue\">in</span> e.Materials )\n  {\n    material = mat;\n    <span class=\"blue\">break</span>;\n  }\n  <span class=\"teal\">PropertySetElement</span> pse = doc.GetElement(\n    material.StructuralAssetId )\n      <span class=\"blue\">as</span> <span class=\"teal\">PropertySetElement</span>;\n \n  <span class=\"teal\">StructuralAsset</span> asset = pse.GetStructuralAsset();\n \n  <span class=\"blue\">double</span> a = asset.WoodBendingStrength;\n  <span class=\"blue\">double</span> b = asset.WoodParallelCompressionStrength;\n  <span class=\"blue\">double</span> c = asset.WoodParallelShearStrength;\n  <span class=\"blue\">double</span> d = asset.WoodPerpendicularCompressionStrength;\n  <span class=\"blue\">double</span> f = asset.WoodPerpendicularShearStrength;\n\n  <span class=\"green\">// ... and lots of other properties ...</span>\n</pre>\n<p>Even though a large and growing number of properties are available through this approach, the \"Tension Parallel to Grain\" one is actually currently not included in these, so you will indeed still have to use the direct parameter access anyway in this particular case.</p>\n<p>Going through parameters is more generic, and most properties available on the classes are also available via parameters.</p>\n<p>Parameters can also be used to define a parameter filter for a filtered element collector, so it is always useful to know that they are there and what they mean.</p>\n<p>To discover the existence and use of specific parameters, you can use RevitLookup and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/built-in-parameter-enumeration-duplicates-and-bipchecker-update.html\">\nBipChecker</a> to\n\nexplore a simple model.\nModify the model interactively through the user interface and observe the effect on the parameters to discover their use and meaning.</p>\n<p>He also adds:</p>\n<p>For convenience, we use extension methods in our code to do this kind of thing, e.g.</p>\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">ElementExtensions</span>\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Material</span> material( <span class=\"blue\">this</span> <span class=\"teal\">Element</span> e )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Material</span> m <span class=\"blue\">in</span> e.Materials )\n    {\n      <span class=\"blue\">return</span> m;\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n}\n</pre>\n<p>If this class part of an imported namespace, it can be called as:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Material</span> material2 = e.material();\n</pre>\n<p>The compiler will translate that to this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Material</span> material3\n    = <span class=\"teal\">ElementExtensions</span>.material( e );\n</pre>\n<p>It is mostly just convenience, but it also improves the readability of the code, since the entire loop above collapses into just this one single property call.</p>\n<p>Many thanks to Alexander for pointing this out!</p>\n<p>Here are some pointers to other extension methods that we discussed in the past:</p>\n<!--\n183_scale_curve.htm\n303_extension_methods.htm\n485_cs_net_wonders.htm\n620_top_faces_of_wall.htm:I created a new class JtEdgeArrayExtensionMethods\n688_unit_display_str.htm\n700_materials_collection.htm\n798_revitrubyshell.htm\n810_room_in_area.htm\n829_family_param_shared.htm\n-->\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/scale-a-curve.html\">\nScale a curve</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/getpolygon-extension-methods.html\">\nGetPolygon extension methods</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/c-and-net-little-wonders.html\">\nC# and .NET little wonders</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html\">\nTop faces of sloped wall</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/12/unit-conversion-and-display-string-formatting.html\">\nUnit conversion and display string formatting</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/materials-collection-and-filtering.html\">\nMaterials collection and filtering</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/07/revitrubyshell-implementation-and-installer.html\">RevitRubyShell implementation and installer</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/room-in-area-predicate-via-point-in-polygon-test.html\">\nRoom in area predicate via point in polygon test</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/familyparameter-isshared-property.html\">\nFamilyParameter IsShared property</a>\n</li></li></li></li></li></li></li></li></li></ul>\n<!--\n\nhttp://thebuildingcoder.typepad.com/blog/2013/01/changing-viewport-type.html?cid=6a00e553e168978833017d4046b782970c#comment-6a00e553e168978833017d4046b782970c\n\nAlexander Buschmann has left you a comment:\n\nUse ChangeTypeId-Method instead:\n\n// To change ViewType:\n\nViewport vp = Autodesk.Revit.DB.Viewport.Create(...)\nElementId id = getViewTypeId();\nvp.ChangeTypeId(id);\n\n// To get your ViewTypeId:\n\nElementId getViewTypeId()\n{\n  FilteredElementCollector c = new FilteredElementCollector(doc);\n  c.WhereElementIsElementType();\n  c.Where( ..someRuleToIdentifyYourViewType.. );\n  return c.FirstElementId();\n}\n\n// To change properties of a ViewType:\n\nParameter withLine = viewType.get_Parameter(BuiltInParameter.VIEWPORT_ATTR_SHOW_EXTENSION_LINE);\nwithLine.Set(0); // No Line\nwithLine.Set(1); // Has Line\n\nParameter withLabel = viewType.get_Parameter(BuiltInParameter.VIEWPORT_ATTR_SHOW_LABEL);\nwithLabel .Set(0); // No Label\nwithLabel .Set(1); // Has Label\n\nUse ElementType.Duplicate to create a ViewType if your ViewType is not already defined in the Revit Project.\n\n-->\n<a name=\"2\"></a>\n<h4>Show Viewport Extension Line or Label</h4>\n<p>Alexander also pointed out some other useful parameter to be aware of on the ViewType class in his\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/changing-viewport-type.html?cid=6a00e553e168978833017d4046b782970c#comment-6a00e553e168978833017d4046b782970c\">\ncomment</a> on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/changing-viewport-type.html\">\nchanging the viewport type</a>,\n\nand my colleague Joe Ye just ran into a case dealing with the very same issue:</p>\n<p><strong>Question:</strong> We can change the length of the view title line:</p>\n<center>\n<img alt=\"View title line\" src=\"img/view_title_line_1.png\"/>\n</center>\n<p>For that we have to go to edit type and check the show extension line toggle:</p>\n<center>\n<img alt=\"View title line check box\" src=\"img/view_title_line_2.png\" width=\"400\"/>\n</center>\n<p>It is possible to achieve this using the API?</p>\n<p><strong>Answer:</strong> Yes, you can set that check box via the API as well.\nHere is the process:</p>\n<ol>\n<li>Get the view type object.\n<li>Get the parameter that represents the \"Show Extension Line\".\n<li>Change the parameter value.\n</li></li></li></ol>\n<p>Here is an example of performing these three steps:</p>\n<pre class=\"code\">\n  <span class=\"teal\">ElementId</span> typeId = viewport.GetTypeId();\n \n  <span class=\"teal\">ViewType</span> viewtype = doc.GetElement( typeId )\n    <span class=\"blue\">as</span> <span class=\"teal\">ViewType</span>;\n \n  <span class=\"teal\">Parameter</span> withLine = viewtype.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>\n      .VIEWPORT_ATTR_SHOW_EXTENSION_LINE );\n \n  withLine.Set( 0 ); <span class=\"green\">// No Line</span>\n  withLine.Set( 1 ); <span class=\"green\">// Has Line</span>\n</pre>\n<p>Alexander also points out that the built-in parameter VIEWPORT_ATTR_SHOW_LABEL affects the view label in a similar manner.</p>\n</p></p>"
  },
  {
    "original_filename": "0891_prop_versus_param",
    "header_text": "Show Viewport Extension Line or Label",
    "local_header_href": "#show-viewport-extension-line-or-label",
    "chunk_text": "<h4>Show Viewport Extension Line or Label</h4><p>Alexander also pointed out some other useful parameter to be aware of on the ViewType class in his\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/changing-viewport-type.html?cid=6a00e553e168978833017d4046b782970c#comment-6a00e553e168978833017d4046b782970c\">\ncomment</a> on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/changing-viewport-type.html\">\nchanging the viewport type</a>,\n\nand my colleague Joe Ye just ran into a case dealing with the very same issue:</p><p><strong>Question:</strong> We can change the length of the view title line:</p><center>\n<img alt=\"View title line\" src=\"img/view_title_line_1.png\"/>\n</center><p>For that we have to go to edit type and check the show extension line toggle:</p><center>\n<img alt=\"View title line check box\" src=\"img/view_title_line_2.png\" width=\"400\"/>\n</center><p>It is possible to achieve this using the API?</p><p><strong>Answer:</strong> Yes, you can set that check box via the API as well.\nHere is the process:</p><ol>\n<li>Get the view type object.\n<li>Get the parameter that represents the \"Show Extension Line\".\n<li>Change the parameter value.\n</li></li></li></ol><p>Here is an example of performing these three steps:</p><pre class=\"code\">\n  <span class=\"teal\">ElementId</span> typeId = viewport.GetTypeId();\n \n  <span class=\"teal\">ViewType</span> viewtype = doc.GetElement( typeId )\n    <span class=\"blue\">as</span> <span class=\"teal\">ViewType</span>;\n \n  <span class=\"teal\">Parameter</span> withLine = viewtype.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>\n      .VIEWPORT_ATTR_SHOW_EXTENSION_LINE );\n \n  withLine.Set( 0 ); <span class=\"green\">// No Line</span>\n  withLine.Set( 1 ); <span class=\"green\">// Has Line</span>\n</pre><p>Alexander also points out that the built-in parameter VIEWPORT_ATTR_SHOW_LABEL affects the view label in a similar manner.</p>"
  }
]