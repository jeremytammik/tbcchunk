[
  {
    "original_filename": "1749_pyrevit_invoke_script",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n\n</head>\n\n<!---\n\n- Rapid Debugging, Testing and Network Deployment using pyRevit\n  Ali Tehami posted a very enthusiastic and inspiring\n  [comment](https://thebuildingcoder.typepad.com/blog/2018/09/five-secrets-of-revit-api-coding.html#comment-4447694964) on\n  Joshua Lumley's [Five Secrets of Revit API Coding](https://thebuildingcoder.typepad.com/blog/2018/09/five-secrets-of-revit-api-coding.html) that\n  is certainly of interest to many others, extolling the virtues of\n  the [pyRevit rapid application development](https://github.com/eirannejad/pyRevit):\nI successfully managed to implement invoking an external command defined in a stand-alone Revit plugin assembly from [pyRevit](https://github.com/eirannejad/pyRevit)!\nIt's proving extremely useful... managed to easily maintain a single DLL assembly on the network server and distributed the functionality through pyRevit's amazing capabilities to almost everyone at my firm.\nIt feels amazing when you can make updates on the fly to a single DLL and have it live-ly updated in real-time to all active Revit users in the whole office.\nAnother very useful outcome of this implementation was the ease of debugging and testing whether the code base would fail in any different Revit versions... I tested the plugin for all version from 2016 to 2019 in seconds!\nFor future reference of everyone, I put an example on my GitHub recycling Joshua's provided sample code into a pyRevit `.pushbutton` in\nmy [pyRevit beta ideas repository on GitHub](https://github.com/alitehami/pyRevitBetaIdeas_Public/tree/master/aliTehami.extension/BetaConcepts.tab/invoking%20Assemblies.panel/invoke.pushbutton).\n  Many thanks to Joshua for his great tips, and many thanks to Ali for making such great use combining them with pyRevit!\n\ntwitter:\n\nRapid prototyping, debugging, testing and deployment using the pyRevit rapid application development environment for the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/pyrevit_rad\n\nThe pyRevit rapid application development environment can be used for the entire add-in lifecycle, supporting rapid debugging, testing and deployment as well.\nI successfully implemented invoking an external command defined in a stand-alone Revit plugin assembly from pyRevit!\nIt's proving extremely useful...\n\n&ndash; \n...\n\nlinkedin:\n\n the #RevitAPI #bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nRapid prototyping, debugging, testing and deployment using the pyRevit rapid application development environment for the #RevitAPI:\n\nhttp://bit.ly/pyrevit_rad\n\nThe pyRevit rapid application development environment can be used for the entire add-in lifecycle, supporting rapid debugging, testing and deployment as well.\n\nI successfully implemented invoking an external command defined in a stand-alone Revit plugin assembly from pyRevit!\nIt's proving extremely useful...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\n-->"
  },
  {
    "original_filename": "1749_pyrevit_invoke_script",
    "header_text": "Rapid Prototyping, Debugging, Testing and Deployment",
    "local_header_href": "#rapid-prototyping-debugging-testing-and-deployment",
    "chunk_text": "### Rapid Prototyping, Debugging, Testing and Deployment\n\nThe [pyRevit rapid application development environment](https://github.com/eirannejad/pyRevit) can\nbe used for the entire add-in lifecycle, supporting rapid debugging, testing and deployment as well.\n\nHere is a very short post to highlight Ali Tehami's enthusiastic and\ninspiring [comment](https://thebuildingcoder.typepad.com/blog/2018/09/five-secrets-of-revit-api-coding.html#comment-4447694964) on\nJoshua Lumley's [five secrets of Revit API coding](https://thebuildingcoder.typepad.com/blog/2018/09/five-secrets-of-revit-api-coding.html) that\nis certainly of interest to many others, extolling the virtues of `pyRevit`:\n\n> I successfully implemented invoking an external command defined in a stand-alone Revit plugin assembly from [pyRevit](https://github.com/eirannejad/pyRevit)!\n\n> It's proving extremely useful... managed to easily maintain a single DLL assembly on the network server and distributed the functionality through pyRevit's amazing capabilities to almost everyone at my firm.\n\n> It feels amazing when you can make updates on the fly to a single DLL and have it live-ly updated in real-time to all active Revit users in the whole office.\n\n> Another very useful outcome of this implementation was the ease of debugging and testing whether the code base would fail in any different Revit versions... I tested the plugin for all version from 2016 to 2019 in seconds!\n\n> For future reference of everyone, I put an example on my GitHub recycling Joshua's provided sample code into a pyRevit `.pushbutton` in\nmy [pyRevit beta ideas repository on GitHub](https://github.com/alitehami/pyRevitBetaIdeas_Public/tree/master/aliTehami.extension/BetaConcepts.tab/invoking%20Assemblies.panel/invoke.pushbutton).\n  \nMany thanks to Joshua for his great tips, and many thanks to Ali for making such great use combining them with pyRevit and highlighting this for the community!\n\n<center>\n<img src=\"img/rapid_application_development.jpeg\" alt=\"Rapid application development\" width=\"390\">\n</center>\n\n<!--\n\n\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n**Question:** \n\n**Answer:** \n\n**Response:** \n\n<pre class=\"code\">\n</pre>\n\n-->"
  }
]