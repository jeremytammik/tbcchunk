[
  {
    "original_filename": "1314_transfer_wall_type",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1314_transfer_wall_type",
    "header_text": "Transferring a Wall Type",
    "local_header_href": "#transferring-a-wall-type",
    "chunk_text": "<h3>Transferring a Wall Type</h3><p>Let's look at transferring a wall type from one document to another.</p><p>In fact, we already did so, way back in 2011, as an example about how to possibly approach the task of at least partially programmatically <a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/transfer-project-standards.html\">transferring project standards</a>.</p><p>Now Parley submitted a <a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/transfer-project-standards.html?cid=6a00e553e16897883301bb08275f46970d#comment-6a00e553e16897883301bb08275f46970d\">comment</a> on that, saying:</p><p><strong>Question:</strong> We could still really use this...\nThis post originally was from 2011.\nAny update on API access for this tool?</p><p><strong>Answer:</strong> Glad to hear it sounds useful to you.</p><p>Well, nothing that I present here is really a tool, just sample source code for you to create your own tools from.</p><p>This should be pretty straightforward to migrate to Revit 2016, though.</p><p>On second thoughts, looking more closely at the text, I notice that I included the code above in The Building Coder samples as an external command CmdCopyWallType.</p><p>Therefore, it has been continually migrated every year, and the Revit 2015 version is provided in\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples GitHub repository</a>.</p><p>The code for the <a href=\"https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdCopyWallType.cs\">external command CmdCopyWallType</a> is available there, already migrated to Revit 2015, and all the intervening versions as well.</p><p>As an added bonus, though, I went and tested the command for you.</p><p>I discovered that the transaction was not nicely encapsulated in a using statement, as it should be, so I fixed that.</p><p>I also discovered that a bug was introduced during the migration from Revit 2013 to 2014.\nApparently, this command was never tested in Revit 2014 and the error remained undetected ever since.\nSo I fixed that as well.</p><p>The Revit 2015 implementation now looks like this:</p><pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdCopyWallType</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Source project to copy system type from.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _source_project_path\n    = <span class=\"maroon\">\"Z:/a/case/sfdc/06676034/test/NewWallType.rvt\"</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Source wall type name to copy.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _wall_type_name = <span class=\"maroon\">\"NewWallType\"</span>;\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Open source project</span>\n \n    <span class=\"teal\">Document</span> docHasFamily = app.OpenDocumentFile(\n      _source_project_path );\n \n    <span class=\"green\">// Find system family to copy, e.g. using a named wall type</span>\n \n    <span class=\"teal\">WallType</span> wallType = <span class=\"blue\">null</span>;\n \n    <span class=\"teal\">FilteredElementCollector</span> wallTypes\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( docHasFamily ) <span class=\"green\">// 2014</span>\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">WallType</span> ) );\n \n    <span class=\"blue\">int</span> i = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">WallType</span> wt <span class=\"blue\">in</span> wallTypes )\n    {\n      <span class=\"blue\">string</span> name = wt.Name;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0} {1}\"</span>, ++i, name );\n \n      <span class=\"blue\">if</span>( name.Equals( _wall_type_name ) )\n      {\n        wallType = wt;\n        <span class=\"blue\">break</span>;\n      }\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == wallType )\n    {\n      message = <span class=\"blue\">string</span>.Format(\n        <span class=\"maroon\">\"Cannot find source wall type '{0}'\"</span>\n        + <span class=\"maroon\">\" in source document '{1}'. \"</span>,\n        _wall_type_name, _source_project_path );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"green\">// Create a new wall type in current document</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      t.Start( <span class=\"maroon\">\"Transfer Wall Type\"</span> );\n \n      <span class=\"teal\">WallType</span> newWallType = <span class=\"blue\">null</span>;\n \n      wallTypes = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">WallType</span> ) ); <span class=\"green\">// 2014</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">WallType</span> wt <span class=\"blue\">in</span> wallTypes )\n      {\n        <span class=\"blue\">if</span>( wt.Kind == wallType.Kind )\n        {\n          newWallType = wt.Duplicate( _wall_type_name )\n            <span class=\"blue\">as</span> <span class=\"teal\">WallType</span>;\n \n          <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"New wall type '{0}' created.\"</span>,\n            _wall_type_name ) );\n \n          <span class=\"blue\">break</span>;\n        }\n      }\n \n      <span class=\"green\">// Assign parameter values from source wall type:</span>\n \n<span class=\"blue\">#if</span> COPY_INDIVIDUAL_PARAMETER_VALUE\n<span class=\"gray\">    // Example: individually copy the \"Function\" parameter value:</span>\n \n<span class=\"gray\">    BuiltInParameter bip = BuiltInParameter.FUNCTION_PARAM;</span>\n<span class=\"gray\">    string function = wallType.get_Parameter( bip ).AsString();</span>\n<span class=\"gray\">    Parameter p = newWallType.get_Parameter( bip );</span>\n<span class=\"gray\">    p.Set( function );</span>\n<span class=\"blue\">#endif</span> <span class=\"green\">// COPY_INDIVIDUAL_PARAMETER_VALUE</span>\n \n      <span class=\"teal\">Parameter</span> p = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Parameter</span> p2 <span class=\"blue\">in</span> newWallType.Parameters )\n      {\n        <span class=\"teal\">Definition</span> d = p2.Definition;\n \n        <span class=\"blue\">if</span>( p2.IsReadOnly )\n        {\n          <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"Parameter '{0}' is read-only.\"</span>, d.Name ) );\n        }\n        <span class=\"blue\">else</span>\n        {\n          p = wallType.get_Parameter( d );\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p )\n          {\n            <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n              <span class=\"maroon\">\"Parameter '{0}' not found on source wall type.\"</span>,\n              d.Name ) );\n          }\n          <span class=\"blue\">else</span>\n          {\n            <span class=\"blue\">if</span>( p.StorageType == <span class=\"teal\">StorageType</span>.ElementId )\n            {\n              <span class=\"green\">// Here you have to find the corresponding</span>\n              <span class=\"green\">// element in the target document.</span>\n \n              <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n                <span class=\"maroon\">\"Parameter '{0}' is an element id.\"</span>,\n                d.Name ) );\n            }\n            <span class=\"blue\">else</span>\n            {\n              <span class=\"blue\">if</span>( p.StorageType == <span class=\"teal\">StorageType</span>.Double )\n              {\n                p2.Set( p.AsDouble() );\n              }\n              <span class=\"blue\">else</span> <span class=\"blue\">if</span>( p.StorageType == <span class=\"teal\">StorageType</span>.String )\n              {\n                p2.Set( p.AsString() );\n              }\n              <span class=\"blue\">else</span> <span class=\"blue\">if</span>( p.StorageType == <span class=\"teal\">StorageType</span>.Integer )\n              {\n                p2.Set( p.AsInteger() );\n              }\n              <span class=\"teal\">Debug</span>.Print( <span class=\"blue\">string</span>.Format(\n                <span class=\"maroon\">\"Parameter '{0}' copied.\"</span>, d.Name ) );\n            }\n          }\n        }\n \n        <span class=\"green\">// Note:</span>\n        <span class=\"green\">// If a shared parameter parameter is attached,</span>\n        <span class=\"green\">// you need to create the shared parameter first,</span>\n        <span class=\"green\">// then copy the parameter value.</span>\n      }\n \n      <span class=\"green\">// If the system family type has some other properties,</span>\n      <span class=\"green\">// you need to copy them as well here. Reflection can</span>\n      <span class=\"green\">// be used to determine the available properties.</span>\n \n      <span class=\"teal\">MemberInfo</span>[] memberInfos = newWallType.GetType()\n        .GetMembers( <span class=\"teal\">BindingFlags</span>.GetProperty );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">MemberInfo</span> m <span class=\"blue\">in</span> memberInfos )\n      {\n        <span class=\"green\">// Copy the writable property values here.</span>\n        <span class=\"green\">// As there are no property writable for</span>\n        <span class=\"green\">// Walltype, I ignore this process here.</span>\n      }\n      t.Commit();\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><p>The updated version of The Building Code samples is\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.120.10\">\nrelease 2015.0.120.10</a>.</p><p>So there you are.</p><p>Have fun!</p><p><strong>Addendum:</strong> As Matt Taylor kindly points out below, the Revit 2014 API introduced the powerful\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/copy-and-paste-api-applications-and-modeless-assertion.html\">\ncopy and paste API</a>,\nwhich can be used to easily implement a more complete solution that the one presented above.</p>"
  }
]