[
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "CopyElements, Revit 2016 Scalability, Python and Ruby",
    "local_header_href": "#copyelements-revit-2016-scalability-python-and-ruby",
    "chunk_text": "<h3>CopyElements, Revit 2016 Scalability, Python and Ruby</h3><p>Here are a bunch of infos on and updates for Revit 2016, as well as some important hints on the use of the ElementTransformUtils.CopyElements method:</p><ul>\n<li><a href=\"#2\">CopyElements view argument is for 2D only</a></li>\n<li><a href=\"#3\">Revit 2016 scalability enhancements</a></li>\n<li><a href=\"#4\">Revit 2016 Python shell</a></li>\n<li><a href=\"#5\">Revit 2016 Ruby shell</a></li>\n<li><a href=\"#6\">RevitLookup for Revit 2016</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "CopyElements View Argument is for 2D only",
    "local_header_href": "#copyelements-view-argument-is-for-2d-only",
    "chunk_text": "<h4>CopyElements View Argument is for 2D only</h4><p>You should only use the ElementTransformUtils.CopyElements views argument when working with view dependent elements, i.e., 2D elements.</p><p>This was pointed out by Arnošt Löbel in the Revit API discussion forum thread raised by HD12310 on using\n<a href=\"http://forums.autodesk.com/t5/revit-api/elementtransformutils-copyelements-from-linked-document/m-p/5574351\">\nElementTransformUtils.CopyElements from a linked document</a>,\nwho also points out some other important usage considerations:</p><p><strong>Question:</strong>\nI am trying to copy paste linked elements into the active document.</p><p>This is something that Revit can do manually: select a linked element, then ctrl + c and ctrl + v.</p><p>But I guess there is an API reason why this won't work:</p><pre class=\"code\">\n  <span class=\"teal\">ElementTransformUtils</span>.CopyElements( view3DInLink,\n    ids, view3DInHost, <span class=\"blue\">null</span>, <span class=\"blue\">new</span> <span class=\"teal\">CopyPasteOptions</span>() );\n</pre><p>It errors out on \"The specified view cannot be used as a source or destination for copying elements between two views.\" (Which I presume is the linked view.)</p><p>It does work if you just want to copy the families from the link (without placing them) like this:</p><pre class=\"code\">\n  <span class=\"teal\">ElementTransformUtils</span>.CopyElements( linkedDoc, ids,\n    thisDoc, <span class=\"blue\">null</span>, <span class=\"blue\">new</span> <span class=\"teal\">CopyPasteOptions</span>() );\n</pre><p>Is there any other method that will copy and paste linked elements, or should this work?</p><p>If not, then Create.NewFamilyInstance is probably the only option here   :-)</p><p><strong>Answer:</strong>\n\nAfaik it should work.</p><p>Maybe it will help if you do it in several separate steps, e.g. first some supporting elements, like styles, etc., then the instances?</p><p>It is probably not entirely obvious from the documentation, but the Copy method that takes views as arguments only work for copying of view-specific elements. And, indirectly, since 3D views – which is what I assume you are copying between – cannot even have view-specific elements, they can never be used in that particular Copy method. That is why you see the error you got even before Revit went on testing whether the elements themselves were view-specific or not.</p><p>The work-around is simple: Use the Copy method that takes two documents instead. That should work.</p><p><strong>Response:</strong>\nThanks for the replies.</p><p>I finally found my mistake... finally, at 00:25 :-)</p><p>I read somewhere that you needed to supply the FamilySymbolIds.</p><p>Which is what I did, so I got the family types, not the instances.</p><p>(Cool enough, since Transfer Project Standards doesn't transfer families.)</p><p>But then I realized you probably get what you ask for here.</p><p>So I supplied the element ids of the linked family instances and voila, they pasted right in :-)</p><p>It even works on workplane based families; haven't tried face based yet.</p><p>For anyone interested, here's the code:</p><pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Collections;\n<span class=\"blue\">using</span> System.Collections.ObjectModel;\n<span class=\"blue\">using</span> System.Linq;\n<span class=\"blue\">using</span> System.Text;\n<span class=\"blue\">using</span> System.Threading.Tasks;\n<span class=\"blue\">using</span> System.Windows;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n\n<span class=\"blue\">namespace</span> TransferFamilys\n{\n  [<span class=\"teal\">TransactionAttribute</span>(<span class=\"teal\">TransactionMode</span>.Manual)]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CopyPasteFamilys</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">CopyUseDestination</span>\n      : <span class=\"teal\">IDuplicateTypeNamesHandler</span>\n    {\n      <span class=\"blue\">public</span> <span class=\"teal\">DuplicateTypeAction</span>\n        OnDuplicateTypeNamesFound(\n          <span class=\"teal\">DuplicateTypeNamesHandlerArgs</span> args )\n      {\n        <span class=\"blue\">return</span> <span class=\"teal\">DuplicateTypeAction</span>.UseDestinationTypes;\n      }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">Document</span> hostDoc = commandData.Application\n        .ActiveUIDocument.Document;\n \n      <span class=\"green\">// Get the link</span>\n \n      <span class=\"teal\">FilteredElementCollector</span> links\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( hostDoc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">RevitLinkInstance</span> ) );\n \n      <span class=\"teal\">Document</span> linkedDoc = links.Cast&lt;<span class=\"teal\">RevitLinkInstance</span>&gt;()\n        .FirstOrDefault().GetLinkDocument();\n \n      <span class=\"green\">// Get familys in link</span>\n \n      <span class=\"teal\">FilteredElementCollector</span> linkedFamCollector\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( linkedDoc );\n \n      <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = linkedFamCollector\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n        .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_GenericModel )\n        .ToElementIds();\n \n      <span class=\"blue\">if</span>( ids.Count == 0 )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Copy Paste\"</span>,\n          <span class=\"maroon\">\"The link does not contain the specified elements.\"</span> );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> targetTrans\n          = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( hostDoc ) )\n        {\n          <span class=\"teal\">CopyPasteOptions</span> copyOptions\n            = <span class=\"blue\">new</span> <span class=\"teal\">CopyPasteOptions</span>();\n \n          copyOptions.SetDuplicateTypeNamesHandler(\n            <span class=\"blue\">new</span> <span class=\"teal\">CopyUseDestination</span>() );\n \n          targetTrans.Start(\n            <span class=\"maroon\">\"Copy and paste linked families\"</span> );\n \n          <span class=\"teal\">ElementTransformUtils</span>.CopyElements(\n            linkedDoc, ids, hostDoc, <span class=\"blue\">null</span>,\n            copyOptions );\n \n          <span class=\"green\">//hostDoc.Regenerate();</span>\n          targetTrans.Commit();\n        }\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><p>Many thanks to HD12310 for raising this and sharing the solution!</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "Revit 2016 Scalability Enhancements",
    "local_header_href": "#revit-2016-scalability-enhancements",
    "chunk_text": "<h4>Revit 2016 Scalability Enhancements</h4><p>This topic was raised by kondaments'\n<a href=\"http://www.youtube.com/watch?v=fo55QTwBdBM&amp;google_comment_id=z13riljqnrmycdanv23wwzeh3vmrvjrit04\">\nquery</a> on the\n<a href=\"http://www.youtube.com/watch?v=fo55QTwBdBM\">Revit 2016 API News video</a> provided with the\n<a href=\"http://thebuildingcoder.typepad.com/blog/2015/04/revit-2016-api-news-and-devdays-online-recording.html\">\nDevDays Online Recording</a>:</p><p><strong>Question:</strong>\n\nAt 6:23 and later, what are the specs of the machine(s) used? Graphics card, processor etc.?</p><p><strong>Answer:</strong>\n\nThank you for your query.</p><p>This actually provides a great chance to talk about how the Revit 2016 scalability enhancements are machine independent and actually make the specs of the specific machines involved less important. Unlike some of our competitors we are being smarter about how we process data, rather than trying to process more data faster.</p><p>The person creating the demo likely used their own machine to create the video – actually, different demos may have been created by different people.\nI think most machines are HP Z600's or the newer Dell Precision 7810 (or higher).</p><p>The significant performance improvements in Revit 2016 should be seen with a wide array of hardware and are not limited to any particular technology.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "Revit 2016 Python Shell",
    "local_header_href": "#revit-2016-python-shell",
    "chunk_text": "<h4>Revit 2016 Python Shell</h4><p>Daren Thomas updated\n<a href=\"https://github.com/architecture-building-systems/revitpythonshell\">RevitPythonShell</a> for\nRevit 2016, and it now lives on GitHub:\n\n<p><strong>Daren:</strong>\n\nRPS is now on GitHub at <a href=\"https://github.com/architecture-building-systems/revitpythonshell\">github.com/architecture-building-systems/revitpythonshell</a>.</p>\n<p>I just created an installer for Revit 2016 for it.</p>\n<p>A couple of users have been pushing the boundaries.\nMaybe you have heard of the non-modal shell, that I think could be quite interesting for interactive development.</p>\n<p>I would like to include your RevitLookup tool in RPS, with a function like snoop(Element) – according to the license, that should be ok.\nWhat do you think?</p>\n<p><strong>Jeremy:</strong> Actually, that raises several topics I would like to address:</p>\n<h4>Revit Python Shell</h4>\n<p>Congratulations on moving to GitHub.\nI think that is a great choice.</p>\nYour home page there looks great.</p><p>Congratulations on migrating to Revit 2016.</p><p>Congratulations on the modeless shell. I was not aware of that.</p>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "Revit Python Shell",
    "local_header_href": "#revit-python-shell",
    "chunk_text": "<h4>Revit Python Shell</h4><p>Congratulations on moving to GitHub.\nI think that is a great choice.</p>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "Revit Ruby Shell",
    "local_header_href": "#revit-ruby-shell",
    "chunk_text": "<h4>Revit Ruby Shell</h4><p>Have you looked at the <a href=\"https://github.com/hakonhc/RevitRubyShell\">Revit Ruby Shell</a>?</p><p>It has a modeless shell too, afaik.\nI hope you are already in touch and sharing with that project.\nIf not, you absolutely should be!\nThese two projects have so much in common!\nAnd are both so great!</p>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "RevitLookup",
    "local_header_href": "#revitlookup",
    "chunk_text": "<h4>RevitLookup</h4><p>Yes, of course you can incorporate RevitLookup into the Revit Python Shell.</p><p>It is on GitHub too, at <a href=\"https://github.com/jeremytammik/RevitLookup\">github.com/jeremytammik/RevitLookup</a>.</p><p>Please do not just copy the code and paste it into the Python shell!</p><p>Instead, let us define an API for it and use that to incorporate it more professionally as a separate component.</p><p>I will happily work together with you on that.</p><p>That would be fun!</p>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "GeoSnoop",
    "local_header_href": "#geosnoop",
    "chunk_text": "<h4>GeoSnoop</h4><p>Another thing that I was thinking of adding to RevitLookup is a functionality to snoop geometry, viewing it as geometry, not numerical data, i.e. curves and stuff.</p><p>Maybe two viewers, a 2D one for planar things and a 3D one for solids.</p><p>The 2D one is named GeoSnoop and has been implemented for ages but not incorporated into RevitLookup yet, e.g., in these discussions:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/determining-the-size-and-location-of-viewports-on-a-sheet.html\">Size and location of viewports on a sheet</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html#7\">Room and furniture loops using symbols</a></li>\n</ul><a name=\"5\"></a>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "Revit 2016 Ruby Shell",
    "local_header_href": "#revit-2016-ruby-shell",
    "chunk_text": "<h4>Revit 2016 Ruby Shell</h4><p><a href=\"https://github.com/hakonhc\">Håkon Clausen</a> just updated the\n<a href=\"https://github.com/hakonhc/RevitRubyShell\">Revit Ruby Shell</a> for Revit 2016 as well.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1318_2016_scalability",
    "header_text": "RevitLookup for Revit 2016",
    "local_header_href": "#revitlookup-for-revit-2016",
    "chunk_text": "<h4>RevitLookup for Revit 2016</h4><p>Last but not least, I published a minor update to <a href=\"https://github.com/jeremytammik/RevitLookup\">RevitLookup</a> today:</p><p>The previous version was referring to the Revit Copernicus pre-release assembly DLL locations in <code>C:\\Program Files\\Autodesk\\Revit Copernicus</code>.</p><p>I now installed the final official version of Revit 2016 and changed the location to <code>C:\\Program Files\\Autodesk\\Revit 2016</code>.</p><p>Enjoy!</p>"
  }
]