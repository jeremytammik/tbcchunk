[
  {
    "original_filename": "1027_revision",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1027_revision",
    "header_text": "Max' Revision Wrapper Class",
    "local_header_href": "#max-revision-wrapper-class",
    "chunk_text": "<h3>Max' Revision Wrapper Class</h3><p>Max posted a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html?cid=6a00e553e168978833019aff7c6098970c#comment-6a00e553e168978833019aff7c6098970c\">\ncomment</a> on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html\">\nwhat's new in the Revit 2014 API</a> presenting\n\na neat little revision parameter wrapper class that I have taken the liberty of adding to The Building Coder sample collection.</p><p>In Max' own words:\nFor everyone also looking for the Revision parameters:\nHere a little wrapper class in C#:</p><pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n \n<span class=\"blue\">namespace</span> BuildingCoder\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> A Revision parameter wrapper class by Max.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">class</span> <span class=\"teal\">JtRevision</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> The BIM element.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"teal\">Element</span> _e;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Internal access to the named parameter. </span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"teal\">Parameter</span> _p( <span class=\"blue\">string</span> parameter_name )\n    {\n      <span class=\"blue\">return</span> _e.get_Parameter( parameter_name );\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Create a Revision parameter accessor </span>\n    <span class=\"gray\">///</span><span class=\"green\"> for the given BIM element.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> JtRevision( <span class=\"teal\">Element</span> e )\n    {\n      _e = e;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Date\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _p( <span class=\"maroon\">\"Revision Date\"</span> ).AsString(); }\n      <span class=\"blue\">set</span> { _p( <span class=\"maroon\">\"Revision Date\"</span> ).Set( <span class=\"blue\">value</span> ); }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> IssuedTo\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _p( <span class=\"maroon\">\"Issued to\"</span> ).AsString(); }\n      <span class=\"blue\">set</span> { _p( <span class=\"maroon\">\"Issued to\"</span> ).Set( <span class=\"blue\">value</span> ); }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Number\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _p( <span class=\"maroon\">\"Revision Number\"</span> ).AsString(); }\n      <span class=\"blue\">set</span> { _p( <span class=\"maroon\">\"Revision Number\"</span> ).Set( <span class=\"blue\">value</span> ); }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span> Issued\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _p( <span class=\"maroon\">\"Issued\"</span> ).AsInteger(); }\n      <span class=\"blue\">set</span> { _p( <span class=\"maroon\">\"Issued\"</span> ).Set( <span class=\"blue\">value</span> ); }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span> Numbering\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _p( <span class=\"maroon\">\"Numbering\"</span> ).AsInteger(); }\n      <span class=\"blue\">set</span> { _p( <span class=\"maroon\">\"Numbering\"</span> ).Set( <span class=\"blue\">value</span> ); }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">int</span> Sequence\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _p( <span class=\"maroon\">\"Revision Sequence\"</span> ).AsInteger(); }\n      <span class=\"blue\">set</span> { _p( <span class=\"maroon\">\"Revision Sequence\"</span> ).Set( <span class=\"blue\">value</span> ); }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> Description\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _p( <span class=\"maroon\">\"Revision Description\"</span> ).AsString(); }\n      <span class=\"blue\">set</span> { _p( <span class=\"maroon\">\"Revision Description\"</span> ).Set( <span class=\"blue\">value</span> ); }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> IssuedBy\n    {\n      <span class=\"blue\">get</span> { <span class=\"blue\">return</span> _p( <span class=\"maroon\">\"Issued by\"</span> ).AsString(); }\n      <span class=\"blue\">set</span> { _p( <span class=\"maroon\">\"Issued by\"</span> ).Set( <span class=\"blue\">value</span> ); }\n    }\n  }\n}\n</pre><p>As you can see for yourself, there is no magic to this, and the principle could be used for many other purposes.</p><p>In fact, all this does is hard code a mapping of parameter names to wrapper class methods.</p><p>Mille grazie, Max, for providing this nice implementation!</p><p>I wish everybody a nice weekend!</p><a name=\"#2\"></a>"
  },
  {
    "original_filename": "1027_revision",
    "header_text": "Addendum",
    "local_header_href": "#addendum",
    "chunk_text": "<h3>Addendum</h3><p>Thorsten Meinecke pointed out the importance of avoiding the use of display names to identify the element parameters in his comment below.</p><p>Three years later, Jose Ignacio Montes was kind enough to actually do the work and re-implement this class using that approach:</p><pre class=\"code\">\n<span style=\"color:blue;\">class</span> <span style=\"color:#2b91af;\">JtRevision</span>\n{\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> </span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> The BIM element.</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> </span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:#2b91af;\">Element</span> _e;\n \n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> </span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> Internal access to the named parameter.</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> </span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:#2b91af;\">Parameter</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span> bip )\n  {\n    <span style=\"color:blue;\">return</span> _e.get_Parameter( bip );\n  }\n \n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> </span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> Create a Revision parameter accessor</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> for the given BIM element.</span>\n  <span style=\"color:gray;\">///</span><span style=\"color:green;\"> </span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n  <span style=\"color:blue;\">public</span> JtRevision( <span style=\"color:#2b91af;\">Element</span> e )\n  {\n    _e = e;\n  }\n \n  <span style=\"color:blue;\">public</span> <span style=\"color:blue;\">string</span> Date\n  {\n    <span style=\"color:blue;\">get</span> { <span style=\"color:blue;\">return</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_DATE ).AsString(); }\n    <span style=\"color:blue;\">set</span> { _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_DATE ).Set( <span style=\"color:blue;\">value</span> ); }\n  }\n \n  <span style=\"color:blue;\">public</span> <span style=\"color:blue;\">string</span> IssuedTo\n  {\n    <span style=\"color:blue;\">get</span> { <span style=\"color:blue;\">return</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_ISSUED_TO ).AsString(); }\n    <span style=\"color:blue;\">set</span> { _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_ISSUED_TO ).Set( <span style=\"color:blue;\">value</span> ); }\n  }\n \n  <span style=\"color:blue;\">public</span> <span style=\"color:blue;\">string</span> Number\n  {\n    <span style=\"color:blue;\">get</span> { <span style=\"color:blue;\">return</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_NUM ).AsString(); }\n    <span style=\"color:blue;\">set</span> { _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_NUM ).Set( <span style=\"color:blue;\">value</span> ); }\n  }\n \n  <span style=\"color:blue;\">public</span> <span style=\"color:blue;\">int</span> Issued\n  {\n    <span style=\"color:blue;\">get</span> { <span style=\"color:blue;\">return</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_ISSUED ).AsInteger(); }\n    <span style=\"color:blue;\">set</span> { _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_ISSUED ).Set( <span style=\"color:blue;\">value</span> ); }\n  }\n \n  <span style=\"color:blue;\">public</span> <span style=\"color:blue;\">int</span> Numbering\n  {\n    <span style=\"color:blue;\">get</span> { <span style=\"color:blue;\">return</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_ENUMERATION ).AsInteger(); }\n    <span style=\"color:blue;\">set</span> { _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_ENUMERATION ).Set( <span style=\"color:blue;\">value</span> ); }\n  }\n \n  <span style=\"color:blue;\">public</span> <span style=\"color:blue;\">int</span> Sequence\n  {\n    <span style=\"color:blue;\">get</span> { <span style=\"color:blue;\">return</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_SEQUENCE_NUM ).AsInteger(); }\n    <span style=\"color:blue;\">set</span> { _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_SEQUENCE_NUM ).Set( <span style=\"color:blue;\">value</span> ); }\n  }\n \n  <span style=\"color:blue;\">public</span> <span style=\"color:blue;\">string</span> Description\n  {\n    <span style=\"color:blue;\">get</span> { <span style=\"color:blue;\">return</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_DESCRIPTION ).AsString(); }\n    <span style=\"color:blue;\">set</span> { _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_DESCRIPTION ).Set( <span style=\"color:blue;\">value</span> ); }\n  }\n \n  <span style=\"color:blue;\">public</span> <span style=\"color:blue;\">string</span> IssuedBy\n  {\n    <span style=\"color:blue;\">get</span> { <span style=\"color:blue;\">return</span> _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_ISSUED_BY ).AsString(); }\n    <span style=\"color:blue;\">set</span> { _p( <span style=\"color:#2b91af;\">BuiltInParameter</span>.PROJECT_REVISION_REVISION_ISSUED_BY ).Set( <span style=\"color:blue;\">value</span> ); }\n  }\n}\n</pre><p>Many thanks to Jose Ignacio for this very cool and overdue improvement!</p><p>I added the updated version to <a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a>.</p><p>The new class lives beside the obsolete old one in the module <a href=\"https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/JtRevision.cs\">JtRevision.cs</a>.</p>"
  }
]