[
  {
    "original_filename": "0956_pycolorize",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n<!-- <script src=\"google-code-prettify/run_prettify.js\"></script> -->\n</head>"
  },
  {
    "original_filename": "0956_pycolorize",
    "header_text": "Python Mac Pasteboard Access",
    "local_header_href": "#python-mac-pasteboard-access",
    "chunk_text": "<h3>Python Mac Pasteboard Access</h3><p>I recently discussed the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/05/source-code-formatting-and-google-prettyfier.html\">\nGoogle prettify</a> tool\n\nthat I started using to display colour-coded JavaScript source code in HTML.\n\n<p>As I mentioned there, it does a good job for all languages I looked at except C# and VB .NET, where I prefer the colour coding generated by Visual Studio, since that highlights class names defined in referenced .NET assemblies as well as the built-in .NET ones.\n\n<p>To retrieve the Visual Studio colour coding and insert it into my HTML page, I still use\n\n<a href=\"http://copysourceashtml.codeplex.com\">\nCopySourceAsHtml 3.0</a>.\n\nIt defines some CSS styles for different colours and adds the corresponding HTML span tags around the keywords to highlight them.\n\n<p>On Windows, I\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/updated-sdk-2012-products-and-source-code-colourisation.html\">\npost-processed the output</a> using\n\na Python script\n\n<a href=\"zip/pycolorize.py\">pycolorize.py</a> to\n\nread the CopySourceAsHtml output from the Windows clipboard and convert its CSS style definitions to my own ones already pre-defined in the main blog stylesheet.\n\n<p>Now that I am working almost exclusively on the Mac, I converted this script from Windows to Mac as well.</p>\n<p>Thanks to the platform independence provided by Python, the only thing that needs changing is to replace the Windows clipboard access by Mac pasteboard read and write operations.</p>\n<p>For Windows, I was making use of a Python Windows API library.\nSimilar libraries are available for Mac as well, but the Unix pbcopy and pbpaste command line utilities offer an even simpler alternative, as demonstrated by the\n\n<a href=\"http://coffeeghost.net/src/pyperclip.py\">Pyperclip cross-platform copy and paste</a> sample.</p>\n<p>Here is my new Mac version of the colour-coded HTML CopySourceAsHtml output cleanup script:</p>\n<pre class=\"prettyprint\">\n#!/usr/bin/python\n# -*- coding: iso-8859-15 -*-\n#\n# pycolorize.py - massage colorised HTML source code copied from Visual Studio\n#\n# jeremy tammik, autodesk inc, 2009-02-05\n#\n# History:\n#\n# 2009-02-05 initial version\n# 2009-05-22 updated to support Visual Studio 2008\n# 2011-04-19 updated to support Visual Studio 2010 and CopySourceAsHtml 3.0\n# 2013-05-21 migrated to mac os x unix, cf. http://coffeeghost.net/src/pyperclip.py\n#\n# read a block of text from a file or the windows clipboard\n# replace cb[12345] by the appropriate colour\n# remove the style and pre tags\n#\n# example of original text block:\n#\n# &lt;style type=\"text/css\"&gt;\n# .cf { font-family: Courier New; font-size: 10pt; color: black; background: white; }\n# .cl { margin: 0px; }\n# .gray { color: gray; }\n# .green { color: green; }\n# .blue { color: blue; }\n# .teal { color: teal; }\n# .maroon { color: maroon; }\n# &lt;/style&gt;\n# &lt;div class=\"cf\"&gt;\n# &lt;pre class=\"cl\"&gt;&lt;span class=\"gray\"&gt;///&lt;/span&gt;&lt;span class=\"green\"&gt; &lt;/span&gt;&lt;span class=\"gray\"&gt;&lt;summary&gt;&lt;/span&gt;&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;&lt;span class=\"gray\"&gt;///&lt;/span&gt;&lt;span class=\"green\"&gt; Return the specified double parameter &lt;/span&gt;&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;&lt;span class=\"gray\"&gt;///&lt;/span&gt;&lt;span class=\"green\"&gt; value for the given wall.&lt;/span&gt;&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;&lt;span class=\"gray\"&gt;///&lt;/span&gt;&lt;span class=\"green\"&gt; &lt;/span&gt;&lt;span class=\"gray\"&gt;&lt;/summary&gt;&lt;/span&gt;&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;&lt;span class=\"blue\"&gt;double&lt;/span&gt; GetWallParameter( &lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;  &lt;span class=\"teal\"&gt;Wall&lt;/span&gt; wall,&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;  &lt;span class=\"teal\"&gt;BuiltInParameter&lt;/span&gt; bip )&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;{&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;  &lt;span class=\"teal\"&gt;Parameter&lt;/span&gt; p = wall.get_Parameter( bip );&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt; &lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;  &lt;span class=\"teal\"&gt;Debug&lt;/span&gt;.Assert( &lt;span class=\"blue\"&gt;null&lt;/span&gt; != p, &lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;    &lt;span class=\"maroon\"&gt;\"expected wall to have \"&lt;/span&gt;&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;    + &lt;span class=\"maroon\"&gt;\"HOST_AREA_COMPUTED and \"&lt;/span&gt;&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;    + &lt;span class=\"maroon\"&gt;\"HOST_VOLUME_COMPUTED parameters\"&lt;/span&gt; );&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt; &lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;  &lt;span class=\"blue\"&gt;return&lt;/span&gt; p.AsDouble();&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;}&lt;/pre&gt;\n# &lt;/div&gt;\n#\n# example of resulting text block:\n#\n# &lt;span class=\"gray\"&gt;///&lt;/span&gt;&lt;span class=\"green\"&gt; &lt;/span&gt;&lt;span class=\"gray\"&gt;&lt;summary&gt;&lt;/span&gt;\n# &lt;span class=\"gray\"&gt;///&lt;/span&gt;&lt;span class=\"green\"&gt; Return the specified double parameter &lt;/span&gt;\n# &lt;span class=\"gray\"&gt;///&lt;/span&gt;&lt;span class=\"green\"&gt; value for the given wall.&lt;/span&gt;\n# &lt;span class=\"gray\"&gt;///&lt;/span&gt;&lt;span class=\"green\"&gt; &lt;/span&gt;&lt;span class=\"gray\"&gt;&lt;/summary&gt;&lt;/span&gt;\n# &lt;span class=\"blue\"&gt;double&lt;/span&gt; GetWallParameter(\n#   &lt;span class=\"teal\"&gt;Wall&lt;/span&gt; wall,\n#   &lt;span class=\"teal\"&gt;BuiltInParameter&lt;/span&gt; bip )\n# {\n#   &lt;span class=\"teal\"&gt;Parameter&lt;/span&gt; p = wall.get_Parameter( bip );\n#  \n#   &lt;span class=\"teal\"&gt;Debug&lt;/span&gt;.Assert( &lt;span class=\"blue\"&gt;null&lt;/span&gt; != p,\n#     &lt;span class=\"maroon\"&gt;\"expected wall to have \"&lt;/span&gt;\n#     + &lt;span class=\"maroon\"&gt;\"HOST_AREA_COMPUTED and \"&lt;/span&gt;\n#     + &lt;span class=\"maroon\"&gt;\"HOST_VOLUME_COMPUTED parameters\"&lt;/span&gt; );\n#  \n#   &lt;span class=\"blue\"&gt;return&lt;/span&gt; p.AsDouble();\n# }\n#\n# 2009-05-22:\n#\n# example of original text block:\n#\n# &lt;style type=\"text/css\"&gt;\n# .cf { font-family: Courier New; font-size: 10pt; color: black; background: white; }\n# .cl { margin: 0px; }\n# .cb1 { color: blue; }\n# .cb2 { color: green; }\n# .cb3 { color: #2b91af; }\n# .cb4 { color: #a31515; }\n# &lt;/style&gt;\n# &lt;div class=\"cf\"&gt;\n# &lt;pre class=\"cl\"&gt;        &lt;span class=\"cb1\"&gt;int&lt;/span&gt; n = imports.Count;&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;        &lt;span class=\"cb2\"&gt;// test&lt;/span&gt;&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt; &lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;        &lt;span class=\"cb3\"&gt;Debug&lt;/span&gt;.Print(&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;          &lt;span class=\"cb4\"&gt;\"Family '{0}' contains {1} import instance{2}{3}\"&lt;/span&gt;,&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;          key, n, &lt;span class=\"cb3\"&gt;Util&lt;/span&gt;.PluralSuffix( n ),&lt;/pre&gt;\n# &lt;pre class=\"cl\"&gt;          &lt;span class=\"cb3\"&gt;Util&lt;/span&gt;.DotOrColon( n ) );&lt;/pre&gt;\n# &lt;/div&gt;\n#\n# example of resulting text block:\n#\n#         &lt;span class=\"blue\"&gt;int&lt;/span&gt; n = imports.Count;\n#         &lt;span class=\"green\"&gt;// test&lt;/span&gt;\n#  \n#         &lt;span class=\"teal\"&gt;Debug&lt;/span&gt;.Print(\n#           &lt;span class=\"maroon\"&gt;\"Family '{0}' contains {1} import instance{2}{3}\"&lt;/span&gt;,\n#           key, n, &lt;span class=\"teal\"&gt;Util&lt;/span&gt;.PluralSuffix( n ),\n#           &lt;span class=\"teal\"&gt;Util&lt;/span&gt;.DotOrColon( n ) );\n#\nimport os, re\n\ncolor_map = { '#2b91af' : 'teal', '#a31515' : 'maroon' }\n\ndef getTextMac():\n  outf = os.popen('pbpaste', 'r')\n  content = outf.read()\n  outf.close()\n  return content\n\ndef setTextMac(text):\n  outf = os.popen('pbcopy', 'w')\n  outf.write(text)\n  outf.close()\n\ndef getTextWin():\n  w.OpenClipboard()\n  d = w.GetClipboardData( win32con.CF_TEXT )\n  w.CloseClipboard()\n  return d\n\ndef setTextWin( aType, aString ):\n  w.OpenClipboard()\n  w.EmptyClipboard()\n  w.SetClipboardData( aType, aString )\n  w.CloseClipboard()\n\n_regexColor = re.compile( '\\.(cb[1-9]) \\{ color\\: ([#0-9a-z]+); \\}' )\n_regexStyle = re.compile( '(&lt;style type=\"text/css\"&gt;.*&lt;/style&gt;\\s*&lt;div class=\"cf\"&gt;\\s*)', re.DOTALL )\n_regexEnd = re.compile( '(&lt;/pre&gt;\\s*&lt;/div&gt;)', re.DOTALL )\n\ndef replace_cb_by_color( s ):\n  \"Search for '.cb1 { color: blue; }' and globally replace cb[1-9] by the appropriate colour.\"\n  m = _regexColor.search( s )\n  if m:\n    a = m.groups()\n    if 2 == len( a ):\n      color = a[1]\n      if color_map.has_key( color ): color = color_map[color]\n      return True, s.replace( a[0], color )\n  return False, s\n\ndef main():\n  'Convert Visual Studio CopySourceAsHtml colour styles to a more compact form.'\n\n  s = getTextMac()\n\n  go = True\n  while go: go, s = replace_cb_by_color( s )\n\n  m = _regexStyle.match( s )\n\n  if m:\n    s = s.replace( m.group( 1 ), '' )\n    s = s.replace( '&lt;pre class=\"cl\"&gt;', '' )\n    m = _regexEnd.search( s )\n\n  if m:\n    s = s.replace( m.group( 1 ), '' )\n    s = s.strip().replace( '&lt;/pre&gt;', '' )\n\n  setTextMac( s )\n\nif __name__ == '__main__':\n  main()\n</pre>\n<p>Here is the original un-HTML-ised version of this script,\n\n<a href=\"file:////a/src/pycolorize/pycolorize_mac.py\">pycolorize_mac.py</a>.</p>\n<a name=\"2\"></a>\n<h4>Middlesex Fells Reservation</h4>\n<p>I met up with Harry Mattison of\n\n<a href=\"http://boostyourbim.wordpress.com/\">Boost your BIM</a> yesterday,\n\nand he suggested that I might like to visit the\n\n<a href=\"http://en.wikipedia.org/wiki/Middlesex_Fells_Reservation\">Fells</a> just\n\na few miles north of Cambridge.</p>\n<center>\n<img alt=\"Middlesex Fells Reservation\" src=\"img/200px-Fells_panorama.jpg\"/>\n</center>\n<p>That was a great idea!\nThank you for that, Harry.</p>\n<p>I ended up spending all day here on the bank of the lake, reading, sleeping, watching the sun cross the sky, taking an occasional swim.\nMy first day in months of doing almost absolutely nothing.</p>\n<p>Friday night I visited\n\n<a href=\"http://www.meetup.com/DanceFriday\">Dance Freedom</a> in\n\nCambridge, the original barefoot weekly dance, continuously running for 44 years, according to their own words.\nI especially enjoyed it, since I regularly participate in similar events in Switzerland.\nOne of them is the Barfussdisco in Basle, which just inaugurated its very own\n\n<a href=\"http://www.facebook.com/BarfussDiscoBasel\">Bafudi facebook page</a>.</p>\n<center>\n<img alt=\"Bafudi\" src=\"img/bafudi.png\" width=\"200\"/>\n</center>\n</p></p></p></p>"
  },
  {
    "original_filename": "0956_pycolorize",
    "header_text": "Middlesex Fells Reservation",
    "local_header_href": "#middlesex-fells-reservation",
    "chunk_text": "<h4>Middlesex Fells Reservation</h4><p>I met up with Harry Mattison of\n\n<a href=\"http://boostyourbim.wordpress.com/\">Boost your BIM</a> yesterday,\n\nand he suggested that I might like to visit the\n\n<a href=\"http://en.wikipedia.org/wiki/Middlesex_Fells_Reservation\">Fells</a> just\n\na few miles north of Cambridge.</p><center>\n<img alt=\"Middlesex Fells Reservation\" src=\"img/200px-Fells_panorama.jpg\"/>\n</center><p>That was a great idea!\nThank you for that, Harry.</p><p>I ended up spending all day here on the bank of the lake, reading, sleeping, watching the sun cross the sky, taking an occasional swim.\nMy first day in months of doing almost absolutely nothing.</p><p>Friday night I visited\n\n<a href=\"http://www.meetup.com/DanceFriday\">Dance Freedom</a> in\n\nCambridge, the original barefoot weekly dance, continuously running for 44 years, according to their own words.\nI especially enjoyed it, since I regularly participate in similar events in Switzerland.\nOne of them is the Barfussdisco in Basle, which just inaugurated its very own\n\n<a href=\"http://www.facebook.com/BarfussDiscoBasel\">Bafudi facebook page</a>.</p><center>\n<img alt=\"Bafudi\" src=\"img/bafudi.png\" width=\"200\"/>\n</center>"
  }
]