[
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- /Users/jta/a/doc/revit/tbc/git/a/doc/gbxml_small_surface_solution_whole_building.pdf\n\n- LLaVA: Large Language and Vision Assistant\n  https://llava.hliu.cc/\n  Checkout opensource vision assistant >>\n  Best part is it is open source and can be run locally with descent enough hardware. Needs linux and an rtx.\n  But non-Commercial\n  Google Glass but more helpful perhaps :deploy-parrot:\n  Identify plants, tools in a workspace, even run basic support (I know some in my family who could use some help being told where to click on the computer screen sometimes)\n  I'm sure someone will train a commercial-allowed equivalent\n\n- Text to video ($36M in funding so far, and they call themselves ‘lean’): https://moonvalley.ai\n  moonvalley.aimoonvalley.ai\n  > Animate your ideas... a machine learning model that can create visually stunning, high definition videos & animation from simple text prompts. (1 MB)\n\n- Detect objects in images\n  Did you know that you could run neural networks entirely in the browser without contacting a server? This fun demo shows you how.\n  DETR (End-to-End Object Detection) model with ResNet-50 backbone\n  I provided it with a picture of me eating churros ([^](/Users/jta/Pictures/2023/2023-10-10_garnatilla/16.jpg)), it it rapidly identified the following objects:\n  jeremy_eating_churros.png\n\ntwitter:\n\nA mighty beautiful #Python solution to fix gaps in building geometry, render @gbXML BIM model, add missing surfaces and verify waterproof with the #RevitAPI @AutodeskRevit #BIM @DynamoBIM @AutodeskAPS https://autode.sk/fixgaps\n\nA mighty beautiful Python solution for fixing gaps in the building geometry and new AI-related titbits\n&ndash; Fixing building geometry gaps\n&ndash; Open and render gbXML BIM model\n&ndash; Identify gaps in geometry\n&ndash; Add missing surfaces\n&ndash; Verify waterproof\n&ndash; LLaVA large language and vision assistant\n&ndash; Moonvalley text to video\n&ndash; DETR model detects objects in images...\n\nlinkedin:\n\nA mighty beautiful #Python solution to fix gaps in building geometry, render @gbXML BIM model, add missing surfaces and verify waterproof with the #RevitAPI @AutodeskRevit #BIM @DynamoBIM @AutodeskAPS\n\nhttps://autode.sk/fixgaps\n\n- Fixing building geometry gaps\n- Open and render gbXML BIM model\n- Identify gaps in geometry\n- Add missing surfaces\n- Verify waterproof\n- LLaVA large language and vision assistant\n- Moonvalley text to video\n- DETR model detects objects in images...\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "Xgbxml Fixes Building Geometry Gaps",
    "local_header_href": "#xgbxml-fixes-building-geometry-gaps",
    "chunk_text": "### Xgbxml Fixes Building Geometry Gaps\n\nAs we approach the weekend, I finally get around to sharing a mighty beautiful Python solution for fixing gaps in the building geometry, followed by a bunch of little AI-related titbits:\n\n- [Fixing building geometry gaps](#2)\n    - [Setup](#2.1)\n    - [Open and render gbXML BIM model](#2.2)\n    - [Identify gaps in geometry](#2.3)\n    - [Add missing surfaces](#2.4)\n    - [Second gap](#2.5)\n    - [Third gap](#2.6)\n    - [Verify waterproof](#2.7)\n    - [Save model](#2.8)\n    - [Low precision and sliver area threshold](#2.9)\n- [LLaVA large language and vision assistant](#3)\n- [Moonvalley text to video](#4)\n- [DETR model detects objects in images](#5)"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "Fixing Building Geometry Gaps",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Fixing Building Geometry Gaps\n\nMany developers have encountered issues with gaps in the building geometry caused by the relatively low precision used by Revit when tessellating surfaces.\nSome of them can be addressed by adding appropriate fuzz and adjusting neighbouring vertices to better match and line up.\nHowever, sometimes a gap remains.\n\nJake of [Ripcord Engineering](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/3926242) recently\nshared a bunch of valuable [Python and gbXML tips](https://thebuildingcoder.typepad.com/blog/2023/07/export-gbxml-and-python-tips.html) and followed up with a pointer\nto [Shapely](https://pypi.org/project/shapely/)\nto [find and fix a gap in the building geometry](https://thebuildingcoder.typepad.com/blog/2023/09/element-diff-compare-shapely-and-rdbe.html#4).\n\nHe followed up with this impressive and beautiful documentation of\nan entire gbXML [small surface solution addressing the whole building](doc/gbxml_small_surface_solution_whole_building.pdf) that I think warrants an entire blog post of its own, so here goes, addressing the issue\non [gbXML from adjacent conceptual mass/adjacent space missing small surface](https://forums.autodesk.com/t5/revit-api-forum/gbxml-from-adjacent-conceptual-mass-adjacent-space-missing-small/m-p/12232100).\n\n####<a name=\"2.1\"></a> Setup\n\nImport packages:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "import packages",
    "local_header_href": "#import-packages",
    "chunk_text": "# import packages\n\nfrom xgbxml import get_parser\nfrom xgbxml import geometry_functions, gbxml_functions, render_functions from lxml import etree\nimport matplotlib.pyplot as plt\nimport copy\nimport math\nfrom uuid import uuid4\n</pre>\n\nGenerate parser:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "uses xgbxml to generate a lxml parser to read gbXML version 0.37",
    "local_header_href": "#uses-xgbxml-to-generate-a-lxml-parser-to-read-gbxml-version-037",
    "chunk_text": "# uses xgbxml to generate a lxml parser to read gbXML version 0.37\n\nparser=get_parser(version='0.37')\n</pre>\n\n####<a name=\"2.2\"></a> Open and Render gbXML BIM Model\n\nOpen file and render *23-013 WH Swan Hill_Mass_23-08-30.xml*:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "opens the file using the custom lxml parser",
    "local_header_href": "#opens-the-file-using-the-custom-lxml-parser",
    "chunk_text": "# opens the file using the custom lxml parser\n\nfp='23-013 WH Swan Hill_Mass_23-08-30.xml' tree=etree.parse(fp,parser) gbxml=tree.getroot()"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "renders the Campus element",
    "local_header_href": "#renders-the-campus-element",
    "chunk_text": "# renders the Campus element\n\nax=gbxml.Campus.render()\nax.figure.set_size_inches(8, 8)\nax.set_title(fp)\nplt.show()\n</pre>\n\n<center>\n<img src=\"img/xgbxml_fix_gap.png\" alt=\"Campus rendering\" title=\"Campus rendering\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\">Campus rendering</p>\n</center>\n\n####<a name=\"2.3\"></a> Identify Gaps in Geometry\n\nIdentify all gaps in the surfaces of the building;\nthis uses a new method of the `Building` element, `get_gaps_in_surfaces`:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "identify gaps in surfaces of building",
    "local_header_href": "#identify-gaps-in-surfaces-of-building",
    "chunk_text": "# identify gaps in surfaces of building\n\ngaps=gbxml.Campus.Building.get_gaps_in_surfaces()\ngaps\n</pre>\n\nThe result is a list of dictionaries. Each dictionary contains two items:\n\n- `space_ids`: a list of the ids of the adjacent Spaces\n- `shell`: a list of the coordinates of the exterior polygon of the gaps\n\nHere, the first and third items appear to be triangle gaps with only one adjacent space &ndash; so these are exterior gaps also adjacent to the outside.\n\n<pre class=\"prettyprint\">\n[{'space_ids': ['aim2197'],\n    'shell': [\n      (72.2287629, -0.3141381, 0.0),\n      (72.2287629, -0.4999998, 0.0),\n      (72.0986211, -0.4999998, 0.0),\n      (72.2287629, -0.3141381, 0.0)]},\n  {'space_ids': ['aim2553', 'aim7413'],\n    'shell': [(80.2291667, 14.5625, 10.0),\n      (80.0208333, 14.5625, 10.0),\n      (80.0208333, 16.020833, 10.0),\n      (80.2291667, 16.020833, 10.0),\n      (80.2291667, 14.5625, 10.0)]},\n  {'space_ids': ['aim6674'],\n    'shell': [(72.2287629, -0.4999998, 10.0),\n      (72.2287629, -0.3141381, 10.0),\n      (72.0986211, -0.4999998, 10.0),\n      (72.2287629, -0.4999998, 10.0)]}]\n</pre>\n\n####<a name=\"2.4\"></a> Add Missing Surfaces\n\nAdding the missing surfaces to the building; first gap:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "print gap",
    "local_header_href": "#print-gap",
    "chunk_text": "# print gap\n\ngap=gaps[0]\ngap\n</pre>\n\nResult:\n\n<pre class=\"prettyprint\">\n{'space_ids': ['aim2197'],\n  'shell': [(72.2287629, -0.3141381, 0.0),\n    (72.2287629, -0.4999998, 0.0),\n    (72.0986211, -0.4999998, 0.0),\n    (72.2287629, -0.3141381, 0.0)]}\n</pre>\n\nFix:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "add Surface",
    "local_header_href": "#add-surface",
    "chunk_text": "# add Surface\n\n"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "surface element",
    "local_header_href": "#surface-element",
    "chunk_text": "# surface element\n\nsurface=gbxml.Campus.add_Surface(\n  id=str(uuid4()),\n  surfaceType=None, # to do\n  constructionIdRef=None, # to do\n  exposedToSun=None # to do\n)"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "adjacent space id child element",
    "local_header_href": "#adjacent-space-id-child-element",
    "chunk_text": "# adjacent space id child element\n\nfor space_id in gap['space_ids']:\n  surface.add_AdjacentSpaceId(\n    spaceIdRef=space_id )"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "planar geometry child element",
    "local_header_href": "#planar-geometry-child-element",
    "chunk_text": "# planar geometry child element\n\nplanar_geometry = surface.add_PlanarGeometry()\nplanar_geometry.set_shell(gap['shell'])"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "check",
    "local_header_href": "#check",
    "chunk_text": "# check\n\nprint(surface.tostring())\n</pre>\n\nResult:\n\n<pre class=\"prettyprint\">\n&lt;Surface xmlns=\"http://www.gbxml.org/schema\" id=\"f20a7dbc-94d5-43ee-bf64-748c3e61658b\"&gt;\n  &lt;AdjacentSpaceId spaceIdRef=\"aim2197\"/&gt;\n  &lt;PlanarGeometry&gt;\n    &lt;PolyLoop&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;72.2287629&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;-0.3141381&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;0.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;72.2287629&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;-0.4999998&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;0.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;72.0986211&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;-0.4999998&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;0.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n    &lt;/PolyLoop&gt;\n  &lt;/PlanarGeometry&gt;\n&lt;/Surface&gt;\n</pre>\n\n####<a name=\"2.5\"></a> Second Gap\n\nSecond gap:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "print gap",
    "local_header_href": "#print-gap",
    "chunk_text": "# print gap\n\ngap=gaps[1]\ngap\n</pre>\n\nResult:\n\n<pre class=\"prettyprint\">\n{'space_ids': ['aim2553', 'aim7413'],\n  'shell':\n    [(80.2291667, 14.5625, 10.0),\n    (80.0208333, 14.5625, 10.0),\n    (80.0208333, 16.020833, 10.0),\n    (80.2291667, 16.020833, 10.0),\n    (80.2291667, 14.5625, 10.0)]}\n</pre>\n\nFix:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "add Surface",
    "local_header_href": "#add-surface",
    "chunk_text": "# add Surface\n\n"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "surface element",
    "local_header_href": "#surface-element",
    "chunk_text": "# surface element\n\nsurface=gbxml.Campus.add_Surface(\n  id=str(uuid4()),\n  surfaceType=None, # to do\n  constructionIdRef=None, # to do\n  exposedToSun=None # to do\n  )"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "adjacent space id child element",
    "local_header_href": "#adjacent-space-id-child-element",
    "chunk_text": "# adjacent space id child element\n\nfor space_id in gap['space_ids']:\n  surface.add_AdjacentSpaceId(\n    spaceIdRef=space_id\n    )"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "planar geometry child element",
    "local_header_href": "#planar-geometry-child-element",
    "chunk_text": "# planar geometry child element\n\nplanar_geometry = surface.add_PlanarGeometry()\nplanar_geometry.set_shell(gap['shell'])"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "check",
    "local_header_href": "#check",
    "chunk_text": "# check\n\nprint(surface.tostring())\n</pre>\n\nResult:\n\n<pre class=\"prettyprint\">\n&lt;Surface xmlns=\"http://www.gbxml.org/schema\" id=\"407a76aa-3287-4b5e-ac62-0440fb629f72\"&gt;\n  &lt;AdjacentSpaceId spaceIdRef=\"aim2553\"/&gt;\n  &lt;AdjacentSpaceId spaceIdRef=\"aim7413\"/&gt;\n  &lt;PlanarGeometry&gt;\n    &lt;PolyLoop&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;80.2291667&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;14.5625&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;10.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;80.0208333&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;14.5625&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;10.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;80.0208333&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;16.020833&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;10.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;80.2291667&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;16.020833&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;10.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n    &lt;/PolyLoop&gt;\n  &lt;/PlanarGeometry&gt;\n&lt;/Surface&gt;\n</pre>\n\n####<a name=\"2.6\"></a> Third Gap\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "print gap",
    "local_header_href": "#print-gap",
    "chunk_text": "# print gap\n\ngap=gaps[2]\ngap\n</pre>\n\nResult:\n\n<pre class=\"prettyprint\">\n{'space_ids': ['aim6674'],\n  'shell':\n    [(72.2287629, -0.4999998, 10.0),\n    (72.2287629, -0.3141381, 10.0),\n    (72.0986211, -0.4999998, 10.0),\n    (72.2287629, -0.4999998, 10.0)]}\n</pre>\n\nFix:\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "add Surface",
    "local_header_href": "#add-surface",
    "chunk_text": "# add Surface\n\n"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "surface element",
    "local_header_href": "#surface-element",
    "chunk_text": "# surface element\n\nsurface=gbxml.Campus.add_Surface(\n  id=str(uuid4()),\n  surfaceType=None, # to do\n  constructionIdRef=None, # to do\n  exposedToSun=None # to do\n  )"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "adjacent space id child element",
    "local_header_href": "#adjacent-space-id-child-element",
    "chunk_text": "# adjacent space id child element\n\nfor space_id in gap['space_ids']:\n  surface.add_AdjacentSpaceId(\n    spaceIdRef=space_id\n    )"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "planar geometry child element",
    "local_header_href": "#planar-geometry-child-element",
    "chunk_text": "# planar geometry child element\n\nplanar_geometry = surface.add_PlanarGeometry()\nplanar_geometry.set_shell(gap['shell'])"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "check",
    "local_header_href": "#check",
    "chunk_text": "# check\n\nprint(surface.tostring())\n</pre>\n\nResult:\n\n<pre class=\"prettyprint\">\n&lt;Surface xmlns=\"http://www.gbxml.org/schema\" id=\"96ad28f6-56fb-42b8-94d0-93c73d398866\"&gt;\n  &lt;AdjacentSpaceId spaceIdRef=\"aim6674\"/&gt;\n  &lt;PlanarGeometry&gt;\n    &lt;PolyLoop&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;72.2287629&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;-0.4999998&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;10.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;72.2287629&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;-0.3141381&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;10.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n      &lt;CartesianPoint&gt;\n        &lt;Coordinate&gt;72.0986211&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;-0.4999998&lt;/Coordinate&gt;\n        &lt;Coordinate&gt;10.0&lt;/Coordinate&gt;\n      &lt;/CartesianPoint&gt;\n    &lt;/PolyLoop&gt;\n  &lt;/PlanarGeometry&gt;\n&lt;/Surface&gt;\n</pre>\n\n####<a name=\"2.7\"></a> Verify Waterproof\n\nRecheck gaps in surfaces of building; there should now be no gaps.\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "identify gaps in surfaces of building",
    "local_header_href": "#identify-gaps-in-surfaces-of-building",
    "chunk_text": "# identify gaps in surfaces of building\n\ngaps=gbxml.Campus.Building.get_gaps_in_surfaces()\ngaps\n</pre>\n\nResult:\n\n<pre class=\"prettyprint\">\n[]\n</pre>\n\n####<a name=\"2.8\"></a> Save Model\n\nSave the updated gbxml file.\n\n<pre class=\"prettyprint\">"
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "writes the gbXML etree to a local file",
    "local_header_href": "#writes-the-gbxml-etree-to-a-local-file",
    "chunk_text": "# writes the gbXML etree to a local file\n\ntree.write('23-013 WH Swan Hill_Mass_23-08-30-UPDATED.xml', pretty_print=True)\n</pre>\n\n####<a name=\"2.9\"></a> Low Precision and Sliver Area Threshold\n\nRegarding:\n\n> ... issues with gaps in the building geometry caused by the relatively low precision used by Revit when tessellating surfaces.\n\nBased on experience over time at Ripcord, 'low precision' appears directly related to an area threshold rather than a length threshold.\nWhat might be considered 'sliver' surfaces export OK.\nBut once 'sliver' surfaces fall under the area threshold, whatever it is, the surface is not exported.\n\nIt is likely that direct control of the area threshold would offer operators relief.\nInability to control the area threshold creates a level of operator compensation that likely compels most to abandon value added analytical tasks.\n\nMany thanks again to Jake for this extremely powerful solution and\nhis [beautiful documentation](doc/gbxml_small_surface_solution_whole_building.pdf)."
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "LLaVA Large Language and Vision Assistant",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> LLaVA Large Language and Vision Assistant\n\nThe [LLaVA Large Language and Vision Assistant](https://llava.hliu.cc/) is\nopen source with a non-commercial license and can be run locally with decent enough hardware.\nNeeds linux and an rtx.\nLike Google Glass but more helpful perhaps.\nIdentify plants, tools in a workspace, even run basic support, e.g., provide help on where to click on the computer screen etc.\nPresumably someone will soon train a commercial-allowed equivalent."
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "Moonvalley Text to Video",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Moonvalley Text to Video\n\n[Moonvalley](https://moonvalley.ai) is a text-to-video startup\n($36M in funding so far, and they call themselves ‘lean’):\n\n> Animate your ideas... a machine learning model that can create visually stunning, high definition videos and animation from simple text prompts."
  },
  {
    "original_filename": "2011_xgbxml_fix_gap",
    "header_text": "DETR Model Detects Objects in Images",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> DETR Model Detects Objects in Images\n\nDid you know that you could run neural networks entirely in the browser without contacting a server?\n\nThe latest StackOverflow newsletter pointed me to a fun demo that shows you how.\nI uploaded a picture and tested it.\nUnfortunately, I lost the link and cannot find it anymore.\nAll I have now is the note I made of the underlying tool, and the result of running it on a photo I had at hand:\n\n- DETR (End-to-End Object Detection) model with ResNet-50 backbone\n\nI provided it with a picture of me eating churros ([^](/Users/jta/Pictures/2023/2023-10-10_garnatilla/16.jpg)) and\nit rapidly (in a handful of seconds) identified the following objects:\n\n<center>\n<img src=\"img/jeremy_eating_churros.png\" alt=\"Jeremy eating churros\" title=\"Jeremy eating churros\" width=\"600\"/>\n</center>\n\nI find that pretty impressive.\n\nExciting times... oh, dear, and deeply troubling, too... thinking of all the conflicts currently blooming..."
  }
]