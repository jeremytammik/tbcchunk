[
  {
    "original_filename": "1960_27k_instances",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n  \n- Forge hackathon\n  https://www.keanw.com/2022/08/register-today-for-this-years-forge-hackathon.html\n  \n- forge ifc exporter\n  Eason Kang updated his IFC exporter addin.\n  Now it supports user defined property sets and the new JSON schema from Revit IFC repo\n  You can find it here:\n  https://github.com/yiskang/forge-revit-ifc-exporter-appbundle\n\n- create 27k instances:\n  create_27k_instances.png\n  Paolo Serra\n  Hi, I have a customer that needs to create 27000+ FamilyInstances in a Revit Document, the performance of Document.Create.NewFamilyInstance(XYZ, FamilySymbol, StructuralType) degrades from 190 FamilyInstances / sec to 4 FamilyInstances / sec over the course of the execution (more than 1.5h). The process memory maxes at 1.5GB on my machine. Are there any recommendations on how to improve the performance? I was thinking that splitting the task into chunks of not more than 200 FamilyInstances might produce some benefits but I'm wondering if the time required to commit and start the transactions would erode them. Any advice is much appreciated. (edited) \n  Scott Conover\n  we used to have batch creation routines for FamilyInstances.  But those were only needed because the API used to regenerate after nearly every model change, and this could be much less performant when not necessary.  So when we switched those became unneeded and were removed (mostly, I see some remnants but not useful ones).\n  Some of the problems I suspect relate to adding 27000+ expanded elements.  There is no way to unexpand the elements in memory once they are expanded.   If this is a batch/non-visible process maybe saving/closing the model and reopening periodically might help with the overall performance and memory consumption?   If the model is visible this might be disruptive to the user.\n  Actually, we do still have a routine in place, NewFamilyInstances2() - horrible name - takes a collection of family instance creation data objects.  I suspect it won't perform any better than individual calls, but perhaps...\n  Paolo Serra\n  I'll give it a go and see if produces any better results, I'll let you now. Thank you all for your prompt response\n  Jacob Small\n  If it's a regeneration issue perhaps placing empty families first to reduce (if not remove) the regeneration time, then swapping for the family you want to use?\n  Paolo Serra\n  I used the NewFamilyInstances2() in batches of 200, without committing the transaction, and it was able to generate the families in 4:48 seconds, very promising. Now I need to see how it handles updating the parameters of the instances, would be nice to have a similar method (edited) \n  Paolo Serra\n  @Jacob Small  FYI regeneration is not an issue for now but I'll keep your suggestion in case it becomes a problem, thanks\n  Paolo Serra\n  with further optimization on the logic the instances went down to about 22000 and even setting 3/4 parameters from Excel on each instance and running interpolations takes not more than 3.5 minutes, that is a great result.\n  Scott Conover\n  Now I'm wondering what type of optimizations are in that NewFamilyInstances2() method.  I thought it was just trying to avoid excess regenerations...\n  Paolo Serra\n  they basically want to create a Voxel representation of the soil based on boreholes samples, if there is some kind of vectorization happening in NewFamilyInstances2() it would be nice to have a similar approach to edit parameters in bulk\n  image.png\n  Tamas Badics\n  Looks like NewFamilyInstance() commits a subtransaction for each call. That may be the main reason why it is much slower than the batch NewFamilyInstance2() method. Still it may be worth debugging fully.\n  Rahul Bhobe\n  Is the Revit model generally slow after having placed so many instances or only the act of placing the instances? If the model in general slow, does closing the file and opening it improves the performance? Is there a sample revit file for the image you posted?\n\n- Set Parameter to Vary by Group Instance\n  https://forum.dynamobim.com/t/set-parameter-to-vary-by-group-instance/79882\n  Mark.Ackerley\n\n- grammarly\n\ntwitter:\n\nA Forge hackathon coming up, IFC property sets, NewFamilyInstances2 creates 27000 instances in bulk and parameters that vary by group instance in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/bulkinstances\n\nToday, we talk about Forge, IFC, family instance creation in bulk, parameters that vary by group instance and a handy spell checker\n&ndash; Forge hackathon\n&ndash; Forge IFC exporter\n&ndash; NewFamilyInstances2 creates 27000 instances\n&ndash; Set parameter to vary by group instance\n&ndash; AI-enhanced web-based spell checker...\n\nlinkedin:\n\nA Forge hackathon coming up, IFC property sets, NewFamilyInstances2 creates 27000 instances in bulk and parameters that vary by group instance in the #RevitAPI\n\nhttps://autode.sk/bulkinstances\n\nToday, we talk about Forge, IFC, family instance creation in bulk, parameters that vary by group instance and a handy spell checker:\n\n- Forge hackathon\n- Forge IFC exporter\n- NewFamilyInstances2 creates 27000 instances\n- Set parameter to vary by group instance\n- AI-enhanced web-based spell checker...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n<pre class=\"code\">\n</pre>\n\n-->"
  },
  {
    "original_filename": "1960_27k_instances",
    "header_text": "IFC Property Set, Bulk Instances and Vary by Group",
    "local_header_href": "#ifc-property-set-bulk-instances-and-vary-by-group",
    "chunk_text": "### IFC Property Set, Bulk Instances and Vary by Group\n\nToday, we talk about Forge, IFC, family instance creation in bulk, parameters that vary by group instance and a handy spell checker:\n\n- [Forge hackathon](#2)\n- [Forge IFC exporter](#3)\n- [NewFamilyInstances2 creates 27000 instances](#4)\n- [Set parameter to vary by group instance](#5)\n- [AI-enhanced web-based spell checker](#6)"
  },
  {
    "original_filename": "1960_27k_instances",
    "header_text": "Forge Hackathon",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Forge Hackathon\n\n[Registration is open](https://forge.autodesk.com/hackathon) for \nthe [Forge Hackathon 2022](https://forge.autodesk.com/blog/save-date-2022-forge-hackathon),\nbeing held virtually from September 19-23.\n\nPrize categories:\n\n- You had me at 3D game\n- Show me the Data!\n- I feel the need, the need for Digital Twin\n- Task automation is a state of mind\n- Thereâ€™s no place like ACC\n\nJudging criteria:\n\n- Innovation\n- Elegance\n- Business problem solved\n- Progress made during the week\n- Depth of Forge use\n- Wow factor\n\nFor further details, please refer to the [Forge Hackathon 2022 blog post](https://forge.autodesk.com/blog/save-date-2022-forge-hackathon).\n\n<center>\n<img src=\"img/forge_hackathon_2022.jpg\" alt=\"Forge Hackathon 2022\" title=\"Forge Hackathon 2022\" width=\"400\"/> <!-- 1200 x 700 -->\n</center>"
  },
  {
    "original_filename": "1960_27k_instances",
    "header_text": "Forge IFC Exporter",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Forge IFC Exporter\n\nEason Kang updated his IFC exporter add-in to now support user defined property sets and the new JSON schema from the Revit IFC repository.\nCheck it out in\nthe [forge-revit-ifc-exporter-appbundle GitHub repo](https://github.com/yiskang/forge-revit-ifc-exporter-appbundle)."
  },
  {
    "original_filename": "1960_27k_instances",
    "header_text": "NewFamilyInstances2 Can Create 27000 Instances",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> NewFamilyInstances2 Can Create 27000 Instances\n\nHere are some useful and exciting notes from an internal discussion on performance issues creating 27000 family instances:\n\n**Question:** I need to create 27000+ FamilyInstances in a Revit Document.\n\nHowever, this takes more than 1.5 hours, because the performance of *Document.Create.NewFamilyInstance(XYZ, FamilySymbol, StructuralType)* degrades from 190 FamilyInstances / sec to 4 FamilyInstances / sec over the course of the execution.\nThe process memory maxes at 1.5 GB on my machine.\nAre there any recommendations on how to improve the performance?\nI was thinking that splitting the task into chunks of not more than 200 FamilyInstances might produce some benefits but I'm wondering if the time required to commit and start the transactions would erode them. \n\n**Answer:** We used to have batch creation routines for FamilyInstances.\nBack then, those were needed, because the API used to regenerate after nearly every model change, and this could be much less performant when not necessary.\nSo, when we switched, those became less important and were mostly removed.\nSome of the problems I suspect relate to adding 27000+ expanded elements.\nThere is no way to unexpand the elements in memory once they are expanded.\nIf this is a batch/non-visible process, maybe saving/closing the model and reopening periodically might help with the overall performance and memory consumption?\nIf the model is visible, this might be disruptive to the user.\n\nActually, we do still have one routine in place, `NewFamilyInstances2` &ndash; horrible name &ndash; takes a collection of family instance creation data objects. \n\nIf it's a regeneration issue, perhaps placing empty families first to reduce (if not remove) the regeneration time, then swapping for the family you want to use?\n\n**Response:** Regeneration is not an issue for now, but I'll keep that suggestion in mind in case it becomes a problem, thanks.\n\nI used `NewFamilyInstances2` in batches of 200, without committing the transaction, and it was able to generate the families in 4:48 seconds, very promising.\nNow I need to see how it handles updating the parameters of the instances; it would be nice to have a similar method for that.\n\nwith further optimization on the logic, the instances went down to about 22000 and even setting 3 or 4 parameters from Excel on each instance and running interpolations takes less than 3.5 minutes, that is a great result.\n\n**Answer:** Now I'm wondering what type of optimizations are in that `NewFamilyInstances2` method.\nI thought it was just trying to avoid excess regenerations...\n\n**Response:** They display a Voxel representation of soil based on boreholes samples; if there is some kind of vectorization happening in `NewFamilyInstances2`, it would be nice to have a similar approach to edit parameters in bulk.\n\n<center>\n<img src=\"img/create_27k_instances_1280.png\" alt=\"Creating many instances\" title=\"Creating many instances\" width=\"800\"/> <!-- 1280 x 773 -->\n</center>\n\n**Answer:** Looks like `NewFamilyInstance` commits a subtransaction for each call.\nThat may be the main reason why it is much slower than the batch `NewFamilyInstance2` method."
  },
  {
    "original_filename": "1960_27k_instances",
    "header_text": "Set Parameter to Vary by Group Instance",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Set Parameter to Vary by Group Instance\n\nMark Ackerley demonstrates how\nto [set parameter to vary by group instance](https://forum.dynamobim.com/t/set-parameter-to-vary-by-group-instance) in\nthe [Dynamo BIM forum](https://forum.dynamobim.com), saying:\n\n> Might be useful to peopleâ€¦\n\n> This is limited by the types of parameter which are allowed to vary by group instance, this does not include Yes/No or Length.\n\n> Thanks to @jeremytammik and anyone else who has done work in this area.\n\n<center>\n<img src=\"img/set_param_vary_by_group_inst.png\" alt=\"Set parameter to vary by group instance\" title=\"Set parameter to vary by group instance\" width=\"551\" height=\"365\"/> <!-- 551 x 365 -->\n</center>\n\n<pre class=\"prettyprint\">\nimport clr\n\nimport System\nfrom System import *\n\nclr.AddReference('RevitServices')\nimport RevitServices\nfrom RevitServices.Persistence import DocumentManager\nfrom RevitServices.Transactions import TransactionManager\nfrom System.Collections.Generic import *\n\nclr.AddReference('RevitAPI')\nimport Autodesk\nfrom Autodesk.Revit.DB import *\n\ndoc = DocumentManager.Instance.CurrentDBDocument"
  },
  {
    "original_filename": "1960_27k_instances",
    "header_text": "The inputs to this node will be stored as a list in the IN variables.",
    "local_header_href": "#the-inputs-to-this-node-will-be-stored-as-a-list-in-the-in-variables",
    "chunk_text": "# The inputs to this node will be stored as a list in the IN variables.\n\ndataEnteringNode = IN\nkeyWord = IN[0]\n\ndef isInstance(definition_Name):\n\t#for some reason, returning the name of the Key in the bindings iterator\n\t#fails sometimes and says item can't be managed? so then restart Revit\n\t\n\t#the list of parameters in doc.ParameterBindings is only the ones which are\n\t#added in the Project Parameters box, so you're not getting ones which\n\t#just exist in families\n\t\n\t#this is the only way to see if a parameter is 'bound' to the doc as\n\t#a type or an instance parameter\n\t\n\tbindings = doc.ParameterBindings\n\tit = doc.ParameterBindings.ForwardIterator()\n\tdefs = []\n\tvalue = False\n\twhile(it.MoveNext()):\n\t\td = it.Key\n\t\tb = it.Current\n\t\tif d.Name == definition_Name and b.GetType() == InstanceBinding:\n\t\t\tvalue = True\n\t\t\tbreak\n\treturn value\t\n\ndef canBeEditableInGroup(parameter):\n  parameter_Type = parameter.ParameterType\n  \n  variable_Parameter_Types_List = [ParameterType.Text, \n    ParameterType.Area, \n    ParameterType.Volume, \n    ParameterType.Currency, \n    ParameterType.MassDensity, \n    ParameterType.URL, \n    ParameterType.Material]\n  \n  if parameter_Type in variable_Parameter_Types_List:\n    return True\n  else:\n    return False"
  },
  {
    "original_filename": "1960_27k_instances",
    "header_text": "Place your code below this line",
    "local_header_href": "#place-your-code-below-this-line",
    "chunk_text": "# Place your code below this line\n\noutput = []\n#catch anything that doesn't work and output the error\nsPs = FilteredElementCollector(doc).OfClass(SharedParameterElement)\n\ntry:\n  sPs = FilteredElementCollector(doc).OfClass(SharedParameterElement)\n  errorReport = None \n\n  #begin transaction\n  TransactionManager.Instance.EnsureInTransaction(doc)\n  for sP in sPs:\n    #we are interested in the shared parameter 'definition'\n    #the 'definition' is a container of the shared parameter\n    #that holds the information about whether\n    #the parameter is variable by instance in a group\n    \n    #we only want the shared parameters with our key word\n    #we only want them if they are a type which can vary\n    #we only want them if they are not already true\n    #we only want them if they are instance parameters\n    \n    definition = sP.GetDefinition()  \n\n    varies_Query = definition.VariesAcrossGroups\n    \n\n    if keyWord in definition.Name and canBeEditableInGroup(definition) and isInstance(definition.Name) and varies_Query != True:\n      try:\n        definition.SetAllowVaryBetweenGroups(doc, True)\n        output.append(\"Success: \" + definition.Name + \" can now vary across group instances\")\n      except:\n        import traceback\n        errorReport_SP = traceback.format_exc()\n        exception = ' does not support the specified value of allowVaryBetweenGroups'        \n        if exception in errorReport_SP:\n          output.append(\"Failure: \" + definition.Name + \"cannot be set to vary between groups\")\n        else:\n          output.append([definition.Name, errorReport_SP])\n\n  #finish transaction\n  TransactionManager.Instance.TransactionTaskDone()\n\n#Assign your output to the OUT variable.\nexcept:\n  import traceback\n  errorReport = traceback.format_exc()\n\nif errorReport == None:\n  OUT = output\n\nelse:\n  OUT = errorReport\n\nOUT = output\n</pre>\n\nMany thanks to Mark for sharing this useful solution!"
  },
  {
    "original_filename": "1960_27k_instances",
    "header_text": "AI-Enhanced Web-Based Spell Checker",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> AI-Enhanced Web-Based Spell Checker\n\nI recently installed\nthe [Grammarly](https://www.grammarly.com) integrated\nAI-enhanced spell and grammar checking including advanced writing support such as suggestions on better wording for clarity.\nIt works in web browser edit boxes and also in my email editor.\nIt made several suggestions that improved my wording and I am quite impressed, with better suggestions than any other tools I ever tried in the past...\n\nSomebody else suggested\nthe [websiteplanet Online Spell Checker](https://www.websiteplanet.com/webtools/spell-checker),\nbut I have not looked at all at that myself.\n\nOn the topic of AI...\n\n<p class=\"quote\">Are you concerned about the increase in artificial intelligence?\n<br/>I am more concerned about the decrease in real intelligence.</p>"
  }
]