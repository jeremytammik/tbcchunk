[
  {
    "original_filename": "0813_titbits",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0813_titbits",
    "header_text": "Titbits of the Week",
    "local_header_href": "#titbits-of-the-week",
    "chunk_text": "<h3>Titbits of the Week</h3><p>Here are a couple of things to round off this warm week (a least here) that I think might be of interest to us all:\n\n<ul>\n<li><a href=\"#2\">Identical document GUIDs</a>\n<li><a href=\"#3\">Journal file path</a>\n<li><a href=\"#4\">Opening a background document</a>\n<li><a href=\"#5\">Creating a perspective view</a>\n</li></li></li></li></ul>\n<a name=\"2\"></a>\n<!-- Miroslav Schonauer Re: How do you access a model's GUID or UniqueId using the Revit API? -->\n<h4>Identical Document GUIDs</h4>\n<p>Every Revit document now has a GUID, which can be retrieved from the UniqueId property on the ProjectInformation singleton class.\n\n<p>It would be very useful if that could be used to reliably and uniquely distinguish and identify documents.\n\n<p><strong>Question:</strong> Unfortunately, under certain circumstances, different documents sometimes have the same GUID.\n\n<p>How can that be?\n\n<p><strong>Answer:</strong> Here are some possible treatments of the documents that could cause this:\n\n<ul>\n<li>They were 'saved as'.\n<li>They were created from the same template.\n<li>They were copied as RVT files using the underlying operating system functionality.\n</li></li></li></ul>\n<p>This is actually pretty obvious, when you think of it, and as-designed. \nThe same behaviour is exhibited by any conceivable unique id.\n\n<p>This is not really a Revit API problem, either. \nThe behaviour would be the same with any other file type.\n\n<p>If you need to identify documents uniquely, one possible thing to do is to add a hidden shared parameter or some extensible storage data to the project info element and store a custom GUID there yourself.\nEven in this case, the same problem will occur unless you are in complete control of each and every document to start with. \n\n<p>If you require a document management solution, you can have a look at \n\n<a href=\"http://www.autodesk.com/vault\">\nVault</a>  :-)\n\n\n<a name=\"3\"></a>\n<!-- Dante van Wettum Re: Journal folder in API -->\n<h4>Journal File Path</h4>\n<p><strong>Question:</strong> Is there a way in the API to retrieve the path to the journals folder?\n\n<p>This is the default location for Revit Structure:\n\n<ul>\n<li>C:\\Users\\USERNAME\\AppData\\Local\\Autodesk\\Revit\\Autodesk Revit Structure 2013\\Journals\n</li></ul>\n<p>Note that this is not the location in the same folder hierarchy as the Revit executable Revit.exe file.\n\n<p>I would like to create a tool that handles deletion of old journal files, to recover the wasted space.\n\n<p><strong>Answer:</strong> I ended up using this for now:\n\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( RevitProduct product <span class=\"blue\">in</span> \n    RevitProductUtility\n    .GetAllInstalledRevitProducts() )\n  {\n    <span class=\"blue\">string</span> s = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( product.Version == RevitVersion.Revit2013 )\n    {\n      <span class=\"blue\">string</span> s = product.Product.ToString();\n \n      s = s.Replace( <span class=\"maroon\">\"Revit\"</span>, <span class=\"maroon\">\"\"</span> );\n \n      <span class=\"blue\">if</span>( 0 &lt; s.Length ) \n      {\n        s += <span class=\"maroon\">\" \"</span>;\n      }\n \n      s = <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0}\\\\Autodesk\\\\Revit\\\\\"</span>\n        + <span class=\"maroon\">\"Autodesk Revit {1}2013\\\\Journals\\\\\"</span>,\n        <span class=\"teal\">Environment</span>.GetFolderPath(\n          <span class=\"teal\">Environment</span>.<span class=\"teal\">SpecialFolder</span>\n          .LocalApplicationData ),\n        s );\n    }\n  }\n</pre>\n<!-- <p>This has not been tested with Revit MEP or the design suite. -->\n<p>You can use standard .NET functionality to check whether a path exists, e.g. File.Exists and Directory.Exists from the System.IO namespace.\n\n\n\n\n\n<a name=\"4\"></a>\n<!-- Martin Schmid, Steven Mycynek RE: Reading from a 'side' Database -->\n<h4>Opening a Background Document</h4>\n<p><strong>Question:</strong> Is it possible to open a 'background' document, also known as a 'side database'?\n\n<p>For example, consider the following scenario:\n\n<ol>\n<li>Have a model open, e.g. A.rvt.\n<li>Open a second model, e.g. B.rvt, with no views open. As far as the user is concerned, there is no sign of the second model being open.\n<li>Read information from B.rvt, and do something interesting with the information in A.rvt.\n<li>Maybe even modify B.rvt?\n</li></li></li></li></ol>\n<p>A simple example might do something like determine from B.rvt that it contains an instance of a certain family F. \nIf F does not exist in A.rvt, it would load it in, essentially copying it from B.rvt, without the user ever seeing or knowing that B.rvt had been opened.\n\n<p><strong>Answer:</strong> Sure, this can easily be achieved.\n\n<p>Simply use Application.OpenDocumentFile, as opposed to UIApplication.OpenAndActivateDocument. \n\n<p>The former method will open the document at the DB-level without creating a UI document frame, which is just what you want.   \nYou could then call Document.LoadFamily to copy the family.  \nJust be sure to close the DB document when you are done.\n\n\n\n\n<a name=\"5\"></a>\n<!-- Miroslav Schonauer, Steven Mycynek RE: View3D: Create as or change to *Perspective*? -->\n<h4>Creating a Perspective View</h4>\n<p><strong>Question:</strong> Is it possible to programmatically create a <b>perspective</b> View3D?\n\n<p><strong>Answer:</strong> Sure.\nUse the static View3D.CreatePerspective method.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0813_titbits",
    "header_text": "Identical Document GUIDs",
    "local_header_href": "#identical-document-guids",
    "chunk_text": "<h4>Identical Document GUIDs</h4><p>Every Revit document now has a GUID, which can be retrieved from the UniqueId property on the ProjectInformation singleton class.\n\n<p>It would be very useful if that could be used to reliably and uniquely distinguish and identify documents.\n\n<p><strong>Question:</strong> Unfortunately, under certain circumstances, different documents sometimes have the same GUID.\n\n<p>How can that be?\n\n<p><strong>Answer:</strong> Here are some possible treatments of the documents that could cause this:\n\n<ul>\n<li>They were 'saved as'.\n<li>They were created from the same template.\n<li>They were copied as RVT files using the underlying operating system functionality.\n</li></li></li></ul>\n<p>This is actually pretty obvious, when you think of it, and as-designed. \nThe same behaviour is exhibited by any conceivable unique id.\n\n<p>This is not really a Revit API problem, either. \nThe behaviour would be the same with any other file type.\n\n<p>If you need to identify documents uniquely, one possible thing to do is to add a hidden shared parameter or some extensible storage data to the project info element and store a custom GUID there yourself.\nEven in this case, the same problem will occur unless you are in complete control of each and every document to start with. \n\n<p>If you require a document management solution, you can have a look at \n\n<a href=\"http://www.autodesk.com/vault\">\nVault</a>  :-)\n\n\n<a name=\"3\"></a>\n<!-- Dante van Wettum Re: Journal folder in API -->\n<h4>Journal File Path</h4>\n<p><strong>Question:</strong> Is there a way in the API to retrieve the path to the journals folder?\n\n<p>This is the default location for Revit Structure:\n\n<ul>\n<li>C:\\Users\\USERNAME\\AppData\\Local\\Autodesk\\Revit\\Autodesk Revit Structure 2013\\Journals\n</li></ul>\n<p>Note that this is not the location in the same folder hierarchy as the Revit executable Revit.exe file.\n\n<p>I would like to create a tool that handles deletion of old journal files, to recover the wasted space.\n\n<p><strong>Answer:</strong> I ended up using this for now:\n\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( RevitProduct product <span class=\"blue\">in</span> \n    RevitProductUtility\n    .GetAllInstalledRevitProducts() )\n  {\n    <span class=\"blue\">string</span> s = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( product.Version == RevitVersion.Revit2013 )\n    {\n      <span class=\"blue\">string</span> s = product.Product.ToString();\n \n      s = s.Replace( <span class=\"maroon\">\"Revit\"</span>, <span class=\"maroon\">\"\"</span> );\n \n      <span class=\"blue\">if</span>( 0 &lt; s.Length ) \n      {\n        s += <span class=\"maroon\">\" \"</span>;\n      }\n \n      s = <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0}\\\\Autodesk\\\\Revit\\\\\"</span>\n        + <span class=\"maroon\">\"Autodesk Revit {1}2013\\\\Journals\\\\\"</span>,\n        <span class=\"teal\">Environment</span>.GetFolderPath(\n          <span class=\"teal\">Environment</span>.<span class=\"teal\">SpecialFolder</span>\n          .LocalApplicationData ),\n        s );\n    }\n  }\n</pre>\n<!-- <p>This has not been tested with Revit MEP or the design suite. -->\n<p>You can use standard .NET functionality to check whether a path exists, e.g. File.Exists and Directory.Exists from the System.IO namespace.\n\n\n\n\n\n<a name=\"4\"></a>\n<!-- Martin Schmid, Steven Mycynek RE: Reading from a 'side' Database -->\n<h4>Opening a Background Document</h4>\n<p><strong>Question:</strong> Is it possible to open a 'background' document, also known as a 'side database'?\n\n<p>For example, consider the following scenario:\n\n<ol>\n<li>Have a model open, e.g. A.rvt.\n<li>Open a second model, e.g. B.rvt, with no views open. As far as the user is concerned, there is no sign of the second model being open.\n<li>Read information from B.rvt, and do something interesting with the information in A.rvt.\n<li>Maybe even modify B.rvt?\n</li></li></li></li></ol>\n<p>A simple example might do something like determine from B.rvt that it contains an instance of a certain family F. \nIf F does not exist in A.rvt, it would load it in, essentially copying it from B.rvt, without the user ever seeing or knowing that B.rvt had been opened.\n\n<p><strong>Answer:</strong> Sure, this can easily be achieved.\n\n<p>Simply use Application.OpenDocumentFile, as opposed to UIApplication.OpenAndActivateDocument. \n\n<p>The former method will open the document at the DB-level without creating a UI document frame, which is just what you want.   \nYou could then call Document.LoadFamily to copy the family.  \nJust be sure to close the DB document when you are done.\n\n\n\n\n<a name=\"5\"></a>\n<!-- Miroslav Schonauer, Steven Mycynek RE: View3D: Create as or change to *Perspective*? -->\n<h4>Creating a Perspective View</h4>\n<p><strong>Question:</strong> Is it possible to programmatically create a <b>perspective</b> View3D?\n\n<p><strong>Answer:</strong> Sure.\nUse the static View3D.CreatePerspective method.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0813_titbits",
    "header_text": "Journal File Path",
    "local_header_href": "#journal-file-path",
    "chunk_text": "<h4>Journal File Path</h4><p><strong>Question:</strong> Is there a way in the API to retrieve the path to the journals folder?\n\n<p>This is the default location for Revit Structure:\n\n<ul>\n<li>C:\\Users\\USERNAME\\AppData\\Local\\Autodesk\\Revit\\Autodesk Revit Structure 2013\\Journals\n</li></ul>\n<p>Note that this is not the location in the same folder hierarchy as the Revit executable Revit.exe file.\n\n<p>I would like to create a tool that handles deletion of old journal files, to recover the wasted space.\n\n<p><strong>Answer:</strong> I ended up using this for now:\n\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( RevitProduct product <span class=\"blue\">in</span> \n    RevitProductUtility\n    .GetAllInstalledRevitProducts() )\n  {\n    <span class=\"blue\">string</span> s = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( product.Version == RevitVersion.Revit2013 )\n    {\n      <span class=\"blue\">string</span> s = product.Product.ToString();\n \n      s = s.Replace( <span class=\"maroon\">\"Revit\"</span>, <span class=\"maroon\">\"\"</span> );\n \n      <span class=\"blue\">if</span>( 0 &lt; s.Length ) \n      {\n        s += <span class=\"maroon\">\" \"</span>;\n      }\n \n      s = <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0}\\\\Autodesk\\\\Revit\\\\\"</span>\n        + <span class=\"maroon\">\"Autodesk Revit {1}2013\\\\Journals\\\\\"</span>,\n        <span class=\"teal\">Environment</span>.GetFolderPath(\n          <span class=\"teal\">Environment</span>.<span class=\"teal\">SpecialFolder</span>\n          .LocalApplicationData ),\n        s );\n    }\n  }\n</pre>\n<!-- <p>This has not been tested with Revit MEP or the design suite. -->\n<p>You can use standard .NET functionality to check whether a path exists, e.g. File.Exists and Directory.Exists from the System.IO namespace.\n\n\n\n\n\n<a name=\"4\"></a>\n<!-- Martin Schmid, Steven Mycynek RE: Reading from a 'side' Database -->\n<h4>Opening a Background Document</h4>\n<p><strong>Question:</strong> Is it possible to open a 'background' document, also known as a 'side database'?\n\n<p>For example, consider the following scenario:\n\n<ol>\n<li>Have a model open, e.g. A.rvt.\n<li>Open a second model, e.g. B.rvt, with no views open. As far as the user is concerned, there is no sign of the second model being open.\n<li>Read information from B.rvt, and do something interesting with the information in A.rvt.\n<li>Maybe even modify B.rvt?\n</li></li></li></li></ol>\n<p>A simple example might do something like determine from B.rvt that it contains an instance of a certain family F. \nIf F does not exist in A.rvt, it would load it in, essentially copying it from B.rvt, without the user ever seeing or knowing that B.rvt had been opened.\n\n<p><strong>Answer:</strong> Sure, this can easily be achieved.\n\n<p>Simply use Application.OpenDocumentFile, as opposed to UIApplication.OpenAndActivateDocument. \n\n<p>The former method will open the document at the DB-level without creating a UI document frame, which is just what you want.   \nYou could then call Document.LoadFamily to copy the family.  \nJust be sure to close the DB document when you are done.\n\n\n\n\n<a name=\"5\"></a>\n<!-- Miroslav Schonauer, Steven Mycynek RE: View3D: Create as or change to *Perspective*? -->\n<h4>Creating a Perspective View</h4>\n<p><strong>Question:</strong> Is it possible to programmatically create a <b>perspective</b> View3D?\n\n<p><strong>Answer:</strong> Sure.\nUse the static View3D.CreatePerspective method.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0813_titbits",
    "header_text": "Opening a Background Document",
    "local_header_href": "#opening-a-background-document",
    "chunk_text": "<h4>Opening a Background Document</h4><p><strong>Question:</strong> Is it possible to open a 'background' document, also known as a 'side database'?\n\n<p>For example, consider the following scenario:\n\n<ol>\n<li>Have a model open, e.g. A.rvt.\n<li>Open a second model, e.g. B.rvt, with no views open. As far as the user is concerned, there is no sign of the second model being open.\n<li>Read information from B.rvt, and do something interesting with the information in A.rvt.\n<li>Maybe even modify B.rvt?\n</li></li></li></li></ol>\n<p>A simple example might do something like determine from B.rvt that it contains an instance of a certain family F. \nIf F does not exist in A.rvt, it would load it in, essentially copying it from B.rvt, without the user ever seeing or knowing that B.rvt had been opened.\n\n<p><strong>Answer:</strong> Sure, this can easily be achieved.\n\n<p>Simply use Application.OpenDocumentFile, as opposed to UIApplication.OpenAndActivateDocument. \n\n<p>The former method will open the document at the DB-level without creating a UI document frame, which is just what you want.   \nYou could then call Document.LoadFamily to copy the family.  \nJust be sure to close the DB document when you are done.\n\n\n\n\n<a name=\"5\"></a>\n<!-- Miroslav Schonauer, Steven Mycynek RE: View3D: Create as or change to *Perspective*? -->\n<h4>Creating a Perspective View</h4>\n<p><strong>Question:</strong> Is it possible to programmatically create a <b>perspective</b> View3D?\n\n<p><strong>Answer:</strong> Sure.\nUse the static View3D.CreatePerspective method.\n\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0813_titbits",
    "header_text": "Creating a Perspective View",
    "local_header_href": "#creating-a-perspective-view",
    "chunk_text": "<h4>Creating a Perspective View</h4><p><strong>Question:</strong> Is it possible to programmatically create a <b>perspective</b> View3D?\n\n<p><strong>Answer:</strong> Sure.\nUse the static View3D.CreatePerspective method.\n\n</p></p>"
  }
]