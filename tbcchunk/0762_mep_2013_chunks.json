[
  {
    "original_filename": "0762_mep_2013",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0762_mep_2013",
    "header_text": "The Revit 2013 MEP API and External Services",
    "local_header_href": "#the-revit-2013-mep-api-and-external-services",
    "chunk_text": "<h3>The Revit 2013 MEP API and External Services</h3><p>I mentioned a few \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html#3\">\nMEP-specific enhancements</a> in \n\nthe \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/revit-2013-and-its-api.html\">\nRevit 2013 API</a>.\n\nTo recap, the enhancements include:\n\n<!--\n\nNew MEP properties and calculation functionality enhance the analysis and simulation functionality\n\nIn Revit MEP 2012, you can only define one single default elbow, tee, etc., which is rather limiting. In Revit 2013, however, numerous different setting for different materials and sizes are supported. One of the major MEP API additions provides access to the routing preferences, as demonstrated by the new Routing Preference Analysis SDK sample. Enhancements include programmatic selection of pipe sizes, materials, fitting types, calculation of pipe and duct friction factors, better handling of duct and pipe sections with the new MEPSection base class, handling of viscosity and density at specified temperatures, read and write access to spare circuit values, and retrieval of the localized user-visible display strings for enumeration values.\n\nNew physical properties include a new class ThermalProperties, an additional structural material element, structural and thermal material assets that can be shared, and the ability to indicate if thermal information is included in the gbXML export. \n\nA Light and Light Group API provides new classes to get and set photometric data, including initial color and intensity, loss factor, color filter and dimming color.\n\nThe new ReferenceIntersector class mentioned above provides simplified and more performant ray-cast selection of elements using a given point and direction, similar to the existing FindReferencesWithContextByDirection method, with additional support for filtering the output, e.g. to collect elements, meshes, edges, curves, and faces. \n\nArnost Lobel Re: external service examples?\nYes, the framework is there in 2013 and is fully functional.\nBut there are no in-house external services yet for which external servers could be written.\nAnd that is the reason we will not have any examples until 2014.\n\n-->\n<ul>\n<li>Access to routing preferences, selection of pipe sizes, materials, fitting types, and the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/new-revit-2013-sdk-samples.html#3\">\nRoutingPreferenceTools SDK sample</a> demonstrating its use\n\n<li>Pipe and duct friction factors\n<li>MEPSection base class for duct and pipe sections \n<li>Viscosity and density at specified temperatures, new FluidType and enhanced FluidTemperature classes\n<li>Read and write access to panel schedule spare circuit values\n<li>Access to localized user-visible display strings for enumeration values via new LabelUtils.GetLabelFor overloads\n<li>ConnectorProfileType and PartType enumeration changes\n<li>ConnectorElement changes in the family environment, and new static creation methods replacing the obsolete ones on the FamilyItemFactory class.\n<li>A new ThermalProperties class, thermal material assets, thermal information in gbXML\n<li>New calculation functionality and the <a href=\"#3\">external services framework</a>\n<li>MEP piping, system routing and centre line functionality\n<li>A new Light and Light Group API\n<li>ReferenceIntersector class\n</li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<p>For more information on these and many other Revit API enhancements, please refer to the What's New section of the Revit API help file RevitAPI.chm.\n\n<p>Here are some additional notes on the external services framework:\n\n\n<a name=\"3\"></a>\n<h4>External Services Framework</h4>\n<p>The new External Services framework wraps external service functionality, enabling certain services such as analysis or calculations to be encapsulated and replaced, providing a basis for future MEP calculations and structural code checking. \nThe following excerpt from the Revit API help file RevitAPI.chm description of the new ExternalService class provides a pretty good idea of its use:\n\n<p>This is a base class from which SingleServerService and MultiServerService classes are inherited. \nIt implements all basic methods, and the inherited classes add more specific methods. \nUse this base class to get information about a service and its servers, and the inherited classes to set or get active servers. \nFunctionality:\n\n<ul>\n<li>Add and remove a server to and from a service\n<li>Query information about a service\n<li>Access servers currently registered for a service\n<li>Get and set active server (or servers) for a service\n</li></li></li></li></ul>\n<p>Although the framework is in place and fully functional in Revit 2013, no in-house external services making use of external servers have yet been implemented.\nFor this reason, no examples of this framework have yet been provided.\n\n<p>The next thing I intend to do regarding Revit MEP is migrate my trusty old AdnRme sample and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/mep-sample-code-for-revit-2012.html\">\nMEP sample code for Revit 2012</a> to\n\nRevit 2013.\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0762_mep_2013",
    "header_text": "External Services Framework",
    "local_header_href": "#external-services-framework",
    "chunk_text": "<h4>External Services Framework</h4><p>The new External Services framework wraps external service functionality, enabling certain services such as analysis or calculations to be encapsulated and replaced, providing a basis for future MEP calculations and structural code checking. \nThe following excerpt from the Revit API help file RevitAPI.chm description of the new ExternalService class provides a pretty good idea of its use:\n\n<p>This is a base class from which SingleServerService and MultiServerService classes are inherited. \nIt implements all basic methods, and the inherited classes add more specific methods. \nUse this base class to get information about a service and its servers, and the inherited classes to set or get active servers. \nFunctionality:\n\n<ul>\n<li>Add and remove a server to and from a service\n<li>Query information about a service\n<li>Access servers currently registered for a service\n<li>Get and set active server (or servers) for a service\n</li></li></li></li></ul>\n<p>Although the framework is in place and fully functional in Revit 2013, no in-house external services making use of external servers have yet been implemented.\nFor this reason, no examples of this framework have yet been provided.\n\n<p>The next thing I intend to do regarding Revit MEP is migrate my trusty old AdnRme sample and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/mep-sample-code-for-revit-2012.html\">\nMEP sample code for Revit 2012</a> to\n\nRevit 2013.\n</p></p></p></p>"
  }
]