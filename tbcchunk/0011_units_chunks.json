[
  {
    "original_filename": "0011_units",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style type=\"text/css\">\n.green { color: green; }\n.blue { color: blue; }\n.gray { color: gray; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n</style>"
  },
  {
    "original_filename": "0011_units",
    "header_text": "Units",
    "local_header_href": "#units",
    "chunk_text": "<h3>Units</h3><p>In the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/selecting-all-w.html\">previous post</a>,\n\nwe noted that the area parameter for a wall had a numerical value of 283.65 on one hand, but a string representation of '26.352 m²' on the other. The reason for these two different values is that Revit internally works with a fixed set of database units for different measurement types. These internal database units cannot be changed. All raw database values obtained from attributes will always be returned and expected in database units. Some of the internal database length units are imperial. The database unit for length is feet, and areas are stored in square feet.\nThe units used are not the standardised\n\n<a href=\"http://nostalgia.wikipedia.org/wiki/SI_unit\">SI units</a>\n\naccording to the International System of Units SI.</p><p>Similarly, if we examine the thickness of a 200 mm wall, e.g. one using the system family 'Basic Wall' and the type 'Generic - 200.0 mm', its thickness is available in the type parameter 'width'. It appears to have the value 200 mm in the user interface, if set up to display metric length units. Looking at the actual value of the underlying parameter, however, returns a completely different number, something like 0.6561. 0.6561 feet is 0.6561 * 12 = 7.8732 inches, which corresponds to 7.8732 * 25.4 = 199.97928 millimetres.</p><p>The user interface settings affecting the display of units in Revit can be queried through the API. The ProjectUnit SDK sample demonstrates how to do this.\nThe units displayed in the user interface can be queried through the read-only Document.DisplayUnitSystem property. The Parameter.DisplayUnitType property determines how any individual parameter is displayed in the user interface. The DisplayUnitType enumeration lists all the supported display unit types.</p><p>It can sometimes be tricky to figure out exactly what units Revit is using internally, for instance when analysing things like point, line and area loads in Revit Structure.\nFor these loads, the units used are in terms of N and m, unlike other parameters and co-ordinates which use feet for all lengths.</p><p>The good news, and the main message of this post, is that you do not really have to care what units Revit is using internally. All you need to do is some little research to determine a valid conversion factor. You can enter the unit value for whatever you are interested in in the user interface, and then check what the API reports. It will always be in the same internal units. This can then be used as a conversion factor for that specific unit. It works consistently. Possibly you may refine this depending on the metric or imperial Revit setting, but the factors are the same and consistent.</p><p>So the simplest thing to do to determine the conversion factor to use is to set the parameter to 1 in the user interface and then observe the value returned by the API, which gives the conversion factor between the two.</p><p>I am appending a small utility class UnitConversion.cs which may be of use in this context, even if just to give you a first impression of how these issues may be handled. I am not saying that this is the optimal solution. It includes some useful constants and stems from the Midas Link Revit Structure sample application which is available including source code on the ADN web site. By the way, the updated MidasLink version for Revit 2009 has just been posted to ADN, in case you are interested. Please excuse the fact that the source code lines exceed the blog display width. To obtain and review the full source code, please simply copy and paste it to notepad or some other editor.</p><pre class=\"code\"><span class=\"green\">// (C) Copyright 2003-2007 by Autodesk, Inc.</span>\n<span class=\"green\">//</span>\n<span class=\"green\">// Permission to use, copy, modify, and distribute this software in</span>\n<span class=\"green\">// object code form for any purpose and without fee is hereby granted,</span>\n<span class=\"green\">// provided that the above copyright notice appears in all copies and</span>\n<span class=\"green\">// that both that copyright notice and the limited warranty and</span>\n<span class=\"green\">// restricted rights notice below appear in all supporting</span>\n<span class=\"green\">// documentation.</span>\n<span class=\"green\">//</span>\n<span class=\"green\">// AUTODESK PROVIDES THIS PROGRAM \"AS IS\" AND WITH ALL FAULTS.</span>\n<span class=\"green\">// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF</span>\n<span class=\"green\">// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE. AUTODESK, INC.</span>\n<span class=\"green\">// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE</span>\n<span class=\"green\">// UNINTERRUPTED OR ERROR FREE.</span>\n<span class=\"green\">//</span>\n<span class=\"green\">// Use, duplication, or disclosure by the U.S. Government is subject to</span>\n<span class=\"green\">// restrictions set forth in FAR 52.227-19 (Commercial Computer</span>\n<span class=\"green\">// Software - Restricted Rights) and DFAR 252.227-7013(c)(1)(ii)</span>\n<span class=\"green\">// (Rights in Technical Data and Computer Software), as applicable.</span>\n<span class=\"green\">//</span>\n \n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Text;\n<span class=\"blue\">using</span> System.Collections;\n<span class=\"blue\">using</span> System.Windows.Forms;\n<span class=\"blue\">using</span> System.Diagnostics;\n \n<span class=\"blue\">using</span> Autodesk.Revit;\n<span class=\"blue\">using</span> Autodesk.Revit.Elements;\n<span class=\"blue\">using</span> Autodesk.Revit.Enums;\n<span class=\"blue\">using</span> Autodesk.Revit.Parameters;\n \n<span class=\"blue\">namespace</span> Revit.MGT\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Unit conversion - convert values from standard units to given units.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">UnitConversionFactors</span>\n  {\n<span class=\"blue\">    #region</span> Class Member Variables\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Standard units</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">string</span> m_FromUnits;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Given units</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">string</span> m_ToUnits;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> true: conversion available for given units</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">bool</span> m_RatioSetUpSucceeded;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store length ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_LengthRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store point load ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_PointLoadRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store point load moment ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_PointLoadMomentRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store line load ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_LineLoadRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store line moment ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_LineMomentRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store area load ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_AreaLoadRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store stress ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_StressRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store unit weight ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_UnitWeightRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store point spring ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_PointSpringRatio;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> To store rotational point spring ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> m_RotationalPointSpringRatio;\n \n<span class=\"blue\">    #endregion</span>\n \n \n<span class=\"blue\">    #region</span> Class Public Properties\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get FromUnits</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> FromUnits\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_FromUnits;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get ToUnits</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> ToUnits\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_ToUnits;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get RatioSetUpSucceeded</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> RatioSetUpSucceeded\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_RatioSetUpSucceeded;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get length ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> LengthRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_LengthRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get point load ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> PointLoadRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_PointLoadRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get point load moment ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> PointLoadMomentRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_PointLoadMomentRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get line load force ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> LineLoadForceRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_LineLoadRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get line load moment ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> LineLoadMomentRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_LineMomentRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get area load ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> AreaLoadRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_AreaLoadRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get stress ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> StressRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_StressRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get unit weight ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> UnitWeightRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_UnitWeightRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get point sprint ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> PointSpringRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_PointSpringRatio;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get rotational point spring ratio</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">public</span> <span class=\"blue\">double</span> RotationalPointSpringRatio\n    {\n      <span class=\"blue\">get</span>\n      {\n        <span class=\"blue\">return</span> m_RotationalPointSpringRatio;\n      }\n    }\n<span class=\"blue\">    #endregion</span>\n \n \n<span class=\"blue\">    #region</span> Class Constructor\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Constructor</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"lengthUnit\"&gt;</span><span class=\"green\">length unit</span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"forceUnit\"&gt;</span><span class=\"green\">forth unit</span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"blue\">public</span> UnitConversionFactors(\n      <span class=\"blue\">string</span> lengthUnit,\n      <span class=\"blue\">string</span> forceUnit )\n    {\n      <span class=\"green\">// Initialize standard factors</span>\n      InitializeConversionFactors();\n \n      <span class=\"green\">// Get length conversion factor</span>\n      <span class=\"blue\">double</span> lenFactor = GetLengthConversionFactor(lengthUnit);\n      <span class=\"blue\">if</span> (!m_RatioSetUpSucceeded)\n      {\n        <span class=\"blue\">return</span>;\n      }\n \n      <span class=\"green\">// Get Force conversion factor</span>\n      <span class=\"blue\">double</span> forceFactor = GetForceConversionFactor(forceUnit);\n      <span class=\"blue\">if</span> (!m_RatioSetUpSucceeded)\n      {\n        <span class=\"blue\">return</span>;\n      }\n \n      <span class=\"green\">// Set up all the conversion factors</span>\n      m_ToUnits = lengthUnit + <span class=\"maroon\">'-'</span> + forceUnit;\n      SetUnitConversionFactors(lenFactor, forceFactor);\n    }\n<span class=\"blue\">    #endregion</span>\n \n \n<span class=\"blue\">    #region</span> Class Implementation\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Initialize factor to convert internal units to standard ft, kips.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> InitializeConversionFactors()\n    {\n      <span class=\"green\">// Internally Revit stores length in feet and other quantities in metric units.</span>\n      <span class=\"green\">// Thus the derived unit for force is stored in a non-standard unit: kg-ft/s**2.</span>\n      <span class=\"green\">// For example, m_PointLoadRatio below equals 1 (kip) / 14593.90 (kg-ft/s**2)</span>\n      m_FromUnits = <span class=\"maroon\">\"ft-kips\"</span>;\n      m_ToUnits = <span class=\"maroon\">\"\"</span>;\n      m_LengthRatio = 1;\n      m_PointLoadRatio = 0.00006852176585679176;\n      m_PointLoadMomentRatio = 0.00006852176585679176;\n      m_LineLoadRatio = 0.00006852176585679176;\n      m_LineMomentRatio = 0.00006852176585679176;\n      m_AreaLoadRatio = 0.00006852176585679176;\n      m_StressRatio = 0.00006852176585679176;\n      m_UnitWeightRatio = 0.00006852176585679176;\n      m_PointSpringRatio = 0.00006852176585679176;\n      m_RotationalPointSpringRatio = 0.00006852176585679176 * 180 / <span class=\"teal\">Math</span>.PI;   <span class=\"green\">// Revit uses degrees, Midas uses radians</span>\n      m_RatioSetUpSucceeded = <span class=\"blue\">false</span>;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get length conversation factor</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"lengthUnit\"&gt;</span><span class=\"green\">length unit type</span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">length conversation factor</span><span class=\"gray\">&lt;/returns&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> GetLengthConversionFactor(\n      <span class=\"blue\">string</span> lengthUnit )\n    {\n      <span class=\"blue\">bool</span> unitAvailable = <span class=\"blue\">true</span>;\n      <span class=\"blue\">double</span> lenFac = 0;\n \n      <span class=\"blue\">switch</span> (lengthUnit)\n      {\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"ft\"</span>:\n          lenFac = 1;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"in\"</span>:\n          lenFac = 12;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"m\"</span>:\n          lenFac = 0.3048;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"cm\"</span>:\n          lenFac = 30.48;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"mm\"</span>:\n          lenFac = 304.8;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">default</span>:\n          unitAvailable = <span class=\"blue\">false</span>;\n          <span class=\"blue\">break</span>;\n      }\n      m_RatioSetUpSucceeded = unitAvailable;\n      <span class=\"blue\">return</span> lenFac;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get force conversation factor</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"forceUnit\"&gt;</span><span class=\"green\">force unit</span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">force conversation factor</span><span class=\"gray\">&lt;/returns&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">double</span> GetForceConversionFactor(\n      <span class=\"blue\">string</span> forceUnit )\n    {\n      <span class=\"blue\">bool</span> unitAvailable = <span class=\"blue\">true</span>;\n      <span class=\"blue\">double</span> forceFac = 0;\n \n      <span class=\"blue\">switch</span> (forceUnit)\n      {\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"kips\"</span>:\n          forceFac = 1;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"lbf\"</span>:\n          forceFac = 1000;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"kN\"</span>:\n          forceFac = 4.4482216152605;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"N\"</span>:\n          forceFac = 4448.2216152605;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"tonf\"</span>: <span class=\"green\">// metric tonne</span>\n          forceFac = 4.4482216152605 * 0.101971999794;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">case</span> <span class=\"maroon\">\"kgf\"</span>:\n          forceFac = 4448.2216152605 * 0.101971999794;\n          <span class=\"blue\">break</span>;\n        <span class=\"blue\">default</span>:\n          unitAvailable = <span class=\"blue\">false</span>;\n          <span class=\"blue\">break</span>;\n      }\n      m_RatioSetUpSucceeded = unitAvailable;\n      <span class=\"blue\">return</span> forceFac;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Set length and force unit conversation factor</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"lenFac\"&gt;</span><span class=\"green\">length unit factor</span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"forceFac\"&gt;</span><span class=\"green\">force unit factor</span><span class=\"gray\">&lt;/param&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> SetUnitConversionFactors(\n      <span class=\"blue\">double</span> lenFac,\n      <span class=\"blue\">double</span> forceFac )\n    {\n      m_LengthRatio *= (lenFac);\n      m_PointLoadRatio *= (forceFac);\n      m_PointLoadMomentRatio *= (forceFac * lenFac);\n      m_LineLoadRatio *= (forceFac / lenFac);\n      m_LineMomentRatio *= (forceFac);\n      m_AreaLoadRatio *= (forceFac / lenFac / lenFac);\n      m_StressRatio *= (forceFac / lenFac / lenFac);\n      m_UnitWeightRatio *= (forceFac / lenFac / lenFac / lenFac);\n      m_PointSpringRatio *= (forceFac / lenFac);\n      m_RotationalPointSpringRatio *= (forceFac * lenFac);\n    }\n<span class=\"blue\">    #endregion</span>\n  }\n}</pre>"
  }
]