[
  {
    "original_filename": "0164_three_hints",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0164_three_hints",
    "header_text": "Three Coding and Performance Hints",
    "local_header_href": "#three-coding-and-performance-hints",
    "chunk_text": "<h3>Three Coding and Performance Hints</h3><p>We received three interesting and important coding and performance hints from \n\n<a href=\"http://www.piotrzurek.net\">\nPiotr</a>\n\nand \n\n<a href=\"http://redbolts.com\">\nGuy Robinson</a>\n\non the post on Linq yesterday.\nI find them too important to leave them dozing away in the comment section, so here is their promotion to post status:</p><ol>\n<li>Use \n\n<a href=\"http://msdn.microsoft.com/en-us/library/bb384054.aspx\">\nauto-implemented properties</a>\n\nto simplify the helper class code.</li>\n<li>Use ParametersMap instead of looping over all element parameters.</li>\n<li>The .NET Framework 3.5 SP1 is significantly improved over .NET 3.5.</li>\n</ol><p>As Piotr pointed out, auto-implemented properties are a nice new feature that has been available since .NET 3.0.\nIt saves some typing and significantly simplifies and shortens the helper class definition.</p><p>Guy underlined that Joel's speed increases probably are a result of using proxy objects rather than Linq. \nProxies are useful for data binding as well, though, so they get used more often than not, and Linq is pretty cool.\nAlso, using .NET3.5SP1 is much better than .NET3.5. It includes a number of important fixes, and WPF is faster with SP1.</p><p>Guy also points out that looping over all the element parameters of each element is very costly, so you will get a nice additional speed improvement and a simpler class again for large datasets by using the ParametersMap in the constructor, rather than looping through all parameters.</p><p>Jeremy adds that you should please be aware that using the parameter name strings as keys in the parameter lookup has the disadvantage of making the code language dependent. If possible, that should be avoided, and built-in parameter enumeration values or GUIDs should be used instead.\nI should think that is faster still, though maybe only marginally.\n\n<p>This is what the helper class definition looks like after applying the first two recommendations:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">InstanceData</span>\n{\n<span class=\"blue\">#region</span> Properties\n<span class=\"blue\">public</span> <span class=\"teal\">Element</span> Instance { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n<span class=\"blue\">public</span> <span class=\"teal\">String</span> Param1 { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n<span class=\"blue\">public</span> <span class=\"blue\">bool</span> Param2 { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n<span class=\"blue\">public</span> <span class=\"blue\">int</span> Param3 { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">#region</span> Constructors\n<span class=\"blue\">public</span> InstanceData( <span class=\"teal\">Element</span> instance )\n{\n  Instance = instance;\n \n  <span class=\"teal\">ParameterMap</span> m = Instance.ParametersMap;\n \n  <span class=\"teal\">Parameter</span> p = m.get_Item( <span class=\"maroon\">\"Param1\"</span> );\n  Param1 = ( p == <span class=\"blue\">null</span> ) ? <span class=\"blue\">string</span>.Empty : p.AsString();\n \n  p = m.get_Item( <span class=\"maroon\">\"Param2\"</span> );\n  Param2 = ( p == <span class=\"blue\">null</span> ) ? <span class=\"blue\">false</span> : ( 0 != p.AsInteger() );\n \n  p = m.get_Item( <span class=\"maroon\">\"Param3\"</span> );\n  Param3 = ( p == <span class=\"blue\">null</span> ) ? 0 : p.AsInteger();\n}\n<span class=\"blue\">#endregion</span>\n}\n</pre>\n<p>Many thanks again to Joel for the original article and to Piotr and Guy for the valuable hints!</p>\n<p>I still wonder whether using ParametersMap is faster than simply using Parameters. \nAnother interesting thing to look at some day would be a benchmark comparing various different parameter access methods.\nOne of these days, when we have lots of time ...</p>\n</p>"
  }
]