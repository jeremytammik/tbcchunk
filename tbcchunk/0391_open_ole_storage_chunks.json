[
  {
    "original_filename": "0391_open_ole_storage",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0391_open_ole_storage",
    "header_text": "Open Revit OLE Storage",
    "local_header_href": "#open-revit-ole-storage",
    "chunk_text": "<h3>Open Revit OLE Storage</h3><p>One of the valuable spoils of the AEC DevCamp last week in Waltham is the following stand-alone utility created by David S. Echols of \n\n<a href=\"ha-inc.com\">\nH&amp;A Architects &amp; Engineers</a> for\n\nopening and analysing the contents of the Revit structured OLE storage file streams.\n\n<p>We initially discussed this internal RVT and RFA file structure when presenting the Python utility to read the \n\n<!-- 023_rvt_file_version.htm -->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/rvt-file-version.html\">\nRVT or RFA file version</a> without\n\nstarting up and loading the file into Revit.\n\nIt is also of interest to read the \n\n<!-- C:\\a\\doc\\revit\\blog\\162_rfa_thumbnail.htm -->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/rvt-and-rfa-thumbnail-image.html\">\nRVT and RFA thumbnail image</a> stored \n\nin the file.\n\n<p>Now Dave has submitted this great little utility that goes much further in reading and parsing the information available in the structured file data, providing access to the thumbnail image and items such as the following from the sample file rac_advanced_sample_project.rvt provided with Revit Architecture 2011:\n\n<ul>\n<li>DocType: Project\n<li>WorkSharing: NotEnabled\n<li>IsCentralFile: False\n<li>UserName: tammikj\n<li>CentralFilePath: \n<li>RevitBuild: Autodesk Revit Architecture 2011 (Build: 20100208_2115)\n<li>Product: Architecture\n<li>Platform: x86\n<li>BuildTimeStamp: 20100208_2115\n<li>LastSavedpath: C:\\My Documents\\BIM_UX_Team_Projects_2011\\First Exp FT\\Advanced Projects\\RTM Files\\rac_advanced_sample_project.rvt\n<li>OpenWorksetDefault: 3\n</li></li></li></li></li></li></li></li></li></li></li></ul>\n<p>Here is an example of the result of parsing the RAC sample file rac_basic_sample_project.rvt:</p>\n<center>\n<img alt=\"OpenRevitOleStorage utility showing structured file storage data from rac_basic_sample_project.rvt\" src=\"img/OpenRevitOleStorage.png\"/>\n</center>\n<p>Here is Dave's description of this utility and the associated source code:\n\n<p style=\"color:darkblue\">Attached is a zip file of my OLE Storage test project. \nIt does not have any references to the Revit API assemblies, so you should be able to extract the files, open the project and run it. \nSelect the file you want to open and the BasicFileInfo will be displayed in the Text area.\nIf there is a preview image, it will be displayed to the right of the text area. \nThis is course provided as-is.\n\n<p>Here is \n\n<a href=\"zip/OpenRevitOleStorage.zip\">\nOpenRevitOleStorage.zip</a>\n\ncontaining the complete source code and Visual Studio solution for this stand-alone utility.\n\n<p>Obviously, as Dave points out, you make use of this utility or the provided code at your own risk.\nIts use is completely unsupported, has nothing to do with the Revit API, and can change at any time.\n\n<h4>Addendum</h4>\n<p>Here is a question that came up just a couple of days later, so I thought I would add it to this post, for completeness' sake:\n\n<p><strong>Question:</strong> Here is a longstanding issue I have had with Revit – how to test externally for file version?\n \n<p>We automate some processes and start Revit to do it, therefore it would be very helpful to understand what version the file is that we are attempting to open!\n \n<p>One problem with Revit is that there is no way to determine the version of a Revit project file outside (or inside) of Revit. \nOn opening the file, Revit immediately upgrades an older file with no way to stop the process from happening. \nWe even thought of storing information in an external  SQL database about what version of Revit each file is utilizing. We moved away from a similar method with AutoCAD projects, though, because of the issues it presented.\n\n<p><strong>Answer:</strong> A Revit project is stored as a compound storage file, which consists of streams and storages. Storages are like folders, and can contain their own substreams and substorages.\n \n<p>At the top level, as of a few releases ago, one stream is BasicFileInfo.  If interpreted as Unicode, it is roughly human-readable and lists some information about the model.  This includes the build of Revit used to save the model.\n \n<p>This information was added so that out own support and development teams could quickly take a peek at a model and see what build it was saved in, and also whether it has worksharing enabled, since that information is also stored.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0391_open_ole_storage",
    "header_text": "Addendum",
    "local_header_href": "#addendum",
    "chunk_text": "<h4>Addendum</h4><p>Here is a question that came up just a couple of days later, so I thought I would add it to this post, for completeness' sake:\n\n<p><strong>Question:</strong> Here is a longstanding issue I have had with Revit – how to test externally for file version?\n \n<p>We automate some processes and start Revit to do it, therefore it would be very helpful to understand what version the file is that we are attempting to open!\n \n<p>One problem with Revit is that there is no way to determine the version of a Revit project file outside (or inside) of Revit. \nOn opening the file, Revit immediately upgrades an older file with no way to stop the process from happening. \nWe even thought of storing information in an external  SQL database about what version of Revit each file is utilizing. We moved away from a similar method with AutoCAD projects, though, because of the issues it presented.\n\n<p><strong>Answer:</strong> A Revit project is stored as a compound storage file, which consists of streams and storages. Storages are like folders, and can contain their own substreams and substorages.\n \n<p>At the top level, as of a few releases ago, one stream is BasicFileInfo.  If interpreted as Unicode, it is roughly human-readable and lists some information about the model.  This includes the build of Revit used to save the model.\n \n<p>This information was added so that out own support and development teams could quickly take a peek at a model and see what build it was saved in, and also whether it has worksharing enabled, since that information is also stored.\n</p></p></p></p></p></p></p>"
  }
]