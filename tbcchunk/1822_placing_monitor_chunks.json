[
  {
    "original_filename": "1822_placing_monitor",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\n- https://forums.autodesk.com/t5/revit-api-forum/get-notified-when-a-family-type-is-about-to-place/m-p/9328378\n\ntwitter:\n\nMulti-threading family instance placement monitor elegantly combining .NET timer and multi-threading functionality with the #RevitAPI #DynamoBim @AutodeskForge @AutodeskRevit #bim #ForgeDevCon http://bit.ly/placementmonitor\n\nKennan Chen perfected his family instance placement monitor by elegantly combining the Revit API with additional .NET timer and multi-threading functionality in a novel fashion seldom seen in a Revit add-in...\n\n&ndash; \n...\n\nlinkedin:\n\nMulti-threading family instance placement monitor elegantly combining .NET timer and multi-threading functionality with the #RevitAPI #\n\nhttp://bit.ly/placementmonitor\n\nKennan Chen perfected his family instance placement monitor by elegantly combining the Revit API with additional .NET timer and multi-threading functionality in a novel fashion seldom seen in a Revit add-in...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"100\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1822_placing_monitor",
    "header_text": "Multi-Threading Family Instance Placement Monitor",
    "local_header_href": "#multi-threading-family-instance-placement-monitor",
    "chunk_text": "### Multi-Threading Family Instance Placement Monitor\n\nIn the last post, I mentioned\nsome [undocumented UIFrameworkService utility methods](https://thebuildingcoder.typepad.com/blog/2020/02/lat-long-to-metres-and-duplicate-legend-component.html#4)\npointed out by Kennan Chen of Shanghai in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [getting notified when a family type is about to be placed](https://forums.autodesk.com/t5/revit-api-forum/get-notified-when-a-family-type-is-about-to-place/m-p/9327282).\n\nHe made use of them to implement a family instance placement monitor that could not be achieved using the pure documented Revit API alone.\n\nAfter the initial publication, he perfected it by elegantly combining the Revit API with additional .NET timer and multi-threading functionality in a novel fashion seldom seen in a Revit add-in.\n\nLet's return to the original question and start fresh from there:\n\n**Question:** Is there an event which can notify when Revit is about to place a family type?\n\nThere are events like `Application` `FamilyLoadedIntoDocument` and `FamilyLoadingIntoDocument`.\n\nIs it possible to have another event `FamilyTypePlacingIntoDocument` for this?\n\nOr is there a workaround?\n\n**Answer:** As recently discussed, you\ncan [use the DocumentChanged event to detect the launching of a command](https://thebuildingcoder.typepad.com/blog/2020/01/torsion-tools-command-event-and-info-in-da4r.html#3).\n\n**Response:** It works great to catch the placing FamilyType event triggered by placing type directly from Revit UI.\n\nAfter hours of struggle to improve\nthe [initial solution](https://thebuildingcoder.typepad.com/blog/2020/02/lat-long-to-metres-and-duplicate-legend-component.html#4),\nI finally completed this by simply using a `Timer` to constantly check the currently placing type until the UI refreshes and the API call returns correctly.\nIt may not be the best solution, but at least it works.\n\nI wrapped the logic up in the following class to make it easier.\nHope this can be helpful.\nPay more attention to the potential multi-thread risk and UI performance impact if someone wants to use the code.\n\nIt is my pleasure to share this to people who are in need.\n\nAs a Chinese, I'm not quite good at explaining things in English. I'll try my best to be accurate &nbsp; :-)\n\nI'll ignore the part how to get notified about a family symbol placing event.\n\nOnce the placing event is caught, the next job is to get the placing family symbol.\n\nThe core method is the `UIFrameworkServices` `TypeSelectorService` `getCurrentTypeId` method from UIFrameworkServices.dll. This DLL ships with Revit, and can be easily found in the Revit root folder.\n\nI believe this method is designed for the Revit UI framework to get data for the Properties panel, since every time this method is invoked, the returned value is always the element id of the `ElementType` that is currently displayed in the Properties panel.\n\nThe biggest problem is, when a family symbol is to be placed, by API call or by UI click, this method doesn't return correctly.\nI guess the state doesn't change before Revit really enters placing mode.\nBut when Revit enters placing mode, no code can be run since the command loop in Revit is stuck.\nThat's frustrating!\n\nLuckily, another loop is still running: the message loop in every Windows UI application running in STA mode.\nIn WPF, the message loop is started by Dispatcher in the main UI thread.\nUI updates must be queued by the dispatcher to be executed in the main UI thread synchronously.\nThat's exactly the same mechanism adopted by Revit known as `ExternalEvent`.\nIn the `FamilyPlacingMonitorService` class, the `DispatcherInvoke` method tests whether the execution is currently in main UI thread.\nIf not, it queues the delegate method to the UI thread.\n\nTo run code after Revit entering placing mode, a `Timer` is created ahead of time to constantly try to resolve the currently placing symbol.\nBut the Timer doesn't run code in the UI thread, which means it's not safe to call the Revit API.\nThe trick is to queue the Timer callback to the main UI thread using Dispatcher.\n\nEvery UI object (DispatcherObject specifically) holds a reference to the Dispatcher instance; it's easy to get that instance from the Ribbon object (Autodesk.Windows.ComponentManager.Ribbon).\n\nI added some comments to the code to explain it more clearly:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">FamilyPlacingMonitorService</span>\n{\n&nbsp;&nbsp;<span style=\"color:gray;\">#region</span>&nbsp;Constructors\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;FamilyPlacingMonitorService(&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;app.DocumentChanged&nbsp;+=&nbsp;App_DocumentChanged;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">#endregion</span>\n \n&nbsp;&nbsp;<span style=\"color:gray;\">#region</span>&nbsp;Others\n \n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">event</span>&nbsp;<span style=\"color:#2b91af;\">EventHandler</span>&lt;<span style=\"color:#2b91af;\">FamilySymbol</span>&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;FamilySymbolPlacingIntoDocument;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;App_DocumentChanged(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">object</span>&nbsp;sender,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;DocumentChangedEventArgs&nbsp;e&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;transactionName&nbsp;=&nbsp;e.GetTransactionNames()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.FirstOrDefault();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;transactionName&nbsp;==&nbsp;<span style=\"color:#a31515;\">&quot;Modify&nbsp;element&nbsp;attributes&quot;</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;treat&nbsp;transactions&nbsp;with&nbsp;the&nbsp;name&nbsp;&quot;Modify&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;element&nbsp;attributes&quot;&nbsp;as&nbsp;element&nbsp;placing</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;maybe&nbsp;not&nbsp;accurate,&nbsp;but&nbsp;enough&nbsp;to&nbsp;cover&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;most&nbsp;scenes</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;document&nbsp;=&nbsp;e.GetDocument();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;try&nbsp;to&nbsp;get&nbsp;the&nbsp;current&nbsp;placing&nbsp;family&nbsp;symbol</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;ResolveCurrentlyPlacingFamilySymbol(&nbsp;document&nbsp;)&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">FamilySymbol</span>&nbsp;familySymbol&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;got&nbsp;ya,&nbsp;notify&nbsp;via&nbsp;event</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnFamilySymbolPlacingIntoDocument(&nbsp;familySymbol&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;current&nbsp;type&nbsp;doesn&#39;t&nbsp;refreshed,&nbsp;create&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;a&nbsp;Timer&nbsp;to&nbsp;constantly&nbsp;try</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Timer&nbsp;timer&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;only&nbsp;queue&nbsp;one&nbsp;resolving&nbsp;logic&nbsp;to&nbsp;the&nbsp;main&nbsp;thread</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;checking&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timer&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Timer(&nbsp;s&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!checking&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checking&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;try&nbsp;to&nbsp;queue&nbsp;the&nbsp;resolving&nbsp;logic&nbsp;to&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;main&nbsp;thread&nbsp;to&nbsp;avoid&nbsp;multi-thread&nbsp;risk</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DispatcherInvoke(&nbsp;()&nbsp;=&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;ResolveCurrentlyPlacingFamilySymbol(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document&nbsp;)&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">FamilySymbol</span>&nbsp;symbol&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;got&nbsp;ya,&nbsp;notify&nbsp;via&nbsp;event</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OnFamilySymbolPlacingIntoDocument(&nbsp;symbol&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;release&nbsp;the&nbsp;timer</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timer?.Change(&nbsp;0,&nbsp;Timeout.Infinite&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timer?.Dispose();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checking&nbsp;=&nbsp;<span style=\"color:blue;\">false</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;<span style=\"color:blue;\">null</span>,&nbsp;0,&nbsp;100&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;DispatcherInvoke(&nbsp;<span style=\"color:#2b91af;\">Action</span>&nbsp;action&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;ComponentManager.Ribbon.Dispatcher?\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.CheckAccess()&nbsp;??&nbsp;<span style=\"color:blue;\">false</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;currently&nbsp;on&nbsp;main&nbsp;thread,&nbsp;execute&nbsp;directly</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action?.Invoke();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;not&nbsp;on&nbsp;main&nbsp;thread,&nbsp;queue&nbsp;the&nbsp;delegate&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;to&nbsp;main&nbsp;ui&nbsp;thread</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ComponentManager.Ribbon.Dispatcher?\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Invoke(&nbsp;action&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;OnFamilySymbolPlacingIntoDocument(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FamilySymbol</span>&nbsp;symbol&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;FamilySymbolPlacingIntoDocument?.Invoke(&nbsp;<span style=\"color:blue;\">this</span>,&nbsp;symbol&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:#2b91af;\">FamilySymbol</span>&nbsp;ResolveCurrentlyPlacingFamilySymbol(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;document&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;id&nbsp;=&nbsp;TypeSelectorService.getCurrentTypeId();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;id&nbsp;&gt;&nbsp;0&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;document.GetElement(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(&nbsp;id&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">FamilySymbol</span>&nbsp;symbol&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;symbol;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:gray;\">#endregion</span>\n}\n</pre>\n\nVery great thanks to Kennan Chen for this extremely knowledgeable, clear and illuminating explanation and elegant juggling of the different threads and contexts!\n\n<center>\n<img src=\"img/surveillance.jpg\" alt=\"Surveillance\" title=\"Surveillance\" width=\"400\"/>\n</center>"
  }
]