[
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Filtered Element Collectors",
    "local_header_href": "#filtered-element-collectors",
    "chunk_text": "<h3>Filtered Element Collectors</h3><p>One of the most important enhancements made in the Revit 2011 API which is guaranteed to affect almost every single conceivable Revit add-in is the new\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltered element collector</a> mechanism, and we have already looked at numerous aspects and examples of using it in various ways.\n\n<p>It represents the one and only way to access elements in the Revit database, if you disregard a number of dedicated Document properties providing direct access to specialised collections of various types, which can easily be replaced by filtered element collectors as well.\n\n<!--\n  regex and grep expression to find all htm files with a non-zero count of occurrences of 'collector'\n  grep -i -c collector *htm|grep -v :0\n\n  333_collector_benchmark.htm:45\n  334_anonymous_methods_vb.htm:26\n  344_mirror_new_elements.htm:26\n  345_manual_regeneration.htm:1\n  346_stairs_on_level.htm:20\n  349_migration_steps.htm:1\n  350_failure_api.htm:4\n  355_view_filter.htm:9\n  359_preview_image.htm:5\n  360_p2c.htm:6\n  368_au_voting.htm:2\n  370_revitlookup.htm:6\n  371_sheet_size.htm:8\n  380_revitwebcam.htm:3\n  383_param_filter.htm:35\n  384_elem_name_param_filter.htm:7\n  392_export_xml.htm:2\n  395_set_tag_type.htm:10\n  397_filter_all_elements.htm:5\n  398_retrieve_mep_elements.htm:7\n  423_filter_shared_param.htm\n  426_filter_non_native_class.htm\n  446_filter_view_phase.htm\n  461_measurepanelarea.htm\n\n<ul>\n<li>My first Revit 2011 plug-in, the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html\">pipe to conduit converter</a>.\n<li>A very simple collector to retrieve <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/export-data-to-xml.html\">view sheets</a>.\n<li>Some utility methods to filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/set-tag-type.html\">levels and types</a> such as door type and a door tag type symbol</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieving-newly-created-elements-in-revit-2011.html\">newly added elements</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/retrieve-stairs-on-level.html\">stairs on a level</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/filter-for-views-and-istemplate-predicate.html\">views</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/get-type-id-and-preview-image.html\">family instances and their family</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">title block symbols and instances</a> to determine the sheet size.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/display-webcam-image-on-building-element-face.html#3\">AVF display styles with a specific name</a>.\n<li>Retrieving <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/retrieve-mep-elements-and-connectors.html\">MEP elements</a>.\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">collector performance benchmark</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">Using LINQ and anonymous methods in VB</a>.\n<li>A RevitLookup update and <a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">retrieving all database elements</a>.\n<li>Why <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/filter-for-all-elements.html\"><strong>not</strong> to retrieve all database elements</a>.\n<li>Many examples of <a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/parameter-filter.html\">parameter filters</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">Parameter filter for an element name</a>.\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/elementparameterfilter-with-a-shared-parameter.html\">Parameter filter for a shared parameter</a>.\n<li>Filtering for a <a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/filtering-for-a-nonnative-class.html\">non-native class</a>, i.e. \"an element type that exists in the API, but not in Revit's native object model\".\n<li>Resolving another non-native class issue, the Panel class in the <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/measurepanelarea_update.html\">MeasurePanelArea</a> SDK sample.\n<li>Filter for <a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/filter-for-view-and-phase.html\">view and phase</a>.\n</ul>\n-->\n<p>In addition to all the results published here so far, I was astounded by the wealth of yet more exciting and useful information and benchmarking results presented by Kevin Vandecar, ex Principal Engineer of the Revit API Team, at the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/devcamp-devlabs-and-updated-api-training-schedule.html\">\nAEC DevCamp</a> conference\n\nin June 2010 in his presentation on 'Revit Performance Tips and Tricks â€“ Exploiting 2011 API Features'.\nKevin has since rejoined the ADN DevTech team, where he specialises on the M &amp; E APIs and is impressed by the powerful and fascinating programming possibilities they offer.\nHere is his session summary:\n\n<p style=\"color:darkblue\">In this class we will cover techniques that can be used to efficiently find elements and information from a Revit model. This new framework was introduced in the 2011 release and includes much more flexibility than before. Along with the flexibility comes some complexity, so we will shed light on the best approaches for common element gathering tasks. We will discuss the various new filters including logical and inverted aspects. We will also show how the iteration framework can be used with the .NET Framework LINQ APIs. We will discuss Regeneration topics including \"when\" regeneration should be done.  Finally there are a few auto-join performance tips that we will share.\n\n<p>Here are Kevin's complete session materials\n\n<a href=\"zip/AecDevCamp2010-RevitPerformanceTipsTricks.zip\">\nAecDevCamp2010-RevitPerformanceTipsTricks.zip</a>,\n\nwhich include the presentation, the hand-out document, a C# .NET sample add-in, and a couple of Revit test models.\n\n<p>Unfortunately, Kevin will not be able to present this material himself at Autodesk University.\nIt would be a great shame if it were not shown at all, so I have been asked to present it for him instead, which I am very much looking forward to doing.\nIt will be part of my class <strong>CP234-2</strong>.\nHere are the complete descriptions of all three of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/autodesk-university-2010-classes.html\">\nmy AU 2010 classes</a>.\n\n<p>In the best spirit of Autodesk University, Kevin wrote a hand-out document covering the entire session content in some detail. \nHis handout is presented in full below.\nIn one of the upcoming posts, I would like to present some details of his benchmarking and example application together with an overview of the other existing samples and results published so far on the blog:\n\n<h3>Performance Tips and Tricks for the Revit 2011 API</h3>\n<h4>Introduction</h4>\n<p>This course covers tips and techniques to efficiently filter and iterate elements within the Revit model. The system is designed to ensure that you determine what you really need to find before iterating so that there is an implicit performance gain over previous techniques. By combining multiple criteria, the new framework works efficiently internally to find a subset of the model that can then be iterated to perform common tasks. The course also covers regeneration and auto-join aspects of the API.\n\n<p>If you are not already an Autodesk Developer Network ADN member, see this\n\n<a href=\"http://www.autodesk.com/adn\">information about ADN</a>.\n\n<p>We also post periodically SDK updates and other Revit API information to the \n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Center</a>.\n\n<h4>Sample Code</h4>\n<p>The sample code that accompanies this course is meant mainly to illustrate techniques and performance aspects using different techniques. Because of this, there is minimal error checking and exception handling. If reusing any of the sample code in your production code, please remember to add appropriate error handling.\n\n<p>The sample code also uses the .NET framework timing utility class called Stopwatch. This is part of the Microsoft .NET System.Diagnostics namespace and is an easy-to-use facility for timing operations. The Stopwatch class was built by MS using low-level API calls, with less overhead than other .NET methods. If the hardware and Windows version of the computer support a high-resolution performance counter, it will use this counter instead of the standard PC clock.\n\n<h4>Revit 2011 API Filtering Framework</h4>\n<p>The 2011 release introduces a new filtering and iteration framework. \nThe internal implementation is done on native side so matching takes place before the managed wrapper is created. \nThis ensures the greatest performance when finding elements with certain criteria. \nThe built-in filters provide this criteria and then you can iterate or filter further using built-in iteration APIs, or with LINQ. In providing the built-in filters, it removes much of the per-element access that would marshal between native internals and the managed API.\n\n<!--\n<p>Tip: The Building Coder blog (Jeremy Tammik) has explored \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltering performance</a> as well.\n-->\n<p>This removes much of the per-element access that marshals between native internals and managed API.\n\n<h4>Filtering Elements</h4>\n<p>The process of finding elements that match your search criteria is easier than ever with Revit 2011. The new filtering framework process can be broken down into three basic steps:\n<ol>\n<li>Filtering is the base step â€“ first decide what you want\n<ul>\n<li>Find all elements with the model, a given set, or within a view-only\n<li>You can easily combine multiple criteria\n<li>Use shortcuts for common criteria\n<li>Combine with another collector through Intersection/Union\n<li>Add exclusions for things you know should not be included\n</li></li></li></li></li></ul>\n<li>Choose how to access\n<ul>\n<li>Choose a built-in iterator for Elements or ElementIds\n<li>Get and Element set or ElementId set\n<li>Optionally use the IEnumerable interface, for example with LINQ\n</li></li></li></ul>\n<li>Access the found elements\n<ul>\n<li>Use built-in languages features (foreach, while, etc.)\n<li>Use built-in facility to get first element that matches (Element or ElementId)\n<li>Optionally use LINQ\n</li></li></li></ul>\n</li></li></li></ol>\n<h4>Example Results</h4>\n<p>To demonstrate the enhanced performance of 2011 over 2010, some internal testing provided performance results for some of the filters as follows, listing the execution time of various filters in milliseconds in 2010 and 2011 and the performance gain determined by the relation between the two:</p>\n<table>\n<tr><th align=\"left\">Example</th><th>2010 ms</th><th>2011 ms</th><th>Gain</th></tr>\n<tr><td>Filter for each API type</td><td align=\"right\">4828</td><td align=\"right\">618</td><td align=\"right\">7.8</td></tr>\n<tr><td>All elements of ElementType</td><td align=\"right\">7</td><td align=\"right\">5</td><td align=\"right\">1.4</td></tr>\n<tr><td>Elements of Category</td><td align=\"right\">2588</td><td align=\"right\">789</td><td align=\"right\">3.2</td></tr>\n<tr><td>Elements by Parameter filter</td><td align=\"right\">49</td><td align=\"right\">20</td><td align=\"right\">2.4</td></tr>\n<tr><td>Elements of StructuralType</td><td align=\"right\">86</td><td align=\"right\">18</td><td align=\"right\">4.7</td></tr>\n<tr><td>Elements of StructuralUsage</td><td align=\"right\">210</td><td align=\"right\">43</td><td align=\"right\">4.8</td></tr>\n<tr><td>Elements of Structural MaterialTypes</td><td align=\"right\">116</td><td align=\"right\">16</td><td align=\"right\">7.2</td></tr>\n<tr><td>Walls of Structural WallUsages</td><td align=\"right\">70</td><td align=\"right\">13</td><td align=\"right\">5.4</td></tr>\n<tr><td>Enclosures and Tags</td><td align=\"right\">112</td><td align=\"right\">20</td><td align=\"right\">5.6</td></tr>\n<tr><td>Curve-Driven Elements</td><td align=\"right\">53</td><td align=\"right\">3</td><td align=\"right\">17.7</td></tr>\n<tr><td>Elements of Design Options</td><td align=\"right\">51</td><td align=\"right\">35</td><td align=\"right\">1.5</td></tr>\n<tr><td>Elements on Levels</td><td align=\"right\">74</td><td align=\"right\">21</td><td align=\"right\">3.5</td></tr>\n</table>\n<h4>FilteredElementCollector</h4>\n<p>At the heart of the system is the FilteredElementCollector class. \nIt provides the collection facility based on applied filters and then provides the interfaces to access the found elements. \nThe documentation is provided here for convenience.\n\n<span style=\"color:darkblue\">\n<p>Developers can assign a variety of conditions to filter the elements which are returned. This class requires that at least one condition be set before making the attempt to access the elements.\n\n<p>Revit will attempt to organize the filters in order to minimize expansion of elements regardless of the order in which conditions and filters are applied.\n\n<p>There are three groups of methods which you can use on a given collector once you have applied filter(s) to it. One group provides collections of all passing elements, a second finds the first match of the given filter(s), and a third provides an iterator which is evaluated lazily (each element is tested by the filter only when the iterator reaches it). You should only use one of the methods from these groups at a time; the collector will reset if you call another method to extract elements. Thus, if you have previously obtained an iterator, it will be stopped and traverse no more elements if you call another method to extract elements.\n\n<p>In .NET, this class supports the IEnumerable interface for Elements. You can use this class with LINQ queries and operations to process lists of elements. Note that because the ElementFilters and the shortcut methods offered by this class process elements in native code before their managed wrappers are generated, better performance will be obtained by using as many native filters as possible on the collector before attempting to process the results using LINQ queries.\n\n<p>One special consideration when using this class in .NET: the debugger will attempt to traverse the members of the collector because of its implementation of IEnumerable. You may see strange results if you also attempt to extract the first element or all elements from the collector while the debugger is also looking at the contents of the collector.\n\n</p></p></p></p></p></span>\n<p>Tip: Do NOT use the debugger to inspect the element list during IEnumerable access (i.e. through LINQ). \nAs the statement above mentions, strange results can occur. \nIn fact during the creation of this material, it was observed a crash in Revit simply due to the debugger trying to inspect the contents of the list.\n\n<h4>Filter Types</h4>\n<p>Filters are applied to the collector to define the search criteria. \nThe base class is ElementFilter, and three derived classes provide the different types of filters that can be applied.\n\n<ul>\n<li>ElementLogicalFilter â€“ Logical filters combine two or more filters logically with specific functionality provided by And and Or logical filters. Note that the component filters may be reordered by Revit to cause the quickest acting filters to be evaluated first.\n<li>ElementQuickFilter â€“ Quick filters use an internal element record to determine passing state. This allows Revit to find elements which have not been expanded into internal memory yet.\n<li>ElementSlowFilter â€“ Slow filters will expand the element into memory. Not all information can be obtained by the element record, so these filters must expand to determine passing state.\n</li></li></li></ul>\n<p>Tip: It is better to couple slow filters with at least one ElementQuickFilter (e.g. class filter), to minimize the number of elements expanded in order to evaluate against the criteria set by this filter.\n\n<h4>Efficiency Guidelines</h4>\n<p>There is no special need to apply quick filters before slow ones, since Revit internally optimizes the order automatically, pushing the quick filters first, regardless of the external order specified. Because the actual iteration takes place only once based on the filter criteria, this optimization can be performed internally.\n\n<p>It is however important to use as many quick filters as possible to reduce the number of elements before any slow filters are applied. Some internal reordering may take place, but this still ensures best performance.\n\n<p>When you apply slow filters, the quick ones will already have eliminated a large number of elements, so the slow filters will not have such a performance impact.\n\n<p>After using the built-in filtering techniques to maximum capacity, you may want to consider using LINQ or explicit coding to narrow the results down further. Be aware that slow filters will normally still be faster than explicit iteration over the results and application of LINQ or custom queries.\n\n<p>Tip: Use the shortcut methods on FilteredElementCollector. Because there are currently no shortcuts for slow filters, you can be sure when using a shortcut you are getting a quick filter. Examples:\n\n<ul>\n<li>OfClass\n<li>OfCategoryId\n</li></li></ul>\n<h4>Logical Filters</h4>\n<p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Performance Tips and Tricks for the Revit 2011 API",
    "local_header_href": "#performance-tips-and-tricks-for-the-revit-2011-api",
    "chunk_text": "<h3>Performance Tips and Tricks for the Revit 2011 API</h3>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<h4>Introduction</h4><p>This course covers tips and techniques to efficiently filter and iterate elements within the Revit model. The system is designed to ensure that you determine what you really need to find before iterating so that there is an implicit performance gain over previous techniques. By combining multiple criteria, the new framework works efficiently internally to find a subset of the model that can then be iterated to perform common tasks. The course also covers regeneration and auto-join aspects of the API.\n\n<p>If you are not already an Autodesk Developer Network ADN member, see this\n\n<a href=\"http://www.autodesk.com/adn\">information about ADN</a>.\n\n<p>We also post periodically SDK updates and other Revit API information to the \n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Center</a>.\n\n<h4>Sample Code</h4>\n<p>The sample code that accompanies this course is meant mainly to illustrate techniques and performance aspects using different techniques. Because of this, there is minimal error checking and exception handling. If reusing any of the sample code in your production code, please remember to add appropriate error handling.\n\n<p>The sample code also uses the .NET framework timing utility class called Stopwatch. This is part of the Microsoft .NET System.Diagnostics namespace and is an easy-to-use facility for timing operations. The Stopwatch class was built by MS using low-level API calls, with less overhead than other .NET methods. If the hardware and Windows version of the computer support a high-resolution performance counter, it will use this counter instead of the standard PC clock.\n\n<h4>Revit 2011 API Filtering Framework</h4>\n<p>The 2011 release introduces a new filtering and iteration framework. \nThe internal implementation is done on native side so matching takes place before the managed wrapper is created. \nThis ensures the greatest performance when finding elements with certain criteria. \nThe built-in filters provide this criteria and then you can iterate or filter further using built-in iteration APIs, or with LINQ. In providing the built-in filters, it removes much of the per-element access that would marshal between native internals and the managed API.\n\n<!--\n<p>Tip: The Building Coder blog (Jeremy Tammik) has explored \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltering performance</a> as well.\n-->\n<p>This removes much of the per-element access that marshals between native internals and managed API.\n\n<h4>Filtering Elements</h4>\n<p>The process of finding elements that match your search criteria is easier than ever with Revit 2011. The new filtering framework process can be broken down into three basic steps:\n<ol>\n<li>Filtering is the base step â€“ first decide what you want\n<ul>\n<li>Find all elements with the model, a given set, or within a view-only\n<li>You can easily combine multiple criteria\n<li>Use shortcuts for common criteria\n<li>Combine with another collector through Intersection/Union\n<li>Add exclusions for things you know should not be included\n</li></li></li></li></li></ul>\n<li>Choose how to access\n<ul>\n<li>Choose a built-in iterator for Elements or ElementIds\n<li>Get and Element set or ElementId set\n<li>Optionally use the IEnumerable interface, for example with LINQ\n</li></li></li></ul>\n<li>Access the found elements\n<ul>\n<li>Use built-in languages features (foreach, while, etc.)\n<li>Use built-in facility to get first element that matches (Element or ElementId)\n<li>Optionally use LINQ\n</li></li></li></ul>\n</li></li></li></ol>\n<h4>Example Results</h4>\n<p>To demonstrate the enhanced performance of 2011 over 2010, some internal testing provided performance results for some of the filters as follows, listing the execution time of various filters in milliseconds in 2010 and 2011 and the performance gain determined by the relation between the two:</p>\n<table>\n<tr><th align=\"left\">Example</th><th>2010 ms</th><th>2011 ms</th><th>Gain</th></tr>\n<tr><td>Filter for each API type</td><td align=\"right\">4828</td><td align=\"right\">618</td><td align=\"right\">7.8</td></tr>\n<tr><td>All elements of ElementType</td><td align=\"right\">7</td><td align=\"right\">5</td><td align=\"right\">1.4</td></tr>\n<tr><td>Elements of Category</td><td align=\"right\">2588</td><td align=\"right\">789</td><td align=\"right\">3.2</td></tr>\n<tr><td>Elements by Parameter filter</td><td align=\"right\">49</td><td align=\"right\">20</td><td align=\"right\">2.4</td></tr>\n<tr><td>Elements of StructuralType</td><td align=\"right\">86</td><td align=\"right\">18</td><td align=\"right\">4.7</td></tr>\n<tr><td>Elements of StructuralUsage</td><td align=\"right\">210</td><td align=\"right\">43</td><td align=\"right\">4.8</td></tr>\n<tr><td>Elements of Structural MaterialTypes</td><td align=\"right\">116</td><td align=\"right\">16</td><td align=\"right\">7.2</td></tr>\n<tr><td>Walls of Structural WallUsages</td><td align=\"right\">70</td><td align=\"right\">13</td><td align=\"right\">5.4</td></tr>\n<tr><td>Enclosures and Tags</td><td align=\"right\">112</td><td align=\"right\">20</td><td align=\"right\">5.6</td></tr>\n<tr><td>Curve-Driven Elements</td><td align=\"right\">53</td><td align=\"right\">3</td><td align=\"right\">17.7</td></tr>\n<tr><td>Elements of Design Options</td><td align=\"right\">51</td><td align=\"right\">35</td><td align=\"right\">1.5</td></tr>\n<tr><td>Elements on Levels</td><td align=\"right\">74</td><td align=\"right\">21</td><td align=\"right\">3.5</td></tr>\n</table>\n<h4>FilteredElementCollector</h4>\n<p>At the heart of the system is the FilteredElementCollector class. \nIt provides the collection facility based on applied filters and then provides the interfaces to access the found elements. \nThe documentation is provided here for convenience.\n\n<span style=\"color:darkblue\">\n<p>Developers can assign a variety of conditions to filter the elements which are returned. This class requires that at least one condition be set before making the attempt to access the elements.\n\n<p>Revit will attempt to organize the filters in order to minimize expansion of elements regardless of the order in which conditions and filters are applied.\n\n<p>There are three groups of methods which you can use on a given collector once you have applied filter(s) to it. One group provides collections of all passing elements, a second finds the first match of the given filter(s), and a third provides an iterator which is evaluated lazily (each element is tested by the filter only when the iterator reaches it). You should only use one of the methods from these groups at a time; the collector will reset if you call another method to extract elements. Thus, if you have previously obtained an iterator, it will be stopped and traverse no more elements if you call another method to extract elements.\n\n<p>In .NET, this class supports the IEnumerable interface for Elements. You can use this class with LINQ queries and operations to process lists of elements. Note that because the ElementFilters and the shortcut methods offered by this class process elements in native code before their managed wrappers are generated, better performance will be obtained by using as many native filters as possible on the collector before attempting to process the results using LINQ queries.\n\n<p>One special consideration when using this class in .NET: the debugger will attempt to traverse the members of the collector because of its implementation of IEnumerable. You may see strange results if you also attempt to extract the first element or all elements from the collector while the debugger is also looking at the contents of the collector.\n\n</p></p></p></p></p></span>\n<p>Tip: Do NOT use the debugger to inspect the element list during IEnumerable access (i.e. through LINQ). \nAs the statement above mentions, strange results can occur. \nIn fact during the creation of this material, it was observed a crash in Revit simply due to the debugger trying to inspect the contents of the list.\n\n<h4>Filter Types</h4>\n<p>Filters are applied to the collector to define the search criteria. \nThe base class is ElementFilter, and three derived classes provide the different types of filters that can be applied.\n\n<ul>\n<li>ElementLogicalFilter â€“ Logical filters combine two or more filters logically with specific functionality provided by And and Or logical filters. Note that the component filters may be reordered by Revit to cause the quickest acting filters to be evaluated first.\n<li>ElementQuickFilter â€“ Quick filters use an internal element record to determine passing state. This allows Revit to find elements which have not been expanded into internal memory yet.\n<li>ElementSlowFilter â€“ Slow filters will expand the element into memory. Not all information can be obtained by the element record, so these filters must expand to determine passing state.\n</li></li></li></ul>\n<p>Tip: It is better to couple slow filters with at least one ElementQuickFilter (e.g. class filter), to minimize the number of elements expanded in order to evaluate against the criteria set by this filter.\n\n<h4>Efficiency Guidelines</h4>\n<p>There is no special need to apply quick filters before slow ones, since Revit internally optimizes the order automatically, pushing the quick filters first, regardless of the external order specified. Because the actual iteration takes place only once based on the filter criteria, this optimization can be performed internally.\n\n<p>It is however important to use as many quick filters as possible to reduce the number of elements before any slow filters are applied. Some internal reordering may take place, but this still ensures best performance.\n\n<p>When you apply slow filters, the quick ones will already have eliminated a large number of elements, so the slow filters will not have such a performance impact.\n\n<p>After using the built-in filtering techniques to maximum capacity, you may want to consider using LINQ or explicit coding to narrow the results down further. Be aware that slow filters will normally still be faster than explicit iteration over the results and application of LINQ or custom queries.\n\n<p>Tip: Use the shortcut methods on FilteredElementCollector. Because there are currently no shortcuts for slow filters, you can be sure when using a shortcut you are getting a quick filter. Examples:\n\n<ul>\n<li>OfClass\n<li>OfCategoryId\n</li></li></ul>\n<h4>Logical Filters</h4>\n<p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Sample Code",
    "local_header_href": "#sample-code",
    "chunk_text": "<h4>Sample Code</h4><p>The sample code that accompanies this course is meant mainly to illustrate techniques and performance aspects using different techniques. Because of this, there is minimal error checking and exception handling. If reusing any of the sample code in your production code, please remember to add appropriate error handling.\n\n<p>The sample code also uses the .NET framework timing utility class called Stopwatch. This is part of the Microsoft .NET System.Diagnostics namespace and is an easy-to-use facility for timing operations. The Stopwatch class was built by MS using low-level API calls, with less overhead than other .NET methods. If the hardware and Windows version of the computer support a high-resolution performance counter, it will use this counter instead of the standard PC clock.\n\n<h4>Revit 2011 API Filtering Framework</h4>\n<p>The 2011 release introduces a new filtering and iteration framework. \nThe internal implementation is done on native side so matching takes place before the managed wrapper is created. \nThis ensures the greatest performance when finding elements with certain criteria. \nThe built-in filters provide this criteria and then you can iterate or filter further using built-in iteration APIs, or with LINQ. In providing the built-in filters, it removes much of the per-element access that would marshal between native internals and the managed API.\n\n<!--\n<p>Tip: The Building Coder blog (Jeremy Tammik) has explored \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltering performance</a> as well.\n-->\n<p>This removes much of the per-element access that marshals between native internals and managed API.\n\n<h4>Filtering Elements</h4>\n<p>The process of finding elements that match your search criteria is easier than ever with Revit 2011. The new filtering framework process can be broken down into three basic steps:\n<ol>\n<li>Filtering is the base step â€“ first decide what you want\n<ul>\n<li>Find all elements with the model, a given set, or within a view-only\n<li>You can easily combine multiple criteria\n<li>Use shortcuts for common criteria\n<li>Combine with another collector through Intersection/Union\n<li>Add exclusions for things you know should not be included\n</li></li></li></li></li></ul>\n<li>Choose how to access\n<ul>\n<li>Choose a built-in iterator for Elements or ElementIds\n<li>Get and Element set or ElementId set\n<li>Optionally use the IEnumerable interface, for example with LINQ\n</li></li></li></ul>\n<li>Access the found elements\n<ul>\n<li>Use built-in languages features (foreach, while, etc.)\n<li>Use built-in facility to get first element that matches (Element or ElementId)\n<li>Optionally use LINQ\n</li></li></li></ul>\n</li></li></li></ol>\n<h4>Example Results</h4>\n<p>To demonstrate the enhanced performance of 2011 over 2010, some internal testing provided performance results for some of the filters as follows, listing the execution time of various filters in milliseconds in 2010 and 2011 and the performance gain determined by the relation between the two:</p>\n<table>\n<tr><th align=\"left\">Example</th><th>2010 ms</th><th>2011 ms</th><th>Gain</th></tr>\n<tr><td>Filter for each API type</td><td align=\"right\">4828</td><td align=\"right\">618</td><td align=\"right\">7.8</td></tr>\n<tr><td>All elements of ElementType</td><td align=\"right\">7</td><td align=\"right\">5</td><td align=\"right\">1.4</td></tr>\n<tr><td>Elements of Category</td><td align=\"right\">2588</td><td align=\"right\">789</td><td align=\"right\">3.2</td></tr>\n<tr><td>Elements by Parameter filter</td><td align=\"right\">49</td><td align=\"right\">20</td><td align=\"right\">2.4</td></tr>\n<tr><td>Elements of StructuralType</td><td align=\"right\">86</td><td align=\"right\">18</td><td align=\"right\">4.7</td></tr>\n<tr><td>Elements of StructuralUsage</td><td align=\"right\">210</td><td align=\"right\">43</td><td align=\"right\">4.8</td></tr>\n<tr><td>Elements of Structural MaterialTypes</td><td align=\"right\">116</td><td align=\"right\">16</td><td align=\"right\">7.2</td></tr>\n<tr><td>Walls of Structural WallUsages</td><td align=\"right\">70</td><td align=\"right\">13</td><td align=\"right\">5.4</td></tr>\n<tr><td>Enclosures and Tags</td><td align=\"right\">112</td><td align=\"right\">20</td><td align=\"right\">5.6</td></tr>\n<tr><td>Curve-Driven Elements</td><td align=\"right\">53</td><td align=\"right\">3</td><td align=\"right\">17.7</td></tr>\n<tr><td>Elements of Design Options</td><td align=\"right\">51</td><td align=\"right\">35</td><td align=\"right\">1.5</td></tr>\n<tr><td>Elements on Levels</td><td align=\"right\">74</td><td align=\"right\">21</td><td align=\"right\">3.5</td></tr>\n</table>\n<h4>FilteredElementCollector</h4>\n<p>At the heart of the system is the FilteredElementCollector class. \nIt provides the collection facility based on applied filters and then provides the interfaces to access the found elements. \nThe documentation is provided here for convenience.\n\n<span style=\"color:darkblue\">\n<p>Developers can assign a variety of conditions to filter the elements which are returned. This class requires that at least one condition be set before making the attempt to access the elements.\n\n<p>Revit will attempt to organize the filters in order to minimize expansion of elements regardless of the order in which conditions and filters are applied.\n\n<p>There are three groups of methods which you can use on a given collector once you have applied filter(s) to it. One group provides collections of all passing elements, a second finds the first match of the given filter(s), and a third provides an iterator which is evaluated lazily (each element is tested by the filter only when the iterator reaches it). You should only use one of the methods from these groups at a time; the collector will reset if you call another method to extract elements. Thus, if you have previously obtained an iterator, it will be stopped and traverse no more elements if you call another method to extract elements.\n\n<p>In .NET, this class supports the IEnumerable interface for Elements. You can use this class with LINQ queries and operations to process lists of elements. Note that because the ElementFilters and the shortcut methods offered by this class process elements in native code before their managed wrappers are generated, better performance will be obtained by using as many native filters as possible on the collector before attempting to process the results using LINQ queries.\n\n<p>One special consideration when using this class in .NET: the debugger will attempt to traverse the members of the collector because of its implementation of IEnumerable. You may see strange results if you also attempt to extract the first element or all elements from the collector while the debugger is also looking at the contents of the collector.\n\n</p></p></p></p></p></span>\n<p>Tip: Do NOT use the debugger to inspect the element list during IEnumerable access (i.e. through LINQ). \nAs the statement above mentions, strange results can occur. \nIn fact during the creation of this material, it was observed a crash in Revit simply due to the debugger trying to inspect the contents of the list.\n\n<h4>Filter Types</h4>\n<p>Filters are applied to the collector to define the search criteria. \nThe base class is ElementFilter, and three derived classes provide the different types of filters that can be applied.\n\n<ul>\n<li>ElementLogicalFilter â€“ Logical filters combine two or more filters logically with specific functionality provided by And and Or logical filters. Note that the component filters may be reordered by Revit to cause the quickest acting filters to be evaluated first.\n<li>ElementQuickFilter â€“ Quick filters use an internal element record to determine passing state. This allows Revit to find elements which have not been expanded into internal memory yet.\n<li>ElementSlowFilter â€“ Slow filters will expand the element into memory. Not all information can be obtained by the element record, so these filters must expand to determine passing state.\n</li></li></li></ul>\n<p>Tip: It is better to couple slow filters with at least one ElementQuickFilter (e.g. class filter), to minimize the number of elements expanded in order to evaluate against the criteria set by this filter.\n\n<h4>Efficiency Guidelines</h4>\n<p>There is no special need to apply quick filters before slow ones, since Revit internally optimizes the order automatically, pushing the quick filters first, regardless of the external order specified. Because the actual iteration takes place only once based on the filter criteria, this optimization can be performed internally.\n\n<p>It is however important to use as many quick filters as possible to reduce the number of elements before any slow filters are applied. Some internal reordering may take place, but this still ensures best performance.\n\n<p>When you apply slow filters, the quick ones will already have eliminated a large number of elements, so the slow filters will not have such a performance impact.\n\n<p>After using the built-in filtering techniques to maximum capacity, you may want to consider using LINQ or explicit coding to narrow the results down further. Be aware that slow filters will normally still be faster than explicit iteration over the results and application of LINQ or custom queries.\n\n<p>Tip: Use the shortcut methods on FilteredElementCollector. Because there are currently no shortcuts for slow filters, you can be sure when using a shortcut you are getting a quick filter. Examples:\n\n<ul>\n<li>OfClass\n<li>OfCategoryId\n</li></li></ul>\n<h4>Logical Filters</h4>\n<p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Revit 2011 API Filtering Framework",
    "local_header_href": "#revit-2011-api-filtering-framework",
    "chunk_text": "<h4>Revit 2011 API Filtering Framework</h4><p>The 2011 release introduces a new filtering and iteration framework. \nThe internal implementation is done on native side so matching takes place before the managed wrapper is created. \nThis ensures the greatest performance when finding elements with certain criteria. \nThe built-in filters provide this criteria and then you can iterate or filter further using built-in iteration APIs, or with LINQ. In providing the built-in filters, it removes much of the per-element access that would marshal between native internals and the managed API.\n\n<!--\n<p>Tip: The Building Coder blog (Jeremy Tammik) has explored \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\nfiltering performance</a> as well.\n-->\n<p>This removes much of the per-element access that marshals between native internals and managed API.\n\n<h4>Filtering Elements</h4>\n<p>The process of finding elements that match your search criteria is easier than ever with Revit 2011. The new filtering framework process can be broken down into three basic steps:\n<ol>\n<li>Filtering is the base step â€“ first decide what you want\n<ul>\n<li>Find all elements with the model, a given set, or within a view-only\n<li>You can easily combine multiple criteria\n<li>Use shortcuts for common criteria\n<li>Combine with another collector through Intersection/Union\n<li>Add exclusions for things you know should not be included\n</li></li></li></li></li></ul>\n<li>Choose how to access\n<ul>\n<li>Choose a built-in iterator for Elements or ElementIds\n<li>Get and Element set or ElementId set\n<li>Optionally use the IEnumerable interface, for example with LINQ\n</li></li></li></ul>\n<li>Access the found elements\n<ul>\n<li>Use built-in languages features (foreach, while, etc.)\n<li>Use built-in facility to get first element that matches (Element or ElementId)\n<li>Optionally use LINQ\n</li></li></li></ul>\n</li></li></li></ol>\n<h4>Example Results</h4>\n<p>To demonstrate the enhanced performance of 2011 over 2010, some internal testing provided performance results for some of the filters as follows, listing the execution time of various filters in milliseconds in 2010 and 2011 and the performance gain determined by the relation between the two:</p>\n<table>\n<tr><th align=\"left\">Example</th><th>2010 ms</th><th>2011 ms</th><th>Gain</th></tr>\n<tr><td>Filter for each API type</td><td align=\"right\">4828</td><td align=\"right\">618</td><td align=\"right\">7.8</td></tr>\n<tr><td>All elements of ElementType</td><td align=\"right\">7</td><td align=\"right\">5</td><td align=\"right\">1.4</td></tr>\n<tr><td>Elements of Category</td><td align=\"right\">2588</td><td align=\"right\">789</td><td align=\"right\">3.2</td></tr>\n<tr><td>Elements by Parameter filter</td><td align=\"right\">49</td><td align=\"right\">20</td><td align=\"right\">2.4</td></tr>\n<tr><td>Elements of StructuralType</td><td align=\"right\">86</td><td align=\"right\">18</td><td align=\"right\">4.7</td></tr>\n<tr><td>Elements of StructuralUsage</td><td align=\"right\">210</td><td align=\"right\">43</td><td align=\"right\">4.8</td></tr>\n<tr><td>Elements of Structural MaterialTypes</td><td align=\"right\">116</td><td align=\"right\">16</td><td align=\"right\">7.2</td></tr>\n<tr><td>Walls of Structural WallUsages</td><td align=\"right\">70</td><td align=\"right\">13</td><td align=\"right\">5.4</td></tr>\n<tr><td>Enclosures and Tags</td><td align=\"right\">112</td><td align=\"right\">20</td><td align=\"right\">5.6</td></tr>\n<tr><td>Curve-Driven Elements</td><td align=\"right\">53</td><td align=\"right\">3</td><td align=\"right\">17.7</td></tr>\n<tr><td>Elements of Design Options</td><td align=\"right\">51</td><td align=\"right\">35</td><td align=\"right\">1.5</td></tr>\n<tr><td>Elements on Levels</td><td align=\"right\">74</td><td align=\"right\">21</td><td align=\"right\">3.5</td></tr>\n</table>\n<h4>FilteredElementCollector</h4>\n<p>At the heart of the system is the FilteredElementCollector class. \nIt provides the collection facility based on applied filters and then provides the interfaces to access the found elements. \nThe documentation is provided here for convenience.\n\n<span style=\"color:darkblue\">\n<p>Developers can assign a variety of conditions to filter the elements which are returned. This class requires that at least one condition be set before making the attempt to access the elements.\n\n<p>Revit will attempt to organize the filters in order to minimize expansion of elements regardless of the order in which conditions and filters are applied.\n\n<p>There are three groups of methods which you can use on a given collector once you have applied filter(s) to it. One group provides collections of all passing elements, a second finds the first match of the given filter(s), and a third provides an iterator which is evaluated lazily (each element is tested by the filter only when the iterator reaches it). You should only use one of the methods from these groups at a time; the collector will reset if you call another method to extract elements. Thus, if you have previously obtained an iterator, it will be stopped and traverse no more elements if you call another method to extract elements.\n\n<p>In .NET, this class supports the IEnumerable interface for Elements. You can use this class with LINQ queries and operations to process lists of elements. Note that because the ElementFilters and the shortcut methods offered by this class process elements in native code before their managed wrappers are generated, better performance will be obtained by using as many native filters as possible on the collector before attempting to process the results using LINQ queries.\n\n<p>One special consideration when using this class in .NET: the debugger will attempt to traverse the members of the collector because of its implementation of IEnumerable. You may see strange results if you also attempt to extract the first element or all elements from the collector while the debugger is also looking at the contents of the collector.\n\n</p></p></p></p></p></span>\n<p>Tip: Do NOT use the debugger to inspect the element list during IEnumerable access (i.e. through LINQ). \nAs the statement above mentions, strange results can occur. \nIn fact during the creation of this material, it was observed a crash in Revit simply due to the debugger trying to inspect the contents of the list.\n\n<h4>Filter Types</h4>\n<p>Filters are applied to the collector to define the search criteria. \nThe base class is ElementFilter, and three derived classes provide the different types of filters that can be applied.\n\n<ul>\n<li>ElementLogicalFilter â€“ Logical filters combine two or more filters logically with specific functionality provided by And and Or logical filters. Note that the component filters may be reordered by Revit to cause the quickest acting filters to be evaluated first.\n<li>ElementQuickFilter â€“ Quick filters use an internal element record to determine passing state. This allows Revit to find elements which have not been expanded into internal memory yet.\n<li>ElementSlowFilter â€“ Slow filters will expand the element into memory. Not all information can be obtained by the element record, so these filters must expand to determine passing state.\n</li></li></li></ul>\n<p>Tip: It is better to couple slow filters with at least one ElementQuickFilter (e.g. class filter), to minimize the number of elements expanded in order to evaluate against the criteria set by this filter.\n\n<h4>Efficiency Guidelines</h4>\n<p>There is no special need to apply quick filters before slow ones, since Revit internally optimizes the order automatically, pushing the quick filters first, regardless of the external order specified. Because the actual iteration takes place only once based on the filter criteria, this optimization can be performed internally.\n\n<p>It is however important to use as many quick filters as possible to reduce the number of elements before any slow filters are applied. Some internal reordering may take place, but this still ensures best performance.\n\n<p>When you apply slow filters, the quick ones will already have eliminated a large number of elements, so the slow filters will not have such a performance impact.\n\n<p>After using the built-in filtering techniques to maximum capacity, you may want to consider using LINQ or explicit coding to narrow the results down further. Be aware that slow filters will normally still be faster than explicit iteration over the results and application of LINQ or custom queries.\n\n<p>Tip: Use the shortcut methods on FilteredElementCollector. Because there are currently no shortcuts for slow filters, you can be sure when using a shortcut you are getting a quick filter. Examples:\n\n<ul>\n<li>OfClass\n<li>OfCategoryId\n</li></li></ul>\n<h4>Logical Filters</h4>\n<p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Filtering Elements",
    "local_header_href": "#filtering-elements",
    "chunk_text": "<h4>Filtering Elements</h4><p>The process of finding elements that match your search criteria is easier than ever with Revit 2011. The new filtering framework process can be broken down into three basic steps:\n<ol>\n<li>Filtering is the base step â€“ first decide what you want\n<ul>\n<li>Find all elements with the model, a given set, or within a view-only\n<li>You can easily combine multiple criteria\n<li>Use shortcuts for common criteria\n<li>Combine with another collector through Intersection/Union\n<li>Add exclusions for things you know should not be included\n</li></li></li></li></li></ul>\n<li>Choose how to access\n<ul>\n<li>Choose a built-in iterator for Elements or ElementIds\n<li>Get and Element set or ElementId set\n<li>Optionally use the IEnumerable interface, for example with LINQ\n</li></li></li></ul>\n<li>Access the found elements\n<ul>\n<li>Use built-in languages features (foreach, while, etc.)\n<li>Use built-in facility to get first element that matches (Element or ElementId)\n<li>Optionally use LINQ\n</li></li></li></ul>\n</li></li></li></ol>\n<h4>Example Results</h4>\n<p>To demonstrate the enhanced performance of 2011 over 2010, some internal testing provided performance results for some of the filters as follows, listing the execution time of various filters in milliseconds in 2010 and 2011 and the performance gain determined by the relation between the two:</p>\n<table>\n<tr><th align=\"left\">Example</th><th>2010 ms</th><th>2011 ms</th><th>Gain</th></tr>\n<tr><td>Filter for each API type</td><td align=\"right\">4828</td><td align=\"right\">618</td><td align=\"right\">7.8</td></tr>\n<tr><td>All elements of ElementType</td><td align=\"right\">7</td><td align=\"right\">5</td><td align=\"right\">1.4</td></tr>\n<tr><td>Elements of Category</td><td align=\"right\">2588</td><td align=\"right\">789</td><td align=\"right\">3.2</td></tr>\n<tr><td>Elements by Parameter filter</td><td align=\"right\">49</td><td align=\"right\">20</td><td align=\"right\">2.4</td></tr>\n<tr><td>Elements of StructuralType</td><td align=\"right\">86</td><td align=\"right\">18</td><td align=\"right\">4.7</td></tr>\n<tr><td>Elements of StructuralUsage</td><td align=\"right\">210</td><td align=\"right\">43</td><td align=\"right\">4.8</td></tr>\n<tr><td>Elements of Structural MaterialTypes</td><td align=\"right\">116</td><td align=\"right\">16</td><td align=\"right\">7.2</td></tr>\n<tr><td>Walls of Structural WallUsages</td><td align=\"right\">70</td><td align=\"right\">13</td><td align=\"right\">5.4</td></tr>\n<tr><td>Enclosures and Tags</td><td align=\"right\">112</td><td align=\"right\">20</td><td align=\"right\">5.6</td></tr>\n<tr><td>Curve-Driven Elements</td><td align=\"right\">53</td><td align=\"right\">3</td><td align=\"right\">17.7</td></tr>\n<tr><td>Elements of Design Options</td><td align=\"right\">51</td><td align=\"right\">35</td><td align=\"right\">1.5</td></tr>\n<tr><td>Elements on Levels</td><td align=\"right\">74</td><td align=\"right\">21</td><td align=\"right\">3.5</td></tr>\n</table>\n<h4>FilteredElementCollector</h4>\n<p>At the heart of the system is the FilteredElementCollector class. \nIt provides the collection facility based on applied filters and then provides the interfaces to access the found elements. \nThe documentation is provided here for convenience.\n\n<span style=\"color:darkblue\">\n<p>Developers can assign a variety of conditions to filter the elements which are returned. This class requires that at least one condition be set before making the attempt to access the elements.\n\n<p>Revit will attempt to organize the filters in order to minimize expansion of elements regardless of the order in which conditions and filters are applied.\n\n<p>There are three groups of methods which you can use on a given collector once you have applied filter(s) to it. One group provides collections of all passing elements, a second finds the first match of the given filter(s), and a third provides an iterator which is evaluated lazily (each element is tested by the filter only when the iterator reaches it). You should only use one of the methods from these groups at a time; the collector will reset if you call another method to extract elements. Thus, if you have previously obtained an iterator, it will be stopped and traverse no more elements if you call another method to extract elements.\n\n<p>In .NET, this class supports the IEnumerable interface for Elements. You can use this class with LINQ queries and operations to process lists of elements. Note that because the ElementFilters and the shortcut methods offered by this class process elements in native code before their managed wrappers are generated, better performance will be obtained by using as many native filters as possible on the collector before attempting to process the results using LINQ queries.\n\n<p>One special consideration when using this class in .NET: the debugger will attempt to traverse the members of the collector because of its implementation of IEnumerable. You may see strange results if you also attempt to extract the first element or all elements from the collector while the debugger is also looking at the contents of the collector.\n\n</p></p></p></p></p></span>\n<p>Tip: Do NOT use the debugger to inspect the element list during IEnumerable access (i.e. through LINQ). \nAs the statement above mentions, strange results can occur. \nIn fact during the creation of this material, it was observed a crash in Revit simply due to the debugger trying to inspect the contents of the list.\n\n<h4>Filter Types</h4>\n<p>Filters are applied to the collector to define the search criteria. \nThe base class is ElementFilter, and three derived classes provide the different types of filters that can be applied.\n\n<ul>\n<li>ElementLogicalFilter â€“ Logical filters combine two or more filters logically with specific functionality provided by And and Or logical filters. Note that the component filters may be reordered by Revit to cause the quickest acting filters to be evaluated first.\n<li>ElementQuickFilter â€“ Quick filters use an internal element record to determine passing state. This allows Revit to find elements which have not been expanded into internal memory yet.\n<li>ElementSlowFilter â€“ Slow filters will expand the element into memory. Not all information can be obtained by the element record, so these filters must expand to determine passing state.\n</li></li></li></ul>\n<p>Tip: It is better to couple slow filters with at least one ElementQuickFilter (e.g. class filter), to minimize the number of elements expanded in order to evaluate against the criteria set by this filter.\n\n<h4>Efficiency Guidelines</h4>\n<p>There is no special need to apply quick filters before slow ones, since Revit internally optimizes the order automatically, pushing the quick filters first, regardless of the external order specified. Because the actual iteration takes place only once based on the filter criteria, this optimization can be performed internally.\n\n<p>It is however important to use as many quick filters as possible to reduce the number of elements before any slow filters are applied. Some internal reordering may take place, but this still ensures best performance.\n\n<p>When you apply slow filters, the quick ones will already have eliminated a large number of elements, so the slow filters will not have such a performance impact.\n\n<p>After using the built-in filtering techniques to maximum capacity, you may want to consider using LINQ or explicit coding to narrow the results down further. Be aware that slow filters will normally still be faster than explicit iteration over the results and application of LINQ or custom queries.\n\n<p>Tip: Use the shortcut methods on FilteredElementCollector. Because there are currently no shortcuts for slow filters, you can be sure when using a shortcut you are getting a quick filter. Examples:\n\n<ul>\n<li>OfClass\n<li>OfCategoryId\n</li></li></ul>\n<h4>Logical Filters</h4>\n<p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Example Results",
    "local_header_href": "#example-results",
    "chunk_text": "<h4>Example Results</h4><p>To demonstrate the enhanced performance of 2011 over 2010, some internal testing provided performance results for some of the filters as follows, listing the execution time of various filters in milliseconds in 2010 and 2011 and the performance gain determined by the relation between the two:</p><table>\n<tr><th align=\"left\">Example</th><th>2010 ms</th><th>2011 ms</th><th>Gain</th></tr>\n<tr><td>Filter for each API type</td><td align=\"right\">4828</td><td align=\"right\">618</td><td align=\"right\">7.8</td></tr>\n<tr><td>All elements of ElementType</td><td align=\"right\">7</td><td align=\"right\">5</td><td align=\"right\">1.4</td></tr>\n<tr><td>Elements of Category</td><td align=\"right\">2588</td><td align=\"right\">789</td><td align=\"right\">3.2</td></tr>\n<tr><td>Elements by Parameter filter</td><td align=\"right\">49</td><td align=\"right\">20</td><td align=\"right\">2.4</td></tr>\n<tr><td>Elements of StructuralType</td><td align=\"right\">86</td><td align=\"right\">18</td><td align=\"right\">4.7</td></tr>\n<tr><td>Elements of StructuralUsage</td><td align=\"right\">210</td><td align=\"right\">43</td><td align=\"right\">4.8</td></tr>\n<tr><td>Elements of Structural MaterialTypes</td><td align=\"right\">116</td><td align=\"right\">16</td><td align=\"right\">7.2</td></tr>\n<tr><td>Walls of Structural WallUsages</td><td align=\"right\">70</td><td align=\"right\">13</td><td align=\"right\">5.4</td></tr>\n<tr><td>Enclosures and Tags</td><td align=\"right\">112</td><td align=\"right\">20</td><td align=\"right\">5.6</td></tr>\n<tr><td>Curve-Driven Elements</td><td align=\"right\">53</td><td align=\"right\">3</td><td align=\"right\">17.7</td></tr>\n<tr><td>Elements of Design Options</td><td align=\"right\">51</td><td align=\"right\">35</td><td align=\"right\">1.5</td></tr>\n<tr><td>Elements on Levels</td><td align=\"right\">74</td><td align=\"right\">21</td><td align=\"right\">3.5</td></tr>\n</table>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "FilteredElementCollector",
    "local_header_href": "#filteredelementcollector",
    "chunk_text": "<h4>FilteredElementCollector</h4><p>At the heart of the system is the FilteredElementCollector class. \nIt provides the collection facility based on applied filters and then provides the interfaces to access the found elements. \nThe documentation is provided here for convenience.\n\n<span style=\"color:darkblue\">\n<p>Developers can assign a variety of conditions to filter the elements which are returned. This class requires that at least one condition be set before making the attempt to access the elements.\n\n<p>Revit will attempt to organize the filters in order to minimize expansion of elements regardless of the order in which conditions and filters are applied.\n\n<p>There are three groups of methods which you can use on a given collector once you have applied filter(s) to it. One group provides collections of all passing elements, a second finds the first match of the given filter(s), and a third provides an iterator which is evaluated lazily (each element is tested by the filter only when the iterator reaches it). You should only use one of the methods from these groups at a time; the collector will reset if you call another method to extract elements. Thus, if you have previously obtained an iterator, it will be stopped and traverse no more elements if you call another method to extract elements.\n\n<p>In .NET, this class supports the IEnumerable interface for Elements. You can use this class with LINQ queries and operations to process lists of elements. Note that because the ElementFilters and the shortcut methods offered by this class process elements in native code before their managed wrappers are generated, better performance will be obtained by using as many native filters as possible on the collector before attempting to process the results using LINQ queries.\n\n<p>One special consideration when using this class in .NET: the debugger will attempt to traverse the members of the collector because of its implementation of IEnumerable. You may see strange results if you also attempt to extract the first element or all elements from the collector while the debugger is also looking at the contents of the collector.\n\n</p></p></p></p></p></span>\n<p>Tip: Do NOT use the debugger to inspect the element list during IEnumerable access (i.e. through LINQ). \nAs the statement above mentions, strange results can occur. \nIn fact during the creation of this material, it was observed a crash in Revit simply due to the debugger trying to inspect the contents of the list.\n\n<h4>Filter Types</h4>\n<p>Filters are applied to the collector to define the search criteria. \nThe base class is ElementFilter, and three derived classes provide the different types of filters that can be applied.\n\n<ul>\n<li>ElementLogicalFilter â€“ Logical filters combine two or more filters logically with specific functionality provided by And and Or logical filters. Note that the component filters may be reordered by Revit to cause the quickest acting filters to be evaluated first.\n<li>ElementQuickFilter â€“ Quick filters use an internal element record to determine passing state. This allows Revit to find elements which have not been expanded into internal memory yet.\n<li>ElementSlowFilter â€“ Slow filters will expand the element into memory. Not all information can be obtained by the element record, so these filters must expand to determine passing state.\n</li></li></li></ul>\n<p>Tip: It is better to couple slow filters with at least one ElementQuickFilter (e.g. class filter), to minimize the number of elements expanded in order to evaluate against the criteria set by this filter.\n\n<h4>Efficiency Guidelines</h4>\n<p>There is no special need to apply quick filters before slow ones, since Revit internally optimizes the order automatically, pushing the quick filters first, regardless of the external order specified. Because the actual iteration takes place only once based on the filter criteria, this optimization can be performed internally.\n\n<p>It is however important to use as many quick filters as possible to reduce the number of elements before any slow filters are applied. Some internal reordering may take place, but this still ensures best performance.\n\n<p>When you apply slow filters, the quick ones will already have eliminated a large number of elements, so the slow filters will not have such a performance impact.\n\n<p>After using the built-in filtering techniques to maximum capacity, you may want to consider using LINQ or explicit coding to narrow the results down further. Be aware that slow filters will normally still be faster than explicit iteration over the results and application of LINQ or custom queries.\n\n<p>Tip: Use the shortcut methods on FilteredElementCollector. Because there are currently no shortcuts for slow filters, you can be sure when using a shortcut you are getting a quick filter. Examples:\n\n<ul>\n<li>OfClass\n<li>OfCategoryId\n</li></li></ul>\n<h4>Logical Filters</h4>\n<p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Filter Types",
    "local_header_href": "#filter-types",
    "chunk_text": "<h4>Filter Types</h4><p>Filters are applied to the collector to define the search criteria. \nThe base class is ElementFilter, and three derived classes provide the different types of filters that can be applied.\n\n<ul>\n<li>ElementLogicalFilter â€“ Logical filters combine two or more filters logically with specific functionality provided by And and Or logical filters. Note that the component filters may be reordered by Revit to cause the quickest acting filters to be evaluated first.\n<li>ElementQuickFilter â€“ Quick filters use an internal element record to determine passing state. This allows Revit to find elements which have not been expanded into internal memory yet.\n<li>ElementSlowFilter â€“ Slow filters will expand the element into memory. Not all information can be obtained by the element record, so these filters must expand to determine passing state.\n</li></li></li></ul>\n<p>Tip: It is better to couple slow filters with at least one ElementQuickFilter (e.g. class filter), to minimize the number of elements expanded in order to evaluate against the criteria set by this filter.\n\n<h4>Efficiency Guidelines</h4>\n<p>There is no special need to apply quick filters before slow ones, since Revit internally optimizes the order automatically, pushing the quick filters first, regardless of the external order specified. Because the actual iteration takes place only once based on the filter criteria, this optimization can be performed internally.\n\n<p>It is however important to use as many quick filters as possible to reduce the number of elements before any slow filters are applied. Some internal reordering may take place, but this still ensures best performance.\n\n<p>When you apply slow filters, the quick ones will already have eliminated a large number of elements, so the slow filters will not have such a performance impact.\n\n<p>After using the built-in filtering techniques to maximum capacity, you may want to consider using LINQ or explicit coding to narrow the results down further. Be aware that slow filters will normally still be faster than explicit iteration over the results and application of LINQ or custom queries.\n\n<p>Tip: Use the shortcut methods on FilteredElementCollector. Because there are currently no shortcuts for slow filters, you can be sure when using a shortcut you are getting a quick filter. Examples:\n\n<ul>\n<li>OfClass\n<li>OfCategoryId\n</li></li></ul>\n<h4>Logical Filters</h4>\n<p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Efficiency Guidelines",
    "local_header_href": "#efficiency-guidelines",
    "chunk_text": "<h4>Efficiency Guidelines</h4><p>There is no special need to apply quick filters before slow ones, since Revit internally optimizes the order automatically, pushing the quick filters first, regardless of the external order specified. Because the actual iteration takes place only once based on the filter criteria, this optimization can be performed internally.\n\n<p>It is however important to use as many quick filters as possible to reduce the number of elements before any slow filters are applied. Some internal reordering may take place, but this still ensures best performance.\n\n<p>When you apply slow filters, the quick ones will already have eliminated a large number of elements, so the slow filters will not have such a performance impact.\n\n<p>After using the built-in filtering techniques to maximum capacity, you may want to consider using LINQ or explicit coding to narrow the results down further. Be aware that slow filters will normally still be faster than explicit iteration over the results and application of LINQ or custom queries.\n\n<p>Tip: Use the shortcut methods on FilteredElementCollector. Because there are currently no shortcuts for slow filters, you can be sure when using a shortcut you are getting a quick filter. Examples:\n\n<ul>\n<li>OfClass\n<li>OfCategoryId\n</li></li></ul>\n<h4>Logical Filters</h4>\n<p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Logical Filters",
    "local_header_href": "#logical-filters",
    "chunk_text": "<h4>Logical Filters</h4><p>There are two logical filters representing Boolean AND and OR statements. \nBoth can combine the results of two or more input filters:\n\n<ul>\n<li>LogicalAndFilter: Elements must pass two or more filters; shortcuts: WherePasses adds one additional filter; IntersectWith joins two sets of independent filters.\n<li>LogicalOrFilter: Elements must pass at least one of two or more filters; shortcuts: UnionWith joins two sets of independent filters\n</li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>LogicalAndFilter</td><td>Elements must pass two or more filters</td><td>WherePasses adds one additional filter; IntersectWith joins two sets of independent filters</td></tr>\n<tr><td>LogicalOrFilter</td><td>Elements must pass at least one of two or more filters</td><td>UnionWith joins two sets of independent filters</td></tr>\n</table>\n-->\n<h4>Quick Filters</h4>\n<p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Quick Filters",
    "local_header_href": "#quick-filters",
    "chunk_text": "<h4>Quick Filters</h4><p>Here is a list of all quick filters with their passing criteria and shortcut methods, if available:\n\n<ul>\n<li>ElementCategoryFilter: Elements matching the input category id; shortcut OfCategoryId\n<li>ElementClassFilter: Elements matching the input runtime class; shortcut OfClass\n<li>ElementIsElementTypeFilter: Elements which are \"Element types\" (symbols); shortcuts WhereElementIsElementType, WhereElementIsNotElementType\n<li>ElementOwnerViewFilter: Elements which are view-specific; shortcuts OwnedByView, WhereElementIsViewIndependent\n<li>ElementDesignOptionFilter: Elements in a particular design option; shortcut ContainedInDesignOption\n<li>ElementIsCurveDrivenFilter: Elements which are curve driven; shortcut WhereElementIsCurveDriven\n<li>ElementStructuralTypeFilter: Elements matching the given structural type ; no shortcut\n<li>FamilySymbolFilter: Symbols of a particular family; no shortcut\n<li>ExclusionFilter: All elements except the element ids input to the filter; shortcut Excluding\n<li>BoundingBoxIntersectsFilter: Elements which have a bounding box which intersects a given outline; no shortcut\n<li>BoundingBoxIsInsideFilter: Elements which have a bounding box inside a given outline; no shortcut\n<li>BoundingBoxContainsPointFilter: Elements which have a bounding box that contain a given point; no shortcut\n</li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>ElementCategoryFilter</td><td>Elements matching the input category id</td><td>OfCategoryId</td></tr>\n<tr><td>ElementClassFilter</td><td>Elements matching the input runtime class</td><td>OfClass</td></tr>\n<tr><td>ElementIsElementTypeFilter</td><td>Elements which are \"Element types\" (symbols)</td><td>WhereElementIsElementType</td></tr>\n<tr><td></td><td>WhereElementIsNotElementType</td></tr>\n<tr><td>ElementOwnerViewFilter</td><td>Elements which are view-specific</td><td>OwnedByView</td></tr>\n<tr><td></td><td>WhereElementIsViewIndependent</td></tr>\n<tr><td>ElementDesignOptionFilter</td><td>Elements in a particular design option</td><td>ContainedInDesignOption</td></tr>\n<tr><td>ElementIsCurveDrivenFilter</td><td>Elements which are curve driven</td><td>WhereElementIsCurveDriven</td></tr>\n<tr><td>ElementStructuralTypeFilter</td><td>Elements matching the given structural type </td><td>none</td></tr>\n<tr><td>FamilySymbolFilter</td><td>Symbols of a particular family</td><td>none</td></tr>\n<tr><td>ExclusionFilter</td><td>All elements except the element ids input to the filter</td><td>Excluding</td></tr>\n<tr><td>BoundingBoxIntersectsFilter</td><td>Elements which have a bounding box which intersects a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxIsInsideFilter</td><td>Elements which have a bounding box inside a given outline</td><td>none</td></tr>\n<tr><td>BoundingBoxContainsPointFilter</td><td>Elements which have a bounding box that contain a given point</td><td>none</td></tr>\n</table>\n-->\n<h4>Slow Filters</h4>\n<p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Slow Filters",
    "local_header_href": "#slow-filters",
    "chunk_text": "<h4>Slow Filters</h4><p>Here is a list of all slow filters with their passing criteria. As said, none of these have any shortcut methods defined:\n\n<ul>\n<li>FamilyInstanceFilter: Instances of a particular family symbol\n<li>ElementLevelFilter: Elements associated to a given level id\n<li>ElementParameterFilter: Parameter existence, value matching, range matching, and/or string matching\n<li>PrimaryDesignOptionMemberFilter: Elements owned by any primary design option\n<li>StructuralInstanceUsageFilter: Structural usage parameter for FamilyInstances\n<li>StructuralWallUsageFilter: Structural usage parameter for Walls\n<li>StructuralMaterialTypeFilter: Material type applied to FamilyInstances\n<li>RoomFilter: Finds rooms\n<li>SpaceFilter: Finds spaces\n<li>AreaFilter: Finds areas\n<li>RoomTagFilter: Finds room tags\n<li>SpaceTagFilter: Finds space tags\n<li>AreaTagFilter: Finds area tags\n<li>CurveElementFilter: Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)\n</li></li></li></li></li></li></li></li></li></li></li></li></li></li></ul>\n<!--\n<table>\n<tr><th align=\"left\">Filter Name</th><th align=\"left\">Passing Criteria</th><th align=\"left\">Shortcut Methods</th></tr>\n<tr><td>FamilyInstanceFilter</td><td>Instances of a particular family symbol</td><td>none</td></tr>\n<tr><td>ElementLevelFilter</td><td>Elements associated to a given level id</td><td>none</td></tr>\n<tr><td>ElementParameterFilter</td><td>Parameter existence, value matching, range matching, and/or string matching</td><td>none</td></tr>\n<tr><td>PrimaryDesignOptionMemberFilter</td><td>Elements owned by any primary design option</td><td>none</td></tr>\n<tr><td>StructuralInstanceUsageFilter</td><td>Structural usage parameter for FamilyInstances</td><td>none</td></tr>\n<tr><td>StructuralWallUsageFilter</td><td>Structural usage parameter for Walls</td><td>none</td></tr>\n<tr><td>StructuralMaterialTypeFilter</td><td>Material type applied to FamilyInstances</td><td>none</td></tr>\n<tr><td>RoomFilter</td><td>Finds rooms</td><td>none</td></tr>\n<tr><td>SpaceFilter</td><td>Finds spaces</td><td>none</td></tr>\n<tr><td>AreaFilter</td><td>Finds areas</td><td>none</td></tr>\n<tr><td>RoomTagFilter</td><td>Finds room tags</td><td>none</td></tr>\n<tr><td>SpaceTagFilter</td><td>Finds space tags</td><td>none</td></tr>\n<tr><td>AreaTagFilter</td><td>Finds area tags</td><td>none</td></tr>\n<tr><td>CurveElementFilter</td><td>Finds specific types of curve elements (model curves, symbolic curves, detail curves, etc.)</td><td>none</td></tr>\n</table>\n-->\n<h4>Variances of the Filters â€“ Tips/Tricks</h4>\n<p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Variances of the Filters â€“ Tips/Tricks",
    "local_header_href": "#variances-of-the-filters-tipstricks",
    "chunk_text": "<h4>Variances of the Filters â€“ Tips/Tricks</h4><p>Remember the filters have many capabilities. The follow functionality may not be obvious, but can be very powerful:\n\n<ul>\n<li>Select the correct collector constructor (i.e. if you already have a set of elements to search, or only care about elements in a specific view)\n<li>Use filters in complex combinations, remembering to place slow filters last.\n<li>Use multiple filters to hone in on something.\n<li>Make use of inverted filters.\n</li></li></li></li></ul>\n<h4>ElementParameterFilter</h4>\n<p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "ElementParameterFilter",
    "local_header_href": "#elementparameterfilter",
    "chunk_text": "<h4>ElementParameterFilter</h4><p>The ElementParameterFilter is a unique filter designed for use with parameters. \nBenchmarking examples show that a parameter filter may be faster by a factor of two than post-processing results using explicit coding or LINQ to find a specific subset of elements. \nAlthough it is a slow filter, it is advised to consider depending on the search criteria.\n\n<p>Tip: Use Revit Lookup to find the API name for the desired parameter.\n\n<h4>Using LINQ</h4>\n<p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Using LINQ",
    "local_header_href": "#using-linq",
    "chunk_text": "<h4>Using LINQ</h4><p>The FilteredElementCollector implements the IEnumerable interface which allows it to work with other .NET framework facilities that can use it. For example, the LINQ APIs are very powerful at allowing you to further find specific data. LINQ is short for the .NET framework Language-INtegrated Query, set, and transform operations. \nFor more information see\n<a href=\"http://msdn.microsoft.com/en-us/netframework/aa904594.aspx\">this link</a>.\n\n<p>LINQ can be used to further filter information using a query, or make use of its other features like XML or SQL.\n\n<h4>Regeneration and Auto-Join</h4>\n<p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Regeneration and Auto-Join",
    "local_header_href": "#regeneration-and-auto-join",
    "chunk_text": "<h4>Regeneration and Auto-Join</h4><p>From the API Developer's Guide:\n<span style=\"color:darkblue\">\n<p>After new elements are created or elements are modified, regeneration and auto-joining of elements is required to propagate the changes throughout the model. Without a regeneration (and auto-join, when relevant), the Geometry property and the AnalyticalModel for Elements are either unobtainable (in the case of creating a new element) or they may be invalid. It is important to understand how and when regeneration occurs before accessing the Geometry or AnalyticalModel of an Element.\n<p>Although regeneration and auto-join are necessary to propagate changes made in the model, it can be time consuming. It is best if these events occur only as often as necessary. When using RegenerationOption.Automatic, regeneration and auto-joining happen automatically after each and every API call that modifies the model. In this case, the Geometry and AnalyticalModel are assigned immediately and no further action is required prior to accessing them. However, due to the slow performance of this option, it is obsolete and will be removed in a future version of Revit.\n<p>In RegenerationOption.Manual, regeneration and auto-joining occur automatically when a transaction that modifies the model is committed successfully, or whenever the Document.Regenerate or Document.AutoJoinElements methods are called. Regenerate and AutoJoinElements may only be called inside an open transaction. It should be noted that the Regeneration method can fail, in which case the RegenerationFailedException will be thrown. If this happens, the changes to the document need to be rolled back by rolling back the current transaction or subtransaction.\n</p></p></p></span>\n<h4>Regeneration</h4>\n<p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Regeneration",
    "local_header_href": "#regeneration",
    "chunk_text": "<h4>Regeneration</h4><p>Regeneration access has been improved in 2011, but it means you need to be more aware of its consequences. In prior releases, regeneration was something that you had to control in, sort-of a 'reverse way'. For example there was a suspend mode, or a special batch create mode that were meant to help performance. With the 2011 release, you should now apply the  manual attribute to your Revit API entry point functions and call Document.Regenerate when it is needed. The automatic mode will be removed in the future because it is very inefficient. From the 2011 documentation:\n<span style=\"color:darkblue\">\n<ul>\n<li>RegenerationOption.Automatic â€“ The API framework will regenerate after every model level change (equivalent behaviour with Revit 2010 and earlier). Regeneration and update can be suspended using SuspendUpdating for some operations, but in general the performance of multiple modifications within the same file will be slower than RegenerationOption.Manual. This mode is provided for behavioural equivalence with Revit 2010 and earlier; it is obsolete and will be removed in a future release.\n<li>RegenerationOption.Manual â€“ The API framework will not regenerate after every model level change. Instead, you may use the regeneration APIs to force update of the document after a group of changes. SuspendUpdating blocks are unnecessary and should not be used. Performance of multiple modifications of the Revit document should be faster than RegenerationOption.Automatic. Because this mode suspends all updates to the document, your application should not read data from the document after it has been modified until the document has been regenerated, or it runs the risk of accessing stale data. This mode will be only option in a future release.\n</li></li></ul>\n</span>\n<h4>Manual Regeneration Option</h4>\n<p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Manual Regeneration Option",
    "local_header_href": "#manual-regeneration-option",
    "chunk_text": "<h4>Manual Regeneration Option</h4><p>For 2011 and the future you should get into the habit of using the manual option and Document.Regenerate. \nConsider your performance options as you move over to it. \nThe main point is that you should use regenerate only when needed. \nThis will improve the performance of modification routines and allow you to group or queue modifications until necessary to regenerate. Remember that manual mode will never be slower than the old automatic option. The only problem is the risk of missing a regenerate call and retrieving stale data. Regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. However, remember that it is another operation, and it is advisable to experiment with your particular algorithm and typical data sets to understand the best performance. The performance of regeneration will depend on the magnitude of change and the complexity of the model â€“ there is no simple and generic answer about how long regeneration will take.\n\n<h4>Tips and Tricks</h4>\n<ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>\n<h4>Auto-Join</h4>\n<p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Tips and Tricks",
    "local_header_href": "#tips-and-tricks",
    "chunk_text": "<h4>Tips and Tricks</h4><ul>\n<li>Again, regenerating more often than necessary should not always be considered a problem and does not cause too much overhead. The regeneration algorithm is optimized to minimize the regeneration of only those items that need it. Regeneration when nothing needs to be regenerated is rather fast, hence it is not so costly â€“ still better than Automatic. If in doubt, do it (i.e. when seeing errors pertaining to data access, this is the first thing to try in your code).\n<li>It is another operation, though! It is advisable to experiment with your particular algorithm and typical data sets to understand the best performance.\n<li>Querying data does not require regenerations unless there was a previous change to the part of the model that could affect the data being queried â€“ that is sometimes hard to estimate, though.\n</li></li></li></ul>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Auto-Join",
    "local_header_href": "#auto-join",
    "chunk_text": "<h4>Auto-Join</h4><p>As mentioned above, auto-join is something that needs to be done when creating or modifying elements to ensure the geometry aspects are updated appropriately before accessing those elements. The trick is to know when to call it. Generally, you must call it when elements are related by geometry to other elements. For example, when two walls are added and a corner is formed, those elements are related at the corner and need auto-join.\n\n<p>Tip: With RegenerationOption.Automatic, elements that are meant to be auto-joined should automatically be updated. \nThere was a problem with this in the very first version of 2011 that was fixed in the first user release update.\n\n<h4>Next Instalment</h4>\n<p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p></p></p>"
  },
  {
    "original_filename": "0463_filtered_element_collector",
    "header_text": "Next Instalment",
    "local_header_href": "#next-instalment",
    "chunk_text": "<h4>Next Instalment</h4><p>As said, one of the next topics will be an overview of Kevin's sample code and collector benchmarks, followed by a global  overview of all the filtering samples we have studied so far.</p>"
  }
]