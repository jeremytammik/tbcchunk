[
  {
    "original_filename": "1007_determine_max_flow",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1007_determine_max_flow",
    "header_text": "Determining Maximal Flow in HVAC Duct Connectors",
    "local_header_href": "#determining-maximal-flow-in-hvac-duct-connectors",
    "chunk_text": "<h3>Determining Maximal Flow in HVAC Duct Connectors</h3><p>A colleague came up with a request for a simple Revit MEP HVAC utility add-in that I would like to present.</p><p><strong>Question:</strong> We need to extract some specific ductwork values in Revit MEP and report them to the user.</p><p>To begin with, all we need is the largest flow value on each duct, exported to a shared parameter on the duct.</p><p>The purpose of the routine is for the users to confirm their duct sizing with this data reflecting the worst case condition.\nFor this reason, it is required only on the ducts, as the fittings sizes will be driven by the duct sizes.</p><p>I created the following shared parameter file defining the 'Duct Max Airflow' parameter that I would like to populate:</p><pre>\n*GROUP ID NAME\nGROUP   1 Mechanical - Airflow\n*PARAM  GUID  NAME   DATATYPE  DATACATEGORY  GROUP  VISIBLE\nPARAM   XXXX  Duct Max Airflow HVAC_AIR_FLOW  1 1\n</pre><p><strong>Answer:</strong> This is a very simple issue, really.\nIt requires the following steps:</p><ul>\n<li>Retrieve all duct elements.</li>\n<li>For each, retrieve all its HVAC connectors.</li>\n<li>Determine their maximal Flow property value.</li>\n<li>Populate the shared parameter.</li>\n</ul><p>The first step is almost always the implementation of a representative, minimal and yet complete sample model to research and test in.\nIt needs to contain as few elements as possible to simplify navigation and identification, and still provide examples of all the various situations that need to be handled by the add-in.</p><p>Here is a sample file to start with:</p><center>\n<img alt=\"Sample model\" src=\"img/duct_max_flow_sample_rvt.png\" width=\"400\"/>\n</center><p>You can then explore this model interactively using RevitLookup and the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/built-in-parameter-enumeration-duplicates-and-bipchecker-update.html\">\nBipChecker</a> to\n\nfind out how to access the required data.\nHere is an example showing where the desired flow values can be found on the duct connectors:</p><center>\n<img alt=\"Snooping max flow on duct\" src=\"img/duct_max_flow_snoop.png\" width=\"400\"/>\n</center><p>After some further analysis, we discover that a possible way to structure this add-in breaks it up into the following tasks and methods:</p><ul>\n<li><a href=\"#2\">GetConnectorManager</a> – return the connector manager for a given element.</li>\n<li><a href=\"#3\">GetMaxFlow</a> – return the max flow for a given set of connectors.</li>\n<li><a href=\"#4\">SetMaxFlowOnElement</a> – determine the max flow for a given element and set its shared parameter value.</li>\n<li><a href=\"#5\">Execute</a> – external command mainline: create a transaction, retrieve and process all ducts.</li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1007_determine_max_flow",
    "header_text": "Return the Connector Manager for an Element",
    "local_header_href": "#return-the-connector-manager-for-an-element",
    "chunk_text": "<h4>Return the Connector Manager for an Element</h4><p>We initially thought we would have to process both ducts and fittings.</p><p>They use different properties to access their connector manager.</p><p>The following method encapsulates and hides that difference.\nThis makes it possible to implement higher level generic methods that handle both types of elements identically:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the given element's connector manager, </span>\n  <span class=\"gray\">///</span><span class=\"green\"> using either the family instance MEPModel or </span>\n  <span class=\"gray\">///</span><span class=\"green\"> directly from the duct connector manager.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">ConnectorManager</span> GetConnectorManager(\n    <span class=\"teal\">Element</span> e )\n  {\n    <span class=\"teal\">Duct</span> duct = e <span class=\"blue\">as</span> <span class=\"teal\">Duct</span>;\n \n    <span class=\"blue\">return</span> <span class=\"blue\">null</span> == duct\n      ? ( e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span> ).MEPModel.ConnectorManager\n      : duct.ConnectorManager;\n  }\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "1007_determine_max_flow",
    "header_text": "Return Max Flow for a Connector Set",
    "local_header_href": "#return-max-flow-for-a-connector-set",
    "chunk_text": "<h4>Return Max Flow for a Connector Set</h4><p>The following method iterates over all connectors in the given set and returns the maximum flow value.</p><p>The Flow property throws an exception unless the connector belongs to the HVAC or piping domain, so all other connectors are skipped:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Retrieve max flow from all the given connectors.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">double</span> GetMaxFlow(\n    <span class=\"teal\">ConnectorSet</span> connectors )\n  {\n    <span class=\"blue\">double</span> flow = 0.0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Connector</span> c <span class=\"blue\">in</span> connectors )\n    {\n      <span class=\"green\">// Accessing flow property requires these</span>\n      <span class=\"green\">// domains or throws an exception saying </span>\n      <span class=\"green\">// \"Flow is available only for connectors </span>\n      <span class=\"green\">// of DomainHavc and DomainPiping.\"</span>\n \n      <span class=\"teal\">Domain</span> d = c.Domain;\n \n      <span class=\"blue\">if</span>( <span class=\"teal\">Domain</span>.DomainHvac != d\n        &amp;&amp; <span class=\"teal\">Domain</span>.DomainPiping != d )\n      {\n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"blue\">if</span>( flow &lt; c.Flow )\n      {\n        flow = c.Flow;\n      }\n    }\n    <span class=\"blue\">return</span> flow;\n  }\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "1007_determine_max_flow",
    "header_text": "Determine Max Flow for an Element and Set its Shared Parameter",
    "local_header_href": "#determine-max-flow-for-an-element-and-set-its-shared-parameter",
    "chunk_text": "<h4>Determine Max Flow for an Element and Set its Shared Parameter</h4><p>We use the GUID to identify the 'Duct Max Airflow' shared parameter in a language independent way.</p><p>Then all that need to be done to process a duct element is retrieve its connectors, determine their max flow value and populate the parameter, returning an error if the latter fails:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Identify the 'Duct Max Airflow' shared parameter.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">Guid</span> _shared_param_duct_max_airflow\n    = <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( <span class=\"maroon\">\"87b12ca4-8a4c-4731-bf88-f50bccd9c5d4\"</span> );\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Set the max flow parameter on the given </span>\n  <span class=\"gray\">///</span><span class=\"green\"> element and return true on success.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> This is generic, so it can handle both</span>\n  <span class=\"gray\">///</span><span class=\"green\"> ducts and fittings. Later, this proved</span>\n  <span class=\"gray\">///</span><span class=\"green\"> unnecessary, and we use ot for ducts only.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> SetMaxFlowOnElement( <span class=\"teal\">Element</span> e )\n  {\n    <span class=\"teal\">ConnectorSet</span> connectors\n      = GetConnectorManager( e ).Connectors;\n \n    <span class=\"blue\">int</span> n = connectors.Size;\n \n    <span class=\"blue\">double</span> flow = GetMaxFlow( connectors );\n \n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"{0} has {1} connector{2} and max flow {3}.\"</span>,\n      <span class=\"teal\">Util</span>.ElementDescription( e ), n,\n      <span class=\"teal\">Util</span>.PluralSuffix( n ), flow );\n \n    <span class=\"teal\">Parameter</span> p = e.get_Parameter(\n      _shared_param_duct_max_airflow );\n \n    <span class=\"blue\">bool</span> rc = <span class=\"blue\">false</span>;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p )\n    {\n      <span class=\"green\">//Util.InfoMsg( \"Please ensure that all \"</span>\n      <span class=\"green\">//  + \"duct and their fittings have a \"</span>\n      <span class=\"green\">//  + \"'Duct Max Airflow' shared parameter.\" );</span>\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} has no 'Duct Max Airflow' \"</span>\n        + <span class=\"maroon\">\"shared parameter.\"</span>,\n        <span class=\"teal\">Util</span>.ElementDescription( e ) );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"green\">// Store the max flow value in the specified</span>\n      <span class=\"green\">// parameter on the given element.</span>\n \n      rc = p.Set( flow );\n    }\n    <span class=\"blue\">return</span> rc;\n  }\n</pre><p>This method is implemented in a generic fashion that enables it to handle fittings as well as duct elements, although we are currently only using it for the latter.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1007_determine_max_flow",
    "header_text": "Mainline to Retrieve and Process all Ducts",
    "local_header_href": "#mainline-to-retrieve-and-process-all-ducts",
    "chunk_text": "<h4>Mainline to Retrieve and Process all Ducts</h4><p>The external command mainline creates a transaction to enable database modification, retrieves all ducts and processes them one at a time:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == uidoc )\n    {\n      <span class=\"teal\">Util</span>.InfoMsg( <span class=\"maroon\">\"Please run this command \"</span>\n        + <span class=\"maroon\">\"in a valid document context.\"</span> );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">Application</span> app = uiapp.Application;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"blue\">int</span> nDucts = 0;\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"teal\">Util</span>.Caption );\n \n      <span class=\"teal\">FilteredElementCollector</span> ducts\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Duct</span> ) );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Duct</span> duct <span class=\"blue\">in</span> ducts )\n      {\n        <span class=\"blue\">if</span>( SetMaxFlowOnElement( duct ) )\n        {\n          ++nDucts;\n        }\n        <span class=\"blue\">else</span>\n        {\n          <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n        }\n      }\n      tx.Commit();\n    }\n \n    <span class=\"teal\">Util</span>.InfoMsg( <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Set max flow parameter on {0} duct{1}.\"</span>,\n      nDucts, <span class=\"teal\">Util</span>.PluralSuffix( nDucts ) ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p>We originally retrieved and processed the fittings in the same manner, but that proved unnecessary, so the relevant code has been commented out again.\nYou can still see it in the source code download below, though, in case you have need for that functionality for other purposes.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1007_determine_max_flow",
    "header_text": "Conclusion",
    "local_header_href": "#conclusion",
    "chunk_text": "<h4>Conclusion</h4><p>As said, this is all very simple.</p><p>Next steps might include adding an external application to define a slightly nicer user interface and implementing additional functionality to populate other parameters, check for open connectors, etc.</p><p>For the moment, here is\n\n<a href=\"zip/FlowParam02.zip\">FlowParam02.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for the command in its current state.</p>"
  }
]