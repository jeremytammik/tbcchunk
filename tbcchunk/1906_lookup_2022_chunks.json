[
  {
    "original_filename": "1906_lookup_2022",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- RevitLookup updates:\n  2022.0.0.1 integrated pull request #74 by @peterhirn setting up CI for Revit 2022\n  2022.0.0.2 integrated pull request #75 by @peterhirn to fix CI for Revit 2022 and non-dotnet-core project file\n  2022.0.0.3 integrated pull request #73 implementing temporary transaction and rollback allowing to snoop PlanTopology, reset Revit API assembly DLL references to Copy Local false and specified Configuration as 2022\n  2022.0.0.4 upgraded to Visual Studio 2019 (from 2017) and adopted @peterhirn project and solution files\n  2022.0.0.5 integrated pull request #76 by @peterhirn to fix CI for new VS 2019 Revit 2022 dotnet-core csproj\n  2022.0.0.6 integrated pull request #77 by @RevitArkitek to get end points for curves\n  2022.0.0.7 integrated pull request #78 by @RevitArkitek to handle TableData.GetSectionData\n  2022.0.0.8 integrated pull request #80 by @WspDev to remove deprecated ParameterType usage\n  2022.0.0.9 integrated pull request #81 by @CADBIMDeveloper enhancing ElementId and Revit 2022 extensible storage support:\n  - fix broken schema fields values display\n  - SpecTypeId.Custom is not a measurable spec (it represents double values), but requires UnitTypeId.Custom to get an entity field value\n  - this allows to view extensible storage schema map fields (dictionaries)\n  - ElementId could represent Revit model element or built-in parameter id or built-in category id. for the latter two, show id value instead of \"null\"\n  - now keyvaluepair is a truly snoopable object\n  - remove unused using\n  - show value if ElementId represents built-in parameters or built-in category\n  I've fixed the app for Extensible storages. Extensible storage fields were broken:\n  revitlookup_pr_81_1.png\n  Now RevitLookup also supports Dictionary KeyValuePairs lookup. It is also useful to view extensible storage entities data:\n  revitlookup_pr_81_2.png\n  Plus a small improvement. ElementId could be a model element id, a built-in parameter or built-in-category. For the last two it is much more useful to see an integer value instead of \"< null >\"\n\n- VisualStudioRevitAddinWizard 2022\n  https://forums.autodesk.com/t5/revit-api-forum/visualstudiorevitaddinwizard-2022/m-p/10233833\n  \n- ADN Training material 2022\n\n- AdnRevitApiLabsXtra 2022\n \n- explore the use of the SetGeometryCurve Method\n  overrideJoins argument -- An option to specify whether or not existing joins will affect setting the geometry of the CurveElement. Setting this parameter to false is essentially the same as directly setting the GeometryCurve property.\n  https://www.revitapidocs.com/2021.1/9deec90c-4efc-9aa6-245d-061669022aa2.htm\n  What does the overrideJoins parameter do in CurveElement.SetGeometryCurve?\n  https://forums.autodesk.com/t5/revit-api-forum/what-does-the-overridejoins-parameter-do-in-curveelement/m-p/10298762\n  SetGeometryCurve_overrideJoins.png 634\n\n- My Revit app can't find SQLite. dll\n  https://forums.autodesk.com/t5/revit-api-forum/my-revit-app-can-t-find-sqlite-dll/m-p/10323105\n  Sean Page, RDG Planning & Design:\n  I ran into issues recently in 2022 related to references that previously worked and turning on and using the Fusion Assembly Binding log viewer was a substantial help.\n  \"Fuslogvw.exe (Assembly Binding Log Viewer) | Microsoft Docs\"\n  https://docs.microsoft.com/en-us/dotnet/framework/tools/fuslogvw-exe-assembly-binding-log-viewer\n  https://docs.microsoft.com/en-us/dotnet/framework/tools/fuslogvw-exe-assembly-binding-log-viewer\n\ntwitter:\n\nRevitLookup enhancements, Visual Studio Revit add-in templates and #RevitAPI labs training material 2022, SetGeometryCurve overrideJoins and exploring assembly reference DLL hell with Fuslogvw @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://autode.sk/overridejoins\n\nHere are a couple of the interesting topics that came up in the last couple of days\n&ndash; Numerous RevitLookup enhancements\n&ndash; Revit API Labs training material 2022\n&ndash; Visual Studio Revit add-in templates 2022\n&ndash; The SetGeometryCurve <code>overrideJoins</code> argument\n&ndash; Exploring assembly reference DLL hell with Fuslogvw...\n\nlinkedin:\n\nRevitLookup enhancements, Visual Studio Revit add-in templates and #RevitAPI labs training material 2022, SetGeometryCurve overrideJoins and exploring assembly reference DLL hell with Fuslogvw\n\nhttp://autode.sk/overridejoins\n\nHere are a couple of the interesting topics that came up in the last couple of days:\n\n- Numerous RevitLookup enhancements\n- Revit API Labs training material 2022\n- Visual Studio Revit add-in templates 2022\n- The SetGeometryCurve <code>overrideJoins</code> argument\n- Exploring assembly reference DLL hell with Fuslogvw...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1906_lookup_2022",
    "header_text": "RevitLookup Update, Fuslogvw and Override Joins",
    "local_header_href": "#revitlookup-update-fuslogvw-and-override-joins",
    "chunk_text": "### RevitLookup Update, Fuslogvw and Override Joins\n\nHere are a couple of the interesting topics that came up in the last couple of days:\n\n- [Numerous RevitLookup enhancements](#2)\n- [Revit API Labs training material 2022](#3)\n- [Visual Studio Revit add-in templates 2022](#4)\n- [The SetGeometryCurve `overrideJoins` argument](#5)\n- [Exploring assembly reference DLL hell with Fuslogvw](#6)"
  },
  {
    "original_filename": "1906_lookup_2022",
    "header_text": "Numerous RevitLookup Enhancements",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Numerous RevitLookup Enhancements\n\nNumerous contributions with\nimportant [RevitLookup](https://github.com/jeremytammik/RevitLookup) enhancements\nwere submitted since\nthe [flat migration of RevitLookup to the Revit 2022 API](https://thebuildingcoder.typepad.com/blog/2021/04/revit-2022-migrates-bim360-team-to-docs.html#3):\n\n- [2022.0.0.1](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.1) &ndash; integrated pull request #74 by @peterhirn setting up CI for Revit 2022\n- [2022.0.0.2](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.2) &ndash; integrated pull request #75 by @peterhirn to fix CI for Revit 2022 and non-dotnet-core project file\n- [2022.0.0.3](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.3) &ndash; integrated pull request #73 implementing temporary transaction and rollback allowing to snoop PlanTopology, reset Revit API assembly DLL references to Copy Local false and specified Configuration as 2022\n- [2022.0.0.4](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.4) &ndash; upgraded to Visual Studio 2019 (from 2017) and adopted @peterhirn project and solution files\n- [2022.0.0.5](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.5) &ndash; integrated pull request #76 by @peterhirn to fix CI for new VS 2019 Revit 2022 dotnet-core csproj\n- [2022.0.0.6](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.6) &ndash; integrated pull request #77 by @RevitArkitek to get end points for curves\n- [2022.0.0.7](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.7) &ndash; integrated pull request #78 by @RevitArkitek to handle TableData.GetSectionData\n- [2022.0.0.8](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.8) &ndash; integrated pull request #80 by @WspDev to remove deprecated ParameterType usage\n- [2022.0.0.9](https://github.com/jeremytammik/RevitLookup/releases/tag/2022.0.0.9) &ndash; integrated pull request #81 by @CADBIMDeveloper enhancing ElementId and Revit 2022 extensible storage support:\n    - fix broken schema fields values display\n    - SpecTypeId.Custom is not a measurable spec (it represents double values), but requires UnitTypeId.Custom to get an entity field value\n    - this allows to view extensible storage schema map fields (dictionaries)\n    - ElementId could represent Revit model element or built-in parameter id or built-in category id. for the latter two, show id value instead of \"null\"\n    - now keyvaluepair is a truly snoopable object\n    - remove unused using\n    - show value if ElementId represents built-in parameters or built-in category\n\nIn the latter,\nAlexander [@aignatovich](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1257478) [@CADBIMDeveloper](https://github.com/CADBIMDeveloper) Ignatovich, aka Александр Игнатович, adds:\n\nI fixed RevitLookup handling of extensible storage.\nThe `Extensible storages` fields were broken:\n\n<center>\n<img src=\"img/revitlookup_pr_81_1.png\" alt=\"Extensible storages fields\" title=\"Extensible storages fields\" width=\"401\"/> <!-- 802 -->\n</center>\n\nNow RevitLookup also supports `Dictionary` `KeyValuePairs` lookup.\nThat is useful to view extensible storage entity data:\n\n<center>\n<img src=\"img/revitlookup_pr_81_2.png\" alt=\"Dictionary KeyValuePairs lookup\" title=\"Dictionary KeyValuePairs lookup\" width=\"454\"/> <!-- 907 -->\n</center>\n\nPlus another small improvement: each `ElementId` could represent a model element id, a built-in parameter or a built-in-category.\nFor the latter two, it is much more useful to see an integer value instead of `null`.\n\nMany thanks to all contributors for your great enhancements!\n\nIn case you, dear reader, would like to add your own to these as well, please fork the repository, clone to your local system, modify at will, commit, push the changes back to your fork and submit a pull request for them to be included into the main code stream.\n\nYou can easily track and analyse the changes to see how each individual enhancement above interacts with main project by clicking the `Compare` button to view the difference between\nthe [individual releases](https://github.com/jeremytammik/RevitLookup/releases)."
  },
  {
    "original_filename": "1906_lookup_2022",
    "header_text": "Revit API Labs Training Material 2022",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Revit API Labs Training Material 2022\n\nMy colleague [Naveen Kumar](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/5661631) [@NK29 T](https://github.com/NK29) is\nsteadily building up his collection of solutions in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160).\n\nHe also migrated\nthe [Revit API Labs Training Material](https://github.com/ADN-DevTech/RevitTrainingMaterial) to\nRevit 2022.\nThe [latest release](https://github.com/ADN-DevTech/RevitTrainingMaterial/releases/latest) is\ncurrently [2022.0.0.2](https://github.com/ADN-DevTech/RevitTrainingMaterial/releases/tag/2022.0.0.2).\n\nMany thanks to Naveen for his contributions!\n\nThe closely related [AdnRevitApiLabsXtra](https://github.com/jeremytammik/AdnRevitApiLabsXtra) have\nyet to be migrated to Revit 2022... coming up anon..."
  },
  {
    "original_filename": "1906_lookup_2022",
    "header_text": "Visual Studio Revit Add-in Templates 2022",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Visual Studio Revit Add-in Templates 2022\n\nPrompted by both Naveen and \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\nasking for [VisualStudioRevitAddinWizard 2022](https://forums.autodesk.com/t5/revit-api-forum/visualstudiorevitaddinwizard-2022/m-p/10233833), \nI performed a quick flat migration of that tool to the new version last week.\n\nThe [latest release](https://github.com/jeremytammik/VisualStudioRevitAddinWizard/releases/latest) is\ncurrently [2022.0.0.0](https://github.com/jeremytammik/VisualStudioRevitAddinWizard/releases/tag/2022.0.0.0)."
  },
  {
    "original_filename": "1906_lookup_2022",
    "header_text": "The SetGeometryCurve OverrideJoins Argument",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> The SetGeometryCurve OverrideJoins Argument\n\nStefano Menci very kindly shared some useful research results in\nhis [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\nexplaining [what the `overrideJoins` parameter does in `CurveElement.SetGeometryCurve`](https://forums.autodesk.com/t5/revit-api-forum/what-does-the-overridejoins-parameter-do-in-curveelement/m-p/10298762):\n\nThe [Revit API documentation](https://www.revitapidocs.com/2021.1/9deec90c-4efc-9aa6-245d-061669022aa2.htm) contents\nitself with the statement that the `overrideJoins` argument provides:\n\n> an option to specify whether or not existing joins will affect setting the geometry of the `CurveElement`.\nSetting this parameter to `false` is essentially the same as directly setting the `GeometryCurve` property.\n\nStefano's research provides a little bit more detail, explaining:\n\nI figured it out, so I will post the question with the answer anyway, for anybody interested (and for me, the next time I need it, because sometimes I'm a little forgetful):\n\n- If set to true, it will set the new geometry for the curve element\n- If set to false, after setting the geometry, it will try to satisfy any constraints associated with the element\n\nThe following code:\n\n<pre class=\"code\">\n&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Test&nbsp;1&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;plane&nbsp;=&nbsp;Plane.CreateByNormalAndOrigin(&nbsp;XYZ.BasisZ,&nbsp;XYZ.Zero&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;sketchPlane&nbsp;=&nbsp;SketchPlane.Create(&nbsp;doc,&nbsp;plane&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;p1&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;0,&nbsp;0,&nbsp;0&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;p2&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;10,&nbsp;5,&nbsp;0&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;p3&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;20,&nbsp;0,&nbsp;0&nbsp;);\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;p2Higher&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;XYZ(&nbsp;10,&nbsp;10,&nbsp;0&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;line1&nbsp;=&nbsp;doc.Create.NewModelCurve(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Line.CreateBound(&nbsp;p1,&nbsp;p2&nbsp;),&nbsp;sketchPlane&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;line2&nbsp;=&nbsp;doc.Create.NewModelCurve(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Line.CreateBound(&nbsp;p2,&nbsp;p3&nbsp;),&nbsp;sketchPlane&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;line3&nbsp;=&nbsp;doc.Create.NewModelCurve(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Line.CreateBound(&nbsp;p2Higher,&nbsp;p3&nbsp;),&nbsp;sketchPlane&nbsp;);\n \n&nbsp;&nbsp;tx.Commit();\n \n&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Test&nbsp;2&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;line1.SetGeometryCurve(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;Line.CreateBound(&nbsp;p1,&nbsp;p2Higher&nbsp;),&nbsp;&lt;&nbsp;<span style=\"color:blue;\">false</span>&nbsp;|&nbsp;<span style=\"color:blue;\">false</span>&nbsp;&gt;);\n \n&nbsp;&nbsp;tx.Commit();\n</pre>\n\nWill return the following result:\n\n<center>\n<img src=\"img/SetGeometryCurve_overrideJoins.png\" alt=\"SetGeometryCurve overrideJoins\" title=\"SetGeometryCurve overrideJoins\" width=\"400\"/> <!-- 634 -->\n</center>\n\nMany thanks to Stefano for the analysis and explanation."
  },
  {
    "original_filename": "1906_lookup_2022",
    "header_text": "Exploring Assembly Reference DLL Hell with Fuslogvw",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Exploring Assembly Reference DLL Hell with Fuslogvw\n\nSean Page of [RDG Planning &amp; Design](https://rdgusa.com) shares another useful hint in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [my Revit app can't find SQLite.dll](https://forums.autodesk.com/t5/revit-api-forum/my-revit-app-can-t-find-sqlite-dll/m-p/10323105), saying:\n\n> I ran into issues recently in 2022 related to references that previously worked.\nTurning on and using\nthe [`Fuslogvw.exe` assembly binding log viewer](https://docs.microsoft.com/en-us/dotnet/framework/tools/fuslogvw-exe-assembly-binding-log-viewer) was\na substantial help.\n\nThank you, Sean, for pointing this out!"
  }
]