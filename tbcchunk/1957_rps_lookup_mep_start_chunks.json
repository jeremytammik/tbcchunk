[
  {
    "original_filename": "1957_rps_lookup_mep_start",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- getting started with the Revit API for MEP\n  [Q] Now we are trying to develop some Revit add-ins.  I would like to know how to allow the user to insert a predefined MEP component in a model and how to detect if two components, for example two pipes, are connected in the codes.  Could you please let me know where I can find the related information?  Do you have any related examples to share with me?  Thanks!\n  [A] Welcome to the Revit API!\n  The Building Coder shares a wealth of information on getting started with the Revit API:\n  https://thebuildingcoder.typepad.com/blog/about-the-author.html#2\n  However, before you start even thinking about programming, it is important to gain some fundamental understanding of the BIM, the BIM paradigm and BIM processes.\n  Furthermore, you should determine in detail exactly how to address your task manually through the end user interface making use of the optimal workflows and respecting best practices, before you start trying to automate the task.\n  All the questions you raise are adressed by and demonstrated in the Revit SDK samples. The SDK can be downloaded from the official Autodesk Revit developer page:\n  https://www.autodesk.com/developer-network/platform-technologies/revit\n  MEP components are represented by family instances, so you can simply use generic code to insert a family instance.\n  However, there are also many MEP-specific enhancements that may or may not apply.\n  To determine whether two pipes are connected, you simply query them for their connectors, represented by the Connector class:\n  https://www.revitapidocs.com/2022/11e07082-b3f2-26a1-de79-16535f44716c.htm\n  It has a ConnectorManager property:\n  https://www.revitapidocs.com/2022/61339b71-5d90-c53d-bec4-2209bab97787.htm\n  That in turn proves access to the neighbouring parts' connectors.\n  System traversal is also demonstrated by some of the SDK samples.\n  In addition to the official sample material from Autodesk, you can also check out Building Coder blog.\n  Here is my favourite series of articles from there on connecting pipes:\n  http://thebuildingcoder.typepad.com/blog/2014/01/final-rolling-offset-using-pipecreate.html\n  Here are some relevant articles from there on system traversal:\n  Simple MEP System Traversal -- http://thebuildingcoder.typepad.com/blog/2013/02/simple-mep-system-traversal.html\n  Traversing and Exporting all MEP System Graphs -- http://thebuildingcoder.typepad.com/blog/2016/06/traversing-and-exporting-all-mep-system-graphs.html\n\n- connect RevitLookup with RevitPythonShell\n  Chuong Ho breathed new life into the faltering RevitPythonShell,\n  updating it for Revit 2023, integrated a CI pipeline, and adding new powerful functionality by hooking it up directly with RevitLookup\n  so, now you can snoop your database in an interactive REPL commandline console\n  database explorastion power par excellence, never previously available to such an extent\n  \n  Automatic Process CI/CD Maintain Support 2023 #122\n  https://github.com/architecture-building-systems/revitpythonshell/pull/122\n  \n  Need create a branch dev to collaborator #123\n  https://github.com/architecture-building-systems/revitpythonshell/issues/123\n\n  Update Support use method from revitlookup to snoop #124\n  https://github.com/architecture-building-systems/revitpythonshell/pull/124\n  \n  demo video\n  https://user-images.githubusercontent.com/31106432/176649030-d07dc40e-8662-47af-8a0b-528128c45384.gif\n\n- do_while_joke.jpg\n\ntwitter:\n\nGetting started with the Revit MEP API, and going forward with RevitPythonShell joiining forces with RevitLookup in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/rps_snoop\n\nBack to the beginning with a quick look at the Revit MEP API, and a great step forward for RevitPythonShell\n&ndash; Revit MEP API intro\n&ndash; RevitPythonShell RevitLookup nuptials...\n\nlinkedin:\n\nGetting started with the Revit MEP API, and going forward with RevitPythonShell joining forces with RevitLookup in the #RevitAPI \n\nhttps://autode.sk/rps_snoop\n\n- Revit MEP API intro\n- RevitPythonShell RevitLookup nuptials...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1957_rps_lookup_mep_start",
    "header_text": "MEP API Intro and RevitPythonShell Lookup Nuptials",
    "local_header_href": "#mep-api-intro-and-revitpythonshell-lookup-nuptials",
    "chunk_text": "### MEP API Intro and RevitPythonShell Lookup Nuptials\n\nBack to the beginning with a quick look at the Revit MEP API, and a great step forward for RevitPythonShell:\n\n- [Revit MEP API intro](#2)\n- [RevitPythonShell RevitLookup nuptials](#3)"
  },
  {
    "original_filename": "1957_rps_lookup_mep_start",
    "header_text": "Revit MEP API Intro",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Revit MEP API Intro\n\n**Question:** I am trying to develop some Revit add-ins.\n\nI would like to know how to enable the user to insert a predefined MEP component in a model and how to detect programmatically whether two components are connected, for example two pipes.\n\nCould you please let me know where I can find the related information?\n\nDo you have any related examples to share with me?  \n\n**Answer:** Welcome to the Revit API!\n\nThe Building Coder shares a wealth of information\non [getting started with the Revit API](https://thebuildingcoder.typepad.com/blog/about-the-author.html#2).\n\nHowever, before you start even thinking about programming, it is important to gain some fundamental understanding of the BIM, the BIM paradigm and BIM processes.\n\nFurthermore, you should determine in detail exactly how to address your task manually through the end user interface making use of the optimal workflows and respecting best practices, before you start trying to automate the task.\n\nAll the questions you raise are addressed by and demonstrated in the Revit SDK samples.\nThe SDK can be downloaded from\nthe official Autodesk [Revit developer page](https://www.autodesk.com/developer-network/platform-technologies/revit).\n\nMEP components are represented by family instances, so you can simply use generic code to insert a family instance.\n\nHowever, there are also many MEP-specific enhancements that may or may not apply.\n\nTo determine whether two pipes are connected, you simply query them for their connectors, represented by\nthe [`Connector` class](https://www.revitapidocs.com/2022/11e07082-b3f2-26a1-de79-16535f44716c.htm).\n\nIt has\na [ConnectorManager property](https://www.revitapidocs.com/2022/61339b71-5d90-c53d-bec4-2209bab97787.htm).\n\nThat in turn proves access to the neighbouring parts' connectors.\n\nSystem traversal is also demonstrated by some of the SDK samples.\n\nIn addition to the official sample material from Autodesk, you can also check out The Building Coder blog.\nMy favourite articles from there on connecting pipes is\nthe series exploring [how to create a rolling offset](http://thebuildingcoder.typepad.com/blog/2014/01/final-rolling-offset-using-pipecreate.html).\n\nHere are two other articles from The Building Coder on system traversal:\n\n- [Simple MEP system traversal](http://thebuildingcoder.typepad.com/blog/2013/02/simple-mep-system-traversal.html)\n- [Traversing and exporting all MEP system graphs](http://thebuildingcoder.typepad.com/blog/2016/06/traversing-and-exporting-all-mep-system-graphs.html)"
  },
  {
    "original_filename": "1957_rps_lookup_mep_start",
    "header_text": "RevitPythonShell RevitLookup Nuptials",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> RevitPythonShell RevitLookup Nuptials\n\n[RevitPythonShell](https://github.com/architecture-building-systems/revitpythonshell) was\napparently nearing the end of its active life when its author Daren Thomas moved on to other things.\n\nNow new life has been breathed into the faltering project by\nChuong Ho or [Hồ Văn Chương](https://chuongmep.com), with numerous contributions:\n\n- Updated for Revit 2023\n- Implemented a [CI pipeline](https://en.wikipedia.org/wiki/Continuous_integration) for continuous integration\n- Added new powerful functionality by hooking it up directly with RevitLookup\n\nSo, now you can snoop your database directly in an interactive REPL command line console,\na so-called [read–eval–print loop](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop),\nproviding powerful database exploration functionality par excellence, never previously available to such an extent.\n\nHere are some of the pull requests and issues implementing this:\n\n- [Automatic Process CI/CD Maintain Support 2023 #122](https://github.com/architecture-building-systems/revitpythonshell/pull/122)\n- [Need create a branch dev to collaborator #123](https://github.com/architecture-building-systems/revitpythonshell/issues/123)\n- [Update Support use method from revitlookup to snoop #124](https://github.com/architecture-building-systems/revitpythonshell/pull/124)\n\nCheck out the demo video\nof [RevitLookup snooping from the Python command line](https://user-images.githubusercontent.com/31106432/176649030-d07dc40e-8662-47af-8a0b-528128c45384.gif) online\nor in this [local copy](img/rps_lookup_snoop.gif).\n\nThe new [RevitPythonShell release 1.0.1](https://github.com/architecture-building-systems/revitpythonshell/releases/tag/1.0.1) includes:\n\n- Add Process CI/CD Automatic\n- Fix Problem show owner window\n- Upgrade process use SDK Style .NET6\n- Improve Codebase build button\n- Fix minimize form window\n- Support installation in one single file msi from Revit 2018 to Revit 2023\n- Version number changed due to single msi installer for all versions, e.g., from 2023.0.0 to 1.0.0\n\nHere is a direct link to the installer:\n\n- [RevitPythonShell-1.0.1.msi](https://github.com/architecture-building-systems/revitpythonshell/releases/download/1.0.1/RevitPythonShell-1.0.1.msi)\n\nEver so many thanks to Chuong Ho for this brilliant work!\n\nTalking about REPL and loops, watch out...\n\n<center>\n<img src=\"img/do_while_joke.jpg\" alt=\"While versus do-while\" title=\"While versus do-while\" width=\"500\"/> <!-- 1000 -->\n</center>"
  }
]