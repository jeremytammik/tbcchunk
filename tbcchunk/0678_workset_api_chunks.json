[
  {
    "original_filename": "0678_workset_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0678_workset_api",
    "header_text": "Read-only Workset API",
    "local_header_href": "#read-only-workset-api",
    "chunk_text": "<h3>Read-only Workset API</h3><p>Another one of the new \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/revit-2012-api-features.html\">\nRevit 2012 API features</a> that\n\nwe still never had a detailed look at is the worksharing API, a comprehensive read-only API to worksharing features, access the list of worksets, find out what elements are in a workset, who borrowed what, whether an element went out of date with central, etc.\n\nHere is a quick Q &amp; A on some basic aspects of that API:\n\n<p><strong>Question:</strong> I know that the built-in parameter ELEM_PARTITION_PARAM identifies the workset of an element in some manner.\nIts value is an integer.\nHow can I retrieve the workset name from this value?\n\n\n<p><strong>Answer:</strong> The integer value stored in the parameter is actually the workset id, which is used as a key in the workset table.\n\n<p>To access the workset, you therefore first have to \nobtain the document workset table, for instance via the GetWorksetTable method:\n\n<pre class=\"code\">\n  <span class=\"teal\">WorksetTable</span> worksetTable\n    = doc.GetWorksetTable();\n</pre>\n<p>You can then create a workset id from the parameter value and access the workset of a given element 'e' using that:\n\n<pre class=\"code\">\n  <span class=\"teal\">Parameter</span> p = e.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.ELEM_PARTITION_PARAM );\n \n  <span class=\"blue\">int</span> paramValue = param.AsInteger();\n \n  <span class=\"teal\">WorksetId</span> wid = <span class=\"blue\">new</span> <span class=\"teal\">WorksetId</span>( paramValue );\n \n  <span class=\"teal\">Workset</span> workset = <span class=\"teal\">WorksetId</span>.InvalidWorksetId == wid\n    ? <span class=\"blue\">null</span>\n    : worksetTable.GetWorkset( wid );\n</pre>\n<p>Just like a standard Revit database element, the workset provides a property returning its name.\n\n<p>There is also a simpler direct way to access the workset of an element, however, using the document method GetWorksetId, which returns the workset id for a given element id:\n\n<pre class=\"code\">\n  <span class=\"teal\">WorksetId</span> wid = doc.GetWorksetId( e.Id );\n</pre>\n<p><strong>Question:</strong> How can I iterate the workset table to obtain a list of all the worksets defined in the project? \n\n<p><strong>Answer:</strong> There are dedicated FilteredWorksetCollector and WorksetFilter classes for that purpose.\nHere is some sample code demonstrating their use:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredWorksetCollector</span> coll\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredWorksetCollector</span>( doc );\n \n  <span class=\"green\">// You may want to filter them...</span>\n \n  <span class=\"green\">//coll.OfKind(WorksetKind.UserWorkset);</span>\n \n  StringBuilder worksetNames = <span class=\"blue\">new</span> StringBuilder();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Workset</span> workset <span class=\"blue\">in</span> coll )\n  {\n    worksetNames.AppendFormat( <span class=\"maroon\">\"{0}: {1}\\n\"</span>,\n      workset.Name, workset.Kind );\n  }\n \n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Worksets\"</span>,\n    worksetNames.ToString() );\n</pre>\n<p>As mentioned in the comment, please note that the FilteredWorksetCollector class provides an OfKind method which can be used to limit the filters returned to a given workset kind, e.g. to UserWorkset only, i.e. worksets defined by users, including the two default Revit ones.\n</p></p></p></p></p></p></p></p></p></p>"
  }
]