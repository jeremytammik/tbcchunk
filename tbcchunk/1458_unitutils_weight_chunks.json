[
  {
    "original_filename": "1458_unitutils_weight",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<title>The Building Coder</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"3dwc.css\"/>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js?autoload=true\" defer=\"defer\"></script>\n</head>\n\n<!---\n\n11951105 [Problems converting units for Unit Weight]\n\nREVIT-94710 [API: UnitUtils.ConvertFromInternalUnits DisplayUnitType.DUT_KILOGRAMS_PER_CUBIC_METER error -- 11951105]\n\nUnitUtils Converting Units for Unit Weight #revitapi #3dwebcoder @AutodeskRevit @AutodeskForge #aec #bim\n\nHere comes a quick clarification of the units used for the <code>UnitWeight</code> built-in parameter <code>PHY_MATERIAL_PARAM_UNIT_WEIGHT</code>. One example usage is to calculate the total weight of rebars in a project...\n\n-->"
  },
  {
    "original_filename": "1458_unitutils_weight",
    "header_text": "UnitUtils Converting Units for Unit Weight",
    "local_header_href": "#unitutils-converting-units-for-unit-weight",
    "chunk_text": "### UnitUtils Converting Units for Unit Weight\n\nHere comes a quick clarification of the units used for the `UnitWeight` built-in parameter `PHY_MATERIAL_PARAM_UNIT_WEIGHT`.\n\nOne example usage is to calculate the total weight of rebars in a project.\n\nA developer encountered the following issue in that process:"
  },
  {
    "original_filename": "1458_unitutils_weight",
    "header_text": "<a name=\"2\"></a>Question",
    "local_header_href": "#a-name2aquestion",
    "chunk_text": "#### <a name=\"2\"></a>Question\n\nMy Revit add-in calculates total weight of rebars in the document using the `UnitWeight` parameter from the material.\n\nDisplayed in Revit, I write a value of 7850 Kg/m3 (kg/cubicmeters).\n\nWhen using this parameter in code, I assume that the value I get from the parameter is in internal units, which I assume to be kiloNewton / cubic feet.\n\nSo when I use this, I expect to be able to use the UnitUtils.\n\nThis snapshot from the values displayed by the Visual Studio debugger immediate window show the original value and the converted ones:\n\n<pre>\n  var parameterVaule = Parameter.AsDouble();\n  7154.4631104000009\n\n  var converted = UnitUtils.ConvertFromInternalUnits(parameterVaule ,Autodesk.Revit.DB.DisplayUnitType.DUT_KILONEWTONS_PER_CUBIC_METER);\n  77.01 => This is a correct value.\n\n  var converted2 = UnitUtils.ConvertFromInternalUnits(parameterVaule ,Autodesk.Revit.DB.DisplayUnitType.DUT_KILOGRAMS_PER_CUBIC_METER);\n  252657.48031496062 => ??? this not correct!\n</pre>\n\nThe value string shows 77 kN/cubicmeters, which by manual calculation is 7849.13 Kg/cubicmeters.\n\nWhy doesn't the `UnitUtils` class return this value?\n\nI assume that the method `ConvertFromInternalUnits` should be able to convert from the default internal units to the wanted unit?\n\nIs this a case where I can't trust the `UnitUtils`?"
  },
  {
    "original_filename": "1458_unitutils_weight",
    "header_text": "<a name=\"3\"></a>Sample Code and Workaround",
    "local_header_href": "#a-name3asample-code-and-workaround",
    "chunk_text": "#### <a name=\"3\"></a>Sample Code and Workaround\n\nHere is a snippet from the calculation of unit weight from a material.\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Get&nbsp;the&nbsp;unit&nbsp;weight&nbsp;of&nbsp;a&nbsp;material.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">internal</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">double</span>&nbsp;GetMaterialEgenvekt(&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,&nbsp;\n&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;material,&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;rebarelement&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;rType&nbsp;=&nbsp;rebarelement.Document.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;rebarelement.GetTypeId()&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">ElementType</span>;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;paramMaterial&nbsp;=&nbsp;rType.get_Parameter(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.MATERIAL_ID_PARAM&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;mat&nbsp;=&nbsp;doc.GetElement(&nbsp;paramMaterial\n&nbsp;&nbsp;&nbsp;&nbsp;.AsElementId()&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Material</span>;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;egenvekt&nbsp;=&nbsp;0;\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;mat&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)&nbsp;<span style=\"color:blue;\">return</span>&nbsp;egenvekt;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;property&nbsp;=&nbsp;doc.GetElement(\n&nbsp;&nbsp;&nbsp;&nbsp;mat.StructuralAssetId&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">PropertySetElement</span>;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;property&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;unitWeightParam&nbsp;=&nbsp;property.get_Parameter(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.PHY_MATERIAL_PARAM_UNIT_WEIGHT&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Not&nbsp;In&nbsp;Use&nbsp;-&nbsp;gives&nbsp;wrong&nbsp;value&nbsp;in&nbsp;metric&nbsp;unit.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;unitWeight&nbsp;=&nbsp;<span style=\"color:#2b91af;\">UnitUtils</span>.ConvertFromInternalUnits(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unitWeightParam.AsDouble(),&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DisplayUnitType</span>.DUT_KILOGRAMS_PER_CUBIC_METER&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Manual&nbsp;calculation.&nbsp;In&nbsp;use,&nbsp;and&nbsp;calculates&nbsp;correct.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;egenvektFraMaterial&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;EgenVektFraNewtonPerSquareFootMeter(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unitWeightParam.AsDouble()&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!(&nbsp;egenvekt&nbsp;&gt;&nbsp;0&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egenvekt&nbsp;=&nbsp;egenvektFraMaterial;\n&nbsp;&nbsp;}\n&nbsp;&nbsp;material&nbsp;=&nbsp;mat.Name;\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;egenvekt;\n}\n</pre>\n\nThe manual calculation in `EgenVektFraNewtonPerSquareFootMeter` is implemented like this:\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Calculate&nbsp;the&nbsp;unit&nbsp;weight&nbsp;from&nbsp;NewtonPerSquareFootMeter</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">double</span>&nbsp;EgenVektFraNewtonPerSquareFootMeter(&nbsp;\n&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;unitweight&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;egenvekt&nbsp;=&nbsp;unitweight&nbsp;/&nbsp;9.81F;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;meterPerFot&nbsp;=&nbsp;1000&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;GeoHelper.FootMillimeterKonstant;\n \n&nbsp;&nbsp;egenvekt&nbsp;=&nbsp;egenvekt&nbsp;*&nbsp;<span style=\"color:#2b91af;\">Math</span>.Pow(&nbsp;meterPerFot,&nbsp;2&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;egenvekt;\n}\n</pre>\n\nThe constant `GeoHelper.FootMillimeterKonstant` is defined thus;\n\n<pre class=\"code\">\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">double</span>&nbsp;FootMillimeterKonstant\n&nbsp;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Math</span>.Round(&nbsp;304.8,&nbsp;1&nbsp;);\n</pre>\n\nHope we can sort out the problem =)\n\nI use the manual way today, after a heads up from a customer who ordered about 900 Kg too little rebars in a project!"
  },
  {
    "original_filename": "1458_unitutils_weight",
    "header_text": "<a name=\"4\"></a>Explanation",
    "local_header_href": "#a-name4aexplanation",
    "chunk_text": "#### <a name=\"4\"></a>Explanation\n\nThe development team took a look at this issue and provided the following explanation:\n\n`UnitUtils.ConvertFromInternalUnits` does not convert from UnitWeight (77 kN/cubicmeters) to Density (7849.13 Kg/cubicmeters).\n\n`UnitUtils.ConvertFromInternalUnits` displays a value from Revit internal units (kg/(ft²·s²) for UnitWeight and kg/ft³ for Density) to a compatible unit (kN/cubicmeters for UnitWeight and Kg/cubicmeters for Density).\n\nIn detail:\n\n- UnitWeight is measured in kN/m3\n- Density is measured in kg/m3\n\nUnitWeight and Density are two different units.\nSo it does not make sense to display some UnitWeight values in kg/m3 &ndash; there are different units.\n\nTherefore: \n\n<pre class=\"code\">\n  // Does not work (different units: value in\n  // UnitWeight units kg/(ft²·s²) displayed as\n  // value in Density units kg/m³)\n  \n  var unitWeight = UnitUtils.ConvertFromInternalUnits(\n    unitWeightParam.AsDouble(),\n    DisplayUnitType.DUT_KILOGRAMS_PER_CUBIC_METER);\n</pre>\n\nand \n\n<pre class=\"code\">\n  // Works (same units: value in UnitWeight units\n  // kg/(ft²·s²) displayed as value in UnitWeight\n  // units kN/m3)\n  \n  var converted2 = UnitUtils.ConvertFromInternalUnits(\n    unitWeightParam.AsDouble(),\n    DisplayUnitType.DUT_KILONEWTONS_PER_CUBIC_METER);\n</pre>\n\nIf you want to obtain the density in kg/m3 you can use the `PHY_MATERIAL_PARAM_STRUCTURAL_DENSITY` built-in parameter:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">var</span>&nbsp;densityParam&nbsp;=&nbsp;property.get_Parameter(\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.PHY_MATERIAL_PARAM_STRUCTURAL_DENSITY&nbsp;);\n \n<span style=\"color:green;\">//&nbsp;Works&nbsp;(same&nbsp;units:&nbsp;value&nbsp;in&nbsp;Density&nbsp;units&nbsp;kg/ft³</span>\n<span style=\"color:green;\">//&nbsp;displayed&nbsp;as&nbsp;value&nbsp;in&nbsp;Density&nbsp;units&nbsp;kg/m³)</span>\n \n<span style=\"color:blue;\">var</span>&nbsp;converted&nbsp;=&nbsp;<span style=\"color:#2b91af;\">UnitUtils</span>.ConvertFromInternalUnits(\n&nbsp;&nbsp;densityParam.AsDouble(),\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">DisplayUnitType</span>.DUT_KILOGRAMS_PER_CUBIC_METER&nbsp;);\n \n--&gt;&nbsp;converted&nbsp;=&nbsp;7849.04687&nbsp;<span style=\"color:blue;\">double</span>\n</pre>\n\nOr use the formula as you did:\n\n<pre class=\"code\">\n  UnitWeight = Density * g\n</pre>\n\nI hope this clarifies.\n\nHappily, you already solved this properly yourself."
  }
]