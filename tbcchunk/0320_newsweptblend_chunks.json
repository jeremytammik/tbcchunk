[
  {
    "original_filename": "0320_newsweptblend",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0320_newsweptblend",
    "header_text": "NewSweptBlend",
    "local_header_href": "#newsweptblend",
    "chunk_text": "<h3>NewSweptBlend</h3><p>I am still awfully busy preparing for upcoming Revit API trainings and should be working more for that and less on the blog, actually.\nAnyway, here an important nugget if information from another case handled by my colleagues Phil Xia and Saikat Bhattacharya on how to set up the input profile for the NewSweptBlend method.\nWe already described the recommended approach for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/debug-geometric-form-creation.html\">\ndebugging form creation problems</a>,\n\nand it obviously applies to the NewSweptBlend method as well, but the information provided here concerning the input curves to the NewSweptBlend method is required in addition to that and not provided in the Revit API documentation.\n\n<p><strong>Question:</strong> The following method CreateNewSweptBlend based on the GenericModelCreation SDK sample CreateGenericModel method creates a valid swept blend form:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> CreateNewSweptBlend( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"blue\">if</span>( !doc.IsFamilyDocument )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( \n      <span class=\"maroon\">\"Please run this command in a family document.\"</span> );\n  }\n  <span class=\"teal\">Application</span> app = doc.Application;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Application</span> creapp \n    = app.Create;\n \n  <span class=\"teal\">CurveArrArray</span> curvess0 \n    = creapp.NewCurveArrArray();\n \n  <span class=\"teal\">CurveArray</span> curves0 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n  <span class=\"teal\">XYZ</span> p00 = creapp.NewXYZ( 0, 7.5, 0 );\n  <span class=\"teal\">XYZ</span> p01 = creapp.NewXYZ( 0, 15, 0 );\n \n  <span class=\"green\">// changing Z to 1 in the following line fails:</span>\n \n  <span class=\"teal\">XYZ</span> p02 = creapp.NewXYZ( -1, 10, 0 );\n \n  curves0.Append( creapp.NewLineBound( p00, p01 ) );\n  curves0.Append( creapp.NewLineBound( p01, p02 ) );\n  curves0.Append( creapp.NewLineBound( p02, p00 ) );\n  curvess0.Append( curves0 );\n \n  <span class=\"teal\">CurveArrArray</span> curvess1 = creapp.NewCurveArrArray();\n  <span class=\"teal\">CurveArray</span> curves1 = <span class=\"blue\">new</span> <span class=\"teal\">CurveArray</span>();\n \n  <span class=\"teal\">XYZ</span> p10 = creapp.NewXYZ( 7.5, 0, 0 );\n  <span class=\"teal\">XYZ</span> p11 = creapp.NewXYZ( 15, 0, 0 );\n \n  <span class=\"green\">// changing the Z value in the following line fails:</span>\n \n  <span class=\"teal\">XYZ</span> p12 = creapp.NewXYZ( 10, -1, 0 );\n \n  curves1.Append( creapp.NewLineBound( p10, p11 ) );\n  curves1.Append( creapp.NewLineBound( p11, p12 ) );\n  curves1.Append( creapp.NewLineBound( p12, p10 ) );\n  curvess1.Append( curves1 );\n \n  <span class=\"teal\">SweepProfile</span> sweepProfile0 \n    = creapp.NewCurveLoopsProfile( curvess0 );\n \n  <span class=\"teal\">SweepProfile</span> sweepProfile1 \n    = creapp.NewCurveLoopsProfile( curvess1 );\n \n  <span class=\"teal\">XYZ</span> pnt10 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 5, 0, 0 );\n  <span class=\"teal\">XYZ</span> pnt11 = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0, 20, 0 );\n  <span class=\"teal\">Curve</span> curve = creapp.NewLineBound( pnt10, pnt11 );\n \n  <span class=\"teal\">XYZ</span> normal = <span class=\"teal\">XYZ</span>.BasisZ;\n \n  <span class=\"teal\">SketchPlane</span> splane = CreateSketchPlane( \n    doc, normal, <span class=\"teal\">XYZ</span>.Zero );\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">SweptBlend</span> sweptBlend = doc.FamilyCreate.NewSweptBlend( \n      <span class=\"blue\">true</span>, curve, splane, sweepProfile0, sweepProfile1 );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">Util</span>.ErrorMsg( <span class=\"maroon\">\"NewSweptBlend exception: \"</span> + ex.Message );\n  }\n  <span class=\"blue\">return</span>;\n}\n</pre>\n<p>But if I change the Z coordinate value of points p02 and p12 to 1 instead of 0, it throws an invalid operation exception. \nWhich rule is being broken when I change the Z value of both p02 and p12, please?\nDoes the curve have to be perpendicular to the sweep profiles?\n\n<p><strong>Answer:</strong> First of all, here is a summary of the suggestion we already made for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/debug-geometric-form-creation.html\">\ndebugging form creation problems</a>:\n\none way to investigate issues like this is to change the code so that it creates model lines instead of only internal lines and remove the call to NewSweptBlend.\nThen you can try selecting the model lines to manually create the blend in the user interface. \nIf the operation succeeds through the UI and not through the API, that would indicate a problem in the API.\n\n<p>In this case, the problem is neither in the user interface nor the API, but simply in the definition of the input curves and the NewSweptBlend method documentation.\nThe Revit API help file RevitAPI.chm states the following requirements for the two input profiles bottomProfile and topProfile:\n\n<ul>\n<li>Type: Autodesk.Revit.DB.SweepProfile.\n<li>It should consist of only one curve loop. \n<li>The input profile must be in one plane.\n</li></li></li></ul>\n<p>After some research and discussion, we determined that the input profile curve loop must be in the XY plane, implying that the Z coordinates must all be zero. \nRevit will calculate the profile planes with the input path curve and then transforms the XY plane curve loop to the right profile plane internally. \nIn other words, you need to define the curve profiles to be 2D and located in the XY plane, i.e. set the XYZ input points' Z coordinates to zero.\nUnfortunately, the documentation does not mention the XY plane, it just says that the curves should be in one plane.\nOnce I set all the Z coordinates to zero, it works fine.\n\n<p>Since we did not previously have any examples of calls to NewSeptBlend in the Building Coder samples, I added a new command CmdNewSweptBlend to it.\nHere is\n\n<a href=\"zip/bc11064.zip\">\nversion 1.1.0.64</a>\n\nof the complete Building Coder source code and Visual Studio solution including the new CmdNewSweptBlend external command.</p>\n<p>Many thanks to Phil and Saikat for this solution! \n</p></p></p></p></p></p></p>"
  }
]