[
  {
    "original_filename": "1306_3dwc_svg_01",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1306_3dwc_svg_01",
    "header_text": "Sending a Room Boundary to an SVG Node Web Server",
    "local_header_href": "#sending-a-room-boundary-to-an-svg-node-web-server",
    "chunk_text": "<h3>Sending a Room Boundary to an SVG Node Web Server</h3><p>Yesterday, I implemented and published a simple\n\n<a href=\"http://the3dwebcoder.typepad.com/blog/2015/04/displaying-2d-graphics-via-a-node-server.html\">\nNode.js web server to display an SVG polygon</a>.</p><p>In that post, you can define the polygon path manually in a text box and invoke the web server by clicking a button.</p><p>Obviously, the same system can be driven automatically.</p><p>Let's look at a way to extract the boundary polygon or a Revit room element, convert that to SVG, and invoke the web server to display it.</p><p>Here is the room element in Revit, intentionally weirdly shaped:</p><center>\n<img alt=\"Weird room in Revit\" src=\"img/room_svg_01_model.png\" width=\"590\"/>\n</center><p>I invoke my new sweet SvgExport Revit add-in in that model, and. lo and behold, up pops the web browser displaying the result returned by my Heroku-hosted Node.js web server:</p><center>\n<img alt=\"Weird room boundary in SVG\" src=\"img/room_svg_01_result.png\" width=\"500\"/>\n</center><p>How is this achieved?</p><p>Well, the\n\n<a href=\"http://the3dwebcoder.typepad.com\">\nThe 3D Web Coder</a> discussion\n\nyesterday explains how the\n\n<a href=\"http://the3dwebcoder.typepad.com/blog/2015/04/displaying-2d-graphics-via-a-node-server.html\">\nNode.js web server to display an SVG polygon</a> is\n\nimplemented and provides a simple interactive user interface to test it.</p><p>The SvgExport Revit add-in performs the following steps to drive it:</p><ul>\n<li>Select a room in the model – <code>GetRoom</code>.</li>\n<ul>\n<li>If the model only contains one spatial element and it happens to be a room, select that.</li>\n<li>Otherwise, if any elements have been pre-selected, pick the first room encountered among them.</li>\n<li>Otherwise, prompt the user to interactively select a room or a room tag.</li>\n</ul>\n<li>Determine its outer boundary loop.</li>\n<li>Convert that to an SVG path definition.</li>\n<li>Flip the Y coordinates to toggle the up direction.</li>\n<li>Invoke the web server locally or globally.</li>\n</ul><p>Here is the entire implementation of the SvgExport external command and its support methods:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> System.Linq;\n<span class=\"blue\">using</span> System.Text;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.DB.Architecture;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Revit.UI.Selection;\n<span class=\"blue\">using</span> <span class=\"teal\">BoundarySegment</span> = Autodesk.Revit.DB.<span class=\"teal\">BoundarySegment</span>;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> SvgExport\n{\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command01</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">const</span> <span class=\"blue\">int</span> _target_square_size = 100;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Allow selection of room elements only.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">class</span> <span class=\"teal\">RoomSelectionFilter</span> : <span class=\"teal\">ISelectionFilter</span>\n    {\n      <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowElement( <span class=\"teal\">Element</span> e )\n      {\n        <span class=\"blue\">return</span> e <span class=\"blue\">is</span> <span class=\"teal\">Room</span>;\n      }\n \n      <span class=\"blue\">public</span> <span class=\"blue\">bool</span> AllowReference( <span class=\"teal\">Reference</span> r, <span class=\"teal\">XYZ</span> p )\n      {\n        <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Get a room from the given document.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> If there is only one single room in the entire</span>\n    <span class=\"gray\">///</span><span class=\"green\"> model, return that with no further ado. </span>\n    <span class=\"gray\">///</span><span class=\"green\"> Otherwise, if any elements have been pre-selected,</span>\n    <span class=\"gray\">///</span><span class=\"green\"> pick the first room encountered among them.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Otherwise, prompt the user to interactively </span>\n    <span class=\"gray\">///</span><span class=\"green\"> select a room or a room tag.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"teal\">Result</span> GetRoom( <span class=\"teal\">UIDocument</span> uidoc, <span class=\"blue\">out</span> <span class=\"teal\">Room</span> room )\n    {\n      room = <span class=\"blue\">null</span>;\n \n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"green\">// Get all rooms in the model.</span>\n \n      <span class=\"teal\">FilteredElementCollector</span> rooms\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">SpatialElement</span> ) );\n \n      <span class=\"blue\">if</span>( 1 == rooms.Count()\n        &amp;&amp; rooms.FirstElement() <span class=\"blue\">is</span> <span class=\"teal\">Room</span> )\n      {\n        <span class=\"green\">// If there is only one spatial element</span>\n        <span class=\"green\">// and that is a room, pick that.</span>\n \n        room = rooms.FirstElement() <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n        <span class=\"green\">// Check the preselacted elements.</span>\n \n        <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n          = sel.GetElementIds();\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n        {\n          <span class=\"teal\">Element</span> e = doc.GetElement( id );\n          <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">Room</span> )\n          {\n            room = e <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n            <span class=\"blue\">break</span>;\n          }\n          <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">RoomTag</span> )\n          {\n            room = ( e <span class=\"blue\">as</span> <span class=\"teal\">RoomTag</span> ).Room;\n            <span class=\"blue\">break</span>;\n          }\n        }\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == room )\n        {\n          <span class=\"green\">// Prompt for interactive selection.</span>\n \n          <span class=\"blue\">try</span>\n          {\n            <span class=\"teal\">Reference</span> r = sel.PickObject(\n              <span class=\"teal\">ObjectType</span>.Element,\n              <span class=\"blue\">new</span> <span class=\"teal\">RoomSelectionFilter</span>(),\n              <span class=\"maroon\">\"Please select pick a room\"</span> );\n \n            room = doc.GetElement( r.ElementId )\n              <span class=\"blue\">as</span> <span class=\"teal\">Room</span>;\n          }\n          <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n            .<span class=\"teal\">OperationCanceledException</span> )\n          {\n            <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n          }\n        }\n      }\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Return an SVG representation of the</span>\n    <span class=\"gray\">///</span><span class=\"green\"> given XYZ point scaled, offset and</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Y flipped to the target square size.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">string</span> GetSvgPointFrom(\n      <span class=\"teal\">XYZ</span> p,\n      <span class=\"teal\">XYZ</span> pmid,\n      <span class=\"blue\">double</span> scale )\n    {\n      p -= pmid;\n      p *= scale;\n      <span class=\"blue\">int</span> x = (<span class=\"blue\">int</span>) ( p.X + 0.5 );\n      <span class=\"blue\">int</span> y = (<span class=\"blue\">int</span>) ( p.Y + 0.5 );\n \n      <span class=\"green\">// The Revit Y coordinate points upwards,</span>\n      <span class=\"green\">// the SVG one down.</span>\n \n      y = -y;\n \n      x += _target_square_size / 2;\n      y += _target_square_size / 2;\n      <span class=\"blue\">return</span> x.ToString() + <span class=\"maroon\">\" \"</span> + y.ToString();\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Generate and return an SVG path definition to</span>\n    <span class=\"gray\">///</span><span class=\"green\"> represent the given room boundary loop, scaled </span>\n    <span class=\"gray\">///</span><span class=\"green\"> from the given bounding box to fit into a </span>\n    <span class=\"gray\">///</span><span class=\"green\"> 100 x 100 canvas.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">string</span> GetSvgPathFrom(\n      <span class=\"teal\">BoundingBoxXYZ</span> bb,\n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt; loop )\n    {\n      <span class=\"green\">// Determine scaling and offsets to transform</span>\n      <span class=\"green\">// from bounding box to (0,0)-(100,100).</span>\n \n      <span class=\"teal\">XYZ</span> pmin = bb.Min;\n      <span class=\"teal\">XYZ</span> pmax = bb.Max;\n      <span class=\"teal\">XYZ</span> vsize = pmax - pmin;\n      <span class=\"teal\">XYZ</span> pmid = pmin + 0.5 * vsize;\n      <span class=\"blue\">double</span> size = <span class=\"teal\">Math</span>.Max( vsize.X, vsize.Y );\n      <span class=\"blue\">double</span> scale = _target_square_size / size;\n \n      <span class=\"teal\">StringBuilder</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StringBuilder</span>();\n \n      <span class=\"blue\">int</span> nSegments = loop.Count;\n \n      <span class=\"teal\">XYZ</span> p0 = <span class=\"blue\">null</span>; <span class=\"green\">// loop start point</span>\n      <span class=\"teal\">XYZ</span> p; <span class=\"green\">// segment start point</span>\n      <span class=\"teal\">XYZ</span> q = <span class=\"blue\">null</span>; <span class=\"green\">// segment end point</span>\n \n      <span class=\"blue\">int</span> x, y;\n      <span class=\"blue\">string</span> sxy;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">BoundarySegment</span> seg <span class=\"blue\">in</span> loop )\n      {\n        <span class=\"green\">// Todo: handle non-linear curve.</span>\n        <span class=\"green\">// Especially: if two long lines have a </span>\n        <span class=\"green\">// short arc in between them, skip the arc</span>\n        <span class=\"green\">// and extend both lines.</span>\n \n        p = seg.Curve.GetEndPoint( 0 );\n \n        <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> == q || q.IsAlmostEqualTo( p ),\n          <span class=\"maroon\">\"expected last endpoint to equal current start point\"</span> );\n \n        q = seg.Curve.GetEndPoint( 1 );\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n        {\n          p0 = p; <span class=\"green\">// save loop start point</span>\n \n          s.Append( <span class=\"maroon\">\"M\"</span>\n            + GetSvgPointFrom( p, pmid, scale ) );\n        }\n        s.Append( <span class=\"maroon\">\"L\"</span>\n          + GetSvgPointFrom( q, pmid, scale ) );\n      }\n      s.Append( <span class=\"maroon\">\"Z\"</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( q.IsAlmostEqualTo( p0 ),\n        <span class=\"maroon\">\"expected last endpoint to equal loop start point\"</span> );\n \n      <span class=\"blue\">return</span> s.ToString();\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Invoke the SVG node.js web server.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Use a local or global base URL and append</span>\n    <span class=\"gray\">///</span><span class=\"green\"> the SVG path definition as a query string.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Compare this with the JavaScript version used in</span>\n    <span class=\"gray\">///</span><span class=\"green\"> http://the3dwebcoder.typepad.com/blog/2015/04/displaying-2d-graphics-via-a-node-server.html</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> DisplaySvg( <span class=\"blue\">string</span> path_data )\n    {\n      <span class=\"blue\">var</span> local = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">var</span> base_url = local\n        ? <span class=\"maroon\">\"http://127.0.0.1:5000\"</span>\n        : <span class=\"maroon\">\"https://shielded-hamlet-1585.herokuapp.com\"</span>;\n \n      <span class=\"blue\">var</span> d = path_data.Replace( <span class=\"maroon\">' '</span>, <span class=\"maroon\">'+'</span> );\n \n      <span class=\"blue\">var</span> query_string = <span class=\"maroon\">\"d=\"</span> + d;\n \n      <span class=\"blue\">string</span> url = base_url + <span class=\"maroon\">'?'</span> + query_string;\n \n      System.Diagnostics.<span class=\"teal\">Process</span>.Start( url );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Application</span> app = uiapp.Application;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"teal\">Room</span> room = <span class=\"blue\">null</span>;\n      <span class=\"teal\">Result</span> rc = GetRoom( uidoc, <span class=\"blue\">out</span> room );\n \n      <span class=\"teal\">SpatialElementBoundaryOptions</span> opt\n        = <span class=\"blue\">new</span> <span class=\"teal\">SpatialElementBoundaryOptions</span>();\n \n      opt.SpatialElementBoundaryLocation =\n        <span class=\"teal\">SpatialElementBoundaryLocation</span>.Center; <span class=\"green\">// loops closed</span>\n      <span class=\"green\">//SpatialElementBoundaryLocation.Finish; // loops not closed</span>\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">IList</span>&lt;<span class=\"teal\">BoundarySegment</span>&gt;&gt; loops\n        = room.GetBoundarySegments( opt );\n \n      <span class=\"blue\">int</span> nLoops = loops.Count;\n \n      <span class=\"teal\">BoundingBoxXYZ</span> bb = room.get_BoundingBox( <span class=\"blue\">null</span> );\n \n      <span class=\"blue\">string</span> path_data = GetSvgPathFrom( bb, loops[0] );\n \n      DisplaySvg( path_data );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><p>The method <code>DisplaySvg</code>that invokes the Heroku-hosted web server was copied almost verbatim from the original JavaScript function <code>submit_form_svg_01</code> used to submit the form defined to\n\n<a href=\"http://the3dwebcoder.typepad.com/blog/2015/04/displaying-2d-graphics-via-a-node-server.html\">\nmanually test the node.js server to display an SVG polygon</a>.</p><p>It is interesting to compare the two implementations side by side, so that is exactly what I did in the follow-up discussion on\n\n<a href=\"http://the3dwebcoder.typepad.com/blog/2015/04/driving-the-2d-graphics-svg-node-server-from-a-desktop-app.html\">\ndriving the SVG node server from a desktop application</a>.</p><p>The entire source code, Visual Studio solution and add-in manifest are provided in the\n\n<a href=\"https://github.com/jeremytammik/SvgExport\">SvgExport GitHub repository</a>,\n\nand the version presented here is\n\n<a href=\"https://github.com/jeremytammik/SvgExport/releases/tag/2015.0.0.0\">release 2015.0.0.0</a>.</p><p>As I already pointed out yesterday on The 3D Web Coder, I could just as easily implement this locally in pure JavaScript, of course.</p><p>Hosting it in a separate server makes no sense whatsoever as long as it is just for my personal local use.</p><p>The server implementation is only of interest once we consider more widespread use, e.g., globally accessible sharing of data retrieved from multiple projects for multiple interested parties.</p><p>That is where we are headed as soon as we can   :-)</p>"
  }
]