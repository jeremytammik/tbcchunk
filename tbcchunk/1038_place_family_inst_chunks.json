[
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "Text File Driven Automatic Placement of Family Instances",
    "local_header_href": "#text-file-driven-automatic-placement-of-family-instances",
    "chunk_text": "<h3>Text File Driven Automatic Placement of Family Instances</h3><p>My colleague Emmanuel Di Giacomo recently asked me for an application to automatically place Revit family instances in a project at a list of X, Y, Z coordinates read from a text file.</p><p>A similar add-in was already published for Revit 2011 at\n\n<a href=\"http://revitaddons.blogspot.ca/2011/04/revittoday-xyz-out-and-xyz-in.html\">Revit Today</a>.</p><p>The user interface is minimal:</p><center>\n<img alt=\"Place family instances\" src=\"img/PlaceInstances.png\" width=\"312\"/>\n</center><p>This form enables the following simple and effective workflow  to achieve a lot of functionality in very few lines of code, significantly aided and abetted by the combo box DataSource and the regular expression supported real number parsing functionality:</p><ol>\n<li><a href=\"#1\">On loading</a>, list all families whose placement type equals <code><span class=\"teal\">FamilyPlacementType</span>.OneLevelBased</code>.</li>\n<li><a href=\"#2\">On selecting a family</a>, list all its symbols.</li>\n<li>Prompt the user to <a href=\"#3\">select an input text file</a> containing a list of X, Y and Z coordinates.</li>\n<li>Helper method to parse a string to <a href=\"#4\">extract an XYZ point</a>.</li>\n<li><a href=\"#5\">Parse the input text file</a>.</li>\n<li>External command mainline and form driver – start a transaction and <a href=\"#6\">place instances of the selected family type</a> at all the XYZ points.</li>\n<li><a href=\"#7\">Conclusion and download</a>.</li>\n<li><a href=\"#8\">GitHub repository</a>.</li>\n</ol><p>On an unrelated topic, we end with some news on <a href=\"#9\">BIM 360 Glue</a>.</p><p>First, a look at the event handlers and other code implementing the steps above:</p><a name=\"1\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "1. On Load – List Families",
    "local_header_href": "#1-on-load-list-families",
    "chunk_text": "<h4>1. On Load – List Families</h4><p>When the form is initially loaded, a filtered element collector retrieves all families in the document.</p><p>Since this add-in only supports the simplest form of instance placement and one single overload of the NewFamilyInstance method taking a point, family type and StructuralType argument, we remove all families except the ones whose placement type equals <code><span class=\"teal\">FamilyPlacementType</span>.OneLevelBased</code>:</p><pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> PlaceInstancesForm_Load(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Family</span>&gt; families = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Family</span>&gt;(\n      <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( _doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Family</span> ) )\n        .Cast&lt;<span class=\"teal\">Family</span>&gt;()\n        .Where&lt;<span class=\"teal\">Family</span>&gt;( f =&gt;\n          f.FamilyPlacementType ==\n            <span class=\"teal\">FamilyPlacementType</span>.OneLevelBased ) );\n \n    cmbFamily.DataSource = families;\n    cmbFamily.DisplayMember = <span class=\"maroon\">\"Name\"</span>;\n  }\n</pre><p>Note how easily and efficiently we can populate the combo box entries using the DataSource property to extract and display the family names to the user.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "2. On Selecting a Family – List its Symbols",
    "local_header_href": "#2-on-selecting-a-family-list-its-symbols",
    "chunk_text": "<h4>2. On Selecting a Family – List its Symbols</h4><p>Each time the selected family changes, the cmbFamily_SelectedIndexChanged event handler updates the list of family symbols it provides.</p><p>They are immediately accessible from the Family.Symbols property.</p><p>However, the FamilySymbolSet that it returns cannot immediately be passed into the family type combo box DataSource property; it can be passed in after converting it to a generic List instance:</p><pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> cmbFamily_SelectedIndexChanged(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"teal\">ComboBox</span> cb = sender <span class=\"blue\">as</span> <span class=\"teal\">ComboBox</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != cb,\n      <span class=\"maroon\">\"expected a combo box\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( cb == cmbFamily,\n      <span class=\"maroon\">\"what combo box are you, then?\"</span> );\n \n    <span class=\"teal\">Family</span> f = cb.SelectedItem <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n \n    <span class=\"teal\">FamilySymbolSet</span> symbols = f.Symbols;\n \n    <span class=\"green\">// I have to convert the FamilySymbolSet to a</span>\n    <span class=\"green\">// List, or the DataSource assignment will throw </span>\n    <span class=\"green\">// an exception saying \"Complex DataBinding </span>\n    <span class=\"green\">// accepts as a data source either an IList or</span>\n    <span class=\"green\">// an IListSource.</span>\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">FamilySymbol</span>&gt; symbols2\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">FamilySymbol</span>&gt;(\n        symbols.Cast&lt;<span class=\"teal\">FamilySymbol</span>&gt;() );\n \n    cmbType.DataSource = symbols2;\n    cmbType.DisplayMember = <span class=\"maroon\">\"Name\"</span>;\n  }\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "3. Select an Input Text File",
    "local_header_href": "#3-select-an-input-text-file",
    "chunk_text": "<h4>3. Select an Input Text File</h4><p>Hmm.\nActually, there is absolutely nothing to say about this step.\nWell, I can mention the methods implementing it.</p><p>The Util class provides a method FileSelectTxt to select the input text file:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Select a specified file in the given folder.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"folder\"&gt;</span><span class=\"green\">Initial folder.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"filename\"&gt;</span><span class=\"green\">Selected filename on </span>\n  <span class=\"gray\">///</span><span class=\"green\"> success.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Return true if a file was successfully </span>\n  <span class=\"gray\">///</span><span class=\"green\"> selected.</span><span class=\"gray\">&lt;/returns&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> FileSelect(\n    <span class=\"blue\">string</span> folder,\n    <span class=\"blue\">string</span> title,\n    <span class=\"blue\">string</span> filter,\n    <span class=\"blue\">out</span> <span class=\"blue\">string</span> filename )\n  {\n    <span class=\"teal\">OpenFileDialog</span> dlg = <span class=\"blue\">new</span> <span class=\"teal\">OpenFileDialog</span>();\n    dlg.Title = title;\n    dlg.CheckFileExists = <span class=\"blue\">true</span>;\n    dlg.CheckPathExists = <span class=\"blue\">true</span>;\n    dlg.InitialDirectory = folder;\n    dlg.Filter = filter;\n    <span class=\"blue\">bool</span> rc = ( <span class=\"teal\">DialogResult</span>.OK == dlg.ShowDialog() );\n    filename = dlg.FileName;\n    <span class=\"blue\">return</span> rc;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Select a text file in the given folder.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"folder\"&gt;</span><span class=\"green\">Initial folder.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"filename\"&gt;</span><span class=\"green\">Selected filename on </span>\n  <span class=\"gray\">///</span><span class=\"green\"> success.</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Return true if a file was successfully </span>\n  <span class=\"gray\">///</span><span class=\"green\"> selected.</span><span class=\"gray\">&lt;/returns&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">public</span> <span class=\"blue\">bool</span> FileSelectTxt(\n    <span class=\"blue\">string</span> folder,\n    <span class=\"blue\">out</span> <span class=\"blue\">string</span> filename )\n  {\n    <span class=\"blue\">return</span> FileSelect( folder,\n      <span class=\"maroon\">\"Select XYZ coordinate text file or Cancel to Exit\"</span>,\n      <span class=\"maroon\">\"XYZ coordinate text Files (*.txt)|*.txt\"</span>,\n      <span class=\"blue\">out</span> filename );\n  }\n</pre><p>This helper method is called by the browse button click handler, and the selected file path and directory is saved on success:</p><pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> btnBrowseXyz_Click(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"blue\">string</span> filename;\n \n    <span class=\"blue\">if</span>( <span class=\"teal\">Util</span>.FileSelectTxt( _txt_folder_name,\n      <span class=\"blue\">out</span> filename ) )\n    {\n      txtFilename.Text = filename;\n \n      _txt_folder_name = <span class=\"teal\">Path</span>.GetDirectoryName(\n        filename );\n    }\n  }\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "4. Parse a String for an XYZ Point",
    "local_header_href": "#4-parse-a-string-for-an-xyz-point",
    "chunk_text": "<h4>4. Parse a String for an XYZ Point</h4><p>I use a regular expression to find and extract real numbers from the lines of text parsed from the selected XYZ input file:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> A regular expression to match a </span>\n  <span class=\"gray\">///</span><span class=\"green\"> real number with optional leading sign.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _one_real_number_regex\n    = <span class=\"maroon\">@\"[-+]?[0-9]*\\.?[0-9]+\"</span>;\n</pre><p>Initially, I tried using a more complex regular expression to grab all three XYZ coordinates at once, ignoring all intervening characters of any kind whatsoever:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> A regular expression to match three occurrences</span>\n  <span class=\"gray\">///</span><span class=\"green\"> of a real number with optional leading sign.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> We gave up using this, because the greedy .*</span>\n  <span class=\"gray\">///</span><span class=\"green\"> gobbles the +- sign away from the Y and Z</span>\n  <span class=\"gray\">///</span><span class=\"green\"> coordinates.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">string</span> _xyz_real_number_regex\n    = <span class=\"maroon\">@\"(?&lt;X&gt;\"</span> + _one_real_number_regex + <span class=\"maroon\">\")\"</span>\n    + <span class=\"maroon\">@\".*(?&lt;Y&gt;\"</span> + _one_real_number_regex + <span class=\"maroon\">\")\"</span>\n    + <span class=\"maroon\">@\".*(?&lt;Z&gt;\"</span> + _one_real_number_regex + <span class=\"maroon\">\")\"</span>;\n</pre><p>This does not work well, however, due to the greedy nature of regular expressions, which gobble up as much as they can as soon as possible, for instance removing the preceding +- sign from the Y and Z coordinates.</p><p>Furthermore, this forces the user to always enter exactly three coordinates.</p><p>By parsing the real numbers one at a time, I can more easily provide support for either two or three coordinates, assuming a zero default Z value.</p><p>I pre-compile the regular expression and use it like this in the GetThreeRealNumbers helper method:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Static regular expression for </span>\n  <span class=\"gray\">///</span><span class=\"green\"> parsing real numbers.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">Regex</span> _regex = <span class=\"blue\">new</span> <span class=\"teal\">Regex</span>(\n    <span class=\"green\">//_xyz_real_number_regex</span>\n    _one_real_number_regex );\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Read three real numbers from the given string</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and return true on success. Parse the string s </span>\n  <span class=\"gray\">///</span><span class=\"green\"> for exactly two or three real numbers </span>\n  <span class=\"gray\">///</span><span class=\"green\"> representing the XY or XYZ placement </span>\n  <span class=\"gray\">///</span><span class=\"green\"> coordinates. Z defaults to 0.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">bool</span> GetThreeRealNumbers(\n    <span class=\"blue\">string</span> s,\n    <span class=\"blue\">ref</span> <span class=\"blue\">double</span>[] xyz )\n  {\n    <span class=\"blue\">int</span> i = 0; <span class=\"green\">// index in string</span>\n    <span class=\"blue\">int</span> n = 0; <span class=\"green\">// count real numbers found</span>\n \n    <span class=\"teal\">Match</span> m = _regex.Match( s, i );\n \n    <span class=\"green\">// Pure debugging support</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Group</span> g <span class=\"blue\">in</span> m.Groups )\n    {\n      <span class=\"teal\">Debug</span>.Print( g.ToString() );\n    }\n \n    <span class=\"green\">// Read all the real numbers we can get</span>\n    <span class=\"green\">// and stop if we find too many</span>\n \n    <span class=\"blue\">while</span>( 4 &gt; n &amp;&amp; m.Success )\n    {\n      <span class=\"blue\">if</span>( 3 &gt; n )\n      {\n        xyz[n] = <span class=\"blue\">double</span>.Parse( m.ToString() );\n        i = m.Index + m.Length;\n        m = _regex.Match( s, i );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">Group</span> g <span class=\"blue\">in</span> m.Groups )\n        {\n          <span class=\"teal\">Debug</span>.Print( g.ToString() );\n        }\n      }\n      ++n;\n    }\n \n    <span class=\"green\">// Add the default Z coordinate in case of need</span>\n \n    <span class=\"blue\">if</span>( 2 == n )\n    {\n      xyz[n++] = 0.0;\n    }\n \n    <span class=\"green\">// Return success if we found 2 or 3 real numbers</span>\n \n    <span class=\"blue\">return</span> 3 == n;\n  }\n</pre><a name=\"5\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "5. Parse Input Text File",
    "local_header_href": "#5-parse-input-text-file",
    "chunk_text": "<h4>5. Parse Input Text File</h4><p>On confirming the selections made, the input file is read and each line is fed to the GetThreeRealNumbers method.</p><p>On success, the three real numbers retrieved are used to populate a Revit XYZ point instance and add it to the list.</p><p>Lines beginning with a hash characters are considered comments and ignored.</p><p>Each non-comment line that is successfully parsed contributes a point instance to the list of family instance placement coordinates; all other lines are simply ignored:</p><pre class=\"code\">\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> btnOk_Click(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">EventArgs</span> e )\n  {\n    <span class=\"teal\">StreamReader</span> reader = <span class=\"teal\">File</span>.OpenText(\n      txtFilename.Text );\n \n    <span class=\"blue\">string</span> read = reader.ReadToEnd();\n \n    <span class=\"blue\">string</span>[] lines = read.Split( <span class=\"maroon\">'\\n'</span> );\n \n    <span class=\"blue\">string</span> s;\n    <span class=\"blue\">double</span>[] xyz = <span class=\"blue\">new</span> <span class=\"blue\">double</span>[3] { 0, 0, 0 };\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> line <span class=\"blue\">in</span> lines )\n    {\n      s = line.Trim();\n \n      <span class=\"blue\">if</span>( s.StartsWith( <span class=\"maroon\">\"#\"</span> ) )\n      {\n        <span class=\"blue\">continue</span>;\n      }\n \n      <span class=\"green\">// Parse string s for exactly two or three</span>\n      <span class=\"green\">// real numbers representing the XY or XYZ</span>\n      <span class=\"green\">// placement coordinates. Z defaults to 0.</span>\n \n      <span class=\"blue\">if</span>( GetThreeRealNumbers( s, <span class=\"blue\">ref</span> xyz ) )\n      {\n        <span class=\"teal\">XYZ</span> p = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( xyz[0], xyz[1], xyz[2] );\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _pts )\n        {\n          _pts = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;( 1 );\n        }\n        _pts.Add( p );\n      }\n    }\n  }\n</pre><p>This leaves plenty of space for you to shoot yourself in the foot, since no warnings are issued if a line does not parse correctly.</p><p>We are lenient and expect you to either make no errors or notice them yourself.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "6. External Command Mainline and Form Driver – Place Instances of the Selected Family Type",
    "local_header_href": "#6-external-command-mainline-and-form-driver-place-instances-of-the-selected-family-type",
    "chunk_text": "<h4>6. External Command Mainline and Form Driver – Place Instances of the Selected Family Type</h4><p>The external command mainline Execute method performs the following tasks:</p><ul>\n<li>Determine the main Revit application window handle to define the form owner.</li>\n<li>Display and handle the place instances form.</li>\n<li>On confirmation, open and commit a transaction in which instances of the selected family type are placed at all XYZ points read from the input file.</li>\n</ul><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">IWin32Window</span> revit_window\n      = <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>(\n        <span class=\"teal\">ComponentManager</span>.ApplicationWindow );\n \n    <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">PlaceInstancesForm</span> f\n      = <span class=\"blue\">new</span> <span class=\"teal\">PlaceInstancesForm</span>( doc );\n \n    <span class=\"blue\">if</span>( <span class=\"teal\">DialogResult</span>.OK == f.ShowDialog(\n      revit_window ) )\n    {\n      <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n        doc ) )\n      {\n        t.Start( <span class=\"maroon\">\"Place Instances\"</span> );\n \n        Autodesk.Revit.Creation.<span class=\"teal\">Document</span>\n          creation_doc = doc.Create;\n \n        <span class=\"teal\">StructuralType</span> st\n          = <span class=\"teal\">StructuralType</span>.NonStructural;\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> f.Points )\n        {\n          creation_doc.NewFamilyInstance(\n            p, f.Type, st );\n        }\n \n        t.Commit();\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n</pre><p>Short and sweet, isn't it?</p><a name=\"7\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "7. Conclusions and Download",
    "local_header_href": "#7-conclusions-and-download",
    "chunk_text": "<h4>7. Conclusions and Download</h4><p>This is rather a lot of useful functionality in rather a few lines of code, I think.</p><p>I was especially happy to make use of the DataSource property to directly populate a .NET user interface widget from a filtered element collector.</p><p>Well, actually, there is now a tiny amount of LINQ code in between the collector and the data source property.\nThe initial version did not check for the family placement type, and the filtered element collector was used to feed it directly.</p><p>To see the whole thing in context and try it out for yourself, here is\n\n<a href=\"zip/PlaceInstances05.zip\">PlaceInstances05.zip</a> containing\n\nthe full source code, Visual Studio solution and add-in manifest for the PlaceFamilyInstances external command.</p><p>Please be aware that it only supports the simplest kind of family placement requiring a single input point.</p><p>Support for curve based, face or element hosted families etc. is left as an exercise to the reader.</p><p>Many thanks to Emmanuel for suggesting and testing this.</p><a name=\"8\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "8. The PlaceInstances GitHub Repository",
    "local_header_href": "#8-the-placeinstances-github-repository",
    "chunk_text": "<h4>8. The PlaceInstances GitHub Repository</h4><p>Better than the direct download above, I repeat my exercise from yesterday creating the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/move-duct-join-add-in-with-video-and-github-support.html#6\">\nMoveDuctJoin GitHub repository</a>.</p><p>Here is the new\n\n<a href=\"https://github.com/jeremytammik/PlaceInstances\">PlaceInstances</a> repository,\n\nincluding the direct link to download the\n\n<a href=\"https://github.com/jeremytammik/PlaceInstances/archive/master.zip\">\nlatest version</a> or\n\naccess this first Revit 2014 release,\n\n<a href=\"https://github.com/jeremytammik/PlaceInstances/archive/2014.0.0.5.zip\">version 2014.0.0.5</a>.</p><p>Actually, I already fixed something after starting to write this article, so the latest current release is now\n\n<a href=\"https://github.com/jeremytammik/PlaceInstances/archive/2014.0.0.6.zip\">version 2014.0.0.6</a>.</p><a name=\"9\"></a>"
  },
  {
    "original_filename": "1038_place_family_inst",
    "header_text": "9. BIM 360 Glue API Pilot and Updated Samples",
    "local_header_href": "#9-bim-360-glue-api-pilot-and-updated-samples",
    "chunk_text": "<h4>9. BIM 360 Glue API Pilot and Updated Samples</h4><p>Last but not least, I discussed the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/the-bim-360-glue-viewer-and-rest-api.html\">\nBIM 360 Glue viewer and REST API</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/bim-360-glue-rest-api-authentication-using-python.html\">\nauthentication using Python</a> end\n\nof last year.</p><p><a href=\"http://adndevblog.typepad.com/aec/mikako-harada.html\">Mikako Harada</a> now\n\npublished information on the\n\n<a href=\"http://adndevblog.typepad.com/aec/2013/10/bim-360-glue-api-pilot-and-updated-samples.html\">\nBIM 360 Glue API pilot and updated samples</a> that\n\nyou definitely should check out if you have any interest in this area.</p><p>This of course ties in quite nicely with the chance to win $5000 in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/revit-2013-api-developer-guide-pdf.html#4\">\nAppHack contest 2.0</a>...</p>"
  }
]