[
  {
    "original_filename": "0908_load_family_perform",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0908_load_family_perform",
    "header_text": "LoadFamily and Collector Iteration Performance",
    "local_header_href": "#loadfamily-and-collector-iteration-performance",
    "chunk_text": "<h3>LoadFamily and Collector Iteration Performance</h3><p>Since we are into the topic of family loading performance anyway, after yesterdays discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/sweep-family-performance-enhancement.html\">\nefficient sweep creation</a>,\n\nhere is another interesting discussion with some useful family loading and symbol filtering benchmarking results and observations by Thomas Jarzyna and an in-depth analysis of the effects of converting a filtered element collector to a .NET collection by Scott Conover:</p><p><strong>Question:</strong> I need to load some family symbols into my project.\nI have a lot of different families and even more symbols, so to keep the projects small and clean I would prefer to load family symbols on demand only.\n\n<p>Therefore, whenever an instance of a family is to be created, I need to check first whether the family symbol is already loaded.\n\n<p>I can see two possible approaches to achieve this:\n\n<ul>\n<li>Check whether the family symbol already exist by iterating through the database using a filtered element collector searching for family name and family symbol name.</li>\n<li>Not checking anything, and just always calling LoadFamilySymbol. It runs fine even if the family symbol is already loaded. One negative side effect of this approach is the \"one time conversion\" dialogue popping up for older families every time.</li>\n</ul>\n<p>Which approach is better from a performance centred point of view, please?\n\n<p>Is there any other possible approach?\n\n\n<p><strong>Answer:</strong> Both of your two approaches sound feasible.\n\n<p>I also find the \"one time conversion\" dialogue rather irritating and would not want my users to see it, especially not repeatedly.\n\n<p>If that is a serious problem for you, you could implement a system to ensure that it never occurs more than once. For instance, you could create different sub-directories for the different Revit versions of the same family, and check whether an updated version has already been generated before loading an older one.\n\n<p>However, I would expect the use of the filtered element collector to be much (very much!) more efficient.\n\n<p>However^2, it really depends on so many factors that it is impossible to say for sure.\n\n<p>The only way to really answer this with certainty   for your particular system, workflow needs, and installation situation is to benchmark the different options.\n\n<p>I described a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/timer-code-for-benchmarking.html\">\nsimple benchmarking system</a> that\n\nI would use in a Revit add-in in lack of anything more sophisticated.\n\n<p>I cannot think of any other approach offhand.\n\n<p>The thought of calling LoadFamily without even checking beforehand actually never occurred to me  :-)\n\n<p>Here are two different implementation examples checking whether a family has already been loaded, and loading it otherwise, for\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/creating-and-inserting-an-extrusion-family.html#3\">\nCreating and inserting an extrusion family</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/structural-concrete-setout-point-add-in.html#6\">\nStructural concrete setout points</a></li>\n</ul>\n<p>I hope they fulfil your needs.</p>\n<p><strong>Response:</strong> Thank you for the answer.\n\n<p>I was hoping for a simple standard best practice, but I see it's not as easy as that.\n\n<p>In the meantime, I've done a little bit of benchmarking myself.\nJust basic, using a stopwatch:</p>\n<center>\n<img alt=\"Filter for and load family benchmarks\" src=\"img/RevitInsertion.png\" width=\"600\"/>\n</center>\n<p>And you are right, depending on the quantity of different Types (FamilySymbols) these approaches differ significantly.\n\n<p>For a scenario of creating 2000 family instances from one family (see attached sheet), this is my conclusion:\n\n<ul>\n<li>If you expect less than a dozen different family symbols to load, just load them once via \"LoadFamilySymbol\" and\ndon't care about iterating the element collection for the already loaded family symbols.\n<li>Otherwise, iterating and finding the loaded family symbols first is better.\n<li>Of course, this depends on the complexity of the family types and the environment (hardware &amp; current load).\n<li>A large number of different families is not considered yet.\n</li></li></li></li></ul>\n<p>I also noted the following interesting fact while iterating for \"known\" family symbols:\n\n<pre class=\"code\">\n  var collector = new FilteredElementCollector( doc );\n\n  IEnumerable&lt;FamilySymbol&gt; familySymbols = collector\n    .OfClass( typeof( FamilySymbol ) )\n    .ToElements()\n    .OfType&lt;FamilySymbol&gt;();\n</pre>\n<p>The additional call to the ToElements method makes the search using the collector slightly less effective (some milliseconds slower) compared to:\n\n<pre class=\"code\">\n  IEnumerable&lt;FamilySymbol&gt; familySymbols = collector\n    .OfClass( typeof( FamilySymbol ) )\n    .OfType&lt;FamilySymbol&gt;();\n</pre>\n<p>But in the long term, iterating over the family symbols is much faster when ToElements is called first.\n\n<p>For the 2000 instances it takes 14 seconds without ToElements vs. 9 seconds with.\n\n<p>I guess this has to do with the caching provided by\n\n<a href=\"http://confluence.jetbrains.com/display/ReSharper/Possible+multiple+enumeration+of+IEnumerable\">\npossible multiple enumerations of IEnumerable</a>.\n\n<p>What do you think?</p>\n<p>Thank you, till next time.\n\n\n<p><strong>Answer:</strong> Thank you for your very interesting results and observations, and congratulations on your first benchmarking results!\nThey are already very interesting.\n\n<p>A call to ToElements definitely costs some performance, since it allocates an entirely new generic .NET collection and copies all the elements across from the Revit filtered element collector, as I mentioned discussing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/findelement-and-collector-optimisation.html\">\nFindElement and collector optimisation</a>.\n\n<p>I am surprised and interested (and was initially a little disappointed) to hear that the subsequent iteration over the .NET collection is measurably faster than the Revit collector, though.\n\n<p>Yes, the speed improvement is probably indeed related to the explanation you point to.\nIn this case, the Revit element collector may be storing the elements in 'Revit memory' and eating cycles when marshalling them across to '.NET memory'.\nThis marshalling effort may need to be performed anew on each repetition of the iteration.\n\n<p>Ah yes, with that explanation, I am perfectly happy with this observation, and not disappointed at all.</p>\n<p>Thank you for these illuminating results.</p>\n<p><strong>Scott adds:</strong> I would expect the total time spent in FilteredElementCollector.ToElements and subsequent iteration to be longer than direct iteration of FilteredElementCollector, regardless of the number of elements that pass the filter.\n\n<p>Of course, once ToElements has run and you store the managed handles, iteration of this collection should be fast – you are not going back to the document to find the elements again or filter them or wrap them in managed handles.\n\n<p>If you are doing more than one iteration of a given filter criteria, the first one will always be faster than the second – because of the extra time taken to create the Elements collection.  The other activities – traversing the database, applying and evaluating the filter, wrapping the elements that pass into managed code – happen on both.\n\n<p>If you know you need to have the same filtered set of elements more than once, saving them in the collection should be faster for the second and subsequent iterations.  This assumes that you know the document hasn’t changed where there are new elements that pass the filter (or some of them are deleted).  The second iteration over the managed collection should be faster than re-traversing the document.  This is a pretty specialized approach.  The other reasons for converting FilteredElementCollector to a collection (you want to store a list of elements or ids for later, you need such a list as input to another method, you want to delete anything you find, etc.) still apply.\n\n<p>If you are running multiple loops on the collector with no changes in between, the second will be consistently faster.\nOptimally, you might want to unroll the loop to just do everything in one shot.\n\n<p>The first might be faster than the second if the collector is returning a really large number of elements.\n\n<p>Mostly, you want to get a set of things once and just do things to it once.\nNormally, only certain specialized applications such as multiple data extractions or multiple permutations for design studies might require retrieval of the exact same data and then doing things to it repeatedly in the same code sequence.\n\n<p>Let’s use made up concrete numbers.\n\n<ul>\n<li>It takes 100 ms to process the model and find elements that pass the filters, and to wrap each element into the API object.\n<li>It takes 5 ms to build the .NET collection returned by ToElements.\n<li>It takes 1 ms to traverse a .NET IEnumerable&lt;Element&gt;, which could be either the Revit collector or the .NET collection.\n</li></li></li></ul>\n<p>So with one group of elements processed once:\n\n<ul>\n<li>With collection: 100 + 5 + 1 = 106 ms.\n<li>Without collection: 100 + 1 = 101 ms.\n</li></li></ul>\n<p>With the same exact group of elements processed 10 times in the same code (where we know there is no chance new elements were added or elements deleted that we care about):\n\n<ul>\n<li>With collection obtained once: 100 + 5 + 10 * 1 = 116 ms.\n<li>Without collection:  100 * 10 + 10 * 1 = 1010 ms.\n</li></li></ul>\n<p>Make sense?\n\n<p>The key thing to understand is that FilteredElementCollector caches nothing (except the filters applied to it, of course).\nCaching data needed for multiple things will be better – always – but premature if there’s no need to have such a cache at all.\n\n<p>Note that the built-in collections on Document (.WallTypes, etc.) – which are becoming obsolete in future versions – use FilteredElementCollector as their base; there is no caching done there either, and no real advantage to them other than saving the coding effort of building the collector and filters.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]