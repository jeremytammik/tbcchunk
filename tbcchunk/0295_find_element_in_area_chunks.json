[
  {
    "original_filename": "0295_find_element_in_area",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0295_find_element_in_area",
    "header_text": "Find an Element in an Area",
    "local_header_href": "#find-an-element-in-an-area",
    "chunk_text": "<h3>Find an Element in an Area</h3><p>Another last interlude before concluding the series on the Revit API geometry library based on Scott Conover's Autodesk University presentation on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/analyse-building-geometry.html\">\nanalysing building geometry</a>,\n\nalso dealing with geometrical analysis of Revit elements:\n\n<p><strong>Question:</strong> How can I select a Revit element within a particular area, for instance the rectangle defined by the points (0,0) and (500,500) in the XY plane?\n\n<p><strong>Answer:</strong> There are several different approaches to this, and you will obviously have to decide for yourself which one best suits your needs. \nBasically, you need to determine the location of your Revit element in some way, and then test whether this location lies within the specified area. \nYou can use different approaches to determine the element location. \nSome properties and data that might be useful for this include:\n\n<ul>\n<li>The BoundingBox property.\n<li>The Location property.\n<li>The element geometry.\n</li></li></li></ul>\n<p>In previous posts, I presented the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nGetVertices</a> method\n\nas an example of retrieving a list of vertices from the element geometry, and the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/unrotate-north.html\">\nGetElementLocation</a> method\n\ndetermining a single point from the element location.\nThese will probably both provide useful starting points and still need to be adapted for your specific needs.\n\n<p>Once you have determined the element location in some way, you need to decide what exactly it means that the element lies within the area. \nFor instance, do you want to just determine one specific point for an element, and check whether that lies within the area, or use the entire location curve for elements having one, or require the entire solid or even the bounding box to be contained?\n\n<p>Once you have defined both how to define the element location and its containment within the area, you can start to implement the selection process.\n\n<p>Whatever approach you choose, you should definitely also apply additional filtering to your algorithm, so that it will ignore all the objects you are not interested in, for instance by checking the element category, level, type and other properties.\n\n<p>Making use of the Revit API filters, you can retrieve the subset of all elements that may possibly be of interest to you.\nLooking at those elements one by one, determine their location and check whether it is contained in your area of interest, for instance according to the following pseudo code algorithm:\n\n<pre>\nList&lt;Element&gt; a = get candidate \n  elements from Revit database;\n\nforeach( Element e in a )\n{\n  get location L of e;\n\n  if( L is in area )\n  {\n    process e;\n  }\n}\n</pre>\n</p></p></p></p></p></p></p></p>"
  }
]