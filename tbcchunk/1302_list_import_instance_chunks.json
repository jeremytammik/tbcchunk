[
  {
    "original_filename": "1302_list_import_instance",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1302_list_import_instance",
    "header_text": "List All Import Instances",
    "local_header_href": "#list-all-import-instances",
    "chunk_text": "<h3>List All Import Instances</h3><p>Have you ever wondered whether you have any duplicate imported CAD instances in your model?</p><p>My colleague Nikolay Shulga from the Revit development team implemented a nice little end user utility to answer this question.\nBy the way, Nikolay and I go back a long time, way back in the beginning of the\n\n<a href=\"https://en.wikipedia.org/wiki/BuildingSMART\">\nIAI and IFC project</a>,\n\ndecades ago, in previous lives...</p><p>In Nikolay's own words:</p><p>A while ago I wrote a prototype app to list ImportInstance objects in a Revit project. The idea is to list duplicate instances – people importing the same data multiple times – and perhaps do other useful things.</p><p>I don’t think I can maintain that app – not enough bandwidth and demand to make it a part of Revit. I’m wondering whether you could make a blog entry out of the idea – hopefully someone picks it up and makes something out of it. If you can figure out a way to make it an open source app, even better.</p><ul>\n<li><b>Motivation</b> – People often import drawings – usually DWG, of course, but could be DGN – multiple times in current-view-only mode. That grows the size of the project, creates performance issues. We found that people don’t often know what data is imported or linked. That was an analysis tool that was developed for a specific project, look at performance issues related to imported data.</li>\n<li><b>Spec</b> – The formal spec is short: 'Let’s list the imported data and report it in a minimally useful way'.</li>\n<li><b>Implementation</b> – Well, you have it already; see below   :-)</li>\n<li><b>Cool API aspects</b> – None, apart from the fact that simple stuff, if applied correctly, can add a disproportional amount of value.</li>\n<li><b>Cool ways to use it</b> – Well, data exchange is not cool, but necessary. This helps users to keep their data in better shape – police against multiple imports, know what is in the file.</li>\n<li><b>How it can be enhanced</b> – One idea we had was to have an imported data browser, similar to standard Revit view browser – or, perhaps, enhance the view browser.</li>\n<li><b>A suitable sample model</b> – Simply create a Revit project, import a DWG multiple times and run the tool.</li>\n</ul><p>Here is the entire implementation:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Collections.Specialized;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Revit.UI.Selection;\n<span class=\"blue\">using</span> System.IO;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> ListImportInstances\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> A generic interface to report imported </span>\n  <span class=\"gray\">///</span><span class=\"green\"> data found in a specific project.  </span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">interface</span> <span class=\"teal\">IReportImportData</span>\n  {\n    <span class=\"blue\">bool</span> init( <span class=\"blue\">string</span> projectName );\n    <span class=\"blue\">void</span> startReportSection( <span class=\"blue\">string</span> sectionName );\n    <span class=\"blue\">void</span> logItem( <span class=\"blue\">string</span> item );\n    <span class=\"blue\">void</span> setWarning();\n    <span class=\"blue\">void</span> done();\n    <span class=\"blue\">string</span> getLogFileName();\n  }\n \n  <span class=\"blue\">class</span> <span class=\"teal\">SimpleTextFileBasedReporter</span> : <span class=\"teal\">IReportImportData</span>\n  {\n    <span class=\"blue\">public</span> SimpleTextFileBasedReporter()\n    {\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">bool</span> init( <span class=\"blue\">string</span> projectFileName )\n    {\n      <span class=\"blue\">bool</span> outcome = <span class=\"blue\">false</span>;\n      m_currentSection = <span class=\"blue\">null</span>;\n      m_warnUser = <span class=\"blue\">false</span>;\n \n      <span class=\"blue\">if</span>( 0 != projectFileName.Length )\n      {\n        m_projectFileName = projectFileName;\n      }\n      <span class=\"blue\">else</span>\n      {\n        m_projectFileName = <span class=\"maroon\">\"Default\"</span>;\n      }\n \n      m_logFileName = System.IO.<span class=\"teal\">Path</span>.Combine(\n        System.IO.<span class=\"teal\">Path</span>.GetDirectoryName( m_projectFileName ),\n        System.IO.<span class=\"teal\">Path</span>.GetFileNameWithoutExtension(\n          m_projectFileName ) ) + <span class=\"maroon\">\"-ListOfImportedData.txt\"</span>;\n \n      <span class=\"green\">// Construct log file name from projectFileName </span>\n      <span class=\"green\">// and try to open file. Project file name is </span>\n      <span class=\"green\">// assumed to be valid (expected to be called </span>\n      <span class=\"green\">// on an open doc).</span>\n \n      <span class=\"blue\">try</span>\n      {\n        m_outputFile = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( m_logFileName );\n        m_outputFile.WriteLine( <span class=\"maroon\">\"List of imported CAD data in \"</span>\n          + projectFileName );\n        outcome = <span class=\"blue\">true</span>;\n      }\n      <span class=\"blue\">catch</span>( System.<span class=\"teal\">UnauthorizedAccessException</span> )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"FindImports\"</span>,\n          <span class=\"maroon\">\"You are not authorized to create \"</span>\n            + m_logFileName );\n      }\n      <span class=\"blue\">catch</span>( System.<span class=\"teal\">ArgumentNullException</span> ) <span class=\"green\">// oh, come on.</span>\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"FindImports\"</span>,\n          <span class=\"maroon\">\"That's just not fair. Null argument for StreamWriter()\"</span> );\n      }\n      <span class=\"blue\">catch</span>( System.<span class=\"teal\">ArgumentException</span> )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"FindImports\"</span>,\n          <span class=\"maroon\">\"Failed to create \"</span> + m_logFileName );\n      }\n      <span class=\"blue\">catch</span>( System.IO.<span class=\"teal\">DirectoryNotFoundException</span> )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"FindImports\"</span>,\n          <span class=\"maroon\">\"That's not supposed to happen: directory not found: \"</span>\n          + System.IO.<span class=\"teal\">Path</span>.GetDirectoryName( m_projectFileName ) );\n      }\n      <span class=\"blue\">catch</span>( System.IO.<span class=\"teal\">PathTooLongException</span> )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"FindImports\"</span>,\n          <span class=\"maroon\">\"The OS thinks the file name \"</span> + m_logFileName\n          + <span class=\"maroon\">\" is too long\"</span> );\n      }\n      <span class=\"blue\">catch</span>( System.IO.<span class=\"teal\">IOException</span> )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"FindImports\"</span>,\n          <span class=\"maroon\">\"An IO error has occurred while writing to \"</span>\n          + m_logFileName );\n      }\n      <span class=\"blue\">catch</span>( System.Security.<span class=\"teal\">SecurityException</span> )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"FindImports\"</span>,\n          <span class=\"maroon\">\"The OS thinks your access rights to \"</span>\n          + System.IO.<span class=\"teal\">Path</span>.GetDirectoryName( m_projectFileName )\n          + <span class=\"maroon\">\" are insufficient\"</span> );\n      }\n      <span class=\"blue\">return</span> outcome;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> startReportSection( <span class=\"blue\">string</span> sectionName )\n    {\n      endReportSection();\n      m_outputFile.WriteLine();\n      m_outputFile.WriteLine( sectionName );\n      m_outputFile.WriteLine();\n \n      m_currentSection = sectionName;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> logItem( <span class=\"blue\">string</span> item )\n    {\n      m_outputFile.WriteLine( item );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> setWarning()\n    {\n      m_warnUser = <span class=\"blue\">true</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> done()\n    {\n      endReportSection();\n      m_outputFile.WriteLine();\n      m_outputFile.WriteLine( <span class=\"maroon\">\"The End\"</span> );\n      m_outputFile.WriteLine();\n      m_outputFile.Close();\n \n      <span class=\"green\">// Display \"done\" dialog, potentially open log file</span>\n \n      <span class=\"teal\">TaskDialog</span> doneMsg = <span class=\"blue\">null</span>;\n \n      <span class=\"blue\">if</span>( m_warnUser )\n      {\n        doneMsg = <span class=\"blue\">new</span> <span class=\"teal\">TaskDialog</span>(\n          <span class=\"maroon\">\"Potential issues found. Please review the log file\"</span> );\n      }\n      <span class=\"blue\">else</span>\n      {\n        doneMsg = <span class=\"blue\">new</span> <span class=\"teal\">TaskDialog</span>(\n          <span class=\"maroon\">\"FindImports completed successfully\"</span> );\n      }\n \n      doneMsg.AddCommandLink(\n        <span class=\"teal\">TaskDialogCommandLinkId</span>.CommandLink1,\n        <span class=\"maroon\">\"Review \"</span> + m_logFileName );\n \n      <span class=\"blue\">switch</span>( doneMsg.Show() )\n      {\n        <span class=\"blue\">default</span>:\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> <span class=\"teal\">TaskDialogResult</span>.CommandLink1:\n          <span class=\"green\">// Display the log file</span>\n          <span class=\"teal\">Process</span>.Start( <span class=\"maroon\">\"notepad.exe\"</span>, m_logFileName );\n          <span class=\"blue\">break</span>;\n      }\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">string</span> getLogFileName()\n    {\n      <span class=\"blue\">return</span> m_logFileName;\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> endReportSection()\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != m_currentSection )\n      {\n        m_outputFile.WriteLine();\n        m_outputFile.WriteLine( <span class=\"maroon\">\"End of \"</span>\n          + m_currentSection );\n        m_outputFile.WriteLine();\n      }\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">string</span> m_projectFileName;\n    <span class=\"blue\">private</span> <span class=\"blue\">string</span> m_logFileName;\n    <span class=\"blue\">private</span> <span class=\"teal\">StreamWriter</span> m_outputFile;\n    <span class=\"blue\">private</span> <span class=\"blue\">string</span> m_currentSection;\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Tell the user to review the log file</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">bool</span> m_warnUser;\n  }\n \n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> listImports( <span class=\"teal\">Document</span> doc )\n    {\n      <span class=\"teal\">FilteredElementCollector</span> col\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ImportInstance</span> ) );\n \n      <span class=\"teal\">NameValueCollection</span> listOfViewSpecificImports\n        = <span class=\"blue\">new</span> <span class=\"teal\">NameValueCollection</span>();\n \n      <span class=\"teal\">NameValueCollection</span> listOfModelImports\n        = <span class=\"blue\">new</span> <span class=\"teal\">NameValueCollection</span>();\n \n      <span class=\"teal\">NameValueCollection</span> listOfUnidentifiedImports\n        = <span class=\"blue\">new</span> <span class=\"teal\">NameValueCollection</span>();\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> col )\n      {\n        <span class=\"green\">// Collect all view-specific names.</span>\n \n        <span class=\"blue\">if</span>( e.ViewSpecific )\n        {\n          <span class=\"blue\">string</span> viewName = <span class=\"blue\">null</span>;\n \n          <span class=\"blue\">try</span>\n          {\n            <span class=\"teal\">Element</span> viewElement = doc.GetElement(\n              e.OwnerViewId );\n            viewName = viewElement.Name;\n          }\n          <span class=\"blue\">catch</span>( Autodesk.Revit.Exceptions\n            .<span class=\"teal\">ArgumentNullException</span> ) <span class=\"green\">// just in case</span>\n          {\n            viewName = <span class=\"teal\">String</span>.Concat(\n              <span class=\"maroon\">\"Invalid View ID: \"</span>,\n              e.OwnerViewId.ToString() );\n          }\n \n          <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != e.Category )\n          {\n            listOfViewSpecificImports.Add(\n              importCategoryNameToFileName(\n                e.Category.Name ), viewName );\n          }\n          <span class=\"blue\">else</span>\n          {\n            listOfUnidentifiedImports.Add(\n              e.Id.ToString(), viewName );\n          }\n        }\n        <span class=\"blue\">else</span>\n        {\n          listOfModelImports.Add(\n            importCategoryNameToFileName(\n              e.Category.Name ), e.Name );\n        }\n      }\n \n      <span class=\"teal\">IReportImportData</span> logOutput\n        = <span class=\"blue\">new</span> <span class=\"teal\">SimpleTextFileBasedReporter</span>();\n \n      <span class=\"blue\">if</span>( !logOutput.init( doc.PathName ) )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"FindImports\"</span>,\n          <span class=\"maroon\">\"Unable to create report file\"</span> );\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">if</span>( listOfViewSpecificImports.HasKeys() )\n        {\n          logOutput.startReportSection(\n            <span class=\"maroon\">\"View Specific Imports\"</span> );\n \n          listResults( listOfViewSpecificImports,\n            logOutput );\n        }\n \n        <span class=\"blue\">if</span>( listOfModelImports.HasKeys() )\n        {\n          logOutput.startReportSection( <span class=\"maroon\">\"Model Imports\"</span> );\n          listResults( listOfModelImports, logOutput );\n        }\n \n        <span class=\"blue\">if</span>( listOfUnidentifiedImports.HasKeys() )\n        {\n          logOutput.startReportSection(\n            <span class=\"maroon\">\"Unknown import instances\"</span> );\n          listResults( listOfUnidentifiedImports,\n            logOutput );\n        }\n \n        <span class=\"blue\">if</span>( !sanityCheckViewSpecific(\n          listOfViewSpecificImports, logOutput ) )\n        {\n          logOutput.setWarning();\n          <span class=\"green\">//TaskDialog.Show(\"FindImportedData\", </span>\n          <span class=\"green\">//\"Possible issues found. Please review the log file\");</span>\n        }\n \n        logOutput.done();\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> This is an import category. It is created from </span>\n    <span class=\"gray\">///</span><span class=\"green\"> a CAD file name, with appropriate (number) added. </span>\n    <span class=\"gray\">///</span><span class=\"green\"> We want to use the file name as a key for our </span>\n    <span class=\"gray\">///</span><span class=\"green\"> list of import instances, so strip off the </span>\n    <span class=\"gray\">///</span><span class=\"green\"> brackets. </span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">string</span> importCategoryNameToFileName(\n      <span class=\"blue\">string</span> catName )\n    {\n      <span class=\"blue\">string</span> fileName = catName;\n      fileName = fileName.Trim();\n \n      <span class=\"blue\">if</span>( fileName.EndsWith( <span class=\"maroon\">\")\"</span> ) )\n      {\n        <span class=\"blue\">int</span> lastLeftBracket = fileName.LastIndexOf( <span class=\"maroon\">\"(\"</span> );\n \n        <span class=\"blue\">if</span>( -1 != lastLeftBracket )\n          fileName = fileName.Remove( lastLeftBracket ); <span class=\"green\">// remove left bracket</span>\n      }\n \n      <span class=\"blue\">return</span> fileName.Trim();\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> listResults(\n      <span class=\"teal\">NameValueCollection</span> listOfImports,\n      <span class=\"teal\">IReportImportData</span> logFile )\n    {\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">String</span> key <span class=\"blue\">in</span> listOfImports.AllKeys )\n      {\n        logFile.logItem( key + <span class=\"maroon\">\": \"</span>\n          + listOfImports.Get( key ) );\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Run a few basic sanity checks on the list of </span>\n    <span class=\"gray\">///</span><span class=\"green\"> view-specific imports. </span>\n    <span class=\"gray\">///</span><span class=\"green\"> View-specific sanity is not the same as model </span>\n    <span class=\"gray\">///</span><span class=\"green\"> sanity. Neither is necessarily sane.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> True means possibly sane, false means probably </span>\n    <span class=\"gray\">///</span><span class=\"green\"> not.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"blue\">bool</span> sanityCheckViewSpecific(\n      <span class=\"teal\">NameValueCollection</span> listOfImports,\n      <span class=\"teal\">IReportImportData</span> logFile )\n    {\n      logFile.startReportSection(\n        <span class=\"maroon\">\"Sanity check report for view-specific imports\"</span> );\n \n      <span class=\"blue\">bool</span> status = <span class=\"blue\">true</span>;\n \n      <span class=\"green\">// Count number of entities per key.</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">String</span> key <span class=\"blue\">in</span> listOfImports.AllKeys )\n      {\n        <span class=\"blue\">string</span>[] levels = listOfImports.GetValues( key );\n        <span class=\"blue\">if</span>( levels != <span class=\"blue\">null</span> &amp;&amp; levels.GetLength( 0 ) &gt; 1 )\n        {\n          logFile.logItem( <span class=\"maroon\">\"CAD data \"</span> + key\n            + <span class=\"maroon\">\" appears to have been imported in \"</span>\n            + <span class=\"maroon\">\"Current View Only mode multiple times. \"</span>\n            + <span class=\"maroon\">\"It is present in views \"</span>\n            + listOfImports.Get( key ) );\n          status = <span class=\"blue\">false</span>;\n        }\n      }\n      <span class=\"blue\">return</span> status;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      listImports( doc );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><p>Many thanks to Nikolay for sharing this!</p><p>I followed his instructions and created the following trivial minimal sample model with three imports of a 2D DWG to test it:</p><center>\n<img alt=\"Three DWG import instances\" src=\"img/three_dwg_imports.png\" width=\"510\"/>\n</center><p>Launching the external command generates a report of duplicate instances, stores it in a text file and displays the following task dialogue, with a command link to view the file:</p><center>\n<img alt=\"ListImportInstances task dialogue with command link\" src=\"img/ListImportInstances01.png\" width=\"446\"/>\n</center><p>Clicking the command link opens the text in the default application, in this case Notepad:</p><center>\n<img alt=\"ListImportInstances report on duplicate instances\" src=\"img/ListImportInstances02.png\" width=\"571\"/>\n</center><p>As always, the most up-to-date version including the full source code, Visual Studio solution and add-in manifest is provided by the\n\n<a href=\"https://github.com/jeremytammik/ListImportInstances\">ListImportInstances GitHub repository</a>.</p><p>The version presented above is\n\n<a href=\"https://github.com/jeremytammik/ListImportInstances/releases/tag/2015.0.0.1\">release 2015.0.0.1</a>.</p><p>I am looking forward to hearing from you how you make use of and enhance this.</p><p>Please feel free to fork and submit pull requests.</p>"
  }
]