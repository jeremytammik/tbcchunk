[
  {
    "original_filename": "1123_category_analysis",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1123_category_analysis",
    "header_text": "Category Analysis with and without Python",
    "local_header_href": "#category-analysis-with-and-without-python",
    "chunk_text": "<h3>Category Analysis with and without Python</h3><p>Here is a useful approach for analysing categories by Alexander Ignatovich of\n\n<a href=\"http://www.iv-com.ru\">\nInvesticionnaya Venchurnaya Companiya</a>,\n\noriginating from the following query:</p><p><strong>Question:</strong> How can I check that a given family is an annotation?</p><p>For example, I have a family with BuiltInCategory.OST_GridHeads family category.</p><p>Revit knows that this is an annotation category and shows it inside the corresponding group in the project browser.</p><p>However, there are no annotation \"super groups\" in the BuiltInCategory enumerable, and family.FamilyCategory.Parent is null.</p><p><strong>Answer:</strong> I am not aware of any way to achieve this in Revit 2014.</p><p>As you certainly thought of yourself, you could implement a workaround by hard-coding a list enumerating and manually classifying all the categories that you are interested in.</p><p>For that, it might also be helpful to keep in mind that instances of annotation categories are generally view-specific, and model categories are generally not. This requires instances to be present that you can interrogate.</p><p><strong>Response:</strong> It is actually more important for me to know, that a family is <b>not</b> an annotation.</p><p>I created the following hack to help determine this.</p><p>Instead of looking at more than 700 categories one by one, I do the following:</p><ul>\n<li>Manually create a project parameter.</li>\n<li>Add check marks for it to all the categories I am interested in.</li>\n<li>Iterate over the project parameter bindings.</li>\n<li>For every binding of my project parameter, for every category bound to it, list the built-in category enumeration name and underlying integer value.</li>\n</ul><p>The latter two steps are quickly implemented by this IronPython code in the RevitPythonShell:</p><pre class=\"prettyprint\">\n  from System import *\n  bindings = doc.ParameterBindings\n  it = bindings.ForwardIterator()\n  while it.MoveNext():\n    if it.Key.Name == 'my': # project parameter name\n      for cat in it.Current.Categories:\n        print Enum.ToObject(BuiltInCategory, cat.Id.IntegerValue)\n</pre><p>For instance, I wanted to get the list of all \"model\" categories; there are about 800 categories in the BuiltInCategory enumeration. Project parameters can be applied to all \"model\" categories and also to some system and analytical model categories. It is really good way to extract the desired category list: just select all categories and deselect system and analytical model categories. This is especially helpful when you are working with a localized version of the program, because sometimes the translation is not perfect :-)</p><p>Here is a picture to clarify:</p><center>\n<img alt=\"Selected project parameter categories\" src=\"img/project_param_categories.png\"/>\n</center><p>Many thanks to Alexander for sharing this powerful idea!</p><p>It shows once again how handy and effective it is to use the tools and functionality provided by Revit as far as possible, which is a long way, and enhance them with\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/intimate-revit-database-exploration-with-the-python-shell.html\">\ninteractive Python for in-depth Revit database exploration</a>.</p>"
  }
]