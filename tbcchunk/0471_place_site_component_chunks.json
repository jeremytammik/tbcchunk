[
  {
    "original_filename": "0471_place_site_component",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0471_place_site_component",
    "header_text": "Place Detail Instance",
    "local_header_href": "#place-detail-instance",
    "chunk_text": "<h3>Place Detail Instance</h3><p>After several discussions on placing family instances, such as the use of \n\n<!-- 402_place_family_instance.htm -->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/place-family-instance.html\">\nPromptForFamilyInstancePlacement</a> and placing\n\n<!-- 450_place_detail_inst.htm -->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/place-detail-instance.html\">\ndetail instances in 2D</a>, \n\nhere is a another question in a similar vein on placing trees and site components from Jeremiah Farmer of\n\n<a href=\"http://www.landfx.com\">\nLand F/X</a>.\n\n<p>And by the way, I am hoping (ever so slightly) that this discussion and the tools presented below may help Kristoffer with his \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-beam.html?cid=6a00e553e168978833013488b40382970c#comment-6a00e553e168978833013488b40382970c\">\nfurniture insertion problem</a> as well.\n\n<p><strong>Question:</strong> I am trying to automate the placement of trees into the Revit model.\nI can't seem to find the appropriate NewFamilyInstance overload to call, or call it correctly.\nAnd <strong>nowhere</strong> can I locate an example of placing a Site Component through the API.  \nThis is killing me!\nPlease, please help with this, or if you can direct me somewhere.\nKnow that this will greatly speed Disney's adoption of Revit, as well as many of our other clients.\n\n<p><strong>Answer:</strong> What have you tried so far?\n \nHave you seen the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/place-detail-instance.html\">\nplacing a detail instance</a>?\n \n<p>Two snippets of code that may be useful for testing that cropped up since I published that:\n\n<ol>\n<li><a href=\"#1\">PlaceInstancesOnViews</a>: This method tests placing a specific family instance in all views, to ensure that a detail instance can indeed be placed in a detail view using the NewFamilyInstance overload taking the arguments XYZ, targetFamily, view.\n\n<li><a href=\"#2\">TestAllOverloads</a>: This method calls all possible overloads of NewFamilyInstance in order to find one that works.\n</li></li></ol>\n<p>Here is the code for these two:\n\n<a name=\"2\"></a>\n<h4>1. PlaceInstancesOnViews</h4>\n<p>Test placing a specific family instance in all views, to ensure that a detail instance can indeed be placed in a detail view using the NewFamilyInstance overload taking the arguments XYZ, targetFamily, view:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> PlaceInstancesOnViews( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">FilteredElementCollector</span> collector \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  collector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) );\n \n  <span class=\"teal\">Func</span>&lt;<span class=\"teal\">FamilySymbol</span>, <span class=\"blue\">bool</span>&gt; isTargetFamily \n    = famSym =&gt; famSym.Name.Contains( <span class=\"maroon\">\"Rowlock\"</span> );\n \n  <span class=\"teal\">FamilySymbol</span> targetFamily \n    = collector.OfType&lt;<span class=\"teal\">FamilySymbol</span>&gt;()\n      .Where&lt;<span class=\"teal\">FamilySymbol</span>&gt;( isTargetFamily )\n      .First&lt;<span class=\"teal\">FamilySymbol</span>&gt;();\n \n  collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  collector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">View</span> ) );\n \n  <span class=\"teal\">Func</span>&lt;<span class=\"teal\">View</span>, <span class=\"blue\">bool</span>&gt; isPossibleView \n    = v =&gt; !v.IsTemplate &amp;&amp; !( v <span class=\"blue\">is</span> <span class=\"teal\">View3D</span> );\n \n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt; possibleViews \n    = collector.OfType&lt;<span class=\"teal\">View</span>&gt;()\n      .Where&lt;<span class=\"teal\">View</span>&gt;( isPossibleView );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> view <span class=\"blue\">in</span> possibleViews )\n  {\n    <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc, \n      <span class=\"maroon\">\"Add instance to \"</span> + view.Name );\n \n    t.Start();\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">FamilyInstance</span> result \n        = doc.Create.NewFamilyInstance( \n          <span class=\"teal\">XYZ</span>.Zero, targetFamily, view );\n \n      t.Commit();\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      t.RollBack();\n    }\n  }\n}\n</pre>\n<a name=\"2\"></a>\n<h4>2. TestAllOverloads</h4>\n<p>Test calling all possible NewFamilyInstance overloads on the given symbol in order to find one that works:\n<pre class=\"code\">\n<span class=\"blue\">void</span> TestAllOverloads(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"teal\">XYZ</span> startPoint,\n  <span class=\"teal\">XYZ</span> endPoint,\n  <span class=\"teal\">FamilySymbol</span> familySymbol )\n{\n  <span class=\"teal\">StructuralType</span> stNon = <span class=\"teal\">StructuralType</span>.NonStructural;\n  <span class=\"teal\">StructuralType</span> stBeam = <span class=\"teal\">StructuralType</span>.Beam;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Document</span> cd\n    = doc.Create;\n \n  <span class=\"teal\">View</span> view = doc.ActiveView;\n  <span class=\"teal\">SketchPlane</span> sk = view.SketchPlane;\n  <span class=\"teal\">Level</span> level = view.Level;\n \n  <span class=\"green\">// Create line from user points</span>\n \n  <span class=\"teal\">Curve</span> curve = doc.Application.Create.NewLineBound( startPoint, endPoint );\n \n  <span class=\"green\">// Create direction vector from user points</span>\n \n  <span class=\"teal\">XYZ</span> dirVec = endPoint - startPoint;\n \n  <span class=\"blue\">bool</span> done = <span class=\"blue\">false</span>;\n  <span class=\"blue\">int</span> index = 1;\n  <span class=\"blue\">while</span>( !done )\n  {\n    <span class=\"teal\">FamilyInstance</span> instance = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Try different insert methods</span>\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"blue\">switch</span>( index )\n      {\n        <span class=\"green\">// public FamilyInstance NewFamilyInstance( </span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 1:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 2:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance( </span>\n        <span class=\"green\">//   XYZ origin, FamilySymbol symbol, </span>\n        <span class=\"green\">//   View specView );</span>\n \n        <span class=\"blue\">case</span> 3:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span> );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 4:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, view );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Element host, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 5:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 6:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   XYZ referenceDirection, Element host, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 7:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, dirVec, sk, \n            stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 8:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, dirVec, sk, \n            stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   Curve curve, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Level level, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 9:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 10:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 11:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, level, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 12:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, level, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Level level, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 13:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 14:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 15:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, level, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 16:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, level, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Element host, Level level, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 17:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 18:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 19:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 20:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">default</span>:\n          done = <span class=\"blue\">true</span>;\n          <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">catch</span>\n    { }\n \n    <span class=\"green\">// If instance was created, mark with identifier so I can see which instances were created</span>\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != instance )\n    {\n      <span class=\"teal\">Parameter</span> param = instance.get_Parameter( <span class=\"maroon\">\"InstanceIndex\"</span> );\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != param )\n      {\n        param.Set( index );\n      }\n    }\n    index++;\n  }\n}\n</pre>\n<p>I hope that this will be of use in you further research.\n \n<p>Please let me know how you fare and what you come up with!\n \n<p><strong>Response:</strong> I had not seen that example, but that is very similar to what I finally got working last night.\n\n<p>It seems Site Components need to be attached to the Topo Surface, so I end up calling NewFamilyInstance with XYZ, FamilySymbol, TopoSurface, StructuralType.\n\n<p>It turns out the Z coordinate can be zero, by specifying TopoSurface it will be anchored correctly. \n\n<p>I also had to come up with two helper functions, one to locate the TopoSurface, and one to locate the FamilySymbol reference (as LoadFamilySymbol only returns a Boolean, not a reference to the FamilySymbol!  \nHow crazy is that?).\n\n<p>So I think I'm on my way.  \nI can't tell you how much I appreciate you getting back to me!\n\n<p>I'd be happy to share!\nHere is \n\n<a href=\"zip/placeplant.vb\">\nplaceplant.vb</a> containing\n\nthe basic outline of what I have so far, representing the first portion of our Revit add-on.\nI should inform you that this is to be part of a commercial application, Land F/X.  \n\n<p>The hurdles I have cleared so far were finding the appropriate overload of NewFamilyInstance to use for Site Components, as well as the creation of the two helper functions (which I'm positive can be simplified or optimized in some fashion, but at least they work!).\nYou can see I have also figured out how to set various parameters of the Family Symbol, as well as the Instance, and have marked up my findings on later creating custom Parameters for these values.\n\n<!-- \n<p>Today I will be placing this routine within a loop, to have it process multiple Trees.\nI'll send over that version no later than early next week, and it should also include ample comments. \n-->\n<p>Very many thanks to Jeremiah for his enthusiasm and this solution and sample code for placing site components!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0471_place_site_component",
    "header_text": "1. PlaceInstancesOnViews",
    "local_header_href": "#1-placeinstancesonviews",
    "chunk_text": "<h4>1. PlaceInstancesOnViews</h4><p>Test placing a specific family instance in all views, to ensure that a detail instance can indeed be placed in a detail view using the NewFamilyInstance overload taking the arguments XYZ, targetFamily, view:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> PlaceInstancesOnViews( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">FilteredElementCollector</span> collector \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  collector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) );\n \n  <span class=\"teal\">Func</span>&lt;<span class=\"teal\">FamilySymbol</span>, <span class=\"blue\">bool</span>&gt; isTargetFamily \n    = famSym =&gt; famSym.Name.Contains( <span class=\"maroon\">\"Rowlock\"</span> );\n \n  <span class=\"teal\">FamilySymbol</span> targetFamily \n    = collector.OfType&lt;<span class=\"teal\">FamilySymbol</span>&gt;()\n      .Where&lt;<span class=\"teal\">FamilySymbol</span>&gt;( isTargetFamily )\n      .First&lt;<span class=\"teal\">FamilySymbol</span>&gt;();\n \n  collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  collector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">View</span> ) );\n \n  <span class=\"teal\">Func</span>&lt;<span class=\"teal\">View</span>, <span class=\"blue\">bool</span>&gt; isPossibleView \n    = v =&gt; !v.IsTemplate &amp;&amp; !( v <span class=\"blue\">is</span> <span class=\"teal\">View3D</span> );\n \n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">View</span>&gt; possibleViews \n    = collector.OfType&lt;<span class=\"teal\">View</span>&gt;()\n      .Where&lt;<span class=\"teal\">View</span>&gt;( isPossibleView );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">View</span> view <span class=\"blue\">in</span> possibleViews )\n  {\n    <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc, \n      <span class=\"maroon\">\"Add instance to \"</span> + view.Name );\n \n    t.Start();\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"teal\">FamilyInstance</span> result \n        = doc.Create.NewFamilyInstance( \n          <span class=\"teal\">XYZ</span>.Zero, targetFamily, view );\n \n      t.Commit();\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      t.RollBack();\n    }\n  }\n}\n</pre>\n<a name=\"2\"></a>\n<h4>2. TestAllOverloads</h4>\n<p>Test calling all possible NewFamilyInstance overloads on the given symbol in order to find one that works:\n<pre class=\"code\">\n<span class=\"blue\">void</span> TestAllOverloads(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"teal\">XYZ</span> startPoint,\n  <span class=\"teal\">XYZ</span> endPoint,\n  <span class=\"teal\">FamilySymbol</span> familySymbol )\n{\n  <span class=\"teal\">StructuralType</span> stNon = <span class=\"teal\">StructuralType</span>.NonStructural;\n  <span class=\"teal\">StructuralType</span> stBeam = <span class=\"teal\">StructuralType</span>.Beam;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Document</span> cd\n    = doc.Create;\n \n  <span class=\"teal\">View</span> view = doc.ActiveView;\n  <span class=\"teal\">SketchPlane</span> sk = view.SketchPlane;\n  <span class=\"teal\">Level</span> level = view.Level;\n \n  <span class=\"green\">// Create line from user points</span>\n \n  <span class=\"teal\">Curve</span> curve = doc.Application.Create.NewLineBound( startPoint, endPoint );\n \n  <span class=\"green\">// Create direction vector from user points</span>\n \n  <span class=\"teal\">XYZ</span> dirVec = endPoint - startPoint;\n \n  <span class=\"blue\">bool</span> done = <span class=\"blue\">false</span>;\n  <span class=\"blue\">int</span> index = 1;\n  <span class=\"blue\">while</span>( !done )\n  {\n    <span class=\"teal\">FamilyInstance</span> instance = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Try different insert methods</span>\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"blue\">switch</span>( index )\n      {\n        <span class=\"green\">// public FamilyInstance NewFamilyInstance( </span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 1:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 2:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance( </span>\n        <span class=\"green\">//   XYZ origin, FamilySymbol symbol, </span>\n        <span class=\"green\">//   View specView );</span>\n \n        <span class=\"blue\">case</span> 3:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span> );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 4:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, view );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Element host, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 5:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 6:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   XYZ referenceDirection, Element host, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 7:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, dirVec, sk, \n            stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 8:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, dirVec, sk, \n            stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   Curve curve, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Level level, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 9:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 10:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 11:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, level, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 12:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, level, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Level level, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 13:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 14:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 15:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, level, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 16:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, level, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Element host, Level level, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 17:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 18:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 19:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 20:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">default</span>:\n          done = <span class=\"blue\">true</span>;\n          <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">catch</span>\n    { }\n \n    <span class=\"green\">// If instance was created, mark with identifier so I can see which instances were created</span>\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != instance )\n    {\n      <span class=\"teal\">Parameter</span> param = instance.get_Parameter( <span class=\"maroon\">\"InstanceIndex\"</span> );\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != param )\n      {\n        param.Set( index );\n      }\n    }\n    index++;\n  }\n}\n</pre>\n<p>I hope that this will be of use in you further research.\n \n<p>Please let me know how you fare and what you come up with!\n \n<p><strong>Response:</strong> I had not seen that example, but that is very similar to what I finally got working last night.\n\n<p>It seems Site Components need to be attached to the Topo Surface, so I end up calling NewFamilyInstance with XYZ, FamilySymbol, TopoSurface, StructuralType.\n\n<p>It turns out the Z coordinate can be zero, by specifying TopoSurface it will be anchored correctly. \n\n<p>I also had to come up with two helper functions, one to locate the TopoSurface, and one to locate the FamilySymbol reference (as LoadFamilySymbol only returns a Boolean, not a reference to the FamilySymbol!  \nHow crazy is that?).\n\n<p>So I think I'm on my way.  \nI can't tell you how much I appreciate you getting back to me!\n\n<p>I'd be happy to share!\nHere is \n\n<a href=\"zip/placeplant.vb\">\nplaceplant.vb</a> containing\n\nthe basic outline of what I have so far, representing the first portion of our Revit add-on.\nI should inform you that this is to be part of a commercial application, Land F/X.  \n\n<p>The hurdles I have cleared so far were finding the appropriate overload of NewFamilyInstance to use for Site Components, as well as the creation of the two helper functions (which I'm positive can be simplified or optimized in some fashion, but at least they work!).\nYou can see I have also figured out how to set various parameters of the Family Symbol, as well as the Instance, and have marked up my findings on later creating custom Parameters for these values.\n\n<!-- \n<p>Today I will be placing this routine within a loop, to have it process multiple Trees.\nI'll send over that version no later than early next week, and it should also include ample comments. \n-->\n<p>Very many thanks to Jeremiah for his enthusiasm and this solution and sample code for placing site components!\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0471_place_site_component",
    "header_text": "2. TestAllOverloads",
    "local_header_href": "#2-testalloverloads",
    "chunk_text": "<h4>2. TestAllOverloads</h4><p>Test calling all possible NewFamilyInstance overloads on the given symbol in order to find one that works:\n<pre class=\"code\">\n<span class=\"blue\">void</span> TestAllOverloads(\n  <span class=\"teal\">Document</span> doc,\n  <span class=\"teal\">XYZ</span> startPoint,\n  <span class=\"teal\">XYZ</span> endPoint,\n  <span class=\"teal\">FamilySymbol</span> familySymbol )\n{\n  <span class=\"teal\">StructuralType</span> stNon = <span class=\"teal\">StructuralType</span>.NonStructural;\n  <span class=\"teal\">StructuralType</span> stBeam = <span class=\"teal\">StructuralType</span>.Beam;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Document</span> cd\n    = doc.Create;\n \n  <span class=\"teal\">View</span> view = doc.ActiveView;\n  <span class=\"teal\">SketchPlane</span> sk = view.SketchPlane;\n  <span class=\"teal\">Level</span> level = view.Level;\n \n  <span class=\"green\">// Create line from user points</span>\n \n  <span class=\"teal\">Curve</span> curve = doc.Application.Create.NewLineBound( startPoint, endPoint );\n \n  <span class=\"green\">// Create direction vector from user points</span>\n \n  <span class=\"teal\">XYZ</span> dirVec = endPoint - startPoint;\n \n  <span class=\"blue\">bool</span> done = <span class=\"blue\">false</span>;\n  <span class=\"blue\">int</span> index = 1;\n  <span class=\"blue\">while</span>( !done )\n  {\n    <span class=\"teal\">FamilyInstance</span> instance = <span class=\"blue\">null</span>;\n \n    <span class=\"green\">// Try different insert methods</span>\n \n    <span class=\"blue\">try</span>\n    {\n      <span class=\"blue\">switch</span>( index )\n      {\n        <span class=\"green\">// public FamilyInstance NewFamilyInstance( </span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 1:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 2:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance( </span>\n        <span class=\"green\">//   XYZ origin, FamilySymbol symbol, </span>\n        <span class=\"green\">//   View specView );</span>\n \n        <span class=\"blue\">case</span> 3:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span> );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 4:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, view );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Element host, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 5:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 6:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   XYZ referenceDirection, Element host, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 7:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, dirVec, sk, \n            stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 8:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, dirVec, sk, \n            stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   Curve curve, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Level level, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 9:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 10:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 11:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, level, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 12:\n          instance = cd.NewFamilyInstance( \n            curve, familySymbol, level, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Level level, StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 13:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 14:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 15:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, level, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 16:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, level, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"green\">// public FamilyInstance NewFamilyInstance(</span>\n        <span class=\"green\">//   XYZ location, FamilySymbol symbol, </span>\n        <span class=\"green\">//   Element host, Level level, </span>\n        <span class=\"green\">//   StructuralType structuralType );</span>\n \n        <span class=\"blue\">case</span> 17:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 18:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, <span class=\"blue\">null</span>, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 19:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stNon );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">case</span> 20:\n          instance = cd.NewFamilyInstance( \n            startPoint, familySymbol, sk, stBeam );\n          <span class=\"blue\">break</span>;\n \n        <span class=\"blue\">default</span>:\n          done = <span class=\"blue\">true</span>;\n          <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">catch</span>\n    { }\n \n    <span class=\"green\">// If instance was created, mark with identifier so I can see which instances were created</span>\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != instance )\n    {\n      <span class=\"teal\">Parameter</span> param = instance.get_Parameter( <span class=\"maroon\">\"InstanceIndex\"</span> );\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != param )\n      {\n        param.Set( index );\n      }\n    }\n    index++;\n  }\n}\n</pre>\n<p>I hope that this will be of use in you further research.\n \n<p>Please let me know how you fare and what you come up with!\n \n<p><strong>Response:</strong> I had not seen that example, but that is very similar to what I finally got working last night.\n\n<p>It seems Site Components need to be attached to the Topo Surface, so I end up calling NewFamilyInstance with XYZ, FamilySymbol, TopoSurface, StructuralType.\n\n<p>It turns out the Z coordinate can be zero, by specifying TopoSurface it will be anchored correctly. \n\n<p>I also had to come up with two helper functions, one to locate the TopoSurface, and one to locate the FamilySymbol reference (as LoadFamilySymbol only returns a Boolean, not a reference to the FamilySymbol!  \nHow crazy is that?).\n\n<p>So I think I'm on my way.  \nI can't tell you how much I appreciate you getting back to me!\n\n<p>I'd be happy to share!\nHere is \n\n<a href=\"zip/placeplant.vb\">\nplaceplant.vb</a> containing\n\nthe basic outline of what I have so far, representing the first portion of our Revit add-on.\nI should inform you that this is to be part of a commercial application, Land F/X.  \n\n<p>The hurdles I have cleared so far were finding the appropriate overload of NewFamilyInstance to use for Site Components, as well as the creation of the two helper functions (which I'm positive can be simplified or optimized in some fashion, but at least they work!).\nYou can see I have also figured out how to set various parameters of the Family Symbol, as well as the Instance, and have marked up my findings on later creating custom Parameters for these values.\n\n<!-- \n<p>Today I will be placing this routine within a loop, to have it process multiple Trees.\nI'll send over that version no later than early next week, and it should also include ample comments. \n-->\n<p>Very many thanks to Jeremiah for his enthusiasm and this solution and sample code for placing site components!\n</p></p></p></p></p></p></p></p></p></p></p>"
  }
]