[
  {
    "original_filename": "0483_project_vasari_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0483_project_vasari_api",
    "header_text": "Project Vasari API",
    "local_header_href": "#project-vasari-api",
    "chunk_text": "<h3>Project Vasari API</h3><p>I mentioned the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/autodesk-project-vasari.html\">\nAutodesk Project Vasari</a> last week, \n\nand the first \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/autodesk-project-vasari.html?cid=6a00e553e16897883301348933a6ba970c#comment-6a00e553e16897883301348933a6ba970c\">\nquestion from Fernando Malard</a> was \n\nwhether it also provides an API.\n\n<p>The question makes a lot of sense on this blog, since everything we discuss here is related to the Revit API.\nI thought Vasari would be an exception.\nSurprisingly, this is not the case.\n\n<p>Ritchie Jackson asked the same thing, and received the following very satisfying reply from Matt Jezyk:\n\n<p><strong>Question:</strong> Vasari has the potential to be a great product but I can't find the 'Macro' button.\nA coding or scripting facility is essential for a conceptual design tool such as this.\n\n<p>For post-graduate students like myself, inclusion of the above facility would make the difference between adoption or rejection of the application.\n\n<p>I find the Revit API extremely useful, as you can see from my recent posts on \n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/blends-hermite-splines-and-derivatives.html\">Blends, Hermite splines and derivatives</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/complexity-versus-constructability.html\">Complexity versus constructability</a>\n</li></li></ul>\n<p><strong>Answer:</strong> Thanks for the interest and feedback. \nVasari does not include the VSTA macro feature, but it does have a powerful .NET based API, a subset of the Revit API. \nWe have many existing customers, students and faculty interested in the exact workflows you are interested in, so we'd love to work closely with you on topics in this area.  \nMany of the people working on Vasari and the conceptual modelling features have a background in parametric modelling and programming.\n\n<p>Vasari has an API that basically is a subset of the Revit API â€“ it exposes the conceptual modelling and family editor APIs. \nIf you are familiar with the Revit API you should have no issues. \nIf you develop something based on the Revit 2011 API that only uses the family editor or conceptual mass APIs it should work in Vasari. \nIf, however, you try to use the creation methods for walls, floors, beams, ducts, columns in Vasari, then the API will return an exception, because these detailed elements are not allowed to be created in Vasari.\n \n<p>Also note Vasari is a technology preview and ADN does not provide any support for it.\n\n<p>Wow. Sounds good to me.\n\n<p>Many thanks to Ritchie and Matt for this exciting information!\n\n<!-- External, gbXML, Geometry, News, RME, Utilities -->\n<p>Ritchie went on to explore further, and has the following to say:\n\n<h4>Vasari and the API</h4>\n<p>After taking a look at Vasari, I thought that a great package had been let down by the lack of access to the API. \nThanks to Matt Jezyk of Autodesk for pointing out that this was not the case and that a sub-set of the Revit API is in fact accessible.</p>\n<p>I found that Vasari automatically creates the following directories on launching:-</p>\n<ul>\n<li>C:\\Program Files\\Autodesk\\Vasari TP1.0\\Program\\Addins\n<li>C:\\Documents and Settings\\All Users\\Application Data\\Autodesk\\VAS TP1.0\n<li>C:\\Documents and Settings\\myDirectory\\Application Data\\Autodesk\\Vasari\\Addins\\TP1.0\n</li></li></li></ul>\n<p>You need to put Add-In Manifest files into the last one which appears to be the current user directory.\nAlthough the first also has an Addin folder it doesn't recognise user-created items, even if a TP1.0 sub-folder is created.</p>\n<p>Vasari will now show an Add-Ins Tab:-</p>\n<center>\n<img alt=\"Interface\" src=\"img/ritchie-Vasari-01-App.jpg\"/>\n</center>\n<p>The model below was created in Vasari from an external command. \nIt's fully parametric with the frame splines being evaluated at a chosen number of intervals to set out the 'louvres'. \nThe projection extents of the latter items are proportional to the iteration numbers:-</p>\n<center>\n<img alt=\"Shelter Model\" src=\"img/ritchie-Vasari-01.jpg\"/>\n</center>\n<p>Here is the \n\n<a href=\"zip/RJ_Vasari_01.dll\">\nDLL for that model</a> as \n\nwell as \n\n<a href=\"zip/RJ_Vasari_02.dll\">\na basic \"Greetings\" test</a> for \n\nanyone to try them out</p>\n<p>Jeremy adds: I used \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html\">\nReflector</a> to \n\ndecompile Ritchie's Hello World sample, just to prove that it really is a completely normal Revit add-in:</p>\n<center>\n<img alt=\"Vasari Hello World decompiled\" src=\"img/vasari_hello_world.png\"/>\n</center>\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0483_project_vasari_api",
    "header_text": "Vasari and the API",
    "local_header_href": "#vasari-and-the-api",
    "chunk_text": "<h4>Vasari and the API</h4><p>After taking a look at Vasari, I thought that a great package had been let down by the lack of access to the API. \nThanks to Matt Jezyk of Autodesk for pointing out that this was not the case and that a sub-set of the Revit API is in fact accessible.</p><p>I found that Vasari automatically creates the following directories on launching:-</p><ul>\n<li>C:\\Program Files\\Autodesk\\Vasari TP1.0\\Program\\Addins\n<li>C:\\Documents and Settings\\All Users\\Application Data\\Autodesk\\VAS TP1.0\n<li>C:\\Documents and Settings\\myDirectory\\Application Data\\Autodesk\\Vasari\\Addins\\TP1.0\n</li></li></li></ul><p>You need to put Add-In Manifest files into the last one which appears to be the current user directory.\nAlthough the first also has an Addin folder it doesn't recognise user-created items, even if a TP1.0 sub-folder is created.</p><p>Vasari will now show an Add-Ins Tab:-</p><center>\n<img alt=\"Interface\" src=\"img/ritchie-Vasari-01-App.jpg\"/>\n</center><p>The model below was created in Vasari from an external command. \nIt's fully parametric with the frame splines being evaluated at a chosen number of intervals to set out the 'louvres'. \nThe projection extents of the latter items are proportional to the iteration numbers:-</p><center>\n<img alt=\"Shelter Model\" src=\"img/ritchie-Vasari-01.jpg\"/>\n</center><p>Here is the \n\n<a href=\"zip/RJ_Vasari_01.dll\">\nDLL for that model</a> as \n\nwell as \n\n<a href=\"zip/RJ_Vasari_02.dll\">\na basic \"Greetings\" test</a> for \n\nanyone to try them out</p><p>Jeremy adds: I used \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/converting-between-vb-and-c-and-net-decompilation.html\">\nReflector</a> to \n\ndecompile Ritchie's Hello World sample, just to prove that it really is a completely normal Revit add-in:</p><center>\n<img alt=\"Vasari Hello World decompiled\" src=\"img/vasari_hello_world.png\"/>\n</center>"
  }
]