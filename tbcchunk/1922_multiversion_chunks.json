[
  {
    "original_filename": "1922_multiversion",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- used migration assistant to move to loaner machine\n  /Users/jta/a/doc/revit/tbc/git/a/img/problem_no_problem.jpg\n\n- ExportCncFab updated for Revit 2022 https://github.com/jeremytammik/ExportCncFab/releases/tag/2022.0.0.0\n  ExportCncFab eliminated deprecated API usage https://github.com/jeremytammik/ExportCncFab/releases/tag/2022.0.0.1\n\n- lots of interest and many threads on multi-version Revit add-in\n  check out wizard alternatives\n  https://forums.autodesk.com/t5/revit-api-forum/multi-version-revit-template/m-p/10659412\n  https://github.com/jeremytammik/VisualStudioRevitAddinWizard#alternatives\n  \n- Additional .dll files as resource\n  https://forums.autodesk.com/t5/revit-api-forum/additional-dll-files-as-resource/m-p/10653802#M58650\n  ricaun in reply to: antonio.hipolito\n  @jrothMEIand @antonio.hipolito you could use Fody.Costura to embed the .dll references automatically, the Costura.Template has the ILTemplate.cs and Common.cs to handle all the load resources files, if the Assembly is already loaded the code does not force it to load again.\n  @jeremy.tammik I use this technic on the ConduitMaterial and others plugins.\n  Adding... ILTemplate.Attach(); on the IExternalApplication should do the trick.\n\ntwitter:\n\nadd #thebuildingcoder\n\nWorking mobile again, lots of options to implement multi-version add-ins and examples showing how to store DLL dependencies in your add-in resources with the #RevitAPI #DynamoBim @AutodeskForge @AutodeskRevit #bim #ForgeDevCon https://autode.sk/multiversion\n\nLots of options to implement multi-version add-ins and examples showing how to store DLL dependencies in your add-in resources\n&ndash; Migration assistant rocks\n&ndash; ExportCncFab 2022\n&ndash; Multi-version Revit add-in\n&ndash; Deploying a DLL file as a resource...\n\nlinkedin:\n\nWorking mobile again, lots of options to implement multi-version add-ins and examples showing how to store DLL dependencies in your add-in resources with the #RevitAPI\n\nhttps://autode.sk/multiversion\n\n- Migration assistant rocks\n- ExportCncFab 2022\n- Multi-version Revit add-in\n- Deploying a DLL file as a resource...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n**Question:** \n\n**Answer:**\n\n**Response:**  \n\nMany thanks to  for this very helpful explanation!\n\n<pre class=\"code\">\n</pre>\n\n-->"
  },
  {
    "original_filename": "1922_multiversion",
    "header_text": "DLL as Resource and Multi-Version Add-Ins",
    "local_header_href": "#dll-as-resource-and-multi-version-add-ins",
    "chunk_text": "### DLL as Resource and Multi-Version Add-Ins\n\nSuccessfully moved from my broken-screen laptop to a loaner machine, updated `ExportCncFab`, collected a list of options to implement multi-version add-ins and some hints on storingLots of odependencies in your add-in resources:\n\n- [Migration assistant rocks](#2)\n- [ExportCncFab 2022](#3)\n- [Multi-version Revit add-in](#4)\n- [Deploying a DLL file as a resource](#5)"
  },
  {
    "original_filename": "1922_multiversion",
    "header_text": "Migration Assistant Rocks",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Migration Assistant Rocks\n\nI mentioned\nmy [computer mishap resulting in a broken screen](https://thebuildingcoder.typepad.com/blog/2021/10/localised-forge-intros-and-apply-code-changes.html#2) and\nthe happy fact that the rest of the system still works.\nUnfortunately, requiring an external screen and hence mains power significantly reduces mobility.\n\nAs a next step, I was able to transfer the entire system with all user and application data to a temporary loaner machine using the Mac migration assistant.\n\nThat worked right out the box.\nThe only problem remaining being that the updated OS prevented me\nfrom [setting up my personal root level directories](https://thebuildingcoder.typepad.com/blog/2021/08/revit-roadmap-api-and-da4r-survey.html#4).\nI am forced to rewrite all my (numerous) shell scripts and add `$HOME` to them.\nI guess I can live with that.\n\n<center>\n<img src=\"img/problem_no_problem.jpg\" alt=\"Problem &ndash; no problem\" title=\"Problem &ndash; no problem\" width=\"400\"/> <!-- 825 -->\n</center>"
  },
  {
    "original_filename": "1922_multiversion",
    "header_text": "ExportCncFab 2022",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> ExportCncFab 2022\n\nBy popular demand, I now\nupdated [ExportCncFab](https://github.com/jeremytammik/ExportCncFab) for Revit 2022.\n\nIt is a Revit .NET API add-in that exports Revit wall parts to DXF or SAT for CNC fabrication, demonstrating various useful aspects along the way, such as:\n\n- Implement the external application\n- Create ribbon panel and command push buttons\n- Load icons from assembly resources\n- Select wall parts and handle optional pre-selection\n- Export wall part elements to DWF or SAT\n- Manage, create and populate shared parameter values\n\nThe flat migration is captured\nin [ExportCncFab release 2022.0.0.0](https://github.com/jeremytammik/ExportCncFab/releases/tag/2022.0.0.0) and\nsome deprecated API usage is eliminated in the subsequent\n[release 2022.0.0.1](https://github.com/jeremytammik/ExportCncFab/releases/tag/2022.0.0.1)."
  },
  {
    "original_filename": "1922_multiversion",
    "header_text": "Multi-Version Revit Add-In",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Multi-Version Revit Add-In\n\nThere has been a lot of interest and several new threads on multi-version Revit add-ins recently, e.g.,\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [multi-version Revit template](https://forums.autodesk.com/t5/revit-api-forum/multi-version-revit-template/m-p/10659412).\n\nSeveral Visual Studio Revit add-in templates now implement support for that functionality right out of the box.\n\nTo provide an overview of the some available options, I added\na [list of alternatives](https://github.com/jeremytammik/VisualStudioRevitAddinWizard#alternatives) to\nthe [VisualStudioRevitAddinWizard GitHub repository](https://github.com/jeremytammik/VisualStudioRevitAddinWizard).\n\n####<a name=\"4.2\"></a> Addendum &ndash; Multiple Projects in Single SLN\n\nPablo Derendinger adds:\n\nHi! I would like to share our experience with multi-version projects.\n\nAfter a lot of work with scripting and pre/post build steps, we found a solution that works like a charm.\n \nWe use a shared project with all the code and a \"build\" project for each Revit version.\n \nEach build version retrieves its specific Revit dlls from nuget. \n \nTo support a new version, we just copy `csproj`, change it's name and nuget references.\n \nTo support changes in the API, we use compile rules to ignore deprecated features.\n \nAt the end of the day we have a single `sln` with a `csproj` per Revit version.\n\nWorks perfectly under a CI/CD workflow.\n \nHope you find it useful."
  },
  {
    "original_filename": "1922_multiversion",
    "header_text": "Deploying a DLL File as a Resource",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Deploying a DLL File as a Resource\n\nIn the thread\non [additional `.dll` files as resource](https://forums.autodesk.com/t5/revit-api-forum/additional-dll-files-as-resource/m-p/10653802#M58650),\nLuiz Henrique [@ricaun](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/4176855) Cassettari provides\na pointer to some useful examples showing how to embed a DLL in the add-in assembly, saying:\n\n> You could\nuse [Fody.Costura](https://github.com/Fody/Costura) to\nembed the .dll references automatically.\nThe [Costura.Template](https://github.com/Fody/Costura/tree/develop/src/Costura.Template) provides\n`ILTemplate.cs` and `Common.cs` to handle all the load resources files.\nIf the Assembly is already loaded, the code does not force it to load again.\nI use this technique on\nthe [ConduitMaterial](https://apps.autodesk.com/RVT/en/Detail/Index?id=9120027511121592515) and\nother plugins.\nAdding `ILTemplate.Attach()` on the `IExternalApplication` should do the trick.\n\nMany thanks to Luiz Henrique for sharing this!"
  },
  {
    "original_filename": "1922_multiversion",
    "header_text": "Addendum &ndash; Handling MahApps Dependencies",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Addendum &ndash; Handling MahApps Dependencies\n\nMicah [@kraftwerk15](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/4045014) Gray adds:\n\nâ€ŽI also wanted to chime in here with resources.\nEhsan actually hopped on a call with me and showed me his process with submodules.\nSince then that's how I have been handling other libraries that I need to use in my project.\n\nWhile I started with an `AssemblyResolver`, loading in a newer version of the assembly will not resolve correctly when a previous version has already been loaded.\nThis came about because of the CTC addins still used the MahApps version 2 (I believe).\nThen I come barrelling in to the situation with the new 3.x versions of MahApps because I wanted to use the new, fancy features.\nRevit will resolve everything up to the point where you wanted to use one of the 3.x features that the 2.x didn't have.\nThen my app would throw an Exception telling me that it couldn't find that 3.x feature because CTC had loaded the 2.x version first.\n\nSo, Ehsan told me about submodules in git (which I had to learn about) and re-building MahApps open-source code under a new .dll name.\n\nOpening the open-source project, changing the name, building the submodules, and then referencing the new submodules have been fantastic.\n\nHere is a snippet of my library with the re-built MahApps content:\n\n<center>\n<img src=\"img/assembly_resolver_dependencies.png\" alt=\"MahApps dependencies\" title=\"MahApps dependencies\" width=\"600\"/> <!-- 1023 -->\n</center>\n\nAlso, if you look in pyRevit's library, Ehsan does the same thing, or at least used to.\n\nKudos of course to Ehsan for showing me this and thanks to Jeremy for pointing out this thread from the blog.\n\nHopefully this helps someone in the future.\n\nKennan Chen adds:\n\nSame issue with MahApps before and I also rebuilt the whole project.\n\nLife can be easier to compile MahApps project with another Public/Private key pair (.snk file), which will sign a unique strong name to the dll.\nReferencing a strong-named dll is supposed to be a common practise to address the \"dll hell\" issue:\n\n- [Strong-named assemblies | Microsoft Docs](https://docs.microsoft.com/en-us/dotnet/standard/assembly/strong-named)"
  }
]