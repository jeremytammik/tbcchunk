[
  {
    "original_filename": "0809_iterate_then_delete",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0809_iterate_then_delete",
    "header_text": "Do Not Delete During Iteration",
    "local_header_href": "#do-not-delete-during-iteration",
    "chunk_text": "<h3>Do Not Delete During Iteration</h3><p>Here is a type of question that crops up much too regularly, and that I am hoping this little example will help you avoid.\n\n<p>When you are iterating over a collection, deleting the elements in the collection at the same time can wreak havoc in many ways.\n\n<p>Here is an example:\n\n<p><strong>Question:</strong> Since my last plug-in was such a huge success here in the office I have been tasked with writing another. However, I've run into an issue. When I run the plug-in Revit crashes with no error message or anything. Revit simply disappears. How do I even begin to debug an issue like this?\n\n<p>The plug-in that I have created counts light fixtures and the room the light fixture is in and writes that data to an excel file so that I can use that data in an eQUEST energy model. If the light fixture is found in a room, and only 1 room, then the light fixture is deleted from the project. This is so I can print out the lighting plans and have a visual representation of the lights that I need to count by hand. \n\n<p>I have tried adding a counter to the code to see where it crashes, however it does not crash on the same light fixture every time. On the sample project I have attached it crashes in the 50s. On a real project it crashes around 640 fixtures. Additionally I have commented out segments of code to fixture out where the issue is. If I comment out the \"element delete code\", then the plug in runs all the way and counts the fixtures to excel, but does not create the visual representation of \"problem fixtures\". I've tried setting the transaction mode to manual and wrapping the \"element delete code\" in a manually created transaction.\n\n<p>I've thought about creating a new family that I would import into the project with a fixture that is a single inch in size, and instead of deleting the fixture, setting the fixture to this really small family. However with that solution I feel like I'm fixture the symptom and not the problem. \n\n<p>I've attached my code and a sample project where it crashes. Is there any insight you can provide about this problem?\n\n<p>Thanks again for your time.\n\n<p><strong>Answer:</strong> Congratulations on the great success of your first add-in!\n\n<p>Regarding your question: you are iterating over the elements and deleting them at the same time.\n\n<p>This is not allowed.\n\n<p>Iterate first and collect a list of elements to delete.\n\n<p>Delete them in a second separate step.\n\n<p>If this helps and you get it to work, this might make a nice blog article, if you are willing to share it, including the mail you sent me already, describing what a great success your first add-in was in your office.\n\n<p>I hope this next add-in (and the following ones?) work out as well as the first.\n\n<p><strong>Response:</strong> Your solution worked. \n\n<p>I just iterated through and created a list and then deleted that list. \n\n<p>Here is the code I used:\n\n<pre class=\"code\">\n  <span class=\"green\">' Loop over rooms...</span>\n\n  <span class=\"blue\">If</span> <span class=\"blue\">Not</span> roomname = <span class=\"maroon\">\"Room not found\"</span> _\n    <span class=\"blue\">And</span> <span class=\"blue\">Not</span> roomname = <span class=\"maroon\">\"Fixture found in multiple rooms\"</span> _\n  <span class=\"blue\">Then</span>\n    idstodelete.Add(e.Id)\n  <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n\n  <span class=\"green\">' End loop.</span>\n \n  <span class=\"green\">' Delete the elements here</span>\n \n  <span class=\"blue\">Dim</span> id <span class=\"blue\">As</span> <span class=\"teal\">ElementId</span>\n  <span class=\"blue\">For</span> <span class=\"blue\">Each</span> id <span class=\"blue\">In</span> idstodelete\n    <span class=\"blue\">Dim</span> e <span class=\"blue\">As</span> <span class=\"teal\">Element</span>\n    e = doc.GetElement(id)\n    doc.Delete(e)\n  <span class=\"blue\">Next</span>\n</pre>\n<p><strong>Answer:</strong> Glad it helped.\n\n<p>Your code can be further improved by using the Document Delete method overload taking an ElementId collection argument instead of the one taking an element itself.\nThat provides two advantages:\n\n<ul>\n<li>No need to open the element from its element id.\n<li>Delete all of the elements in the list in one fell swoop.\n</li></li></ul>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]