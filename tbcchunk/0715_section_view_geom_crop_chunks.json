[
  {
    "original_filename": "0715_section_view_geom_crop",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0715_section_view_geom_crop",
    "header_text": "Section View Geometry Not Cropped",
    "local_header_href": "#section-view-geometry-not-cropped",
    "chunk_text": "<h3>Section View Geometry Not Cropped</h3><p>Here is a nice little chat with some interesting resulting hints that I had with an Australian programmer Bo that clarify the retrieval of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/section-view-geometry.html\">\ngeometry from a section view</a>.\n\nThe main point is that the cutting plane of the section view does affect the retrieved geometry, whereas the view's bounding box does not. \nHere is the path we took to clarify this in all its gory detail:\n\n<p><strong>Question:</strong> I am working on a structural concrete design application and would like to export Revit projects to it for analysis.\n\nI read your recent discussion of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/01/curved-analytical-model-approximation-and-etabs-structural-link.html\">\ncurved analytical model approximation and ETABS structural link</a>, \n\nwhich gives me a very good direction, since I intend to do something very similar.\n\n<p>However, the definition of floors in my application is such that the floor data exported cannot be just a list of lines. \nIt has to be cut by section planes into series of 2D cross section shapes. \nHere is an example of a floor (white colour) and series of red section planes cutting it:</p>\n<center>\n<img alt=\"Floor cross sections\" src=\"img/sectiongeo_floor_sections.png\" width=\"400\"/>\n</center>\n<p>The cross section on each red plane would normally be rectangular. \nIt might also be a very complex polygon with void holes in it, however. \n\n<p>The question is: how do I programmatically retrieve those cross section shapes?\n\n\n<p><strong>Answer:</strong> You can easily extract the cross section shapes from the floor geometry by defining appropriate section views in Revit and asking the floor for its geometry in that specific view, as described by Saeed Karshenas in the note on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/08/section-view-geometry.html\">\nsection view geometry</a>.\n\n\n<p><strong>Response:</strong> I followed your suggestion and made some progress. \nI also have a couple of more questions: \n\n<p><strong>Question 1:</strong> I drew a very rough floor with some beans and columns. \nI want to create a section view that is in the mid of the floor, half of the floor width (X), 1/10 of the floor height (Y) and the whole floor thickness (Z), like this:</p>\n<center>\n<img alt=\"Floor Level 2\" src=\"img/sectiongeo_level2.png\" width=\"400\"/>\n</center>\n<p>This 'Detail 0' view looks correct. \nIt does cut the floor into a flat rectangular:</p>\n<center>\n<img alt=\"Detail view cutting floor\" src=\"img/sectiongeo_detail0.png\" width=\"400\"/>\n</center>\n<p>However, when I was query the geometry from this view, the result gives me the whole floor, not just the portion within the view. \n\n<p>I verified this with the following lines of code:\n\n<pre class=\"code\">\n  <span class=\"green\">// Create the 'Details 0' view</span>\n \n  <span class=\"teal\">BoundingBoxXYZ</span> boundingBox \n    = GetFrontBoundingBox( slab, doc );\n \n  <span class=\"teal\">ViewSection</span> viewSection \n    = doc.Create.NewViewSection( boundingBox );\n \n  <span class=\"green\">// Retrieve the element geometry within the view;</span>\n  <span class=\"green\">// this returns the whole slab (floor)</span>\n \n  <span class=\"teal\">Options</span> options = application.Create\n    .NewGeometryOptions();\n \n  options.View = viewSection;\n \n  <span class=\"teal\">GeometryElement</span> geo1 = slab.get_Geometry( \n    options );\n \n  DumpLines( geo1 );\n \n  <span class=\"green\">// Retrieve the geometry of the whole slab;</span>\n  <span class=\"green\">// this returns the same result</span>\n \n  <span class=\"teal\">GeometryElement</span> geo2 = slab.get_Geometry( \n    <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n  DumpLines( geo2 );\n</pre>\n<p>Both geo1 and geo2 have exactly the same surface area and volume. \nThey contain exactly the same lines (same end points and length). \nI must be missing something here.\n\n<p><strong>Question 2:</strong> This is not a programming question, rather a usage question. \nIn Revit, how can I show the 'Detail 0' view's bounding box in the 3D views so that I can see its location and size?\n\n<p><strong>Answer 1:</strong> Maybe regenerating the model before retrieving the geometry will help?\n\n<p><strong>Answer 2:</strong> Maybe you can use the solution suggested to \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/crop-3d-view-to-room.html\">\ncrop a 3D view to a room</a>?\n\n<p><strong>Response:</strong> I assume you are talking about the Document.Regenerate method.\nI tried this method and it got me a bit further.\n\n<p>Now the geometry volume I retrieve is about 1/2 of the floor geometry. \nIt should however be 1/20 as defined by the view boundary. \nI am pretty sure the view's boundary is 1/20 of the floor as shown in the screen shot above.\n\n<pre class=\"code\">\n  <span class=\"teal\">BoundingBoxXYZ</span> boundingBox \n    = GetFrontBoundingBox( slab, doc );\n \n  <span class=\"teal\">ViewSection</span> viewSection \n    = doc.Create.NewViewSection( boundingBox );\n \n  <span class=\"green\">//viewSection.CropBox = boundingBox;</span>\n \n  <span class=\"teal\">Options</span> options \n    = doc.Application.Create.NewGeometryOptions();\n \n  options.View = viewSection;\n \n  doc.Regenerate();\n \n  <span class=\"teal\">GeometryElement</span> geo1 = slab.get_Geometry( \n    options );\n \n  DumpLines( geo1 );\n \n  <span class=\"teal\">GeometryElement</span> geo2 = slab.get_Geometry( \n    <span class=\"blue\">new</span> <span class=\"teal\">Options</span>() );\n \n  DumpLines( geo2 );\n</pre>\n<p>I am not sure whether I should manually set the view CropBox to be the same as the bounding box. I tried that and it seems to give me a totally wrong result.\nI dumped the edges of geo1 and geo2 to a file and loaded that file into AutoCAD to verify:</p>\n<center>\n<img alt=\"Floor half in AutoCAD\" src=\"img/sectiongeo_floor_half.png\" width=\"400\"/>\n</center>\n<p>geo1 is indeed half of geo2.\n\n\n<p><strong>Answer:</strong> I thought you are not actually looking for a volume at all, just the cross section.\n\n<p>In that case, you need to eliminate all edges that do not lie exactly in the view plane, and create a boundary loop from the remaining ones that do.\n\n\n<p><strong>Response:</strong> I was originally under the impression that the geometry of an element within a section view would be inside the view's bounding box, as suggested by this image from the Revit Developer Guide:</p>\n<center>\n<img alt=\"View section box\" src=\"img/sectiongeo_view_section_box.png\" width=\"400\"/>\n</center>\n<p>After I checked that assumption using the Revit SDK Object Viewer sample, I realized that the view's location and direction will affect the result of Element.get_Geometry, but the view's bounding box will not. \nThe view will be treated as an infinite plane.  \nThis is OK with me. \nI will just have to manually cut the resulting lines so that they fit within the boundaries.\n\n\n<p>Many thanks to Bo for this discussion and his efficient research!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]