[
  {
    "original_filename": "0377_duplicate_legend_component",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0377_duplicate_legend_component",
    "header_text": "Duplicate Legend Component",
    "local_header_href": "#duplicate-legend-component",
    "chunk_text": "<h3>Duplicate Legend Component</h3><p>A number of Revit elements can still not be created programmatically, because the API does not provide the appropriate creation methods for them.\n\n<p>Joe Ye just handled a case asking how to create a new legend component, and Harry Mattison suggested an exciting new possibility that we were previously not aware of.\n\n<p>This method allows us to duplicate many kinds of elements with an existing instance inserted. Here is the original question as a starting point:\n\n<p><strong>Question:</strong> Is it possible to add a new Legend Component to the Legend programmatically?\nI have found no API for the Legend Component.\nIs there some workaround – for example invoking a keyboard shortcut for it?\n\n<p>Is it possible to copy an existing Legend Component and change the family it is referring to?\n\n<p><strong>Answer:</strong> The Revit API does not currently expose any methods that allow us to add a new legend component.\n\n<p>The good news is that there is a workaround to create a new element by copying an existing one.\n\n<p>The solution is to put the element that you would like to copy into a group, place an instance of the group in the document, and then ungroup the two groups.\n\n<p>The result is that the existing element remains and a new element is created in addition.\n\n<p>Here is a new Building Coder sample command CmdDuplicateElements which demonstrates this, and also provides a first example of a command modifying the Revit model using manual transaction mode, which requires it to start and commit its own transaction:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">Regeneration</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdDuplicateElements</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc,\n      <span class=\"maroon\">\"Duplicate Elements\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">Group</span> group = doc.Create.NewGroup(\n      uidoc.Selection.Elements );\n \n    <span class=\"teal\">LocationPoint</span> location = group.Location\n      <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n    <span class=\"teal\">XYZ</span> p = location.Point;\n    <span class=\"teal\">XYZ</span> newPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y + 10, p.Z );\n \n    <span class=\"teal\">Group</span> newGroup = doc.Create.PlaceGroup(\n      newPoint, group.GroupType );\n \n    group.Ungroup();\n \n    <span class=\"teal\">ElementSet</span> eSet = newGroup.Ungroup();\n \n    <span class=\"green\">// change the property or parameter values </span>\n    <span class=\"green\">// of elements in eSet as required...</span>\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>To test this command, you can select a legend component and launch the command.\nA new legend component will be created.\nYou can then change the new legend's parameter\nComponent Type to change the legend type.\n\n<p>I created three legend components and three other detail objects, selected them, and lauched the command, which produced the six copied elements ten feet higher up like this:</p>\n<center>\n<img alt=\"Duplicated elements\" src=\"img/duplicated_elements.png\"/>\n</center>\n<p>Here is\n\n<a href=\"zip/bc_11_70.zip\">\nversion 2011.0.70.0</a>\n\nof The Building Coder sample source code and Visual Studio solution including the new command.\n\n<p>Many thanks to Joe for handling the case and Harry for suggesting this approach.\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]