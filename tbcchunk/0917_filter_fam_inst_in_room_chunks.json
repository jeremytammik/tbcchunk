[
  {
    "original_filename": "0917_filter_fam_inst_in_room",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0917_filter_fam_inst_in_room",
    "header_text": "Filter for Family Instances in a Room",
    "local_header_href": "#filter-for-family-instances-in-a-room",
    "chunk_text": "<h3>Filter for Family Instances in a Room</h3><p>I wish you a\n\n<a href=\"http://en.wikipedia.org/wiki/Good_Friday\">Good Friday</a>.</p><img alt=\"El Greco's Jesus Carrying the Cross, 1580\" src=\"img/Christ_Carrying_the_Cross_1580.jpg\" width=\"200\"/><p>Continuing the research and development for my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/cloud-mobile-extensible-storage-data-use-in-schedules.html#3\">\ncloud-based round-trip 2D Revit model editing project</a>,\n\nI need to determine the boundary loop polygons to represent the furniture and equipment family instances for manipulation on the mobile device.\n\n<p>Before I can start extracting their geometry, I need to access the objects themselves, i.e. determine which family instances are contained in the selected room.</p>\n<p>As always, we use a filtered element collector to access the Revit database elements.</p>\n<p>I try to apply as many quick filters as possible first, and then potentially refine the results adding slow filters and possibly even additional tests in .NET using LINQ or explicit coding.</p>\n<p>In this case, I came up with the following sequence of filter tests which seems to fit my needs:</p>\n<ul>\n<li>Not ElementType</li>\n<li>View independent</li>\n<li>Family instance</li>\n<li>Bounding box intersects outline of the room's bounding box</li>\n</ul>\n<p>The first two may or may not be superfluous, actually, but they do no harm either.</p>\n<p>For the last test, I query the room bounding box, convert it to an Outline, and use that to set up a BoundingBoxIntersectsFilter.\nIt might be possible to implement something stricter than this, or use a BoundingBoxContainsPointFilter instead.</p>\n<p>Currently, the category and other properties are not checked at all.\nOnce I know more exactly what kind of family instances I need, I would add those.</p>\n<p>All of these are quick filters.</p>\n<p>Since the room bounding box may be much larger than the room itself, for instance for an irregularly shaped or long, narrow, diagonal one, I definitely need to post-process the results with a more precise containment test.\nIt could be purely geometric, e.g. using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/point-in-polygon-containment-algorithm.html\">\npoint in polygon containment algorithm</a> as\n\nin the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/room-in-area-predicate-via-point-in-polygon-test.html\">\nroom in area predicate</a>,\n\nor based on other data.</p>\n<p>I chose to implement this by checking the family instance Room property.\nThis test could probably also be moved into a filter, e.g. a parameter filter, which would significantly improve its efficiency by avoiding marshaling the data from internal Revit to the external .NET space before checking and potentially rejecting it.\nSee below for further considerations on using this property.</p>\n<p>The method currently looks like this:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Return the element ids of all furniture and </span>\n<span class=\"gray\">///</span><span class=\"green\"> equipment family instances contained in the </span>\n<span class=\"gray\">///</span><span class=\"green\"> given room.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; GetFurniture( <span class=\"teal\">Room</span> room )\n{\n  <span class=\"teal\">BoundingBoxXYZ</span> bb = room.get_BoundingBox( <span class=\"blue\">null</span> );\n \n  <span class=\"teal\">Outline</span> outline = <span class=\"blue\">new</span> <span class=\"teal\">Outline</span>( bb.Min, bb.Max );\n \n  <span class=\"teal\">BoundingBoxIntersectsFilter</span> filter\n    = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxIntersectsFilter</span>( outline );\n \n  <span class=\"teal\">Document</span> doc = room.Document;\n \n  <span class=\"green\">// Todo: add category filters and other</span>\n  <span class=\"green\">// properties to narrow down the results</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent()\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .WherePasses( filter );\n \n  <span class=\"blue\">int</span> roomid = room.Id.IntegerValue;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; a = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> fi <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"blue\">if</span>( fi.Room.Id.IntegerValue.Equals( roomid ) )\n    {\n      a.Add( fi );\n    }\n  }\n  <span class=\"blue\">return</span> a;\n}\n</pre>\n<a name=\"2\"></a>\n<h4>Family Instance Room Property Considerations</h4>\n<p>For the final test whether the family instance lies inside the selected room, I simply use the FamilyInstance.Room property.</p>\n<p>I am aware that there may be some\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/unreliable-room-properties.html\">\nissues with the Room property</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/phase-dependent-room-properties.html\">\nits phase dependency</a>,\n\nand Patrick Rosendahl implemented a more reliable\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/family-instance-room-phase.html\">\nDetermineRoom method</a> to\n\nfind a containing room for a given element under all circumstances.\nIn a complex model, I might have to add such enhancements to my approach.\n\n\n\n<a name=\"3\"></a>\n<h4>Considerations Processing a Complete Model</h4>\n<p>Another issue is that the filter I present above searches for the family instances on a room by room basis.</p>\n<p>This is fine as long as I am just looking at one single room.</p>\n<p>If I wished to process all rooms of an entire large model, I would definitely approach this completely differently.\nFor instance, I might select all family instances of interest in the entire model, determine the containing room for each one of them, and then\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/relationship-in.html\">\ninvert that relationship</a> to\n\nobtain a list of instances for each room.</p>\n</p></p>"
  },
  {
    "original_filename": "0917_filter_fam_inst_in_room",
    "header_text": "Family Instance Room Property Considerations",
    "local_header_href": "#family-instance-room-property-considerations",
    "chunk_text": "<h4>Family Instance Room Property Considerations</h4><p>For the final test whether the family instance lies inside the selected room, I simply use the FamilyInstance.Room property.</p><p>I am aware that there may be some\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/unreliable-room-properties.html\">\nissues with the Room property</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/02/phase-dependent-room-properties.html\">\nits phase dependency</a>,\n\nand Patrick Rosendahl implemented a more reliable\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/02/family-instance-room-phase.html\">\nDetermineRoom method</a> to\n\nfind a containing room for a given element under all circumstances.\nIn a complex model, I might have to add such enhancements to my approach.\n\n\n\n<a name=\"3\"></a>\n<h4>Considerations Processing a Complete Model</h4>\n<p>Another issue is that the filter I present above searches for the family instances on a room by room basis.</p>\n<p>This is fine as long as I am just looking at one single room.</p>\n<p>If I wished to process all rooms of an entire large model, I would definitely approach this completely differently.\nFor instance, I might select all family instances of interest in the entire model, determine the containing room for each one of them, and then\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/relationship-in.html\">\ninvert that relationship</a> to\n\nobtain a list of instances for each room.</p>\n</p>"
  },
  {
    "original_filename": "0917_filter_fam_inst_in_room",
    "header_text": "Considerations Processing a Complete Model",
    "local_header_href": "#considerations-processing-a-complete-model",
    "chunk_text": "<h4>Considerations Processing a Complete Model</h4><p>Another issue is that the filter I present above searches for the family instances on a room by room basis.</p><p>This is fine as long as I am just looking at one single room.</p><p>If I wished to process all rooms of an entire large model, I would definitely approach this completely differently.\nFor instance, I might select all family instances of interest in the entire model, determine the containing room for each one of them, and then\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/relationship-in.html\">\ninvert that relationship</a> to\n\nobtain a list of instances for each room.</p>"
  }
]