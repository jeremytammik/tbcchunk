[
  {
    "original_filename": "0515_fam_param_guid",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0515_fam_param_guid",
    "header_text": "Access to Family Parameter GUID",
    "local_header_href": "#access-to-family-parameter-guid",
    "chunk_text": "<h3>Access to Family Parameter GUID</h3><p>Here is a question that came up several times.\nIt also demonstrates a neat (if somewhat time consuming) use of Reflection to access a property that otherwise would be inaccessible.\nHere is the original question:\n\n<p><strong>Question:</strong> How can I reliably tell whether a parameter on a family document is\na shared parameter, or is actually a family parameter?\n\nIf it is a shared parameter, how can I retrieve its original GUID as it was when it was originally added to the family?\n\n<p>Note that I need the <strong>original</strong> GUID used to load that parameter, and cannot rely on the current shared parameters file, which may not be the same one as originally used.\n\n<p>I tried to solve this directly, but the retrieving the parameter definition of a parameter on a family only reports it as being an InternalDefinition, even if it is actually a shared parameter, which should return an ExternalDefinition instead.\nI tested it running a piece of code like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">FamilyParameter</span> parameter\n    = &lt;get a family parameter\n        <span class=\"blue\">ref</span> from the <span class=\"teal\">FamilyManager</span>&gt;\n \n  <span class=\"teal\">ExternalDefinition</span> externalDef\n    = parameter.Definition <span class=\"blue\">as</span> <span class=\"teal\">ExternalDefinition</span>;\n \n  <span class=\"teal\">InternalDefinition</span> internalDef\n    = parameter.Definition <span class=\"blue\">as</span> <span class=\"teal\">InternalDefinition</span>;\n</pre>\n<p>The externalDef variable always ends up being null, and the internalDef one has a valid value.\n\n<p><strong>Answer:</strong> This was resolved for non-family parameters by the Revit 2011 API.\nThe Revit API help file RevitAPI.chm lists the following feature in the 'What's New' section:\n\n<span style=\"color:darkblue\">\n<h4>Extract GUID from a Parameter</h4>\n<p>The new properties\n<ul>\n<li>Parameter.IsShared\n<li>Parameter.GUID\n</li></li></ul>\n<p>identify if a given parameter is a shared parameter, and if it is, extract its GUID.\n\n</p></p></span>\n<p>Unfortunately, this only works for standard parameters, and not for family parameters.\n\n<p>Using the debugger on an object of type Autodesk.Revit.DB.FamilyParameter, one can see\nsomething called \"m_Parameter\" which <strong>does</strong> have the properties IsShared and GUID which <strong>do</strong> have the correct values.\n\n<p>Unfortunately, again, you cannot simply cast an Autodesk.Revit.DB.FamilyParameter to an Autodesk.Revit.DB.Parameter type.\n\n<p>Happily, it is possible to access these properties using .NET System.Reflection.\n\n<p>Here is a workaround using this to access these properties which works in both Revit 2010 and 2011.\nIt retrieves the underlying family parameter definition IsShared and GUID properties and returns true if the family parameter is shared and has a GUID:\n\n<pre class=\"code\">\n<span class=\"blue\">bool</span> GetFamilyParamGuid(\n  <span class=\"teal\">FamilyParameter</span> fp,\n  <span class=\"blue\">out</span> <span class=\"blue\">string</span> guid )\n{\n  guid = <span class=\"blue\">string</span>.Empty;\n \n  <span class=\"blue\">bool</span> isShared = <span class=\"blue\">false</span>;\n \n  System.Reflection.<span class=\"teal\">FieldInfo</span> fi\n    = fp.GetType().GetField( <span class=\"maroon\">\"m_Parameter\"</span>,\n      System.Reflection.<span class=\"teal\">BindingFlags</span>.Instance\n      | System.Reflection.<span class=\"teal\">BindingFlags</span>.NonPublic );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != fi )\n  {\n    <span class=\"teal\">Parameter</span> p = fi.GetValue( fp ) <span class=\"blue\">as</span> <span class=\"teal\">Parameter</span>;\n \n    isShared = p.IsShared;\n \n    <span class=\"blue\">if</span>( isShared &amp;&amp; <span class=\"blue\">null</span> != p.GUID )\n    {\n      guid = p.GUID.ToString();\n    }\n  }\n  <span class=\"blue\">return</span> isShared;\n}\n</pre>\n<p>I implemented a new external command CmdFamilyParamGuid in The Building Coder samples to test this method:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n  <span class=\"blue\">if</span>( !doc.IsFamilyDocument )\n  {\n    message =\n      <span class=\"maroon\">\"Please run this command in a family document.\"</span>;\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">bool</span> isShared;\n    <span class=\"blue\">string</span> guid;\n \n    <span class=\"teal\">FamilyManager</span> mgr = doc.FamilyManager;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyParameter</span> fp <span class=\"blue\">in</span> mgr.Parameters )\n    {\n      isShared = GetFamilyParamGuid( fp, <span class=\"blue\">out</span> guid );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>To run and test this, just open any family document and include at least one shared parameter.\n\n<p>Here is\n\n<!-- C:\\a\\doc\\revit\\blog\\zip\\bc_11_82.zip -->\n<a href=\"zip/bc_11_82.zip\">\nversion 2011.0.82.0</a>\n\nof The Building Coder samples including the complete source code and Visual Studio solution with the new command.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0515_fam_param_guid",
    "header_text": "Extract GUID from a Parameter",
    "local_header_href": "#extract-guid-from-a-parameter",
    "chunk_text": "<h4>Extract GUID from a Parameter</h4><p>The new properties\n<ul>\n<li>Parameter.IsShared\n<li>Parameter.GUID\n</li></li></ul>\n<p>identify if a given parameter is a shared parameter, and if it is, extract its GUID.\n\n</p></p>"
  }
]