[
  {
    "original_filename": "0507_ribbon_spy_automate",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0507_ribbon_spy_automate",
    "header_text": "Ribbon Spying and UI Automation",
    "local_header_href": "#ribbon-spying-and-ui-automation",
    "chunk_text": "<h3>Ribbon Spying and UI Automation</h3><p>I hope you had a wonderful end of the last and beginning of the new year!\n\n<p>Happy New Year to you all!\n\n<p>I returned from the week of rest and was completely occupied with the backlog of ADN support cases in the past few days.\n\n<p>Here is a really heavy-duty post to get us started again, and started with a bang!\n\n<p>It revisits the never-ending and always popular issue of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/launching-a-revit-command.html\">\nlaunching a Revit command programmatically</a>, \n\nbut this time based on some much more in-depth analysis of the Revit ribbon internals performed by Rudolf Honke of\n\n<a href=\"http://www.acadgraph.de\">\nacadGraph CADstudio GmbH</a>.\n\nHere is what he discovered and has to say about it:\n\n<h4>Driving Revit from Outside</h4>\n<p>An interesting (and recurring) point is to 'drive Revit from outside'.\n<p>I know, you have discussed this many times, but I think that this will be a different approach:\n<p>Since Revit uses Ribbons, there is no way to click buttons or menu items just by sending Windows messages, as we could do it in Revit 2009.\n<p>If you take a close look using Spy++, you'll see that the whole RibbonBar is just a container, a Black Box:</p>\n<center>\n<img alt=\"Ribbon bar in Spy++\" src=\"img/rh_spy.png\" width=\"400\"/>\n</center>\n<p>With Spy++, you cannot examine this container because it's a WPF element.\n<p>But using UISpy, you can see this:</p>\n<center>\n<img alt=\"Ribbon bar in UISpy\" src=\"img/rh_uispy.png\" width=\"400\"/>\n</center>\n<p>In this case, the selected element is a single button. So, how we can invoke <b><i>any</i></b> button?\n<p>Assuming there is a new Addin panel called 'TestPanel' with a single button called 'TestButton', here is a way to press it from any application:\n\n<pre class=\"code\">\n  <span class=\"teal\">AutomationElement</span> mainWndFromHandle \n    = <span class=\"teal\">AutomationElement</span>.FromHandle( \n      _hWndRevit.Handle ); <span class=\"green\">// the revit window handle</span>\n \n  <span class=\"teal\">PropertyCondition</span> nameRibbonCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.NameProperty, \n      <span class=\"maroon\">\"RibbonHostWindow\"</span> );\n \n  <span class=\"teal\">PropertyCondition</span> typeRibbonCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n      <span class=\"teal\">ControlType</span>.Pane );\n \n  <span class=\"teal\">AndCondition</span> andCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( \n      typeRibbonCondition, \n      nameRibbonCondition );\n \n  ribbonWnd = mainWndFromHandle.FindFirst( \n    <span class=\"teal\">TreeScope</span>.Children, andCondition );\n \n  <span class=\"teal\">PropertyCondition</span> aIDCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"ADD_INS_TAB\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> addinbutton \n    = ribbonWnd.FindFirst( \n    <span class=\"teal\">TreeScope</span>.Children, aIDCondition );\n \n  <span class=\"green\">// show addin panel by pressing the tab header</span>\n \n  <span class=\"teal\">InvokePattern</span> invPattern \n    = addinbutton.GetCurrentPattern( \n      <span class=\"teal\">InvokePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">InvokePattern</span>;\n \n  invPattern.Invoke();\n \n  <span class=\"green\">// pause, so ribbon panels can re-arrange</span>\n \n  System.Threading.<span class=\"teal\">Thread</span>.Sleep( 1000 );\n \n  <span class=\"teal\">PropertyCondition</span> aIDPanelCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"ADD_INS_TAB_PanelBarScrollViewer\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> addinPanel \n    = ribbonWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n      aIDPanelCondition );\n \n  <span class=\"teal\">PropertyCondition</span> aIDTestPanelCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"CustomCtrl_%ADD_INS_TAB%TestPanel\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> testPanel \n    = addinPanel.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n      aIDTestPanelCondition );\n \n  <span class=\"teal\">PropertyCondition</span> aIDContainerCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"CustomCtrl_%CustomCtrl_%ADD_INS_TAB%TestPanel%TestButton_RibbonItemControl\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> testContainer \n    = testPanel.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n      aIDContainerCondition );\n \n  <span class=\"teal\">PropertyCondition</span> aIDTestButtonCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"CustomCtrl_%CustomCtrl_%ADD_INS_TAB%TestPanel%TestButton\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> testButton \n    = testContainer.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n      aIDTestButtonCondition );\n \n  <span class=\"teal\">InvokePattern</span> invPatternButton \n    = testButton.GetCurrentPattern( \n      <span class=\"teal\">InvokePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">InvokePattern</span>;\n \n  <span class=\"green\">// now press our button via uiautomation</span>\n \n  invPatternButton.Invoke();\n</pre>\n<p>Remarks:\n\n<ul>\n<li>Invisible RibbonItems cannot be pressed, so make sure the panel that contains them is visible.\n<li>Thus, if RibbonBar is collapsed, expand it before pressing buttons.\n<li>Give it some time; RibbonBar needs to re-arrange, this takes some milliseconds every time.\n<li>The hierarchy of the RibbonBar and its items (descendants) is different in 2010 and 2011; sometimes there is an AutomationID, but this ID may be not unique, so you have to combine ControlTypeProperty, NameProperty and/or AutomationIDProperty PropertyConditions to get an element.\n<li>Don't use TreeScope.Descendants; it's faster to search just in the TreeScope.Children list.\n<li>Store mainWindowHandle, ribbonWnd and other AutomationElements in global variables because it saves some time, but be aware because some items may become invalid while RibbonBar is switching.\n</li></li></li></li></li></li></ul>\n<p>This way, you can invoke any command from outside. In opposite to the OnIdling event, which cannot be fired if a modal dialogue is opened in Revit, this technique allows you to close even this (blocking) dialog from outside.\n<p>Also Revit standard commands can be invoked (e.g., creating a new Wall via GUI).\n<p>It even allows you to open a Revit file via GUI, avoiding the use of the Process.Start method.\n<p>Remark: in this example, I use some German control texts; in a localized application, this would be replaced by resource strings, or the AutomationElements would be got in a different manner. \n\n<pre class=\"code\">\n<span class=\"blue\">private</span> <span class=\"blue\">void</span> OpenRevitFile( <span class=\"blue\">string</span> filePath )\n{\n  <span class=\"green\">// get the Revit 'R' button in the upper left corner</span>\n  <span class=\"green\">// FindWindowEx has been imported via P/Invoke</span>\n\n  <span class=\"teal\">IntPtr</span> startButtonHandle = FindWindowEx( \n    <span class=\"teal\">IntPtr</span>.Zero, <span class=\"teal\">IntPtr</span>.Zero, <span class=\"maroon\">\"AdApplicationButton\"</span>, \n    <span class=\"maroon\">\"AdApplicationButton\"</span> );\n \n  <span class=\"blue\">if</span>( startButtonHandle != <span class=\"teal\">IntPtr</span>.Zero )\n  {\n    <span class=\"green\">// SendMessage has been imported via P/Invoke</span>\n \n    SendMessage( startButtonHandle, WM_LBUTTONDOWN, \n      <span class=\"teal\">IntPtr</span>.Zero, <span class=\"teal\">IntPtr</span>.Zero ); <span class=\"green\">// click</span>\n \n    SendMessage( startButtonHandle, WM_LBUTTONUP, \n      <span class=\"teal\">IntPtr</span>.Zero, <span class=\"teal\">IntPtr</span>.Zero ); <span class=\"green\">// release</span>\n \n    <span class=\"green\">// these lines should be known</span>\n \n    <span class=\"teal\">Process</span>[] processes = <span class=\"teal\">Process</span>.GetProcessesByName( \n      <span class=\"maroon\">\"Revit\"</span> );\n \n    <span class=\"teal\">WindowHandle</span> _hWndRevit = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; processes.Length )\n    {\n      <span class=\"teal\">IntPtr</span> h = processes[0].MainWindowHandle;\n \n      _hWndRevit = <span class=\"blue\">new</span> <span class=\"teal\">WindowHandle</span>( h );\n    }\n    <span class=\"blue\">if</span>( _hWndRevit != <span class=\"blue\">null</span> )\n    {\n      <span class=\"green\">// revit window</span>\n      <span class=\"teal\">AutomationElement</span> mainWndFromHandle \n        = <span class=\"teal\">AutomationElement</span>.FromHandle( \n          _hWndRevit.Handle );\n \n      <span class=\"green\">// start menu</span>\n \n      <span class=\"teal\">PropertyCondition</span> idMenuCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n          <span class=\"maroon\">\"Id_ApplicationMenuWindow\"</span> );\n \n      <span class=\"teal\">AutomationElement</span> menuWnd \n        = mainWndFromHandle.FindFirst( \n          <span class=\"teal\">TreeScope</span>.Children, idMenuCondition );\n \n      <span class=\"green\">// start submenu</span>\n \n      <span class=\"teal\">PropertyCondition</span> idSubMenuCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n          <span class=\"maroon\">\"mFirstLevelMenuList\"</span> );\n \n      <span class=\"green\">// list</span>\n \n      <span class=\"teal\">AutomationElement</span> subMenuWnd \n        = menuWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n          idSubMenuCondition );\n \n      <span class=\"green\">// list item</span>\n \n      <span class=\"teal\">PropertyCondition</span> typeItemCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n          <span class=\"teal\">ControlType</span>.ListItem );\n \n      <span class=\"teal\">PropertyCondition</span> nameItemCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.NameProperty, \n          <span class=\"maroon\">\"Autodesk.Windows.ApplicationMenuItem\"</span> );\n \n      <span class=\"teal\">PropertyCondition</span> idItemCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n          <span class=\"maroon\">\"ID_REVIT_FILE_OPEN\"</span> );\n \n      <span class=\"teal\">AndCondition</span> andItemCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( idItemCondition, \n          typeItemCondition );\n \n      <span class=\"teal\">AutomationElement</span> openItemWnd \n        = subMenuWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n          andItemCondition );\n \n      <span class=\"teal\">PropertyCondition</span> typeButtonCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n          <span class=\"teal\">ControlType</span>.Button );\n \n      <span class=\"teal\">AutomationElementCollection</span> openButtons \n        = openItemWnd.FindAll( <span class=\"teal\">TreeScope</span>.Children, \n          typeButtonCondition );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> openButton \n        <span class=\"blue\">in</span> openButtons )\n      {\n        <span class=\"teal\">PropertyCondition</span> typeImageCondition \n          = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n            <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n            <span class=\"teal\">ControlType</span>.Image );\n \n        <span class=\"teal\">AutomationElementCollection</span> images \n          = openButton.FindAll( <span class=\"teal\">TreeScope</span>.Children, \n            typeImageCondition );\n \n        <span class=\"green\">// search a button with an image</span>\n \n        <span class=\"blue\">if</span>( images.Count &gt; 0 )\n        {\n          <span class=\"teal\">InvokePattern</span> invPattern \n            = openButton.GetCurrentPattern( \n              <span class=\"teal\">InvokePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">InvokePattern</span>;\n \n          invPattern.Invoke();\n        }\n      }\n \n      <span class=\"green\">// open dialog window</span>\n \n      <span class=\"green\">// pause while dialog is being opened</span>\n \n      <span class=\"teal\">Thread</span>.Sleep( 700 );\n \n      <span class=\"green\">// re-read revit window components to find new dialog</span>\n \n      <span class=\"teal\">PropertyCondition</span> nameOpenDlgCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.NameProperty, \n          <span class=\"maroon\">\"Öffnen\"</span> ); <span class=\"green\">// us-EN \"Open\"</span>\n \n      <span class=\"teal\">AutomationElementCollection</span> allOpenDlgs \n        = mainWndFromHandle.FindAll( \n          <span class=\"teal\">TreeScope</span>.Children, nameOpenDlgCondition );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> openOpenDlgWnd \n        <span class=\"blue\">in</span> allOpenDlgs )\n      {\n        <span class=\"blue\">if</span>( openOpenDlgWnd.Current.LocalizedControlType \n          == <span class=\"maroon\">\"Dialogfeld\"</span> )\n        {\n          <span class=\"green\">// comboBox has also an&amp;</span>\n \n          <span class=\"teal\">PropertyCondition</span> typeComboBoxCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n              <span class=\"teal\">ControlType</span>.ComboBox );\n \n          <span class=\"teal\">PropertyCondition</span> idComboBoxCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n              <span class=\"maroon\">\"13006\"</span> );\n \n          <span class=\"teal\">AndCondition</span> andComboBoxCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( idComboBoxCondition, \n              typeComboBoxCondition );\n \n          <span class=\"teal\">AutomationElement</span> comboBoxWnd \n            = openOpenDlgWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n              andComboBoxCondition );\n \n          <span class=\"green\">// &amp;edit field</span>\n \n          <span class=\"teal\">PropertyCondition</span> typeEditCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n              <span class=\"teal\">ControlType</span>.Edit );\n \n          <span class=\"teal\">PropertyCondition</span> idEditCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n              <span class=\"maroon\">\"1001\"</span> );\n \n          <span class=\"teal\">AndCondition</span> andEditCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( idEditCondition, \n              typeEditCondition );\n \n          <span class=\"teal\">AutomationElement</span> editWnd \n            = comboBoxWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n              andEditCondition );\n \n          <span class=\"teal\">Thread</span>.Sleep( 900 );\n \n          <span class=\"teal\">ValuePattern</span> valPattern \n            = editWnd.GetCurrentPattern( \n              <span class=\"teal\">ValuePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">ValuePattern</span>;\n \n          <span class=\"green\">// paste file path into the edit field</span>\n \n          valPattern.SetValue( filePath );\n \n          <span class=\"green\">// press ok button</span>\n \n          <span class=\"teal\">PropertyCondition</span> idOpenButtonCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n              <span class=\"maroon\">\"1\"</span> );\n \n          <span class=\"teal\">AndCondition</span> andOpenButtonCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( idOpenButtonCondition, \n              typeButtonCondition );\n \n          <span class=\"teal\">AutomationElement</span> openButton \n            = openOpenDlgWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n              andOpenButtonCondition );\n \n          <span class=\"teal\">InvokePattern</span> invPattern \n            = openButton.GetCurrentPattern( \n              <span class=\"teal\">InvokePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">InvokePattern</span>;\n \n          <span class=\"blue\">if</span>( invPattern != <span class=\"blue\">null</span> )\n          {\n            invPattern.Invoke();\n          }\n        }\n      }\n    }\n  }\n}\n</pre>\n<p>P.S.: these code fragments may contain some typos; it could also be that one does it for 2010 and another for 2011 because this is old stuff that I played with months ago. \n<p>But the code shows the way, so it's useful as well.\n<p>Before using this code, you need to import some UIAutomation dlls:</p>\n<center>\n<img alt=\"UI automation references\" src=\"img/rh_ui_automation_references.png\"/>\n</center>\n<p>There may be some better sources for UIAutomation in the Internet...\n\n\n<a name=\"app\"></a>\n<h4>Stand-Alone Sample Application</h4>\n<p>Rudolf created a stand-alone Windows Forms project \n\n<a href=\"\">DrivingRevitViaUIAutomation</a> that \n\ndemonstrates the use of this approach.\nSince UIAutomation can drive any application, the mechanism is not restricted to Revit a add-in, but can be used there as well as in any other context.\nFor instance, you also could drive 3dsmax or something else from outside.\n\n<p>By the way, while developing my Revit MDI window arranging tool, I discovered that AutoCAD has a window structure similar to Revit.\nThis is of course not surprising because it's Autodesk's policy to make the products look similar.\n\n<p>DrivingRevitViaUIAutomation is adjusted to drive a German version of Revit 2011.\n<p>There are about three German literals in the code, describing some dialog titles.\n<p>It includes added comments like this: \"Öffnen\" // en-US:\"Open\"\n<p>These are the parts the user must replace by his own dialog titles if his Revits language is not German.\n<p>It may be necessary to adjust some pause intervals in the code.\n\n<p>This example demonstrates three steps:\n\n<ul>\n<li>Open a file.\n<li>Close a file (in fact, the active document); you can choose whether you want to save it before closing. \n<li>Switch the current RibbonTab. Before selecting a Tab by pressing a TreeNode, you must read the Ribbon once, so the switching process will be faster because the Tabs are in a buffer.\n</li></li></li></ul>\n<p>The user interface initially looks like this, with a sample file that can be opened and buttons for closing it with and without saving and for populating the list of ribbon tabs:</p>\n<center>\n<img alt=\"UI automation sample application\" src=\"img/rh_ui_automation_sample.png\"/>\n</center>\n<p>Once the the list of ribbon tabs has been populated, each one of them can be clicked to activate it in the Revit user interface:</p>\n<center>\n<img alt=\"UI automation sample application with populated ribbon tabs\" src=\"img/rh_ui_automation_sample_populated.png\"/>\n</center>\n<p>The code uses a mix of the fast Window functions (P/Invoke) with the slow UIAutomation functions; this improves performance and may make a difference in more complex examples.\n\n<p>Regarding the language dependency: For example, the \"open file\" dialog is found by its title text, and in my example, this is \"Öffnen\".\n<p>Open this dialog manually, read the (English) title and replace the German expression in the code.\n<p>Additionally, this part is important:\n\n<pre class=\"code\">\n  <span class=\"teal\">PropertyCondition</span> nameOpenDlgCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.NameProperty, \n      <span class=\"maroon\">\"Öffnen\"</span> ); <span class=\"green\">// en-US: \"Open\"</span>\n \n  <span class=\"teal\">AndCondition</span> andOpenDlgCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( nameOpenDlgCondition, \n      typeOpenDlgCondition );\n \n  <span class=\"teal\">Thread</span>.Sleep( 600 );\n \n  <span class=\"teal\">AutomationElementCollection</span> allOpenDlgs \n    = mainWndFromHandle.FindAll( \n      <span class=\"teal\">TreeScope</span>.Children, \n      nameOpenDlgCondition );\n \n  <span class=\"green\">//typeOpenDlgCondition andOpenDlgCondition</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> openOpenDlgWnd \n    <span class=\"blue\">in</span> allOpenDlgs )\n  {\n    <span class=\"blue\">if</span>( openOpenDlgWnd.Current.LocalizedControlType \n      == <span class=\"maroon\">\"Dialogfeld\"</span> ) <span class=\"green\">// en-US: ?</span>\n    {\n</pre>\n<p>If you are running an English version of Revit, you need to examine the LocalizedControlType for it; in fact, not for your Revit version but for your OS Language version.\n<p>Look at this screenshot taken from an English Revit residing in a German VM:\n\n<center>\n<img alt=\"UISpy looking at an English version\" src=\"img/rh_uispy_en.png\" width=\"400\"/>\n</center>\n<p>The LocalizedControlType depends on OS Language; nonetheless, the dialog titles change according to Revit language.\n<p>You need to examine the LocalizedControlType by your own, I think, but its just one use of UISpy.\n\n<p>I think there might be a way to do it without any localization issues, but as I explained before, finding the correct AutomationElement is always a compromise between performance and elegance.\n<p>Sometimes there is no property that makes a AutomationElement individual, no AutomationID, just Controltype.Pane, for example.\n<p>If you just search by ControlType.Button, for example, it might be that you find some unwanted results, or, as I explained, the performance will decrease.\n<p><b>Combining the search conditions in the right way is the thing that matters.</b>\n<p>In Revit 2010, there were less AutomationIDs than in 2011, and some items shared their ID; e.g. there were some buttons with icons and others without icons, both for opening or closing files.\n<p>Getting the button with icon meant to see whether the button had children because all other Properties were identical – besides position, of course, but this may change...\n<p>Its \"workarounding\" at its best.\n\n<p>Another last comment or two from Rudolf on this topic:\n\n<p>I am hoping that Revit's ribbon response time will decrease in future versions; if so, then the calls to System.Threading.Sleep( aLotOfTime ) can be changed to System.Threading.Sleep( justAMillisecond ).\nSo I hope.\n\n<p>And, by the way, UISpy allows you to export the Window structure to an XML document, so you can browse this snapshot instead of the 'real' windows.\n\n<p>Very many thanks to Rudolf for this in-depth exploration which opens up many new possibilities!\n\n<p>Exploring this should keep you occupied for a while...\n\n<p>Once again I have to repeat the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html#2\">\nwarning about the risks involved</a> with \n\nusing this, though, and also point back to the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html#3\">\ndisclaimer</a> accompanying \n\nthat warning.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0507_ribbon_spy_automate",
    "header_text": "Driving Revit from Outside",
    "local_header_href": "#driving-revit-from-outside",
    "chunk_text": "<h4>Driving Revit from Outside</h4><p>An interesting (and recurring) point is to 'drive Revit from outside'.\n<p>I know, you have discussed this many times, but I think that this will be a different approach:\n<p>Since Revit uses Ribbons, there is no way to click buttons or menu items just by sending Windows messages, as we could do it in Revit 2009.\n<p>If you take a close look using Spy++, you'll see that the whole RibbonBar is just a container, a Black Box:</p>\n<center>\n<img alt=\"Ribbon bar in Spy++\" src=\"img/rh_spy.png\" width=\"400\"/>\n</center>\n<p>With Spy++, you cannot examine this container because it's a WPF element.\n<p>But using UISpy, you can see this:</p>\n<center>\n<img alt=\"Ribbon bar in UISpy\" src=\"img/rh_uispy.png\" width=\"400\"/>\n</center>\n<p>In this case, the selected element is a single button. So, how we can invoke <b><i>any</i></b> button?\n<p>Assuming there is a new Addin panel called 'TestPanel' with a single button called 'TestButton', here is a way to press it from any application:\n\n<pre class=\"code\">\n  <span class=\"teal\">AutomationElement</span> mainWndFromHandle \n    = <span class=\"teal\">AutomationElement</span>.FromHandle( \n      _hWndRevit.Handle ); <span class=\"green\">// the revit window handle</span>\n \n  <span class=\"teal\">PropertyCondition</span> nameRibbonCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.NameProperty, \n      <span class=\"maroon\">\"RibbonHostWindow\"</span> );\n \n  <span class=\"teal\">PropertyCondition</span> typeRibbonCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n      <span class=\"teal\">ControlType</span>.Pane );\n \n  <span class=\"teal\">AndCondition</span> andCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( \n      typeRibbonCondition, \n      nameRibbonCondition );\n \n  ribbonWnd = mainWndFromHandle.FindFirst( \n    <span class=\"teal\">TreeScope</span>.Children, andCondition );\n \n  <span class=\"teal\">PropertyCondition</span> aIDCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"ADD_INS_TAB\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> addinbutton \n    = ribbonWnd.FindFirst( \n    <span class=\"teal\">TreeScope</span>.Children, aIDCondition );\n \n  <span class=\"green\">// show addin panel by pressing the tab header</span>\n \n  <span class=\"teal\">InvokePattern</span> invPattern \n    = addinbutton.GetCurrentPattern( \n      <span class=\"teal\">InvokePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">InvokePattern</span>;\n \n  invPattern.Invoke();\n \n  <span class=\"green\">// pause, so ribbon panels can re-arrange</span>\n \n  System.Threading.<span class=\"teal\">Thread</span>.Sleep( 1000 );\n \n  <span class=\"teal\">PropertyCondition</span> aIDPanelCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"ADD_INS_TAB_PanelBarScrollViewer\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> addinPanel \n    = ribbonWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n      aIDPanelCondition );\n \n  <span class=\"teal\">PropertyCondition</span> aIDTestPanelCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"CustomCtrl_%ADD_INS_TAB%TestPanel\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> testPanel \n    = addinPanel.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n      aIDTestPanelCondition );\n \n  <span class=\"teal\">PropertyCondition</span> aIDContainerCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"CustomCtrl_%CustomCtrl_%ADD_INS_TAB%TestPanel%TestButton_RibbonItemControl\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> testContainer \n    = testPanel.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n      aIDContainerCondition );\n \n  <span class=\"teal\">PropertyCondition</span> aIDTestButtonCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n      <span class=\"maroon\">\"CustomCtrl_%CustomCtrl_%ADD_INS_TAB%TestPanel%TestButton\"</span> );\n \n  <span class=\"teal\">AutomationElement</span> testButton \n    = testContainer.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n      aIDTestButtonCondition );\n \n  <span class=\"teal\">InvokePattern</span> invPatternButton \n    = testButton.GetCurrentPattern( \n      <span class=\"teal\">InvokePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">InvokePattern</span>;\n \n  <span class=\"green\">// now press our button via uiautomation</span>\n \n  invPatternButton.Invoke();\n</pre>\n<p>Remarks:\n\n<ul>\n<li>Invisible RibbonItems cannot be pressed, so make sure the panel that contains them is visible.\n<li>Thus, if RibbonBar is collapsed, expand it before pressing buttons.\n<li>Give it some time; RibbonBar needs to re-arrange, this takes some milliseconds every time.\n<li>The hierarchy of the RibbonBar and its items (descendants) is different in 2010 and 2011; sometimes there is an AutomationID, but this ID may be not unique, so you have to combine ControlTypeProperty, NameProperty and/or AutomationIDProperty PropertyConditions to get an element.\n<li>Don't use TreeScope.Descendants; it's faster to search just in the TreeScope.Children list.\n<li>Store mainWindowHandle, ribbonWnd and other AutomationElements in global variables because it saves some time, but be aware because some items may become invalid while RibbonBar is switching.\n</li></li></li></li></li></li></ul>\n<p>This way, you can invoke any command from outside. In opposite to the OnIdling event, which cannot be fired if a modal dialogue is opened in Revit, this technique allows you to close even this (blocking) dialog from outside.\n<p>Also Revit standard commands can be invoked (e.g., creating a new Wall via GUI).\n<p>It even allows you to open a Revit file via GUI, avoiding the use of the Process.Start method.\n<p>Remark: in this example, I use some German control texts; in a localized application, this would be replaced by resource strings, or the AutomationElements would be got in a different manner. \n\n<pre class=\"code\">\n<span class=\"blue\">private</span> <span class=\"blue\">void</span> OpenRevitFile( <span class=\"blue\">string</span> filePath )\n{\n  <span class=\"green\">// get the Revit 'R' button in the upper left corner</span>\n  <span class=\"green\">// FindWindowEx has been imported via P/Invoke</span>\n\n  <span class=\"teal\">IntPtr</span> startButtonHandle = FindWindowEx( \n    <span class=\"teal\">IntPtr</span>.Zero, <span class=\"teal\">IntPtr</span>.Zero, <span class=\"maroon\">\"AdApplicationButton\"</span>, \n    <span class=\"maroon\">\"AdApplicationButton\"</span> );\n \n  <span class=\"blue\">if</span>( startButtonHandle != <span class=\"teal\">IntPtr</span>.Zero )\n  {\n    <span class=\"green\">// SendMessage has been imported via P/Invoke</span>\n \n    SendMessage( startButtonHandle, WM_LBUTTONDOWN, \n      <span class=\"teal\">IntPtr</span>.Zero, <span class=\"teal\">IntPtr</span>.Zero ); <span class=\"green\">// click</span>\n \n    SendMessage( startButtonHandle, WM_LBUTTONUP, \n      <span class=\"teal\">IntPtr</span>.Zero, <span class=\"teal\">IntPtr</span>.Zero ); <span class=\"green\">// release</span>\n \n    <span class=\"green\">// these lines should be known</span>\n \n    <span class=\"teal\">Process</span>[] processes = <span class=\"teal\">Process</span>.GetProcessesByName( \n      <span class=\"maroon\">\"Revit\"</span> );\n \n    <span class=\"teal\">WindowHandle</span> _hWndRevit = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">if</span>( 0 &lt; processes.Length )\n    {\n      <span class=\"teal\">IntPtr</span> h = processes[0].MainWindowHandle;\n \n      _hWndRevit = <span class=\"blue\">new</span> <span class=\"teal\">WindowHandle</span>( h );\n    }\n    <span class=\"blue\">if</span>( _hWndRevit != <span class=\"blue\">null</span> )\n    {\n      <span class=\"green\">// revit window</span>\n      <span class=\"teal\">AutomationElement</span> mainWndFromHandle \n        = <span class=\"teal\">AutomationElement</span>.FromHandle( \n          _hWndRevit.Handle );\n \n      <span class=\"green\">// start menu</span>\n \n      <span class=\"teal\">PropertyCondition</span> idMenuCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n          <span class=\"maroon\">\"Id_ApplicationMenuWindow\"</span> );\n \n      <span class=\"teal\">AutomationElement</span> menuWnd \n        = mainWndFromHandle.FindFirst( \n          <span class=\"teal\">TreeScope</span>.Children, idMenuCondition );\n \n      <span class=\"green\">// start submenu</span>\n \n      <span class=\"teal\">PropertyCondition</span> idSubMenuCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n          <span class=\"maroon\">\"mFirstLevelMenuList\"</span> );\n \n      <span class=\"green\">// list</span>\n \n      <span class=\"teal\">AutomationElement</span> subMenuWnd \n        = menuWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n          idSubMenuCondition );\n \n      <span class=\"green\">// list item</span>\n \n      <span class=\"teal\">PropertyCondition</span> typeItemCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n          <span class=\"teal\">ControlType</span>.ListItem );\n \n      <span class=\"teal\">PropertyCondition</span> nameItemCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.NameProperty, \n          <span class=\"maroon\">\"Autodesk.Windows.ApplicationMenuItem\"</span> );\n \n      <span class=\"teal\">PropertyCondition</span> idItemCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n          <span class=\"maroon\">\"ID_REVIT_FILE_OPEN\"</span> );\n \n      <span class=\"teal\">AndCondition</span> andItemCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( idItemCondition, \n          typeItemCondition );\n \n      <span class=\"teal\">AutomationElement</span> openItemWnd \n        = subMenuWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n          andItemCondition );\n \n      <span class=\"teal\">PropertyCondition</span> typeButtonCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n          <span class=\"teal\">ControlType</span>.Button );\n \n      <span class=\"teal\">AutomationElementCollection</span> openButtons \n        = openItemWnd.FindAll( <span class=\"teal\">TreeScope</span>.Children, \n          typeButtonCondition );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> openButton \n        <span class=\"blue\">in</span> openButtons )\n      {\n        <span class=\"teal\">PropertyCondition</span> typeImageCondition \n          = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n            <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n            <span class=\"teal\">ControlType</span>.Image );\n \n        <span class=\"teal\">AutomationElementCollection</span> images \n          = openButton.FindAll( <span class=\"teal\">TreeScope</span>.Children, \n            typeImageCondition );\n \n        <span class=\"green\">// search a button with an image</span>\n \n        <span class=\"blue\">if</span>( images.Count &gt; 0 )\n        {\n          <span class=\"teal\">InvokePattern</span> invPattern \n            = openButton.GetCurrentPattern( \n              <span class=\"teal\">InvokePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">InvokePattern</span>;\n \n          invPattern.Invoke();\n        }\n      }\n \n      <span class=\"green\">// open dialog window</span>\n \n      <span class=\"green\">// pause while dialog is being opened</span>\n \n      <span class=\"teal\">Thread</span>.Sleep( 700 );\n \n      <span class=\"green\">// re-read revit window components to find new dialog</span>\n \n      <span class=\"teal\">PropertyCondition</span> nameOpenDlgCondition \n        = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n          <span class=\"teal\">AutomationElement</span>.NameProperty, \n          <span class=\"maroon\">\"Öffnen\"</span> ); <span class=\"green\">// us-EN \"Open\"</span>\n \n      <span class=\"teal\">AutomationElementCollection</span> allOpenDlgs \n        = mainWndFromHandle.FindAll( \n          <span class=\"teal\">TreeScope</span>.Children, nameOpenDlgCondition );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> openOpenDlgWnd \n        <span class=\"blue\">in</span> allOpenDlgs )\n      {\n        <span class=\"blue\">if</span>( openOpenDlgWnd.Current.LocalizedControlType \n          == <span class=\"maroon\">\"Dialogfeld\"</span> )\n        {\n          <span class=\"green\">// comboBox has also an&amp;</span>\n \n          <span class=\"teal\">PropertyCondition</span> typeComboBoxCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n              <span class=\"teal\">ControlType</span>.ComboBox );\n \n          <span class=\"teal\">PropertyCondition</span> idComboBoxCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n              <span class=\"maroon\">\"13006\"</span> );\n \n          <span class=\"teal\">AndCondition</span> andComboBoxCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( idComboBoxCondition, \n              typeComboBoxCondition );\n \n          <span class=\"teal\">AutomationElement</span> comboBoxWnd \n            = openOpenDlgWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n              andComboBoxCondition );\n \n          <span class=\"green\">// &amp;edit field</span>\n \n          <span class=\"teal\">PropertyCondition</span> typeEditCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.ControlTypeProperty, \n              <span class=\"teal\">ControlType</span>.Edit );\n \n          <span class=\"teal\">PropertyCondition</span> idEditCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n              <span class=\"maroon\">\"1001\"</span> );\n \n          <span class=\"teal\">AndCondition</span> andEditCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( idEditCondition, \n              typeEditCondition );\n \n          <span class=\"teal\">AutomationElement</span> editWnd \n            = comboBoxWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n              andEditCondition );\n \n          <span class=\"teal\">Thread</span>.Sleep( 900 );\n \n          <span class=\"teal\">ValuePattern</span> valPattern \n            = editWnd.GetCurrentPattern( \n              <span class=\"teal\">ValuePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">ValuePattern</span>;\n \n          <span class=\"green\">// paste file path into the edit field</span>\n \n          valPattern.SetValue( filePath );\n \n          <span class=\"green\">// press ok button</span>\n \n          <span class=\"teal\">PropertyCondition</span> idOpenButtonCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n              <span class=\"teal\">AutomationElement</span>.AutomationIdProperty, \n              <span class=\"maroon\">\"1\"</span> );\n \n          <span class=\"teal\">AndCondition</span> andOpenButtonCondition \n            = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( idOpenButtonCondition, \n              typeButtonCondition );\n \n          <span class=\"teal\">AutomationElement</span> openButton \n            = openOpenDlgWnd.FindFirst( <span class=\"teal\">TreeScope</span>.Children, \n              andOpenButtonCondition );\n \n          <span class=\"teal\">InvokePattern</span> invPattern \n            = openButton.GetCurrentPattern( \n              <span class=\"teal\">InvokePattern</span>.Pattern ) <span class=\"blue\">as</span> <span class=\"teal\">InvokePattern</span>;\n \n          <span class=\"blue\">if</span>( invPattern != <span class=\"blue\">null</span> )\n          {\n            invPattern.Invoke();\n          }\n        }\n      }\n    }\n  }\n}\n</pre>\n<p>P.S.: these code fragments may contain some typos; it could also be that one does it for 2010 and another for 2011 because this is old stuff that I played with months ago. \n<p>But the code shows the way, so it's useful as well.\n<p>Before using this code, you need to import some UIAutomation dlls:</p>\n<center>\n<img alt=\"UI automation references\" src=\"img/rh_ui_automation_references.png\"/>\n</center>\n<p>There may be some better sources for UIAutomation in the Internet...\n\n\n<a name=\"app\"></a>\n<h4>Stand-Alone Sample Application</h4>\n<p>Rudolf created a stand-alone Windows Forms project \n\n<a href=\"\">DrivingRevitViaUIAutomation</a> that \n\ndemonstrates the use of this approach.\nSince UIAutomation can drive any application, the mechanism is not restricted to Revit a add-in, but can be used there as well as in any other context.\nFor instance, you also could drive 3dsmax or something else from outside.\n\n<p>By the way, while developing my Revit MDI window arranging tool, I discovered that AutoCAD has a window structure similar to Revit.\nThis is of course not surprising because it's Autodesk's policy to make the products look similar.\n\n<p>DrivingRevitViaUIAutomation is adjusted to drive a German version of Revit 2011.\n<p>There are about three German literals in the code, describing some dialog titles.\n<p>It includes added comments like this: \"Öffnen\" // en-US:\"Open\"\n<p>These are the parts the user must replace by his own dialog titles if his Revits language is not German.\n<p>It may be necessary to adjust some pause intervals in the code.\n\n<p>This example demonstrates three steps:\n\n<ul>\n<li>Open a file.\n<li>Close a file (in fact, the active document); you can choose whether you want to save it before closing. \n<li>Switch the current RibbonTab. Before selecting a Tab by pressing a TreeNode, you must read the Ribbon once, so the switching process will be faster because the Tabs are in a buffer.\n</li></li></li></ul>\n<p>The user interface initially looks like this, with a sample file that can be opened and buttons for closing it with and without saving and for populating the list of ribbon tabs:</p>\n<center>\n<img alt=\"UI automation sample application\" src=\"img/rh_ui_automation_sample.png\"/>\n</center>\n<p>Once the the list of ribbon tabs has been populated, each one of them can be clicked to activate it in the Revit user interface:</p>\n<center>\n<img alt=\"UI automation sample application with populated ribbon tabs\" src=\"img/rh_ui_automation_sample_populated.png\"/>\n</center>\n<p>The code uses a mix of the fast Window functions (P/Invoke) with the slow UIAutomation functions; this improves performance and may make a difference in more complex examples.\n\n<p>Regarding the language dependency: For example, the \"open file\" dialog is found by its title text, and in my example, this is \"Öffnen\".\n<p>Open this dialog manually, read the (English) title and replace the German expression in the code.\n<p>Additionally, this part is important:\n\n<pre class=\"code\">\n  <span class=\"teal\">PropertyCondition</span> nameOpenDlgCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.NameProperty, \n      <span class=\"maroon\">\"Öffnen\"</span> ); <span class=\"green\">// en-US: \"Open\"</span>\n \n  <span class=\"teal\">AndCondition</span> andOpenDlgCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( nameOpenDlgCondition, \n      typeOpenDlgCondition );\n \n  <span class=\"teal\">Thread</span>.Sleep( 600 );\n \n  <span class=\"teal\">AutomationElementCollection</span> allOpenDlgs \n    = mainWndFromHandle.FindAll( \n      <span class=\"teal\">TreeScope</span>.Children, \n      nameOpenDlgCondition );\n \n  <span class=\"green\">//typeOpenDlgCondition andOpenDlgCondition</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> openOpenDlgWnd \n    <span class=\"blue\">in</span> allOpenDlgs )\n  {\n    <span class=\"blue\">if</span>( openOpenDlgWnd.Current.LocalizedControlType \n      == <span class=\"maroon\">\"Dialogfeld\"</span> ) <span class=\"green\">// en-US: ?</span>\n    {\n</pre>\n<p>If you are running an English version of Revit, you need to examine the LocalizedControlType for it; in fact, not for your Revit version but for your OS Language version.\n<p>Look at this screenshot taken from an English Revit residing in a German VM:\n\n<center>\n<img alt=\"UISpy looking at an English version\" src=\"img/rh_uispy_en.png\" width=\"400\"/>\n</center>\n<p>The LocalizedControlType depends on OS Language; nonetheless, the dialog titles change according to Revit language.\n<p>You need to examine the LocalizedControlType by your own, I think, but its just one use of UISpy.\n\n<p>I think there might be a way to do it without any localization issues, but as I explained before, finding the correct AutomationElement is always a compromise between performance and elegance.\n<p>Sometimes there is no property that makes a AutomationElement individual, no AutomationID, just Controltype.Pane, for example.\n<p>If you just search by ControlType.Button, for example, it might be that you find some unwanted results, or, as I explained, the performance will decrease.\n<p><b>Combining the search conditions in the right way is the thing that matters.</b>\n<p>In Revit 2010, there were less AutomationIDs than in 2011, and some items shared their ID; e.g. there were some buttons with icons and others without icons, both for opening or closing files.\n<p>Getting the button with icon meant to see whether the button had children because all other Properties were identical – besides position, of course, but this may change...\n<p>Its \"workarounding\" at its best.\n\n<p>Another last comment or two from Rudolf on this topic:\n\n<p>I am hoping that Revit's ribbon response time will decrease in future versions; if so, then the calls to System.Threading.Sleep( aLotOfTime ) can be changed to System.Threading.Sleep( justAMillisecond ).\nSo I hope.\n\n<p>And, by the way, UISpy allows you to export the Window structure to an XML document, so you can browse this snapshot instead of the 'real' windows.\n\n<p>Very many thanks to Rudolf for this in-depth exploration which opens up many new possibilities!\n\n<p>Exploring this should keep you occupied for a while...\n\n<p>Once again I have to repeat the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html#2\">\nwarning about the risks involved</a> with \n\nusing this, though, and also point back to the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html#3\">\ndisclaimer</a> accompanying \n\nthat warning.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0507_ribbon_spy_automate",
    "header_text": "Stand-Alone Sample Application",
    "local_header_href": "#stand-alone-sample-application",
    "chunk_text": "<h4>Stand-Alone Sample Application</h4><p>Rudolf created a stand-alone Windows Forms project \n\n<a href=\"\">DrivingRevitViaUIAutomation</a> that \n\ndemonstrates the use of this approach.\nSince UIAutomation can drive any application, the mechanism is not restricted to Revit a add-in, but can be used there as well as in any other context.\nFor instance, you also could drive 3dsmax or something else from outside.\n\n<p>By the way, while developing my Revit MDI window arranging tool, I discovered that AutoCAD has a window structure similar to Revit.\nThis is of course not surprising because it's Autodesk's policy to make the products look similar.\n\n<p>DrivingRevitViaUIAutomation is adjusted to drive a German version of Revit 2011.\n<p>There are about three German literals in the code, describing some dialog titles.\n<p>It includes added comments like this: \"Öffnen\" // en-US:\"Open\"\n<p>These are the parts the user must replace by his own dialog titles if his Revits language is not German.\n<p>It may be necessary to adjust some pause intervals in the code.\n\n<p>This example demonstrates three steps:\n\n<ul>\n<li>Open a file.\n<li>Close a file (in fact, the active document); you can choose whether you want to save it before closing. \n<li>Switch the current RibbonTab. Before selecting a Tab by pressing a TreeNode, you must read the Ribbon once, so the switching process will be faster because the Tabs are in a buffer.\n</li></li></li></ul>\n<p>The user interface initially looks like this, with a sample file that can be opened and buttons for closing it with and without saving and for populating the list of ribbon tabs:</p>\n<center>\n<img alt=\"UI automation sample application\" src=\"img/rh_ui_automation_sample.png\"/>\n</center>\n<p>Once the the list of ribbon tabs has been populated, each one of them can be clicked to activate it in the Revit user interface:</p>\n<center>\n<img alt=\"UI automation sample application with populated ribbon tabs\" src=\"img/rh_ui_automation_sample_populated.png\"/>\n</center>\n<p>The code uses a mix of the fast Window functions (P/Invoke) with the slow UIAutomation functions; this improves performance and may make a difference in more complex examples.\n\n<p>Regarding the language dependency: For example, the \"open file\" dialog is found by its title text, and in my example, this is \"Öffnen\".\n<p>Open this dialog manually, read the (English) title and replace the German expression in the code.\n<p>Additionally, this part is important:\n\n<pre class=\"code\">\n  <span class=\"teal\">PropertyCondition</span> nameOpenDlgCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">PropertyCondition</span>( \n      <span class=\"teal\">AutomationElement</span>.NameProperty, \n      <span class=\"maroon\">\"Öffnen\"</span> ); <span class=\"green\">// en-US: \"Open\"</span>\n \n  <span class=\"teal\">AndCondition</span> andOpenDlgCondition \n    = <span class=\"blue\">new</span> <span class=\"teal\">AndCondition</span>( nameOpenDlgCondition, \n      typeOpenDlgCondition );\n \n  <span class=\"teal\">Thread</span>.Sleep( 600 );\n \n  <span class=\"teal\">AutomationElementCollection</span> allOpenDlgs \n    = mainWndFromHandle.FindAll( \n      <span class=\"teal\">TreeScope</span>.Children, \n      nameOpenDlgCondition );\n \n  <span class=\"green\">//typeOpenDlgCondition andOpenDlgCondition</span>\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> openOpenDlgWnd \n    <span class=\"blue\">in</span> allOpenDlgs )\n  {\n    <span class=\"blue\">if</span>( openOpenDlgWnd.Current.LocalizedControlType \n      == <span class=\"maroon\">\"Dialogfeld\"</span> ) <span class=\"green\">// en-US: ?</span>\n    {\n</pre>\n<p>If you are running an English version of Revit, you need to examine the LocalizedControlType for it; in fact, not for your Revit version but for your OS Language version.\n<p>Look at this screenshot taken from an English Revit residing in a German VM:\n\n<center>\n<img alt=\"UISpy looking at an English version\" src=\"img/rh_uispy_en.png\" width=\"400\"/>\n</center>\n<p>The LocalizedControlType depends on OS Language; nonetheless, the dialog titles change according to Revit language.\n<p>You need to examine the LocalizedControlType by your own, I think, but its just one use of UISpy.\n\n<p>I think there might be a way to do it without any localization issues, but as I explained before, finding the correct AutomationElement is always a compromise between performance and elegance.\n<p>Sometimes there is no property that makes a AutomationElement individual, no AutomationID, just Controltype.Pane, for example.\n<p>If you just search by ControlType.Button, for example, it might be that you find some unwanted results, or, as I explained, the performance will decrease.\n<p><b>Combining the search conditions in the right way is the thing that matters.</b>\n<p>In Revit 2010, there were less AutomationIDs than in 2011, and some items shared their ID; e.g. there were some buttons with icons and others without icons, both for opening or closing files.\n<p>Getting the button with icon meant to see whether the button had children because all other Properties were identical – besides position, of course, but this may change...\n<p>Its \"workarounding\" at its best.\n\n<p>Another last comment or two from Rudolf on this topic:\n\n<p>I am hoping that Revit's ribbon response time will decrease in future versions; if so, then the calls to System.Threading.Sleep( aLotOfTime ) can be changed to System.Threading.Sleep( justAMillisecond ).\nSo I hope.\n\n<p>And, by the way, UISpy allows you to export the Window structure to an XML document, so you can browse this snapshot instead of the 'real' windows.\n\n<p>Very many thanks to Rudolf for this in-depth exploration which opens up many new possibilities!\n\n<p>Exploring this should keep you occupied for a while...\n\n<p>Once again I have to repeat the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html#2\">\nwarning about the risks involved</a> with \n\nusing this, though, and also point back to the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/closing-the-active-document-and-why-not-to.html#3\">\ndisclaimer</a> accompanying \n\nthat warning.\n\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]