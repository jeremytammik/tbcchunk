[
  {
    "original_filename": "1055_app_single_cmd_multi",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1055_app_single_cmd_multi",
    "header_text": "Singleton Application versus Multiple Command Instances",
    "local_header_href": "#singleton-application-versus-multiple-command-instances",
    "chunk_text": "<h3>Singleton Application versus Multiple Command Instances</h3><p>I recently discussed the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/roomeditorapp-architecture-and-external-application.html\">\nRoomEditorApp</a> external\n\napplication, the Revit add-in part of my cloud-based real-time round-trip 2D Revit model editing application, while creating the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">\nRoomEditorApp GitHub repository</a> and\n\nmigrating it to Revit 2014.</p><p>I also mentioned that I was mysteriously\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/11/roomeditorapp-architecture-and-external-application.html#4\">\nunable to unsubscribe from the Idling event</a>.</p><p>I raised this <a href=\"#2\">mystifying question</a> with the development team and received a very <a href=\"#3\">satisfying answer</a>, which includes some important information on how external applications and commands are handled and instantiated by the Revit API.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1055_app_single_cmd_multi",
    "header_text": "Unsubscribing from the Idling Event Fails",
    "local_header_href": "#unsubscribing-from-the-idling-event-fails",
    "chunk_text": "<h4>Unsubscribing from the Idling Event Fails</h4><p>I created a simplified version of the external application named TestIdlingUnsubscribe to demonstrate how my attempt to unsubscribe from the Idling event fails.</p><p>It consists of an external application handling the subscription and an external command to toggle the subscription on and off.\n\n<p>The application defines a public method ToggleSubscription providing access to that functionality like this:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Are we currently subscribed to the Idling event?</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> Subscribed = <span class=\"blue\">false</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Our one and only Revit-provided </span>\n  <span class=\"gray\">///</span><span class=\"green\"> UIControlledApplication instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">UIControlledApplication</span> _uiapp;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Toggle on and off subscription to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> automatic cloud updates.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> ToggleSubscription(\n    <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt; handler )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unsubscribing...\"</span> );\n      _uiapp.Idling -= handler;\n      Subscribed = <span class=\"blue\">false</span>;\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unsubscribed.\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Subscribing...\"</span> );\n      _uiapp.Idling += handler;\n      Subscribed = <span class=\"blue\">true</span>;\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Subscribed.\"</span> );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _uiapp = a;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      _uiapp.Idling\n        -= <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt;(\n          ( sender, ea ) =&gt; { } );\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>The external command defines the Idling event handler, reports the current status and makes calls to the App ToggleSubscription method:</p>\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> How many Idling calls to wait before reporting</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">int</span> _message_interval = 100;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Number of Idling calls received in this session</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">int</span> _counter = 0;\n \n  <span class=\"blue\">void</span> OnIdling(\n    <span class=\"blue\">object</span> sender,\n    <span class=\"teal\">IdlingEventArgs</span> ea )\n  {\n    ++_counter;\n \n    <span class=\"blue\">if</span>( 0 == ( _counter % _message_interval ) )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} OnIdling called {1} times\"</span>,\n        <span class=\"teal\">DateTime</span>.Now.ToString( <span class=\"maroon\">\"HH:mm:ss.fff\"</span> ),\n        _counter );\n    }\n \n    ea.SetRaiseWithoutDelay();\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">Debug</span>.Print(\n      <span class=\"maroon\">\"We are currently {0}subscribed to the Idling event.\"</span>,\n      <span class=\"teal\">App</span>.Subscribed ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"not \"</span> );\n \n    <span class=\"teal\">App</span>.ToggleSubscription( OnIdling );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>You can see how the command logs its activity and the Idling event handler logs the calls it receives to the Visual Studio debug output console window.</p>\n<p>Here is a partial log of the command being executed twice, once to subscribe and once to unsubscribe:</p>\n<pre>\n  We are currently not subscribed to the Idling event.\n  Subscribing...\n  Subscribed.\n  16:58:39.816 OnIdling called 100 times\n  16:58:39.836 OnIdling called 200 times\n  16:58:40.662 OnIdling called 300 times\n  16:58:40.684 OnIdling called 400 times\n  We are currently subscribed to the Idling event.\n  Unsubscribing...\n  Unsubscribed.\n  16:58:42.230 OnIdling called 500 times\n  16:58:42.250 OnIdling called 600 times\n  16:58:42.270 OnIdling called 700 times\n  ...\n  16:58:44.465 OnIdling called 6200 times\n</pre>\n<p>Very strange!</p>\n<p>The Idling event continues receiving calls even after unsubscribing.</p>\n<p>The entire source code, Visual Studio solution and add-in manifest for this Revit add-in is published in the\n\n<a href=\"https://github.com/jeremytammik/TestIdlingUnsubscribe\">TestIdlingUnsubscribe GitHub repository</a>,\n\nand the failing version described above is released as\n\n<a href=\"https://github.com/jeremytammik/TestIdlingUnsubscribe/releases/tag/2014.0.0.0\">version 2014.0.0.0</a>.</p>\n<p>How can I unsubscribe successfully from the Idling event, and why is it failing?</p>\n<a name=\"3\"></a>\n<h4>Successful Unsubscription and Instantiation Details of the External Application and External Command</h4>\n<p>I discussed this with the Revit API development team, represented by Scott Conover, who replied:</p>\n<p>What an interesting issue.</p>\n<p>The good news – it has nothing to do with your machine configuration, using Parallels etc.</p>\n<p>More good news – it is not related to any issues in the Revit API.</p>\n<p>When a standalone ExternalCommand is added to Revit, Revit assumes that the command is entirely self-contained.\nWhen the command is invoked – Revit instantiates an instance of the class implementing IExternalCommand, calls execute, and discards the reference.</p>\n<p>Subsequent calls to the same command do the same thing – instantiate, invoke, discard.</p>\n<p>Why it matters in your case – the Idling event handler you use is an instance method of the IExternalCommand class.\nSo the first invocation subscribes and it begins to run.\nThe second invocation instantiates a new IExternalCommand and attempts to unsubscribe – but to .NET this is a different method than was used to subscribe so the original keeps going.</p>\n<p>To fix it, either:</p>\n<ul>\n<li>Make the event handler static.</li>\n<li>Hold your own reference to the command or other instance class that contains the handler, and use it to unsubscribe.</li>\n</ul>\n<p>Note that Revit does not do this for ExternalApps, another reason to use them over ExternalCommands.\nThe app instance created to run OnStartup is held by Revit for event invocation of OnShutdown.\nSo another approach would be to use an instance method of the app (but this probably applies more to events which are not Idling, which should not remain active for the entire session anyway).</p>\n<p>Many thanks to Scott for this important clarification.</p>\n<p>I implemented a variation of the second approach he suggests, by storing the event handler method delegate that I use to subscribe with directly in a static variable in the external application.</p>\n<p>I use that to redefine the Subscribe variable as a read-only property as well like this:</p>\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Store the Idling event handler when subscribed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt; _handler = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Are we currently subscribed to the Idling event?</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> Subscribed\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != _handler;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Our one and only Revit-provided </span>\n  <span class=\"gray\">///</span><span class=\"green\"> UIControlledApplication instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">UIControlledApplication</span> _uiapp;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Toggle on and off subscription to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> automatic cloud updates.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> ToggleSubscription(\n    <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt; handler )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unsubscribing...\"</span> );\n      _uiapp.Idling -= _handler;\n      _handler = <span class=\"blue\">null</span>;\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unsubscribed.\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Subscribing...\"</span> );\n      _uiapp.Idling += handler;\n      _handler = handler;\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Subscribed.\"</span> );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _uiapp = a;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      _uiapp.Idling -= _handler;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>Since the external application is only instantiated as a singleton instance, I could basically remove all those 'static' qualifiers, but that would require an application instance variable for the external command to access them, so I left them in for the moment.</p>\n<p>Note that the client code remains completely unaffected by this internal improvement, so the external command implementation is not changed at all.</p>\n<p>The working solution above is provided in the repository as\n\n<a href=\"https://github.com/jeremytammik/TestIdlingUnsubscribe/releases/tag/2014.0.0.1\">release 2014.0.0.1</a>.</p>\n<p>I hope you find this as interesting and illuminating as I do.</p>\n</p>"
  },
  {
    "original_filename": "1055_app_single_cmd_multi",
    "header_text": "Successful Unsubscription and Instantiation Details of the External Application and External Command",
    "local_header_href": "#successful-unsubscription-and-instantiation-details-of-the-external-application-and-external-command",
    "chunk_text": "<h4>Successful Unsubscription and Instantiation Details of the External Application and External Command</h4><p>I discussed this with the Revit API development team, represented by Scott Conover, who replied:</p><p>What an interesting issue.</p><p>The good news – it has nothing to do with your machine configuration, using Parallels etc.</p><p>More good news – it is not related to any issues in the Revit API.</p><p>When a standalone ExternalCommand is added to Revit, Revit assumes that the command is entirely self-contained.\nWhen the command is invoked – Revit instantiates an instance of the class implementing IExternalCommand, calls execute, and discards the reference.</p><p>Subsequent calls to the same command do the same thing – instantiate, invoke, discard.</p><p>Why it matters in your case – the Idling event handler you use is an instance method of the IExternalCommand class.\nSo the first invocation subscribes and it begins to run.\nThe second invocation instantiates a new IExternalCommand and attempts to unsubscribe – but to .NET this is a different method than was used to subscribe so the original keeps going.</p><p>To fix it, either:</p><ul>\n<li>Make the event handler static.</li>\n<li>Hold your own reference to the command or other instance class that contains the handler, and use it to unsubscribe.</li>\n</ul><p>Note that Revit does not do this for ExternalApps, another reason to use them over ExternalCommands.\nThe app instance created to run OnStartup is held by Revit for event invocation of OnShutdown.\nSo another approach would be to use an instance method of the app (but this probably applies more to events which are not Idling, which should not remain active for the entire session anyway).</p><p>Many thanks to Scott for this important clarification.</p><p>I implemented a variation of the second approach he suggests, by storing the event handler method delegate that I use to subscribe with directly in a static variable in the external application.</p><p>I use that to redefine the Subscribe variable as a read-only property as well like this:</p><pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Store the Idling event handler when subscribed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt; _handler = <span class=\"blue\">null</span>;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Are we currently subscribed to the Idling event?</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> Subscribed\n  {\n    <span class=\"blue\">get</span>\n    {\n      <span class=\"blue\">return</span> <span class=\"blue\">null</span> != _handler;\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Our one and only Revit-provided </span>\n  <span class=\"gray\">///</span><span class=\"green\"> UIControlledApplication instance.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">UIControlledApplication</span> _uiapp;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Toggle on and off subscription to </span>\n  <span class=\"gray\">///</span><span class=\"green\"> automatic cloud updates.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">void</span> ToggleSubscription(\n    <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">IdlingEventArgs</span>&gt; handler )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unsubscribing...\"</span> );\n      _uiapp.Idling -= _handler;\n      _handler = <span class=\"blue\">null</span>;\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unsubscribed.\"</span> );\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Subscribing...\"</span> );\n      _uiapp.Idling += handler;\n      _handler = handler;\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Subscribed.\"</span> );\n    }\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    _uiapp = a;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnShutdown( <span class=\"teal\">UIControlledApplication</span> a )\n  {\n    <span class=\"blue\">if</span>( Subscribed )\n    {\n      _uiapp.Idling -= _handler;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre><p>Since the external application is only instantiated as a singleton instance, I could basically remove all those 'static' qualifiers, but that would require an application instance variable for the external command to access them, so I left them in for the moment.</p><p>Note that the client code remains completely unaffected by this internal improvement, so the external command implementation is not changed at all.</p><p>The working solution above is provided in the repository as\n\n<a href=\"https://github.com/jeremytammik/TestIdlingUnsubscribe/releases/tag/2014.0.0.1\">release 2014.0.0.1</a>.</p><p>I hope you find this as interesting and illuminating as I do.</p>"
  }
]