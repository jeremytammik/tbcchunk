[
  {
    "original_filename": "0220_door_marks",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0220_door_marks",
    "header_text": "Door Marks",
    "local_header_href": "#door-marks",
    "chunk_text": "<h3>Door Marks</h3><p>Here is a question from Håvard Dagsvik of\n\n<a href=\"http://www.cad-q.com/no\">\nCad Quality as</a>\n\non door marks.\nIt can obviously be generalised to other model marks in the BIM as well.\n\n<p><strong>Question:</strong> One of the best documentation features of Revit is the function assigning numeric values to the Mark parameters.\nIf you insert 5 doors they are marked 1-5.\nNow if door 3 and 5 are deleted, then a new door will still start its mark on 6.\nEven if the project is closed and reopened, the next door still gets Mark# 6.\nThat means there has to be a list inside Revit somewhere of the mark numbers that previously has been used, and Revit avoids reusing those numbers again.\nIs there a way through the API to get to that list?\nAnd somehow manipulate it to make Revit start counting on our choice of number?\n</p>\n<p><strong>Answer:</strong> Using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/rvtmgddbg.html\">\nRvtMgdDbg</a> BIM\n\ndebugging and analysis tool or the Revit API introduction labs\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/deeper-parameter-exploration.html\">\nbuilt-in parameter checker</a> to\n\nexplore various element parameters, I see that the Mark parameter is accessible through the built-in parameters ALL_MODEL_MARK.\nThis is a read-write parameter:</p>\n<pre>\nALL_MODEL_MARK  Mark  String/Text  read-write  4\n</pre>\n<p>You can therefore obtain a list of all door marks by filtering for all door instances and reading their ALL_MODEL_MARK parameter value.\n\n<p>I do not believe that you can manipulate Revit to influence the automatic mark counting setting used by the automatic assignment, but what you certainly can do is implement an external command which renumbers existing door instances by changing the value of their  ALL_MODEL_MARK parameter value in any way you please.\n\n<p>To demonstrate reading and listing all existing door marks as well as modifying the marks of existing doors, I created a new Building Coder sample command CmdListMarks, which implements the following functionality:\n\n<ul>\n<li>Select all door instances in the model.\n<li>Iterate over the selected door instances.\n<li>Create a dictionary whose keys are all door marks in the model and mapping each mark to a list of all doors with that mark.\n<li>Print out the sorted dictionary contents.\n<li>If any door elements have been selected prior to running the command, modify their door marks to a predefined hardcoded value \"42\".\n</li></li></li></li></li></ul>\n<p>Here is the output produced by running this command in a small model with four doors with the marks 1, 2 and 4, where 4 is duplicated on two doors.\n\n<pre>\n4 doors found.\n3 door marks found:\n  1: 1 door\n  2: 1 door\n  4: 2 doors\n</pre>\n<p>If I select the two doors marked 4 and run the command again, their marks are modified to 42.\nRunning it yet again lists the new mark settings:\n\n<pre>\n4 doors found.\n3 door marks found:\n  1: 1 door\n  2: 1 door\n  42: 2 doors\n</pre>\n<p>Here is the complete code of the new external command:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">bool</span> _modify_existing_marks = <span class=\"blue\">true</span>;\n<span class=\"blue\">const</span> <span class=\"blue\">string</span> _the_answer = <span class=\"maroon\">\"42\"</span>;\n \n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  Autodesk.Revit.Creation.<span class=\"teal\">Filter</span> cf\n    = app.Create.Filter;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; doors\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n  <span class=\"teal\">Filter</span> f1 = cf.NewTypeFilter(\n    <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) );\n \n  <span class=\"teal\">Filter</span> f2 = cf.NewCategoryFilter(\n    <span class=\"teal\">BuiltInCategory</span>.OST_Doors );\n \n  <span class=\"teal\">Filter</span> f = cf.NewLogicAndFilter( f1, f2 );\n \n  <span class=\"blue\">int</span> n = doc.get_Elements( f, doors );\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} door{1} found.\"</span>,\n    n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt; marks\n      = <span class=\"blue\">new</span> <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;&gt;();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyInstance</span> door <span class=\"blue\">in</span> doors )\n    {\n      <span class=\"blue\">string</span> mark = door.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.ALL_MODEL_MARK )\n        .AsString();\n \n      <span class=\"blue\">if</span>( !marks.ContainsKey( mark ) )\n      {\n        marks.Add( mark, <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;() );\n      }\n      marks[mark].Add( door );\n    }\n \n    <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt; keys = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">string</span>&gt;(\n      marks.Keys );\n \n    keys.Sort();\n \n    n = keys.Count;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} door mark{1} found{2}\"</span>,\n      n, <span class=\"teal\">Util</span>.PluralSuffix( n ),\n      <span class=\"teal\">Util</span>.DotOrColon( n ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"blue\">string</span> mark <span class=\"blue\">in</span> keys )\n    {\n      n = marks[mark].Count;\n \n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0}: {1} door{2}\"</span>,\n        mark, n, <span class=\"teal\">Util</span>.PluralSuffix( n ) );\n    }\n  }\n \n  n = 0; <span class=\"green\">// count how many elements are modified</span>\n \n  <span class=\"blue\">if</span>( _modify_existing_marks )\n  {\n    <span class=\"teal\">ElementSet</span> els = doc.Selection.Elements;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> els )\n    {\n      <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span>\n        &amp;&amp; <span class=\"blue\">null</span> != e.Category\n        &amp;&amp; (<span class=\"blue\">int</span>) <span class=\"teal\">BuiltInCategory</span>.OST_Doors\n          == e.Category.Id.Value )\n      {\n        e.get_Parameter(\n          <span class=\"teal\">BuiltInParameter</span>.ALL_MODEL_MARK )\n          .Set( _the_answer );\n \n        ++n;\n      }\n    }\n  }\n \n  <span class=\"green\">// return Succeeded only if we wish to commit </span>\n  <span class=\"green\">// the transaction to modify the database:</span>\n \n  <span class=\"blue\">return</span> 0 &lt; n\n    ? <span class=\"teal\">CmdResult</span>.Succeeded\n    : <span class=\"teal\">CmdResult</span>.Failed;\n}\n</pre>\n<p>The command returns Succeeded only if the BIM has actually been modified, otherwise Failed.\nThis ensures that the document dirty flag stored in its\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/document-ismodified-property.html\">\nIsModified property</a> is\n\nnot set unnecessarily.\n\n<p>Here is\n\n<a href=\"zip/bc11047.zip\">\nversion 1.1.0.47</a>\n\nof the complete Building Coder sample source code and Visual Studio solution including the new command.</p>\n</p></p></p></p></p></p></p></p>"
  }
]