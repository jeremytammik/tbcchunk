[
  {
    "original_filename": "1935_text_2d_geo",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- The height and width of the dimension text\n  https://forums.autodesk.com/t5/revit-api-forum/the-height-and-width-of-the-dimension-text/m-p/10873262\n\n- get text font outline geometry from TextNode in custom export\n  Converting text to geometry when performing a 2d view export\n  https://forums.autodesk.com/t5/revit-api-forum/converting-text-to-geometry-when-performing-a-2d-view-export/m-p/10201712#M54774\n  /Users/jta/a/doc/revit/tbc/git/a/img/text_geometry.png\n\n- retrieve 2D geometry of generic element\n  View Reference Location\n  https://forums.autodesk.com/t5/revit-api-forum/view-reference-location/m-p/10867150\n\ntwitter:\n\nThe 2D custom exporter provides a basis for a powerful approach to access detailed 2D geometry, e.g., retrieve dimension text height and width, determine text font geometry and retrieve 2D geometry of any element in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://bit.ly/2dtextgeo\n\nThe 2D custom exporter provides a basis for a new and much more powerful approach to access detailed 2D geometry\n&ndash; Retrieve dimension text height and width\n&ndash; Determine text font geometry\n&ndash; Retrieve 2D geometry of any element...\n\nlinkedin:\n\nThe 2D custom exporter provides a powerful approach to access detailed 2D geometry in the #RevitAPI\n\nhttps://bit.ly/2dtextgeo\n\n- Retrieve dimension text height and width\n- Determine text font geometry\n- Retrieve 2D geometry of any element...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1935_text_2d_geo",
    "header_text": "Detailed 2D Text and Other Element Geometry",
    "local_header_href": "#detailed-2d-text-and-other-element-geometry",
    "chunk_text": "### Detailed 2D Text and Other Element Geometry\n\nDetermining the extents of a text element has been a recurring and challenging task with several tricky solutions suggested in the past, e.g.:\n\n<!-- 0610 0646 1223 1440 1517 -->\n\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/text-size.html\">Text Size</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/textnote-lost-in-space.html\">TextNote Lost in Space?</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/10/new-text-note-and-text-width-calculation.html\">New Text Note and Text Width Calculation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2016/05/idea-station-and-textnote-bounding-box.html\">TextNote Bounding Box</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2017/01/textnote-rotation-forge-devcon-tensorflow-and-keras.html\">TextNote Rotation</a></li>\n</ul>\n\nThe 2D custom exporter provides a basis for a much more powerful approach to address this, as already discussed once way back then \nin [using a custom exporter for 2D](https://thebuildingcoder.typepad.com/blog/2015/11/au-begins-and-using-a-custom-exporter-for-2d.html#2):\n\n- [Retrieve dimension text height and width](#2)\n- [Determine text font geometry](#3)\n- [Retrieve 2D geometry of any element](#4)"
  },
  {
    "original_filename": "1935_text_2d_geo",
    "header_text": "Retrieve Dimension Text Height and Width",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Retrieve Dimension Text Height and Width\n\nThe latest question in this series asks how to determine\n[the height and width of the dimension text](https://forums.autodesk.com/t5/revit-api-forum/the-height-and-width-of-the-dimension-text/m-p/10873262):\n\n**Question:** When dimension text overlaps, I want to move one of the dimensions to avoid the overlap.\nMy idea is to calculate the rectangular border of the text through the position of the text and the width and height of the text, and then judge whether the rectangular borders intersect.\nSo, how to calculate the width and height of dimension text?\n\n**Answer:** That should be possible using the approaches described in these two other recent threads:\n\nLook at these two recent threads here in the forum:\n\n- Get the text font outline geometry from the `TextNode` in a 2D custom export as described\nfor [converting text to geometry when performing a 2D view export](https://forums.autodesk.com/t5/revit-api-forum/converting-text-to-geometry-when-performing-a-2d-view-export/m-p/10201712)\n- Retrieve 2D geometry of generic element, explained in the question\non [view reference location](https://forums.autodesk.com/t5/revit-api-forum/view-reference-location/m-p/10867150)"
  },
  {
    "original_filename": "1935_text_2d_geo",
    "header_text": "Determine Text Font Geometry",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Determine Text Font Geometry\n\nHaroon Haider describes his successful approach to access text font geometry in \nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [converting text to geometry when performing a 2D view export](https://forums.autodesk.com/t5/revit-api-forum/converting-text-to-geometry-when-performing-a-2d-view-export/m-p/10201712):\n\n**Question:** We have been able to get access to the lines, grids, annotations and other basic elements of a 2D view using the `IExportContext2D` interface.\nIs there a way to convert the annotation text from strings to geometry using Revit API similar to how you can do in AutoCAD? \nI'm looking to get something like this:\n\n<center>\n<img src=\"img/text_font_geom.png\" alt=\"Text font geometry\" title=\"Text font geometry\" width=\"223\"/> <!-- 223 -->\n</center>\n\n**Answer:** I ended up getting what I need by processing a `TextNode` from the export context method `OnText` call.\nThere is enough information in the text node class to be able to convert it to a `GraphicsPath` and pull out the geometry from there.\n\nMany thanks to Haroon for sharing this!"
  },
  {
    "original_filename": "1935_text_2d_geo",
    "header_text": "Retrieve 2D Geometry of any Element",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Retrieve 2D Geometry of any Element\n\nRichard [RPThomas108](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1035859) Thomas\nshares a generic solution to retrieve the 2D geometry of any element in the thread \non [view reference location](https://forums.autodesk.com/t5/revit-api-forum/view-reference-location/m-p/10867150):\n\n**Question:** I am making a simple tool to add a leader annotation symbol to a View Reference, but have run into a bit of an issue.\nIn RevitLookup, it doesn't appear that the location of a View Reference is defined anywhere in the API.\nLooking through the API docs as well, I can't find a class for View Reference either, which makes me think that its properties aren't accessible.\nAm I missing something?\nObviously, a simple workaround is to just have the user click a start and end point, but ideally I'd like to have the start be defined by the View Reference location.\n\n**Answer:** The Revit API supports exactly (and only) two data types for the Location property: `LocationPoint` and `LocationCurve`.\nSome elements have different kinds of location definitions that do not fit into either of these two.\nIn that case, they are not accessible in the API, just as you surmised.\nIs the view reference location visible in any way in the end user interface?\nWhat does it look like in that context?\nIs there any reason why it might be considered something that does not fit into a point or a curve?\n\nIn general, classes that show up as `Element` in RevitLookup have no specific API functionality beyond the element base class.\n\nAs the location of the element it not exposed, nor is the geometry, you have two options:\n\n- Centre of BoundingBox, or\n- Implement `IExportContext2D` and gather the geometry via that.\n\nI would do the latter as it gives you more control.\n\n- Use `OnElementBegin2D` to check the id against the element you want to look at; then pass `Skip` or `Proceed` depending on whether your id matches.\n- `OnCurve` will give you details of curves (called for each).\n- `OnText` will give you details of text.\n\nNote that this will happen regardless of what you set for `RenderNodeAction` in `OnElementBegin2D`.\nThe best way to avoid calling `OnText` for text elements you are not interested in is to do as follows:\n\n- During `OnElementBegin2d`, store the `ElemendId` as a variable\n- During `OnElementEnd2d` set the `ElementId` variable to `InvalidElementId`\n- During `OnText` exit the sub if variable is not set to `InvalidElementId`\n\nTo export text, you also need to set `Export2DIncludingAnnotationObjects` to true.\n\nI'm finding the best approach is to implement `IExportContext2D` via a general class and then inherit that.\nThis avoids having to implement all the members each time and you can build in some filtering similar to above:\n\n<pre class=\"code\">\nImports Autodesk.Revit.DB\n\nPublic Class RT_ExportContext2d_Limited\n  Implements IExportContext2D\n\n  Private IntDoc As Document = Nothing\n  Private FilterEIDs As List(Of ElementId) = Nothing\n  Private IntCurrentEID As ElementId = ElementId.InvalidElementId\n\n  Public Property DefaultAction As RenderNodeAction = RenderNodeAction.Proceed\n\n  Public Sub New(D As Document, Optional TargetElementIds As List(Of ElementId) = Nothing)\n    FilterEIDs = TargetElementIds\n    IntDoc = D\n  End Sub\n\n  Public Overridable Function Start() As Boolean Implements IExportContext.Start\n    Return True\n  End Function\n  Public Overridable Sub Finish() Implements IExportContext.Finish\n  End Sub\n  Public Overridable Function IsCanceled() As Boolean Implements IExportContext.IsCanceled\n    Return False\n  End Function\n\n#Region \"OnBegins\"\n  Public Overridable Function OnViewBegin(node As ViewNode) As RenderNodeAction Implements IExportContext.OnViewBegin\n    Return DefaultAction\n  End Function\n  Public Function OnElementBegin2D(node As ElementNode) As RenderNodeAction Implements IExportContext2D.OnElementBegin2D\n    IntCurrentEID = node.ElementId\n\n    If FilterEIDs IsNot Nothing Then\n      If FilterEIDs.Contains(node.ElementId) Then\n        Return RenderNodeAction.Proceed\n      Else\n        Return RenderNodeAction.Skip\n      End If\n    Else\n      Return RenderNodeAction.Proceed\n    End If\n\n    OnElementBegin2D_Overridable(node)\n  End Function\n  Public Overridable Sub OnElementBegin2D_Overridable(node As ElementNode)\n  End Sub\n\n  Public Function OnElementBegin(elementId As ElementId) As RenderNodeAction Implements IExportContext.OnElementBegin\n    'Never called for 2D export\n    Return DefaultAction\n  End Function\n  Public Function OnInstanceBegin(node As InstanceNode) As RenderNodeAction Implements IExportContext.OnInstanceBegin\n    Return DefaultAction\n  End Function\n  Public Function OnFaceBegin(node As FaceNode) As RenderNodeAction Implements IExportContext.OnFaceBegin\n    Return DefaultAction\n  End Function\n  Public Overridable Function OnFaceEdge2D(node As FaceEdgeNode) As RenderNodeAction Implements IExportContext2D.OnFaceEdge2D\n    Return DefaultAction\n  End Function\n\n  Public Function OnLinkBegin(node As LinkNode) As RenderNodeAction Implements IExportContext.OnLinkBegin\n    Return DefaultAction\n  End Function\n\n#End Region\n\n#Region \"OnFunctions_Returns\"\n  Public Overridable Function OnFaceSilhouette2D(node As FaceSilhouetteNode) As RenderNodeAction Implements IExportContext2D.OnFaceSilhouette2D\n    Return DefaultAction\n  End Function\n  Public Overridable Function OnCurve(node As CurveNode) As RenderNodeAction Implements IExportContextBase.OnCurve\n    Return DefaultAction\n  End Function\n  Public Overridable Function OnPolyline(node As PolylineNode) As RenderNodeAction Implements IExportContextBase.OnPolyline\n    Return DefaultAction\n  End Function\n#End Region\n\n#Region \"OnEnds_NoReturns\"\n  Public Sub OnElementEnd2D(node As ElementNode) Implements IExportContext2D.OnElementEnd2D\n    IntCurrentEID = Nothing\n    OnElementEnd2D_Overridable(node)\n  End Sub\n  Public Overridable Sub OnElementEnd2D_Overridable(node As ElementNode)\n  End Sub\n\n  Public Overridable Sub OnViewEnd(elementId As ElementId) Implements IExportContext.OnViewEnd\n  End Sub\n  Public Sub OnElementEnd(elementId As ElementId) Implements IExportContext.OnElementEnd\n  End Sub\n\n  Public Overridable Sub OnInstanceEnd(node As InstanceNode) Implements IExportContext.OnInstanceEnd\n  End Sub\n  Public Overridable Sub OnLinkEnd(node As LinkNode) Implements IExportContext.OnLinkEnd\n  End Sub\n  Public Overridable Sub OnFaceEnd(node As FaceNode) Implements IExportContext.OnFaceEnd\n  End Sub\n#End Region\n\n#Region \"OnSubs_NoReturns\"\n  Public Overridable Sub OnLineSegment(segment As LineSegment) Implements IExportContextBase.OnLineSegment\n  End Sub\n  \n  Public Overridable Sub OnPolylineSegments(segments As PolylineSegments) Implements IExportContextBase.OnPolylineSegments\n  End Sub\n  \n  Public Sub OnText(node As TextNode) Implements IExportContextBase.OnText\n    'For tags etc. some calls to this will be during on instance\n    'e.g. fixed text within family\n    'Some call will be outside OnInstance but before OnElementEnd2D of associated element\n    'e.g. tag values (variable text).\n\n    If IntCurrentEID = ElementId.InvalidElementId Then Exit Sub Else\n    OnText_Overridable(node)\n  End Sub\n\n  Public Overridable Sub OnText_Overridable(node As TextNode)\n  End Sub\n\n  Public Overridable Sub OnRPC(node As RPCNode) Implements IExportContext.OnRPC\n  End Sub\n  Public Overridable Sub OnLight(node As LightNode) Implements IExportContext.OnLight\n  End Sub\n  Public Overridable Sub OnMaterial(node As MaterialNode) Implements IExportContext.OnMaterial\n  End Sub\n  Public Overridable Sub OnPolymesh(node As PolymeshTopology) Implements IExportContext.OnPolymesh\n  End Sub\n#End Region\n\nEnd Class\n</pre>\n\nA lot of the members are not called for the 2D scenario.\n\nHere is a correction required to `OnText`, i.e., check the list of filtered contains the current id.\n\n<pre class=\"code\">\n Public Sub OnText(node As TextNode) Implements IExportContextBase.OnText\n    If FilterEIDs IsNot Nothing Then\n      If FilterEIDs.Contains(IntCurrentEID) = False Then\n        Exit Sub\n      End If\n    End If\n\n    OnText_Overridable(node)\nEnd Sub\n</pre>\n\nThe best way to understand the order of the exporter method calls is to log them.\n\n**Response:** Thanks so much!\nThat's a clever implementation of `IExportContext2d`.\nAppreciate the help!\n\nMany thanks to Richard for sharing this!"
  }
]