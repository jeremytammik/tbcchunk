[
  {
    "original_filename": "0876_facewall_create",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0876_facewall_create",
    "header_text": "Create FaceWall on Slanted Mass Face",
    "local_header_href": "#create-facewall-on-slanted-mass-face",
    "chunk_text": "<h3>Create FaceWall on Slanted Mass Face</h3><p>Happy New Year!\n\n<p>I hope you had a wonderful break and a good start into the New Year.</p>\n<p>I spent New Year's Eve with my sons and some friends in a Swiss mountain village.\nWe had a nice hike up and snowboard ride down the neighbouring hill with the Wildhorn in the background:</p>\n<center>\n<img alt=\"Hike in snow\" src=\"file:///j/photo/jeremy/2012/2012-12-31_lauenen/img_2071_cornelius_jeremy_wildhorn.jpg\" width=\"400\"/>\n</center>\n<p>Now back to work and the Revit API.\nHere is a question that came up just before Christmas:\n\n<a name=\"2\"></a>\n<p><strong>Question:</strong> I'm trying to create a wall by face on a slanted conceptual mass face.\nDo you have any example code showing how this might work?\n\n<p><strong>Answer:</strong> Here is a simple method that can be run in a project containing one single conceptual mass family instance.\nIt searches the mass for a slanted face whose normal is (-1, 0, 1) and creates a FaceWall instance on that with no problem:\n\n<pre>\n<span class=\"blue\">void</span> CreateFaceWall( <span class=\"teal\">Document</span> doc )\n{\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  <span class=\"teal\">FamilyInstance</span> fi = collector\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n    .FirstElement() <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n \n  <span class=\"teal\">XYZ</span> nnorm = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( -1, 0, 1 ).Normalize();\n \n  <span class=\"blue\">if</span>( fi != <span class=\"blue\">null</span> )\n  {\n    <span class=\"teal\">Options</span> op = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n    op.IncludeNonVisibleObjects = <span class=\"blue\">true</span>;\n    <span class=\"green\">//op.DetailLevel = DetailLevels.Undefined;</span>\n    op.ComputeReferences = <span class=\"blue\">true</span>;\n \n    <span class=\"teal\">GeometryElement</span> ge = fi.get_Geometry( op );\n \n    <span class=\"blue\">if</span>( ge != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> ge )\n      {\n        <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( solid != <span class=\"blue\">null</span> &amp;&amp; solid.Faces.Size &gt; 0 )\n        {\n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> f <span class=\"blue\">in</span> solid.Faces )\n          {\n            <span class=\"teal\">PlanarFace</span> pf = f <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n            <span class=\"blue\">if</span>( pf != <span class=\"blue\">null</span> )\n            {\n              <span class=\"teal\">XYZ</span> fnorm = pf.Normal.Normalize();\n \n              <span class=\"blue\">if</span>( fnorm.IsAlmostEqualTo( nnorm ) )\n              {\n                <span class=\"blue\">string</span> log = <span class=\"maroon\">\"\"</span>;\n                <span class=\"blue\">bool</span> done = <span class=\"blue\">false</span>;\n                <span class=\"blue\">foreach</span>( <span class=\"teal\">WallType</span> t <span class=\"blue\">in</span> doc.WallTypes )\n                {\n                  <span class=\"blue\">if</span>( t != <span class=\"blue\">null</span> )\n                  {\n                    <span class=\"teal\">ElementId</span> id = t.Id;\n                    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> trans\n                      = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n                    {\n                      trans.Start( <span class=\"maroon\">\"Add wall\"</span> );\n                      <span class=\"blue\">try</span>\n                      {\n                        <span class=\"teal\">FaceWall</span> fw = <span class=\"teal\">FaceWall</span>\n                          .Create( doc, id,\n                            <span class=\"teal\">WallLocationLine</span>.CoreExterior,\n                            f.Reference );\n \n                        <span class=\"blue\">if</span>( fw != <span class=\"blue\">null</span> )\n                        {\n                          <span class=\"teal\">TaskDialog</span>.Show(\n                            <span class=\"maroon\">\"Succeeded\"</span>,\n                            <span class=\"maroon\">\"Succeeded\"</span> );\n \n                          done = <span class=\"blue\">true</span>;\n                        }\n                      }\n                      <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n                      {\n                        log += t.Name + <span class=\"maroon\">\": \"</span>\n                          + ex.Message + <span class=\"maroon\">\"\\r\\n\"</span>;\n                      }\n                      trans.Commit();\n                    }\n                    <span class=\"blue\">if</span>( done )\n                      <span class=\"blue\">break</span>;\n                  }\n                }\n                <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Failed\"</span>, log );\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</pre>\n<p>Here is the resulting wall:</p>\n<center>\n<img alt=\"Slanted FaceWall\" src=\"img/SlantedFaceWall.png\" width=\"400\"/>\n</center>\n<a name=\"3\"></a>\n<h4>Inaccessible Location Property</h4>\n<p><strong>Question:</strong> I tried to access the Location property of a FaceWall object.\n\n<p>However, nothing I tried leads to any useful result.\nIn the following code snippet, both theCurve and thePoint remain null:</p>\n<pre>\n  Reference r1 = doc.Selection.PickObject(\n    ObjectType.Element, \"Please pick a wall: \" );\n\n  Element e1 = doc.GetElement( r1 );\n\n  FaceWall faceWall = e1 as FaceWall;\n\n  LocationCurve theCurve = faceWall.Location\n    as LocationCurve;\n\n  LocationPoint thePoint = faceWall.Location\n    as LocationPoint;\n</pre>\n<p><strong>Answer:</strong> Whenever a Revit element location is more complex than a simple point or curve, its Location property will contain more complex internal data (or possibly nothing at all) that currently cannot be represented by the Revit API.\n\n<p>In the case of a FaceWall, it is obvious that no simple point or curve would accurately represent the wall location.\n\n<p>In such cases, another option to determine a location for this kind of object is to analyse its geometry and use the information that provides.\n\n\n<a name=\"4\"></a>\n<h4>Autodesk OrgOrgChart</h4>\n<p>For something completely different, here is an interesting graphical representation of the organisational changes Autodesk has been through in the last couple of years.</p>\n<p>The OrgOrgChart (Organic Organization Chart) project looks at the evolution of a company structure over time.\nA snapshot of the Autodesk organizational hierarchy was taken each day between May 2007 and June 2011:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/mkJ-Uy5dt5g\" width=\"420\"></iframe>\n<p>This representation is reminiscent of the Disk Tree visualization technique developed at Xerox Parc\n(Chi E.H., S.K. Card, 1999,\n<a href=\"http://www-users.cs.umn.edu/~echi/papers/infovis99/chi-wavs.pdf\">Sensemaking of Evolving Web Sites Using Visualization Spreadsheets</a>,\n<i>Proceedings of the Symposium on Information Visualization (InfoVis '99)</i>, pp. 18-25),\nshowing implicit and explicit affinities among information items and revealing relationships that are difficult to discover in traditional representations.\nProximity or connections between items can reveal complex relationships in a comprehensive way, provide visual access to data structures, and enable detection of tendencies or patterns in the process.\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0876_facewall_create",
    "header_text": "Inaccessible Location Property",
    "local_header_href": "#inaccessible-location-property",
    "chunk_text": "<h4>Inaccessible Location Property</h4><p><strong>Question:</strong> I tried to access the Location property of a FaceWall object.\n\n<p>However, nothing I tried leads to any useful result.\nIn the following code snippet, both theCurve and thePoint remain null:</p>\n<pre>\n  Reference r1 = doc.Selection.PickObject(\n    ObjectType.Element, \"Please pick a wall: \" );\n\n  Element e1 = doc.GetElement( r1 );\n\n  FaceWall faceWall = e1 as FaceWall;\n\n  LocationCurve theCurve = faceWall.Location\n    as LocationCurve;\n\n  LocationPoint thePoint = faceWall.Location\n    as LocationPoint;\n</pre>\n<p><strong>Answer:</strong> Whenever a Revit element location is more complex than a simple point or curve, its Location property will contain more complex internal data (or possibly nothing at all) that currently cannot be represented by the Revit API.\n\n<p>In the case of a FaceWall, it is obvious that no simple point or curve would accurately represent the wall location.\n\n<p>In such cases, another option to determine a location for this kind of object is to analyse its geometry and use the information that provides.\n\n\n<a name=\"4\"></a>\n<h4>Autodesk OrgOrgChart</h4>\n<p>For something completely different, here is an interesting graphical representation of the organisational changes Autodesk has been through in the last couple of years.</p>\n<p>The OrgOrgChart (Organic Organization Chart) project looks at the evolution of a company structure over time.\nA snapshot of the Autodesk organizational hierarchy was taken each day between May 2007 and June 2011:</p>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/mkJ-Uy5dt5g\" width=\"420\"></iframe>\n<p>This representation is reminiscent of the Disk Tree visualization technique developed at Xerox Parc\n(Chi E.H., S.K. Card, 1999,\n<a href=\"http://www-users.cs.umn.edu/~echi/papers/infovis99/chi-wavs.pdf\">Sensemaking of Evolving Web Sites Using Visualization Spreadsheets</a>,\n<i>Proceedings of the Symposium on Information Visualization (InfoVis '99)</i>, pp. 18-25),\nshowing implicit and explicit affinities among information items and revealing relationships that are difficult to discover in traditional representations.\nProximity or connections between items can reveal complex relationships in a comprehensive way, provide visual access to data structures, and enable detection of tendencies or patterns in the process.\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0876_facewall_create",
    "header_text": "Autodesk OrgOrgChart",
    "local_header_href": "#autodesk-orgorgchart",
    "chunk_text": "<h4>Autodesk OrgOrgChart</h4><p>For something completely different, here is an interesting graphical representation of the organisational changes Autodesk has been through in the last couple of years.</p><p>The OrgOrgChart (Organic Organization Chart) project looks at the evolution of a company structure over time.\nA snapshot of the Autodesk organizational hierarchy was taken each day between May 2007 and June 2011:</p><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/mkJ-Uy5dt5g\" width=\"420\"></iframe><p>This representation is reminiscent of the Disk Tree visualization technique developed at Xerox Parc\n(Chi E.H., S.K. Card, 1999,\n<a href=\"http://www-users.cs.umn.edu/~echi/papers/infovis99/chi-wavs.pdf\">Sensemaking of Evolving Web Sites Using Visualization Spreadsheets</a>,\n<i>Proceedings of the Symposium on Information Visualization (InfoVis '99)</i>, pp. 18-25),\nshowing implicit and explicit affinities among information items and revealing relationships that are difficult to discover in traditional representations.\nProximity or connections between items can reveal complex relationships in a comprehensive way, provide visual access to data structures, and enable detection of tendencies or patterns in the process.\n</p>"
  }
]