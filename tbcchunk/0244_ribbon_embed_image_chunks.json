[
  {
    "original_filename": "0244_ribbon_embed_image",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0244_ribbon_embed_image",
    "header_text": "Ribbon Embed Image",
    "local_header_href": "#ribbon-embed-image",
    "chunk_text": "<h3>Ribbon Embed Image</h3><p>Previous posts discussed the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/revit-2010-ribbon-api.html\">\nRevit 2010 Ribbon API</a>,\n\nthe associated Ribbon SDK Ribbon sample, and my use of it for the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/mep-sample-ribbon-panel.html\">\nMEP sample ribbon panel</a>.\n\nKrispy5 very friendlily posted a series of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/mep-sample-ribbon-panel.html#comment-6a00e553e1689788330120a6a18e08970c\">\ncomments</a> to \n\nthe latter describing a detailed solution to embed the images used in the ribbon buttons into the Revit external application executable assembly.\nI implemented a sample application RibbonEmbedImage to make Krispy's solution more readable and readily available.\nThis sample is obviously less a demonstration of any Revit API functionality; \nrather it shows how to make use of Visual Studio and the .NET framework to handle bitmaps as embedded resources.\n\n<p><a href=\"zip/RibbonEmbedImage.zip\">\nRibbonEmbedImage</a> implements the following:\n\n<ul>\n<li>An embedded bitmap resource with its build action set to 'Embedded Resource'.\n<li>Krispy's method GetEmbeddedImage to read the embedded bitmap resource and return a BitmapSource instance.\n<li>A method AddRibbonPanel to create a custom ribbon panel labelled \"Ribbon Embed Image\" containing a push button labelled \"Hello\" and displaying the embedded resource bitmap as its image.\n<li>An external application calling AddRibbonPanel in its OnStartup method.\n<li>An external command implementing a trivial Execute method which is invoked by the Hello button.\n</li></li></li></li></li></ul>\n<p>This is what the resulting custom ribbon panel looks like when I drag it off the ribbon to a free floating state:</p>\n<center>\n<img alt=\"RibbonEmbedImage sample custom ribbon panel\" src=\"img/RibbonEmbedImage.png\"/>\n</center>\n<p>Let's look at the source code of the items mentioned above one by one.\nThere is no code to display for the bitmap, but as said, it needs to have its build action set to 'Embedded Resource'.\n\n<p>Here are the namespaces we make use of:\n\n<pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> System.IO;\n<span class=\"blue\">using</span> System.Reflection;\n<span class=\"blue\">using</span> System.Windows.Media.Imaging;\n<span class=\"blue\">using</span> Autodesk.Revit;\n</pre>\n<p>Besides the standard references to System and RevitAPI, these will require references to the following assemblies:\n\n<ul>\n<li>PresentationCore\n<li>WindowsBase\n</li></li></ul>\n<p>The application defines its own namespace RibbonEmbedImage, and within it two classes named App and Command, i.e. the following global source code structure:\n\n<pre class=\"code\">\n<span class=\"blue\">namespace</span> RibbonEmbedImage\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">App</span> : <span class=\"teal\">IExternalApplication</span>\n  {\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n  }\n}\n</pre>\n<p>Within the App class, we first of all define a constant message to be used as the ribbon panel button tooltip \nand displayed by the external command invoked by the button:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">const</span> <span class=\"blue\">string</span> Message =\n  <span class=\"maroon\">\"Ribbon Embed Image says 'Hello world'\"</span>\n  + <span class=\"maroon\">\" via an embedded bitmap resource.\"</span>;\n</pre>\n<p>Then we add the definition of Krispy's method GetEmbeddedImage to read the embedded bitmap resource and return a BitmapSource instance:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"teal\">BitmapSource</span> GetEmbeddedImage( <span class=\"blue\">string</span> name )\n{\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">Assembly</span> a = <span class=\"teal\">Assembly</span>.GetExecutingAssembly();\n    <span class=\"teal\">Stream</span> s = a.GetManifestResourceStream( name );\n    <span class=\"blue\">return</span> <span class=\"teal\">BitmapFrame</span>.Create( s );\n  }\n  <span class=\"blue\">catch</span>\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n}\n</pre>\n<p>It extracts a bitmap resource embedded within the executing assembly and returns a corresponding BitmapSource object.\nThe 'name' argument is the fully qualified resource name, i.e. includes the application namespace etc.\n\n<p>Next comes the AddRibbonPanel method which creates a custom ribbon panel labelled \"Ribbon Embed Image\" containing a push button labelled \"Hello\" and displaying the embedded resource bitmap as its image:\n\n<pre class=\"code\">\n<span class=\"blue\">static</span> <span class=\"blue\">void</span> AddRibbonPanel(\n  <span class=\"teal\">ControlledApplication</span> a )\n{\n  <span class=\"blue\">string</span> path = <span class=\"teal\">Assembly</span>.GetExecutingAssembly().Location;\n \n  <span class=\"teal\">PushButtonData</span> data = <span class=\"blue\">new</span> <span class=\"teal\">PushButtonData</span>(\n    <span class=\"maroon\">\"Hello\"</span>, <span class=\"maroon\">\"Hello\"</span>, path, <span class=\"maroon\">\"RibbonEmbedImage.Command\"</span> );\n \n  <span class=\"teal\">BitmapSource</span> bitmap = GetEmbeddedImage( \n    <span class=\"maroon\">\"RibbonEmbedImage.Bitmap1.bmp\"</span> );\n \n  data.Image = bitmap;\n  data.LargeImage = bitmap;\n  data.ToolTip = Message;\n \n  <span class=\"teal\">RibbonPanel</span> panel = a.CreateRibbonPanel(\n    <span class=\"maroon\">\"Ribbon Embed Image\"</span> );\n \n  <span class=\"teal\">RibbonItem</span> item = panel.AddButton( data );\n}\n</pre>\n<p>The only remaining part of the external application class is the implementation of the required interface methods and the call to AddRibbonPanel in the OnStartup method:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">IExternalApplication</span>.<span class=\"teal\">Result</span> OnStartup( \n  <span class=\"teal\">ControlledApplication</span> a )\n{\n  AddRibbonPanel( a );\n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalApplication</span>.<span class=\"teal\">Result</span>.Succeeded;\n}\n \n<span class=\"blue\">public</span> <span class=\"teal\">IExternalApplication</span>.<span class=\"teal\">Result</span> OnShutdown(\n  <span class=\"teal\">ControlledApplication</span> a )\n{\n  <span class=\"blue\">return</span> <span class=\"teal\">IExternalApplication</span>.<span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>All that is needed for the external command is the implementation of the required interface, i.e. the Execute method.\nIt reuses the application class Message constant and simply passes it back as a warning message to Revit:\n\n<pre class=\"code\">\n    <span class=\"blue\">public</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span> Execute( \n      <span class=\"teal\">ExternalCommandData</span> commandData, \n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message, \n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      message = <span class=\"teal\">App</span>.Message;\n      <span class=\"blue\">return</span> <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Failed;\n    }\n</pre>\n<p>Here is the complete \n\n<a href=\"zip/RibbonEmbedImage.zip\">\nRibbonEmbedImage</a> source code and Visual Studio solution.</p>\n<p>Many thanks to Krispy for providing this solution!\nI hope it will prove useful to everybody needing bitmaps or any other resources in a Revit plug-in, whether it be for ribbon panel buttons or other purposes. \n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]