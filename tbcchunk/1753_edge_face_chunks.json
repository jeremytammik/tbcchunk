[
  {
    "original_filename": "1753_edge_face",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n\n</head>\n\n<!---\n\n- HOK Mission Control .NET\n  https://github.com/HOKGroup/HOK-Revit-Addins/tree/master/HOK.MissionControl\n  archi-lab\n  [playing with Power Shell commands and Post Build events](http://archi-lab.net/playing-with-power-shell-commands-and-post-build-events)\n  BY KONRAD K SOBON\n\n  [code signing of your revit plug-ins](http://archi-lab.net/code-signing-of-your-revit-plug-ins)\n\n- create connectors on reference line\n  https://forums.autodesk.com/t5/revit-api-forum/creating-connectors-on-reference-line/m-p/8707761\n  \ntwitter:\n\nSecret reference line faces in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/reflinefaces\n\nThe open source space around the Revit API is continuously growing richer, solutions are shared and exciting discoveries are made, both in\nthe Revit API discussion forum and elsewhere\n&ndash; Debugging, code signing and HOK Mission Control\n&ndash; Creating connectors on a reference line...\n\nlinkedin:\n\nSecret reference line faces in the #RevitAPI\n\nhttp://bit.ly/reflinefaces\n\nThe open source space around the Revit API is continuously growing richer, solutions are shared and exciting discoveries are made, both in\nthe Revit API discussion forum and elsewhere:\n\n- Debugging, code signing and HOK Mission Control\n- Creating connectors on a reference line...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\n-->"
  },
  {
    "original_filename": "1753_edge_face",
    "header_text": "Secret Reference Line Faces",
    "local_header_href": "#secret-reference-line-faces",
    "chunk_text": "### Secret Reference Line Faces\n\nThe open source space around the Revit API is continuously growing richer, solutions are shared and exciting discoveries are made, both in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) and elsewhere:\n\n- [Debugging, code signing and HOK Mission Control](#2)\n- [Creating connectors on a reference line](#3)"
  },
  {
    "original_filename": "1753_edge_face",
    "header_text": "Debugging, Code Signing and HOK Mission Control",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Debugging, Code Signing and HOK Mission Control\n\nYesterday I happened to notice a tweet\nby Konrad Sobon, [@arch_laboratory](https://twitter.com/arch_laboratory), pointing\nout a couple of exciting blog posts\non [archi+lab](http://archi-lab.net), e.g.:\n\n- [Debugging Revit add-ins](http://archi-lab.net/debugging-revit-add-ins)\n- [Code signing of your Revit plug-ins](http://archi-lab.net/code-signing-of-your-revit-plug-ins)\n- [Playing with Power Shell commands and Post Build events](http://archi-lab.net/playing-with-power-shell-commands-and-post-build-events)\n\nThe latter one discusses some aspects of\nthe [Mission Control repository](https://github.com/HOKGroup/HOK-Revit-Addins/tree/master/HOK.MissionControl) and\nmaking it easier to pull, build, and deploy.\n\nIn fact, it is worth while taking a look at all\nthe open source [HOK Revit Addins](https://github.com/HOKGroup/HOK-Revit-Addins).\n\nThis is all very exciting stuff indeed.\n\nBrowsing further, I also discovered that Konrad just started\nthe [next chapter](http://archi-lab.net/next-chapter) of his career.\n\nCongratulations, Konrad!\n\nThe best of luck to you, and have fun!"
  },
  {
    "original_filename": "1753_edge_face",
    "header_text": "Creating Connectors on a Reference Line",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Creating Connectors on a Reference Line\n\n[MarryTookMyCoffe](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/3894260) points\nout a surprising and useful possibility \nfor [creating connectors on a reference line](https://forums.autodesk.com/t5/revit-api-forum/creating-connectors-on-reference-line/m-p/8707761):\n\nI made some tests and thought I will share my results with the forum:\n\nThe problem with putting connectors on a reference line is that the API doesnâ€™t give us any references to any surfaces, no matter for what view we ask.\n\nThere is however a way to get around this one by adding a secret suffix to the unique id and calling the `ParseFromStableRepresentation` method on it:\n\n<pre>\n  Reference.ParseFromStableRepresentation(\n    document, uniqueID );\n</pre>\n\nWith the right secret suffix, this can be used to retrieve a reference to a face on the reference line.\n\nWith lots of trial and error, we learned that the codes for specific faces will be always the same:\n\n<center>\n<img src=\"img/create_connector_on_reference_line.png\" alt=\"Creating connectors on a reference line\" width=\"770\">\n</center>\n\nFor example, let's look at this stable representation:\n\n<pre>\n  3ded2a48-367f-42c7-83bd-9fd4f659891a-00000fd0:2\n</pre>\n\nHere is a table summarising the possible secret suffixes:\n\n<table>\n<tr><td style=\"text-align: right\">3ded2a48-367f-42c7-83bd&nbsp;&nbsp;&nbsp;<br/>-9fd4f659891a-00000fd0&nbsp;&nbsp;&nbsp;</td><td>The Reference Line<br/>unique id</td></tr>\n<tr><td style=\"text-align: right\">:0&nbsp;&nbsp;&nbsp;</td><td>ref to line</td></tr>\n<tr><td style=\"text-align: right\">:1&nbsp;&nbsp;&nbsp;</td><td>ref to solid</td></tr>\n<tr><td style=\"text-align: right\">:2&nbsp;&nbsp;&nbsp;</td><td>ref to face</td></tr>\n<tr><td style=\"text-align: right\">:7&nbsp;&nbsp;&nbsp;</td><td>ref to face</td></tr>\n<tr><td style=\"text-align: right\">:12&nbsp;&nbsp;&nbsp;</td><td>ref to face</td></tr>\n<tr><td style=\"text-align: right\">:17&nbsp;&nbsp;&nbsp;</td><td>ref to face</td></tr>\n</table>\n\nThe gaps between the numbers may seems strange, but I think that after every face, we have hidden edges of this face; what would explain the numeration.\n\n[Q] Does that apply to each and every reference line?\n\n[A] Yes, it applies to every reference line, always the same numbers.\n\n[Q] So each reference line implicitly defines a solid and four faces?\n\n[A] Faces are in the solid, but yes.\n\n[Q] What solid is that?\n\n[A] Similar to an extrusion, you can get a solid of the object with faces and lines, with the only difference that its faces don't have references. I guess the programmer forgot to set up this property.\n\n[Q] Can you share a concrete use case for this?\n\n[A] I use reference line with connectors in all fittings and accessories; that enables my family definition to work with minimal graphics. That way, you can easily define a family with low details (that is important in GB) and high details (that is important in Russia), without messing up how they work.\n\nI plan to go even further and implement an auto-creation tool for fittings, accessories, and mechanical equipment. \n\nThe idea was to add to any family made on the market the same functionality that our families have &ndash; all you have to do is set length and type of connection, like: thread, pressed, etc.\n\nVery many thanks to MarryTookMyCoffe for discovering and sharing this valuable insight!\n\n<center>\n<i>once downhill, once uphill, but always on foot.</i>\n</center>"
  }
]