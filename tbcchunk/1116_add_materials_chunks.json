[
  {
    "original_filename": "1116_add_materials",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1116_add_materials",
    "header_text": "Adding New Materials from List Updated",
    "local_header_href": "#adding-new-materials-from-list-updated",
    "chunk_text": "<h3>Adding New Materials from List Updated</h3><p>Back in the year 2010, I discussed a simple little system based on a Revit add-in named AddMaterials to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/add-new-materials-from-list.html#2\">\ngenerate new materials in a Revit project</a> based\n\non a list of required material properties stored in an Excel spreadsheet.</p><p>The input data includes:</p><ul>\n<li>Material Name</li>\n<ul>\n<li>Code</li>\n<li>Title</li>\n<li>Strength</li>\n</ul>\n\n<li>Graphics</li>\n<ul>\n<li>RGB colour values</li>\n<li>Transparency</li>\n<li>Surface pattern</li>\n<li>Cut pattern</li>\n</ul>\n\n<li>Identity\n<ul>\n<li>Filter criteria</li>\n<li>Descriptive information</li>\n<li>Custom parameters</li>\n</ul>\n</li>\n</ul><p>All the further workflow details are described in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/add-new-materials-from-list.html#2\">\noriginal post</a>,\n\nof course.</p><p>The add-in was implemented for Revit 2011, and quite a bit of the required Revit API functionality has changed since then, so an update of this system seems in order.</p><p>Here are some of the things that have changed:</p><ol>\n<li>The document Settings class no longer provides the Materials and FillPatterns properties.</li>\n<li>The Color class constructor requires RGB arguments.</li>\n<li>The Material class SurfacePattern and CutPattern properties have been replaced by properties taking element ids.</li>\n</ol><p>These changes, that accumulated over three major releases of the Revit API, can be rather baffling for an API newbie.</p><p>Here are the methods I used to update to the Revit 2014 API functionality:</p><ol>\n<li>Use filtered element collectors to access the document materials and fill patterns, and LINQ to generate dictionaries mapping the element names to instances.</li>\n<li>Provide RGB arguments to the Color constructor.</li>\n<li>Set the material surface and cut patterns using element ids.</li>\n</ol><p>At the same time, I took this opportunity to clean up the code a bit, e.g. by eliminating global variables and removing unnecessary casts.</p><p>Here is the complete updated implementation of the AddMaterials add-in for Revit 2014:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Linq;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Excel = Microsoft.Office.Interop.Excel;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> AddMaterials\n{\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"blue\">static</span> <span class=\"blue\">string</span> PluralSuffix( <span class=\"blue\">int</span> i )\n    {\n      <span class=\"blue\">return</span> 1 == i ? <span class=\"maroon\">\"\"</span> : <span class=\"maroon\">\"s\"</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"green\">// Create dictionary of existing </span>\n      <span class=\"green\">// materials keyed by their name.</span>\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">Material</span>&gt; materials\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">Material</span> ) )\n          .Cast&lt;<span class=\"teal\">Material</span>&gt;()\n          .ToDictionary&lt;<span class=\"teal\">Material</span>, <span class=\"blue\">string</span>&gt;(\n            e =&gt; e.Name );\n \n      <span class=\"green\">// Ditto for fill patterns.</span>\n \n      <span class=\"teal\">Dictionary</span>&lt;<span class=\"blue\">string</span>, <span class=\"teal\">FillPatternElement</span>&gt; fillPatterns\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FillPatternElement</span> ) )\n          .Cast&lt;<span class=\"teal\">FillPatternElement</span>&gt;()\n          .ToDictionary&lt;<span class=\"teal\">FillPatternElement</span>, <span class=\"blue\">string</span>&gt;(\n            e =&gt; e.Name );\n \n      <span class=\"blue\">try</span>\n      {\n        Excel.<span class=\"teal\">Application</span> excel\n          = <span class=\"blue\">new</span> Excel.<span class=\"teal\">Application</span>();\n \n        excel.Visible = <span class=\"blue\">false</span>;\n \n        <span class=\"blue\">string</span> filename = <span class=\"maroon\">\"C:/RevitAPI/MaterialList.xlsx\"</span>;\n \n        Excel.<span class=\"teal\">Workbook</span> workbook = excel.Workbooks.Open(\n          filename, 0, <span class=\"blue\">true</span>, 5, <span class=\"maroon\">\"\"</span>, <span class=\"maroon\">\"\"</span>, <span class=\"blue\">true</span>,\n          Excel.<span class=\"teal\">XlPlatform</span>.xlWindows, <span class=\"maroon\">\"\\t\"</span>, <span class=\"blue\">false</span>,\n          <span class=\"blue\">false</span>, 0, <span class=\"blue\">true</span>, 1, 0 );\n \n        Excel.<span class=\"teal\">Worksheet</span> worksheet = (Excel.<span class=\"teal\">Worksheet</span>)\n          workbook.Worksheets.get_Item( 1 );\n \n        Excel.<span class=\"teal\">Range</span> range = worksheet.UsedRange;\n \n        <span class=\"blue\">int</span> nRows = 0;\n        <span class=\"blue\">int</span> nMaterialAdded = 0;\n \n        <span class=\"blue\">int</span> iRow = 5;\n \n        <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n        {\n          tx.Start( <span class=\"maroon\">\"Add Materials\"</span> );\n \n          <span class=\"blue\">while</span>( <span class=\"blue\">null</span> != range.Cells[iRow, 1].Value2 )\n          {\n            <span class=\"blue\">string</span> matName = (<span class=\"blue\">string</span>) range.Cells[iRow, 1].Value2;\n            matName += <span class=\"maroon\">\" \"</span> + (<span class=\"blue\">string</span>) range.Cells[iRow, 2].Value2;\n            matName += <span class=\"maroon\">\" \"</span> + (<span class=\"blue\">string</span>) range.Cells[iRow, 3].Value2;\n \n            <span class=\"blue\">if</span>( matName != <span class=\"blue\">null</span> )\n            {\n              <span class=\"blue\">double</span> red = (<span class=\"blue\">double</span>) range.Cells[iRow, 4].Value2;\n              <span class=\"blue\">double</span> green = (<span class=\"blue\">double</span>) range.Cells[iRow, 5].Value2;\n              <span class=\"blue\">double</span> blue = (<span class=\"blue\">double</span>) range.Cells[iRow, 6].Value2;\n              <span class=\"blue\">double</span> transparency = (<span class=\"blue\">double</span>) range.Cells[iRow, 8].Value2;\n              <span class=\"blue\">string</span> surPattern = (<span class=\"blue\">string</span>) range.Cells[iRow, 9].Value2;\n              <span class=\"blue\">string</span> cutPattern = (<span class=\"blue\">string</span>) range.Cells[iRow, 10].Value2;\n \n              <span class=\"green\">// Identity data of material class to duplicate</span>\n \n              <span class=\"blue\">string</span> CSI = (<span class=\"blue\">string</span>) range.Cells[iRow, 11].Value2;\n \n              <span class=\"blue\">if</span>( materials.ContainsKey( CSI ) )\n              {\n                <span class=\"teal\">Material</span> materialCSI = materials[CSI];\n \n                <span class=\"teal\">Material</span> myMaterial\n                  = materialCSI.Duplicate( matName );\n \n                <span class=\"teal\">Color</span> matColor = <span class=\"blue\">new</span> <span class=\"teal\">Color</span>(\n                  <span class=\"teal\">Byte</span>.Parse( red.ToString() ),\n                  <span class=\"teal\">Byte</span>.Parse( green.ToString() ),\n                  <span class=\"teal\">Byte</span>.Parse( blue.ToString() ) );\n \n                myMaterial.Color = matColor;\n \n                myMaterial.Transparency\n                  = (<span class=\"blue\">int</span>) transparency;\n \n                myMaterial.SurfacePatternId\n                  = fillPatterns[surPattern].Id;\n \n                myMaterial.CutPatternId\n                  = fillPatterns[cutPattern].Id;\n \n                ++nMaterialAdded;\n              }\n            }\n            ++nRows;\n            ++iRow;\n          }\n          tx.Commit();\n        }\n \n        workbook.Close( <span class=\"blue\">true</span>, <span class=\"blue\">null</span>, <span class=\"blue\">null</span> );\n        excel.Quit();\n \n        <span class=\"teal\">TaskDialog</span>.Show(\n          <span class=\"maroon\">\"Revit AddMaterials\"</span>,\n          <span class=\"blue\">string</span>.Format(\n            <span class=\"maroon\">\"{0} row{1} successfully parsed and \"</span>\n            + <span class=\"maroon\">\"{0} material{1} added.\"</span>,\n            nRows, PluralSuffix( nRows ),\n            nMaterialAdded,\n            PluralSuffix( nMaterialAdded ) ) );\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n      {\n        message = <span class=\"maroon\">\"Revit AddMaterials Exception:\\n\"</span>\n          + ex.ToString();\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n    }\n  }\n}\n</pre><p>Note the nice use of the generic ToDictionary method to convert from a filtered element collector to a dictionary in one fell swoop.</p><p>For the complete source code, Visual Studio solution and add-in manifest, please refer to the\n\n<a href=\"https://github.com/jeremytammik/AddMaterials\">AddMaterials GitHub repository</a>.</p><p>The version discussed above is\n\n<a href=\"https://github.com/jeremytammik/AddMaterials/releases/tag/2014.0.0.0\">release 2014.0.0.0</a>.</p><p>I hope you find this useful and instructive.</p><p><strong>Addendum:</strong> This utility has been updated.\n\nPlease check out the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/03/adding-new-materials-from-list-updated-again.html\">\nenhancements in release 2014.0.0.1</a>.</p>"
  }
]