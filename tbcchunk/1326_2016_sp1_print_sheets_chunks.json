[
  {
    "original_filename": "1326_2016_sp1_print_sheets",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<!-- <script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>-->\n</head>"
  },
  {
    "original_filename": "1326_2016_sp1_print_sheets",
    "header_text": "Revit 2016 SP1 and Sheets Missing from Print Dialogue",
    "local_header_href": "#revit-2016-sp1-and-sheets-missing-from-print-dialogue",
    "chunk_text": "<h3>Revit 2016 SP1 and Sheets Missing from Print Dialogue</h3><p>Today, I can present the explanation and prophylactic measure required to prevent a problem of\n<a href=\"http://forums.augi.com/showthread.php?150007-Sheets-missing-from-print-dialogue\">\nsheets missing from print dialogue</a>.</p><p>It was only occasionally reported, and I finally heard about the fact and its resolution last week.</p><p>In brief, when creating sheets programmatically,\n<a href=\"#3\">only create one sheet per transaction</a>!</p><p>Before looking at that in more detail, I'll just mention that the\n<a href=\"#2\">Revit 2016 service pack 1</a> was\nautomatically installed for me when I started up Revit today.</p><p>First of all, though, here is my pre-full-moon photo of a huge ancient imposing\n<a href=\"https://en.wikipedia.org/wiki/Tilia\">\nlime tree with its perfect offspring</a> in the moonlight, taken while spending a beautiful starry night sleeping out under a pear tree last weekend:</p><center>\n<img alt=\"Ancient and young lime trees in moonshine\" src=\"file:////j/photo/jeremy/2015/2015-05-30_wiechs/195_linde_im_mondschein.jpg\" width=\"400\"/>\n</center><a name=\"2\"></a>"
  },
  {
    "original_filename": "1326_2016_sp1_print_sheets",
    "header_text": "Revit 2016 Service Pack 1",
    "local_header_href": "#revit-2016-service-pack-1",
    "chunk_text": "<h4>Revit 2016 Service Pack 1</h4><p>As said, when I started up Revit today, the Autodesk application manager automatically detected the need to update and installed\n<a href=\"http://knowledge.autodesk.com/support/revit-products/downloads/caas/downloads/content/autodesk-revit-2016-service-pack-1.html?v=2016\">\nRevit 2016 SP1 – Service Pack 1 for Autodesk Revit 2016</a> for\nme, released 2015-05-27.\nA full list of available updates can always be found on the\n<a href=\"http://knowledge.autodesk.com/support/revit-products/downloads\">Revit products download</a> page.</p><p>The\n<a href=\"http://revit.downloads.autodesk.com/download/2016RVT_SP1/Docs/RelNotes/AutodeskRevit2016-SP1ReleaseNotes.html\">\nSP1 release notes</a> list\nthe issues resolved.</p><p>This is the list of API related issues addressed:</p><ul>\n<li>An issue with the DimensionSegment.TextPostion API when handling a dimension with more than one segment.</li>\n<li>Ensure that third-party developers always have the correct value when using the public API to get the upper value or lower value of the conditions.</li>\n<li>An issue copying or mirroring an electrical circuit: ensure that wire types are correctly copied as part of the electrical system.</li>\n</ul><a name=\"3\"></a>"
  },
  {
    "original_filename": "1326_2016_sp1_print_sheets",
    "header_text": "Only Create One Sheet Per Transaction!",
    "local_header_href": "#only-create-one-sheet-per-transaction",
    "chunk_text": "<h4>Only Create One Sheet Per Transaction!</h4><p>Now, to address the main topic.</p><p>Last week, a strange issue related to sheets missing in the print dialogue came up:</p><p><strong>Question:</strong>\n\nThe majority of our sheets are not showing in the View/Sheet Set selector.\nI have tested the files in Revit 2014 and 2015 with the same result.</p><p>This is going to be a major issue for with our projects around 1000 sheets;\nprinting them one at a time is not going to go down well.</p><p>This issue has already been raised in the past:\n<a href=\"http://forums.augi.com/showthread.php?150007-Sheets-missing-from-print-dialogue\">\nsheets missing from print dialogue</a>.</p><p>Here is the view sheet set dialogue in a Revit file containing two sheets, but only one of them shows up:</p><center>\n<img alt=\"View sheet set dialogue\" src=\"img/view_sheet_set_dialogue.png\" width=\"400\"/>\n</center><p>According to the API, there is a CanBePrinted setting applied to sheets.</p><p>I would presume that this setting would be false, but it is true on both sheets, as per RevitLookup result.</p><p>I have run the following code across the file:</p><pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> viewsheet( <span class=\"teal\">UIDocument</span> uidoc )\n  {\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">FilteredElementCollector</span> filteredElementCollector\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n    filteredElementCollector.OfClass(\n      <span class=\"blue\">typeof</span>( <span class=\"teal\">ViewSheet</span> ) );\n \n    <span class=\"teal\">ViewSheetSetting</span> viewSheetSetting\n      = doc.PrintManager.ViewSheetSetting;\n \n    <span class=\"teal\">Transaction</span> tr = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc, <span class=\"maroon\">\"test\"</span> );\n    tr.Start();\n    <span class=\"blue\">try</span>\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewSheet</span> vs <span class=\"blue\">in</span> filteredElementCollector )\n      {\n        MessageBox.Show( vs.SheetNumber + <span class=\"maroon\">\" + \"</span>\n          + vs.CanBePrinted.ToString() );\n \n        viewSheetSetting.AvailableViews.Insert( vs );\n      }\n      tr.Commit();\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      MessageBox.Show( ex.ToString() );\n      tr.RollBack();\n    }\n    <span class=\"blue\">foreach</span>( Autodesk.Revit.DB.<span class=\"teal\">View</span> view <span class=\"blue\">in</span>\n      viewSheetSetting.AvailableViews )\n    {\n      MessageBox.Show( view.Name + <span class=\"maroon\">\" + \"</span>\n        + view.CanBePrinted.ToString() );\n    }\n  }\n</pre><p>It appears the sheet is not in the AvailableViews; I tried to add it to this set, but it is a read-only set.</p><p>The files and sheets it is affecting appear to be random.</p><p>It affects a large number of sheets now, which will take months to print individually.</p><p>In our smallest project with a few dozens of sheets, it would take more than half an hour to print manually sheet by sheet.</p><p>Our larger projects would take an entire week!</p><p>I was only using the API to test and see if there was a setting that controls their ability to be seen in the View/Sheet Set dialog, no more. This is not an API support request, unless this can be solved using the API, which I am unsure it can as you have confirmed the ViewSheetSetting.AvailableViews is read-only.</p><p>I assume that some non-API setting is responsible for this behaviour.</p><p>I am getting real pressure to resolve this.</p><p><strong>Answer:</strong>\n\nThe ViewSheetSetting.AvailableViews property is definitely read-only according to the Revit API documentation.</p><p>That means that you cannot change it by setting it to be a new collection.</p><p>That does not necessarily mean that you cannot modify the contents of the existing collections, though, which is what your sample code snippet is attempting to achieve.</p><p>I created an add-in to test your code in the model you provided.</p><p>By the way, your way to manage the transaction is not optimal. Encapsulating it within a using block is safer:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/using-using-automagically-disposes-and-rolls-back.html\">Using <code>using</code> automagically disposes and rolls back</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/11/handling-transaction-status-and-errors.html\">Handling transaction status and errors</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2015/02/using-transaction-groups.html\">Using transaction groups</a></li>\n</ul><p>Unfortunately, I cannot run your code, though.</p><p>When I try to access the doc.PrintManager.ViewSheetSetting property, it throws an exception saying 'this property is only available when user choose Select of Print Range':</p><center>\n<img alt=\"Exception accessing ViewSheetSetting property\" src=\"img/view_sheet_setting_exception.png\" width=\"417\"/>\n</center><p>Later: we seem to have heard about similar issues in the past, e.g.:</p><ul>\n<li>REVIT-53076 [Sheets are missing from print]</li>\n<li>REVIT-26814 [Sheets do not display in the Print/Export View/Sheet Set dialog]</li>\n<li>REVIT-68252 [sheets missing from print dialogue -- 10776470]</li>\n</ul><p>The files have minor corruption, in which sheet tracking lost several sheets.\nThey can be fixed manually.</p><p>Unfortunately, simply upgrading the model does not fix this issue.</p><p>In past, this kind of situation has come up when sheets were created by API add-ins such as\n<a href=\"http://www.rushforthprojects.com/Revit_To_Excel_and_Shared_Parameters_Tools_Download.html\">\nRushForth</a>.</p><p>Can you verify that a tool such as this was being used in this workflow?</p><p>If so, can the maker of the add-in be contacted?</p><p>After more analysis: similar problems occurred when users created sheets via API add-ins or macros and then the transaction that created the sheets was undone and redone.\nAfter this sequence of events, Revit will lose track of the IDs of the API-created sheets, and the UI for printing and exporting will fail to report them.</p><p><strong>Response:</strong>\n\nSome, but not all the sheets were created using an API tool that I developed.\nThere is only one way to create sheets within the API, is there not?\nI’m not sure if the API can be blamed, as there are also sheets that have not been created via the API that are affected.\nI tried to recreate this issue using the API with no luck.</p><p><strong>Answer:</strong>\n\nThere is no API way to fix file with these problems once the document is in this state.\nYou may be able to use the API to delete and recreate the fault sheets...</p><p>The bug is that we have an internal tracking system that is supposed to maintain accurate lists of sheets that are present in the document. The purpose is to have a quick lookup of sheet IDs without have having to iterate the whole document. The problem occurs if API is used to create batches of multiple sheets in 1 transaction, and then the user undoes and subsequently redoes the API transaction. Our undo/redo framework had an implicit assumption that only 1 sheet could be created in a transaction, and so the tracking system loses track of the remaining API-generated sheets.</p><p>API writers should change their code to create each new sheet in its own individual transaction.\nThis should work around the problem with API sheet creation and undo/redo.</p><p>Here is more info on how to write an updated API function that avoids the problem:</p><p><i>I tried updating the API Macro to create a batch of Sheet Placeholders and then convert the placeholders to true sheets.\nIf the placeholders and conversion all happen in 1 transaction (which is basically how the CreateSheets API is written), then the undo/redo bug still occurs.\nHowever, if the placeholders use one transaction and the conversion uses a second transaction, then there is no problem.</i></p><p>Here is rough VB sample API function that avoids the issue:</p><pre class=\"code\">\n  <span class=\"blue\">Public</span> <span class=\"blue\">Sub</span> TwoTrans_placeholderToReal(doc <span class=\"blue\">As</span> <span class=\"teal\">Document</span>)\n \n    <span class=\"blue\">Dim</span> fec <span class=\"blue\">As</span> <span class=\"teal\">FilteredElementCollector</span> =\n      <span class=\"blue\">New</span> <span class=\"teal\">FilteredElementCollector</span>(doc)\n \n    fec.OfCategory(<span class=\"teal\">BuiltInCategory</span>.OST_TitleBlocks)\n \n    <span class=\"blue\">Dim</span> NumSheets <span class=\"blue\">As</span> <span class=\"blue\">Integer</span> = 10\n    <span class=\"blue\">Dim</span> SheetsCreated(NumSheets) <span class=\"blue\">As</span> <span class=\"teal\">ViewSheet</span>\n \n    <span class=\"green\">'Dim SheetSubTransaction As Transaction</span>\n \n    <span class=\"blue\">Using</span> SheetSubTransaction <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n      SheetSubTransaction.Start(<span class=\"maroon\">\"Create Placeholders\"</span>)\n      <span class=\"blue\">For</span> ii = 1 <span class=\"blue\">To</span> NumSheets\n        SheetsCreated(ii) = <span class=\"teal\">ViewSheet</span>.CreatePlaceholder(doc)\n        SheetsCreated(ii).Name = <span class=\"maroon\">\"Sheet\"</span> &amp; ii <span class=\"green\">'NewSheetsToCreate.Name</span>\n        SheetsCreated(ii).SheetNumber = ii &amp; <span class=\"maroon\">\"Number\"</span> <span class=\"green\">'NewSheetsToCreate.Number</span>\n      <span class=\"blue\">Next</span>\n      SheetSubTransaction.Commit()\n    <span class=\"blue\">End</span> <span class=\"blue\">Using</span>\n \n    <span class=\"blue\">Using</span> ConvertPlaceholderTransaction <span class=\"blue\">As</span> <span class=\"blue\">New</span> <span class=\"teal\">Transaction</span>(doc)\n      ConvertPlaceholderTransaction.Start(<span class=\"maroon\">\"Convert to Real Sheets\"</span>)\n      <span class=\"blue\">For</span> ii = 1 <span class=\"blue\">To</span> NumSheets\n        SheetsCreated(ii).ConvertToRealSheet(fec.FirstElementId())\n      <span class=\"blue\">Next</span>\n      ConvertPlaceholderTransaction.Commit()\n    <span class=\"blue\">End</span> <span class=\"blue\">Using</span>\n \n  <span class=\"blue\">End</span> <span class=\"blue\">Sub</span>\n</pre><p>In summary, API writers should change their code to either:\n\n<ul>\n<li>Create each new sheet in its own individual transaction, or</li>\n<li>Create a batch of placeholder sheets in one transaction and then convert the placeholders to real sheets in a second transaction.</li>\n</ul>\n<p>Both approaches avoid the problem with API sheet creation and undo/redo.</p>\n<p>Dear Revit add-in developer, please take heed!</p>\n</p>"
  }
]