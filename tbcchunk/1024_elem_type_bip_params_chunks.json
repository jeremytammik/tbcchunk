[
  {
    "original_filename": "1024_elem_type_bip_params",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1024_elem_type_bip_params",
    "header_text": "10.000.000.000th Post and Element Type Parameters",
    "local_header_href": "#10000000000th-post-and-element-type-parameters",
    "chunk_text": "<h3>10.000.000.000th Post and Element Type Parameters</h3><p>This is the 1024th post on The Building Coder, just to top off our recent\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/happy-birthday-dear-building-coder.html\">\n5-year and 1000th post celebration</a>.</p><p>The decimal number 1024 equals 2^10, i.e. 10.000.000.000 in binary format, hence the large number of zeroes in the title  :-)</p><p>I am also still away on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/09/appstore-advice-and-zooming-in-a-preview-control.html#5\">\nvacation</a> and\n\nthis is the second post in my absence – or 10th, in binary format  :-) – dealing with\n\n<a href=\"#2\">retrieving ElementType parameters</a>, the\n<a href=\"#3\">ADN Xtra labs built-in parameter checker</a> and a\n<a href=\"#4\">BipChecker update for Revit 2014</a>.</p><p>Meanwhile, I hope you are enjoying the break as much as I am  :-)</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1024_elem_type_bip_params",
    "header_text": "Retrieving ElementType Parameters",
    "local_header_href": "#retrieving-elementtype-parameters",
    "chunk_text": "<h4>Retrieving ElementType Parameters</h4><p>I want to present a small enhancement to the built-in parameter checker included in the ADN Xtra labs.</p><p>The reason for looking at it again is to answer the following frequently recurring question:</p><p><strong>Question:</strong> I know how to retrieve the element properties form an object, e.g. a column instance, using the Element.Parameters collection.</p><p>However, how can I access the column type properties, please?</p><p><strong>Answer:</strong> For a given element E, you can ask for the element id of its type T by calling the GetTypeId method.\nPass that in to the document GetElement method, access the T object instance itself, and retrieve the Element.Parameters collection from that.\n\n\n<a name=\"3\"></a>\n<h4>The ADN Xtra Labs Built-in Parameter Checker</h4>\n<p>The ADN Xtra labs built-in parameter checker loops over all defined BuiltInParameter enumeration entries and checks to see whether a value can be retrieved for each of the corresponding parameters on a selected element.</p>\n<p>Please be aware that an enhanced version of this built-in parameter checker was published as a separate\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/unofficial-parameters-and-bipchecker.html\">\nBipChecker add-in</a> back\n\nin 2011.\nWe'll take another look at that below.</p>\n<p>The user is prompted to select an element using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pre-post-and-pick-select.html\">\nGetSingleSelectedElementOrPrompt</a> method,\n\nwhich supports all conceivable selection facilities, including:</p>\n<ul>\n<li>Pre-selection before launching the command.</li>\n<li>Post-selection after launching the command.</li>\n<li>Entering a numeric element id to select an invisible element.</li>\n</ul>\n<p>It achieves this by presenting a small prompt message:</p>\n<center>\n<img alt=\"Element selection prompt\" src=\"img/bip_select_msg.png\"/>\n</center>\n<p>The prompt is obviously only displayed if no pre-selection was made.</p>\n<p>The code also initialises the isSymbol flag to false:</p>\n<pre class=\"code\">\n  <span class=\"teal\">Element</span> e\n    = <span class=\"teal\">LabUtils</span>.GetSingleSelectedElementOrPrompt(\n      uidoc );\n \n  <span class=\"blue\">bool</span> isSymbol = <span class=\"blue\">false</span>;\n</pre>\n<p>The previous code was implemented before the introduction of the Element.GetTypeId method, so it just checked for a family instance like this:</p>\n<pre class=\"code\">\n  <span class=\"green\">//</span>\n  <span class=\"green\">// for a family instance, ask user whether to </span>\n  <span class=\"green\">// display instance or type parameters;</span>\n  <span class=\"green\">// in a similar manner, we could add dedicated </span>\n  <span class=\"green\">// switches for Wall --&gt; WallType,</span>\n  <span class=\"green\">// Floor --&gt; FloorType etc. ...</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n  {\n    <span class=\"teal\">FamilyInstance</span> inst = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != inst.Symbol )\n    {\n      <span class=\"blue\">string</span> symbol_name\n        = <span class=\"teal\">LabUtils</span>.ElementDescription(\n          inst.Symbol, <span class=\"blue\">true</span> );\n \n      <span class=\"blue\">string</span> family_name\n        = <span class=\"teal\">LabUtils</span>.ElementDescription(\n          inst.Symbol.Family, <span class=\"blue\">true</span> );\n \n      <span class=\"blue\">string</span> msg =\n      <span class=\"maroon\">\"This element is a family instance, so it \"</span>\n      + <span class=\"maroon\">\"has both type and instance parameters. \"</span>\n      + <span class=\"maroon\">\"By default, the instance parameters are \"</span>\n      + <span class=\"maroon\">\"displayed. If you select 'No', the type \"</span>\n      + <span class=\"maroon\">\"parameters will be displayed instead. \"</span>\n      + <span class=\"maroon\">\"Would you like to see the instance \"</span>\n      + <span class=\"maroon\">\"parameters?\"</span>;\n \n      <span class=\"blue\">if</span>( !<span class=\"teal\">LabUtils</span>.QuestionMsg( msg ) )\n      {\n        e = inst.Symbol;\n        isSymbol = <span class=\"blue\">true</span>;\n      }\n    }\n  }\n</pre>\n<p>I updated the code to be more generic and handle all kinds of element type relationships by checking whether the GetTypeId method returns a valid element type id like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">ElementId</span> idType = e.GetTypeId();\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">ElementId</span>.InvalidElementId != idType )\n  {\n    <span class=\"green\">// The selected element has a type; ask user </span>\n    <span class=\"green\">// whether to display instance or type </span>\n    <span class=\"green\">// parameters.</span>\n \n    <span class=\"teal\">ElementType</span> typ = doc.GetElement( idType )\n      <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != typ,\n      <span class=\"maroon\">\"expected to retrieve a valid element type\"</span> );\n \n    <span class=\"blue\">string</span> type_name = <span class=\"teal\">LabUtils</span>.ElementDescription(\n      typ, <span class=\"blue\">true</span> );\n \n    <span class=\"blue\">string</span> msg =\n      <span class=\"maroon\">\"This element has an ElementType, so it has \"</span>\n      + <span class=\"maroon\">\"both type and instance parameters. By \"</span>\n      + <span class=\"maroon\">\"default, the instance parameters are \"</span>\n      + <span class=\"maroon\">\"displayed. If you select 'No', the type \"</span>\n      + <span class=\"maroon\">\"parameters will be displayed instead. \"</span>\n      + <span class=\"maroon\">\"Would you like to see the instance \"</span>\n      + <span class=\"maroon\">\"parameters?\"</span>;\n \n    <span class=\"blue\">if</span>( !<span class=\"teal\">LabUtils</span>.QuestionMsg( msg ) )\n    {\n      e = typ;\n      isSymbol = <span class=\"blue\">true</span>;\n    }\n  }\n</pre>\n<p>If an element that has a valid type assigned to it is selected, e.g. a wall, the code detects this and prompts the user to choose whether to display its instance or type properties:</p>\n<center>\n<img alt=\"Element type message\" src=\"img/bip_element_type_msg.png\"/>\n</center>\n<p>If instance properties are chosen, the following list of parameters on the wall itself is displayed:</p>\n<center>\n<img alt=\"List of instance parameters\" src=\"img/bip_instance_params.png\"/>\n</center>\n<p>If type properties are chosen, the parameters are retrieved from the wall type instead:</p>\n<center>\n<img alt=\"List of element type parameters\" src=\"img/bip_type_params.png\"/>\n</center>\n<p>Here is\n\n<a href=\"zip/adn_labs_2014_3.zip\">\nversion 2014.0.0.3</a> of\n\nthe ADN Training Labs for Revit 2014 including the updated built-in parameter checker.</p>\n<a name=\"4\"></a>\n<h4>BipChecker Update for Revit 2014</h4>\n<p>I went on planning to implement the same enhancement in the stand-alone BipChecker add-in, only to discover two things:</p>\n<ol>\n<li>It has not been updated since its original publication in the year 2011, for Revit 2012.</li>\n<li>It has already implemented a more sophisticated check than the one I describe above.</li>\n</ol>\n<p>To see the more sophisticated check for various kinds of element types implemented by BipChecker, please search for 'CanHaveTypeAssigned' in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/unofficial-parameters-and-bipchecker.html\">\ninitial BipChecker publication</a>.</p>\n<p>I updated it for Revit 2014, fixing some compilation errors and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/recursively-disable-architecture-mismatch-warning.html\">\ndisabling the architecture mismatch warning</a>;\n\nhere is\n\n<a href=\"zip/BipChecker_2014.zip\">BipChecker_2014.zip</a> containing the new version.</p>\n<p>Back to my vacation again...\nMeanwhile, I wish you a wonderful time as well!</p>\n</p>"
  },
  {
    "original_filename": "1024_elem_type_bip_params",
    "header_text": "The ADN Xtra Labs Built-in Parameter Checker",
    "local_header_href": "#the-adn-xtra-labs-built-in-parameter-checker",
    "chunk_text": "<h4>The ADN Xtra Labs Built-in Parameter Checker</h4><p>The ADN Xtra labs built-in parameter checker loops over all defined BuiltInParameter enumeration entries and checks to see whether a value can be retrieved for each of the corresponding parameters on a selected element.</p><p>Please be aware that an enhanced version of this built-in parameter checker was published as a separate\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/unofficial-parameters-and-bipchecker.html\">\nBipChecker add-in</a> back\n\nin 2011.\nWe'll take another look at that below.</p><p>The user is prompted to select an element using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pre-post-and-pick-select.html\">\nGetSingleSelectedElementOrPrompt</a> method,\n\nwhich supports all conceivable selection facilities, including:</p><ul>\n<li>Pre-selection before launching the command.</li>\n<li>Post-selection after launching the command.</li>\n<li>Entering a numeric element id to select an invisible element.</li>\n</ul><p>It achieves this by presenting a small prompt message:</p><center>\n<img alt=\"Element selection prompt\" src=\"img/bip_select_msg.png\"/>\n</center><p>The prompt is obviously only displayed if no pre-selection was made.</p><p>The code also initialises the isSymbol flag to false:</p><pre class=\"code\">\n  <span class=\"teal\">Element</span> e\n    = <span class=\"teal\">LabUtils</span>.GetSingleSelectedElementOrPrompt(\n      uidoc );\n \n  <span class=\"blue\">bool</span> isSymbol = <span class=\"blue\">false</span>;\n</pre><p>The previous code was implemented before the introduction of the Element.GetTypeId method, so it just checked for a family instance like this:</p><pre class=\"code\">\n  <span class=\"green\">//</span>\n  <span class=\"green\">// for a family instance, ask user whether to </span>\n  <span class=\"green\">// display instance or type parameters;</span>\n  <span class=\"green\">// in a similar manner, we could add dedicated </span>\n  <span class=\"green\">// switches for Wall --&gt; WallType,</span>\n  <span class=\"green\">// Floor --&gt; FloorType etc. ...</span>\n  <span class=\"green\">//</span>\n  <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n  {\n    <span class=\"teal\">FamilyInstance</span> inst = e <span class=\"blue\">as</span> <span class=\"teal\">FamilyInstance</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != inst.Symbol )\n    {\n      <span class=\"blue\">string</span> symbol_name\n        = <span class=\"teal\">LabUtils</span>.ElementDescription(\n          inst.Symbol, <span class=\"blue\">true</span> );\n \n      <span class=\"blue\">string</span> family_name\n        = <span class=\"teal\">LabUtils</span>.ElementDescription(\n          inst.Symbol.Family, <span class=\"blue\">true</span> );\n \n      <span class=\"blue\">string</span> msg =\n      <span class=\"maroon\">\"This element is a family instance, so it \"</span>\n      + <span class=\"maroon\">\"has both type and instance parameters. \"</span>\n      + <span class=\"maroon\">\"By default, the instance parameters are \"</span>\n      + <span class=\"maroon\">\"displayed. If you select 'No', the type \"</span>\n      + <span class=\"maroon\">\"parameters will be displayed instead. \"</span>\n      + <span class=\"maroon\">\"Would you like to see the instance \"</span>\n      + <span class=\"maroon\">\"parameters?\"</span>;\n \n      <span class=\"blue\">if</span>( !<span class=\"teal\">LabUtils</span>.QuestionMsg( msg ) )\n      {\n        e = inst.Symbol;\n        isSymbol = <span class=\"blue\">true</span>;\n      }\n    }\n  }\n</pre><p>I updated the code to be more generic and handle all kinds of element type relationships by checking whether the GetTypeId method returns a valid element type id like this:</p><pre class=\"code\">\n  <span class=\"teal\">ElementId</span> idType = e.GetTypeId();\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">ElementId</span>.InvalidElementId != idType )\n  {\n    <span class=\"green\">// The selected element has a type; ask user </span>\n    <span class=\"green\">// whether to display instance or type </span>\n    <span class=\"green\">// parameters.</span>\n \n    <span class=\"teal\">ElementType</span> typ = doc.GetElement( idType )\n      <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n \n    <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != typ,\n      <span class=\"maroon\">\"expected to retrieve a valid element type\"</span> );\n \n    <span class=\"blue\">string</span> type_name = <span class=\"teal\">LabUtils</span>.ElementDescription(\n      typ, <span class=\"blue\">true</span> );\n \n    <span class=\"blue\">string</span> msg =\n      <span class=\"maroon\">\"This element has an ElementType, so it has \"</span>\n      + <span class=\"maroon\">\"both type and instance parameters. By \"</span>\n      + <span class=\"maroon\">\"default, the instance parameters are \"</span>\n      + <span class=\"maroon\">\"displayed. If you select 'No', the type \"</span>\n      + <span class=\"maroon\">\"parameters will be displayed instead. \"</span>\n      + <span class=\"maroon\">\"Would you like to see the instance \"</span>\n      + <span class=\"maroon\">\"parameters?\"</span>;\n \n    <span class=\"blue\">if</span>( !<span class=\"teal\">LabUtils</span>.QuestionMsg( msg ) )\n    {\n      e = typ;\n      isSymbol = <span class=\"blue\">true</span>;\n    }\n  }\n</pre><p>If an element that has a valid type assigned to it is selected, e.g. a wall, the code detects this and prompts the user to choose whether to display its instance or type properties:</p><center>\n<img alt=\"Element type message\" src=\"img/bip_element_type_msg.png\"/>\n</center><p>If instance properties are chosen, the following list of parameters on the wall itself is displayed:</p><center>\n<img alt=\"List of instance parameters\" src=\"img/bip_instance_params.png\"/>\n</center><p>If type properties are chosen, the parameters are retrieved from the wall type instead:</p><center>\n<img alt=\"List of element type parameters\" src=\"img/bip_type_params.png\"/>\n</center><p>Here is\n\n<a href=\"zip/adn_labs_2014_3.zip\">\nversion 2014.0.0.3</a> of\n\nthe ADN Training Labs for Revit 2014 including the updated built-in parameter checker.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1024_elem_type_bip_params",
    "header_text": "BipChecker Update for Revit 2014",
    "local_header_href": "#bipchecker-update-for-revit-2014",
    "chunk_text": "<h4>BipChecker Update for Revit 2014</h4><p>I went on planning to implement the same enhancement in the stand-alone BipChecker add-in, only to discover two things:</p><ol>\n<li>It has not been updated since its original publication in the year 2011, for Revit 2012.</li>\n<li>It has already implemented a more sophisticated check than the one I describe above.</li>\n</ol><p>To see the more sophisticated check for various kinds of element types implemented by BipChecker, please search for 'CanHaveTypeAssigned' in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/09/unofficial-parameters-and-bipchecker.html\">\ninitial BipChecker publication</a>.</p><p>I updated it for Revit 2014, fixing some compilation errors and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/recursively-disable-architecture-mismatch-warning.html\">\ndisabling the architecture mismatch warning</a>;\n\nhere is\n\n<a href=\"zip/BipChecker_2014.zip\">BipChecker_2014.zip</a> containing the new version.</p><p>Back to my vacation again...\nMeanwhile, I wish you a wonderful time as well!</p>"
  }
]