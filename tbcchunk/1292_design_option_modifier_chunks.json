[
  {
    "original_filename": "1292_design_option_modifier",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1292_design_option_modifier",
    "header_text": "List and Switch Design Options Using UI Automation",
    "local_header_href": "#list-and-switch-design-options-using-ui-automation",
    "chunk_text": "<h3>List and Switch Design Options Using UI Automation</h3><p>Yesterday, we discussed a Revit add-in using .NET UI Automation to retrieve the current state of the Revit thin lines setting.</p><p>Today, let's look at another application demonstrating use of that functionality to determine, list and set the Revit design options from a stand-alone executable application.</p><p>Once again, this sample is presented by\n\n<a href=\"http://forums.autodesk.com/t5/user/viewprofilepage/user-id/1103138\">Revitalizer</a>, aka\n\nRudolf Honke of <a href=\"http://www.acadgraph.de\">Mensch und Maschine acadGraph</a>,\n\nwho already contributed numerous other examples making use of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/automation\">\n.NET UI Automation library</a> to\n\nhack the Revit user interface.</p><p>Please note once again\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#4\">The Building Coder Disclaimer</a>:\n\nin the following, we present a going beyond the officially supported Revit API, leading to an experimental implementation suitable only for a personal controlled usage that should not be relied upon for production use.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1292_design_option_modifier",
    "header_text": "Revitalizer Implementation Notes",
    "local_header_href": "#revitalizer-implementation-notes",
    "chunk_text": "<h4>Revitalizer Implementation Notes</h4><p><strong>Rudolf says:</strong>\n\nHere is a tool for switching between DesignOptions.</p><p>This is a stand-alone application that gets and sets DesignOptions.</p><p>Since it works very, very slowly, it is not too useful for everyday professional work.</p><center>\n<img alt=\"DesignOptionModifier main form\" src=\"img/DesignOptionModifier_main_form.png\" width=\"269\"/>\n</center><p>It just reads and sets the ComboBox, but reading the items requires expanding them all first, which costs several seconds each time.</p><center>\n<img alt=\"Revit Design Option combo box\" src=\"img/DesignOptionModifier_revit.png\" width=\"678\"/>\n</center><p>To test it, just start a Revit project containing a few DesignOptions.</p><p>Then start the DesignOptionModifier program.</p><p>You can drive Revit from outside this way.</p><p>Please also note that DesignOption groups are displayed in the DesignOptionModifier program listbox as well.</p><p>As far as I know, there is no way to check if entries are greyed out in the Revit combobox.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1292_design_option_modifier",
    "header_text": "Sample Run",
    "local_header_href": "#sample-run",
    "chunk_text": "<h4>Sample Run</h4><p>This is a stand-alone executable application presenting one single Windows form.</p><p>It implements two buttons:</p><ul>\n<li>Retrieve the current design options defined in Revit.</li>\n<li>Set the current Revit design option to the selected list entry.</li>\n</ul><p>Here is an example of running it after starting up Revit, defining a couple of new design options and clicking the 'Get' button:</p><center>\n<img alt=\"DesignOptionModifier retrieving design options\" src=\"img/DesignOptionModifier_form_2.png\" width=\"256\"/>\n</center><p>After selecting the second entry and clicking 'Set', the selected entry is activated in Revit:</p><center>\n<img alt=\"DesignOptionModifier modified the  design option\" src=\"img/DesignOptionModifier_revit_2.png\" width=\"473\"/>\n</center><a name=\"4\"></a>"
  },
  {
    "original_filename": "1292_design_option_modifier",
    "header_text": "Implementation Notes",
    "local_header_href": "#implementation-notes",
    "chunk_text": "<h4>Implementation Notes</h4><p>The program mainline is trivial, because all action is implemented by the form implementation:</p><pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Windows.Forms;\n \n<span class=\"blue\">namespace</span> DesignOptionModifier\n{\n  <span class=\"blue\">static</span> <span class=\"blue\">class</span> <span class=\"teal\">Program</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Der Haupteinstiegspunkt für die Anwendung.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    [<span class=\"teal\">STAThread</span>]\n    <span class=\"blue\">static</span> <span class=\"blue\">void</span> Main()\n    {\n      <span class=\"teal\">Application</span>.EnableVisualStyles();\n      <span class=\"teal\">Application</span>.SetCompatibleTextRenderingDefault(<span class=\"blue\">false</span>);\n      <span class=\"teal\">Application</span>.Run(<span class=\"blue\">new</span> <span class=\"teal\">Form1</span>());\n    }\n  }\n}\n</pre><p>The form implementation demonstrates how to:</p><ul>\n<li>Use P/Invoke to access and make use of the Windows API functionality defined in User32.dll to find and enumerate specific windows.</li>\n<li>Find the design option combo box in the Revit main window status bar.</li>\n<li>Read the current design option from the Revit combo box.</li>\n<li>Update the value of the Revit combo box to modify the selected design option.</li>\n<li>Handle the form button clicks.</li>\n<li>Control the foreground window, etc.</li>\n</ul><p>Here is the form source code:</p><pre class=\"code\">\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.ComponentModel;\n<span class=\"blue\">using</span> System.Data;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> System.Drawing;\n<span class=\"blue\">using</span> System.Runtime.InteropServices;\n<span class=\"blue\">using</span> System.Text;\n<span class=\"blue\">using</span> System.Windows.Automation;\n<span class=\"blue\">using</span> System.Windows.Forms;\n<span class=\"blue\">using</span> System.Windows.Input;\n \n<span class=\"blue\">namespace</span> DesignOptionModifier\n{\n  <span class=\"blue\">public</span> <span class=\"blue\">partial</span> <span class=\"blue\">class</span> <span class=\"teal\">Form1</span> : <span class=\"teal\">Form</span>\n  {\n<span class=\"blue\">    #region</span> Windows API\n \n    [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"user32.dll\"</span> )]\n    [<span class=\"blue\">return</span>: <span class=\"teal\">MarshalAs</span>( <span class=\"teal\">UnmanagedType</span>.Bool )]\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">bool</span> SetForegroundWindow(\n      <span class=\"teal\">IntPtr</span> hWnd );\n \n    [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"user32.dll\"</span>, SetLastError = <span class=\"blue\">true</span>, CharSet = <span class=\"teal\">CharSet</span>.Auto )]\n    <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">int</span> GetWindowText(\n      <span class=\"teal\">IntPtr</span> hWnd, [<span class=\"teal\">Out</span>] <span class=\"teal\">StringBuilder</span> lpString,\n      <span class=\"blue\">int</span> nMaxCount );\n \n    [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"user32.dll\"</span>, SetLastError = <span class=\"blue\">true</span>, CharSet = <span class=\"teal\">CharSet</span>.Auto )]\n    <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">int</span> GetWindowTextLength(\n      <span class=\"teal\">IntPtr</span> hWnd );\n \n    [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"user32.dll\"</span> )]\n    [<span class=\"blue\">return</span>: <span class=\"teal\">MarshalAs</span>( <span class=\"teal\">UnmanagedType</span>.Bool )]\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">bool</span> EnumChildWindows(\n      <span class=\"teal\">IntPtr</span> window, <span class=\"teal\">EnumWindowProc</span> callback, <span class=\"teal\">IntPtr</span> i );\n \n    [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"user32.dll\"</span>, EntryPoint = <span class=\"maroon\">\"GetClassName\"</span> )]\n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">int</span> GetClass(\n      <span class=\"teal\">IntPtr</span> hWnd, <span class=\"teal\">StringBuilder</span> className, <span class=\"blue\">int</span> nMaxCount );\n \n    <span class=\"blue\">public</span> <span class=\"blue\">delegate</span> <span class=\"blue\">bool</span> <span class=\"teal\">EnumWindowProc</span>(\n      <span class=\"teal\">IntPtr</span> hWnd, <span class=\"teal\">IntPtr</span> parameter );\n \n    [<span class=\"teal\">DllImport</span>( <span class=\"maroon\">\"user32.dll\"</span>, SetLastError = <span class=\"blue\">true</span> )]\n    [<span class=\"blue\">return</span>: <span class=\"teal\">MarshalAs</span>( <span class=\"teal\">UnmanagedType</span>.Bool )]\n    <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">extern</span> <span class=\"blue\">bool</span> GetWindowRect(\n      <span class=\"teal\">IntPtr</span> hWnd, <span class=\"blue\">out</span> <span class=\"teal\">RECT</span> lpRect );\n \n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">string</span> GetText( <span class=\"teal\">IntPtr</span> hWnd )\n    {\n      <span class=\"blue\">int</span> length = GetWindowTextLength( hWnd );\n      <span class=\"teal\">StringBuilder</span> sb = <span class=\"blue\">new</span> <span class=\"teal\">StringBuilder</span>( length + 1 );\n      GetWindowText( hWnd, sb, sb.Capacity );\n      <span class=\"blue\">return</span> sb.ToString();\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> EnumWindow(\n      <span class=\"teal\">IntPtr</span> handle,\n      <span class=\"teal\">IntPtr</span> pointer )\n    {\n      <span class=\"teal\">GCHandle</span> gch = <span class=\"teal\">GCHandle</span>.FromIntPtr( pointer );\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">IntPtr</span>&gt; list = gch.Target <span class=\"blue\">as</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">IntPtr</span>&gt;;\n      <span class=\"blue\">if</span>( list != <span class=\"blue\">null</span> )\n      {\n        list.Add( handle );\n      }\n      <span class=\"blue\">return</span> <span class=\"blue\">true</span>;\n    }\n \n    <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">IntPtr</span>&gt; GetChildWindows(\n      <span class=\"teal\">IntPtr</span> parent )\n    {\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">IntPtr</span>&gt; result = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">IntPtr</span>&gt;();\n      <span class=\"teal\">GCHandle</span> listHandle = <span class=\"teal\">GCHandle</span>.Alloc( result );\n      <span class=\"blue\">try</span>\n      {\n        <span class=\"teal\">EnumWindowProc</span> childProc = <span class=\"blue\">new</span> <span class=\"teal\">EnumWindowProc</span>( EnumWindow );\n        EnumChildWindows( parent, childProc, <span class=\"teal\">GCHandle</span>.ToIntPtr( listHandle ) );\n      }\n      <span class=\"blue\">finally</span>\n      {\n        <span class=\"blue\">if</span>( listHandle.IsAllocated )\n          listHandle.Free();\n      }\n      <span class=\"blue\">return</span> result;\n    }\n \n    <span class=\"blue\">internal</span> <span class=\"blue\">struct</span> <span class=\"teal\">RECT</span>\n    {\n      <span class=\"blue\">public</span> <span class=\"blue\">int</span> Left;\n      <span class=\"blue\">public</span> <span class=\"blue\">int</span> Top;\n      <span class=\"blue\">public</span> <span class=\"blue\">int</span> Right;\n      <span class=\"blue\">public</span> <span class=\"blue\">int</span> Bottom;\n    }\n<span class=\"blue\">    #endregion</span>\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Cache combobox</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">private</span> <span class=\"teal\">AutomationElement</span> comboBoxElement = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">public</span> Form1()\n    {\n      InitializeComponent();\n \n      GetComboBox();\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> button_ok_Click(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">EventArgs</span> e )\n    {\n      Close();\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> GetComboBox()\n    {\n      <span class=\"blue\">int</span> maxX = -1;\n \n      <span class=\"teal\">Process</span>[] revits = <span class=\"teal\">Process</span>.GetProcessesByName(\n        <span class=\"maroon\">\"Revit\"</span> );\n \n      <span class=\"teal\">IntPtr</span> cb = <span class=\"teal\">IntPtr</span>.Zero;\n \n      <span class=\"blue\">if</span>( revits.Length &gt; 0 )\n      {\n        <span class=\"teal\">List</span>&lt;<span class=\"teal\">IntPtr</span>&gt; children = GetChildWindows(\n          revits[0].MainWindowHandle );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">IntPtr</span> child <span class=\"blue\">in</span> children )\n        {\n          <span class=\"teal\">StringBuilder</span> classNameBuffer\n            = <span class=\"blue\">new</span> <span class=\"teal\">StringBuilder</span>( 100 );\n \n          <span class=\"blue\">int</span> className = GetClass( child,\n            classNameBuffer, 100 );\n \n          <span class=\"blue\">if</span>( classNameBuffer.ToString().Contains(\n            <span class=\"maroon\">\"msctls_statusbar32\"</span> ) )\n          {\n            <span class=\"teal\">List</span>&lt;<span class=\"teal\">IntPtr</span>&gt; grandChildren\n              = GetChildWindows( child );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">IntPtr</span> grandChild <span class=\"blue\">in</span> grandChildren )\n            {\n              <span class=\"teal\">StringBuilder</span> classNameBuffer2\n                = <span class=\"blue\">new</span> <span class=\"teal\">StringBuilder</span>( 100 );\n \n              <span class=\"blue\">int</span> className2 = GetClass( grandChild,\n                classNameBuffer2, 100 );\n \n              <span class=\"blue\">if</span>( classNameBuffer2.ToString().Contains(\n                <span class=\"maroon\">\"ComboBox\"</span> ) )\n              {\n                <span class=\"teal\">RECT</span> r;\n \n                GetWindowRect( grandChild, <span class=\"blue\">out</span> r );\n \n                <span class=\"green\">// There are at least two comboboxes, </span>\n                <span class=\"green\">// and we want the rightmost one.</span>\n \n                <span class=\"blue\">if</span>( r.Left &gt; maxX )\n                {\n                  maxX = r.Left;\n                  cb = grandChild;\n                }\n              }\n            }\n          }\n        }\n      }\n \n      <span class=\"blue\">if</span>( cb != <span class=\"teal\">IntPtr</span>.Zero )\n      {\n        comboBoxElement = <span class=\"teal\">AutomationElement</span>.FromHandle(\n          cb );\n      }\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> buttonGet_Click(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">EventArgs</span> e )\n    {\n      <span class=\"blue\">if</span>( ( comboBoxElement != <span class=\"blue\">null</span> )\n        &amp;&amp; ( comboBoxElement.Current.IsEnabled ) )\n      {\n        <span class=\"teal\">ExpandCollapsePattern</span> expandPattern\n          = (<span class=\"teal\">ExpandCollapsePattern</span>) comboBoxElement\n            .GetCurrentPattern(\n              <span class=\"teal\">ExpandCollapsePattern</span>.Pattern );\n \n        expandPattern.Expand();\n \n        listBox1.Items.Clear();\n \n        <span class=\"teal\">CacheRequest</span> cacheRequest = <span class=\"blue\">new</span> <span class=\"teal\">CacheRequest</span>();\n        cacheRequest.Add( <span class=\"teal\">AutomationElement</span>.NameProperty );\n \n        cacheRequest.TreeScope = <span class=\"teal\">TreeScope</span>.Element\n          | <span class=\"teal\">TreeScope</span>.Children;\n \n        <span class=\"teal\">AutomationElement</span> comboboxItems = comboBoxElement\n          .GetUpdatedCache( cacheRequest );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> item\n          <span class=\"blue\">in</span> comboboxItems.CachedChildren )\n        {\n          <span class=\"blue\">if</span>( item.Current.Name == <span class=\"maroon\">\"\"</span> )\n          {\n            <span class=\"teal\">CacheRequest</span> cacheRequest2 = <span class=\"blue\">new</span> <span class=\"teal\">CacheRequest</span>();\n            cacheRequest2.Add( <span class=\"teal\">AutomationElement</span>.NameProperty );\n            cacheRequest2.TreeScope = <span class=\"teal\">TreeScope</span>.Element\n              | <span class=\"teal\">TreeScope</span>.Children;\n \n            <span class=\"teal\">AutomationElement</span> comboboxItems2\n              = item.GetUpdatedCache( cacheRequest );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> item2\n              <span class=\"blue\">in</span> comboboxItems2.CachedChildren )\n            {\n              listBox1.Items.Add( item2.Current.Name );\n            }\n          }\n        }\n        expandPattern.Collapse();\n      }\n      GetSelection();\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> GetSelection()\n    {\n      <span class=\"blue\">if</span>( ( comboBoxElement != <span class=\"blue\">null</span> )\n        &amp;&amp; ( comboBoxElement.Current.IsEnabled ) )\n      {\n        <span class=\"teal\">SelectionPattern</span> selPattern = comboBoxElement\n          .GetCurrentPattern( <span class=\"teal\">SelectionPattern</span>.Pattern )\n            <span class=\"blue\">as</span> <span class=\"teal\">SelectionPattern</span>;\n \n        <span class=\"teal\">AutomationElement</span>[] items = selPattern.Current\n          .GetSelection();\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> item <span class=\"blue\">in</span> items )\n        {\n          <span class=\"blue\">int</span> index = 0;\n \n          <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> listItem <span class=\"blue\">in</span> listBox1.Items )\n          {\n            <span class=\"blue\">if</span>( (<span class=\"blue\">string</span>) listItem == item.Current.Name )\n            {\n              listBox1.SelectedIndex = index;\n              <span class=\"blue\">break</span>;\n            }\n            index++;\n          }\n        }\n      }\n      SetForegroundWindow( <span class=\"blue\">this</span>.Handle );\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> SetSelection( <span class=\"blue\">string</span> option )\n    {\n      <span class=\"blue\">if</span>( ( comboBoxElement != <span class=\"blue\">null</span> )\n        &amp;&amp; ( comboBoxElement.Current.IsEnabled ) )\n      {\n        <span class=\"teal\">AutomationElement</span> sel = <span class=\"blue\">null</span>;\n \n        <span class=\"teal\">ExpandCollapsePattern</span> expandPattern\n          = (<span class=\"teal\">ExpandCollapsePattern</span>) comboBoxElement\n            .GetCurrentPattern(\n              <span class=\"teal\">ExpandCollapsePattern</span>.Pattern );\n \n        expandPattern.Expand();\n \n        <span class=\"teal\">CacheRequest</span> cacheRequest = <span class=\"blue\">new</span> <span class=\"teal\">CacheRequest</span>();\n        cacheRequest.Add( <span class=\"teal\">AutomationElement</span>.NameProperty );\n        cacheRequest.TreeScope = <span class=\"teal\">TreeScope</span>.Element\n          | <span class=\"teal\">TreeScope</span>.Children;\n \n        <span class=\"teal\">AutomationElement</span> comboboxItems\n          = comboBoxElement.GetUpdatedCache(\n            cacheRequest );\n \n        <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> item\n          <span class=\"blue\">in</span> comboboxItems.CachedChildren )\n        {\n          <span class=\"blue\">if</span>( item.Current.Name == <span class=\"maroon\">\"\"</span> )\n          {\n            <span class=\"teal\">CacheRequest</span> cacheRequest2 = <span class=\"blue\">new</span> <span class=\"teal\">CacheRequest</span>();\n            cacheRequest2.Add( <span class=\"teal\">AutomationElement</span>.NameProperty );\n            cacheRequest2.TreeScope = <span class=\"teal\">TreeScope</span>.Element\n              | <span class=\"teal\">TreeScope</span>.Children;\n \n            <span class=\"teal\">AutomationElement</span> comboboxItems2\n              = item.GetUpdatedCache( cacheRequest );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">AutomationElement</span> item2\n              <span class=\"blue\">in</span> comboboxItems2.CachedChildren )\n            {\n              <span class=\"blue\">if</span>( item2.Current.Name == option )\n              {\n                sel = item2;\n              }\n            }\n          }\n        }\n \n        <span class=\"blue\">if</span>( sel != <span class=\"blue\">null</span> )\n        {\n          <span class=\"teal\">SelectionItemPattern</span> select =\n            (<span class=\"teal\">SelectionItemPattern</span>) sel.GetCurrentPattern(\n              <span class=\"teal\">SelectionItemPattern</span>.Pattern );\n \n          select.Select();\n        }\n        expandPattern.Collapse();\n      }\n      SetForegroundWindow( <span class=\"blue\">this</span>.Handle );\n    }\n \n    <span class=\"blue\">private</span> <span class=\"blue\">void</span> buttonSet_Click(\n      <span class=\"blue\">object</span> sender,\n      <span class=\"teal\">EventArgs</span> e )\n    {\n      <span class=\"blue\">if</span>( listBox1.Items.Count &gt; 0\n        &amp;&amp; listBox1.SelectedIndex &gt; -1 )\n      {\n        <span class=\"blue\">string</span> option = (<span class=\"blue\">string</span>)\n          listBox1.Items[listBox1.SelectedIndex];\n \n        SetSelection( option );\n      }\n      SetForegroundWindow( <span class=\"blue\">this</span>.Handle );\n    }\n  }\n}\n</pre><a name=\"5\"></a>"
  },
  {
    "original_filename": "1292_design_option_modifier",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>The complete source code and Visual Studio solution are provided in the\n\n<a href=\"https://github.com/jeremytammik/DesignOptionModifier\">\nDesignOptionModifier GitHub repository</a>,\n\nand the version described here is\n\n<a href=\"https://github.com/jeremytammik/DesignOptionModifier/releases/tag/2015.0.0.0\">\nrelease 2015.0.0.0</a>.</p><p>As said, please be aware of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#4\">The Building Coder Disclaimer</a> before\n\nyou even dream of making use of this.</p><p>Many thanks to Rudi for his research and nice, clean implementation!</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1292_design_option_modifier",
    "header_text": "Dr. Nutt on the Harm Caused by Alcohol",
    "local_header_href": "#dr-nutt-on-the-harm-caused-by-alcohol",
    "chunk_text": "<h4>Dr. Nutt on the Harm Caused by Alcohol</h4><p>Before closing, let me add a note on something completely different.</p><p>I enjoy reading\n\n<a href=\"http://blog.dasmagazin.ch\">Das Magazin</a>,\n\na Saturday supplement to several major Swiss daily newspapers.</p><p>The current issue,\n\n<a href=\"http://blog.dasmagazin.ch/aktuelles_heft/10\">nr. 10, March 6, 2015</a>\n\n(<a href=\"http://blog.dasmagazin.ch/wp-content/uploads/2015/03/ma1510.pdf\">PDF</a>),\n\nincludes an interview with\n\n<a href=\"https://en.wikipedia.org/wiki/David_Nutt\">Dr. David Nutt</a> on\n\nthe harm caused by alcohol and other drugs and the legislation and politics we put in place to deal with it.</p><p>The succinct summary is surprising, funny and scary:</p><ul>\n<li>Alcohol causes more harm worldwide than any other known drug.</li>\n<li>The sport of horse riding is more dangerous than taking ecstasy.</li>\n<li>Some politicians deny rational analysis and science and refuse to work towards achieving the best for society and us citizens, putting higher priorities on other agenda.</li>\n</ul><p>As said, pretty scary and shocking stuff, especially the way we as a society and our politicians deal with the issue.</p>"
  }
]