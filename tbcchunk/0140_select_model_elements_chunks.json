[
  {
    "original_filename": "0140_select_model_elements",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0140_select_model_elements",
    "header_text": "Selecting Model Elements",
    "local_header_href": "#selecting-model-elements",
    "chunk_text": "<h3>Selecting Model Elements</h3><p>This morning I woke up really early.\nThe hotel clock was set incorrectly, so when I woke up and looked at it, I thought I was much too late for my meeting.\nI jumped out of bed, grabbed and packed all my things and ran out of the room to the lobby, where I noticed that it seemed rather quiet outside and the light was very soft and special in the early morning.\nUp here in the north it does get light very early, though.\nAt least I noticed my error before actually getting out into the street.\nNow I am unable to sleep, sitting in bed and writing this post.</p><p>The Revit API Introduction Lab 2-2 demonstrates how to select all model elements, i.e. elements which are visible on the graphics screen and represent physical parts in the building model.\n\nThis lab is part of the sample code used to explain the basics of programming Revit in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/revit-api-introduction-webcast.html\">\nRevit programming webcast</a>.\n\nWhen updating this code for Revit 2010, I noticed that one change has occurred in Revit which causes this command to return incorrect results.\n\nFirst let us have a look at the original version which worked properly in Revit 2009, and then discuss the changes I made for 2010.</p><p>In 2009, we used the following helper method to select all model elements:</p><pre class=\"code\">\npublic static ElementSet GetAllModelElements(\n  Application app )\n{\n  ElementSet elems = app.Create.NewElementSet();\n\n  Geo.Options opt = app.Create.NewGeometryOptions();\n\n  ElementIterator iter = app.ActiveDocument.Elements;\n  while( iter.MoveNext() )\n  {\n    Element e = iter.Current as Element;\n\n    if( !( e is Symbol || e is FamilyBase ) )\n    {\n      if( null != e.Category )\n      {\n        if( null != e.get_Geometry( opt ) )\n        {\n          elems.Insert( e );\n        }\n      }\n    }\n  }\n  return elems;\n}\n</pre><p>It iterates over all elements in the active document and checks their class, category and geometry content to select the model elements.\nThe selected elements are stored in a new element set, which is returned to the caller.</p><p>When asking the elements for their geometry, a geometry options instance must be provided.\nThis argument cannot be null.\nOtherwise, an exception will be thrown.\nHowever, its detail level property and other properties may be left uninitialized.\n\n<p>The iterator type can be specified as either ElementIterator or IEnumerator.\nThe iterator returned by the document Elements property is in fact an ElementIterator instance.\nThis class is derived from the IEnumerator interface, and we only make use of the base class functionality, so an IEnumerator instance could be used just as well.</p>\n<p>All the objects returned by the iterator are Autodesk.Revit.Element instances.\nIt would be nice to know that we only need to check for certain specific types of objects, derived from the Autodesk.Revit.Element class, for example FamilyInstance and HostObject classes.\nUnfortunately, some Revit building model objects such as stairs are still represented in the API using the generic Autodesk.Revit.Element class, so this is not possible.\nInstead, we use the inverse approach of eliminating certain element types which are <strong>not</strong> used for building model objects, namely the Symbol and FamilyBase classes.</p>\n<p>All building model objects have a valid category and non-empty geometry, so those properties can be used reliably.</p>\n<p>However, in Revit 2010, running the same code suddenly returns a number of unexpected objects, even in an empty model.</p>\n<h3>Legend Component Geometry</h3>\n<p>The reason for the change in behaviour in Revit 2010 is that legend component objects now also return geometry.\nSince they are represented by Autodesk.Revit.Element instances, are not Symbol or ElementBase instances, and also have a valid category, they pass all the filters applied above in spite of not being model objects.\nHere is a list of the legend component elements returned in Revit 2010 in an empty model (copy to an editor to see the full line length):</p>\n<pre>\nThere are 50 model elements:\n  Name=Basic Wall : Generic - 150mm (Floor Plan); Category=Legend Components; Id=137075\n  Name=Basic Wall : Interior - 138mm Partition (1-hr) (Floor Plan); Category=Legend Components; Id=137076\n  Name=Basic Wall : Exterior - Brick and Block on Mtl. Stud (Floor Plan); Category=Legend Components; Id=137077\n  Name=Basic Roof : Generic Roof - 300mm (Section); Category=Legend Components; Id=137078\n  Name=Basic Roof : Generic Roof - 750mm (Section); Category=Legend Components; Id=137079\n  Name=Basic Roof : Generic Roof - 500mm (Section); Category=Legend Components; Id=137080\n  Name=Floor : Generic Floor - 400mm (Section); Category=Legend Components; Id=137081\n  Name=Basic Ceiling : Generic (Section); Category=Legend Components; Id=137082\n  Name=Basic Wall : Generic - 200mm (Floor Plan); Category=Legend Components; Id=137083\n  Name=Basic Wall : Generic - 250mm (Floor Plan); Category=Legend Components; Id=137084\n  Name=Basic Wall : Generic - 300mm (Floor Plan); Category=Legend Components; Id=137085\n  Name=Basic Wall : Generic - 375mm (Floor Plan); Category=Legend Components; Id=137086\n  Name=Basic Wall : Generic - 300mm Masonry (Floor Plan); Category=Legend Components; Id=137087\n  Name=Basic Wall : Generic - 200mm CMU (Floor Plan); Category=Legend Components; Id=137088\n  Name=Basic Wall : Generic - 150mm Masonry (Floor Plan); Category=Legend Components; Id=137089\n  Name=Basic Wall : Exterior - EIFS on Mtl Stud (Floor Plan); Category=Legend Components; Id=137090\n  Name=Basic Wall : Generic - 90mm Brick (Floor Plan); Category=Legend Components; Id=137091\n  Name=Basic Wall : Interior - 79mm Partition (1-hr) (Floor Plan); Category=Legend Components; Id=137092\n  Name=Basic Wall : Interior - 123mm Partition (1-hr) (Floor Plan); Category=Legend Components; Id=137093\n  Name=Basic Wall : Interior - 135mm Partition (2-hr) (Floor Plan); Category=Legend Components; Id=137094\n  Name=Basic Wall : Interior - 126mm Partition (2-hr) (Floor Plan); Category=Legend Components; Id=137095\n  Name=Basic Wall : Exterior - Brick on CMU (Floor Plan); Category=Legend Components; Id=137096\n  Name=Curtain Wall (Floor Plan); Category=Legend Components; Id=137097\n  Name=Floor : Wood Joist 220mm - Wood Finish (Section); Category=Legend Components; Id=137098\n  Name=Floor : Steel Bar Joist - VCT on LW Concrete  (Section); Category=Legend Components; Id=137099\n  Name=Basic Roof : Wood Rafter 184mm - Asphalt Shingles (Section); Category=Legend Components; Id=137100\n  Name=Basic Roof : Steel Truss - Insulation on Metal Deck- EPDM (Section); Category=Legend Components; Id=137101\n  Name=Basic Wall : Foundation - 300mm Concrete (Floor Plan); Category=Legend Components; Id=137102\n  Name=Basic Wall : Retaining - 300mm Concrete (Floor Plan); Category=Legend Components; Id=137103\n  Name=Basic Wall : Generic - 200mm - Filled (Floor Plan); Category=Legend Components; Id=137104\n  Name=Basic Roof : Generic Roof - 300mm - Filled (Section); Category=Legend Components; Id=137105\n  Name=Floor : Generic Floor - 400mm - Filled (Section); Category=Legend Components; Id=137106\n  Name=Compound Ceiling : 600 x 1200mm grid (Section); Category=Legend Components; Id=137107\n  Name=Compound Ceiling : 600 x 600mm grid (Section); Category=Legend Components; Id=137108\n  Name=Compound Ceiling : GWB on Mtl Stud (Section); Category=Legend Components; Id=137109\n  Name=Roof Soffit : Generic - 300mm (Section); Category=Legend Components; Id=137110\n  Name=Curtain Wall : Exterior Glazing (Floor Plan); Category=Legend Components; Id=137111\n  Name=Curtain Wall : Storefront (Floor Plan); Category=Legend Components; Id=137112\n  Name=Basic Wall : Exterior - Brick on Mtl. Stud (Floor Plan); Category=Legend Components; Id=137113\n  Name=Stacked Wall : Exterior - Brick Over Block w Metal Stud (Floor Plan); Category=Legend Components; Id=137114\n  Name=Basic Wall : Exterior - Block on Mtl. Stud (Floor Plan); Category=Legend Components; Id=137115\n  Name=Foundation Slab : 150mm Foundation Slab (Section); Category=Legend Components; Id=137116\n  Name=; Category=Legend Components; Id=137117\n  Name=; Category=Legend Components; Id=137118\n  Name=; Category=Legend Components; Id=137119\n  Name=; Category=Legend Components; Id=137120\n  Name=; Category=Legend Components; Id=137121\n  Name=; Category=Legend Components; Id=137122\n  Name=; Category=Legend Components; Id=137123\n  Name=; Category=Legend Components; Id=137124\n</pre>\n<p>These legend components are the keepers of the images displayed in the type preview dialog.\nThe graphical previews are new in 2010 and so the presence of these elements is also new.\nThe exposure of their geometry to the API is not intentional and may be removed again in future.\nTheir only function is to create and hold that one image, and the user has no other way to interact with them.\n\n<p>How can we improve our filter to eliminate these unwanted elements?\n\n<p>Since the legend components have a valid category, we could simply add that additional criterion to the list of properties that we are checking, for instance like this:\n\n<pre class=\"code\">\nconst string _CategoryNameLegendComponents\n  = \"Legend Components\";\n\n  if( !(e is Symbol)\n    &amp;&amp; !(e is FamilyBase)\n    &amp;&amp; (null != e.Category)\n    &amp;&amp; (_CategoryNameLegendComponents != e.Category.Name)\n    &amp;&amp; (null != e.get_Geometry(opt)) )\n  {\n    // . . .\n  }\n</pre>\n<p>Instead of using a string comparison on the category name, we could also determine the element id of the legend component category and compare that with each candidate element id.\n\n<p>However, both of these options would add yet another item to an already lengthy list of checks.\n\n<p>A simpler option that seems to work well in the tests I have run so far is to skip checking the object type at all, and replacing it by requiring a valid level, like this:</p>\n<pre class=\"code\">\n  if( (null != e.Category)\n    &amp;&amp; (null != e.Level)\n    &amp;&amp; (null != e.get_Geometry(opt)) )\n</pre>\n<p>Besides being simpler and easier to understand, this check is probably also slightly more efficient.\nIt has not been extensively tested yet, so please let me know if you discover any situations in which it fails.\n\n<p>Here is the current version of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/rac_labs_20090518.zip\">\nRevit API introduction labs</a>,\n\nincluding the new version of Lab 2-2 to select all model elements using this criterion.\nThe labs are still in the process of being further updated and enhanced for the Revit 2010 API and its new features.\nAll of the labs are provided in two versions, one each for C# and VB.</p>\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0140_select_model_elements",
    "header_text": "Legend Component Geometry",
    "local_header_href": "#legend-component-geometry",
    "chunk_text": "<h3>Legend Component Geometry</h3><p>The reason for the change in behaviour in Revit 2010 is that legend component objects now also return geometry.\nSince they are represented by Autodesk.Revit.Element instances, are not Symbol or ElementBase instances, and also have a valid category, they pass all the filters applied above in spite of not being model objects.\nHere is a list of the legend component elements returned in Revit 2010 in an empty model (copy to an editor to see the full line length):</p><pre>\nThere are 50 model elements:\n  Name=Basic Wall : Generic - 150mm (Floor Plan); Category=Legend Components; Id=137075\n  Name=Basic Wall : Interior - 138mm Partition (1-hr) (Floor Plan); Category=Legend Components; Id=137076\n  Name=Basic Wall : Exterior - Brick and Block on Mtl. Stud (Floor Plan); Category=Legend Components; Id=137077\n  Name=Basic Roof : Generic Roof - 300mm (Section); Category=Legend Components; Id=137078\n  Name=Basic Roof : Generic Roof - 750mm (Section); Category=Legend Components; Id=137079\n  Name=Basic Roof : Generic Roof - 500mm (Section); Category=Legend Components; Id=137080\n  Name=Floor : Generic Floor - 400mm (Section); Category=Legend Components; Id=137081\n  Name=Basic Ceiling : Generic (Section); Category=Legend Components; Id=137082\n  Name=Basic Wall : Generic - 200mm (Floor Plan); Category=Legend Components; Id=137083\n  Name=Basic Wall : Generic - 250mm (Floor Plan); Category=Legend Components; Id=137084\n  Name=Basic Wall : Generic - 300mm (Floor Plan); Category=Legend Components; Id=137085\n  Name=Basic Wall : Generic - 375mm (Floor Plan); Category=Legend Components; Id=137086\n  Name=Basic Wall : Generic - 300mm Masonry (Floor Plan); Category=Legend Components; Id=137087\n  Name=Basic Wall : Generic - 200mm CMU (Floor Plan); Category=Legend Components; Id=137088\n  Name=Basic Wall : Generic - 150mm Masonry (Floor Plan); Category=Legend Components; Id=137089\n  Name=Basic Wall : Exterior - EIFS on Mtl Stud (Floor Plan); Category=Legend Components; Id=137090\n  Name=Basic Wall : Generic - 90mm Brick (Floor Plan); Category=Legend Components; Id=137091\n  Name=Basic Wall : Interior - 79mm Partition (1-hr) (Floor Plan); Category=Legend Components; Id=137092\n  Name=Basic Wall : Interior - 123mm Partition (1-hr) (Floor Plan); Category=Legend Components; Id=137093\n  Name=Basic Wall : Interior - 135mm Partition (2-hr) (Floor Plan); Category=Legend Components; Id=137094\n  Name=Basic Wall : Interior - 126mm Partition (2-hr) (Floor Plan); Category=Legend Components; Id=137095\n  Name=Basic Wall : Exterior - Brick on CMU (Floor Plan); Category=Legend Components; Id=137096\n  Name=Curtain Wall (Floor Plan); Category=Legend Components; Id=137097\n  Name=Floor : Wood Joist 220mm - Wood Finish (Section); Category=Legend Components; Id=137098\n  Name=Floor : Steel Bar Joist - VCT on LW Concrete  (Section); Category=Legend Components; Id=137099\n  Name=Basic Roof : Wood Rafter 184mm - Asphalt Shingles (Section); Category=Legend Components; Id=137100\n  Name=Basic Roof : Steel Truss - Insulation on Metal Deck- EPDM (Section); Category=Legend Components; Id=137101\n  Name=Basic Wall : Foundation - 300mm Concrete (Floor Plan); Category=Legend Components; Id=137102\n  Name=Basic Wall : Retaining - 300mm Concrete (Floor Plan); Category=Legend Components; Id=137103\n  Name=Basic Wall : Generic - 200mm - Filled (Floor Plan); Category=Legend Components; Id=137104\n  Name=Basic Roof : Generic Roof - 300mm - Filled (Section); Category=Legend Components; Id=137105\n  Name=Floor : Generic Floor - 400mm - Filled (Section); Category=Legend Components; Id=137106\n  Name=Compound Ceiling : 600 x 1200mm grid (Section); Category=Legend Components; Id=137107\n  Name=Compound Ceiling : 600 x 600mm grid (Section); Category=Legend Components; Id=137108\n  Name=Compound Ceiling : GWB on Mtl Stud (Section); Category=Legend Components; Id=137109\n  Name=Roof Soffit : Generic - 300mm (Section); Category=Legend Components; Id=137110\n  Name=Curtain Wall : Exterior Glazing (Floor Plan); Category=Legend Components; Id=137111\n  Name=Curtain Wall : Storefront (Floor Plan); Category=Legend Components; Id=137112\n  Name=Basic Wall : Exterior - Brick on Mtl. Stud (Floor Plan); Category=Legend Components; Id=137113\n  Name=Stacked Wall : Exterior - Brick Over Block w Metal Stud (Floor Plan); Category=Legend Components; Id=137114\n  Name=Basic Wall : Exterior - Block on Mtl. Stud (Floor Plan); Category=Legend Components; Id=137115\n  Name=Foundation Slab : 150mm Foundation Slab (Section); Category=Legend Components; Id=137116\n  Name=; Category=Legend Components; Id=137117\n  Name=; Category=Legend Components; Id=137118\n  Name=; Category=Legend Components; Id=137119\n  Name=; Category=Legend Components; Id=137120\n  Name=; Category=Legend Components; Id=137121\n  Name=; Category=Legend Components; Id=137122\n  Name=; Category=Legend Components; Id=137123\n  Name=; Category=Legend Components; Id=137124\n</pre><p>These legend components are the keepers of the images displayed in the type preview dialog.\nThe graphical previews are new in 2010 and so the presence of these elements is also new.\nThe exposure of their geometry to the API is not intentional and may be removed again in future.\nTheir only function is to create and hold that one image, and the user has no other way to interact with them.\n\n<p>How can we improve our filter to eliminate these unwanted elements?\n\n<p>Since the legend components have a valid category, we could simply add that additional criterion to the list of properties that we are checking, for instance like this:\n\n<pre class=\"code\">\nconst string _CategoryNameLegendComponents\n  = \"Legend Components\";\n\n  if( !(e is Symbol)\n    &amp;&amp; !(e is FamilyBase)\n    &amp;&amp; (null != e.Category)\n    &amp;&amp; (_CategoryNameLegendComponents != e.Category.Name)\n    &amp;&amp; (null != e.get_Geometry(opt)) )\n  {\n    // . . .\n  }\n</pre>\n<p>Instead of using a string comparison on the category name, we could also determine the element id of the legend component category and compare that with each candidate element id.\n\n<p>However, both of these options would add yet another item to an already lengthy list of checks.\n\n<p>A simpler option that seems to work well in the tests I have run so far is to skip checking the object type at all, and replacing it by requiring a valid level, like this:</p>\n<pre class=\"code\">\n  if( (null != e.Category)\n    &amp;&amp; (null != e.Level)\n    &amp;&amp; (null != e.get_Geometry(opt)) )\n</pre>\n<p>Besides being simpler and easier to understand, this check is probably also slightly more efficient.\nIt has not been extensively tested yet, so please let me know if you discover any situations in which it fails.\n\n<p>Here is the current version of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/rac_labs_20090518.zip\">\nRevit API introduction labs</a>,\n\nincluding the new version of Lab 2-2 to select all model elements using this criterion.\nThe labs are still in the process of being further updated and enhanced for the Revit 2010 API and its new features.\nAll of the labs are provided in two versions, one each for C# and VB.</p>\n</p></p></p></p></p></p>"
  }
]