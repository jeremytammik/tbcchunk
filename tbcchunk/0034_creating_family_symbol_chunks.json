[
  {
    "original_filename": "0034_creating_family_symbol",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0034_creating_family_symbol",
    "header_text": "Creating a new Family Symbol",
    "local_header_href": "#creating-a-new-family-symbol",
    "chunk_text": "<h3>Creating a new Family Symbol</h3><p>This post is due to Joe Ye in our Beijing office. Many thanks, Joe! While proof reading my handouts for the Revit API tips and tricks session at AU,\n\n<a href=\"http://au.autodesk.com/sessions/?speaker=Jeremy+Tammik&amp;year=2008\">\nDE205-3 Enhancing Your Revit Add-In</a>,\n\nJoe pointed out that creating a new type or family symbol is a hot topic often asked by developers.\nIt is not obvious from the Revit API help documentation or samples how to achieve this.\nIt is simple to solve, though: one can use the Duplicate() method to create a new type, and then modify the parameters or properties required.</p><p>Here is an example in VB duplicating a wall type by doubling the thickness of each layer in its compound layer structure:</p><pre class=\"code\">\n<span class=\"blue\">Public</span> <span class=\"blue\">Function</span> Execute( _\n  <span class=\"blue\">ByVal</span> commandData <span class=\"blue\">As</span> ExternalCommandData, _\n  <span class=\"blue\">ByRef</span> message <span class=\"blue\">As</span> <span class=\"blue\">String</span>, _\n  <span class=\"blue\">ByVal</span> elements <span class=\"blue\">As</span> ElementSet) _\n<span class=\"blue\">As</span> IExternalCommand.Result _\n<span class=\"blue\">Implements</span> IExternalCommand.Execute\n \n  <span class=\"blue\">Try</span>\n    <span class=\"blue\">Dim</span> app <span class=\"blue\">As</span> Application = commandData.Application\n    <span class=\"blue\">Dim</span> doc <span class=\"blue\">As</span> Document = app.ActiveDocument\n    <span class=\"blue\">Dim</span> els <span class=\"blue\">As</span> ElementSet = doc.Selection.Elements\n    <span class=\"blue\">Dim</span> e <span class=\"blue\">As</span> Element\n    <span class=\"blue\">Dim</span> newWallTypeName <span class=\"blue\">As</span> <span class=\"blue\">String</span> _\n      = <span class=\"maroon\">\"NewWallType_with_Width_doubled\"</span>\n \n    <span class=\"blue\">For</span> <span class=\"blue\">Each</span> e <span class=\"blue\">In</span> els\n      <span class=\"blue\">If</span> <span class=\"blue\">TypeOf</span> e <span class=\"blue\">Is</span> Wall <span class=\"blue\">Then</span>\n        <span class=\"blue\">Dim</span> wall <span class=\"blue\">As</span> Wall = e\n \n        <span class=\"blue\">Dim</span> wallType <span class=\"blue\">As</span> WallType\n        wallType = wall.WallType\n \n        <span class=\"blue\">Dim</span> newWallType <span class=\"blue\">As</span> WallType\n        newWallType = wallType.Duplicate(newWallTypeName)\n\n        <span class=\"blue\">Dim</span> layers <span class=\"blue\">As</span> CompoundStructureLayerArray\n        layers = newWallType.CompoundStructure.Layers\n \n        <span class=\"blue\">Dim</span> layer <span class=\"blue\">As</span> CompoundStructureLayer\n        <span class=\"blue\">For</span> <span class=\"blue\">Each</span> layer <span class=\"blue\">In</span> layers\n          layer.Thickness *= 2\n        <span class=\"blue\">Next</span>\n \n        wall.WallType = newWallType\n        <span class=\"blue\">Exit</span> <span class=\"blue\">For</span>\n      <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n    <span class=\"blue\">Next</span>\n \n    <span class=\"blue\">Return</span> IExternalCommand.Result.Succeeded\n\n  <span class=\"blue\">Catch</span> ex <span class=\"blue\">As</span> Exception\n    message = ex.ToString()\n    <span class=\"blue\">Return</span> IExternalCommand.Result.Failed\n  <span class=\"blue\">End</span> <span class=\"blue\">Try</span>\n\n<span class=\"blue\">End</span> <span class=\"blue\">Function</span>\n</pre><p>This command iterates over the currently selected elements. If a wall has been selected, its wall type is retrieved and duplicated to create a new wall type. In its compound layer structure, the thickness of every layer is doubled, and the new wall type is assigned to the selected wall. The command terminates as soon as the first selected wall has been processed.</p><p>Here is a different example in C# duplicating a column type, setting a new fixed value for its radius:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">CmdResult</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">Application</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n  <span class=\"blue\">string</span> familyName = <span class=\"maroon\">\"Concrete-Round-Column\"</span>;\n  <span class=\"teal\">Filter</span> f = app.Create.Filter.NewFamilyFilter(\n    familyName );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt; families = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt;();\n  doc.get_Elements( f, families );\n  <span class=\"blue\">if</span>( 1 &gt; families.Count )\n  {\n    message = <span class=\"maroon\">\"No suitable family found.\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n  }\n \n  <span class=\"teal\">Family</span> fam = families[0] <span class=\"blue\">as</span> <span class=\"teal\">Family</span>;\n  <span class=\"teal\">FamilySymbol</span> famSym = <span class=\"blue\">null</span>;\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> fs <span class=\"blue\">in</span> fam.Symbols )\n  {\n    famSym = fs;\n    <span class=\"blue\">break</span>;\n  }\n \n  <span class=\"green\">// create a new family symbol using Duplicate:</span>\n  <span class=\"blue\">string</span> newFamilyName = <span class=\"maroon\">\"NewRoundColumn 3\"</span>;\n  <span class=\"teal\">FamilySymbol</span> newFamSym = famSym.Duplicate(\n    newFamilyName ) <span class=\"blue\">as</span> <span class=\"teal\">FamilySymbol</span>;\n \n  <span class=\"green\">// set the radius to a new value:</span>\n  <span class=\"teal\">Parameter</span> par = newFamSym.get_Parameter( <span class=\"maroon\">\"b\"</span> );\n  par.Set( 3 );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Succeeded;\n}\n</pre>"
  }
]