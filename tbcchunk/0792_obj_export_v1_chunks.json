[
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "OBJ Model Exporter Take One",
    "local_header_href": "#obj-model-exporter-take-one",
    "chunk_text": "<h3>OBJ Model Exporter Take One</h3><p>Before continuing on the OBJ model exporter, I would like to mention I was finally up in the alps again for the first time in ages last weekend, to climb the \n\n<a href=\"http://en.wikipedia.org/wiki/Gl%C3%A4rnisch\">\nVrenelisgärtli</a> mountain in \n\n<a href=\"http://en.wikipedia.org/wiki/Canton_of_Glarus\">\nGlarus</a>, \"Verena's Little Garden\". \n\n<p>If you would like to skip straight to the meaty stuff, though, here is a table of contents:\n\n<ul>\n<li><a href=\"#2\">AEC DevCamp 2012 material finalised</a>\n<li><a href=\"#3\">Disk full</a>\n<li><a href=\"#4\">Model up to cloud and down to mobile</a>\n<li><a href=\"#5\">Face emitter interface</a>\n<li><a href=\"#6\">OBJ exporter implementation</a>\n<li><a href=\"#7\">Retrieving a solid from an element</a>\n<li><a href=\"#8\">Exporting an element</a>\n<li><a href=\"#9\">Exporting all collected elements</a>\n<li><a href=\"#10\">Exporter mainline</a>\n<li><a href=\"#11\">Export results</a>\n</li></li></li></li></li></li></li></li></li></li></ul>\n<p>The mountain name is shrouded in legend and presumably originated in the cooling down of the Little Ice Age. \nIn the summer of 2003, the firn fields, which can be seen from far away, became snow-free for the first time again since then.\nRight now they are covered again  :-)\n\n<p>The weather was fantastic on the summit, although it looked as if all the rest of the country including all other mountains were covered in clouds.\nHere is a view of the descent afterwards back down over the Glärnischfirn glacier\n\n(<a href=\"https://plus.google.com/photos/104316998805199988071/albums/5757979017881867041?authkey=CJjvrdzk5LCbwgE\">more photos</a>):</p>\n<center>\n<img alt=\"Jeremy descending Glärnisch glacier from Vrenelisgärtli\" src=\"file:////j/photo/jeremy/2012/2012-06-23_vrenelisgaertli/dscf5493_jeremy_walking_down_glacier_over_clouds.jpg\" width=\"400\"/>\n</center>\n<a name=\"2\"></a>\n<h4>AEC DevCamp 2012 Material Finalised</h4>\n<p>As Mikako Harada just \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/materials-from-aec-devcamp-2012.html\">\npointed out</a>,\n\nthe final version of the AEC DevCamp 2012 material is now available and has been relocated to its two final archival sites:\n\n<ul>\n<li>For ADN members: \n<a href=\"http://adn.autodesk.com\">ADN extranet</a> &gt; \n<a href=\"http://adn.autodesk.com/adn/servlet/index?siteID=4814862&amp;id=5105692\">Events</a> &gt; \n<a href=\"http://adn.autodesk.com/adn/servlet/item?siteID=4814862&amp;id=19908969\">Autodesk DevCamps 2012</a></li>\n<li>Public: \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_webcast_archive.php\">ADN Archive</a> &gt;\n<a href=\"http://download.autodesk.com/media/adn/Autodesk_AEC_DevCamp_2012.zip\">AEC DevCamp - June 6, 2012</a></li>\n</ul>\n<p>For more information on the content, please refer to \n\n<ul>\n<li>The <a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/aec-devcamp-2012-material.html\">overview of the five tracks and the classes in each</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-one.html\">Day one</a> of the Revit advanced track\n<li>Most of <a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html\">day two</a> of the Revit advanced track\n<li>The <a href=\"http://adndevblog.typepad.com/files/aec-devcamp-2012---list-of-classes-final2-1.pdf\">complete list of classes and course descriptions</a>\n</li></li></li></li></ul>\n<p>I hope you will find this material useful.  \n\n<p>Please note that the temporary DevCamp 2012 project site on Buzzsaw which was used during the event and up until now will be closed on July 2<sup>nd</sup>.\n\n<p>Once again, many thanks to all participants!\nIt was great to have you there and meet!\n\n\n\n<a name=\"3\"></a>\n<h4>Disk Full</h4>\n<p>Unfortunately, I spent much less time than expected on fun stuff, since almost all my time yesterday and this morning went to shuffling around gigabytes of files on my overfilled PC and external hard disk.\n\n<p>I was still using the Revit Quasar release preview, which suddenly stopped working.\nNo big surprise, of course.\n\n<p>To \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/migrate-building-coder-samples-to-revit-2013.html\">\nobtain a one-box version</a>, \n\nI went for the ultimate design suite, which requires downloading seven 4 GB files for a grand total of 27.3 GB.\nAfter finally creating enough space for them and freeing up as much as possible for installation, I launched the installer.\nIt took an hour or longer to just copy temporary files and then aborted with a disk full error before even starting the installation proper.\n\n<p>I just went out and bought a new and bigger external hard disk, and am still working at freeing up more space.\nVery time consuming business, this.\n\n<p>I later found two other helpful items which gave me another couple of gig:\n\n<ul>\n<li>\n<a href=\"http://www.ehow.com/how_5891038_delete-windows-installer-cache.html\">Delete the Windows installer cache</a>:\n<ol>\n<li>Open Disk Cleanup: Start &gt; Run &gt; cleanmgr &gt; OK. This will launch the Disk Cleanup utility.\n<li>Select 'Temporary Files', the Windows Installer cache directory. \n<li>Click OK.\n</li></li></li></ol>\n<li>\n<a href=\"http://www.ehow.com/how_12157017_clear-ccm-cache.html\">Clear the CCM cache</a>:\n<ol>\n<li>Select Start &gt; Settings &gt; Control Panel.\n<li>Double click 'Configuration Manager' and open the 'Advanced' tab.\n<li>Change the location of future cached files, if needed, by clicking the 'Change Location' button and choosing a new location on your hard drive. The default location is '%windir%\\system32\\CCM\\Cache.'\n<li>Delete all cached files in CCM by clicking the 'Delete Files' button. Press 'Yes' if asked to confirm.\n<li>Click 'OK' to save changes and exit the Advanced window.\n</li></li></li></li></li></ol>\n</li></li></ul>\n<p>I'm up to 44 GB free space now...\n\n<p>Meanwhile, I can talk about what I did for the OBJ exporter before uninstalling Quasar RP.\n\n\n<a name=\"4\"></a>\n<h4>Model up to Cloud and Down to Mobile</h4>\n<p>As I explained yesterday in the basic\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/getting-going-with-the-cloud.html\">\nRevit model export considerations</a>,\n\nthe purpose of this exercise is to push Revit model data up to the cloud and provide access to it from mobile devices.\n\n<p>Adam Nagy is also currently discussing a similar project on the AEC DevBlog.\nAfter presenting his\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-1.html\">\nRevit add-in to upload geometry data to a storage service</a>, \n\nthe second instalment discusses an\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-2.html\">\niOS application to download and display the data using OpenGL</a>.\n\n<p>One thing that I am thinking of doing is to define a flexible exporter architecture so that different export targets can easily be plugged in, for instance to switch between different file formats and disk-based versus cloud-based repositories.\n\n\n<a name=\"5\"></a>\n<h4>Face Emitter Interface</h4>\n<p>For the moment, I am working with the following pretty trivial interface definition which only specifies one single output method to export a Revit geometry face:\n\n<pre class=\"code\">\n<span class=\"blue\">interface</span> <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a face with a specified colour.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color );\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetFaceCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetTriangleCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final vertex count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetVertexCount();\n}\n</pre>\n<p>It also provides methods to query the number of exported faces and the resulting triangles and vertices when finished.\nI would have liked to define the count methods as simple properties instead, but that apparently cannot be done in an interface specification, unfortunately.\n\n\n<a name=\"6\"></a>\n<h4>OBJ Exporter Implementation</h4>\n<p>The OBJ exporter class implementing this interface makes use of the vertex lookup dictionaries that I discussed yesterday to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#5\">\neliminate duplicate vertices</a>.\n\nInitially I used the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#6\">\nXYZ-based lookup class</a>, and \n\nlater I switched to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#7\">\ninteger-based one</a> instead.\n\n<p>The exported implements the four methods required by the interface definition plus a fifth method to save the resulting file:\n\n<ul>\n<li>EmitFace: export a Revit geometry Face object.\n<li>GetFaceCount, GetTriangleCount, GetVertexCount: return object counts.\n<li>ExportTo: save the resulting OBJ file.\n</li></li></li></ul>\n<p>The helper method StoreTriangle is called by EmitFace to populate the vertex lookup dictionary and triangle list.\n\n<p>The helper methods EmitVertex and EmitFacet are called by ExportTo to write out the OBJ vertex and face records.\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ObjExporter</span> : <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"green\">//VertexLookupXyz _vertices;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of faces processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _faceCount;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _triangleCount;\n \n  <span class=\"blue\">public</span> ObjExporter()\n  {\n    _faceCount = 0;\n    _triangleCount = 0;\n    _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n    _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add the vertices of the given triangle to our</span>\n  <span class=\"gray\">///</span><span class=\"green\"> vertex lookup dictionary and emit a triangle.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle( <span class=\"teal\">MeshTriangle</span> triangle )\n  {\n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">XYZ</span> p = triangle.get_Vertex( i );\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p );\n      _triangles.Add( _vertices.AddVertex( q ) );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a Revit geometry Face object and </span>\n  <span class=\"gray\">///</span><span class=\"green\"> return the number of resulting triangles.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color )\n  {\n    ++_faceCount;\n \n    <span class=\"teal\">Mesh</span> mesh = face.Triangulate();\n \n    <span class=\"blue\">int</span> n = mesh.NumTriangles;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\" {0} mesh triangles\"</span>, n );\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n    {\n      ++_triangleCount;\n \n      <span class=\"teal\">MeshTriangle</span> t = mesh.get_Triangle( i );\n \n      StoreTriangle( t );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetFaceCount()\n  {\n    <span class=\"blue\">return</span> _faceCount;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetTriangleCount()\n  {\n    <span class=\"blue\">int</span> n = _triangles.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == n % 3,\n      <span class=\"maroon\">\"expected a multiple of 3\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( _triangleCount.Equals( n / 3 ),\n      <span class=\"maroon\">\"expected equal triangle count\"</span> );\n\n    <span class=\"blue\">return</span> _triangleCount;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetVertexCount()\n  {\n    <span class=\"blue\">return</span> _vertices.Count;\n  }\n \n<span class=\"blue\">  #region</span> ExportTo: output the OBJ file\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Obsolete: emit an XYZ vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex( <span class=\"teal\">StreamWriter</span> s, <span class=\"teal\">XYZ</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>,\n      <span class=\"teal\">Util</span>.RealString( p.X ),\n      <span class=\"teal\">Util</span>.RealString( p.Y ),\n      <span class=\"teal\">Util</span>.RealString( p.Z ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a vertex to OBJ. The first vertex listed </span>\n  <span class=\"gray\">///</span><span class=\"green\"> in the file has index 1, and subsequent ones</span>\n  <span class=\"gray\">///</span><span class=\"green\"> are numbered sequentially.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"teal\">PointInt</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>, p.X, p.Y, p.Z );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit an OBJ triangular face.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitFacet(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"blue\">int</span> i,\n    <span class=\"blue\">int</span> j,\n    <span class=\"blue\">int</span> k )\n  {\n    s.WriteLine( <span class=\"maroon\">\"f {0} {1} {2}\"</span>,\n      i + 1, j + 1, k + 1 );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ExportTo( <span class=\"blue\">string</span> path )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> key <span class=\"blue\">in</span> _vertices.Keys )\n      {\n        EmitVertex( s, key );\n      }\n \n      <span class=\"blue\">int</span> i = 0;\n      <span class=\"blue\">int</span> n = _triangles.Count;\n \n      <span class=\"blue\">while</span>( i &lt; n )\n      {\n        <span class=\"blue\">int</span> i1 = _triangles[i++];\n        <span class=\"blue\">int</span> i2 = _triangles[i++];\n        <span class=\"blue\">int</span> i3 = _triangles[i++];\n \n        EmitFacet( s, i1, i2, i3 );\n      }\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// ExportTo: output the OBJ file</span>\n}\n</pre>\n<p>The command mainline makes use of three other helper methods:\n\n<ul>\n<li>GetSolid: Retrieve the first non-empty solid found for a given element.\n<li>ExportElement: Export an individual element.\n<li>ExportElements: Export all elements retrieved by a filtered element collector.\n</li></li></li></ul>\n<a name=\"7\"></a>\n<h4>Retrieving a Solid from an Element</h4>\n<p>The GetSolid helper method retrieves the first non-empty solid found for a given element. \n\n<p>In case it is a family instance, it may have its own non-empty solid, in which case we use that. \nOtherwise we search the symbol geometry. \nIf we use the symbol geometry, we might have to keep track of the instance transform to map it to the actual instance project location. \nInstead, we ask for transformed geometry to be returned, so the resulting solid is already in place:\n\n<pre class=\"code\">\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      geo = geo.GetTransformed(\n        <span class=\"teal\">Transform</span>.Identity );\n    }\n \n    <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n    <span class=\"green\">//Transform t = Transform.Identity;</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"green\">//t = inst.Transform;</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"8\"></a>\n<h4>Exporting an Element</h4>\n<p>The ExportElement helper method exports a given element and returns the number of solids found and exported from it.\n\n<p>If the element is a group, this method is called recursively on the group members, so the return value may be greater than one:\n\n<pre class=\"code\">\n<span class=\"blue\">int</span> ExportElement(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Group</span> group = e <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != group )\n  {\n    <span class=\"blue\">int</span> n = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id \n      <span class=\"blue\">in</span> group.GetMemberIds() )\n    {\n      <span class=\"teal\">Element</span> e2 = e.Document.GetElement(\n        id );\n \n      n += ExportElement( emitter, e2, opt );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( e );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e.Category )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Element '{0}' has no \"</span>\n      + <span class=\"maroon\">\"category.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unable to access \"</span>\n      + <span class=\"maroon\">\"solid for element {0}.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Material</span> material;\n  <span class=\"teal\">Color</span> color;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n  {\n    material = e.Document.GetElement(\n      face.MaterialElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n    color = ( <span class=\"blue\">null</span> == material )\n      ? <span class=\"blue\">null</span>\n      : material.Color;\n \n    emitter.EmitFace( face, color );\n  }\n  <span class=\"blue\">return</span> 1;\n}\n</pre>\n<a name=\"9\"></a>\n<h4>Exporting all Collected Elements</h4>\n<p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "AEC DevCamp 2012 Material Finalised",
    "local_header_href": "#aec-devcamp-2012-material-finalised",
    "chunk_text": "<h4>AEC DevCamp 2012 Material Finalised</h4><p>As Mikako Harada just \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/materials-from-aec-devcamp-2012.html\">\npointed out</a>,\n\nthe final version of the AEC DevCamp 2012 material is now available and has been relocated to its two final archival sites:\n\n<ul>\n<li>For ADN members: \n<a href=\"http://adn.autodesk.com\">ADN extranet</a> &gt; \n<a href=\"http://adn.autodesk.com/adn/servlet/index?siteID=4814862&amp;id=5105692\">Events</a> &gt; \n<a href=\"http://adn.autodesk.com/adn/servlet/item?siteID=4814862&amp;id=19908969\">Autodesk DevCamps 2012</a></li>\n<li>Public: \n\n<a href=\"http://www.adskconsulting.com/adn/cs/api_course_webcast_archive.php\">ADN Archive</a> &gt;\n<a href=\"http://download.autodesk.com/media/adn/Autodesk_AEC_DevCamp_2012.zip\">AEC DevCamp - June 6, 2012</a></li>\n</ul>\n<p>For more information on the content, please refer to \n\n<ul>\n<li>The <a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/aec-devcamp-2012-material.html\">overview of the five tracks and the classes in each</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-one.html\">Day one</a> of the Revit advanced track\n<li>Most of <a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/devcamp-day-two.html\">day two</a> of the Revit advanced track\n<li>The <a href=\"http://adndevblog.typepad.com/files/aec-devcamp-2012---list-of-classes-final2-1.pdf\">complete list of classes and course descriptions</a>\n</li></li></li></li></ul>\n<p>I hope you will find this material useful.  \n\n<p>Please note that the temporary DevCamp 2012 project site on Buzzsaw which was used during the event and up until now will be closed on July 2<sup>nd</sup>.\n\n<p>Once again, many thanks to all participants!\nIt was great to have you there and meet!\n\n\n\n<a name=\"3\"></a>\n<h4>Disk Full</h4>\n<p>Unfortunately, I spent much less time than expected on fun stuff, since almost all my time yesterday and this morning went to shuffling around gigabytes of files on my overfilled PC and external hard disk.\n\n<p>I was still using the Revit Quasar release preview, which suddenly stopped working.\nNo big surprise, of course.\n\n<p>To \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/migrate-building-coder-samples-to-revit-2013.html\">\nobtain a one-box version</a>, \n\nI went for the ultimate design suite, which requires downloading seven 4 GB files for a grand total of 27.3 GB.\nAfter finally creating enough space for them and freeing up as much as possible for installation, I launched the installer.\nIt took an hour or longer to just copy temporary files and then aborted with a disk full error before even starting the installation proper.\n\n<p>I just went out and bought a new and bigger external hard disk, and am still working at freeing up more space.\nVery time consuming business, this.\n\n<p>I later found two other helpful items which gave me another couple of gig:\n\n<ul>\n<li>\n<a href=\"http://www.ehow.com/how_5891038_delete-windows-installer-cache.html\">Delete the Windows installer cache</a>:\n<ol>\n<li>Open Disk Cleanup: Start &gt; Run &gt; cleanmgr &gt; OK. This will launch the Disk Cleanup utility.\n<li>Select 'Temporary Files', the Windows Installer cache directory. \n<li>Click OK.\n</li></li></li></ol>\n<li>\n<a href=\"http://www.ehow.com/how_12157017_clear-ccm-cache.html\">Clear the CCM cache</a>:\n<ol>\n<li>Select Start &gt; Settings &gt; Control Panel.\n<li>Double click 'Configuration Manager' and open the 'Advanced' tab.\n<li>Change the location of future cached files, if needed, by clicking the 'Change Location' button and choosing a new location on your hard drive. The default location is '%windir%\\system32\\CCM\\Cache.'\n<li>Delete all cached files in CCM by clicking the 'Delete Files' button. Press 'Yes' if asked to confirm.\n<li>Click 'OK' to save changes and exit the Advanced window.\n</li></li></li></li></li></ol>\n</li></li></ul>\n<p>I'm up to 44 GB free space now...\n\n<p>Meanwhile, I can talk about what I did for the OBJ exporter before uninstalling Quasar RP.\n\n\n<a name=\"4\"></a>\n<h4>Model up to Cloud and Down to Mobile</h4>\n<p>As I explained yesterday in the basic\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/getting-going-with-the-cloud.html\">\nRevit model export considerations</a>,\n\nthe purpose of this exercise is to push Revit model data up to the cloud and provide access to it from mobile devices.\n\n<p>Adam Nagy is also currently discussing a similar project on the AEC DevBlog.\nAfter presenting his\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-1.html\">\nRevit add-in to upload geometry data to a storage service</a>, \n\nthe second instalment discusses an\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-2.html\">\niOS application to download and display the data using OpenGL</a>.\n\n<p>One thing that I am thinking of doing is to define a flexible exporter architecture so that different export targets can easily be plugged in, for instance to switch between different file formats and disk-based versus cloud-based repositories.\n\n\n<a name=\"5\"></a>\n<h4>Face Emitter Interface</h4>\n<p>For the moment, I am working with the following pretty trivial interface definition which only specifies one single output method to export a Revit geometry face:\n\n<pre class=\"code\">\n<span class=\"blue\">interface</span> <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a face with a specified colour.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color );\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetFaceCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetTriangleCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final vertex count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetVertexCount();\n}\n</pre>\n<p>It also provides methods to query the number of exported faces and the resulting triangles and vertices when finished.\nI would have liked to define the count methods as simple properties instead, but that apparently cannot be done in an interface specification, unfortunately.\n\n\n<a name=\"6\"></a>\n<h4>OBJ Exporter Implementation</h4>\n<p>The OBJ exporter class implementing this interface makes use of the vertex lookup dictionaries that I discussed yesterday to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#5\">\neliminate duplicate vertices</a>.\n\nInitially I used the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#6\">\nXYZ-based lookup class</a>, and \n\nlater I switched to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#7\">\ninteger-based one</a> instead.\n\n<p>The exported implements the four methods required by the interface definition plus a fifth method to save the resulting file:\n\n<ul>\n<li>EmitFace: export a Revit geometry Face object.\n<li>GetFaceCount, GetTriangleCount, GetVertexCount: return object counts.\n<li>ExportTo: save the resulting OBJ file.\n</li></li></li></ul>\n<p>The helper method StoreTriangle is called by EmitFace to populate the vertex lookup dictionary and triangle list.\n\n<p>The helper methods EmitVertex and EmitFacet are called by ExportTo to write out the OBJ vertex and face records.\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ObjExporter</span> : <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"green\">//VertexLookupXyz _vertices;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of faces processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _faceCount;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _triangleCount;\n \n  <span class=\"blue\">public</span> ObjExporter()\n  {\n    _faceCount = 0;\n    _triangleCount = 0;\n    _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n    _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add the vertices of the given triangle to our</span>\n  <span class=\"gray\">///</span><span class=\"green\"> vertex lookup dictionary and emit a triangle.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle( <span class=\"teal\">MeshTriangle</span> triangle )\n  {\n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">XYZ</span> p = triangle.get_Vertex( i );\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p );\n      _triangles.Add( _vertices.AddVertex( q ) );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a Revit geometry Face object and </span>\n  <span class=\"gray\">///</span><span class=\"green\"> return the number of resulting triangles.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color )\n  {\n    ++_faceCount;\n \n    <span class=\"teal\">Mesh</span> mesh = face.Triangulate();\n \n    <span class=\"blue\">int</span> n = mesh.NumTriangles;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\" {0} mesh triangles\"</span>, n );\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n    {\n      ++_triangleCount;\n \n      <span class=\"teal\">MeshTriangle</span> t = mesh.get_Triangle( i );\n \n      StoreTriangle( t );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetFaceCount()\n  {\n    <span class=\"blue\">return</span> _faceCount;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetTriangleCount()\n  {\n    <span class=\"blue\">int</span> n = _triangles.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == n % 3,\n      <span class=\"maroon\">\"expected a multiple of 3\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( _triangleCount.Equals( n / 3 ),\n      <span class=\"maroon\">\"expected equal triangle count\"</span> );\n\n    <span class=\"blue\">return</span> _triangleCount;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetVertexCount()\n  {\n    <span class=\"blue\">return</span> _vertices.Count;\n  }\n \n<span class=\"blue\">  #region</span> ExportTo: output the OBJ file\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Obsolete: emit an XYZ vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex( <span class=\"teal\">StreamWriter</span> s, <span class=\"teal\">XYZ</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>,\n      <span class=\"teal\">Util</span>.RealString( p.X ),\n      <span class=\"teal\">Util</span>.RealString( p.Y ),\n      <span class=\"teal\">Util</span>.RealString( p.Z ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a vertex to OBJ. The first vertex listed </span>\n  <span class=\"gray\">///</span><span class=\"green\"> in the file has index 1, and subsequent ones</span>\n  <span class=\"gray\">///</span><span class=\"green\"> are numbered sequentially.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"teal\">PointInt</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>, p.X, p.Y, p.Z );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit an OBJ triangular face.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitFacet(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"blue\">int</span> i,\n    <span class=\"blue\">int</span> j,\n    <span class=\"blue\">int</span> k )\n  {\n    s.WriteLine( <span class=\"maroon\">\"f {0} {1} {2}\"</span>,\n      i + 1, j + 1, k + 1 );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ExportTo( <span class=\"blue\">string</span> path )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> key <span class=\"blue\">in</span> _vertices.Keys )\n      {\n        EmitVertex( s, key );\n      }\n \n      <span class=\"blue\">int</span> i = 0;\n      <span class=\"blue\">int</span> n = _triangles.Count;\n \n      <span class=\"blue\">while</span>( i &lt; n )\n      {\n        <span class=\"blue\">int</span> i1 = _triangles[i++];\n        <span class=\"blue\">int</span> i2 = _triangles[i++];\n        <span class=\"blue\">int</span> i3 = _triangles[i++];\n \n        EmitFacet( s, i1, i2, i3 );\n      }\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// ExportTo: output the OBJ file</span>\n}\n</pre>\n<p>The command mainline makes use of three other helper methods:\n\n<ul>\n<li>GetSolid: Retrieve the first non-empty solid found for a given element.\n<li>ExportElement: Export an individual element.\n<li>ExportElements: Export all elements retrieved by a filtered element collector.\n</li></li></li></ul>\n<a name=\"7\"></a>\n<h4>Retrieving a Solid from an Element</h4>\n<p>The GetSolid helper method retrieves the first non-empty solid found for a given element. \n\n<p>In case it is a family instance, it may have its own non-empty solid, in which case we use that. \nOtherwise we search the symbol geometry. \nIf we use the symbol geometry, we might have to keep track of the instance transform to map it to the actual instance project location. \nInstead, we ask for transformed geometry to be returned, so the resulting solid is already in place:\n\n<pre class=\"code\">\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      geo = geo.GetTransformed(\n        <span class=\"teal\">Transform</span>.Identity );\n    }\n \n    <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n    <span class=\"green\">//Transform t = Transform.Identity;</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"green\">//t = inst.Transform;</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"8\"></a>\n<h4>Exporting an Element</h4>\n<p>The ExportElement helper method exports a given element and returns the number of solids found and exported from it.\n\n<p>If the element is a group, this method is called recursively on the group members, so the return value may be greater than one:\n\n<pre class=\"code\">\n<span class=\"blue\">int</span> ExportElement(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Group</span> group = e <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != group )\n  {\n    <span class=\"blue\">int</span> n = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id \n      <span class=\"blue\">in</span> group.GetMemberIds() )\n    {\n      <span class=\"teal\">Element</span> e2 = e.Document.GetElement(\n        id );\n \n      n += ExportElement( emitter, e2, opt );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( e );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e.Category )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Element '{0}' has no \"</span>\n      + <span class=\"maroon\">\"category.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unable to access \"</span>\n      + <span class=\"maroon\">\"solid for element {0}.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Material</span> material;\n  <span class=\"teal\">Color</span> color;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n  {\n    material = e.Document.GetElement(\n      face.MaterialElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n    color = ( <span class=\"blue\">null</span> == material )\n      ? <span class=\"blue\">null</span>\n      : material.Color;\n \n    emitter.EmitFace( face, color );\n  }\n  <span class=\"blue\">return</span> 1;\n}\n</pre>\n<a name=\"9\"></a>\n<h4>Exporting all Collected Elements</h4>\n<p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Disk Full",
    "local_header_href": "#disk-full",
    "chunk_text": "<h4>Disk Full</h4><p>Unfortunately, I spent much less time than expected on fun stuff, since almost all my time yesterday and this morning went to shuffling around gigabytes of files on my overfilled PC and external hard disk.\n\n<p>I was still using the Revit Quasar release preview, which suddenly stopped working.\nNo big surprise, of course.\n\n<p>To \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/04/migrate-building-coder-samples-to-revit-2013.html\">\nobtain a one-box version</a>, \n\nI went for the ultimate design suite, which requires downloading seven 4 GB files for a grand total of 27.3 GB.\nAfter finally creating enough space for them and freeing up as much as possible for installation, I launched the installer.\nIt took an hour or longer to just copy temporary files and then aborted with a disk full error before even starting the installation proper.\n\n<p>I just went out and bought a new and bigger external hard disk, and am still working at freeing up more space.\nVery time consuming business, this.\n\n<p>I later found two other helpful items which gave me another couple of gig:\n\n<ul>\n<li>\n<a href=\"http://www.ehow.com/how_5891038_delete-windows-installer-cache.html\">Delete the Windows installer cache</a>:\n<ol>\n<li>Open Disk Cleanup: Start &gt; Run &gt; cleanmgr &gt; OK. This will launch the Disk Cleanup utility.\n<li>Select 'Temporary Files', the Windows Installer cache directory. \n<li>Click OK.\n</li></li></li></ol>\n<li>\n<a href=\"http://www.ehow.com/how_12157017_clear-ccm-cache.html\">Clear the CCM cache</a>:\n<ol>\n<li>Select Start &gt; Settings &gt; Control Panel.\n<li>Double click 'Configuration Manager' and open the 'Advanced' tab.\n<li>Change the location of future cached files, if needed, by clicking the 'Change Location' button and choosing a new location on your hard drive. The default location is '%windir%\\system32\\CCM\\Cache.'\n<li>Delete all cached files in CCM by clicking the 'Delete Files' button. Press 'Yes' if asked to confirm.\n<li>Click 'OK' to save changes and exit the Advanced window.\n</li></li></li></li></li></ol>\n</li></li></ul>\n<p>I'm up to 44 GB free space now...\n\n<p>Meanwhile, I can talk about what I did for the OBJ exporter before uninstalling Quasar RP.\n\n\n<a name=\"4\"></a>\n<h4>Model up to Cloud and Down to Mobile</h4>\n<p>As I explained yesterday in the basic\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/getting-going-with-the-cloud.html\">\nRevit model export considerations</a>,\n\nthe purpose of this exercise is to push Revit model data up to the cloud and provide access to it from mobile devices.\n\n<p>Adam Nagy is also currently discussing a similar project on the AEC DevBlog.\nAfter presenting his\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-1.html\">\nRevit add-in to upload geometry data to a storage service</a>, \n\nthe second instalment discusses an\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-2.html\">\niOS application to download and display the data using OpenGL</a>.\n\n<p>One thing that I am thinking of doing is to define a flexible exporter architecture so that different export targets can easily be plugged in, for instance to switch between different file formats and disk-based versus cloud-based repositories.\n\n\n<a name=\"5\"></a>\n<h4>Face Emitter Interface</h4>\n<p>For the moment, I am working with the following pretty trivial interface definition which only specifies one single output method to export a Revit geometry face:\n\n<pre class=\"code\">\n<span class=\"blue\">interface</span> <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a face with a specified colour.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color );\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetFaceCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetTriangleCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final vertex count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetVertexCount();\n}\n</pre>\n<p>It also provides methods to query the number of exported faces and the resulting triangles and vertices when finished.\nI would have liked to define the count methods as simple properties instead, but that apparently cannot be done in an interface specification, unfortunately.\n\n\n<a name=\"6\"></a>\n<h4>OBJ Exporter Implementation</h4>\n<p>The OBJ exporter class implementing this interface makes use of the vertex lookup dictionaries that I discussed yesterday to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#5\">\neliminate duplicate vertices</a>.\n\nInitially I used the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#6\">\nXYZ-based lookup class</a>, and \n\nlater I switched to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#7\">\ninteger-based one</a> instead.\n\n<p>The exported implements the four methods required by the interface definition plus a fifth method to save the resulting file:\n\n<ul>\n<li>EmitFace: export a Revit geometry Face object.\n<li>GetFaceCount, GetTriangleCount, GetVertexCount: return object counts.\n<li>ExportTo: save the resulting OBJ file.\n</li></li></li></ul>\n<p>The helper method StoreTriangle is called by EmitFace to populate the vertex lookup dictionary and triangle list.\n\n<p>The helper methods EmitVertex and EmitFacet are called by ExportTo to write out the OBJ vertex and face records.\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ObjExporter</span> : <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"green\">//VertexLookupXyz _vertices;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of faces processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _faceCount;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _triangleCount;\n \n  <span class=\"blue\">public</span> ObjExporter()\n  {\n    _faceCount = 0;\n    _triangleCount = 0;\n    _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n    _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add the vertices of the given triangle to our</span>\n  <span class=\"gray\">///</span><span class=\"green\"> vertex lookup dictionary and emit a triangle.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle( <span class=\"teal\">MeshTriangle</span> triangle )\n  {\n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">XYZ</span> p = triangle.get_Vertex( i );\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p );\n      _triangles.Add( _vertices.AddVertex( q ) );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a Revit geometry Face object and </span>\n  <span class=\"gray\">///</span><span class=\"green\"> return the number of resulting triangles.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color )\n  {\n    ++_faceCount;\n \n    <span class=\"teal\">Mesh</span> mesh = face.Triangulate();\n \n    <span class=\"blue\">int</span> n = mesh.NumTriangles;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\" {0} mesh triangles\"</span>, n );\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n    {\n      ++_triangleCount;\n \n      <span class=\"teal\">MeshTriangle</span> t = mesh.get_Triangle( i );\n \n      StoreTriangle( t );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetFaceCount()\n  {\n    <span class=\"blue\">return</span> _faceCount;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetTriangleCount()\n  {\n    <span class=\"blue\">int</span> n = _triangles.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == n % 3,\n      <span class=\"maroon\">\"expected a multiple of 3\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( _triangleCount.Equals( n / 3 ),\n      <span class=\"maroon\">\"expected equal triangle count\"</span> );\n\n    <span class=\"blue\">return</span> _triangleCount;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetVertexCount()\n  {\n    <span class=\"blue\">return</span> _vertices.Count;\n  }\n \n<span class=\"blue\">  #region</span> ExportTo: output the OBJ file\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Obsolete: emit an XYZ vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex( <span class=\"teal\">StreamWriter</span> s, <span class=\"teal\">XYZ</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>,\n      <span class=\"teal\">Util</span>.RealString( p.X ),\n      <span class=\"teal\">Util</span>.RealString( p.Y ),\n      <span class=\"teal\">Util</span>.RealString( p.Z ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a vertex to OBJ. The first vertex listed </span>\n  <span class=\"gray\">///</span><span class=\"green\"> in the file has index 1, and subsequent ones</span>\n  <span class=\"gray\">///</span><span class=\"green\"> are numbered sequentially.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"teal\">PointInt</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>, p.X, p.Y, p.Z );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit an OBJ triangular face.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitFacet(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"blue\">int</span> i,\n    <span class=\"blue\">int</span> j,\n    <span class=\"blue\">int</span> k )\n  {\n    s.WriteLine( <span class=\"maroon\">\"f {0} {1} {2}\"</span>,\n      i + 1, j + 1, k + 1 );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ExportTo( <span class=\"blue\">string</span> path )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> key <span class=\"blue\">in</span> _vertices.Keys )\n      {\n        EmitVertex( s, key );\n      }\n \n      <span class=\"blue\">int</span> i = 0;\n      <span class=\"blue\">int</span> n = _triangles.Count;\n \n      <span class=\"blue\">while</span>( i &lt; n )\n      {\n        <span class=\"blue\">int</span> i1 = _triangles[i++];\n        <span class=\"blue\">int</span> i2 = _triangles[i++];\n        <span class=\"blue\">int</span> i3 = _triangles[i++];\n \n        EmitFacet( s, i1, i2, i3 );\n      }\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// ExportTo: output the OBJ file</span>\n}\n</pre>\n<p>The command mainline makes use of three other helper methods:\n\n<ul>\n<li>GetSolid: Retrieve the first non-empty solid found for a given element.\n<li>ExportElement: Export an individual element.\n<li>ExportElements: Export all elements retrieved by a filtered element collector.\n</li></li></li></ul>\n<a name=\"7\"></a>\n<h4>Retrieving a Solid from an Element</h4>\n<p>The GetSolid helper method retrieves the first non-empty solid found for a given element. \n\n<p>In case it is a family instance, it may have its own non-empty solid, in which case we use that. \nOtherwise we search the symbol geometry. \nIf we use the symbol geometry, we might have to keep track of the instance transform to map it to the actual instance project location. \nInstead, we ask for transformed geometry to be returned, so the resulting solid is already in place:\n\n<pre class=\"code\">\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      geo = geo.GetTransformed(\n        <span class=\"teal\">Transform</span>.Identity );\n    }\n \n    <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n    <span class=\"green\">//Transform t = Transform.Identity;</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"green\">//t = inst.Transform;</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"8\"></a>\n<h4>Exporting an Element</h4>\n<p>The ExportElement helper method exports a given element and returns the number of solids found and exported from it.\n\n<p>If the element is a group, this method is called recursively on the group members, so the return value may be greater than one:\n\n<pre class=\"code\">\n<span class=\"blue\">int</span> ExportElement(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Group</span> group = e <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != group )\n  {\n    <span class=\"blue\">int</span> n = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id \n      <span class=\"blue\">in</span> group.GetMemberIds() )\n    {\n      <span class=\"teal\">Element</span> e2 = e.Document.GetElement(\n        id );\n \n      n += ExportElement( emitter, e2, opt );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( e );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e.Category )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Element '{0}' has no \"</span>\n      + <span class=\"maroon\">\"category.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unable to access \"</span>\n      + <span class=\"maroon\">\"solid for element {0}.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Material</span> material;\n  <span class=\"teal\">Color</span> color;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n  {\n    material = e.Document.GetElement(\n      face.MaterialElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n    color = ( <span class=\"blue\">null</span> == material )\n      ? <span class=\"blue\">null</span>\n      : material.Color;\n \n    emitter.EmitFace( face, color );\n  }\n  <span class=\"blue\">return</span> 1;\n}\n</pre>\n<a name=\"9\"></a>\n<h4>Exporting all Collected Elements</h4>\n<p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Model up to Cloud and Down to Mobile",
    "local_header_href": "#model-up-to-cloud-and-down-to-mobile",
    "chunk_text": "<h4>Model up to Cloud and Down to Mobile</h4><p>As I explained yesterday in the basic\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/getting-going-with-the-cloud.html\">\nRevit model export considerations</a>,\n\nthe purpose of this exercise is to push Revit model data up to the cloud and provide access to it from mobile devices.\n\n<p>Adam Nagy is also currently discussing a similar project on the AEC DevBlog.\nAfter presenting his\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-1.html\">\nRevit add-in to upload geometry data to a storage service</a>, \n\nthe second instalment discusses an\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/06/revit-model-viewer-for-ios-part-2.html\">\niOS application to download and display the data using OpenGL</a>.\n\n<p>One thing that I am thinking of doing is to define a flexible exporter architecture so that different export targets can easily be plugged in, for instance to switch between different file formats and disk-based versus cloud-based repositories.\n\n\n<a name=\"5\"></a>\n<h4>Face Emitter Interface</h4>\n<p>For the moment, I am working with the following pretty trivial interface definition which only specifies one single output method to export a Revit geometry face:\n\n<pre class=\"code\">\n<span class=\"blue\">interface</span> <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a face with a specified colour.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color );\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetFaceCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetTriangleCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final vertex count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetVertexCount();\n}\n</pre>\n<p>It also provides methods to query the number of exported faces and the resulting triangles and vertices when finished.\nI would have liked to define the count methods as simple properties instead, but that apparently cannot be done in an interface specification, unfortunately.\n\n\n<a name=\"6\"></a>\n<h4>OBJ Exporter Implementation</h4>\n<p>The OBJ exporter class implementing this interface makes use of the vertex lookup dictionaries that I discussed yesterday to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#5\">\neliminate duplicate vertices</a>.\n\nInitially I used the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#6\">\nXYZ-based lookup class</a>, and \n\nlater I switched to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#7\">\ninteger-based one</a> instead.\n\n<p>The exported implements the four methods required by the interface definition plus a fifth method to save the resulting file:\n\n<ul>\n<li>EmitFace: export a Revit geometry Face object.\n<li>GetFaceCount, GetTriangleCount, GetVertexCount: return object counts.\n<li>ExportTo: save the resulting OBJ file.\n</li></li></li></ul>\n<p>The helper method StoreTriangle is called by EmitFace to populate the vertex lookup dictionary and triangle list.\n\n<p>The helper methods EmitVertex and EmitFacet are called by ExportTo to write out the OBJ vertex and face records.\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ObjExporter</span> : <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"green\">//VertexLookupXyz _vertices;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of faces processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _faceCount;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _triangleCount;\n \n  <span class=\"blue\">public</span> ObjExporter()\n  {\n    _faceCount = 0;\n    _triangleCount = 0;\n    _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n    _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add the vertices of the given triangle to our</span>\n  <span class=\"gray\">///</span><span class=\"green\"> vertex lookup dictionary and emit a triangle.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle( <span class=\"teal\">MeshTriangle</span> triangle )\n  {\n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">XYZ</span> p = triangle.get_Vertex( i );\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p );\n      _triangles.Add( _vertices.AddVertex( q ) );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a Revit geometry Face object and </span>\n  <span class=\"gray\">///</span><span class=\"green\"> return the number of resulting triangles.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color )\n  {\n    ++_faceCount;\n \n    <span class=\"teal\">Mesh</span> mesh = face.Triangulate();\n \n    <span class=\"blue\">int</span> n = mesh.NumTriangles;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\" {0} mesh triangles\"</span>, n );\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n    {\n      ++_triangleCount;\n \n      <span class=\"teal\">MeshTriangle</span> t = mesh.get_Triangle( i );\n \n      StoreTriangle( t );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetFaceCount()\n  {\n    <span class=\"blue\">return</span> _faceCount;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetTriangleCount()\n  {\n    <span class=\"blue\">int</span> n = _triangles.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == n % 3,\n      <span class=\"maroon\">\"expected a multiple of 3\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( _triangleCount.Equals( n / 3 ),\n      <span class=\"maroon\">\"expected equal triangle count\"</span> );\n\n    <span class=\"blue\">return</span> _triangleCount;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetVertexCount()\n  {\n    <span class=\"blue\">return</span> _vertices.Count;\n  }\n \n<span class=\"blue\">  #region</span> ExportTo: output the OBJ file\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Obsolete: emit an XYZ vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex( <span class=\"teal\">StreamWriter</span> s, <span class=\"teal\">XYZ</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>,\n      <span class=\"teal\">Util</span>.RealString( p.X ),\n      <span class=\"teal\">Util</span>.RealString( p.Y ),\n      <span class=\"teal\">Util</span>.RealString( p.Z ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a vertex to OBJ. The first vertex listed </span>\n  <span class=\"gray\">///</span><span class=\"green\"> in the file has index 1, and subsequent ones</span>\n  <span class=\"gray\">///</span><span class=\"green\"> are numbered sequentially.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"teal\">PointInt</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>, p.X, p.Y, p.Z );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit an OBJ triangular face.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitFacet(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"blue\">int</span> i,\n    <span class=\"blue\">int</span> j,\n    <span class=\"blue\">int</span> k )\n  {\n    s.WriteLine( <span class=\"maroon\">\"f {0} {1} {2}\"</span>,\n      i + 1, j + 1, k + 1 );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ExportTo( <span class=\"blue\">string</span> path )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> key <span class=\"blue\">in</span> _vertices.Keys )\n      {\n        EmitVertex( s, key );\n      }\n \n      <span class=\"blue\">int</span> i = 0;\n      <span class=\"blue\">int</span> n = _triangles.Count;\n \n      <span class=\"blue\">while</span>( i &lt; n )\n      {\n        <span class=\"blue\">int</span> i1 = _triangles[i++];\n        <span class=\"blue\">int</span> i2 = _triangles[i++];\n        <span class=\"blue\">int</span> i3 = _triangles[i++];\n \n        EmitFacet( s, i1, i2, i3 );\n      }\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// ExportTo: output the OBJ file</span>\n}\n</pre>\n<p>The command mainline makes use of three other helper methods:\n\n<ul>\n<li>GetSolid: Retrieve the first non-empty solid found for a given element.\n<li>ExportElement: Export an individual element.\n<li>ExportElements: Export all elements retrieved by a filtered element collector.\n</li></li></li></ul>\n<a name=\"7\"></a>\n<h4>Retrieving a Solid from an Element</h4>\n<p>The GetSolid helper method retrieves the first non-empty solid found for a given element. \n\n<p>In case it is a family instance, it may have its own non-empty solid, in which case we use that. \nOtherwise we search the symbol geometry. \nIf we use the symbol geometry, we might have to keep track of the instance transform to map it to the actual instance project location. \nInstead, we ask for transformed geometry to be returned, so the resulting solid is already in place:\n\n<pre class=\"code\">\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      geo = geo.GetTransformed(\n        <span class=\"teal\">Transform</span>.Identity );\n    }\n \n    <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n    <span class=\"green\">//Transform t = Transform.Identity;</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"green\">//t = inst.Transform;</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"8\"></a>\n<h4>Exporting an Element</h4>\n<p>The ExportElement helper method exports a given element and returns the number of solids found and exported from it.\n\n<p>If the element is a group, this method is called recursively on the group members, so the return value may be greater than one:\n\n<pre class=\"code\">\n<span class=\"blue\">int</span> ExportElement(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Group</span> group = e <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != group )\n  {\n    <span class=\"blue\">int</span> n = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id \n      <span class=\"blue\">in</span> group.GetMemberIds() )\n    {\n      <span class=\"teal\">Element</span> e2 = e.Document.GetElement(\n        id );\n \n      n += ExportElement( emitter, e2, opt );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( e );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e.Category )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Element '{0}' has no \"</span>\n      + <span class=\"maroon\">\"category.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unable to access \"</span>\n      + <span class=\"maroon\">\"solid for element {0}.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Material</span> material;\n  <span class=\"teal\">Color</span> color;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n  {\n    material = e.Document.GetElement(\n      face.MaterialElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n    color = ( <span class=\"blue\">null</span> == material )\n      ? <span class=\"blue\">null</span>\n      : material.Color;\n \n    emitter.EmitFace( face, color );\n  }\n  <span class=\"blue\">return</span> 1;\n}\n</pre>\n<a name=\"9\"></a>\n<h4>Exporting all Collected Elements</h4>\n<p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Face Emitter Interface",
    "local_header_href": "#face-emitter-interface",
    "chunk_text": "<h4>Face Emitter Interface</h4><p>For the moment, I am working with the following pretty trivial interface definition which only specifies one single output method to export a Revit geometry face:\n\n<pre class=\"code\">\n<span class=\"blue\">interface</span> <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a face with a specified colour.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color );\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetFaceCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final triangle count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetTriangleCount();\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the final vertex count </span>\n  <span class=\"gray\">///</span><span class=\"green\"> after processing all faces.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> GetVertexCount();\n}\n</pre>\n<p>It also provides methods to query the number of exported faces and the resulting triangles and vertices when finished.\nI would have liked to define the count methods as simple properties instead, but that apparently cannot be done in an interface specification, unfortunately.\n\n\n<a name=\"6\"></a>\n<h4>OBJ Exporter Implementation</h4>\n<p>The OBJ exporter class implementing this interface makes use of the vertex lookup dictionaries that I discussed yesterday to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#5\">\neliminate duplicate vertices</a>.\n\nInitially I used the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#6\">\nXYZ-based lookup class</a>, and \n\nlater I switched to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#7\">\ninteger-based one</a> instead.\n\n<p>The exported implements the four methods required by the interface definition plus a fifth method to save the resulting file:\n\n<ul>\n<li>EmitFace: export a Revit geometry Face object.\n<li>GetFaceCount, GetTriangleCount, GetVertexCount: return object counts.\n<li>ExportTo: save the resulting OBJ file.\n</li></li></li></ul>\n<p>The helper method StoreTriangle is called by EmitFace to populate the vertex lookup dictionary and triangle list.\n\n<p>The helper methods EmitVertex and EmitFacet are called by ExportTo to write out the OBJ vertex and face records.\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ObjExporter</span> : <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"green\">//VertexLookupXyz _vertices;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of faces processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _faceCount;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _triangleCount;\n \n  <span class=\"blue\">public</span> ObjExporter()\n  {\n    _faceCount = 0;\n    _triangleCount = 0;\n    _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n    _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add the vertices of the given triangle to our</span>\n  <span class=\"gray\">///</span><span class=\"green\"> vertex lookup dictionary and emit a triangle.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle( <span class=\"teal\">MeshTriangle</span> triangle )\n  {\n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">XYZ</span> p = triangle.get_Vertex( i );\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p );\n      _triangles.Add( _vertices.AddVertex( q ) );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a Revit geometry Face object and </span>\n  <span class=\"gray\">///</span><span class=\"green\"> return the number of resulting triangles.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color )\n  {\n    ++_faceCount;\n \n    <span class=\"teal\">Mesh</span> mesh = face.Triangulate();\n \n    <span class=\"blue\">int</span> n = mesh.NumTriangles;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\" {0} mesh triangles\"</span>, n );\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n    {\n      ++_triangleCount;\n \n      <span class=\"teal\">MeshTriangle</span> t = mesh.get_Triangle( i );\n \n      StoreTriangle( t );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetFaceCount()\n  {\n    <span class=\"blue\">return</span> _faceCount;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetTriangleCount()\n  {\n    <span class=\"blue\">int</span> n = _triangles.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == n % 3,\n      <span class=\"maroon\">\"expected a multiple of 3\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( _triangleCount.Equals( n / 3 ),\n      <span class=\"maroon\">\"expected equal triangle count\"</span> );\n\n    <span class=\"blue\">return</span> _triangleCount;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetVertexCount()\n  {\n    <span class=\"blue\">return</span> _vertices.Count;\n  }\n \n<span class=\"blue\">  #region</span> ExportTo: output the OBJ file\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Obsolete: emit an XYZ vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex( <span class=\"teal\">StreamWriter</span> s, <span class=\"teal\">XYZ</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>,\n      <span class=\"teal\">Util</span>.RealString( p.X ),\n      <span class=\"teal\">Util</span>.RealString( p.Y ),\n      <span class=\"teal\">Util</span>.RealString( p.Z ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a vertex to OBJ. The first vertex listed </span>\n  <span class=\"gray\">///</span><span class=\"green\"> in the file has index 1, and subsequent ones</span>\n  <span class=\"gray\">///</span><span class=\"green\"> are numbered sequentially.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"teal\">PointInt</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>, p.X, p.Y, p.Z );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit an OBJ triangular face.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitFacet(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"blue\">int</span> i,\n    <span class=\"blue\">int</span> j,\n    <span class=\"blue\">int</span> k )\n  {\n    s.WriteLine( <span class=\"maroon\">\"f {0} {1} {2}\"</span>,\n      i + 1, j + 1, k + 1 );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ExportTo( <span class=\"blue\">string</span> path )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> key <span class=\"blue\">in</span> _vertices.Keys )\n      {\n        EmitVertex( s, key );\n      }\n \n      <span class=\"blue\">int</span> i = 0;\n      <span class=\"blue\">int</span> n = _triangles.Count;\n \n      <span class=\"blue\">while</span>( i &lt; n )\n      {\n        <span class=\"blue\">int</span> i1 = _triangles[i++];\n        <span class=\"blue\">int</span> i2 = _triangles[i++];\n        <span class=\"blue\">int</span> i3 = _triangles[i++];\n \n        EmitFacet( s, i1, i2, i3 );\n      }\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// ExportTo: output the OBJ file</span>\n}\n</pre>\n<p>The command mainline makes use of three other helper methods:\n\n<ul>\n<li>GetSolid: Retrieve the first non-empty solid found for a given element.\n<li>ExportElement: Export an individual element.\n<li>ExportElements: Export all elements retrieved by a filtered element collector.\n</li></li></li></ul>\n<a name=\"7\"></a>\n<h4>Retrieving a Solid from an Element</h4>\n<p>The GetSolid helper method retrieves the first non-empty solid found for a given element. \n\n<p>In case it is a family instance, it may have its own non-empty solid, in which case we use that. \nOtherwise we search the symbol geometry. \nIf we use the symbol geometry, we might have to keep track of the instance transform to map it to the actual instance project location. \nInstead, we ask for transformed geometry to be returned, so the resulting solid is already in place:\n\n<pre class=\"code\">\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      geo = geo.GetTransformed(\n        <span class=\"teal\">Transform</span>.Identity );\n    }\n \n    <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n    <span class=\"green\">//Transform t = Transform.Identity;</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"green\">//t = inst.Transform;</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"8\"></a>\n<h4>Exporting an Element</h4>\n<p>The ExportElement helper method exports a given element and returns the number of solids found and exported from it.\n\n<p>If the element is a group, this method is called recursively on the group members, so the return value may be greater than one:\n\n<pre class=\"code\">\n<span class=\"blue\">int</span> ExportElement(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Group</span> group = e <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != group )\n  {\n    <span class=\"blue\">int</span> n = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id \n      <span class=\"blue\">in</span> group.GetMemberIds() )\n    {\n      <span class=\"teal\">Element</span> e2 = e.Document.GetElement(\n        id );\n \n      n += ExportElement( emitter, e2, opt );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( e );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e.Category )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Element '{0}' has no \"</span>\n      + <span class=\"maroon\">\"category.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unable to access \"</span>\n      + <span class=\"maroon\">\"solid for element {0}.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Material</span> material;\n  <span class=\"teal\">Color</span> color;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n  {\n    material = e.Document.GetElement(\n      face.MaterialElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n    color = ( <span class=\"blue\">null</span> == material )\n      ? <span class=\"blue\">null</span>\n      : material.Color;\n \n    emitter.EmitFace( face, color );\n  }\n  <span class=\"blue\">return</span> 1;\n}\n</pre>\n<a name=\"9\"></a>\n<h4>Exporting all Collected Elements</h4>\n<p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "OBJ Exporter Implementation",
    "local_header_href": "#obj-exporter-implementation",
    "chunk_text": "<h4>OBJ Exporter Implementation</h4><p>The OBJ exporter class implementing this interface makes use of the vertex lookup dictionaries that I discussed yesterday to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#5\">\neliminate duplicate vertices</a>.\n\nInitially I used the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#6\">\nXYZ-based lookup class</a>, and \n\nlater I switched to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/06/obj-model-export-considerations.html#7\">\ninteger-based one</a> instead.\n\n<p>The exported implements the four methods required by the interface definition plus a fifth method to save the resulting file:\n\n<ul>\n<li>EmitFace: export a Revit geometry Face object.\n<li>GetFaceCount, GetTriangleCount, GetVertexCount: return object counts.\n<li>ExportTo: save the resulting OBJ file.\n</li></li></li></ul>\n<p>The helper method StoreTriangle is called by EmitFace to populate the vertex lookup dictionary and triangle list.\n\n<p>The helper methods EmitVertex and EmitFacet are called by ExportTo to write out the OBJ vertex and face records.\n\n<pre class=\"code\">\n<span class=\"blue\">class</span> <span class=\"teal\">ObjExporter</span> : <span class=\"teal\">IJtFaceEmitter</span>\n{\n  <span class=\"green\">//VertexLookupXyz _vertices;</span>\n  <span class=\"teal\">VertexLookupInt</span> _vertices;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> List of triangles, defined as </span>\n  <span class=\"gray\">///</span><span class=\"green\"> triples of vertex indices.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt; _triangles;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of faces processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _faceCount;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Keep track of the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">int</span> _triangleCount;\n \n  <span class=\"blue\">public</span> ObjExporter()\n  {\n    _faceCount = 0;\n    _triangleCount = 0;\n    _vertices = <span class=\"blue\">new</span> <span class=\"teal\">VertexLookupInt</span>();\n    _triangles = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"blue\">int</span>&gt;();\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Add the vertices of the given triangle to our</span>\n  <span class=\"gray\">///</span><span class=\"green\"> vertex lookup dictionary and emit a triangle.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">void</span> StoreTriangle( <span class=\"teal\">MeshTriangle</span> triangle )\n  {\n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; 3; ++i )\n    {\n      <span class=\"teal\">XYZ</span> p = triangle.get_Vertex( i );\n      <span class=\"teal\">PointInt</span> q = <span class=\"blue\">new</span> <span class=\"teal\">PointInt</span>( p );\n      _triangles.Add( _vertices.AddVertex( q ) );\n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a Revit geometry Face object and </span>\n  <span class=\"gray\">///</span><span class=\"green\"> return the number of resulting triangles.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> EmitFace( <span class=\"teal\">Face</span> face, <span class=\"teal\">Color</span> color )\n  {\n    ++_faceCount;\n \n    <span class=\"teal\">Mesh</span> mesh = face.Triangulate();\n \n    <span class=\"blue\">int</span> n = mesh.NumTriangles;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\" {0} mesh triangles\"</span>, n );\n \n    <span class=\"blue\">for</span>( <span class=\"blue\">int</span> i = 0; i &lt; n; ++i )\n    {\n      ++_triangleCount;\n \n      <span class=\"teal\">MeshTriangle</span> t = mesh.get_Triangle( i );\n \n      StoreTriangle( t );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetFaceCount()\n  {\n    <span class=\"blue\">return</span> _faceCount;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return the number of triangles processed.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetTriangleCount()\n  {\n    <span class=\"blue\">int</span> n = _triangles.Count;\n \n    <span class=\"teal\">Debug</span>.Assert( 0 == n % 3,\n      <span class=\"maroon\">\"expected a multiple of 3\"</span> );\n \n    <span class=\"teal\">Debug</span>.Assert( _triangleCount.Equals( n / 3 ),\n      <span class=\"maroon\">\"expected equal triangle count\"</span> );\n\n    <span class=\"blue\">return</span> _triangleCount;\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">int</span> GetVertexCount()\n  {\n    <span class=\"blue\">return</span> _vertices.Count;\n  }\n \n<span class=\"blue\">  #region</span> ExportTo: output the OBJ file\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Obsolete: emit an XYZ vertex.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex( <span class=\"teal\">StreamWriter</span> s, <span class=\"teal\">XYZ</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>,\n      <span class=\"teal\">Util</span>.RealString( p.X ),\n      <span class=\"teal\">Util</span>.RealString( p.Y ),\n      <span class=\"teal\">Util</span>.RealString( p.Z ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit a vertex to OBJ. The first vertex listed </span>\n  <span class=\"gray\">///</span><span class=\"green\"> in the file has index 1, and subsequent ones</span>\n  <span class=\"gray\">///</span><span class=\"green\"> are numbered sequentially.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitVertex(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"teal\">PointInt</span> p )\n  {\n    s.WriteLine( <span class=\"maroon\">\"v {0} {1} {2}\"</span>, p.X, p.Y, p.Z );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Emit an OBJ triangular face.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">void</span> EmitFacet(\n    <span class=\"teal\">StreamWriter</span> s,\n    <span class=\"blue\">int</span> i,\n    <span class=\"blue\">int</span> j,\n    <span class=\"blue\">int</span> k )\n  {\n    s.WriteLine( <span class=\"maroon\">\"f {0} {1} {2}\"</span>,\n      i + 1, j + 1, k + 1 );\n  }\n \n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> ExportTo( <span class=\"blue\">string</span> path )\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">StreamWriter</span> s = <span class=\"blue\">new</span> <span class=\"teal\">StreamWriter</span>( path ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">PointInt</span> key <span class=\"blue\">in</span> _vertices.Keys )\n      {\n        EmitVertex( s, key );\n      }\n \n      <span class=\"blue\">int</span> i = 0;\n      <span class=\"blue\">int</span> n = _triangles.Count;\n \n      <span class=\"blue\">while</span>( i &lt; n )\n      {\n        <span class=\"blue\">int</span> i1 = _triangles[i++];\n        <span class=\"blue\">int</span> i2 = _triangles[i++];\n        <span class=\"blue\">int</span> i3 = _triangles[i++];\n \n        EmitFacet( s, i1, i2, i3 );\n      }\n    }\n  }\n<span class=\"blue\">  #endregion</span> <span class=\"green\">// ExportTo: output the OBJ file</span>\n}\n</pre>\n<p>The command mainline makes use of three other helper methods:\n\n<ul>\n<li>GetSolid: Retrieve the first non-empty solid found for a given element.\n<li>ExportElement: Export an individual element.\n<li>ExportElements: Export all elements retrieved by a filtered element collector.\n</li></li></li></ul>\n<a name=\"7\"></a>\n<h4>Retrieving a Solid from an Element</h4>\n<p>The GetSolid helper method retrieves the first non-empty solid found for a given element. \n\n<p>In case it is a family instance, it may have its own non-empty solid, in which case we use that. \nOtherwise we search the symbol geometry. \nIf we use the symbol geometry, we might have to keep track of the instance transform to map it to the actual instance project location. \nInstead, we ask for transformed geometry to be returned, so the resulting solid is already in place:\n\n<pre class=\"code\">\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      geo = geo.GetTransformed(\n        <span class=\"teal\">Transform</span>.Identity );\n    }\n \n    <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n    <span class=\"green\">//Transform t = Transform.Identity;</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"green\">//t = inst.Transform;</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"8\"></a>\n<h4>Exporting an Element</h4>\n<p>The ExportElement helper method exports a given element and returns the number of solids found and exported from it.\n\n<p>If the element is a group, this method is called recursively on the group members, so the return value may be greater than one:\n\n<pre class=\"code\">\n<span class=\"blue\">int</span> ExportElement(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Group</span> group = e <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != group )\n  {\n    <span class=\"blue\">int</span> n = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id \n      <span class=\"blue\">in</span> group.GetMemberIds() )\n    {\n      <span class=\"teal\">Element</span> e2 = e.Document.GetElement(\n        id );\n \n      n += ExportElement( emitter, e2, opt );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( e );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e.Category )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Element '{0}' has no \"</span>\n      + <span class=\"maroon\">\"category.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unable to access \"</span>\n      + <span class=\"maroon\">\"solid for element {0}.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Material</span> material;\n  <span class=\"teal\">Color</span> color;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n  {\n    material = e.Document.GetElement(\n      face.MaterialElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n    color = ( <span class=\"blue\">null</span> == material )\n      ? <span class=\"blue\">null</span>\n      : material.Color;\n \n    emitter.EmitFace( face, color );\n  }\n  <span class=\"blue\">return</span> 1;\n}\n</pre>\n<a name=\"9\"></a>\n<h4>Exporting all Collected Elements</h4>\n<p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Retrieving a Solid from an Element",
    "local_header_href": "#retrieving-a-solid-from-an-element",
    "chunk_text": "<h4>Retrieving a Solid from an Element</h4><p>The GetSolid helper method retrieves the first non-empty solid found for a given element. \n\n<p>In case it is a family instance, it may have its own non-empty solid, in which case we use that. \nOtherwise we search the symbol geometry. \nIf we use the symbol geometry, we might have to keep track of the instance transform to map it to the actual instance project location. \nInstead, we ask for transformed geometry to be returned, so the resulting solid is already in place:\n\n<pre class=\"code\">\n<span class=\"teal\">Solid</span> GetSolid( <span class=\"teal\">Element</span> e, <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Solid</span> solid = <span class=\"blue\">null</span>;\n \n  <span class=\"teal\">GeometryElement</span> geo = e.get_Geometry( opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != geo )\n  {\n    <span class=\"blue\">if</span>( e <span class=\"blue\">is</span> <span class=\"teal\">FamilyInstance</span> )\n    {\n      geo = geo.GetTransformed(\n        <span class=\"teal\">Transform</span>.Identity );\n    }\n \n    <span class=\"teal\">GeometryInstance</span> inst = <span class=\"blue\">null</span>;\n    <span class=\"green\">//Transform t = Transform.Identity;</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n    {\n      solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n        &amp;&amp; 0 &lt; solid.Faces.Size )\n      {\n        <span class=\"blue\">break</span>;\n      }\n \n      inst = obj <span class=\"blue\">as</span> <span class=\"teal\">GeometryInstance</span>;\n    }\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid &amp;&amp; <span class=\"blue\">null</span> != inst )\n    {\n      geo = inst.GetSymbolGeometry();\n      <span class=\"green\">//t = inst.Transform;</span>\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n      {\n        solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n \n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid\n          &amp;&amp; 0 &lt; solid.Faces.Size )\n        {\n          <span class=\"blue\">break</span>;\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> solid;\n}\n</pre>\n<a name=\"8\"></a>\n<h4>Exporting an Element</h4>\n<p>The ExportElement helper method exports a given element and returns the number of solids found and exported from it.\n\n<p>If the element is a group, this method is called recursively on the group members, so the return value may be greater than one:\n\n<pre class=\"code\">\n<span class=\"blue\">int</span> ExportElement(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Group</span> group = e <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != group )\n  {\n    <span class=\"blue\">int</span> n = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id \n      <span class=\"blue\">in</span> group.GetMemberIds() )\n    {\n      <span class=\"teal\">Element</span> e2 = e.Document.GetElement(\n        id );\n \n      n += ExportElement( emitter, e2, opt );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( e );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e.Category )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Element '{0}' has no \"</span>\n      + <span class=\"maroon\">\"category.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unable to access \"</span>\n      + <span class=\"maroon\">\"solid for element {0}.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Material</span> material;\n  <span class=\"teal\">Color</span> color;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n  {\n    material = e.Document.GetElement(\n      face.MaterialElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n    color = ( <span class=\"blue\">null</span> == material )\n      ? <span class=\"blue\">null</span>\n      : material.Color;\n \n    emitter.EmitFace( face, color );\n  }\n  <span class=\"blue\">return</span> 1;\n}\n</pre>\n<a name=\"9\"></a>\n<h4>Exporting all Collected Elements</h4>\n<p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Exporting an Element",
    "local_header_href": "#exporting-an-element",
    "chunk_text": "<h4>Exporting an Element</h4><p>The ExportElement helper method exports a given element and returns the number of solids found and exported from it.\n\n<p>If the element is a group, this method is called recursively on the group members, so the return value may be greater than one:\n\n<pre class=\"code\">\n<span class=\"blue\">int</span> ExportElement(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">Element</span> e,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"teal\">Group</span> group = e <span class=\"blue\">as</span> <span class=\"teal\">Group</span>;\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != group )\n  {\n    <span class=\"blue\">int</span> n = 0;\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id \n      <span class=\"blue\">in</span> group.GetMemberIds() )\n    {\n      <span class=\"teal\">Element</span> e2 = e.Document.GetElement(\n        id );\n \n      n += ExportElement( emitter, e2, opt );\n    }\n    <span class=\"blue\">return</span> n;\n  }\n \n  <span class=\"blue\">string</span> desc = <span class=\"teal\">Util</span>.ElementDescription( e );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == e.Category )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Element '{0}' has no \"</span>\n      + <span class=\"maroon\">\"category.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Solid</span> solid = GetSolid( e, opt );\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == solid )\n  {\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Unable to access \"</span>\n      + <span class=\"maroon\">\"solid for element {0}.\"</span>, desc );\n \n    <span class=\"blue\">return</span> 0;\n  }\n \n  <span class=\"teal\">Material</span> material;\n  <span class=\"teal\">Color</span> color;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n  {\n    material = e.Document.GetElement(\n      face.MaterialElementId ) <span class=\"blue\">as</span> <span class=\"teal\">Material</span>;\n \n    color = ( <span class=\"blue\">null</span> == material )\n      ? <span class=\"blue\">null</span>\n      : material.Color;\n \n    emitter.EmitFace( face, color );\n  }\n  <span class=\"blue\">return</span> 1;\n}\n</pre>\n<a name=\"9\"></a>\n<h4>Exporting all Collected Elements</h4>\n<p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Exporting all Collected Elements",
    "local_header_href": "#exporting-all-collected-elements",
    "chunk_text": "<h4>Exporting all Collected Elements</h4><p>The ExportElements helper method exports all elements returned by a filtered element collector and reports the results:\n\n<pre class=\"code\">\n<span class=\"blue\">void</span> ExportElements(\n  <span class=\"teal\">IJtFaceEmitter</span> emitter,\n  <span class=\"teal\">FilteredElementCollector</span> collector,\n  <span class=\"teal\">Options</span> opt )\n{\n  <span class=\"blue\">int</span> nElements = 0;\n  <span class=\"blue\">int</span> nSolids = 0;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    ++nElements;\n \n    nSolids += ExportElement( emitter, e, opt );\n  }\n \n  <span class=\"blue\">int</span> nFaces = emitter.GetFaceCount();\n  <span class=\"blue\">int</span> nTriangles = emitter.GetTriangleCount();\n  <span class=\"blue\">int</span> nVertices = emitter.GetVertexCount();\n \n  <span class=\"blue\">string</span> msg = <span class=\"blue\">string</span>.Format(\n    <span class=\"maroon\">\"{0} element{1} with {2} solid{3}, \"</span>\n    + <span class=\"maroon\">\"{4} face{5}, {6} triangle{7} and \"</span>\n    + <span class=\"maroon\">\"{8} vertice{9} exported.\"</span>,\n    nElements, <span class=\"teal\">Util</span>.PluralSuffix( nElements ),\n    nSolids, <span class=\"teal\">Util</span>.PluralSuffix( nSolids ),\n    nFaces, <span class=\"teal\">Util</span>.PluralSuffix( nFaces ),\n    nTriangles, <span class=\"teal\">Util</span>.PluralSuffix( nTriangles ),\n    nVertices, <span class=\"teal\">Util</span>.PluralSuffix( nVertices ) );\n \n  InfoMsg( msg );\n}\n</pre>\n<a name=\"10\"></a>\n<h4>Exporter Mainline</h4>\n<p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Exporter Mainline",
    "local_header_href": "#exporter-mainline",
    "chunk_text": "<h4>Exporter Mainline</h4><p>The external command mainline sets up a filtered element collector to define all elements to be exported.\n\n<p>It supports pre-selecting specific elements, in which case only those are used.\n\n<p>Even when limiting the filtered element collector to a predefined set, at least one filter must still be applied, or the filtered element collector will throw an exception.\n\n<p>I chose to apply the WhereElementIsNotElementType and WhereElementIsViewIndependent in all cases.\n\n<p>The user is prompted to select an output file, the exporter is instantiated, and the job is done:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"green\">// Determine elements to export</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector = <span class=\"blue\">null</span>;\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">SelElementSet</span> set = uidoc.Selection.Elements;\n \n  <span class=\"blue\">int</span> n = set.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"green\">// If any elements were preselected,</span>\n    <span class=\"green\">// export those to OBJ</span>\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids = set\n      .Cast&lt;<span class=\"teal\">Element</span>&gt;()\n      .Select&lt;<span class=\"teal\">Element</span>, <span class=\"teal\">ElementId</span>&gt;( e =&gt; e.Id )\n      .ToArray&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc, ids );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// If nothing was preselected, export </span>\n    <span class=\"green\">// all model elements to OBJ</span>\n \n    collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n  }\n \n  collector.WhereElementIsNotElementType()\n      .WhereElementIsViewIndependent();\n \n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == _export_folder_name )\n  {\n    _export_folder_name = <span class=\"teal\">Path</span>.GetTempPath();\n  }\n \n  <span class=\"blue\">string</span> filename = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">if</span>( !FileSelect( _export_folder_name, \n    <span class=\"blue\">out</span> filename ) )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n  }\n \n  _export_folder_name \n    = <span class=\"teal\">Path</span>.GetDirectoryName( filename );\n \n  <span class=\"teal\">ObjExporter</span> exporter = <span class=\"blue\">new</span> <span class=\"teal\">ObjExporter</span>();\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  ExportElements( exporter, collector, opt );\n \n  exporter.ExportTo( filename );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<a name=\"11\"></a>\n<h4>Export Results</h4>\n<p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p>\n<center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center>\n<p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p>\n<center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center>\n<p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p>\n<center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center>\n<p>The following object counts are reported in this case:</p>\n<center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center>\n<p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0792_obj_export_v1",
    "header_text": "Export Results",
    "local_header_href": "#export-results",
    "chunk_text": "<h4>Export Results</h4><p>Here is the result of exporting a single wall. \nIt is actually one of the end walls in the standard Revit sample project rac_advanced_sample_project.rvt:</p><center>\n<img alt=\"A single wall in OBJ\" src=\"img/obj_export_complex_wall.png\"/>\n</center><p>Here are the resulting object counts of resulting elements, faces, triangles, etc.:</p><center>\n<img alt=\"Single wall object counts\" src=\"img/obj_export_complex_wall_msg.png\"/>\n</center><p>Running the same command without preselecting anything exports the entire model.\nAgain, using rac_advanced_sample_project.rvt, the result looks like this:</p><center>\n<img alt=\"Entire model in OBJ\" src=\"img/obj_export_entire_model.png\"/>\n</center><p>The following object counts are reported in this case:</p><center>\n<img alt=\"Entire model object counts\" src=\"img/obj_export_entire_model_msg.png\"/>\n</center><p>The resulting OBJ file <a href=\"src/ObjExport/test/sample_model.obj\">sample_model.obj</a> is 5 MB in size, which is pretty tolerable considering all faces are completely triangulated.\n\n<p>As you can see in both of these cases, the number of faces is significantly higher than the number of vertices.\nJust imagine what the number of vertices and resulting file size would be like if I had not gone to the effort of eliminating duplicate vertices.\nThe vertex count would simply have been three times the triangle count in both cases, i.e. 82 * 3 = 246 instead of 43, a factor of 5.72, and 163964 * 3 = 491892 instead of 86527, a factor of 5.68.\n</p></p>"
  }
]