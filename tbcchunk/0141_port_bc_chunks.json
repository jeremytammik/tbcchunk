[
  {
    "original_filename": "0141_port_bc",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n</style>"
  },
  {
    "original_filename": "0141_port_bc",
    "header_text": "Porting the Building Coder Samples",
    "local_header_href": "#porting-the-building-coder-samples",
    "chunk_text": "<h3>Porting the Building Coder Samples</h3><p>Today is actually a bridging day here in Neuch√¢tel, following the \n\n<a href=\"http://en.wikipedia.org/wiki/Ascension_Day\">\nAscension Day</a>\n\nholiday yesterday. \nI want to finish off a few urgent things before going on vacation for the next two weeks with my kids, so I am taking the opportunity to post this anyway.</p><p>I finally got around to porting the Building Coder sample code to the Revit 2010 API.\nI was leaving it in 2009 for as long as possible so as not to force anybody to update too early.\nOn the other hand, I hope that this is not too late either, and that nobody has been waiting urgently for a 2010 port.\nNow, on this replacement machine I am working on, I no longer have Revit 2009 or Visual Studio 2005 installed, so I am forced to update in order to use the samples at all.\nSimply opening the solution file in Visual Studio 2008 and compiling fails, and we will discuss why and how to fix this.\nI actually expected the recompilation on 2010 to be completely trivial, but some issues did crop up which are worth mentioning.</p><p>Here is a list of the errors on simply opening the Visual Studio 2005 solution in Visual Studio 2008 and recompiling.\nFor the sake of better readability, I removed the full path name of the source files.\nCopy to an editor to see the full line length:</p><pre>\n------ Build started: Project: BuildingCoder, Configuration: Debug Any CPU ------\nc:\\WINDOWS\\Microsoft.NET\\Framework\\v3.5\\Csc.exe /noconfig /nowarn:1701,1702 /errorreport:prompt /warn:4 /define:DEBUG;TRACE /reference:\"..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\Program Files\\Autodesk Revit Architecture 2010\\Program\\RevitAPI.dll\" /reference:c:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\System.dll /reference:c:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\System.Drawing.dll /reference:c:\\WINDOWS\\Microsoft.NET\\Framework\\v2.0.50727\\System.Windows.Forms.dll /debug+ /debug:full /optimize- /out:obj\\Debug\\BuildingCoder.dll /resource:obj\\Debug\\BuildingCoder.CmdLinkedFileElementsForm.resources /resource:obj\\Debug\\BuildingCoder.CmdWindowHandleForm.resources /target:library CmdAzimuth.cs CmdBoundingBox.cs CmdColumnRound.cs CmdLinkedFileElements.cs CmdLinkedFileElementsForm.cs CmdLinkedFileElementsForm.Designer.cs CmdListRailingTypes.cs CmdNestedInstanceGeo.cs CmdNewArea.cs CmdNewBeamTypeInstance.cs CmdNewColumnTypeInstance.cs CmdEditFloor.cs CmdFilterPerformance.cs CmdGetMaterials.cs CmdLinkedFiles.cs CmdListViews.cs CmdNewRailing.cs CmdOmniClassParams.cs CmdPlanTopology.cs CmdRoomWallAdjacency.cs CmdSlabBoundaryArea.cs CmdSlopedWall.cs CmdTransformedCoords.cs CmdWallLayerVolumes.cs CmdWallProfileArea.cs CmdListWalls.cs CmdRelationshipInverter.cs CmdSlabSides.cs CmdSlabBoundary.cs CmdWallDimensions.cs CmdWallLayers.cs CmdWallProfile.cs CmdWindowHandle.cs CmdWindowHandleForm.cs CmdWindowHandleForm.Designer.cs Creator.cs Properties\\AssemblyInfo.cs Util.cs CmdWallNeighbours.cs\nCmdWallNeighbours.cs(64,26): error CS0029: Cannot implicitly convert type 'Autodesk.Revit.ElementArray' to 'System.Collections.Generic.List<autodesk.revit.element>'\nCmdNewBeamTypeInstance.cs(83,14): error CS1502: The best overloaded method match for 'Autodesk.Revit.Document.LoadFamily(string, out Autodesk.Revit.Elements.Family)' has some invalid arguments\nCmdNewBeamTypeInstance.cs(83,40): error CS1620: Argument '2' must be passed with the 'out' keyword\nCmdNewColumnTypeInstance.cs(90,14): error CS1502: The best overloaded method match for 'Autodesk.Revit.Document.LoadFamily(string, out Autodesk.Revit.Elements.Family)' has some invalid arguments\nCmdNewColumnTypeInstance.cs(90,40): error CS1620: Argument '2' must be passed with the 'out' keyword\nCmdColumnRound.cs(35,44): error CS1061: 'Autodesk.Revit.Elements.Family' does not contain a definition for 'SolidForms' and no extension method 'SolidForms' accepting a first argument of type 'Autodesk.Revit.Elements.Family' could be found (are you missing a using directive or an assembly reference?)\nCmdColumnRound.cs(39,35): error CS1061: 'Autodesk.Revit.Elements.Sketch' does not contain a definition for 'CurveLoop' and no extension method 'CurveLoop' accepting a first argument of type 'Autodesk.Revit.Elements.Sketch' could be found (are you missing a using directive or an assembly reference?)\nCmdNestedInstanceGeo.cs(165,50): error CS1061: 'Autodesk.Revit.Elements.Family' does not contain a definition for 'Components' and no extension method 'Components' accepting a first argument of type 'Autodesk.Revit.Elements.Family' could be found (are you missing a using directive or an assembly reference?)\n\nCompile complete -- 8 errors, 0 warnings\n========== Build: 0 succeeded or up-to-date, 1 failed, 0 skipped ==========\n</autodesk.revit.element></pre><p>The first error CS0029 is reporting that an 'Autodesk.Revit.ElementArray' cannot be converted to a generic list of elements in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/wall-graph.html\">\nCmdWallNeighbours</a>.\n\nThis makes perfect sense, because get_ElementsAtJoin now returns an instance of the custom Revit API collection class ElementArray instead of a standard generic collection class provided by .NET.\nTherefore, we also have to modify the following iteration over the collection returned.\nActually, the only change required is to replace the property Count by Size.</p><p>The next four errors are trivial to fix, CS1502 and CS1620 in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-beam.html\">\nCmdNewBeamTypeInstance</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/inserting-a-column.html\">\nCmdNewColumnTypeInstance</a>.\n\nThey are all four caused by the second argument of one of the overloads of the LoadFamily method changing from a reference to an output argument, so the keyword 'ref' needs to be replaced by 'out'.</p><p>The two CS1061 errors in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/cylindrical-column.html\">\nCmdColumnRound</a>\n\noccur in the method IsColumnRound, which was written to demonstrate an approach that can only be used in the Revit 2009 API.\nThe classes used have been removed in the Revit 2010 API, so this method can no longer be compiled.\nSince it is not used anyway, I can simply comment it out.</p><p>The only serious change is required to fix the error CS1061 in\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nCmdNestedInstanceGeo</a>.\n\nThere we use the Revit 2009 API property FamilyInstance.Symbol.Family.Components to obtain the nested family instances within the top level family instance.\nThis is what the original code looks like:</p><pre class=\"code\">\n<span class=\"teal\">ElementSet</span> components = inst.Symbol.Family.Components;\nn = components.Size;\n</pre><p>The Components property has been removed in the Revit 2010 API, since we can iterate through the elements of a family just like any other document.\nHere is a note about this from in the description of the family API in the What's New section of the RevitAPI.chm help file:\n\n<p style=\"color:darkblue\">\"New document methods - Document.LoadFamily and Document.EditFamily - are introduced to bring families from the Family Editor to the Project environment and vice versa.  These methods can be used to examine the contents of the family in terms of its elements, parameters and types; as a result, the properties of Family which access the contents have been removed (Family.SolidForms, Family.VoidForms, Family.Components, Family.LoadedSymbols, Family.Others).\"\n\n<p>Therefore, we have to port the code from the 2009 to the 2010 API.\nWe can use doc.EditFamily to obtain a Document instance for the family document, and then work with its elements using the standard document element access methods as follows:</p>\n<pre class=\"code\">\n<span class=\"teal\">Document</span> fdoc = doc.EditFamily( inst.Symbol.Family );\n\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt; components = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">RvtElement</span>&gt;();\nfdoc.get_Elements( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ), components );\nn = components.Count;\n</pre>\n<p>Here is\n\n<a href=\"zip/bc11032.zip\">\nversion 1.1.0.32</a>\n\nof the complete Visual Studio 2008 solution of The Building Coder sample code.\nThis is the first version for Revit 2010, and the first one using Visual Studio 2008 instead of 2005.</p>\n<h3>RvtSamples Conversion from 2009 to 2010</h3>\n<p>As you probably know by now, I use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/loading-sdk-sam.html\">\nRvtSamples</a>\n\nto load the external commands defined by the Revit SDK samples into Revit.\nI also use it to provide access to all my additional sample commands by making use of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/loading-the-building-coder-samples.html\">\ninclude functionality</a>\n\nI implemented, which is now part of the standard SDK distribution.</p>\n<p>The format used in the text file RvtSamples.txt used to drive RvtSamples changed from Revit 2009 to 2010 in order to add support for the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/revit-2010-ribbon-api.html\">\nribbon Add-Ins tab</a>\n\nand button images.</p>\n<p>For Revit 2009, RvtSamples expected four lines of information for each entry to specify a hierarchical menu item definition for an external command.\nThe entry for the first Building Coder command looks like this:</p>\n<pre>\n/&amp;ADN/&amp;Bc/List Walls\nList wall lengths and areas\nC:\\...\\BuildingCoder.dll\nBuildingCoder.CmdListWalls\n</pre>\n<p>This specifies that a menu entry ADN &gt; Bc &gt; List walls should be generated in the Revit menu system.\nSelecting it in the user interface launches the external command defined by the BuildingCoder.CmdListWalls class loaded from the specified assembly.</p>\n<p>In Revit 2010, there is no longer a hierarchical menu system to install menu entries in.\nInstead, all external commands are located in the ribbon Add-Ins tab, either under the External Tools pull down button or in an additional pane defined by an external application.\nOptionally, buttons can be specified as well.\nTherefore, the new 2010 RvtSamples format for defining a similar entry uses seven lines which might look like this:</p>\n<pre>\nADN Bc\nList Walls\nList wall lengths and areas\nLargeImage:\nImage:\nC:\\...\\BuildingCoder.dll\nBuildingCoder.CmdListWalls\n</pre>\n<p>I used regular expressions in the Visual Studio search and replace dialogue to convert from old format to the new one.\nI start the search and replace dialogue with Edit &gt; Find and Replace &gt; Quick Replace, and then enter the following regular search expression in 'Find what':\n\n<pre>\n/&amp;ADN/&amp;Bc/{.*}\\n{.*}\\n\n</pre>\n\nIt specifies a line starting with \"/&amp;ADN/&amp;Bc/\" and followed by anything at all, which is tagged, followed by another line, whose contents are also tagged.\nThe first tagged expression is the menu entry, the second is the description.\nI enter the following in 'Replace with':</p>\n<pre>\nADN Bc\\n\\1\\n\\2\\nLargeImage:\\nImage:\\n\n</pre>\n<p>That splits the menu entry text and description onto separate lines, followed by two additional lines for the optional large and small images.</p>\n<p>Applying this search and replace action to the example shown above achieves the desired conversion, making it easy and comfortable to reliably convert the entire list of entries.</p>\n</p></p>"
  },
  {
    "original_filename": "0141_port_bc",
    "header_text": "RvtSamples Conversion from 2009 to 2010",
    "local_header_href": "#rvtsamples-conversion-from-2009-to-2010",
    "chunk_text": "<h3>RvtSamples Conversion from 2009 to 2010</h3><p>As you probably know by now, I use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/loading-sdk-sam.html\">\nRvtSamples</a>\n\nto load the external commands defined by the Revit SDK samples into Revit.\nI also use it to provide access to all my additional sample commands by making use of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/loading-the-building-coder-samples.html\">\ninclude functionality</a>\n\nI implemented, which is now part of the standard SDK distribution.</p><p>The format used in the text file RvtSamples.txt used to drive RvtSamples changed from Revit 2009 to 2010 in order to add support for the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/revit-2010-ribbon-api.html\">\nribbon Add-Ins tab</a>\n\nand button images.</p><p>For Revit 2009, RvtSamples expected four lines of information for each entry to specify a hierarchical menu item definition for an external command.\nThe entry for the first Building Coder command looks like this:</p><pre>\n/&amp;ADN/&amp;Bc/List Walls\nList wall lengths and areas\nC:\\...\\BuildingCoder.dll\nBuildingCoder.CmdListWalls\n</pre><p>This specifies that a menu entry ADN &gt; Bc &gt; List walls should be generated in the Revit menu system.\nSelecting it in the user interface launches the external command defined by the BuildingCoder.CmdListWalls class loaded from the specified assembly.</p><p>In Revit 2010, there is no longer a hierarchical menu system to install menu entries in.\nInstead, all external commands are located in the ribbon Add-Ins tab, either under the External Tools pull down button or in an additional pane defined by an external application.\nOptionally, buttons can be specified as well.\nTherefore, the new 2010 RvtSamples format for defining a similar entry uses seven lines which might look like this:</p><pre>\nADN Bc\nList Walls\nList wall lengths and areas\nLargeImage:\nImage:\nC:\\...\\BuildingCoder.dll\nBuildingCoder.CmdListWalls\n</pre><p>I used regular expressions in the Visual Studio search and replace dialogue to convert from old format to the new one.\nI start the search and replace dialogue with Edit &gt; Find and Replace &gt; Quick Replace, and then enter the following regular search expression in 'Find what':\n\n<pre>\n/&amp;ADN/&amp;Bc/{.*}\\n{.*}\\n\n</pre>\n\nIt specifies a line starting with \"/&amp;ADN/&amp;Bc/\" and followed by anything at all, which is tagged, followed by another line, whose contents are also tagged.\nThe first tagged expression is the menu entry, the second is the description.\nI enter the following in 'Replace with':</p><pre>\nADN Bc\\n\\1\\n\\2\\nLargeImage:\\nImage:\\n\n</pre><p>That splits the menu entry text and description onto separate lines, followed by two additional lines for the optional large and small images.</p><p>Applying this search and replace action to the example shown above achieves the desired conversion, making it easy and comfortable to reliably convert the entire list of entries.</p>"
  }
]