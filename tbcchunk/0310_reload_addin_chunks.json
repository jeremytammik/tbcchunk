[
  {
    "original_filename": "0310_reload_addin",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0310_reload_addin",
    "header_text": "Reload an Add-In to Debug",
    "local_header_href": "#reload-an-add-in-to-debug",
    "chunk_text": "<h3>Reload an Add-In to Debug</h3><p>I received a very friendly suggestion from\n\n<a href=\"mailto:jmorse@corteksystems.com\">\nJohn Morse</a> of\n\n<a href=\"http://www.corteksystems.com\">\nCorTek, Inc</a> to\n\npublish his solution for reloading a Revit add-in into Revit without having to shut down and restart Revit each time.\n\nThis can greatly speed up debugging iterations.\n\n<p>In Revit 2008, it was possible to use the Visual Studio 'Edit and Continue' feature to achieve the same thing, but this functionality has been unavailable for Revit plug-ins for some time now, as we already noted a couple of times, for instance in comments from\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/installing-the-revit-2010-sdk.html?cid=6a00e553e16897883301156f4a1465970c#comment-6a00e553e16897883301156f4a1465970c\">\nJamie</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/64-bit-revit-api-issues.html?cid=6a00e553e168978833011570d63803970b#comment-6a00e553e168978833011570d63803970b\">\nEd Pitt</a>\n\n(<a href=\"http://www.cadsmart.net\">url</a>),\n\nwho also wrote about this topic in his own\n\n<a href=\"http://revit-programmer.blogspot.com/2009/06/debugging-with-revit-64-bit.html\">\nblog</a>.\n\n<p>There only official work-around that has been suggested for Revit 2009 is to code and debug in VSTA, which allows editing and re-executing code without restarting, and then port to your external command or other plug-in API application.\n\n<p>Another partial work-around that I use sometimes is to run Revit inside of the Visual Studio debugger with my project opened, like normal.\nIf I really want to edit some of the source files and continue debugging at the same time, I open the same project once again in another instance of Visual Studio and perform the edits there.\nHowever, you must not save the edits immediately, or the first Visual Studio instance will notice that and say that it cannot continue debugging without recompilation.\n\n<p>As also\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/04/installing-the-revit-2010-sdk.html?cid=6a00e553e16897883301156ff87103970c#comment-6a00e553e16897883301156ff87103970c\">\nmentioned</a>,\n\nthe Revit development team have looked at this issue and know how important it is for developers.\nIt is scheduled to be fixed, but nobody can say exactly when the fix will happen.\n\n<p>Guy Robinson presented a\n\n<a href=\"http://redbolts.com/blog\">\nsolution</a> to\n\nthis problem last June using the VSTA wrappers to reload a plug-in dynamically.\nPlease be aware that this solution will almost certainly stop working in some future release of Revit.\n\n<p>Now here is John's new solution to this problem:\n\n<span style=\"color:darkblue\">\n<p>i came up with a solution that might be beneficial to people that are building/debugging an Add-In for Revit.\n\n<p>i found that when testing/debugging an Add-In, you have to launch and close Revit each time you run your app.\nthat's a pain.\n\n<p>i came up with a way to dynamically load an app/dll to where you can leave Revit open.\n\n<p>i have a zip of two VS solutions that show this example.\none builds the initial DLL (which is loaded by Revit) and the bridge DLL (which is called by the initial DLL and is used for plugging/reading in external assemblies/dll's).  the other\nsolution is the main form application that gets called/plugged in through the bridge.\n\n<p>here is a RAR file\n\n<a href=\"zip/reload_addin.rar\">\nreload_addin.rar</a> containing the entire solution.\n\n<p>it includes a README file that explains everything.\nhere is what it says:</p>\n<hr/>\n<p>This solution was built in VS 2005.\n\n<p>Pay attention to paths that are referenced anywhere and everywhere.\nThis includes the references to the Revit.dll, which I have included in a directory under this solution;\nhowever, you can reference your own path.\nI built this solution under the C:\\Temp directory.\n\n<p>Under the Revit directory there are two solution directories, one API directory and two files.\n\n<h5>Contents</h5>\n<ul>\n<li>(Directory) Solution: RevitPlugin\n\n<ul>\n<li>Project: MainDLL – The main entry point for our add-in to Revit (see INI file entry below).\n<li>Project: Bridge – Called by the MainDLL to process a specific DLL that implement our IRevit\n\t\t     Interface and invoke methods within that DLL. This can be made to systematically\n\t\t     load multiple DLL's, etc...\n</li></li></ul>\n<li>(Directory) Solution MainForm:\n\n<ul>\n<li>Project: MainForm – This is the DLL that's loaded into the byte array from the Bridge DLL.\n\t\t       It's the Main Form that get's loaded and the main GUI that gets launched when\n\t\t       the RibbonPanel button gets clicked.\n</li></ul>\n<li>(Directory) Revit.API – Contains the RevitAPI.dll\n\n<li>(File) Revit.ini – The entry for the Revit.ini file. (Modify the count and reference as needed)\n\n<li>(File) README.txt – This file.\n</li></li></li></li></li></ul>\n<p>So there are two solutions: RevitPlugin and MainForm.\nOnce the two projects in the RevitPlugin solution are built and in place, you shouldn't have to rebuild them.\nThe MainForm solution is the one that you continue to rebuild as you develop and debug.\n\n<h5>Steps</h5>\n<p>For a seamless test/run, uncrunch the RAR file to where the Revit directory is under the C:\\Temp directory, i.e., C:\\Temp\\Revit.\n\n<ol>\n<li>Modify the Revit.ini file to accommodate the MainDLL.\n<li>Build the RevitPlugin solution in a separate instance of VS.\n<li>Build the MainForm solution in a different instance of VS.\n<li>Launch Revit by itself or by debug in VS from step 2.\n<li>If you can click and successfully run the app from the Add-Ins ribbon panel, then you've correctly set everything up the right way.\n<li>Now close the MainForm app that was launched from the Add-Ins ribbon button, but LEAVE REVIT OPENED.\n<li>Go back to the MainForm solution/project in VS (step 3) and modify as needed. Rebuild the solution.\n<li>Launch again from the Add-Ins ribbon button to experience the changes.\n</li></li></li></li></li></li></li></li></ol>\n<h5>Advantage</h5>\n<p>Independently build the MainForm solution/project and test it without having to close and reopen Revit every time.\n\n<h5>Disadvantage</h5>\n<p>MainForm cannot be debugged in Visual Studio due to the fact that its DLL is loaded into a byte array from the Bridge DLL.\n\n<p>You can contact me here at the email address given above.\nHowever, please do not call CorTek, Inc asking for me.\n\nThanks...\n\n<hr/>\n</p></p></p></p></p></p></p></p></p></p></p></p></p></span>\n<p>Thank you very much John for this great solution!\n\n<p>For more information on the implementation details, please have a look at the commented source code.\nThe main trick to avoid locking the DLL to disk when it has been loaded is to call File.ReadAllBytes to read the DLL contents into memory, and then load the assembly using the Assembly.Load method passing in the memory block instead of the physical assembly filename.\n\n<p>I am sure it will be of great use to many other Revit developers, and hope that it will work with future versions of the Revit API as well, until we someday get the 'Edit and Continue' feature properly and officially supported again.\n\n<p>By the way, in this sample, the RevitAPI.dll assembly is referenced with the 'Copy Local' flag set to true, and that is also why it is included in its own directory in the archive file.\nThis is normally not recommended, because it can cause issues, especially when trying to debug in Visual Studio.\nAs mentioned above, however, the approach taken, loading the assembly from a byte array in memory instead of from the assembly file on disk will cause problems for debugging anyway.\nThis may not be the best solution, per se, but it works for John because it is more important for him to avoid relaunching Revit every single time to debug, and you can dump values to the console or GUI when running the solution to see what's going on in the code.\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0310_reload_addin",
    "header_text": "Contents",
    "local_header_href": "#contents",
    "chunk_text": "<h5>Contents</h5><ul>\n<li>(Directory) Solution: RevitPlugin\n\n<ul>\n<li>Project: MainDLL – The main entry point for our add-in to Revit (see INI file entry below).\n<li>Project: Bridge – Called by the MainDLL to process a specific DLL that implement our IRevit\n\t\t     Interface and invoke methods within that DLL. This can be made to systematically\n\t\t     load multiple DLL's, etc...\n</li></li></ul>\n<li>(Directory) Solution MainForm:\n\n<ul>\n<li>Project: MainForm – This is the DLL that's loaded into the byte array from the Bridge DLL.\n\t\t       It's the Main Form that get's loaded and the main GUI that gets launched when\n\t\t       the RibbonPanel button gets clicked.\n</li></ul>\n<li>(Directory) Revit.API – Contains the RevitAPI.dll\n\n<li>(File) Revit.ini – The entry for the Revit.ini file. (Modify the count and reference as needed)\n\n<li>(File) README.txt – This file.\n</li></li></li></li></li></ul><p>So there are two solutions: RevitPlugin and MainForm.\nOnce the two projects in the RevitPlugin solution are built and in place, you shouldn't have to rebuild them.\nThe MainForm solution is the one that you continue to rebuild as you develop and debug.\n\n<h5>Steps</h5>\n<p>For a seamless test/run, uncrunch the RAR file to where the Revit directory is under the C:\\Temp directory, i.e., C:\\Temp\\Revit.\n\n<ol>\n<li>Modify the Revit.ini file to accommodate the MainDLL.\n<li>Build the RevitPlugin solution in a separate instance of VS.\n<li>Build the MainForm solution in a different instance of VS.\n<li>Launch Revit by itself or by debug in VS from step 2.\n<li>If you can click and successfully run the app from the Add-Ins ribbon panel, then you've correctly set everything up the right way.\n<li>Now close the MainForm app that was launched from the Add-Ins ribbon button, but LEAVE REVIT OPENED.\n<li>Go back to the MainForm solution/project in VS (step 3) and modify as needed. Rebuild the solution.\n<li>Launch again from the Add-Ins ribbon button to experience the changes.\n</li></li></li></li></li></li></li></li></ol>\n<h5>Advantage</h5>\n<p>Independently build the MainForm solution/project and test it without having to close and reopen Revit every time.\n\n<h5>Disadvantage</h5>\n<p>MainForm cannot be debugged in Visual Studio due to the fact that its DLL is loaded into a byte array from the Bridge DLL.\n\n<p>You can contact me here at the email address given above.\nHowever, please do not call CorTek, Inc asking for me.\n\nThanks...\n\n<hr/>\n</p></p></p></p></p>"
  },
  {
    "original_filename": "0310_reload_addin",
    "header_text": "Steps",
    "local_header_href": "#steps",
    "chunk_text": "<h5>Steps</h5><p>For a seamless test/run, uncrunch the RAR file to where the Revit directory is under the C:\\Temp directory, i.e., C:\\Temp\\Revit.\n\n<ol>\n<li>Modify the Revit.ini file to accommodate the MainDLL.\n<li>Build the RevitPlugin solution in a separate instance of VS.\n<li>Build the MainForm solution in a different instance of VS.\n<li>Launch Revit by itself or by debug in VS from step 2.\n<li>If you can click and successfully run the app from the Add-Ins ribbon panel, then you've correctly set everything up the right way.\n<li>Now close the MainForm app that was launched from the Add-Ins ribbon button, but LEAVE REVIT OPENED.\n<li>Go back to the MainForm solution/project in VS (step 3) and modify as needed. Rebuild the solution.\n<li>Launch again from the Add-Ins ribbon button to experience the changes.\n</li></li></li></li></li></li></li></li></ol>\n<h5>Advantage</h5>\n<p>Independently build the MainForm solution/project and test it without having to close and reopen Revit every time.\n\n<h5>Disadvantage</h5>\n<p>MainForm cannot be debugged in Visual Studio due to the fact that its DLL is loaded into a byte array from the Bridge DLL.\n\n<p>You can contact me here at the email address given above.\nHowever, please do not call CorTek, Inc asking for me.\n\nThanks...\n\n<hr/>\n</p></p></p></p>"
  },
  {
    "original_filename": "0310_reload_addin",
    "header_text": "Advantage",
    "local_header_href": "#advantage",
    "chunk_text": "<h5>Advantage</h5><p>Independently build the MainForm solution/project and test it without having to close and reopen Revit every time.\n\n<h5>Disadvantage</h5>\n<p>MainForm cannot be debugged in Visual Studio due to the fact that its DLL is loaded into a byte array from the Bridge DLL.\n\n<p>You can contact me here at the email address given above.\nHowever, please do not call CorTek, Inc asking for me.\n\nThanks...\n\n<hr/>\n</p></p></p>"
  },
  {
    "original_filename": "0310_reload_addin",
    "header_text": "Disadvantage",
    "local_header_href": "#disadvantage",
    "chunk_text": "<h5>Disadvantage</h5><p>MainForm cannot be debugged in Visual Studio due to the fact that its DLL is loaded into a byte array from the Bridge DLL.\n\n<p>You can contact me here at the email address given above.\nHowever, please do not call CorTek, Inc asking for me.\n\nThanks...\n\n<hr/>\n</p></p>"
  }
]