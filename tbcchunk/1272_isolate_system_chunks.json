[
  {
    "original_filename": "1272_isolate_system",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1272_isolate_system",
    "header_text": "Isolating Elements of a Given System",
    "local_header_href": "#isolating-elements-of-a-given-system",
    "chunk_text": "<h3>Isolating Elements of a Given System</h3><p>I am very glad to present another post contributed by Victor Chekalin, or Виктор Чекалин, who already shared many valuable insights and in-depth Revit API research in the past:</p><p>On the <a href=\"http://adn-cis.org/forum/index.php?topic=1795.0\">Russian developer forum</a>, the user <i>goblya</i> asked an interesting question. He needs to hide all elements except those that belong to a  specific given system.</p><p>There are some interesting moments in the solution.</p><p>The main idea is to create the filter, assign this filter to the active view and set visibility to false for this filter. The main problem is how to create a suitable filter.</p><p>User almost solved it. Here is his initial code:</p><pre class=\"code\">\n  <span class=\"teal\">Parameter</span> Namesystem = elem.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.RBS_SYSTEM_NAME_PARAM );\n \n  <span class=\"teal\">View</span> view = doc.ActiveView;\n \n  IList categories = <span class=\"blue\">new</span> List();\n\n  categories.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(\n    <span class=\"teal\">BuiltInCategory</span>.OST_PlaceHolderDucts ) );\n \n  categories.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(\n    <span class=\"teal\">BuiltInCategory</span>.OST_DuctLinings ) );\n \n  categories.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(\n    <span class=\"teal\">BuiltInCategory</span>.OST_DuctInsulations ) );\n \n  categories.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(\n    <span class=\"teal\">BuiltInCategory</span>.OST_DuctTerminal ) );\n \n  categories.Add( <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>(\n    <span class=\"teal\">BuiltInCategory</span>.OST_MechanicalEquipment ) );\n \n  IList rules = <span class=\"blue\">new</span> List();\n \n  rules.Add( <span class=\"teal\">ParameterFilterRuleFactory</span>\n    .CreateNotContainsRule( Namesystem.Id,\n      Namesystem.AsString(), <span class=\"blue\">true</span> ) );\n \n  <span class=\"teal\">ParameterFilterElement</span> filter = <span class=\"blue\">null</span>;\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n    doc, <span class=\"maroon\">\"Create and Apply Filter\"</span> ) )\n  {\n    t.Start();\n    filter = <span class=\"teal\">ParameterFilterElement</span>.Create(\n      doc, <span class=\"maroon\">\"2222\"</span>, categories, rules );\n    view.AddFilter( filter.Id );\n    t.Commit();\n  }\n \n  <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n    doc, <span class=\"maroon\">\"Set Visibility Appearance\"</span> ) )\n  {\n    t.Start();\n    view.SetFilterVisibility( filter.Id, <span class=\"blue\">false</span> );\n    t.Commit();\n  }\n</pre><p>Nevertheless, some of the elements were still not hidden, as he missed some categories.</p><p>So the challenge is to create the filter.</p><p>In the filter, you always have to set categories. In theory, it is possible to get all categories whose names start with 'OST_Duct', but in that case it will work only with Mechanical systems.</p><p>The task requires us to hide absolutely all elements. We should not consider categories in this case at all.</p><p>However, the method ParameterFilterElement.Create requires the list of categories anyway. That means we have to pass all possible categories to the method.</p><p>To get all categories very easy:</p><pre class=\"code\">\n  <span class=\"blue\">var</span> allCategories =\n    doc.Settings.Categories\n    .OfType&lt;<span class=\"teal\">Category</span>&gt;()\n    .Select( c =&gt; c.Id )\n    .ToList();\n \n  <span class=\"blue\">var</span> filter = <span class=\"teal\">ParameterFilterElement</span>.Create(\n    doc,\n    <span class=\"maroon\">\"All elements except the system \"</span> + system.Name ),\n    allCategories,\n    rules );\n</pre><p>Failed.</p><p>This produces the exception 'One of the given categories is not filterable'.</p><p>OK. Not all categories can be included to the filter.</p><p>Somehow we need to get only the categories what can be applied to the filter.</p><p>After some researching of the RevitAPI.chm, I found a useful class, ParameterFilterUtilities.</p><p>The method ParameterFilterUtilities.GetAllFilterableCategories returns exactly that we need.</p><p>The second attempt:</p><pre class=\"code\">\n  <span class=\"blue\">var</span> filter = <span class=\"teal\">ParameterFilterElement</span>.Create(\n    doc,\n    <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"___ ________, _____ _______ {0}\"</span>,\n      system.Name ),\n    <span class=\"teal\">ParameterFilterUtilities</span>.GetAllFilterableCategories(),\n    rules );\n</pre><p>Failed again.</p><p>One of the given rules refers to a parameter that doesn't apply to this filter's categories.</p><p>It seems like we need two filters:</p><ul>\n<li>All elements that does not have the parameter 'System Name'</li>\n<li>All elements that have the parameter 'System Name' and the value of the parameter does not contain the specific system name.</li>\n</ul><p>Looking again to the methods of the class ParameterFilterUtilities.</p><p>There is no method that does exactly what we need.</p><p>Nevertheless, there are some methods we can use to get there.</p><p>The method ParameterFilterUtilities.GetFilterableParametersInCommon returns the list of the parameters applicable to the given categories.</p><p>For any category we can check whether we can use the specific parameter in that category or not.</p><p>As a result, I created the following method:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span><span class=\"green\">        </span>\n  <span class=\"gray\">///</span><span class=\"green\"> Returns the list of the categories what can be </span>\n  <span class=\"gray\">///</span><span class=\"green\"> used in filter by the specific parameter</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"doc\"&gt;</span><span class=\"green\">Document on which the filter </span>\n  <span class=\"gray\">///</span><span class=\"green\"> is applying</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"bip\"&gt;</span><span class=\"green\">BuiltInParameter</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"inverse\"&gt;</span><span class=\"green\">If true, the list will </span>\n  <span class=\"gray\">///</span><span class=\"green\"> be inverted. I.e. you will get the list of the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> categories what cannot be used in filter by </span>\n  <span class=\"gray\">///</span><span class=\"green\"> the specific parameter </span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;&lt;/returns&gt;</span>\n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt;\n    GetCategoriesApplicableForParameter(\n      <span class=\"teal\">Document</span> doc,\n      <span class=\"teal\">BuiltInParameter</span> bip,\n      <span class=\"blue\">bool</span> inverse = <span class=\"blue\">false</span> )\n  {\n    <span class=\"green\">// All categories available for filter.</span>\n \n    <span class=\"blue\">var</span> allCategories = <span class=\"teal\">ParameterFilterUtilities</span>\n      .GetAllFilterableCategories();\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; retResult\n      = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">ElementId</span>&gt;();\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> categoryId <span class=\"blue\">in</span> allCategories )\n    {\n      <span class=\"green\">// Get the list of paramteres </span>\n      <span class=\"green\">// compatible with the category.                </span>\n \n      <span class=\"blue\">var</span> applicableParameters\n        = <span class=\"teal\">ParameterFilterUtilities</span>\n          .GetFilterableParametersInCommon(\n            doc, <span class=\"blue\">new</span>[] { categoryId } );\n \n      <span class=\"green\">// If the parameter we are interested in is </span>\n      <span class=\"green\">// in the collection, add it to the result.</span>\n \n      <span class=\"blue\">if</span>( applicableParameters.Contains(\n        <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( bip ) ) )\n      {\n        retResult.Add( categoryId );\n      }\n    }\n \n    <span class=\"green\">// Invert if needed. </span>\n \n    <span class=\"blue\">if</span>( inverse )\n    {\n      retResult = allCategories.Where(\n        x =&gt; !retResult.Contains( x ) ).ToList();\n    }\n    <span class=\"blue\">return</span> retResult;\n  }\n</pre><p>Back to our task.</p><p>To get all categories that can be applied in the filter and allow to filter by 'System Name' parameter, we can use this code:</p><pre class=\"code\">\n  <span class=\"blue\">var</span> categoriesWithSystem =\n    GetCategoriesApplicableForParameter( doc,\n      <span class=\"teal\">BuiltInParameter</span>.RBS_SYSTEM_NAME_PARAM );\n</pre><p>And the list of categories without 'System Name' parameter.</p><pre class=\"code\">\n  <span class=\"blue\">var</span> categoriesWithoutSystemNameParameter =\n    GetCategoriesApplicableForParameter( doc,\n      <span class=\"teal\">BuiltInParameter</span>.RBS_SYSTEM_NAME_PARAM, <span class=\"blue\">true</span> );\n</pre><p>We need to remember that an element can belong to several systems.</p><p>In this case we have to consider all of them and create several filter rules:</p><pre class=\"code\">\n  <span class=\"green\">// An element can be assigned to the several systems.</span>\n  <span class=\"green\">// In this case System Name parameter has a comma-</span>\n  <span class=\"green\">// separated list of the systems.</span>\n  <span class=\"green\">// Create several rules.</span>\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FilterRule</span>&gt; rules = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">FilterRule</span>&gt;();\n \n  <span class=\"blue\">var</span> systems = systemName.Split( <span class=\"blue\">new</span>[] { <span class=\"maroon\">','</span> },\n    <span class=\"teal\">StringSplitOptions</span>.RemoveEmptyEntries );\n \n  <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> system <span class=\"blue\">in</span> systems )\n  {\n    rules.Add(\n      <span class=\"teal\">ParameterFilterRuleFactory</span>.CreateNotContainsRule(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInParameter</span>.RBS_SYSTEM_NAME_PARAM ),\n      system.Trim(), <span class=\"blue\">true</span> ) );\n  }\n</pre><p>The full code of the command:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n  <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n  <span class=\"teal\">Application</span> app = uiapp.Application;\n  <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n  <span class=\"teal\">Reference</span> r;\n \n  <span class=\"blue\">try</span>\n  {\n    r = uidoc.Selection.PickObject(\n      <span class=\"teal\">ObjectType</span>.Element,\n      <span class=\"blue\">new</span> <span class=\"teal\">SystemElementFilter</span>(),\n      <span class=\"maroon\">\"Select an alement of a system\"</span> );\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">OperationCanceledException</span> )\n  {\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Cancelled;\n \n  }\n \n  <span class=\"blue\">var</span> elem = doc.GetElement( r.ElementId );\n \n  <span class=\"blue\">var</span> systemNameParam =\n    elem.get_Parameter(\n      <span class=\"teal\">BuiltInParameter</span>.RBS_SYSTEM_NAME_PARAM );\n \n  <span class=\"blue\">if</span>( systemNameParam == <span class=\"blue\">null</span> )\n  {\n    message = <span class=\"maroon\">\"How did you do that?\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"blue\">var</span> view = doc.ActiveView;\n \n  <span class=\"blue\">var</span> categoriesWithSystem =\n    GetCategoriesApplicableForParameter( doc,\n      <span class=\"teal\">BuiltInParameter</span>.RBS_SYSTEM_NAME_PARAM );\n \n  <span class=\"blue\">var</span> categoriesWithoutSystemNameParameter =\n    GetCategoriesApplicableForParameter( doc,\n      <span class=\"teal\">BuiltInParameter</span>.RBS_SYSTEM_NAME_PARAM, <span class=\"blue\">true</span> );\n \n  <span class=\"blue\">var</span> systemName = systemNameParam.AsString();\n \n  <span class=\"green\">// An element can be assigned to the several systems.</span>\n  <span class=\"green\">// In this case System Name parameter has a comma-</span>\n  <span class=\"green\">// separated list of the systems.</span>\n  <span class=\"green\">// Create several rules.</span>\n \n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FilterRule</span>&gt; rules = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">FilterRule</span>&gt;();\n \n  <span class=\"blue\">var</span> systems = systemName.Split( <span class=\"blue\">new</span>[] { <span class=\"maroon\">','</span> },\n    <span class=\"teal\">StringSplitOptions</span>.RemoveEmptyEntries );\n \n  <span class=\"blue\">foreach</span>( <span class=\"blue\">var</span> system <span class=\"blue\">in</span> systems )\n  {\n    rules.Add(\n      <span class=\"teal\">ParameterFilterRuleFactory</span>.CreateNotContainsRule(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInParameter</span>.RBS_SYSTEM_NAME_PARAM ),\n      system.Trim(), <span class=\"blue\">true</span> ) );\n  }\n \n  <span class=\"blue\">using</span>( <span class=\"blue\">var</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    t.Start( <span class=\"maroon\">\"System isolate\"</span> );\n \n    <span class=\"green\">// Hide all elements which do no have a System </span>\n    <span class=\"green\">// Name parameter. Do not use this filter if </span>\n    <span class=\"green\">// you want to hide only the systems.</span>\n \n    <span class=\"teal\">ParameterFilterElement</span> filter1 =\n      <span class=\"teal\">ParameterFilterElement</span>.Create( doc,\n        <span class=\"maroon\">\"All elements without System Name parameter\"</span>,\n        categoriesWithoutSystemNameParameter );\n \n    view.AddFilter( filter1.Id );\n    view.SetFilterVisibility( filter1.Id, <span class=\"blue\">false</span> );\n \n \n    <span class=\"green\">// Hide elements which are not </span>\n    <span class=\"green\">// in the selected system</span>\n \n    <span class=\"teal\">ParameterFilterElement</span> filter2 =\n      <span class=\"teal\">ParameterFilterElement</span>.Create( doc,\n        <span class=\"blue\">string</span>.Format(\n          <span class=\"maroon\">\"All elements not in the systems {0}\"</span>,\n          systemName ),\n        categoriesWithSystem,\n        rules );\n \n    view.AddFilter( filter2.Id );\n    view.SetFilterVisibility( filter2.Id, <span class=\"blue\">false</span> );\n \n    t.Commit();\n  }\n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre><p>If you do not want to isolate architecture, and want to isolate only systems, do not apply the first filter.</p><p>Here are some results of running the command.</p><p>Before:</p><center>\n<img alt=\"Before\" src=\"img/vc_isolate_system_elements_1.png\" width=\"400\"/>\n</center><p>After:</p><center>\n<img alt=\"After\" src=\"img/vc_isolate_system_elements_2.png\" width=\"400\"/>\n</center><p>With the element in several systems.</p><p>Before:</p><center>\n<img alt=\"Before\" src=\"img/vc_isolate_system_elements_3.png\" width=\"400\"/>\n</center><p>After:</p><center>\n<img alt=\"After\" src=\"img/vc_isolate_system_elements_4.png\" width=\"400\"/>\n</center><p>The full source code is on <a href=\"https://github.com/chekalin-v/HideRevitSystems.git\">GitHub</a> and in the <a href=\"https://github.com/chekalin-v/HideRevitSystems/archive/master.zip\">archive</a>.</p><p>Many thanks to Victor for this interesting discussion and useful result!</p>"
  }
]