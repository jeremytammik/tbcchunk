[
  {
    "original_filename": "1765_autodim_filled_region",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- 15582252 [Create dimensions for Filled Region Boundary]\n  https://forums.autodesk.com/t5/revit-api-forum/create-dimensions-for-filled-region-boundary/m-p/8926301\n\ntwitter:\n\nAuto-dimensioning filled region boundaries using the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/dimfilledregion\n\nI am back from my break and picked up the question about creating dimensions for a filled region boundary\n&ndash; Programmatically creating dimensions for a filled region\n&ndash; Coding suggestion\n&ndash; Final solution...\n\nlinkedin:\n\nAuto-dimensioning filled region boundaries using the #RevitAPI\n\nhttp://bit.ly/dimfilledregion\n\nI am back from my break and picked up the question about creating dimensions for a filled region boundary:\n\n- Programmatically creating dimensions for a filled region\n- Coding suggestion\n- Final solution...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n-->"
  },
  {
    "original_filename": "1765_autodim_filled_region",
    "header_text": "Auto-Dimension Filled Region Boundary",
    "local_header_href": "#auto-dimension-filled-region-boundary",
    "chunk_text": "### Auto-Dimension Filled Region Boundary\n\nI am back from my break in the French Jura and looking at all the\ninteresting [Revit API forum discussions](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) again.\n\nOne that stands out and that I'll pick up to get back into the blogging rhythm again is Jorge Villarroel's question\nabout [creating dimensions for a filled region boundary](https://forums.autodesk.com/t5/revit-api-forum/create-dimensions-for-filled-region-boundary/m-p/8926301),\nanswered by Alexander [@aignatovich](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/1257478) [@CADBIMDeveloper](https://github.com/CADBIMDeveloper) Ignatovich, aka Александр Игнатович:\n\n- [Programmatically creating dimensions for a filled region](#2)\n- [Coding suggestion](#3)\n- [Final solution](#4)\n\n<center>\n<img src=\"img/filled_region_dimensions_auto.png\" alt=\"Filled regions auto-dimensioned\" width=\"209\">\n</center>"
  },
  {
    "original_filename": "1765_autodim_filled_region",
    "header_text": "Programmatically Creating Dimensions for a Filled Region",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Programmatically Creating Dimensions for a Filled Region\n\nI am working with dimensions for multiple objects.\nThe dimension creation method needs a `ReferenceArray` to work.\nNow, I need to create dimensions for a filled region:\n\n<center>\n<img src=\"img/filled_region.png\" alt=\"Filled region\" width=\"300\">\n<p style=\"font-size: 80%; font-style:italic\">Filled region</p>\n</center>\n\nI can create dimensions manually in the user interface using native commands, no API, just clicking, using \"Align Dimension\":\n\n<center>\n<img src=\"img/filled_region_dimensions.png\" alt=\"Dimensions for the filled region\" width=\"300\">\n<p style=\"font-size: 80%; font-style:italic\">Dimensions for the filled region</p>\n</center>\n\nHowever, I can't retrieve the reference for the boundary curves to create them programmatically.\n\nI used RevitLookup to search for some reference in the Filled Region sub-elements with no results.\n\nAlso tried to get the references from the `CurveLoop` curves, but again, with no results.\n\nAny tip of advice will be very well received."
  },
  {
    "original_filename": "1765_autodim_filled_region",
    "header_text": "Coding Suggestion",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Coding Suggestion\n\nHi!\n\nThe trick is to retrieve the filled region geometry using the appropriate view and setting `ComputeReferences` to true.\n\nTry this code:\n\n<pre class=\"code\">\n[<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;<span style=\"color:#2b91af;\">TransactionMode</span>.Manual&nbsp;)]\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">CreateFillledRegionDimensionsCommand</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IExternalCommand</span>\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;Execute(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementSet</span>&nbsp;elements&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;uiapp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;uidoc&nbsp;=&nbsp;uiapp.ActiveUIDocument;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;view&nbsp;=&nbsp;uidoc.ActiveGraphicalView;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;filledRegions&nbsp;=&nbsp;FindFilledRegions(&nbsp;doc,&nbsp;view.Id&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;transaction&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;filled&nbsp;regions&nbsp;dimensions&quot;</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Start();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;filledRegion&nbsp;<span style=\"color:blue;\">in</span>&nbsp;filledRegions&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateDimensions(&nbsp;filledRegion,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1&nbsp;*&nbsp;view.RightDirection&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CreateDimensions(&nbsp;filledRegion,&nbsp;view.UpDirection&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transaction.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded;\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;CreateDimensions(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilledRegion</span>&nbsp;filledRegion,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;dimensionDirection&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;document&nbsp;=&nbsp;filledRegion.Document;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;view&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">View</span>)&nbsp;document.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filledRegion.OwnerViewId&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;edgesDirection&nbsp;=&nbsp;dimensionDirection.CrossProduct(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view.ViewDirection&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;edges&nbsp;=&nbsp;FindRegionEdges(&nbsp;filledRegion&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;x&nbsp;=&gt;&nbsp;IsEdgeDirectionSatisfied(&nbsp;x,&nbsp;edgesDirection&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ToList();\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;edges.Count&nbsp;&lt;&nbsp;2&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;shift&nbsp;=&nbsp;<span style=\"color:#2b91af;\">UnitUtils</span>.ConvertToInternalUnits(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-10&nbsp;*&nbsp;view.Scale,&nbsp;<span style=\"color:#2b91af;\">DisplayUnitType</span>.DUT_MILLIMETERS&nbsp;)&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;edgesDirection;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;dimensionLine&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Line</span>.CreateUnbound(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filledRegion.get_BoundingBox(&nbsp;view&nbsp;).Min&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;shift,&nbsp;dimensionDirection&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;references&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReferenceArray</span>();\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;edge&nbsp;<span style=\"color:blue;\">in</span>&nbsp;edges&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;references.Append(&nbsp;edge.Reference&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;document.Create.NewDimension(&nbsp;view,&nbsp;dimensionLine,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;references&nbsp;);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsEdgeDirectionSatisfied(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Edge</span>&nbsp;edge,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;edgeDirection&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;edgeCurve&nbsp;=&nbsp;edge.AsCurve()&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;edgeCurve&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">false</span>;\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;edgeCurve.Direction.CrossProduct(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edgeDirection&nbsp;).IsAlmostEqualTo(&nbsp;<span style=\"color:#2b91af;\">XYZ</span>.Zero&nbsp;);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Edge</span>&gt;&nbsp;FindRegionEdges(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilledRegion</span>&nbsp;filledRegion&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;view&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">View</span>)&nbsp;filledRegion.Document.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filledRegion.OwnerViewId&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;options&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;View&nbsp;=&nbsp;view,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ComputeReferences&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>\n&nbsp;&nbsp;&nbsp;&nbsp;};\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;filledRegion\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.get_Geometry(&nbsp;options&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfType&lt;<span style=\"color:#2b91af;\">Solid</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.SelectMany(&nbsp;x&nbsp;=&gt;&nbsp;x.Edges.Cast&lt;<span style=\"color:#2b91af;\">Edge</span>&gt;()&nbsp;);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">FilledRegion</span>&gt;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;FindFilledRegions(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;document,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;viewId&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;collector&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document,&nbsp;viewId&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;collector\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">FilledRegion</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Cast&lt;<span style=\"color:#2b91af;\">FilledRegion</span>&gt;();\n&nbsp;&nbsp;}\n}\n</pre>\n\nIt produces something like this:\n\n<center>\n<img src=\"img/filled_region_dimensioned_by_ai.png\" alt=\"Filled regions dimensioned by Alexander's code\" width=\"422\">\n</center>\n\nDimensioning in Revit is one of my favorite topics &nbsp; :-)"
  },
  {
    "original_filename": "1765_autodim_filled_region",
    "header_text": "Final Solution",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Final Solution\n\nThanks, @aignatovich. I really appreciate it.\n\nYour suggestion was the solution to my problem!\n\nI extended the approach, so the method asks for the type name (string) of the dimension you want to assign:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;CreateDimensions(\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilledRegion</span>&nbsp;filledRegion,\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;dimensionDirection,\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;typeName&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;document&nbsp;=&nbsp;filledRegion.Document;\n\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;view&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">View</span>)&nbsp;document.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;filledRegion.OwnerViewId&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;edgesDirection&nbsp;=&nbsp;dimensionDirection.CrossProduct(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;view.ViewDirection&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;edges&nbsp;=&nbsp;FindRegionEdges(&nbsp;filledRegion&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;x&nbsp;=&gt;&nbsp;IsEdgeDirectionSatisfied(&nbsp;x,&nbsp;edgesDirection&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.ToList();\n\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;edges.Count&nbsp;&lt;&nbsp;2&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>;\n\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Se&nbsp;hace&nbsp;este&nbsp;ajuste&nbsp;para&nbsp;que&nbsp;la&nbsp;distancia&nbsp;no&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;depende&nbsp;de&nbsp;la&nbsp;escala.&nbsp;&lt;&lt;&lt;&lt;&lt;&lt;&nbsp;evaluar&nbsp;para&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;información&nbsp;de&nbsp;acotado&nbsp;y&nbsp;etiquetado!!!</span>\n\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;shift&nbsp;=&nbsp;<span style=\"color:#2b91af;\">UnitUtils</span>.ConvertToInternalUnits(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;*&nbsp;view.Scale,&nbsp;<span style=\"color:#2b91af;\">DisplayUnitType</span>.DUT_MILLIMETERS&nbsp;)&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;edgesDirection;\n\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;dimensionLine&nbsp;=&nbsp;<span style=\"color:#2b91af;\">Line</span>.CreateUnbound(\n&nbsp;&nbsp;&nbsp;&nbsp;filledRegion.get_BoundingBox(&nbsp;view&nbsp;).Min&nbsp;+&nbsp;shift,\n&nbsp;&nbsp;&nbsp;&nbsp;dimensionDirection&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;references&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ReferenceArray</span>();\n\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">var</span>&nbsp;edge&nbsp;<span style=\"color:blue;\">in</span>&nbsp;edges&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;references.Append(&nbsp;edge.Reference&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dimension</span>&nbsp;dim&nbsp;=&nbsp;document.Create.NewDimension(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;view,&nbsp;dimensionLine,&nbsp;references&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;dr_id&nbsp;=&nbsp;DimensionTypeId(\n&nbsp;&nbsp;&nbsp;&nbsp;document,&nbsp;typeName&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;dr_id&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;dim.ChangeTypeId(&nbsp;dr_id&nbsp;);\n&nbsp;&nbsp;}\n}\n\n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;IsEdgeDirectionSatisfied(&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Edge</span>&nbsp;edge,&nbsp;\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">XYZ</span>&nbsp;edgeDirection&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;edgeCurve&nbsp;=&nbsp;edge.AsCurve()&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">Line</span>;\n\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;edgeCurve&nbsp;==&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">false</span>;\n\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;edgeCurve.Direction.CrossProduct(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;edgeDirection&nbsp;).IsAlmostEqualTo(&nbsp;<span style=\"color:#2b91af;\">XYZ</span>.Zero&nbsp;);\n}\n\n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">FilledRegion</span>&gt;&nbsp;\n&nbsp;&nbsp;FindFilledRegions(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;document,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;viewId&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;collector&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;document,&nbsp;viewId&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;collector\n&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">FilledRegion</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.Cast&lt;<span style=\"color:#2b91af;\">FilledRegion</span>&gt;();\n}\n\n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Edge</span>&gt;&nbsp;\n&nbsp;&nbsp;FindRegionEdges(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilledRegion</span>&nbsp;filledRegion&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;view&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">View</span>)&nbsp;filledRegion.Document.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;filledRegion.OwnerViewId&nbsp;);\n\n&nbsp;&nbsp;<span style=\"color:blue;\">var</span>&nbsp;options&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Options</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;View&nbsp;=&nbsp;view,\n&nbsp;&nbsp;&nbsp;&nbsp;ComputeReferences&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>\n&nbsp;&nbsp;};\n\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;filledRegion\n&nbsp;&nbsp;&nbsp;&nbsp;.get_Geometry(&nbsp;options&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.OfType&lt;<span style=\"color:#2b91af;\">Solid</span>&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;.SelectMany(&nbsp;x&nbsp;=&gt;&nbsp;x.Edges.Cast&lt;<span style=\"color:#2b91af;\">Edge</span>&gt;()&nbsp;);\n}\n\n<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;DimensionTypeId(\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;typeName&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;mt_coll&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">DimensionType</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsElementType();\n\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">DimensionType</span>&nbsp;dimType&nbsp;=&nbsp;<span style=\"color:blue;\">null</span>;\n\n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;type&nbsp;<span style=\"color:blue;\">in</span>&nbsp;mt_coll&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;type&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">DimensionType</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;type.Name&nbsp;==&nbsp;typeName&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dimType&nbsp;=&nbsp;type&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">DimensionType</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;dimType.Id;\n}\n</pre>\n\nThis code produces dimensioning as shown in the top-most screen snapshot.\n\nHope this is helpful for others also!\n\nMany thanks to Jorge and Alexander for this nice solution!"
  }
]