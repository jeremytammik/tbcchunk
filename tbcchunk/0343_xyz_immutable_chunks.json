[
  {
    "original_filename": "0343_xyz_immutable",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0343_xyz_immutable",
    "header_text": "XYZ Immutable",
    "local_header_href": "#xyz-immutable",
    "chunk_text": "<h3>XYZ Immutable</h3><p>As mentioned in the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/revit-2011-is-coming.html\">\noverview of the Revit 2011 changes</a>,\n\nnew classes for XYZ, UV, and ElementId were introduced in the Revit 2011 API.\nThese ubiquitous objects have been promoted to classes now, some of their methods renamed, and generic .NET collections replace many of the custom Revit collection classes. \nThe Revit API help What's New section describes these changes in some more detail.\n\n<p>One of the changes which may affect existing code is the immutability of the XYZ coordinate value properties.\nThe help file suggests that code which previously changed the coordinates of an XYZ instance via setting the values of the X, Y, or Z properties should now construct a new XYZ instance with the desired coordinates instead.\n\n<p>One of the reasons for this change was to better comply with .NET guidelines around exposure of properties.  \nThere were several examples of confusion where API users wrote something like this: \n\n<pre class=\"code\">\n  <span class=\"teal\">LocationPoint</span> p = famInstance.Location \n    <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n  p.Point.X = 0.0; \n</pre>\n \nThe expectation was to modify the curve's location, but actually it would only change the local copy of the XYZ returned, and not the curve that it came from.  \nWith the immutable XYZ class, this expectation cannot be made, and you are forced to code something like this: \n \n<pre class=\"code\">\n  <span class=\"teal\">LocationPoint</span> p = famInstance.Location \n    <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n \n  p.Point = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 0.0, p.Point.Y, p.Point.Z );\n</pre>\n<p>Some other examples of changes that this can force you to make are provided by the Revit API introduction lab Lab2_0_CreateLittleHouse.\nFor instance, this line of code was used to offset a point by a certain amount in the Y direction in 2010:\n\n<pre class=\"code\">\n  p.Y = p.Y + tagOffset;\n</pre>\n<p>With the immutable XYZ class in 2011, the Y property can no longer be written to like that.\nOne possibility is to create a new point instance as suggested above, e.g.\n\n<pre class=\"code\">\n  p = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( p.X, p.Y + tagOffset, p.Z );\n</pre>\n<p>A slightly shorter alternative is to simply add a vector representing the appropriate offset:\n\n<pre class=\"code\">\n  p += tagOffset * <span class=\"teal\">XYZ</span>.BasisY;\n</pre>\n\nThis also better highlights the fact that we are simply offsetting the point from its original position, and that only the Y coordinate is affected.</p></p></p></p></p></p>"
  }
]