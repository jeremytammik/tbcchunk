[
  {
    "original_filename": "0110_transform",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0110_transform",
    "header_text": "Transform",
    "local_header_href": "#transform",
    "chunk_text": "<h3>Transform</h3><p>In some upcoming posts, I would like to take a look at the how to handle transformations of Revit elements, as well as locations of nested linked files.\nBefore we get into that, let us take a closer look at the underlying Revit API Transform class.\nWe briefly mentioned it in the discussion of the Revit API\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/geometry-librar.html\">\ngeometry library</a>,\n\nand demonstrated some basic use of it for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html\">\ntransforming a polygon</a>\n\nfrom 3D to 2D.</p><p>The Revit API Transform class is defined in the Autodesk.Revit.Geometry namespace and represents a transformation of the affine 3-space.\nIt provides the typical properties and methods expected for a transformation class:</p><ul>\n<li>Multiply, multiply two transforms.</li>\n<li>ScaleBasis, scale the basis vectors.</li>\n<li>ScaleBasisAndOrigin, scale the basis vectors and the origin.</li>\n<li>Basis, BasisX, BasisY, BasisZ, return the base axes.</li>\n<li>Determinant, return the determinant.</li>\n<li>HasReflection, to tell whether this transformation is a reflection.</li>\n<li>Identity, the identity transformation.</li>\n<li>Inverse, the inverse transformation.</li>\n<li>IsConformal, to tell whether this transformation is <a href=\"http://en.wikipedia.org/wiki/Conformal_map\">conformal</a>.</li>\n<li>IsIdentity, to tell whether this transformation is the identity.</li>\n<li>IsTranslation, to tell whether this transformation is a translation.</li>\n<li>Origin, the origin. </li>\n<li>Reflection, returns a transformation that reflects about a specified plane.</li>\n<li>Rotation, returns a transformation that rotates by a specified angle about a specified axis and point.</li>\n<li>Scale, return the scale of the transformation.</li>\n<li>Translation, returns a transformation that translates by a specified vector.</li>\n</ul><p>In some other APIs, transformations are handled by matrices.\nThe Revit API generally tries to address a higher level of abstraction, so the class is defined as a generic transformation class, and the underlying implementation is not explicitly exposed by the API.</p><p>The Creation.Application does not provide any methods to create transform objects.\nA Transform instance can be created using the new operator as a copy constructor, or by using some of the static methods of the Transform class.\nThe transform default constructor initializes it to identity:</p><pre class=\"code\">\n<span class=\"teal\">Transform</span> trans1, trans2, trans3;\n</pre><p>Here are examples of using the static Transform class methods to define rotation, translation, scaling and mirroring transforms:</p><pre class=\"code\">\n<span class=\"teal\">XYZ</span> ptOrigin = <span class=\"teal\">XYZ</span>.Zero;\n<span class=\"teal\">XYZ</span> ptXAxis = <span class=\"teal\">XYZ</span>.BasisX;\n<span class=\"teal\">XYZ</span> ptYAxis = <span class=\"teal\">XYZ</span>.BasisY;\n \ntrans1 = <span class=\"teal\">Transform</span>.get_Rotation( <span class=\"green\">// rotation</span>\n  ptOrigin, ptXAxis, 90 );\n \ntrans2 = <span class=\"teal\">Transform</span>.get_Translation( <span class=\"green\">// translation</span>\n  ptXAxis );\n \ntrans1 = trans2.ScaleBasis( 2.0 ); <span class=\"green\">// scaling</span>\n \n<span class=\"teal\">Plane</span> plane1 = creApp.NewPlane(\n  ptXAxis, ptYAxis );\n \ntrans3 = <span class=\"teal\">Transform</span>.get_Reflection( <span class=\"green\">// mirror</span>\n  plane1 );\n</pre><p>One simple use of a transform is to translate a point:</p><pre class=\"code\">\np3 = trans1.OfPoint( p2 );\n</pre><p>Some further examples are given by the Revit API\n\n<a href=\"zip/rac_tips_20090303.zip\">\ntips and tricks sample code</a>,\n\nin the region '1. XYZ and Transform' in RevitGeometry.cs.\nBesides these transforms, they also show how to invert and concatenate transformations.</p><p>The polygon transformation is implemented by code in the region 'Transform 3D plane to horizontal' in The Building Coder sample code external command class\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html\">\nCmdWallProfileArea</a>,\n\nspecifically in the methods GetTransformToZ and ApplyTransform:</p><pre class=\"code\">\n<span class=\"teal\">Transform</span> GetTransformToZ( <span class=\"teal\">XYZ</span> v )\n{\n  <span class=\"teal\">Transform</span> t;\n \n  <span class=\"blue\">double</span> a = <span class=\"teal\">XYZ</span>.BasisZ.Angle( v );\n \n  <span class=\"blue\">if</span>( <span class=\"teal\">Util</span>.IsZero( a ) )\n  {\n    t = <span class=\"teal\">Transform</span>.Identity;\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"teal\">XYZ</span> axis = <span class=\"teal\">Util</span>.IsEqual( a, <span class=\"teal\">Math</span>.PI )\n      ? <span class=\"teal\">XYZ</span>.BasisX\n      : v.Cross( <span class=\"teal\">XYZ</span>.BasisZ );\n \n    t = <span class=\"teal\">Transform</span>.get_Rotation( <span class=\"teal\">XYZ</span>.Zero,\n      axis, a );\n  }\n  <span class=\"blue\">return</span> t;\n}\n \n<span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; ApplyTransform(\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; polygon,\n  <span class=\"teal\">Transform</span> t )\n{\n  <span class=\"blue\">int</span> n = polygon.Count;\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; polygonTransformed\n    = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;( n );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> polygon )\n  {\n    polygonTransformed.Add( t.OfPoint( p ) );\n  }\n  <span class=\"blue\">return</span> polygonTransformed;\n}\n</pre><p>GetTransformToZ calculates the rotation required to transform a planar polygon from its arbitrary orientation in 3D space to a plane parallel to the XY plane.\nThe algorithm used is described in detail in the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html\">\ntransforming a polygon</a>.\n\nApplyTransform applies the rotation to the 3D polygon to obtain a rotated copy which is parallel to the XY plane.\nIt does so by iterating through the points of the original polygon and calculating the rotated point using Transform.OfPoint on each.</p>"
  }
]