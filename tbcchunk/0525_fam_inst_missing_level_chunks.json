[
  {
    "original_filename": "0525_fam_inst_missing_level",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0525_fam_inst_missing_level",
    "header_text": "Family Instance Missing Level Property",
    "local_header_href": "#family-instance-missing-level-property",
    "chunk_text": "<h3>Family Instance Missing Level Property</h3><p>Here is another contribution by Rudolf Honke of\n\n<a href=\"http://www.acadgraph.de\">\nacadGraph CADstudio GmbH</a>.\n\nHe says:\n\n<p>\"And now for something completely different\" ... after all the UI Automation topics:\n\n<p>I often need to collect all items on a specific level, for instance window family instances, and use a method like the following to do so:\n\n<pre class=\"code\">\n<span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; GetWindowsByLevel( \n  <span class=\"teal\">Document</span> doc, \n  <span class=\"teal\">Level</span> level )\n{\n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; elementList = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n  <span class=\"teal\">FilteredElementCollector</span> collector \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Windows );\n \n  <span class=\"teal\">ParameterValueProvider</span> provider \n    = <span class=\"blue\">new</span> <span class=\"teal\">ParameterValueProvider</span>( \n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( \n        <span class=\"teal\">BuiltInParameter</span>.FAMILY_LEVEL_PARAM ) );\n \n  <span class=\"teal\">FilterNumericRuleEvaluator</span> evaluator \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilterNumericEquals</span>();\n \n  <span class=\"teal\">ElementId</span> idRuleValue = level.Id;\n \n  <span class=\"teal\">FilterElementIdRule</span> rule \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilterElementIdRule</span>( \n      provider, evaluator, idRuleValue );\n \n  <span class=\"teal\">ElementParameterFilter</span> filter \n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementParameterFilter</span>( rule );\n \n  elementList.AddRange( \n    collector.WherePasses( filter ).ToElements() );\n \n  <span class=\"blue\">return</span> elementList;\n}\n</pre>\n<p>Strangely enough, it may occur that some elements are not found by this method, because their level property has not been correctly set.\n\n<p>Here are the element properties of a window with its level property (Ebene in German) properly set:</p>\n<center>\n<img alt=\"Window with Level property properly set\" src=\"img/rh_level_ok.png\"/>\n</center>\n<p>Other window instances, however, may be lacking this property:</p>\n<center>\n<img alt=\"Window with Level property missing\" src=\"img/rh_level_missing.png\"/>\n</center>\n<p>If we take a look at the second window instance parameters using the RevitLookup 'snoop built-in enums' functionality, we see that it has no FAMILY_LEVEL_PARAM parameter:</p>\n<center>\n<img alt=\"Window lacking FAMILY_LEVEL_PARAM parameter\" src=\"img/rh_level_missing_bips.png\"/>\n</center>\n<p>This window instance also has a null value for its Level <strong>property</strong>:</p>\n<center>\n<img alt=\"Window has null Level property\" src=\"img/rh_level_missing_property.png\"/>\n</center>\n<p>Sometimes, you can set a parameter to affect a property.\nSimilarly, you can move or rotate an element to change its location point or curve.\n\n<p>Sometimes a property and the parameter that should relate to this property are inconsistent with each other, but that's another point.\n\n<p>In the element property page, you cannot set the property, because it is not displayed there at all.\n\n<p>Therefore, this is one of the rare occasions where you can achieve something via the API that cannot be done through the user interface. \n\n<p>In this case, you can use this little workaround:\n\n<ul>\n<li>Retrieve all the levels, e.g. sorted by elevation or by name.\n<li>Display their names in a dialog and provide an opportunity to the user to select the desired one:\n</li></li></ul>\n<center>\n<img alt=\"Level selector\" src=\"img/rh_level_select.png\"/>\n</center>\n<ul>\n<li>Set the built-in parameter value of the family instance lacking the level property to the selected level element id:\n</li></ul>\n<pre class=\"code\">\n  windowWithoutLevelParam.get_Parameter( \n    <span class=\"teal\">BuiltInParameter</span>.FAMILY_LEVEL_PARAM )\n    .Set( levels[levelDialogSelectedIndex].Id );\n</pre>\n<p>Once assigned programmatically, the level property also becomes visible to the user:</p>\n<center>\n<img alt=\"Window Level property displayed\" src=\"img/rh_level_property_displayed.png\"/>\n</center>\n<p>After this adjustment, the GetWindowsByLevel method returns the results it is designed for as expected.\n\n<p>Many thanks to Rudolf for this detailed analysis and workaround!\n</p></p></p></p></p></p></p></p></p></p></p>"
  }
]