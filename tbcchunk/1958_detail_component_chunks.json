[
  {
    "original_filename": "1958_detail_component",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- Tag Width/Height or Accurate BoundingBox of IndependentTag\n  https://forums.autodesk.com/t5/revit-api-forum/tag-width-height-or-accurate-boundingbox-of-independenttag/m-p/11274095\n\n- not trivial to solve: tags without Overlapping\n  https://forums.autodesk.com/t5/revit-api-forum/tags-without-overlapping/m-p/11275579\n\n- Auto Tagging without overlap\n  https://forums.autodesk.com/t5/revit-api-forum/auto-tagging-without-overlap/td-p/9996808\n  \n- Python and Dynamo Autotag Without Overlap\n  https://thebuildingcoder.typepad.com/blog/2021/02/splits-persona-collector-region-tag-modification.html#5\n\n- OS add-in:\n  One click convert detail elements to Detail Family\n  https://forums.autodesk.com/t5/revit-api-forum/one-click-convert-detail-elements-to-detail-family/td-p/11230155\n  Peter [PitPaf](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/12564927) of [Piotr Å»uraw Architekt](https://www.zurawarchitekt.pl)\n\ntwitter:\n\nHow to determine tag extents, width, height and an open source single-click detail family generator add-in with the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/detailcomponent\n\nToday, we highlight two nice contributions from the Revit API discussion forum\n&ndash; Determining tag extents\n&ndash; One-click detail family generator...\n\nlinkedin:\n\nHow to determine tag extents, width, height and an open source single-click detail family generator add-in with the #RevitAPI\n\nhttps://autode.sk/detailcomponent\n\n- Determining tag extents\n- One-click detail family generator...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "1958_detail_component",
    "header_text": "Tag Extents and Lazy Detail Components",
    "local_header_href": "#tag-extents-and-lazy-detail-components",
    "chunk_text": "### Tag Extents and Lazy Detail Components\n\nToday, let's highlight two really nice contributions from the [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160):\n\n- [Determining tag extents](#2)\n    - [Unrotate rotated tags](#2.2)\n- [One-click detail family generator](#3)\n\nFirst, though, a little aphorism to ponder:\n\n<p class=\"quote\">Yesterday, I was clever and tried to change the world.\n<br/>Today, I am wise and try to change myself.</p>\n<p class=\"author\">&ndash; Rumi</p>"
  },
  {
    "original_filename": "1958_detail_component",
    "header_text": "Determining Tag Extents",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Determining Tag Extents\n\nWe repeatedly discussed how to ensure that tags do not overlap, both here and in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160),\ne.g., in the threads\non [tags without overlapping](https://forums.autodesk.com/t5/revit-api-forum/tags-without-overlapping/m-p/11275579)\nand [auto tagging without overlap](https://forums.autodesk.com/t5/revit-api-forum/auto-tagging-without-overlap/td-p/9996808).\n\nA hard-coded algorithm to achieve partial success was presented in the latter and reproduced \nin [Python and Dynamo autotag without overlap](https://thebuildingcoder.typepad.com/blog/2021/02/splits-persona-collector-region-tag-modification.html#5).\nA more complete solution using a more advanced algorithm is now available commercially,\ncalled [Smart Annotation](https://bimlogiq.com/products/smart-annotataion) by [BIMLOGiQ](https://bimlogiq.com).\n\nOne prerequisite for achieving this task is determining the extents of a tag.\n\n[AmitMetz](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/9455666) very\nkindly shares sample code for a method to achieve this in the thread\non [tag width/height or accurate `BoundingBox` of `IndependentTag`](https://forums.autodesk.com/t5/revit-api-forum/tag-width-height-or-accurate-boundingbox-of-independenttag/m-p/11274095).\nSays he:\n \nFollowing the helpful comments above, here is a method that returns tag dimensions.\n\nA few comments on the implementation:\n\n- First, we need to make sure the LeaderEndCondition is free in order to find the LeaderEndPoint.\n- Move the tag and it's elbow to LeaderEndPoint.\n- We get the correct BoundingBox only after moving the tag and it's elbow, and committing the Transaction.\n- I tried to use an unwrapped `transaction.rollback` without `TransactionGroup`, but it didn't work.\n  So, if we want to keep the tag in its original location, we have to commit the transaction and then roll back the transaction group.\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Determine&nbsp;tag&nbsp;extents,&nbsp;width&nbsp;and&nbsp;height</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;Tuple&lt;<span style=\"color:blue;\">double</span>,&nbsp;<span style=\"color:blue;\">double</span>&gt;&nbsp;<span style=\"color:#74531f;\">GetTagExtents</span>(\n&nbsp;&nbsp;IndependentTag&nbsp;<span style=\"color:#1f377f;\">tag</span>)\n{\n&nbsp;&nbsp;Document&nbsp;<span style=\"color:#1f377f;\">doc</span>&nbsp;=&nbsp;tag.Document;\n\n&nbsp;&nbsp;<span style=\"color:green;\">//Dimension&nbsp;to&nbsp;return</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;<span style=\"color:#1f377f;\">tagWidth</span>;\n&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;<span style=\"color:#1f377f;\">tagHeight</span>;\n \n&nbsp;&nbsp;<span style=\"color:green;\">//Tag&#39;s&nbsp;View&nbsp;and&nbsp;Element</span>\n&nbsp;&nbsp;View&nbsp;<span style=\"color:#1f377f;\">sec</span>&nbsp;=&nbsp;doc.GetElement(tag.OwnerViewId)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;View;\n&nbsp;&nbsp;XYZ&nbsp;<span style=\"color:#1f377f;\">rightDirection</span>&nbsp;=&nbsp;sec.RightDirection;\n&nbsp;&nbsp;XYZ&nbsp;<span style=\"color:#1f377f;\">upDirection</span>&nbsp;=&nbsp;sec.UpDirection;\n&nbsp;&nbsp;Reference&nbsp;<span style=\"color:#1f377f;\">pipeReference</span>&nbsp;=&nbsp;tag.GetTaggedReferences().First();\n&nbsp;&nbsp;<span style=\"color:green;\">//Reference&nbsp;pipeReference&nbsp;=&nbsp;tag.GetTaggedReference();&nbsp;//Older&nbsp;Revit&nbsp;Version</span>\n \n&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;(TransactionGroup&nbsp;<span style=\"color:#1f377f;\">transG</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;TransactionGroup(doc))\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;transG.Start(<span style=\"color:#a31515;\">&quot;Determine&nbsp;Tag&nbsp;Dimension&quot;</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>&nbsp;(Transaction&nbsp;<span style=\"color:#1f377f;\">trans</span>&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;Transaction(doc))\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans.Start(<span style=\"color:#a31515;\">&quot;Determine&nbsp;Tag&nbsp;Dimension&quot;</span>);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tag.LeaderEndCondition&nbsp;=&nbsp;LeaderEndCondition.Free;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;XYZ&nbsp;<span style=\"color:#1f377f;\">leaderEndPoint</span>&nbsp;=&nbsp;tag.GetLeaderEnd(pipeReference);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tag.TagHeadPosition&nbsp;=&nbsp;leaderEndPoint;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tag.SetLeaderElbow(pipeReference,&nbsp;leaderEndPoint);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trans.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//Tag&nbsp;Dimension</span>\n&nbsp;&nbsp;&nbsp;&nbsp;BoundingBoxXYZ&nbsp;<span style=\"color:#1f377f;\">tagBox</span>&nbsp;=&nbsp;tag.get_BoundingBox(sec);\n&nbsp;&nbsp;&nbsp;&nbsp;tagWidth&nbsp;=&nbsp;(tagBox.Max&nbsp;-&nbsp;tagBox.Min).DotProduct(rightDirection);\n&nbsp;&nbsp;&nbsp;&nbsp;tagHeight&nbsp;=&nbsp;(tagBox.Max&nbsp;-&nbsp;tagBox.Min).DotProduct(upDirection);\n \n&nbsp;&nbsp;&nbsp;&nbsp;transG.RollBack();\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:#8f08c4;\">return</span>&nbsp;Tuple.Create(tagWidth,&nbsp;tagHeight);\n}\n</pre>\n\nMany thanks to Amit for this nice implementation!\n\n####<a name=\"2.2\"></a> Unrotate Rotated Tags\n\nSteven Micaletti, VDC Software & Technology Developer added\na [comment on this method](https://www.linkedin.com/feed/update/urn:li:activity:6952994276876169216?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A6952994276876169216%2C6953115731991433216%29), saying:\n\n> Good stuff; however, the GetTagExtents() implementation is missing a critical step &ndash; rotating the Pipe.\nThe Pipe in the thread is at an angle, while the tag is not, and this is not generally how MEP elements are tagged.\nMEP tag families usually have the \"rotate with component\" option enabled, and in that scenario the bounding box returned is unusable.\nWe must first disconnect and rotate the pipe to be model axis aligned before we set the TagHeadPosition, get the BoundingBox, and RollBack() the Transaction.\n\nThank you, Steven, for pointing this out!"
  },
  {
    "original_filename": "1958_detail_component",
    "header_text": "One-Click Detail Family Generator",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> One-Click Detail Family Generator\n\nAnother nice solution and entire open source sample add-in is shared by\nPeter [PitPaf](https://forums.autodesk.com/t5/user/viewprofilepage/user-id/12564927) of [Piotr Å»uraw Architekt](https://www.zurawarchitekt.pl)\npresenting [one click convert detail elements to detail family](https://forums.autodesk.com/t5/revit-api-forum/one-click-convert-detail-elements-to-detail-family/td-p/11230155):\n\n> I'm working on a Revit add-in to automate and simplify creation of detail Components families.\n\n> This is helps create detail components on the fly just in model view.\n\n> It allows the user to draw parts of a detail with lines and fill regions in model view and change it to a component without opening the family editor.\n\n> Here I want to share with you the first version of this add-in, including source code and compiled install files:\n\n> <p style=\"text-align:center\"><a href=\"https://github.com/PitPaf/LazyDetailComponent\">github.com/PitPaf/LazyDetailComponent</a></p>\n\n> Feel free to use it if you find it interesting. I appreciate all your comments.\n\n<center>\n<img src=\"img/lazy_detail_component.png\" alt=\"Lazy detail component\" title=\"Lazy detail component\" width=\"438\"/> <!-- 438 -->\n</center>\n\nMany thanks to Peter for implementing, documenting and sharing this nice solution!"
  }
]