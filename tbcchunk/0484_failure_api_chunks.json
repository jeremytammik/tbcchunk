[
  {
    "original_filename": "0484_failure_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0484_failure_api",
    "header_text": "Failure API Take Two",
    "local_header_href": "#failure-api-take-two",
    "chunk_text": "<h3>Failure API Take Two</h3><p>Before I get into today's topic, let me lament a bit about my Wednesday morning.\n\n<h4>Travel Woes</h4>\n<p>I am flying to Las Vegas today in order to have time for last-minute AU preparations and acclimatise properly there.\nFor reasons unknown to me, my travel agent (who shall remain unnamed here in public) booked me a flight leaving at seven in the morning from Switzerland to London, and a continuation from London to Las Vegas with an eight hour wait in between.\nI have a brother in London, so we arranged to meet, making the wait quite a tolerable affair.\n\n<p>Be that as it may, I tried to check in online to my British Airways flight yesterday morning. \nThe system asked me to enter all my data, which took ten or fifteen minutes the first time around, then went ahead and processed my entry for a while, only to return with an error message saying something went wrong, and please to try later. \nSo I did. \nThree times, in fact, with a couple of hours in between each attempt, to no avail.\nRather frustrating, of course, since I had to re-enter all my data for each attempt.\n\n<a href=\"http://en.wikipedia.org/wiki/SNAFU\">\nSnafu</a>...\n\n\n<p>This morning at the airport, I checked in, everything seemed in order, but there was a problem in the very last step, printing the boarding pass. \nIt turned out to be the \n\n<a href=\"http://en.wikipedia.org/wiki/Electronic_System_for_Travel_Authorization\">\nUS ESTA</a>. \n\nSince i visited the US in June and the ESTA is valid for two years, I assumed that would not be a problem. \nI updated my passport in the meantime, though, and now I apparently need a new ESTA. \n<a href=\"http://en.wikipedia.org/wiki/SNAFU\">\nSnafu</a>...\n\n<p>They asked me to go to an Internet point next door and reapply for the new ESTA, which I did. \nThe machine accepted coins only; I bought ten minutes of time, filled in the form, everything complete, and reached the validation step just before the ten minutes were up. \nThe machine would not accept my next coin. \nResult: start again from scratch. \n\n<a href=\"http://en.wikipedia.org/wiki/SNAFU\">\nSnafu</a>...\n\n<p>The second time around I was much faster, completed the form in five minutes, and was told by the system that I could either pay immediately or within seven days' time. \nI was in deep stress by now, afraid of missing my flight, so I thought \"ok, I'll do it when I arrive, within seven days\", and went back to check in. \nSame problem. \nApparently, payment is required within seven days, but also before departure. \nAnd the latter was not mentioned. \nBy now, of course, the flight was closed.\n\n<a href=\"http://en.wikipedia.org/wiki/SNAFU\">\nSnafu</a>...\n\n<p>The next step in the list of bungles is the fact that my unnamed travel agent had booked me on this early flight at seven in the morning, with the continuation three in the afternoon. \nI wonder why they did that? \nAnyway, it turns out there is another flight at lunch time that serves just as well, and I am now rebooked for that. \nAnd successfully checked in as well, I am pleased to say.\n\n<p>BA was kind enough to let me enter the lounge, which provides Internet access, so I can went my frustration here.\nThank you for that, at least.\n\n<p>Summary:\n\n<ul>\n<li>The British Airways online check-in system should have told me what the problem was.\n<li>I should have thought of checking my ESTA validity.\n<li>The Internet machine should have accepted my second coin.\n<li>The ESTA processing form should have said payment is required before departure.\n<li>The travel agent should have booked the later flight; really, I wonder why they did not?\n<li>Thank God they didn't!\n</li></li></li></li></li></li></ul>\n<p>Anyway, I think I can leave that topic now, to return to the Revit API.\nI already gave a brief introduction to the Revit 2011\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/failure-api.html\">\nFailure API and the ErrorHandling SDK Sample</a>\n\nwhich demonstrates its use.\n\n<p>By the way, maybe the story above just illustrates my real-world failure API taking control of the snafu?\n\n<p>One of the most common uses of this API is to disable undesired warning and error messages.\nPreviously, one way to achieve this was to use an older and simpler approach based on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/autoconfirm-save-using-dialogboxshowing-event.html\">\nDialogBoxShowing event</a>.\n\nThe Failure API provides a much more powerful and complete solution, as we showed in the discussions on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/editing-elements-inside-groups.html\">\nediting elements inside groups</a> and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/suppress-unwanted-dialogue.html\">\nsuppressing an unwanted dialogue</a>.\n\n<p>Now Joe Ye of Autodesk Beijing wrote the following more extensive introduction to the Failure API, including several interesting examples:\n\n<h4>Failure Posting and Handling API</h4>\n<p>Revit posts failure messages which may report either a warning or an error when there are issues in the model. \nFor example, when two walls partially overlap, Revit displays the following warning message:</p>\n<center>\n<img alt=\"Wall overlap warning message\" src=\"img/failure_wall_overlap.png\"/>\n</center>\n<p>Revit 2011 exposes the Failure API for posting and handling these kinds of failures. \nFailure posting APIs can be used to define and register new custom failures. \nCustom failures can be posted in your own plug-ins. \nFailure handling APIs can delete or resolve Revit failures when an operation on the model has been submitted. \nYou can do something to the model during the handling process. \nIf failures are handled by the failure handling API, users might not see the warning or error dialogs at all as if everything goes well. \nIn fact, these failures are handled by your application.\n\n<h4>Failure Posting</h4>\n<p>The failure posting API is easy to use. \nA new failure definition can be registered in the OnStartup method of an external application, and then the failure severity and resolution type can be set. \nHere is the code showing the registration of a warning. \nOnce custom failings have been registered, they can be posted in your program.\nHere is a code fragment to register a custom failure:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  <span class=\"green\">// Create failure definition Ids</span>\n \n  m_idWarning = <span class=\"blue\">new</span> <span class=\"teal\">FailureDefinitionId</span>( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( \n    <span class=\"maroon\">\"0C3F66B5-3E26-4d24-A228-7A8358C76D39\"</span> ) );\n \n  <span class=\"green\">// Create failure definition and add resolution</span>\n \n  m_fdWarning \n    = <span class=\"teal\">FailureDefinition</span>.CreateFailureDefinition( \n      m_idWarning, <span class=\"teal\">FailureSeverity</span>.Warning, \n      <span class=\"maroon\">\"I am the warning.\"</span> );\n \n  m_fdWarning.AddResolutionType( \n    <span class=\"teal\">FailureResolutionType</span>.MoveElements, \n    <span class=\"maroon\">\"MoveElements\"</span>, <span class=\"blue\">typeof</span>( <span class=\"teal\">DeleteElements</span> ) );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The Document.PostFailure method is used to notify the document of a problem. \n\n<p>Here is a code fragment to post a custom failure:\n\n<pre class=\"code\">\n  transaction.Start();\n \n  <span class=\"teal\">FailureMessage</span> fm \n    = <span class=\"blue\">new</span> <span class=\"teal\">FailureMessage</span>( m_idWarning );\n \n  m_doc.PostFailure( fm );\n \n  transaction.Commit();\n</pre>\n<p>Failures will be validated and possibly resolved at the end of the transaction.  \n\n<h4>Failure Handling</h4>\n<p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. \nThe user is presented information and options in the UI to deal with the failures. \nBesides, if operations on the document require some special treatment for certain errors (or even all possible errors), you can customize automatic failure resolution. \n\n<p>Revit may detect failures at the end of any transaction.\nWhen it does so, it starts to handle the failures in repeated cycles. \nEach cycle of failure processing includes three steps:\n\n<ul>\n<li>Failure pre-processing \n(IFailuresProcessor)\n<li>Failure processing event \n(FailureProcessing event)\n<li>Final processing\n (IFailureProcessor)\n</li></li></li></ul>\n<p>These steps are called one by one in a cycle. \nEach of these three steps can control what happens and whether to continue to the next step by returning different FailureProcessingResults. \nCorresponding with these three steps, there are two interfaces and an event to implement failure handling. \nIf you know the transaction, IFailuresPreprocessor can be used. \nTo handle all possible errors, you can use the FailuresProcessing event. \nFinally, the IFailuresProcessor interface offers the ability to completely replace the standard failure processing. \n\n<p>Implement IFailuresPreprocessor interface and its method PreprocessFailures to handle failures. \nRegister and define an event handler to handle all failures. \nImplement IFailureProcessor interface and its ProcessFailures method to implement final failure handling. \n\n<p>In each step, we can delete elements, delete a warning, and resolve or post a failure.\nAll actions that can be taken are wrapped in the FailuresAccessor class.\n\n<h4>Handling a Warning</h4>\n<p>Here is a sample showing how to handle a warning posted by deleting the last instance of a linked Revit model. The following warning message is displayed to the user if no failure handling mechanism has been added:</p>\n<center>\n<img alt=\"Link removal warning\" src=\"img/failure_link_removal.png\"/>\n</center>\n<p>Revit users can manually click one of the three buttons to respond to the warning and dismiss the dialog. \nInstead, we will use failure handling APIs to mimic the manual click. \nFirst we use an event to handle the warning. \n\n<p>You can define the event handler and register to the FailuresProcessing event in an external command like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RegisterFailureEvent</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    app.Application.FailuresProcessing \n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">FailuresProcessingEventArgs</span>&gt;( \n        OnFailuresProcessing );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Define event handler.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnFailuresProcessing( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">FailuresProcessingEventArgs</span> e )\n  {\n    <span class=\"teal\">FailuresAccessor</span> failuresAccessor \n      = e.GetFailuresAccessor();\n \n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"green\">// FailureProcessingResult.Continue is to let </span>\n      <span class=\"green\">// the failure cycle continue next step.</span>\n \n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.Continue );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    <span class=\"green\">// If manually delete an element, the </span>\n    <span class=\"green\">// transaction name is 'Delete Selection'</span>\n    <span class=\"green\">// if the failure is caused by deleting element.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"Delete Selection\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Remove Link' button to resolve </span>\n        <span class=\"green\">// the failure.             </span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Ok' button by just deleting the warning.</span>\n \n        <span class=\"green\">//failuresAccessor.DeleteWarning(fma);         </span>\n      }\n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.ProceedWithCommit );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    e.SetProcessingResult( <span class=\"teal\">FailureProcessingResult</span>.Continue );\n  }\n}\n</pre>\n<p>The code in the event handler above shows two options to handle the warning. \nThe uncommented one resolves the warning, so that both the linked model and the linked file are removed. \nIf you comment the line saying 'failuresAccessor.ResolveFailure(fma)' and uncomment the 'failuresAccessor.DeleteWarning(fma)' one, the linked model is removed and the linked file remains. \n\n<p>Steps to use the failure handling above:\n\n<ol>\n<li>Build the code in a project, and create an add-in manifest file to load it into Revit.\n<li>Start Revit and create a new document.\n<li>Run the external command to register the event handler.\n<li>In the current Revit document, import a Revit model.\n<li>Delete the linked model using Revit's 'Delete' command.\n<li>You will see the expected result.\n</li></li></li></li></li></li></ol>\n<h4>Pre-processing a Warning</h4>\n<p>Now we will talk about how to pre-process warning. \nTo use the IFailuresPreprocessor interface to handle failures, we need to register the interface derived class to transaction. \nThen the derived interface class will be triggered when the failure is posted. \n\n<pre class=\"code\">\n[<span class=\"teal\">TransactionAttribute</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">RegenerationAttribute</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">FailureHandle</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( \n      doc, <span class=\"maroon\">\"DeleteLinkedModel\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">FailureHandlingOptions</span> options \n      = trans.GetFailureHandlingOptions();\n \n    <span class=\"teal\">MyPreProcessor</span> preproccessor \n      = <span class=\"blue\">new</span> <span class=\"teal\">MyPreProcessor</span>();\n \n    options.SetFailuresPreprocessor( preproccessor );\n    trans.SetFailureHandlingOptions( options );\n \n    <span class=\"teal\">Selection</span> sel = app.ActiveUIDocument.Selection;\n \n    <span class=\"teal\">Reference</span> ref1 = sel.PickObject( <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick a linked model instance\"</span> );\n \n    <span class=\"teal\">Element</span> elem = ref1.Element;\n \n    doc.Delete( elem );\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define a failure preprossor to handle failure</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">MyPreProcessor</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"teal\">FailureProcessingResult</span> \n    <span class=\"teal\">IFailuresPreprocessor</span>.PreprocessFailures( \n      <span class=\"teal\">FailuresAccessor</span> failuresAccessor )\n  {\n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n    }\n \n    <span class=\"green\">// We already know the transaction name.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"DeleteLinkedModel\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// ResolveFailure mimics clicking </span>\n        <span class=\"green\">// 'Remove Link' button             .</span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// DeleteWarning mimics clicking 'Ok' button.</span>\n        <span class=\"green\">//failuresAccessor.DeleteWarning( fma );         </span>\n      }\n \n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>\n        .ProceedWithCommit;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>Failure pre-processing can only be used for the failures caused by actions in your transaction. \nIn the sample, we delete the linked model by picking it and then delete it in our transaction. \nThe core code to handle the failure is the same as the event method above. \n\n<h4>Further Reading</h4>\n<p>This article is a general introduction to the failure posting and handing mechanism. \nMore resources are provided in the Revit 2011 SDK. \nThe sample project ErrorHandling shows more Failure API functionality. \nA detailed description of the Failure API is provided in Chapter 26 of the Developer Guide in the Revit 2011 SDK.  \nFor a reference to all relevant classes and methods, please refer to the Revit API help file RevitAPI.chm.\n\n<p>Many thanks to Joe for the useful overview and samples!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0484_failure_api",
    "header_text": "Travel Woes",
    "local_header_href": "#travel-woes",
    "chunk_text": "<h4>Travel Woes</h4><p>I am flying to Las Vegas today in order to have time for last-minute AU preparations and acclimatise properly there.\nFor reasons unknown to me, my travel agent (who shall remain unnamed here in public) booked me a flight leaving at seven in the morning from Switzerland to London, and a continuation from London to Las Vegas with an eight hour wait in between.\nI have a brother in London, so we arranged to meet, making the wait quite a tolerable affair.\n\n<p>Be that as it may, I tried to check in online to my British Airways flight yesterday morning. \nThe system asked me to enter all my data, which took ten or fifteen minutes the first time around, then went ahead and processed my entry for a while, only to return with an error message saying something went wrong, and please to try later. \nSo I did. \nThree times, in fact, with a couple of hours in between each attempt, to no avail.\nRather frustrating, of course, since I had to re-enter all my data for each attempt.\n\n<a href=\"http://en.wikipedia.org/wiki/SNAFU\">\nSnafu</a>...\n\n\n<p>This morning at the airport, I checked in, everything seemed in order, but there was a problem in the very last step, printing the boarding pass. \nIt turned out to be the \n\n<a href=\"http://en.wikipedia.org/wiki/Electronic_System_for_Travel_Authorization\">\nUS ESTA</a>. \n\nSince i visited the US in June and the ESTA is valid for two years, I assumed that would not be a problem. \nI updated my passport in the meantime, though, and now I apparently need a new ESTA. \n<a href=\"http://en.wikipedia.org/wiki/SNAFU\">\nSnafu</a>...\n\n<p>They asked me to go to an Internet point next door and reapply for the new ESTA, which I did. \nThe machine accepted coins only; I bought ten minutes of time, filled in the form, everything complete, and reached the validation step just before the ten minutes were up. \nThe machine would not accept my next coin. \nResult: start again from scratch. \n\n<a href=\"http://en.wikipedia.org/wiki/SNAFU\">\nSnafu</a>...\n\n<p>The second time around I was much faster, completed the form in five minutes, and was told by the system that I could either pay immediately or within seven days' time. \nI was in deep stress by now, afraid of missing my flight, so I thought \"ok, I'll do it when I arrive, within seven days\", and went back to check in. \nSame problem. \nApparently, payment is required within seven days, but also before departure. \nAnd the latter was not mentioned. \nBy now, of course, the flight was closed.\n\n<a href=\"http://en.wikipedia.org/wiki/SNAFU\">\nSnafu</a>...\n\n<p>The next step in the list of bungles is the fact that my unnamed travel agent had booked me on this early flight at seven in the morning, with the continuation three in the afternoon. \nI wonder why they did that? \nAnyway, it turns out there is another flight at lunch time that serves just as well, and I am now rebooked for that. \nAnd successfully checked in as well, I am pleased to say.\n\n<p>BA was kind enough to let me enter the lounge, which provides Internet access, so I can went my frustration here.\nThank you for that, at least.\n\n<p>Summary:\n\n<ul>\n<li>The British Airways online check-in system should have told me what the problem was.\n<li>I should have thought of checking my ESTA validity.\n<li>The Internet machine should have accepted my second coin.\n<li>The ESTA processing form should have said payment is required before departure.\n<li>The travel agent should have booked the later flight; really, I wonder why they did not?\n<li>Thank God they didn't!\n</li></li></li></li></li></li></ul>\n<p>Anyway, I think I can leave that topic now, to return to the Revit API.\nI already gave a brief introduction to the Revit 2011\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/failure-api.html\">\nFailure API and the ErrorHandling SDK Sample</a>\n\nwhich demonstrates its use.\n\n<p>By the way, maybe the story above just illustrates my real-world failure API taking control of the snafu?\n\n<p>One of the most common uses of this API is to disable undesired warning and error messages.\nPreviously, one way to achieve this was to use an older and simpler approach based on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/autoconfirm-save-using-dialogboxshowing-event.html\">\nDialogBoxShowing event</a>.\n\nThe Failure API provides a much more powerful and complete solution, as we showed in the discussions on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/editing-elements-inside-groups.html\">\nediting elements inside groups</a> and \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/08/suppress-unwanted-dialogue.html\">\nsuppressing an unwanted dialogue</a>.\n\n<p>Now Joe Ye of Autodesk Beijing wrote the following more extensive introduction to the Failure API, including several interesting examples:\n\n<h4>Failure Posting and Handling API</h4>\n<p>Revit posts failure messages which may report either a warning or an error when there are issues in the model. \nFor example, when two walls partially overlap, Revit displays the following warning message:</p>\n<center>\n<img alt=\"Wall overlap warning message\" src=\"img/failure_wall_overlap.png\"/>\n</center>\n<p>Revit 2011 exposes the Failure API for posting and handling these kinds of failures. \nFailure posting APIs can be used to define and register new custom failures. \nCustom failures can be posted in your own plug-ins. \nFailure handling APIs can delete or resolve Revit failures when an operation on the model has been submitted. \nYou can do something to the model during the handling process. \nIf failures are handled by the failure handling API, users might not see the warning or error dialogs at all as if everything goes well. \nIn fact, these failures are handled by your application.\n\n<h4>Failure Posting</h4>\n<p>The failure posting API is easy to use. \nA new failure definition can be registered in the OnStartup method of an external application, and then the failure severity and resolution type can be set. \nHere is the code showing the registration of a warning. \nOnce custom failings have been registered, they can be posted in your program.\nHere is a code fragment to register a custom failure:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  <span class=\"green\">// Create failure definition Ids</span>\n \n  m_idWarning = <span class=\"blue\">new</span> <span class=\"teal\">FailureDefinitionId</span>( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( \n    <span class=\"maroon\">\"0C3F66B5-3E26-4d24-A228-7A8358C76D39\"</span> ) );\n \n  <span class=\"green\">// Create failure definition and add resolution</span>\n \n  m_fdWarning \n    = <span class=\"teal\">FailureDefinition</span>.CreateFailureDefinition( \n      m_idWarning, <span class=\"teal\">FailureSeverity</span>.Warning, \n      <span class=\"maroon\">\"I am the warning.\"</span> );\n \n  m_fdWarning.AddResolutionType( \n    <span class=\"teal\">FailureResolutionType</span>.MoveElements, \n    <span class=\"maroon\">\"MoveElements\"</span>, <span class=\"blue\">typeof</span>( <span class=\"teal\">DeleteElements</span> ) );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The Document.PostFailure method is used to notify the document of a problem. \n\n<p>Here is a code fragment to post a custom failure:\n\n<pre class=\"code\">\n  transaction.Start();\n \n  <span class=\"teal\">FailureMessage</span> fm \n    = <span class=\"blue\">new</span> <span class=\"teal\">FailureMessage</span>( m_idWarning );\n \n  m_doc.PostFailure( fm );\n \n  transaction.Commit();\n</pre>\n<p>Failures will be validated and possibly resolved at the end of the transaction.  \n\n<h4>Failure Handling</h4>\n<p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. \nThe user is presented information and options in the UI to deal with the failures. \nBesides, if operations on the document require some special treatment for certain errors (or even all possible errors), you can customize automatic failure resolution. \n\n<p>Revit may detect failures at the end of any transaction.\nWhen it does so, it starts to handle the failures in repeated cycles. \nEach cycle of failure processing includes three steps:\n\n<ul>\n<li>Failure pre-processing \n(IFailuresProcessor)\n<li>Failure processing event \n(FailureProcessing event)\n<li>Final processing\n (IFailureProcessor)\n</li></li></li></ul>\n<p>These steps are called one by one in a cycle. \nEach of these three steps can control what happens and whether to continue to the next step by returning different FailureProcessingResults. \nCorresponding with these three steps, there are two interfaces and an event to implement failure handling. \nIf you know the transaction, IFailuresPreprocessor can be used. \nTo handle all possible errors, you can use the FailuresProcessing event. \nFinally, the IFailuresProcessor interface offers the ability to completely replace the standard failure processing. \n\n<p>Implement IFailuresPreprocessor interface and its method PreprocessFailures to handle failures. \nRegister and define an event handler to handle all failures. \nImplement IFailureProcessor interface and its ProcessFailures method to implement final failure handling. \n\n<p>In each step, we can delete elements, delete a warning, and resolve or post a failure.\nAll actions that can be taken are wrapped in the FailuresAccessor class.\n\n<h4>Handling a Warning</h4>\n<p>Here is a sample showing how to handle a warning posted by deleting the last instance of a linked Revit model. The following warning message is displayed to the user if no failure handling mechanism has been added:</p>\n<center>\n<img alt=\"Link removal warning\" src=\"img/failure_link_removal.png\"/>\n</center>\n<p>Revit users can manually click one of the three buttons to respond to the warning and dismiss the dialog. \nInstead, we will use failure handling APIs to mimic the manual click. \nFirst we use an event to handle the warning. \n\n<p>You can define the event handler and register to the FailuresProcessing event in an external command like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RegisterFailureEvent</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    app.Application.FailuresProcessing \n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">FailuresProcessingEventArgs</span>&gt;( \n        OnFailuresProcessing );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Define event handler.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnFailuresProcessing( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">FailuresProcessingEventArgs</span> e )\n  {\n    <span class=\"teal\">FailuresAccessor</span> failuresAccessor \n      = e.GetFailuresAccessor();\n \n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"green\">// FailureProcessingResult.Continue is to let </span>\n      <span class=\"green\">// the failure cycle continue next step.</span>\n \n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.Continue );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    <span class=\"green\">// If manually delete an element, the </span>\n    <span class=\"green\">// transaction name is 'Delete Selection'</span>\n    <span class=\"green\">// if the failure is caused by deleting element.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"Delete Selection\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Remove Link' button to resolve </span>\n        <span class=\"green\">// the failure.             </span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Ok' button by just deleting the warning.</span>\n \n        <span class=\"green\">//failuresAccessor.DeleteWarning(fma);         </span>\n      }\n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.ProceedWithCommit );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    e.SetProcessingResult( <span class=\"teal\">FailureProcessingResult</span>.Continue );\n  }\n}\n</pre>\n<p>The code in the event handler above shows two options to handle the warning. \nThe uncommented one resolves the warning, so that both the linked model and the linked file are removed. \nIf you comment the line saying 'failuresAccessor.ResolveFailure(fma)' and uncomment the 'failuresAccessor.DeleteWarning(fma)' one, the linked model is removed and the linked file remains. \n\n<p>Steps to use the failure handling above:\n\n<ol>\n<li>Build the code in a project, and create an add-in manifest file to load it into Revit.\n<li>Start Revit and create a new document.\n<li>Run the external command to register the event handler.\n<li>In the current Revit document, import a Revit model.\n<li>Delete the linked model using Revit's 'Delete' command.\n<li>You will see the expected result.\n</li></li></li></li></li></li></ol>\n<h4>Pre-processing a Warning</h4>\n<p>Now we will talk about how to pre-process warning. \nTo use the IFailuresPreprocessor interface to handle failures, we need to register the interface derived class to transaction. \nThen the derived interface class will be triggered when the failure is posted. \n\n<pre class=\"code\">\n[<span class=\"teal\">TransactionAttribute</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">RegenerationAttribute</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">FailureHandle</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( \n      doc, <span class=\"maroon\">\"DeleteLinkedModel\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">FailureHandlingOptions</span> options \n      = trans.GetFailureHandlingOptions();\n \n    <span class=\"teal\">MyPreProcessor</span> preproccessor \n      = <span class=\"blue\">new</span> <span class=\"teal\">MyPreProcessor</span>();\n \n    options.SetFailuresPreprocessor( preproccessor );\n    trans.SetFailureHandlingOptions( options );\n \n    <span class=\"teal\">Selection</span> sel = app.ActiveUIDocument.Selection;\n \n    <span class=\"teal\">Reference</span> ref1 = sel.PickObject( <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick a linked model instance\"</span> );\n \n    <span class=\"teal\">Element</span> elem = ref1.Element;\n \n    doc.Delete( elem );\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define a failure preprossor to handle failure</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">MyPreProcessor</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"teal\">FailureProcessingResult</span> \n    <span class=\"teal\">IFailuresPreprocessor</span>.PreprocessFailures( \n      <span class=\"teal\">FailuresAccessor</span> failuresAccessor )\n  {\n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n    }\n \n    <span class=\"green\">// We already know the transaction name.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"DeleteLinkedModel\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// ResolveFailure mimics clicking </span>\n        <span class=\"green\">// 'Remove Link' button             .</span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// DeleteWarning mimics clicking 'Ok' button.</span>\n        <span class=\"green\">//failuresAccessor.DeleteWarning( fma );         </span>\n      }\n \n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>\n        .ProceedWithCommit;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>Failure pre-processing can only be used for the failures caused by actions in your transaction. \nIn the sample, we delete the linked model by picking it and then delete it in our transaction. \nThe core code to handle the failure is the same as the event method above. \n\n<h4>Further Reading</h4>\n<p>This article is a general introduction to the failure posting and handing mechanism. \nMore resources are provided in the Revit 2011 SDK. \nThe sample project ErrorHandling shows more Failure API functionality. \nA detailed description of the Failure API is provided in Chapter 26 of the Developer Guide in the Revit 2011 SDK.  \nFor a reference to all relevant classes and methods, please refer to the Revit API help file RevitAPI.chm.\n\n<p>Many thanks to Joe for the useful overview and samples!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0484_failure_api",
    "header_text": "Failure Posting and Handling API",
    "local_header_href": "#failure-posting-and-handling-api",
    "chunk_text": "<h4>Failure Posting and Handling API</h4><p>Revit posts failure messages which may report either a warning or an error when there are issues in the model. \nFor example, when two walls partially overlap, Revit displays the following warning message:</p><center>\n<img alt=\"Wall overlap warning message\" src=\"img/failure_wall_overlap.png\"/>\n</center><p>Revit 2011 exposes the Failure API for posting and handling these kinds of failures. \nFailure posting APIs can be used to define and register new custom failures. \nCustom failures can be posted in your own plug-ins. \nFailure handling APIs can delete or resolve Revit failures when an operation on the model has been submitted. \nYou can do something to the model during the handling process. \nIf failures are handled by the failure handling API, users might not see the warning or error dialogs at all as if everything goes well. \nIn fact, these failures are handled by your application.\n\n<h4>Failure Posting</h4>\n<p>The failure posting API is easy to use. \nA new failure definition can be registered in the OnStartup method of an external application, and then the failure severity and resolution type can be set. \nHere is the code showing the registration of a warning. \nOnce custom failings have been registered, they can be posted in your program.\nHere is a code fragment to register a custom failure:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  <span class=\"green\">// Create failure definition Ids</span>\n \n  m_idWarning = <span class=\"blue\">new</span> <span class=\"teal\">FailureDefinitionId</span>( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( \n    <span class=\"maroon\">\"0C3F66B5-3E26-4d24-A228-7A8358C76D39\"</span> ) );\n \n  <span class=\"green\">// Create failure definition and add resolution</span>\n \n  m_fdWarning \n    = <span class=\"teal\">FailureDefinition</span>.CreateFailureDefinition( \n      m_idWarning, <span class=\"teal\">FailureSeverity</span>.Warning, \n      <span class=\"maroon\">\"I am the warning.\"</span> );\n \n  m_fdWarning.AddResolutionType( \n    <span class=\"teal\">FailureResolutionType</span>.MoveElements, \n    <span class=\"maroon\">\"MoveElements\"</span>, <span class=\"blue\">typeof</span>( <span class=\"teal\">DeleteElements</span> ) );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The Document.PostFailure method is used to notify the document of a problem. \n\n<p>Here is a code fragment to post a custom failure:\n\n<pre class=\"code\">\n  transaction.Start();\n \n  <span class=\"teal\">FailureMessage</span> fm \n    = <span class=\"blue\">new</span> <span class=\"teal\">FailureMessage</span>( m_idWarning );\n \n  m_doc.PostFailure( fm );\n \n  transaction.Commit();\n</pre>\n<p>Failures will be validated and possibly resolved at the end of the transaction.  \n\n<h4>Failure Handling</h4>\n<p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. \nThe user is presented information and options in the UI to deal with the failures. \nBesides, if operations on the document require some special treatment for certain errors (or even all possible errors), you can customize automatic failure resolution. \n\n<p>Revit may detect failures at the end of any transaction.\nWhen it does so, it starts to handle the failures in repeated cycles. \nEach cycle of failure processing includes three steps:\n\n<ul>\n<li>Failure pre-processing \n(IFailuresProcessor)\n<li>Failure processing event \n(FailureProcessing event)\n<li>Final processing\n (IFailureProcessor)\n</li></li></li></ul>\n<p>These steps are called one by one in a cycle. \nEach of these three steps can control what happens and whether to continue to the next step by returning different FailureProcessingResults. \nCorresponding with these three steps, there are two interfaces and an event to implement failure handling. \nIf you know the transaction, IFailuresPreprocessor can be used. \nTo handle all possible errors, you can use the FailuresProcessing event. \nFinally, the IFailuresProcessor interface offers the ability to completely replace the standard failure processing. \n\n<p>Implement IFailuresPreprocessor interface and its method PreprocessFailures to handle failures. \nRegister and define an event handler to handle all failures. \nImplement IFailureProcessor interface and its ProcessFailures method to implement final failure handling. \n\n<p>In each step, we can delete elements, delete a warning, and resolve or post a failure.\nAll actions that can be taken are wrapped in the FailuresAccessor class.\n\n<h4>Handling a Warning</h4>\n<p>Here is a sample showing how to handle a warning posted by deleting the last instance of a linked Revit model. The following warning message is displayed to the user if no failure handling mechanism has been added:</p>\n<center>\n<img alt=\"Link removal warning\" src=\"img/failure_link_removal.png\"/>\n</center>\n<p>Revit users can manually click one of the three buttons to respond to the warning and dismiss the dialog. \nInstead, we will use failure handling APIs to mimic the manual click. \nFirst we use an event to handle the warning. \n\n<p>You can define the event handler and register to the FailuresProcessing event in an external command like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RegisterFailureEvent</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    app.Application.FailuresProcessing \n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">FailuresProcessingEventArgs</span>&gt;( \n        OnFailuresProcessing );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Define event handler.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnFailuresProcessing( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">FailuresProcessingEventArgs</span> e )\n  {\n    <span class=\"teal\">FailuresAccessor</span> failuresAccessor \n      = e.GetFailuresAccessor();\n \n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"green\">// FailureProcessingResult.Continue is to let </span>\n      <span class=\"green\">// the failure cycle continue next step.</span>\n \n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.Continue );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    <span class=\"green\">// If manually delete an element, the </span>\n    <span class=\"green\">// transaction name is 'Delete Selection'</span>\n    <span class=\"green\">// if the failure is caused by deleting element.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"Delete Selection\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Remove Link' button to resolve </span>\n        <span class=\"green\">// the failure.             </span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Ok' button by just deleting the warning.</span>\n \n        <span class=\"green\">//failuresAccessor.DeleteWarning(fma);         </span>\n      }\n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.ProceedWithCommit );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    e.SetProcessingResult( <span class=\"teal\">FailureProcessingResult</span>.Continue );\n  }\n}\n</pre>\n<p>The code in the event handler above shows two options to handle the warning. \nThe uncommented one resolves the warning, so that both the linked model and the linked file are removed. \nIf you comment the line saying 'failuresAccessor.ResolveFailure(fma)' and uncomment the 'failuresAccessor.DeleteWarning(fma)' one, the linked model is removed and the linked file remains. \n\n<p>Steps to use the failure handling above:\n\n<ol>\n<li>Build the code in a project, and create an add-in manifest file to load it into Revit.\n<li>Start Revit and create a new document.\n<li>Run the external command to register the event handler.\n<li>In the current Revit document, import a Revit model.\n<li>Delete the linked model using Revit's 'Delete' command.\n<li>You will see the expected result.\n</li></li></li></li></li></li></ol>\n<h4>Pre-processing a Warning</h4>\n<p>Now we will talk about how to pre-process warning. \nTo use the IFailuresPreprocessor interface to handle failures, we need to register the interface derived class to transaction. \nThen the derived interface class will be triggered when the failure is posted. \n\n<pre class=\"code\">\n[<span class=\"teal\">TransactionAttribute</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">RegenerationAttribute</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">FailureHandle</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( \n      doc, <span class=\"maroon\">\"DeleteLinkedModel\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">FailureHandlingOptions</span> options \n      = trans.GetFailureHandlingOptions();\n \n    <span class=\"teal\">MyPreProcessor</span> preproccessor \n      = <span class=\"blue\">new</span> <span class=\"teal\">MyPreProcessor</span>();\n \n    options.SetFailuresPreprocessor( preproccessor );\n    trans.SetFailureHandlingOptions( options );\n \n    <span class=\"teal\">Selection</span> sel = app.ActiveUIDocument.Selection;\n \n    <span class=\"teal\">Reference</span> ref1 = sel.PickObject( <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick a linked model instance\"</span> );\n \n    <span class=\"teal\">Element</span> elem = ref1.Element;\n \n    doc.Delete( elem );\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define a failure preprossor to handle failure</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">MyPreProcessor</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"teal\">FailureProcessingResult</span> \n    <span class=\"teal\">IFailuresPreprocessor</span>.PreprocessFailures( \n      <span class=\"teal\">FailuresAccessor</span> failuresAccessor )\n  {\n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n    }\n \n    <span class=\"green\">// We already know the transaction name.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"DeleteLinkedModel\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// ResolveFailure mimics clicking </span>\n        <span class=\"green\">// 'Remove Link' button             .</span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// DeleteWarning mimics clicking 'Ok' button.</span>\n        <span class=\"green\">//failuresAccessor.DeleteWarning( fma );         </span>\n      }\n \n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>\n        .ProceedWithCommit;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>Failure pre-processing can only be used for the failures caused by actions in your transaction. \nIn the sample, we delete the linked model by picking it and then delete it in our transaction. \nThe core code to handle the failure is the same as the event method above. \n\n<h4>Further Reading</h4>\n<p>This article is a general introduction to the failure posting and handing mechanism. \nMore resources are provided in the Revit 2011 SDK. \nThe sample project ErrorHandling shows more Failure API functionality. \nA detailed description of the Failure API is provided in Chapter 26 of the Developer Guide in the Revit 2011 SDK.  \nFor a reference to all relevant classes and methods, please refer to the Revit API help file RevitAPI.chm.\n\n<p>Many thanks to Joe for the useful overview and samples!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0484_failure_api",
    "header_text": "Failure Posting",
    "local_header_href": "#failure-posting",
    "chunk_text": "<h4>Failure Posting</h4><p>The failure posting API is easy to use. \nA new failure definition can be registered in the OnStartup method of an external application, and then the failure severity and resolution type can be set. \nHere is the code showing the registration of a warning. \nOnce custom failings have been registered, they can be posted in your program.\nHere is a code fragment to register a custom failure:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> OnStartup( <span class=\"teal\">UIControlledApplication</span> a )\n{\n  <span class=\"green\">// Create failure definition Ids</span>\n \n  m_idWarning = <span class=\"blue\">new</span> <span class=\"teal\">FailureDefinitionId</span>( <span class=\"blue\">new</span> <span class=\"teal\">Guid</span>( \n    <span class=\"maroon\">\"0C3F66B5-3E26-4d24-A228-7A8358C76D39\"</span> ) );\n \n  <span class=\"green\">// Create failure definition and add resolution</span>\n \n  m_fdWarning \n    = <span class=\"teal\">FailureDefinition</span>.CreateFailureDefinition( \n      m_idWarning, <span class=\"teal\">FailureSeverity</span>.Warning, \n      <span class=\"maroon\">\"I am the warning.\"</span> );\n \n  m_fdWarning.AddResolutionType( \n    <span class=\"teal\">FailureResolutionType</span>.MoveElements, \n    <span class=\"maroon\">\"MoveElements\"</span>, <span class=\"blue\">typeof</span>( <span class=\"teal\">DeleteElements</span> ) );\n \n  <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n}\n</pre>\n<p>The Document.PostFailure method is used to notify the document of a problem. \n\n<p>Here is a code fragment to post a custom failure:\n\n<pre class=\"code\">\n  transaction.Start();\n \n  <span class=\"teal\">FailureMessage</span> fm \n    = <span class=\"blue\">new</span> <span class=\"teal\">FailureMessage</span>( m_idWarning );\n \n  m_doc.PostFailure( fm );\n \n  transaction.Commit();\n</pre>\n<p>Failures will be validated and possibly resolved at the end of the transaction.  \n\n<h4>Failure Handling</h4>\n<p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. \nThe user is presented information and options in the UI to deal with the failures. \nBesides, if operations on the document require some special treatment for certain errors (or even all possible errors), you can customize automatic failure resolution. \n\n<p>Revit may detect failures at the end of any transaction.\nWhen it does so, it starts to handle the failures in repeated cycles. \nEach cycle of failure processing includes three steps:\n\n<ul>\n<li>Failure pre-processing \n(IFailuresProcessor)\n<li>Failure processing event \n(FailureProcessing event)\n<li>Final processing\n (IFailureProcessor)\n</li></li></li></ul>\n<p>These steps are called one by one in a cycle. \nEach of these three steps can control what happens and whether to continue to the next step by returning different FailureProcessingResults. \nCorresponding with these three steps, there are two interfaces and an event to implement failure handling. \nIf you know the transaction, IFailuresPreprocessor can be used. \nTo handle all possible errors, you can use the FailuresProcessing event. \nFinally, the IFailuresProcessor interface offers the ability to completely replace the standard failure processing. \n\n<p>Implement IFailuresPreprocessor interface and its method PreprocessFailures to handle failures. \nRegister and define an event handler to handle all failures. \nImplement IFailureProcessor interface and its ProcessFailures method to implement final failure handling. \n\n<p>In each step, we can delete elements, delete a warning, and resolve or post a failure.\nAll actions that can be taken are wrapped in the FailuresAccessor class.\n\n<h4>Handling a Warning</h4>\n<p>Here is a sample showing how to handle a warning posted by deleting the last instance of a linked Revit model. The following warning message is displayed to the user if no failure handling mechanism has been added:</p>\n<center>\n<img alt=\"Link removal warning\" src=\"img/failure_link_removal.png\"/>\n</center>\n<p>Revit users can manually click one of the three buttons to respond to the warning and dismiss the dialog. \nInstead, we will use failure handling APIs to mimic the manual click. \nFirst we use an event to handle the warning. \n\n<p>You can define the event handler and register to the FailuresProcessing event in an external command like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RegisterFailureEvent</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    app.Application.FailuresProcessing \n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">FailuresProcessingEventArgs</span>&gt;( \n        OnFailuresProcessing );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Define event handler.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnFailuresProcessing( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">FailuresProcessingEventArgs</span> e )\n  {\n    <span class=\"teal\">FailuresAccessor</span> failuresAccessor \n      = e.GetFailuresAccessor();\n \n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"green\">// FailureProcessingResult.Continue is to let </span>\n      <span class=\"green\">// the failure cycle continue next step.</span>\n \n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.Continue );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    <span class=\"green\">// If manually delete an element, the </span>\n    <span class=\"green\">// transaction name is 'Delete Selection'</span>\n    <span class=\"green\">// if the failure is caused by deleting element.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"Delete Selection\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Remove Link' button to resolve </span>\n        <span class=\"green\">// the failure.             </span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Ok' button by just deleting the warning.</span>\n \n        <span class=\"green\">//failuresAccessor.DeleteWarning(fma);         </span>\n      }\n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.ProceedWithCommit );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    e.SetProcessingResult( <span class=\"teal\">FailureProcessingResult</span>.Continue );\n  }\n}\n</pre>\n<p>The code in the event handler above shows two options to handle the warning. \nThe uncommented one resolves the warning, so that both the linked model and the linked file are removed. \nIf you comment the line saying 'failuresAccessor.ResolveFailure(fma)' and uncomment the 'failuresAccessor.DeleteWarning(fma)' one, the linked model is removed and the linked file remains. \n\n<p>Steps to use the failure handling above:\n\n<ol>\n<li>Build the code in a project, and create an add-in manifest file to load it into Revit.\n<li>Start Revit and create a new document.\n<li>Run the external command to register the event handler.\n<li>In the current Revit document, import a Revit model.\n<li>Delete the linked model using Revit's 'Delete' command.\n<li>You will see the expected result.\n</li></li></li></li></li></li></ol>\n<h4>Pre-processing a Warning</h4>\n<p>Now we will talk about how to pre-process warning. \nTo use the IFailuresPreprocessor interface to handle failures, we need to register the interface derived class to transaction. \nThen the derived interface class will be triggered when the failure is posted. \n\n<pre class=\"code\">\n[<span class=\"teal\">TransactionAttribute</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">RegenerationAttribute</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">FailureHandle</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( \n      doc, <span class=\"maroon\">\"DeleteLinkedModel\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">FailureHandlingOptions</span> options \n      = trans.GetFailureHandlingOptions();\n \n    <span class=\"teal\">MyPreProcessor</span> preproccessor \n      = <span class=\"blue\">new</span> <span class=\"teal\">MyPreProcessor</span>();\n \n    options.SetFailuresPreprocessor( preproccessor );\n    trans.SetFailureHandlingOptions( options );\n \n    <span class=\"teal\">Selection</span> sel = app.ActiveUIDocument.Selection;\n \n    <span class=\"teal\">Reference</span> ref1 = sel.PickObject( <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick a linked model instance\"</span> );\n \n    <span class=\"teal\">Element</span> elem = ref1.Element;\n \n    doc.Delete( elem );\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define a failure preprossor to handle failure</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">MyPreProcessor</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"teal\">FailureProcessingResult</span> \n    <span class=\"teal\">IFailuresPreprocessor</span>.PreprocessFailures( \n      <span class=\"teal\">FailuresAccessor</span> failuresAccessor )\n  {\n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n    }\n \n    <span class=\"green\">// We already know the transaction name.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"DeleteLinkedModel\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// ResolveFailure mimics clicking </span>\n        <span class=\"green\">// 'Remove Link' button             .</span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// DeleteWarning mimics clicking 'Ok' button.</span>\n        <span class=\"green\">//failuresAccessor.DeleteWarning( fma );         </span>\n      }\n \n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>\n        .ProceedWithCommit;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>Failure pre-processing can only be used for the failures caused by actions in your transaction. \nIn the sample, we delete the linked model by picking it and then delete it in our transaction. \nThe core code to handle the failure is the same as the event method above. \n\n<h4>Further Reading</h4>\n<p>This article is a general introduction to the failure posting and handing mechanism. \nMore resources are provided in the Revit 2011 SDK. \nThe sample project ErrorHandling shows more Failure API functionality. \nA detailed description of the Failure API is provided in Chapter 26 of the Developer Guide in the Revit 2011 SDK.  \nFor a reference to all relevant classes and methods, please refer to the Revit API help file RevitAPI.chm.\n\n<p>Many thanks to Joe for the useful overview and samples!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0484_failure_api",
    "header_text": "Failure Handling",
    "local_header_href": "#failure-handling",
    "chunk_text": "<h4>Failure Handling</h4><p>Normally posted failures are processed by Revit's standard failure resolution UI at the end of transaction. \nThe user is presented information and options in the UI to deal with the failures. \nBesides, if operations on the document require some special treatment for certain errors (or even all possible errors), you can customize automatic failure resolution. \n\n<p>Revit may detect failures at the end of any transaction.\nWhen it does so, it starts to handle the failures in repeated cycles. \nEach cycle of failure processing includes three steps:\n\n<ul>\n<li>Failure pre-processing \n(IFailuresProcessor)\n<li>Failure processing event \n(FailureProcessing event)\n<li>Final processing\n (IFailureProcessor)\n</li></li></li></ul>\n<p>These steps are called one by one in a cycle. \nEach of these three steps can control what happens and whether to continue to the next step by returning different FailureProcessingResults. \nCorresponding with these three steps, there are two interfaces and an event to implement failure handling. \nIf you know the transaction, IFailuresPreprocessor can be used. \nTo handle all possible errors, you can use the FailuresProcessing event. \nFinally, the IFailuresProcessor interface offers the ability to completely replace the standard failure processing. \n\n<p>Implement IFailuresPreprocessor interface and its method PreprocessFailures to handle failures. \nRegister and define an event handler to handle all failures. \nImplement IFailureProcessor interface and its ProcessFailures method to implement final failure handling. \n\n<p>In each step, we can delete elements, delete a warning, and resolve or post a failure.\nAll actions that can be taken are wrapped in the FailuresAccessor class.\n\n<h4>Handling a Warning</h4>\n<p>Here is a sample showing how to handle a warning posted by deleting the last instance of a linked Revit model. The following warning message is displayed to the user if no failure handling mechanism has been added:</p>\n<center>\n<img alt=\"Link removal warning\" src=\"img/failure_link_removal.png\"/>\n</center>\n<p>Revit users can manually click one of the three buttons to respond to the warning and dismiss the dialog. \nInstead, we will use failure handling APIs to mimic the manual click. \nFirst we use an event to handle the warning. \n\n<p>You can define the event handler and register to the FailuresProcessing event in an external command like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RegisterFailureEvent</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    app.Application.FailuresProcessing \n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">FailuresProcessingEventArgs</span>&gt;( \n        OnFailuresProcessing );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Define event handler.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnFailuresProcessing( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">FailuresProcessingEventArgs</span> e )\n  {\n    <span class=\"teal\">FailuresAccessor</span> failuresAccessor \n      = e.GetFailuresAccessor();\n \n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"green\">// FailureProcessingResult.Continue is to let </span>\n      <span class=\"green\">// the failure cycle continue next step.</span>\n \n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.Continue );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    <span class=\"green\">// If manually delete an element, the </span>\n    <span class=\"green\">// transaction name is 'Delete Selection'</span>\n    <span class=\"green\">// if the failure is caused by deleting element.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"Delete Selection\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Remove Link' button to resolve </span>\n        <span class=\"green\">// the failure.             </span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Ok' button by just deleting the warning.</span>\n \n        <span class=\"green\">//failuresAccessor.DeleteWarning(fma);         </span>\n      }\n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.ProceedWithCommit );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    e.SetProcessingResult( <span class=\"teal\">FailureProcessingResult</span>.Continue );\n  }\n}\n</pre>\n<p>The code in the event handler above shows two options to handle the warning. \nThe uncommented one resolves the warning, so that both the linked model and the linked file are removed. \nIf you comment the line saying 'failuresAccessor.ResolveFailure(fma)' and uncomment the 'failuresAccessor.DeleteWarning(fma)' one, the linked model is removed and the linked file remains. \n\n<p>Steps to use the failure handling above:\n\n<ol>\n<li>Build the code in a project, and create an add-in manifest file to load it into Revit.\n<li>Start Revit and create a new document.\n<li>Run the external command to register the event handler.\n<li>In the current Revit document, import a Revit model.\n<li>Delete the linked model using Revit's 'Delete' command.\n<li>You will see the expected result.\n</li></li></li></li></li></li></ol>\n<h4>Pre-processing a Warning</h4>\n<p>Now we will talk about how to pre-process warning. \nTo use the IFailuresPreprocessor interface to handle failures, we need to register the interface derived class to transaction. \nThen the derived interface class will be triggered when the failure is posted. \n\n<pre class=\"code\">\n[<span class=\"teal\">TransactionAttribute</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">RegenerationAttribute</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">FailureHandle</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( \n      doc, <span class=\"maroon\">\"DeleteLinkedModel\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">FailureHandlingOptions</span> options \n      = trans.GetFailureHandlingOptions();\n \n    <span class=\"teal\">MyPreProcessor</span> preproccessor \n      = <span class=\"blue\">new</span> <span class=\"teal\">MyPreProcessor</span>();\n \n    options.SetFailuresPreprocessor( preproccessor );\n    trans.SetFailureHandlingOptions( options );\n \n    <span class=\"teal\">Selection</span> sel = app.ActiveUIDocument.Selection;\n \n    <span class=\"teal\">Reference</span> ref1 = sel.PickObject( <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick a linked model instance\"</span> );\n \n    <span class=\"teal\">Element</span> elem = ref1.Element;\n \n    doc.Delete( elem );\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define a failure preprossor to handle failure</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">MyPreProcessor</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"teal\">FailureProcessingResult</span> \n    <span class=\"teal\">IFailuresPreprocessor</span>.PreprocessFailures( \n      <span class=\"teal\">FailuresAccessor</span> failuresAccessor )\n  {\n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n    }\n \n    <span class=\"green\">// We already know the transaction name.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"DeleteLinkedModel\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// ResolveFailure mimics clicking </span>\n        <span class=\"green\">// 'Remove Link' button             .</span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// DeleteWarning mimics clicking 'Ok' button.</span>\n        <span class=\"green\">//failuresAccessor.DeleteWarning( fma );         </span>\n      }\n \n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>\n        .ProceedWithCommit;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>Failure pre-processing can only be used for the failures caused by actions in your transaction. \nIn the sample, we delete the linked model by picking it and then delete it in our transaction. \nThe core code to handle the failure is the same as the event method above. \n\n<h4>Further Reading</h4>\n<p>This article is a general introduction to the failure posting and handing mechanism. \nMore resources are provided in the Revit 2011 SDK. \nThe sample project ErrorHandling shows more Failure API functionality. \nA detailed description of the Failure API is provided in Chapter 26 of the Developer Guide in the Revit 2011 SDK.  \nFor a reference to all relevant classes and methods, please refer to the Revit API help file RevitAPI.chm.\n\n<p>Many thanks to Joe for the useful overview and samples!\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0484_failure_api",
    "header_text": "Handling a Warning",
    "local_header_href": "#handling-a-warning",
    "chunk_text": "<h4>Handling a Warning</h4><p>Here is a sample showing how to handle a warning posted by deleting the last instance of a linked Revit model. The following warning message is displayed to the user if no failure handling mechanism has been added:</p><center>\n<img alt=\"Link removal warning\" src=\"img/failure_link_removal.png\"/>\n</center><p>Revit users can manually click one of the three buttons to respond to the warning and dismiss the dialog. \nInstead, we will use failure handling APIs to mimic the manual click. \nFirst we use an event to handle the warning. \n\n<p>You can define the event handler and register to the FailuresProcessing event in an external command like this:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">RegisterFailureEvent</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    app.Application.FailuresProcessing \n      += <span class=\"blue\">new</span> <span class=\"teal\">EventHandler</span>&lt;<span class=\"teal\">FailuresProcessingEventArgs</span>&gt;( \n        OnFailuresProcessing );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Define event handler.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">private</span> <span class=\"blue\">void</span> OnFailuresProcessing( \n    <span class=\"blue\">object</span> sender, \n    <span class=\"teal\">FailuresProcessingEventArgs</span> e )\n  {\n    <span class=\"teal\">FailuresAccessor</span> failuresAccessor \n      = e.GetFailuresAccessor();\n \n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"green\">// FailureProcessingResult.Continue is to let </span>\n      <span class=\"green\">// the failure cycle continue next step.</span>\n \n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.Continue );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    <span class=\"green\">// If manually delete an element, the </span>\n    <span class=\"green\">// transaction name is 'Delete Selection'</span>\n    <span class=\"green\">// if the failure is caused by deleting element.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"Delete Selection\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Remove Link' button to resolve </span>\n        <span class=\"green\">// the failure.             </span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// the following line mimics clicking the </span>\n        <span class=\"green\">// 'Ok' button by just deleting the warning.</span>\n \n        <span class=\"green\">//failuresAccessor.DeleteWarning(fma);         </span>\n      }\n      e.SetProcessingResult( \n        <span class=\"teal\">FailureProcessingResult</span>.ProceedWithCommit );\n \n      <span class=\"blue\">return</span>;\n    }\n \n    e.SetProcessingResult( <span class=\"teal\">FailureProcessingResult</span>.Continue );\n  }\n}\n</pre>\n<p>The code in the event handler above shows two options to handle the warning. \nThe uncommented one resolves the warning, so that both the linked model and the linked file are removed. \nIf you comment the line saying 'failuresAccessor.ResolveFailure(fma)' and uncomment the 'failuresAccessor.DeleteWarning(fma)' one, the linked model is removed and the linked file remains. \n\n<p>Steps to use the failure handling above:\n\n<ol>\n<li>Build the code in a project, and create an add-in manifest file to load it into Revit.\n<li>Start Revit and create a new document.\n<li>Run the external command to register the event handler.\n<li>In the current Revit document, import a Revit model.\n<li>Delete the linked model using Revit's 'Delete' command.\n<li>You will see the expected result.\n</li></li></li></li></li></li></ol>\n<h4>Pre-processing a Warning</h4>\n<p>Now we will talk about how to pre-process warning. \nTo use the IFailuresPreprocessor interface to handle failures, we need to register the interface derived class to transaction. \nThen the derived interface class will be triggered when the failure is posted. \n\n<pre class=\"code\">\n[<span class=\"teal\">TransactionAttribute</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">RegenerationAttribute</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">FailureHandle</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( \n      doc, <span class=\"maroon\">\"DeleteLinkedModel\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">FailureHandlingOptions</span> options \n      = trans.GetFailureHandlingOptions();\n \n    <span class=\"teal\">MyPreProcessor</span> preproccessor \n      = <span class=\"blue\">new</span> <span class=\"teal\">MyPreProcessor</span>();\n \n    options.SetFailuresPreprocessor( preproccessor );\n    trans.SetFailureHandlingOptions( options );\n \n    <span class=\"teal\">Selection</span> sel = app.ActiveUIDocument.Selection;\n \n    <span class=\"teal\">Reference</span> ref1 = sel.PickObject( <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick a linked model instance\"</span> );\n \n    <span class=\"teal\">Element</span> elem = ref1.Element;\n \n    doc.Delete( elem );\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define a failure preprossor to handle failure</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">MyPreProcessor</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"teal\">FailureProcessingResult</span> \n    <span class=\"teal\">IFailuresPreprocessor</span>.PreprocessFailures( \n      <span class=\"teal\">FailuresAccessor</span> failuresAccessor )\n  {\n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n    }\n \n    <span class=\"green\">// We already know the transaction name.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"DeleteLinkedModel\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// ResolveFailure mimics clicking </span>\n        <span class=\"green\">// 'Remove Link' button             .</span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// DeleteWarning mimics clicking 'Ok' button.</span>\n        <span class=\"green\">//failuresAccessor.DeleteWarning( fma );         </span>\n      }\n \n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>\n        .ProceedWithCommit;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>Failure pre-processing can only be used for the failures caused by actions in your transaction. \nIn the sample, we delete the linked model by picking it and then delete it in our transaction. \nThe core code to handle the failure is the same as the event method above. \n\n<h4>Further Reading</h4>\n<p>This article is a general introduction to the failure posting and handing mechanism. \nMore resources are provided in the Revit 2011 SDK. \nThe sample project ErrorHandling shows more Failure API functionality. \nA detailed description of the Failure API is provided in Chapter 26 of the Developer Guide in the Revit 2011 SDK.  \nFor a reference to all relevant classes and methods, please refer to the Revit API help file RevitAPI.chm.\n\n<p>Many thanks to Joe for the useful overview and samples!\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0484_failure_api",
    "header_text": "Pre-processing a Warning",
    "local_header_href": "#pre-processing-a-warning",
    "chunk_text": "<h4>Pre-processing a Warning</h4><p>Now we will talk about how to pre-process warning. \nTo use the IFailuresPreprocessor interface to handle failures, we need to register the interface derived class to transaction. \nThen the derived interface class will be triggered when the failure is posted. \n\n<pre class=\"code\">\n[<span class=\"teal\">TransactionAttribute</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n[<span class=\"teal\">RegenerationAttribute</span>( <span class=\"teal\">RegenerationOption</span>.Manual )]\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">FailureHandle</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute( \n    <span class=\"teal\">ExternalCommandData</span> commandData, \n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> messages, \n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n    <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( \n      doc, <span class=\"maroon\">\"DeleteLinkedModel\"</span> );\n \n    trans.Start();\n \n    <span class=\"teal\">FailureHandlingOptions</span> options \n      = trans.GetFailureHandlingOptions();\n \n    <span class=\"teal\">MyPreProcessor</span> preproccessor \n      = <span class=\"blue\">new</span> <span class=\"teal\">MyPreProcessor</span>();\n \n    options.SetFailuresPreprocessor( preproccessor );\n    trans.SetFailureHandlingOptions( options );\n \n    <span class=\"teal\">Selection</span> sel = app.ActiveUIDocument.Selection;\n \n    <span class=\"teal\">Reference</span> ref1 = sel.PickObject( <span class=\"teal\">ObjectType</span>.Element, \n      <span class=\"maroon\">\"Please pick a linked model instance\"</span> );\n \n    <span class=\"teal\">Element</span> elem = ref1.Element;\n \n    doc.Delete( elem );\n \n    trans.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n \n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Define a failure preprossor to handle failure</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">MyPreProcessor</span> : <span class=\"teal\">IFailuresPreprocessor</span>\n{\n  <span class=\"teal\">FailureProcessingResult</span> \n    <span class=\"teal\">IFailuresPreprocessor</span>.PreprocessFailures( \n      <span class=\"teal\">FailuresAccessor</span> failuresAccessor )\n  {\n    <span class=\"teal\">String</span> transactionName \n      = failuresAccessor.GetTransactionName();\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; fmas \n      = failuresAccessor.GetFailureMessages();\n \n    <span class=\"blue\">if</span>( fmas.Count == 0 )\n    {\n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n    }\n \n    <span class=\"green\">// We already know the transaction name.</span>\n \n    <span class=\"blue\">if</span>( transactionName.Equals( <span class=\"maroon\">\"DeleteLinkedModel\"</span> ) )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> fma <span class=\"blue\">in</span> fmas )\n      {\n        <span class=\"green\">// ResolveFailure mimics clicking </span>\n        <span class=\"green\">// 'Remove Link' button             .</span>\n \n        failuresAccessor.ResolveFailure( fma );\n \n        <span class=\"green\">// DeleteWarning mimics clicking 'Ok' button.</span>\n        <span class=\"green\">//failuresAccessor.DeleteWarning( fma );         </span>\n      }\n \n      <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>\n        .ProceedWithCommit;\n    }\n    <span class=\"blue\">return</span> <span class=\"teal\">FailureProcessingResult</span>.Continue;\n  }\n}\n</pre>\n<p>Failure pre-processing can only be used for the failures caused by actions in your transaction. \nIn the sample, we delete the linked model by picking it and then delete it in our transaction. \nThe core code to handle the failure is the same as the event method above. \n\n<h4>Further Reading</h4>\n<p>This article is a general introduction to the failure posting and handing mechanism. \nMore resources are provided in the Revit 2011 SDK. \nThe sample project ErrorHandling shows more Failure API functionality. \nA detailed description of the Failure API is provided in Chapter 26 of the Developer Guide in the Revit 2011 SDK.  \nFor a reference to all relevant classes and methods, please refer to the Revit API help file RevitAPI.chm.\n\n<p>Many thanks to Joe for the useful overview and samples!\n</p></p></p></p>"
  },
  {
    "original_filename": "0484_failure_api",
    "header_text": "Further Reading",
    "local_header_href": "#further-reading",
    "chunk_text": "<h4>Further Reading</h4><p>This article is a general introduction to the failure posting and handing mechanism. \nMore resources are provided in the Revit 2011 SDK. \nThe sample project ErrorHandling shows more Failure API functionality. \nA detailed description of the Failure API is provided in Chapter 26 of the Developer Guide in the Revit 2011 SDK.  \nFor a reference to all relevant classes and methods, please refer to the Revit API help file RevitAPI.chm.\n\n<p>Many thanks to Joe for the useful overview and samples!\n</p></p>"
  }
]