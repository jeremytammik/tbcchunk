[
  {
    "original_filename": "0832_find_element_optimise",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0832_find_element_optimise",
    "header_text": "FindElement and Collector Optimisation",
    "local_header_href": "#findelement-and-collector-optimisation",
    "chunk_text": "<h3>FindElement and Collector Optimisation</h3><p>As I recently \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/video-animated-ribbon-item-tooltip.html#2\">\nmentioned</a>, \n\nMikako Harada published a very nice article on\n\n<a href=\"http://adndevblog.typepad.com/aec/2012/09/adjusting-cutback-programmatically-.html\">\nprogrammatically adjusting beam cutback</a>.\n\n<p>It was followed it up by a description of some commonly used \n\n<a href=\"http://adndevblog.typepad.com/aec/2012/09/helper-functions-findfamilytype-and-findelement.html\">\nhelper methods</a> to \n\nfind certain named elements and family symbols in a project.\nOne of them is FindElement, implemented as follows in that post:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">Element</span> FindElement(\n    <span class=\"teal\">Document</span> doc,\n    <span class=\"teal\">Type</span> targetType,\n    <span class=\"blue\">string</span> targetName )\n  {\n    <span class=\"green\">// Get the elements of the given class </span>\n \n    <span class=\"teal\">FilteredElementCollector</span> collector \n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n    collector.WherePasses( \n      <span class=\"blue\">new</span> <span class=\"teal\">ElementClassFilter</span>( targetType ) );\n \n    <span class=\"green\">// Parse the collection for the </span>\n    <span class=\"green\">// given name using LINQ query.</span>\n \n    <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Element</span>&gt; targetElems =\n      <span class=\"blue\">from</span> element <span class=\"blue\">in</span> collector\n      <span class=\"blue\">where</span> element.Name.Equals( targetName )\n      <span class=\"blue\">select</span> element;\n \n    <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Element</span>&gt; elems = targetElems.ToList();\n \n    <span class=\"blue\">if</span>( elems.Count &gt; 0 )\n    {\n      <span class=\"green\">// We should have only one with the given name.</span>\n \n      <span class=\"blue\">return</span> elems[0];\n    }\n \n    <span class=\"green\">// Cannot find it.</span>\n \n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n</pre>\n<p>It is important to be aware that this method can be optimised further in some aspects and should not be used indiscriminately.\n\n<p>Here are some points I would like to highlight:\n\n<ol>\n<li>Language dependence: should be avoided if possible.\n<li>Speed: could be improved by using a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/element-name-parameter-filter-correction.html\">\nparameter filter instead of LINQ</a>.\n\n<li>Conversion from a filtered element collector to .NET collections can often be avoided.\n</li></li></li></ol>\n<p>I avoid using the helper methods in this form wherever I can if performance is a factor.\nWhen is it not?\n\n<p>It is not always possible to avoid the language dependence.\nIn any case, it is definitely important to be aware of the issue.\n\n<p>In detail:\n\n<ol>\n<li>Language dependence: if there is any way to identify the target element except by name, it is normally preferable to do so.\n\n<li>Speed: using a parameter filter to find a name may be complicated by the fact that different Revit element types store their names in different parameter values. \nThe LINQ query can mostly be replaced by a parameter filter, though, which normally halves the execution time, since the marshalling of all the non-target data from internal Revit memory to external .NET and LINQ space is eliminated.\n\n<li>A filtered element collector is already iterable, so the conversion to an <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Element</span>&gt; and to <span class=\"teal\">IList</span>&lt;<span class=\"teal\">Element</span>&gt; is often unnecessary.\nIf all filtering can be achieved using filtered element collector functionality, the instantiation of additional lists and consequent duplication and copying of all contained data members can be completely avoided.\nThis is obviously especially important for large collections.\n</li></li></li></ol>\n<p>I mentioned performance hints such as these numerous times in the past between the lines.\nMaybe the time is ripe now to bring them up as a topic of their own.\n\n<p>Mikako underlines that the main intention of the helper method above is to make it as easy as possible for the reader to copy and paste these code snippets to quickly run the test command instead of having to download, explore and install the whole ADN training material zip file, and performance is a completely secondary consideration.\n\n<p>If performance becomes a bottleneck, each developer needs examine it and implement her own optimised version. \nAccessing a wall type, for example, does not require this kind of filtering from the whole element list.  \n\n\n\n<a name=\"2\"></a>\n<h4>Collector Optimisation</h4>\n<p>While we are on the topic of efficient coding, here is another snippet of typical add-in code presenting a surprising number of opportunities for improvement in a very few lines.\n\n<p>It retrieves all family symbols in the document, uses them to find door families, and processes each one in turn:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  <span class=\"teal\">FilteredElementIterator</span> itor = collector\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) )\n    .GetElementIterator();\n \n  itor.Reset();\n \n  <span class=\"blue\">while</span>( itor.MoveNext() )\n  {\n    <span class=\"teal\">FamilySymbol</span> symbol = itor.Current\n      <span class=\"blue\">as</span> Autodesk.Revit.DB.<span class=\"teal\">FamilySymbol</span>;\n \n    <span class=\"green\">// Determine family category</span>\n \n    <span class=\"teal\">Category</span> cat = symbol.Category;\n \n    <span class=\"green\">// Process family if doors category</span>\n \n    <span class=\"blue\">if</span>( cat != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">if</span>( cat.Name == <span class=\"maroon\">\"Doors\"</span> )\n      {\n        <span class=\"teal\">Family</span> family = symbol.Family;\n \n        <span class=\"green\">// Process reference to doors family</span>\n      }\n    }\n  }\n</pre>\n<p>Can you spot three possibilities for improvement, either a more succinct formulation, performance enhancement, or both?\nAnd manage not to peek?\n\n<p>Here are the ones I found, which is not to say that there are no others:\n\n<ul>\n<li>The code can be significantly shortened by using foreach directly on the collector instead of explicitly setting up and using an iterator.\n\n<li>You should avoid explicit string comparison when you can, both for reasons of performance and language independence, e.g. use the built-in category for doors instead of the category name, which might be localised.\n\n<li>In this case, you could let the collector handle the category selection for you, making the code significantly more efficient.\n\n<!--\n<li>It is redundant to say 'if(something==true)', because 'if(something)' is exactly synonymous: \nThe 'something' being evaluated by the if statement already is a Boolean expression. \nUsing the equality operator to produce another Boolean expression by comparing its value with the literal bool true is unnecessary.\n-->\n</li></li></li></ul>\n<p>Applying these suggestions produces this instead:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n  = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n    .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Doors )\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> symbol <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"teal\">Family</span> family = symbol.Family;\n \n    <span class=\"green\">// Process reference to doors family</span>\n  }\n</pre>\n<!--\n&nbsp; &nbsp; <span class=\"blue\">if</span>( family.IsExternalFileReference() )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; <span class=\"green\">// Process reference to doors family</span>\n&nbsp; &nbsp; }\n-->\n<p>Shorter, more readable, and more performant.\n\n<p>Since each family can contain more than one symbol, you should obviously keep track of the families already processed and skip those when looping over the symbols.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0832_find_element_optimise",
    "header_text": "Collector Optimisation",
    "local_header_href": "#collector-optimisation",
    "chunk_text": "<h4>Collector Optimisation</h4><p>While we are on the topic of efficient coding, here is another snippet of typical add-in code presenting a surprising number of opportunities for improvement in a very few lines.\n\n<p>It retrieves all family symbols in the document, uses them to find door families, and processes each one in turn:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector \n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  <span class=\"teal\">FilteredElementIterator</span> itor = collector\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) )\n    .GetElementIterator();\n \n  itor.Reset();\n \n  <span class=\"blue\">while</span>( itor.MoveNext() )\n  {\n    <span class=\"teal\">FamilySymbol</span> symbol = itor.Current\n      <span class=\"blue\">as</span> Autodesk.Revit.DB.<span class=\"teal\">FamilySymbol</span>;\n \n    <span class=\"green\">// Determine family category</span>\n \n    <span class=\"teal\">Category</span> cat = symbol.Category;\n \n    <span class=\"green\">// Process family if doors category</span>\n \n    <span class=\"blue\">if</span>( cat != <span class=\"blue\">null</span> )\n    {\n      <span class=\"blue\">if</span>( cat.Name == <span class=\"maroon\">\"Doors\"</span> )\n      {\n        <span class=\"teal\">Family</span> family = symbol.Family;\n \n        <span class=\"green\">// Process reference to doors family</span>\n      }\n    }\n  }\n</pre>\n<p>Can you spot three possibilities for improvement, either a more succinct formulation, performance enhancement, or both?\nAnd manage not to peek?\n\n<p>Here are the ones I found, which is not to say that there are no others:\n\n<ul>\n<li>The code can be significantly shortened by using foreach directly on the collector instead of explicitly setting up and using an iterator.\n\n<li>You should avoid explicit string comparison when you can, both for reasons of performance and language independence, e.g. use the built-in category for doors instead of the category name, which might be localised.\n\n<li>In this case, you could let the collector handle the category selection for you, making the code significantly more efficient.\n\n<!--\n<li>It is redundant to say 'if(something==true)', because 'if(something)' is exactly synonymous: \nThe 'something' being evaluated by the if statement already is a Boolean expression. \nUsing the equality operator to produce another Boolean expression by comparing its value with the literal bool true is unnecessary.\n-->\n</li></li></li></ul>\n<p>Applying these suggestions produces this instead:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n  = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n    .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Doors )\n    .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilySymbol</span> ) );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> symbol <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"teal\">Family</span> family = symbol.Family;\n \n    <span class=\"green\">// Process reference to doors family</span>\n  }\n</pre>\n<!--\n&nbsp; &nbsp; <span class=\"blue\">if</span>( family.IsExternalFileReference() )\n&nbsp; &nbsp; {\n&nbsp; &nbsp; &nbsp; <span class=\"green\">// Process reference to doors family</span>\n&nbsp; &nbsp; }\n-->\n<p>Shorter, more readable, and more performant.\n\n<p>Since each family can contain more than one symbol, you should obviously keep track of the families already processed and skip those when looping over the symbols.\n</p></p></p></p></p></p></p>"
  }
]