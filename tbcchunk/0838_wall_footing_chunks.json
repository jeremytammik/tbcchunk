[
  {
    "original_filename": "0838_wall_footing",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0838_wall_footing",
    "header_text": "Wall Footing Relationship Revisited",
    "local_header_href": "#wall-footing-relationship-revisited",
    "chunk_text": "<h3>Wall Footing Relationship Revisited</h3><p>In the far distant past, I looked at various ways to programmatically determine \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/object-relationships.html\">\nrelationships between associated objects</a>\n\n(also in <a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/object-relationships-in-vb.html\">VB</a>),\n\nincluding references between a host object and its hosted dependent elements, e.g. determining the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/host-reference.html\">\nrelationship between a wall and its footing</a>.\n\n<p>That was back in the year 2009, using Revit 2010.\n\n<p>A few things have changed and been added since then, but the more things change, the more they stay the same, don't they?\n\n<p>Anyway, this very question was raised again:\n\n\n<p><strong>Question:</strong> Is there a way to obtain a reference to a wall footing from the wall attached to it?\n\n\n<p><strong>Answer:</strong> Yes, sure, there are several different possibilities to achieve this.\n\n<p>You could start off by determining the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/08/bottom-face-of-a-wall.html\">\nbottom face of the wall</a>.\n\n<p>Using that, you could set up an ElementIntersectsSolidFilter for a filtered element collector to retrieve all foundation elements touching or intersecting that face, as described for \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/09/filter-for-touching-beams-using-solid-intersection.html\">\nretrieving all touching beams</a>.\n\nYou would obviously want to apply as many quick filters as possible before taking recourse to the slow geometric filtering, e.g. check for level, category, type, etc. first.\n\n<p>Another way to determine adjacency of Revit BIM elements is to make use of the ray casting functionality provided by the FindReferencesByDirection method, FindReferencesWithContextByDirection method and the ReferenceIntersector class, e.g. cast a ray downwards from the wall and detect the first foundation hit by it.\n\n<p>Last but not least, another way to determine relationships between associated objects such as a wall and its footing is to temporarily delete the host object, causing the dependent objects to be deleted as well. \nThe deleted element ids can be determined, and the whole operation undone to leave the model unchanged.\n\n<p>I described this principle several times, e.g. looking at\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/object-relationships.html\">\nobject relationships</a>\n\n(in <a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/object-relationships-in-vb.html\">VB</a>),\n\nand specifically \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/host-reference.html\">\ndetermining the wall footing of a given wall</a>.\n\n<p>I cannot tell off-hand which of these methods is most useful and efficient in your specific case, although I would be very interested in seeing the results of some comparisons and benchmarks evaluating this.\n\n<p>Anyway, I note that The Building Coder sample command CmdWallFooting implementing the latter approach is pretty much out of date, having been simply flat ported across several Revit API releases in the past few years.\n\n<p>I therefore updated it for and tested it with Revit 2013, and can now confirm that it still works.\n\n<p>Here is the updated implementation:\n\n<pre class=\"code\">\n[<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.Manual )]\n<span class=\"blue\">class</span> <span class=\"teal\">CmdWallFooting</span> : <span class=\"teal\">IExternalCommand</span>\n{\n  <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n    <span class=\"teal\">ExternalCommandData</span> commandData,\n    <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n    <span class=\"teal\">ElementSet</span> elements )\n  {\n    <span class=\"teal\">UIApplication</span> app = commandData.Application;\n    <span class=\"teal\">UIDocument</span> uidoc = app.ActiveUIDocument;\n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"teal\">Wall</span> wall = <span class=\"teal\">Util</span>.SelectSingleElementOfType(\n      uidoc, <span class=\"blue\">typeof</span>( <span class=\"teal\">Wall</span> ), <span class=\"maroon\">\"a wall\"</span>, <span class=\"blue\">false</span> ) \n        <span class=\"blue\">as</span> <span class=\"teal\">Wall</span>;\n \n    <span class=\"blue\">if</span> ( <span class=\"blue\">null</span> == wall )\n    {\n      message \n        = <span class=\"maroon\">\"Please select a single wall element.\"</span>;\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n \n    <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; delIds = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      <span class=\"blue\">try</span>\n      {\n        t.Start( <span class=\"maroon\">\"Temporary Wall Deletion\"</span> );\n \n        delIds = doc.Delete( wall );\n \n        t.RollBack();\n      }\n      <span class=\"blue\">catch</span> ( <span class=\"teal\">Exception</span> ex )\n      {\n        message = <span class=\"maroon\">\"Deletion failed: \"</span> + ex.Message;\n        t.RollBack();\n      }\n    }\n \n    <span class=\"teal\">ContFooting</span> footing = <span class=\"blue\">null</span>;\n \n    <span class=\"blue\">foreach</span> ( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> delIds )\n    {\n      footing = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">ContFooting</span>;\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != footing )\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n \n    <span class=\"blue\">string</span> s = <span class=\"teal\">Util</span>.ElementDescription( wall );\n \n    <span class=\"teal\">Util</span>.InfoMsg( ( <span class=\"blue\">null</span> == footing )\n      ? <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"No footing found for {0}.\"</span>, s )\n      : <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"{0} has {1}.\"</span>, s,\n        <span class=\"teal\">Util</span>.ElementDescription( footing ) ) );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n}\n</pre>\n<p>I ran this command on a minimal sample model containing just one structural wall with its footing:</p>\n<center>\n<img alt=\"Structural wall and footing\" src=\"img/wall_footing_2013.png\"/>\n</center>\n<p>The command reports the expected relationship:</p>\n<center>\n<img alt=\"Wall footing relationship\" src=\"img/wall_footing_message_2013.png\"/>\n</center>\n<p>It says:\n\n<pre>\nWall Walls &lt;164432 Generic - 200mm&gt; has \nContFooting Structural Foundations &lt;164470 \nRetaining Footing - 300 x 600 x 300&gt;.\n</pre>\n<p>Here is an updated \n\n<a href=\"zip/bc_13_99_3.zip\">version 2013.0.99.3</a> of \n\nThe Building Coder samples including the updated CmdWallFooting external command.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]