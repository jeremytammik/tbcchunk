[
  {
    "original_filename": "0919_restaurant_layout",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0919_restaurant_layout",
    "header_text": "Cloud-Based Restaurant Seating Arrangement and Cleaning",
    "local_header_href": "#cloud-based-restaurant-seating-arrangement-and-cleaning",
    "chunk_text": "<h3>Cloud-Based Restaurant Seating Arrangement and Cleaning</h3><p>I hope you had a successful\n\n<a href=\"http://en.wikipedia.org/wiki/Egg_hunt\">Easter egg hunt</a>.</p><img alt=\"Easter eggs\" src=\"img/easter_eggs_2013.jpg\" width=\"200\"/><p>As you probably noticed, I have been focusing on the research and implementation of my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/cloud-mobile-extensible-storage-data-use-in-schedules.html#3\">\ncloud-based round-trip 2D Revit model editing project</a> for\n\nthe upcoming Autodesk internal tech summit in June as much as my day-to-day tasks will allow.\n\n\n<a name=\"2\"></a>\n<h4>Current Project Overview</h4>\n<p>To recap, the basic idea is simple: implement an example of round-trip minimal simple editing of a 2D rendering of a Revit model on any mobile device with no need for installation of any additional software whatsoever beyond a browser.</p>\n<p>To keep the editing task as minimal and simple as possible, I just envision changing the 2D location and orientation of the furniture and equipment within the boundaries of the selected room.</p>\n<p>Such an editor can be realised on any mobile device using JavaScript and <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a>, scalable vector graphics, as I showed in my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/2d-svg-editing-on-mobile-device-with-rapha%C3%ABl.html\">\nprototype room polygon editor</a> using\n\nthe\n\n<a href=\"http://raphaeljs.com\">Raphaël</a> JavaScript SVG library.</p>\n<center>\n<a href=\"http://thebuildingcoder.typepad.com/svg/08-button.htm\"><img alt=\"Room layout editor\" class=\"asset asset-image at-xid-6a00e553e168978833017d40f2e881970c\" src=\"http://thebuildingcoder.typepad.com/.a/6a00e553e168978833017d40f2e881970c-320wi\" title=\"Room layout editor\"/></a><br/>\n<a href=\"http://thebuildingcoder.typepad.com/svg/08-button.htm\">Room layout editor</a>\n</center>\n<p>Aside from the editing component, this workflow will also require:</p>\n<ul>\n<li>A cloud-based database repository managing the Revit model, level, room, furniture and equipment data.</li>\n<li>A Revit add-in retrieving the data from the Revit project and populating the data repository.</li>\n</ul>\n<p>The data repository is fed from the Revit model and queried by the mobile device editor.\nIt also manages changes to the furniture and equipment location and orientation.</p>\n<p>The editor displays the room, furniture and equipment and enables translation and rotation of the latter, which updates the repository data.</p>\n<p>The Revit add-in can optionally be expanded to automatically query and update the Revit model based on new furniture and equipment locations, resulting in the following workflow:</p>\n<ul>\n<li>Show a Revit model.</li>\n<li>Export the model to a cloud-based data repository.</li>\n<li>Query and display the repository contents in a 2D rendering on any mobile device.</li>\n<li>Edit the model in the browser on the mobile device, updating the data repository.</li>\n<li>Pick up and display the modified model in Revit. </li>\n</ul>\n<p>I already discussed my current candidate for the cloud database using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#4\">\nCouchDB NoSQL database implementation</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#5\">\nIrisCouch free hosting</a> service.</p>\n<p>Regarding the Revit add-in retrieving the room and furniture 2D boundary polygons, I also looked at the retrieval of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/revit-2014-api-and-room-plan-view-boundary-polygon-loops.html#3\">\nplan view room boundary loops</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/filter-for-family-instances-in-a-room.html\">\nfamily instances in a given room</a>.\n\n<p>Next steps will include enhancing the Revit add-in to extract suitable boundary loops to represent the furniture and equipment in the mobile editor, and above all the data repository implementation.</p>\n<a name=\"3\"></a>\n<h4>Project Expansion for Cloud-Based Restaurant Seating and Cleaning</h4>\n<p>As a very happy surprise, I now found a beta site to test the existing functionality and add even more, by hooking up the mobile device furniture layout editing functionality with a restaurant cash register to implement a fully automated restaurant seating layout and floor cleaning system.\n\n<p>The basic idea is to equip the restaurant furniture with unobtrusive mobility support and link the virtual model of the restaurant and its furniture with the real-world objects.\n\n\n<p>All that is required to provide real-world control over the furniture position are concealed wheels and locking devices inside the table base.\nThe wheels are normally locked in position, and their existence goes unnoticed.\nThey can be unlocked and driven by motors for displacement.\n\n<p>The entire restaurant layout can thus be rearranged via the 2D layout editor on the mobile device, with no manual intervention whatsoever required.</p>\n<p>Each piece of furniture also includes location detection support.\nBesides the automatic rearrangement triggered by updating the virtual model, the inverse is also supported: moving the furniture around manually can trigger the virtual model to be updated instead to reflect the new real-world positions.</p>\n<p>Here is a snapshot of the restaurant cash register showing the original layout before editing:</p>\n<center>\n<img alt=\"Restaurant cash register screen\" src=\"img/restaurant_layout/restaurant_layout_3.jpg\" width=\"400\">\n</img></center>\n<p>The cash register lives in the pillar in the centre of the restaurant.\nThe pillar is not displayed on the cash register screen snapshot above:</p>\n<center>\n<img alt=\"Original restaurant layout\" src=\"img/restaurant_layout/restaurant_layout_1.jpg\" width=\"400\"/>\n</center>\n<p>The bar in the corner is marked in red on the screen snapshot, and its position cannot be edited:</p>\n<center>\n<img alt=\"Unmodifiable bar in red\" src=\"img/restaurant_layout/restaurant_layout_2.jpg\" width=\"400\"/>\n</center>\n<span style=\"color:pink\">\n<p>This layout is stored in a Revit model and processed fully automatically via the following steps:</p>\n<ul>\n<li>Export to cloud-based data repository using CouchDB and an IrisCouch host, including model, level, room and furniture metadata and room and furniture plan view boundary polygons.</li>\n<li>Display on mobile device using <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> and the <a href=\"http://raphaeljs.com\">Raphaël</a> JavaScript SVG library.</li>\n<li>Edit furniture location and rotation on any mobile device, anywhere.</li>\n<li>Every modification immediately updates the cloud-based data repository furniture transform.</li>\n<li>Optionally, the Revit model is auto-updated as well, making use of the external event functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/drive-revit-through-a-wcf-service.html\">\ndrive Revit through a WCF service</a>.</li>\n</ul>\n<p>Here is the same model in Revit:</p>\n<center>\n<img alt=\"Restaurant layout in Revit\" src=\"img/restaurant_layout/restaurant_layout_5.jpg\" width=\"400\"/>\n</center>\n<p>The SVG editor displays it like this in the browser on any mobile device:</p>\n<center>\n<img alt=\"Restaurant layout in SVG\" src=\"img/restaurant_layout/restaurant_layout_6.jpg\" width=\"400\"/>\n</center>\n</span>\n<p>Rotating and moving the tables in SVG triggers the synchronisation chain and drives the real-world furniture to its new position:</p>\n<center>\n<img alt=\"Updated real-world restaurant layout\" src=\"img/restaurant_layout/restaurant_layout_0.jpg\" width=\"400\"/>\n</center>\n<p>As you can see, the table base looks completely normal and can easily contain the required motors, wheels, locking and location devices:</p>\n<center>\n<img alt=\"Ample table base housing movement devices\" src=\"img/restaurant_layout/restaurant_layout_0_zoom.jpg\" width=\"400\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Fully Automated Restaurant Cleaning</h4>\n<p>Mobile autonomous furniture obviously also vastly facilitates the restaurant cleaning.\n\n<p>The furniture is programmed to flock together at one end of the room each night, making space for a\n\n<a href=\"http://www.irobot.com/en/us/robots/home/Mint.aspx\">\ncleaning robot</a>  to\n\nroam freely, and moves over to the other end of the room after the first half has been covered.</p>\n<p>This obviously enables much more effective and thorough cleaning than if the furniture is left in place:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/wpj0DV-inCs\" width=\"420\"></iframe>\n</center>\n<!--\n<center>\n<script src=\"http://player.ooyala.com/player.js?height=236&embedCode=c2ZWdlMjqOGBdUB61_AMhtVt84ou6riC&width=420&deepLinkEmbedCode=c2ZWdlMjqOGBdUB61_AMhtVt84ou6riC&video_pcode=lzd2M6gn6_xbh1SdfpmZTpNqLKuu\"></script>\n</center>\n-->\n<p>It is fascinating to see BIM expanding into new hitherto unexpected areas, and unbelievably exciting to participate in the process!</p>\n<p>I trust you will find similar opportunities to embrace this paradigm and successfully use the Revit API to support expanding your applications and ideas into other new niches.</p>\n<p>I am looking forward to keeping you posted on the further progress of this ongoing project!</p>\n<a name=\"5\"></a>\n<h4>JavaScript Physics Sample</h4>\n<p>By the way, talking about new niches and programming in and for the cloud, here is an utterly cool\n\n<a href=\"http://codepen.io/stuffit/pen/KrAwx\">JavaScript physics sample</a> simulating ripping a curtain of tearable cloth.\n\n<p>It provides an incredibly compelling and sheer unbelievably compact example use of HTML5, Canvas, CSS and JavaScript for an interactive graphical physical simulation in just three hundred lines of code.\n</p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0919_restaurant_layout",
    "header_text": "Current Project Overview",
    "local_header_href": "#current-project-overview",
    "chunk_text": "<h4>Current Project Overview</h4><p>To recap, the basic idea is simple: implement an example of round-trip minimal simple editing of a 2D rendering of a Revit model on any mobile device with no need for installation of any additional software whatsoever beyond a browser.</p><p>To keep the editing task as minimal and simple as possible, I just envision changing the 2D location and orientation of the furniture and equipment within the boundaries of the selected room.</p><p>Such an editor can be realised on any mobile device using JavaScript and <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a>, scalable vector graphics, as I showed in my\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/02/2d-svg-editing-on-mobile-device-with-rapha%C3%ABl.html\">\nprototype room polygon editor</a> using\n\nthe\n\n<a href=\"http://raphaeljs.com\">Raphaël</a> JavaScript SVG library.</p><center>\n<a href=\"http://thebuildingcoder.typepad.com/svg/08-button.htm\"><img alt=\"Room layout editor\" class=\"asset asset-image at-xid-6a00e553e168978833017d40f2e881970c\" src=\"http://thebuildingcoder.typepad.com/.a/6a00e553e168978833017d40f2e881970c-320wi\" title=\"Room layout editor\"/></a><br/>\n<a href=\"http://thebuildingcoder.typepad.com/svg/08-button.htm\">Room layout editor</a>\n</center><p>Aside from the editing component, this workflow will also require:</p><ul>\n<li>A cloud-based database repository managing the Revit model, level, room, furniture and equipment data.</li>\n<li>A Revit add-in retrieving the data from the Revit project and populating the data repository.</li>\n</ul><p>The data repository is fed from the Revit model and queried by the mobile device editor.\nIt also manages changes to the furniture and equipment location and orientation.</p><p>The editor displays the room, furniture and equipment and enables translation and rotation of the latter, which updates the repository data.</p><p>The Revit add-in can optionally be expanded to automatically query and update the Revit model based on new furniture and equipment locations, resulting in the following workflow:</p><ul>\n<li>Show a Revit model.</li>\n<li>Export the model to a cloud-based data repository.</li>\n<li>Query and display the repository contents in a 2D rendering on any mobile device.</li>\n<li>Edit the model in the browser on the mobile device, updating the data repository.</li>\n<li>Pick up and display the modified model in Revit. </li>\n</ul><p>I already discussed my current candidate for the cloud database using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#4\">\nCouchDB NoSQL database implementation</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/relax-simple-free-cloud-based-data-repository-with-nosql-couchdb-and-iriscouch.html#5\">\nIrisCouch free hosting</a> service.</p><p>Regarding the Revit add-in retrieving the room and furniture 2D boundary polygons, I also looked at the retrieval of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/revit-2014-api-and-room-plan-view-boundary-polygon-loops.html#3\">\nplan view room boundary loops</a> and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/filter-for-family-instances-in-a-room.html\">\nfamily instances in a given room</a>.\n\n<p>Next steps will include enhancing the Revit add-in to extract suitable boundary loops to represent the furniture and equipment in the mobile editor, and above all the data repository implementation.</p>\n<a name=\"3\"></a>\n<h4>Project Expansion for Cloud-Based Restaurant Seating and Cleaning</h4>\n<p>As a very happy surprise, I now found a beta site to test the existing functionality and add even more, by hooking up the mobile device furniture layout editing functionality with a restaurant cash register to implement a fully automated restaurant seating layout and floor cleaning system.\n\n<p>The basic idea is to equip the restaurant furniture with unobtrusive mobility support and link the virtual model of the restaurant and its furniture with the real-world objects.\n\n\n<p>All that is required to provide real-world control over the furniture position are concealed wheels and locking devices inside the table base.\nThe wheels are normally locked in position, and their existence goes unnoticed.\nThey can be unlocked and driven by motors for displacement.\n\n<p>The entire restaurant layout can thus be rearranged via the 2D layout editor on the mobile device, with no manual intervention whatsoever required.</p>\n<p>Each piece of furniture also includes location detection support.\nBesides the automatic rearrangement triggered by updating the virtual model, the inverse is also supported: moving the furniture around manually can trigger the virtual model to be updated instead to reflect the new real-world positions.</p>\n<p>Here is a snapshot of the restaurant cash register showing the original layout before editing:</p>\n<center>\n<img alt=\"Restaurant cash register screen\" src=\"img/restaurant_layout/restaurant_layout_3.jpg\" width=\"400\">\n</img></center>\n<p>The cash register lives in the pillar in the centre of the restaurant.\nThe pillar is not displayed on the cash register screen snapshot above:</p>\n<center>\n<img alt=\"Original restaurant layout\" src=\"img/restaurant_layout/restaurant_layout_1.jpg\" width=\"400\"/>\n</center>\n<p>The bar in the corner is marked in red on the screen snapshot, and its position cannot be edited:</p>\n<center>\n<img alt=\"Unmodifiable bar in red\" src=\"img/restaurant_layout/restaurant_layout_2.jpg\" width=\"400\"/>\n</center>\n<span style=\"color:pink\">\n<p>This layout is stored in a Revit model and processed fully automatically via the following steps:</p>\n<ul>\n<li>Export to cloud-based data repository using CouchDB and an IrisCouch host, including model, level, room and furniture metadata and room and furniture plan view boundary polygons.</li>\n<li>Display on mobile device using <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> and the <a href=\"http://raphaeljs.com\">Raphaël</a> JavaScript SVG library.</li>\n<li>Edit furniture location and rotation on any mobile device, anywhere.</li>\n<li>Every modification immediately updates the cloud-based data repository furniture transform.</li>\n<li>Optionally, the Revit model is auto-updated as well, making use of the external event functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/drive-revit-through-a-wcf-service.html\">\ndrive Revit through a WCF service</a>.</li>\n</ul>\n<p>Here is the same model in Revit:</p>\n<center>\n<img alt=\"Restaurant layout in Revit\" src=\"img/restaurant_layout/restaurant_layout_5.jpg\" width=\"400\"/>\n</center>\n<p>The SVG editor displays it like this in the browser on any mobile device:</p>\n<center>\n<img alt=\"Restaurant layout in SVG\" src=\"img/restaurant_layout/restaurant_layout_6.jpg\" width=\"400\"/>\n</center>\n</span>\n<p>Rotating and moving the tables in SVG triggers the synchronisation chain and drives the real-world furniture to its new position:</p>\n<center>\n<img alt=\"Updated real-world restaurant layout\" src=\"img/restaurant_layout/restaurant_layout_0.jpg\" width=\"400\"/>\n</center>\n<p>As you can see, the table base looks completely normal and can easily contain the required motors, wheels, locking and location devices:</p>\n<center>\n<img alt=\"Ample table base housing movement devices\" src=\"img/restaurant_layout/restaurant_layout_0_zoom.jpg\" width=\"400\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Fully Automated Restaurant Cleaning</h4>\n<p>Mobile autonomous furniture obviously also vastly facilitates the restaurant cleaning.\n\n<p>The furniture is programmed to flock together at one end of the room each night, making space for a\n\n<a href=\"http://www.irobot.com/en/us/robots/home/Mint.aspx\">\ncleaning robot</a>  to\n\nroam freely, and moves over to the other end of the room after the first half has been covered.</p>\n<p>This obviously enables much more effective and thorough cleaning than if the furniture is left in place:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/wpj0DV-inCs\" width=\"420\"></iframe>\n</center>\n<!--\n<center>\n<script src=\"http://player.ooyala.com/player.js?height=236&embedCode=c2ZWdlMjqOGBdUB61_AMhtVt84ou6riC&width=420&deepLinkEmbedCode=c2ZWdlMjqOGBdUB61_AMhtVt84ou6riC&video_pcode=lzd2M6gn6_xbh1SdfpmZTpNqLKuu\"></script>\n</center>\n-->\n<p>It is fascinating to see BIM expanding into new hitherto unexpected areas, and unbelievably exciting to participate in the process!</p>\n<p>I trust you will find similar opportunities to embrace this paradigm and successfully use the Revit API to support expanding your applications and ideas into other new niches.</p>\n<p>I am looking forward to keeping you posted on the further progress of this ongoing project!</p>\n<a name=\"5\"></a>\n<h4>JavaScript Physics Sample</h4>\n<p>By the way, talking about new niches and programming in and for the cloud, here is an utterly cool\n\n<a href=\"http://codepen.io/stuffit/pen/KrAwx\">JavaScript physics sample</a> simulating ripping a curtain of tearable cloth.\n\n<p>It provides an incredibly compelling and sheer unbelievably compact example use of HTML5, Canvas, CSS and JavaScript for an interactive graphical physical simulation in just three hundred lines of code.\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0919_restaurant_layout",
    "header_text": "Project Expansion for Cloud-Based Restaurant Seating and Cleaning",
    "local_header_href": "#project-expansion-for-cloud-based-restaurant-seating-and-cleaning",
    "chunk_text": "<h4>Project Expansion for Cloud-Based Restaurant Seating and Cleaning</h4><p>As a very happy surprise, I now found a beta site to test the existing functionality and add even more, by hooking up the mobile device furniture layout editing functionality with a restaurant cash register to implement a fully automated restaurant seating layout and floor cleaning system.\n\n<p>The basic idea is to equip the restaurant furniture with unobtrusive mobility support and link the virtual model of the restaurant and its furniture with the real-world objects.\n\n\n<p>All that is required to provide real-world control over the furniture position are concealed wheels and locking devices inside the table base.\nThe wheels are normally locked in position, and their existence goes unnoticed.\nThey can be unlocked and driven by motors for displacement.\n\n<p>The entire restaurant layout can thus be rearranged via the 2D layout editor on the mobile device, with no manual intervention whatsoever required.</p>\n<p>Each piece of furniture also includes location detection support.\nBesides the automatic rearrangement triggered by updating the virtual model, the inverse is also supported: moving the furniture around manually can trigger the virtual model to be updated instead to reflect the new real-world positions.</p>\n<p>Here is a snapshot of the restaurant cash register showing the original layout before editing:</p>\n<center>\n<img alt=\"Restaurant cash register screen\" src=\"img/restaurant_layout/restaurant_layout_3.jpg\" width=\"400\">\n</img></center>\n<p>The cash register lives in the pillar in the centre of the restaurant.\nThe pillar is not displayed on the cash register screen snapshot above:</p>\n<center>\n<img alt=\"Original restaurant layout\" src=\"img/restaurant_layout/restaurant_layout_1.jpg\" width=\"400\"/>\n</center>\n<p>The bar in the corner is marked in red on the screen snapshot, and its position cannot be edited:</p>\n<center>\n<img alt=\"Unmodifiable bar in red\" src=\"img/restaurant_layout/restaurant_layout_2.jpg\" width=\"400\"/>\n</center>\n<span style=\"color:pink\">\n<p>This layout is stored in a Revit model and processed fully automatically via the following steps:</p>\n<ul>\n<li>Export to cloud-based data repository using CouchDB and an IrisCouch host, including model, level, room and furniture metadata and room and furniture plan view boundary polygons.</li>\n<li>Display on mobile device using <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\">SVG</a> and the <a href=\"http://raphaeljs.com\">Raphaël</a> JavaScript SVG library.</li>\n<li>Edit furniture location and rotation on any mobile device, anywhere.</li>\n<li>Every modification immediately updates the cloud-based data repository furniture transform.</li>\n<li>Optionally, the Revit model is auto-updated as well, making use of the external event functionality to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/drive-revit-through-a-wcf-service.html\">\ndrive Revit through a WCF service</a>.</li>\n</ul>\n<p>Here is the same model in Revit:</p>\n<center>\n<img alt=\"Restaurant layout in Revit\" src=\"img/restaurant_layout/restaurant_layout_5.jpg\" width=\"400\"/>\n</center>\n<p>The SVG editor displays it like this in the browser on any mobile device:</p>\n<center>\n<img alt=\"Restaurant layout in SVG\" src=\"img/restaurant_layout/restaurant_layout_6.jpg\" width=\"400\"/>\n</center>\n</span>\n<p>Rotating and moving the tables in SVG triggers the synchronisation chain and drives the real-world furniture to its new position:</p>\n<center>\n<img alt=\"Updated real-world restaurant layout\" src=\"img/restaurant_layout/restaurant_layout_0.jpg\" width=\"400\"/>\n</center>\n<p>As you can see, the table base looks completely normal and can easily contain the required motors, wheels, locking and location devices:</p>\n<center>\n<img alt=\"Ample table base housing movement devices\" src=\"img/restaurant_layout/restaurant_layout_0_zoom.jpg\" width=\"400\"/>\n</center>\n<a name=\"4\"></a>\n<h4>Fully Automated Restaurant Cleaning</h4>\n<p>Mobile autonomous furniture obviously also vastly facilitates the restaurant cleaning.\n\n<p>The furniture is programmed to flock together at one end of the room each night, making space for a\n\n<a href=\"http://www.irobot.com/en/us/robots/home/Mint.aspx\">\ncleaning robot</a>  to\n\nroam freely, and moves over to the other end of the room after the first half has been covered.</p>\n<p>This obviously enables much more effective and thorough cleaning than if the furniture is left in place:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/wpj0DV-inCs\" width=\"420\"></iframe>\n</center>\n<!--\n<center>\n<script src=\"http://player.ooyala.com/player.js?height=236&embedCode=c2ZWdlMjqOGBdUB61_AMhtVt84ou6riC&width=420&deepLinkEmbedCode=c2ZWdlMjqOGBdUB61_AMhtVt84ou6riC&video_pcode=lzd2M6gn6_xbh1SdfpmZTpNqLKuu\"></script>\n</center>\n-->\n<p>It is fascinating to see BIM expanding into new hitherto unexpected areas, and unbelievably exciting to participate in the process!</p>\n<p>I trust you will find similar opportunities to embrace this paradigm and successfully use the Revit API to support expanding your applications and ideas into other new niches.</p>\n<p>I am looking forward to keeping you posted on the further progress of this ongoing project!</p>\n<a name=\"5\"></a>\n<h4>JavaScript Physics Sample</h4>\n<p>By the way, talking about new niches and programming in and for the cloud, here is an utterly cool\n\n<a href=\"http://codepen.io/stuffit/pen/KrAwx\">JavaScript physics sample</a> simulating ripping a curtain of tearable cloth.\n\n<p>It provides an incredibly compelling and sheer unbelievably compact example use of HTML5, Canvas, CSS and JavaScript for an interactive graphical physical simulation in just three hundred lines of code.\n</p></p></p></p></p></p>"
  },
  {
    "original_filename": "0919_restaurant_layout",
    "header_text": "Fully Automated Restaurant Cleaning",
    "local_header_href": "#fully-automated-restaurant-cleaning",
    "chunk_text": "<h4>Fully Automated Restaurant Cleaning</h4><p>Mobile autonomous furniture obviously also vastly facilitates the restaurant cleaning.\n\n<p>The furniture is programmed to flock together at one end of the room each night, making space for a\n\n<a href=\"http://www.irobot.com/en/us/robots/home/Mint.aspx\">\ncleaning robot</a>  to\n\nroam freely, and moves over to the other end of the room after the first half has been covered.</p>\n<p>This obviously enables much more effective and thorough cleaning than if the furniture is left in place:</p>\n<center>\n<iframe allowfullscreen=\"\" frameborder=\"0\" height=\"315\" src=\"http://www.youtube.com/embed/wpj0DV-inCs\" width=\"420\"></iframe>\n</center>\n<!--\n<center>\n<script src=\"http://player.ooyala.com/player.js?height=236&embedCode=c2ZWdlMjqOGBdUB61_AMhtVt84ou6riC&width=420&deepLinkEmbedCode=c2ZWdlMjqOGBdUB61_AMhtVt84ou6riC&video_pcode=lzd2M6gn6_xbh1SdfpmZTpNqLKuu\"></script>\n</center>\n-->\n<p>It is fascinating to see BIM expanding into new hitherto unexpected areas, and unbelievably exciting to participate in the process!</p>\n<p>I trust you will find similar opportunities to embrace this paradigm and successfully use the Revit API to support expanding your applications and ideas into other new niches.</p>\n<p>I am looking forward to keeping you posted on the further progress of this ongoing project!</p>\n<a name=\"5\"></a>\n<h4>JavaScript Physics Sample</h4>\n<p>By the way, talking about new niches and programming in and for the cloud, here is an utterly cool\n\n<a href=\"http://codepen.io/stuffit/pen/KrAwx\">JavaScript physics sample</a> simulating ripping a curtain of tearable cloth.\n\n<p>It provides an incredibly compelling and sheer unbelievably compact example use of HTML5, Canvas, CSS and JavaScript for an interactive graphical physical simulation in just three hundred lines of code.\n</p></p></p>"
  },
  {
    "original_filename": "0919_restaurant_layout",
    "header_text": "JavaScript Physics Sample",
    "local_header_href": "#javascript-physics-sample",
    "chunk_text": "<h4>JavaScript Physics Sample</h4><p>By the way, talking about new niches and programming in and for the cloud, here is an utterly cool\n\n<a href=\"http://codepen.io/stuffit/pen/KrAwx\">JavaScript physics sample</a> simulating ripping a curtain of tearable cloth.\n\n<p>It provides an incredibly compelling and sheer unbelievably compact example use of HTML5, Canvas, CSS and JavaScript for an interactive graphical physical simulation in just three hundred lines of code.\n</p></p>"
  }
]