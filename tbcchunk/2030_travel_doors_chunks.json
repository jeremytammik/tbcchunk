[
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!-- https://highlightjs.org/#usage\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css\">\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js\"></script>\n<script>hljs.highlightAll();</script>\n-->\n\n<!-- https://prismjs.com -->\n<link href=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.min.css\" rel=\"stylesheet\" />\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-core.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/prismjs@1.29.0/plugins/autoloader/prism-autoloader.min.js\"></script>\n<style> code[class*=language-], pre[class*=language-] { font-size : 90%; } </style>\n</head>\n\n<!---\n\n- Feedback Requested - Bowerbird: C# Scripting for Revit\n  https://forums.autodesk.com/t5/revit-api-forum/feedback-requested-bowerbird-c-scripting-for-revit/td-p/12643568\n\n- Doors traversed on path of travel lines\n  https://forums.autodesk.com/t5/revit-api-forum/doors-traversed-on-path-of-travel-lines/td-p/12616109\n  % bl 1740 1744 1781 1836 1871 1917 2028\n  <ul>\n  <li><a href=\"https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html\">What's New in the Revit 2020 API</a></li>\n  <li><a href=\"https://thebuildingcoder.typepad.com/blog/2019/04/new-revit-2020-sdk-samples.html\">New Revit 2020 SDK Samples</a></li>\n  <li><a href=\"https://thebuildingcoder.typepad.com/blog/2019/09/whats-new-in-the-revit-20201-api.html\">What's New in the Revit 2020.1 API</a></li>\n  <li><a href=\"https://thebuildingcoder.typepad.com/blog/2020/04/whats-new-in-the-revit-2021-api.html\">What's New in the Revit 2021 API</a></li>\n  <li><a href=\"https://thebuildingcoder.typepad.com/blog/2020/10/firerevit-deprecated-api-and-elbow-centre-point.html\">FireRevit, Deprecated API and Elbow Centre Point</a></li>\n  <li><a href=\"https://thebuildingcoder.typepad.com/blog/2021/09/view-sheet-from-view-and-select-all-on-level.html\">View Sheet from View and Select All on Level</a></li>\n  <li><a href=\"https://thebuildingcoder.typepad.com/blog/2024/02/interactive-bim-notebook-temporary-graphics-and-ai.html\">Interactive BIM Notebook, Temporary Graphics and AI</a></li>\n  </ul>\n\n- We’re excited to introduce Claude 3, our next generation of vision-enabled AI models - now available on claude.ai.\n  https://www.anthropic.com/news/claude-3-family\n  https://claude.ai/\n\n- Introducing Devin, the first AI software engineer\n  https://www.cognition-labs.com/blog\n  March 12th, 2024 | Written by Scott Wu\n  Meet Devin, the world’s first fully autonomous AI software engineer.\n\n- generates image, but badly, inattentive, does not follow the detailed prompt: https://imagine.meta.com/\n\n- What is climate change? A really simple guide\n  https://www.bbc.com/news/science-environment-24021772\n\ntwitter:\n\nBowerbird scripting, doors traversed by path of travel, camera mapping between APS and @AutodeskRevit with the #RevitAPI #BIM @DynamoBIM https://autode.sk/camerasettings\n\nNew exciting Revit API solutions and furious pace of LLM development\n&ndash; Bowerbird C&#35; scripting for Revit\n&ndash; Doors traversed by path of travel\n&ndash; Camera mapping between APS and Revit\n&ndash; Claude 3 can see\n&ndash; Devin, an AI software engineer\n&ndash; Meta Imagine generates images\n&ndash; An LLM for decompiling binary code\n&ndash; Simple climate change overview...\n\nlinkedin:\n\nBowerbird scripting, doors traversed by path of travel, camera mapping between APS and Revit with the #RevitAPI\n\nhttps://autode.sk/camerasettings\n\n- Bowerbird C&#35; scripting for Revit\n- Doors traversed by path of travel\n- Camera mapping between APS and Revit\n- Claude 3 can see\n- Devin, an AI software engineer\n- Meta Imagine generates images\n- An LLM for decompiling binary code\n- Simple climate change overview...\n\n#BIM #DynamoBIM #AutodeskAPS #Revit #API #IFC #SDK #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n-->"
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Camera Settings, Doors Traversed, Script on the Fly",
    "local_header_href": "#camera-settings-doors-traversed-script-on-the-fly",
    "chunk_text": "### Camera Settings, Doors Traversed, Script on the Fly\n\nNew exciting Revit API solutions and continued furious pace of LLM development:\n\n- [Bowerbird C&#35; scripting for Revit](#2)\n- [Doors traversed by path of travel](#3)\n- [Camera mapping between APS and Revit](#4)\n- [Claude 3 can see](#5)\n- [Devin, an AI software engineer](#6)\n- [Meta Imagine generates images](#7)\n- [An LLM for decompiling binary code](#8)\n- [Simple climate change overview](#9)"
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Bowerbird C&#35; Scripting for Revit",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Bowerbird C&#35; Scripting for Revit\n\n[Christopher Diggins](https://github.com/cdiggins) published\n[Bowerbird](https://github.com/ara3d/bowerbird) for\nquick and easy C&#35; tool and plug-in development by dynamically compiling C# source files,\nand a [request for feedback on it](https://forums.autodesk.com/t5/revit-api-forum/feedback-requested-bowerbird-c-scripting-for-revit/td-p/12643568)\nin the [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160),\nsaying:\n\n> I've released a new open-source project for Revit C# developers called Bowerbird.\nIt uses the Roslyn C# compiler to allow users to create and edit new commands directly from C# source files,\nwithout having to go through the process of creating and deploying a plug-in, and re-launching Revit.\n\n> It is inspired\nby [pyRevit](https://github.com/eirannejad/pyRevit) by [Ehsan Iran-Nejad](https://github.com/eirannejad)\nand [Revit.ScriptCS](https://github.com/sridharbaldava/Revit.ScriptCS) by [Sridhar Baldava](https://github.com/sridharbaldava).\n\n> I'd greatly appreciate any feedback or contributions in\nthe [Bowerbird GitHub project](https://github.com/ara3d/bowerbird/).\nThanks in advance!\n\nMany thanks to Christopher for creating and sharing this helpful tool!"
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Doors Traversed by Path of Travel",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Doors Traversed by Path of Travel\n\nA while ago, I took a look at determining the doors traversed by a path of travel and shared some thoughts on that in\nthe [PathOfTravelDoors GitHub repo](https://github.com/jeremytammik/PathOfTravelDoors).\n\nThey were picked up again in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [doors traversed on path of travel lines](https://forums.autodesk.com/t5/revit-api-forum/doors-traversed-on-path-of-travel-lines/td-p/12616109).\n\n**Question:** I want to list all the doors that are crossed by a path of travel line.\nI tried to code that, but it seems that the `ReferenceIntersector` finds more doors that are not on the path of travel, because the introduced ray is reaching them.\n\n<center>\n<img src=\"img/path_of_travel_doors.png\" alt=\"Path of travel doors\" title=\"Path of travel doors\" width=\"600\"/> <!-- Pixel Height: 622 Pixel Width: 1,152 -->\n</center>\n\nI looked at the Revit SDK sample PathOfTravel, but that does not help.\n\nThe [ReferenceIntersector documentation](https://www.revitapidocs.com/2024/c4fb6c89-ca34-7c56-b730-98755d11fedf.htm) is illuminating, and\nthe [FindNearest method](https://www.revitapidocs.com/2024/866e1f2b-c79a-4d9f-1db1-9e386dd42941.htm) ought\nto ensure that I only get a maximum of one single intersected door.\n\n**Answer:** Hmm. Maybe, this task can be addressed simpler.\nHow about this approach without using the reference intersector at all?\n\n- Retrieve the path of travel curve tessellation\n- For each line segment, determine whether it intersects a door\n\nAfaict, that should solve the problem right there.\nWhat do you think?\n\n**Response:** Just cracked it an hour ago!\nI tackled it with this trick:\nFor each curve in the path of travel line I did once from the start point following the curve's direction, and once from the endpoint with the reversed direction.\nThen, I accepted the points that appeared in both.\n\nI also thought of another approach as you mentioned: generating an imaginary line at each door location and checking whether the path of travel line segments intersects that.\nHowever, this method required finding the two points of each door, possibly by examining the geometry of a wall for its opening.\nWhile it seems plausible, I decided against pursuing it initially due to its complexity.\n\nLater: Unfortunately, the described technique fails to yield the intended results across certain models, resulting in a null output from the `ReferenceIntersector`.\n\nAs a workaround for those specific models, an alternative approach was employed:\n\n- Extract the start and end points of each line from the door geometry instance\n- Construct an imaginary line corresponding to the door location (the bounding box includes door swing, so not proper for my case)\n- Examine the intersection of this imaginary line with the curves of the path of travel lines\n\n**Answer:**\nGlad to hear that you found an approach that works reliably for all door instances.\n\nI cannot say for sure why the reference intersector fails in some cases.\nOne thing to consider, though, is that a content creator has complete freedom in the family definition.\nSo, some content creators might choose to represent doors in a completely unconventional manner.\nThey might define the door geometry so that no solids or faces exist for the reference intersector to detect, which might lead to such failures.\nThe infinite flexibility provided for Revit family definitions can make it hard to ensure that an approach always covers all cases.\nThis makes unit testing on a large collection of possible BIM variations all the more important.\n\nThe approach you describe is very generic: every door opening is defined by one single line from start to end point, and that line must be crossed to pass through the door.\nThat sounds pretty fool-proof to me.\n\n<!--\n\n% bl 1740 1744 1781 1836 1871 1917 2028\n<ul>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2019/04/whats-new-in-the-revit-2020-api.html\">What's New in the Revit 2020 API</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2019/04/new-revit-2020-sdk-samples.html\">New Revit 2020 SDK Samples</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2019/09/whats-new-in-the-revit-20201-api.html\">What's New in the Revit 2020.1 API</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2020/04/whats-new-in-the-revit-2021-api.html\">What's New in the Revit 2021 API</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2020/10/firerevit-deprecated-api-and-elbow-centre-point.html\">FireRevit, Deprecated API and Elbow Centre Point</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2021/09/view-sheet-from-view-and-select-all-on-level.html\">View Sheet from View and Select All on Level</a></li>\n<li><a href=\"https://thebuildingcoder.typepad.com/blog/2024/02/interactive-bim-notebook-temporary-graphics-and-ai.html\">Interactive BIM Notebook, Temporary Graphics and AI</a></li>\n</ul>\n\n-->"
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Camera Mapping Between APS and Revit",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Camera Mapping Between APS and Revit\n\nIn 2019, Eason Kang shared a very helpful explanation on how\nto [map Forge viewer camera back to Revit](https://aps.autodesk.com/blog/map-forge-viewer-camera-back-revit).\n\nHowever, some aspects changed, and some were left uncovered back then, as discussed in\nthe new [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160)\non [Revit 3D view camera settings](https://forums.autodesk.com/t5/revit-api-forum/revit-3d-view-camera-settings/m-p/12629132).\n\nSo, Eason took another deep dive into the topic, researched, tested, organized all the material and published it in two blog posts:\n\n- [From APS viewer to Revit](https://aps.autodesk.com/blog/camera-mapping-between-aps-viewer-and-revit-part-i-restore-viewer-camera-revit)\n- [From Revit to APS viewer](https://aps.autodesk.com/blog/camera-mapping-between-aps-viewer-and-revit-part-ii-restore-revit-camera-viewer)\n\nThe associated sample code lives in the\n\n- [aps-viewer-revit-camera-sync GitHub repo](https://github.com/yiskang/aps-viewer-revit-camera-sync)\n\n<!--\nIf you’re interested, here are the old discussions with another customer about doing something similar.\nCf. https://forge.zendesk.com/agent/tickets/14155\n-->\n\n<center>\n<img src=\"img/aps_viewer_camera_perspective.png\" alt=\"APS perspective view camera\" title=\"APS perspective view camera\" width=\"600\"/> <!-- Pixel Height: 576 Pixel Width: 1,024 -->\n</center>\n\nEver so many thanks to Eason for his very careful research and documentation."
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Claude 3 can See",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Claude 3 can See\n\nClaude 3 LLM AI model was released, now vision-enabled and with scores in several intelligence tests:\n\n- [Claude 3 announcement](https://www.anthropic.com/news/claude-3-family)\n- [Claude 3 entry point](https://claude.ai/)"
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Devin, an AI Software Engineer",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Devin, an AI Software Engineer\n\nAnother announcement\nintroduces [Devin, the first AI software engineer](https://www.cognition-labs.com/blog),\na fully autonomous AI software engineer."
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Meta Imagine Generates Images",
    "local_header_href": "#7",
    "chunk_text": "####<a name=\"7\"></a> Meta Imagine Generates Images\n\n[Meta Imagine](https://imagine.meta.com/) generates images,\ncf., [Meta launches web-based AI image generator trained on your Instagram pics](https://uk.pcmag.com/ai/150034/meta-launches-web-based-ai-image-generator-ai-updates-across-its-apps).\n\nI briefly tested it myself, trying to approximate an image of the real-world scene in front of me, and was unable to tweak the prompt to generate a satisfactory result.\nMy impression was that it very quickly ignored important aspects of my prompt, e.g., specific colour requests, etc., even when I repeated them, so I quickly gave up, unsatisfied."
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "An LLM for Decompiling Binary Code",
    "local_header_href": "#8",
    "chunk_text": "####<a name=\"8\"></a> An LLM for Decompiling Binary Code\n\nYet another use of LLM,\n[LLM4Decompile: decompiling binary code with large language models](https://arxiv.org/abs/2403.05286),\nwith its [LLM4Decompile GitHub repo](https://github.com/albertan017/LLM4Decompile)."
  },
  {
    "original_filename": "2030_travel_doors",
    "header_text": "Simple Climate Change Overview",
    "local_header_href": "#9",
    "chunk_text": "####<a name=\"9\"></a> Simple Climate Change Overview\n\nOn another ever-present and looming topic of our days,\nBBC shares a nice and simple comprehensive article\nexplaining [What is climate change? A really simple guide](https://www.bbc.com/news/science-environment-24021772)."
  }
]