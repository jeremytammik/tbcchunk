[
  {
    "original_filename": "0586_load_selected_types",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0586_load_selected_types",
    "header_text": "Loading Only Selected Family Types",
    "local_header_href": "#loading-only-selected-family-types",
    "chunk_text": "<h3>Loading Only Selected Family Types</h3><p>As you probably know, the Revit API provides two methods to load family types, also known as symbols: LoadFamilySymbol, which loads an individual type, and LoadFamily, which loads the entire family and all the types it defines. Use of the latter method can be quite time consuming and wasteful, especially if you only require a few of the types included.\n\n<p>In the past we also discussed a couple of other issues on handling family types, such as\n\n<!--\n\n034_creating_family_symbol.htm\n150_unload_family_type.htm\n\n-->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/creating-a-new-family-symbol.html\">\ncreating a new family type</a> using the Duplicate method\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/unload-family-type.html\">\nunloading an unused type</a>.\n\n<p>Erez van Leeuwen of\n\n<a href=\"http://www.npqsolutions.com/cadnl\">\nNordined</a> voiced\n\nthe interesting request of how to avoid the overhead of calling LoadFamily and loading all its types by presenting a list of the types to the user and asking her which ones are actually required, to which Saikat Bhattacharya came up with the following solution:\n\n<p><strong>Question:</strong> Revit provides multiple ways of loading a family.\nThe two 'Load Families' options displayed in the Revit ribbon are\n\n<ul>\n<li>Home &gt; Component &gt; Load Family\n<li>Insert &gt; Load Family\n</li></li></ul>\n<p>The first one loads a family and places an instance of it, and the second one only loads the family.\nIf the chosen family has a TXT file associated with it containing different types, Revit shows a popup window where you can select the types you want to load.\n\n<p>Using the API to load a family, I can choose between the LoadFamily and LoadFamilySymbol methods.\nIs there any other function I can use to load a family and have Revit pop up the dialog to choose which types I want loaded?\n\n<p>If this does not exist, can you tell me if there is a way to read which types exist within a family?\n\n\n<p><strong>Answer:</strong> There Revit API does not provide any method which will pop up a dialogue listing the types contained in a family.\n\n<p>You could load the entire family using the LoadFamily method and then use the Family.Symbols method to list all the types defined in it. The Revit API help file RevitAPI.chm does in fact include a code snippet showing how to iterate through all the symbols in a loaded family:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> GetInfoForSymbols( <span class=\"teal\">Family</span> family )\n{\n  <span class=\"teal\">StringBuilder</span> message = <span class=\"blue\">new</span> <span class=\"teal\">StringBuilder</span>(\n    <span class=\"maroon\">\"Selected element's family name is : \"</span>\n    + family.Name );\n \n  <span class=\"blue\">if</span>( family.Symbols.IsEmpty )\n  {\n    message.AppendLine(\n      <span class=\"maroon\">\"Contains no family symbols.\"</span> );\n  }\n  <span class=\"blue\">else</span>\n  {\n    message.AppendLine(\n      <span class=\"maroon\">\"The family symbols contained\"</span>\n      + <span class=\"maroon\">\" in this family are : \"</span> );\n \n    <span class=\"green\">// Get family symbols contained in this family</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> sym <span class=\"blue\">in</span> family.Symbols )\n    {\n      <span class=\"green\">// Get family symbol name</span>\n \n      message.AppendLine( <span class=\"maroon\">\"\\nName: \"</span> + sym.Name );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Material</span> material <span class=\"blue\">in</span> sym.Materials )\n      {\n        message.AppendLine(\n          <span class=\"maroon\">\"\\tMaterial: \"</span> + material.Name );\n      }\n    }\n  }\n  <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Revit\"</span>, message.ToString() );\n}\n</pre>\n<p>The problem is, of course, that this loads the entire family and all its symbols up front. Doing this for all the families needed will cause the Revit project to grow and become bigger very fast.\n\n<p>Access to and iteration over all the family symbols without permanently loading the entire family into the project file can be achieved using the power of transactions in the Revit API.\n\n<p>You can load a family within a transaction, read through its symbols, and then roll back the transaction to undo the loading of the family.\nDuring this process, the names of the symbols contained in the loaded family can be extracted and saved.\nSubsequently, a new transaction can be used to call the LoadFamilySymbol method to load a specific symbol based on the names retrieved in the previous step.\nThe following code snippet illustrates this approach and is quite simple and self-explanatory:\n\n<pre class=\"code\">\n  <span class=\"blue\">string</span> filename = <span class=\"maroon\">@\"C:\\Documents and Settings\"</span>\n    + <span class=\"maroon\">\"\\All Users\\Application Data\\Autodesk\"</span>\n    + <span class=\"maroon\">\"\\RAC 2011\\Metric Library\\Columns\"</span>\n    + <span class=\"maroon\">\"\\M_Round Column.rfa\"</span>;\n \n  <span class=\"teal\">UIApplication</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n \n  <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n    doc, <span class=\"maroon\">\"FakeLoading\"</span> );\n \n  trans.Start();\n \n  <span class=\"teal\">Family</span> family = <span class=\"blue\">null</span>;\n  <span class=\"blue\">string</span> symbName = <span class=\"teal\">String</span>.Empty;\n  <span class=\"blue\">int</span> counter = 0;\n  <span class=\"blue\">if</span>( doc.LoadFamily( filename, <span class=\"blue\">out</span> family ) )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilySymbol</span> symb <span class=\"blue\">in</span> family.Symbols )\n    {\n      <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Symbol names\"</span>, symb.Name );\n      <span class=\"blue\">if</span>( counter == 0 )\n      {\n        symbName = symb.Name;\n      }\n      counter++;\n    }\n  }\n  trans.RollBack();\n \n  <span class=\"teal\">Transaction</span> transNew = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>(\n    doc, <span class=\"maroon\">\"RealLoading\"</span> );\n \n  transNew.Start();\n \n  <span class=\"blue\">if</span>( doc.LoadFamilySymbol( filename, symbName ) )\n  {\n    <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Status\"</span>,\n      <span class=\"maroon\">\"We managed to load only one desired symbol!\"</span> );\n  }\n  transNew.Commit();\n</pre>\n<p><strong>Question:</strong> Of course, loading the whole family, rolling everything back and reloading the required types might considerably slow down the complete loading operation.\n\n<p>If the whole family is already being loaded, it might be faster to only unload or delete the unwanted types.\n\n<p>Is there a way to unload specific types? Within Revit I can just delete the unwanted types by pressing delete or I can purge them out.\n\nCan I do this via the API?\n\n<p><strong>Answer:</strong> As mentioned above, to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/unload-family-type.html\">\nunload specific family types</a>,\n\nyou can simply delete them from the Revit document object.\n\n<p>If you want to unload more than one type, you can collect all the types that you wish to unload in an ElementSet or create an ICollection of their element ids and use one of the following overloads of the Document.Delete method:\n\n<ul>\n<li>Delete(ElementSet)\n<li>Delete(ICollection(Of ElementId))\n</li></li></ul>\n<p>While editing this, another thought crossed my mind:\n\n<p>The approach above is based on reading the family into the project in order to determine what types it contains.\nThere may be another possible approach, of course, not loading the family into the project but opening the family file as a separate background document via the API and analysing that using its family manager object instead.\nYou can iterate the types that way as well.\nI don't know whether there is also any need to handle a possibly associated TXT file, and how that would affect the list of types returned by the family manager, but it might be worth a try.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]