[
  {
    "original_filename": "0836_vc_ribbon_util",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0836_vc_ribbon_util",
    "header_text": "Ribbon Creation Utility",
    "local_header_href": "#ribbon-creation-utility",
    "chunk_text": "<h3>Ribbon Creation Utility</h3><p>Creating and populating a ribbon panel is not a very complicated matter, although it normally does require instantiating and manipulating quite a number of different cooperating class instances.\n\n<p>Now Victor Chekalin, or Виктор Чекалин, presents a much simpler solution for this using dedicated wrapper classes.\n\n<p>In his own words:\n\n<a name=\"2\"></a>\n<h4>Create Buttons without Effort</h4>\n<p>As you know, you can create your own buttons or even your own tab in the Revit ribbon to perform a command.\n\n<p>For me, creating button always wasn't easy.\nEspecially  I didn't like to pass the assembly location and name of the external Command class to perform when I click the button.\nAlso, the standard API requires me to create an ImageSource for each button image while I have an image stored in the assembly resources.\n\n<p>To avoid these troubles and ease my life I decided to create a utility which helps me to create my Revit ribbon buttons.\nThe utility I created is really useful for me and I want to share it with everybody.\n\n<p>Here are the main features:\n\n<ul>\n<li>Fluent interface:\nYou can create all your buttons in one single line of code.\n<li>Command name as generic parameter:\nYou don't need to write the command name as text and set the assembly location.\n<li>Images from resource:\nYou can easily use images from resources.\n</li></li></li></ul>\n<p>The sample below illustrates all this.\n\n<p>This is the result in the Revit ribbon:</p>\n<center>\n<img alt=\"Victor's ribbon utility sample\" src=\"img/vc_ribbon_util.png\"/>\n</center>\n<p>Look at the source  code generating it:\n\n<pre class=\"code\">\n  <span class=\"teal\">Ribbon</span> ribbon = <span class=\"blue\">new</span> <span class=\"teal\">Ribbon</span>( a );\n \n  ribbon.Tab( <span class=\"maroon\">\"MyTab\"</span> )\n    .Panel( <span class=\"maroon\">\"Panel1\"</span> )\n \n    .CreateButton( <span class=\"maroon\">\"btn1\"</span>, <span class=\"maroon\">\"Button1\"</span>,\n      <span class=\"blue\">typeof</span>( Command1 ),\n      btn =&gt; btn\n        .SetLargeImage(\n          Resources._1348119708_face_monkey_32 )\n        .SetSmallImage(\n          Resources._1348119708_face_monkey_16 ) )\n \n    .CreateSeparator()\n \n    .CreateButton&lt;Command2&gt;( <span class=\"maroon\">\"btn2\"</span>, <span class=\"maroon\">\"Button2\"</span>,\n      btn =&gt; btn\n        .SetLongDescription(\n          <span class=\"maroon\">\"This is a description of the button2\"</span> )\n        .SetLargeImage(\n          Resources._1348119643_face_glasses_32 ) )\n \n    .CreateStackedItems( si =&gt; si\n \n      .CreateButton&lt;Command3&gt;( <span class=\"maroon\">\"btn3\"</span>, <span class=\"maroon\">\"Button3\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119594_preferences_system_16 ) )\n \n      .CreateButton&lt;Command4&gt;( <span class=\"maroon\">\"btn4\"</span>, <span class=\"maroon\">\"Button4\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119621_internet_web_browser_16 ) ) )\n \n    .CreateSeparator()\n \n    .CreateStackedItems( si =&gt; si\n \n      .CreateButton&lt;Command3&gt;( <span class=\"maroon\">\"btn3_1\"</span>, <span class=\"maroon\">\"Button3\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119594_preferences_system_16 ) )\n \n      .CreateButton&lt;Command4&gt;( <span class=\"maroon\">\"btn4_1\"</span>, <span class=\"maroon\">\"Button4\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119621_internet_web_browser_16 ) )\n \n      .CreateButton&lt;Command1&gt;( <span class=\"maroon\">\"btn1_1\"</span>, <span class=\"maroon\">\"Button1\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119553_face_smile_big_16 ) ) );\n</pre>\n<p>Pretty easy, isn't it?\n\n<p>At first I set the tab, where I want to create my buttons.\nI can specify my own tab or one of the system tabs, e.g. Autodesk.Revit.UI.Tab.AddIns.\nIf the tab doesn't exist, it will be created.\nSo, you can easily use a tab from a different add-in.\nYou specify a panel to group the buttons on the tab.\nNext, the most important part, create the buttons.\nI won't describe how to create the buttons.\nThe code is self-explanatory.\n\n<p>My utility currently supports push button, push button as stacked item and separator.\n\n<p>Here is the\n\n<a href=\"zip/VCRevitRibbonUtil.zip\">\ncompiled assembly</a>.\n\n<p>The source code is available on\n\n<a href=\"https://github.com/chekalin-v/VCRevitRibbonUtil\">\nGitHub</a>.\n\nYou can also download it as a\n\n<a href=\"https://github.com/chekalin-v/VCRevitRibbonUtil/zipball/master\">\nzip archive file</a>.\n\n<p>It provides the namespaces VCRevitRibbonUtil and VCRevitRibbonUtil.Helpers containing the following classes:\n\n<ul>\n<li>StackedItem\n<li>Button\n<li>Panel\n<li>Ribbon\n<li>Tab\n<li>Helpers.BitmapSourceConverter\n</li></li></li></li></li></li></ul>\n<p>Many thanks to Victor for this neat time and labour saving utility!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0836_vc_ribbon_util",
    "header_text": "Create Buttons without Effort",
    "local_header_href": "#create-buttons-without-effort",
    "chunk_text": "<h4>Create Buttons without Effort</h4><p>As you know, you can create your own buttons or even your own tab in the Revit ribbon to perform a command.\n\n<p>For me, creating button always wasn't easy.\nEspecially  I didn't like to pass the assembly location and name of the external Command class to perform when I click the button.\nAlso, the standard API requires me to create an ImageSource for each button image while I have an image stored in the assembly resources.\n\n<p>To avoid these troubles and ease my life I decided to create a utility which helps me to create my Revit ribbon buttons.\nThe utility I created is really useful for me and I want to share it with everybody.\n\n<p>Here are the main features:\n\n<ul>\n<li>Fluent interface:\nYou can create all your buttons in one single line of code.\n<li>Command name as generic parameter:\nYou don't need to write the command name as text and set the assembly location.\n<li>Images from resource:\nYou can easily use images from resources.\n</li></li></li></ul>\n<p>The sample below illustrates all this.\n\n<p>This is the result in the Revit ribbon:</p>\n<center>\n<img alt=\"Victor's ribbon utility sample\" src=\"img/vc_ribbon_util.png\"/>\n</center>\n<p>Look at the source  code generating it:\n\n<pre class=\"code\">\n  <span class=\"teal\">Ribbon</span> ribbon = <span class=\"blue\">new</span> <span class=\"teal\">Ribbon</span>( a );\n \n  ribbon.Tab( <span class=\"maroon\">\"MyTab\"</span> )\n    .Panel( <span class=\"maroon\">\"Panel1\"</span> )\n \n    .CreateButton( <span class=\"maroon\">\"btn1\"</span>, <span class=\"maroon\">\"Button1\"</span>,\n      <span class=\"blue\">typeof</span>( Command1 ),\n      btn =&gt; btn\n        .SetLargeImage(\n          Resources._1348119708_face_monkey_32 )\n        .SetSmallImage(\n          Resources._1348119708_face_monkey_16 ) )\n \n    .CreateSeparator()\n \n    .CreateButton&lt;Command2&gt;( <span class=\"maroon\">\"btn2\"</span>, <span class=\"maroon\">\"Button2\"</span>,\n      btn =&gt; btn\n        .SetLongDescription(\n          <span class=\"maroon\">\"This is a description of the button2\"</span> )\n        .SetLargeImage(\n          Resources._1348119643_face_glasses_32 ) )\n \n    .CreateStackedItems( si =&gt; si\n \n      .CreateButton&lt;Command3&gt;( <span class=\"maroon\">\"btn3\"</span>, <span class=\"maroon\">\"Button3\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119594_preferences_system_16 ) )\n \n      .CreateButton&lt;Command4&gt;( <span class=\"maroon\">\"btn4\"</span>, <span class=\"maroon\">\"Button4\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119621_internet_web_browser_16 ) ) )\n \n    .CreateSeparator()\n \n    .CreateStackedItems( si =&gt; si\n \n      .CreateButton&lt;Command3&gt;( <span class=\"maroon\">\"btn3_1\"</span>, <span class=\"maroon\">\"Button3\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119594_preferences_system_16 ) )\n \n      .CreateButton&lt;Command4&gt;( <span class=\"maroon\">\"btn4_1\"</span>, <span class=\"maroon\">\"Button4\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119621_internet_web_browser_16 ) )\n \n      .CreateButton&lt;Command1&gt;( <span class=\"maroon\">\"btn1_1\"</span>, <span class=\"maroon\">\"Button1\"</span>,\n        btn =&gt; btn.SetSmallImage( Resources\n          ._1348119553_face_smile_big_16 ) ) );\n</pre>\n<p>Pretty easy, isn't it?\n\n<p>At first I set the tab, where I want to create my buttons.\nI can specify my own tab or one of the system tabs, e.g. Autodesk.Revit.UI.Tab.AddIns.\nIf the tab doesn't exist, it will be created.\nSo, you can easily use a tab from a different add-in.\nYou specify a panel to group the buttons on the tab.\nNext, the most important part, create the buttons.\nI won't describe how to create the buttons.\nThe code is self-explanatory.\n\n<p>My utility currently supports push button, push button as stacked item and separator.\n\n<p>Here is the\n\n<a href=\"zip/VCRevitRibbonUtil.zip\">\ncompiled assembly</a>.\n\n<p>The source code is available on\n\n<a href=\"https://github.com/chekalin-v/VCRevitRibbonUtil\">\nGitHub</a>.\n\nYou can also download it as a\n\n<a href=\"https://github.com/chekalin-v/VCRevitRibbonUtil/zipball/master\">\nzip archive file</a>.\n\n<p>It provides the namespaces VCRevitRibbonUtil and VCRevitRibbonUtil.Helpers containing the following classes:\n\n<ul>\n<li>StackedItem\n<li>Button\n<li>Panel\n<li>Ribbon\n<li>Tab\n<li>Helpers.BitmapSourceConverter\n</li></li></li></li></li></li></ul>\n<p>Many thanks to Victor for this neat time and labour saving utility!\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]