[
  {
    "original_filename": "1972_reload_purged_fam",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- Reloading a Purged Family\n  https://autodesk.slack.com/archives/C0QBNEU1E/p1667404130612699\n\n- OKLCH in CSS: why we moved from RGB and HSL\n  https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl\n  1952:<\"#5\"> Plugging the HSL Colour Format\n\ntwitter:\n\nNew date for the Dublin onsite APS accelerator and hints on reloading a purged family with the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon https://autode.sk/reloadpurgedfamily\n\nNew date for the Dublin onsite APS accelerator and hints on reloading a purged family\n&ndash; APS accelerator Dublin Dec 5-9\n&ndash; Reloading a purged family\n&ndash; The CSS OKLCH colour space\n\nlinkedin:\n\nNew date for the Dublin onsite APS accelerator and hints on reloading a purged family with the #RevitAPI\n\nhttps://autode.sk/reloadpurgedfamily\n\n- APS accelerator Dublin Dec 5-9\n- Reloading a purged family\n- The CSS OKLCH colour space\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<center>\n<img src=\"img/\" alt=\"\" title=\"\" width=\"600\" height=\"\"/>\n<p style=\"font-size: 80%; font-style:italic\"></p>\n</center>\n\n<pre class=\"code\">\n</pre>\n\n-->"
  },
  {
    "original_filename": "1972_reload_purged_fam",
    "header_text": "APS Accelerator and Reloading a Purged Family",
    "local_header_href": "#aps-accelerator-and-reloading-a-purged-family",
    "chunk_text": "### APS Accelerator and Reloading a Purged Family\n\nWe wrap up the week announcing a new date for the Dublin onsite APS accelerator and with hints on handling the frequent problem of reloading a purged family:\n\n- [APS accelerator Dublin Dec 5-9](#2)\n- [Reloading a purged family](#3)\n- [The CSS OKLCH colour space](#4)"
  },
  {
    "original_filename": "1972_reload_purged_fam",
    "header_text": "APS (ex-Forge) Accelerator Dublin Dec 5-9",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> APS (ex-Forge) Accelerator Dublin Dec 5-9\n\nQuick update on behalf of Jaime:\nwe decided to push the date of the upcoming Dublin Hybrid Accelerator in the Autodesk Dublin Office to next month.\n\nWe are looking for customers interested in joining us onsite to work with the Developer advocates team in coding solutions using Autodesk Platform Services (formerly Forge).\nIn the past (pre-covid), we regularly hosted such events in the EMEA region to have software developers join us for the week.\nWe have an ongoing registration and would love to have a full house for the event:\n\n- [Registration for APS Accelerator Dublin December 5-9, 2022](https://www.eventbrite.com/e/autodesk-platform-services-aps-accelerator-dublin-november-14-18-2022-registration-440477168067)\n- [More details about this and other APS Accelerators](https://forge.autodesk.com/accelerator-program)"
  },
  {
    "original_filename": "1972_reload_purged_fam",
    "header_text": "Reloading a Purged Family",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> Reloading a Purged Family\n\nMy solution engineer colleague Lejla Secerbegovic explored how to trigger the re-loading of family types after having (accidentally) purged them.\n\nHere is a 46-second video showing the [issue reloading purged family in Revit](https://youtu.be/bHi_9Z3srqo):\n\n<center>\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/bHi_9Z3srqo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</center>\n\nIt seems that Revit only reloads the family if it can see any changes &ndash; however, when you purge, the .rfa doesn’t change.  \nFrom my understanding, I need to get Revit to trigger the following dialog (which doesn’t appear if you don’t edit the .rfa):\n\n<center>\n<img src=\"img/reload_purged_fam.png\" alt=\"Reload purged family\" title=\"Reload purged family\" width=\"437\"/>  <!-- 874 x 600 -->\n</center>\n\nAfter some discussion, we moved this forward from 'it’s by design' to a workaround suggestion to create an API-based Dynamo process to open the family, create an invisible edit and then reload it. The edit would trigger the GUID change.\n\nHere are the details of that conversation:\n\n**Question:** Is there any way to restore the family types that were removed by purging?\nAs you can see in the video, if I purge the unused types and then try reloading the family, it will not restore the types (probably because it thinks nothing in the family has changed?)\n\n**Answer:** Family types can be created in the project and are not sent back to the rfa file unless you save out a new version of the family.\nSo, if you load the family, make types in the project, then delete or purge them in the project, they are gone.\nReloading the rfa will just load it before the types ever existed.\nYou would need a backup of the projects before the purge; then you could save out the families and load them to the purged project... I think...\n\n**Response:** Sorry if it wasn’t clear in the video: the types exist in the .rfa and were not created in the project.\nUsers sometimes purge “accidentally”, which removes all unused types, and this is why we are looking for a way to easily restore them from the .rfa.\n\nI’m not using any type catalogues, but families with different types created in the family environment and this happens with EVERY family.\nPlease note you need to reload the family from the original location, which is typically what a user would do.\nSteps to reproduce:\n\n- Load a family with different types created in the family environment into a project\n- Place one instance / one type of the family in the project\n- Purge and check the not used types have been deleted\n- Reload the same family from the same location without changing it any way\n- RESULT: the purged types won’t be restored\n\nHere are the 2 families I tested this with:\n\n- <a href=\"zip/ls_M_Desk.rfa\">M_Desk.rfa</a>, from our official library\n- <a href=\"zip/ls_LEGO_Brick.rfa\">LEGO_Brick.rfa</a> custom Lego brick used in the video\n\n**Answer:** With your steps I can reproduce.\n\nAccording to our developer, this is by design and we will not need to discuss it further.\n\nA workaround for your customer if they want to get the types back without deleting any existing placed families would be to:\n\n- Open the family they are trying to load that has the types\n- Change something small like visual style in a view\n- Use the load into project button to load the family\n- Now you should see the overwrite message and get your family types back\n\nRegarding the original post &ndash; correct!\nIf you did not change the family in any way, this results in a NOP.\nYou can also see that there is no transaction in the Undo dropdown.\n\nThis is how it is by design.\n\n**Response:** Thanks for the response &ndash; what would then be the recommendation for the following scenario:\n\n- Unexperienced users sometimes purge “accidentally” (there is no way to disable the function in Revit and there is no warning telling you what it really means)\n- BIM Managers  need to able to restore missing types for ALL families &ndash; do we really tell them to copy the library somewhere else / edit every family?\n\nIs there any way to force reload through the API or Dynamo?\n\n**Answer:** The API or Dynamo could make the invisible modification allowing the reload, yes.\nI envision:\n\n- User runs tool\n- Selects family file to ‘reload’\n- Family is opened in the background\n- Invisible edit is made\n- Family is loaded into the project closing without saving\n\nBecause of the invisible modification, the family has a change and can be reloaded with all types.\nThey could save if they wanted to, but not much need.\n\nQuestion is what is an acceptable invisible edit.\nI’d personally use something like an extensible storage entity that just gets incremented by one, but that’s hard for many to self-manage.\nThey could use a hidden parameter with a toggle value in a similar way though.\n\nThat would be a fairly straight forward tool they can self-build if so inclined.\n  \nThe change can also be unmade after the load.\nSo, it could be a Boolean \"Reload Me\" parameter that gets changed to true before the reload and false after.\n\nThanks to Angel Velez, Ivan Dobrianov, Jacob Small, Lejla Secerbegovic, Mariah Hanning and Steven Crotty for the fruitful discussion."
  },
  {
    "original_filename": "1972_reload_purged_fam",
    "header_text": "The CSS OKLCH Colour Space",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> The CSS OKLCH Colour Space\n\nMoving to a completely different topic: just half a year ago, I pointed out\nthe [advantages of the HSL colour space in CSS](https://thebuildingcoder.typepad.com/blog/2022/05/analysis-of-macros-journals-and-add-in-manager.html#5).\n\nThat can be yet further improved on, cf. [OKLCH in CSS: why we moved from RGB and HSL](https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl).\n\n> In CSS, we’ve been encoding colours with `rgb()` or hex (mostly for historical reasons).\nHowever, the new [CSS Color 4](https://www.w3.org/TR/css-color-4/) specification\nadds many better ways of declaring colours in CSS.\nOf these, `oklch()` is the most interesting one &ndash; this article explains why."
  }
]