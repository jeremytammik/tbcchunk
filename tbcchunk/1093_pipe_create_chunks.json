[
  {
    "original_filename": "1093_pipe_create",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1093_pipe_create",
    "header_text": "Final Rolling Offset Using Pipe.Create",
    "local_header_href": "#final-rolling-offset-using-pipecreate",
    "chunk_text": "<h3>Final Rolling Offset Using Pipe.Create</h3><p>I am writing this on the way back to Switzerland from my hiking trip on La Palma.\nActually, lacking good bandwidth during my travels, I actually arrived back before being able to post this...</p><p>Even before my return, I already have some good news to share:</p><p>Victor Chekalin provided a working sample of using the static Pipe.Create method, so I can update my rolling offset series to make use of that more modern and flexible method rather than the older NewPipe one.</p><p>Here are the steps so far in the rolling offset exploration:</p><ul>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/calculating-a-rolling-offset-between-two-pipes.html\">\nCalculate a rolling offset</a> between\n\ntwo pipes</li>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/calculating-a-rolling-offset-between-two-pipes.html\">\nInsert the rolling offset pipe segment</a></li>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/connecting-the-rolling-offset-pipe-to-its-neighbour-pipes.html\">\nConnect it to its neighbours</a></li>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/connecting-the-rolling-offset-pipe-to-its-neighbour-pipes.html\">\nExplicitly placing elbow fittings</a></li>\n<li>\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/newelbowfitting-easily-places-rolling-offset-elbow-fittings.html\">\nSimpler fitting placement using NewElbowFitting</a></li>\n</ul><p>My last words in the last post stated that it just about concludes this project, except for the question on how to use Pipe.Create instead of Document.Create.NewPipe, which is still open.</p><p>When exploring the pipe creation, I had a look at using the static Pipe.Create method but quickly resorted to NewPipe instead.</p><p>Victor very kindly provided a solution and an explanation that forms a useful basis for exploring and solving this in more depth:</p><ul>\n<li>A <a href=\"#2\">working sample using Pipe.Create</a></li>\n<li>A <a href=\"#3\">sample of using the View.GenLevel property</a></li>\n<li>An <a href=\"#4\">explanation of the Pipe.Create piping system type argument</a></li>\n<li>The <a href=\"#5\">Pipe.Create level id argument</a></li>\n<li>Retrieving all Pipe.Create argument values <a href=\"#6\">from existing pipe parameters</a></li>\n<li>Updated <a href=\"#7\">rolling offset using Pipe.Create</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1093_pipe_create",
    "header_text": "A Working Sample Using Pipe.Create",
    "local_header_href": "#a-working-sample-using-pipecreate",
    "chunk_text": "<h4>A Working Sample Using Pipe.Create</h4><p>Victor responded to my post, saying \"I was able to create a pipe using new method with first attempt  :-)\"</p><p>Here is\n\n<a href=\"http://pastebin.com/RZn1WnMW\">\nVictor's initial code</a>:</p><pre class=\"code\">\n  <span class=\"green\">// Extract all pipe system types</span>\n \n  <span class=\"blue\">var</span> mepSystemTypes\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">PipingSystemType</span> ) )\n      .OfType&lt;<span class=\"teal\">PipingSystemType</span>&gt;()\n      .ToList();\n \n  <span class=\"green\">// Get the Domestic hot water type</span>\n \n  <span class=\"blue\">var</span> domesticHotWaterSystemType =\n    mepSystemTypes.FirstOrDefault(\n      st =&gt; st.SystemClassification ==\n        <span class=\"teal\">MEPSystemClassification</span>.DomesticHotWater );\n \n  <span class=\"blue\">if</span>( domesticHotWaterSystemType == <span class=\"blue\">null</span> )\n  {\n    message = <span class=\"maroon\">\"Could not found Domestic Hot Water System Type\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"green\">// Looking for the PipeType</span>\n \n  <span class=\"blue\">var</span> pipeTypes =\n    <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">PipeType</span> ) )\n      .OfType&lt;<span class=\"teal\">PipeType</span>&gt;()\n      .ToList();\n \n  <span class=\"green\">// Get the first type from the collection</span>\n \n  <span class=\"blue\">var</span> firstPipeType =\n      pipeTypes.FirstOrDefault();\n \n  <span class=\"blue\">if</span>( firstPipeType == <span class=\"blue\">null</span> )\n  {\n    message = <span class=\"maroon\">\"Could not found Pipe Type\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"blue\">var</span> level = uidoc.ActiveView.GenLevel;\n \n  <span class=\"blue\">if</span>( level == <span class=\"blue\">null</span> )\n  {\n    message = <span class=\"maroon\">\"Wrong Active View\"</span>;\n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n \n  <span class=\"blue\">var</span> startPoint = <span class=\"teal\">XYZ</span>.Zero;\n \n  <span class=\"blue\">var</span> endPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( 100, 0, 0 );\n \n  <span class=\"blue\">using</span>( <span class=\"blue\">var</span> t = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n  {\n    t.Start( <span class=\"maroon\">\"Create pipe using Pipe.Create\"</span> );\n \n    <span class=\"blue\">var</span> pipe = <span class=\"teal\">Pipe</span>.Create( doc,\n      domesticHotWaterSystemType.Id,\n      firstPipeType.Id,\n      level.Id,\n      startPoint,\n      endPoint );\n \n    t.Commit();\n  }\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "1093_pipe_create",
    "header_text": "A Sample of Using the View.GenLevel Property",
    "local_header_href": "#a-sample-of-using-the-viewgenlevel-property",
    "chunk_text": "<h4>A Sample of Using the View.GenLevel Property</h4><p>The View.GenLevel property is not very richly documented.</p><p>This is all the Revit API help file has to say about it:\n\"The level for the view.\nThis will obtain the level for views related to levels, such as Plan Views.\nIf this View is not generated by a level, this property is null.\"</p><p>Note that Victor's code above shows a nice example of making use of that property.</p><p>See below for a discussion on how to retrieve the proper level from an existing pipe element.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1093_pipe_create",
    "header_text": "An Explanation of the Pipe.Create Piping System Type Argument",
    "local_header_href": "#an-explanation-of-the-pipecreate-piping-system-type-argument",
    "chunk_text": "<h4>An Explanation of the Pipe.Create Piping System Type Argument</h4><p>Victor's explanation:\nThe reason for your problem is the systemTypeId parameter.\nYou passed the wrong id.</p><p>In the help file (and in your post) the description for systemTypeId says it requires \"the id of the piping system type\".</p><p>The keyword here is <i>type</i>, i.e., you should pass the element id of the MEPSystemType or PipingSystemType class for the selected pipe.</p><p>Your code attempts to use the system, not the type:</p><pre class=\"code\">\n  <span class=\"teal\">ElementId</span> idSystem = pipe.MEPSystem.Id;\n</pre><p>If you want to create the rolling offset pipe with the same system type as the original pipe, you should use the following code:</p><pre class=\"code\">\n  <span class=\"teal\">ElementId</span> systemIdTypeId\n    = pipe.MEPSystem.GetTypeId();\n</pre><p>In a real project, you would presumably first check pipe.MEPSystem for null:</p><pre class=\"code\">\n  <span class=\"teal\">ElementId</span> systemIdTypeId;\n \n  <span class=\"blue\">if</span>( pipe.MEPSystem != <span class=\"blue\">null</span> )\n  {\n    systemIdTypeId = pipe.MEPSystem.GetTypeId();\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Select some default systemTypeId</span>\n    <span class=\"green\">// Extract all pipe system types</span>\n    <span class=\"blue\">var</span> mepSystemTypes\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">PipingSystemType</span> ) )\n        .OfType&lt;<span class=\"teal\">PipingSystemType</span>&gt;()\n        .ToList();\n \n    <span class=\"green\">// Get the Domestic hot water type</span>\n    systemIdTypeId = mepSystemTypes.FirstOrDefault(\n      st =&gt; st.SystemClassification ==\n        <span class=\"teal\">MEPSystemClassification</span>.DomesticHotWater );\n  }\n</pre><a name=\"5\"></a>"
  },
  {
    "original_filename": "1093_pipe_create",
    "header_text": "Updated Rolling Offset Using Pipe.Create",
    "local_header_href": "#updated-rolling-offset-using-pipecreate",
    "chunk_text": "<h4>Updated Rolling Offset Using Pipe.Create</h4><p>Once I had retrieved the MEP system and pipe system types as suggested by Victor, I assumed that I could grab the level from the existing pipe.</p><p>My initial attempt, however, using the value of the existing pipe's Element.LevelId property, did that in the wrong manner as well.</p><p>It returns an invalid element id for the level, causing the call to Pipe.Create to throw an exception saying, \"The level id levelId is not valid. Parameter name: levelId\".</p><p>I used the BipChecker to look more closely at the existing pipe parameters and discovered a built-in parameter\nRBS_START_LEVEL_PARAM in there with ElementId storage type that returns its 'Reference Level' instead and is not invalid.</p><p>As soon as I used that instead, the pipe creation worked.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1093_pipe_create",
    "header_text": "Retrieving All Pipe.Create Argument Values from an Existing Pipe",
    "local_header_href": "#retrieving-all-pipecreate-argument-values-from-an-existing-pipe",
    "chunk_text": "<h4>Retrieving All Pipe.Create Argument Values from an Existing Pipe</h4><p>I used the BipChecker on all three pipes to more closely examine their differences and similarities;\nhere are the results for the two original ones,\n\n<a href=\"zip/rolling_offset_pipe1.txt\">pipe 1</a>,\n\n<a href=\"zip/rolling_offset_pipe2.txt\">pipe 2</a> and\n\nfrom the rolling offset\n\n<a href=\"zip/rolling_offset_pipe3.txt\">pipe 3</a>.</p><p>It is illuminating to compare these three, so I suggest you do so  :-)</p><p>I still need to adjust the new pipe diameter, and I ought to use the same hydronic supply piping system type before trying to connect them.</p><p>To summarise my findings and extract all the argument values for the call to Pipe.Create from existing pipe parameters, here are some of your options:</p><ul>\n<li>ElementId systemTypeId</li>\n<ul>\n<li>RBS_PIPING_SYSTEM_TYPE_PARAM 'System Type' read-write</li>\n</ul>\n<li>ElementId pipeTypeId</li>\n<ul>\n<li>ELEM_FAMILY_AND_TYPE_PARAM 'Family and Type' read-write</li>\n<li>ELEM_FAMILY_PARAM 'Family' read-write</li>\n<li>ELEM_TYPE_PARAM\t'Type' read-write</li>\n<li>SYMBOL_ID_PARAM\t'Type Id' read-only</li>\n</ul>\n<li>ElementId levelId</li>\n<ul>\n<li>RBS_START_LEVEL_PARAM 'Reference Level' read-write</li>\n</ul>\n</ul><a name=\"7\"></a>"
  },
  {
    "original_filename": "1093_pipe_create",
    "header_text": "Updated Rolling Offset Using Pipe.Create",
    "local_header_href": "#updated-rolling-offset-using-pipecreate",
    "chunk_text": "<h4>Updated Rolling Offset Using Pipe.Create</h4><p>Putting all of this together, we arrive at the following:</p><pre class=\"code\">\n  tx.Start( <span class=\"maroon\">\"Rolling Offset\"</span> );\n \n  <span class=\"blue\">if</span>( _place_model_line )\n  {\n    <span class=\"green\">// . . .</span>\n  }\n  <span class=\"blue\">else</span> <span class=\"blue\">if</span>( _place_fittings )\n  {\n    <span class=\"green\">// . . .</span>\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">if</span>( _use_static_pipe_create )\n    {\n      <span class=\"green\">// Element id arguments to Pipe.Create.</span>\n \n      <span class=\"teal\">ElementId</span> idSystem;\n      <span class=\"teal\">ElementId</span> idType;\n      <span class=\"teal\">ElementId</span> idLevel;\n \n      <span class=\"green\">// All these values are invalid for idSystem:</span>\n \n      <span class=\"teal\">ElementId</span> idSystem1 = pipe.MEPSystem.Id;\n      <span class=\"teal\">ElementId</span> idSystem2 = <span class=\"teal\">ElementId</span>.InvalidElementId;\n      <span class=\"teal\">ElementId</span> idSystem3 = <span class=\"teal\">PipingSystem</span>.Create(\n        doc, pipe.MEPSystem.GetTypeId(), <span class=\"maroon\">\"Tbc\"</span> )\n          .Id;\n \n      <span class=\"green\">// This throws an argument exception saying</span>\n      <span class=\"green\">// The systemTypeId is not valid piping system type.</span>\n      <span class=\"green\">// Parameter name: systemTypeId</span>\n \n      <span class=\"green\">//pipe = Pipe.Create( doc, idSystem,</span>\n      <span class=\"green\">//  idType, idLevel, q0, q1 );</span>\n \n      <span class=\"green\">// Retrieve pipe system type, e.g. </span>\n      <span class=\"green\">// hydronic supply.</span>\n \n      <span class=\"teal\">PipingSystemType</span> pipingSystemType\n        = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">PipingSystemType</span> ) )\n          .OfType&lt;<span class=\"teal\">PipingSystemType</span>&gt;()\n          .FirstOrDefault( st\n            =&gt; st.SystemClassification\n              == <span class=\"teal\">MEPSystemClassification</span>\n                .SupplyHydronic );\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == pipingSystemType )\n      {\n        message = <span class=\"maroon\">\"Could not find hydronic supply piping system type\"</span>;\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      idSystem = pipingSystemType.Id;\n \n      <span class=\"teal\">Debug</span>.Assert( pipe.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.RBS_PIPING_SYSTEM_TYPE_PARAM )\n          .AsElementId().IntegerValue.Equals(\n            idSystem.IntegerValue ),\n          <span class=\"maroon\">\"expected same piping system element id\"</span> );\n \n      <span class=\"green\">// Retrieve the PipeType.</span>\n \n      <span class=\"teal\">PipeType</span> pipeType =\n        <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n          .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">PipeType</span> ) )\n          .OfType&lt;<span class=\"teal\">PipeType</span>&gt;()\n          .FirstOrDefault();\n \n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == pipeType )\n      {\n        message = <span class=\"maroon\">\"Could not find pipe type\"</span>;\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      idType = pipeType.Id;\n \n      <span class=\"teal\">Debug</span>.Assert( pipe.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.ELEM_TYPE_PARAM )\n          .AsElementId().IntegerValue.Equals(\n            idType.IntegerValue ),\n        <span class=\"maroon\">\"expected same pipe type element id\"</span> );\n \n      <span class=\"teal\">Debug</span>.Assert( pipe.PipeType.Id.IntegerValue\n        .Equals( idType.IntegerValue ),\n        <span class=\"maroon\">\"expected same pipe type element id\"</span> );\n \n      <span class=\"green\">// Retrieve the reference level.</span>\n      <span class=\"green\">// pipe.LevelId is not the correct source!</span>\n \n      idLevel = pipe.get_Parameter(\n        <span class=\"teal\">BuiltInParameter</span>.RBS_START_LEVEL_PARAM )\n          .AsElementId();\n \n      <span class=\"green\">// Create the rolling offset pipe.</span>\n \n      pipe = <span class=\"teal\">Pipe</span>.Create( doc,\n        idSystem, idType, idLevel, q0, q1 );\n    }\n    <span class=\"blue\">else</span>\n    {\n      pipe = doc.Create.NewPipe( q0, q1,\n        pipe_type_standard );\n    }\n \n    pipe.get_Parameter( bipDiameter )\n      .Set( diameter );\n \n    <span class=\"green\">// Connect rolling offset pipe segment</span>\n    <span class=\"green\">// directly with the neighbouring original</span>\n    <span class=\"green\">// pipes</span>\n    <span class=\"green\">//</span>\n    <span class=\"green\">//Util.Connect( q0, pipes[0], pipe );</span>\n    <span class=\"green\">//Util.Connect( q1, pipe, pipes[1] );</span>\n \n    <span class=\"green\">// NewElbowFitting performs the following:</span>\n    <span class=\"green\">// - select appropriate fitting family and type</span>\n    <span class=\"green\">// - place and orient a family instance</span>\n    <span class=\"green\">// - set its parameters appropriately</span>\n    <span class=\"green\">// - connect it with its neighbours</span>\n \n    <span class=\"teal\">Connector</span> con0 = <span class=\"teal\">Util</span>.GetConnectorClosestTo(\n      pipes[0], q0 );\n \n    <span class=\"teal\">Connector</span> con = <span class=\"teal\">Util</span>.GetConnectorClosestTo(\n      pipe, q0 );\n \n    doc.Create.NewElbowFitting( con0, con );\n \n    <span class=\"teal\">Connector</span> con1 = <span class=\"teal\">Util</span>.GetConnectorClosestTo(\n      pipes[1], q1 );\n \n    con = <span class=\"teal\">Util</span>.GetConnectorClosestTo(\n      pipe, q1 );\n \n    doc.Create.NewElbowFitting( con, con1 );\n  }\n \n  tx.Commit();\n</pre><p>Once again, the resulting model looks exactly the same as the one presented previously, generated by\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/01/explicitly-placing-rolling-offset-pipe-elbow-fittings.html#4\">\nexplicitly placing the elbow fittings</a>.</p><p>The hopefully final solution to generate the rolling offset pipe and properly place and connect the elbow fittings is included in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> GitHub\n\nrepository, in the external command CmdRollingOffset, and the version discussed here is\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.106.6\">\nrelease 2014.0.106.6</a>.</p><p>Now back to work again, and catching up with the backlog...</p><p><strong>Addendum:</strong> Victor already posted on this topic in Russian:\n\n<a href=\"http://adn-cis.org/sozdanie-trubyi-s-pomoshhyu-metoda-pipe-create.html\">\nСоздание трубы с помощью метода Pipe.Create</a> (Making\n\ntube method using Pipe.Create).</p><p>The built-in Firefox Tools &gt; Translate Page rendering of this looks useful and interesting to me as well  :-)</p><p>Many thanks to Victor for all his help on this!</p>"
  }
]