[
  {
    "original_filename": "1138_sheet_viewport_loops",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1138_sheet_viewport_loops",
    "header_text": "Determining the Size and Location of Viewports on a Sheet",
    "local_header_href": "#determining-the-size-and-location-of-viewports-on-a-sheet",
    "chunk_text": "<h3>Determining the Size and Location of Viewports on a Sheet</h3><p>Today, let's look at how to determine the size and location of a sheet and the views displayed by it.</p><p>This is part of the first and most Revit-related of the three enhancement goals for my simplified 2D BIM editor:</p><ul>\n<li>Display selected BIM elements in their sheet and view context – in addition to pure model space room and family instance elements.</li>\n<li>Display and edit non-graphical parameters – in addition to the purely graphical family instance outlines.</li>\n<li>Implement more graphical editing using translation and rotation grip points – in addition to the simple rotation button.</li>\n</ul><p>In previous versions of Revit, determining the size and locations of views on a sheet was a pretty challenging undertaking.</p><p>Here are some related explorations:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/viewports-and-sheets.html\">\nList all sheets and their views – CmdListViews</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/determine-sheet-size.html\">\nDetermine sheet size – CmdSheetSize</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/view-location-on-sheet.html\">\nDetermine view location on sheet – using Viewport bounding box</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/10/exact-viewport-positioning-conceptual-design-automation-and-graitec.html#2\">\nExact viewport positioning – using Viewport Outline</a></li>\n</ul><p>A quote from the third:\n\"The View class has a very important property Outline.\nThe Outline property will return the Max and Min point of the closest bounding box, which includes all elements in this view.\nThe value in this Max and Min the result of the legend view's real Max and Min coordinates subdivided by the view scale.\nFor more information about Outline property, please refer to the Revit SDK developer guide 'Revit 2011 API Developer Guide.pdf'.\nApproximately, the outline Max point is mapping the same Max point of the viewport in view sheet.\"</p><p>Nowadays, the Viewport class provides an Outline property that considerably simplifies this task.</p><p>Here is a sheet 'A101 - Level 0, 1 and 3D' displaying three views:</p><center>\n<img alt=\"Sheet displaying three views\" src=\"img/sheet_viewport_loops_1.png\" width=\"516\"/>\n</center><p>My GeoSnoop utility dynamically generates this temporary form displaying the outlines of the sheet and the three views it contains:</p><center>\n<img alt=\"GeoSnoop displaying the sheet and vieport outlines\" src=\"img/sheet_viewport_loops_2.png\" width=\"296\"/>\n</center><p>The top level code in the CmdUploadSheets external command implementation retrieving the sheet and viewport loops and displaying them in a temporary modeless form basically just consists of two lines of code, calling the new GetSheetViewportLoops and the existing GeoSnoop.DisplayLoops methods:</p><pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ViewSheet</span> sheet <span class=\"blue\">in</span> sheets )\n  {\n    <span class=\"teal\">JtLoops</span> sheetViewportLoops\n      = GetSheetViewportLoops( sheet );\n \n    <span class=\"blue\">string</span> sheet_number = sheet.get_Parameter(\n      <span class=\"teal\">BuiltInParameter</span>.SHEET_NUMBER )\n        .AsString();\n \n    caption = <span class=\"blue\">string</span>.Format(\n      <span class=\"maroon\">\"Sheet and Viewport Loops - {0} - {1}\"</span>,\n      sheet_number, sheet.Name );\n \n    <span class=\"teal\">GeoSnoop</span>.DisplayLoops( revit_window,\n      caption, <span class=\"blue\">false</span>, sheetViewportLoops );\n  }\n</pre><p>The GeoSnoop.DisplayLoops method is pretty much unchanged from its last incarnation for displaying\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/room-and-furniture-loops-using-symbols.html\">\nroom and furniture loops using symbols</a>,\n\nexcept that the family instances and symbol geometry arguments now are optional and default to null.</p><p>The interesting new code to retrieve the sheet and viewport rectangles is short and sweet, making use of a couple of extensions I added to the existing Point2dInt and JtLoop classes:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return polygon loops representing the size </span>\n  <span class=\"gray\">///</span><span class=\"green\"> and location of given sheet and the viewports </span>\n  <span class=\"gray\">///</span><span class=\"green\"> it contains.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"teal\">JtLoops</span> GetSheetViewportLoops(\n    <span class=\"teal\">ViewSheet</span> sheet )\n  {\n    <span class=\"teal\">Document</span> doc = sheet.Document;\n \n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">Viewport</span>&gt; viewports = sheet\n      .GetAllViewports()\n      .Select&lt;<span class=\"teal\">ElementId</span>,<span class=\"teal\">Viewport</span>&gt;(\n        id =&gt; doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">Viewport</span> )\n      .ToList&lt;<span class=\"teal\">Viewport</span>&gt;();\n \n    <span class=\"blue\">int</span> n = viewports.Count;\n \n    <span class=\"teal\">JtLoops</span> sheetViewportLoops = <span class=\"blue\">new</span> <span class=\"teal\">JtLoops</span>( n + 1 );\n \n    <span class=\"teal\">BoundingBoxUV</span> bb = sheet.Outline; <span class=\"green\">// (0,0), (2.76,1.95)</span>\n \n    <span class=\"teal\">JtBoundingBox2dInt</span> ibb = <span class=\"blue\">new</span> <span class=\"teal\">JtBoundingBox2dInt</span>(); <span class=\"green\">// (0,0),(840,...)</span>\n \n    ibb.ExpandToContain( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( bb.Min ) );\n    ibb.ExpandToContain( <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( bb.Max ) );\n \n    <span class=\"teal\">JtLoop</span> loop = <span class=\"blue\">new</span> <span class=\"teal\">JtLoop</span>( 4 );\n \n    loop.Add( ibb.Corners );\n \n    sheetViewportLoops.Add( loop );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Viewport</span> vp <span class=\"blue\">in</span> viewports )\n    {\n      <span class=\"teal\">XYZ</span> center = vp.GetBoxCenter();\n      <span class=\"teal\">Outline</span> outline = vp.GetBoxOutline();\n \n      ibb.Init();\n \n      ibb.ExpandToContain(\n        <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( outline.MinimumPoint ) );\n \n      ibb.ExpandToContain(\n        <span class=\"blue\">new</span> <span class=\"teal\">Point2dInt</span>( outline.MaximumPoint ) );\n \n      loop = <span class=\"blue\">new</span> <span class=\"teal\">JtLoop</span>( 4 );\n \n      loop.Add( ibb.Corners );\n \n      sheetViewportLoops.Add( loop );\n    }\n    <span class=\"blue\">return</span> sheetViewportLoops;\n  }\n</pre><p>The updated RoomEditorApp source code, Visual Studio solution and add-in manifest live in the\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp\">\nRoomEditorApp GitHub repository</a>.</p><p>The version discussed above is\n\n<a href=\"https://github.com/jeremytammik/RoomEditorApp/releases/tag/2015.0.2.8\">\nrelease 2015.0.2.8</a>.</p>"
  }
]