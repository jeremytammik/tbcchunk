[
  {
    "original_filename": "0208_shared_param_visibility",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0208_shared_param_visibility",
    "header_text": "Shared Parameter Visibility",
    "local_header_href": "#shared-parameter-visibility",
    "chunk_text": "<h3>Shared Parameter Visibility</h3><p>Here is an interesting question and a workaround for a problem accessing the visibility property on shared parameters, raised by Jon Smith of\n\n<a href=\"http://www.constructionindustrysolutions.com\">\nConstruction Industry Solutions COINS</a>:\n\n<p><strong>Question:</strong> We need to be able to tell if a parameter is visible or invisible, so we can honour that setting in our own interface and not display it if set to invisible.\nWe try to do this as follows:\n\n<pre>\nExternalDefinition externalDef \n  = param.Definition as ExternalDefinition;\n\nif( externalDef == null || externalDef.Visible )\n{\n  // show the parameter\n}\n</pre>\n<p>However, all definitions returned by this method for any parameter whatsoever are InternalDefinition, including for shared parameters that have been marked as invisible.\nThe InternalDefinition does not have the Visible property exposed.\n\n<p>It also seems, from looking in the Visual Studio watch window, that the base Definition class does contain a visible property  (whose value is correct), but it is internal and not exposed:\n\n<center>\n<img alt=\"Parameter visibility\" src=\"img/VisibleParameter.png\"/>\n</center>\n<p><strong>Answer:</strong> Yes, there is a known issue accessing the definition class of a shared parameter. \nThe Parameter.Definition property on a shared parameter erroneously returns an InternalDefinition, even though it actually should be returning an ExternalDefinition.\nThis issue is being looked into and will be resolved soon.\nIt may be possible to implement a workaround to get the proper external definition through the sequence Application.OpenSharedParameterFile &gt; DefinitionFile &gt; DefinitionGroup &gt; ExternalDefinition.\n\n<p>Happily, if Visual Studio is able to display the visibility property that you are interested in, then you should also be able to access it from your application source code using .NET \n\n<a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_science%29\">\nreflection</a>.\n\n<p><strong>Response:</strong> Excellent - thanks for the information on the issue with the Parameter.Definition property, and thanks for pointing me towards using reflection. \nWe have created the following function that solves the problem for the current release:\n\n<pre class=\"code\"> \n<span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> isParameterVisible( <span class=\"teal\">Parameter</span> p )\n{\n  <span class=\"blue\">bool</span> bParameterIsVisible = <span class=\"blue\">true</span>;\n \n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">BindingFlags</span> flags \n      = <span class=\"teal\">BindingFlags</span>.Instance \n      | <span class=\"teal\">BindingFlags</span>.FlattenHierarchy \n      | <span class=\"teal\">BindingFlags</span>.Public \n      | <span class=\"teal\">BindingFlags</span>.NonPublic \n      | <span class=\"teal\">BindingFlags</span>.InvokeMethod;\n \n    <span class=\"teal\">Type</span> t = <span class=\"blue\">typeof</span>( <span class=\"teal\">Definition</span> );\n\n    <span class=\"blue\">object</span> result = t.InvokeMember( \n      <span class=\"maroon\">\"get_Visible\"</span>, flags, <span class=\"blue\">null</span>, p.Definition, <span class=\"blue\">null</span> );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != result &amp;&amp; result <span class=\"blue\">is</span> <span class=\"teal\">Boolean</span> )\n    {\n      bParameterIsVisible = (<span class=\"teal\">Boolean</span>) result;\n    }\n  }\n  <span class=\"blue\">catch</span>( System.<span class=\"teal\">Exception</span> )\n  {\n    <span class=\"green\">// in case of any problems, assume parameter is visible</span>\n  }\n  <span class=\"blue\">return</span> bParameterIsVisible;\n}\n</pre>\n<p>Many thanks to Jon for this cool little workaround!\n</p></p></p></p></p></p></p></p>"
  }
]