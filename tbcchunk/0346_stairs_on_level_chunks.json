[
  {
    "original_filename": "0346_stairs_on_level",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0346_stairs_on_level",
    "header_text": "Retrieve Stairs on Level",
    "local_header_href": "#retrieve-stairs-on-level",
    "chunk_text": "<h3>Retrieve Stairs on Level</h3><p>As mentioned in the discussion on \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/selecting-model-elements.html\">\nselecting model elements</a>,\n\nstairs are not represented by an own class in the Revit API, but using the generic Revit Element class instead.\nThey do have a valid built-in category assigned to them, however, which makes it easy to retrieve them from the database and use the generic element and parameter access to retrieve and modify a lot of their data.\nWe also discussed other aspects of stairs in the past, such as\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/list-railing-types.html\">\nlisting the railing types</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/material-quantity-extraction.html\">\nmaterial quantity extraction</a>, and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/retrieving-column-and-stair-geometry.html\">\ngeometry retrieval</a>.\n\n<p>Rocky now raised a \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/selecting-model-elements.html?cid=6a00e553e1689788330133ecc952ca970b#comment-6a00e553e1689788330133ecc952ca970b\">\nquestion</a> on \n\nretrieving stair elements from the database that allows us to take another quick look at the new Revit 2011 filtering capabilities:\n\n<p><strong>Question:</strong> Will you please help me out to know how to retrieve the stairs on certain levels?\nE.g., if there are two stairs on the first level of the building, then on second level, how can we get these stairs?\n\n<p><strong>Answer:</strong> Retrieving all the stairs on a given level is easy. \nWe can use the stairs built-in category OST_Stairs to identify the stairs themselves, and the Element class Level property or an appropriate built-in parameter to determine what level they are on.\nSince the Revit filtering API is so flexible and powerful, it provides us with a number of options for the approach to use:\n\n<ul>\n<li>Explicit iteration and manual checking of a property.\n<li>Using <a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/language-integrated-query-linq.html\">LINQ</a>.\n<li>Using an <a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/anonymous-methods-in-vb.html\">anonymous method</a>.\n<li>Using a parameter filter.\n</li></li></li></li></ul>\n<p>We have demonstrated examples of all of these in several recent posts, e.g. in our analysis of \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\ncollector performance</a>.\n\n<p>In all of the approaches above, one would obviously first apply a filter to check for the built-in category, for two reasons:\n\n<ul>\n<li>First, it is a quick filter, so it should be applied before any slow filters or other processing.\n<li>Secondly, we know that it will eliminate the vast majority of all the Revit database elements, so very few elements will remain to check.\n</li></li></ul>\n<p>The first three options listed above all make use of post-processing of the results returned by the quick category filter, and are more or less equivalent in speed.\nBelow, we present untested source code sample implementation snippets for all three of these approaches:\nHere is the built-in stair category constant and the element id of the level that we are searching for:\n\n<pre class=\"code\">\n  <span class=\"teal\">ElementId</span> id = level.Id;\n \n  <span class=\"teal\">BuiltInCategory</span> bic \n    = <span class=\"teal\">BuiltInCategory</span>.OST_Stairs;\n</pre>\n<p>Here is the retrieval using explicit iteration and manual checking of a property:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  collector.OfCategory( bic );\n \n  <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt; stairs = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">Element</span>&gt;();\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"blue\">if</span>( e.Level.Id.Equals( id ) )\n    {\n      stairs.Add( e );\n    }\n  }\n</pre>\n<p>Using LINQ, it might look like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  collector.OfCategory( bic );\n \n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Element</span>&gt; stairsOnLevelLinq =\n    <span class=\"blue\">from</span> e <span class=\"blue\">in</span> collector\n    <span class=\"blue\">where</span> e.Level.Id.Equals( id )\n    <span class=\"blue\">select</span> e;\n</pre>\n<p>Using an anonymous method, it is even shorter:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  collector.OfCategory( bic );\n \n  <span class=\"teal\">IEnumerable</span>&lt;<span class=\"teal\">Element</span>&gt; stairsOnLevelAnon =\n    collector.Where&lt;<span class=\"teal\">Element</span>&gt;( e \n      =&gt; e.Level.Id.Equals( id ) );\n</pre>\n<p>As said, the test of the built-in category uses a quick filter, so that is good.\nThe post-processing is very expensive and not optimal, though.\n\n<p>As we demonstrated in our\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/collector-benchmark.html\">\ncollector performance</a> analysis,\n\na parameter filter is twice as fast as post-processing the results, even though it is a slow filter and not a quick one.\n\n<p>To use a parameter filter on the stair elements retrieved by the category filter, we need a built-in parameter to test, instead of the Element Level property.\nThe stair object stores its base and top levels in the built-in parameters STAIRS_BASE_LEVEL_PARAM and STAIRS_TOP_LEVEL_PARAM, so that is no problem.\n\n<p>Here is an untested source code example of setting up a category and a parameter filter to retrieve all stairs on a given level:\n\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc );\n \n  collector.OfCategory( bic );\n \n  <span class=\"teal\">BuiltInParameter</span> bip\n    = <span class=\"teal\">BuiltInParameter</span>.STAIRS_BASE_LEVEL_PARAM;\n \n  <span class=\"teal\">ParameterValueProvider</span> provider\n    = <span class=\"blue\">new</span> <span class=\"teal\">ParameterValueProvider</span>(\n      <span class=\"blue\">new</span> <span class=\"teal\">ElementId</span>( bip ) );\n \n  <span class=\"teal\">FilterNumericRuleEvaluator</span> evaluator\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilterNumericEquals</span>();\n \n  <span class=\"teal\">FilterRule</span> rule = <span class=\"blue\">new</span> <span class=\"teal\">FilterElementIdRule</span>(\n    provider, evaluator, id );\n \n  <span class=\"teal\">ElementParameterFilter</span> filter\n    = <span class=\"blue\">new</span> <span class=\"teal\">ElementParameterFilter</span>( rule );\n \n  <span class=\"blue\">return</span> collector.WherePasses( filter );\n</pre>\n<p>I hope that fully answers your question, Rocky, and provides a useful working example for many others as well.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]