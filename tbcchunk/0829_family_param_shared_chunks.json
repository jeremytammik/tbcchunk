[
  {
    "original_filename": "0829_family_param_shared",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0829_family_param_shared",
    "header_text": "FamilyParameter IsShared Property",
    "local_header_href": "#familyparameter-isshared-property",
    "chunk_text": "<h3>FamilyParameter IsShared Property</h3><p>A long time ago, we discussed a workaround to access the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/access-to-shared-family-parameter-guid.html\">\nshared family parameter GUID</a>\n\nusing \n\n<a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\">\nreflection</a>,\n\nmore specifically (and obviously)\n\n<a href=\"http://msdn.microsoft.com/en-us/library/f7ykdhsy.aspx\">\n.NET Reflection</a>.\n\nIf you are new to this, here is an in-depth Code Project article on\n\n<a href=\"http://www.codeproject.com/Articles/55710/Reflection-in-NET\">\nReflection in .NET</a>.\n\n<p>Now Victor Chekalin, or Виктор Чекалин, ran into this issue as well and presents a much improved solution.\n\n<p>Here is the background and our discussion on this:\n\n\n<p><strong>Question:</strong> Why does the FamilyParameter class have no IsShared Property, like the Parameter class does? \nI need to get list of all FamilyParameters and all their properties, including GUID.\n\n<p>Now, if I call the GUID property on a FamilyParameter that is not shared, Revit throws an InvalidOperationException.\nThe only way I can check whether the FamilyParameter is shared or not is try to get GUID property and handle the exception if it is not shared.\n\n<p>This is a problem, because intercepting the exception takes a lot of time, and if a family has a lot of FamilyParameters, the program freezes significantly.\n\n<p>Why did the API developers implement this odd behaviour and not add an IsShared property to the FamilyParameter? \nAlternatively, they could just return null if the FamilyParameter is not shared.\n\n\n<p><strong>Answer:</strong> Sorry about that.\nThese properties can be accessed\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/01/access-to-shared-family-parameter-guid.html\">\nusing .NET Reflection</a>.\n\n\n<p><strong>Response:</strong> Yes, that looks as if it would help me.\n\n<p>I looked at RevitAPI.dll using Reflector and find it harder still to understand why the API developers didn't add the IsShared property to the FamilyParameter class. \nIt is just a wrapper for the Parameter class, and it would just take one or two lines of code, e.g.\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">bool</span> IsShared\n  {\n    <span class=\"blue\">get</span> { <span class=\"blue\">return</span> getParameter().IsShared; }\n  }\n</pre>\n<p>Re-examining your post, though, maybe I understand after all:\nthe GUID and IsShared properties were only added to the Parameter class in the Revit 2011 API.\nI guess that it was simply an oversight and they forgot add the new properties to the FamilyParameters as well.\nMaybe I'm wrong.\n\n<p>I hope this property is added in the future versions of the Revit API. \nAs I can see from the post comments, I am not the only one wanting to see an IsShared property.\n\n\n<a name=\"2\"></a>\n<h4>Implementing a FamilyParameter IsShared Extension Method</h4>\n<p>Based on your sample in the post, I wrote a simple extension method:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> IsShared( \n    <span class=\"blue\">this</span> <span class=\"teal\">FamilyParameter</span> familyParameter )\n  {\n    <span class=\"teal\">MethodInfo</span> mi = familyParameter\n      .GetType()\n      .GetMethod( <span class=\"maroon\">\"getParameter\"</span>, \n        <span class=\"teal\">BindingFlags</span>.Instance \n        | <span class=\"teal\">BindingFlags</span>.NonPublic );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == mi )\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">InvalidOperationException</span>( \n        <span class=\"maroon\">\"Could not find getParameter method\"</span> );\n    }\n \n    <span class=\"blue\">var</span> parameter = mi.Invoke( familyParameter, \n      <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { } ) <span class=\"blue\">as</span> <span class=\"teal\">Parameter</span>;\n \n    <span class=\"blue\">return</span> parameter.IsShared;\n  }\n</pre>\n<p>I used the internal getParameter method instead the m_Parameter field, because it is not recommended to use fields from other classes. \nAlso, the getParameter method is used in most of the code that I saw in Reflector, not the m_Parameter field.\n\n<a name=\"3\"></a>\n<h4>Using the FamilyParameter IsShared Extension Method</h4>\n<p>The use of the new method is completely obvious:\n\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyParameter</span> fp <span class=\"blue\">in</span> mgr.Parameters )\n  {\n    <span class=\"blue\">if</span>( fp.IsShared() )\n    {\n      familyTypeParameter.Guid = fp.GUID;\n    }\n  }\n</pre>\n<p>It works much faster than triggering and catching the exception, e.g. \n\n<pre class=\"code\">\n  <span class=\"blue\">try</span> { <span class=\"blue\">var</span> guid = parameter.GUID; } \n  <span class=\"blue\">catch</span>() {}\n</pre>\n<p>Thank you again for reminding me about reflection.\n\n\n<p><strong>Answer:</strong> Many thanks to <b>you</b>, Victor, for your analysis, clean implementation, and sharing this with us!\n\n<p>Here is an updated \n\n<a href=\"zip/bc_13_99_2.zip\">version 2013.0.99.2</a> of \n\nThe Building Coder samples including the extension method and a test call to it in the CmdFamilyParamGuid external command.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0829_family_param_shared",
    "header_text": "Implementing a FamilyParameter IsShared Extension Method",
    "local_header_href": "#implementing-a-familyparameter-isshared-extension-method",
    "chunk_text": "<h4>Implementing a FamilyParameter IsShared Extension Method</h4><p>Based on your sample in the post, I wrote a simple extension method:\n\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"blue\">bool</span> IsShared( \n    <span class=\"blue\">this</span> <span class=\"teal\">FamilyParameter</span> familyParameter )\n  {\n    <span class=\"teal\">MethodInfo</span> mi = familyParameter\n      .GetType()\n      .GetMethod( <span class=\"maroon\">\"getParameter\"</span>, \n        <span class=\"teal\">BindingFlags</span>.Instance \n        | <span class=\"teal\">BindingFlags</span>.NonPublic );\n \n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == mi )\n    {\n      <span class=\"blue\">throw</span> <span class=\"blue\">new</span> <span class=\"teal\">InvalidOperationException</span>( \n        <span class=\"maroon\">\"Could not find getParameter method\"</span> );\n    }\n \n    <span class=\"blue\">var</span> parameter = mi.Invoke( familyParameter, \n      <span class=\"blue\">new</span> <span class=\"blue\">object</span>[] { } ) <span class=\"blue\">as</span> <span class=\"teal\">Parameter</span>;\n \n    <span class=\"blue\">return</span> parameter.IsShared;\n  }\n</pre>\n<p>I used the internal getParameter method instead the m_Parameter field, because it is not recommended to use fields from other classes. \nAlso, the getParameter method is used in most of the code that I saw in Reflector, not the m_Parameter field.\n\n<a name=\"3\"></a>\n<h4>Using the FamilyParameter IsShared Extension Method</h4>\n<p>The use of the new method is completely obvious:\n\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyParameter</span> fp <span class=\"blue\">in</span> mgr.Parameters )\n  {\n    <span class=\"blue\">if</span>( fp.IsShared() )\n    {\n      familyTypeParameter.Guid = fp.GUID;\n    }\n  }\n</pre>\n<p>It works much faster than triggering and catching the exception, e.g. \n\n<pre class=\"code\">\n  <span class=\"blue\">try</span> { <span class=\"blue\">var</span> guid = parameter.GUID; } \n  <span class=\"blue\">catch</span>() {}\n</pre>\n<p>Thank you again for reminding me about reflection.\n\n\n<p><strong>Answer:</strong> Many thanks to <b>you</b>, Victor, for your analysis, clean implementation, and sharing this with us!\n\n<p>Here is an updated \n\n<a href=\"zip/bc_13_99_2.zip\">version 2013.0.99.2</a> of \n\nThe Building Coder samples including the extension method and a test call to it in the CmdFamilyParamGuid external command.\n</p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0829_family_param_shared",
    "header_text": "Using the FamilyParameter IsShared Extension Method",
    "local_header_href": "#using-the-familyparameter-isshared-extension-method",
    "chunk_text": "<h4>Using the FamilyParameter IsShared Extension Method</h4><p>The use of the new method is completely obvious:\n\n<pre class=\"code\">\n  <span class=\"blue\">foreach</span>( <span class=\"teal\">FamilyParameter</span> fp <span class=\"blue\">in</span> mgr.Parameters )\n  {\n    <span class=\"blue\">if</span>( fp.IsShared() )\n    {\n      familyTypeParameter.Guid = fp.GUID;\n    }\n  }\n</pre>\n<p>It works much faster than triggering and catching the exception, e.g. \n\n<pre class=\"code\">\n  <span class=\"blue\">try</span> { <span class=\"blue\">var</span> guid = parameter.GUID; } \n  <span class=\"blue\">catch</span>() {}\n</pre>\n<p>Thank you again for reminding me about reflection.\n\n\n<p><strong>Answer:</strong> Many thanks to <b>you</b>, Victor, for your analysis, clean implementation, and sharing this with us!\n\n<p>Here is an updated \n\n<a href=\"zip/bc_13_99_2.zip\">version 2013.0.99.2</a> of \n\nThe Building Coder samples including the extension method and a test call to it in the CmdFamilyParamGuid external command.\n</p></p></p></p></p>"
  }
]