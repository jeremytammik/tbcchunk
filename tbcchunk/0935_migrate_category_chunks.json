[
  {
    "original_filename": "0935_migrate_category",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0935_migrate_category",
    "header_text": "Migrating a Built-in Category and Other Things",
    "local_header_href": "#migrating-a-built-in-category-and-other-things",
    "chunk_text": "<h3>Migrating a Built-in Category and Other Things</h3><p>Here is a category related issue that appeared when migrating from the Revit 2013 to the Revit 2014 API, plus a several other  typical simple little Revit API questions from the last day or two:</p><ul>\n<li><a href=\"#2\">Migrating the room separation lines built-in category</a></li>\n<li><a href=\"#3\">Storage of RGB colour values for materials</a></li>\n<li><a href=\"#4\">Updating a DXF link</a></li>\n<li><a href=\"#5\">Retrieving truss family elements</a></li>\n<li><a href=\"#6\">Retrieving stair stringer data</a></li>\n<li><a href=\"#7\">Storing custom data</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "0935_migrate_category",
    "header_text": "Migrating the Room Separation Lines Built-in Category",
    "local_header_href": "#migrating-the-room-separation-lines-built-in-category",
    "chunk_text": "<h4>Migrating the Room Separation Lines Built-in Category</h4><p><strong>Question:</strong> I get the following error while migrating my C# code from Revit 2013 to Revit 2014:\n\n<ul>\n<li>'Autodesk.Revit.DB.BuiltInCategory' does not contain a definition for 'OST_AreaSeparationLines'</li>\n</ul>\n<p>It is caused by the following line of code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">Element</span>&gt; collection\n    = collector.OfCategory(\n        <span class=\"teal\">BuiltInCategory</span>.OST_AreaSeparationLines )\n      .ToElements();\n</pre>\n<p>Do you have any solution to suggest?</p>\n<p><strong>Answer:</strong> The easiest way to fix this kind of issue is to look at an element that has this category using RevitLookup in Revit 2013, and then load the same model and see what category it has in Revit 2014.\n\n<p><strong>Response:</strong> That worked!\n\n<p>It seems to be called OST_RoomSeparationLines now.\n\n<p>Problem solved.</p>\n<a name=\"3\"></a>\n<h4>Storage of RGB Colour Values for Materials</h4>\n<p><strong>Question:</strong> I looked at a material element 'Color' parameter value today.\nThis parameter values comes back as an integer.\n\n<p>It appears to me to have the red and blue values reversed.\n\n<p>When looking at the 'Site – Earth' material in the rac_advanced_sample_project included with Revit, the Color <b>property</b> on the material class returns material.Color.Red=97, material.Color.Green=75 and material.Color.Blue=62, which is also what the Revit GUI shows in 'Manage Materials'.\nI checked on an online colour generator web site and it looks the same as in the Revit GUI, a dirty brown colour.\n\n<p>However, the integer number that comes back from the 'Color' <b>parameter</b> on the material element is 4082529, which when converted to RGB values using online converters, comes back as Red=62, Green=75 and Blue=97, which is a bluish colour.\nThe Red and Blue values appear to be reversed.\n\n<p>I would have expected the integer 6376254 to be returned for this colour instead.\n\n<p>Can you explain this, please?\n\n\n<p><strong>Answer:</strong> Yes, easily.\n\n<p>This is actually working as expected.\n\n<p>Revit uses the Windows convention of storing colours as an\n\n<a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/dd183449%28v=vs.85%29.aspx\">\nRGB COLORREF value</a> in\n\na DWORD (32 bit integer) that specifies \"The low-order byte contains a value for the relative intensity of red; the second byte contains a value for green; and the third byte contains a value for blue\".\n\n<p>In other words it is (A)BGR and not (A)RGB.\n\n<p>This corresponds to the value of the integer returned from a Color parameter.\n\n\n\n<a name=\"4\"></a>\n<h4>Updating a DXF Link</h4>\n<p><strong>Question:</strong> I have created a DXF link DXF using the following code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">DWGImportOptions</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">DWGImportOptions</span>();\n  <span class=\"teal\">ElementId</span> linkId;\n \n  <span class=\"blue\">if</span>( doc.Link( <span class=\"maroon\">\"C:\\\\tmp\\\\test.dxf\"</span>,\n    opt, doc.ActiveView, <span class=\"blue\">out</span> linkId ) )\n  {\n    <span class=\"teal\">Element</span> e = doc.GetElement( linkId );\n    <span class=\"teal\">ImportInstance</span> i = e <span class=\"blue\">as</span> <span class=\"teal\">ImportInstance</span>;\n  }\n</pre>\n<p>Later, the DXF is modified by an external application.\n\n<p>Is it possible to programmatically force Revit to reload the link?\n\n<p>I think I could also delete the ImportInstance and create a new one, but I don't how to get the proper DWGImportOptions and DXF file path from the existing ImportInstance.</p>\n<p><strong>Answer:</strong> Yes, this can easily be achieved.\nYou can use the RevitLinkType.Unload method to unload it first, and then call RevitLinkType.Reload to reload the updated DXF file.</p>\n<p>The imported DXF file has the type of CADLinkType.\nJust as you say, you could also delete the link and import it again.</p>\n<p>You can find the imported DXF ImportInstance's original path by calling the ExternalFileReference.GetPath method, and the\nExternalFileUtils.GetExternalRefernce method will return the ImportInstance's ExternalFileReference object.</p>\n<a name=\"5\"></a>\n<h4>Retrieving Truss Family Elements</h4>\n<p><strong>Question:</strong> How can I retrieve a truss element family instance?\n\n<p><strong>Answer:</strong> This is a very basic question, answered many times over in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/getting-started-with-the-revit-api.html\">\nRevit API getting started material</a>.\n\n<p>I recommend that you take a look at that material, work through the 'My First Revit Plugin' and DevTV tutorials, install the Revit SDK, RevitLookup, RvtSamples, and then answer that question for yourself.</p>\n<p>I'll just give you one little additional hint to help get you started:</p>\n<p>Every access to a Revit database element is achieved using a filtered element collector.</p>\n<p>To retrieve all truss family instances, you could use something like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Truss );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"green\">// e is a truss family instance</span>\n  }\n</pre>\n<a name=\"6\"></a>\n<h4>Retrieval of Stair Stringer Data</h4>\n<p><strong>Question:</strong> I want to access the values of the stair stringer height and thickness properties on a stair element.\nHow can I achieve this, please?\n\n<p>I tried using the built-in parameters STAIRS_ATTR_STRINGER_THICKNESS and STAIRS_ATTR_STRINGER_HEIGTH, but the value being returned is null. I am also unable to get the family symbol of the stair element.</p>\n<p><strong>Answer:</strong> The two parameters that you are trying to access are stored on the stair type, not the stair itself.\n\n<p>The stair type is represented by the ElementType class, not FamilySymbol.\n\n<p>You can access the stair type and the two desired paramaters like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">Document</span> doc = stair.Document;\n \n  <span class=\"teal\">ElementId</span> id = stair.GetTypeId();\n \n  <span class=\"teal\">ElementType</span> type = doc.get_Element( id )\n    <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n \n  <span class=\"teal\">Parameter</span> pThick = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_THICKNESS );\n \n  <span class=\"teal\">Parameter</span> pHeight = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_HEIGHT );\n \n  <span class=\"blue\">double</span> thick = pThick.AsDouble();\n  <span class=\"blue\">double</span> height = pHeight.AsDouble();\n</pre>\n<a name=\"7\"></a>\n<h4>Storing Custom Data</h4>\n<p><strong>Response:</strong> I need more than just the path.\nI would like to retrieve other DWGImportOptions parameters as well.\nIs it possible to get them somehow?\n\n<p><strong>Answer:</strong> I don't think there is any way to retrieve all the ImportInstance's DWGImportOptions.\n\n<p>Since the DXF file was imported by your own code, you can easily work around that gap by storing the DWGImportOptions property values of interest in the ImportInstance object.\n\n<p>You can use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a>\n\n(<a href=\"http://wikihelp.autodesk.com/Revit/enu/2014/Help/3665-Developers/0135-Advanced135/0136-Storing_136/0141-Extensib141\">wiki</a>,\n<a href=\"http://thebuildingcoder.typepad.com/blog/storage\">category</a>)\n\nto store custom data on Revit elements.\n\n<p>When you use this, you can later read back the settings from the extensible storage data.\n\n<!--\n<hr>\n\n<a name=\"3\"></a>\n\n<h4>Launching Revit using Process.Start</h4>\n\n<p><strong>Question:</strong>\n\nWeird issue. I'm launching Revit from a typical Windows.Form PushButton using:\n\nSystem.Diagnostics.Process.Start(@\"C:\\Program Files\\Autodesk\\Revit Architecture 2013\\Program\\Revit.exe\");\n\nWhen Revit opens, I get the message, 'The path you have specified for the default family template files is invalid' (see: Default Templates invalid.png)\n\nIf I then click the Applications menu (Revit pulldown at top/left of Revit window), click Options and select: File Locations, all my template files are missing (see missing.png).\n\nIf I launch Revit using the delevered desktop icon this does not happen (see: not-missing.png). Is there a way to use Process() to open Revit correctly?\n\n<p><strong>Answer:</strong>\nwhen you start a process from the windows desktop icon, you also specify the start-up directory.\n\nProcess.Start also includes this possibility.\n\ntry using that.\n\nyou can also specify other environment settings.\n\nsimply ensure that all environment settings set up by Process.Start exactly match the settings generated by the windows desktop launch icon.\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0935_migrate_category",
    "header_text": "Storage of RGB Colour Values for Materials",
    "local_header_href": "#storage-of-rgb-colour-values-for-materials",
    "chunk_text": "<h4>Storage of RGB Colour Values for Materials</h4><p><strong>Question:</strong> I looked at a material element 'Color' parameter value today.\nThis parameter values comes back as an integer.\n\n<p>It appears to me to have the red and blue values reversed.\n\n<p>When looking at the 'Site – Earth' material in the rac_advanced_sample_project included with Revit, the Color <b>property</b> on the material class returns material.Color.Red=97, material.Color.Green=75 and material.Color.Blue=62, which is also what the Revit GUI shows in 'Manage Materials'.\nI checked on an online colour generator web site and it looks the same as in the Revit GUI, a dirty brown colour.\n\n<p>However, the integer number that comes back from the 'Color' <b>parameter</b> on the material element is 4082529, which when converted to RGB values using online converters, comes back as Red=62, Green=75 and Blue=97, which is a bluish colour.\nThe Red and Blue values appear to be reversed.\n\n<p>I would have expected the integer 6376254 to be returned for this colour instead.\n\n<p>Can you explain this, please?\n\n\n<p><strong>Answer:</strong> Yes, easily.\n\n<p>This is actually working as expected.\n\n<p>Revit uses the Windows convention of storing colours as an\n\n<a href=\"http://msdn.microsoft.com/en-us/library/windows/desktop/dd183449%28v=vs.85%29.aspx\">\nRGB COLORREF value</a> in\n\na DWORD (32 bit integer) that specifies \"The low-order byte contains a value for the relative intensity of red; the second byte contains a value for green; and the third byte contains a value for blue\".\n\n<p>In other words it is (A)BGR and not (A)RGB.\n\n<p>This corresponds to the value of the integer returned from a Color parameter.\n\n\n\n<a name=\"4\"></a>\n<h4>Updating a DXF Link</h4>\n<p><strong>Question:</strong> I have created a DXF link DXF using the following code:</p>\n<pre class=\"code\">\n  <span class=\"teal\">DWGImportOptions</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">DWGImportOptions</span>();\n  <span class=\"teal\">ElementId</span> linkId;\n \n  <span class=\"blue\">if</span>( doc.Link( <span class=\"maroon\">\"C:\\\\tmp\\\\test.dxf\"</span>,\n    opt, doc.ActiveView, <span class=\"blue\">out</span> linkId ) )\n  {\n    <span class=\"teal\">Element</span> e = doc.GetElement( linkId );\n    <span class=\"teal\">ImportInstance</span> i = e <span class=\"blue\">as</span> <span class=\"teal\">ImportInstance</span>;\n  }\n</pre>\n<p>Later, the DXF is modified by an external application.\n\n<p>Is it possible to programmatically force Revit to reload the link?\n\n<p>I think I could also delete the ImportInstance and create a new one, but I don't how to get the proper DWGImportOptions and DXF file path from the existing ImportInstance.</p>\n<p><strong>Answer:</strong> Yes, this can easily be achieved.\nYou can use the RevitLinkType.Unload method to unload it first, and then call RevitLinkType.Reload to reload the updated DXF file.</p>\n<p>The imported DXF file has the type of CADLinkType.\nJust as you say, you could also delete the link and import it again.</p>\n<p>You can find the imported DXF ImportInstance's original path by calling the ExternalFileReference.GetPath method, and the\nExternalFileUtils.GetExternalRefernce method will return the ImportInstance's ExternalFileReference object.</p>\n<a name=\"5\"></a>\n<h4>Retrieving Truss Family Elements</h4>\n<p><strong>Question:</strong> How can I retrieve a truss element family instance?\n\n<p><strong>Answer:</strong> This is a very basic question, answered many times over in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/getting-started-with-the-revit-api.html\">\nRevit API getting started material</a>.\n\n<p>I recommend that you take a look at that material, work through the 'My First Revit Plugin' and DevTV tutorials, install the Revit SDK, RevitLookup, RvtSamples, and then answer that question for yourself.</p>\n<p>I'll just give you one little additional hint to help get you started:</p>\n<p>Every access to a Revit database element is achieved using a filtered element collector.</p>\n<p>To retrieve all truss family instances, you could use something like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Truss );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"green\">// e is a truss family instance</span>\n  }\n</pre>\n<a name=\"6\"></a>\n<h4>Retrieval of Stair Stringer Data</h4>\n<p><strong>Question:</strong> I want to access the values of the stair stringer height and thickness properties on a stair element.\nHow can I achieve this, please?\n\n<p>I tried using the built-in parameters STAIRS_ATTR_STRINGER_THICKNESS and STAIRS_ATTR_STRINGER_HEIGTH, but the value being returned is null. I am also unable to get the family symbol of the stair element.</p>\n<p><strong>Answer:</strong> The two parameters that you are trying to access are stored on the stair type, not the stair itself.\n\n<p>The stair type is represented by the ElementType class, not FamilySymbol.\n\n<p>You can access the stair type and the two desired paramaters like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">Document</span> doc = stair.Document;\n \n  <span class=\"teal\">ElementId</span> id = stair.GetTypeId();\n \n  <span class=\"teal\">ElementType</span> type = doc.get_Element( id )\n    <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n \n  <span class=\"teal\">Parameter</span> pThick = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_THICKNESS );\n \n  <span class=\"teal\">Parameter</span> pHeight = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_HEIGHT );\n \n  <span class=\"blue\">double</span> thick = pThick.AsDouble();\n  <span class=\"blue\">double</span> height = pHeight.AsDouble();\n</pre>\n<a name=\"7\"></a>\n<h4>Storing Custom Data</h4>\n<p><strong>Response:</strong> I need more than just the path.\nI would like to retrieve other DWGImportOptions parameters as well.\nIs it possible to get them somehow?\n\n<p><strong>Answer:</strong> I don't think there is any way to retrieve all the ImportInstance's DWGImportOptions.\n\n<p>Since the DXF file was imported by your own code, you can easily work around that gap by storing the DWGImportOptions property values of interest in the ImportInstance object.\n\n<p>You can use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a>\n\n(<a href=\"http://wikihelp.autodesk.com/Revit/enu/2014/Help/3665-Developers/0135-Advanced135/0136-Storing_136/0141-Extensib141\">wiki</a>,\n<a href=\"http://thebuildingcoder.typepad.com/blog/storage\">category</a>)\n\nto store custom data on Revit elements.\n\n<p>When you use this, you can later read back the settings from the extensible storage data.\n\n<!--\n<hr>\n\n<a name=\"3\"></a>\n\n<h4>Launching Revit using Process.Start</h4>\n\n<p><strong>Question:</strong>\n\nWeird issue. I'm launching Revit from a typical Windows.Form PushButton using:\n\nSystem.Diagnostics.Process.Start(@\"C:\\Program Files\\Autodesk\\Revit Architecture 2013\\Program\\Revit.exe\");\n\nWhen Revit opens, I get the message, 'The path you have specified for the default family template files is invalid' (see: Default Templates invalid.png)\n\nIf I then click the Applications menu (Revit pulldown at top/left of Revit window), click Options and select: File Locations, all my template files are missing (see missing.png).\n\nIf I launch Revit using the delevered desktop icon this does not happen (see: not-missing.png). Is there a way to use Process() to open Revit correctly?\n\n<p><strong>Answer:</strong>\nwhen you start a process from the windows desktop icon, you also specify the start-up directory.\n\nProcess.Start also includes this possibility.\n\ntry using that.\n\nyou can also specify other environment settings.\n\nsimply ensure that all environment settings set up by Process.Start exactly match the settings generated by the windows desktop launch icon.\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0935_migrate_category",
    "header_text": "Updating a DXF Link",
    "local_header_href": "#updating-a-dxf-link",
    "chunk_text": "<h4>Updating a DXF Link</h4><p><strong>Question:</strong> I have created a DXF link DXF using the following code:</p><pre class=\"code\">\n  <span class=\"teal\">DWGImportOptions</span> opt = <span class=\"blue\">new</span> <span class=\"teal\">DWGImportOptions</span>();\n  <span class=\"teal\">ElementId</span> linkId;\n \n  <span class=\"blue\">if</span>( doc.Link( <span class=\"maroon\">\"C:\\\\tmp\\\\test.dxf\"</span>,\n    opt, doc.ActiveView, <span class=\"blue\">out</span> linkId ) )\n  {\n    <span class=\"teal\">Element</span> e = doc.GetElement( linkId );\n    <span class=\"teal\">ImportInstance</span> i = e <span class=\"blue\">as</span> <span class=\"teal\">ImportInstance</span>;\n  }\n</pre><p>Later, the DXF is modified by an external application.\n\n<p>Is it possible to programmatically force Revit to reload the link?\n\n<p>I think I could also delete the ImportInstance and create a new one, but I don't how to get the proper DWGImportOptions and DXF file path from the existing ImportInstance.</p>\n<p><strong>Answer:</strong> Yes, this can easily be achieved.\nYou can use the RevitLinkType.Unload method to unload it first, and then call RevitLinkType.Reload to reload the updated DXF file.</p>\n<p>The imported DXF file has the type of CADLinkType.\nJust as you say, you could also delete the link and import it again.</p>\n<p>You can find the imported DXF ImportInstance's original path by calling the ExternalFileReference.GetPath method, and the\nExternalFileUtils.GetExternalRefernce method will return the ImportInstance's ExternalFileReference object.</p>\n<a name=\"5\"></a>\n<h4>Retrieving Truss Family Elements</h4>\n<p><strong>Question:</strong> How can I retrieve a truss element family instance?\n\n<p><strong>Answer:</strong> This is a very basic question, answered many times over in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/getting-started-with-the-revit-api.html\">\nRevit API getting started material</a>.\n\n<p>I recommend that you take a look at that material, work through the 'My First Revit Plugin' and DevTV tutorials, install the Revit SDK, RevitLookup, RvtSamples, and then answer that question for yourself.</p>\n<p>I'll just give you one little additional hint to help get you started:</p>\n<p>Every access to a Revit database element is achieved using a filtered element collector.</p>\n<p>To retrieve all truss family instances, you could use something like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Truss );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"green\">// e is a truss family instance</span>\n  }\n</pre>\n<a name=\"6\"></a>\n<h4>Retrieval of Stair Stringer Data</h4>\n<p><strong>Question:</strong> I want to access the values of the stair stringer height and thickness properties on a stair element.\nHow can I achieve this, please?\n\n<p>I tried using the built-in parameters STAIRS_ATTR_STRINGER_THICKNESS and STAIRS_ATTR_STRINGER_HEIGTH, but the value being returned is null. I am also unable to get the family symbol of the stair element.</p>\n<p><strong>Answer:</strong> The two parameters that you are trying to access are stored on the stair type, not the stair itself.\n\n<p>The stair type is represented by the ElementType class, not FamilySymbol.\n\n<p>You can access the stair type and the two desired paramaters like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">Document</span> doc = stair.Document;\n \n  <span class=\"teal\">ElementId</span> id = stair.GetTypeId();\n \n  <span class=\"teal\">ElementType</span> type = doc.get_Element( id )\n    <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n \n  <span class=\"teal\">Parameter</span> pThick = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_THICKNESS );\n \n  <span class=\"teal\">Parameter</span> pHeight = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_HEIGHT );\n \n  <span class=\"blue\">double</span> thick = pThick.AsDouble();\n  <span class=\"blue\">double</span> height = pHeight.AsDouble();\n</pre>\n<a name=\"7\"></a>\n<h4>Storing Custom Data</h4>\n<p><strong>Response:</strong> I need more than just the path.\nI would like to retrieve other DWGImportOptions parameters as well.\nIs it possible to get them somehow?\n\n<p><strong>Answer:</strong> I don't think there is any way to retrieve all the ImportInstance's DWGImportOptions.\n\n<p>Since the DXF file was imported by your own code, you can easily work around that gap by storing the DWGImportOptions property values of interest in the ImportInstance object.\n\n<p>You can use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a>\n\n(<a href=\"http://wikihelp.autodesk.com/Revit/enu/2014/Help/3665-Developers/0135-Advanced135/0136-Storing_136/0141-Extensib141\">wiki</a>,\n<a href=\"http://thebuildingcoder.typepad.com/blog/storage\">category</a>)\n\nto store custom data on Revit elements.\n\n<p>When you use this, you can later read back the settings from the extensible storage data.\n\n<!--\n<hr>\n\n<a name=\"3\"></a>\n\n<h4>Launching Revit using Process.Start</h4>\n\n<p><strong>Question:</strong>\n\nWeird issue. I'm launching Revit from a typical Windows.Form PushButton using:\n\nSystem.Diagnostics.Process.Start(@\"C:\\Program Files\\Autodesk\\Revit Architecture 2013\\Program\\Revit.exe\");\n\nWhen Revit opens, I get the message, 'The path you have specified for the default family template files is invalid' (see: Default Templates invalid.png)\n\nIf I then click the Applications menu (Revit pulldown at top/left of Revit window), click Options and select: File Locations, all my template files are missing (see missing.png).\n\nIf I launch Revit using the delevered desktop icon this does not happen (see: not-missing.png). Is there a way to use Process() to open Revit correctly?\n\n<p><strong>Answer:</strong>\nwhen you start a process from the windows desktop icon, you also specify the start-up directory.\n\nProcess.Start also includes this possibility.\n\ntry using that.\n\nyou can also specify other environment settings.\n\nsimply ensure that all environment settings set up by Process.Start exactly match the settings generated by the windows desktop launch icon.\n-->\n</p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0935_migrate_category",
    "header_text": "Retrieving Truss Family Elements",
    "local_header_href": "#retrieving-truss-family-elements",
    "chunk_text": "<h4>Retrieving Truss Family Elements</h4><p><strong>Question:</strong> How can I retrieve a truss element family instance?\n\n<p><strong>Answer:</strong> This is a very basic question, answered many times over in the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/getting-started-with-the-revit-api.html\">\nRevit API getting started material</a>.\n\n<p>I recommend that you take a look at that material, work through the 'My First Revit Plugin' and DevTV tutorials, install the Revit SDK, RevitLookup, RvtSamples, and then answer that question for yourself.</p>\n<p>I'll just give you one little additional hint to help get you started:</p>\n<p>Every access to a Revit database element is achieved using a filtered element collector.</p>\n<p>To retrieve all truss family instances, you could use something like this:</p>\n<pre class=\"code\">\n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n      .OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">FamilyInstance</span> ) )\n      .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Truss );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> collector )\n  {\n    <span class=\"green\">// e is a truss family instance</span>\n  }\n</pre>\n<a name=\"6\"></a>\n<h4>Retrieval of Stair Stringer Data</h4>\n<p><strong>Question:</strong> I want to access the values of the stair stringer height and thickness properties on a stair element.\nHow can I achieve this, please?\n\n<p>I tried using the built-in parameters STAIRS_ATTR_STRINGER_THICKNESS and STAIRS_ATTR_STRINGER_HEIGTH, but the value being returned is null. I am also unable to get the family symbol of the stair element.</p>\n<p><strong>Answer:</strong> The two parameters that you are trying to access are stored on the stair type, not the stair itself.\n\n<p>The stair type is represented by the ElementType class, not FamilySymbol.\n\n<p>You can access the stair type and the two desired paramaters like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">Document</span> doc = stair.Document;\n \n  <span class=\"teal\">ElementId</span> id = stair.GetTypeId();\n \n  <span class=\"teal\">ElementType</span> type = doc.get_Element( id )\n    <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n \n  <span class=\"teal\">Parameter</span> pThick = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_THICKNESS );\n \n  <span class=\"teal\">Parameter</span> pHeight = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_HEIGHT );\n \n  <span class=\"blue\">double</span> thick = pThick.AsDouble();\n  <span class=\"blue\">double</span> height = pHeight.AsDouble();\n</pre>\n<a name=\"7\"></a>\n<h4>Storing Custom Data</h4>\n<p><strong>Response:</strong> I need more than just the path.\nI would like to retrieve other DWGImportOptions parameters as well.\nIs it possible to get them somehow?\n\n<p><strong>Answer:</strong> I don't think there is any way to retrieve all the ImportInstance's DWGImportOptions.\n\n<p>Since the DXF file was imported by your own code, you can easily work around that gap by storing the DWGImportOptions property values of interest in the ImportInstance object.\n\n<p>You can use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a>\n\n(<a href=\"http://wikihelp.autodesk.com/Revit/enu/2014/Help/3665-Developers/0135-Advanced135/0136-Storing_136/0141-Extensib141\">wiki</a>,\n<a href=\"http://thebuildingcoder.typepad.com/blog/storage\">category</a>)\n\nto store custom data on Revit elements.\n\n<p>When you use this, you can later read back the settings from the extensible storage data.\n\n<!--\n<hr>\n\n<a name=\"3\"></a>\n\n<h4>Launching Revit using Process.Start</h4>\n\n<p><strong>Question:</strong>\n\nWeird issue. I'm launching Revit from a typical Windows.Form PushButton using:\n\nSystem.Diagnostics.Process.Start(@\"C:\\Program Files\\Autodesk\\Revit Architecture 2013\\Program\\Revit.exe\");\n\nWhen Revit opens, I get the message, 'The path you have specified for the default family template files is invalid' (see: Default Templates invalid.png)\n\nIf I then click the Applications menu (Revit pulldown at top/left of Revit window), click Options and select: File Locations, all my template files are missing (see missing.png).\n\nIf I launch Revit using the delevered desktop icon this does not happen (see: not-missing.png). Is there a way to use Process() to open Revit correctly?\n\n<p><strong>Answer:</strong>\nwhen you start a process from the windows desktop icon, you also specify the start-up directory.\n\nProcess.Start also includes this possibility.\n\ntry using that.\n\nyou can also specify other environment settings.\n\nsimply ensure that all environment settings set up by Process.Start exactly match the settings generated by the windows desktop launch icon.\n-->\n</p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0935_migrate_category",
    "header_text": "Retrieval of Stair Stringer Data",
    "local_header_href": "#retrieval-of-stair-stringer-data",
    "chunk_text": "<h4>Retrieval of Stair Stringer Data</h4><p><strong>Question:</strong> I want to access the values of the stair stringer height and thickness properties on a stair element.\nHow can I achieve this, please?\n\n<p>I tried using the built-in parameters STAIRS_ATTR_STRINGER_THICKNESS and STAIRS_ATTR_STRINGER_HEIGTH, but the value being returned is null. I am also unable to get the family symbol of the stair element.</p>\n<p><strong>Answer:</strong> The two parameters that you are trying to access are stored on the stair type, not the stair itself.\n\n<p>The stair type is represented by the ElementType class, not FamilySymbol.\n\n<p>You can access the stair type and the two desired paramaters like this:\n\n<pre class=\"code\">\n  <span class=\"teal\">Document</span> doc = stair.Document;\n \n  <span class=\"teal\">ElementId</span> id = stair.GetTypeId();\n \n  <span class=\"teal\">ElementType</span> type = doc.get_Element( id )\n    <span class=\"blue\">as</span> <span class=\"teal\">ElementType</span>;\n \n  <span class=\"teal\">Parameter</span> pThick = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_THICKNESS );\n \n  <span class=\"teal\">Parameter</span> pHeight = type.get_Parameter(\n    <span class=\"teal\">BuiltInParameter</span>.STAIRS_ATTR_STRINGER_HEIGHT );\n \n  <span class=\"blue\">double</span> thick = pThick.AsDouble();\n  <span class=\"blue\">double</span> height = pHeight.AsDouble();\n</pre>\n<a name=\"7\"></a>\n<h4>Storing Custom Data</h4>\n<p><strong>Response:</strong> I need more than just the path.\nI would like to retrieve other DWGImportOptions parameters as well.\nIs it possible to get them somehow?\n\n<p><strong>Answer:</strong> I don't think there is any way to retrieve all the ImportInstance's DWGImportOptions.\n\n<p>Since the DXF file was imported by your own code, you can easily work around that gap by storing the DWGImportOptions property values of interest in the ImportInstance object.\n\n<p>You can use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a>\n\n(<a href=\"http://wikihelp.autodesk.com/Revit/enu/2014/Help/3665-Developers/0135-Advanced135/0136-Storing_136/0141-Extensib141\">wiki</a>,\n<a href=\"http://thebuildingcoder.typepad.com/blog/storage\">category</a>)\n\nto store custom data on Revit elements.\n\n<p>When you use this, you can later read back the settings from the extensible storage data.\n\n<!--\n<hr>\n\n<a name=\"3\"></a>\n\n<h4>Launching Revit using Process.Start</h4>\n\n<p><strong>Question:</strong>\n\nWeird issue. I'm launching Revit from a typical Windows.Form PushButton using:\n\nSystem.Diagnostics.Process.Start(@\"C:\\Program Files\\Autodesk\\Revit Architecture 2013\\Program\\Revit.exe\");\n\nWhen Revit opens, I get the message, 'The path you have specified for the default family template files is invalid' (see: Default Templates invalid.png)\n\nIf I then click the Applications menu (Revit pulldown at top/left of Revit window), click Options and select: File Locations, all my template files are missing (see missing.png).\n\nIf I launch Revit using the delevered desktop icon this does not happen (see: not-missing.png). Is there a way to use Process() to open Revit correctly?\n\n<p><strong>Answer:</strong>\nwhen you start a process from the windows desktop icon, you also specify the start-up directory.\n\nProcess.Start also includes this possibility.\n\ntry using that.\n\nyou can also specify other environment settings.\n\nsimply ensure that all environment settings set up by Process.Start exactly match the settings generated by the windows desktop launch icon.\n-->\n</p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0935_migrate_category",
    "header_text": "Storing Custom Data",
    "local_header_href": "#storing-custom-data",
    "chunk_text": "<h4>Storing Custom Data</h4><p><strong>Response:</strong> I need more than just the path.\nI would like to retrieve other DWGImportOptions parameters as well.\nIs it possible to get them somehow?\n\n<p><strong>Answer:</strong> I don't think there is any way to retrieve all the ImportInstance's DWGImportOptions.\n\n<p>Since the DXF file was imported by your own code, you can easily work around that gap by storing the DWGImportOptions property values of interest in the ImportInstance object.\n\n<p>You can use\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/04/extensible-storage.html\">\nextensible storage</a>\n\n(<a href=\"http://wikihelp.autodesk.com/Revit/enu/2014/Help/3665-Developers/0135-Advanced135/0136-Storing_136/0141-Extensib141\">wiki</a>,\n<a href=\"http://thebuildingcoder.typepad.com/blog/storage\">category</a>)\n\nto store custom data on Revit elements.\n\n<p>When you use this, you can later read back the settings from the extensible storage data.\n\n<!--\n<hr>\n\n<a name=\"3\"></a>\n\n<h4>Launching Revit using Process.Start</h4>\n\n<p><strong>Question:</strong>\n\nWeird issue. I'm launching Revit from a typical Windows.Form PushButton using:\n\nSystem.Diagnostics.Process.Start(@\"C:\\Program Files\\Autodesk\\Revit Architecture 2013\\Program\\Revit.exe\");\n\nWhen Revit opens, I get the message, 'The path you have specified for the default family template files is invalid' (see: Default Templates invalid.png)\n\nIf I then click the Applications menu (Revit pulldown at top/left of Revit window), click Options and select: File Locations, all my template files are missing (see missing.png).\n\nIf I launch Revit using the delevered desktop icon this does not happen (see: not-missing.png). Is there a way to use Process() to open Revit correctly?\n\n<p><strong>Answer:</strong>\nwhen you start a process from the windows desktop icon, you also specify the start-up directory.\n\nProcess.Start also includes this possibility.\n\ntry using that.\n\nyou can also specify other environment settings.\n\nsimply ensure that all environment settings set up by Process.Start exactly match the settings generated by the windows desktop launch icon.\n-->\n</p></p></p></p></p>"
  }
]