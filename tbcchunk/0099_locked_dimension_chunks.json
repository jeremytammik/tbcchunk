[
  {
    "original_filename": "0099_locked_dimension",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<style>\n.blue { color: blue; }\n.teal { color: teal; }\n.maroon { color: maroon; }\n.green { color: green; }\n.gray { color: gray; }\n</style>"
  },
  {
    "original_filename": "0099_locked_dimension",
    "header_text": "Locked Dimensioning",
    "local_header_href": "#locked-dimensioning",
    "chunk_text": "<h3>Locked Dimensioning</h3><p>Here is a little exploration I embarked upon prompted by a\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/bolt-out-of-the-red.html#comments\">\nquestion</a>\n\nfrom\n\n<a href=\"http://forums.augi.com/showthread.php?t=84766\">\nPierre-Nelson Navarra</a>.\nIt starts off as a rather esoteric search for connections between objects that have no API-accessible data, but ends up with a surprising twist, the ability to unlock all dimensions through the API.</p><p><strong>Question:</strong>\nIs there a way to determine if a dimension element is locked or not, and is it possible to unlock it through the API?</p><p><strong>Answer:</strong>\nTo make a short answer long, here is a description of the exploration this prompted me to undertake.</p><p>I had a quick look at a dimension element. \nI made heavy use of \n\n<a href=\"http://download.autodesk.com/media/adn/RvtMgdDbg2009_0429_2008.zip\">\nRvtMgdDbg</a>,\n\nthe most important tool for examining the Revit database, its elements, their properties and parameters, and the relationships between elements.\nAnother important tool that I use a lot is the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/files/rac_labs_20081117.zip\">\nRevit API introduction labs</a>\n\nbuilt-in parameter checker.\nOne thing I noted when examining the dimension element using the latter is the built-in parameter ELEMENT_LOCKED_PARAM, which is a read-write Boolean value and initially set to false. \nUnfortunately, when I lock the dimension, it still remains false, so this does not give us the information we are looking for. \nThe 'Revit 2009 API Developer Guide' has nothing to say about this parameter either.</p><p>I then examined in detail what elements are added to the database by inserting a dimensioning element and locking it. Adding a dimension introduces one new element into the database:</p><pre>\ndiff RevitElementsBeforeDimension.txt RevitElementsAfterDimension.txt\n2259a2260\n&gt; Id=130751; Class=Dimension; Category=Dimensions; Name=Linear - 3mm Arial\n</pre><p>I use the Revit API intro Lab2_1_Elements to examine what elements are added, as described in \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/11/exploring-element-parameters.html\">\nexploring element parameters</a>.</p><p>Locking the dimension adds another element:</p><pre>\ndiff RevitElementsAfterDimension.txt RevitElements.txt\n2260a2261\n&gt; Id=130770; Class=Dimension; Category=Constraints; Name=Linear Dimension Style\n</pre><p>So the locking information is stored in a separate element.\nI thought it might be might be possible to find the connection between these two elements and use that to determine the locked status of the dimension element.\nI also hoped that an analysis of the underlying geometry of the two elements would discover that one of them is a lock constraint for the other.</p><p>If I remove the lock again, the constraint element id remains in the file but is invalid.\nPutting the lock back in again removes the invalid constraint element and adds a new one with a new element id:</p><pre>\ndiff RevitElementsAfterDimension.txt RevitElements.txt\n2260a2261\n&gt; Id=130813; Class=Dimension; Category=Constraints; Name=Linear Dimension Style\n</pre><p>The constraint element has almost no accessible data, but it does have a valid class, category and name.\nIt has a Location property, but we cannot access its internal data either.\nAs a Dimension instance, it also has a Curve property and a ReferenceArray.\nI tried to use these to determine that this constraint matches the existing dimension and is locking it.</p><p>Here is the code for the Execute method of an external command that I used to explore this in a model with exactly one locked dimension in it, so that the dimension element 'd' and the constraint 'c' are both well defined:</p><pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">CreationFilter</span> cf = app.Create.Filter;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n \n<span class=\"teal\">Filter</span> f1 = cf.NewCategoryFilter(\n  <span class=\"teal\">BuiltInCategory</span>.OST_Dimensions );\n \n<span class=\"teal\">Filter</span> f2 = cf.NewTypeFilter(\n  <span class=\"blue\">typeof</span>( <span class=\"teal\">Dimension</span> ) );\n \n<span class=\"teal\">Filter</span> f = cf.NewLogicAndFilter( f1, f2 );\n \n<span class=\"teal\">ElementIterator</span> iter = doc.get_Elements( f );\n \n<span class=\"teal\">Dimension</span> d = <span class=\"blue\">null</span>;\n \n<span class=\"blue\">while</span>( iter.MoveNext() )\n{\n  d = iter.Current <span class=\"blue\">as</span> <span class=\"teal\">Dimension</span>;\n \n  <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != d,\n    <span class=\"maroon\">\"expected to find a dimension element\"</span> );\n \n  <span class=\"blue\">break</span>;\n}\n \nf1 = cf.NewCategoryFilter(\n  <span class=\"teal\">BuiltInCategory</span>.OST_Constraints );\n \nf = cf.NewLogicAndFilter( f1, f2 );\n \niter = doc.get_Elements( f );\n \n<span class=\"teal\">Dimension</span> c = <span class=\"blue\">null</span>;\n \n<span class=\"blue\">while</span>( iter.MoveNext() )\n{\n  c = iter.Current <span class=\"blue\">as</span> <span class=\"teal\">Dimension</span>;\n \n  <span class=\"teal\">Debug</span>.Assert( <span class=\"blue\">null</span> != c,\n    <span class=\"maroon\">\"expected to find a constraint element\"</span> );\n \n  <span class=\"blue\">break</span>;\n}\n \n<span class=\"green\">// both locations have no valid information:</span>\n<span class=\"teal\">Location</span> locc = c.Location;\n<span class=\"teal\">Location</span> locd = d.Location;\n \n<span class=\"green\">// both lines have no valid information:</span>\n<span class=\"teal\">Line</span> linc = c.Curve <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n<span class=\"teal\">Line</span> lind = d.Curve <span class=\"blue\">as</span> <span class=\"teal\">Line</span>;\n \n<span class=\"green\">// this throws an exception:</span>\n<span class=\"green\">//XYZ pc = linc.get_EndPoint( 0 ); </span>\n<span class=\"green\">//XYZ qc = linc.get_EndPoint( 1 );</span>\n<span class=\"green\">//XYZ pd = lind.get_EndPoint( 0 );</span>\n<span class=\"green\">//XYZ qd = lind.get_EndPoint( 1 );</span>\n \n<span class=\"green\">// this cast returns null:</span>\n<span class=\"teal\">LocationCurve</span> locc2 = c.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n<span class=\"teal\">LocationCurve</span> locd2 = d.Location <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n<span class=\"teal\">ReferenceArray</span> rc = c.References;\n<span class=\"teal\">ReferenceArray</span> rd = d.References;\n \n<span class=\"blue\">if</span>( rc.Size == rd.Size )\n{\n  <span class=\"teal\">ReferenceArrayIterator</span> ic = rc.ForwardIterator();\n  <span class=\"teal\">ReferenceArrayIterator</span> id = rd.ForwardIterator();\n  <span class=\"blue\">while</span>( ic.MoveNext() &amp;&amp; id.MoveNext() )\n  {\n    <span class=\"teal\">Reference</span> r1 = ic.Current <span class=\"blue\">as</span> <span class=\"teal\">Reference</span>;\n    <span class=\"teal\">Reference</span> r2 = id.Current <span class=\"blue\">as</span> <span class=\"teal\">Reference</span>;\n    <span class=\"blue\">if</span>( r1.Equals( r2 ) )\n    {\n      <span class=\"green\">// this never happens:</span>\n      <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"Equal\"</span> );\n    }\n  }\n}\n<span class=\"blue\">return</span> <span class=\"teal\">CmdResult</span>.Failed;\n</pre><p>Unfortunately, none of the attempts to read some valid geometrical information return anything useful.\nI also explored the parameters of both elements, and found no link there either.\nThe constraint has no official parameters at all, and the hidden ones provide no clue.</p><p>They both have a reference array with two elements each.\nThe elements in the reference arrays do not compare equal, and trying to explore their innards leads us to an undocumented Pick object which we cannot explore further.</p><p>Even if this exploration in Revit 2009 did not lead us anywhere useful, we still discovered some interesting background information on dimensioning and locking in Revit.</p><p>And here come two pieces of good news at the end:</p><p>First, in the Revit 2010 API, you can simply use the new properties Dimension.IsLocked and DimensionSegment.IsLocked.</p>"
  },
  {
    "original_filename": "0099_locked_dimension",
    "header_text": "How to Unlock all Dimensions",
    "local_header_href": "#how-to-unlock-all-dimensions",
    "chunk_text": "<h4>How to Unlock all Dimensions</h4><p>Later, Pierre followed up with a useful new result and an additional question:</p><blockquote>\n<p>I've got the code now to get all constraints.\nWhen I delete them, the effect is that the dimensions are unlocked.\nThat's good.</p>\n<p>I'd like to store the original constraints before deleting them in order to relock the dimensions afterwards;\ndo you think that is possible?</p>\n</blockquote><p>I am glad that we at least discovered a possibility to unlock the locked dimensions.\nUnfortunately, I cannot think of any way to store the constraints prior to deleting them, since we have no access to their internal data.\nMaybe they could be copied into a different database beforehand?\nBut then it might be necessary to copy additional objects as well to preserve the associativity, and I cannot see a way to achieve this.\nOr just move them away somewhere where they do no harm instead of deleting them to unlock, and then move them back again to the original position to lock again?</p>"
  }
]