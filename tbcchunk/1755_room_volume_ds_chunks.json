[
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- https://forums.autodesk.com/t5/revit-api-forum/how-to-get-the-value-of-the-property-quot-loss-method-quot/m-p/8816013#M39043\n\n\n\ntwitter:\n\nGenerate DirectShape elements to represent room volumes in the #RevitAPI @AutodeskForge @AutodeskRevit #bim #DynamoBim #ForgeDevCon http://bit.ly/roomvolumedirectshape\n\nYesterday, I implemented a new add-in, RoomVolumeDirectShape, that creates <code>DirectShape</code> elements representing the volumes of all the rooms\n&ndash; Request to display room volumes in Forge SVF file\n&ndash; RoomVolumeDirectShape functionality\n&ndash; Retrieving all element properties\n&ndash; Converting a .NET dictionary to JSON\n&ndash; Generating <code>DirectShape</code> from <code>ClosedShell</code>\n&ndash; Complete external command class <code>Execute</code> method\n&ndash; Sample model and results\n&ndash; Challenges encountered underway\n&ndash; Cherry BIM Services\n&ndash; On the value of the \"Loss Method\" property\n&ndash; AI-generated talking head models...\n\nlinkedin:\n\nGenerate DirectShape elements to represent room volumes in the #RevitAPI\n\nhttp://bit.ly/roomvolumedirectshape\n\nYesterday, I implemented a new add-in, RoomVolumeDirectShape, that creates DirectShape elements representing the volumes of all the rooms:\n\n- Request to display room volumes in Forge SVF file\n- RoomVolumeDirectShape functionality\n- Retrieving all element properties\n- Converting a .NET dictionary to JSON\n- Generating DirectShape from ClosedShell\n- Complete external command class Execute method\n- Sample model and results\n- Challenges encountered underway\n- Cherry BIM Services\n- On the value of the \"Loss Method\" property\n- AI-generated talking head models...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\n-->"
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "DirectShape Element to Represent Room Volume",
    "local_header_href": "#directshape-element-to-represent-room-volume",
    "chunk_text": "### DirectShape Element to Represent Room Volume\n\nYesterday, I implemented a new add-in, RoomVolumeDirectShape, that creates `DirectShape` elements representing the volumes of all the rooms.\n\nI'll also mention some challenges encountered en route, some free add-ins shared by Cherry BIM Services, an insight in the meaning of the MEP fitting `Loss Method` property, and AI-generated talking head models:\n\n- [Request to display room volumes in Forge SVF file](#2) \n- [RoomVolumeDirectShape functionality](#3) \n- [Retrieving all element properties](#4) \n- [Converting a .NET dictionary to JSON](#5) \n- [Generating `DirectShape` from `ClosedShell`](#6) \n- [Complete external command class `Execute` method](#7) \n- [Sample model and results](#8) \n- [Challenges encountered underway](#9) \n    - [Licensing system error 22](#9.1) \n    - [Valid direct shape categories](#9.2) \n    - [Direct shape phase and visibility](#9.3) \n- [Cherry BIM Services](#10) \n- [On the value of the \"Loss Method\" property](#11) \n- [AI-generated talking head models](#12)"
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Request to Display Room Volumes in Forge SVF File",
    "local_header_href": "#2",
    "chunk_text": "####<a name=\"2\"></a> Request to Display Room Volumes in Forge SVF File\n\nThe [RoomVolumeDirectShape add-in](https://github.com/jeremytammik/RoomVolumeDirectShape) was\ninspired by the following request:\n\n<!--\nfrom Mustapha Bismi of [Vinci Facilities](https://www.vinci-facilities.com)\nfor *Génération des volumes Revit*:\n\nAujourd’hui, notre workflow consiste à prendre la géométrie des pièces Revit, générer des fichiers SAT, puis recréer des volumes Revit à partir de cette géométrie.\n\nDans le cadre d’une automatisation, c’est pas terrible terrible.\n-->\n\nThe context: We are building digital twins out of BIM data. To do so, we use Revit, Dynamo, and Forge.\n\n<!-- You can check out what we are doing with that on our [twinops website](https://www.twinops.com). -->\n\nThe issue: We rely on the rooms in Revit to perform a bunch of tasks (reassign equipment localization, rebuild a navigation tree, and so on).\n\nUnfortunately, these rooms are not displayed in the Revit 3D view.\n\nTherefore, they are nowhere to be found in the Forge SVF file.\n\nOur (so-so) solution: uses Dynamo to extract the room geometry and build Revit volumes.\n\nIt works, but it is:\n\n- Not very robust: Some rooms has to be recreated manually, Dynamo crashes, geometry with invalid faces is produced, etc.\n- Not very fast: The actual script exports SAT files and reimports them.\n- Manual: Obviously, and also tedious and error-prone.\n\nThe whole process amounts to several hours of manual work.\n\nWe want to fix this.\n\nOur goal: A robust implementation that will get rid of Dynamo, automate the process in Revit, and in the end, run that in a Forge Design Automation process.\n\nThe ideal way forward is exactly what you describe: A native C# Revit API that find the rooms, creates a direct shape volume for them, and copy their properties to that.\n\nNo intermediate formats, no UI, just straight automation work."
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "RoomVolumeDirectShape Functionality",
    "local_header_href": "#3",
    "chunk_text": "####<a name=\"3\"></a> RoomVolumeDirectShape Functionality\n\nFulfilling this request, I implemented a\nnew [RoomVolumeDirectShape add-in](https://github.com/jeremytammik/RoomVolumeDirectShape) that\nperforms the following simple steps:\n\n- Retrieve all rooms in the BIM using a filtered element collector\n- For each room:\n- Query the room for its closed shell using\nthe [ClosedShell API call](https://www.revitapidocs.com/2020/1a510aef-63f6-4d32-c0ff-a8071f5e23b8.htm)\n- Generate a [DirectShape element](https://www.revitapidocs.com/2020/bfbd137b-c2c2-71bb-6f4a-992d0dcf6ea8.htm) representing the room volume geometry\n- Query the room for all its properties, stored in parameters\n(cf., [getting all parameter values](https://thebuildingcoder.typepad.com/blog/2018/05/getting-all-parameter-values.html)\nand [retrieving parameter values from an element](https://thebuildingcoder.typepad.com/blog/2018/05/getting-all-parameter-values.html#5))\n- Generate a JSON string representing a dictionary of the room properties\n- Store the room property JSON string in the `DirectShape` element `Comment` property"
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Retrieving All Element Properties",
    "local_header_href": "#4",
    "chunk_text": "####<a name=\"4\"></a> Retrieving All Element Properties\n\nThe `GetParamValues` method retrieves and returns all the element parameter values in a dictionary mapping parameter names to the corresponding values.\n\nFor each entry, it also appends a single-character indicator of the parameter storage type to the key.\n\nIt makes use of two helper methods:\n\n- `ParameterStorageTypeChar`, to return a key character for each storage type\n- `ParameterToString`, to retrieve the parameter value as a string\n\n<pre class=\"code\">\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;parameter&nbsp;storage&nbsp;type&nbsp;abbreviation</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">char</span>&nbsp;ParameterStorageTypeChar(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;p&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;p&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentNullException</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;p&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;expected&nbsp;non-null&nbsp;parameter&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">char</span>&nbsp;abbreviation&nbsp;=&nbsp;<span style=\"color:#a31515;\">&#39;?&#39;</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">switch</span>(&nbsp;p.StorageType&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.Double:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abbreviation&nbsp;=&nbsp;<span style=\"color:#a31515;\">&#39;r&#39;</span>;&nbsp;<span style=\"color:green;\">//&nbsp;real&nbsp;number</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.Integer:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abbreviation&nbsp;=&nbsp;<span style=\"color:#a31515;\">&#39;n&#39;</span>;&nbsp;<span style=\"color:green;\">//&nbsp;integer&nbsp;number</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.String:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abbreviation&nbsp;=&nbsp;<span style=\"color:#a31515;\">&#39;s&#39;</span>;&nbsp;<span style=\"color:green;\">//&nbsp;string</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.ElementId:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abbreviation&nbsp;=&nbsp;<span style=\"color:#a31515;\">&#39;e&#39;</span>;&nbsp;<span style=\"color:green;\">//&nbsp;element&nbsp;id</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.None:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentOutOfRangeException</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;p&quot;</span>,&nbsp;<span style=\"color:#a31515;\">&quot;expected&nbsp;valid&nbsp;parameter&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;storage&nbsp;type,&nbsp;not&nbsp;&#39;None&#39;&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;abbreviation;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;parameter&nbsp;value&nbsp;formatted&nbsp;as&nbsp;string</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;ParameterToString(&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;p&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;s&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;null&quot;</span>;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;p&nbsp;!=&nbsp;<span style=\"color:blue;\">null</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">switch</span>(&nbsp;p.StorageType&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.Double:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;p.AsDouble().ToString(&nbsp;<span style=\"color:#a31515;\">&quot;0.##&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.Integer:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;p.AsInteger().ToString();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.String:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;p.AsString();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.ElementId:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;p.AsElementId().IntegerValue.ToString();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">case</span>&nbsp;<span style=\"color:#2b91af;\">StorageType</span>.None:\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;none&quot;</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">break</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;s;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;all&nbsp;the&nbsp;element&nbsp;parameter&nbsp;values&nbsp;in&nbsp;a</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;dictionary&nbsp;mapping&nbsp;parameter&nbsp;names&nbsp;to&nbsp;values</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;&nbsp;GetParamValues(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Two&nbsp;choices:&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Element.Parameters&nbsp;property&nbsp;--&nbsp;Retrieves&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;a&nbsp;set&nbsp;containing&nbsp;all&nbsp;the&nbsp;parameters.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;GetOrderedParameters&nbsp;method&nbsp;--&nbsp;Gets&nbsp;the&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;visible&nbsp;parameters&nbsp;in&nbsp;order.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//IList&lt;Parameter&gt;&nbsp;ps&nbsp;=&nbsp;e.GetOrderedParameters();</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ParameterSet</span>&nbsp;pset&nbsp;=&nbsp;e.Parameters;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;&nbsp;d\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;(&nbsp;pset.Size&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;p&nbsp;<span style=\"color:blue;\">in</span>&nbsp;pset&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;AsValueString&nbsp;displays&nbsp;the&nbsp;value&nbsp;as&nbsp;the&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;user&nbsp;sees&nbsp;it.&nbsp;In&nbsp;some&nbsp;cases,&nbsp;the&nbsp;underlying</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;database&nbsp;value&nbsp;returned&nbsp;by&nbsp;AsInteger,&nbsp;AsDouble,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;etc.,&nbsp;may&nbsp;be&nbsp;more&nbsp;relevant,&nbsp;as&nbsp;done&nbsp;by&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;ParameterToString</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;key&nbsp;=&nbsp;<span style=\"color:blue;\">string</span>.Format(&nbsp;<span style=\"color:#a31515;\">&quot;{0}({1})&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.Definition.Name,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ParameterStorageTypeChar(&nbsp;p&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;val&nbsp;=&nbsp;ParameterToString(&nbsp;p&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;d.ContainsKey(&nbsp;key&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;d[key]&nbsp;!=&nbsp;val&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d[key]&nbsp;+=&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;|&nbsp;&quot;</span>&nbsp;+&nbsp;val;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">else</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d.Add(&nbsp;key,&nbsp;val&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;d;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>"
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Converting a .NET Dictionary to JSON",
    "local_header_href": "#5",
    "chunk_text": "####<a name=\"5\"></a> Converting a .NET Dictionary to JSON\n\n`FormatDictAsJson` converts the .NET dictionary of element properties to a JSON-formatted string:\n\n<pre class=\"code\">\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;a&nbsp;JSON&nbsp;string&nbsp;representing&nbsp;a&nbsp;dictionary</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;mapping&nbsp;string&nbsp;key&nbsp;to&nbsp;string&nbsp;value.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;FormatDictAsJson(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;&nbsp;d&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;keys&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;(&nbsp;d.Keys&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.Sort();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;key_vals&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.Count&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">string</span>&nbsp;key&nbsp;<span style=\"color:blue;\">in</span>&nbsp;keys&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key_vals.Add(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>.Format(&nbsp;<span style=\"color:#a31515;\">&quot;\\&quot;{0}\\&quot;&nbsp;:&nbsp;\\&quot;{1}\\&quot;&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key,&nbsp;d[key]&nbsp;)&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#a31515;\">&quot;{&quot;</span>&nbsp;+&nbsp;<span style=\"color:blue;\">string</span>.Join(&nbsp;<span style=\"color:#a31515;\">&quot;,&nbsp;&quot;</span>,&nbsp;key_vals&nbsp;)&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;}&quot;</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>"
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Generating DirectShape from ClosedShell",
    "local_header_href": "#6",
    "chunk_text": "####<a name=\"6\"></a> Generating DirectShape from ClosedShell\n\nWith the element parameter property retrieval and JSON formatting helper methods in place, very little remains to be done.\n\nWe gather all the rooms in the BIM using a filtered element collector, aware of the fact that the `Room` class only exists in the Revit API, not internally in Revit.\n\nThe filtered element collector therefore has to retrieve `SpatialElement` objects instead and use .NET post-processing to extract the rooms,\ncf. [accessing room data](http://thebuildingcoder.typepad.com/blog/2011/11/accessing-room-data.html).\n\nOnce we have the rooms, we can process each one as follows:\n\n- Retrieve room volume from `ClosedShell`\n- Retrieve room properties\n- Format properties into JSON string\n- Create direct shape\n- Set its geometry to the room volume\n- Set its application data id to the room's `UniqueId`\n- Set its name to contain the room name\n- Store the room property dictionary in its comment parameter\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;geo&nbsp;=&nbsp;r.ClosedShell;\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;&nbsp;param_values\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;GetParamValues(&nbsp;r&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;json&nbsp;=&nbsp;FormatDictAsJson(&nbsp;param_values&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">DirectShape</span>&nbsp;ds&nbsp;=&nbsp;<span style=\"color:#2b91af;\">DirectShape</span>.CreateElement(\n&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;_id_category_for_direct_shape&nbsp;);\n \n&nbsp;&nbsp;ds.ApplicationId&nbsp;=&nbsp;id_addin;\n&nbsp;&nbsp;ds.ApplicationDataId&nbsp;=&nbsp;r.UniqueId;\n&nbsp;&nbsp;ds.SetShape(&nbsp;geo.ToList&lt;<span style=\"color:#2b91af;\">GeometryObject</span>&gt;()&nbsp;);\n&nbsp;&nbsp;ds.get_Parameter(&nbsp;_bip_properties&nbsp;).Set(&nbsp;json&nbsp;);\n&nbsp;&nbsp;ds.Name&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Room&nbsp;volume&nbsp;for&nbsp;&quot;</span>&nbsp;+&nbsp;r.Name;\n</pre>"
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Complete External Command Class Execute Method",
    "local_header_href": "#7",
    "chunk_text": "####<a name=\"7\"></a> Complete External Command Class Execute Method\n\nFor the sake of completeness, here is the entire external command class and execute method implementation:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">#region</span>&nbsp;Namespaces\n<span style=\"color:blue;\">using</span>&nbsp;System;\n<span style=\"color:blue;\">using</span>&nbsp;System.Linq;\n<span style=\"color:blue;\">using</span>&nbsp;System.Collections.Generic;\n<span style=\"color:blue;\">using</span>&nbsp;System.Diagnostics;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.ApplicationServices;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.Attributes;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.DB.Architecture;\n<span style=\"color:blue;\">using</span>&nbsp;Autodesk.Revit.UI;\n<span style=\"color:blue;\">#endregion</span>\n \n<span style=\"color:blue;\">namespace</span>&nbsp;RoomVolumeDirectShape\n{\n&nbsp;&nbsp;[<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;<span style=\"color:#2b91af;\">TransactionMode</span>.Manual&nbsp;)]\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">Command</span>&nbsp;:&nbsp;<span style=\"color:#2b91af;\">IExternalCommand</span>\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Cannot&nbsp;use&nbsp;OST_Rooms;&nbsp;DirectShape.CreateElement&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;throws&nbsp;ArgumentExceptionL:&nbsp;Element&nbsp;id&nbsp;categoryId&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;may&nbsp;not&nbsp;be&nbsp;used&nbsp;as&nbsp;a&nbsp;DirectShape&nbsp;category.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Category&nbsp;assigned&nbsp;to&nbsp;the&nbsp;room&nbsp;volume&nbsp;direct&nbsp;shape</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementId</span>&nbsp;_id_category_for_direct_shape\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_GenericModel&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;DirectShape&nbsp;parameter&nbsp;to&nbsp;populate&nbsp;with&nbsp;JSON</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;dictionary&nbsp;containing&nbsp;all&nbsp;room&nbsp;properies</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>&nbsp;_bip_properties\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.ALL_MODEL_INSTANCE_COMMENTS;\n \n// ... Property retrieval and JSON formatting helper methods ...\n\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;Execute(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ExternalCommandData</span>&nbsp;commandData,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">ref</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;message,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementSet</span>&nbsp;elements&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIApplication</span>&nbsp;uiapp&nbsp;=&nbsp;commandData.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">UIDocument</span>&nbsp;uidoc&nbsp;=&nbsp;uiapp.ActiveUIDocument;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Application</span>&nbsp;app&nbsp;=&nbsp;uiapp.Application;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;uidoc.Document;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;id_addin&nbsp;=&nbsp;uiapp.ActiveAddInId.ToString();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Room</span>&gt;&nbsp;rooms\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsNotElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">SpatialElement</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Where(&nbsp;e&nbsp;=&gt;&nbsp;e.GetType()&nbsp;==&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">Room</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.Cast&lt;<span style=\"color:#2b91af;\">Room</span>&gt;();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">using</span>(&nbsp;<span style=\"color:#2b91af;\">Transaction</span>&nbsp;tx&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Transaction</span>(&nbsp;doc&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Start(&nbsp;<span style=\"color:#a31515;\">&quot;Generate&nbsp;Direct&nbsp;Shape&nbsp;Elements&nbsp;&quot;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;<span style=\"color:#a31515;\">&quot;Representing&nbsp;Room&nbsp;Volumes&quot;</span>&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Room</span>&nbsp;r&nbsp;<span style=\"color:blue;\">in</span>&nbsp;rooms&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;r.Name&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">GeometryElement</span>&nbsp;geo&nbsp;=&nbsp;r.ClosedShell;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;&nbsp;param_values\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;GetParamValues(&nbsp;r&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;json&nbsp;=&nbsp;FormatDictAsJson(&nbsp;param_values&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DirectShape</span>&nbsp;ds&nbsp;=&nbsp;<span style=\"color:#2b91af;\">DirectShape</span>.CreateElement(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doc,&nbsp;_id_category_for_direct_shape&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds.ApplicationId&nbsp;=&nbsp;id_addin;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds.ApplicationDataId&nbsp;=&nbsp;r.UniqueId;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds.SetShape(&nbsp;geo.ToList&lt;<span style=\"color:#2b91af;\">GeometryObject</span>&gt;()&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds.get_Parameter(&nbsp;_bip_properties&nbsp;).Set(&nbsp;json&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ds.Name&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;Room&nbsp;volume&nbsp;for&nbsp;&quot;</span>&nbsp;+&nbsp;r.Name;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tx.Commit();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n}\n</pre>\n\nFor the full Visual Studio solution and updates to the code, please refer to\nThe [RoomVolumeDirectShape GitHub repository](https://github.com/jeremytammik/RoomVolumeDirectShape)."
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Sample Model and Results",
    "local_header_href": "#8",
    "chunk_text": "####<a name=\"8\"></a> Sample Model and Results\n\nI tested this in the standard Revit *rac_basic_sample_project.rvt* sample model:\n\n<center>\n<img src=\"img/rac_basic_sample_project.png\" alt=\"Revit Architecture rac_basic_sample_project.rvt\" width=\"380\">\n</center>\n\nIsolated, the resulting direct shapes look like this:\n\n<center>\n<img src=\"img/rac_basic_sample_project_room_volumes.png\" alt=\"DirectShape elements representing room volumes\" width=\"699\">\n</center>"
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Challenges Encountered Underway",
    "local_header_href": "#9",
    "chunk_text": "####<a name=\"9\"></a> Challenges Encountered Underway\n\nI ran into a couple of issues en route that cost me time to resolve, ever though absolutely trivial, so I'll make a note of them here for my own future reference:\n\n- [Licensing system error 22](#9.1) \n- [Valid direct shape categories](#9.2) \n- [Direct shape phase and visibility](#9.3) \n\n\n####<a name=\"9.1\"></a> Licensing System Error 22 \n\nSomething happened on my virtual Windows machine, and I saw an error saying:\n\n<pre>\n  ---------------------------\n  Autodesk Revit 2020\n  ---------------------------\n  Licensing System Error 22 \n  Failed to locate Adls\n  ---------------------------\n  OK   \n  ---------------------------\n</pre>\n\nLuckily, a similar issue has already been discussed in the forum thread\non [licensing system error 22 &ndash; failed to locate `Adls`](https://forums.autodesk.com/t5/installation-licensing/error-de-sistema-de-licencias-22-failed-to-locate-adls/td-p/8771037).\n\nThe solution described there worked fine in my case as well:\n\n- Run Services.msc\n- Check the entry for Autodesk Desktop Licensing Service\n- If it is not already running, start the service\n\n\n####<a name=\"9.2\"></a> Valid Direct Shape Categories \n\nI had to fiddle a bit choosing which category to use for the `DirectShape` element creation.\n\nThe rooms category is not acceptable, generic model and structural framing is.\n\nAttempting to use an invalid category throws an ArgumentException saying, *Element id categoryId may not be used as a DirectShape category.*\n\n\n####<a name=\"9.3\"></a> Direct Shape Phase and Visibility\n\nRight away after the first trial run, I could see the resulting `DirectShape` elements in RevitLookup, and all their properties looked fine.\n\nHowever, try as I might, I was unable to see them in the Revit 3D view...\n\n...until I finally flipped through the phases and found the right one.\n\nThe model is apparently in a state in which newly created geometry lands in a phase that is not displayed in the default 3D view."
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "Cherry BIM Services",
    "local_header_href": "#10",
    "chunk_text": "####<a name=\"10\"></a> Cherry BIM Services\n\nEnough on my activities.\n\nSomeone else has also been pretty active recently:\n\n[Ninh Truong Huu Ha](https://github.com/haninh2612) of [Cherry BIM Services](http://www.cherrybimservices.com) recently\nshared several free Revit add-ins, and also published code for one of them.\n\nOops, the code has disappeared again from Ninh's GitHub repository; in fact, the whole repository disappeared...\n\n> Inspired by Jeremy Tammik and Harry Mattison who always share their incredible knowledge to the world, I decided from now on, all of my Revit add-ins will be free to use for all Revit users.\nOne year ago, I had absolutely zero knowledge of the coding world, e.g., C#, Revit API, Visual Studio, etc.\nI would never have thought that someday I could have my own Revit add-in published in the Autodesk Store.\n\n- Start from my first add-in: [Batch Rename Revit Type name with Naming convention](https://www.dropbox.com/sh/fs1b60jewyfkdxd/AAArHy7C6Y7edtBGckl2AIeSa?dl=0).\nHere is a three-minute [demonstration video](https://youtu.be/n91iyjOALdo).\n- [Warning Manager by Cherry BIM Services](https://apps.autodesk.com/RVT/en/Detail/Index?id=7980350830610368901&appLang=en&os=Win64)\n- [Auto-generate curtain grids](https://youtu.be/Sacd3K6RBbU) &ndash; [Auto curtain wall Dropbox download](https://www.dropbox.com/sh/rfllne68zjjjq9t/AAA7eLI-p1LqFHkRj3fBlxpza?dl=0)\n- [Batch Upgrade models, templates and families](https://youtu.be/rciLWaik2_0)\n\nMany thanks to Ninh for sharing these tools!"
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "On the Value of the 'Loss Method' Property",
    "local_header_href": "#11",
    "chunk_text": "####<a name=\"11\"></a> On the Value of the 'Loss Method' Property\n\nNext, let's point out an MEP analysis related question raised and solved by Hanley Deng in\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non [how to get the value of the property 'Loss Method'](https://forums.autodesk.com/t5/revit-api-forum/how-to-get-the-value-of-the-property-quot-loss-method-quot/m-p/8816013):\n\n**Question:** Pipe fittings have a property named \"Loss Method\".\n\nIn the UI, its value is \"Use Definition on Type\".\n\nIn the API, however, the value is a GUID, e.g., \"3bf616f9-6b98-4a21-80ff-da1120c8f6d6\":\n\n<center>\n<img src=\"img/snoop_loss_method_param_val.png\" alt=\"Loss method parameter property\" width=\"619\">\n</center>\n\nHow can I convert the API GUID value, \"3bf616f9-6b98-4a21-80ff-da1120c8f6d6\", into the UI value, \"Use Definition on Type\"?\n\n**Answer:** The loss method can be programmed, so the GUID you see might be something like the add-in identifier, c.f. this discussion on\nthe [pipe fitting K factor](https://thebuildingcoder.typepad.com/blog/2017/12/pipe-fitting-k-factor-archilab-and-installer.html).\n\n**Response:** Problem solved. This problem is solved in 2 cases:\n\n1. For Pipe fittings, when Loss Method is \"Use definition on Type\":\nIn this case, the `parameter.AsString()` value equals the GUID stored in Autodesk.Revit.DB.MEPCalculatationServerInfo.PipeUseDefinitionOnTypeGUID.\nIn this case, I cannot find the UI display string for it, so I hardcode the UI display string.\n2. I all other cases, including other values in Pipe Fittings, and all the values in Duct Fittings, the `ServerName` is the string in the UI display, accessible through the following API call:\n\n<pre class=\"code\">\n  Autodesk.Revit.DB.MEPCalculatationServerInfo\n    .GetMEPCalculationServerInfo(objFamilyInstance), \n</pre>\n\nMany thanks to Hanley for clarifying this."
  },
  {
    "original_filename": "1755_room_volume_ds",
    "header_text": "AI-Generated Talking Head Models",
    "local_header_href": "#12",
    "chunk_text": "####<a name=\"12\"></a> AI-Generated Talking Head Models\n\nFinally, let's close with this impressive demonstration of AI simulated talking head models, presented in the five-minute video \non [few-shot adversarial learning of realistic neural talking head models](https://youtu.be/p1b5aiTrGzY):\n\n<center>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/p1b5aiTrGzY\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</center>"
  }
]