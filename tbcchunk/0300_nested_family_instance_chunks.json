[
  {
    "original_filename": "0300_nested_family_instance",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0300_nested_family_instance",
    "header_text": "Nested Family Instance",
    "local_header_href": "#nested-family-instance",
    "chunk_text": "<h3>Nested Family Instance</h3><p>We already discussed a few questions related to nested families, on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nexploring nested instance geometry</a>\n\nand\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/nested-family.html\">\ncreating a nested family</a> using the family API.\n\nHere is another simple question that may arise in the context of family nesting.\nIt also gives me one of the rare opportunities to present at least a few lines of VB code.\n\n<p><strong>Question:</strong> Is there a way of testing whether a family instance in a project file is nested inside another, i.e. does it have a parent family instance?\n\n<p>I have a nested family that consists of two families, a computer and a power outlet.\n\n<p>The following code is returning both the instances:\n\n<pre>\n  Dim FamilyInstanceSet As ElementSet _\n    = oRevApp.App.Create.NewElementSet\n\n  Dim familyInstanceItor As ElementIterator _\n    = m_RevitDoc.Elements(GetType(Elements.FamilyInstance))\n\n  familyInstanceItor.Reset()\n\n  While familyInstanceItor.MoveNext()\n\n    Dim Instance As Elements.FamilyInstance _\n      = DirectCast(familyInstanceItor.Current, _\n        Elements.FamilyInstance)\n\n    FamilyInstanceSet.Insert(Instance)\n\n  End While\n</pre>\n<p>In my model I have several power outlets. \nI need to be able to test the outlets returned, and not count those that are nested within another family. \nThe family parameter of the nested outlet is set to shared, so that they are exposed at project level, and so can be tagged.\n\n<p><strong>Answer:</strong> I verified that the retrieval of the document elements returns both the top level and the nested family instances, just like you say.\nThe original version of your test command reports the following three instances:\n\n<pre>\n1 Specialty Equipment-Cupboard-1200x700 \n2 A1 metric \n3 Electrical Fixture-Gen-Double Socket-Double\n</pre>\n<p>Exploring the model with RvtMgdDbg and checking the Revit API documentation, I noticed the two family instance properties SubComponents and SuperComponent which return information about its nesting relationships:\n\n<ul>\n<li>SubComponents: retrieve the sub components of the family instance. If it has no sub components, it returns null.\n<li>SuperComponent: retrieve the super component of the family instance. If it has no super component, it returns null.\n</li></li></ul>\n<p>I expanded your code very slightly to check the SuperComponent property for a null value, and assume that that means that the family instance is a top level one, like this:\n\n<pre class=\"code\">\n<span class=\"blue\">Dim</span> oRevApp <span class=\"blue\">As</span> Application _\n  = commandData.Application\n \n<span class=\"blue\">Dim</span> oRevitDoc <span class=\"blue\">As</span> Document _\n  = oRevApp.ActiveDocument\n \n<span class=\"blue\">Dim</span> FamilyInstanceSet <span class=\"blue\">As</span> ElementSet _\n  = oRevApp.Create.NewElementSet\n \n<span class=\"blue\">Dim</span> familyInstanceItor <span class=\"blue\">As</span> ElementIterator _\n  = oRevitDoc.Elements(<span class=\"blue\">GetType</span>(Elements.FamilyInstance))\n \n<span class=\"blue\">Dim</span> fndFamilies <span class=\"blue\">As</span> <span class=\"blue\">String</span> = <span class=\"maroon\">\"\"</span>\n \n<span class=\"blue\">Dim</span> k <span class=\"blue\">As</span> <span class=\"blue\">Integer</span>\n \nfamilyInstanceItor.Reset()\n \n<span class=\"blue\">While</span> familyInstanceItor.MoveNext()\n \n  <span class=\"blue\">Dim</span> instance <span class=\"blue\">As</span> Elements.FamilyInstance _\n    = <span class=\"blue\">DirectCast</span>(familyInstanceItor.Current,  _\n      Elements.FamilyInstance)\n \n  <span class=\"blue\">Dim</span> s <span class=\"blue\">As</span> <span class=\"blue\">String</span> = <span class=\"maroon\">\"nested\"</span>\n \n  <span class=\"blue\">If</span> instance.SuperComponent <span class=\"blue\">Is</span> <span class=\"blue\">Nothing</span> <span class=\"blue\">Then</span>\n    s = <span class=\"maroon\">\"top level\"</span>\n  <span class=\"blue\">End</span> <span class=\"blue\">If</span>\n \n  k += 1\n \n  fndFamilies &amp;= <span class=\"blue\">CStr</span>(k) &amp; <span class=\"maroon\">\" \"</span> &amp; instance.Name _\n    &amp; <span class=\"maroon\">\": \"</span> &amp; s &amp; vbCrLf\n \n<span class=\"blue\">End</span> <span class=\"blue\">While</span>\n \nMsgBox(<span class=\"maroon\">\"Found families\"</span> &amp; vbCrLf &amp; vbCrLf &amp; fndFamilies)\n</pre>\n<p>With this enhancement, the message box now displays:\n\n<pre>\n1 Specialty Equipment-Cupboard-1200x700: top level \n2 A1 metric: top level \n3 Electrical Fixture-Gen-Double Socket-Double: nested\n</pre>\n<p>So the nested electrical fixtures are correctly identifies as such.\n</p></p></p></p></p></p></p></p></p></p>"
  }
]