[
  {
    "original_filename": "0734_retrieve_ecs_geom",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0734_retrieve_ecs_geom",
    "header_text": "Retrieve Geometry in Element Coordinate System",
    "local_header_href": "#retrieve-geometry-in-element-coordinate-system",
    "chunk_text": "<h3>Retrieve Geometry in Element Coordinate System</h3><p>I am travelling rather further afield than usual today, and actually have been doing so all day yesterday as well.\nMy normal paths remain inside of Europe, with occasional trips once or twice a year to the USA, for AEC DevCamp and Autodesk University.\nNow, exceptionally, I am on my way to Melbourne, Australia, to present a Revit API training and DevCamp next week.\n\n<p>Meanwhile, here is an interesting little issue brought up by Olli Kattelus, software developer of \n\n<a href=\"http://www.magicad.com\">\nMagiCAD</a> for\n\n<a href=\"http://www.magicad.com/en/content/welcome-house-progman\">\nProgman Oy</a> in \n\nthe context of IFC export of MEP ducts and pipes.\nIt is a teeny weeny bit tricky and can yet be solved quite easily using the geometrical tools provided by the Revit API.\n\n\n<p><strong>Question:</strong> My problem in brief:\n\n<p>I can't get positions of the geometry primitives of the duct/pipe etc. in the instance's own coordinate system. Or is it possible?\n\n<p>More in-depth explanation:\n\n<p>For standard family instances such as air terminal, fitting, etc., I CAN retrieve the geometry primitives (faces etc.) and their coordinates in the symbol's own coordinate system. \nI also can transform them to the global coordinate system by using the transform provided by the GeometryInstance class.\n\n<p>For system families, however, things are different.\nThe first obstacle is that ducts/pipes etc. don't have any GeometryInstance as their geometry. \nWhen I fetch their geometry primitives, they are returned in the global coordinate system. \n\n<p>I would really need to get them also in the \"symbols\" own coordinate system.\n\n<p>The reason I need this is that I'm working on an IFC export. \nIn IFC, the geometry is exported only once per object type, or at least that is much preferred. \nThe coordinates of geometry must be therefore be given in the element coordinate system because when the IFC file is read, the location and orientation of the object tells the IFC interpreter where to place the resulting geometry. \n\n<p>If the geometry is exported using the global coordinate system, things go wrong. \nSome geometry transformation methods are provided by the ExporterIFCUtils classes, but unfortunately I can't use them because I'm not using the Revit API to create the export.\n\n\n<p><strong>Answer:</strong> Here is a suggestion for an approach:\n\n<ol>\n<li>Determine the duct or pipe start and end points in the global coordinate system GCS.\n<li>Define what you mean by \"instance's own coordinate system\" ICS, for instance start point equals origin, duct or pipe direction equals X axis, something or other equals the Z axis etc.\n<li>Determine the transformation T from the GCS to the ICS.\n<li>Obtain the duct or pipe geometry primitives and apply T to them to place them in ICS.\n</li></li></li></li></ol>\n<p>Probably the easiest way to determine the transform from GCS to ICS is to first create the inverse one from ICS to GCS.\n\n<p>This can then easily be inverted using the Revit API Transform.Inverse property.\n\n<p>To create the transformation from ICS to GCS is also normally easy, since you can decide for yourself how you consider it should be set up.\nFor instance, for a duct, you could say that the ICS is located at its origin and has cardinal X, Y and Z axes. \n\n<p>To define the appropriate Revit API Transform instance, you just have to plug in the coordinates of the GCS start and end points appropriately into the Transform basis properties, cf. the description of the Transform.Basis property in the Revit API help file. \nYou may have to fiddle around a bit to get it right, but it should work.\n\n\n<p><strong>Response:</strong> Thanks A LOT for your instructions! \nI had kind of tried this at some previous point but I wasn't sure whether it could work this way. \nAfter your encouragement I had enough 'faith' to try until it worked :-)\n\n<p>As you said, I had to 'fiddle' a little bit with those but eventually managed to get it work in most of the cases.\n\n<p>I ended up with this kind of scenario:\n\n<p>For all the objects (generally system families) whose geometry primitives are required in ICS, I define origin, direction and normal as follows similar to the approach used in IFC, using the given element and its 'end connector' coordinate system:\n\n<pre class=\"code\">\n  coordSys = m_revElem\n    -&gt;endConnectors[0]\n    -&gt;CoordinateSystem;\n\n  org = coordSys-&gt;Origin;\n  dir = coordSys-&gt;BasisZ-&gt;Negate();\n  norm = coordSys-&gt;BasisY-&gt;Negate();\n</pre>\n<p>Sorry that this is not pure Revit API code, but as said 'm_revElem-&gt;endConnectors[0]' simply means some connector on the element.\n\n<p>To get the geometry to work correctly in our IFC output, I created the following transform:\n\n<pre class=\"code\">\n  Transform ^tf = Transform::Identity;\n  tf-&gt;BasisX = coordSys-&gt;BasisZ-&gt;Negate();\n  tf-&gt;BasisY = coordSys-&gt;BasisX;\n  tf-&gt;BasisZ = coordSys-&gt;BasisY-&gt;Negate();\n  tf-&gt;Origin = coordSys-&gt;Origin;\n  tf = tf-&gt;Inverse;\n</pre>\n<p>So this really DID help a lot. \nThanks again for this!!\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]