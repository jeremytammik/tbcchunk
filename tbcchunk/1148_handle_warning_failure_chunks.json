[
  {
    "original_filename": "1148_handle_warning_failure",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1148_handle_warning_failure",
    "header_text": "On Handling Warnings and Failures",
    "local_header_href": "#on-handling-warnings-and-failures",
    "chunk_text": "<h3>On Handling Warnings and Failures</h3><p>Many aspects of\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.32\">\ndetecting and handling dialogues and failures</a> have\n\nbeen discussed in the past.\n<p>Let's look at this area again, based on two recent questions, a basic and an advanced one, and also mention some Revit 2015 enhancements to the\n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Centre</a>:</p>\n<ul>\n<li><a href=\"#2\">Programmatic handling of warning messages</a></li>\n<li><a href=\"#3\">Resolving failures using the Failure API</a></li>\n<li><a href=\"#4\">Revit 2015 enhancements to the Revit developer centre</a></li>\n</ul>\n<a name=\"2\"></a>\n<h4>Programmatic Handling of Warning Messages</h4>\n<p><strong>Question:</strong> Is it possible with the Revit MEP 2011 API to handle warning messages?</p>\n<p>For instance, when batch processing files, if a warning message occurs, i.e. a modal dialogue halting the program is displayed, I would like to intercept the event, capture the warning message and disable the display of the modal dialog.</p>\n<p>Furthermore, if warning messages can be handled, can error messages be handled via the API as well? For instance, if an error occurs within the application while processing files, can I programmatically determine the error number, take appropriate action and then cancel the modal error message that would normally be displayed interactively?</p>\n<p><strong>Answer:</strong> Yes, this handling of warning messages as you describe is possible, and more so, absolutely common, in three different levels of increasing complexity and power:</p>\n<ul>\n<li>Simple: DialogBoxShowing event</li>\n<li>More complex and powerful: Failure API</li>\n<li>Massive, beyond the Revit API: Windows Hook</li>\n</ul>\n<p>Here is a grand overview over all three approaches to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.32\">\ndetect and handle warning and error messages and failures</a>.</p>\n<p>The answer is to the second question is yes as well, and the explanation is also included in that material.</p>\n<p>For handling errors gracefully, the Failure API is probably the most suitable approach, as illustrated by the following situation.</p>\n<a name=\"3\"></a>\n<h4>Resolving Failures Using the Failure API</h4>\n<p><strong>Question:</strong> In my add-in, editing a door family via Revit API throws an error message.</p>\n<p>The failure API cannot resolve the error and the error dialog is shown to the user.</p>\n<p>In Revit 2014, I was able to silently resolve the error, and no message was shown to the user.</p>\n<p><strong>Answer:</strong> You need to call the SetProcessingResult method on the event argument and specify ProceedWithCommit like this:</p>\n<pre class=\"code\">\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> DoFailureProcessing(\n      <span class=\"blue\">object</span> sender,\n      FailuresProcessingEventArgs args )\n    {\n      <span class=\"teal\">FailuresAccessor</span> fa = args.GetFailuresAccessor();\n \n      <span class=\"green\">// Inside event handler, get all warnings</span>\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; a\n        = fa.GetFailureMessages();\n \n      <span class=\"blue\">int</span> count = 0;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> failure <span class=\"blue\">in</span> a )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Failure\"</span>,\n          failure.GetDescriptionText() );\n \n        fa.ResolveFailure( failure );\n \n        ++count;\n      }\n \n      <span class=\"blue\">if</span>( 0 &lt; count\n        &amp;&amp; args.GetProcessingResult()\n          == <span class=\"teal\">FailureProcessingResult</span>.Continue )\n      {\n        args.SetProcessingResult(\n          <span class=\"teal\">FailureProcessingResult</span>.ProceedWithCommit );\n      }\n    }\n</pre>\n<p>The code snippet in the Revit API developer guide on\n\n<a href=\"http://help.autodesk.com/view/RVT/2015/ENU/?guid=GUID-52A45CC1-3BB4-48B4-BFC7-F6F8666C2AA4\">\nhandling failures</a> does\n\nnot make that call to SetProcessingResult, because it is only deleting warnings.</p>\n<p>That works fine, because deleting a warning is an \"instant\" operation: leaving the event result unchanged (it defaults to \"continue\") produces the desired result – there are no warnings left to display.</p>\n<p>Errors are not removed by resolveErrors – only subsequent regeneration will actually remove them.\nThe removal may also fail – resolution is not guaranteed to succeed.\nSo a call to SetProcessingResult with FailureProcessingResult.ProceedWithCommit is required.</p>\n<a name=\"4\"></a>\n<h4>Revit 2015 Enhancements to the Revit Developer Centre</h4>\n<p>As you certainly know, the most up-to-date version of the Revit SDK is always provided in the\n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Centre</a>.</p>\n<p>Besides that, several other important learning resources provided there have now also been updated for Revit 2015:</p>\n<ul>\n<li>\n<a href=\"http://images.autodesk.com/adsk/files/REVIT2015SDK0.msi\">Revit 2015 SDK (Update April 11, 2014)</a> (msi – 242779Kb)\n</li>\n<li>\n<a href=\"http://www.autodesk.com/revitapi-help\">Revit API Developer Guide</a> online on Autodesk Help to learn from and contribute to\n</li>\n<li>\nDevTV Introduction to Revit 2015 Programming Part 1 – a short video tutorial demonstrating the basic steps to start developing with the Revit .NET API –\n<a href=\"http://download.autodesk.com/media/adn/RevitDevTV2015Recording/Revit%20DevTV%202015.html\">View online</a>\n| <a href=\"http://download.autodesk.com/media/adn/Revit_2015_DevTV_EN.zip\">Download</a>\n</li>\n<li>\nDevTV Introduction to Revit 2015 Programming Part 2 – a short video tutorial demonstrating selection and filtering API through a Room Renumbering application –\n<a href=\"http://www.youtube.com/watch?v=zL8pQRJbcyA\">View online</a>\n| <a href=\"http://download.autodesk.com/media/adn/DevTVRevitNet2015.zip\">Download</a>\n</li>\n<li><a href=\"http://images.autodesk.com/adsk/files/Revit2015APITraining.zip\">Revit 2015 API Labs</a></li>\n</ul>\n<p>I just noticed that the Revit Developer Centre link to the Developers Guide is currently still pointing to the Revit 2014 version.</p>\n<p>As I mentioned when discussing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html\">What's New in the Revit 2015 API</a>,\n\nthe updated\n\n<a href=\"http://help.autodesk.com/view/RVT/2015/ENU/?guid=GUID-F0A122E0-E556-4D0D-9D0F-7E72A9315A42\">\nRevit 2015 API Developers Guide</a> is\n\nalready online as well, and the link on the Developer Centre needs to be updated to point to that instead.</p>\n<a href=\"\">\n</a>\n</p>"
  },
  {
    "original_filename": "1148_handle_warning_failure",
    "header_text": "Programmatic Handling of Warning Messages",
    "local_header_href": "#programmatic-handling-of-warning-messages",
    "chunk_text": "<h4>Programmatic Handling of Warning Messages</h4><p><strong>Question:</strong> Is it possible with the Revit MEP 2011 API to handle warning messages?</p><p>For instance, when batch processing files, if a warning message occurs, i.e. a modal dialogue halting the program is displayed, I would like to intercept the event, capture the warning message and disable the display of the modal dialog.</p><p>Furthermore, if warning messages can be handled, can error messages be handled via the API as well? For instance, if an error occurs within the application while processing files, can I programmatically determine the error number, take appropriate action and then cancel the modal error message that would normally be displayed interactively?</p><p><strong>Answer:</strong> Yes, this handling of warning messages as you describe is possible, and more so, absolutely common, in three different levels of increasing complexity and power:</p><ul>\n<li>Simple: DialogBoxShowing event</li>\n<li>More complex and powerful: Failure API</li>\n<li>Massive, beyond the Revit API: Windows Hook</li>\n</ul><p>Here is a grand overview over all three approaches to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.32\">\ndetect and handle warning and error messages and failures</a>.</p><p>The answer is to the second question is yes as well, and the explanation is also included in that material.</p><p>For handling errors gracefully, the Failure API is probably the most suitable approach, as illustrated by the following situation.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1148_handle_warning_failure",
    "header_text": "Resolving Failures Using the Failure API",
    "local_header_href": "#resolving-failures-using-the-failure-api",
    "chunk_text": "<h4>Resolving Failures Using the Failure API</h4><p><strong>Question:</strong> In my add-in, editing a door family via Revit API throws an error message.</p><p>The failure API cannot resolve the error and the error dialog is shown to the user.</p><p>In Revit 2014, I was able to silently resolve the error, and no message was shown to the user.</p><p><strong>Answer:</strong> You need to call the SetProcessingResult method on the event argument and specify ProceedWithCommit like this:</p><pre class=\"code\">\n    <span class=\"blue\">public</span> <span class=\"blue\">void</span> DoFailureProcessing(\n      <span class=\"blue\">object</span> sender,\n      FailuresProcessingEventArgs args )\n    {\n      <span class=\"teal\">FailuresAccessor</span> fa = args.GetFailuresAccessor();\n \n      <span class=\"green\">// Inside event handler, get all warnings</span>\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">FailureMessageAccessor</span>&gt; a\n        = fa.GetFailureMessages();\n \n      <span class=\"blue\">int</span> count = 0;\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">FailureMessageAccessor</span> failure <span class=\"blue\">in</span> a )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Failure\"</span>,\n          failure.GetDescriptionText() );\n \n        fa.ResolveFailure( failure );\n \n        ++count;\n      }\n \n      <span class=\"blue\">if</span>( 0 &lt; count\n        &amp;&amp; args.GetProcessingResult()\n          == <span class=\"teal\">FailureProcessingResult</span>.Continue )\n      {\n        args.SetProcessingResult(\n          <span class=\"teal\">FailureProcessingResult</span>.ProceedWithCommit );\n      }\n    }\n</pre><p>The code snippet in the Revit API developer guide on\n\n<a href=\"http://help.autodesk.com/view/RVT/2015/ENU/?guid=GUID-52A45CC1-3BB4-48B4-BFC7-F6F8666C2AA4\">\nhandling failures</a> does\n\nnot make that call to SetProcessingResult, because it is only deleting warnings.</p><p>That works fine, because deleting a warning is an \"instant\" operation: leaving the event result unchanged (it defaults to \"continue\") produces the desired result – there are no warnings left to display.</p><p>Errors are not removed by resolveErrors – only subsequent regeneration will actually remove them.\nThe removal may also fail – resolution is not guaranteed to succeed.\nSo a call to SetProcessingResult with FailureProcessingResult.ProceedWithCommit is required.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1148_handle_warning_failure",
    "header_text": "Revit 2015 Enhancements to the Revit Developer Centre",
    "local_header_href": "#revit-2015-enhancements-to-the-revit-developer-centre",
    "chunk_text": "<h4>Revit 2015 Enhancements to the Revit Developer Centre</h4><p>As you certainly know, the most up-to-date version of the Revit SDK is always provided in the\n\n<a href=\"http://www.autodesk.com/developrevit\">Revit Developer Centre</a>.</p><p>Besides that, several other important learning resources provided there have now also been updated for Revit 2015:</p><ul>\n<li>\n<a href=\"http://images.autodesk.com/adsk/files/REVIT2015SDK0.msi\">Revit 2015 SDK (Update April 11, 2014)</a> (msi – 242779Kb)\n</li>\n<li>\n<a href=\"http://www.autodesk.com/revitapi-help\">Revit API Developer Guide</a> online on Autodesk Help to learn from and contribute to\n</li>\n<li>\nDevTV Introduction to Revit 2015 Programming Part 1 – a short video tutorial demonstrating the basic steps to start developing with the Revit .NET API –\n<a href=\"http://download.autodesk.com/media/adn/RevitDevTV2015Recording/Revit%20DevTV%202015.html\">View online</a>\n| <a href=\"http://download.autodesk.com/media/adn/Revit_2015_DevTV_EN.zip\">Download</a>\n</li>\n<li>\nDevTV Introduction to Revit 2015 Programming Part 2 – a short video tutorial demonstrating selection and filtering API through a Room Renumbering application –\n<a href=\"http://www.youtube.com/watch?v=zL8pQRJbcyA\">View online</a>\n| <a href=\"http://download.autodesk.com/media/adn/DevTVRevitNet2015.zip\">Download</a>\n</li>\n<li><a href=\"http://images.autodesk.com/adsk/files/Revit2015APITraining.zip\">Revit 2015 API Labs</a></li>\n</ul><p>I just noticed that the Revit Developer Centre link to the Developers Guide is currently still pointing to the Revit 2014 version.</p><p>As I mentioned when discussing\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html\">What's New in the Revit 2015 API</a>,\n\nthe updated\n\n<a href=\"http://help.autodesk.com/view/RVT/2015/ENU/?guid=GUID-F0A122E0-E556-4D0D-9D0F-7E72A9315A42\">\nRevit 2015 API Developers Guide</a> is\n\nalready online as well, and the link on the Developer Centre needs to be updated to point to that instead.</p><a href=\"\">\n</a>"
  }
]