[
  {
    "original_filename": "1011_booleans_on_polygons",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<script src=\"http://thebuildingcoder.typepad.com/google-code-prettify/run_prettify.js\"></script>\n</head>"
  },
  {
    "original_filename": "1011_booleans_on_polygons",
    "header_text": "Boolean Operations for 2D Polygons",
    "local_header_href": "#boolean-operations-for-2d-polygons",
    "chunk_text": "<h3>Boolean Operations for 2D Polygons</h3><p>Once again, I have a special titbit for you to start the week.\nEnjoy!</p><p>Some of the most important utility tools for analysis of BIM and CAD models in general need to determine simple properties of and relationships between 2D points and polygons, e.g. point in polygon determination, area calculation and Boolean operations for overlapping areas, for instance for\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/01/room-and-wall-adjacent-area.html\">\nroom and wall adjacent area</a> calculations.</p><p>Some of these, but not all, are covered by the Revit API, though often only for a specialised context.</p><p>Any serious BIM coder will require generic versions of these tools, and the most reliable way to ensure that is as all-too-often to\n\n<a href=\"http://en.wikipedia.org/wiki/Do_it_yourself\">DIY</a>.</p><p>The Building Coder did so right from the beginning of its existence, e.g. for</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/12/point-in-polygon-containment-algorithm.html\">\nPoint in polygon containment</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/2d-polygon-areas-and-outer-loop.html\">\n2D polygon areas and outer loop</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/3d-polygon-areas.html\">\n3D polygon areas</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/boolean-operations-for-2d-polygons.html\">\nBoolean operations for 2D polygons</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/02/getpolygon-extension-methods.html\">\nGetPolygon extension methods</a></li>\n</ul><p>For the point containment check and area calculation, it is easy enough to implement a reliable stand-alone solution for yourself.</p><p>Boolean operations on polygons are a bit harder, however, and back in 2009 we took recourse to an external library to address that.</p><p>Here is an update and hopefully improvement to the solution provided then, prompted by the following query:</p><p><strong>Question:</strong> I tried to use the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/02/boolean-operations-for-2d-polygons.html\">\nGpcNET Boolean operation for polygon</a> solution\n\nthat you provided.\n\n<p>I cannot make it work, even though I updated it to the Revit 2014 version:</p>\n<center>\n<img alt=\"GpcNET exception\" src=\"img/gpcnet_exception.jpg\" width=\"400\"/>\n</center>\n<p>I tried switching between x86 and x64 configuration in Visual Studio, but that did not help.</p>\n<p>Is there a fix for this, or an updated GPC DLL?</p>\n<p>Or does the Revit API provide any similar tool to perform 2D polygon Boolean operations?</p>\n<p><strong>Answer:</strong> Actually, I think it would be your job to create that kind of stuff for yourself, especially since you have my previous blog post at hand, showing you how easy it is to do, and listing almost exactly which steps to take.</p>\n<p>It is definitely an extremely important tool to have, though, so in this specific case, I will be happy to explore the issue and provide an update to the previous example.</p>\n<p>The blog post you refer to is rather old, from the year 2009.</p>\n<p>Maybe there is something better around now?</p>\n<p>I spent a few moments researching this.\nI performed a simple search for\n\n<a href=\"http://lmgtfy.com/?q=open+source+boolean+operation+2d+polygon\">\nopen source boolean operation 2d polygon</a>.</p>\n<p>That took me to the well-known Wikipedia article on\n\n<a href=\"http://en.wikipedia.org/wiki/Boolean_operations_on_polygons\">\nBoolean operations on polygons</a>.</p>\n<p>In it, Michael Leonov's\n\n<a href=\"http://www.complex-a5.ru/polyboolean/comp.html\">\ncomparison of polygon clippers</a> is too old by now, from 1998.</p>\n<p>Angus Johnson's\n\n<a href=\"http://angusj.com/delphi/clipper.php#features\">\ncomparison</a> was\n\nupdated in 2013 and led me to download the\n\n<a href=\"http://angusj.com/delphi/clipper.php\">\nClipper polygon clipping library</a>.</p>\n<p>It is written in Delphi, C++, C# and Python and is currently at version 5.1.6, updated on May 23 2013.\nIt is freeware for both open source and commercial applications, equipped with the Boost Software License.</p>\n<p>I downloaded and unzipped clipper_ver5.1.6.zip, loaded the C# GuiDemo solution into Visual Studio, hit F5 to debug, and had a result within a few minutes of starting to answer your case:</p>\n<center>\n<img alt=\"Clipper GUI demo\" src=\"img/clipper_gui_demo.png\" width=\"400\"/>\n</center>\n<p>Since this is C# code, you can easily integrate it into your Revit add-in.</p>\n<p>Now comes the fun part :-)</p>\n<p>Hack, hack, hack.</p>\n<p>Ok, I completed my sample app.\nIt implements an external command named RvtClipper that intersects two slabs, which can be floors or ceilings, and creates a new floor representing the result:</p>\n<center>\n<img alt=\"RvtClipper floor intersection\" src=\"img/clipper_floor_intersection.png\" width=\"400\"/>\n</center>\n<p>Let's take a quick look at the code to achieve this:</p>\n<ul>\n<li><a href=\"#2\">Clipper library project integration</a>.</li>\n<li><a href=\"#3\">Clipper and Revit point class translation</a>.</li>\n<li><a href=\"#4\">GetBoundaryLoops</a> – return horizontal slab boundary loops.</li>\n<li><a href=\"#5\">Select two slabs in the BIM</a>.</li>\n<li><a href=\"#6\">Retrieve boundaries, intersect and create a floor</a>.</li>\n<li><a href=\"#7\">Download</a>.</li>\n</ul>\n<a name=\"2\">\n<h4>Clipper Library Project Integration</h4>\n<p>The Clipper GUI demo sample application solution contains two projects: one for the GUI demo itself, and the other to generate the Clipper library from its one and only C# source code module.</p>\n<p>I therefore simply copied that entire project into my add-in solution, made my add-in dependent on the Clipper library and added a reference to its .NET assembly:</p>\n<center>\n<img alt=\"Clipper library integration\" src=\"img/clipper_library_integration.png\"/>\n</center>\n<a name=\"3\">\n<h4>Clipper and Revit Point Class Translation</h4>\n<p>Part of the Clipper speed and reliability presumably stems from the fact that it is integer-based, eliminating all the rounding problems dealing with real numbers.</p>\n<p>It uses an IntPoint class with two Int64 X and Y coordinates.</p>\n<p>I have often approximated Revit XYZ vertices using integer-based point classes in the past, so this seems pretty appropriate for me.</p>\n<p>Once again, I decided to simply convert the Revit XYZ imperial coordinates to millimetres.\nThat choice is completely arbitrary.\nIf you prefer higher precision, please be my guest.</p>\n<p>Here is the code I use to convert back and forth between the two systems:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Consider a Revit length zero </span>\n  <span class=\"gray\">///</span><span class=\"green\"> if is smaller than this.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 1.0e-9;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion factor from feet to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _feet_to_mm = 25.4 * 12;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion a given length value </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from feet to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">long</span> ConvertFeetToMillimetres( <span class=\"blue\">double</span> d )\n  {\n    <span class=\"blue\">if</span>( 0 &lt; d )\n    {\n      <span class=\"blue\">return</span> _eps &gt; d\n        ? 0\n        : (<span class=\"blue\">long</span>) ( _feet_to_mm * d + 0.5 );\n \n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">return</span> _eps &gt; -d\n        ? 0\n        : (<span class=\"blue\">long</span>) ( _feet_to_mm * d - 0.5 );\n \n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion a given length value </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from millimetres to feet.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">double</span> ConvertMillimetresToFeet( <span class=\"blue\">long</span> d )\n  {\n    <span class=\"blue\">return</span> d / _feet_to_mm;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a clipper integer point </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from a Revit model space one.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Do so by dropping the Z coordinate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and converting from imperial feet </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">IntPoint</span> GetIntPoint( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">IntPoint</span>(\n      ConvertFeetToMillimetres( p.X ),\n      ConvertFeetToMillimetres( p.Y ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a Revit model space point </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from a clipper integer one.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Do so by adding a zero Z coordinate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and converting from millimetres to</span>\n  <span class=\"gray\">///</span><span class=\"green\"> imperial feet.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">XYZ</span> GetXyzPoint( <span class=\"teal\">IntPoint</span> p )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n      ConvertMillimetresToFeet( p.X ),\n      ConvertMillimetresToFeet( p.Y ),\n      0.0 );\n  }\n</pre>\n<a name=\"4\">\n<h4>GetBoundaryLoops – Return Horizontal Slab Boundary Loops</h4>\n<p>Ok, so we now know how to convert a Revit point to a Clipper one.</p>\n<p>How do we represent an entire boundary loop, and how can that data be retrieved from a BIM slab?</p>\n<p>That is achieved in one fell swoop by the GetBoundaryLoops method, returning a collection of Clipper polygons.</p>\n<p>A single slab may generate multiple loops, both due to holes in its interior and due to consisting of several separate pieces:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the boundary loops of the given slab </span>\n<span class=\"gray\">///</span><span class=\"green\"> top face, which is assumed to be horizontal.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Polygons</span> GetBoundaryLoops( <span class=\"teal\">CeilingAndFloor</span> slab )\n{\n  <span class=\"blue\">int</span> n;\n  <span class=\"teal\">Polygons</span> polys = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Document</span> doc = slab.Document;\n  <span class=\"teal\">Application</span> app = doc.Application;\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  <span class=\"teal\">GeometryElement</span> geo = slab.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n      {\n        <span class=\"teal\">PlanarFace</span> pf = face <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != pf\n          &amp;&amp; pf.Normal.IsAlmostEqualTo( <span class=\"teal\">XYZ</span>.BasisZ ) )\n        {\n          <span class=\"teal\">EdgeArrayArray</span> loops = pf.EdgeLoops;\n \n          n = loops.Size;\n          polys = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>( n );\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> loop <span class=\"blue\">in</span> loops )\n          {\n            n = loop.Size;\n            <span class=\"teal\">Polygon</span> poly = <span class=\"blue\">new</span> <span class=\"teal\">Polygon</span>( n );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> loop )\n            {\n              <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = edge.Tessellate();\n \n              n = pts.Count;\n \n              <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n              {\n                poly.Add( GetIntPoint( p ) );\n              }\n            }\n            polys.Add( poly );\n          }\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> polys;\n}\n</pre>\n<p>With all of that in place, we have nothing more to do before proceeding with the external command mainline.</p>\n<p>As mostly, it consists of two parts: the user interface to select the two slabs to intersect, and the worker code to do the job.</p>\n<a name=\"5\">\n<h4>Select Two Slabs in the BIM</h4>\n<p>The selection supports both pre- and post-selection.</p>\n<p>You can select a bunch of elements before launching the command.\nIn that case, the first two slabs encountered in the selection will be picked.</p>\n<p>If you pre-select nothing, all floor elements in the entire model will be retrieved and the first two encountered selected.</p>\n<p>As you may have gathered, this is more geared towards effective simple testing than production use:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Two slabs to intersect.</span>\n \n  <span class=\"teal\">CeilingAndFloor</span>[] slab\n    = <span class=\"blue\">new</span> <span class=\"teal\">CeilingAndFloor</span>[2] { <span class=\"blue\">null</span>, <span class=\"blue\">null</span> };\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">int</span> n = sel.Elements.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Please select two floor or ceiling slabs to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve elements from database</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> floors\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WhereElementIsNotElementType()\n        .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Floors );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> floors )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Unable to find two floors in project to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n</pre>\n<a name=\"6\">\n<h4>Retrieve Boundaries, Intersect and Create a Floor</h4>\n<p>We have our two slabs.</p>\n<p>Let's go ahead and do the job.</p>\n<p>The Revit API imposes one unfortunate caveat: the doc.Create.NewFloor\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/create-a-floor-with-an-opening-or-complex-boundary.html\">\nfloor creation method can only handle a single exterior loop</a>.\n\n<p>We therefore ignore all but the first boundary loop returned in the intersection result, and don't even care what that actually represents.</p>\n<p>See how simple this is:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Retrieve the two slabs' boundary loops</span>\n \n  <span class=\"teal\">Polygons</span> subj = GetBoundaryLoops( slab[0] );\n  <span class=\"teal\">Polygons</span> clip = GetBoundaryLoops( slab[1] );\n \n  <span class=\"green\">// Calculate the intersection</span>\n \n  <span class=\"teal\">Polygons</span> intersection = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>();\n \n  <span class=\"teal\">Clipper</span> c = <span class=\"blue\">new</span> <span class=\"teal\">Clipper</span>();\n \n  c.AddPolygons( subj, <span class=\"teal\">PolyType</span>.ptSubject );\n \n  c.AddPolygons( clip, <span class=\"teal\">PolyType</span>.ptClip );\n \n  c.Execute( <span class=\"teal\">ClipType</span>.ctIntersection, intersection,\n    <span class=\"teal\">PolyFillType</span>.pftEvenOdd, <span class=\"teal\">PolyFillType</span>.pftEvenOdd );\n \n  <span class=\"green\">// Check for a valid intersection</span>\n \n  <span class=\"blue\">if</span>( 0 &lt; intersection.Count )\n  {\n    <span class=\"green\">// Determine new intersection floor boundary</span>\n \n    <span class=\"green\">// We can only handle a single exterior loop </span>\n    <span class=\"green\">// here, unfortunately; cf.</span>\n    <span class=\"green\">// http://thebuildingcoder.typepad.com/blog/2013/07\\</span>\n    <span class=\"green\">// /create-a-floor-with-an-opening-or-complex-boundary.html</span>\n \n    <span class=\"teal\">CurveArray</span> curves = app.Create.NewCurveArray();\n \n    <span class=\"teal\">Polygon</span> poly = intersection[0];\n \n    <span class=\"teal\">IntPoint</span>? p0 = <span class=\"blue\">null</span>; <span class=\"green\">// first</span>\n    <span class=\"teal\">IntPoint</span>? p = <span class=\"blue\">null</span>; <span class=\"green\">// previous</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">IntPoint</span> q <span class=\"blue\">in</span> poly )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n      {\n        p0 = q;\n      }\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n      {\n        curves.Append(\n          <span class=\"teal\">Line</span>.CreateBound(\n            GetXyzPoint( p.Value ),\n            GetXyzPoint( q ) ) );\n      }\n      p = q;\n    }\n \n    <span class=\"green\">// Do the dirty deed</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Intersection Floor\"</span> );\n      doc.Create.NewFloor( curves, <span class=\"blue\">false</span> );\n      tx.Commit();\n    }\n  }\n</pre>\n<p>I showed you the result above.</p>\n<p>Pretty nifty, huh?</p>\n<p>Oh yes, please also note my first use of\n\n<a href=\"http://stackoverflow.com/questions/2735638/nullable-integer-in-net\">\nnullable values</a>.\n\nVery useful indeed  :-)</p>\n<a name=\"7\">\n<h4>Download</h4>\n<p>One nice aspect of this version is that the C# version of the Clipper library is provided in its entirety by the clipper_library project included in my add-in Visual Studio solution, so you do not even need to download it separately yourself to make use of this.</p>\n<p>You do need to ensure that the Clipper .NET assembly is located where the add-in assembly can find it, though.\nI'll leave that up to you, of course.</p>\n<p>Here is\n\n<a href=\"zip/RvtClipper.zip\">RvtClipper.zip</a> containing\n\nthe complete add-in and library source code, solution, and add-in manifest.</p>\n<p>I wish you lots of fun and success making use of this, and please let us know what experiences you make and what nice uses you put it to.\nThank you.</p>\n</a></p></a></a></a></a></a></p>"
  },
  {
    "original_filename": "1011_booleans_on_polygons",
    "header_text": "Clipper Library Project Integration",
    "local_header_href": "#clipper-library-project-integration",
    "chunk_text": "<h4>Clipper Library Project Integration</h4><p>The Clipper GUI demo sample application solution contains two projects: one for the GUI demo itself, and the other to generate the Clipper library from its one and only C# source code module.</p><p>I therefore simply copied that entire project into my add-in solution, made my add-in dependent on the Clipper library and added a reference to its .NET assembly:</p><center>\n<img alt=\"Clipper library integration\" src=\"img/clipper_library_integration.png\"/>\n</center><a name=\"3\">\n<h4>Clipper and Revit Point Class Translation</h4>\n<p>Part of the Clipper speed and reliability presumably stems from the fact that it is integer-based, eliminating all the rounding problems dealing with real numbers.</p>\n<p>It uses an IntPoint class with two Int64 X and Y coordinates.</p>\n<p>I have often approximated Revit XYZ vertices using integer-based point classes in the past, so this seems pretty appropriate for me.</p>\n<p>Once again, I decided to simply convert the Revit XYZ imperial coordinates to millimetres.\nThat choice is completely arbitrary.\nIf you prefer higher precision, please be my guest.</p>\n<p>Here is the code I use to convert back and forth between the two systems:</p>\n<pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Consider a Revit length zero </span>\n  <span class=\"gray\">///</span><span class=\"green\"> if is smaller than this.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 1.0e-9;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion factor from feet to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _feet_to_mm = 25.4 * 12;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion a given length value </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from feet to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">long</span> ConvertFeetToMillimetres( <span class=\"blue\">double</span> d )\n  {\n    <span class=\"blue\">if</span>( 0 &lt; d )\n    {\n      <span class=\"blue\">return</span> _eps &gt; d\n        ? 0\n        : (<span class=\"blue\">long</span>) ( _feet_to_mm * d + 0.5 );\n \n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">return</span> _eps &gt; -d\n        ? 0\n        : (<span class=\"blue\">long</span>) ( _feet_to_mm * d - 0.5 );\n \n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion a given length value </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from millimetres to feet.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">double</span> ConvertMillimetresToFeet( <span class=\"blue\">long</span> d )\n  {\n    <span class=\"blue\">return</span> d / _feet_to_mm;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a clipper integer point </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from a Revit model space one.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Do so by dropping the Z coordinate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and converting from imperial feet </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">IntPoint</span> GetIntPoint( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">IntPoint</span>(\n      ConvertFeetToMillimetres( p.X ),\n      ConvertFeetToMillimetres( p.Y ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a Revit model space point </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from a clipper integer one.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Do so by adding a zero Z coordinate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and converting from millimetres to</span>\n  <span class=\"gray\">///</span><span class=\"green\"> imperial feet.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">XYZ</span> GetXyzPoint( <span class=\"teal\">IntPoint</span> p )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n      ConvertMillimetresToFeet( p.X ),\n      ConvertMillimetresToFeet( p.Y ),\n      0.0 );\n  }\n</pre>\n<a name=\"4\">\n<h4>GetBoundaryLoops – Return Horizontal Slab Boundary Loops</h4>\n<p>Ok, so we now know how to convert a Revit point to a Clipper one.</p>\n<p>How do we represent an entire boundary loop, and how can that data be retrieved from a BIM slab?</p>\n<p>That is achieved in one fell swoop by the GetBoundaryLoops method, returning a collection of Clipper polygons.</p>\n<p>A single slab may generate multiple loops, both due to holes in its interior and due to consisting of several separate pieces:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the boundary loops of the given slab </span>\n<span class=\"gray\">///</span><span class=\"green\"> top face, which is assumed to be horizontal.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Polygons</span> GetBoundaryLoops( <span class=\"teal\">CeilingAndFloor</span> slab )\n{\n  <span class=\"blue\">int</span> n;\n  <span class=\"teal\">Polygons</span> polys = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Document</span> doc = slab.Document;\n  <span class=\"teal\">Application</span> app = doc.Application;\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  <span class=\"teal\">GeometryElement</span> geo = slab.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n      {\n        <span class=\"teal\">PlanarFace</span> pf = face <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != pf\n          &amp;&amp; pf.Normal.IsAlmostEqualTo( <span class=\"teal\">XYZ</span>.BasisZ ) )\n        {\n          <span class=\"teal\">EdgeArrayArray</span> loops = pf.EdgeLoops;\n \n          n = loops.Size;\n          polys = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>( n );\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> loop <span class=\"blue\">in</span> loops )\n          {\n            n = loop.Size;\n            <span class=\"teal\">Polygon</span> poly = <span class=\"blue\">new</span> <span class=\"teal\">Polygon</span>( n );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> loop )\n            {\n              <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = edge.Tessellate();\n \n              n = pts.Count;\n \n              <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n              {\n                poly.Add( GetIntPoint( p ) );\n              }\n            }\n            polys.Add( poly );\n          }\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> polys;\n}\n</pre>\n<p>With all of that in place, we have nothing more to do before proceeding with the external command mainline.</p>\n<p>As mostly, it consists of two parts: the user interface to select the two slabs to intersect, and the worker code to do the job.</p>\n<a name=\"5\">\n<h4>Select Two Slabs in the BIM</h4>\n<p>The selection supports both pre- and post-selection.</p>\n<p>You can select a bunch of elements before launching the command.\nIn that case, the first two slabs encountered in the selection will be picked.</p>\n<p>If you pre-select nothing, all floor elements in the entire model will be retrieved and the first two encountered selected.</p>\n<p>As you may have gathered, this is more geared towards effective simple testing than production use:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Two slabs to intersect.</span>\n \n  <span class=\"teal\">CeilingAndFloor</span>[] slab\n    = <span class=\"blue\">new</span> <span class=\"teal\">CeilingAndFloor</span>[2] { <span class=\"blue\">null</span>, <span class=\"blue\">null</span> };\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">int</span> n = sel.Elements.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Please select two floor or ceiling slabs to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve elements from database</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> floors\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WhereElementIsNotElementType()\n        .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Floors );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> floors )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Unable to find two floors in project to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n</pre>\n<a name=\"6\">\n<h4>Retrieve Boundaries, Intersect and Create a Floor</h4>\n<p>We have our two slabs.</p>\n<p>Let's go ahead and do the job.</p>\n<p>The Revit API imposes one unfortunate caveat: the doc.Create.NewFloor\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/create-a-floor-with-an-opening-or-complex-boundary.html\">\nfloor creation method can only handle a single exterior loop</a>.\n\n<p>We therefore ignore all but the first boundary loop returned in the intersection result, and don't even care what that actually represents.</p>\n<p>See how simple this is:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Retrieve the two slabs' boundary loops</span>\n \n  <span class=\"teal\">Polygons</span> subj = GetBoundaryLoops( slab[0] );\n  <span class=\"teal\">Polygons</span> clip = GetBoundaryLoops( slab[1] );\n \n  <span class=\"green\">// Calculate the intersection</span>\n \n  <span class=\"teal\">Polygons</span> intersection = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>();\n \n  <span class=\"teal\">Clipper</span> c = <span class=\"blue\">new</span> <span class=\"teal\">Clipper</span>();\n \n  c.AddPolygons( subj, <span class=\"teal\">PolyType</span>.ptSubject );\n \n  c.AddPolygons( clip, <span class=\"teal\">PolyType</span>.ptClip );\n \n  c.Execute( <span class=\"teal\">ClipType</span>.ctIntersection, intersection,\n    <span class=\"teal\">PolyFillType</span>.pftEvenOdd, <span class=\"teal\">PolyFillType</span>.pftEvenOdd );\n \n  <span class=\"green\">// Check for a valid intersection</span>\n \n  <span class=\"blue\">if</span>( 0 &lt; intersection.Count )\n  {\n    <span class=\"green\">// Determine new intersection floor boundary</span>\n \n    <span class=\"green\">// We can only handle a single exterior loop </span>\n    <span class=\"green\">// here, unfortunately; cf.</span>\n    <span class=\"green\">// http://thebuildingcoder.typepad.com/blog/2013/07\\</span>\n    <span class=\"green\">// /create-a-floor-with-an-opening-or-complex-boundary.html</span>\n \n    <span class=\"teal\">CurveArray</span> curves = app.Create.NewCurveArray();\n \n    <span class=\"teal\">Polygon</span> poly = intersection[0];\n \n    <span class=\"teal\">IntPoint</span>? p0 = <span class=\"blue\">null</span>; <span class=\"green\">// first</span>\n    <span class=\"teal\">IntPoint</span>? p = <span class=\"blue\">null</span>; <span class=\"green\">// previous</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">IntPoint</span> q <span class=\"blue\">in</span> poly )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n      {\n        p0 = q;\n      }\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n      {\n        curves.Append(\n          <span class=\"teal\">Line</span>.CreateBound(\n            GetXyzPoint( p.Value ),\n            GetXyzPoint( q ) ) );\n      }\n      p = q;\n    }\n \n    <span class=\"green\">// Do the dirty deed</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Intersection Floor\"</span> );\n      doc.Create.NewFloor( curves, <span class=\"blue\">false</span> );\n      tx.Commit();\n    }\n  }\n</pre>\n<p>I showed you the result above.</p>\n<p>Pretty nifty, huh?</p>\n<p>Oh yes, please also note my first use of\n\n<a href=\"http://stackoverflow.com/questions/2735638/nullable-integer-in-net\">\nnullable values</a>.\n\nVery useful indeed  :-)</p>\n<a name=\"7\">\n<h4>Download</h4>\n<p>One nice aspect of this version is that the C# version of the Clipper library is provided in its entirety by the clipper_library project included in my add-in Visual Studio solution, so you do not even need to download it separately yourself to make use of this.</p>\n<p>You do need to ensure that the Clipper .NET assembly is located where the add-in assembly can find it, though.\nI'll leave that up to you, of course.</p>\n<p>Here is\n\n<a href=\"zip/RvtClipper.zip\">RvtClipper.zip</a> containing\n\nthe complete add-in and library source code, solution, and add-in manifest.</p>\n<p>I wish you lots of fun and success making use of this, and please let us know what experiences you make and what nice uses you put it to.\nThank you.</p>\n</a></p></a></a></a></a>"
  },
  {
    "original_filename": "1011_booleans_on_polygons",
    "header_text": "Clipper and Revit Point Class Translation",
    "local_header_href": "#clipper-and-revit-point-class-translation",
    "chunk_text": "<h4>Clipper and Revit Point Class Translation</h4><p>Part of the Clipper speed and reliability presumably stems from the fact that it is integer-based, eliminating all the rounding problems dealing with real numbers.</p><p>It uses an IntPoint class with two Int64 X and Y coordinates.</p><p>I have often approximated Revit XYZ vertices using integer-based point classes in the past, so this seems pretty appropriate for me.</p><p>Once again, I decided to simply convert the Revit XYZ imperial coordinates to millimetres.\nThat choice is completely arbitrary.\nIf you prefer higher precision, please be my guest.</p><p>Here is the code I use to convert back and forth between the two systems:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Consider a Revit length zero </span>\n  <span class=\"gray\">///</span><span class=\"green\"> if is smaller than this.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _eps = 1.0e-9;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion factor from feet to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">const</span> <span class=\"blue\">double</span> _feet_to_mm = 25.4 * 12;\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion a given length value </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from feet to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">long</span> ConvertFeetToMillimetres( <span class=\"blue\">double</span> d )\n  {\n    <span class=\"blue\">if</span>( 0 &lt; d )\n    {\n      <span class=\"blue\">return</span> _eps &gt; d\n        ? 0\n        : (<span class=\"blue\">long</span>) ( _feet_to_mm * d + 0.5 );\n \n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"blue\">return</span> _eps &gt; -d\n        ? 0\n        : (<span class=\"blue\">long</span>) ( _feet_to_mm * d - 0.5 );\n \n    }\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Conversion a given length value </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from millimetres to feet.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">static</span> <span class=\"blue\">double</span> ConvertMillimetresToFeet( <span class=\"blue\">long</span> d )\n  {\n    <span class=\"blue\">return</span> d / _feet_to_mm;\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a clipper integer point </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from a Revit model space one.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Do so by dropping the Z coordinate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and converting from imperial feet </span>\n  <span class=\"gray\">///</span><span class=\"green\"> to millimetres.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">IntPoint</span> GetIntPoint( <span class=\"teal\">XYZ</span> p )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">IntPoint</span>(\n      ConvertFeetToMillimetres( p.X ),\n      ConvertFeetToMillimetres( p.Y ) );\n  }\n \n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return a Revit model space point </span>\n  <span class=\"gray\">///</span><span class=\"green\"> from a clipper integer one.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Do so by adding a zero Z coordinate</span>\n  <span class=\"gray\">///</span><span class=\"green\"> and converting from millimetres to</span>\n  <span class=\"gray\">///</span><span class=\"green\"> imperial feet.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"teal\">XYZ</span> GetXyzPoint( <span class=\"teal\">IntPoint</span> p )\n  {\n    <span class=\"blue\">return</span> <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n      ConvertMillimetresToFeet( p.X ),\n      ConvertMillimetresToFeet( p.Y ),\n      0.0 );\n  }\n</pre><a name=\"4\">\n<h4>GetBoundaryLoops – Return Horizontal Slab Boundary Loops</h4>\n<p>Ok, so we now know how to convert a Revit point to a Clipper one.</p>\n<p>How do we represent an entire boundary loop, and how can that data be retrieved from a BIM slab?</p>\n<p>That is achieved in one fell swoop by the GetBoundaryLoops method, returning a collection of Clipper polygons.</p>\n<p>A single slab may generate multiple loops, both due to holes in its interior and due to consisting of several separate pieces:</p>\n<pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the boundary loops of the given slab </span>\n<span class=\"gray\">///</span><span class=\"green\"> top face, which is assumed to be horizontal.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Polygons</span> GetBoundaryLoops( <span class=\"teal\">CeilingAndFloor</span> slab )\n{\n  <span class=\"blue\">int</span> n;\n  <span class=\"teal\">Polygons</span> polys = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Document</span> doc = slab.Document;\n  <span class=\"teal\">Application</span> app = doc.Application;\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  <span class=\"teal\">GeometryElement</span> geo = slab.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n      {\n        <span class=\"teal\">PlanarFace</span> pf = face <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != pf\n          &amp;&amp; pf.Normal.IsAlmostEqualTo( <span class=\"teal\">XYZ</span>.BasisZ ) )\n        {\n          <span class=\"teal\">EdgeArrayArray</span> loops = pf.EdgeLoops;\n \n          n = loops.Size;\n          polys = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>( n );\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> loop <span class=\"blue\">in</span> loops )\n          {\n            n = loop.Size;\n            <span class=\"teal\">Polygon</span> poly = <span class=\"blue\">new</span> <span class=\"teal\">Polygon</span>( n );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> loop )\n            {\n              <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = edge.Tessellate();\n \n              n = pts.Count;\n \n              <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n              {\n                poly.Add( GetIntPoint( p ) );\n              }\n            }\n            polys.Add( poly );\n          }\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> polys;\n}\n</pre>\n<p>With all of that in place, we have nothing more to do before proceeding with the external command mainline.</p>\n<p>As mostly, it consists of two parts: the user interface to select the two slabs to intersect, and the worker code to do the job.</p>\n<a name=\"5\">\n<h4>Select Two Slabs in the BIM</h4>\n<p>The selection supports both pre- and post-selection.</p>\n<p>You can select a bunch of elements before launching the command.\nIn that case, the first two slabs encountered in the selection will be picked.</p>\n<p>If you pre-select nothing, all floor elements in the entire model will be retrieved and the first two encountered selected.</p>\n<p>As you may have gathered, this is more geared towards effective simple testing than production use:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Two slabs to intersect.</span>\n \n  <span class=\"teal\">CeilingAndFloor</span>[] slab\n    = <span class=\"blue\">new</span> <span class=\"teal\">CeilingAndFloor</span>[2] { <span class=\"blue\">null</span>, <span class=\"blue\">null</span> };\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">int</span> n = sel.Elements.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Please select two floor or ceiling slabs to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve elements from database</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> floors\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WhereElementIsNotElementType()\n        .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Floors );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> floors )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Unable to find two floors in project to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n</pre>\n<a name=\"6\">\n<h4>Retrieve Boundaries, Intersect and Create a Floor</h4>\n<p>We have our two slabs.</p>\n<p>Let's go ahead and do the job.</p>\n<p>The Revit API imposes one unfortunate caveat: the doc.Create.NewFloor\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/create-a-floor-with-an-opening-or-complex-boundary.html\">\nfloor creation method can only handle a single exterior loop</a>.\n\n<p>We therefore ignore all but the first boundary loop returned in the intersection result, and don't even care what that actually represents.</p>\n<p>See how simple this is:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Retrieve the two slabs' boundary loops</span>\n \n  <span class=\"teal\">Polygons</span> subj = GetBoundaryLoops( slab[0] );\n  <span class=\"teal\">Polygons</span> clip = GetBoundaryLoops( slab[1] );\n \n  <span class=\"green\">// Calculate the intersection</span>\n \n  <span class=\"teal\">Polygons</span> intersection = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>();\n \n  <span class=\"teal\">Clipper</span> c = <span class=\"blue\">new</span> <span class=\"teal\">Clipper</span>();\n \n  c.AddPolygons( subj, <span class=\"teal\">PolyType</span>.ptSubject );\n \n  c.AddPolygons( clip, <span class=\"teal\">PolyType</span>.ptClip );\n \n  c.Execute( <span class=\"teal\">ClipType</span>.ctIntersection, intersection,\n    <span class=\"teal\">PolyFillType</span>.pftEvenOdd, <span class=\"teal\">PolyFillType</span>.pftEvenOdd );\n \n  <span class=\"green\">// Check for a valid intersection</span>\n \n  <span class=\"blue\">if</span>( 0 &lt; intersection.Count )\n  {\n    <span class=\"green\">// Determine new intersection floor boundary</span>\n \n    <span class=\"green\">// We can only handle a single exterior loop </span>\n    <span class=\"green\">// here, unfortunately; cf.</span>\n    <span class=\"green\">// http://thebuildingcoder.typepad.com/blog/2013/07\\</span>\n    <span class=\"green\">// /create-a-floor-with-an-opening-or-complex-boundary.html</span>\n \n    <span class=\"teal\">CurveArray</span> curves = app.Create.NewCurveArray();\n \n    <span class=\"teal\">Polygon</span> poly = intersection[0];\n \n    <span class=\"teal\">IntPoint</span>? p0 = <span class=\"blue\">null</span>; <span class=\"green\">// first</span>\n    <span class=\"teal\">IntPoint</span>? p = <span class=\"blue\">null</span>; <span class=\"green\">// previous</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">IntPoint</span> q <span class=\"blue\">in</span> poly )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n      {\n        p0 = q;\n      }\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n      {\n        curves.Append(\n          <span class=\"teal\">Line</span>.CreateBound(\n            GetXyzPoint( p.Value ),\n            GetXyzPoint( q ) ) );\n      }\n      p = q;\n    }\n \n    <span class=\"green\">// Do the dirty deed</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Intersection Floor\"</span> );\n      doc.Create.NewFloor( curves, <span class=\"blue\">false</span> );\n      tx.Commit();\n    }\n  }\n</pre>\n<p>I showed you the result above.</p>\n<p>Pretty nifty, huh?</p>\n<p>Oh yes, please also note my first use of\n\n<a href=\"http://stackoverflow.com/questions/2735638/nullable-integer-in-net\">\nnullable values</a>.\n\nVery useful indeed  :-)</p>\n<a name=\"7\">\n<h4>Download</h4>\n<p>One nice aspect of this version is that the C# version of the Clipper library is provided in its entirety by the clipper_library project included in my add-in Visual Studio solution, so you do not even need to download it separately yourself to make use of this.</p>\n<p>You do need to ensure that the Clipper .NET assembly is located where the add-in assembly can find it, though.\nI'll leave that up to you, of course.</p>\n<p>Here is\n\n<a href=\"zip/RvtClipper.zip\">RvtClipper.zip</a> containing\n\nthe complete add-in and library source code, solution, and add-in manifest.</p>\n<p>I wish you lots of fun and success making use of this, and please let us know what experiences you make and what nice uses you put it to.\nThank you.</p>\n</a></p></a></a></a>"
  },
  {
    "original_filename": "1011_booleans_on_polygons",
    "header_text": "GetBoundaryLoops – Return Horizontal Slab Boundary Loops",
    "local_header_href": "#getboundaryloops-return-horizontal-slab-boundary-loops",
    "chunk_text": "<h4>GetBoundaryLoops – Return Horizontal Slab Boundary Loops</h4><p>Ok, so we now know how to convert a Revit point to a Clipper one.</p><p>How do we represent an entire boundary loop, and how can that data be retrieved from a BIM slab?</p><p>That is achieved in one fell swoop by the GetBoundaryLoops method, returning a collection of Clipper polygons.</p><p>A single slab may generate multiple loops, both due to holes in its interior and due to consisting of several separate pieces:</p><pre class=\"code\">\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n<span class=\"gray\">///</span><span class=\"green\"> Retrieve the boundary loops of the given slab </span>\n<span class=\"gray\">///</span><span class=\"green\"> top face, which is assumed to be horizontal.</span>\n<span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n<span class=\"teal\">Polygons</span> GetBoundaryLoops( <span class=\"teal\">CeilingAndFloor</span> slab )\n{\n  <span class=\"blue\">int</span> n;\n  <span class=\"teal\">Polygons</span> polys = <span class=\"blue\">null</span>;\n  <span class=\"teal\">Document</span> doc = slab.Document;\n  <span class=\"teal\">Application</span> app = doc.Application;\n \n  <span class=\"teal\">Options</span> opt = app.Create.NewGeometryOptions();\n \n  <span class=\"teal\">GeometryElement</span> geo = slab.get_Geometry( opt );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">GeometryObject</span> obj <span class=\"blue\">in</span> geo )\n  {\n    <span class=\"teal\">Solid</span> solid = obj <span class=\"blue\">as</span> <span class=\"teal\">Solid</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != solid )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Face</span> face <span class=\"blue\">in</span> solid.Faces )\n      {\n        <span class=\"teal\">PlanarFace</span> pf = face <span class=\"blue\">as</span> <span class=\"teal\">PlanarFace</span>;\n        <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != pf\n          &amp;&amp; pf.Normal.IsAlmostEqualTo( <span class=\"teal\">XYZ</span>.BasisZ ) )\n        {\n          <span class=\"teal\">EdgeArrayArray</span> loops = pf.EdgeLoops;\n \n          n = loops.Size;\n          polys = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>( n );\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">EdgeArray</span> loop <span class=\"blue\">in</span> loops )\n          {\n            n = loop.Size;\n            <span class=\"teal\">Polygon</span> poly = <span class=\"blue\">new</span> <span class=\"teal\">Polygon</span>( n );\n \n            <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> loop )\n            {\n              <span class=\"teal\">IList</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = edge.Tessellate();\n \n              n = pts.Count;\n \n              <span class=\"blue\">foreach</span>( <span class=\"teal\">XYZ</span> p <span class=\"blue\">in</span> pts )\n              {\n                poly.Add( GetIntPoint( p ) );\n              }\n            }\n            polys.Add( poly );\n          }\n        }\n      }\n    }\n  }\n  <span class=\"blue\">return</span> polys;\n}\n</pre><p>With all of that in place, we have nothing more to do before proceeding with the external command mainline.</p><p>As mostly, it consists of two parts: the user interface to select the two slabs to intersect, and the worker code to do the job.</p><a name=\"5\">\n<h4>Select Two Slabs in the BIM</h4>\n<p>The selection supports both pre- and post-selection.</p>\n<p>You can select a bunch of elements before launching the command.\nIn that case, the first two slabs encountered in the selection will be picked.</p>\n<p>If you pre-select nothing, all floor elements in the entire model will be retrieved and the first two encountered selected.</p>\n<p>As you may have gathered, this is more geared towards effective simple testing than production use:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Two slabs to intersect.</span>\n \n  <span class=\"teal\">CeilingAndFloor</span>[] slab\n    = <span class=\"blue\">new</span> <span class=\"teal\">CeilingAndFloor</span>[2] { <span class=\"blue\">null</span>, <span class=\"blue\">null</span> };\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">int</span> n = sel.Elements.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Please select two floor or ceiling slabs to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve elements from database</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> floors\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WhereElementIsNotElementType()\n        .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Floors );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> floors )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Unable to find two floors in project to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n</pre>\n<a name=\"6\">\n<h4>Retrieve Boundaries, Intersect and Create a Floor</h4>\n<p>We have our two slabs.</p>\n<p>Let's go ahead and do the job.</p>\n<p>The Revit API imposes one unfortunate caveat: the doc.Create.NewFloor\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/create-a-floor-with-an-opening-or-complex-boundary.html\">\nfloor creation method can only handle a single exterior loop</a>.\n\n<p>We therefore ignore all but the first boundary loop returned in the intersection result, and don't even care what that actually represents.</p>\n<p>See how simple this is:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Retrieve the two slabs' boundary loops</span>\n \n  <span class=\"teal\">Polygons</span> subj = GetBoundaryLoops( slab[0] );\n  <span class=\"teal\">Polygons</span> clip = GetBoundaryLoops( slab[1] );\n \n  <span class=\"green\">// Calculate the intersection</span>\n \n  <span class=\"teal\">Polygons</span> intersection = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>();\n \n  <span class=\"teal\">Clipper</span> c = <span class=\"blue\">new</span> <span class=\"teal\">Clipper</span>();\n \n  c.AddPolygons( subj, <span class=\"teal\">PolyType</span>.ptSubject );\n \n  c.AddPolygons( clip, <span class=\"teal\">PolyType</span>.ptClip );\n \n  c.Execute( <span class=\"teal\">ClipType</span>.ctIntersection, intersection,\n    <span class=\"teal\">PolyFillType</span>.pftEvenOdd, <span class=\"teal\">PolyFillType</span>.pftEvenOdd );\n \n  <span class=\"green\">// Check for a valid intersection</span>\n \n  <span class=\"blue\">if</span>( 0 &lt; intersection.Count )\n  {\n    <span class=\"green\">// Determine new intersection floor boundary</span>\n \n    <span class=\"green\">// We can only handle a single exterior loop </span>\n    <span class=\"green\">// here, unfortunately; cf.</span>\n    <span class=\"green\">// http://thebuildingcoder.typepad.com/blog/2013/07\\</span>\n    <span class=\"green\">// /create-a-floor-with-an-opening-or-complex-boundary.html</span>\n \n    <span class=\"teal\">CurveArray</span> curves = app.Create.NewCurveArray();\n \n    <span class=\"teal\">Polygon</span> poly = intersection[0];\n \n    <span class=\"teal\">IntPoint</span>? p0 = <span class=\"blue\">null</span>; <span class=\"green\">// first</span>\n    <span class=\"teal\">IntPoint</span>? p = <span class=\"blue\">null</span>; <span class=\"green\">// previous</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">IntPoint</span> q <span class=\"blue\">in</span> poly )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n      {\n        p0 = q;\n      }\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n      {\n        curves.Append(\n          <span class=\"teal\">Line</span>.CreateBound(\n            GetXyzPoint( p.Value ),\n            GetXyzPoint( q ) ) );\n      }\n      p = q;\n    }\n \n    <span class=\"green\">// Do the dirty deed</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Intersection Floor\"</span> );\n      doc.Create.NewFloor( curves, <span class=\"blue\">false</span> );\n      tx.Commit();\n    }\n  }\n</pre>\n<p>I showed you the result above.</p>\n<p>Pretty nifty, huh?</p>\n<p>Oh yes, please also note my first use of\n\n<a href=\"http://stackoverflow.com/questions/2735638/nullable-integer-in-net\">\nnullable values</a>.\n\nVery useful indeed  :-)</p>\n<a name=\"7\">\n<h4>Download</h4>\n<p>One nice aspect of this version is that the C# version of the Clipper library is provided in its entirety by the clipper_library project included in my add-in Visual Studio solution, so you do not even need to download it separately yourself to make use of this.</p>\n<p>You do need to ensure that the Clipper .NET assembly is located where the add-in assembly can find it, though.\nI'll leave that up to you, of course.</p>\n<p>Here is\n\n<a href=\"zip/RvtClipper.zip\">RvtClipper.zip</a> containing\n\nthe complete add-in and library source code, solution, and add-in manifest.</p>\n<p>I wish you lots of fun and success making use of this, and please let us know what experiences you make and what nice uses you put it to.\nThank you.</p>\n</a></p></a></a>"
  },
  {
    "original_filename": "1011_booleans_on_polygons",
    "header_text": "Select Two Slabs in the BIM",
    "local_header_href": "#select-two-slabs-in-the-bim",
    "chunk_text": "<h4>Select Two Slabs in the BIM</h4><p>The selection supports both pre- and post-selection.</p><p>You can select a bunch of elements before launching the command.\nIn that case, the first two slabs encountered in the selection will be picked.</p><p>If you pre-select nothing, all floor elements in the entire model will be retrieved and the first two encountered selected.</p><p>As you may have gathered, this is more geared towards effective simple testing than production use:</p><pre class=\"code\">\n  <span class=\"green\">// Two slabs to intersect.</span>\n \n  <span class=\"teal\">CeilingAndFloor</span>[] slab\n    = <span class=\"blue\">new</span> <span class=\"teal\">CeilingAndFloor</span>[2] { <span class=\"blue\">null</span>, <span class=\"blue\">null</span> };\n \n  <span class=\"green\">// Access current selection</span>\n \n  <span class=\"teal\">Selection</span> sel = uidoc.Selection;\n \n  <span class=\"blue\">int</span> n = sel.Elements.Size;\n \n  <span class=\"blue\">if</span>( 0 &lt; n )\n  {\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> sel.Elements )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Please select two floor or ceiling slabs to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"green\">// Retrieve elements from database</span>\n \n    <span class=\"teal\">FilteredElementCollector</span> floors\n      = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( doc )\n        .WhereElementIsNotElementType()\n        .OfCategory( <span class=\"teal\">BuiltInCategory</span>.OST_Floors );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Element</span> e <span class=\"blue\">in</span> floors )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] )\n      {\n        slab[0] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span> <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[1] )\n      {\n        slab[1] = e <span class=\"blue\">as</span> <span class=\"teal\">Floor</span>;\n      }\n      <span class=\"blue\">else</span>\n      {\n        <span class=\"blue\">break</span>;\n      }\n    }\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == slab[0] || <span class=\"blue\">null</span> == slab[1] )\n    {\n      message = <span class=\"maroon\">\"Unable to find two floors in project to intersect.\"</span>;\n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n    }\n  }\n</pre><a name=\"6\">\n<h4>Retrieve Boundaries, Intersect and Create a Floor</h4>\n<p>We have our two slabs.</p>\n<p>Let's go ahead and do the job.</p>\n<p>The Revit API imposes one unfortunate caveat: the doc.Create.NewFloor\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/create-a-floor-with-an-opening-or-complex-boundary.html\">\nfloor creation method can only handle a single exterior loop</a>.\n\n<p>We therefore ignore all but the first boundary loop returned in the intersection result, and don't even care what that actually represents.</p>\n<p>See how simple this is:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Retrieve the two slabs' boundary loops</span>\n \n  <span class=\"teal\">Polygons</span> subj = GetBoundaryLoops( slab[0] );\n  <span class=\"teal\">Polygons</span> clip = GetBoundaryLoops( slab[1] );\n \n  <span class=\"green\">// Calculate the intersection</span>\n \n  <span class=\"teal\">Polygons</span> intersection = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>();\n \n  <span class=\"teal\">Clipper</span> c = <span class=\"blue\">new</span> <span class=\"teal\">Clipper</span>();\n \n  c.AddPolygons( subj, <span class=\"teal\">PolyType</span>.ptSubject );\n \n  c.AddPolygons( clip, <span class=\"teal\">PolyType</span>.ptClip );\n \n  c.Execute( <span class=\"teal\">ClipType</span>.ctIntersection, intersection,\n    <span class=\"teal\">PolyFillType</span>.pftEvenOdd, <span class=\"teal\">PolyFillType</span>.pftEvenOdd );\n \n  <span class=\"green\">// Check for a valid intersection</span>\n \n  <span class=\"blue\">if</span>( 0 &lt; intersection.Count )\n  {\n    <span class=\"green\">// Determine new intersection floor boundary</span>\n \n    <span class=\"green\">// We can only handle a single exterior loop </span>\n    <span class=\"green\">// here, unfortunately; cf.</span>\n    <span class=\"green\">// http://thebuildingcoder.typepad.com/blog/2013/07\\</span>\n    <span class=\"green\">// /create-a-floor-with-an-opening-or-complex-boundary.html</span>\n \n    <span class=\"teal\">CurveArray</span> curves = app.Create.NewCurveArray();\n \n    <span class=\"teal\">Polygon</span> poly = intersection[0];\n \n    <span class=\"teal\">IntPoint</span>? p0 = <span class=\"blue\">null</span>; <span class=\"green\">// first</span>\n    <span class=\"teal\">IntPoint</span>? p = <span class=\"blue\">null</span>; <span class=\"green\">// previous</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">IntPoint</span> q <span class=\"blue\">in</span> poly )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n      {\n        p0 = q;\n      }\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n      {\n        curves.Append(\n          <span class=\"teal\">Line</span>.CreateBound(\n            GetXyzPoint( p.Value ),\n            GetXyzPoint( q ) ) );\n      }\n      p = q;\n    }\n \n    <span class=\"green\">// Do the dirty deed</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Intersection Floor\"</span> );\n      doc.Create.NewFloor( curves, <span class=\"blue\">false</span> );\n      tx.Commit();\n    }\n  }\n</pre>\n<p>I showed you the result above.</p>\n<p>Pretty nifty, huh?</p>\n<p>Oh yes, please also note my first use of\n\n<a href=\"http://stackoverflow.com/questions/2735638/nullable-integer-in-net\">\nnullable values</a>.\n\nVery useful indeed  :-)</p>\n<a name=\"7\">\n<h4>Download</h4>\n<p>One nice aspect of this version is that the C# version of the Clipper library is provided in its entirety by the clipper_library project included in my add-in Visual Studio solution, so you do not even need to download it separately yourself to make use of this.</p>\n<p>You do need to ensure that the Clipper .NET assembly is located where the add-in assembly can find it, though.\nI'll leave that up to you, of course.</p>\n<p>Here is\n\n<a href=\"zip/RvtClipper.zip\">RvtClipper.zip</a> containing\n\nthe complete add-in and library source code, solution, and add-in manifest.</p>\n<p>I wish you lots of fun and success making use of this, and please let us know what experiences you make and what nice uses you put it to.\nThank you.</p>\n</a></p></a>"
  },
  {
    "original_filename": "1011_booleans_on_polygons",
    "header_text": "Retrieve Boundaries, Intersect and Create a Floor",
    "local_header_href": "#retrieve-boundaries-intersect-and-create-a-floor",
    "chunk_text": "<h4>Retrieve Boundaries, Intersect and Create a Floor</h4><p>We have our two slabs.</p><p>Let's go ahead and do the job.</p><p>The Revit API imposes one unfortunate caveat: the doc.Create.NewFloor\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/create-a-floor-with-an-opening-or-complex-boundary.html\">\nfloor creation method can only handle a single exterior loop</a>.\n\n<p>We therefore ignore all but the first boundary loop returned in the intersection result, and don't even care what that actually represents.</p>\n<p>See how simple this is:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Retrieve the two slabs' boundary loops</span>\n \n  <span class=\"teal\">Polygons</span> subj = GetBoundaryLoops( slab[0] );\n  <span class=\"teal\">Polygons</span> clip = GetBoundaryLoops( slab[1] );\n \n  <span class=\"green\">// Calculate the intersection</span>\n \n  <span class=\"teal\">Polygons</span> intersection = <span class=\"blue\">new</span> <span class=\"teal\">Polygons</span>();\n \n  <span class=\"teal\">Clipper</span> c = <span class=\"blue\">new</span> <span class=\"teal\">Clipper</span>();\n \n  c.AddPolygons( subj, <span class=\"teal\">PolyType</span>.ptSubject );\n \n  c.AddPolygons( clip, <span class=\"teal\">PolyType</span>.ptClip );\n \n  c.Execute( <span class=\"teal\">ClipType</span>.ctIntersection, intersection,\n    <span class=\"teal\">PolyFillType</span>.pftEvenOdd, <span class=\"teal\">PolyFillType</span>.pftEvenOdd );\n \n  <span class=\"green\">// Check for a valid intersection</span>\n \n  <span class=\"blue\">if</span>( 0 &lt; intersection.Count )\n  {\n    <span class=\"green\">// Determine new intersection floor boundary</span>\n \n    <span class=\"green\">// We can only handle a single exterior loop </span>\n    <span class=\"green\">// here, unfortunately; cf.</span>\n    <span class=\"green\">// http://thebuildingcoder.typepad.com/blog/2013/07\\</span>\n    <span class=\"green\">// /create-a-floor-with-an-opening-or-complex-boundary.html</span>\n \n    <span class=\"teal\">CurveArray</span> curves = app.Create.NewCurveArray();\n \n    <span class=\"teal\">Polygon</span> poly = intersection[0];\n \n    <span class=\"teal\">IntPoint</span>? p0 = <span class=\"blue\">null</span>; <span class=\"green\">// first</span>\n    <span class=\"teal\">IntPoint</span>? p = <span class=\"blue\">null</span>; <span class=\"green\">// previous</span>\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">IntPoint</span> q <span class=\"blue\">in</span> poly )\n    {\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> == p0 )\n      {\n        p0 = q;\n      }\n      <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != p )\n      {\n        curves.Append(\n          <span class=\"teal\">Line</span>.CreateBound(\n            GetXyzPoint( p.Value ),\n            GetXyzPoint( q ) ) );\n      }\n      p = q;\n    }\n \n    <span class=\"green\">// Do the dirty deed</span>\n \n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> tx = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc ) )\n    {\n      tx.Start( <span class=\"maroon\">\"Create Intersection Floor\"</span> );\n      doc.Create.NewFloor( curves, <span class=\"blue\">false</span> );\n      tx.Commit();\n    }\n  }\n</pre>\n<p>I showed you the result above.</p>\n<p>Pretty nifty, huh?</p>\n<p>Oh yes, please also note my first use of\n\n<a href=\"http://stackoverflow.com/questions/2735638/nullable-integer-in-net\">\nnullable values</a>.\n\nVery useful indeed  :-)</p>\n<a name=\"7\">\n<h4>Download</h4>\n<p>One nice aspect of this version is that the C# version of the Clipper library is provided in its entirety by the clipper_library project included in my add-in Visual Studio solution, so you do not even need to download it separately yourself to make use of this.</p>\n<p>You do need to ensure that the Clipper .NET assembly is located where the add-in assembly can find it, though.\nI'll leave that up to you, of course.</p>\n<p>Here is\n\n<a href=\"zip/RvtClipper.zip\">RvtClipper.zip</a> containing\n\nthe complete add-in and library source code, solution, and add-in manifest.</p>\n<p>I wish you lots of fun and success making use of this, and please let us know what experiences you make and what nice uses you put it to.\nThank you.</p>\n</a></p>"
  },
  {
    "original_filename": "1011_booleans_on_polygons",
    "header_text": "Download",
    "local_header_href": "#download",
    "chunk_text": "<h4>Download</h4><p>One nice aspect of this version is that the C# version of the Clipper library is provided in its entirety by the clipper_library project included in my add-in Visual Studio solution, so you do not even need to download it separately yourself to make use of this.</p><p>You do need to ensure that the Clipper .NET assembly is located where the add-in assembly can find it, though.\nI'll leave that up to you, of course.</p><p>Here is\n\n<a href=\"zip/RvtClipper.zip\">RvtClipper.zip</a> containing\n\nthe complete add-in and library source code, solution, and add-in manifest.</p><p>I wish you lots of fun and success making use of this, and please let us know what experiences you make and what nice uses you put it to.\nThank you.</p>"
  }
]