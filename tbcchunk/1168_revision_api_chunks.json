[
  {
    "original_filename": "1168_revision_api",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1168_revision_api",
    "header_text": "The Revision API and a Form on the Fly",
    "local_header_href": "#the-revision-api-and-a-form-on-the-fly",
    "chunk_text": "<h3>The Revision API and a Form on the Fly</h3><p>Poetical, ain't it?</p><p>One of the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html#3\">\nmajor Revit 2015 API additions</a> is\n\naccess to\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html#3.04\">\nrevisions</a>.</p><p>All prior versions provided very limited access to revision data in a project.\nHere are some things people achieved in spite of the limitations:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/09/max-revision-wrapper-class.html\">Max' revision wrapper class</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2014/02/wrangling-revisions-with-ruby.html\">Wrangling revisions with Ruby</a></li>\n</ul><p>Let's now take a look at an elegant example of accessing and displaying the complete revision data in a project,\n\n<a href=\"https://github.com/jeremytammik/GetRevisionData\">\nGetRevisionData</a>,\n\nprompted by the following query by Dan Tartaglia of\n\n<a href=\"http://www.nbbj.com\">\ndesign technology@NBBJ</a>:</p><p><strong>Question:</strong> Selecting the View tab in Revit and then Revisions in the Sheet Composition pane displays  the 'Sheet Issues/Revisions' dialogue:</p><center>\n<img alt=\"Sheet Issues Revisions dialogue\" src=\"img/sheet_issues_revisions.png\"/>\n</center><p>I am trying to access the information displayed programmatically, in particular the information for these revisions  found in the 'Show' column with the three possible choices 'None', 'Tag' and 'Cloud and Tag'.</p><p>Is that possible?</p><p>I am currently using the GetAllProjectRevisionIds method, but that does not return all the required information.</p><p><strong>Answer:</strong> What you ask for is now possible in Revit 2015 using the new\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2014/04/whats-new-in-the-revit-2015-api.html#3.04\">\nrevision classes</a>.</p><p>I am not aware of any way to access it programmatically in Revit 2014, though.\nDevelopers have been asking for it for a long time, and that access was one of the major Revit 2015 API enhancements.</p><p>Examining your\n\n<a href=\"https://github.com/jeremytammik/GetRevisionData/releases/tag/2014.0.0.0\">\nRevit 2014 GetRevisionData attempt</a> in\n\na little more detail, I have some comments on that before getting to the Revit 2015 solution.</p><p>It includes a nice utility method GetParameterInformation to convert a parameter value to a string representation.\nThat is used by the ParamsFromGetAllRevElements method to retrieve all project revisions via their ids and list all their parameter values.</p><p>However, as said, it does not return the information we are after.</p><p>I fixed the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/06/processor-architecture-mismatch-warning.html\">\narchitecture mismatch warnings</a> in\n\nthe initial 2014 project using my recursive project parser and fixer\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/07/recursively-disable-architecture-mismatch-warning.html\">\nDisableMismatchWarning.exe</a>.</p><p>I like the parameter to value to string converter, so let's list it here for posterity to enjoy:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Extract the parameter information.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> By Dan Tartaglia.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">string</span> GetParameterInformation(\n    <span class=\"teal\">Parameter</span> para,\n    <span class=\"teal\">Document</span> doc )\n  {\n    <span class=\"blue\">string</span> defName = <span class=\"maroon\">\"\"</span>;\n \n    <span class=\"green\">// Use different method to get parameter </span>\n    <span class=\"green\">// data according to the storage type</span>\n \n    <span class=\"blue\">switch</span>( para.StorageType )\n    {\n      <span class=\"green\">// Determine the parameter type </span>\n \n      <span class=\"blue\">case</span> <span class=\"teal\">StorageType</span>.Double:\n \n        <span class=\"green\">// Convert the number into Metric</span>\n \n        defName = para.AsValueString();\n        <span class=\"blue\">break</span>;\n \n      <span class=\"blue\">case</span> <span class=\"teal\">StorageType</span>.ElementId:\n \n        <span class=\"green\">// Find out the name of the element</span>\n \n        Autodesk.Revit.DB.<span class=\"teal\">ElementId</span> id\n          = para.AsElementId();\n \n        defName = ( id.IntegerValue &gt;= 0 )\n          ? doc.GetElement( id ).Name\n          : id.IntegerValue.ToString();\n \n        <span class=\"blue\">break</span>;\n \n      <span class=\"blue\">case</span> <span class=\"teal\">StorageType</span>.Integer:\n        <span class=\"blue\">if</span>( <span class=\"teal\">ParameterType</span>.YesNo\n          == para.Definition.ParameterType )\n        {\n          <span class=\"blue\">if</span>( para.AsInteger() == 0 )\n          {\n            defName = <span class=\"maroon\">\"False\"</span>;\n          }\n          <span class=\"blue\">else</span>\n          {\n            defName = <span class=\"maroon\">\"True\"</span>;\n          }\n        }\n        <span class=\"blue\">else</span>\n        {\n          defName = para.AsInteger().ToString();\n        }\n        <span class=\"blue\">break</span>;\n \n      <span class=\"blue\">case</span> <span class=\"teal\">StorageType</span>.String:\n        defName = para.AsString();\n        <span class=\"blue\">break</span>;\n \n      <span class=\"blue\">default</span>:\n        defName = <span class=\"maroon\">\"Unexposed parameter\"</span>;\n        <span class=\"blue\">break</span>;\n    }\n    <span class=\"blue\">return</span> defName;\n  }\n</pre><p>One little suggestion I have is to encapsulate the text writer instance in a using block, e.g. like this:</p><pre class=\"code\">\n  using( TextWriter tw = new StreamWriter(\n    \"C:/tmp/RevisionTest.txt\" ) )\n  {\n    tw.WriteLine( \". . .\" );\n    tw.Close();\n  }\n</pre><p>For comparison with the Revit 2015 results, let's list the limited data accessible via the Revit 2014 API here, printed out to a text file <code>C:/tmp/RevisionTest.txt</code>:</p><pre class=\"code\">\nC:\\tmp&gt;cat RevisionTest.txt\nHidden = False\nElement Name: Revisions\noParamRevEnum = 0\noParamRevDate = Date 1\noParamRevDescrip = Revision 1\noParamRevIssued = False\noParamRevIssuedBy =\noParamRevIssuedTo =\noParamRevNumber = 1\noParamSeqNumber = 1\n==============================\nHidden = False\nElement Name: Revisions\noParamRevEnum = 0\noParamRevDate = Date 2\noParamRevDescrip = Revision 2\noParamRevIssued = False\noParamRevIssuedBy =\noParamRevIssuedTo =\noParamRevNumber = 2\noParamSeqNumber = 2\n==============================\nHidden = False\nElement Name: Revisions\noParamRevEnum = 0\noParamRevDate = Date 5\noParamRevDescrip = Revision 5\noParamRevIssued = False\noParamRevIssuedBy =\noParamRevIssuedTo =\noParamRevNumber = 5\noParamSeqNumber = 5\n==============================\n</pre><p>I published the Revit 2014 version in the\n\n<a href=\"https://github.com/jeremytammik/GetRevisionData\">\nGetRevisionData GitHub repository</a> as\n\n<a href=\"https://github.com/jeremytammik/GetRevisionData/releases/tag/2014.0.0.0\">\nversion 2014.0.0.0</a>.</p><p><strong>Response:</strong> Yes, I verified that I can get what I need with the Revit 2015 API like this:</p><pre class=\"code\">\n  <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementId</span>&gt; oElemIDs = oViewSheet.GetAllRevisionIds();\n \n  <span class=\"blue\">if</span>( oElemIDs.Count == 0 )\n    <span class=\"blue\">return</span>;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> elemID <span class=\"blue\">in</span> oElemIDs )\n  {\n    <span class=\"teal\">Element</span> oEl = doc.GetElement( elemID );\n \n    <span class=\"teal\">Revision</span> oRev = oEl <span class=\"blue\">as</span> <span class=\"teal\">Revision</span>;\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Category Name: \"</span> + oRev.Category.Name );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Description: \"</span> + oRev.Description );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Issued: \"</span> + oRev.Issued.ToString() );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Issued By: \"</span> + oRev.IssuedBy.ToString() );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Issued To: \"</span> + oRev.IssuedTo.ToString() );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Number Type: \"</span> + oRev.NumberType.ToString() );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Date: \"</span> + oRev.RevisionDate );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Visibility: \"</span> + oRev.Visibility.ToString() );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Sequence Number: \"</span> + oRev.SequenceNumber.ToString() );\n \n    <span class=\"green\">// Add text line to text file</span>\n    tw.WriteLine( <span class=\"maroon\">\"Rev Number: \"</span> + oRev.RevisionNumber );\n  }\n</pre><p><strong>Answer:</strong> Congratulations on solving it!</p><p>I am glad that the Revit 2015 API provides all you need.</p><p>I implemented a sample command grabbing all the revision data displayed in the Revit 'Sheet Issues/Revisions' form and displaying that in a Windows form generated on the fly.</p><p>It avoids the text writer and file output completely by implementing a revision data holder class and a container dictionary, using a Windows forms data grid view container and its DataSource property to access and display the data:</p><center>\n<img alt=\"Revision data\" src=\"img/revision_data.png\"/>\n</center><p>It demonstrates several other nice features, in addition to the revision functionality:</p><ul>\n<li>Accessing and displaying all the revision information without ever actually touching or formatting any individual data members.</li>\n<li>Generating a Windows form programmatically on the fly.</li>\n<li>Populating a DataGridView via its DataSource property.</li>\n</ul><p>The Revit 2015 version is published in the\n\n<a href=\"https://github.com/jeremytammik/GetRevisionData\">\nGetRevisionData GitHub repository</a> as\n\n<a href=\"https://github.com/jeremytammik/GetRevisionData/releases/tag/2015.0.0.0\">\nversion 2015.0.0.0</a>.</p><p>The hardest challenge was actually not implementing the DataGridView population, but the automatic resizing.\nThat took quite a while, testing and debugging numerous combinations of the automatic resizing properties until finally finding one that worked.</p><p>The complete external command implementation defines just three simple little items:</p><ul>\n<li>RevisionData – a container for the revision data displayed in the Revit 'Sheet Issues/Revisions' dialogue.</li>\n<li>DisplayRevisionData – generate a Windows modeless form on the fly and display the revision data in it in a DataGridView.</li>\n<li>Execute – external command mainline.</li>\n</ul><p>Each one on its own is pretty trivial.</p><p>Together, they form a rally neat and elegant solution, I think:</p><pre class=\"code\">\n<span class=\"blue\">#region</span> Namespaces\n<span class=\"blue\">using</span> System;\n<span class=\"blue\">using</span> System.Collections.Generic;\n<span class=\"blue\">using</span> System.Data;\n<span class=\"blue\">using</span> System.Diagnostics;\n<span class=\"blue\">using</span> System.Drawing;\n<span class=\"blue\">using</span> System.IO;\n<span class=\"blue\">using</span> System.Windows.Forms;\n<span class=\"blue\">using</span> Autodesk.Revit.ApplicationServices;\n<span class=\"blue\">using</span> Autodesk.Revit.Attributes;\n<span class=\"blue\">using</span> Autodesk.Revit.DB;\n<span class=\"blue\">using</span> Autodesk.Revit.UI;\n<span class=\"blue\">using</span> Autodesk.Windows;\n<span class=\"blue\">using</span> <span class=\"teal\">TaskDialog</span> = Autodesk.Revit.UI.<span class=\"teal\">TaskDialog</span>;\n<span class=\"blue\">#endregion</span>\n \n<span class=\"blue\">namespace</span> GetRevisionData\n{\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> External command demonstrating how to use the </span>\n  <span class=\"gray\">///</span><span class=\"green\"> Revit 2015 Revision API to retrieve and display</span>\n  <span class=\"gray\">///</span><span class=\"green\"> all infoormation shown in the Revit </span>\n  <span class=\"gray\">///</span><span class=\"green\"> 'Sheet Issues/Revisions' dialogue.</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  [<span class=\"teal\">Transaction</span>( <span class=\"teal\">TransactionMode</span>.ReadOnly )]\n  <span class=\"blue\">public</span> <span class=\"blue\">class</span> <span class=\"teal\">Command</span> : <span class=\"teal\">IExternalCommand</span>\n  {\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> A container for the revision data displayed in</span>\n    <span class=\"gray\">///</span><span class=\"green\"> the Revit 'Sheet Issues/Revisions' dialogue.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">class</span> <span class=\"teal\">RevisionData</span>\n    {\n      <span class=\"blue\">public</span> <span class=\"blue\">int</span> Sequence { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"teal\">RevisionNumberType</span> Numbering { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"blue\">string</span> Date { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"blue\">string</span> Description { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"blue\">bool</span> Issued { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"blue\">string</span> IssuedTo { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"blue\">string</span> IssuedBy { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n      <span class=\"blue\">public</span> <span class=\"teal\">RevisionVisibility</span> Show { <span class=\"blue\">get</span>; <span class=\"blue\">set</span>; }\n \n      <span class=\"blue\">public</span> RevisionData( <span class=\"teal\">Revision</span> r )\n      {\n        Sequence = r.SequenceNumber;\n        Numbering = r.NumberType;\n        Date = r.RevisionDate;\n        Description = r.Description;\n        Issued = r.Issued;\n        IssuedTo = r.IssuedTo;\n        IssuedBy = r.IssuedBy;\n        Show = r.Visibility;\n      }\n    }\n \n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n    <span class=\"gray\">///</span><span class=\"green\"> Generate a Windows modeless form on the fly </span>\n    <span class=\"gray\">///</span><span class=\"green\"> and display the revision data in it in a </span>\n    <span class=\"gray\">///</span><span class=\"green\"> DataGridView.</span>\n    <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n    <span class=\"blue\">void</span> DisplayRevisionData(\n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">RevisionData</span>&gt; revision_data,\n      <span class=\"teal\">IWin32Window</span> owner )\n    {\n      System.Windows.Forms.<span class=\"teal\">Form</span> form\n        = <span class=\"blue\">new</span> System.Windows.Forms.<span class=\"teal\">Form</span>();\n \n      form.Size = <span class=\"blue\">new</span> <span class=\"teal\">Size</span>( 680, 180 );\n      form.Text = <span class=\"maroon\">\"Revision Data\"</span>;\n \n      <span class=\"teal\">DataGridView</span> dg = <span class=\"blue\">new</span> <span class=\"teal\">DataGridView</span>();\n      dg.DataSource = revision_data;\n      dg.AllowUserToAddRows = <span class=\"blue\">false</span>;\n      dg.AllowUserToDeleteRows = <span class=\"blue\">false</span>;\n      dg.AllowUserToOrderColumns = <span class=\"blue\">true</span>;\n      dg.Dock = System.Windows.Forms.<span class=\"teal\">DockStyle</span>.Fill;\n      dg.Location = <span class=\"blue\">new</span> System.Drawing.<span class=\"teal\">Point</span>( 0, 0 );\n      dg.ReadOnly = <span class=\"blue\">true</span>;\n      dg.TabIndex = 0;\n      dg.Parent = form;\n      dg.AutoSize = <span class=\"blue\">true</span>;\n      dg.AutoSizeColumnsMode = <span class=\"teal\">DataGridViewAutoSizeColumnsMode</span>.AllCells;\n      dg.AutoResizeColumns( <span class=\"teal\">DataGridViewAutoSizeColumnsMode</span>.AllCells );\n      dg.AutoResizeColumns();\n \n      form.ShowDialog( owner );\n    }\n \n    <span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n      <span class=\"teal\">ExternalCommandData</span> commandData,\n      <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n      <span class=\"teal\">ElementSet</span> elements )\n    {\n      <span class=\"teal\">IWin32Window</span> revit_window\n        = <span class=\"blue\">new</span> <span class=\"teal\">JtWindowHandle</span>(\n          <span class=\"teal\">ComponentManager</span>.ApplicationWindow );\n \n      <span class=\"teal\">UIApplication</span> uiapp = commandData.Application;\n      <span class=\"teal\">UIDocument</span> uidoc = uiapp.ActiveUIDocument;\n      <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n      <span class=\"blue\">if</span>( doc.IsFamilyDocument )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Not a Revit RVT Project\"</span>,\n          <span class=\"maroon\">\"This command requires an active Revit RVT file.\"</span> );\n \n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"blue\">if</span>( !( doc.ActiveView <span class=\"blue\">is</span> <span class=\"teal\">ViewSheet</span> ) )\n      {\n        <span class=\"teal\">TaskDialog</span>.Show( <span class=\"maroon\">\"Current View is not a Sheet\"</span>,\n          <span class=\"maroon\">\"This command requires an active sheet view.\"</span> );\n        <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n      }\n \n      <span class=\"teal\">IList</span>&lt;<span class=\"teal\">ElementId</span>&gt; ids\n        = <span class=\"teal\">Revision</span>.GetAllRevisionIds( doc );\n \n      <span class=\"blue\">int</span> n = ids.Count;\n \n      <span class=\"teal\">List</span>&lt;<span class=\"teal\">RevisionData</span>&gt; revision_data\n        = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">RevisionData</span>&gt;( n );\n \n      <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span> ids )\n      {\n        <span class=\"teal\">Revision</span> r = doc.GetElement( id ) <span class=\"blue\">as</span> <span class=\"teal\">Revision</span>;\n \n        revision_data.Add( <span class=\"blue\">new</span> <span class=\"teal\">RevisionData</span>( r ) );\n      }\n \n      DisplayRevisionData( revision_data,\n        revit_window );\n \n      <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n    }\n  }\n}\n</pre><p>Enjoy!</p><p>Next time I write will be from Toronto,\n\n   <span lang=\"ar\" style=\"font-family: Amiri,sans-serif;\" xml:lang=\"ar\">إن شاء الله</span>\n\n   (<a href=\"http://en.wikipedia.org/wiki/Insha%27Allah\">insha'Allah</a>, God willing).</p>"
  }
]