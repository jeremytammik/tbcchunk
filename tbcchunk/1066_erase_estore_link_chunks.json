[
  {
    "original_filename": "1066_erase_estore_link",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n</head>"
  },
  {
    "original_filename": "1066_erase_estore_link",
    "header_text": "Erasing Extensible Storage with Linked Files",
    "local_header_href": "#erasing-extensible-storage-with-linked-files",
    "chunk_text": "<h3>Erasing Extensible Storage with Linked Files</h3><p>Here is a query and resolution raised by Marc in the discussion forum on\n\n<a href=\"http://forums.autodesk.com/t5/Revit-API/InternalException-when-using-Schema-EraseSchemaAndAllEntities/td-p/4598127\">\nerasing extensible storage data with linked files</a>,\n\nfollowed by a reminder of the need to regenerate the model to\n\n<a href=\"#3\">avoid accessing stale data</a> and\n\nhint of possible things to come related to\n\n<a href=\"#4\">Revit and cloud computing</a>:</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1066_erase_estore_link",
    "header_text": "Erasing Extensible Storage Data with Linked Files",
    "local_header_href": "#erasing-extensible-storage-data-with-linked-files",
    "chunk_text": "<h4>Erasing Extensible Storage Data with Linked Files</h4><p><strong>Question:</strong> I am calling the method Schema.EraseSchemaAndAllEntities in a project containing linked documents, and it is throwing an InternalException.\nHow can this be avoided, please?</p><p>I see a report of a similar issue in the article on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/08/deleting-and-updating-extensible-storage-schema.html\">\ndeleting and updating extensible storage schema</a>.</p><p>Can you confirm that this issue is caused by the linked files?</p><p><strong>Answer:</strong> Basically, the Revit SDK ExtensibleStorageUtility shows you how to use this method.\nI believe it should work perfectly well even if entities using the schema still exist.</p><p>By the way, here is a list of most of The Building Coder\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/about-the-author.html#5.23\">extensible storage related topics</a>.\n\n<p>It strikes me as rather strange that in your sample code, you only have a transaction open on the main document.</p>\n<p>The Schema.EraseSchemaAndAllEntities method will delete storage of this schema in <b><i>all</i></b> open documents.</p>\n<p>I wonder how this will affect the other linked documents if you have no transaction open for them.</p>\n<p>I would suggest running this with only one document open in the current Revit session.</p>\n<p><strong>Response:</strong> I can confirm that the InternalException was caused by having projects linked in the document.\n\n<p>I have to unload all linked files first, run the method Schema.EraseSchemaAndAllEntities method, and then load the files again.</p>\n<p>This is the final custom method that worked for me including the transaction:</p>\n<pre class=\"code\">\n  <span class=\"blue\">public</span> <span class=\"blue\">void</span> DeleteSchema()\n  {\n    <span class=\"blue\">using</span>( <span class=\"teal\">Transaction</span> trans = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( _doc ) )\n    {\n      trans.Start( <span class=\"maroon\">\"Delete Schema\"</span> );\n      Schema schema = Schema.Lookup( _schemaGuid );\n      Schema.EraseSchemaAndAllEntities( schema, <span class=\"blue\">false</span> );\n      trans.Commit();\n    }\n  }\n</pre>\n<p>Many thanks to Marc for exploring and solving this issue!</p>\n<!-- need to regenerate model before querying it: hide connectors and export image -- 08971502 [HideElements not working on new view] -->\n<a name=\"3\"></a>\n<h4>Regenerate to Avoid Accessing Stale Data</h4>\n<p>We have looked at numerous issues in the past where developers ran into problems – or, rather, created them for themselves – by modifying something in the model and then attempted to read the stale data without regenerating it first.</p>\n<p>Here is another example that shows clearly how easy it can be to miss this fact if you do not make a habit of checking for this possibility as one of the first things to do when running into mysterious problems:</p>\n<p><strong>Question:</strong> I'm trying to find the connectors of a view using:\n\n<pre class=\"code\">\n  collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( famDoc );\n  collector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ConnectorElement</span> ) );\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; connectors\n    = collector.ToElementIds();\n \n  <span class=\"blue\">if</span>( connectors.Count &gt; 0 )\n    view.HideElements( connectors );\n</pre>\n<p>This works fine if I do that on a existing 3D view, but if I create the view myself by calling CreateIsometric like this it does not:</p>\n<pre class=\"code\">\n  view = <span class=\"teal\">View3D</span>.CreateIsometric( famDoc,\n    viewFamilyType.Id );\n</pre>\n<p>Then the connectors remain visible in the view exported PNG. This also happens for any other kind of element I try to hide; it works well on an existing 3D view but not in a newly created one.</p>\n<p>I attached a sample project that generates two pictures: one is a modification of an existing view and has the connectors hidden; the other one uses a newly generated view where the connectors cannot be hidden.\nIf I do this inside the DocumentOpened event, none of the methods hide the connectors.</p>\n<p>How can I hide elements in a newly created view generated by View3D.CreateIsometric, please?</p>\n<p><strong>Answer:</strong> I am happy to report that this problem is easy to fix and the Revit API is working properly, completely as expected.</p>\n<p>You are creating a situation in which you are working with stale data.</p>\n<p>If you make any modifications whatsoever to the model, you need to regenerate it again before reading.</p>\n<p>Here are some previous examples of this kind of situation and when and how to regenerate the BIM, going all the way back to the year 2010:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/manual-regeneration-mode-danger.html\">Manual Regeneration Option Danger</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/regeneration-option-best-practices.html\">Regeneration Option Best Practices</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/to-regenerate-or-not-to-regenerate.html\">To Regenerate or Not to Regenerate...</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/refresh-referencing-sheet-parameter-display.html\">Refresh Referencing Sheet Parameter Display</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/setting-text-width-requires-regen.html\">Setting Text Width Requires Regen</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/extra-transaction-or-regeneration-required.html\">Extra Transaction or Regeneration Required</a></li>\n<!-- <li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/curve-evaluation-and-song-of-the-gulls.html\">Curve Evaluation and Song of the Gulls</a></li> -->\n<li><a href=\"http://adndevblog.typepad.com/aec/2013/01/it-is-easy-to-miss-this-regenerating-the-model.html\">Regenerate between plane and dimension creation</a></li>\n</ul>\n<p>The topic of regeneration is also related to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/the-temporary-transaction-trick-for-gross-slab-data.html\">\ntemporary transaction trick</a>,\n\nthe associated suggestion to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\nencapsulate multiple transactions in a transaction group</a>,\n\ncommit the individual transactions and then roll bock the entire group instead.</p>\n<p>Every time a transaction is committed, a regeneration is automatically included.</p>\n<p>In your case, hiding the connectors and creating a new view is obviously modifying the model before it is read by the image export.</p>\n<p>Once a to regenerate before exporting is added, the process works just the way you presumably want:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Hide connectors</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(view.Document);\n \n  collector.OfClass(<span class=\"blue\">typeof</span>(<span class=\"teal\">ConnectorElement</span>));\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; connectors\n    = collector.ToElementIds();\n \n  <span class=\"blue\">if</span> (connectors.Count &gt; 0)\n    view.HideElements(connectors);\n \n  view.Document.Regenerate(); <span class=\"green\">// &lt;---- Add this! ------</span>\n \n  <span class=\"green\">// Export view</span>\n</pre>\n<!-- http://architosh.com/2013/11/autodesk-talks-to-architosh-about-revit-through-web-browser -->\n<a name=\"4\"></a>\n<h4>Revit and Cloud Computing</h4>\n<p>Here is a quick pointer to an interesting interview with Architosh on\n\n<a href=\"http://architosh.com/2013/11/autodesk-talks-to-architosh-about-revit-through-web-browser\">\nrunning Revit through a Web Browser</a> on\n\nany device, and several other big Autodesk CAD applications as well.</p>\n</p></p></p>"
  },
  {
    "original_filename": "1066_erase_estore_link",
    "header_text": "Regenerate to Avoid Accessing Stale Data",
    "local_header_href": "#regenerate-to-avoid-accessing-stale-data",
    "chunk_text": "<h4>Regenerate to Avoid Accessing Stale Data</h4><p>We have looked at numerous issues in the past where developers ran into problems – or, rather, created them for themselves – by modifying something in the model and then attempted to read the stale data without regenerating it first.</p><p>Here is another example that shows clearly how easy it can be to miss this fact if you do not make a habit of checking for this possibility as one of the first things to do when running into mysterious problems:</p><p><strong>Question:</strong> I'm trying to find the connectors of a view using:\n\n<pre class=\"code\">\n  collector = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>( famDoc );\n  collector.OfClass( <span class=\"blue\">typeof</span>( <span class=\"teal\">ConnectorElement</span> ) );\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; connectors\n    = collector.ToElementIds();\n \n  <span class=\"blue\">if</span>( connectors.Count &gt; 0 )\n    view.HideElements( connectors );\n</pre>\n<p>This works fine if I do that on a existing 3D view, but if I create the view myself by calling CreateIsometric like this it does not:</p>\n<pre class=\"code\">\n  view = <span class=\"teal\">View3D</span>.CreateIsometric( famDoc,\n    viewFamilyType.Id );\n</pre>\n<p>Then the connectors remain visible in the view exported PNG. This also happens for any other kind of element I try to hide; it works well on an existing 3D view but not in a newly created one.</p>\n<p>I attached a sample project that generates two pictures: one is a modification of an existing view and has the connectors hidden; the other one uses a newly generated view where the connectors cannot be hidden.\nIf I do this inside the DocumentOpened event, none of the methods hide the connectors.</p>\n<p>How can I hide elements in a newly created view generated by View3D.CreateIsometric, please?</p>\n<p><strong>Answer:</strong> I am happy to report that this problem is easy to fix and the Revit API is working properly, completely as expected.</p>\n<p>You are creating a situation in which you are working with stale data.</p>\n<p>If you make any modifications whatsoever to the model, you need to regenerate it again before reading.</p>\n<p>Here are some previous examples of this kind of situation and when and how to regenerate the BIM, going all the way back to the year 2010:</p>\n<ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/manual-regeneration-mode-danger.html\">Manual Regeneration Option Danger</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/04/regeneration-option-best-practices.html\">Regeneration Option Best Practices</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/06/to-regenerate-or-not-to-regenerate.html\">To Regenerate or Not to Regenerate...</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/refresh-referencing-sheet-parameter-display.html\">Refresh Referencing Sheet Parameter Display</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/11/setting-text-width-requires-regen.html\">Setting Text Width Requires Regen</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2012/12/extra-transaction-or-regeneration-required.html\">Extra Transaction or Regeneration Required</a></li>\n<!-- <li><a href=\"http://thebuildingcoder.typepad.com/blog/2013/03/curve-evaluation-and-song-of-the-gulls.html\">Curve Evaluation and Song of the Gulls</a></li> -->\n<li><a href=\"http://adndevblog.typepad.com/aec/2013/01/it-is-easy-to-miss-this-regenerating-the-model.html\">Regenerate between plane and dimension creation</a></li>\n</ul>\n<p>The topic of regeneration is also related to the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/10/the-temporary-transaction-trick-for-gross-slab-data.html\">\ntemporary transaction trick</a>,\n\nthe associated suggestion to\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/11/temporary-transaction-trick-touchup.html\">\nencapsulate multiple transactions in a transaction group</a>,\n\ncommit the individual transactions and then roll bock the entire group instead.</p>\n<p>Every time a transaction is committed, a regeneration is automatically included.</p>\n<p>In your case, hiding the connectors and creating a new view is obviously modifying the model before it is read by the image export.</p>\n<p>Once a to regenerate before exporting is added, the process works just the way you presumably want:</p>\n<pre class=\"code\">\n  <span class=\"green\">// Hide connectors</span>\n \n  <span class=\"teal\">FilteredElementCollector</span> collector\n    = <span class=\"blue\">new</span> <span class=\"teal\">FilteredElementCollector</span>(view.Document);\n \n  collector.OfClass(<span class=\"blue\">typeof</span>(<span class=\"teal\">ConnectorElement</span>));\n \n  <span class=\"teal\">ICollection</span>&lt;<span class=\"teal\">ElementId</span>&gt; connectors\n    = collector.ToElementIds();\n \n  <span class=\"blue\">if</span> (connectors.Count &gt; 0)\n    view.HideElements(connectors);\n \n  view.Document.Regenerate(); <span class=\"green\">// &lt;---- Add this! ------</span>\n \n  <span class=\"green\">// Export view</span>\n</pre>\n<!-- http://architosh.com/2013/11/autodesk-talks-to-architosh-about-revit-through-web-browser -->\n<a name=\"4\"></a>\n<h4>Revit and Cloud Computing</h4>\n<p>Here is a quick pointer to an interesting interview with Architosh on\n\n<a href=\"http://architosh.com/2013/11/autodesk-talks-to-architosh-about-revit-through-web-browser\">\nrunning Revit through a Web Browser</a> on\n\nany device, and several other big Autodesk CAD applications as well.</p>\n</p>"
  },
  {
    "original_filename": "1066_erase_estore_link",
    "header_text": "Revit and Cloud Computing",
    "local_header_href": "#revit-and-cloud-computing",
    "chunk_text": "<h4>Revit and Cloud Computing</h4><p>Here is a quick pointer to an interesting interview with Architosh on\n\n<a href=\"http://architosh.com/2013/11/autodesk-talks-to-architosh-about-revit-through-web-browser\">\nrunning Revit through a Web Browser</a> on\n\nany device, and several other big Autodesk CAD applications as well.</p>"
  }
]