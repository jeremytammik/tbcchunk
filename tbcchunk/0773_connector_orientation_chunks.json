[
  {
    "original_filename": "0773_connector_orientation",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0773_connector_orientation",
    "header_text": "Connector Orientation",
    "local_header_href": "#connector-orientation",
    "chunk_text": "<h3>Connector Orientation</h3><p>Today is the \n\n<a href=\"http://en.wikipedia.org/wiki/Pentecost\">\nPentecost</a> or\n\n<a href=\"http://en.wikipedia.org/wiki/Whit_Monday\">\nWhit Monday</a> holiday\n\nin Neuchâtel, and I am in full tilt preparing for the \n\n<a href=\"http://www.cvent.com/events/devcamp-2012/event-summary-56817a3b57614f8eb59ea05fcd59bc32.aspx\">\nAEC DevCamp</a> in Waltham next week.\n\n<p>I will be presenting sessions on the new Revit 2013 UI API features, the Revit MEP API, and extensible storage.\n\n<p>I am of course looking forward much more to the many exciting other presentations by my colleagues in the ADN DevTech AEC team and especially by members of the Revit development team, directly from the horse's mouth, so to speak.\nHave a look at the \n\n<a href=\"https://custom.cvent.com/FDBB345248B94F40BFFFCEF2FBE054E4/files/645f182b028d480281ebdda12bae6576.pdf\">\nsession list and descriptions</a> to see them all in their full glory.\n\n<p>Meanwhile, here is yet another MEP related topic to pick up:\n\n<p>Two years ago, I presented a solution for determining the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/03/connector-orientation.html\">\nwidth and height orientation of a Revit MEP connector</a>.\n\n<p>Now Martin Schmid describes a new useful aspect of this issue which also leads to a very important point on real numbers comparisons.\n\n\n<p><strong>Question:</strong> How do I determine the orientation of a connector in my project?  \nFrom Revit Lookup, I can find where the information is, but I'm not sure how to interpret this without a 'visual'.\n\n\n<p><strong>Answer:</strong> It was easy enough to determine by exporting a simple Revit model to AutoCAD, and displaying the coordinate entries there.\n\n<p>I thought I would share what I found to save other users from having to go through the same research.\n\n<p>For a FamilyInstance, such as a pipe fitting, the information can be found via\n\n<ul>\n<li>FamilyInstance &gt; MEPModel &gt; ConnectorManager &gt; ConnectorSet &gt; Connector &gt; CoordinateSystem\n</li></ul>\n<p>As the image below shows, the Z coordinate of CoordinateSystem indicates the normal direction of the connector.  The CoordinateSystem.Origin is the actual location in the model:</p>\n<center>\n<img alt=\"Connector orientation\" src=\"img/connector_orientation.png\"/>\n</center>\n<p>For a MEPCurve such as a pipe, the access is slightly different:\n\n<ul>\n<li>MEPCurve &gt; ConnectorManager &gt; ConnectorSet &gt; Connector &gt; CoordinateSystem\n</li></ul>\n<p>So, if you're trying to determine if two connectors are parallel and facing opposite directions, you can test that the Z axis vectors of the two connectors' CoordinateSystem properties pointing in exactly opposite directions, i.e. one equals the negation of the other.\n\n<p>Many thanks to Martin for this explanation!\n\n\n<a name=\"2\"></a>\n<h4>Real Number Equality Testing</h4>\n<p>Jeremy adds: since the connector CoordinateSystem Z axis vector is an XYZ instance, i.e. a triple of three real numbers, comparing their equality leads back to a floating point number comparison.\n\n<p>In this case, you should actually almost never ever use an exact equality comparison such as Equals, or '=='.\n\n<p>You need to use an appropriate \n\n<a href=\"http://wiki.seas.harvard.edu/geos-chem/index.php/Floating_point_math_issues#Testing_for_equality\">\nreal number equality test</a> instead.\n\n<p>Our guru <a href=\"http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Real-Number-Types\">GNU</a> says:\n\n\"we recommend that you consider not comparing real numbers for exact equality with the == operator, but rather check that real numbers are within an acceptable tolerance\".\n\n<p>For the Revit API XYZ point and vector instances, this can easily be achieved by using the IsAlmostEqualTo method instead.\n\n<p>The comparison between the two connectors' CoordinateSystem Z axis vectors can therefore be implemented like this, for example:\n\n<pre class=\"code\">\n  conn1.CoordinateSystem.BasisZ.IsAlmostEqualTo( \n    -conn2.CoordinateSystem.BasisZ );\n</pre>\n<p>I already discussed taking this one step further several times, for instance to implement the XyzEqualityComparer for \n\n<!--\n\n134_nested_instance_geo.htm:Here is the definition\n259_crop_view_to_room.htm:We did implement some use\n491_point_in_poly.htm:XyzEqualityComparer class</a>\n502_gaps_in_shell.htm:XyzEqualityComparer helper cl\n556_toposurf_points.htm:&nbsp; &nbsp; = <span class\n620_top_faces_of_wall.htm:CmdNestedInstanceGeo.XyzE\n737_melbourne_day_2.htm:\n\n-->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-day-two.html#2\">\nretrieving unique geometry vertices</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nnested instance geometry</a>, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/toposurface-interior-and-boundary-points.html\">\ntoposurface point classification</a> and\n\naccessing the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html\">\ntop faces</a> of a sloped wall.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0773_connector_orientation",
    "header_text": "Real Number Equality Testing",
    "local_header_href": "#real-number-equality-testing",
    "chunk_text": "<h4>Real Number Equality Testing</h4><p>Jeremy adds: since the connector CoordinateSystem Z axis vector is an XYZ instance, i.e. a triple of three real numbers, comparing their equality leads back to a floating point number comparison.\n\n<p>In this case, you should actually almost never ever use an exact equality comparison such as Equals, or '=='.\n\n<p>You need to use an appropriate \n\n<a href=\"http://wiki.seas.harvard.edu/geos-chem/index.php/Floating_point_math_issues#Testing_for_equality\">\nreal number equality test</a> instead.\n\n<p>Our guru <a href=\"http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html#Real-Number-Types\">GNU</a> says:\n\n\"we recommend that you consider not comparing real numbers for exact equality with the == operator, but rather check that real numbers are within an acceptable tolerance\".\n\n<p>For the Revit API XYZ point and vector instances, this can easily be achieved by using the IsAlmostEqualTo method instead.\n\n<p>The comparison between the two connectors' CoordinateSystem Z axis vectors can therefore be implemented like this, for example:\n\n<pre class=\"code\">\n  conn1.CoordinateSystem.BasisZ.IsAlmostEqualTo( \n    -conn2.CoordinateSystem.BasisZ );\n</pre>\n<p>I already discussed taking this one step further several times, for instance to implement the XyzEqualityComparer for \n\n<!--\n\n134_nested_instance_geo.htm:Here is the definition\n259_crop_view_to_room.htm:We did implement some use\n491_point_in_poly.htm:XyzEqualityComparer class</a>\n502_gaps_in_shell.htm:XyzEqualityComparer helper cl\n556_toposurf_points.htm:&nbsp; &nbsp; = <span class\n620_top_faces_of_wall.htm:CmdNestedInstanceGeo.XyzE\n737_melbourne_day_2.htm:\n\n-->\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/03/melbourne-day-two.html#2\">\nretrieving unique geometry vertices</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/nested-instance-geometry.html\">\nnested instance geometry</a>, \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/03/toposurface-interior-and-boundary-points.html\">\ntoposurface point classification</a> and\n\naccessing the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2011/07/top-faces-of-wall.html\">\ntop faces</a> of a sloped wall.\n</p></p></p></p></p></p></p>"
  }
]