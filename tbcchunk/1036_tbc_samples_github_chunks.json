[
  {
    "original_filename": "1036_tbc_samples_github",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1036_tbc_samples_github",
    "header_text": "The Building Coder Samples on GitHub",
    "local_header_href": "#the-building-coder-samples-on-github",
    "chunk_text": "<h3>The Building Coder Samples on GitHub</h3><p>After several prompts from various quarters, I finally got around to publishing\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nThe Building Coder samples</a> on GitHub.</p><p>To access them from there, you can either open the\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">\nrepository</a> or\n\ngrab the code through the direct\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/archive/master.zip\">zip file download</a>.</p><p>As discussed below in the section on\n\n<a href=\"#4\">branching and tagging</a>,\n\nthese links refer to the master branch.</p><p>For a specific version of the samples, e.g. from today, please\n\n<a href=\"#4\">see below</a>.</p><p>Another important aspect that I discovered in the process and always had suspected in the past is the importance of adding a software license.</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1036_tbc_samples_github",
    "header_text": "The Importance of a License, Any Old License",
    "local_header_href": "#the-importance-of-a-license-any-old-license",
    "chunk_text": "<h4>The Importance of a License, Any Old License</h4><p>Luckily, I ran into this nice\n\n<a href=\"http://www.codinghorror.com\">\ncoding horror</a> admonition\n\nto\n\n<a href=\"http://www.codinghorror.com/blog/2007/04/pick-a-license-any-license.html\">\npick a license, any license</a> before\n\npublishing.</p><p>If no license is specified, an implicit copyright is asserted.\nPeople can read the code, but they have no legal right to use it.\nTo use it, you must contact the author directly and ask permission.</p><p>No serious professional programmer is going to use any published code without explicit permission.</p><p>You even have to specify a license to put your code in the\n\n<a href=\"http://en.wikipedia.org/wiki/Public_domain\">\npublic domain</a>.\nAlternatively, you can die, and then anybody interested will still have to wait for a long time.</p><p>I considered using the\n\n<a href=\"http://www.wtfpl.net\">\nWTFPL</a> advocated\n\nin the coding horror article.</p><p>Being a bit leery of the potential reaction of my colleagues, however, who might object to the wording of its name, I desisted and settled for the minimalistic and permissive\n\n<a href=\"http://en.wikipedia.org/wiki/MIT_License\">\nMIT License</a> instead.\n\n\n\n<a name=\"3\"></a>\n<h4>Creating a GitHub Repository</h4>\n<p>I had initially planned to take notes of every step I made to set up the repository and link it with my local file system, but unfortunately didn't.</p>\n<p>I am using the Mac version of git, anyway, so my steps would not be of great interest to the majority of my readers.</p>\n<p>However, while prompting me to publish The Building Coder samples to GitHub, Victor Chekalin, or Виктор Чекалин, very kindly listed the detailed steps that he recommends on a Windows platform as follows:</p>\n<ol>\n<li>Register on <a href=\"https://github.com\">github</a> if you are not yet registered.</li>\n<li>Create new repository on github.\nIn the new repository window, type the repository name and select Add .gitignore CSharp.\n.gitignore contains the rules for folders and files that should not be stored in the repository.\nThen click Create Repository.</li>\n<li>The repository is created on github. Now is the time to install Git client.</li>\n<li>At first install\n\n<a href=\"http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git\">\nmysgit</a>.\n\nThis is the official Git client for Windows.\nDownload and install it with default settings.</li>\n<li>You may already start using git, but mysgit is a console client.\nI use the more comfortable\n\n<a href=\"http://code.google.com/p/tortoisegit/wiki/Download\">\nTortoiseGit</a> Windows\n\nclient instead.\nDownload and install it with default settings as well.</li>\n<li>After you installed TortoiseGit, open the TortoiseGit settings and go to the Git node.\nType your name and email.</li>\n<li>Now we are ready to create local repository in your project folder.</li>\n<li>Find the folder where your project is located.\nRight click on this folder and select Git Create repository here...\nIn the next window click OK.</li>\n<li>Right click on this folder again and select TortoiseGit &gt; Settings.</li>\n<li>In the Git &gt; Remote node copy and paste the URL of the github repository you created.\nClick Apply.\nTortoise Git asks you if you want fetch branches from the remote repo; click No.</li>\n<li>Right click on the folder, select the TortoiseGit &gt; pull Command to pull .gitignore from the github and click OK.</li>\n<li>Commit your first changes: Git Commit &gt; master.\nType the commit comment, select all your files to add them to the repository and click OK.</li>\n<li>The commit initially only applies to your local repository.\nTo commit those changes to the remote repository as well, i.e. on github itself, you have to push them.\nClick Push. Click OK. Type your name and password.</li>\n<li>That's it. The code is on github.</li>\n<li>When you have made any changes in the code, commit your changes.\nDo not forget add files in the commit window if you add new files.\nPush the changes after committing them locally.</li>\n</ol>\n<p>This pretty much matches my Mac experiences as well.</p>\n<p>Actually, once I had the github repository up and running and everything safely backed up, I removed my original copy and created a new one in the original location using the following command:</p>\n<pre>\n  git clone master_url local_dir\n</pre>\n<a name=\"4\"></a>\n<h4>Branching and Tagging</h4>\n<p>Luckily, I talked again with Victor before going live with this post, and he pointed out yet another very important aspect:</p>\n<p>One thing to remember is that when a link to The Building Coder samples GitHub page or to the archive is posted, it generally refers to the main, or master, code stream.</p>\n<p>As a result, a post written today, publishing the github link, will refer to something completely different in a year's time.</p>\n<p>A user wishing to access the particular version discussed in the post will get the latest version of the examples.\nThese may already include a lot of changes.\nAs a result, the user sees completely different code than what is described in the post.</p>\n<p>One solution is to create a\n\n<a href=\"http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging\">\nbranch</a>.</p>\n<p>Whenever you publish a github link, create a new branch, e.g., bc_yyyymmdd, and provide a link to this branch.</p>\n<p>Perhaps, instead of creating a new branch each time, you may create a tag and provide a link to the specific tag.</p>\n<p>This is easier than branching.\nFor this case, it is exactly that you need.</p>\n<p>Actually, while exploring the tagging mechanism, I discovered the easy method of creating an official\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases\">\nrelease</a> directly\n\nin the github web site, and used one single click to generate\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.104.2\">version 2014.0.104.2</a> as\n\na separate release, the initial github release.</p>\n<p>Actually, a release is also simply a special kind of tag.</p>\n<p>Many thanks to Victor for all his support and detailed instructions!</p>\n</p>"
  },
  {
    "original_filename": "1036_tbc_samples_github",
    "header_text": "Creating a GitHub Repository",
    "local_header_href": "#creating-a-github-repository",
    "chunk_text": "<h4>Creating a GitHub Repository</h4><p>I had initially planned to take notes of every step I made to set up the repository and link it with my local file system, but unfortunately didn't.</p><p>I am using the Mac version of git, anyway, so my steps would not be of great interest to the majority of my readers.</p><p>However, while prompting me to publish The Building Coder samples to GitHub, Victor Chekalin, or Виктор Чекалин, very kindly listed the detailed steps that he recommends on a Windows platform as follows:</p><ol>\n<li>Register on <a href=\"https://github.com\">github</a> if you are not yet registered.</li>\n<li>Create new repository on github.\nIn the new repository window, type the repository name and select Add .gitignore CSharp.\n.gitignore contains the rules for folders and files that should not be stored in the repository.\nThen click Create Repository.</li>\n<li>The repository is created on github. Now is the time to install Git client.</li>\n<li>At first install\n\n<a href=\"http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git\">\nmysgit</a>.\n\nThis is the official Git client for Windows.\nDownload and install it with default settings.</li>\n<li>You may already start using git, but mysgit is a console client.\nI use the more comfortable\n\n<a href=\"http://code.google.com/p/tortoisegit/wiki/Download\">\nTortoiseGit</a> Windows\n\nclient instead.\nDownload and install it with default settings as well.</li>\n<li>After you installed TortoiseGit, open the TortoiseGit settings and go to the Git node.\nType your name and email.</li>\n<li>Now we are ready to create local repository in your project folder.</li>\n<li>Find the folder where your project is located.\nRight click on this folder and select Git Create repository here...\nIn the next window click OK.</li>\n<li>Right click on this folder again and select TortoiseGit &gt; Settings.</li>\n<li>In the Git &gt; Remote node copy and paste the URL of the github repository you created.\nClick Apply.\nTortoise Git asks you if you want fetch branches from the remote repo; click No.</li>\n<li>Right click on the folder, select the TortoiseGit &gt; pull Command to pull .gitignore from the github and click OK.</li>\n<li>Commit your first changes: Git Commit &gt; master.\nType the commit comment, select all your files to add them to the repository and click OK.</li>\n<li>The commit initially only applies to your local repository.\nTo commit those changes to the remote repository as well, i.e. on github itself, you have to push them.\nClick Push. Click OK. Type your name and password.</li>\n<li>That's it. The code is on github.</li>\n<li>When you have made any changes in the code, commit your changes.\nDo not forget add files in the commit window if you add new files.\nPush the changes after committing them locally.</li>\n</ol><p>This pretty much matches my Mac experiences as well.</p><p>Actually, once I had the github repository up and running and everything safely backed up, I removed my original copy and created a new one in the original location using the following command:</p><pre>\n  git clone master_url local_dir\n</pre><a name=\"4\"></a>"
  },
  {
    "original_filename": "1036_tbc_samples_github",
    "header_text": "Branching and Tagging",
    "local_header_href": "#branching-and-tagging",
    "chunk_text": "<h4>Branching and Tagging</h4><p>Luckily, I talked again with Victor before going live with this post, and he pointed out yet another very important aspect:</p><p>One thing to remember is that when a link to The Building Coder samples GitHub page or to the archive is posted, it generally refers to the main, or master, code stream.</p><p>As a result, a post written today, publishing the github link, will refer to something completely different in a year's time.</p><p>A user wishing to access the particular version discussed in the post will get the latest version of the examples.\nThese may already include a lot of changes.\nAs a result, the user sees completely different code than what is described in the post.</p><p>One solution is to create a\n\n<a href=\"http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging\">\nbranch</a>.</p><p>Whenever you publish a github link, create a new branch, e.g., bc_yyyymmdd, and provide a link to this branch.</p><p>Perhaps, instead of creating a new branch each time, you may create a tag and provide a link to the specific tag.</p><p>This is easier than branching.\nFor this case, it is exactly that you need.</p><p>Actually, while exploring the tagging mechanism, I discovered the easy method of creating an official\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases\">\nrelease</a> directly\n\nin the github web site, and used one single click to generate\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2014.0.104.2\">version 2014.0.104.2</a> as\n\na separate release, the initial github release.</p><p>Actually, a release is also simply a special kind of tag.</p><p>Many thanks to Victor for all his support and detailed instructions!</p>"
  }
]