[
  {
    "original_filename": "1612_param_vary_group",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n\nSetting parameter varies between groups in #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/paramvarygroups\n\nLooking at setting the <code>SetAllowVaryBetweenGroups</code> flag on a shared parameter;\nis there any way to set <i>can vary by group instance</i> (what I need) the default for API-created bindings? ...\n\n--->"
  },
  {
    "original_filename": "1612_param_vary_group",
    "header_text": "Setting Parameter Varies Between Groups",
    "local_header_href": "#setting-parameter-varies-between-groups",
    "chunk_text": "### Setting Parameter Varies Between Groups\n\nWe already looked at the topic of setting the `SetAllowVaryBetweenGroups` flag on a shared parameter\nin Scott Conover's [parameter definition overview](http://thebuildingcoder.typepad.com/blog/2016/12/parameter-definition-overview.html).\n\nThe setting was introduced in the [Revit 2014 API](http://thebuildingcoder.typepad.com/blog/2013/04/whats-new-in-the-revit-2014-api.html),\ncf. *Parameter variance among group instances*.\n\nNow Miroslav Schonauer raised it again, asking:\n\n**Question:** Is the following option for group behaviour of shared param *instance* bindings exposed to API?\n \n<center>\n<img src=\"img/vary_between_groups_1.png\" alt=\"SetAllowVaryBetweenGroups\" width=\"695\"/>\n</center>\n\nIf yes, that solves all the issues :-)\n \nIf not &ndash; the default outcome seems to be *aligned per group type*.\n\nIs there any way to set *can vary by group instance* (what I need) the default for API-created bindings?\n\nLater: I found\nthis [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread \non [creating a project parameter with *values can vary by group instance* selected](https://forums.autodesk.com/t5/revit-api-forum/create-project-parameter-with-quot-values-can-vary-by-group/m-p/5939455)\nwhich explains that it is kind-of possible.\n \nThe problem remains that `SetAllowVaryBetweenGroups` is available only on `InternalDefinition`, while my programmatically created shared param has `ExternalDefinition`.\n\nThat thread explains that getting the binding after it has been created (i.e., in a 'Step 2') does return `InternalDefinition`, so this method can be used.\n \nCan someone at least confirm that there is nothing simpler to do than the above 2-step process?\n\n**Answer:** Yes. You need to do the two-step process:\n\n- Register the shared parameter\n- Find the internal definition\n- Set the appropriate value for this property\n \nThe easiest way to go from one to the other:\n \n- [SharedParameterElement.Lookup(GUID)](http://www.revitapidocs.com/2018.1/4dce82de-7495-523a-c8d4-4b3fc709e85e.htm)\n- [ParameterElement.GetDefinition()](http://www.revitapidocs.com/2018.1/ec9b3cd3-4379-6eb8-7c7d-c220ba03f359.htm)\n\n**Response:** I implemented this method to handle the setting of the `SetAllowVaryBetweenGroups` flag:\n \n<pre class=\"code\">\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Helper&nbsp;method&nbsp;to&nbsp;control&nbsp;`SetAllowVaryBetweenGroups`&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;option&nbsp;for&nbsp;instance&nbsp;binding&nbsp;param</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;SetInstanceParamVaryBetweenGroupsBehaviour(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Guid</span>&nbsp;guid,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;allowVaryBetweenGroups&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">try</span>&nbsp;<span style=\"color:green;\">//&nbsp;last&nbsp;resort</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">SharedParameterElement</span>&nbsp;sp&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:#2b91af;\">SharedParameterElement</span>.Lookup(&nbsp;doc,&nbsp;guid&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Should&nbsp;never&nbsp;happen&nbsp;as&nbsp;we&nbsp;will&nbsp;call&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;this&nbsp;only&nbsp;for&nbsp;*existing*&nbsp;shared&nbsp;param.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;sp&nbsp;)&nbsp;<span style=\"color:blue;\">return</span>;&nbsp;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">InternalDefinition</span>&nbsp;def&nbsp;=&nbsp;sp.GetDefinition();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;def.VariesAcrossGroups&nbsp;!=&nbsp;allowVaryBetweenGroups&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Must&nbsp;be&nbsp;within&nbsp;an&nbsp;outer&nbsp;transaction!</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def.SetAllowVaryBetweenGroups(&nbsp;doc,&nbsp;allowVaryBetweenGroups&nbsp;);&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">catch</span>&nbsp;{&nbsp;}&nbsp;<span style=\"color:green;\">//&nbsp;ideally,&nbsp;should&nbsp;report&nbsp;something&nbsp;to&nbsp;log...</span>\n&nbsp;&nbsp;}\n</pre>\n\nIt assumes that `guid` comes from a known shared parameter.\n \nFurther good news: this can be called not only immediately after programmatically binding a new shared param, but also to *silently* change this specific setting for an *existing* shared parameter.\n\nFor example, we all typically have our own helper methods to get-or-create a shared parameter binding, cf., e.g., my method\nto [add a category to a shared parameter binding](http://thebuildingcoder.typepad.com/blog/2012/04/adding-a-category-to-a-shared-parameter-binding.html).\n\nHere is a code snippet providing enough to get the gist of how the above can be used (ignore my helper classes and error handling):\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Assumes&nbsp;outer&nbsp;transaction</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;GetOrCreateElemSharedParam(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;elem,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;paramName,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;grpName,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">ParameterType</span>&nbsp;paramType,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;visible,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;instanceBinding,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;userModifiable,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Guid</span>&nbsp;guid,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;useTempSharedParamFile,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;tooltip&nbsp;=&nbsp;<span style=\"color:#a31515;\">&quot;&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameterGroup</span>&nbsp;uiGrp&nbsp;=&nbsp;<span style=\"color:#2b91af;\">BuiltInParameterGroup</span>.INVALID,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">bool</span>&nbsp;allowVaryBetweenGroups&nbsp;=&nbsp;<span style=\"color:blue;\">true</span>&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">try</span>\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Check&nbsp;if&nbsp;existing</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;param&nbsp;=&nbsp;elem.LookupParameter(&nbsp;paramName&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;!=&nbsp;param&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;NOTE:&nbsp;If&nbsp;you&nbsp;don&#39;t&nbsp;want&nbsp;forcefully&nbsp;setting&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;the&nbsp;&quot;old&quot;&nbsp;instance&nbsp;params&nbsp;to&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;allowVaryBetweenGroups&nbsp;=true,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;just&nbsp;comment&nbsp;the&nbsp;next&nbsp;3&nbsp;lines.</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;instanceBinding&nbsp;&amp;&amp;&nbsp;allowVaryBetweenGroups&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetInstanceParamVaryBetweenGroupsBehaviour(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem.Document,&nbsp;guid,&nbsp;allowVaryBetweenGroups&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;param;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;If&nbsp;here,&nbsp;need&nbsp;to&nbsp;create&nbsp;it&nbsp;(my&nbsp;custom&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;implementation&nbsp;and&nbsp;classes…)</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BindSharedParamResult&nbsp;res&nbsp;=&nbsp;BindSharedParam(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem.Document,&nbsp;elem.Category,&nbsp;paramName,&nbsp;grpName,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;paramType,&nbsp;visible,&nbsp;instanceBinding,&nbsp;userModifiable,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;guid,&nbsp;useTempSharedParamFile,&nbsp;tooltip,&nbsp;uiGrp&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;res&nbsp;!=&nbsp;BindSharedParamResult.eSuccessfullyBound\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;res&nbsp;!=&nbsp;BindSharedParamResult.eAlreadyBound&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Set&nbsp;AllowVaryBetweenGroups&nbsp;for&nbsp;NEW&nbsp;Instance&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Binding&nbsp;Shared&nbsp;Param</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;instanceBinding&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SetInstanceParamVaryBetweenGroupsBehaviour(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elem.Document,&nbsp;guid,&nbsp;allowVaryBetweenGroups&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;If&nbsp;here,&nbsp;binding&nbsp;is&nbsp;OK&nbsp;and&nbsp;param&nbsp;seems&nbsp;to&nbsp;be</span>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;IMMEDIATELY&nbsp;available&nbsp;from&nbsp;the&nbsp;very&nbsp;same&nbsp;command</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;elem.LookupParameter(&nbsp;paramName&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">catch</span>(&nbsp;<span style=\"color:#2b91af;\">Exception</span>&nbsp;ex&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.Windows.Forms.<span style=\"color:#2b91af;\">MessageBox</span>.Show(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>.Format(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Error&nbsp;in&nbsp;getting&nbsp;or&nbsp;creating&nbsp;Element&nbsp;Param:&nbsp;{0}&quot;</span>,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ex.Message&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">null</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nI added Miro's method `SetInstanceParamVaryBetweenGroupsBehaviour` \nto [The Building Coder samples release 2018.0.134.11](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2018.0.134.11) in\nthe module [CmdCreateSharedParams.cs L441-L470](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdCreateSharedParams.cs#L441-L470).\n\nMany thanks to Miro for raising this issue and sharing his approach to solve it!"
  }
]