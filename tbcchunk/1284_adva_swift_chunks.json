[
  {
    "original_filename": "1284_adva_swift",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1284_adva_swift",
    "header_text": "View and Data API Sample in Swift and Mac OS Upgrade",
    "local_header_href": "#view-and-data-api-sample-in-swift-and-mac-os-upgrade",
    "chunk_text": "<h3>View and Data API Sample in Swift and Mac OS Upgrade</h3><p>As you know, we have a pretty impressive number of\n\n<a href=\"https://github.com/Developer-Autodesk\">\nsamples</a> demonstrating\n\nthe use of the\n\n<a href=\"https://developer-autodesk.github.io\">View and Data API</a> web\n\nservices.</p><p>We are currently reviewing them all to ensure their documentation is reliable and consistent.</p><p>I picked Adam Nagy's\n\n<a href=\"https://github.com/Developer-Autodesk/workflow-macos-swift-view.and.data.api\">\nworkflow sample written in Swift</a> to review.</p><p>That required a look at the\n\n<a href=\"https://en.wikipedia.org/wiki/Swift_(programming_language)\">Swift programming language</a> itself\n\nand a system upgrade before I could start with the review itself.</p><p>Before getting to that, let me also mention the upcoming 3D Web Festival, and then wrap up with yet another update of The Building Coder samples:</p><ul>\n<li><a href=\"#2\">3D Web Festival</a></li>\n<li><a href=\"#3\">Swift</a></li>\n<li><a href=\"#4\">Upgrading OS X, Xcode and Parallels</a></li>\n<li><a href=\"#5\">Swift Command Line</a></li>\n<li><a href=\"#6\">Swift Shell Scripting</a></li>\n<li><a href=\"#7\">View and Data API workflow in Swift</a></li>\n<li><a href=\"#8\">Started eliminating automatic transaction mode</a></li>\n</ul><a name=\"2\"></a>"
  },
  {
    "original_filename": "1284_adva_swift",
    "header_text": "3D Web Festival",
    "local_header_href": "#3d-web-festival",
    "chunk_text": "<h4>3D Web Festival</h4><p>Are you a creative human being interested in 3D on the web?</p><p>Then the <a href=\"http://www.3dwebfest.com\">3D Web Festival</a> may be just your thing.</p><p>It will showcase 3D web sites presenting mixtures of music, art and technology, bringing together the best of the 3D Web – presented as Live Performance Art – amazing, delightful, surprising and at times disturbing, including creations by artists and developers of all kinds live with musical accompaniment.</p><p>Time and place is Wednesday May 13th from 7 to 10 pm at the Folsom Street Foundry in San Francisco, with ticket proceeds going to the\n\n<a href=\"http://www.roxie.com\">Roxie</a>, a community-based, non-profit theatre.</p><a name=\"3\"></a>"
  },
  {
    "original_filename": "1284_adva_swift",
    "header_text": "Swift",
    "local_header_href": "#swift",
    "chunk_text": "<h4>Swift</h4><p>The <a href=\"https://en.wikipedia.org/wiki/Swift_(programming_language)\">Swift programming language</a> was\n\ncreated by <a href=\"https://developer.apple.com/swift\">Apple</a> for iOS and OS X development.</p><p>It uses the same underlying machinery as Objective C with a much simpler syntax.</p><p>Python is one of the languages that helped inspire Swift, and Swift also provides a\n\n<a href=\"https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop\">REPL</a> or\n\nread-eval-print loop, even though it is a compiled language.</p><p>Working with Swift code requires the development environment Xcode 6.1, which in turn requires OS X 10.9.4 or higher, nicknamed Mavericks.</p><p>Up until this morning, I was still on 10.8.5, aka Mountain Lion, so it was clear that some serious computer system updating would be required for me to be able t make use of it.</p><a name=\"4\"></a>"
  },
  {
    "original_filename": "1284_adva_swift",
    "header_text": "Upgrading OS X, Xcode and Parallels",
    "local_header_href": "#upgrading-os-x-xcode-and-parallels",
    "chunk_text": "<h4>Upgrading OS X, Xcode and Parallels</h4><p>Well, I took the plunge and upgraded straight from 10.8.5 to 10.10.2 Yosemite, since that was the suggestion made by the Apple AppStore.</p><p>The next step was upgrading Xcode from my previous version of 5.5.1 to 6.1.1.</p><p>That was harder, and I initially failed, until I read the recommendation to simply\n\n<a href=\"http://apple.stackexchange.com/questions/71662/how-to-can-i-upgrade-xcode-4-1-to-4-5-2-properly\">uninstall the previous version</a> and\n\nthen reinstall from scratch.\nEven then it was not as simple as it sounded, though.\nIt took me several attempts before I really had eliminated the previous installation and the reinstallation truly installed the new version instead of just automatically updating the old one.</p><p>As far as I can tell so far, all my other applications work fine after the update, except Parallels Desktop, which I use to run Windows application like Revit and Visual Studio on a virtual machine within the Mac OS.</p><p>The version of Parallels 8 that I was using before the upgrade did not work at all.\nUpgrading that to the newest version of 8 enabled me to start up and use the virtual Windows machines again.</p><p>I was unable to access my virtual Windows drives from the Mac environment, though.</p><p>The Windows drives can be mounted in the Mac file system, enabling access to Windows files from the Mac command line and applications.</p><p>For instance, I have all my Revit add-ins on the C:\\ drive and use git on the Mac terminal command line to clone them down from GitHub and push them and their changes back up again.\nIt would be really painful have to have to move them on a Mac drive, because some loading and debugging does not work unless they are on a local Windows drive.</p><p>Happily, simply upgrading to Parallels 10 finally resolved that issue as well, and the Windows drive <code>C:\\</code> now appears in Mac OS as <code>/Volumes/C</code>, just like it always did:</p><pre>\n  /Volumes/ $ ls -o\n  drwxrwxrwx  1 jta   16384 Feb 18 21:04 C\n  lrwxr-xr-x  1 root      1 Feb 19 07:34 jtharddisk -&gt; /\n</pre><p>I seem to be back to normal again, all systems go, and I can run Swift.</p><a name=\"5\"></a>"
  },
  {
    "original_filename": "1284_adva_swift",
    "header_text": "Swift Command Line",
    "local_header_href": "#swift-command-line",
    "chunk_text": "<h4>Swift Command Line</h4><p>Once Xcode 6.1.1 is installed, the Swift command line is accessible:</p><pre>\n  $ xcrun swift\n  Welcome to Swift!  Type :help for assistance.\n    1&gt; :help\n\n    . . .\n\n    1&gt; var x = 1\n  x: Int = 1\n    2&gt; x+x\n  $R0: Int = 2\n    3&gt;\n</pre><p>As it so kindly tells you, you can type <code>:help</code> for help, and <code>:quit</code> or Ctrl-D to get out of the Swift read-eval-print loop again.</p><p>On OS X Yosemite and Xcode 6.1 or later, as in my case, you can run Swift by just typing <code>swift</code> in the command line.</p><a name=\"6\"></a>"
  },
  {
    "original_filename": "1284_adva_swift",
    "header_text": "Swift Shell Scripting",
    "local_header_href": "#swift-shell-scripting",
    "chunk_text": "<h4>Swift Shell Scripting</h4><p>You can create a Swift shell script and use the shebang to run it as a program directly like this:</p><pre>\n  $ cat hello.sh\n  #!/usr/bin/env xcrun swift\n  println(\"hello world\")\n\n  $ chmod +x hello.sh\n  $ ./hello.sh\n  hello world\n</pre><p>Alternatively, you can pass a Swift script file as an argument to the swift command line like this for the same effect:</p><pre>\n  $ cat hello.sw\n  println(\"hello world\")\n\n  $ swift hello.sw\n  hello world\n</pre><p>Nice tutorials to get started are provided on Santosh Rajan's\n\n<a href=\"https://medium.com/swift-programming\">Swift programming</a> site, e.g.,\n\n<a href=\"https://medium.com/swift-programming/1-learn-swift-by-running-scripts-73fdf8507f4b\">1. Learn Swift by running Scripts</a>.</p><p>A couple of other cool examples are provided by\n\n<a href=\"https://github.com/blakemerryman/Swift-Scripts\">Blake Merryman's Swift scripts</a>.</p><a name=\"7\"></a>"
  },
  {
    "original_filename": "1284_adva_swift",
    "header_text": "View and Data API Workflow in Swift",
    "local_header_href": "#view-and-data-api-workflow-in-swift",
    "chunk_text": "<h4>View and Data API Workflow in Swift</h4><p>Adam's View and Data API workflow sample is by no means a simple Swift script, though, but a full-blown Xcode IDE application:</p><center>\n<img alt=\"Xcode IDE with MacViewStarter app\" src=\"img/MacViewStarter_xcode.png\" width=\"536\"/>\n</center><p>Running the app in the Xcode debugger displays the main screen:</p><center>\n<img alt=\"MacViewStarter app\" src=\"img/MacViewStarter_app.png\" width=\"399\"/>\n</center><p>All you have to do is enter your Autodesk View and Data API credentials, obtained from the\n\n<a href=\"https://developer.autodesk.com\">Autodesk Web Services API</a> web\n\npage, request an access token, enter a valid bucket name and select a file to upload.</p><p>That adds the resulting model identifier – aka\n\n<a href=\"https://en.wikipedia.org/wiki/Uniform_resource_name\">URN</a> or\n\nuniform resource name – to the URN drop-down list:</p><center>\n<img alt=\"MacViewStarter generates a URN\" src=\"img/MacViewStarter_urn.png\" width=\"399\"/>\n</center><p>The image box at the bottom displays the model thumbnail preview once translation is complete, which may take a while for a large model:</p><center>\n<img alt=\"MacViewStarter displays a thumbnail once translation completes\" src=\"img/MacViewStarter_thumbnail.png\" width=\"399\"/>\n</center><p>To make further use of the translated model, please refer to the numerous other\n\n<a href=\"https://github.com/Developer-Autodesk\">View and Data API samples on GitHub</a>.</p><p>Look at the <a href=\"https://developer-autodesk.github.io\">View and Data API sample overview</a> to\n\ndecide where to go next from here.</p><a name=\"8\"></a>"
  },
  {
    "original_filename": "1284_adva_swift",
    "header_text": "Started Eliminating Automatic Transaction Mode",
    "local_header_href": "#started-eliminating-automatic-transaction-mode",
    "chunk_text": "<h4>Started Eliminating Automatic Transaction Mode</h4><p>Let's wrap up with yet another update to\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples\">The Building Coder samples</a>.</p><p>I now started removing the use of the old automatic transaction mode.</p><p>It is probably best never to use it at all nowadays, and go for either Manual or ReadOnly mode, depending on whether you need to update the model or not.</p><p>The first occurence that I happened upon is in the age-old\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/revit-install-location.html\">\nCmdInstallLocation</a> command,\n\nso I updated that from Revit 2010 to 2015 and replaced TransactionMode.Automatic by ReadOnly in it.</p><p>Please note that that command is probably not needed at all nowadays, since other methods are available to determine the Revit installatin location, e.g., using the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/04/perpetual-guid-algorithm-and-revit-2014-product-guids.html\">perpetual GUID algorithm</a>.</p><p>Anyway, the updated command is included in\n\n<a href=\"https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2015.0.117.4\">\nrelease 2015.0.117.4</a> with\n\nmore to follow.</p>"
  }
]