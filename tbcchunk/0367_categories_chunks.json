[
  {
    "original_filename": "0367_categories",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0367_categories",
    "header_text": "Categories",
    "local_header_href": "#categories",
    "chunk_text": "<h3>Categories</h3><p>We have looked at many aspects of categories in the past, such as \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/category-comparison-and-model-element-selection-revisited.html\">\ncategory comparison</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/get-and-set-family-category-and-parameters.html\">\nfamily categories</a>,\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/09/adding-a-category-to-a-parameter-binding.html\">\ncategories and parameter bindings</a>, and\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/10/system-versus-user-family-category.html\">\nsystem versus user defined categories</a>.\n\n<p>Here is very basic question that just came in and may be of general interest:\n\n<p><strong>Question:</strong> Is it possible to obtain a complete list of Revit family categories?\n\n<p><strong>Answer:</strong> Yes, sure it is. \nYou can create it yourself. \nThere are two sets of categories in a Revit project document: the ones defined in the document itself, and the pre-defined built-in ones.\n\n<p>The top-level document ones are available from the document settings categories property, and the built-in ones from the BuiltInCategory enumeration.\n\n<p>I implemented a new Building Coder sample command CmdCategories to list the contents of these two collections.\n\n<p>This is the code to read the document categories.\nThe Categories object is a map that contains all the top-level Category objects within the Document:\n\n<pre class=\"code\">\n  <span class=\"teal\">UIApplication</span> app = commandData.Application;\n  <span class=\"teal\">Document</span> doc = app.ActiveUIDocument.Document;\n  <span class=\"teal\">Categories</span> categories = doc.Settings.Categories;\n \n  <span class=\"blue\">int</span> n = categories.Size;\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} categories and their parents:\"</span>, n );\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">Category</span> c <span class=\"blue\">in</span> categories )\n  {\n    <span class=\"teal\">Category</span> p = c.Parent;\n \n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0} ({1}), parent {2}\"</span>,\n      c.Name, c.Id.IntegerValue, \n      (<span class=\"blue\">null</span> == p ? <span class=\"maroon\">\"&lt;none&gt;\"</span> : p.Name) );\n  }\n</pre>\n<p>This lists 219 categories in the sample project I tested it in, starting like this:\n\n<pre>\n219 categories and their parents:\n  Plumbing Fixture Tags (-2005010), parent &lt;none&gt;\n  Switch System (-2008101), parent &lt;none&gt;\n  Structural Framing Tags (-2005015), parent &lt;none&gt;\n  Room Tags (-2000480), parent &lt;none&gt;\n  Raster Images (-2000560), parent &lt;none&gt;\n  Security Devices (-2008079), parent &lt;none&gt;\n  Structural Beam System Tags (-2005130), parent &lt;none&gt;\n</pre>\n<p>Since all of these are top-level categories, the Parent property is always null.\nYou can still ask the map for a sub-category by name or id and it should return it to you.  \nYou can also extract the sub-categories of each parent category you iterate.\n\n<p>Here is the code iterating over the built-in categories listed in the BuiltInCategory enumeration:\n\n<pre class=\"code\">\n  <span class=\"teal\">Array</span> bics = <span class=\"teal\">Enum</span>.GetValues( \n    <span class=\"blue\">typeof</span>( <span class=\"teal\">BuiltInCategory</span> ) );\n \n  n = bics.Length;\n \n  <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"{0} built-in categories and the \"</span>\n    + <span class=\"maroon\">\"corresponding document ones:\"</span>, n );\n \n  <span class=\"teal\">Category</span> cat;\n  <span class=\"blue\">string</span> s;\n \n  <span class=\"blue\">foreach</span>( <span class=\"teal\">BuiltInCategory</span> bic <span class=\"blue\">in</span> bics )\n  {\n    <span class=\"blue\">try</span>\n    {\n      cat = categories.get_Item( bic );\n \n      s = (<span class=\"blue\">null</span> == cat)\n        ? <span class=\"maroon\">\"&lt;none&gt;\"</span>\n        : <span class=\"blue\">string</span>.Format( <span class=\"maroon\">\"--&gt; {0} ({1}\"</span>, \n          cat.Name, cat.Id.IntegerValue );\n    }\n    <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n    {\n      s = ex.GetType().Name + <span class=\"maroon\">\" \"</span> + ex.Message;\n    }\n    <span class=\"teal\">Debug</span>.Print( <span class=\"maroon\">\"  {0} {1}\"</span>, bic.ToString(), s );\n  }\n</pre>\n<p>This lists 747 built-in categories and their corresponding document ones, if found.\n\n<p>I had to add an exception handler around the call to the Categories collection Item property taking a BuiltInCategory argument, since I discovered that it throws exceptions when called with certain built-in categories:\n\n<ul>\n<li>A InvalidOperationException with an empty message on the built-in categories \n<ul>\n<li>OST_FurnitureHiddenLines \n<li>OST_HostTemplate InvalidOperationException \n<li>OST_MassFaceSplitter InvalidOperationException \n<li>OST_MassCutter InvalidOperationException \n<li>OST_ZoningEnvelope InvalidOperationException \n</li></li></li></li></li></ul>\n<li>A NullReferenceException with a message saying \"Object reference not set to an instance of an object\" on\n<ul>\n<li>OST_InstanceDrivenLineStyle \n<li>OST_CurtainGridsSystem\n<li>OST_IOSNotSilhouette\n<li>OST_InvisibleLines \n</li></li></li></li></ul>\n</li></li></ul>\n<p>This is due to the fact that a few categories can't be stored in the map correctly because their names are the same as other categories, and the name is used as a key.\nA workaround might be: obtain the category from a new Categories object (from Settings.Categories), get the category directly by BuiltInCategory from that object.\n\n<p>Here is a \n\n<a href=\"zip/367_categories.txt\">\ntext file</a> including \nthe output of running this command in my simple sample project.\n\n<p>Here is\n\n<a href=\"zip/bc_11_67.zip\">\nversion 2011.0.67.0</a>\n\nof The Building Coder sample source code and Visual Studio solution including the new command.\n\n<p>The Revit 2010 version of the Revit API introduction labs also included a command Lab2_5_Categories which performed some further analysis on the document and built-in categories and their relationships with each other.\nThe last version we published was in the discussion on\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2009/11/select-model-elements-2.html\">\nselecting model elements\n</a>.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]