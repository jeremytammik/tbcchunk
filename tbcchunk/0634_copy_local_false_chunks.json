[
  {
    "original_filename": "0634_copy_local_false",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0634_copy_local_false",
    "header_text": "Set Copy Local to False",
    "local_header_href": "#set-copy-local-to-false",
    "chunk_text": "<h3>Set Copy Local to False</h3><p>I cannot count the number of times I have pointed out that the Copy Local flag should be set to false on the Revit API assembly references.\n\nHere are some of the numerous previous examples and explanations of this:\n\n<!--\n\n006_sdk_samples_solution.htm:'Copy Local' flag maintained by\n006_sdk_samples_solution.htm:and at the same time the existi\n008_debugging.htm:<li>Do not forget to set the 'Copy Local'\n008_debugging.htm:<li>Do not forget to set the 'Copy Local'\n024_application_events_vb.htm:<li>Set its 'Copy Local' flag\n159_export_instance_to_gbxml.htm:<li><a href=\"#2\">Set Copy L\n159_export_instance_to_gbxml.htm:<h4>Set Copy Local to False\n159_export_instance_to_gbxml.htm:<p>Always ensure that the C\n189_porting_to_vb.htm:<li>Click the \"Show All Files\" button\n268_custom_ribbon_tab.htm:As always, we need to remember to\n310_reload_addin.htm:<p>By the way, in this sample, the Revi\n360_p2c.htm:<p>Almost all Revit add-ins will need to referen\n415_devtv_addin_templates.htm:<li>References to Revit assemb\n443_idling_selection_watcher.htm:<li>You need to set the 'Co\n459_cpp_addin.htm:<p>Don't forget to set the Copy Local flag\n\n-->\n<ul>\n<li>A <a href=\"http://thebuildingcoder.typepad.com/blog/2010/10/c-revit-add-in.html\">C++ Revit add-in</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/09/selection-watcher-using-idling-event.html\">Selection watcher using Idling event</a>\n<li>The <a href=\"http://thebuildingcoder.typepad.com/blog/2010/07/devtv-addin-templates.html\">DevTV add-in templates</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/pipe-to-conduit-converter.html#1\">Pipe to conduit converter</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/12/custom-ribbon-tab.html\">Custom ribbon tab</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/07/porting-from-c-to-vbnet.html\">Porting from C# to VB.NET</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/06/export-family-instance-to-gbxml.html#2\">Exporting a family instance to gbXML</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/application-events-in-vb.html\">Application events in VB</a>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/debugging-a-rev.html\">Debugging a Revit add-in</a>\n<li>The <a href=\"http://thebuildingcoder.typepad.com/blog/2008/09/the-sdk-samples.html\">SDK samples solution</a>\n</li></li></li></li></li></li></li></li></li></li></ul>\n<p>This flag appears in the properties of the Revit API references.\nIt is also displayed in the list of the references themselves in a VB project.\nHere they are set to True, which is what we want to <b>avoid</b>:</p>\n<center>\n<img alt=\"Copy Local flag in a VB project\" src=\"img/copy_local_vb.png\"/>\n</center>\n<p>In a C# project, you can right click on the Revit API references in the Visual Studio solution explorer and selecting its properties in the context menu to see and modify its current setting:</p>\n<center>\n<img alt=\"Copy Local flag in a C# project\" src=\"img/copy_local_cs.png\"/>\n</center>\n<p>You can toggle this property with a double click.\n\n<p>If this flag is set to True, Visual Studio will create local copies of RevitAPI.dll and RevitAPIUI.dll when compiling the plug-in and use these copies when loading them. \nThis confuses the debugger and Revit when running the add-in, as well as unnecessarily polluting your hard disk with copies of this multi-MB file.\n\n<p>To avoid having to reset this property when modifying an existing reference, for instance when migrating to a new version of the Revit API, do not delete the existing reference. \nInstead, simply add the new reference to the current assembly to overwrite the old one.\nThe old, existing data will be updated, the new path will be stored, and the existing 'Copy Local' setting will be preserved.\n\n<p>By the way, the same applies to the \n\n<a href=\"http://through-the-interface.typepad.com/through_the_interface/2006/09/initialization_.html\">\nAutoCAD.NET assemblies</a>.\n\n<p>At least this post gives me a completely comprehensive description to refer to next time I have to point this out...\n</p></p></p></p></p></p>"
  }
]