[
  {
    "original_filename": "1035_geo_bound_box",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "1035_geo_bound_box",
    "header_text": "LINQ DIY Transformed Geometry Bounding Box",
    "local_header_href": "#linq-diy-transformed-geometry-bounding-box",
    "chunk_text": "<h3>LINQ DIY Transformed Geometry Bounding Box</h3><p>We looked at a couple of transformation issues in the past, e.g.:</p><ul>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2008/12/polygon-transformation.html\">Polygon Transformation</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/transform.html\">Transform</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/03/transform-instance-coordinates.html\">Transform Instance Coordinates</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2009/05/transform-an-element.html\">Transform an Element</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/transformations.html\">Transformations</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/06/get-transformed-family-instance-geometry.html\">Get Transformed Family Instance Geometry</a></li>\n<li><a href=\"http://thebuildingcoder.typepad.com/blog/2011/11/planar-face-transform.html\">Planar Face Transform</a></li>\n</ul><p>Now Jon Smith of\n\n<a href=\"http://coins-global.com\">\nConstruction Industry Solutions Ltd</a> raised\n\nanother issue related to transformations.</p><p>Unlike the ones listed above, however, this one deals with the transformation and bounding box of the in-memory geometry objects, as opposed to database elements:</p><p><strong>Question:</strong> We need to transform some elements into a different coordinate system before getting their bounding box.\nWe are doing this by getting the GeometryElement object, calling GetTransformed on it, and then calling GetBoundingBox on that.</p><p>This works perfectly well in Revit 2014.\nIn Revit 2013, however, calling GetBoundingBox on a transformed GeometryElement returns a box with a huge negative maximum, and a huge positive maximum – obviously wrong – and the max is less than the min.\nIs there a workaround for this in 2013?\nI tried tweaking the geometry options but to no avail.\nAlso, the actual geometry objects contained in the geometry elements do appear to be valid (or at least there are the same number of solids in the pre and post transformation elements).</p><p>Here is a code snippet that demonstrates the problem.\nIn my real code, I am transforming the GeometryElement by something meaningful, but in this sample case I just use the identity matrix.\nTherefore, preTransformBox should be equal to postTransformBox.\nOne problem with the sample is both max and min are displaying positive in the dialog, but max is actually negative – the values are too large to display properly!\nThis sample works fine in 2014, but in 2013 the returned BoundingBoxXYZ is garbage:</p><pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"blue\">void</span> test( <span class=\"teal\">Element</span> elem )\n{\n  <span class=\"teal\">Options</span> geomOpts = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n \n  <span class=\"teal\">GeometryElement</span> geometryElement\n    = elem.get_Geometry( geomOpts );\n \n  <span class=\"blue\">if</span>( geometryElement == <span class=\"blue\">null</span> )\n    <span class=\"blue\">return</span>;\n \n  <span class=\"teal\">BoundingBoxXYZ</span> preTransformBox\n    = geometryElement.GetBoundingBox();\n \n  <span class=\"teal\">GeometryElement</span> geometryElementTransformed\n    = geometryElement.GetTransformed(\n      <span class=\"teal\">Transform</span>.Identity );\n \n  <span class=\"teal\">BoundingBoxXYZ</span> blah = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxXYZ</span>();\n \n  <span class=\"teal\">BoundingBoxXYZ</span> postTransformBox\n    = geometryElementTransformed.GetBoundingBox();\n \n  System.Windows.Forms.<span class=\"teal\">MessageBox</span>.Show(\n    <span class=\"maroon\">\"Pre Min: \"</span> + preTransformBox.Min.ToString()\n    + <span class=\"maroon\">\"\\nPre Max: \"</span> + preTransformBox.Min.ToString()\n    + <span class=\"maroon\">\"\\nPost Min: \"</span> + postTransformBox.Min.ToString()\n    + <span class=\"maroon\">\"\\nPost Max: \"</span> + postTransformBox.Min.ToString() );\n}\n</pre><p><strong>Answer:</strong> Interesting topic.\nI have not used the geometry element transformation or bounding box functionality in the past, just of the main Revit database element.</p><p>What do you use it for, please?</p><p>Is there an alternative way to achieve your goal?</p><p>Could you use the database element bounding box instead of the geometry element one?</p><p>I am glad to hear that the problem does not occur in Revit 2014.</p><p>Regarding the situation in Revit 2013, the fact that the normal geometry retrieval seems to be working properly sounds like a good starting point to me.</p><p>I would suggest simply traversing that geometry and creating your own min and max bounding box points from it.</p><p>There are several samples on the blog that demonstrate the process, e.g. the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2012/08/structural-concrete-setout-point-add-in.html\">\nstructural setout point</a> application.\nIt collects and marks all vertices of structural concrete element geometry solids.</p><p>Instead of collecting all the individual points from the geometry, you could just traverse the points and keep track of and extend the min and max as you go along. If you wish to handle curved elements correctly, you could ask them for their tessellations and process all the intermediate points as well.</p><p><strong>Answer:</strong> Perfect – thank you!\nTalking it through has helped me with a shim for 2013.</p><p>The reason for using GeometryElement is we can transform the geometry into the elements \"ECS\" or entity coordinate system, using AutoCAD terminology, so we can create a tight bounding box for it.\nWe cannot transform the element itself as its geometry may be affected by other elements, e.g. wall joins.</p><p>My solution for 2013 (that appears to work from some initial testing) is to extract all triangulated edges for each solid in each non-transformed geometry element, transform the points into the ECS and create the bounding box from those points.</p><p>I pulled out the code into the following stand-alone method getAlignedBoundingBoxFromElement – it’s still fairly long but there might be something useful in it.</p><p>It includes both ways of retrieving the aligned bounding box in the code – the 2014 method, and the 2013 one as a fallback.\nI prefer the 2014 method as it does not rely on a particular type of geometry and will be future-proof if other geometry types are added, or Revit changes its bounding-box algorithm:</p><pre class=\"code\">\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> Return an aligned bounding box around a given</span>\n  <span class=\"gray\">///</span><span class=\"green\"> element. Only works if the element uses a </span>\n  <span class=\"gray\">///</span><span class=\"green\"> LocationCurve (not LocationPoint).</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;/summary&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;param name=\"elem\"&gt;</span><span class=\"green\">Element to return </span>\n  <span class=\"gray\">///</span><span class=\"green\"> bounding box for</span><span class=\"gray\">&lt;/param&gt;</span>\n  <span class=\"gray\">///</span><span class=\"green\"> </span><span class=\"gray\">&lt;returns&gt;</span><span class=\"green\">Bounding box</span><span class=\"gray\">&lt;/returns&gt;</span>\n  <span class=\"blue\">public</span> <span class=\"blue\">static</span> <span class=\"teal\">BoundingBoxXYZ</span>\n    getAlignedBoundingBoxFromElement(\n      <span class=\"teal\">Element</span> elem )\n  {\n    <span class=\"teal\">LocationCurve</span> lc = elem.Location\n      <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n \n    <span class=\"blue\">if</span>( lc != <span class=\"blue\">null</span>\n      &amp;&amp; lc.Curve.IsBound )\n    {\n      <span class=\"teal\">Options</span> geomOpts = <span class=\"blue\">new</span> <span class=\"teal\">Options</span>();\n \n      <span class=\"teal\">GeometryElement</span> geometryElement\n        = elem.get_Geometry( geomOpts );\n \n      <span class=\"blue\">if</span>( geometryElement != <span class=\"blue\">null</span> )\n      {\n \n        <span class=\"green\">// transformation matrix from model </span>\n        <span class=\"green\">// to the element curve ECS</span>\n        <span class=\"green\">// to simplify it, we force the transformation </span>\n        <span class=\"green\">// to be aligned to the world XY plane - so </span>\n        <span class=\"green\">// just rotated around the Z axis</span>\n \n<span class=\"blue\">#if</span> _REVIT2014_\n        <span class=\"teal\">XYZ</span> StartPoint = lc.Curve.GetEndPoint(0);\n        <span class=\"teal\">XYZ</span> EndPoint = lc.Curve.GetEndPoint(1);\n<span class=\"blue\">#else</span>\n<span class=\"gray\">        XYZ StartPoint = lc.Curve.get_EndPoint( 0 );</span>\n<span class=\"gray\">        XYZ EndPoint = lc.Curve.get_EndPoint( 1 );</span>\n<span class=\"blue\">#endif</span>\n \n        <span class=\"green\">// flatten its Z - where the Z is, is </span>\n        <span class=\"green\">// irrelevant as the bounding box will </span>\n        <span class=\"green\">// determine the height</span>\n \n        EndPoint = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>( EndPoint.X, EndPoint.Y,\n          StartPoint.Z ); \n \n        <span class=\"teal\">XYZ</span> direction = EndPoint - StartPoint;\n        <span class=\"teal\">XYZ</span> normal = <span class=\"teal\">XYZ</span>.BasisZ;\n \n        <span class=\"teal\">Transform</span> t\n          = <span class=\"teal\">Transform</span>.Identity;\n \n        t.Origin = StartPoint;\n        t.BasisX = direction.Normalize();\n \n        t.BasisY = normal.CrossProduct( t.BasisX )\n          .Normalize();\n \n        t.BasisZ = t.BasisX.CrossProduct( t.BasisY )\n          .Normalize();\n \n        <span class=\"green\">// check we have a valid matrix</span>\n \n        <span class=\"blue\">if</span>( !t.IsConformal || t.Determinant &lt; 0 )\n          <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n \n        <span class=\"teal\">Transform</span> modelToElementTransform = t.Inverse;\n \n        <span class=\"green\">// transform the geometry into the ECS we </span>\n        <span class=\"green\">// have created to get an aligned bounding box</span>\n \n        <span class=\"teal\">GeometryElement</span> geometryElementTransformed\n          = geometryElement.GetTransformed(\n            modelToElementTransform );\n \n        <span class=\"teal\">BoundingBoxXYZ</span> ecsBoundingBox\n          = geometryElementTransformed\n            .GetBoundingBox();\n \n        <span class=\"green\">// Revit 2013 Shim</span>\n        <span class=\"green\">// ===============</span>\n        <span class=\"green\">// in Revit 2013, the returned bounding box </span>\n        <span class=\"green\">// is garbage - the Max is hugely negative </span>\n        <span class=\"green\">// and the Min is hugely positive</span>\n        <span class=\"green\">// if this happens then get geometry points </span>\n        <span class=\"green\">// in model coordinates, convert to element </span>\n        <span class=\"green\">// coordinates and create bounding box from </span>\n        <span class=\"green\">// those</span>\n        <span class=\"green\">// NB. we could use this code for 2014 as </span>\n        <span class=\"green\">// well, but the calculation is probably not </span>\n        <span class=\"green\">// as accurate for some situations</span>\n \n        <span class=\"blue\">if</span>( ecsBoundingBox.Max.X\n          &lt; ecsBoundingBox.Min.X )\n        {\n          <span class=\"green\">// get points from all edges in all solids </span>\n          <span class=\"green\">// - allows for curves by using tessellated </span>\n          <span class=\"green\">// edges</span>\n \n          <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;();\n \n          <span class=\"blue\">foreach</span>( <span class=\"teal\">Solid</span> solid <span class=\"blue\">in</span> geometryElement\n            .OfType&lt;<span class=\"teal\">Solid</span>&gt;() )\n          {\n            <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> solid.Edges )\n              pts.AddRange( edge.Tessellate() );\n          }\n \n          <span class=\"green\">// transform the points into element </span>\n          <span class=\"green\">// coordinates</span>\n \n          ecsBoundingBox = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxXYZ</span>();\n \n          pts = pts.Select(\n              pt =&gt; modelToElementTransform.OfPoint(\n                pt ) )\n            .ToList();\n \n          <span class=\"blue\">if</span>( pts.Any() )\n          {\n            <span class=\"green\">// calculate the bounding box</span>\n \n            ecsBoundingBox = <span class=\"blue\">new</span> <span class=\"teal\">BoundingBoxXYZ</span>();\n \n            ecsBoundingBox.Max = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n              pts.Max( pt =&gt; pt.X ),\n              pts.Max( pt =&gt; pt.Y ),\n              pts.Max( pt =&gt; pt.Z ) );\n \n            ecsBoundingBox.Min = <span class=\"blue\">new</span> <span class=\"teal\">XYZ</span>(\n              pts.Min( pt =&gt; pt.X ),\n              pts.Min( pt =&gt; pt.Y ),\n              pts.Min( pt =&gt; pt.Z ) );\n          }\n          <span class=\"blue\">else</span>\n          {\n            <span class=\"green\">// fail-case - if element has </span>\n            <span class=\"green\">// no solid geometry</span>\n \n            <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n          }\n        }\n \n        <span class=\"green\">// finally apply the ECS to Model </span>\n        <span class=\"green\">// transformation back to the bounding box</span>\n \n        ecsBoundingBox.Transform = t.Multiply(\n          ecsBoundingBox.Transform );\n \n        <span class=\"blue\">return</span> ecsBoundingBox;\n      }\n    }\n    <span class=\"blue\">return</span> <span class=\"blue\">null</span>;\n  }\n</pre><p>Many thanks to Jon for this discovery, his nice exploration and clean solution.</p><p>Please note that his method includes some neat use of generic LINQ methods to succinctly extract all vertices and tessellation points from all solids contained in the element geometry and determine their maximum and minimum coordinate values in a very few lines of code:</p><a name=\"2\"></a>"
  },
  {
    "original_filename": "1035_geo_bound_box",
    "header_text": "Extract all Vertices and Tessellation Points from all Solids",
    "local_header_href": "#extract-all-vertices-and-tessellation-points-from-all-solids",
    "chunk_text": "<h4>Extract all Vertices and Tessellation Points from all Solids</h4><p>Let me extract and highlight Jon's compact example of using LINQ to achieve the following, since it can come in useful and be reused for numerous purposes:</p><ul>\n<li>Extract all solids from the element geometry.</li>\n<li>Extract all vertices and intermediate tessellation points from all edges of each solid.</li>\n</ul><pre class=\"code\">\n    <span class=\"green\">// get points from all edges in all solids </span>\n    <span class=\"green\">// - allows for curves by using tessellated </span>\n    <span class=\"green\">// edges</span>\n\n    <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt; pts = <span class=\"blue\">new</span> <span class=\"teal\">List</span>&lt;<span class=\"teal\">XYZ</span>&gt;();\n\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">Solid</span> solid <span class=\"blue\">in</span> geometryElement\n      .OfType&lt;<span class=\"teal\">Solid</span>&gt;() )\n    {\n      <span class=\"blue\">foreach</span>( <span class=\"teal\">Edge</span> edge <span class=\"blue\">in</span> solid.Edges )\n        pts.AddRange( edge.Tessellate() );\n    }\n</pre><a name=\"3\"></a>"
  },
  {
    "original_filename": "1035_geo_bound_box",
    "header_text": "Isolate Conditional Compilation",
    "local_header_href": "#isolate-conditional-compilation",
    "chunk_text": "<h4>Isolate Conditional Compilation</h4><p>I have one little generic suggestion to improve readability of the code above, applicable in many other circumstances as well:</p><p>You could eliminate the conditional compilation in the following lines:</p><pre class=\"code\">\n  <span class=\"blue\">#if</span> _REVIT2014_\n    <span class=\"teal\">XYZ</span> StartPoint = lc.Curve.GetEndPoint(0);\n    <span class=\"teal\">XYZ</span> EndPoint = lc.Curve.GetEndPoint(1);\n<span class=\"blue\">  #else</span>\n<span class=\"gray\">    XYZ StartPoint = lc.Curve.get_EndPoint( 0 );</span>\n<span class=\"gray\">    XYZ EndPoint = lc.Curve.get_EndPoint( 1 );</span>\n<span class=\"blue\">  #endif</span>\n</pre><p>This could be replaced by implementing an extension method for the Curve class named GetEndpoint, which is conditionally compiled and only defined for Revit versions prior to 2014.</p><p>With such an extension method, the new Revit 2014 code could be used throughout, and you would not even see that the extension method routes it through to the old method when needed.</p>"
  }
]