[
  {
    "original_filename": "0933_group_headers",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0933_group_headers",
    "header_text": "Grouping Schedule Headers and How to Do Something",
    "local_header_href": "#grouping-schedule-headers-and-how-to-do-something",
    "chunk_text": "<h3>Grouping Schedule Headers and How to Do Something</h3><p>Here is my first real Revit 2014 post, sharing some code friendlily provided by David Robison of\n\n<a href=\"http://www.designmaster.biz\">Design Master</a>\n\nshowing how to use the ViewSchedule.GroupHeaders method.\n\n\n<a name=\"2\"></a>\n<h4>Using the ViewSchedule GroupHeaders Method</h4>\n<p><strong>Question:</strong> I am trying to call ViewSchedule.GroupHeaders, and it keeps throwing an unhandled argument exception saying \"Headers could not be grouped. Parameter name: right\".\n\n<p><strong>Answer:</strong> Yes, this issue has been raised in the past and a few solutions were suggested.\n\n<h5>First case</h5>\n<p>The ViewSchedule.GroupHeaders produces the argument exception mentioned above.\n\n<p>After a schedule is created, however, calling it directly with the same parameters succeeds, so the issue is not related to the arguments provided.\n\n<p>I investigated this issue and found 2 workarounds:\n\n<ol>\n<li>Activate the new schedule view and then group the header.</li>\n<li>Refresh the new schedule view and then group the header when the schedule is out of data.</li>\n</ol>\n<p>It seems that the second workaround is the right way to 'fix' this issue.\nWe have to manually refresh the schedule data if the view is out of data.\nThis behaviour is by design.\n\n<h5>Second case</h5>\n<p>The API cannot get the updated value in Body section if the schedule view is not opened.\n\n<p>Close the schedule view:\n\n<ol>\n<li>IsCellOverridden returns True;</li>\n<li>ResetCellOverride;</li>\n<li>IsCellOverridden also returns True;</li>\n</ol>\n<p>Open the schedule view:\n\n<ol>\n<li>IsCellOverridden returns True;</li>\n<li>ResetCellOverride;</li>\n<li>IsCellOverridden returns False (as expected);</li>\n</ol>\n<p>The workaround is to call viewSchedule.GetTableData again.\n\n<p>The API calls will not work in the body section if the schedule view is closed.\n\n<p>The root cause is that the schedule data (especially the body section) will not be updated if the schedule view is closed.\n\n<p>This is no problem for the user interface, and improves performance because the schedule data is not regenerated.\nIt does cause a problem in the API, though.\n\n\n<p><strong>Response:</strong> I got this to work using the suggestion in first case #1.\n\n<p>I created the schedule, closed the transaction, set the schedule to the ActiveView and then grouped the headers.\n\n<p>I also discovered that the column indexes ignore hidden columns.\n\n<p>Here is a sample external command demonstrating the ViewSchedule.GroupHeaders function.\nPlease note the comments describing some of the steps in more detail:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">UIDocument</span> uidoc = commandData.Application\n      .ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Create the schedule</span>\n \n    <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n    tran.Start( <span class=\"maroon\">\"Create schedule\"</span> );\n \n    <span class=\"teal\">ViewSchedule</span> sampleSchedule\n      = <span class=\"teal\">ViewSchedule</span>.CreateSchedule( doc, <span class=\"blue\">new</span>\n        <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInCategory</span>.OST_Windows ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span>\n      <span class=\"teal\">ViewSchedule</span>.GetAvailableParameters( doc, <span class=\"blue\">new</span>\n        <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInCategory</span>.OST_Windows ) ) )\n    {\n      <span class=\"blue\">try</span>\n      {\n        sampleSchedule.Definition.AddField(\n          <span class=\"blue\">new</span> <span class=\"teal\">SchedulableField</span>(\n            <span class=\"teal\">ScheduleFieldType</span>.Instance, id ) );\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> )\n      {\n      }\n    }\n    <span class=\"teal\">ScheduleDefinition</span> sampleDefinition\n      = sampleSchedule.Definition;\n \n    <span class=\"green\">// Hide two columns in the schedule</span>\n \n    sampleDefinition.GetField( 0 ).IsHidden = <span class=\"blue\">true</span>;\n    sampleDefinition.GetField( 1 ).IsHidden = <span class=\"blue\">true</span>;\n \n    <span class=\"green\">// Commit the schedule. This is important so </span>\n    <span class=\"green\">// you can set the active view.</span>\n \n    tran.Commit();\n \n    <span class=\"green\">// Change the active view to the schedule. </span>\n    <span class=\"green\">// This is required before the GroupHeaders </span>\n    <span class=\"green\">// function will work.</span>\n \n    uidoc.ActiveView = sampleSchedule;\n \n    <span class=\"green\">// Group the last three headers.</span>\n    <span class=\"green\">// Hidden fields are not counted in the left </span>\n    <span class=\"green\">// and right values, so make sure to account </span>\n    <span class=\"green\">// for that.</span>\n \n    tran.Start( <span class=\"maroon\">\"Group headers\"</span> );\n \n    <span class=\"blue\">int</span> iFieldCount = sampleDefinition\n      .GetFieldCount();\n \n    sampleSchedule.GroupHeaders( 0,\n      iFieldCount - 5, 0,\n      iFieldCount - 3, <span class=\"maroon\">\"Group Header\"</span> );\n \n    tran.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">MessageBox</span>.Show( ex.ToString(),\n      <span class=\"maroon\">\"Group Headers Sample\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n}\n</pre>\n<p>Here are two important pieces of information I learned:\n\n<ol>\n<li>You have to set the active view to the schedule before the GroupHeaders method will work.</li>\n<li>The left and right indices do not include hidden columns, so you need to make sure to adjust for those.</li>\n</ol>\n<p>For completeness' sake, here is\n\n<a href=\"GroupHeadersSamplerJt2.zip\">GroupHeadersSampler.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for this command.\n\n<p>Many thanks to David for testing this and sharing the code.\nHopefully you are able to make good use of this sample.\n\n\n<p>Before closing, here is are some thoughts on how to research automating something using the Revit API in general, the kind of suggestions I regularly provide orally and seldom wind up putting down clearly and separately in writing:</p>\n<a name=\"3\"></a>\n<h4>How to Research Automating Something</h4>\n<p><strong>Question:</strong> I would like to create a dimension that differs from the normal linear dimension style within the template.\n\n<p>Here is an example of the normal dimension style and the modified variant I would like, with the dimension text sticking out on the side like this instead:</p>\n<center>\n<img alt=\"Dimension with leader\" src=\"img/dimension_with_leader.jpeg\" width=\"500\"/>\n</center>\n<p>How can I realise this programmatically, please?</p>\n<!--\n<p>After some research, </p>\nI can imagine that there are two ways to create it.\n\n1 .Prepare family style for Liner dimension.\n2.Change dimension test position and leader type to liner after drawing dimension instance\n\nI’m not sure which is simplest solution for him. And I tried to create code using my option #2.\nHowever I cannot find appropriate method or property to realize like below.\n\n  Document doc = revit.Application.ActiveUIDocument.Document;\n\n  using( Transaction tx = new Transaction( doc ) )\n  {\n      tx.Start( \"LinerDimension\" );\n      XYZ location1 = new XYZ(0.0, 0.0, 0.0);\n      XYZ location2 = new XYZ(0.0, 20.0, 0.0);\n      XYZ location3 = new XYZ(20.0, 0.0, 0.0);\n      XYZ location4 = new XYZ(20.0, 20.0, 0.0);\n\n      Curve curve1 = revit.Application.Application.Create.NewLine(location1, location2, true);\n      Curve curve2 = revit.Application.Application.Create.NewLine(location3, location4, true);\n      DetailCurve dCurve1 = doc.Create.NewDetailCurve(doc.ActiveView, curve1);;\n      DetailCurve dCurve2 = doc.Create.NewDetailCurve(doc.ActiveView, curve2);\n      Line line = revit.Application.Application.Create.NewLine(location2, location4, true);\n\n      ReferenceArray refArray = new ReferenceArray();\n      refArray.Append(dCurve1.GeometryCurve.Reference);\n      refArray.Append(dCurve2.GeometryCurve.Reference);\n\n      Dimension dim = null;\n      dim = doc.Create.NewDimension(doc.ActiveView, line, refArray);\n\n      if (dim != null)\n      {\n          dim.????? = ????;\n      }\n\n      tx.Commit();\n  }\n\nPlease let me know which is best. Also I need your input how to realize.\n-->\n<p><strong>Answer:</strong> There is a simple standard procedure for exploring this kind of issue.</p>\n<p>First of all, determine whether what you wish is possible manually in the user interface.</p>\n<p>If not, then it is probably not possible programmatically either.\n\n<p>If yes, then the two models before and after can be compared using\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">\nRevitLookup</a>,\n\nincluded with the Revit SDK, to analyse the differences.\n\n<p>That might give a hint how to achieve it programmatically.\n\n<p>If no differences can be found, then it is maybe impossible.\n\n<p>In this case, you can apparently achieve your goal manually, so the first hurdle is already taken.\n\n<p>Looking at the NewDimension method and the Dimension class members, I see no obvious input arguments or properties that might affect the dimension in the desired way.\n\n<p>Therefore, the only remaining things to check are the parameters on the dimension object.\n\n<p>You can list those before and after using RevitLookup or the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/built-in-parameter-enumeration-duplicates-and-bipchecker-update.html\">\nbuilt-in parameter BipChecker</a> and\n\ncompare.\n\n<p>I hope this helps.\n\n\n<p><strong>Response:</strong> Yes, as you say, I know that it is possible to create this manually.\n\n<p>And yes, the text position and leader information are not shown in the standard UI, nor visible in RevitLookup.\n\n<p>I guess that this specific task cannot be achieved programmatically at this moment, then.\n\n\n<p><strong>Answer:</strong> Sorry about that.\n\n<p>I hope the standard exploration procedure described above will prove useful anyway.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0933_group_headers",
    "header_text": "Using the ViewSchedule GroupHeaders Method",
    "local_header_href": "#using-the-viewschedule-groupheaders-method",
    "chunk_text": "<h4>Using the ViewSchedule GroupHeaders Method</h4><p><strong>Question:</strong> I am trying to call ViewSchedule.GroupHeaders, and it keeps throwing an unhandled argument exception saying \"Headers could not be grouped. Parameter name: right\".\n\n<p><strong>Answer:</strong> Yes, this issue has been raised in the past and a few solutions were suggested.\n\n<h5>First case</h5>\n<p>The ViewSchedule.GroupHeaders produces the argument exception mentioned above.\n\n<p>After a schedule is created, however, calling it directly with the same parameters succeeds, so the issue is not related to the arguments provided.\n\n<p>I investigated this issue and found 2 workarounds:\n\n<ol>\n<li>Activate the new schedule view and then group the header.</li>\n<li>Refresh the new schedule view and then group the header when the schedule is out of data.</li>\n</ol>\n<p>It seems that the second workaround is the right way to 'fix' this issue.\nWe have to manually refresh the schedule data if the view is out of data.\nThis behaviour is by design.\n\n<h5>Second case</h5>\n<p>The API cannot get the updated value in Body section if the schedule view is not opened.\n\n<p>Close the schedule view:\n\n<ol>\n<li>IsCellOverridden returns True;</li>\n<li>ResetCellOverride;</li>\n<li>IsCellOverridden also returns True;</li>\n</ol>\n<p>Open the schedule view:\n\n<ol>\n<li>IsCellOverridden returns True;</li>\n<li>ResetCellOverride;</li>\n<li>IsCellOverridden returns False (as expected);</li>\n</ol>\n<p>The workaround is to call viewSchedule.GetTableData again.\n\n<p>The API calls will not work in the body section if the schedule view is closed.\n\n<p>The root cause is that the schedule data (especially the body section) will not be updated if the schedule view is closed.\n\n<p>This is no problem for the user interface, and improves performance because the schedule data is not regenerated.\nIt does cause a problem in the API, though.\n\n\n<p><strong>Response:</strong> I got this to work using the suggestion in first case #1.\n\n<p>I created the schedule, closed the transaction, set the schedule to the ActiveView and then grouped the headers.\n\n<p>I also discovered that the column indexes ignore hidden columns.\n\n<p>Here is a sample external command demonstrating the ViewSchedule.GroupHeaders function.\nPlease note the comments describing some of the steps in more detail:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">UIDocument</span> uidoc = commandData.Application\n      .ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Create the schedule</span>\n \n    <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n    tran.Start( <span class=\"maroon\">\"Create schedule\"</span> );\n \n    <span class=\"teal\">ViewSchedule</span> sampleSchedule\n      = <span class=\"teal\">ViewSchedule</span>.CreateSchedule( doc, <span class=\"blue\">new</span>\n        <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInCategory</span>.OST_Windows ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span>\n      <span class=\"teal\">ViewSchedule</span>.GetAvailableParameters( doc, <span class=\"blue\">new</span>\n        <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInCategory</span>.OST_Windows ) ) )\n    {\n      <span class=\"blue\">try</span>\n      {\n        sampleSchedule.Definition.AddField(\n          <span class=\"blue\">new</span> <span class=\"teal\">SchedulableField</span>(\n            <span class=\"teal\">ScheduleFieldType</span>.Instance, id ) );\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> )\n      {\n      }\n    }\n    <span class=\"teal\">ScheduleDefinition</span> sampleDefinition\n      = sampleSchedule.Definition;\n \n    <span class=\"green\">// Hide two columns in the schedule</span>\n \n    sampleDefinition.GetField( 0 ).IsHidden = <span class=\"blue\">true</span>;\n    sampleDefinition.GetField( 1 ).IsHidden = <span class=\"blue\">true</span>;\n \n    <span class=\"green\">// Commit the schedule. This is important so </span>\n    <span class=\"green\">// you can set the active view.</span>\n \n    tran.Commit();\n \n    <span class=\"green\">// Change the active view to the schedule. </span>\n    <span class=\"green\">// This is required before the GroupHeaders </span>\n    <span class=\"green\">// function will work.</span>\n \n    uidoc.ActiveView = sampleSchedule;\n \n    <span class=\"green\">// Group the last three headers.</span>\n    <span class=\"green\">// Hidden fields are not counted in the left </span>\n    <span class=\"green\">// and right values, so make sure to account </span>\n    <span class=\"green\">// for that.</span>\n \n    tran.Start( <span class=\"maroon\">\"Group headers\"</span> );\n \n    <span class=\"blue\">int</span> iFieldCount = sampleDefinition\n      .GetFieldCount();\n \n    sampleSchedule.GroupHeaders( 0,\n      iFieldCount - 5, 0,\n      iFieldCount - 3, <span class=\"maroon\">\"Group Header\"</span> );\n \n    tran.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">MessageBox</span>.Show( ex.ToString(),\n      <span class=\"maroon\">\"Group Headers Sample\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n}\n</pre>\n<p>Here are two important pieces of information I learned:\n\n<ol>\n<li>You have to set the active view to the schedule before the GroupHeaders method will work.</li>\n<li>The left and right indices do not include hidden columns, so you need to make sure to adjust for those.</li>\n</ol>\n<p>For completeness' sake, here is\n\n<a href=\"GroupHeadersSamplerJt2.zip\">GroupHeadersSampler.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for this command.\n\n<p>Many thanks to David for testing this and sharing the code.\nHopefully you are able to make good use of this sample.\n\n\n<p>Before closing, here is are some thoughts on how to research automating something using the Revit API in general, the kind of suggestions I regularly provide orally and seldom wind up putting down clearly and separately in writing:</p>\n<a name=\"3\"></a>\n<h4>How to Research Automating Something</h4>\n<p><strong>Question:</strong> I would like to create a dimension that differs from the normal linear dimension style within the template.\n\n<p>Here is an example of the normal dimension style and the modified variant I would like, with the dimension text sticking out on the side like this instead:</p>\n<center>\n<img alt=\"Dimension with leader\" src=\"img/dimension_with_leader.jpeg\" width=\"500\"/>\n</center>\n<p>How can I realise this programmatically, please?</p>\n<!--\n<p>After some research, </p>\nI can imagine that there are two ways to create it.\n\n1 .Prepare family style for Liner dimension.\n2.Change dimension test position and leader type to liner after drawing dimension instance\n\nI’m not sure which is simplest solution for him. And I tried to create code using my option #2.\nHowever I cannot find appropriate method or property to realize like below.\n\n  Document doc = revit.Application.ActiveUIDocument.Document;\n\n  using( Transaction tx = new Transaction( doc ) )\n  {\n      tx.Start( \"LinerDimension\" );\n      XYZ location1 = new XYZ(0.0, 0.0, 0.0);\n      XYZ location2 = new XYZ(0.0, 20.0, 0.0);\n      XYZ location3 = new XYZ(20.0, 0.0, 0.0);\n      XYZ location4 = new XYZ(20.0, 20.0, 0.0);\n\n      Curve curve1 = revit.Application.Application.Create.NewLine(location1, location2, true);\n      Curve curve2 = revit.Application.Application.Create.NewLine(location3, location4, true);\n      DetailCurve dCurve1 = doc.Create.NewDetailCurve(doc.ActiveView, curve1);;\n      DetailCurve dCurve2 = doc.Create.NewDetailCurve(doc.ActiveView, curve2);\n      Line line = revit.Application.Application.Create.NewLine(location2, location4, true);\n\n      ReferenceArray refArray = new ReferenceArray();\n      refArray.Append(dCurve1.GeometryCurve.Reference);\n      refArray.Append(dCurve2.GeometryCurve.Reference);\n\n      Dimension dim = null;\n      dim = doc.Create.NewDimension(doc.ActiveView, line, refArray);\n\n      if (dim != null)\n      {\n          dim.????? = ????;\n      }\n\n      tx.Commit();\n  }\n\nPlease let me know which is best. Also I need your input how to realize.\n-->\n<p><strong>Answer:</strong> There is a simple standard procedure for exploring this kind of issue.</p>\n<p>First of all, determine whether what you wish is possible manually in the user interface.</p>\n<p>If not, then it is probably not possible programmatically either.\n\n<p>If yes, then the two models before and after can be compared using\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">\nRevitLookup</a>,\n\nincluded with the Revit SDK, to analyse the differences.\n\n<p>That might give a hint how to achieve it programmatically.\n\n<p>If no differences can be found, then it is maybe impossible.\n\n<p>In this case, you can apparently achieve your goal manually, so the first hurdle is already taken.\n\n<p>Looking at the NewDimension method and the Dimension class members, I see no obvious input arguments or properties that might affect the dimension in the desired way.\n\n<p>Therefore, the only remaining things to check are the parameters on the dimension object.\n\n<p>You can list those before and after using RevitLookup or the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/built-in-parameter-enumeration-duplicates-and-bipchecker-update.html\">\nbuilt-in parameter BipChecker</a> and\n\ncompare.\n\n<p>I hope this helps.\n\n\n<p><strong>Response:</strong> Yes, as you say, I know that it is possible to create this manually.\n\n<p>And yes, the text position and leader information are not shown in the standard UI, nor visible in RevitLookup.\n\n<p>I guess that this specific task cannot be achieved programmatically at this moment, then.\n\n\n<p><strong>Answer:</strong> Sorry about that.\n\n<p>I hope the standard exploration procedure described above will prove useful anyway.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0933_group_headers",
    "header_text": "First case",
    "local_header_href": "#first-case",
    "chunk_text": "<h5>First case</h5><p>The ViewSchedule.GroupHeaders produces the argument exception mentioned above.\n\n<p>After a schedule is created, however, calling it directly with the same parameters succeeds, so the issue is not related to the arguments provided.\n\n<p>I investigated this issue and found 2 workarounds:\n\n<ol>\n<li>Activate the new schedule view and then group the header.</li>\n<li>Refresh the new schedule view and then group the header when the schedule is out of data.</li>\n</ol>\n<p>It seems that the second workaround is the right way to 'fix' this issue.\nWe have to manually refresh the schedule data if the view is out of data.\nThis behaviour is by design.\n\n<h5>Second case</h5>\n<p>The API cannot get the updated value in Body section if the schedule view is not opened.\n\n<p>Close the schedule view:\n\n<ol>\n<li>IsCellOverridden returns True;</li>\n<li>ResetCellOverride;</li>\n<li>IsCellOverridden also returns True;</li>\n</ol>\n<p>Open the schedule view:\n\n<ol>\n<li>IsCellOverridden returns True;</li>\n<li>ResetCellOverride;</li>\n<li>IsCellOverridden returns False (as expected);</li>\n</ol>\n<p>The workaround is to call viewSchedule.GetTableData again.\n\n<p>The API calls will not work in the body section if the schedule view is closed.\n\n<p>The root cause is that the schedule data (especially the body section) will not be updated if the schedule view is closed.\n\n<p>This is no problem for the user interface, and improves performance because the schedule data is not regenerated.\nIt does cause a problem in the API, though.\n\n\n<p><strong>Response:</strong> I got this to work using the suggestion in first case #1.\n\n<p>I created the schedule, closed the transaction, set the schedule to the ActiveView and then grouped the headers.\n\n<p>I also discovered that the column indexes ignore hidden columns.\n\n<p>Here is a sample external command demonstrating the ViewSchedule.GroupHeaders function.\nPlease note the comments describing some of the steps in more detail:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">UIDocument</span> uidoc = commandData.Application\n      .ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Create the schedule</span>\n \n    <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n    tran.Start( <span class=\"maroon\">\"Create schedule\"</span> );\n \n    <span class=\"teal\">ViewSchedule</span> sampleSchedule\n      = <span class=\"teal\">ViewSchedule</span>.CreateSchedule( doc, <span class=\"blue\">new</span>\n        <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInCategory</span>.OST_Windows ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span>\n      <span class=\"teal\">ViewSchedule</span>.GetAvailableParameters( doc, <span class=\"blue\">new</span>\n        <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInCategory</span>.OST_Windows ) ) )\n    {\n      <span class=\"blue\">try</span>\n      {\n        sampleSchedule.Definition.AddField(\n          <span class=\"blue\">new</span> <span class=\"teal\">SchedulableField</span>(\n            <span class=\"teal\">ScheduleFieldType</span>.Instance, id ) );\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> )\n      {\n      }\n    }\n    <span class=\"teal\">ScheduleDefinition</span> sampleDefinition\n      = sampleSchedule.Definition;\n \n    <span class=\"green\">// Hide two columns in the schedule</span>\n \n    sampleDefinition.GetField( 0 ).IsHidden = <span class=\"blue\">true</span>;\n    sampleDefinition.GetField( 1 ).IsHidden = <span class=\"blue\">true</span>;\n \n    <span class=\"green\">// Commit the schedule. This is important so </span>\n    <span class=\"green\">// you can set the active view.</span>\n \n    tran.Commit();\n \n    <span class=\"green\">// Change the active view to the schedule. </span>\n    <span class=\"green\">// This is required before the GroupHeaders </span>\n    <span class=\"green\">// function will work.</span>\n \n    uidoc.ActiveView = sampleSchedule;\n \n    <span class=\"green\">// Group the last three headers.</span>\n    <span class=\"green\">// Hidden fields are not counted in the left </span>\n    <span class=\"green\">// and right values, so make sure to account </span>\n    <span class=\"green\">// for that.</span>\n \n    tran.Start( <span class=\"maroon\">\"Group headers\"</span> );\n \n    <span class=\"blue\">int</span> iFieldCount = sampleDefinition\n      .GetFieldCount();\n \n    sampleSchedule.GroupHeaders( 0,\n      iFieldCount - 5, 0,\n      iFieldCount - 3, <span class=\"maroon\">\"Group Header\"</span> );\n \n    tran.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">MessageBox</span>.Show( ex.ToString(),\n      <span class=\"maroon\">\"Group Headers Sample\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n}\n</pre>\n<p>Here are two important pieces of information I learned:\n\n<ol>\n<li>You have to set the active view to the schedule before the GroupHeaders method will work.</li>\n<li>The left and right indices do not include hidden columns, so you need to make sure to adjust for those.</li>\n</ol>\n<p>For completeness' sake, here is\n\n<a href=\"GroupHeadersSamplerJt2.zip\">GroupHeadersSampler.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for this command.\n\n<p>Many thanks to David for testing this and sharing the code.\nHopefully you are able to make good use of this sample.\n\n\n<p>Before closing, here is are some thoughts on how to research automating something using the Revit API in general, the kind of suggestions I regularly provide orally and seldom wind up putting down clearly and separately in writing:</p>\n<a name=\"3\"></a>\n<h4>How to Research Automating Something</h4>\n<p><strong>Question:</strong> I would like to create a dimension that differs from the normal linear dimension style within the template.\n\n<p>Here is an example of the normal dimension style and the modified variant I would like, with the dimension text sticking out on the side like this instead:</p>\n<center>\n<img alt=\"Dimension with leader\" src=\"img/dimension_with_leader.jpeg\" width=\"500\"/>\n</center>\n<p>How can I realise this programmatically, please?</p>\n<!--\n<p>After some research, </p>\nI can imagine that there are two ways to create it.\n\n1 .Prepare family style for Liner dimension.\n2.Change dimension test position and leader type to liner after drawing dimension instance\n\nI’m not sure which is simplest solution for him. And I tried to create code using my option #2.\nHowever I cannot find appropriate method or property to realize like below.\n\n  Document doc = revit.Application.ActiveUIDocument.Document;\n\n  using( Transaction tx = new Transaction( doc ) )\n  {\n      tx.Start( \"LinerDimension\" );\n      XYZ location1 = new XYZ(0.0, 0.0, 0.0);\n      XYZ location2 = new XYZ(0.0, 20.0, 0.0);\n      XYZ location3 = new XYZ(20.0, 0.0, 0.0);\n      XYZ location4 = new XYZ(20.0, 20.0, 0.0);\n\n      Curve curve1 = revit.Application.Application.Create.NewLine(location1, location2, true);\n      Curve curve2 = revit.Application.Application.Create.NewLine(location3, location4, true);\n      DetailCurve dCurve1 = doc.Create.NewDetailCurve(doc.ActiveView, curve1);;\n      DetailCurve dCurve2 = doc.Create.NewDetailCurve(doc.ActiveView, curve2);\n      Line line = revit.Application.Application.Create.NewLine(location2, location4, true);\n\n      ReferenceArray refArray = new ReferenceArray();\n      refArray.Append(dCurve1.GeometryCurve.Reference);\n      refArray.Append(dCurve2.GeometryCurve.Reference);\n\n      Dimension dim = null;\n      dim = doc.Create.NewDimension(doc.ActiveView, line, refArray);\n\n      if (dim != null)\n      {\n          dim.????? = ????;\n      }\n\n      tx.Commit();\n  }\n\nPlease let me know which is best. Also I need your input how to realize.\n-->\n<p><strong>Answer:</strong> There is a simple standard procedure for exploring this kind of issue.</p>\n<p>First of all, determine whether what you wish is possible manually in the user interface.</p>\n<p>If not, then it is probably not possible programmatically either.\n\n<p>If yes, then the two models before and after can be compared using\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">\nRevitLookup</a>,\n\nincluded with the Revit SDK, to analyse the differences.\n\n<p>That might give a hint how to achieve it programmatically.\n\n<p>If no differences can be found, then it is maybe impossible.\n\n<p>In this case, you can apparently achieve your goal manually, so the first hurdle is already taken.\n\n<p>Looking at the NewDimension method and the Dimension class members, I see no obvious input arguments or properties that might affect the dimension in the desired way.\n\n<p>Therefore, the only remaining things to check are the parameters on the dimension object.\n\n<p>You can list those before and after using RevitLookup or the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/built-in-parameter-enumeration-duplicates-and-bipchecker-update.html\">\nbuilt-in parameter BipChecker</a> and\n\ncompare.\n\n<p>I hope this helps.\n\n\n<p><strong>Response:</strong> Yes, as you say, I know that it is possible to create this manually.\n\n<p>And yes, the text position and leader information are not shown in the standard UI, nor visible in RevitLookup.\n\n<p>I guess that this specific task cannot be achieved programmatically at this moment, then.\n\n\n<p><strong>Answer:</strong> Sorry about that.\n\n<p>I hope the standard exploration procedure described above will prove useful anyway.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0933_group_headers",
    "header_text": "Second case",
    "local_header_href": "#second-case",
    "chunk_text": "<h5>Second case</h5><p>The API cannot get the updated value in Body section if the schedule view is not opened.\n\n<p>Close the schedule view:\n\n<ol>\n<li>IsCellOverridden returns True;</li>\n<li>ResetCellOverride;</li>\n<li>IsCellOverridden also returns True;</li>\n</ol>\n<p>Open the schedule view:\n\n<ol>\n<li>IsCellOverridden returns True;</li>\n<li>ResetCellOverride;</li>\n<li>IsCellOverridden returns False (as expected);</li>\n</ol>\n<p>The workaround is to call viewSchedule.GetTableData again.\n\n<p>The API calls will not work in the body section if the schedule view is closed.\n\n<p>The root cause is that the schedule data (especially the body section) will not be updated if the schedule view is closed.\n\n<p>This is no problem for the user interface, and improves performance because the schedule data is not regenerated.\nIt does cause a problem in the API, though.\n\n\n<p><strong>Response:</strong> I got this to work using the suggestion in first case #1.\n\n<p>I created the schedule, closed the transaction, set the schedule to the ActiveView and then grouped the headers.\n\n<p>I also discovered that the column indexes ignore hidden columns.\n\n<p>Here is a sample external command demonstrating the ViewSchedule.GroupHeaders function.\nPlease note the comments describing some of the steps in more detail:\n\n<pre class=\"code\">\n<span class=\"blue\">public</span> <span class=\"teal\">Result</span> Execute(\n  <span class=\"teal\">ExternalCommandData</span> commandData,\n  <span class=\"blue\">ref</span> <span class=\"blue\">string</span> message,\n  <span class=\"teal\">ElementSet</span> elements )\n{\n  <span class=\"blue\">try</span>\n  {\n    <span class=\"teal\">UIDocument</span> uidoc = commandData.Application\n      .ActiveUIDocument;\n \n    <span class=\"teal\">Document</span> doc = uidoc.Document;\n \n    <span class=\"green\">// Create the schedule</span>\n \n    <span class=\"teal\">Transaction</span> tran = <span class=\"blue\">new</span> <span class=\"teal\">Transaction</span>( doc );\n    tran.Start( <span class=\"maroon\">\"Create schedule\"</span> );\n \n    <span class=\"teal\">ViewSchedule</span> sampleSchedule\n      = <span class=\"teal\">ViewSchedule</span>.CreateSchedule( doc, <span class=\"blue\">new</span>\n        <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInCategory</span>.OST_Windows ) );\n \n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ElementId</span> id <span class=\"blue\">in</span>\n      <span class=\"teal\">ViewSchedule</span>.GetAvailableParameters( doc, <span class=\"blue\">new</span>\n        <span class=\"teal\">ElementId</span>( <span class=\"teal\">BuiltInCategory</span>.OST_Windows ) ) )\n    {\n      <span class=\"blue\">try</span>\n      {\n        sampleSchedule.Definition.AddField(\n          <span class=\"blue\">new</span> <span class=\"teal\">SchedulableField</span>(\n            <span class=\"teal\">ScheduleFieldType</span>.Instance, id ) );\n      }\n      <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> )\n      {\n      }\n    }\n    <span class=\"teal\">ScheduleDefinition</span> sampleDefinition\n      = sampleSchedule.Definition;\n \n    <span class=\"green\">// Hide two columns in the schedule</span>\n \n    sampleDefinition.GetField( 0 ).IsHidden = <span class=\"blue\">true</span>;\n    sampleDefinition.GetField( 1 ).IsHidden = <span class=\"blue\">true</span>;\n \n    <span class=\"green\">// Commit the schedule. This is important so </span>\n    <span class=\"green\">// you can set the active view.</span>\n \n    tran.Commit();\n \n    <span class=\"green\">// Change the active view to the schedule. </span>\n    <span class=\"green\">// This is required before the GroupHeaders </span>\n    <span class=\"green\">// function will work.</span>\n \n    uidoc.ActiveView = sampleSchedule;\n \n    <span class=\"green\">// Group the last three headers.</span>\n    <span class=\"green\">// Hidden fields are not counted in the left </span>\n    <span class=\"green\">// and right values, so make sure to account </span>\n    <span class=\"green\">// for that.</span>\n \n    tran.Start( <span class=\"maroon\">\"Group headers\"</span> );\n \n    <span class=\"blue\">int</span> iFieldCount = sampleDefinition\n      .GetFieldCount();\n \n    sampleSchedule.GroupHeaders( 0,\n      iFieldCount - 5, 0,\n      iFieldCount - 3, <span class=\"maroon\">\"Group Header\"</span> );\n \n    tran.Commit();\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Succeeded;\n  }\n  <span class=\"blue\">catch</span>( <span class=\"teal\">Exception</span> ex )\n  {\n    <span class=\"teal\">MessageBox</span>.Show( ex.ToString(),\n      <span class=\"maroon\">\"Group Headers Sample\"</span> );\n \n    <span class=\"blue\">return</span> <span class=\"teal\">Result</span>.Failed;\n  }\n}\n</pre>\n<p>Here are two important pieces of information I learned:\n\n<ol>\n<li>You have to set the active view to the schedule before the GroupHeaders method will work.</li>\n<li>The left and right indices do not include hidden columns, so you need to make sure to adjust for those.</li>\n</ol>\n<p>For completeness' sake, here is\n\n<a href=\"GroupHeadersSamplerJt2.zip\">GroupHeadersSampler.zip</a> containing\n\nthe complete source code, Visual Studio solution and add-in manifest for this command.\n\n<p>Many thanks to David for testing this and sharing the code.\nHopefully you are able to make good use of this sample.\n\n\n<p>Before closing, here is are some thoughts on how to research automating something using the Revit API in general, the kind of suggestions I regularly provide orally and seldom wind up putting down clearly and separately in writing:</p>\n<a name=\"3\"></a>\n<h4>How to Research Automating Something</h4>\n<p><strong>Question:</strong> I would like to create a dimension that differs from the normal linear dimension style within the template.\n\n<p>Here is an example of the normal dimension style and the modified variant I would like, with the dimension text sticking out on the side like this instead:</p>\n<center>\n<img alt=\"Dimension with leader\" src=\"img/dimension_with_leader.jpeg\" width=\"500\"/>\n</center>\n<p>How can I realise this programmatically, please?</p>\n<!--\n<p>After some research, </p>\nI can imagine that there are two ways to create it.\n\n1 .Prepare family style for Liner dimension.\n2.Change dimension test position and leader type to liner after drawing dimension instance\n\nI’m not sure which is simplest solution for him. And I tried to create code using my option #2.\nHowever I cannot find appropriate method or property to realize like below.\n\n  Document doc = revit.Application.ActiveUIDocument.Document;\n\n  using( Transaction tx = new Transaction( doc ) )\n  {\n      tx.Start( \"LinerDimension\" );\n      XYZ location1 = new XYZ(0.0, 0.0, 0.0);\n      XYZ location2 = new XYZ(0.0, 20.0, 0.0);\n      XYZ location3 = new XYZ(20.0, 0.0, 0.0);\n      XYZ location4 = new XYZ(20.0, 20.0, 0.0);\n\n      Curve curve1 = revit.Application.Application.Create.NewLine(location1, location2, true);\n      Curve curve2 = revit.Application.Application.Create.NewLine(location3, location4, true);\n      DetailCurve dCurve1 = doc.Create.NewDetailCurve(doc.ActiveView, curve1);;\n      DetailCurve dCurve2 = doc.Create.NewDetailCurve(doc.ActiveView, curve2);\n      Line line = revit.Application.Application.Create.NewLine(location2, location4, true);\n\n      ReferenceArray refArray = new ReferenceArray();\n      refArray.Append(dCurve1.GeometryCurve.Reference);\n      refArray.Append(dCurve2.GeometryCurve.Reference);\n\n      Dimension dim = null;\n      dim = doc.Create.NewDimension(doc.ActiveView, line, refArray);\n\n      if (dim != null)\n      {\n          dim.????? = ????;\n      }\n\n      tx.Commit();\n  }\n\nPlease let me know which is best. Also I need your input how to realize.\n-->\n<p><strong>Answer:</strong> There is a simple standard procedure for exploring this kind of issue.</p>\n<p>First of all, determine whether what you wish is possible manually in the user interface.</p>\n<p>If not, then it is probably not possible programmatically either.\n\n<p>If yes, then the two models before and after can be compared using\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">\nRevitLookup</a>,\n\nincluded with the Revit SDK, to analyse the differences.\n\n<p>That might give a hint how to achieve it programmatically.\n\n<p>If no differences can be found, then it is maybe impossible.\n\n<p>In this case, you can apparently achieve your goal manually, so the first hurdle is already taken.\n\n<p>Looking at the NewDimension method and the Dimension class members, I see no obvious input arguments or properties that might affect the dimension in the desired way.\n\n<p>Therefore, the only remaining things to check are the parameters on the dimension object.\n\n<p>You can list those before and after using RevitLookup or the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/built-in-parameter-enumeration-duplicates-and-bipchecker-update.html\">\nbuilt-in parameter BipChecker</a> and\n\ncompare.\n\n<p>I hope this helps.\n\n\n<p><strong>Response:</strong> Yes, as you say, I know that it is possible to create this manually.\n\n<p>And yes, the text position and leader information are not shown in the standard UI, nor visible in RevitLookup.\n\n<p>I guess that this specific task cannot be achieved programmatically at this moment, then.\n\n\n<p><strong>Answer:</strong> Sorry about that.\n\n<p>I hope the standard exploration procedure described above will prove useful anyway.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  },
  {
    "original_filename": "0933_group_headers",
    "header_text": "How to Research Automating Something",
    "local_header_href": "#how-to-research-automating-something",
    "chunk_text": "<h4>How to Research Automating Something</h4><p><strong>Question:</strong> I would like to create a dimension that differs from the normal linear dimension style within the template.\n\n<p>Here is an example of the normal dimension style and the modified variant I would like, with the dimension text sticking out on the side like this instead:</p>\n<center>\n<img alt=\"Dimension with leader\" src=\"img/dimension_with_leader.jpeg\" width=\"500\"/>\n</center>\n<p>How can I realise this programmatically, please?</p>\n<!--\n<p>After some research, </p>\nI can imagine that there are two ways to create it.\n\n1 .Prepare family style for Liner dimension.\n2.Change dimension test position and leader type to liner after drawing dimension instance\n\nI’m not sure which is simplest solution for him. And I tried to create code using my option #2.\nHowever I cannot find appropriate method or property to realize like below.\n\n  Document doc = revit.Application.ActiveUIDocument.Document;\n\n  using( Transaction tx = new Transaction( doc ) )\n  {\n      tx.Start( \"LinerDimension\" );\n      XYZ location1 = new XYZ(0.0, 0.0, 0.0);\n      XYZ location2 = new XYZ(0.0, 20.0, 0.0);\n      XYZ location3 = new XYZ(20.0, 0.0, 0.0);\n      XYZ location4 = new XYZ(20.0, 20.0, 0.0);\n\n      Curve curve1 = revit.Application.Application.Create.NewLine(location1, location2, true);\n      Curve curve2 = revit.Application.Application.Create.NewLine(location3, location4, true);\n      DetailCurve dCurve1 = doc.Create.NewDetailCurve(doc.ActiveView, curve1);;\n      DetailCurve dCurve2 = doc.Create.NewDetailCurve(doc.ActiveView, curve2);\n      Line line = revit.Application.Application.Create.NewLine(location2, location4, true);\n\n      ReferenceArray refArray = new ReferenceArray();\n      refArray.Append(dCurve1.GeometryCurve.Reference);\n      refArray.Append(dCurve2.GeometryCurve.Reference);\n\n      Dimension dim = null;\n      dim = doc.Create.NewDimension(doc.ActiveView, line, refArray);\n\n      if (dim != null)\n      {\n          dim.????? = ????;\n      }\n\n      tx.Commit();\n  }\n\nPlease let me know which is best. Also I need your input how to realize.\n-->\n<p><strong>Answer:</strong> There is a simple standard procedure for exploring this kind of issue.</p>\n<p>First of all, determine whether what you wish is possible manually in the user interface.</p>\n<p>If not, then it is probably not possible programmatically either.\n\n<p>If yes, then the two models before and after can be compared using\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/05/revitlookup-update.html\">\nRevitLookup</a>,\n\nincluded with the Revit SDK, to analyse the differences.\n\n<p>That might give a hint how to achieve it programmatically.\n\n<p>If no differences can be found, then it is maybe impossible.\n\n<p>In this case, you can apparently achieve your goal manually, so the first hurdle is already taken.\n\n<p>Looking at the NewDimension method and the Dimension class members, I see no obvious input arguments or properties that might affect the dimension in the desired way.\n\n<p>Therefore, the only remaining things to check are the parameters on the dimension object.\n\n<p>You can list those before and after using RevitLookup or the\n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2013/01/built-in-parameter-enumeration-duplicates-and-bipchecker-update.html\">\nbuilt-in parameter BipChecker</a> and\n\ncompare.\n\n<p>I hope this helps.\n\n\n<p><strong>Response:</strong> Yes, as you say, I know that it is possible to create this manually.\n\n<p>And yes, the text position and leader information are not shown in the standard UI, nor visible in RevitLookup.\n\n<p>I guess that this specific task cannot be achieved programmatically at this moment, then.\n\n\n<p><strong>Answer:</strong> Sorry about that.\n\n<p>I hope the standard exploration procedure described above will prove useful anyway.\n</p></p></p></p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]