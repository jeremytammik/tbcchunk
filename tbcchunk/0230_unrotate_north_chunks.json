[
  {
    "original_filename": "0230_unrotate_north",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<link href=\"bc.css\" rel=\"stylesheet\" type=\"text/css\"/>\n</head>"
  },
  {
    "original_filename": "0230_unrotate_north",
    "header_text": "Unrotate North",
    "local_header_href": "#unrotate-north",
    "chunk_text": "<h3>Unrotate North</h3><p><strong>Update:</strong> A better algorithm than the one presented below is provided by the discussion on the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2010/01/project-location.html\">\nproject location</a>.\n\n<p>I spent this weekend on the\n\n<a href=\"http://en.wikipedia.org/wiki/Rigi\">\nRigi Mountain</a> together \n\nwith seventy other people from the alpine club.\n\nSaturday it rained quite hard most of the day, unfortunately, but a couple of us still went on a very nice hike from Rigi Scheidegg across to and over the top of Rigi Hochflueh with a beautiful view down on the\n\n<a href=\"http://en.wikipedia.org/wiki/Lake_Lucerne\">\nLucerne Lake</a> and the\n\n<a href=\"http://en.wikipedia.org/wiki/R%C3%BCtli\">\nRütli Meadow</a>.\n\nIn the evening, we also tested how many people can be shoehorned into a wood-heated hot tub outside in snow and rain, among other interesting pastimes.\nSunday I went climbing with Angela.\nConsidering the rain from the day before and the night and it still being quite cloudy on Sunday, we were maybe the only two crazy enough to even try it.\nIt involved the same walk from Scheidegg to Hochflueh, then searching for the climbing area, doing the climbs, and, last but not least, getting back again safely.\nThe climbing area is called \n\n<a href=\"http://www.kley.ch/hansjoerg/2004/2004_4_1.html\">\nThedys Gärtli</a>\n\nand is on the Hochflue slabs close to the summit, so we could all the time enjoy the same beautiful view as the day before.\nWe were extremely pleased to be able to do two very nice climbs, among the easier ones, Männertrü (4c) and Fürlinie (5c).\nAlthough we knew when we started the latter one that we would get back rather late, we actually ended up descending the mountain in total darkness and spending most of the night trying to get back to civilisation.\nOr, rather, all of the night, since I  missed the last train out of there.\n\n<p>Anyway, meanwhile, our inexorable exploration of the Revit API continues, and here is another question to address which expands on our analysis of the calculation of the \n\n<a href=\"http://thebuildingcoder.typepad.com/blog/2008/10/azimuth.html\">\nazimuth</a>\n\nor Revit elements:\n\n<p><strong>Question:</strong> I am using the Element.Location property to query the X and Y coordinate values of an element.\nI also make use of the project location and project angle.\nI have a problem if the Project North has been rotated.\nHow can I determine the 'real' X and Y coordinates of an element if the Project North has been rotated?\n\n<p><strong>Answer:</strong> Ok, I see what you mean.\n\n<p>To dive into this a little bit deeper, I implemented a new Building Coder sample command CmdUnrotateNorth to calculate the coordinates of the original unrotated element location for you.\n\nIt transforms the element location back to the original coordinates to cancel effect of rotating the project north\nby simply determining the project north rotation angle 'a' and applying a similar transformation to the element coordinates like this:\n\n<pre>\n  Transform t = Transform.get_Rotation(\n    XYZ.Zero, XYZ.BasisZ, a );\n</pre>\n<p>To simplify testing, I implemented a helper method GetElementLocation which defines a location point for any given element having a non-null Location property:\n\n<pre class=\"code\">\n<span class=\"blue\">bool</span> GetElementLocation(\n  <span class=\"blue\">out</span> <span class=\"teal\">XYZ</span> p,\n  <span class=\"teal\">Element</span> e )\n{\n  p = <span class=\"teal\">XYZ</span>.Zero;\n  <span class=\"blue\">bool</span> rc = <span class=\"blue\">false</span>;\n  <span class=\"teal\">Location</span> loc = e.Location;\n  <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != loc )\n  {\n    <span class=\"teal\">LocationPoint</span> lp = loc <span class=\"blue\">as</span> <span class=\"teal\">LocationPoint</span>;\n    <span class=\"blue\">if</span>( <span class=\"blue\">null</span> != lp )\n    {\n      p = lp.Point;\n      rc = true;\n    }\n    <span class=\"blue\">else</span>\n    {\n      <span class=\"teal\">LocationCurve</span> lc = loc <span class=\"blue\">as</span> <span class=\"teal\">LocationCurve</span>;\n\n      Debug.Assert( <span class=\"blue\">null</span> != lc,\n        <span class=\"maroon\">\"expected location to be either point or curve\"</span> );\n\n      p = lc.Curve.get_EndPoint( 0 );\n      rc = true;\n    }\n  }\n  <span class=\"blue\">return</span> rc;\n}</pre>\n<p>In the main method, I check that one single element is selected and then list its location point as returned by the API, or rather by this method.\nI then iterate over all\nproject locations, print each one's the project north angle and list the element location point rotated around the origin by that angle.\n\n<p>I tested this by selecting an element and running the command with it in its original unrotated position, which returns:\n\n<pre>\nSelected element location: (-23.64,1.64,0)\nAngle between project north and true north: 0 degrees\nUnrotated element location: (-23.64,1.64,0)\n</pre>\n<p>After applying a rotation to the project north by calling Manage &gt; Project Location &gt; Position &gt; Rotate Project North &gt; Align selected line or plane, invoking the same command again returns the following:\n\n<pre>\nSelected element location: (-21.66,9.62,0)\nAngle between project north and true north: 20 degrees\nUnrotated element location: (-23.64,1.64,0)\n</pre>\n<p>As you can see, the element location returned by the API is different, but the original value can easily be obtained by applying the rotation described.\n\n<p>Here is the code of the entire mainline of the sample command in its Execute method:\n\n<pre class=\"code\">\n<span class=\"teal\">Application</span> app = commandData.Application;\n<span class=\"teal\">Document</span> doc = app.ActiveDocument;\n\n<span class=\"teal\">ElementSet</span> els = doc.Selection.Elements;\n\n<span class=\"blue\">if</span>( 1 != els.Size )\n{\n  message = \"Please select a single element.\";\n}\n<span class=\"blue\">else</span>\n{\n  <span class=\"teal\">ElementSetIterator</span> it = els.ForwardIterator();\n  it.MoveNext();\n\n  <span class=\"teal\">Element</span> e = it.Current as <span class=\"teal\">Element</span>;\n\n  <span class=\"teal\">XYZ</span> p;\n  <span class=\"blue\">if</span>( !GetElementLocation( <span class=\"blue\">out</span> p, e ) )\n  {\n    message\n      = <span class=\"maroon\">\"Selected element has no location defined.\"</span>;\n\n    <span class=\"teal\">Debug</span>.Print( message );\n  }\n  <span class=\"blue\">else</span>\n  {\n    <span class=\"blue\">string</span> msg\n      = <span class=\"maroon\">\"Selected element location: \"</span>\n      + <span class=\"teal\">Util</span>.PointString( p );\n\n    <span class=\"blue\">double</span> pna = 0;\n\n    <span class=\"blue\">foreach</span>( <span class=\"teal\">ProjectLocation</span> location\n      <span class=\"blue\">in</span> doc.ProjectLocations )\n    {\n      <span class=\"teal\">ProjectPosition</span> projectPosition\n        = location.get_ProjectPosition( <span class=\"teal\">XYZ</span>.Zero );\n\n      pna = projectPosition.Angle;\n\n      msg +=\n        <span class=\"maroon\">\"\\nAngle between project north and true north: \"</span>\n        + <span class=\"teal\">Util</span>.AngleString( pna );\n\n      <span class=\"teal\">Transform</span> t = <span class=\"teal\">Transform</span>.get_Rotation(\n        <span class=\"teal\">XYZ</span>.Zero, <span class=\"teal\">XYZ</span>.BasisZ, pna );\n\n      msg +=\n        <span class=\"maroon\">\"\\nUnrotated element location: \"</span>\n        + <span class=\"teal\">Util</span>.PointString( t.OfPoint( p ) );\n\n      <span class=\"teal\">Util</span>.InfoMsg( msg );\n    }\n  }\n}\nreturn <span class=\"teal\">IExternalCommand</span>.<span class=\"teal\">Result</span>.Failed;\n</pre>\n<p>Here is\n\n<a href=\"zip/bc11050.zip\">\nversion 1.1.0.50</a>\n\nof the complete Building Coder sample source code and Visual Studio solution including the new command.</p>\n</p></p></p></p></p></p></p></p></p></p></p></p>"
  }
]