[
  {
    "original_filename": "1540_q4r4_lookup",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!-- <script src=\"run_prettify.js\" type=\"text/javascript\"></script> --> \n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n</head>\n\n<!---\n\n- 12773525 [Get Area Scheme from an Area]\n  https://forums.autodesk.com/t5/revit-api-forum/get-area-scheme-from-an-area/m-p/6949212\n\n @ElasticsearchQA #RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge \nRevitLookup updated #RevitAPI @AutodeskRevit #aec #bim #dynamobim @AutodeskForge \n\nI ran the first query on the collection of tbc blog posts imported into Elasticsearch to experiment for the question answering system Q4R4 Question Answering for Revit API and installed the elasticsearch-head web front end to better explore and understand my local Elasticsearch cluster\n&ndash; Elasticsearch text field mapping\n&ndash; Elasticsearch-head web front end\n&ndash; More RevitLookup updates\n&ndash; Get area scheme from an area...\n\n-->"
  },
  {
    "original_filename": "1540_q4r4_lookup",
    "header_text": "Elasticsearch-Head, RevitLookup and Area Schemes",
    "local_header_href": "#elasticsearch-head-revitlookup-and-area-schemes",
    "chunk_text": "### Elasticsearch-Head, RevitLookup and Area Schemes\n\nI ran the first query on the collection\nof [tbc](https://github.com/jeremytammik/tbc) blog\nposts imported into Elasticsearch to experiment for the question answering\nsystem [Q4R4 *Question Answering for Revit API*](http://thebuildingcoder.typepad.com/blog/2017/03/q4r4-revit-api-question-answering-system.html).\n\nNo spectacular results to report so far, but at least it works.\n\nI installed the [elasticsearch-head](https://github.com/mobz/elasticsearch-head) web\nfront end to better explore and understand my local Elasticsearch cluster.\n\nAlexander made a small correction to the latest RevitLookup enhancements, reverting one of the changes made yesterday.\n\nLots of interesting solutions on\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160),\nincluding a nice little filtering sample that I picked up:\n\n- [Elasticsearch text field mapping](#2)\n- [Elasticsearch-head web front end](#3)\n- [More RevitLookup updates](#4)\n- [Get area scheme from an area](#5)"
  },
  {
    "original_filename": "1540_q4r4_lookup",
    "header_text": "<a name=\"2\"></a>Elasticsearch Text Field Mapping",
    "local_header_href": "#a-name2aelasticsearch-text-field-mapping",
    "chunk_text": "#### <a name=\"2\"></a>Elasticsearch Text Field Mapping\n\nYesterday, I described\nthe [q4r4 tbc import script `tbcimport.py`](http://thebuildingcoder.typepad.com/blog/2017/03/q4r4-tbc-import-and-revitlookup.html) that\nI implemented to import all The Building Coder blog posts\ninto [Elasticsearch](https://www.elastic.co/products/elasticsearch) to\nstart experimenting with queries on them.\n\nBy default, the blog post `text` field was apparently imported and populated as a type `keyword` field:\n\n<pre>\n$ &#99;url -XGET 'localhost:9200/tbc/_mapping?pretty'\n{\n  \"tbc\" : {\n    \"mappings\" : {\n      \"blogpost\" : {\n        \"properties\" : {\n          \"date\" : {\n            \"type\" : \"date\"\n          },\n          \"nr\" : {\n            \"type\" : \"long\"\n          },\n          \"text\" : {\n            \"type\" : \"text\",\n            \"fields\" : {\n              \"keyword\" : {\n                \"type\" : \"keyword\",\n                \"ignore_above\" : 256\n              }\n            }\n          },\n          \"title\" : {\n            \"type\" : \"text\",\n            \"fields\" : {\n              \"keyword\" : {\n                \"type\" : \"keyword\",\n                \"ignore_above\" : 256\n              }\n            }\n          },\n          \"url\" : {\n            \"type\" : \"text\",\n            \"fields\" : {\n              \"keyword\" : {\n                \"type\" : \"keyword\",\n                \"ignore_above\" : 256\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</pre>\n\nSince I want to run a full text search on the blog post text, I need to change that mapping.\nActually, I might as well change it for the `title` field as well:\n\n<pre>\n$ &#99;url -XPUT 'localhost:9200/tbc?pretty' -H 'Content-Type: application/json' -d'\n{\n  \"mappings\": {\n    \"blogpost\": {\n      \"properties\": {\n        \"text\": { \"type\":  \"text\" },\n        \"title\": { \"type\":  \"text\" }\n      }\n    }\n  }\n}\n'\n</pre>\n\nNow the mapping looks more suitable:\n\n<pre>\n$ &#99;url -XGET 'localhost:9200/tbc/_mapping?pretty'\n{\n  \"tbc\" : {\n    \"mappings\" : {\n      \"blogpost\" : {\n        \"properties\" : {\n          \"date\" : {\n            \"type\" : \"date\"\n          },\n          \"nr\" : {\n            \"type\" : \"long\"\n          },\n          \"text\" : {\n            \"type\" : \"text\"\n          },\n          \"title\" : {\n            \"type\" : \"text\"\n          },\n          \"url\" : {\n            \"type\" : \"text\",\n            \"fields\" : {\n              \"keyword\" : {\n                \"type\" : \"keyword\",\n                \"ignore_above\" : 256\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</pre>"
  },
  {
    "original_filename": "1540_q4r4_lookup",
    "header_text": "<a name=\"3\"></a>Elasticsearch-Head Web Front End",
    "local_header_href": "#a-name3aelasticsearch-head-web-front-end",
    "chunk_text": "#### <a name=\"3\"></a>Elasticsearch-Head Web Front End\n\nTyping `curl` scripts on the command line is probably not the most effective way to explore my local Elasticsearch cluster.\n\nI installed the [elasticsearch-head](https://github.com/mobz/elasticsearch-head) web front end to improve and simplify my interactive access.\n\nAs explained in its readme documentation, I must add two CORS settings to the elasticsearch config file `elasticsearch.yml` to allow elastic-head to connect to it:\n\n<pre>\n  http.cors.enabled: true\n  http.cors.allow-origin: \"*\"\n</pre>\n\nWith those settings in place, I can browse the cluster contents and start experimenting with queries on them:\n\n<center>\n<img src=\"img/elasticsearch-head.png\" alt=\"Elasticsearch-head\" width=\"500\"/>\n</center>"
  },
  {
    "original_filename": "1540_q4r4_lookup",
    "header_text": "<a name=\"4\"></a>More RevitLookup Updates",
    "local_header_href": "#a-name4amore-revitlookup-updates",
    "chunk_text": "#### <a name=\"4\"></a>More RevitLookup Updates\n\nTwo minor RevitLookup updates today, each encapsulated in an own new version.\n\nAlexander Ignatovich, [@CADBIMDeveloper](https://github.com/CADBIMDeveloper), aka Александр Игнатович,\ndisagreed with one of the changes made yesterday and reverted that in his pull request\n[#31 try-catch for each element in cycle is bad idea and looks ugly](https://github.com/jeremytammik/RevitLookup/pull/31).\n\nMany thanks to Alexander for paying attention and fixing this!\n\nThat change is merged\nin [RevitLookup release 2017.0.0.21](https://github.com/jeremytammik/RevitLookup/releases/tag/2017.0.0.21).\n\nI was unhappy with a couple of warning messages during compilation and fixed those\nin [RevitLookup release 2017.0.0.22](https://github.com/jeremytammik/RevitLookup/releases/tag/2017.0.0.22).\n\nThe most up-to-date version is always provided in the master branch of \nthe [RevitLookup GitHub repository](https://github.com/jeremytammik/RevitLookup).\n\nIf you would like to access any part of the functionality that was removed when switching to the `Reflection` based approach, please grab it\nfrom [release 2017.0.0.13](https://github.com/jeremytammik/RevitLookup/releases/tag/2017.0.0.13) or earlier.\n\nI am also happy to restore any other code that was removed and that you would like preserved.\nSimply create a pull request for that, explain your need and motivation, and I will gladly merge it back again."
  },
  {
    "original_filename": "1540_q4r4_lookup",
    "header_text": "<a name=\"5\"></a>Get Area Scheme from an Area",
    "local_header_href": "#a-name5aget-area-scheme-from-an-area",
    "chunk_text": "#### <a name=\"5\"></a>Get Area Scheme from an Area\n\nA [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) question\non [getting the area scheme from an area](https://forums.autodesk.com/t5/revit-api-forum/get-area-scheme-from-an-area/m-p/6949212) turned\nout to be a pretty trivial matter of accessing and evaluating a simple series of parameter values on the area and area scheme:\n\n**Question:** I'm not sure if this is possible but I've been trying to get the AREA_SCHEME_NAME from a collection of areas.\n\nI've tried several ways without luck.\n\nCan an area report what Area Scheme (Gross, Rentable) it belongs to?\n\n**Answer:** Have you tried this?\n\n<pre class=\"code\">\n  <span style=\"color:#2b91af;\">Area</span>&nbsp;area;\n   \n  <span style=\"color:#2b91af;\">AreaScheme</span>&nbsp;scheme&nbsp;=&nbsp;doc.GetElement(\n  &nbsp;&nbsp;area.get_Parameter(\n  &nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.AREA_SCHEME_ID&nbsp;).AsElementId()&nbsp;)\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">AreaScheme</span>;\n   \n  <span style=\"color:blue;\">string</span>&nbsp;areaSchemeName&nbsp;=&nbsp;scheme.get_Parameter(\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.AREA_SCHEME_NAME&nbsp;).AsString();\n</pre>\n\n**Response:** Thanks.\n\nHere's the code for a little test to get the areas that are on the 'Gross Building' scheme:\n\n<pre class=\"code\">\n<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">SpatialElement</span>&gt;&nbsp;areas&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;.OfCategory(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Areas&nbsp;)\n&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">SpatialElement</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;.Cast&lt;<span style=\"color:#2b91af;\">SpatialElement</span>&gt;()\n&nbsp;&nbsp;.ToList();\n \n<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;<span style=\"color:blue;\">in</span>&nbsp;areas&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">AreaScheme</span>&nbsp;_scheme&nbsp;=&nbsp;doc.GetElement(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;e.get_Parameter(&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.AREA_SCHEME_ID&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.AsElementId()&nbsp;)&nbsp;<span style=\"color:blue;\">as</span>&nbsp;<span style=\"color:#2b91af;\">AreaScheme</span>;\n \n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;_AreaSchemeName&nbsp;=&nbsp;_scheme.get_Parameter(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.AREA_SCHEME_NAME&nbsp;).AsString();\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;_AreaSchemeName.ToString()&nbsp;==&nbsp;<span style=\"color:#a31515;\">&quot;Gross&nbsp;Building&quot;</span>&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TaskDialog</span>.Show(&nbsp;<span style=\"color:#a31515;\">&quot;Revit&quot;</span>,&nbsp;_AreaSchemeName&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">double</span>&nbsp;ox&nbsp;=&nbsp;e.LookupParameter(&nbsp;<span style=\"color:#a31515;\">&quot;Area&quot;</span>&nbsp;).AsDouble();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">TaskDialog</span>.Show(&nbsp;<span style=\"color:#a31515;\">&quot;Revit&quot;</span>,&nbsp;ox.ToString()&nbsp;);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">else</span>&nbsp;{&nbsp;<span style=\"color:blue;\">continue</span>;&nbsp;}\n}</pre>\n\n**Answer:** First, there are a couple of unnecessary inefficiencies in the sample code snippet.\n\nThere is no need for the `Cast<>`, and more importantly, `ToList` adds no value for this use case and consumes both time and memory, cf.:\n\n- [FindElement and collector optimisation](http://thebuildingcoder.typepad.com/blog/2012/09/findelement-and-collector-optimisation.html)\n- [Collect all rooms on a given level](http://thebuildingcoder.typepad.com/blog/2017/03/events-uv-coordinates-and-rooms-on-level.html#6)\n \nI refactored the parameter accessing code as a separate little method to retrieve the area scheme name from the area element like this:\n \n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;the&nbsp;area&nbsp;scheme&nbsp;name&nbsp;of&nbsp;a&nbsp;given&nbsp;area&nbsp;element</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;using&nbsp;only&nbsp;generic&nbsp;Element&nbsp;Parameter&nbsp;access.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;GetAreaSchemeNameFromArea(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;!(&nbsp;e&nbsp;<span style=\"color:blue;\">is</span>&nbsp;<span style=\"color:#2b91af;\">Area</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentException</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;Expected&nbsp;Area&nbsp;element&nbsp;input&nbsp;argument.&quot;</span>&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc&nbsp;=&nbsp;e.Document;\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;p&nbsp;=&nbsp;e.get_Parameter(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.AREA_SCHEME_ID&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;p&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentException</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;element&nbsp;lacks&nbsp;AREA_SCHEME_ID&nbsp;parameter&quot;</span>&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;areaScheme&nbsp;=&nbsp;doc.GetElement(&nbsp;p.AsElementId()&nbsp;);\n \n&nbsp;&nbsp;p&nbsp;=&nbsp;areaScheme.get_Parameter(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInParameter</span>.AREA_SCHEME_NAME&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;p&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">throw</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ArgumentException</span>(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;area&nbsp;scheme&nbsp;lacks&nbsp;AREA_SCHEME_NAME&nbsp;parameter&quot;</span>&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;p.AsString();\n}\n</pre>\n  \nWith that in hand, the retrieval of all areas matching a given area scheme can we rewritten like this:\n \n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Retrieve&nbsp;all&nbsp;areas&nbsp;belonging&nbsp;to&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;a&nbsp;specific&nbsp;area&nbsp;scheme.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">IEnumerable</span>&lt;<span style=\"color:#2b91af;\">Element</span>&gt;&nbsp;GetAreasInAreaScheme(\n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,\n&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;areaSchemeName&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.OfCategory(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Areas&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.OfClass(&nbsp;<span style=\"color:blue;\">typeof</span>(&nbsp;<span style=\"color:#2b91af;\">SpatialElement</span>&nbsp;)&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.Where&lt;<span style=\"color:#2b91af;\">Element</span>&gt;(&nbsp;e&nbsp;=&gt;&nbsp;areaSchemeName.Equals(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GetAreaSchemeNameFromArea(&nbsp;e&nbsp;)&nbsp;)&nbsp;);\n}\n</pre>\n \nI added these two methods to [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\nin [release 2017.0.132.10](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2017.0.132.10).\n \nYou can see the new code\nby [comparing with the preceding release 2017.0.132.9](https://github.com/jeremytammik/the_building_coder_samples/compare/2017.0.132.9...2017.0.132.10)."
  }
]