[
  {
    "original_filename": "1654_get_all_param_val",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<!--\n<script src=\"run_prettify.js\" type=\"text/javascript\"></script>\n<script src=\"https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js\" type=\"text/javascript\"></script>\n-->\n</head>\n\n<!---\n\n- implement input: categories, output: dictionary of all elements with all their parameter values\n  https://github.com/jeremytammik/rvtmetaprop -- read properties from Forge and update model accordingly\n  https://github.com/jeremytammik/AdnRevitApiLabsXtra -- Lab4_2_ExportParametersToExcel\n\nGetting All Parameter Values through the #RevitAPI @AutodeskRevit #bim #dynamobim @AutodeskForge #ForgeDevCon http://bit.ly/getparams\n\nHow to export all the Revit data to an external database?\nIt is very simple to extract all the parameter data.\nLet's implement a solution to do so\n&ndash; Existing sample implementations \n&ndash; Black box input \n&ndash; Choices for the output and its structure \n&ndash; Retrieve parameter values from an element \n&ndash; FilterCategoryRule versus category filters \n&ndash; Category description extension method \n&ndash; Retrieve parameter data for all elements of given categories \n&ndash; External command <code>Execute</code> mainline \n&ndash; Sample run results\n&ndash; Download...\n\n--->"
  },
  {
    "original_filename": "1654_get_all_param_val",
    "header_text": "Getting All Parameter Values",
    "local_header_href": "#getting-all-parameter-values",
    "chunk_text": "### Getting All Parameter Values\n\nPeople sometimes ask how to export all the Revit data to an external database.\n\nObviously, a huge amount of data is embedded in BIM specific constraints and relationships that are hard to extract.\n\nIt is very simple to extract all the parameter data, though, as you can see by looking at the numerous existing samples that do so.\n\nLet's implement yet another one ourselves:\n\n- [Existing sample implementations](#2) \n- [Black box input](#3) \n- [Choices for the output and its structure](#4) \n- [Retrieve parameter values from an element](#5) \n- [FilterCategoryRule versus category filters](#6) \n- [Category description extension method](#7) \n- [Retrieve parameter data for all elements of given categories](#8) \n- [External command `Execute` mainline](#9) \n- [Sample run results](#10) \n- [Download](#11) \n\n\n####<a name=\"2\"></a>Existing Sample Implementations\n\nIn fact, this kind of data access and parameter value extraction is achieved by one of the very\nfirst [ADN Revit API training labs](https://github.com/jeremytammik/AdnRevitApiLabsXtra),\nthe external\ncommand [Lab4_2_ExportParametersToExcel in Labs4.cs](https://github.com/jeremytammik/AdnRevitApiLabsXtra/blob/master/XtraCs/Labs4.cs#L268-L509),\nwhich is very similar to the official Revit SDK ArchSample.\n\nIt creates a dictionary of all elements with a valid category and sorts them by category name.\n\nNext, for each category, it determines a list of all parameters attached to any one of the elements.\n\nFinally, for each element, it reads all its parameter values and exports them to Excel.\n\nIn the process, it creates an Excel workbook to store the data, and, for each category, a worksheet to store all the element data.\n\nHere are some discussions of it:\n\n- [Exporting parameter data to Excel, and re-importing](http://thebuildingcoder.typepad.com/blog/2012/09/exporting-parameter-data-to-excel.html)\n- [ArchSample and retrieving element properties](http://thebuildingcoder.typepad.com/blog/2015/06/archsample-active-transaction-and-adnrme-for-revit-mep-2016.html#2)\n\nAnother sample that goes about it even more professionally is RDBLink. It was originally included in the Revit SDK sample collection, and later removed to be maintained as a separate proprietary subscription product:\n\n- [Integration with a database or ERP system](http://thebuildingcoder.typepad.com/blog/2009/07/integration-with-a-database-or-erp-system.html)\n- [Adding a column to RDBLink export](http://thebuildingcoder.typepad.com/blog/2009/11/adding-a-column-to-rdblink-export.html)\n- [Parameter access and scheduling](http://thebuildingcoder.typepad.com/blog/2010/05/parameter-access-and-scheduling.html)\n- [ODBC export](http://thebuildingcoder.typepad.com/blog/2012/11/survey-and-project-base-point.html#3)\n- [RDBLink and exporting data from Revit](http://thebuildingcoder.typepad.com/blog/2016/02/reorg-fomt-devcon-ted-qr-custom-exporter-quality.html#6)\n\nWhen an RVT file is translated by [Forge](https://autodesk-forge.github.io), the process also captures all the BIM element parameters.\nSince it is easy to modify them and add new ones in the Forge viewer, I implemented an add-in to support a full read-write round-trip\nworkflow, [RvtMetaProp](https://github.com/jeremytammik/rvtmetaprop):\n\n- [Forge meta property editor and RvtMetaProp Revit add-in &ndash; executive summary](http://thebuildingcoder.typepad.com/blog/2017/10/rational-bim-programming-at-au-darmstadt.html#5.5)\n- [Use Forge or spreadsheet to create shared parameters](http://thebuildingcoder.typepad.com/blog/2017/09/use-forge-or-spreadsheet-to-create-shared-parameters.html) \n\nToday, I thought I would isolate the most basic and generic functionality conceivable to support this kind of workflow, by implementing a simple black box that takes a very specific input and returns a specific output for that:\n\n- Input: a list of BIM categories\n- Output: for each category, a dictionary mapping all the elements of that category to a collection of all their parameter values.\n\n\n####<a name=\"3\"></a>Black Box Input\n\nThe list of categories can simply consist of an array of built-in categories like this:\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;List&nbsp;all&nbsp;built-in&nbsp;categories&nbsp;of&nbsp;interest</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>[]&nbsp;_cats&nbsp;=\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Doors,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Rooms,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>.OST_Windows\n&nbsp;&nbsp;};\n</pre>\n\nDefining the output and its structure is more challenging and depends on the exact requirements.\n\n\n####<a name=\"4\"></a>Choices for the Output and its Structure\n\nAs simple as this sounds, there are quite a couple of choices to be made:\n\n- Parameter identification: name? multiple names?\n- Parameter value storage: string representation, or underlying database value?\n- Element parameters to retrieve: `Parameters` property, `GetOrderedParameters` method, etc.\n\nIn order to simplify things, the parameter values could all be returned as strings.\nIn the simplest solution, the display strings shown in the Revit user interface, returned by the `AsValueString` method.\nA more complex solution might return their real underlying database values instead.\n\nIdeally, the parameters could be identified by their name.\n\nIn that case, in the return value could be structured like this, as a dictionary mapping category names to dictionaries mapping element unique ids to dictionaries mapping each elements parameter name to the corresponding value:\n\n<pre class=\"code\">\n  <span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n  &nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:blue;\">string</span>&gt;&gt;&gt;\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_cat_to_uid_to_param_values;\n</pre>\n\nUnfortunately, though, parameter names are not guaranteed to be unique.\n\nTherefore, it may be impossible to include all parameter values in a dictionary using the parameter name as a key.\n\nTherefore, I resorted to the simple solution of returning a list of strings instead, where each string is formatted by separating the parameter name and the value by an equal sign '=' like this:\n\n<pre class=\"code\">\n  param_values.Add(&nbsp;<span style=\"color:blue;\">string</span>.Format(&nbsp;<span style=\"color:#a31515;\">&quot;{0}={1}&quot;</span>,&nbsp;\n  &nbsp;&nbsp;p.Definition.Name,&nbsp;p.AsValueString()&nbsp;)&nbsp;);\n</pre>\n\nThat leads to the following structure for the return value:\n\n<pre class=\"code\">\n  <span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n  &nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n  &nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&gt;&gt;\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_cat_to_uid_to_param_values;\n</pre>\n\nFinally, we have several different possibilities to retrieve the parameters from the element.\n\nTwo obvious choices are to use the `Element` `Parameters` property that retrieves a set containing all the parameters.\n\nAnother one offered by the API is the `GetOrderedParameters` method that gets the visible parameters in the order they appear in the UI.\n\nFinally, you can attempt to retrieve values for all the built-in parameters; this approach is used by\nthe [RevitLookup snooping tool](https://github.com/jeremytammik/RevitLookup) and\nthe [BipChecker](https://github.com/jeremytammik/BipChecker) built-in parameter checker.\n\n\n####<a name=\"5\"></a>Retrieve Parameter Values from an Element\n\nBased on the choices described above, and opting for the simplest solution, we retrieve the parameter values from a given element like this:\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;all&nbsp;the&nbsp;parameter&nbsp;values&nbsp;&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;deemed&nbsp;relevant&nbsp;for&nbsp;the&nbsp;given&nbsp;element</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;in&nbsp;string&nbsp;form.</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;GetParamValues(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Two&nbsp;choices:&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Element.Parameters&nbsp;property&nbsp;--&nbsp;Retrieves&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;a&nbsp;set&nbsp;containing&nbsp;all&nbsp;&nbsp;the&nbsp;parameters.</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;GetOrderedParameters&nbsp;method&nbsp;--&nbsp;Gets&nbsp;the&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;visible&nbsp;parameters&nbsp;in&nbsp;order.</span>\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">Parameter</span>&gt;&nbsp;ps&nbsp;=&nbsp;e.GetOrderedParameters();\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;param_values&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;ps.Count&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Parameter</span>&nbsp;p&nbsp;<span style=\"color:blue;\">in</span>&nbsp;ps)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;AsValueString&nbsp;displays&nbsp;the&nbsp;value&nbsp;as&nbsp;the&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;user&nbsp;sees&nbsp;it.&nbsp;In&nbsp;some&nbsp;cases,&nbsp;the&nbsp;underlying</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;database&nbsp;value&nbsp;returned&nbsp;by&nbsp;AsInteger,&nbsp;AsDouble,</span>\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;etc.,&nbsp;may&nbsp;be&nbsp;more&nbsp;relevant.</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;param_values.Add(&nbsp;<span style=\"color:blue;\">string</span>.Format(&nbsp;<span style=\"color:#a31515;\">&quot;{0}={1}&quot;</span>,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.Definition.Name,&nbsp;p.AsValueString()&nbsp;)&nbsp;);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;param_values;\n}\n</pre>\n\n\n####<a name=\"6\"></a>FilterCategoryRule versus Category Filters\n\nBefore we can retrieve the parameter data from the elements, we need to retrieve the elements from the Revit database.\n\nAs always, this is achieved using a filtered element collector.\n\nJust last week,\nwe [clarified the use of the `FilterCategoryRule` class](http://thebuildingcoder.typepad.com/blog/2018/05/how-to-use-filtercategoryrule.html).\n\nThat discussion led me to believe that it could be used to achieve exactly what I need, filtering for all elements belonging to a given list of categories.\n\nI implemented that code, and it does not seem to do what I expect at all.\n\nIn fact, the following code appears to be returning all elements, including those with null categories:\n\n<pre class=\"code\">\n<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ElementId</span>&gt;&nbsp;ids\n&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">BuiltInCategory</span>&gt;(&nbsp;cats&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.ConvertAll&lt;<span style=\"color:#2b91af;\">ElementId</span>&gt;(&nbsp;c\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;c&nbsp;)&nbsp;);\n \n<span style=\"color:#2b91af;\">FilterCategoryRule</span>&nbsp;r&nbsp;\n&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilterCategoryRule</span>(&nbsp;ids&nbsp;);\n \n<span style=\"color:#2b91af;\">ElementParameterFilter</span>&nbsp;f\n&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementParameterFilter</span>(&nbsp;r,&nbsp;<span style=\"color:blue;\">true</span>&nbsp;);\n \n<span style=\"color:green;\">//&nbsp;Run&nbsp;the&nbsp;collector</span>\n \n<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;els\n&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsNotElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsViewIndependent()\n&nbsp;&nbsp;&nbsp;&nbsp;.WherePasses(&nbsp;f&nbsp;);\n</pre>\n\nIn the end, I resorted to using my tried and proven technique using a logical `OR` of individual category filters instead, like this:\n\n<pre class=\"code\">\n<span style=\"color:green;\">//&nbsp;Use&nbsp;a&nbsp;logical&nbsp;OR&nbsp;of&nbsp;category&nbsp;filters</span>\n \n<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">ElementFilter</span>&gt;&nbsp;a\n&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ElementFilter</span>&gt;(&nbsp;cats.Length&nbsp;);\n \n<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>&nbsp;bic&nbsp;<span style=\"color:blue;\">in</span>&nbsp;cats&nbsp;)\n{\n&nbsp;&nbsp;a.Add(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementCategoryFilter</span>(&nbsp;bic&nbsp;)&nbsp;);\n}\n \n<span style=\"color:#2b91af;\">LogicalOrFilter</span>&nbsp;categoryFilter\n&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">LogicalOrFilter</span>(&nbsp;a&nbsp;);\n \n<span style=\"color:green;\">//&nbsp;Run&nbsp;the&nbsp;collector</span>\n \n<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;els\n&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsNotElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsViewIndependent()\n&nbsp;&nbsp;&nbsp;&nbsp;.WherePasses(&nbsp;categoryFilter&nbsp;);\n</pre>\n\nIt is shorter, and, above all, it works!\n\n\n####<a name=\"7\"></a>Category Description Extension Method\n\nFinally, in order to define the key string for the category dictionary, I implemented a little helper method on the built-in category enum:\n\n<pre class=\"code\">\n<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">class</span>&nbsp;<span style=\"color:#2b91af;\">JtBuiltInCategoryExtensionMethods</span>\n{\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;a&nbsp;descriptive&nbsp;string&nbsp;for&nbsp;a&nbsp;built-in&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;category&nbsp;by&nbsp;removing&nbsp;the&nbsp;trailing&nbsp;plural&nbsp;&#39;s&#39;&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;and&nbsp;the&nbsp;OST_&nbsp;prefix.</span>\n&nbsp;&nbsp;<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:blue;\">static</span>&nbsp;<span style=\"color:blue;\">string</span>&nbsp;Description(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">this</span>&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>&nbsp;bic&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;s&nbsp;=&nbsp;bic.ToString().ToLower();\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;s.Substring(&nbsp;4&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Assert(&nbsp;s.EndsWith(&nbsp;<span style=\"color:#a31515;\">&quot;s&quot;</span>&nbsp;),&nbsp;<span style=\"color:#a31515;\">&quot;expected&nbsp;plural&nbsp;suffix&nbsp;&#39;s&#39;&quot;</span>&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;s&nbsp;=&nbsp;s.Substring(&nbsp;0,&nbsp;s.Length&nbsp;-&nbsp;1&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;s;\n&nbsp;&nbsp;}\n}\n</pre>\n\nAs explained in the comment, it returns a descriptive string for a built-in category enumeration value by removing its trailing plural 's' and 'OST_' prefix.\n\n\n####<a name=\"8\"></a>Retrieve Parameter Data for all Elements of Given Categories\n\nWith these helper methods in place, we can retrieve the parameter data for all elements of a given list categories like this:\n\n<pre class=\"code\">\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;Return&nbsp;parameter&nbsp;data&nbsp;for&nbsp;all&nbsp;&nbsp;</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;elements&nbsp;of&nbsp;all&nbsp;the&nbsp;given&nbsp;categories</span>\n<span style=\"color:gray;\">///</span><span style=\"color:green;\">&nbsp;</span><span style=\"color:gray;\">&lt;/</span><span style=\"color:gray;\">summary</span><span style=\"color:gray;\">&gt;</span>\n<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&gt;&gt;\n&nbsp;&nbsp;GetParamValuesForCats(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Document</span>&nbsp;doc,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>[]&nbsp;cats&nbsp;)\n{\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Set&nbsp;up&nbsp;the&nbsp;return&nbsp;value&nbsp;dictionary</span>\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&gt;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_cat_to_uid_to_param_values\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&gt;&gt;();\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;One&nbsp;top&nbsp;level&nbsp;dictionary&nbsp;per&nbsp;category</span>\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>&nbsp;cat&nbsp;<span style=\"color:blue;\">in</span>&nbsp;cats&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;map_cat_to_uid_to_param_values.Add(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat.Description(),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&gt;()&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Collect&nbsp;all&nbsp;required&nbsp;elements</span>\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;The&nbsp;FilterCategoryRule&nbsp;as&nbsp;used&nbsp;here&nbsp;seems&nbsp;to&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;have&nbsp;no&nbsp;filtering&nbsp;effect&nbsp;at&nbsp;all!&nbsp;</span>\n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;It&nbsp;passes&nbsp;every&nbsp;single&nbsp;element,&nbsp;afaict.&nbsp;</span>\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ElementId</span>&gt;&nbsp;ids\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">BuiltInCategory</span>&gt;(&nbsp;cats&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ConvertAll&lt;<span style=\"color:#2b91af;\">ElementId</span>&gt;(&nbsp;c\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementId</span>(&nbsp;(<span style=\"color:blue;\">int</span>)&nbsp;c&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilterCategoryRule</span>&nbsp;r&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilterCategoryRule</span>(&nbsp;ids&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">ElementParameterFilter</span>&nbsp;f\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementParameterFilter</span>(&nbsp;r,&nbsp;<span style=\"color:blue;\">true</span>&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Use&nbsp;a&nbsp;logical&nbsp;OR&nbsp;of&nbsp;category&nbsp;filters</span>\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">IList</span>&lt;<span style=\"color:#2b91af;\">ElementFilter</span>&gt;&nbsp;a\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:#2b91af;\">ElementFilter</span>&gt;(&nbsp;cats.Length&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>&nbsp;bic&nbsp;<span style=\"color:blue;\">in</span>&nbsp;cats&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;a.Add(&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">ElementCategoryFilter</span>(&nbsp;bic&nbsp;)&nbsp;);\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">LogicalOrFilter</span>&nbsp;categoryFilter\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">LogicalOrFilter</span>(&nbsp;a&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Run&nbsp;the&nbsp;collector</span>\n \n&nbsp;&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>&nbsp;els\n&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">FilteredElementCollector</span>(&nbsp;doc&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsNotElementType()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WhereElementIsViewIndependent()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.WherePasses(&nbsp;categoryFilter&nbsp;);\n \n&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;Retrieve&nbsp;parameter&nbsp;data&nbsp;for&nbsp;each&nbsp;element</span>\n \n&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:#2b91af;\">Element</span>&nbsp;e&nbsp;<span style=\"color:blue;\">in</span>&nbsp;els&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Category</span>&nbsp;cat&nbsp;=&nbsp;e.Category;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;<span style=\"color:blue;\">null</span>&nbsp;==&nbsp;cat&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#a31515;\">&quot;element&nbsp;{0}&nbsp;{1}&nbsp;has&nbsp;null&nbsp;category&quot;</span>,&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.Id,&nbsp;e.Name&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">continue</span>;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;param_values&nbsp;=&nbsp;GetParamValues(&nbsp;e&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">BuiltInCategory</span>&nbsp;bic&nbsp;=&nbsp;(<span style=\"color:#2b91af;\">BuiltInCategory</span>)&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(e.Category.Id.IntegerValue);\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;catkey&nbsp;=&nbsp;bic.Description();\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;uid&nbsp;=&nbsp;e.UniqueId;\n \n&nbsp;&nbsp;&nbsp;&nbsp;map_cat_to_uid_to_param_values[catkey].Add(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uid,&nbsp;param_values&nbsp;);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;map_cat_to_uid_to_param_values;\n}\n</pre>\n\n\n####<a name=\"9\"></a>External Command Execute Mainline\n\nThe code to run and test this is trivial:\n\n<pre class=\"code\">\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&gt;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_cat_to_uid_to_param_values;\n<span style=\"color:blue;\">#endif</span>&nbsp;<span style=\"color:green;\">//&nbsp;PARAMETER_NAMES_ARE_UNIQUE</span>\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_cat_to_uid_to_param_values&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;GetParamValuesForCats(&nbsp;doc,&nbsp;_cats&nbsp;);\n</pre>\n\nDisplaying some relevant portion of the results takes much more:\n\n<pre class=\"code\">\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;keys&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;(&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_cat_to_uid_to_param_values.Keys&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.Sort();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">foreach</span>(&nbsp;<span style=\"color:blue;\">string</span>&nbsp;key&nbsp;<span style=\"color:blue;\">in</span>&nbsp;keys&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Dictionary</span>&lt;<span style=\"color:blue;\">string</span>,&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&gt;&nbsp;els&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&nbsp;map_cat_to_uid_to_param_values[key];\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">int</span>&nbsp;n&nbsp;=&nbsp;els.Count;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;<span style=\"color:#a31515;\">&quot;{0}&nbsp;({1}&nbsp;element{2}){3}&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key,&nbsp;n,&nbsp;<span style=\"color:#2b91af;\">Util</span>.PluralSuffix(&nbsp;n&nbsp;),&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Util</span>.DotOrColon(&nbsp;n&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;0&nbsp;&lt;&nbsp;n&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;uids&nbsp;=&nbsp;<span style=\"color:blue;\">new</span>&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;(&nbsp;els.Keys&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;uid&nbsp;=&nbsp;uids[0];\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">List</span>&lt;<span style=\"color:blue;\">string</span>&gt;&nbsp;param_values&nbsp;=&nbsp;els[uid];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param_values.Sort();\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;=&nbsp;param_values.Count;\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;&nbsp;first&nbsp;element&nbsp;{0}&nbsp;has&nbsp;{1}&nbsp;parameter{2}{3}&quot;</span>,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uid,&nbsp;n,&nbsp;<span style=\"color:#2b91af;\">Util</span>.PluralSuffix(&nbsp;n&nbsp;),\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">Util</span>.DotOrColon(&nbsp;n&nbsp;)&nbsp;);\n \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param_values.ForEach(&nbsp;pv\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=&gt;&nbsp;<span style=\"color:#2b91af;\">Debug</span>.Print(&nbsp;<span style=\"color:#a31515;\">&quot;&nbsp;&nbsp;&nbsp;&nbsp;&quot;</span>&nbsp;+&nbsp;pv&nbsp;)&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n</pre>\n\n\n####<a name=\"10\"></a>Sample Run Results\n\nIn my test run, I am interested only in door, room and window categories.\n\nFrom the results, I just display the numbers of elements retrieved, and the parameter values for one single sample element.\n\nRunning it in the Revit basic sample project displays the following in the Visual Studio debug output window:\n\n<pre>\ndoor (16 elements):\n  first element 59371552-5800-43eb-9ba3-609565158fc5-00067242 has 11 parameters:\n    Comments = \n    Finish = \n    Frame Material = \n    Frame Type = \n    Head Height = 2100\n    Image = <None>\n    Level = Level 1\n    Mark = \n    Phase Created = Working Drawings\n    Phase Demolished = None\n    Sill Height = 0\nroom (14 elements):\n  first element e6ac360b-aaed-4c3b-a130-36b4c2ac9d13-000d1467 has 21 parameters:\n    Area = 27 m²\n    Base Finish = \n    Base Offset = 0\n    Ceiling Finish = \n    Comments = \n    Computation Height = 0\n    Department = \n    Floor Finish = \n    Image = <None>\n    Level = Level 2\n    Limit Offset = 6500\n    Name = \n    Number = \n    Occupancy = \n    Occupant = \n    Perimeter = 29060\n    Phase = Working Drawings\n    Unbounded Height = 6500\n    Upper Limit = Level 2\n    Volume = 118.32 m³\n    Wall Finish = \nwindow (17 elements):\n  first element 6cbabf1d-e8d0-47f0-ac4d-9a7923128d37-0006fb07 has 22 parameters:\n    Bottom Hung Casement = No\n    Casement Pivot = No\n    Casement Swing in Plan = No\n    Casement = SH_Aluminum, Anodized Black\n    Comments = \n    Frame = SH_Aluminum, Anodized Black\n    Glass = <By Category>\n    Head Height = 2700\n    Height = 2700\n    Image = <None>\n    Install Depth (from outside) = 80\n    Level = Level 2\n    Mark = \n    Phase Created = Working Drawings\n    Phase Demolished = None\n    Rough Height = 2700\n    Rough Width = 1500\n    Sill Height = 0\n    Top Hung Casement = Yes\n    Width = 1500\n    Window Cill Exterior = SH_Aluminum, Anodized Black\n    Window Cill Interior = Wood_Walnut black\n</pre>\n\n\n####<a name=\"11\"></a>Download\n\nI added this code to the\nnew [module CmdParamValuesForCats.cs](https://github.com/jeremytammik/the_building_coder_samples/blob/master/BuildingCoder/BuildingCoder/CmdParamValuesForCats.cs)\nin [The Building Coder samples](https://github.com/jeremytammik/the_building_coder_samples)\n[release 2019.0.140.0](https://github.com/jeremytammik/the_building_coder_samples/releases/tag/2019.0.140.0).\n\nI hope you find it useful.\n\n<center>\n<img src=\"img/meta_editor.png\" alt=\"Forge meta property editor\" width=\"401\"/>\n</center>"
  }
]