[
  {
    "original_filename": "1813_torsion_tools",
    "header_text": "Introduction",
    "local_header_href": "#introduction",
    "chunk_text": "<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<link rel=\"stylesheet\" type=\"text/css\" href=\"bc.css\">\n<script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\" type=\"text/javascript\"></script>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</head>\n\n<!---\n\n- Ahmed Nabil suggested a neat method to detect when a specific command is launched by checking for its name in the DocumentChanged event:\n  Group Edit Event\n  https://forums.autodesk.com/t5/revit-api-forum/group-edit-event/m-p/8169237\n\n- SelectableInViewFilter\n  https://www.revitapidocs.com/2018.2/4def5498-f47f-870c-ea25-0408b6603dac.htm\n\n- access project location in forge\n  [Q] I am working with Forge and I have a JSON file of the models, but there is no Location information inside that file. I can only access the project information’s address, but that isn’t what I want. \n  Is there a way to get the Location info inside the JSON file during the conversion? I mean, the location info you have in Revit at:\n  Manage > Project location section > Location\n  [A] I can only suggest that you explore the Forge JSON and SVF data further and search deeper.\n  If the project information is not present there, I would suggest that you export it from the RVT using the Revit API.\n  You can do so either on the desktop in an installed Revit session, or in the Forge environment using the Design Automation API.\n\ntwitter:\n\n¡Muchísima suerte empezando con la Revit API!\n\nTorsion Tools, Revit 'command launched' event, accessing project location and BIM element volume in Forge DA4R and in the #RevitAPI #DynamoBim @AutodeskForge @AutodeskRevit #bim #ForgeDevCon http://bit.ly/torsiontools\n\nAs always, interesting topics keep pouring in from the Revit API discussion forum and elsewhere\n&ndash; Torsion Tools GitHub launch and solution overview\n&ndash; Detect command launch\n&ndash; SelectableInViewFilter\n&ndash; Access project location in Forge\n&ndash; Distinguish structural elements and access volume information in Forge...\n\nlinkedin:\n\nTorsion Tools, Revit 'command launched' event, accessing project location and BIM element volume in Forge DA4R and in the #RevitAPI \n\nhttp://bit.ly/torsiontools\n\nAs always, interesting topics keep pouring in from the Revit API discussion forum and elsewhere:\n\n- Torsion Tools GitHub launch and solution overview\n- Detect command launch\n- SelectableInViewFilter\n- Access project location in Forge\n- Distinguish structural elements and access volume information in Forge...\n\n#bim #DynamoBim #ForgeDevCon #Revit #API #IFC #SDK #AI #VisualStudio #Autodesk #AEC #adsk\n\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\n\n<p style=\"font-size: 80%; font-style:italic\"></p>\n\n-->"
  },
  {
    "original_filename": "1813_torsion_tools",
    "header_text": "Torsion Tools, Command Event and Info in DA4R",
    "local_header_href": "#torsion-tools-command-event-and-info-in-da4r",
    "chunk_text": "### Torsion Tools, Command Event and Info in DA4R\n\nAs always, interesting topics keep pouring in from\nthe [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) and\nelsewhere:\n\n- [Torsion Tools GitHub launch and solution overview](#2)\n- [Detect command launch](#3)\n- [SelectableInViewFilter](#4)\n- [Access project location in Forge](#5)\n- [Distinguish structural elements and access volume information in Forge](#6)"
  },
  {
    "original_filename": "1813_torsion_tools",
    "header_text": "<a name=\"2\"></a>Torsion Tools GitHub Launch and Solution Overview",
    "local_header_href": "#a-name2atorsion-tools-github-launch-and-solution-overview",
    "chunk_text": "#### <a name=\"2\"></a>Torsion Tools GitHub Launch and Solution Overview\n\nA recent [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\nannounces the [Torsion Tools GitHub launch and basic solution overview](https://forums.autodesk.com/t5/revit-api-forum/torsion-tools-github-launch-and-basic-solution-overview/m-p/9254509):\n\n> I wanted to share my Autodesk Revit 2020 API Visual Studio Solution Template with Code Examples for Common Tools.\n\n> The intent of the repository is to help provide Revit API support and to share code examples and solutions for common issues or time-consuming tasks in Revit.\nI will provide examples and tools of items as I have created and use them, and then other are free to manipulate them to fit how they need them to work, but without any expressed or implied warranty and/or guarantee of functionality or errors.\nI think this will be the best way to share some of the work I have done without having to create installers for every single tool or publishing everything to the Autodesk App Store.\n\n- [TorsionTools GitHub repository](https://github.com/TorsionTools/R20)\n- [Six-minute video recording on YouTube](https://youtu.be/3EVx9SzKJbk):\n\n<center>\n<iframe width=\"480\" height=\"270\" src=\"https://www.youtube.com/embed/3EVx9SzKJbk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</center>\n\nMany thanks to Torsion Tools for sharing and documenting this!"
  },
  {
    "original_filename": "1813_torsion_tools",
    "header_text": "<a name=\"3\"></a>Detect Command Launch",
    "local_header_href": "#a-name3adetect-command-launch",
    "chunk_text": "#### <a name=\"3\"></a>Detect Command Launch\n\nIn the [Revit API discussion forum](http://forums.autodesk.com/t5/revit-api-forum/bd-p/160) thread\non a [group edit event](https://forums.autodesk.com/t5/revit-api-forum/group-edit-event/m-p/8169237),\n[Ahmed Nabil](https://www.linkedin.com/in/anabil1) suggested\na neat method to detect when a specific command is launched by checking for its name in the `DocumentChanged` event:\n\n**Question:** Is it possible somehow to know when a user enters the group edit mode? \n\n**Answer:** You can do this by handling the `DocumentChanged` event and checking if the transaction name is \"Edit Group\":\n\n<pre class=\"code\">\n&nbsp;&nbsp;<span style=\"color:blue;\">public</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>&nbsp;OnStartup(&nbsp;<span style=\"color:#2b91af;\">UIControlledApplication</span>&nbsp;a&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;a.ControlledApplication.DocumentChanged\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+=&nbsp;ControlledApplication_DocumentChanged;\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">return</span>&nbsp;<span style=\"color:#2b91af;\">Result</span>.Succeeded;\n&nbsp;&nbsp;}\n \n&nbsp;&nbsp;<span style=\"color:blue;\">private</span>&nbsp;<span style=\"color:blue;\">void</span>&nbsp;ControlledApplication_DocumentChanged(\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">object</span>&nbsp;sender,\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#2b91af;\">DocumentChangedEventArgs</span>&nbsp;e&nbsp;)\n&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">string</span>&nbsp;txname&nbsp;=&nbsp;e.GetTransactionNames()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.FirstOrDefault();\n \n&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:blue;\">if</span>(&nbsp;txname&nbsp;==&nbsp;<span style=\"color:#a31515;\">&quot;Edit&nbsp;Group&quot;</span>&nbsp;)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:green;\">//&nbsp;user&nbsp;enters&nbsp;Edit&nbsp;Group&nbsp;</span>\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n</pre>\n\nThis event is fired both on entering the Edit Group (under the transaction name \"Edit Group\") and on exiting it (under the transaction name \"Finish Edit Group\").\n\nThank you, Ahmed, for the nice solution!"
  },
  {
    "original_filename": "1813_torsion_tools",
    "header_text": "<a name=\"4\"></a>SelectableInViewFilter",
    "local_header_href": "#a-name4aselectableinviewfilter",
    "chunk_text": "#### <a name=\"4\"></a>SelectableInViewFilter\n\nI never before noticed, much less used, the [SelectableInViewFilter](https://www.revitapidocs.com/2018.2/4def5498-f47f-870c-ea25-0408b6603dac.htm):\n\n> A filter that passes elements that are selectable in the given view.\n\n> This filter is a slow filter... This filter is designed to operate on a list of elements visible in the given view. This can be obtained from a `FilteredElementCollector` constructed with the view id. This filter may not correctly restrict elements which are not a part of the visible elements of the view.\n\nSounds pretty interesting, and useful...\n\nDo you happen to have any interesting examples?"
  },
  {
    "original_filename": "1813_torsion_tools",
    "header_text": "<a name=\"5\"></a>Access Project Location in Forge",
    "local_header_href": "#a-name5aaccess-project-location-in-forge",
    "chunk_text": "#### <a name=\"5\"></a>Access Project Location in Forge\n\n**Question:** I am working with Forge and I have a JSON file of the model, but there is no Location information inside that file.\nI can only access the project information address, but that isn’t what I want. \nIs there a way to get the Location info inside the JSON file during the conversion?\nI mean, the location info you have in Revit at:\n\n-  Manage &rarr; Project location section &rarr; Location\n\n**Answer:** I can only suggest that you explore the Forge JSON and SVF data further and search deeper.\nIf the project information is not present there, I would suggest that you export it from the RVT using the Revit API and store it somewhere else in your own data.\nYou can do so either on the desktop in an installed Revit session, or in the Forge environment using the Design Automation API."
  },
  {
    "original_filename": "1813_torsion_tools",
    "header_text": "<a name=\"6\"></a>Distinguish Structural Elements and Access Volume Information in Forge",
    "local_header_href": "#a-name6adistinguish-structural-elements-and-access-volume-information-in-forge",
    "chunk_text": "#### <a name=\"6\"></a>Distinguish Structural Elements and Access Volume Information in Forge\n\n**Question:** I heard that one way to distinguish structural elements in a model authored by Revit was that they would possess a volume property.\n \nHowever, I have encountered Revit models that do not contain a volume property on elements that should have one.\nThey are indeed structural elements. Have you encountered this problem? Could it be caused by a problem in Revit, or is it more likely to be an error when the client enters the data for the model? Is there any other way we could determine a structural element?\n \nThe second issue I have is that I inevitably have to support models that are authored by other programs that do not provide a volume property. I imagine it will be very difficult, if not impossible, to find a solution that can cover all possible authoring programs. One thing I was hoping that might be a workaround is to use the Design Automation API to process \"other\" models with Revit. Would this be possible? This would only be a solution provided we can solve the first issue of reliably distinguishing structural elements.\n \n**Answer:** You can easily and reliably distinguishing structural elements in a Revit model by simply checking their `Category` property.\n\nIf a CAD model produced by a third party can be imported properly into Revit so that structural elements are correctly recognised, they will also be equipped with the appropriate category.\n\nI would definitely not try to use the volume property to distinguishing structural elements.\nAll BIM elements that have a volume can be equipped with a property reporting its value.\nThat property is in no way whatsoever specific to structural elements.\n\nIf you really are interested in the volume of an element for other reasons, please read on. Else, you can skip the following:\n\nMany Revit elements may include a pre-calculated volume property. Its value may be unreliable. In the Revit API, I would recommend calculating the volume of an element by querying the element solid for its volume, not using any data stored in the pre-calculated element properties.\n \nHowever, the main part of the question is on how to achieve this with non-Revit models.\nI see no problem, and only one obvious answer: grab the geometry from the model in any format you can get, assembly solids from those, and query their volume. If you can import the models in Revit, then it is fine, otherwise of course you would require a robust solid modeler library to achieve this.\n \nRetrieving the solid geometry from an element and querying its volume is an operation that the Forge Design Automation for Revit will support.\nSeveral discussions by The Building Coder deal with determining areas and volumes of BIM elements using the desktop Revit API, e.g.:\n\n- [Calculating gross and net wall areas](https://thebuildingcoder.typepad.com/blog/2015/03/calculating-gross-and-net-wall-areas.html)\n- [Gross and net wall area calculation enhancement](https://thebuildingcoder.typepad.com/blog/2015/04/gross-and-net-wall-area-calculation-enhancement-and-events.html)\n \nThe same processing can also be performed in [Forge Design Automation for Revit (DA4R)](https://thebuildingcoder.typepad.com/blog/about-the-author.html#5.55).\n\n<center>\n<img src=\"img/steel_frame.jpg\" alt=\"Steel frame\" title=\"Steel frame\" width=\"400\"/> <!-- 800 -->\n</center>"
  }
]